_DWORD *WebKit::WebSWServerConnection::unsubscribeFromPushService(WebKit::WebSWServerConnection *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  _DWORD *v7;
  _DWORD *Registration;
  _DWORD *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  __int128 v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  _DWORD *result;
  uint64_t v17;
  WTF::StringImpl *v18;
  __int128 v19;
  __int128 v20;
  char v21;

  v7 = *(_DWORD **)(*((_QWORD *)a1 + 3) + 8);
  ++*v7;
  Registration = (_DWORD *)WebCore::SWServer::getRegistration();
  if (Registration)
  {
    v9 = Registration;
    ++*Registration;
    WTF::RefCounted<WebCore::SWServer>::deref(v7);
    if (WebKit::WebSWServerConnection::session(a1))
    {
      v10 = WebKit::WebSWServerConnection::session(a1) + 832;
      v11 = (WTF::StringImpl *)*((_QWORD *)v9 + 13);
      if (v11)
        *(_DWORD *)v11 += 2;
      v18 = v11;
      v12 = *((_OWORD *)v9 + 8);
      v19 = *((_OWORD *)v9 + 7);
      v20 = v12;
      WebKit::NetworkNotificationManager::unsubscribeFromPushService(v10, (uint64_t *)&v18, a3, 1, a4);
      v14 = v18;
      v18 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      LOBYTE(v18) = 8;
      DWORD2(v19) = 1;
      v15 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v15 + 16))(v15, &v18);
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      if (DWORD2(v19) != -1)
        ((void (*)(char *, WTF::StringImpl **))off_1E3505E38[DWORD2(v19)])(&v21, &v18);
    }
    return WTF::RefCounted<WebCore::SWServerRegistration>::deref(v9);
  }
  else
  {
    WTF::RefCounted<WebCore::SWServer>::deref(v7);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v18) = 8;
    DWORD2(v19) = 1;
    v17 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v17 + 16))(v17, &v18);
    result = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    if (DWORD2(v19) != -1)
      return (_DWORD *)((uint64_t (*)(char *, WTF::StringImpl **))off_1E3505E38[DWORD2(v19)])(&v21, &v18);
  }
  return result;
}

_DWORD *WebKit::WebSWServerConnection::getPushSubscription(WebKit::WebSWServerConnection *a1, uint64_t a2, uint64_t *a3)
{
  _DWORD *v5;
  _DWORD *Registration;
  _DWORD *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  __int128 v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  _DWORD *result;
  uint64_t v15;
  char v16;
  WTF::StringImpl *v17;
  _OWORD v18[5];
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = *(_DWORD **)(*((_QWORD *)a1 + 3) + 8);
  ++*v5;
  Registration = (_DWORD *)WebCore::SWServer::getRegistration();
  if (Registration)
  {
    v7 = Registration;
    ++*Registration;
    WTF::RefCounted<WebCore::SWServer>::deref(v5);
    if (WebKit::WebSWServerConnection::session(a1))
    {
      v8 = WebKit::WebSWServerConnection::session(a1) + 832;
      v9 = (WTF::StringImpl *)*((_QWORD *)v7 + 13);
      if (v9)
        *(_DWORD *)v9 += 2;
      v17 = v9;
      v10 = *((_OWORD *)v7 + 8);
      v18[0] = *((_OWORD *)v7 + 7);
      v18[1] = v10;
      WebKit::NetworkNotificationManager::getPushSubscription(v8, (uint64_t *)&v17, a3);
      v12 = v17;
      v17 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v11);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      LOBYTE(v18[0]) = 8;
      v19 = 1;
      v13 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v13 + 16))(v13, &v17);
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      if (v19 != -1)
        ((void (*)(char *, _OWORD *))off_1E3505E78[v19])(&v16, v18);
    }
    return WTF::RefCounted<WebCore::SWServerRegistration>::deref(v7);
  }
  else
  {
    WTF::RefCounted<WebCore::SWServer>::deref(v5);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v18[0]) = 8;
    v19 = 1;
    v15 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v15 + 16))(v15, &v17);
    result = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    if (v19 != -1)
      return (_DWORD *)((uint64_t (*)(char *, _OWORD *))off_1E3505E78[v19])(&v16, v18);
  }
  return result;
}

_DWORD *WebKit::WebSWServerConnection::getPushPermissionState(WebKit::WebSWServerConnection *a1, uint64_t a2, uint64_t *a3)
{
  _DWORD *v5;
  _DWORD *Registration;
  _DWORD *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  __int128 v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  _DWORD *result;
  uint64_t v15;
  WTF::StringImpl *v16;
  __int128 v17;
  __int128 v18;
  char v19;

  v5 = *(_DWORD **)(*((_QWORD *)a1 + 3) + 8);
  ++*v5;
  Registration = (_DWORD *)WebCore::SWServer::getRegistration();
  if (Registration)
  {
    v7 = Registration;
    ++*Registration;
    WTF::RefCounted<WebCore::SWServer>::deref(v5);
    if (WebKit::WebSWServerConnection::session(a1))
    {
      v8 = WebKit::WebSWServerConnection::session(a1) + 832;
      v9 = (WTF::StringImpl *)*((_QWORD *)v7 + 13);
      if (v9)
        *(_DWORD *)v9 += 2;
      v16 = v9;
      v10 = *((_OWORD *)v7 + 8);
      v17 = *((_OWORD *)v7 + 7);
      v18 = v10;
      WebKit::NetworkNotificationManager::getPushPermissionState(v8, (uint64_t *)&v16, a3);
      v12 = v16;
      v16 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v11);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      LOBYTE(v16) = 8;
      DWORD2(v17) = 1;
      v13 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v13 + 16))(v13, &v16);
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      if (DWORD2(v17) != -1)
        ((void (*)(char *, WTF::StringImpl **))off_1E3505E88[DWORD2(v17)])(&v19, &v16);
    }
    return WTF::RefCounted<WebCore::SWServerRegistration>::deref(v7);
  }
  else
  {
    WTF::RefCounted<WebCore::SWServer>::deref(v5);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v16) = 8;
    DWORD2(v17) = 1;
    v15 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v15 + 16))(v15, &v16);
    result = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    if (DWORD2(v17) != -1)
      return (_DWORD *)((uint64_t (*)(char *, WTF::StringImpl **))off_1E3505E88[DWORD2(v17)])(&v19, &v16);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWServerConnection::contextConnectionCreated(WebKit::WebSWServerConnection *this, WebCore::SWServerToContextConnection *a2)
{
  const WebCore::RegistrableDomain *v4;
  char v5;
  IPC::Encoder *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15[8];
  uint64_t *v16;
  uint64_t *v17;

  v4 = (WebCore::SWServerToContextConnection *)((char *)a2 + 40);
  v5 = WebKit::WebSWServerConnection::computeThrottleState(*(WebKit::WebSWServerConnection **)(*((_QWORD *)this + 3) + 8), (WebCore::SWServerToContextConnection *)((char *)a2 + 40));
  WebKit::WebSWServerToContextConnection::setThrottleState(a2, v5);
  result = (IPC::Encoder *)WebKit::WebSWServerConnection::hasMatchingClient(*((WebKit::WebSWServerConnection **)this + 12), v4);
  if ((_DWORD)result)
  {
    v7 = *(_QWORD *)(*((_QWORD *)this + 10) + 8);
    if (v7)
      v8 = v7 - 48;
    else
      v8 = 0;
    v9 = *(_QWORD *)(*(_QWORD *)(v8 + 72) + 32);
    v10 = *((_QWORD *)this + 4);
    v11 = *(_QWORD *)(*((_QWORD *)a2 + 16) + 8);
    if (v11)
      v12 = v11 - 48;
    else
      v12 = 0;
    v13 = *(_QWORD *)(v12 + 256);
    v14 = v10;
    v15[0] = 1;
    v16 = &v14;
    v17 = &v13;
    return IPC::Connection::send<Messages::NetworkProcessProxy::RegisterRemoteWorkerClientProcess>(v9, (uint64_t)v15);
  }
  return result;
}

_DWORD *WebKit::WebSWServerConnection::terminateWorkerFromClient(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  _DWORD *result;
  _DWORD *v6;

  WebCore::SWServer::workerByID();
  if (v6)
  {
    WebCore::SWServerWorker::terminate();
  }
  else
  {
    v4 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  result = v6;
  if (v6)
    return WTF::RefCounted<WebCore::SWServerWorker>::deref(v6);
  return result;
}

_DWORD *WebKit::WebSWServerConnection::whenServiceWorkerIsTerminatedForTesting(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v8;

  v4 = (_DWORD *)WebCore::SWServerWorker::existingWorkerForIdentifier();
  if (v4)
  {
    v5 = v4;
    ++*v4;
    if (v4[61] == 2)
    {
      v6 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
    else
    {
      WebCore::SWServerWorker::whenTerminated();
    }
    return WTF::RefCounted<WebCore::SWServerWorker>::deref(v5);
  }
  else
  {
    v8 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    return (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
}

_DWORD *WebKit::WebSWServerConnection::fetchTaskTimedOut(uint64_t a1)
{
  _DWORD *v1;
  _DWORD *result;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v1 = *(_DWORD **)(*(_QWORD *)(a1 + 24) + 8);
  ++*v1;
  WebCore::SWServer::workerByID();
  result = WTF::RefCounted<WebCore::SWServer>::deref(v1);
  if (v5)
  {
    *(_BYTE *)(v5 + 377) = 1;
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v3 = off_1E3506028;
    v4 = v3;
    WebCore::SWServerWorker::terminate();
    if (v4)
      (*(void (**)(_QWORD *))(*v4 + 8))(v4);
    return WTF::RefCounted<WebCore::SWServerWorker>::deref((_DWORD *)v5);
  }
  return result;
}

WTF::StringImpl *WebKit::WebSWServerConnection::enableNavigationPreload(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _DWORD *v4;
  WebCore::SWServerRegistration *Registration;
  WebCore::SWServerRegistration *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  uint64_t v11;
  WTF::StringImpl *v12;
  char v13[8];
  WTF::StringImpl *v14;
  char v15;

  v4 = *(_DWORD **)(*(_QWORD *)(a1 + 24) + 8);
  ++*v4;
  Registration = (WebCore::SWServerRegistration *)WebCore::SWServer::getRegistration();
  if (Registration)
  {
    v6 = Registration;
    ++*(_DWORD *)Registration;
    WTF::RefCounted<WebCore::SWServer>::deref(v4);
    WebCore::SWServerRegistration::enableNavigationPreload(v6);
    v7 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 16))(v7, v13);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (v15)
    {
      v9 = v14;
      v14 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v8);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
    return (WTF::StringImpl *)WTF::RefCounted<WebCore::SWServerRegistration>::deref(v6);
  }
  else
  {
    WTF::RefCounted<WebCore::SWServer>::deref(v4);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v13[0] = 8;
    v15 = 1;
    v11 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v11 + 16))(v11, v13);
    result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (v15)
    {
      result = v14;
      v14 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebSWServerConnection::disableNavigationPreload(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _DWORD *v4;
  WebCore::SWServerRegistration *Registration;
  WebCore::SWServerRegistration *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  uint64_t v11;
  WTF::StringImpl *v12;
  char v13[8];
  WTF::StringImpl *v14;
  char v15;

  v4 = *(_DWORD **)(*(_QWORD *)(a1 + 24) + 8);
  ++*v4;
  Registration = (WebCore::SWServerRegistration *)WebCore::SWServer::getRegistration();
  if (Registration)
  {
    v6 = Registration;
    ++*(_DWORD *)Registration;
    WTF::RefCounted<WebCore::SWServer>::deref(v4);
    WebCore::SWServerRegistration::disableNavigationPreload(v6);
    v7 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 16))(v7, v13);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (v15)
    {
      v9 = v14;
      v14 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v8);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
    return (WTF::StringImpl *)WTF::RefCounted<WebCore::SWServerRegistration>::deref(v6);
  }
  else
  {
    WTF::RefCounted<WebCore::SWServer>::deref(v4);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v13[0] = 8;
    v15 = 1;
    v11 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v11 + 16))(v11, v13);
    result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (v15)
    {
      result = v14;
      v14 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebSWServerConnection::setNavigationPreloadHeaderValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  _DWORD *v5;
  _DWORD *Registration;
  _DWORD *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  uint64_t v12;
  WTF::StringImpl *v13;
  char v14[8];
  WTF::StringImpl *v15;
  char v16;

  v5 = *(_DWORD **)(*(_QWORD *)(a1 + 24) + 8);
  ++*v5;
  Registration = (_DWORD *)WebCore::SWServer::getRegistration();
  if (Registration)
  {
    v7 = Registration;
    ++*Registration;
    WTF::RefCounted<WebCore::SWServer>::deref(v5);
    WebCore::SWServerRegistration::setNavigationPreloadHeaderValue();
    v8 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v8 + 16))(v8, v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v16)
    {
      v10 = v15;
      v15 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v9);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
    return (WTF::StringImpl *)WTF::RefCounted<WebCore::SWServerRegistration>::deref(v7);
  }
  else
  {
    WTF::RefCounted<WebCore::SWServer>::deref(v5);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v14[0] = 8;
    v16 = 1;
    v12 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v12 + 16))(v12, v14);
    result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (v16)
    {
      result = v15;
      v15 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

_DWORD *WebKit::WebSWServerConnection::getNavigationPreloadState(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _DWORD *v4;
  _DWORD *Registration;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *result;
  uint64_t v10;
  char v11[8];
  _DWORD *v12;
  int v13;
  char v14;

  v4 = *(_DWORD **)(*(_QWORD *)(a1 + 24) + 8);
  ++*v4;
  Registration = (_DWORD *)WebCore::SWServer::getRegistration();
  if (Registration)
  {
    v6 = Registration;
    ++*Registration;
    WTF::RefCounted<WebCore::SWServer>::deref(v4);
    v11[0] = *((_BYTE *)v6 + 376);
    v7 = (_DWORD *)*((_QWORD *)v6 + 48);
    if (v7)
      *v7 += 2;
    v12 = v7;
    v13 = 0;
    v8 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v8 + 16))(v8, v11);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v13 != -1)
      ((void (*)(char *, char *))off_1E3505E98[v13])(&v14, v11);
    return WTF::RefCounted<WebCore::SWServerRegistration>::deref(v6);
  }
  else
  {
    WTF::RefCounted<WebCore::SWServer>::deref(v4);
    v11[0] = 8;
    v12 = 0;
    v13 = 1;
    v10 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v10 + 16))(v10, v11);
    result = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (v13 != -1)
      return (_DWORD *)((uint64_t (*)(char *, char *))off_1E3505E98[v13])(&v14, v11);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWServerConnection::focusServiceWorkerClient(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *result;
  WTF *v13;
  void *v14;
  _QWORD v15[2];
  IPC::Encoder *v16;

  v5 = a1 + 56;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 56) + 56))(a1 + 56);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2676;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v16 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::encode((IPC::Encoder *)v7, a2);
  v8 = *a3;
  *a3 = 0;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = &off_1E3506050;
  v9[1] = v8;
  v15[0] = v9;
  v15[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD *, _QWORD))(*(_QWORD *)v5 + 40))(v5, &v16, v15, 0);
  v11 = v15[0];
  v15[0] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t *WebKit::WebSWServerConnection::gatherClientData@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t *result;
  uint64_t *v6;
  _DWORD *v7;

  result = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>((uint64_t *)(a1 + 96), a2);
  v6 = *(uint64_t **)(a1 + 96);
  if (v6)
    v6 += 12 * *((unsigned int *)v6 - 1);
  if (v6 == result)
  {
    *a3 = 0;
    a3[288] = 0;
  }
  else
  {
    v7 = *(_DWORD **)(*(_QWORD *)(a1 + 24) + 8);
    ++*v7;
    WebCore::SWServer::gatherClientData();
    return (uint64_t *)WTF::RefCounted<WebCore::SWServer>::deref(v7);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWServerConnection::updateBackgroundFetchRegistration(WebKit::WebSWServerConnection *this, const WebCore::BackgroundFetchInformation *a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v3 = (char *)this + 56;
  v4 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 7) + 56))((char *)this + 56);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2689;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebCore::BackgroundFetchInformation,void>::encode((IPC::Encoder *)v5, a2);
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v3 + 32))(v3, &v10, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t WebKit::WebSWServerConnection::retrieveRecordResponseBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;

  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  v5 = *(unsigned int **)(a1 + 8);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v7 = &off_1E3506078;
  v7[1] = v5;
  v7[2] = a3;
  v9 = v7;
  WebCore::SWServer::Connection::retrieveRecordResponseBody();
  result = (uint64_t)v9;
  if (v9)
    return (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  return result;
}

uint64_t WebKit::WebSWServerConnection::messageSenderConnection(WebKit::WebSWServerConnection *this)
{
  return *((_QWORD *)this + 11);
}

uint64_t WebKit::WebSWServerConnection::messageSenderDestinationID(WebKit::WebSWServerConnection *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebKit::WebSWServerConnection::messageSenderConnection(WebKit::WebSWServerConnection *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t `non-virtual thunk to'WebKit::WebSWServerConnection::messageSenderDestinationID(WebKit::WebSWServerConnection *this)
{
  return 0;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  char v9;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD *)(a1 + 88);
    do
    {
      if (*((_QWORD *)v4 - 9) != -1)
      {
        v5 = *v4;
        if ((_DWORD)v5 != -1)
          ((void (*)(char *, _DWORD *))off_1E3505E48[v5])(&v8, v4 - 6);
        *v4 = -1;
        v6 = *(v4 - 8);
        if ((_DWORD)v6 != -1)
          ((void (*)(char *, _DWORD *))off_1E3505E48[v6])(&v9, v4 - 14);
        *(v4 - 8) = -1;
      }
      v4 += 24;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>><void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>,WTF::HashTableTraits>::take(_QWORD *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *a2;
  if (*a2)
    v3 += 16 * *(unsigned int *)(v3 - 4);
  if ((_QWORD *)v3 == a3)
  {
    *a1 = 0;
    return;
  }
  v4 = a3[1];
  a3[1] = 0;
  *a1 = v4;
  if (*a2)
  {
    v5 = *a2 + 16 * *(unsigned int *)(*a2 - 4);
    if ((_QWORD *)v5 == a3)
      return;
  }
  else
  {
    if (!a3)
      return;
    v5 = 0;
  }
  if ((_QWORD *)v5 != a3)
  {
    *a3 = -1;
    a3[1] = 0;
    ++*(_DWORD *)(*a2 - 16);
    v6 = *a2;
    v7 = *a2 ? *(_DWORD *)(v6 - 12) - 1 : -1;
    *(_DWORD *)(v6 - 12) = v7;
    v8 = *a2;
    if (*a2)
    {
      v9 = 6 * *(_DWORD *)(v8 - 12);
      v10 = *(_DWORD *)(v8 - 4);
      if (v9 < v10 && v10 >= 9)
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(a2, v10 >> 1);
    }
  }
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 16 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = v5;
    while (1)
    {
      v13 = (uint64_t *)(v4 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = (uint64_t *)(v17 + 16 * v24);
          v27 = v26[1];
          v26[1] = 0;
          if (v27)
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
          *v26 = *v13;
          v28 = v4 + 16 * v11;
          v29 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          v26[1] = v29;
          v16 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (!v16)
            goto LABEL_20;
LABEL_19:
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          goto LABEL_20;
        }
        v15 = v4 + 16 * v11;
        v16 = *(_QWORD *)(v15 + 8);
        *(_QWORD *)(v15 + 8) = 0;
        if (v16)
          goto LABEL_19;
      }
LABEL_20:
      if (++v11 == v12)
        goto LABEL_23;
    }
  }
  if (v4)
LABEL_23:
    WTF::fastFree((WTF *)(v4 - 16), v8);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebSWServerConnection::resolveUnregistrationJobInClient(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ServiceWorkerRegistrationKey const&,BOOL)::$_0,void,std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3505EB8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWServerConnection::resolveUnregistrationJobInClient(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ServiceWorkerRegistrationKey const&,BOOL)::$_0,void,std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3505EB8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWServerConnection::resolveUnregistrationJobInClient(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ServiceWorkerRegistrationKey const&,BOOL)::$_0,void,std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v3[16];
  int v4;
  char v5;

  v3[0] = *(_BYTE *)(a1 + 16);
  v4 = 0;
  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v1 + 16))(v1, v3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  if (v4 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E3505E38[v4])(&v5, v3);
  return result;
}

char *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::ServiceWorkerRegistrationState,std::optional<WebCore::ServiceWorkerData> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::ServiceWorkerRegistrationState,std::optional<WebCore::ServiceWorkerData> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t v4;

  v4 = **a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  LOBYTE(v4) = *((_BYTE *)a2 + 8);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  return IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerData>,void>::encode<IPC::Encoder,std::optional<WebCore::ServiceWorkerData> const&>(a1, (uint64_t)a2[2]);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWClientConnection::SetServiceWorkerClientIsControlled,WebKit::WebSWServerConnection::controlClient(WebKit::NetworkResourceLoadParameters const&,WebCore::SWServerRegistration &,WebCore::ResourceRequest const&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_1>(WebKit::WebSWServerConnection::controlClient(WebKit::NetworkResourceLoadParameters const&,WebCore::SWServerRegistration &,WebCore::ResourceRequest const&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E3505EE0;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWClientConnection::SetServiceWorkerClientIsControlled,WebKit::WebSWServerConnection::controlClient(WebKit::NetworkResourceLoadParameters const&,WebCore::SWServerRegistration &,WebCore::ResourceRequest const&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_1>(WebKit::WebSWServerConnection::controlClient(WebKit::NetworkResourceLoadParameters const&,WebCore::SWServerRegistration &,WebCore::ResourceRequest const&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E3505EE0;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWClientConnection::SetServiceWorkerClientIsControlled,WebKit::WebSWServerConnection::controlClient(WebKit::NetworkResourceLoadParameters const&,WebCore::SWServerRegistration &,WebCore::ResourceRequest const&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_1>(WebKit::WebSWServerConnection::controlClient(WebKit::NetworkResourceLoadParameters const&,WebCore::SWServerRegistration &,WebCore::ResourceRequest const&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t result, uint64_t *a2)
{
  _QWORD *v2;
  unsigned __int16 v3;
  char v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (_QWORD *)result;
  if (a2 && *a2)
  {
    v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2);
    v4 = v3;
    v5 = v3;
    v6 = v2[2];
    result = v2[3];
    if (v5 < 0x100)
    {
      if (!v6)
        return result;
      goto LABEL_11;
    }
    if (v6 && !v4)
    {
LABEL_11:
      if (!*(_QWORD *)(v6 + 8))
        return result;
      return WebKit::WebSWServerConnection::unregisterServiceWorkerClient(result, v2 + 4);
    }
  }
  else
  {
    v7 = *(_QWORD *)(result + 16);
    if (v7 && *(_QWORD *)(v7 + 8))
    {
      result = *(_QWORD *)(result + 24);
      return WebKit::WebSWServerConnection::unregisterServiceWorkerClient(result, v2 + 4);
    }
  }
  return result;
}

_DWORD *WTF::RefCounted<WebCore::SWServerWorker>::deref(_DWORD *result)
{
  WTF *v1;
  void *v2;

  if (*result == 1)
  {
    v1 = (WTF *)MEMORY[0x19AEAE65C]();
    return (_DWORD *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebSWServerConnection::startFetch(WebKit::ServiceWorkerFetchTask &,WebCore::SWServerWorker &)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = &off_1E3505F08;
  v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWServerConnection::startFetch(WebKit::ServiceWorkerFetchTask &,WebCore::SWServerWorker &)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = &off_1E3505F08;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebSWServerConnection::startFetch(WebKit::ServiceWorkerFetchTask &,WebCore::SWServerWorker &)::$_0,void,BOOL>::call(_QWORD *result, char a2)
{
  uint64_t v2;
  WebKit::ServiceWorkerFetchTask *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  WebKit::ServiceWorkerFetchTask *v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  WebCore::SWServerWorker *v19;
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = result[3];
  if (v2)
  {
    v3 = *(WebKit::ServiceWorkerFetchTask **)(v2 + 8);
    if (v3)
    {
      v4 = result;
      v5 = result[1];
      if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
      {
        v7 = result[2];
        ++*(_DWORD *)(v6 + 16);
        if ((a2 & 1) != 0)
        {
          v8 = *(_DWORD **)(*(_QWORD *)(v7 + 24) + 8);
          ++*v8;
          WebCore::SWServer::workerByID();
          if (v19 && !*((_BYTE *)v19 + 377))
          {
            if (!WebCore::SWServerWorker::contextConnection(v19))
            {
              WebCore::SWServerWorker::serviceWorkerPageIdentifier(v19);
              WebCore::SWServer::createContextConnection();
            }
            v13 = v4[3];
            v14 = v4[1];
            v4[1] = 0;
            v4[3] = 0;
            v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
            *v15 = &off_1E3505F30;
            v15[1] = v14;
            v15[2] = v7;
            v15[3] = v13;
            v18 = v15;
            WebCore::SWServer::runServiceWorkerIfNecessary();
            if (v18)
              (*(void (**)(_QWORD *))(*v18 + 8))(v18);
          }
          else
          {
            v9 = v4[3];
            if (v9)
              v10 = *(WebKit::ServiceWorkerFetchTask **)(v9 + 8);
            else
              v10 = 0;
            WebKit::ServiceWorkerFetchTask::cannotHandle(v10);
          }
          if (v19)
            WTF::RefCounted<WebCore::SWServerWorker>::deref(v19);
          result = WTF::RefCounted<WebCore::SWServer>::deref(v8);
        }
        else
        {
          v11 = qword_1ECE71848;
          if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_ERROR))
          {
            v16 = *((_QWORD *)v3 + 5);
            *(_DWORD *)buf = 134218240;
            v21 = v7;
            v22 = 2048;
            v23 = v16;
            _os_log_error_impl(&dword_196BCC000, v11, OS_LOG_TYPE_ERROR, "%p - WebSWServerConnection::startFetch: fetchIdentifier=%llu DidNotHandle because worker did not become activated", buf, 0x16u);
            v17 = v4[3];
            if (v17)
              v3 = *(WebKit::ServiceWorkerFetchTask **)(v17 + 8);
            else
              v3 = 0;
          }
          result = (_QWORD *)WebKit::ServiceWorkerFetchTask::cannotHandle(v3);
        }
        v12 = *(_DWORD *)(v6 + 16);
        if (!v12)
        {
          __break(0xC471u);
          JUMPOUT(0x19782684CLL);
        }
        *(_DWORD *)(v6 + 16) = v12 - 1;
      }
      else
      {
        return (_QWORD *)WebKit::ServiceWorkerFetchTask::cannotHandle(v3);
      }
    }
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit21WebSWServerConnection10startFetchERNS2_22ServiceWorkerFetchTaskERN7WebCore14SWServerWorkerEEN3__0clEbEUlPT_E_vJPNS6_27SWServerToContextConnectionEEED1Ev(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = &off_1E3505F30;
  v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit21WebSWServerConnection10startFetchERNS2_22ServiceWorkerFetchTaskERN7WebCore14SWServerWorkerEEN3__0clEbEUlPT_E_vJPNS6_27SWServerToContextConnectionEEED0Ev(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = &off_1E3505F30;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit21WebSWServerConnection10startFetchERNS2_22ServiceWorkerFetchTaskERN7WebCore14SWServerWorkerEEN3__0clEbEUlPT_E_vJPNS6_27SWServerToContextConnectionEEE4callESE_(_QWORD *result, WebKit::WebSWServerToContextConnection *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  NSObject *v9;
  char *v10;
  uint64_t v11;
  int v12;
  char *v13;
  void *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF *v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  char *v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = result[3];
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = result;
      v5 = result[1];
      if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
      {
        v8 = result[2];
        ++*(_DWORD *)(v6 + 16);
        v9 = qword_1ECE71848;
        if (a2)
        {
          if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_DEFAULT))
          {
            v10 = *(char **)(v3 + 40);
            v11 = *(_QWORD *)(v3 + 56);
            *(_DWORD *)buf = 134218496;
            v19 = v8;
            v20 = 2048;
            v21 = v10;
            v22 = 2048;
            v23 = v11;
            _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "%p - WebSWServerConnection::startFetch: Starting fetch %llu via service worker %llu", buf, 0x20u);
            v3 = *(_QWORD *)(v4[3] + 8);
          }
          result = WebKit::ServiceWorkerFetchTask::start((WebKit::ServiceWorkerFetchTask *)v3, a2);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_ERROR))
          {
            WTF::String::number(*(WTF::String **)(v3 + 40));
            WTF::String::utf8();
            if (v17)
              v13 = (char *)v17 + 16;
            else
              v13 = 0;
            *(_DWORD *)buf = 134218242;
            v19 = v8;
            v20 = 2080;
            v21 = v13;
            _os_log_error_impl(&dword_196BCC000, v9, OS_LOG_TYPE_ERROR, "%p - WebSWServerConnection::startFetch: fetchIdentifier=%s DidNotHandle because failed to run service worker", buf, 0x16u);
            if (v17)
            {
              if (*(_DWORD *)v17 == 1)
                WTF::fastFree(v17, v14);
              else
                --*(_DWORD *)v17;
            }
            if (v16)
            {
              if (*(_DWORD *)v16 == 2)
                WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v14);
              else
                *(_DWORD *)v16 -= 2;
            }
            v15 = v4[3];
            if (v15)
              v3 = *(_QWORD *)(v15 + 8);
            else
              v3 = 0;
          }
          result = (_QWORD *)WebKit::ServiceWorkerFetchTask::cannotHandle((WebKit::ServiceWorkerFetchTask *)v3);
        }
        v12 = *(_DWORD *)(v6 + 16);
        if (!v12)
        {
          __break(0xC471u);
          JUMPOUT(0x197826BF8);
        }
        *(_DWORD *)(v6 + 16) = v12 - 1;
      }
      else
      {
        return (_QWORD *)WebKit::ServiceWorkerFetchTask::cannotHandle((WebKit::ServiceWorkerFetchTask *)v3);
      }
    }
  }
  return result;
}

_DWORD *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebSWServerConnection::postMessageToServiceWorker(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::MessageWithMessagePorts &&,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>> const&)::$_0,WebKit::WebSWServerConnection::postMessageToServiceWorker(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::MessageWithMessagePorts &,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>> const)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID> const&>(uint64_t *a1)
{
  uint64_t v1;
  _DWORD *result;
  _DWORD *v3;
  __int128 v4;
  uint64_t v5;
  char v6;
  __int128 v7;
  _DWORD *v8;
  __int128 v9;
  __int128 v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = *a1;
  result = (_DWORD *)WebCore::SWServer::workerByID();
  if (v5)
  {
    v7 = *(_OWORD *)(v5 + 104);
    v3 = *(_DWORD **)(v5 + 120);
    if (v3)
      *v3 += 2;
    v8 = v3;
    v4 = *(_OWORD *)(v5 + 144);
    v9 = *(_OWORD *)(v5 + 128);
    v10 = v4;
    v11 = *(_WORD *)(v5 + 160);
    v12 = 0;
    std::optional<std::variant<WebCore::ServiceWorkerData,WebCore::ServiceWorkerClientData>>::operator=[abi:sn180100]<std::variant<WebCore::ServiceWorkerData,WebCore::ServiceWorkerClientData>,void>(*(_QWORD *)(v1 + 8), (uint64_t)&v7);
    if (v12 != -1)
      ((void (*)(char *, __int128 *))off_1E3505E58[v12])(&v6, &v7);
    return WTF::RefCounted<WebCore::SWServerWorker>::deref((_DWORD *)v5);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebSWServerConnection::postMessageToServiceWorker(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::MessageWithMessagePorts &&,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>> const&)::$_0,WebKit::WebSWServerConnection::postMessageToServiceWorker(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::MessageWithMessagePorts &,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>> const)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID> const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;
  void *v4;
  _DWORD *v5;
  _DWORD *v6;
  char v8;
  __int128 v9;
  __int128 v10;
  _OWORD v11[2];
  __int16 v12;
  _DWORD *v13;
  __int128 v14;
  __int128 v15;
  _DWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _OWORD v25[2];
  __int16 v26;
  _DWORD *v27;
  __int128 v28;
  __int128 v29;
  _DWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _BYTE v37[40];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = a2[1];
  v9 = *a2;
  v10 = v3;
  WebCore::SWServerWorker::findClientByIdentifier();
  if (v37[16])
  {
    v11[0] = v25[0];
    v11[1] = v25[1];
    v12 = v26;
    v5 = v27;
    if (v27)
      *v27 += 2;
    v13 = v5;
    v14 = v28;
    v15 = v29;
    v6 = v30;
    if (v30)
      *v30 += 2;
    v16 = v6;
    v17 = v31;
    v18 = v32;
    v19 = v33;
    v20 = v34;
    v22 = v36;
    v21 = v35;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v23, (uint64_t)v37);
    v24 = 1;
    std::optional<std::variant<WebCore::ServiceWorkerData,WebCore::ServiceWorkerClientData>>::operator=[abi:sn180100]<std::variant<WebCore::ServiceWorkerData,WebCore::ServiceWorkerClientData>,void>(*(_QWORD *)(v2 + 24), (uint64_t)v11);
    if (v24 != -1)
      ((void (*)(char *, _OWORD *))off_1E3505E58[v24])(&v8, v11);
  }
  return std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v25, v4);
}

uint64_t std::optional<std::variant<WebCore::ServiceWorkerData,WebCore::ServiceWorkerClientData>>::operator=[abi:sn180100]<std::variant<WebCore::ServiceWorkerData,WebCore::ServiceWorkerClientData>,void>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;

  if (!*(_BYTE *)(a1 + 208))
  {
    *(_BYTE *)a1 = 0;
    *(_DWORD *)(a1 + 192) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ServiceWorkerData,WebCore::ServiceWorkerClientData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ServiceWorkerData,WebCore::ServiceWorkerClientData>,(std::__variant_detail::_Trait)1>>(a1, a2);
    *(_BYTE *)(a1 + 208) = 1;
    return a1;
  }
  v3 = *(unsigned int *)(a1 + 192);
  v4 = *(unsigned int *)(a2 + 192);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return a1;
LABEL_7:
    v6 = a1;
    ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E3505F58[v4])(&v6, a1, a2);
    return a1;
  }
  if ((_DWORD)v4 != -1)
    goto LABEL_7;
  ((void (*)(char *, uint64_t, uint64_t))off_1E3505E58[v3])(&v7, a1, a2);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore17ServiceWorkerDataENS8_23ServiceWorkerClientDataEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSH_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSP_EEEDcSH_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char v7;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 192);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      *(_OWORD *)a2 = *(_OWORD *)a3;
      WTF::URL::operator=(a2 + 16, (WTF::StringImpl *)(a3 + 16));
      *(_WORD *)(a2 + 56) = *(_WORD *)(a3 + 56);
      return;
    }
    ((void (*)(char *, uint64_t))off_1E3505E58[v5])(&v7, v4);
  }
  *(_DWORD *)(v4 + 192) = -1;
  *(_OWORD *)v4 = *(_OWORD *)a3;
  WTF::URL::URL(v4 + 16, (uint64_t *)(a3 + 16));
  *(_WORD *)(v4 + 56) = *(_WORD *)(a3 + 56);
  *(_DWORD *)(v4 + 192) = 0;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore17ServiceWorkerDataENS8_23ServiceWorkerClientDataEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSH_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSP_EEEDcSH_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  WTF *result;
  char v14;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 192);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(char *, uint64_t))off_1E3505E58[v5])(&v14, v4);
LABEL_7:
    *(_DWORD *)(v4 + 192) = -1;
    result = (WTF *)std::__variant_detail::__alt<1ul,WebCore::ServiceWorkerClientData>::__alt[abi:sn180100]<WebCore::ServiceWorkerClientData>(v4, (__int128 *)a3);
    *(_DWORD *)(v4 + 192) = 1;
    return result;
  }
  v7 = *(_OWORD *)a3;
  v8 = *(_OWORD *)(a3 + 16);
  *(_WORD *)(a2 + 32) = *(_WORD *)(a3 + 32);
  *(_OWORD *)a2 = v7;
  *(_OWORD *)(a2 + 16) = v8;
  WTF::URL::operator=(a2 + 40, (WTF::StringImpl *)(a3 + 40));
  WTF::URL::operator=(a2 + 80, (WTF::StringImpl *)(a3 + 80));
  v9 = *(_OWORD *)(a3 + 136);
  v10 = *(_OWORD *)(a3 + 152);
  v11 = *(_QWORD *)(a3 + 168);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a3 + 120);
  *(_QWORD *)(a2 + 168) = v11;
  *(_OWORD *)(a2 + 152) = v10;
  *(_OWORD *)(a2 + 136) = v9;
  v12 = *(unsigned int *)(a2 + 188);
  if ((_DWORD)v12)
    WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)(a2 + 176), (WTF::StringImpl *)(*(_QWORD *)(a2 + 176) + 8 * v12));
  return WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a2 + 176, (_DWORD *)(a3 + 176));
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWServerConnection::postMessageToServiceWorker(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::MessageWithMessagePorts &&,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>> const&)::$_2,void,WebCore::SWServerToContextConnection *>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  char v9;
  WebCore::SerializedScriptValue *v10;

  *(_QWORD *)a1 = &off_1E3505F78;
  v3 = *(unsigned int *)(a1 + 240);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E3505E58[v3])(&v9, a1 + 48);
  *(_DWORD *)(a1 + 240) = -1;
  v4 = *(WTF **)(a1 + 32);
  if (v4)
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v10 = (WebCore::SerializedScriptValue *)v5;
      WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v10);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWServerConnection::postMessageToServiceWorker(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::MessageWithMessagePorts &&,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>> const&)::$_2,void,WebCore::SWServerToContextConnection *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  char v9;
  WebCore::SerializedScriptValue *v10;

  *(_QWORD *)this = &off_1E3505F78;
  v3 = *((unsigned int *)this + 60);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E3505E58[v3])(&v9, (char *)this + 48);
  *((_DWORD *)this + 60) = -1;
  v4 = (WTF *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v10 = (WebCore::SerializedScriptValue *)v5;
      WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v10);
    }
  }
  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebSWServerConnection::postMessageToServiceWorker(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::MessageWithMessagePorts &&,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>> const&)::$_2,void,WebCore::SWServerToContextConnection *>::call(IPC::Encoder *result, uint64_t a2)
{
  IPC::Encoder *v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void *v10;
  WTF *v11;
  void *v12;
  uint64_t *v13;
  uint64_t *v14;
  IPC::Encoder *v15;

  if (a2)
  {
    v2 = result;
    v3 = (uint64_t *)((char *)result + 24);
    v4 = (_QWORD *)((char *)result + 48);
    v5 = a2 + 104;
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a2 + 104) + 56))(a2 + 104);
    v7 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v7 = 2708;
    *(_QWORD *)(v7 + 8) = v6;
    *(_QWORD *)(v7 + 528) = v7 + 16;
    *(_QWORD *)(v7 + 536) = v7 + 16;
    *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v7 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
    v15 = (IPC::Encoder *)v7;
    v8 = *((_QWORD *)v2 + 2);
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 8uLL, 8) = v8;
    IPC::ArgumentCoder<WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,void>::encode<IPC::Encoder,WebCore::SerializedScriptValue>((IPC::Encoder *)v7, v3);
    IPC::VectorArgumentCoder<false,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v7, (uint64_t)v2 + 32);
    v9 = *((unsigned __int8 *)v2 + 240);
    *IPC::Encoder::grow((IPC::Encoder *)v7, 1uLL, 1) = v9;
    if (v9 == 1)
    {
      if (*((_DWORD *)v2 + 60) == 1)
      {
        IPC::ArgumentCoder<WebCore::ServiceWorkerClientData,void>::encode((IPC::Encoder *)v7, (uint64_t)v4);
LABEL_8:
        (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v15, 0);
        result = v15;
        v15 = 0;
        if (result)
        {
          IPC::Encoder::~Encoder(result, v10);
          return (IPC::Encoder *)WTF::fastFree(v11, v12);
        }
        return result;
      }
    }
    else
    {
      if (v9)
        goto LABEL_8;
      if (!*((_DWORD *)v2 + 60))
      {
        IPC::ArgumentCoder<WebCore::ServiceWorkerData,void>::encode((IPC::Encoder *)v7, v4);
        goto LABEL_8;
      }
    }
    v13 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>(v13, v14);
  }
  return result;
}

uint64_t *WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *result;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  int v17;
  BOOL v18;
  int v20;
  __int16 v21;
  char v22;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v20 = -1640531527;
  v21 = 0;
  v22 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v20, a2);
  v6 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v20);
  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  v10 = v6 & v5;
  result = (uint64_t *)(v2 + 96 * (v6 & v5));
  v12 = *result;
  v13 = result[1];
  v14 = v13 == v8 && v12 == v7;
  v15 = result[2];
  if (!v14 || v15 != v9)
  {
    v17 = 1;
    while (v12 | v13 || v15)
    {
      v10 = (v10 + v17) & v5;
      result = (uint64_t *)(v2 + 96 * v10);
      v12 = *result;
      v13 = result[1];
      v18 = v13 == v8 && v12 == v7;
      v15 = result[2];
      ++v17;
      if (v18 && v15 == v9)
        return result;
    }
    if (*a1)
      return (uint64_t *)(*a1 + 96 * *(unsigned int *)(*a1 - 4));
    else
      return 0;
  }
  return result;
}

_DWORD *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebSWServerConnection::clientURLFromIdentifier(std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>)::$_0,WebKit::WebSWServerConnection::clientURLFromIdentifier(std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>> &>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  _DWORD *v4;
  __int128 v5;
  uint64_t v7;

  v3 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 24) + 8);
  ++*v3;
  WebCore::SWServer::workerByID();
  WTF::RefCounted<WebCore::SWServer>::deref(v3);
  if (v7)
  {
    v4 = *(_DWORD **)(v7 + 120);
    if (v4)
      *v4 += 2;
    *(_QWORD *)a2 = v4;
    v5 = *(_OWORD *)(v7 + 128);
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(v7 + 144);
    *(_OWORD *)(a2 + 8) = v5;
    return WTF::RefCounted<WebCore::SWServerWorker>::deref((_DWORD *)v7);
  }
  else
  {
    *(_QWORD *)a2 = 0;
    WTF::URL::invalidate((WTF::URL *)a2);
    return 0;
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebSWServerConnection::clientURLFromIdentifier(std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>)::$_0,WebKit::WebSWServerConnection::clientURLFromIdentifier(std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>> &>@<X0>(uint64_t **a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  _DWORD *v9;
  void *v10;
  _DWORD *v11;
  __int128 v12;
  _OWORD v14[2];
  _BYTE v15[40];
  _DWORD *v16;
  __int128 v17;
  __int128 v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = a2[1];
  v14[0] = *a2;
  v14[1] = v5;
  v6 = *v4;
  v7 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>((uint64_t *)(*v4 + 96), (uint64_t *)v14);
  v8 = *(uint64_t **)(v6 + 96);
  if (v8)
    v8 += 12 * *((unsigned int *)v8 - 1);
  if (v8 == v7)
  {
    *(_QWORD *)a3 = 0;
    return WTF::URL::invalidate((WTF::URL *)a3);
  }
  else
  {
    v9 = *(_DWORD **)(*(_QWORD *)(v6 + 24) + 8);
    ++*v9;
    WebCore::SWServer::serviceWorkerClientWithOriginByID();
    WTF::RefCounted<WebCore::SWServer>::deref(v9);
    if (v19)
    {
      v11 = v16;
      if (v16)
        *v16 += 2;
      *(_QWORD *)a3 = v11;
      v12 = v18;
      *(_OWORD *)(a3 + 8) = v17;
      *(_OWORD *)(a3 + 24) = v12;
    }
    else
    {
      *(_QWORD *)a3 = 0;
      WTF::URL::invalidate((WTF::URL *)a3);
    }
    return std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15, v10);
  }
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::expand(uint64_t *a1)
{
  uint64_t v1;
  unsigned int v2;
  int v3;

  v1 = *a1;
  if (*a1 && (v3 = *(_DWORD *)(v1 - 4)) != 0)
    v2 = v3 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v3));
  else
    v2 = 8;
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(a1, v2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebSWServerConnection::postMessageToServiceWorkerClient(WebCore::ProcessQualified<WTF::UUID>,WebCore::MessageWithMessagePorts const&,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&)::$_0,void,WebCore::ProcessQualified<WTF::UUID>,WebCore::MessageWithMessagePorts const&,WebCore::ServiceWorkerData const&,WTF::String const&>::call(uint64_t a1, _OWORD *a2, uint64_t *a3, __int128 *a4, uint64_t *a5)
{
  __int128 v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  WTF::StringImpl *result;
  __int128 v14;
  WTF::StringImpl *v15;
  __int128 v16;
  __int128 v17;
  __int16 v18;
  uint64_t *v19[4];
  IPC::Encoder *v20;
  _OWORD v21[2];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a2[1];
  v21[0] = *a2;
  v21[1] = v5;
  v14 = *a4;
  v6 = (WTF::StringImpl *)*((_QWORD *)a4 + 2);
  if (v6)
    *(_DWORD *)v6 += 2;
  v15 = v6;
  v16 = *(__int128 *)((char *)a4 + 24);
  v17 = *(__int128 *)((char *)a4 + 40);
  v18 = *((_WORD *)a4 + 28);
  v7 = *(_QWORD *)(a1 + 8);
  v19[0] = (uint64_t *)v21;
  v19[1] = a3;
  v19[2] = (uint64_t *)&v14;
  v19[3] = a5;
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2681;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v20 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::UUID> const&,WebCore::MessageWithMessagePorts const&,WebCore::ServiceWorkerData const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::UUID> const&,WebCore::MessageWithMessagePorts const&,WebCore::ServiceWorkerData const&,WTF::String const&>,0ul,1ul,2ul,3ul>((IPC::Encoder *)v8, v19);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v7 + 56) + 32))(v7 + 56, &v20, 0);
  v10 = v20;
  v20 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v9);
    WTF::fastFree(v11, v12);
  }
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int v29;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  unsigned int v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  int v62;
  __int16 v63;
  char v64;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastMalloc((WTF *)((96 * a2) | 0x10));
  if (a2)
  {
    v9 = a2;
    v10 = (_OWORD *)(result + 48);
    do
    {
      *((_QWORD *)v10 - 4) = 0;
      *((_QWORD *)v10 - 3) = 0;
      *((_QWORD *)v10 - 2) = 0;
      *v10 = 0uLL;
      v10[1] = 0uLL;
      v10[2] = 0uLL;
      v10[3] = 0uLL;
      v10 += 6;
      --v9;
    }
    while (v9);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    v51 = v5;
    v52 = v4;
    do
    {
      v14 = v4 + 96 * v11;
      v15 = *(_QWORD *)(v14 + 16);
      if (v15 != -1)
      {
        if (v15)
          v16 = 0;
        else
          v16 = *(_OWORD *)v14 == 0;
        if (v16)
        {
          v17 = v4 + 96 * v11;
          v20 = *(_DWORD *)(v17 + 88);
          v19 = (_DWORD *)(v17 + 88);
          v18 = v20;
          if (v20 != -1)
            ((void (*)(char *, uint64_t))off_1E3505E48[v18])(&v56, v4 + 96 * v11 + 64);
          *v19 = -1;
          v21 = v4 + 96 * v11;
          v24 = *(_DWORD *)(v21 + 56);
          v23 = (_DWORD *)(v21 + 56);
          v22 = v24;
          if (v24 != -1)
            ((void (*)(char *, _DWORD *))off_1E3505E48[v22])(&v57, v19 - 14);
          *v23 = -1;
        }
        else
        {
          v25 = *a1;
          v55 = v12;
          if (*a1)
            v26 = *(_DWORD *)(v25 - 8);
          else
            v26 = 0;
          v62 = -1640531527;
          v63 = 0;
          v64 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v62, (_QWORD *)(v4 + 96 * v11));
          v27 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v62);
          v28 = 0;
          do
          {
            v29 = v27 & v26;
            v12 = v25 + 96 * (v27 & v26);
            v27 = ++v28 + (v27 & v26);
          }
          while (*(_OWORD *)v12 != 0 || *(_QWORD *)(v12 + 16) != 0);
          v31 = v25 + 96 * v29;
          v34 = *(_DWORD *)(v31 + 88);
          v33 = (_DWORD *)(v31 + 88);
          v32 = v34;
          if (v34 != -1)
            ((void (*)(char *, uint64_t))off_1E3505E48[v32])(&v58, v25 + 96 * v29 + 64);
          *v33 = -1;
          v35 = v25 + 96 * v29;
          v38 = *(_DWORD *)(v35 + 56);
          v37 = (_DWORD *)(v35 + 56);
          v36 = v38;
          if (v38 != -1)
            ((void (*)(char *, _DWORD *))off_1E3505E48[v36])(&v59, v33 - 14);
          *v37 = -1;
          v39 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)v12 = *(_OWORD *)v14;
          *(_OWORD *)(v12 + 16) = v39;
          v40 = v4 + 96 * v11;
          *((_BYTE *)v33 - 56) = 0;
          *v37 = -1;
          v41 = v40 + 32;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)(v33 - 14), v40 + 32);
          v42 = v25 + 96 * v29;
          v43 = v40 + 64;
          *(_BYTE *)(v42 + 64) = 0;
          *v33 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v42 + 64, v40 + 64);
          v46 = *(_DWORD *)(v40 + 88);
          v45 = (_DWORD *)(v40 + 88);
          v44 = v46;
          if (v46 != -1)
            ((void (*)(char *, uint64_t))off_1E3505E48[v44])(&v60, v43);
          *v45 = -1;
          v4 = v52;
          v47 = v52 + 96 * v11;
          v50 = *(_DWORD *)(v47 + 56);
          v49 = (_DWORD *)(v47 + 56);
          v48 = v50;
          if (v50 != -1)
            ((void (*)(char *, uint64_t))off_1E3505E48[v48])(&v61, v41);
          *v49 = -1;
          if (v14 != a3)
            v12 = v55;
          v13 = v51;
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

WTF *WTF::VectorDestructor<true,WebCore::ServiceWorkerClientPendingMessage>::destruct(WTF *result, WTF::StringImpl *a2)
{
  WebCore::SerializedScriptValue *v2;
  WebCore::SerializedScriptValue *v3;
  WTF *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  WebCore::SerializedScriptValue *v11[7];

  if (result != a2)
  {
    v11[5] = v2;
    v11[6] = v3;
    v5 = result;
    do
    {
      v6 = (WTF::StringImpl *)*((_QWORD *)v5 + 11);
      *((_QWORD *)v5 + 11) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v7 = (WTF::StringImpl *)*((_QWORD *)v5 + 5);
      *((_QWORD *)v5 + 5) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      result = (WTF *)*((_QWORD *)v5 + 1);
      if (result)
      {
        *((_QWORD *)v5 + 1) = 0;
        *((_DWORD *)v5 + 4) = 0;
        result = (WTF *)WTF::fastFree(result, a2);
      }
      v8 = *(unsigned int **)v5;
      *(_QWORD *)v5 = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          v11[0] = (WebCore::SerializedScriptValue *)v8;
          result = WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v11);
        }
      }
      v5 = (WTF *)((char *)v5 + 96);
    }
    while (v5 != a2);
  }
  return result;
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::UUID> const&,WebCore::MessageWithMessagePorts const&,WebCore::ServiceWorkerData const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::UUID> const&,WebCore::MessageWithMessagePorts const&,WebCore::ServiceWorkerData const&,WTF::String const&>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t *v4;

  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::encode(a1, *a2);
  v4 = a2[1];
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,void>::encode<IPC::Encoder,WebCore::SerializedScriptValue>(a1, v4);
  IPC::VectorArgumentCoder<false,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(v4 + 1));
  IPC::ArgumentCoder<WebCore::ServiceWorkerData,void>::encode(a1, a2[2]);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2[3]);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebSWServerConnection::subscribeToPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *a1 = &off_1E3505FD8;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWServerConnection::subscribeToPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E3505FD8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWServerConnection::subscribeToPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  WebKit::WebSWServerConnection *v5;
  uint64_t v6;
  WebKit::WebSWServerConnection *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  _BYTE v15[80];
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4
    && (v5 = *(WebKit::WebSWServerConnection **)(v4 + 8)) != 0
    && WebKit::WebSWServerConnection::session(v5)
    && ((v6 = *(_QWORD *)(a1 + 8)) == 0 ? (v7 = 0) : (v7 = *(WebKit::WebSWServerConnection **)(v6 + 8)),
        (v8 = WebKit::WebSWServerConnection::session(v7), !*(_DWORD *)(a2 + 80)) && (v9 = *(_QWORD *)(v8 + 72)) != 0))
  {
    v15[0] = 0;
    v16 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PushSubscriptionData,WebCore::ExceptionData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PushSubscriptionData,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>>((uint64_t)v15, a2);
    v10 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    v17 = v10;
    v11 = WTF::fastMalloc((WTF *)0x68);
    *(_QWORD *)v11 = &off_1E3506000;
    *(_BYTE *)(v11 + 8) = 0;
    *(_DWORD *)(v11 + 88) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PushSubscriptionData,WebCore::ExceptionData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PushSubscriptionData,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>>(v11 + 8, (uint64_t)v15);
    v12 = v17;
    v17 = 0;
    *(_QWORD *)(v11 + 96) = v12;
    v18 = v11;
    WebKit::WebResourceLoadStatisticsStore::setMostRecentWebPushInteractionTime(v9, a1 + 24, &v18);
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    result = v17;
    v17 = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (v16 != -1)
      return ((uint64_t (*)(char *, _BYTE *))off_1E3505E68[v16])(&v19, v15);
  }
  else
  {
    v14 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, a2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWServerConnection::subscribeToPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)> &&)::$_0::operator()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)a1 = &off_1E3506000;
  v2 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E3505E68[v3])(&v5, a1 + 8);
  *(_DWORD *)(a1 + 88) = -1;
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWServerConnection::subscribeToPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)> &&)::$_0::operator()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v6;

  *(_QWORD *)this = &off_1E3506000;
  v3 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((unsigned int *)this + 22);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E3505E68[v4])(&v6, (char *)this + 8);
  *((_DWORD *)this + 22) = -1;
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWServerConnection::subscribeToPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)> &&)::$_0::operator()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, a1 + 8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWClientConnection::FocusServiceWorkerClient,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3506050;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWClientConnection::FocusServiceWorkerClient,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3506050;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWClientConnection::FocusServiceWorkerClient,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  _BYTE v7[208];
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (!a2 || !*a2 || (IPC::Decoder::decode<std::tuple<std::optional<WebCore::ServiceWorkerClientData>>>(a2, v7), !v8))
  {
    v7[0] = 0;
    v7[192] = 0;
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 16))(v6, v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    return std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v5);
  }
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 16))(v3, v7);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v8)
    return std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v5);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebSWServerConnection::retrieveRecordResponseBody(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E3506078;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWServerConnection::retrieveRecordResponseBody(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3506078;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebSWServerConnection::retrieveRecordResponseBody(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&>::call(IPC::Encoder *result, WebCore::ResourceError *a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  WTF *v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder **v14;
  IPC::Encoder *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  unsigned int *v23;
  int v24;
  unsigned __int8 **v25;
  uint64_t *v26;
  uint64_t v27;
  IPC::Encoder *v28;
  IPC::Encoder *v29;
  unsigned int *v30;
  IPC::Encoder *v31;

  v2 = *((_QWORD *)result + 1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v5 = result;
      ++*(_DWORD *)(v3 + 16);
      v6 = *((_DWORD *)a2 + 20);
      if (v6)
      {
        if (v6 != 1)
        {
          v25 = (unsigned __int8 **)std::__throw_bad_variant_access[abi:sn180100]();
          return (IPC::Encoder *)IPC::handleMessageAsync<Messages::WebSWServerConnection::ScheduleUnregisterJobInServer,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)> &&)>(v25, v26, v27);
        }
        v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 56) + 56))(v3 + 56);
        v8 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v8 = 2680;
        *(_QWORD *)(v8 + 8) = v7;
        *(_QWORD *)(v8 + 528) = v8 + 16;
        *(_QWORD *)(v8 + 536) = v8 + 16;
        *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v8 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
        v28 = (IPC::Encoder *)v8;
        v9 = *((_QWORD *)v5 + 2);
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v9;
        IPC::ArgumentCoder<WebCore::ResourceError,void>::encode((IPC::Encoder *)v8, a2);
        (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v3 + 56) + 32))(v3 + 56, &v28, 0);
        result = v28;
        v28 = 0;
        if (result)
        {
          IPC::Encoder::~Encoder(result, v10);
          result = (IPC::Encoder *)WTF::fastFree(v11, v12);
        }
      }
      else
      {
        v13 = v3 + 56;
        v14 = *(IPC::Encoder ***)a2;
        if (*(_QWORD *)a2)
          v15 = v14[6];
        else
          v15 = 0;
        *(_QWORD *)a2 = 0;
        v28 = v15;
        v29 = (IPC::Encoder *)v14;
        v30 = 0;
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 56))(v3 + 56);
        v17 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v17 = 2679;
        *(_QWORD *)(v17 + 8) = v16;
        *(_QWORD *)(v17 + 528) = v17 + 16;
        *(_QWORD *)(v17 + 536) = v17 + 16;
        *(_OWORD *)(v17 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v17 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v17);
        v31 = (IPC::Encoder *)v17;
        v18 = *((_QWORD *)v5 + 2);
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v17, 8uLL, 8) = v18;
        IPC::ArgumentCoder<IPC::SharedBufferReference,void>::encode((IPC::Encoder *)v17, (IPC::SharedBufferReference *)&v28);
        (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v13 + 32))(v3 + 56, &v31, 0);
        v20 = v31;
        v31 = 0;
        if (v20)
        {
          IPC::Encoder::~Encoder(v20, v19);
          WTF::fastFree(v21, v22);
        }
        v23 = v30;
        v30 = 0;
        if (v23)
          WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v23);
        result = v29;
        v29 = 0;
        if (result)
          result = (IPC::Encoder *)WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)result, v19);
      }
      v24 = *(_DWORD *)(v3 + 16);
      if (!v24)
      {
        __break(0xC471u);
        JUMPOUT(0x197828420);
      }
      *(_DWORD *)(v3 + 16) = v24 - 1;
    }
  }
  return result;
}

unint64_t IPC::handleMessageAsync<Messages::WebSWServerConnection::ScheduleUnregisterJobInServer,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t result;
  char v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  _QWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v7
    && (v8 = v6,
        v9 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2),
        v10)
    && (v11 = v9,
        IPC::Decoder::decode<std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>>(a2, &v23), v26))
  {
    v20 = v23;
    v21 = v24;
    v22 = v25;
    result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v13)
    {
      *(_QWORD *)&v23 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v23 + 1, a1);
      v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v14 = off_1E35060B0;
      v14[1] = v23;
      v15 = *((_QWORD *)&v23 + 1);
      *((_QWORD *)&v23 + 1) = 0;
      v14[2] = v15;
      v19 = v14;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v23 + 1);
      v23 = v20;
      v24 = v21;
      v25 = v22;
      WebKit::WebSWServerConnection::scheduleUnregisterJobInServer(a3, v8, v11, &v23, (uint64_t *)&v19);
      result = (unint64_t)v19;
      v19 = 0;
      if (result)
        return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  else
  {
    v16 = *a2;
    v17 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v18 = v17 == 0;
    else
      v18 = 1;
    if (!v18)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v16);
  }
  return result;
}

WTF::StringImpl *IPC::handleMessage<Messages::WebSWServerConnection::FinishFetchingScriptInServer,WebKit::WebSWServerConnection,WebCore::SWServer::Connection,void ()(WebCore::ServiceWorkerJobDataIdentifier const&,WebCore::ServiceWorkerRegistrationKey const&,WebCore::WorkerFetchResult &&)>(uint64_t *a1)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  char v23;
  __int16 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  __int16 v32;
  uint64_t v33;
  char v34;
  char v35;
  __int128 v36;
  _BYTE v37[24];
  int v38;
  WTF::StringImpl *v39;
  __int128 v40;
  __int128 v41;
  _OWORD v42[4];
  uint64_t v43;
  int v44;
  char v45;
  __int16 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  int v53;
  __int16 v54;
  uint64_t v55;
  char v56;
  char v57;
  _BYTE v58[32];
  WTF::StringImpl *v59;
  __int128 v60;
  __int128 v61;
  char v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebCore::RTCDataChannelIdentifier>(a1, (uint64_t)&v15);
  if (!v16)
  {
    LOBYTE(v36) = 0;
    v57 = 0;
    goto LABEL_19;
  }
  IPC::Decoder::decode<WebCore::ServiceWorkerRegistrationKey>(a1, v58);
  if (v62 && (IPC::Decoder::decode<WebCore::WorkerFetchResult>(a1, (uint64_t)&v17), v35))
  {
    if (!v16 || !v62)
      __break(1u);
    v36 = v15;
    v37[0] = 0;
    v38 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v37, (uint64_t)v58);
    v3 = v59;
    v59 = 0;
    v39 = v3;
    v40 = v60;
    v41 = v61;
    LODWORD(v60) = v60 & 0xFFFFFFFE;
    v42[0] = v17;
    v4 = v20;
    v42[2] = v19;
    v17 = 0u;
    v42[1] = v18;
    LODWORD(v18) = v18 & 0xFFFFFFFE;
    v20 = 0u;
    v42[3] = v4;
    v5 = v21;
    v21 = 0;
    v43 = v5;
    v45 = v23;
    v44 = v22;
    v46 = v24;
    v6 = v25;
    v25 = 0u;
    v7 = v26;
    v26 = 0u;
    v47 = v6;
    v48 = v7;
    v8 = v27;
    v27 = 0;
    v50 = v28;
    v51 = v29;
    LODWORD(v28) = v28 & 0xFFFFFFFE;
    v49 = v8;
    v52 = v30;
    v54 = v32;
    v53 = v31;
    v9 = v33;
    v30 = 0;
    v33 = 0;
    v55 = v9;
    v56 = v34;
    v57 = 1;
    if (v35)
      WebCore::WorkerFetchResult::~WorkerFetchResult((WebCore::WorkerFetchResult *)&v17, v2);
  }
  else
  {
    LOBYTE(v36) = 0;
    v57 = 0;
  }
  std::__optional_destruct_base<WebCore::ServiceWorkerRegistrationKey,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v58, v2);
  if (!v57)
  {
LABEL_19:
    v13 = *a1;
    v14 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (!result)
      return result;
    if (!v14)
      return result;
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v13);
    if (!v57)
      return result;
  }
  result = (WTF::StringImpl *)WebCore::SWServer::Connection::finishFetchingScriptInServer();
  if (v57)
  {
    WebCore::WorkerFetchResult::~WorkerFetchResult((WebCore::WorkerFetchResult *)v42, v11);
    result = v39;
    v39 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      else
        *(_DWORD *)result -= 2;
    }
    if (v38 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(__int128 *, _BYTE *))off_1E3506090[v38])(&v17, v37);
  }
  return result;
}

WTF *IPC::handleMessage<Messages::WebSWServerConnection::PostMessageToServiceWorker,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::MessageWithMessagePorts &&,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>> const&)>(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  char v5;
  WTF::StringImpl **v6;
  void *v7;
  __int128 v8;
  WTF *result;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  WTF::StringImpl **v20;
  WTF *v21[2];
  uint64_t v22;
  _OWORD v23[3];
  char v24;
  _OWORD v25[3];
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  if (v5)
  {
    v6 = (WTF::StringImpl **)v4;
    IPC::Decoder::decode<WebCore::MessageWithMessagePorts>(a1, (uint64_t)&v17);
    if (v19)
    {
      IPC::Decoder::decode<std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::UUID>>>(a1, v25);
      if (v26)
      {
        if (!v19)
          __break(1u);
        v20 = v6;
        v8 = v17;
        v17 = 0uLL;
        *(_OWORD *)v21 = v8;
        *(_QWORD *)&v8 = v18;
        v18 = 0;
        v22 = v8;
        v23[0] = v25[0];
        v23[1] = v25[1];
        v23[2] = v25[2];
        v24 = 1;
        std::__optional_destruct_base<WebCore::MessageWithMessagePorts,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v17, v7);
        result = WebKit::WebSWServerConnection::postMessageToServiceWorker(a2, v20, (__int128 *)v21, (uint64_t)v23);
        if (v24)
        {
          result = v21[1];
          if (v21[1])
          {
            v21[1] = 0;
            LODWORD(v22) = 0;
            result = (WTF *)WTF::fastFree(result, v10);
          }
          v11 = (unsigned int *)v21[0];
          v21[0] = 0;
          if (v11)
          {
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
            {
              atomic_store(1u, v11);
              *(_QWORD *)&v25[0] = v11;
              return WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((WebCore::SerializedScriptValue **)v25);
            }
          }
        }
        return result;
      }
    }
    std::__optional_destruct_base<WebCore::MessageWithMessagePorts,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v17, v7);
  }
  v14 = *a1;
  v15 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  result = (WTF *)a1[3];
  if (result)
    v16 = v15 == 0;
  else
    v16 = 1;
  if (!v16)
    return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v14);
  return result;
}

WTF::StringImpl *IPC::handleMessage<Messages::WebSWServerConnection::DidResolveRegistrationPromise,WebKit::WebSWServerConnection,WebCore::SWServer::Connection,void ()(WebCore::ServiceWorkerRegistrationKey const&)>(uint64_t *a1, WebCore::SWServer::Connection *a2)
{
  WTF::StringImpl *v4;
  char v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];
  int v12;
  WTF::StringImpl *v13;
  __int128 v14;
  __int128 v15;
  char v16;
  _BYTE v17[32];
  WTF::StringImpl *v18;
  __int128 v19;
  __int128 v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebCore::ServiceWorkerRegistrationKey>(a1, v17);
  v5 = v21;
  v11[0] = 0;
  if (v21)
  {
    v12 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v11, (uint64_t)v17);
    v6 = v18;
    v18 = 0;
    v13 = v6;
    v14 = v19;
    v15 = v20;
    LODWORD(v19) = v19 & 0xFFFFFFFE;
    v5 = 1;
  }
  v16 = v5;
  std::__optional_destruct_base<WebCore::ServiceWorkerRegistrationKey,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v17, v4);
  if (v16
    || (v9 = *a1, v10 = a1[1], *a1 = 0, a1[1] = 0, (result = (WTF::StringImpl *)a1[3]) != 0)
    && v10
    && (result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v9), v16))
  {
    result = (WTF::StringImpl *)WebCore::SWServer::Connection::didResolveRegistrationPromise(a2, (const WebCore::ServiceWorkerRegistrationKey *)v11);
    if (v16)
    {
      result = v13;
      v13 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        else
          *(_DWORD *)result -= 2;
      }
      if (v12 != -1)
        return (WTF::StringImpl *)((uint64_t (*)(_BYTE *, _BYTE *))off_1E3506090[v12])(v17, v11);
    }
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::WebSWServerConnection::MatchRegistration,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WebCore::SecurityOriginData const&,WTF::URL const&,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerRegistrationData> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, WebCore::SWServer::Connection *a3)
{
  WTF::StringImpl *v6;
  unint64_t v7;
  _QWORD *v8;
  unsigned __int8 **v9;
  uint64_t v10;
  unint64_t v12;
  unsigned __int8 **v13;
  _QWORD *v14;
  _BYTE v15[32];
  uint64_t v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<std::tuple<WebCore::SecurityOriginData,WTF::URL>>((uint64_t)v15, a2);
  if (v17)
  {
    v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if ((_BYTE)v6)
    {
      v12 = v7;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v8 = off_1E35060D8;
      v8[1] = v12;
      v9 = v13;
      v13 = 0;
      v14 = v8;
      v8[2] = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      if (!v17)
        __break(1u);
      WebKit::WebSWServerConnection::matchRegistration(a3, (const WebCore::SecurityOriginData *)v15, (const WTF::URL *)&v16, (uint64_t *)&v14);
      v10 = (uint64_t)v14;
      v14 = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
  }
  return std::__optional_destruct_base<std::tuple<WebCore::SecurityOriginData,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15, v6);
}

uint64_t IPC::handleMessageAsync<Messages::WebSWServerConnection::WhenRegistrationReady,WebKit::WebSWServerConnection,WebCore::SWServer::Connection,void ()(WebCore::SecurityOriginData const&,WTF::URL const&,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerRegistrationData> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2)
{
  WTF::StringImpl *v4;
  unint64_t v5;
  _QWORD *v6;
  unsigned __int8 **v7;
  _QWORD *v8;
  unint64_t v10;
  unsigned __int8 **v11;
  _QWORD *v12;
  _BYTE v13[72];
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<std::tuple<WebCore::SecurityOriginData,WTF::URL>>((uint64_t)v13, a2);
  if (v14)
  {
    v5 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if ((_BYTE)v4)
    {
      v10 = v5;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v11, a1);
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v6 = off_1E3506100;
      v6[1] = v10;
      v7 = v11;
      v11 = 0;
      v12 = v6;
      v6[2] = v7;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v11);
      if (!v14)
        __break(1u);
      WebCore::SWServer::Connection::whenRegistrationReady();
      v8 = v12;
      v12 = 0;
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  return std::__optional_destruct_base<std::tuple<WebCore::SecurityOriginData,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13, v4);
}

uint64_t IPC::handleMessageAsync<Messages::WebSWServerConnection::GetRegistrations,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WebCore::SecurityOriginData const&,WTF::URL const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  WTF::StringImpl *v6;
  unint64_t v7;
  _QWORD *v8;
  unsigned __int8 **v9;
  uint64_t v10;
  unint64_t v12;
  unsigned __int8 **v13;
  _QWORD *v14;
  _BYTE v15[32];
  uint64_t v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<std::tuple<WebCore::SecurityOriginData,WTF::URL>>((uint64_t)v15, a2);
  if (v17)
  {
    v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if ((_BYTE)v6)
    {
      v12 = v7;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v8 = off_1E3506128;
      v8[1] = v12;
      v9 = v13;
      v13 = 0;
      v14 = v8;
      v8[2] = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      if (!v17)
        __break(1u);
      WebKit::WebSWServerConnection::getRegistrations(a3, (const WebCore::SecurityOriginData *)v15, (const WTF::URL *)&v16, (uint64_t *)&v14);
      v10 = (uint64_t)v14;
      v14 = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
  }
  return std::__optional_destruct_base<std::tuple<WebCore::SecurityOriginData,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15, v6);
}

unint64_t IPC::handleMessageAsync<Messages::WebSWServerConnection::TerminateWorkerFromClient,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  unint64_t result;
  char v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  unsigned __int8 **v11;
  unint64_t v12;
  unsigned __int8 **v13;
  _QWORD *v14;

  result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a2);
  if (v7)
  {
    v8 = result;
    result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v9)
    {
      v12 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v10 = off_1E3506150;
      v10[1] = v12;
      v11 = v13;
      v13 = 0;
      v14 = v10;
      v10[2] = v11;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      WebKit::WebSWServerConnection::terminateWorkerFromClient(a3, v8, (uint64_t *)&v14);
      result = (unint64_t)v14;
      v14 = 0;
      if (result)
        return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unint64_t IPC::handleMessageAsync<Messages::WebSWServerConnection::WhenServiceWorkerIsTerminatedForTesting,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  unint64_t result;
  char v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  unsigned __int8 **v11;
  unint64_t v12;
  unsigned __int8 **v13;
  _QWORD *v14;

  result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a2);
  if (v7)
  {
    v8 = result;
    result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v9)
    {
      v12 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v10 = off_1E3506178;
      v10[1] = v12;
      v11 = v13;
      v13 = 0;
      v14 = v10;
      v10[2] = v11;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      WebKit::WebSWServerConnection::whenServiceWorkerIsTerminatedForTesting(a3, v8, (uint64_t *)&v14);
      result = (unint64_t)v14;
      v14 = 0;
      if (result)
        return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unint64_t IPC::handleMessageAsync<Messages::WebSWServerConnection::StoreRegistrationsOnDisk,WebKit::WebSWServerConnection,WebCore::SWServer::Connection,void ()(WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, uint64_t *a2)
{
  unint64_t result;
  char v4;
  _QWORD *v5;
  unsigned __int8 **v6;
  unint64_t v7;
  unsigned __int8 **v8;
  _QWORD *v9;

  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v4)
  {
    v7 = result;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v8, a1);
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v5 = off_1E35061A0;
    v5[1] = v7;
    v6 = v8;
    v8 = 0;
    v9 = v5;
    v5[2] = v6;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v8);
    WebCore::SWServer::Connection::storeRegistrationsOnDisk();
    result = (unint64_t)v9;
    v9 = 0;
    if (result)
      return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

WTF *IPC::handleMessageAsync<Messages::WebSWServerConnection::SubscribeToPushService,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  WTF *v11;
  unsigned __int8 **v12;
  WTF *result;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  WTF *v17;
  uint64_t v18;
  WTF *v19;
  unsigned __int8 **v20;
  char v21;
  WTF *v22;
  unsigned __int8 **v23;
  char v24;

  v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v7
    && (v8 = v6,
        IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, &v22),
        v24))
  {
    v18 = v8;
    v19 = v22;
    v20 = v23;
    v21 = 1;
    v9 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (!(_BYTE)v10)
      goto LABEL_7;
    v22 = (WTF *)v9;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v23, a1);
    v11 = (WTF *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v11 = off_1E35061C8;
    *((_QWORD *)v11 + 1) = v22;
    v12 = v23;
    v23 = 0;
    *((_QWORD *)v11 + 2) = v12;
    v17 = v11;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v23);
    WebKit::WebSWServerConnection::subscribeToPushService(a3, v18, (uint64_t)&v19, (uint64_t *)&v17);
    result = v17;
    v17 = 0;
    if (result)
      result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 8))(result);
    if (v21)
    {
LABEL_7:
      result = v19;
      if (v19)
      {
        v19 = 0;
        LODWORD(v20) = 0;
        return (WTF *)WTF::fastFree(result, v10);
      }
    }
  }
  else
  {
    v14 = *a2;
    v15 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF *)a2[3];
    if (result)
      v16 = v15 == 0;
    else
      v16 = 1;
    if (!v16)
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v14);
  }
  return result;
}

unint64_t IPC::handleMessageAsync<Messages::WebSWServerConnection::UnsubscribeFromPushService,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, WebKit::WebSWServerConnection *a3)
{
  unint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t result;
  char v13;
  _QWORD *v14;
  unsigned __int8 **v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  unsigned __int8 **v20;
  _QWORD *v21;

  v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v7
    && (v8 = v6,
        v9 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2),
        v10))
  {
    v11 = v9;
    result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v13)
    {
      v19 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v20, a1);
      v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v14 = off_1E35061F0;
      v14[1] = v19;
      v15 = v20;
      v20 = 0;
      v21 = v14;
      v14[2] = v15;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v20);
      WebKit::WebSWServerConnection::unsubscribeFromPushService(a3, v8, v11, (uint64_t *)&v21);
      result = (unint64_t)v21;
      v21 = 0;
      if (result)
        return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  else
  {
    v16 = *a2;
    v17 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v18 = v17 == 0;
    else
      v18 = 1;
    if (!v18)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v16);
  }
  return result;
}

unint64_t IPC::handleMessageAsync<Messages::WebSWServerConnection::GetPushSubscription,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, WebKit::WebSWServerConnection *a3)
{
  unint64_t result;
  char v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  unsigned __int8 **v11;
  unint64_t v12;
  unsigned __int8 **v13;
  _QWORD *v14;

  result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a2);
  if (v7)
  {
    v8 = result;
    result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v9)
    {
      v12 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v10 = off_1E3506218;
      v10[1] = v12;
      v11 = v13;
      v13 = 0;
      v14 = v10;
      v10[2] = v11;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      WebKit::WebSWServerConnection::getPushSubscription(a3, v8, (uint64_t *)&v14);
      result = (unint64_t)v14;
      v14 = 0;
      if (result)
        return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unint64_t IPC::handleMessageAsync<Messages::WebSWServerConnection::GetPushPermissionState,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, WebKit::WebSWServerConnection *a3)
{
  unint64_t result;
  char v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  unsigned __int8 **v11;
  unint64_t v12;
  unsigned __int8 **v13;
  _QWORD *v14;

  result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a2);
  if (v7)
  {
    v8 = result;
    result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v9)
    {
      v12 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v10 = off_1E3506240;
      v10[1] = v12;
      v11 = v13;
      v13 = 0;
      v14 = v10;
      v10[2] = v11;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      WebKit::WebSWServerConnection::getPushPermissionState(a3, v8, (uint64_t *)&v14);
      result = (unint64_t)v14;
      v14 = 0;
      if (result)
        return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unint64_t IPC::handleMessageAsync<Messages::WebSWServerConnection::EnableNavigationPreload,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::optional<WebCore::ExceptionData> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  unint64_t result;
  char v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  unsigned __int8 **v11;
  unint64_t v12;
  unsigned __int8 **v13;
  _QWORD *v14;

  result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a2);
  if (v7)
  {
    v8 = result;
    result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v9)
    {
      v12 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v10 = off_1E3506268;
      v10[1] = v12;
      v11 = v13;
      v13 = 0;
      v14 = v10;
      v10[2] = v11;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      WebKit::WebSWServerConnection::enableNavigationPreload(a3, v8, (uint64_t *)&v14);
      result = (unint64_t)v14;
      v14 = 0;
      if (result)
        return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unint64_t IPC::handleMessageAsync<Messages::WebSWServerConnection::DisableNavigationPreload,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::optional<WebCore::ExceptionData> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  unint64_t result;
  char v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  unsigned __int8 **v11;
  unint64_t v12;
  unsigned __int8 **v13;
  _QWORD *v14;

  result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a2);
  if (v7)
  {
    v8 = result;
    result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v9)
    {
      v12 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v10 = off_1E3506290;
      v10[1] = v12;
      v11 = v13;
      v13 = 0;
      v14 = v10;
      v10[2] = v11;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      WebKit::WebSWServerConnection::disableNavigationPreload(a3, v8, (uint64_t *)&v14);
      result = (unint64_t)v14;
      v14 = 0;
      if (result)
        return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

WTF::StringImpl *IPC::handleMessageAsync<Messages::WebSWServerConnection::SetNavigationPreloadHeaderValue,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String &&,WTF::CompletionHandler<void ()(std::optional<WebCore::ExceptionData> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  WTF::StringImpl *result;
  unint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  unsigned __int8 **v10;
  unint64_t v11;
  unsigned __int8 **v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  char v16;

  result = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>((uint64_t)&v14, a2);
  if (v16)
  {
    v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (!(_BYTE)v8)
      goto LABEL_6;
    v11 = v7;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, a1);
    v9 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v9 = off_1E35062B8;
    *((_QWORD *)v9 + 1) = v11;
    v10 = v12;
    v12 = 0;
    v13 = v9;
    *((_QWORD *)v9 + 2) = v10;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v12);
    WebKit::WebSWServerConnection::setNavigationPreloadHeaderValue(a3, v14, (uint64_t)&v15, (uint64_t *)&v13);
    result = v13;
    v13 = 0;
    if (result)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    if (v16)
    {
LABEL_6:
      result = v15;
      v15 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

unint64_t IPC::handleMessageAsync<Messages::WebSWServerConnection::GetNavigationPreloadState,WebKit::WebSWServerConnection,WebKit::WebSWServerConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::NavigationPreloadState,WebCore::ExceptionData> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  unint64_t result;
  char v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  unsigned __int8 **v11;
  unint64_t v12;
  unsigned __int8 **v13;
  _QWORD *v14;

  result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a2);
  if (v7)
  {
    v8 = result;
    result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v9)
    {
      v12 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v10 = off_1E35062E0;
      v10[1] = v12;
      v11 = v13;
      v13 = 0;
      v14 = v10;
      v10[2] = v11;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      WebKit::WebSWServerConnection::getNavigationPreloadState(a3, v8, (uint64_t *)&v14);
      result = (unint64_t)v14;
      v14 = 0;
      if (result)
        return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

WTF::StringImpl *IPC::handleMessageAsync<Messages::WebSWServerConnection::StartBackgroundFetch,WebKit::WebSWServerConnection,WebCore::SWServer::Connection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::BackgroundFetchOptions &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::BackgroundFetchInformation,WebCore::ExceptionData> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t *v12;
  unint64_t v13;
  WTF *v14;
  void *v15;
  int v16;
  void *v17;
  WTF *v18;
  unsigned int v19;
  void *v20;
  WTF::StringImpl *result;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF *v24;
  unsigned __int8 **v25;
  WTF::StringImpl *v26;
  int v27;
  void *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  unsigned __int8 **v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  void *v49;
  WTF::StringImpl *v50;
  unsigned int v51;
  WTF::StringImpl *v52;
  char v53;
  WTF::StringImpl *v54;
  unint64_t v55;
  char v56;
  WTF *v57;
  unsigned __int8 **v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  char v61;
  unint64_t v62;
  WTF::StringImpl *v63;
  WTF *v64;
  unsigned int v65;
  int v66;
  _QWORD v67[2];
  WTF::StringImpl *v68;
  uint64_t v69;
  char v70;
  char v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (!v5)
    goto LABEL_55;
  v6 = v4;
  IPC::Decoder::decode<WTF::String>(a2, &v52);
  if (!v53)
    goto LABEL_55;
  v8 = a2[1];
  v9 = *a2;
  v10 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v8 < v10 || v8 - v10 <= 7)
  {
    v30 = 0;
    v31 = 0;
    *a2 = 0;
    a2[1] = 0;
    v32 = a2[3];
    if (v32)
    {
      if (v8)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v32 + 16))(v32, v9, v8);
        v31 = *a2;
        v30 = a2[1];
      }
      else
      {
        v30 = 0;
        v31 = 0;
      }
    }
    goto LABEL_25;
  }
  v12 = (unint64_t *)(v9 + v10);
  a2[2] = (uint64_t)(v12 + 1);
  if (!v9)
  {
    v30 = v8;
    v31 = 0;
LABEL_25:
    *a2 = 0;
    a2[1] = 0;
    v33 = a2[3];
    if (v33 && v30)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, v31);
    goto LABEL_39;
  }
  v13 = *v12;
  v57 = 0;
  v58 = 0;
  if (v13 >= 0xC30)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::BackgroundFetchRequest>((uint64_t)&v62, a2);
      if (!v71)
        goto LABEL_38;
      v34 = HIDWORD(v58);
      if (HIDWORD(v58) == (_DWORD)v58)
      {
        WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::BackgroundFetchRequest>((uint64_t)&v57, (unint64_t)&v62);
      }
      else
      {
        WebCore::BackgroundFetchRequest::BackgroundFetchRequest((uint64_t)v57 + 336 * HIDWORD(v58), (uint64_t)&v62);
        HIDWORD(v58) = v34 + 1;
      }
      result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::BackgroundFetchRequest,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v62, v35);
      if (!--v13)
      {
        v19 = v58;
        v18 = v57;
        if (v58 <= HIDWORD(v58))
        {
          LODWORD(v13) = HIDWORD(v58);
          goto LABEL_19;
        }
        v13 = (unint64_t)v57;
        v51 = HIDWORD(v58);
        if (HIDWORD(v58))
        {
          if (HIDWORD(v58) >= 0xC30C31)
          {
            __break(0xC471u);
            goto LABEL_80;
          }
          v36 = WTF::fastMalloc((WTF *)(336 * HIDWORD(v58)));
          v19 = 336 * v51 / 0x150;
          if ((WTF *)v36 == v18)
          {
            v13 = (unint64_t)v18;
          }
          else
          {
            v13 = v36;
            WTF::VectorMover<false,WebCore::BackgroundFetchRequest>::move((uint64_t)v18, (uint64_t)v18 + 336 * v51, v36);
          }
        }
        if (v18)
        {
          if ((WTF *)v13 == v18)
          {
            v19 = 0;
            v13 = 0;
            v57 = 0;
          }
          WTF::fastFree(v18, v7);
        }
        v18 = (WTF *)v13;
        LODWORD(v13) = v51;
        goto LABEL_19;
      }
    }
  }
  if (v13)
  {
    v14 = (WTF *)WTF::fastMalloc((WTF *)(336 * v13));
    LODWORD(v58) = 336 * (int)v13 / 0x150u;
    v57 = v14;
    while (1)
    {
      IPC::Decoder::decode<WebCore::BackgroundFetchRequest>((uint64_t)&v62, a2);
      if (!v71)
        break;
      v16 = HIDWORD(v58);
      if (HIDWORD(v58) == (_DWORD)v58)
      {
        WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::BackgroundFetchRequest>((uint64_t)&v57, (unint64_t)&v62);
      }
      else
      {
        WebCore::BackgroundFetchRequest::BackgroundFetchRequest((uint64_t)v57 + 336 * HIDWORD(v58), (uint64_t)&v62);
        HIDWORD(v58) = v16 + 1;
      }
      std::__optional_destruct_base<WebCore::BackgroundFetchRequest,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v62, v17);
      if (!--v13)
      {
        v18 = v57;
        v19 = v58;
        LODWORD(v13) = HIDWORD(v58);
        goto LABEL_19;
      }
    }
LABEL_38:
    std::__optional_destruct_base<WebCore::BackgroundFetchRequest,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v62, v15);
    WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57, v37);
LABEL_39:
    v29 = (WTF::StringImpl *)*a2;
    v38 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v39 = a2[3];
    if (v39 && v38)
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v39 + 16))(v39, v29);
    v27 = 0;
    LOBYTE(v62) = 0;
    v70 = 0;
    goto LABEL_41;
  }
  v19 = 0;
  v18 = 0;
LABEL_19:
  v57 = 0;
  v58 = 0;
  v54 = v18;
  v55 = __PAIR64__(v13, v19);
  v56 = 1;
  WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57, v7);
  result = IPC::Decoder::decode<WebCore::BackgroundFetchOptions>(a2, v20, (uint64_t)&v57);
  if (v61)
  {
    if (!v53)
      goto LABEL_80;
    v23 = v52;
    v52 = 0;
    v62 = v6;
    v63 = v23;
    v54 = 0;
    v64 = v18;
    v55 = 0;
    v65 = v19;
    v66 = v13;
    v24 = v57;
    v57 = 0;
    v67[0] = v24;
    v25 = v58;
    v58 = 0;
    v67[1] = v25;
    v26 = v59;
    v59 = 0;
    v27 = 1;
    v68 = v26;
    v69 = v60;
  }
  else
  {
    v27 = 0;
    LOBYTE(v62) = 0;
  }
  v70 = v27;
  std::__optional_destruct_base<WebCore::BackgroundFetchOptions,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v57, v22);
  WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v28);
LABEL_41:
  if (!v53 || (v40 = v52, v52 = 0, !v40))
  {
LABEL_45:
    if (v27)
      goto LABEL_46;
LABEL_55:
    v46 = *a2;
    v47 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
      v48 = v47 == 0;
    else
      v48 = 1;
    if (!v48)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v46);
    return result;
  }
  if (*(_DWORD *)v40 != 2)
  {
    *(_DWORD *)v40 -= 2;
    goto LABEL_45;
  }
  WTF::StringImpl::destroy(v40, v29);
  if (!v27)
    goto LABEL_55;
LABEL_46:
  v41 = (WTF *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (!(_BYTE)v42)
  {
LABEL_51:
    v45 = v68;
    v68 = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
        WTF::StringImpl::destroy(v45, v42);
      else
        *(_DWORD *)v45 -= 2;
    }
    WTF::Vector<WebCore::ImageResource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v67, v42);
    WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v64, v49);
    result = v63;
    v63 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v50);
      else
        *(_DWORD *)result -= 2;
    }
    return result;
  }
  v57 = v41;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v58, a1);
  v43 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v43 = off_1E3506308;
  *((_QWORD *)v43 + 1) = v57;
  v44 = v58;
  v58 = 0;
  *((_QWORD *)v43 + 2) = v44;
  v54 = v43;
  result = (WTF::StringImpl *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v58);
  if (!v70)
  {
LABEL_80:
    __break(1u);
    return result;
  }
  WebCore::SWServer::Connection::startBackgroundFetch();
  result = v54;
  v54 = 0;
  if (result)
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  if (v70)
    goto LABEL_51;
  return result;
}

WTF::StringImpl *IPC::handleMessageAsync<Messages::WebSWServerConnection::BackgroundFetchInformation,WebKit::WebSWServerConnection,WebCore::SWServer::Connection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::BackgroundFetchInformation,WebCore::ExceptionData> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  unint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  unsigned __int8 **v8;
  unint64_t v9;
  unsigned __int8 **v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  char v14;

  result = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>((uint64_t)&v12, a2);
  if (v14)
  {
    v5 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (!(_BYTE)v6)
      goto LABEL_6;
    v9 = v5;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v10, a1);
    v7 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v7 = off_1E3506330;
    *((_QWORD *)v7 + 1) = v9;
    v8 = v10;
    v10 = 0;
    v11 = v7;
    *((_QWORD *)v7 + 2) = v8;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v10);
    WebCore::SWServer::Connection::backgroundFetchInformation();
    result = v11;
    v11 = 0;
    if (result)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    if (v14)
    {
LABEL_6:
      result = v13;
      v13 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

unint64_t IPC::handleMessageAsync<Messages::WebSWServerConnection::BackgroundFetchIdentifiers,WebKit::WebSWServerConnection,WebCore::SWServer::Connection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2)
{
  unint64_t result;
  char v5;
  char v6;
  _QWORD *v7;
  unsigned __int8 **v8;
  unint64_t v9;
  unsigned __int8 **v10;
  _QWORD *v11;

  result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a2);
  if (v5)
  {
    result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v6)
    {
      v9 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v10, a1);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v7 = off_1E3506358;
      v7[1] = v9;
      v8 = v10;
      v10 = 0;
      v11 = v7;
      v7[2] = v8;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v10);
      WebCore::SWServer::Connection::backgroundFetchIdentifiers();
      result = (unint64_t)v11;
      v11 = 0;
      if (result)
        return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

WTF::StringImpl *IPC::handleMessageAsync<Messages::WebSWServerConnection::AbortBackgroundFetch,WebKit::WebSWServerConnection,WebCore::SWServer::Connection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)>(unsigned __int8 **a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  unint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  unsigned __int8 **v8;
  unint64_t v9;
  unsigned __int8 **v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  char v14;

  result = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>((uint64_t)&v12, a2);
  if (v14)
  {
    v5 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (!(_BYTE)v6)
      goto LABEL_6;
    v9 = v5;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v10, a1);
    v7 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v7 = off_1E3506380;
    *((_QWORD *)v7 + 1) = v9;
    v8 = v10;
    v10 = 0;
    v11 = v7;
    *((_QWORD *)v7 + 2) = v8;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v10);
    WebCore::SWServer::Connection::abortBackgroundFetch();
    result = v11;
    v11 = 0;
    if (result)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    if (v14)
    {
LABEL_6:
      result = v13;
      v13 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::WebSWServerConnection::MatchBackgroundFetch,WebKit::WebSWServerConnection,WebCore::SWServer::Connection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WebCore::RetrieveRecordsOptions &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2)
{
  uint64_t *v2;
  char v4;
  WTF::StringImpl *v5;
  char v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  const void *v17;
  __int128 v18;
  WTF *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  CFTypeRef v30;
  WTF::StringImpl *v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  char v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  CFTypeRef cf;
  __int16 v57;
  WTF::StringImpl *v58[2];
  WTF *v59;
  int v60;
  char v61;
  WTF::StringImpl *v62;
  char v63;
  unint64_t v64;
  _OWORD v65[2];
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  char v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  const void *v82;
  __int16 v83;
  __int128 v84;
  WTF *v85;
  int v86;
  char v87;

  v2 = a2;
  IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (!v4)
    goto LABEL_35;
  IPC::Decoder::decode<WTF::String>(v2, &v62);
  if (v63)
  {
    IPC::Decoder::decode<WebCore::RetrieveRecordsOptions>(v2, (uint64_t)&v64);
    v6 = v87;
    if (v87)
    {
      if (!v63)
        goto LABEL_34;
      v7 = v62;
      v62 = 0;
      v36 = v7;
      v8 = v64;
      v9 = v66;
      v64 = 0;
      v37 = v8;
      v38 = v65[0];
      v39 = v65[1];
      LODWORD(v65[0]) &= ~1u;
      v66 = 0;
      v40 = v9;
      v41 = v67;
      v42 = v68;
      LODWORD(v67) = v67 & 0xFFFFFFFE;
      v10 = v71;
      v43 = v69;
      v11 = v70;
      v70 = 0u;
      v44 = v11;
      v71 = 0;
      v45 = v10;
      v12 = v72;
      v72 = 0;
      v46 = v12;
      v13 = v73;
      v73 = 0;
      v47 = v13;
      v14 = v74;
      v74 = 0;
      v48 = v14;
      v15 = v75;
      v75 = 0;
      v49 = v15;
      v51 = v77;
      v50 = v76;
      v16 = v78;
      v78 = 0u;
      v52 = v16;
      v55 = v81;
      v53 = v79;
      v54 = v80;
      v17 = v82;
      v79 = 0;
      v82 = 0;
      cf = v17;
      v57 = v83;
      v18 = v84;
      v84 = 0u;
      *(_OWORD *)v58 = v18;
      v19 = v85;
      v85 = 0;
      v59 = v19;
      v6 = 1;
      v60 = v86;
    }
    v61 = v6;
    std::__optional_destruct_base<WebCore::RetrieveRecordsOptions,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)&v64, v5);
    if (v63)
    {
      v21 = v62;
      v62 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v20);
        else
          *(_DWORD *)v21 -= 2;
      }
    }
  }
  else
  {
    v61 = 0;
  }
  if (!v61)
    goto LABEL_36;
  while (1)
  {
    v22 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v2);
    if (!(_BYTE)v23)
      break;
    v64 = v22;
    v2 = (uint64_t *)v65;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)v65, a1);
    v24 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v24 = off_1E35063A8;
    *((_QWORD *)v24 + 1) = v64;
    v25 = *(_QWORD *)&v65[0];
    *(_QWORD *)&v65[0] = 0;
    *((_QWORD *)v24 + 2) = v25;
    v62 = v24;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v65);
    if (v61)
    {
      WebCore::SWServer::Connection::matchBackgroundFetch();
      v26 = v62;
      v62 = 0;
      if (v26)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v26 + 8))(v26);
      break;
    }
LABEL_34:
    __break(1u);
LABEL_35:
    v61 = 0;
LABEL_36:
    v33 = *v2;
    v34 = v2[1];
    *v2 = 0;
    v2[1] = 0;
    result = v2[3];
    if (result)
      v35 = v34 == 0;
    else
      v35 = 1;
    if (!v35)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v33);
      if (v61)
        continue;
    }
    return result;
  }
  v27 = v59;
  v59 = 0;
  if (v27)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v27, v23);
  v28 = v58[1];
  v58[1] = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v23);
    else
      *(_DWORD *)v28 -= 2;
  }
  v29 = v58[0];
  v58[0] = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v23);
    else
      *(_DWORD *)v29 -= 2;
  }
  v30 = cf;
  cf = 0;
  if (v30)
    CFRelease(v30);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v37);
  result = (uint64_t)v36;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      return WTF::StringImpl::destroy(v36, v31);
    else
      *(_DWORD *)v36 -= 2;
  }
  return result;
}

unint64_t IPC::handleMessageAsync<Messages::WebSWServerConnection::RetrieveRecordResponse,WebKit::WebSWServerConnection,WebCore::SWServer::Connection,void ()(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::ResourceResponse,WebCore::ExceptionData> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2)
{
  char v4;
  unint64_t result;
  char v6;
  _QWORD *v7;
  unsigned __int8 **v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  unsigned __int8 **v13;
  _QWORD *v14;

  IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v4)
  {
    result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v6)
    {
      v12 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v7 = off_1E35063D0;
      v7[1] = v12;
      v8 = v13;
      v13 = 0;
      v14 = v7;
      v7[2] = v8;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
      WebCore::SWServer::Connection::retrieveRecordResponse();
      result = (unint64_t)v14;
      v14 = 0;
      if (result)
        return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  else
  {
    v9 = *a2;
    v10 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v11 = v10 == 0;
    else
      v11 = 1;
    if (!v11)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v9);
  }
  return result;
}

void `non-virtual thunk to'WebKit::WebSWServerConnection::didReceiveMessage(WebKit::WebSWServerConnection *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  WebKit::WebSWServerConnection::didReceiveMessage((WebKit::WebSWServerConnection *)((char *)this - 64), a2, a3);
}

void IPC::Decoder::decode<std::tuple<WebCore::ServiceWorkerJobData>>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16[5];
  uint64_t v17[5];
  uint64_t v18;
  uint64_t v19[6];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int16 v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  __int16 v27;
  char v28;
  __int128 v29;
  unsigned __int8 v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  IPC::ArgumentCoder<WebCore::ServiceWorkerJobData,void>::decode(a2, (uint64_t)v16);
  if (!v30)
  {
    v9 = *a2;
    v10 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v11 = a2[3];
    v12 = !v11 || v10 == 0;
    if (v12 || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v9), !v30))
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 272) = 0;
LABEL_13:
      v13 = *a2;
      v14 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v15 = a2[3];
      if (v15)
      {
        if (v14)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13);
      }
      return;
    }
  }
  WTF::URL::URL(a1, v16);
  WTF::URL::URL(a1 + 40, v17);
  *(_BYTE *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 104) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(a1 + 80, (uint64_t)&v18);
  WTF::URL::URL(a1 + 112, v19);
  v5 = v21;
  *(_OWORD *)(a1 + 160) = v20;
  *(_OWORD *)(a1 + 176) = v5;
  *(_OWORD *)(a1 + 192) = v22;
  *(_WORD *)(a1 + 208) = v23;
  v6 = v24;
  v24 = 0;
  *(_QWORD *)(a1 + 216) = v6;
  *(_BYTE *)(a1 + 224) = v25;
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  if (v28)
  {
    v7 = v26;
    v26 = 0;
    *(_QWORD *)(a1 + 232) = v7;
    *(_WORD *)(a1 + 240) = v27;
    *(_BYTE *)(a1 + 248) = 1;
  }
  *(_OWORD *)(a1 + 256) = v29;
  v8 = v30;
  *(_BYTE *)(a1 + 272) = 1;
  if (v8)
  {
    WebCore::ServiceWorkerJobData::~ServiceWorkerJobData((WebCore::ServiceWorkerJobData *)v16, v4);
    if (!*(_BYTE *)(a1 + 272))
      goto LABEL_13;
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection29ScheduleUnregisterJobInServerEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore30ServiceWorkerJobIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS9_INSA_39ServiceWorkerRegistrationIdentifierTypeESD_yEENSt3__17variantIJNS9_INSA_27ServiceWorkerIdentifierTypeESD_yEENSA_16ProcessQualifiedINS_4UUIDEEEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIbNSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E35060B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection29ScheduleUnregisterJobInServerEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore30ServiceWorkerJobIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS9_INSA_39ServiceWorkerRegistrationIdentifierTypeESD_yEENSt3__17variantIJNS9_INSA_27ServiceWorkerIdentifierTypeESD_yEENSA_16ProcessQualifiedINS_4UUIDEEEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIbNSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E35060B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection29ScheduleUnregisterJobInServerEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore30ServiceWorkerJobIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS9_INSA_39ServiceWorkerRegistrationIdentifierTypeESD_yEENSt3__17variantIJNS9_INSA_27ServiceWorkerIdentifierTypeESD_yEENSA_16ProcessQualifiedINS_4UUIDEEEEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIbNSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EE4callESV_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3487;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData>,void>::encode<IPC::Encoder>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<WebCore::SecurityOriginData,WTF::URL>>(uint64_t a1, uint64_t *a2)
{
  __n128 v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10[5];
  char v11;
  _BYTE v12[24];
  int v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebCore::SecurityOriginData>(a2, v12);
  if (v14)
  {
    IPC::Decoder::decode<WTF::URL>(a2, v10);
    if (v11)
    {
      if (!v14)
        __break(1u);
      *(_BYTE *)a1 = 0;
      *(_DWORD *)(a1 + 24) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(a1, (uint64_t)v12);
      v4.n128_f64[0] = WTF::URL::URL(a1 + 32, (uint64_t *)v10);
      *(_BYTE *)(a1 + 72) = 1;
      if (v11)
      {
        v6 = v10[0];
        v10[0] = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, v5);
          else
            *(_DWORD *)v6 -= 2;
        }
      }
    }
    else
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 72) = 0;
    }
    if (v14 && v13 != -1)
      ((void (*)(WTF::StringImpl **, _BYTE *, __n128))off_1E3506090[v13])(v10, v12, v4);
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 72) = 0;
  }
  if (!*(_BYTE *)(a1 + 72))
  {
    v7 = *a2;
    v8 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v9 = a2[3];
    if (v9)
    {
      if (v8)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v7);
    }
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection17MatchRegistrationEN6WebKit21WebSWServerConnectionES8_FvRKN7WebCore18SecurityOriginDataERKNS_3URLEONS_17CompletionHandlerIFvONSt3__18optionalINS9_29ServiceWorkerRegistrationDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E35060D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection17MatchRegistrationEN6WebKit21WebSWServerConnectionES8_FvRKN7WebCore18SecurityOriginDataERKNS_3URLEONS_17CompletionHandlerIFvONSt3__18optionalINS9_29ServiceWorkerRegistrationDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E35060D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection17MatchRegistrationEN6WebKit21WebSWServerConnectionES8_FvRKN7WebCore18SecurityOriginDataERKNS_3URLEONS_17CompletionHandlerIFvONSt3__18optionalINS9_29ServiceWorkerRegistrationDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3485;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerRegistrationData>,void>::encode<IPC::Encoder,std::optional<WebCore::ServiceWorkerRegistrationData>>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

char *IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerRegistrationData>,void>::encode<IPC::Encoder,std::optional<WebCore::ServiceWorkerRegistrationData>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  id v6;
  WTF::StringImpl *v7;

  v4 = *(unsigned __int8 *)(a2 + 352);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 352))
    {
      return IPC::ArgumentCoder<WebCore::ServiceWorkerRegistrationData,void>::encode(a1, a2);
    }
    else
    {
      v6 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)std::__optional_destruct_base<std::tuple<WebCore::SecurityOriginData,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v7);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::SecurityOriginData,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  char v6;

  if (*(_BYTE *)(a1 + 72))
  {
    v3 = *(WTF::StringImpl **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, uint64_t))off_1E3506090[v4])(&v6, a1);
    *(_DWORD *)(a1 + 24) = -1;
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection21WhenRegistrationReadyEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvRKNS9_18SecurityOriginDataERKNS_3URLEONS_17CompletionHandlerIFvONSt3__18optionalINS9_29ServiceWorkerRegistrationDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3506100;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection21WhenRegistrationReadyEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvRKNS9_18SecurityOriginDataERKNS_3URLEONS_17CompletionHandlerIFvONSt3__18optionalINS9_29ServiceWorkerRegistrationDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E3506100;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection21WhenRegistrationReadyEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvRKNS9_18SecurityOriginDataERKNS_3URLEONS_17CompletionHandlerIFvONSt3__18optionalINS9_29ServiceWorkerRegistrationDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EE4callESN_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3494;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerRegistrationData>,void>::encode<IPC::Encoder,std::optional<WebCore::ServiceWorkerRegistrationData>>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection16GetRegistrationsEN6WebKit21WebSWServerConnectionES8_FvRKN7WebCore18SecurityOriginDataERKNS_3URLEONS_17CompletionHandlerIFvRKNS_6VectorINS9_29ServiceWorkerRegistrationDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3506128;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection16GetRegistrationsEN6WebKit21WebSWServerConnectionES8_FvRKN7WebCore18SecurityOriginDataERKNS_3URLEONS_17CompletionHandlerIFvRKNS_6VectorINS9_29ServiceWorkerRegistrationDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E3506128;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection16GetRegistrationsEN6WebKit21WebSWServerConnectionES8_FvRKN7WebCore18SecurityOriginDataERKNS_3URLEONS_17CompletionHandlerIFvRKNS_6VectorINS9_29ServiceWorkerRegistrationDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EE4callESN_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  IPC::Encoder *v14;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3483;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v14 = (IPC::Encoder *)v5;
  v6 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = v6;
  v7 = *(_DWORD *)(a2 + 12);
  if (v7)
  {
    v8 = *(_QWORD *)a2;
    v9 = 352 * v7;
    do
    {
      IPC::ArgumentCoder<WebCore::ServiceWorkerRegistrationData,void>::encode((IPC::Encoder *)v5, v8);
      v8 += 352;
      v9 -= 352;
    }
    while (v9);
  }
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v14, 0, 0);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection25TerminateWorkerFromClientEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3506150;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection25TerminateWorkerFromClientEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E3506150;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection25TerminateWorkerFromClientEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3492;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection39WhenServiceWorkerIsTerminatedForTestingEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3506178;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection39WhenServiceWorkerIsTerminatedForTestingEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E3506178;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection39WhenServiceWorkerIsTerminatedForTestingEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3495;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection24StoreRegistrationsOnDiskEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E35061A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection24StoreRegistrationsOnDiskEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E35061A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection24StoreRegistrationsOnDiskEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3490;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection22SubscribeToPushServiceEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_20PushSubscriptionDataENSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E35061C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection22SubscribeToPushServiceEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_20PushSubscriptionDataENSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E35061C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection22SubscribeToPushServiceEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_20PushSubscriptionDataENSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EE4callESR_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3491;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>,void>::encode<IPC::Encoder>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection26UnsubscribeFromPushServiceEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS9_INSA_30PushSubscriptionIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIbNSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E35061F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection26UnsubscribeFromPushServiceEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS9_INSA_30PushSubscriptionIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIbNSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E35061F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection26UnsubscribeFromPushServiceEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS9_INSA_30PushSubscriptionIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIbNSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3493;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData>,void>::encode<IPC::Encoder>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection19GetPushSubscriptionEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINSA_20PushSubscriptionDataEEENSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3506218;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection19GetPushSubscriptionEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINSA_20PushSubscriptionDataEEENSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E3506218;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection19GetPushSubscriptionEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINSA_20PushSubscriptionDataEEENSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3482;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>,void>::encode<IPC::Encoder>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection22GetPushPermissionStateEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIhNSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3506240;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection22GetPushPermissionStateEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIhNSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E3506240;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection22GetPushPermissionStateEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIhNSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3481;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData>,void>::encode<IPC::Encoder>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection23EnableNavigationPreloadEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt3__18optionalINSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3506268;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection23EnableNavigationPreloadEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt3__18optionalINSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E3506268;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection23EnableNavigationPreloadEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt3__18optionalINSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3479;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::optional<WebCore::ExceptionData>,void>::encode<IPC::Encoder,std::optional<WebCore::ExceptionData>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection24DisableNavigationPreloadEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt3__18optionalINSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3506290;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection24DisableNavigationPreloadEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt3__18optionalINSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E3506290;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection24DisableNavigationPreloadEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt3__18optionalINSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3478;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::optional<WebCore::ExceptionData>,void>::encode<IPC::Encoder,std::optional<WebCore::ExceptionData>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

_QWORD *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  char v13;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v5 && (v6 = v4, result = IPC::Decoder::decode<WTF::String>(a2, &v12), v13))
  {
    v8 = v12;
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    v9 = *a2;
    v10 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (_QWORD *)a2[3];
    if (result)
      v11 = v10 == 0;
    else
      v11 = 1;
    if (!v11)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection31SetNavigationPreloadHeaderValueEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_6StringEONS_17CompletionHandlerIFvONSt3__18optionalINSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E35062B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection31SetNavigationPreloadHeaderValueEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_6StringEONS_17CompletionHandlerIFvONSt3__18optionalINSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E35062B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection31SetNavigationPreloadHeaderValueEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_6StringEONS_17CompletionHandlerIFvONSt3__18optionalINSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3488;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::optional<WebCore::ExceptionData>,void>::encode<IPC::Encoder,std::optional<WebCore::ExceptionData>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection25GetNavigationPreloadStateEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_22NavigationPreloadStateENSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E35062E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection25GetNavigationPreloadStateEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_22NavigationPreloadStateENSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E35062E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

WebCore::ResourceRequestBase *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection25GetNavigationPreloadStateEN6WebKit21WebSWServerConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSA_22NavigationPreloadStateENSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  char v8;
  void *v9;
  WebCore::ResourceRequestBase *result;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  IPC::Encoder *v15;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3480;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v15 = (IPC::Encoder *)v5;
  v6 = *(_DWORD *)(a2 + 16);
  v7 = IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1);
  if (v6)
  {
    *v7 = 0;
    if (*(_DWORD *)(a2 + 16) == 1)
    {
      IPC::ArgumentCoder<WebCore::Exception,void>::encode((IPC::Encoder *)v5, (char *)a2);
      goto LABEL_6;
    }
LABEL_9:
    v13 = std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::Decoder::decode<WebCore::BackgroundFetchRequest>(v13, v14);
  }
  *v7 = 1;
  if (*(_DWORD *)(a2 + 16))
    goto LABEL_9;
  v8 = *(_BYTE *)a2;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)(a2 + 8));
LABEL_6:
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v15, 0, 0);
  result = v15;
  v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (WebCore::ResourceRequestBase *)WTF::fastFree(v11, v12);
  }
  return result;
}

WebCore::ResourceRequestBase *IPC::Decoder::decode<WebCore::BackgroundFetchRequest>(uint64_t a1, uint64_t *a2)
{
  WebCore::ResourceRequestBase *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::BackgroundFetchRequest,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 336))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WebCore::ResourceRequestBase *)a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WebCore::ResourceRequestBase *)(*(uint64_t (**)(WebCore::ResourceRequestBase *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::BackgroundFetchRequest>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  result = WebCore::BackgroundFetchRequest::BackgroundFetchRequest(*(_QWORD *)a1 + 336 * *(unsigned int *)(a1 + 12), v3);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WebCore::BackgroundFetchRequest::BackgroundFetchRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  WTF::URL::URL(a1, (uint64_t *)a2);
  WTF::URL::URL(v4 + 40, (uint64_t *)(a2 + 40));
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v5 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = v5;
  v6 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a1 + 96) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  *(_DWORD *)(a1 + 104) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a2 + 108) = 0;
  *(_DWORD *)(a1 + 108) = v6;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v7 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a1 + 112) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 120) = 0;
  *(_DWORD *)(a1 + 120) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a2 + 124) = 0;
  *(_DWORD *)(a1 + 124) = v7;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v8 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a1 + 128) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a2 + 136) = 0;
  *(_DWORD *)(a1 + 136) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a2 + 140) = 0;
  *(_DWORD *)(a1 + 140) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 148) = *(_BYTE *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = v8;
  v9 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a1 + 152) = v9;
  v10 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a1 + 160) = v10;
  v11 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a1 + 168) = v11;
  v12 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = v12;
  v13 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a1 + 192) = v13;
  LODWORD(v13) = *(_DWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 211) = *(_DWORD *)(a2 + 211);
  *(_DWORD *)(a1 + 208) = v13;
  v14 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a2 + 216) = 0;
  *(_QWORD *)(a1 + 216) = v14;
  v15 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v15;
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  v16 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a2 + 264) = 0;
  *(_QWORD *)(a1 + 264) = v16;
  LODWORD(v16) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a2 + 272) = 0;
  *(_DWORD *)(a1 + 272) = v16;
  LODWORD(v16) = *(_DWORD *)(a2 + 276);
  *(_DWORD *)(a2 + 276) = 0;
  *(_DWORD *)(a1 + 276) = v16;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  v17 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a2 + 280) = 0;
  *(_QWORD *)(a1 + 280) = v17;
  LODWORD(v17) = *(_DWORD *)(a2 + 288);
  *(_DWORD *)(a2 + 288) = 0;
  *(_DWORD *)(a1 + 288) = v17;
  LODWORD(v17) = *(_DWORD *)(a2 + 292);
  *(_DWORD *)(a2 + 292) = 0;
  *(_DWORD *)(a1 + 292) = v17;
  v18 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a2 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 296) = v18;
  v19 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a2 + 304) = 0;
  *(_QWORD *)(a1 + 304) = v19;
  LODWORD(v19) = *(_DWORD *)(a2 + 312);
  *(_DWORD *)(a2 + 312) = 0;
  *(_DWORD *)(a1 + 312) = v19;
  LODWORD(v19) = *(_DWORD *)(a2 + 316);
  *(_DWORD *)(a2 + 316) = 0;
  *(_DWORD *)(a1 + 316) = v19;
  LODWORD(v19) = *(_DWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 324) = *(_BYTE *)(a2 + 324);
  *(_DWORD *)(a1 + 320) = v19;
  return a1;
}

unint64_t WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 336 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0xC30C31)
    {
      __break(0xC471u);
      JUMPOUT(0x19782BC68);
    }
    v3 = *(WTF **)a1;
    v4 = *(_QWORD *)a1 + 336 * *(unsigned int *)(a1 + 12);
    v5 = 336 * a2;
    v6 = WTF::fastMalloc((WTF *)(336 * a2));
    *(_DWORD *)(a1 + 8) = v5 / 0x150;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebCore::BackgroundFetchRequest>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
}

void WTF::VectorMover<false,WebCore::BackgroundFetchRequest>::move(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  const void *v11;
  uint64_t v12;

  if (a1 != a2)
  {
    v5 = a1 + 304;
    do
    {
      WebCore::BackgroundFetchRequest::BackgroundFetchRequest(a3, v5 - 304);
      WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, v6);
      v8 = *(WTF::StringImpl **)(v5 - 8);
      *(_QWORD *)(v5 - 8) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v7);
        else
          *(_DWORD *)v8 -= 2;
      }
      WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(v5 - 24));
      WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(v5 - 40));
      v10 = *(WTF::StringImpl **)(v5 - 88);
      *(_QWORD *)(v5 - 88) = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v9);
        else
          *(_DWORD *)v10 -= 2;
      }
      v11 = *(const void **)(v5 - 112);
      *(_QWORD *)(v5 - 112) = 0;
      if (v11)
        CFRelease(v11);
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(v5 - 304));
      a3 += 336;
      v12 = v5 + 32;
      v5 += 336;
    }
    while (v12 != a2);
  }
}

uint64_t std::__optional_destruct_base<WebCore::BackgroundFetchRequest,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  const void *v7;

  if (*(_BYTE *)(a1 + 336))
  {
    WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 304, a2);
    v4 = *(WTF::StringImpl **)(a1 + 296);
    *(_QWORD *)(a1 + 296) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
    WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(a1 + 280));
    WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(a1 + 264));
    v6 = *(WTF::StringImpl **)(a1 + 216);
    *(_QWORD *)(a1 + 216) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = *(const void **)(a1 + 192);
    *(_QWORD *)(a1 + 192) = 0;
    if (v7)
      CFRelease(v7);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)a1);
  }
  return a1;
}

void WTF::VectorDestructor<true,WebCore::BackgroundFetchRequest>::destruct(void *a1, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  const void *v8;
  void *v9;

  if (a1 != a2)
  {
    v3 = (uint64_t)a1 + 304;
    do
    {
      WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3, a2);
      v5 = *(WTF::StringImpl **)(v3 - 8);
      *(_QWORD *)(v3 - 8) = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, v4);
        else
          *(_DWORD *)v5 -= 2;
      }
      WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(v3 - 24));
      WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(v3 - 40));
      v7 = *(WTF::StringImpl **)(v3 - 88);
      *(_QWORD *)(v3 - 88) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, v6);
        else
          *(_DWORD *)v7 -= 2;
      }
      v8 = *(const void **)(v3 - 112);
      *(_QWORD *)(v3 - 112) = 0;
      if (v8)
        CFRelease(v8);
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(v3 - 304));
      v9 = (void *)(v3 + 32);
      v3 += 336;
    }
    while (v9 != a2);
  }
}

uint64_t WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::BackgroundFetchRequest>::destruct(*(void **)a1, (void *)(*(_QWORD *)a1 + 336 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection20StartBackgroundFetchEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvNS_23ObjectIdentifierGenericINS9_39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEONS_6VectorINS9_22BackgroundFetchRequestELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS9_22BackgroundFetchOptionsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS9_26BackgroundFetchInformationENS9_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSZ_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3506308;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection20StartBackgroundFetchEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvNS_23ObjectIdentifierGenericINS9_39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEONS_6VectorINS9_22BackgroundFetchRequestELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS9_22BackgroundFetchOptionsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS9_26BackgroundFetchInformationENS9_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSZ_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E3506308;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection20StartBackgroundFetchEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvNS_23ObjectIdentifierGenericINS9_39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEONS_6VectorINS9_22BackgroundFetchRequestELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS9_22BackgroundFetchOptionsEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS9_26BackgroundFetchInformationENS9_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSZ_EE4callESZ_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3489;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WebCore::BackgroundFetchInformation,WebCore::ExceptionData>,void>::encode<IPC::Encoder>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WebCore::BackgroundFetchInformation,WebCore::ExceptionData>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *v5;
  uint64_t v6;

  v4 = *(_DWORD *)(a2 + 56);
  v5 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *v5 = 0;
    if (*(_DWORD *)(a2 + 56) == 1)
    {
      IPC::ArgumentCoder<WebCore::Exception,void>::encode(a1, (char *)a2);
      return;
    }
  }
  else
  {
    *v5 = 1;
    if (!*(_DWORD *)(a2 + 56))
    {
      IPC::ArgumentCoder<WebCore::BackgroundFetchInformation,void>::encode(a1, (_QWORD *)a2);
      return;
    }
  }
  v6 = std::__throw_bad_variant_access[abi:sn180100]();
  _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection26BackgroundFetchInformationEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvNS_23ObjectIdentifierGenericINS9_39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS9_26BackgroundFetchInformationENS9_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED1Ev(v6);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection26BackgroundFetchInformationEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvNS_23ObjectIdentifierGenericINS9_39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS9_26BackgroundFetchInformationENS9_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3506330;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection26BackgroundFetchInformationEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvNS_23ObjectIdentifierGenericINS9_39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS9_26BackgroundFetchInformationENS9_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E3506330;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection26BackgroundFetchInformationEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvNS_23ObjectIdentifierGenericINS9_39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS9_26BackgroundFetchInformationENS9_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EE4callESR_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3477;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WebCore::BackgroundFetchInformation,WebCore::ExceptionData>,void>::encode<IPC::Encoder>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection26BackgroundFetchIdentifiersEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvNS_23ObjectIdentifierGenericINS9_39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3506358;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection26BackgroundFetchIdentifiersEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvNS_23ObjectIdentifierGenericINS9_39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E3506358;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection26BackgroundFetchIdentifiersEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvNS_23ObjectIdentifierGenericINS9_39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EE4callESN_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3476;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection20AbortBackgroundFetchEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvNS_23ObjectIdentifierGenericINS9_39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3506380;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection20AbortBackgroundFetchEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvNS_23ObjectIdentifierGenericINS9_39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E3506380;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection20AbortBackgroundFetchEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvNS_23ObjectIdentifierGenericINS9_39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3475;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection20MatchBackgroundFetchEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvNS_23ObjectIdentifierGenericINS9_39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEONS9_22RetrieveRecordsOptionsEONS_17CompletionHandlerIFvONS_6VectorINS9_32BackgroundFetchRecordInformationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E35063A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection20MatchBackgroundFetchEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvNS_23ObjectIdentifierGenericINS9_39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEONS9_22RetrieveRecordsOptionsEONS_17CompletionHandlerIFvONS_6VectorINS9_32BackgroundFetchRecordInformationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E35063A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection20MatchBackgroundFetchEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvNS_23ObjectIdentifierGenericINS9_39ServiceWorkerRegistrationIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEONS9_22RetrieveRecordsOptionsEONS_17CompletionHandlerIFvONS_6VectorINS9_32BackgroundFetchRecordInformationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EE4callESS_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  IPC::Encoder *v14;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3484;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v14 = (IPC::Encoder *)v5;
  v6 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = v6;
  v7 = *(_DWORD *)(a2 + 12);
  if (v7)
  {
    v8 = *(uint64_t **)a2;
    v9 = 304 * v7;
    do
    {
      IPC::ArgumentCoder<WebCore::BackgroundFetchRecordInformation,void>::encode((IPC::Encoder *)v5, v8);
      v8 += 38;
      v9 -= 304;
    }
    while (v9);
  }
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v14, 0, 0);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection22RetrieveRecordResponseEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvNS_23ObjectIdentifierGenericINS9_35BackgroundFetchRecordIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS9_16ResourceResponseENS9_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E35063D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection22RetrieveRecordResponseEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvNS_23ObjectIdentifierGenericINS9_35BackgroundFetchRecordIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS9_16ResourceResponseENS9_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E35063D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21WebSWServerConnection22RetrieveRecordResponseEN6WebKit21WebSWServerConnectionEN7WebCore8SWServer10ConnectionEFvNS_23ObjectIdentifierGenericINS9_35BackgroundFetchRecordIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS9_16ResourceResponseENS9_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EE4callESO_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::SWServer *v17;
  IPC::Encoder *v18;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3486;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v18 = (IPC::Encoder *)v5;
  v6 = *(_DWORD *)(a2 + 256);
  v7 = IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1);
  if (v6)
  {
    *v7 = 0;
    if (*(_DWORD *)(a2 + 256) == 1)
    {
      IPC::ArgumentCoder<WebCore::Exception,void>::encode((IPC::Encoder *)v5, (char *)a2);
      goto LABEL_6;
    }
LABEL_9:
    v12 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)WebKit::WebSWServerToContextConnection::WebSWServerToContextConnection(v12, v13, v14, v15, v16, v17);
  }
  *v7 = 1;
  if (*(_DWORD *)(a2 + 256))
    goto LABEL_9;
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode((IPC::Encoder *)v5, (WebCore::ResourceResponseBase *)a2);
LABEL_6:
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v18, 0, 0);
  result = v18;
  v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t WebKit::WebSWServerToContextConnection::WebSWServerToContextConnection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, WebCore::SWServer *a6)
{
  _QWORD *v10;
  unsigned int *v11;
  unsigned int v12;

  v10 = (_QWORD *)WebCore::SWServerToContextConnection::SWServerToContextConnection();
  *v10 = off_1E35063F8;
  v10[13] = &unk_1E35064B8;
  v10[14] = &unk_1E3506508;
  v10[15] = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 56), a2 + 48);
  v11 = *(unsigned int **)(a2 + 56);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = v11;
  *(_BYTE *)(a1 + 152) = 1;
  *(_QWORD *)(a1 + 160) = a3;
  *(_QWORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = 1;
  WebCore::SWServer::addContextConnection(a6, (WebCore::SWServerToContextConnection *)a1);
  return a1;
}

void WebKit::WebSWServerToContextConnection::~WebSWServerToContextConnection(WebKit::WebSWServerToContextConnection *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  WebKit::ServiceWorkerFetchTask *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned __int8 **v18;
  int v20;
  _QWORD *v21;
  WebCore::SWServer *v22;
  void *v23;
  WebCore::SWServer *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;

  v2 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v2)
  {
    v3 = *(unsigned int *)(v2 - 4);
    v4 = (_QWORD *)(v2 + 16 * v3);
    if (*(_DWORD *)(v2 - 12))
    {
      v5 = (_QWORD *)v2;
      if ((_DWORD)v3)
      {
        v6 = 16 * v3;
        v5 = (_QWORD *)v2;
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          v5 += 2;
          v6 -= 16;
          if (!v6)
          {
            v5 = v4;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v5 = (_QWORD *)(v2 + 16 * v3);
  }
  else
  {
    v5 = 0;
    v3 = 0;
  }
  v4 = (_QWORD *)(v2 + 16 * v3);
  if (v2)
  {
LABEL_8:
    v7 = (_QWORD *)(v2 + 16 * *(unsigned int *)(v2 - 4));
    goto LABEL_13;
  }
  v7 = 0;
LABEL_13:
  while (v5 != v7)
  {
    v8 = v5[1];
    if (v8)
    {
      v9 = *(WebKit::ServiceWorkerFetchTask **)(v8 + 8);
      if (v9)
      {
        ++*(_DWORD *)v9;
        WebKit::ServiceWorkerFetchTask::contextClosed(v9);
        WTF::RefCounted<WebKit::ServiceWorkerFetchTask>::deref(v9);
      }
    }
    v10 = v5 + 2;
    v5 = v4;
    if (v10 != v4)
    {
      v5 = v10;
      while ((unint64_t)(*v5 + 1) <= 1)
      {
        v5 += 2;
        if (v5 == v4)
        {
          v5 = v4;
          break;
        }
      }
    }
  }
  v11 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v11)
  {
    v12 = *(unsigned int *)(v11 - 4);
    v13 = (_QWORD *)(v11 + 24 * v12);
    if (*(_DWORD *)(v11 - 12))
    {
      v14 = (_QWORD *)v11;
      if ((_DWORD)v12)
      {
        v15 = 24 * v12;
        v14 = (_QWORD *)v11;
        while ((unint64_t)(*v14 + 1) <= 1)
        {
          v14 += 3;
          v15 -= 24;
          if (!v15)
          {
            v14 = v13;
            goto LABEL_30;
          }
        }
      }
      goto LABEL_30;
    }
    v14 = (_QWORD *)(v11 + 24 * v12);
  }
  else
  {
    v14 = 0;
    LODWORD(v12) = 0;
  }
  v13 = (_QWORD *)(v11 + 24 * v12);
  if (v11)
  {
LABEL_30:
    v16 = (_QWORD *)(v11 + 24 * *(unsigned int *)(v11 - 4));
    goto LABEL_35;
  }
  v16 = 0;
LABEL_35:
  if (v16 != v14)
  {
    while (1)
    {
      v17 = v14[1];
      if (!v17)
        goto LABEL_48;
      v18 = (unsigned __int8 **)v14[2];
      if (__ldaxr((unsigned __int8 *)v17))
        break;
      if (__stxr(1u, (unsigned __int8 *)v17))
        goto LABEL_40;
LABEL_41:
      if (*(_QWORD *)(v17 + 24))
        ++*(_QWORD *)(v17 + 8);
      else
        v18 = 0;
      v20 = __ldxr((unsigned __int8 *)v17);
      if (v20 != 1)
      {
        __clrex();
LABEL_56:
        WTF::Lock::unlockSlow((WTF::Lock *)v17);
        if (!v18)
          goto LABEL_48;
LABEL_47:
        WebKit::ServiceWorkerDownloadTask::cancel(v18);
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(v18[1]);
        goto LABEL_48;
      }
      if (__stlxr(0, (unsigned __int8 *)v17))
        goto LABEL_56;
      if (v18)
        goto LABEL_47;
LABEL_48:
      v21 = v14 + 3;
      v14 = v13;
      if (v21 != v13)
      {
        v14 = v21;
        while ((unint64_t)(*v14 + 1) <= 1)
        {
          v14 += 3;
          if (v14 == v13)
          {
            v14 = v13;
            break;
          }
        }
      }
      if (v14 == v16)
        goto LABEL_58;
    }
    __clrex();
LABEL_40:
    MEMORY[0x19AEABB3C](v17);
    goto LABEL_41;
  }
LABEL_58:
  v22 = (WebCore::SWServer *)WebCore::SWServerToContextConnection::server(this);
  if (v22)
  {
    v24 = v22;
    ++*(_DWORD *)v22;
    if ((WebKit::WebSWServerToContextConnection *)WebCore::SWServer::contextConnectionForRegistrableDomain() == this)
      WebCore::SWServer::removeContextConnection(v24, this);
    WTF::RefCounted<WebCore::SWServer>::deref(v24);
  }
  if (v11)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v11, v23);
  if (v2)
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v2, v23);
  v25 = *((_QWORD *)this + 18);
  if (v25)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v25, v23);
  v26 = *((_QWORD *)this + 17);
  if (v26)
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v26, v23);
  v27 = (unsigned int *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v27)
  {
    do
    {
      v28 = __ldaxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
    {
      atomic_store(1u, v27);
      WTF::fastFree((WTF *)v27, v23);
    }
  }
  *((_QWORD *)this + 14) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 15, v23);
  WebCore::SWServerToContextConnection::~SWServerToContextConnection(this);
}

void `non-virtual thunk to'WebKit::WebSWServerToContextConnection::~WebSWServerToContextConnection(WebKit::WebSWServerToContextConnection *this)
{
  WebKit::WebSWServerToContextConnection::~WebSWServerToContextConnection((WebKit::WebSWServerToContextConnection *)((char *)this - 104));
}

{
  WebKit::WebSWServerToContextConnection::~WebSWServerToContextConnection((WebKit::WebSWServerToContextConnection *)((char *)this - 112));
}

{
  WebKit::WebSWServerToContextConnection::operator delete((WebKit::WebSWServerToContextConnection *)((char *)this - 104));
}

{
  WebKit::WebSWServerToContextConnection::operator delete((WebKit::WebSWServerToContextConnection *)((char *)this - 112));
}

double WebKit::WebSWServerToContextConnection::operator delete(WebKit::WebSWServerToContextConnection *a1)
{
  WTF *v1;
  void *v2;
  double result;

  WebKit::WebSWServerToContextConnection::~WebSWServerToContextConnection(a1);
  if (*((_DWORD *)v1 + 4))
  {
    result = 0.0;
    *((_OWORD *)v1 + 10) = 0u;
    *((_OWORD *)v1 + 11) = 0u;
    *((_OWORD *)v1 + 8) = 0u;
    *((_OWORD *)v1 + 9) = 0u;
    *((_OWORD *)v1 + 6) = 0u;
    *((_OWORD *)v1 + 7) = 0u;
    *((_OWORD *)v1 + 4) = 0u;
    *((_OWORD *)v1 + 5) = 0u;
    *((_OWORD *)v1 + 2) = 0u;
    *((_OWORD *)v1 + 3) = 0u;
    *(_OWORD *)v1 = 0u;
    *((_OWORD *)v1 + 1) = 0u;
  }
  else
  {
    WTF::fastFree(v1, v2);
  }
  return result;
}

uint64_t WebKit::WebSWServerToContextConnection::messageSenderConnection(WebKit::WebSWServerToContextConnection *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 16) + 8);
  if (v1)
    v2 = v1 - 48;
  else
    v2 = 0;
  return *(_QWORD *)(v2 + 64);
}

uint64_t `non-virtual thunk to'WebKit::WebSWServerToContextConnection::messageSenderConnection(WebKit::WebSWServerToContextConnection *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (v1)
    v2 = v1 - 48;
  else
    v2 = 0;
  return *(_QWORD *)(v2 + 64);
}

uint64_t WebKit::WebSWServerToContextConnection::messageSenderDestinationID(WebKit::WebSWServerToContextConnection *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebKit::WebSWServerToContextConnection::messageSenderDestinationID(WebKit::WebSWServerToContextConnection *this)
{
  return 0;
}

_DWORD *WebKit::WebSWServerToContextConnection::postMessageToServiceWorkerClient(WebCore::SWServerToContextConnection *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _DWORD *result;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  __int128 v13;
  int v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  result = (_DWORD *)WebCore::SWServerToContextConnection::server(a1);
  if (result)
  {
    v10 = result;
    ++*result;
    v15 = *(_QWORD *)(a2 + 16);
    v11 = (_DWORD *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)result + 3, &v15);
    if (v11)
    {
      v12 = v11;
      ++v11[4];
      v13 = *(_OWORD *)(a2 + 16);
      v16[0] = *(_OWORD *)a2;
      v16[1] = v13;
      (*(void (**)(_DWORD *, _OWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 64))(v11, v16, a3, a4, a5);
      v14 = v12[4];
      if (!v14)
      {
        __break(0xC471u);
        JUMPOUT(0x19782CC00);
      }
      v12[4] = v14 - 1;
    }
    return WTF::RefCounted<WebCore::SWServer>::deref(v10);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWServerToContextConnection::skipWaiting(uint64_t a1, uint64_t a2)
{
  WebCore::SWServerWorker *v4;
  WebCore::SWServerWorker *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t v17[24];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = (WebCore::SWServerWorker *)WebCore::SWServerWorker::existingWorkerForIdentifier();
  if (!v4)
    goto LABEL_5;
  v5 = v4;
  ++*(_DWORD *)v4;
  if (*((_DWORD *)v4 + 61) == 1 || WebCore::SWServerWorker::registration(v4))
  {
    WebCore::SWServerWorker::skipWaiting(v5);
    WTF::RefCounted<WebCore::SWServerWorker>::deref(v5);
LABEL_5:
    v7 = *(_QWORD *)(a1 + 104);
    v6 = a1 + 104;
    v8 = (*(uint64_t (**)(uint64_t))(v7 + 56))(v6);
    v9 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v9 = 2714;
    *(_QWORD *)(v9 + 8) = v8;
    *(_QWORD *)(v9 + 528) = v9 + 16;
    *(_QWORD *)(v9 + 536) = v9 + 16;
    *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v9 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
    *(_QWORD *)v17 = v9;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v9, 8uLL, 8) = a2;
    (*(void (**)(uint64_t, uint8_t *, _QWORD))(*(_QWORD *)v6 + 32))(v6, v17, 0);
    result = *(IPC::Encoder **)v17;
    *(_QWORD *)v17 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v10);
      return (IPC::Encoder *)WTF::fastFree(v12, v13);
    }
    return result;
  }
  v14 = off_1ECE71C40;
  if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)v17 = 136315138;
    *(_QWORD *)&v17[4] = "void WebKit::WebSWServerToContextConnection::skipWaiting(uint64_t, ServiceWorkerIdentifier)";
    _os_log_fault_impl(&dword_196BCC000, v14, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/ServiceWorker/WebSWServerToContextConnection.cpp 113: Invalid message dispatched %s", v17, 0xCu);
  }
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8);
  if (v15)
    v16 = v15 - 48;
  else
    v16 = 0;
  *(_BYTE *)(*(_QWORD *)(v16 + 64) + 98) = 1;
  return (IPC::Encoder *)WTF::RefCounted<WebCore::SWServerWorker>::deref(v5);
}

IPC::Encoder *WebKit::WebSWServerToContextConnection::close(WebKit::WebSWServerToContextConnection *this)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v1 = (char *)this + 104;
  v2 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 13) + 56))((char *)this + 104);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2693;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v1 + 32))(v1, &v8, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWServerToContextConnection::installServiceWorkerContext(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, char a5, __int16 a6)
{
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  IPC::Encoder *result;
  WTF *v17;
  void *v18;
  IPC::Encoder *v19;

  v11 = a1 + 104;
  v12 = *(_BYTE *)(a1 + 176);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 104) + 56))(a1 + 104);
  v14 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v14 = 2704;
  *(_QWORD *)(v14 + 8) = v13;
  *(_QWORD *)(v14 + 528) = v14 + 16;
  *(_QWORD *)(v14 + 536) = v14 + 16;
  *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v14 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
  v19 = (IPC::Encoder *)v14;
  IPC::ArgumentCoder<WebCore::ServiceWorkerContextData,void>::encode((IPC::Encoder *)v14, a2);
  IPC::ArgumentCoder<WebCore::ServiceWorkerData,void>::encode((IPC::Encoder *)v14, a3);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v14, a4);
  *IPC::Encoder::grow((IPC::Encoder *)v14, 1uLL, 1) = a5;
  *IPC::Encoder::grow((IPC::Encoder *)v14, 1uLL, 1) = v12;
  *(_WORD *)IPC::Encoder::grow((IPC::Encoder *)v14, 2uLL, 2) = a6;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v11 + 32))(v11, &v19, 0);
  result = v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v15);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWServerToContextConnection::updateAppInitiatedValue(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *v12;

  v11 = a2;
  v4 = a1 + 104;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 104) + 56))(a1 + 104);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 2717;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v12 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v6, &v11);
  *IPC::Encoder::grow((IPC::Encoder *)v6, 1uLL, 1) = a3;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v4 + 32))(v4, &v12, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWServerToContextConnection::fireInstallEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *v10;

  v9 = a2;
  v2 = a1 + 104;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 104) + 56))(a1 + 104);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 2700;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v10 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v4, &v9);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v2 + 32))(v2, &v10, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWServerToContextConnection::fireActivateEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *v10;

  v9 = a2;
  v2 = a1 + 104;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 104) + 56))(a1 + 104);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 2697;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v10 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v4, &v9);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v2 + 32))(v2, &v10, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWServerToContextConnection::firePushEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const void *v14;
  uint64_t v15;
  size_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t *v24;
  void *v25;
  uint64_t *v26;
  IPC::Encoder *result;
  WTF *v28;
  void *v29;
  uint64_t v30;
  uint64_t *v31[2];
  IPC::Encoder *v32;

  v30 = a2;
  v9 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v9 + 1;
  if (!v9)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8);
    if (v10)
      v11 = v10 - 48;
    else
      v11 = 0;
    v12 = *(_QWORD *)(*(_QWORD *)(v11 + 72) + 32);
    v32 = *(IPC::Encoder **)(v11 + 256);
    v31[0] = (uint64_t *)&v32;
    IPC::Connection::send<Messages::NetworkProcessProxy::StartServiceWorkerBackgroundProcessing>(v12, v31);
  }
  v13 = *(unsigned __int8 *)(a3 + 16);
  v14 = *(const void **)a3;
  v15 = a1 + 104;
  v16 = *(unsigned int *)(a3 + 12);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  v17 = *(unsigned int **)(a1 + 8);
  if (v17)
  {
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  v19 = *a5;
  *a5 = 0;
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 56))(a1 + 104);
  v21 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v21 = 2702;
  *(_QWORD *)(v21 + 8) = v20;
  *(_QWORD *)(v21 + 528) = v21 + 16;
  *(_QWORD *)(v21 + 536) = v21 + 16;
  *(_OWORD *)(v21 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v21 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v21);
  v32 = (IPC::Encoder *)v21;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v21, &v30);
  v22 = IPC::Encoder::grow((IPC::Encoder *)v21, 1uLL, 1);
  if (v13)
  {
    *v22 = 1;
    IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v21, v14, v16);
  }
  else
  {
    *v22 = 0;
  }
  IPC::ArgumentCoder<std::optional<WebCore::NotificationPayload>,void>::encode<IPC::Encoder,std::optional<WebCore::NotificationPayload>>((IPC::Encoder *)v21, a4);
  v23 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
  *v23 = (uint64_t)&off_1E3506560;
  v23[1] = (uint64_t)v17;
  v23[2] = v19;
  v24 = (uint64_t *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v31[0] = v23;
  v31[1] = v24;
  (*(void (**)(uint64_t, IPC::Encoder **, uint64_t **, _QWORD))(*(_QWORD *)v15 + 40))(v15, &v32, v31, 0);
  v26 = v31[0];
  v31[0] = 0;
  if (v26)
    (*(void (**)(uint64_t *))(*v26 + 8))(v26);
  result = v32;
  v32 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v25);
    return (IPC::Encoder *)WTF::fastFree(v28, v29);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::NetworkProcessProxy::StartServiceWorkerBackgroundProcessing>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 345;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v4, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

uint64_t WebKit::WebSWServerToContextConnection::webProcessIdentifier(WebKit::WebSWServerToContextConnection *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 16) + 8);
  if (v1)
    v2 = v1 - 48;
  else
    v2 = 0;
  return *(_QWORD *)(v2 + 256);
}

IPC::Encoder *WebKit::WebSWServerToContextConnection::fireNotificationEvent(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  void *v21;
  uint64_t *v22;
  IPC::Encoder *result;
  WTF *v24;
  void *v25;
  uint64_t v26;
  uint64_t *v27[2];
  IPC::Encoder *v28;

  v26 = a2;
  v9 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v9 + 1;
  if (!v9)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8);
    if (v10)
      v11 = v10 - 48;
    else
      v11 = 0;
    v12 = *(_QWORD *)(*(_QWORD *)(v11 + 72) + 32);
    v28 = *(IPC::Encoder **)(v11 + 256);
    v27[0] = (uint64_t *)&v28;
    IPC::Connection::send<Messages::NetworkProcessProxy::StartServiceWorkerBackgroundProcessing>(v12, v27);
  }
  v13 = a1 + 104;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  v14 = *(unsigned int **)(a1 + 8);
  if (v14)
  {
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
  }
  v16 = *a5;
  *a5 = 0;
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 56))(a1 + 104);
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 2701;
  *(_QWORD *)(v18 + 8) = v17;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  v28 = (IPC::Encoder *)v18;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v18, &v26);
  IPC::ArgumentCoder<WebCore::NotificationData,void>::encode((IPC::Encoder *)v18, a3);
  *IPC::Encoder::grow((IPC::Encoder *)v18, 1uLL, 1) = a4;
  v19 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v19 = &off_1E3506588;
  *(_QWORD *)(v19 + 8) = v14;
  *(_BYTE *)(v19 + 16) = a4;
  *(_QWORD *)(v19 + 24) = v16;
  v20 = (uint64_t *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v27[0] = (uint64_t *)v19;
  v27[1] = v20;
  (*(void (**)(uint64_t, IPC::Encoder **, uint64_t **, _QWORD))(*(_QWORD *)v13 + 40))(v13, &v28, v27, 0);
  v22 = v27[0];
  v27[0] = 0;
  if (v22)
    (*(void (**)(uint64_t *))(*v22 + 8))(v22);
  result = v28;
  v28 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v21);
    return (IPC::Encoder *)WTF::fastFree(v24, v25);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWServerToContextConnection::fireBackgroundFetchEvent(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  void *v19;
  uint64_t *v20;
  IPC::Encoder *result;
  WTF *v22;
  void *v23;
  uint64_t v24;
  uint64_t *v25[2];
  IPC::Encoder *v26;

  v24 = a2;
  v7 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v7 + 1;
  if (!v7)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8);
    if (v8)
      v9 = v8 - 48;
    else
      v9 = 0;
    v10 = *(_QWORD *)(*(_QWORD *)(v9 + 72) + 32);
    v26 = *(IPC::Encoder **)(v9 + 256);
    v25[0] = (uint64_t *)&v26;
    IPC::Connection::send<Messages::NetworkProcessProxy::StartServiceWorkerBackgroundProcessing>(v10, v25);
  }
  v11 = a1 + 104;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  v12 = *(unsigned int **)(a1 + 8);
  if (v12)
  {
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  v14 = *a4;
  *a4 = 0;
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 56))(a1 + 104);
  v16 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v16 = 2699;
  *(_QWORD *)(v16 + 8) = v15;
  *(_QWORD *)(v16 + 528) = v16 + 16;
  *(_QWORD *)(v16 + 536) = v16 + 16;
  *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v16 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
  v26 = (IPC::Encoder *)v16;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v16, &v24);
  IPC::ArgumentCoder<WebCore::BackgroundFetchInformation,void>::encode((IPC::Encoder *)v16, a3);
  v17 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
  *v17 = (uint64_t)&off_1E35065D8;
  v17[1] = (uint64_t)v12;
  v17[2] = v14;
  v18 = (uint64_t *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v25[0] = v17;
  v25[1] = v18;
  (*(void (**)(uint64_t, IPC::Encoder **, uint64_t **, _QWORD))(*(_QWORD *)v11 + 40))(v11, &v26, v25, 0);
  v20 = v25[0];
  v25[0] = 0;
  if (v20)
    (*(void (**)(uint64_t *))(*v20 + 8))(v20);
  result = v26;
  v26 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v22, v23);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWServerToContextConnection::fireBackgroundFetchClickEvent(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  void *v19;
  uint64_t *v20;
  IPC::Encoder *result;
  WTF *v22;
  void *v23;
  uint64_t v24;
  uint64_t *v25[2];
  IPC::Encoder *v26;

  v24 = a2;
  v7 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v7 + 1;
  if (!v7)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8);
    if (v8)
      v9 = v8 - 48;
    else
      v9 = 0;
    v10 = *(_QWORD *)(*(_QWORD *)(v9 + 72) + 32);
    v26 = *(IPC::Encoder **)(v9 + 256);
    v25[0] = (uint64_t *)&v26;
    IPC::Connection::send<Messages::NetworkProcessProxy::StartServiceWorkerBackgroundProcessing>(v10, v25);
  }
  v11 = a1 + 104;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  v12 = *(unsigned int **)(a1 + 8);
  if (v12)
  {
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  v14 = *a4;
  *a4 = 0;
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 56))(a1 + 104);
  v16 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v16 = 2698;
  *(_QWORD *)(v16 + 8) = v15;
  *(_QWORD *)(v16 + 528) = v16 + 16;
  *(_QWORD *)(v16 + 536) = v16 + 16;
  *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v16 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
  v26 = (IPC::Encoder *)v16;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v16, &v24);
  IPC::ArgumentCoder<WebCore::BackgroundFetchInformation,void>::encode((IPC::Encoder *)v16, a3);
  v17 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
  *v17 = (uint64_t)&off_1E3506600;
  v17[1] = (uint64_t)v12;
  v17[2] = v14;
  v18 = (uint64_t *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v25[0] = v17;
  v25[1] = v18;
  (*(void (**)(uint64_t, IPC::Encoder **, uint64_t **, _QWORD))(*(_QWORD *)v11 + 40))(v11, &v26, v25, 0);
  v20 = v25[0];
  v25[0] = 0;
  if (v20)
    (*(void (**)(uint64_t *))(*v20 + 8))(v20);
  result = v26;
  v26 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v22, v23);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWServerToContextConnection::terminateWorker(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *v10;

  v9 = a2;
  v2 = a1 + 104;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 104) + 56))(a1 + 104);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 2716;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v10 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v4, &v9);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v2 + 32))(v2, &v10, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

_DWORD *WebKit::WebSWServerToContextConnection::didFinishActivation(uint64_t a1)
{
  _DWORD *result;
  _DWORD *v3;
  int v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  result = (_DWORD *)WebCore::SWServerWorker::existingWorkerForIdentifier();
  if (result)
  {
    v3 = result;
    ++*result;
    v4 = *((unsigned __int8 *)result + 160);
    if (v4 != 5)
    {
      if (v4 == 3)
      {
        WebCore::SWServerToContextConnection::didFinishActivation();
      }
      else
      {
        v5 = off_1ECE71C40;
        if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
        {
          v8 = 136315138;
          v9 = "void WebKit::WebSWServerToContextConnection::didFinishActivation(WebCore::ServiceWorkerIdentifier)";
          _os_log_fault_impl(&dword_196BCC000, v5, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/ServiceWorker/WebSWServerToContextConnection.cpp 234: Invalid message dispatched %s", (uint8_t *)&v8, 0xCu);
        }
        v6 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8);
        if (v6)
          v7 = v6 - 48;
        else
          v7 = 0;
        *(_BYTE *)(*(_QWORD *)(v7 + 64) + 98) = 1;
      }
    }
    return WTF::RefCounted<WebCore::SWServerWorker>::deref(v3);
  }
  return result;
}

_DWORD *WebKit::WebSWServerToContextConnection::didFinishInstall(uint64_t a1)
{
  _DWORD *result;
  _DWORD *v3;
  int v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  result = (_DWORD *)WebCore::SWServerWorker::existingWorkerForIdentifier();
  if (result)
  {
    v3 = result;
    ++*result;
    v4 = *((unsigned __int8 *)result + 160);
    if (v4 != 5)
    {
      if (v4 == 1)
      {
        WebCore::SWServerToContextConnection::didFinishInstall();
      }
      else
      {
        v5 = off_1ECE71C40;
        if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
        {
          v8 = 136315138;
          v9 = "void WebKit::WebSWServerToContextConnection::didFinishInstall(const std::optional<WebCore::ServiceWorkerJ"
               "obDataIdentifier> &, WebCore::ServiceWorkerIdentifier, BOOL)";
          _os_log_fault_impl(&dword_196BCC000, v5, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/ServiceWorker/WebSWServerToContextConnection.cpp 248: Invalid message dispatched %s", (uint8_t *)&v8, 0xCu);
        }
        v6 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8);
        if (v6)
          v7 = v6 - 48;
        else
          v7 = 0;
        *(_BYTE *)(*(_QWORD *)(v7 + 64) + 98) = 1;
      }
    }
    return WTF::RefCounted<WebCore::SWServerWorker>::deref(v3);
  }
  return result;
}

unsigned int *WebKit::WebSWServerToContextConnection::didSaveScriptsToDisk(uint64_t a1, uint64_t a2, unsigned int **this, uint64_t a4)
{
  unsigned int *v6;
  unsigned int v7;
  WTF **v8;
  WTF **v9;
  WTF **v10;
  WTF **v11;
  unsigned int *v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  const WTF::StringImpl *v18;
  WTF::URL *v19;
  int v20;
  WTF::URL *v21;
  __int128 v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  int v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int *result;
  WTF **v34;
  uint64_t v35;
  WTF **v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  IPC::Encoder *v40;
  WTF *v41;
  void *v42;
  uint64_t v44;
  unsigned int *v45;
  unsigned int *v46;
  uint64_t v47;
  IPC::Encoder *v48;

  v47 = a2;
  if (WebCore::ScriptBuffer::containsSingleFileMappedSegment((WebCore::ScriptBuffer *)this))
  {
    v6 = *this;
    if (*this)
    {
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
  }
  else
  {
    v6 = 0;
  }
  v45 = 0;
  v46 = v6;
  v8 = WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::begin(a4);
  v44 = *(_QWORD *)a4 + 48 * *(unsigned int *)(a4 + 8);
  if ((WTF **)v44 != v8)
  {
    v10 = v8;
    v11 = v9;
    do
    {
      if (!WebCore::ScriptBuffer::containsSingleFileMappedSegment((WebCore::ScriptBuffer *)(v10 + 5)))
        goto LABEL_35;
      v12 = v45;
      if (v45
        || (WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::expand((uint64_t *)&v45, 0), (v12 = v45) != 0))
      {
        v13 = *(v12 - 2);
      }
      else
      {
        v13 = 0;
      }
      v14 = *((_DWORD *)*v10 + 4);
      if (v14 >= 0x100)
        v15 = v14 >> 8;
      else
        v15 = WTF::StringImpl::hashSlowCase(*v10);
      v16 = v15 & v13;
      v17 = (uint64_t)&v12[12 * (v15 & v13)];
      if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>((WTF **)v17) & 1) != 0)
      {
LABEL_22:
        WTF::String::operator=((WTF::StringImpl **)v17, (WTF::StringImpl *)v10);
        v22 = *(_OWORD *)(v10 + 1);
        *(_OWORD *)(v17 + 24) = *(_OWORD *)(v10 + 3);
        *(_OWORD *)(v17 + 8) = v22;
        v23 = (unsigned int *)v10[5];
        if (v23)
        {
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 + 1, v23));
        }
        v25 = *(unsigned int **)(v17 + 40);
        *(_QWORD *)(v17 + 40) = v23;
        if (v25)
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v25, v9);
        if (v45)
          v26 = *(v45 - 3) + 1;
        else
          v26 = 1;
        *(v45 - 3) = v26;
        if (v45)
          v27 = *(v45 - 3);
        else
          v27 = 0;
        v28 = *(v45 - 4) + v27;
        v29 = *(v45 - 1);
        if (v29 > 0x400)
        {
          if (v29 > 2 * v28)
            goto LABEL_35;
        }
        else if (3 * v29 > 4 * v28)
        {
          goto LABEL_35;
        }
        WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::expand((uint64_t *)&v45, v17);
        goto LABEL_35;
      }
      v19 = 0;
      v20 = 1;
      while (1)
      {
        v21 = (WTF::URL *)v17;
        if (*(_QWORD *)v17 != -1)
        {
          v21 = v19;
          if ((WTF::equal(*(WTF **)v17, *v10, v18) & 1) != 0)
            break;
        }
        v16 = (v16 + v20) & v13;
        v17 = (uint64_t)&v12[12 * v16];
        ++v20;
        v19 = v21;
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>((WTF **)v17))
        {
          if (v21)
          {
            *(_QWORD *)v21 = 0;
            WTF::URL::invalidate(v21);
            *((_QWORD *)v21 + 5) = 0;
            --*(v45 - 4);
            v17 = (uint64_t)v21;
          }
          goto LABEL_22;
        }
      }
LABEL_35:
      while (1)
      {
        v10 += 6;
        if (v10 == v11)
          break;
        if (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v10))
          goto LABEL_39;
      }
      v10 = v11;
LABEL_39:
      ;
    }
    while (v10 != (WTF **)v44);
    v6 = v46;
  }
  if (v6)
    goto LABEL_45;
  result = v45;
  if (!v45)
    return result;
  if (*(v45 - 3))
  {
LABEL_45:
    v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 104) + 56))(a1 + 104);
    v31 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v31 = 2696;
    *(_QWORD *)(v31 + 8) = v30;
    *(_QWORD *)(v31 + 528) = v31 + 16;
    *(_QWORD *)(v31 + 536) = v31 + 16;
    *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v31 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
    v48 = (IPC::Encoder *)v31;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v31, &v47);
    IPC::ArgumentCoder<WebCore::ScriptBuffer,void>::encode((IPC::Encoder *)v31, (WebCore::ScriptBuffer *)&v46);
    if (v45)
      v32 = *(v45 - 3);
    else
      v32 = 0;
    *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v32;
    v34 = (WTF **)v45;
    if (v45)
    {
      v35 = *(v45 - 1);
      v36 = (WTF **)&v45[12 * v35];
      if (*(v45 - 3))
      {
        if ((_DWORD)v35)
        {
          v37 = 48 * v35;
          while ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v34) & 1) != 0
               || *v34 == (WTF *)-1)
          {
            v34 += 6;
            v37 -= 48;
            if (!v37)
            {
              v34 = v36;
              break;
            }
          }
          v38 = (uint64_t *)v34;
          v34 = (WTF **)v45;
          if (!v45)
          {
LABEL_65:
            while (v38 != (uint64_t *)v34)
            {
              IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v31, v38);
              IPC::ArgumentCoder<WebCore::ScriptBuffer,void>::encode((IPC::Encoder *)v31, (WebCore::ScriptBuffer *)(v38 + 5));
              v39 = v38 + 6;
              v38 = (uint64_t *)v36;
              if (v39 != (uint64_t *)v36)
              {
                v38 = v39;
                while ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>((WTF **)v38) & 1) != 0
                     || *v38 == -1)
                {
                  v38 += 6;
                  if (v38 == (uint64_t *)v36)
                  {
                    v38 = (uint64_t *)v36;
                    break;
                  }
                }
              }
            }
            (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(a1 + 104) + 32))(a1 + 104, &v48, 0);
            v40 = v48;
            v48 = 0;
            if (v40)
            {
              IPC::Encoder::~Encoder(v40, v9);
              WTF::fastFree(v41, v42);
            }
            result = v45;
            if (!v45)
              goto LABEL_77;
            goto LABEL_76;
          }
        }
        else
        {
          v38 = (uint64_t *)v45;
        }
LABEL_64:
        v34 += 6 * *((unsigned int *)v34 - 1);
        goto LABEL_65;
      }
      v38 = (uint64_t *)&v45[12 * v35];
    }
    else
    {
      v38 = 0;
      LODWORD(v35) = 0;
    }
    v36 = (WTF **)&v45[12 * v35];
    if (!v45)
      goto LABEL_65;
    goto LABEL_64;
  }
LABEL_76:
  WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::deallocateTable((uint64_t)result, v9);
LABEL_77:
  result = v46;
  v46 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v9);
  return result;
}

IPC::Encoder *WebKit::WebSWServerToContextConnection::terminateDueToUnresponsiveness(WebKit::WebSWServerToContextConnection *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *v10;

  v1 = *(_QWORD *)(*((_QWORD *)this + 16) + 8);
  if (v1)
    v2 = v1 - 48;
  else
    v2 = 0;
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 72) + 32);
  v9 = *(_QWORD *)(v2 + 256);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 346;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v10 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v4, &v9);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

_DWORD *WebKit::WebSWServerToContextConnection::openWindow(WebCore::SWServerToContextConnection *a1, uint64_t a2, uint64_t *a3, WTF **a4)
{
  _DWORD *v7;
  _DWORD *v8;
  WTF *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  WTF *v19;
  void *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  WTF *v25;
  WTF *v26;
  uint64_t v27;
  void *v28;
  WTF *v29;
  IPC::Encoder *v30;
  WTF *v31;
  void *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  WTF *v36;
  WTF *v37;
  WebCore::SWServerWorker *v38;
  _DWORD *result;
  WTF *v40;
  uint64_t v41;
  WebCore::SWServerWorker *v42;
  IPC::Encoder *v43;
  WTF *v44[2];
  _BYTE v45[24];
  int v46;
  _BYTE v47[24];
  int v48;
  WTF *v49[2];
  _BYTE v50[24];
  int v51;
  _BYTE v52[24];
  int v53;
  int v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v7 = (_DWORD *)WebCore::SWServerToContextConnection::server(a1);
  if (v7)
  {
    v8 = v7;
    ++*v7;
    WebCore::SWServer::workerByID();
    if (v42)
    {
      v9 = *a4;
      *a4 = 0;
      v44[0] = v9;
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v8 + 2, (uint64_t)v8);
      v10 = (unsigned int *)*((_QWORD *)v8 + 1);
      if (v10)
      {
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 + 1, v10));
      }
      v44[1] = (WTF *)v10;
      v12 = WebCore::SWServerWorker::origin(v42);
      v45[0] = 0;
      v46 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v45, v12);
      v47[0] = 0;
      v48 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v47, v12 + 32);
      v13 = *(_QWORD *)(*((_QWORD *)a1 + 16) + 8);
      if (v13)
        v14 = v13 - 48;
      else
        v14 = 0;
      v15 = *(os_unfair_lock_s **)(*(_QWORD *)(v14 + 72) + 32);
      v41 = *(_QWORD *)(v14 + 80);
      v16 = WebCore::SWServerWorker::origin(v42);
      v17 = *(_OWORD *)v44;
      *(_OWORD *)v44 = 0u;
      *(_OWORD *)v49 = v17;
      v50[0] = 0;
      v51 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v50, (uint64_t)v45);
      v52[0] = 0;
      v53 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v52, (uint64_t)v47);
      v18 = WTF::fastMalloc((WTF *)0x58);
      *(_QWORD *)v18 = &off_1E3506628;
      *(WTF **)(v18 + 8) = v49[0];
      v19 = v49[1];
      *(_OWORD *)v49 = 0u;
      *(_QWORD *)(v18 + 16) = v19;
      *(_BYTE *)(v18 + 24) = 0;
      *(_DWORD *)(v18 + 48) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v18 + 24, (uint64_t)v50);
      *(_BYTE *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 80) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v18 + 56, (uint64_t)v52);
      if (v53 != -1)
        ((void (*)(IPC::Encoder **, _BYTE *))off_1E3506540[v53])(&v43, v52);
      v53 = -1;
      if (v51 != -1)
        ((void (*)(IPC::Encoder **, _BYTE *))off_1E3506540[v51])(&v43, v50);
      v21 = v16 + 32;
      v51 = -1;
      v22 = (unsigned int *)v49[1];
      v49[1] = 0;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          WTF::fastFree((WTF *)v22, v20);
        }
      }
      v25 = v49[0];
      v49[0] = 0;
      if (v25)
        (*(void (**)(WTF *))(*(_QWORD *)v25 + 8))(v25);
      v26 = (WTF *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
      v27 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v27 = 329;
      *(_QWORD *)(v27 + 8) = 0;
      *(_QWORD *)(v27 + 528) = v27 + 16;
      *(_QWORD *)(v27 + 536) = v27 + 16;
      *(_OWORD *)(v27 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v27 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v27);
      v43 = (IPC::Encoder *)v27;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v27, &v41);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v27, a3);
      IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode((IPC::Encoder *)v27, v21);
      v49[0] = (WTF *)v18;
      v49[1] = v26;
      IPC::Connection::sendMessageWithAsyncReply(v15, &v43, (uint64_t *)v49, 0, 0);
      v29 = v49[0];
      v49[0] = 0;
      if (v29)
        (*(void (**)(WTF *))(*(_QWORD *)v29 + 8))(v29);
      v30 = v43;
      v43 = 0;
      if (v30)
      {
        IPC::Encoder::~Encoder(v30, v28);
        WTF::fastFree(v31, v32);
      }
      if (v48 != -1)
        ((void (*)(WTF **, _BYTE *))off_1E3506540[v48])(v49, v47);
      v48 = -1;
      if (v46 != -1)
        ((void (*)(WTF **, _BYTE *))off_1E3506540[v46])(v49, v45);
      v46 = -1;
      v33 = (unsigned int *)v44[1];
      v44[1] = 0;
      if (v33)
      {
        do
        {
          v34 = __ldaxr(v33);
          v35 = v34 - 1;
        }
        while (__stlxr(v35, v33));
        if (!v35)
        {
          atomic_store(1u, v33);
          WTF::fastFree((WTF *)v33, v28);
        }
      }
      v36 = v44[0];
      v44[0] = 0;
      if (v36)
        (*(void (**)(WTF *))(*(_QWORD *)v36 + 8))(v36);
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v50[0] = 33;
      v54 = 1;
      v37 = *a4;
      *a4 = 0;
      (*(void (**)(WTF *, WTF **))(*(_QWORD *)v37 + 16))(v37, v49);
      (*(void (**)(WTF *))(*(_QWORD *)v37 + 8))(v37);
      if (v54 != -1)
        ((void (*)(WTF **, _BYTE *))off_1E3506530[v54])(v44, v50);
    }
    v38 = v42;
    v42 = 0;
    if (v38)
      WTF::RefCounted<WebCore::SWServerWorker>::deref(v38);
    return WTF::RefCounted<WebCore::SWServer>::deref(v8);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v50[0] = 33;
    v54 = 1;
    v40 = *a4;
    *a4 = 0;
    (*(void (**)(WTF *, WTF **))(*(_QWORD *)v40 + 16))(v40, v49);
    result = (_DWORD *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v40 + 8))(v40);
    if (v54 != -1)
      return (_DWORD *)((uint64_t (*)(WTF **, _BYTE *))off_1E3506530[v54])(v44, v50);
  }
  return result;
}

_DWORD *WebKit::WebSWServerToContextConnection::reportConsoleMessage(WebCore::SWServerToContextConnection *a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  _DWORD *result;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::SWServerWorker *v15;
  uint64_t v16;
  _QWORD v17[3];
  char v18;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  WebCore::SWServerWorker *v22;
  uint64_t v23;

  v23 = a6;
  result = (_DWORD *)WebCore::SWServerToContextConnection::server(a1);
  if (result)
  {
    v11 = result;
    ++*result;
    WebCore::SWServer::workerByID();
    if (v22)
    {
      v12 = *(_QWORD *)(*((_QWORD *)a1 + 16) + 8);
      if (v12)
        v13 = v12 - 48;
      else
        v13 = 0;
      v14 = *(_QWORD *)(*(_QWORD *)(v13 + 72) + 32);
      v16 = *(_QWORD *)(v13 + 80);
      v17[0] = &v16;
      v17[1] = (char *)v22 + 120;
      v17[2] = WebCore::SWServerWorker::origin(v22) + 32;
      v18 = a3;
      v19 = a4;
      v20 = a5;
      v21 = &v23;
      IPC::Connection::send<Messages::NetworkProcessProxy::ReportConsoleMessage>(v14, (uint64_t)v17, 0, 0, 0);
      v15 = v22;
      v22 = 0;
      if (v15)
        WTF::RefCounted<WebCore::SWServerWorker>::deref(v15);
    }
    return WTF::RefCounted<WebCore::SWServer>::deref(v11);
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::NetworkProcessProxy::ReportConsoleMessage>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 333;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::URL const&,WebCore::SecurityOriginData const&,JSC::MessageSource,JSC::MessageLevel,WTF::String const&,unsigned long const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::URL const&,WebCore::SecurityOriginData const&,JSC::MessageSource,JSC::MessageLevel,WTF::String const&,unsigned long const&>,0ul,1ul,2ul,3ul,4ul,5ul,6ul>((IPC::Encoder *)v10, a2);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

IPC::Encoder *WebKit::WebSWServerToContextConnection::matchAllCompleted(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  IPC::Encoder *v16;

  v5 = a1 + 104;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 104) + 56))(a1 + 104);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2705;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v16 = (IPC::Encoder *)v7;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 8uLL, 8) = a2;
  v8 = *(unsigned int *)(a3 + 12);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 8uLL, 8) = v8;
  v9 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v9)
  {
    v10 = *(_QWORD *)a3;
    v11 = 192 * v9;
    do
    {
      IPC::ArgumentCoder<WebCore::ServiceWorkerClientData,void>::encode((IPC::Encoder *)v7, v10);
      v10 += 192;
      v11 -= 192;
    }
    while (v11);
  }
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, &v16, 0);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t WebKit::WebSWServerToContextConnection::connectionIsNoLongerNeeded(WebKit::WebSWServerToContextConnection *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*((_QWORD *)this + 16) + 8);
  if (v1)
    return WebKit::NetworkConnectionToWebProcess::serviceWorkerServerToContextConnectionNoLongerNeeded((WebKit::NetworkConnectionToWebProcess *)(v1 - 48));
  else
    return WebKit::NetworkConnectionToWebProcess::serviceWorkerServerToContextConnectionNoLongerNeeded(0);
}

IPC::Encoder *WebKit::WebSWServerToContextConnection::setThrottleState(WebKit::WebSWServerToContextConnection *this, char a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v4 = (char *)this + 104;
  v3 = *((_QWORD *)this + 13);
  *((_BYTE *)this + 152) = a2;
  v5 = (*(uint64_t (**)(char *))(v3 + 56))((char *)this + 104);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 2712;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  *IPC::Encoder::grow((IPC::Encoder *)v6, 1uLL, 1) = a2;
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v4 + 32))(v4, &v11, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

void WebKit::WebSWServerToContextConnection::didReceiveFetchTaskMessage(WebKit::WebSWServerToContextConnection *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebKit::ServiceWorkerFetchTask *v9;
  uint64_t v10;

  v10 = *((_QWORD *)a3 + 8);
  v6 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)this + 17, &v10);
  v7 = *((_QWORD *)this + 17);
  if (v7)
    v7 += 16 * *(unsigned int *)(v7 - 4);
  if (v7 != v6)
  {
    v8 = *(_QWORD *)(v6 + 8);
    if (v8)
      v9 = *(WebKit::ServiceWorkerFetchTask **)(v8 + 8);
    else
      v9 = 0;
    WebKit::ServiceWorkerFetchTask::didReceiveMessage(v9, a2, a3);
  }
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::ServiceWorkerFetchTask&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v27 = 0;
        else
          v27 = *(unsigned int *)(v8 - 4);
        v32 = 0;
        v33 = v8 + 16 * v27;
        goto LABEL_35;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 8), a3);
  v21 = *(unsigned int **)(a3 + 8);
  if (v21)
  {
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
  }
  result = (uint64_t *)v16[1];
  v16[1] = (uint64_t)v21;
  if (result)
  {
    do
    {
      v23 = __ldaxr((unsigned int *)result);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, (unsigned int *)result));
    if (!v24)
    {
      atomic_store(1u, (unsigned int *)result);
      result = (uint64_t *)WTF::fastFree((WTF *)result, v20);
    }
  }
  v25 = *v6;
  if (*v6)
    v26 = *(_DWORD *)(v25 - 12) + 1;
  else
    v26 = 1;
  *(_DWORD *)(v25 - 12) = v26;
  v28 = *v6;
  if (*v6)
    v29 = *(_DWORD *)(v28 - 12);
  else
    v29 = 0;
  v30 = (*(_DWORD *)(v28 - 16) + v29);
  v31 = *(unsigned int *)(v28 - 4);
  if (v31 > 0x400)
  {
    if (v31 <= 2 * v30)
    {
LABEL_28:
      result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6, v16);
      v16 = result;
      v28 = *v6;
      if (*v6)
        v31 = *(unsigned int *)(v28 - 4);
      else
        v31 = 0;
    }
  }
  else if (3 * v31 <= 4 * v30)
  {
    goto LABEL_28;
  }
  v33 = v28 + 16 * v31;
  v32 = 1;
LABEL_35:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v33;
  *(_BYTE *)(a4 + 16) = v32;
  return result;
}

uint64_t *WebKit::WebSWServerToContextConnection::unregisterFetch(WebKit::WebSWServerToContextConnection *this, WebKit::ServiceWorkerFetchTask *a2)
{
  uint64_t *v3;
  uint64_t *result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v3 = (uint64_t *)((char *)this + 136);
  v7 = *((_QWORD *)a2 + 5);
  result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)this + 17, &v7);
  v5 = *((_QWORD *)this + 17);
  if (v5)
  {
    v6 = (uint64_t *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v6 = 0;
  }
  if (v6 != result)
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(v3, result);
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::ServiceWorkerDownloadTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::ServiceWorkerDownloadTask>>,WTF::HashTableTraits>::add<WebKit::ServiceWorkerDownloadTask&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  v15 = v10 & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~((_DWORD)v14 << 27)));
  v16 = (uint64_t *)(v8 + 24 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v23 = 0;
        else
          v23 = *(_DWORD *)(v8 - 4);
        v28 = 0;
        v29 = v8 + 24 * v23;
        goto LABEL_33;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 24 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      v18[2] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  result = *(uint64_t **)(a3 + 8);
  if (result)
    result = (uint64_t *)WTF::ThreadSafeWeakPtrControlBlock::weakRef((WTF::ThreadSafeWeakPtrControlBlock *)result);
  v20 = (unsigned __int8 *)v16[1];
  v16[1] = (uint64_t)result;
  if (v20)
    result = (uint64_t *)WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v20, a2);
  v16[2] = a3;
  v21 = *v6;
  if (*v6)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v24 = *v6;
  if (*v6)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
    {
LABEL_26:
      result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6, v16);
      v16 = result;
      v24 = *v6;
      if (*v6)
        LODWORD(v27) = *(_DWORD *)(v24 - 4);
      else
        LODWORD(v27) = 0;
    }
  }
  else if (3 * v27 <= 4 * v26)
  {
    goto LABEL_26;
  }
  v29 = v24 + 24 * v27;
  v28 = 1;
LABEL_33:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v29;
  *(_BYTE *)(a4 + 16) = v28;
  return result;
}

uint64_t *WebKit::WebSWServerToContextConnection::unregisterDownload(WebKit::WebSWServerToContextConnection *this, WebKit::ServiceWorkerDownloadTask *a2)
{
  uint64_t *v3;
  uint64_t *result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v3 = (uint64_t *)((char *)this + 144);
  v7 = *((_QWORD *)a2 + 75);
  result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)this + 18, &v7);
  v5 = *((_QWORD *)this + 18);
  if (v5)
  {
    v6 = (uint64_t *)(v5 + 24 * *(unsigned int *)(v5 - 4));
    if (v6 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v6 = 0;
  }
  if (v6 != result)
    return (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(v3, result);
  return result;
}

_DWORD *WebKit::WebSWServerToContextConnection::focus(WebCore::SWServerToContextConnection *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  __int128 v9;
  int v10;
  _DWORD *result;
  uint64_t v12;
  void *v13;
  _OWORD v14[2];
  _QWORD v15[24];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = WebCore::SWServerToContextConnection::server(a1);
  v6 = (_DWORD *)v5;
  if (v5)
  {
    ++*(_DWORD *)v5;
    v15[0] = *(_QWORD *)(a2 + 16);
    v7 = (_DWORD *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(v5 + 24), v15);
    if (v7)
    {
      v8 = v7;
      ++v7[4];
      v9 = *(_OWORD *)(a2 + 16);
      v14[0] = *(_OWORD *)a2;
      v14[1] = v9;
      (*(void (**)(_DWORD *, _OWORD *, uint64_t *))(*(_QWORD *)v7 + 72))(v7, v14, a3);
      v10 = v8[4];
      if (!v10)
      {
        __break(0xC471u);
        JUMPOUT(0x19782F02CLL);
      }
      v8[4] = v10 - 1;
      return WTF::RefCounted<WebCore::SWServer>::deref(v6);
    }
  }
  LOBYTE(v15[0]) = 0;
  v16 = 0;
  v12 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v12 + 16))(v12, v15);
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  result = (_DWORD *)std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15, v13);
  if (v6)
    return WTF::RefCounted<WebCore::SWServer>::deref(v6);
  return result;
}

_DWORD *WebKit::WebSWServerToContextConnection::navigate(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  WebCore::SWServerWorker *v9;
  WebCore::SWServerWorker *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF::StringImpl *v26;
  __int128 v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF *v38;
  IPC::Encoder *v39;
  WTF *v40;
  void *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  _DWORD *result;
  uint64_t v48;
  os_unfair_lock_s *v49;
  __int128 v50;
  IPC::Encoder *v51;
  WTF *v52;
  WTF::StringImpl *v53;
  __int128 v54;
  __int128 v55;
  _BYTE v56[24];
  int v57;
  _BYTE v58[24];
  int v59;
  uint64_t v60;
  _BYTE v61[136];
  __int128 v62;
  char v63;
  char v64;
  __int128 v65;
  __int128 v66;
  WTF *v67;
  WTF::StringImpl *v68;
  __int128 v69;
  __int128 v70;
  _BYTE v71[24];
  int v72;
  _BYTE v73[24];
  int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v9 = (WebCore::SWServerWorker *)WebCore::SWServerWorker::existingWorkerForIdentifier();
  if (v9)
  {
    v10 = v9;
    ++*(_DWORD *)v9;
    v11 = *((_OWORD *)a2 + 1);
    v65 = *(_OWORD *)a2;
    v66 = v11;
    if ((WebCore::SWServerWorker::isClientActiveServiceWorker() & 1) != 0)
    {
      WebCore::SWServerWorker::findClientByIdentifier();
      if (v64 && v61[128] && v63)
      {
        v50 = v62;
        v12 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8);
        if (v12)
          v13 = v12 - 48;
        else
          v13 = 0;
        v49 = *(os_unfair_lock_s **)(*(_QWORD *)(v13 + 72) + 32);
        WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
        v14 = *(unsigned int **)(a1 + 8);
        if (v14)
        {
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 + 1, v14));
        }
        v52 = (WTF *)v14;
        v16 = *(WTF::StringImpl **)a4;
        if (*(_QWORD *)a4)
          *(_DWORD *)v16 += 2;
        v53 = v16;
        v17 = *(_OWORD *)(a4 + 24);
        v54 = *(_OWORD *)(a4 + 8);
        v55 = v17;
        v18 = WebCore::SWServerWorker::origin(v10);
        v56[0] = 0;
        v57 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v56, v18);
        v58[0] = 0;
        v59 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v58, v18 + 32);
        v19 = *a5;
        *a5 = 0;
        v21 = v52;
        v20 = v53;
        v60 = v19;
        v52 = 0;
        v67 = v21;
        if (v53)
          *(_DWORD *)v53 += 2;
        v68 = v20;
        v69 = v54;
        v70 = v55;
        v71[0] = 0;
        v72 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v71, (uint64_t)v56);
        v73[0] = 0;
        v74 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v73, (uint64_t)v58);
        v22 = v60;
        v60 = 0;
        v75 = v22;
        v23 = WTF::fastMalloc((WTF *)0x80);
        v24 = v23;
        *(_QWORD *)v23 = &off_1E3506650;
        v25 = v67;
        v67 = 0;
        *(_QWORD *)(v23 + 8) = v25;
        v26 = v68;
        if (v68)
          *(_DWORD *)v68 += 2;
        *(_QWORD *)(v23 + 16) = v26;
        v27 = v69;
        *(_OWORD *)(v23 + 40) = v70;
        *(_OWORD *)(v23 + 24) = v27;
        *(_BYTE *)(v23 + 56) = 0;
        *(_DWORD *)(v23 + 80) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v23 + 56, (uint64_t)v71);
        *(_BYTE *)(v24 + 88) = 0;
        *(_DWORD *)(v24 + 112) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v24 + 88, (uint64_t)v73);
        *(_QWORD *)(v24 + 120) = v75;
        v75 = 0;
        if (v74 != -1)
          ((void (*)(IPC::Encoder **, _BYTE *))off_1E3506540[v74])(&v51, v73);
        v74 = -1;
        if (v72 != -1)
          ((void (*)(IPC::Encoder **, _BYTE *))off_1E3506540[v72])(&v51, v71);
        v72 = -1;
        v29 = v68;
        v68 = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, v28);
          else
            *(_DWORD *)v29 -= 2;
        }
        v33 = (unsigned int *)v67;
        v67 = 0;
        if (v33)
        {
          do
          {
            v34 = __ldaxr(v33);
            v35 = v34 - 1;
          }
          while (__stlxr(v35, v33));
          if (!v35)
          {
            atomic_store(1u, v33);
            WTF::fastFree((WTF *)v33, v28);
          }
        }
        v36 = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
        v37 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v37 = 323;
        *(_QWORD *)(v37 + 8) = 0;
        *(_QWORD *)(v37 + 528) = v37 + 16;
        *(_QWORD *)(v37 + 536) = v37 + 16;
        *(_OWORD *)(v37 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v37 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v37);
        v51 = (IPC::Encoder *)v37;
        IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v37, (uint64_t *)&v50);
        IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::encode((IPC::Encoder *)v37, a2);
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v37, (uint64_t *)a4);
        v67 = (WTF *)v24;
        v68 = v36;
        IPC::Connection::sendMessageWithAsyncReply(v49, &v51, (uint64_t *)&v67, 0, 0);
        v38 = v67;
        v67 = 0;
        if (v38)
          (*(void (**)(WTF *))(*(_QWORD *)v38 + 8))(v38);
        v39 = v51;
        v51 = 0;
        if (v39)
        {
          IPC::Encoder::~Encoder(v39, v32);
          WTF::fastFree(v40, v41);
        }
        v42 = v60;
        v60 = 0;
        if (v42)
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
        if (v59 != -1)
          ((void (*)(WTF **, _BYTE *))off_1E3506540[v59])(&v67, v58);
        v59 = -1;
        if (v57 != -1)
          ((void (*)(WTF **, _BYTE *))off_1E3506540[v57])(&v67, v56);
        v57 = -1;
        v43 = v53;
        v53 = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 2)
            WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v32);
          else
            *(_DWORD *)v43 -= 2;
        }
        v44 = (unsigned int *)v52;
        v52 = 0;
        if (v44)
        {
          do
          {
            v45 = __ldaxr(v44);
            v46 = v45 - 1;
          }
          while (__stlxr(v46, v44));
          if (!v46)
          {
            atomic_store(1u, v44);
            WTF::fastFree((WTF *)v44, v32);
          }
        }
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        LOBYTE(v69) = 33;
        v76 = 1;
        v31 = *a5;
        *a5 = 0;
        (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v31 + 16))(v31, &v67);
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
        if (v76 != -1)
          ((void (*)(WTF **, __int128 *))off_1E3506530[v76])(&v52, &v69);
      }
      std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v61, v32);
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      LOBYTE(v69) = 33;
      v76 = 1;
      v30 = *a5;
      *a5 = 0;
      (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v30 + 16))(v30, &v67);
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
      if (v76 != -1)
        ((void (*)(_BYTE *, __int128 *))off_1E3506530[v76])(v61, &v69);
    }
    return WTF::RefCounted<WebCore::SWServerWorker>::deref(v10);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v69) = 33;
    v76 = 1;
    v48 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v48 + 16))(v48, &v67);
    result = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
    if (v76 != -1)
      return (_DWORD *)((uint64_t (*)(_BYTE *, __int128 *))off_1E3506530[v76])(v61, &v69);
  }
  return result;
}

_QWORD *WebKit::WebSWServerToContextConnection::setInspectable(_QWORD *result, int a2)
{
  char v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE *v12;
  void *v13;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  if ((((*((_BYTE *)result + 176) == 0) ^ a2) & 1) == 0)
  {
    v2 = a2;
    v4 = (char *)(result + 13);
    v3 = result[13];
    *((_BYTE *)result + 176) = a2;
    v5 = (*(uint64_t (**)(_QWORD *))(v3 + 56))(result + 13);
    v6 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v6 = 2709;
    *(_QWORD *)(v6 + 8) = v5;
    *(_QWORD *)(v6 + 528) = v6 + 16;
    *(_QWORD *)(v6 + 536) = v6 + 16;
    *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v6 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
    v19 = (IPC::Encoder *)v6;
    v7 = *(_QWORD *)(v6 + 544);
    v8 = v7 + 1;
    v9 = *(_QWORD *)(v6 + 552);
    if (v9 < v7 + 1)
    {
      v16 = (2 * v9 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v17 = v16;
        v16 *= 2;
      }
      while (v17 < v8);
      result = mmap(0, v17, 3, 4098, -1, 0);
      if (result == (_QWORD *)-1)
      {
        __break(0xC471u);
        return result;
      }
      v10 = result;
      memcpy(result, *(const void **)(v6 + 528), *(_QWORD *)(v6 + 544));
      v18 = *(void **)(v6 + 528);
      if (v18 != (void *)(v6 + 16))
        munmap(v18, *(_QWORD *)(v6 + 552));
      *(_QWORD *)(v6 + 528) = v10;
      *(_QWORD *)(v6 + 552) = v17;
      v11 = *(_QWORD *)(v6 + 544);
    }
    else
    {
      v10 = *(_QWORD **)(v6 + 528);
      v11 = *(_QWORD *)(v6 + 544);
    }
    bzero((char *)v10 + v11, v7 - v11);
    *(_QWORD *)(v6 + 544) = v8;
    v12 = (_BYTE *)(*(_QWORD *)(v6 + 528) + v7);
    *(_QWORD *)(v6 + 536) = v12 + 1;
    *v12 = v2;
    (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v4 + 32))(v4, &v19, 0);
    result = v19;
    v19 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
      return (_QWORD *)WTF::fastFree(v14, v15);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<std::optional<WebCore::NotificationPayload> &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWContextManagerConnection::FirePushEvent,WebKit::WebSWServerToContextConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0>(WebKit::WebSWServerToContextConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWServerToContextConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0)#1},void,WebKit::WebSWServerToContextConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E3506560;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<std::optional<WebCore::NotificationPayload> &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWContextManagerConnection::FirePushEvent,WebKit::WebSWServerToContextConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0>(WebKit::WebSWServerToContextConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWServerToContextConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0)#1},void,WebKit::WebSWServerToContextConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E3506560;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<std::optional<WebCore::NotificationPayload> &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWContextManagerConnection::FirePushEvent,WebKit::WebSWServerToContextConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0>(WebKit::WebSWServerToContextConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWServerToContextConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0)#1},void,WebKit::WebSWServerToContextConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t result;
  WTF::StringImpl *v14;
  _BYTE v15[8];
  _BYTE v16[144];
  char v17;
  uint64_t v18;
  uint64_t *v19;

  v2 = (_QWORD *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebSWContextManagerConnection::FirePushEvent,WebKit::WebSWServerToContextConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0>((_QWORD *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<BOOL,std::optional<WebCore::NotificationPayload>>>(a2, v15);
  if (!v17)
    return IPC::Connection::cancelReply<Messages::WebSWContextManagerConnection::FirePushEvent,WebKit::WebSWServerToContextConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0>(v2);
  v4 = v15[0];
  if (*v2)
  {
    v5 = *(_QWORD *)(*v2 + 8);
    if (v5)
    {
      v6 = *(_DWORD *)(v5 + 16) + 1;
      *(_DWORD *)(v5 + 16) = v6;
      v7 = *(_QWORD *)(v5 + 168) - 1;
      *(_QWORD *)(v5 + 168) = v7;
      if (!v7)
      {
        v8 = *(_QWORD *)(*(_QWORD *)(v5 + 128) + 8);
        if (v8)
          v9 = v8 - 48;
        else
          v9 = 0;
        v10 = *(_QWORD *)(*(_QWORD *)(v9 + 72) + 32);
        v18 = *(_QWORD *)(v9 + 256);
        v19 = &v18;
        IPC::Connection::send<Messages::NetworkProcessProxy::EndServiceWorkerBackgroundProcessing>(v10, &v19);
        v6 = *(_DWORD *)(v5 + 16);
      }
      if (!v6)
      {
        result = 286;
        __break(0xC471u);
        return result;
      }
      *(_DWORD *)(v5 + 16) = v6 - 1;
    }
  }
  v11 = v4 != 0;
  v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, _BOOL8, _BYTE *))(*(_QWORD *)v12 + 16))(v12, v11, v16);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (v17)
    return std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v16, v14);
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::WebSWContextManagerConnection::FirePushEvent,WebKit::WebSWServerToContextConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0>(_QWORD *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t result;
  _BYTE v11[144];
  uint64_t v12;
  uint64_t *v13;

  v11[0] = 0;
  v11[136] = 0;
  if (!*a1)
    goto LABEL_10;
  v2 = *(_QWORD *)(*a1 + 8);
  if (!v2)
    goto LABEL_10;
  v3 = *(_DWORD *)(v2 + 16) + 1;
  *(_DWORD *)(v2 + 16) = v3;
  v4 = *(_QWORD *)(v2 + 168) - 1;
  *(_QWORD *)(v2 + 168) = v4;
  if (!v4)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 128) + 8);
    if (v5)
      v6 = v5 - 48;
    else
      v6 = 0;
    v7 = *(_QWORD *)(*(_QWORD *)(v6 + 72) + 32);
    v12 = *(_QWORD *)(v6 + 256);
    v13 = &v12;
    IPC::Connection::send<Messages::NetworkProcessProxy::EndServiceWorkerBackgroundProcessing>(v7, &v13);
    v3 = *(_DWORD *)(v2 + 16);
  }
  if (v3)
  {
    *(_DWORD *)(v2 + 16) = v3 - 1;
LABEL_10:
    v8 = a1[1];
    a1[1] = 0;
    (*(void (**)(uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v8 + 16))(v8, 0, v11);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    return std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v11, v9);
  }
  result = 286;
  __break(0xC471u);
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::NetworkProcessProxy::EndServiceWorkerBackgroundProcessing>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 314;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v4, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWContextManagerConnection::FireNotificationEvent,WebKit::WebSWServerToContextConnection::fireNotificationEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::NotificationData const&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::WebSWServerToContextConnection::fireNotificationEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::NotificationData const&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E3506588;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWContextManagerConnection::FireNotificationEvent,WebKit::WebSWServerToContextConnection::fireNotificationEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::NotificationData const&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::WebSWServerToContextConnection::fireNotificationEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::NotificationData const&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E3506588;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWContextManagerConnection::FireNotificationEvent,WebKit::WebSWServerToContextConnection::fireNotificationEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::NotificationData const&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::WebSWServerToContextConnection::fireNotificationEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::NotificationData const&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *result;
  int v20;
  int v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;

  if (a2 && *a2)
  {
    v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2);
    if ((_BYTE)v3)
      v4 = v3 > 0xFFu;
    else
      v4 = 0;
    v5 = v4;
  }
  else
  {
    v5 = 0;
  }
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      ++*(_DWORD *)(v7 + 16);
      v8 = *(_QWORD *)(v7 + 168) - 1;
      *(_QWORD *)(v7 + 168) = v8;
      if (!v8)
      {
        v9 = *(_QWORD *)(*(_QWORD *)(v7 + 128) + 8);
        if (v9)
          v10 = v9 - 48;
        else
          v10 = 0;
        v11 = *(_QWORD *)(*(_QWORD *)(v10 + 72) + 32);
        v27 = *(_QWORD *)(v10 + 256);
        v28 = (WTF::StringImpl *)&v27;
        IPC::Connection::send<Messages::NetworkProcessProxy::EndServiceWorkerBackgroundProcessing>(v11, (uint64_t **)&v28);
      }
      v12 = *(_QWORD *)(*(_QWORD *)(v7 + 128) + 8);
      if (v12)
        v13 = v12 - 48;
      else
        v13 = 0;
      v14 = *(_QWORD *)(v13 + 72);
      v28 = *(WTF::StringImpl **)(v13 + 80);
      v15 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v14 + 208), &v28);
      v16 = v15;
      if (v15 && (++*(_DWORD *)(v15 + 16), (_DWORD)v5) && (v17 = *(_QWORD *)(v15 + 72)) != 0 && !*(_BYTE *)(a1 + 16))
      {
        v22 = *(WTF::StringImpl **)(v7 + 40);
        if (v22)
          *(_DWORD *)v22 += 2;
        v28 = v22;
        v23 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = 0;
        v24 = WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v24 = &off_1E35065B0;
        *(_QWORD *)(v24 + 8) = v23;
        *(_BYTE *)(v24 + 16) = v5;
        v27 = v24;
        WebKit::WebResourceLoadStatisticsStore::setMostRecentWebPushInteractionTime(v17, (uint64_t)&v28, &v27);
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        result = v28;
        v28 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v25);
          else
            *(_DWORD *)result -= 2;
        }
      }
      else
      {
        v18 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v5);
        result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        if (!v16)
          goto LABEL_27;
      }
      v20 = *(_DWORD *)(v16 + 16);
      if (!v20)
        goto LABEL_38;
      *(_DWORD *)(v16 + 16) = v20 - 1;
LABEL_27:
      v21 = *(_DWORD *)(v7 + 16);
      if (v21)
      {
        *(_DWORD *)(v7 + 16) = v21 - 1;
        return result;
      }
LABEL_38:
      __break(0xC471u);
      JUMPOUT(0x19782FED4);
    }
  }
  v26 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, v5);
  return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebSWServerToContextConnection::fireNotificationEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::NotificationData const&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E35065B0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWServerToContextConnection::fireNotificationEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::NotificationData const&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E35065B0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWServerToContextConnection::fireNotificationEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::NotificationData const&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWContextManagerConnection::FireBackgroundFetchEvent,WebKit::WebSWServerToContextConnection::fireBackgroundFetchEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::BackgroundFetchInformation const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::WebSWServerToContextConnection::fireBackgroundFetchEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::BackgroundFetchInformation const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E35065D8;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWContextManagerConnection::FireBackgroundFetchEvent,WebKit::WebSWServerToContextConnection::fireBackgroundFetchEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::BackgroundFetchInformation const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::WebSWServerToContextConnection::fireBackgroundFetchEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::BackgroundFetchInformation const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E35065D8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWContextManagerConnection::FireBackgroundFetchEvent,WebKit::WebSWServerToContextConnection::fireBackgroundFetchEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::BackgroundFetchInformation const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::WebSWServerToContextConnection::fireBackgroundFetchEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::BackgroundFetchInformation const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  unsigned __int16 v4;
  uint64_t result;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  v2 = (_QWORD *)(a1 + 8);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::WebSWContextManagerConnection::FireBackgroundFetchEvent,WebKit::WebSWServerToContextConnection::fireBackgroundFetchEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::BackgroundFetchInformation const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(v2);
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::WebSWContextManagerConnection::FireBackgroundFetchEvent,WebKit::WebSWServerToContextConnection::fireBackgroundFetchEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::BackgroundFetchInformation const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(v2);
  v4 = IPC::Decoder::decode<std::tuple<BOOL>>(a2);
  if (v4 < 0x100u)
    return IPC::Connection::cancelReply<Messages::WebSWContextManagerConnection::FireBackgroundFetchEvent,WebKit::WebSWServerToContextConnection::fireBackgroundFetchEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::BackgroundFetchInformation const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(v2);
  v6 = v4;
  if (*v2 && (v7 = *(_QWORD *)(*v2 + 8)) != 0)
  {
    ++*(_DWORD *)(v7 + 16);
    v8 = *(_QWORD *)(v7 + 168) - 1;
    *(_QWORD *)(v7 + 168) = v8;
    if (!v8)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v7 + 128) + 8);
      if (v9)
        v10 = v9 - 48;
      else
        v10 = 0;
      v11 = *(_QWORD *)(*(_QWORD *)(v10 + 72) + 32);
      v16 = *(_QWORD *)(v10 + 256);
      v17 = &v16;
      IPC::Connection::send<Messages::NetworkProcessProxy::EndServiceWorkerBackgroundProcessing>(v11, &v17);
    }
    v12 = v6 != 0;
    v13 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v13 + 16))(v13, v12);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(_DWORD *)(v7 + 16);
    if (v14)
    {
      *(_DWORD *)(v7 + 16) = v14 - 1;
    }
    else
    {
      result = 286;
      __break(0xC471u);
    }
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v15 + 16))(v15, v4 != 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::WebSWContextManagerConnection::FireBackgroundFetchEvent,WebKit::WebSWServerToContextConnection::fireBackgroundFetchEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::BackgroundFetchInformation const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  if (*a1 && (v2 = *(_QWORD *)(*a1 + 8)) != 0)
  {
    ++*(_DWORD *)(v2 + 16);
    v3 = *(_QWORD *)(v2 + 168) - 1;
    *(_QWORD *)(v2 + 168) = v3;
    if (!v3)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(v2 + 128) + 8);
      if (v4)
        v5 = v4 - 48;
      else
        v5 = 0;
      v6 = *(_QWORD *)(*(_QWORD *)(v5 + 72) + 32);
      v11 = *(_QWORD *)(v5 + 256);
      v12 = &v11;
      IPC::Connection::send<Messages::NetworkProcessProxy::EndServiceWorkerBackgroundProcessing>(v6, &v12);
    }
    v7 = a1[1];
    a1[1] = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 16))(v7, 0);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v9 = *(_DWORD *)(v2 + 16);
    if (v9)
    {
      *(_DWORD *)(v2 + 16) = v9 - 1;
    }
    else
    {
      result = 286;
      __break(0xC471u);
    }
  }
  else
  {
    v10 = a1[1];
    a1[1] = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 16))(v10, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWContextManagerConnection::FireBackgroundFetchClickEvent,WebKit::WebSWServerToContextConnection::fireBackgroundFetchClickEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::BackgroundFetchInformation const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::WebSWServerToContextConnection::fireBackgroundFetchClickEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::BackgroundFetchInformation const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E3506600;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWContextManagerConnection::FireBackgroundFetchClickEvent,WebKit::WebSWServerToContextConnection::fireBackgroundFetchClickEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::BackgroundFetchInformation const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::WebSWServerToContextConnection::fireBackgroundFetchClickEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::BackgroundFetchInformation const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E3506600;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWContextManagerConnection::FireBackgroundFetchClickEvent,WebKit::WebSWServerToContextConnection::fireBackgroundFetchClickEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::BackgroundFetchInformation const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::WebSWServerToContextConnection::fireBackgroundFetchClickEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::BackgroundFetchInformation const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  unsigned __int16 v4;
  uint64_t result;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  v2 = (_QWORD *)(a1 + 8);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::WebSWContextManagerConnection::FireBackgroundFetchEvent,WebKit::WebSWServerToContextConnection::fireBackgroundFetchEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::BackgroundFetchInformation const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(v2);
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::WebSWContextManagerConnection::FireBackgroundFetchEvent,WebKit::WebSWServerToContextConnection::fireBackgroundFetchEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::BackgroundFetchInformation const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(v2);
  v4 = IPC::Decoder::decode<std::tuple<BOOL>>(a2);
  if (v4 < 0x100u)
    return IPC::Connection::cancelReply<Messages::WebSWContextManagerConnection::FireBackgroundFetchEvent,WebKit::WebSWServerToContextConnection::fireBackgroundFetchEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::BackgroundFetchInformation const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(v2);
  v6 = v4;
  if (*v2 && (v7 = *(_QWORD *)(*v2 + 8)) != 0)
  {
    ++*(_DWORD *)(v7 + 16);
    v8 = *(_QWORD *)(v7 + 168) - 1;
    *(_QWORD *)(v7 + 168) = v8;
    if (!v8)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v7 + 128) + 8);
      if (v9)
        v10 = v9 - 48;
      else
        v10 = 0;
      v11 = *(_QWORD *)(*(_QWORD *)(v10 + 72) + 32);
      v16 = *(_QWORD *)(v10 + 256);
      v17 = &v16;
      IPC::Connection::send<Messages::NetworkProcessProxy::EndServiceWorkerBackgroundProcessing>(v11, &v17);
    }
    v12 = v6 != 0;
    v13 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v13 + 16))(v13, v12);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(_DWORD *)(v7 + 16);
    if (v14)
    {
      *(_DWORD *)(v7 + 16) = v14 - 1;
    }
    else
    {
      result = 286;
      __break(0xC471u);
    }
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v15 + 16))(v15, v4 != 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::OpenWindowFromServiceWorker,WebKit::WebSWServerToContextConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0>(WebKit::WebSWServerToContextConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWServerToContextConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0)#1},void,WebKit::WebSWServerToContextConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  char v10;
  char v11;

  *(_QWORD *)a1 = &off_1E3506628;
  v3 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E3506540[v3])(&v10, a1 + 56);
  *(_DWORD *)(a1 + 80) = -1;
  v4 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E3506540[v4])(&v11, a1 + 24);
  *(_DWORD *)(a1 + 48) = -1;
  v5 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::OpenWindowFromServiceWorker,WebKit::WebSWServerToContextConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0>(WebKit::WebSWServerToContextConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWServerToContextConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0)#1},void,WebKit::WebSWServerToContextConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  char v10;
  char v11;

  *(_QWORD *)this = &off_1E3506628;
  v3 = *((unsigned int *)this + 20);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E3506540[v3])(&v10, (char *)this + 56);
  *((_DWORD *)this + 20) = -1;
  v4 = *((unsigned int *)this + 12);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E3506540[v4])(&v11, (char *)this + 24);
  *((_DWORD *)this + 12) = -1;
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return WTF::fastFree(this, a2);
}

_DWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::OpenWindowFromServiceWorker,WebKit::WebSWServerToContextConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0>(WebKit::WebSWServerToContextConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWServerToContextConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0)#1},void,WebKit::WebSWServerToContextConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  char v10;
  __int128 v11;
  char v12;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
  {
LABEL_6:
    v11 = 0uLL;
    v4 = &v11;
    return WebKit::WebSWServerToContextConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0::operator()(v2, (uint64_t)v4);
  }
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, &v11);
  if (!v12)
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v7 = a2[3];
    if (v7 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v5);
    goto LABEL_6;
  }
  v9 = v11;
  v10 = 1;
  v4 = &v9;
  return WebKit::WebSWServerToContextConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0::operator()(v2, (uint64_t)v4);
}

_DWORD *WebKit::WebSWServerToContextConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  void *v6;
  _DWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12[12];
  char v13;
  _BYTE v14[16];
  _BYTE v15[192];
  char v16;
  unsigned int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a2 + 8))
  {
    v15[0] = 0;
    v16 = 0;
    v17 = 0;
    v8 = *a1;
    *a1 = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v8 + 16))(v8, v14);
    result = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = v17;
    if (v17 == -1)
      return result;
    return (_DWORD *)((uint64_t (*)(__int128 *, _BYTE *))off_1E3506530[v9])(v12, v15);
  }
  v3 = a1[1];
  if (!v3 || (v4 = *(_DWORD **)(v3 + 8)) == 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v15[0] = 33;
    v17 = 1;
    v10 = *a1;
    *a1 = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v10 + 16))(v10, v14);
    result = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v9 = v17;
    if (v17 == -1)
      return result;
    return (_DWORD *)((uint64_t (*)(__int128 *, _BYTE *))off_1E3506530[v9])(v12, v15);
  }
  ++*v4;
  WebCore::SWServer::topLevelServiceWorkerClientFromPageIdentifier();
  v15[0] = 0;
  v16 = 0;
  if (v13)
  {
    std::construct_at[abi:sn180100]<WebCore::ServiceWorkerClientData,WebCore::ServiceWorkerClientData,WebCore::ServiceWorkerClientData*>((uint64_t)v15, v12);
    v16 = 1;
  }
  v17 = 0;
  v5 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v5 + 16))(v5, v14);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (v17 != -1)
    ((void (*)(char *, _BYTE *))off_1E3506530[v17])(&v11, v15);
  v17 = -1;
  std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v12, v6);
  return WTF::RefCounted<WebCore::SWServer>::deref(v4);
}

char *IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::URL const&,WebCore::SecurityOriginData const&,JSC::MessageSource,JSC::MessageLevel,WTF::String const&,unsigned long const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::URL const&,WebCore::SecurityOriginData const&,JSC::MessageSource,JSC::MessageLevel,WTF::String const&,unsigned long const&>,0ul,1ul,2ul,3ul,4ul,5ul,6ul>(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  char v5;
  uint64_t v6;
  char *result;

  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(a1, *(_QWORD *)(a2 + 16));
  v4 = *(_BYTE *)(a2 + 24);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_BYTE *)(a2 + 25);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, *(uint64_t **)(a2 + 32));
  v6 = **(_QWORD **)(a2 + 40);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v6;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::NavigateServiceWorkerClient,WebKit::WebSWServerToContextConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0>(WebKit::WebSWServerToContextConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWServerToContextConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0)#1},void,WebKit::WebSWServerToContextConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  char v11;
  char v12;

  *(_QWORD *)a1 = &off_1E3506650;
  v3 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(unsigned int *)(a1 + 112);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E3506540[v4])(&v11, a1 + 88);
  *(_DWORD *)(a1 + 112) = -1;
  v5 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, uint64_t))off_1E3506540[v5])(&v12, a1 + 56);
  *(_DWORD *)(a1 + 80) = -1;
  v6 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::NavigateServiceWorkerClient,WebKit::WebSWServerToContextConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0>(WebKit::WebSWServerToContextConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWServerToContextConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0)#1},void,WebKit::WebSWServerToContextConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  char v11;
  char v12;

  *(_QWORD *)this = &off_1E3506650;
  v3 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((unsigned int *)this + 28);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E3506540[v4])(&v11, (char *)this + 88);
  *((_DWORD *)this + 28) = -1;
  v5 = *((unsigned int *)this + 20);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E3506540[v5])(&v12, (char *)this + 56);
  *((_DWORD *)this + 20) = -1;
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::NavigateServiceWorkerClient,WebKit::WebSWServerToContextConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0>(WebKit::WebSWServerToContextConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWServerToContextConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0)#1},void,WebKit::WebSWServerToContextConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *result;
  uint64_t v5;
  char v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  char v19;

  v2 = a1 + 8;
  if (!a2 || !*a2)
  {
LABEL_8:
    LOBYTE(v17) = 0;
    LOBYTE(v18) = 0;
    v7 = &v17;
    v8 = v2;
    v5 = 0;
    v6 = 0;
    return (uint64_t *)WebKit::WebSWServerToContextConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0::operator()<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::PageIdentifierType,unsigned long long>>>>(v8, v5, v6, (uint64_t)v7);
  }
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, &v14);
  if (!v16
    || (result = IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(a2, (uint64_t)&v17), !v19))
  {
    v9 = *a2;
    v10 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v11 = a2[3];
    if (v11)
    {
      if (v10)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v9);
    }
    goto LABEL_8;
  }
  if (v16)
  {
    v5 = v14;
    v6 = v15;
    v12 = v17;
    v13 = v18;
    v7 = &v12;
    v8 = v2;
    return (uint64_t *)WebKit::WebSWServerToContextConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0::operator()<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::PageIdentifierType,unsigned long long>>>>(v8, v5, v6, (uint64_t)v7);
  }
  __break(1u);
  return result;
}

uint64_t WebKit::WebSWServerToContextConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData> &&)> &&)::$_0::operator()<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WebCore::PageIdentifierType,unsigned long long>>>>(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  WebCore::SWServerToContextConnection *v5;
  WTF::StringImpl *v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  WTF::StringImpl *v13;
  char v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  int v20;
  uint64_t v21;
  _BYTE v22[24];
  __int128 v23[12];
  char v24;
  __int128 v25;
  _OWORD v26[12];
  char v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)a1)
  {
    v5 = 0;
    goto LABEL_16;
  }
  v5 = *(WebCore::SWServerToContextConnection **)(*(_QWORD *)a1 + 8);
  if (!v5)
  {
LABEL_16:
    v14 = 1;
    goto LABEL_20;
  }
  ++*((_DWORD *)v5 + 4);
  if (WebCore::SWServerToContextConnection::server(v5))
  {
    if (a3 && *(_BYTE *)(a4 + 16))
    {
      LOBYTE(v23[0]) = 0;
      v24 = 0;
      WebCore::SWServerToContextConnection::server(v5);
      *(_OWORD *)&v22[7] = *(_OWORD *)a4;
      v22[23] = *(_BYTE *)(a4 + 16);
      v9 = *(WTF::StringImpl **)(a1 + 8);
      if (v9)
        *(_DWORD *)v9 += 2;
      v10 = *(_OWORD *)(a1 + 32);
      v25 = *(_OWORD *)(a1 + 16);
      v26[0] = v10;
      v11 = WTF::fastMalloc((WTF *)0x60);
      *(_QWORD *)v11 = &off_1E3506678;
      *(_QWORD *)(v11 + 8) = a2;
      *(_BYTE *)(v11 + 16) = a3;
      *(_OWORD *)(v11 + 17) = *(_OWORD *)v22;
      *(_QWORD *)(v11 + 33) = *(_QWORD *)&v22[16];
      if (v9)
        *(_DWORD *)v9 += 2;
      *(_QWORD *)(v11 + 48) = v9;
      v12 = v26[0];
      *(_OWORD *)(v11 + 56) = v25;
      *(_OWORD *)(v11 + 72) = v12;
      *(_QWORD *)(v11 + 88) = v23;
      v21 = v11;
      WebCore::SWServer::forEachClientForOrigin();
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v13);
        else
          *(_DWORD *)v9 -= 2;
      }
      LOBYTE(v26[0]) = 0;
      v27 = 0;
      if (v24)
      {
        std::construct_at[abi:sn180100]<WebCore::ServiceWorkerClientData,WebCore::ServiceWorkerClientData,WebCore::ServiceWorkerClientData*>((uint64_t)v26, v23);
        v27 = 1;
      }
      v28 = 0;
      v18 = *(_QWORD *)(a1 + 112);
      *(_QWORD *)(a1 + 112) = 0;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v18 + 16))(v18, &v25);
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      if (v28 != -1)
        ((void (*)(_BYTE *, _OWORD *))off_1E3506530[v28])(v22, v26);
      result = std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v23, v19);
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      LOBYTE(v26[0]) = 33;
      v28 = 1;
      v15 = *(_QWORD *)(a1 + 112);
      *(_QWORD *)(a1 + 112) = 0;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v15 + 16))(v15, &v25);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      if (v28 != -1)
        result = ((uint64_t (*)(__int128 *, _OWORD *))off_1E3506530[v28])(v23, v26);
    }
LABEL_30:
    v20 = *((_DWORD *)v5 + 4);
    if (!v20)
    {
      __break(0xC471u);
      JUMPOUT(0x19783104CLL);
    }
    *((_DWORD *)v5 + 4) = v20 - 1;
    return result;
  }
  v14 = 0;
LABEL_20:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  LOBYTE(v26[0]) = 33;
  v28 = 1;
  v17 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v17 + 16))(v17, &v25);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  if (v28 != -1)
    result = ((uint64_t (*)(__int128 *, _OWORD *))off_1E3506530[v28])(v23, v26);
  if ((v14 & 1) == 0)
    goto LABEL_30;
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit30WebSWServerToContextConnection8navigateEN7WebCore16ProcessQualifiedINS_4UUIDEEENS_23ObjectIdentifierGenericINS4_27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS4_23ServiceWorkerClientDataEEENS4_13ExceptionDataEEEEEEEN3__0clINSL_INS8_INS4_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSL_INS5_INS8_INS4_19FrameIdentifierTypeESY_yEEEEEEEEDaT_T0_EUlRS16_E_vJRSM_EED1Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *a1 = &off_1E3506678;
  v3 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit30WebSWServerToContextConnection8navigateEN7WebCore16ProcessQualifiedINS_4UUIDEEENS_23ObjectIdentifierGenericINS4_27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS4_23ServiceWorkerClientDataEEENS4_13ExceptionDataEEEEEEEN3__0clINSL_INS8_INS4_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSL_INS5_INS8_INS4_19FrameIdentifierTypeESY_yEEEEEEEEDaT_T0_EUlRS16_E_vJRSM_EED0Ev(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = &off_1E3506678;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

unsigned int *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit30WebSWServerToContextConnection8navigateEN7WebCore16ProcessQualifiedINS_4UUIDEEENS_23ObjectIdentifierGenericINS4_27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS4_23ServiceWorkerClientDataEEENS4_13ExceptionDataEEEEEEEN3__0clINSL_INS8_INS4_18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENSL_INS5_INS8_INS4_19FrameIdentifierTypeESY_yEEEEEEEEDaT_T0_EUlRS16_E_vJRSM_EE4callES1A_(unsigned int *result, uint64_t a2, const URL *a3)
{
  unsigned int *v4;
  _OWORD *v5;
  _DWORD **v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  _DWORD *v16;
  __int128 v17;
  _DWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  if (!*(_BYTE *)(*((_QWORD *)result + 11) + 192) && *(_BYTE *)(a2 + 128))
  {
    v4 = result;
    if (!*((_BYTE *)result + 16))
      goto LABEL_18;
    v5 = (_OWORD *)(a2 + 120);
    if (*(_QWORD *)(a2 + 120) != *((_QWORD *)result + 1) || !*(_BYTE *)(a2 + 152))
      return result;
    if (!*((_BYTE *)result + 40))
    {
LABEL_18:
      __break(1u);
      return result;
    }
    if (*(_QWORD *)(a2 + 136) == *((_QWORD *)result + 3) && *(_QWORD *)(a2 + 144) == *((_QWORD *)result + 4))
    {
      v6 = (_DWORD **)(a2 + 40);
      result = (unsigned int *)WTF::equalIgnoringFragmentIdentifier((WTF *)(a2 + 40), (const URL *)(result + 12), a3);
      if ((_DWORD)result)
      {
        v7 = *((_QWORD *)v4 + 11);
        v8 = *(unsigned __int8 *)(v7 + 192);
        v9 = *(_WORD *)(a2 + 32);
        v10 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)v7 = *(_OWORD *)a2;
        *(_OWORD *)(v7 + 16) = v10;
        *(_WORD *)(v7 + 32) = v9;
        if (v8)
        {
          WTF::String::operator=((WTF::StringImpl **)(v7 + 40), (WTF::StringImpl *)(a2 + 40));
          v11 = *(_OWORD *)(a2 + 64);
          *(_OWORD *)(v7 + 48) = *(_OWORD *)(a2 + 48);
          *(_OWORD *)(v7 + 64) = v11;
          WTF::String::operator=((WTF::StringImpl **)(v7 + 80), (WTF::StringImpl *)(a2 + 80));
          v12 = *(_OWORD *)(a2 + 88);
          *(_OWORD *)(v7 + 104) = *(_OWORD *)(a2 + 104);
          *(_OWORD *)(v7 + 88) = v12;
          v13 = *(_QWORD *)(a2 + 168);
          v15 = *(_OWORD *)(a2 + 136);
          v14 = *(_OWORD *)(a2 + 152);
          *(_OWORD *)(v7 + 120) = *v5;
          *(_OWORD *)(v7 + 136) = v15;
          *(_OWORD *)(v7 + 152) = v14;
          *(_QWORD *)(v7 + 168) = v13;
          return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v7 + 176), a2 + 176);
        }
        else
        {
          v16 = *v6;
          if (*v6)
            *v16 += 2;
          *(_QWORD *)(v7 + 40) = v16;
          v17 = *(_OWORD *)(a2 + 64);
          *(_OWORD *)(v7 + 48) = *(_OWORD *)(a2 + 48);
          *(_OWORD *)(v7 + 64) = v17;
          v18 = *(_DWORD **)(a2 + 80);
          if (v18)
            *v18 += 2;
          *(_QWORD *)(v7 + 80) = v18;
          v19 = *(_OWORD *)(a2 + 88);
          *(_OWORD *)(v7 + 104) = *(_OWORD *)(a2 + 104);
          *(_OWORD *)(v7 + 88) = v19;
          v20 = *v5;
          v21 = *(_OWORD *)(a2 + 136);
          v22 = *(_OWORD *)(a2 + 152);
          *(_QWORD *)(v7 + 168) = *(_QWORD *)(a2 + 168);
          *(_OWORD *)(v7 + 152) = v22;
          *(_OWORD *)(v7 + 136) = v21;
          *(_OWORD *)(v7 + 120) = v20;
          result = (unsigned int *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v7 + 176, a2 + 176);
          *(_BYTE *)(v7 + 192) = 1;
        }
      }
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebSWServerToContextConnection::didReceiveMessage(IPC::Encoder *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  uint64_t *v3;
  WebCore::SWServerToContextConnection *v5;
  char v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  int v21;
  uint64_t v22;
  __int128 v23;
  WTF::StringImpl *v24;
  char v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  WTF *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  unint64_t v37;
  WTF::StringImpl *v38;
  __int128 v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  char v42;
  unint64_t v43;
  char v44;
  WTF *v45;
  _QWORD *v46;
  uint64_t v47;
  char v48;
  char v49;
  char v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  unsigned __int16 v66;
  char v67;
  unsigned __int16 v68;
  char v69;
  unint64_t v70;
  WTF::StringImpl *v71;
  unint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  unsigned int *v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  char v105;
  __int128 v106;
  __int128 v107;
  WTF *v108[2];
  WTF::StringImpl *v109[2];
  WTF::StringImpl *v110[2];
  __int128 v111;
  WTF::StringImpl *v112;
  char v113;
  _BYTE v114[40];
  unsigned __int8 v115;
  _BYTE v116[48];
  WTF::StringImpl *v117;
  unsigned __int8 v118;
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  v3 = (uint64_t *)a3;
  v5 = this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0xAC0:
      this = (IPC::Encoder *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v6)
      {
        this = (IPC::Encoder *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3);
        if (v7)
        {
          *(_QWORD *)&v106 = this;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v106 + 1, a2);
          v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v8 = off_1E35066C8;
          v8[1] = v106;
          v9 = *((_QWORD *)&v106 + 1);
          *((_QWORD *)&v106 + 1) = 0;
          v8[2] = v9;
          *(_QWORD *)v116 = v8;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v106 + 1);
          WebCore::SWServerToContextConnection::claim();
          this = *(IPC::Encoder **)v116;
          *(_QWORD *)v116 = 0;
          if (this)
            return (IPC::Encoder *)(*(uint64_t (**)(IPC::Encoder *))(*(_QWORD *)this + 8))(this);
        }
      }
      return this;
    case 0xAC1:
      this = (IPC::Encoder *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v48)
        return (IPC::Encoder *)WebCore::SWServerToContextConnection::didFailHeartBeatCheck();
      return this;
    case 0xAC2:
      this = (IPC::Encoder *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v42)
        return (IPC::Encoder *)WebKit::WebSWServerToContextConnection::didFinishActivation((uint64_t)v5);
      return this;
    case 0xAC3:
      this = (IPC::Encoder *)IPC::Decoder::decode<std::tuple<std::optional<WebCore::ServiceWorkerJobDataIdentifier>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,BOOL>>((uint64_t)&v106, (uint64_t *)a3);
      if (LOBYTE(v108[1]))
        return (IPC::Encoder *)WebKit::WebSWServerToContextConnection::didFinishInstall((uint64_t)v5);
      return this;
    case 0xAC4:
      v30 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v31)
        goto LABEL_102;
      v32 = v30;
      IPC::Decoder::decode<WTF::String>(v3, v116);
      if (!v116[8])
        goto LABEL_102;
      v33 = *(WTF **)v116;
      *(_QWORD *)&v106 = v32;
      *((_QWORD *)&v106 + 1) = *(_QWORD *)v116;
      LOBYTE(v107) = 1;
      this = (IPC::Encoder *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3);
      if (!(_BYTE)v29)
        goto LABEL_98;
      *(_QWORD *)v116 = this;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v116[8], a2);
      v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v34 = off_1E35066A0;
      v34[1] = *(_QWORD *)v116;
      v35 = *(_QWORD *)&v116[8];
      *(_QWORD *)&v116[8] = 0;
      v34[2] = v35;
      *(_QWORD *)v114 = v34;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v116[8]);
      WebCore::SWServerToContextConnection::findClientByVisibleIdentifier();
      this = *(IPC::Encoder **)v114;
      *(_QWORD *)v114 = 0;
      if (this)
        this = (IPC::Encoder *)(*(uint64_t (**)(IPC::Encoder *))(*(_QWORD *)this + 8))(this);
      if ((_BYTE)v107)
        goto LABEL_97;
      return this;
    case 0xAC5:
      this = (IPC::Encoder *)IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::UUID>>>((uint64_t *)a3, (uint64_t)&v106);
      if (LOBYTE(v108[0]))
      {
        this = (IPC::Encoder *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3);
        if (v50)
        {
          *(_QWORD *)v116 = this;
          v3 = (uint64_t *)&v116[8];
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v116[8], a2);
          v51 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v51 = off_1E35066F0;
          v51[1] = *(_QWORD *)v116;
          v52 = *(_QWORD *)&v116[8];
          *(_QWORD *)&v116[8] = 0;
          v51[2] = v52;
          *(_QWORD *)v114 = v51;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v116[8]);
          v11 = LOBYTE(v108[0]);
          if (!LOBYTE(v108[0]))
            goto LABEL_136;
          *(_OWORD *)v116 = v106;
          *(_OWORD *)&v116[16] = v107;
          WebKit::WebSWServerToContextConnection::focus(v5, (uint64_t)v116, (uint64_t *)v114);
          this = *(IPC::Encoder **)v114;
          *(_QWORD *)v114 = 0;
          if (this)
            return (IPC::Encoder *)(*(uint64_t (**)(IPC::Encoder *))(*(_QWORD *)this + 8))(this);
        }
      }
      return this;
    case 0xAC6:
      v53 = *((_QWORD *)a3 + 1);
      v54 = *(_QWORD *)a3;
      v55 = ((*((_QWORD *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a3;
      if (v53 < v55 || v53 - v55 <= 7)
      {
        v95 = 0;
        v96 = 0;
        *v3 = 0;
        v3[1] = 0;
        v97 = v3[3];
        if (!v97)
        {
LABEL_146:
          *v3 = 0;
          v3[1] = 0;
          v98 = v3[3];
          if (v98 && v95)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v98 + 16))(v98, v96);
          goto LABEL_102;
        }
        if (!v53)
        {
          v95 = 0;
          v96 = 0;
          goto LABEL_146;
        }
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v97 + 16))(v97, v54, v53);
LABEL_145:
        v96 = *v3;
        v95 = v3[1];
        goto LABEL_146;
      }
      v57 = (uint64_t *)(v54 + v55);
      *((_QWORD *)a3 + 2) = v57 + 1;
      if (!v54)
      {
        v95 = v53;
        v96 = 0;
        goto LABEL_146;
      }
      v58 = *v57;
      v59 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v60)
        goto LABEL_102;
      v61 = v59;
      v62 = IPC::ArgumentCoder<WebCore::ServiceWorkerClientQueryOptions,void>::decode(v3);
      if ((v62 & 0xFF0000) == 0)
        goto LABEL_145;
      *(_QWORD *)&v106 = v58;
      *((_QWORD *)&v106 + 1) = v61;
      LOWORD(v107) = v62;
      BYTE8(v107) = 1;
      return (IPC::Encoder *)WebCore::SWServerToContextConnection::matchAll();
    case 0xAC7:
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::UUID>>((uint64_t *)a3, (uint64_t)v114);
      if (!v114[32])
        goto LABEL_102;
      v43 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v3);
      if (!v44)
        goto LABEL_102;
      v45 = (WTF *)v43;
      IPC::Decoder::decode<WTF::URL>(v3, v116);
      if (!v116[40])
        goto LABEL_102;
      v11 = v114[32];
      if (!v114[32])
        goto LABEL_136;
      v106 = *(_OWORD *)v114;
      v107 = *(_OWORD *)&v114[16];
      v33 = *(WTF **)v116;
      v108[0] = v45;
      v108[1] = *(WTF **)v116;
      *(_OWORD *)v109 = *(_OWORD *)&v116[8];
      *(_OWORD *)v110 = *(_OWORD *)&v116[24];
      LOBYTE(v111) = 1;
      this = (IPC::Encoder *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3);
      if (!(_BYTE)v29)
        goto LABEL_59;
      *(_QWORD *)v116 = this;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v116[8], a2);
      v46 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v46 = off_1E3506718;
      v46[1] = *(_QWORD *)v116;
      v47 = *(_QWORD *)&v116[8];
      *(_QWORD *)&v116[8] = 0;
      v46[2] = v47;
      *(_QWORD *)v114 = v46;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v116[8]);
      *(_OWORD *)v116 = v106;
      *(_OWORD *)&v116[16] = v107;
      WebKit::WebSWServerToContextConnection::navigate((uint64_t)v5, (uint64_t *)v116, (uint64_t)v45, (uint64_t)&v108[1], (uint64_t *)v114);
      this = *(IPC::Encoder **)v114;
      *(_QWORD *)v114 = 0;
      if (this)
        this = (IPC::Encoder *)(*(uint64_t (**)(IPC::Encoder *))(*(_QWORD *)this + 8))(this);
      if (!(_BYTE)v111)
        return this;
      v33 = v108[1];
LABEL_59:
      v108[1] = 0;
      if (!v33)
        return this;
      goto LABEL_99;
    case 0xAC8:
      v75 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v76)
        goto LABEL_102;
      v77 = v75;
      IPC::Decoder::decode<WTF::URL>(v3, v116);
      if (!v116[40])
        goto LABEL_102;
      v33 = *(WTF **)v116;
      *(_QWORD *)&v106 = v77;
      *((_QWORD *)&v106 + 1) = *(_QWORD *)v116;
      v107 = *(_OWORD *)&v116[8];
      *(_OWORD *)v108 = *(_OWORD *)&v116[24];
      LOBYTE(v109[0]) = 1;
      this = (IPC::Encoder *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3);
      if (!(_BYTE)v29)
        goto LABEL_98;
      *(_QWORD *)v116 = this;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v116[8], a2);
      v78 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v78 = off_1E3506740;
      v78[1] = *(_QWORD *)v116;
      v79 = *(_QWORD *)&v116[8];
      *(_QWORD *)&v116[8] = 0;
      v78[2] = v79;
      *(_QWORD *)v114 = v78;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v116[8]);
      (*(void (**)(WebCore::SWServerToContextConnection *, unint64_t, char *, _BYTE *))(*(_QWORD *)v5 + 112))(v5, v77, (char *)&v106 + 8, v114);
      this = *(IPC::Encoder **)v114;
      *(_QWORD *)v114 = 0;
      if (this)
        this = (IPC::Encoder *)(*(uint64_t (**)(IPC::Encoder *))(*(_QWORD *)this + 8))(this);
      if (!LOBYTE(v109[0]))
        return this;
LABEL_97:
      v33 = (WTF *)*((_QWORD *)&v106 + 1);
LABEL_98:
      *((_QWORD *)&v106 + 1) = 0;
      if (!v33)
        return this;
LABEL_99:
      if (*(_DWORD *)v33 != 2)
      {
        *(_DWORD *)v33 -= 2;
        return this;
      }
      this = v33;
      return (IPC::Encoder *)WTF::StringImpl::destroy(this, v29);
    case 0xAC9:
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::UUID>>((uint64_t *)a3, (uint64_t)v116);
      if (!v116[32])
        goto LABEL_102;
      IPC::Decoder::decode<WebCore::MessageWithMessagePorts>(v3, (uint64_t)v114);
      if (!v114[24]
        || (v37 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v3),
            !(_BYTE)v36)
        || (v38 = (WTF::StringImpl *)v37, IPC::Decoder::decode<WTF::String>(v3, &v104), !v105))
      {
        std::__optional_destruct_base<WebCore::MessageWithMessagePorts,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v114, v36);
        goto LABEL_102;
      }
      v11 = v116[32];
      if (!v116[32])
        goto LABEL_136;
      v11 = v114[24];
      if (!v114[24])
        goto LABEL_136;
      v106 = *(_OWORD *)v116;
      v107 = *(_OWORD *)&v116[16];
      v39 = *(_OWORD *)v114;
      memset(v114, 0, 24);
      *(_OWORD *)v108 = v39;
      v109[0] = *(WTF::StringImpl **)&v114[16];
      v109[1] = v38;
      v110[0] = v104;
      LOBYTE(v111) = 1;
      std::__optional_destruct_base<WebCore::MessageWithMessagePorts,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v114, v36);
      this = (IPC::Encoder *)WebKit::WebSWServerToContextConnection::postMessageToServiceWorkerClient(v5, (uint64_t)&v106, (uint64_t)v108, (uint64_t)v38, (uint64_t)v110);
      if ((_BYTE)v111)
      {
        v41 = v110[0];
        v110[0] = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2)
            WTF::StringImpl::destroy(v41, v40);
          else
            *(_DWORD *)v41 -= 2;
        }
        this = v108[1];
        if (v108[1])
        {
          v108[1] = 0;
          LODWORD(v109[0]) = 0;
          this = (IPC::Encoder *)WTF::fastFree(this, v40);
        }
        v87 = (unsigned int *)v108[0];
        v108[0] = 0;
        if (v87)
        {
          do
          {
            v88 = __ldaxr(v87);
            v89 = v88 - 1;
          }
          while (__stlxr(v89, v87));
          if (!v89)
          {
            atomic_store(1u, v87);
            *(_QWORD *)v116 = v87;
            return WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((WebCore::SerializedScriptValue **)v116);
          }
        }
      }
      return this;
    case 0xACA:
      v63 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v64)
        goto LABEL_102;
      v65 = v63;
      v66 = IPC::Decoder::decode<JSC::MessageSource>(v3);
      if (v66 < 0x100u)
        goto LABEL_102;
      v67 = v66;
      v68 = IPC::Decoder::decode<JSC::MessageLevel>(v3);
      if (v68 < 0x100u)
        goto LABEL_102;
      v69 = v68;
      IPC::Decoder::decode<WTF::String>(v3, v116);
      if (!v116[8])
        goto LABEL_102;
      v70 = v3[1];
      v71 = (WTF::StringImpl *)*v3;
      v72 = ((v3[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v3;
      if (v70 < v72 || v70 - v72 <= 7)
      {
        v99 = 0;
        v100 = 0;
        *v3 = 0;
        v3[1] = 0;
        v101 = v3[3];
        if (v101)
        {
          if (v70)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v101 + 16))(v101);
            v100 = *v3;
            v99 = v3[1];
          }
          else
          {
            v99 = 0;
            v100 = 0;
          }
        }
        goto LABEL_150;
      }
      v73 = (uint64_t *)((char *)v71 + v72);
      v3[2] = (uint64_t)(v73 + 1);
      if (!v71)
      {
        v99 = v70;
        v100 = 0;
LABEL_150:
        *v3 = 0;
        v3[1] = 0;
        v102 = v3[3];
        if (v102 && v99)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v102 + 16))(v102, v100);
        if (v116[8])
        {
          v103 = *(WTF::StringImpl **)v116;
          *(_QWORD *)v116 = 0;
          if (v103)
          {
            if (*(_DWORD *)v103 == 2)
              WTF::StringImpl::destroy(v103, v71);
            else
              *(_DWORD *)v103 -= 2;
          }
        }
        goto LABEL_102;
      }
      v74 = *v73;
      *(_QWORD *)&v106 = v65;
      BYTE8(v106) = v67;
      BYTE9(v106) = v69;
      *(_QWORD *)&v107 = *(_QWORD *)v116;
      *((_QWORD *)&v107 + 1) = v74;
      LOBYTE(v108[0]) = 1;
      this = (IPC::Encoder *)WebKit::WebSWServerToContextConnection::reportConsoleMessage(v5, v65, v67, v69, (uint64_t)&v107, v74);
      if (LOBYTE(v108[0]))
      {
        this = (IPC::Encoder *)v107;
        *(_QWORD *)&v107 = 0;
        if (this)
          goto LABEL_124;
      }
      return this;
    case 0xACB:
      IPC::Decoder::decode<std::optional<WebCore::ServiceWorkerJobDataIdentifier>>((uint64_t *)a3, (uint64_t)v116);
      if (!v116[24])
        goto LABEL_102;
      v26 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v3);
      if (!v27)
        goto LABEL_102;
      v28 = v26;
      IPC::Decoder::decode<WTF::String>(v3, v114);
      if (!v114[8])
        goto LABEL_102;
      v11 = v116[24];
      if (!v116[24])
        goto LABEL_136;
      v106 = *(_OWORD *)v116;
      *(_QWORD *)&v107 = *(_QWORD *)&v116[16];
      *((_QWORD *)&v107 + 1) = v28;
      v108[0] = *(WTF **)v114;
      LOBYTE(v108[1]) = 1;
      WebCore::SWServerToContextConnection::scriptContextFailedToStart();
      this = v108[0];
      v108[0] = 0;
      if (!this)
        return this;
      goto LABEL_124;
    case 0xACC:
      this = (IPC::Encoder *)IPC::Decoder::decode<std::tuple<std::optional<WebCore::ServiceWorkerJobDataIdentifier>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,BOOL>>((uint64_t)&v106, (uint64_t *)a3);
      if (LOBYTE(v108[1]))
        return (IPC::Encoder *)WebCore::SWServerToContextConnection::scriptContextStarted();
      return this;
    case 0xACD:
      this = (IPC::Encoder *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,BOOL>>((uint64_t)&v106, (uint64_t *)a3);
      if ((_BYTE)v107)
        return (IPC::Encoder *)WebCore::SWServerToContextConnection::setAsInspected();
      return this;
    case 0xACE:
      v17 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v18)
        goto LABEL_102;
      v19 = v17;
      IPC::Decoder::decode<WTF::URL>(v3, v114);
      if (!v115)
        goto LABEL_102;
      IPC::Decoder::decode<WebCore::ServiceWorkerImportedScript>(v3, (uint64_t)v116);
      v21 = v118;
      if (v118)
      {
        v11 = v115;
        if (!v115)
        {
LABEL_136:
          __break(1u);
LABEL_137:
          v90 = 0;
          v91 = 0;
          *v3 = 0;
          v3[1] = 0;
          v92 = v3[3];
          if (v92)
          {
            if (v10)
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v92 + 16))(v92, v11, v10);
              v91 = *v3;
              v90 = v3[1];
            }
            else
            {
              v90 = 0;
              v91 = 0;
            }
          }
          goto LABEL_138;
        }
        v22 = *(_QWORD *)v114;
        *(_QWORD *)v114 = 0;
        *(_QWORD *)&v106 = v19;
        *((_QWORD *)&v106 + 1) = v22;
        v107 = *(_OWORD *)&v114[8];
        *(_OWORD *)v108 = *(_OWORD *)&v114[24];
        *(_DWORD *)&v114[8] &= ~1u;
        v23 = *(_OWORD *)v116;
        *(_OWORD *)v116 = 0uLL;
        *(_OWORD *)v109 = v23;
        *(_OWORD *)v110 = *(_OWORD *)&v116[16];
        v111 = *(_OWORD *)&v116[32];
        *(_DWORD *)&v116[16] &= ~1u;
        v24 = v117;
        v117 = 0;
        v25 = 1;
        v112 = v24;
      }
      else
      {
        v25 = 0;
        LOBYTE(v106) = 0;
      }
      v113 = v25;
      std::__optional_destruct_base<WebCore::ServiceWorkerImportedScript,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v116, v20);
      if (v115)
      {
        v83 = *(WTF::StringImpl **)v114;
        *(_QWORD *)v114 = 0;
        if (v83)
        {
          if (*(_DWORD *)v83 == 2)
            WTF::StringImpl::destroy(v83, v82);
          else
            *(_DWORD *)v83 -= 2;
        }
      }
      if (v21)
      {
        this = (IPC::Encoder *)WebCore::SWServerToContextConnection::setScriptResource();
        if (v113)
        {
          v84 = v112;
          v112 = 0;
          if (v84)
          {
            if (*(_DWORD *)v84 == 2)
              WTF::StringImpl::destroy(v84, v29);
            else
              *(_DWORD *)v84 -= 2;
          }
          v85 = v109[1];
          v109[1] = 0;
          if (v85)
          {
            if (*(_DWORD *)v85 == 2)
              WTF::StringImpl::destroy(v85, v29);
            else
              *(_DWORD *)v85 -= 2;
          }
          v86 = (unsigned int *)v109[0];
          v109[0] = 0;
          if (v86)
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v86, v29);
          this = (IPC::Encoder *)*((_QWORD *)&v106 + 1);
          *((_QWORD *)&v106 + 1) = 0;
          if (this)
          {
LABEL_124:
            if (*(_DWORD *)this == 2)
              return (IPC::Encoder *)WTF::StringImpl::destroy(this, v29);
            else
              *(_DWORD *)this -= 2;
          }
        }
        return this;
      }
LABEL_102:
      v80 = *v3;
      v81 = v3[1];
      *v3 = 0;
      v3[1] = 0;
      this = (IPC::Encoder *)v3[3];
      if (!this || !v81)
        return this;
      return (IPC::Encoder *)(*(uint64_t (**)(IPC::Encoder *, uint64_t))(*(_QWORD *)this + 16))(this, v80);
    case 0xACF:
      this = (IPC::Encoder *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,BOOL>>((uint64_t)&v106, (uint64_t *)a3);
      if ((_BYTE)v107)
        return (IPC::Encoder *)WebCore::SWServerToContextConnection::setServiceWorkerHasPendingEvents();
      return this;
    case 0xAD0:
      v10 = *((_QWORD *)a3 + 1);
      v11 = *(_QWORD *)a3;
      v12 = ((*((_QWORD *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a3;
      if (v10 < v12 || v10 - v12 <= 7)
        goto LABEL_137;
      v14 = (uint64_t *)(v11 + v12);
      *((_QWORD *)a3 + 2) = v14 + 1;
      if (v11)
      {
        v15 = *v14;
        IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
        if (v16)
          return WebKit::WebSWServerToContextConnection::skipWaiting((uint64_t)v5, v15);
      }
      else
      {
        v90 = v10;
        v91 = 0;
LABEL_138:
        *v3 = 0;
        v3[1] = 0;
        v93 = v3[3];
        if (v93 && v90)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v93 + 16))(v93, v91);
      }
      v80 = *v3;
      v94 = v3[1];
      *v3 = 0;
      v3[1] = 0;
      this = (IPC::Encoder *)v3[3];
      if (this && v94)
        return (IPC::Encoder *)(*(uint64_t (**)(IPC::Encoder *, uint64_t))(*(_QWORD *)this + 16))(this, v80);
      return this;
    case 0xAD1:
      this = (IPC::Encoder *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v49)
        return (IPC::Encoder *)WebCore::SWServerToContextConnection::workerTerminated();
      return this;
    default:
      return this;
  }
}

IPC::Encoder *`non-virtual thunk to'WebKit::WebSWServerToContextConnection::didReceiveMessage(WebKit::WebSWServerToContextConnection *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  return WebKit::WebSWServerToContextConnection::didReceiveMessage((WebKit::WebSWServerToContextConnection *)((char *)this - 112), a2, a3);
}

unint64_t IPC::Decoder::decode<std::tuple<std::optional<WebCore::ServiceWorkerJobDataIdentifier>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,BOOL>>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  char v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  __int128 v18;
  uint64_t v19;
  char v20;

  IPC::Decoder::decode<std::optional<WebCore::ServiceWorkerJobDataIdentifier>>(a2, (uint64_t)&v18);
  if (!v20)
    goto LABEL_11;
  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (!v5)
    goto LABEL_11;
  v6 = a2[1];
  v7 = *a2;
  v8 = a2[2] - *a2;
  if (v6 <= v8)
  {
    v11 = 0;
    v12 = 0;
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
        v12 = *a2;
        v11 = a2[1];
      }
      else
      {
        v11 = 0;
        v12 = 0;
      }
    }
  }
  else
  {
    v9 = (unsigned __int8 *)(v7 + v8);
    a2[2] = (uint64_t)(v9 + 1);
    if (v7)
    {
      v10 = *v9;
      if (v10 < 2)
      {
        if (v20)
        {
          *(_OWORD *)a1 = v18;
          *(_QWORD *)(a1 + 16) = v19;
          *(_QWORD *)(a1 + 24) = result;
          *(_BYTE *)(a1 + 32) = v10 != 0;
          *(_BYTE *)(a1 + 40) = 1;
          return result;
        }
        __break(1u);
        goto LABEL_18;
      }
      goto LABEL_10;
    }
    v11 = v6;
    v12 = 0;
  }
  v6 = 0;
  v7 = 0;
  *a2 = 0;
  a2[1] = 0;
  v14 = a2[3];
  if (v14)
  {
    if (v11)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v12, v11);
      v7 = *a2;
      v6 = a2[1];
    }
    else
    {
      v6 = 0;
      v7 = 0;
    }
  }
LABEL_10:
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
LABEL_18:
    if (v6)
      (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v7);
  }
LABEL_11:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 40) = 0;
  v15 = *a2;
  v16 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
    v17 = v16 == 0;
  else
    v17 = 1;
  if (!v17)
    return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v15);
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,BOOL>>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  char v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v5)
  {
    v6 = a2[1];
    v7 = *a2;
    v8 = a2[2] - *a2;
    if (v6 <= v8)
    {
      v11 = 0;
      v12 = 0;
      *a2 = 0;
      a2[1] = 0;
      v13 = a2[3];
      if (v13)
      {
        if (v6)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
          v12 = *a2;
          v11 = a2[1];
        }
        else
        {
          v11 = 0;
          v12 = 0;
        }
      }
    }
    else
    {
      v9 = (unsigned __int8 *)(v7 + v8);
      a2[2] = (uint64_t)(v9 + 1);
      if (v7)
      {
        v10 = *v9;
        if (v10 < 2)
        {
          *(_QWORD *)a1 = result;
          *(_BYTE *)(a1 + 8) = v10 != 0;
          *(_BYTE *)(a1 + 16) = 1;
          return result;
        }
        goto LABEL_8;
      }
      v11 = v6;
      v12 = 0;
    }
    v6 = 0;
    v7 = 0;
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14)
    {
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v12, v11);
        v7 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v7 = 0;
      }
    }
LABEL_8:
    *a2 = 0;
    a2[1] = 0;
    v15 = a2[3];
    if (v15 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v7);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v16 = *a2;
  v17 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
    v18 = v17 == 0;
  else
    v18 = 1;
  if (!v18)
    return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v16);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages30WebSWServerToContextConnection29FindClientByVisibleIdentifierEN6WebKit30WebSWServerToContextConnectionEN7WebCore27SWServerToContextConnectionEFvNS_23ObjectIdentifierGenericINS9_27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEONS_17CompletionHandlerIFvONSt3__18optionalINS9_23ServiceWorkerClientDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E35066A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages30WebSWServerToContextConnection29FindClientByVisibleIdentifierEN6WebKit30WebSWServerToContextConnectionEN7WebCore27SWServerToContextConnectionEFvNS_23ObjectIdentifierGenericINS9_27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEONS_17CompletionHandlerIFvONSt3__18optionalINS9_23ServiceWorkerClientDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E35066A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages30WebSWServerToContextConnection29FindClientByVisibleIdentifierEN6WebKit30WebSWServerToContextConnectionEN7WebCore27SWServerToContextConnectionEFvNS_23ObjectIdentifierGenericINS9_27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_6StringEONS_17CompletionHandlerIFvONSt3__18optionalINS9_23ServiceWorkerClientDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EE4callESO_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3497;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerClientData>,void>::encode<IPC::Encoder,std::optional<WebCore::ServiceWorkerClientData>>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages30WebSWServerToContextConnection5ClaimEN6WebKit30WebSWServerToContextConnectionEN7WebCore27SWServerToContextConnectionEFvNS_23ObjectIdentifierGenericINS9_27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt3__18optionalINS9_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E35066C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages30WebSWServerToContextConnection5ClaimEN6WebKit30WebSWServerToContextConnectionEN7WebCore27SWServerToContextConnectionEFvNS_23ObjectIdentifierGenericINS9_27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt3__18optionalINS9_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E35066C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages30WebSWServerToContextConnection5ClaimEN6WebKit30WebSWServerToContextConnectionEN7WebCore27SWServerToContextConnectionEFvNS_23ObjectIdentifierGenericINS9_27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt3__18optionalINS9_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3496;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::optional<WebCore::ExceptionData>,void>::encode<IPC::Encoder,std::optional<WebCore::ExceptionData>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages30WebSWServerToContextConnection5FocusEN6WebKit30WebSWServerToContextConnectionES8_FvN7WebCore16ProcessQualifiedINS_4UUIDEEEONS_17CompletionHandlerIFvONSt3__18optionalINS9_23ServiceWorkerClientDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E35066F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages30WebSWServerToContextConnection5FocusEN6WebKit30WebSWServerToContextConnectionES8_FvN7WebCore16ProcessQualifiedINS_4UUIDEEEONS_17CompletionHandlerIFvONSt3__18optionalINS9_23ServiceWorkerClientDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E35066F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages30WebSWServerToContextConnection5FocusEN6WebKit30WebSWServerToContextConnectionES8_FvN7WebCore16ProcessQualifiedINS_4UUIDEEEONS_17CompletionHandlerIFvONSt3__18optionalINS9_23ServiceWorkerClientDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3498;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerClientData>,void>::encode<IPC::Encoder,std::optional<WebCore::ServiceWorkerClientData>>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages30WebSWServerToContextConnection8NavigateEN6WebKit30WebSWServerToContextConnectionES8_FvN7WebCore16ProcessQualifiedINS_4UUIDEEENS_23ObjectIdentifierGenericINS9_27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS9_23ServiceWorkerClientDataEEENS9_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3506718;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages30WebSWServerToContextConnection8NavigateEN6WebKit30WebSWServerToContextConnectionES8_FvN7WebCore16ProcessQualifiedINS_4UUIDEEENS_23ObjectIdentifierGenericINS9_27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS9_23ServiceWorkerClientDataEEENS9_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E3506718;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages30WebSWServerToContextConnection8NavigateEN6WebKit30WebSWServerToContextConnectionES8_FvN7WebCore16ProcessQualifiedINS_4UUIDEEENS_23ObjectIdentifierGenericINS9_27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINS9_23ServiceWorkerClientDataEEENS9_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSV_EE4callESV_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3499;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData>,void>::encode<IPC::Encoder>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *v5;
  char v6;
  uint64_t v7;

  v4 = *(_DWORD *)(a2 + 224);
  v5 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *v5 = 0;
    if (*(_DWORD *)(a2 + 224) == 1)
    {
      v6 = *(_BYTE *)(a2 + 16);
      *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 24));
      return;
    }
  }
  else
  {
    *v5 = 1;
    if (!*(_DWORD *)(a2 + 224))
    {
      IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerClientData>,void>::encode<IPC::Encoder,std::optional<WebCore::ServiceWorkerClientData>>(a1, a2 + 16);
      return;
    }
  }
  v7 = std::__throw_bad_variant_access[abi:sn180100]();
  _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages30WebSWServerToContextConnection10OpenWindowEN6WebKit30WebSWServerToContextConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINSA_23ServiceWorkerClientDataEEENSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED1Ev(v7);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages30WebSWServerToContextConnection10OpenWindowEN6WebKit30WebSWServerToContextConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINSA_23ServiceWorkerClientDataEEENSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3506740;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages30WebSWServerToContextConnection10OpenWindowEN6WebKit30WebSWServerToContextConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINSA_23ServiceWorkerClientDataEEENSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E3506740;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages30WebSWServerToContextConnection10OpenWindowEN6WebKit30WebSWServerToContextConnectionES8_FvNS_23ObjectIdentifierGenericIN7WebCore27ServiceWorkerIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKNS_3URLEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINSt3__18optionalINSA_23ServiceWorkerClientDataEEENSA_13ExceptionDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSS_EE4callESS_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3500;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData>,void>::encode<IPC::Encoder>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t a1, uint64_t *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  IPC::Decoder::decode<WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (uint64_t)&v10);
  if (v12)
  {
    *(_QWORD *)a1 = v10;
    v5 = v11;
    v10 = 0;
    v11 = 0;
    *(_QWORD *)(a1 + 8) = v5;
    result = WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v4);
    *(_BYTE *)(a1 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    v7 = *a2;
    v8 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v9 = v8 == 0;
    else
      v9 = 1;
    if (!v9)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t *v8;
  unint64_t v9;
  WTF *v10;
  uint64_t v11;
  void *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  WTF *v27;
  uint64_t v28;

  v3 = result;
  v4 = a2[1];
  v5 = *a2;
  v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    v15 = 0;
    v16 = 0;
    *a2 = 0;
    a2[1] = 0;
    v17 = a2[3];
    if (v17)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v17 + 16))(v17, v5, v4);
        v16 = *a2;
        v15 = a2[1];
      }
      else
      {
        v15 = 0;
        v16 = 0;
      }
    }
    goto LABEL_19;
  }
  v8 = (unint64_t *)(v5 + v6);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v15 = v4;
    v16 = 0;
LABEL_19:
    *a2 = 0;
    a2[1] = 0;
    v18 = a2[3];
    if (v18 && v15)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v16);
    goto LABEL_38;
  }
  v9 = *v8;
  v27 = 0;
  v28 = 0;
  if (v9 >= 0x20000)
  {
    v19 = 0;
    LODWORD(v11) = 0;
    do
    {
      result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
      v25 = result;
      v26 = v12;
      if (!(_BYTE)v12)
      {
        v10 = v27;
        if (!v27)
          goto LABEL_38;
        goto LABEL_37;
      }
      if ((_DWORD)v11 == (_DWORD)v28)
      {
        result = WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v27, v11 + 1, (unint64_t)&v25);
        v20 = HIDWORD(v28);
        v19 = v27;
        *((_QWORD *)v27 + HIDWORD(v28)) = *(_QWORD *)result;
      }
      else
      {
        *((_QWORD *)v19 + v11) = result;
        v20 = HIDWORD(v28);
      }
      v11 = (v20 + 1);
      HIDWORD(v28) = v20 + 1;
      --v9;
    }
    while (v9);
    v14 = v28;
    if (v28 <= v11)
      goto LABEL_49;
    if (!(_DWORD)v11)
      goto LABEL_47;
    if (!(v11 >> 29))
    {
      result = WTF::fastMalloc((WTF *)(8 * v11));
      LODWORD(v28) = v11;
      v27 = (WTF *)result;
      if ((WTF *)result != v19)
      {
        v21 = 0;
        do
        {
          *(_QWORD *)(result + v21) = *(_QWORD *)((char *)v19 + v21);
          v21 += 8;
        }
        while (8 * v11 != v21);
        v14 = v11;
        if (!v19)
          goto LABEL_49;
LABEL_48:
        result = WTF::fastFree(v19, v12);
        v14 = v28;
        LODWORD(v11) = HIDWORD(v28);
LABEL_49:
        v10 = v27;
        goto LABEL_17;
      }
LABEL_47:
      v27 = 0;
      LODWORD(v28) = 0;
      goto LABEL_48;
    }
    __break(0xC471u);
  }
  else
  {
    if (v9)
    {
      v10 = (WTF *)WTF::fastMalloc((WTF *)(8 * v9));
      LODWORD(v11) = 0;
      LODWORD(v28) = v9;
      v27 = v10;
      while (1)
      {
        result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
        v25 = result;
        v26 = v12;
        if (!(_BYTE)v12)
          break;
        if ((_DWORD)v11 == (_DWORD)v28)
        {
          result = WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v27, v11 + 1, (unint64_t)&v25);
          v13 = HIDWORD(v28);
          v10 = v27;
          *((_QWORD *)v27 + HIDWORD(v28)) = *(_QWORD *)result;
        }
        else
        {
          *((_QWORD *)v10 + v11) = result;
          v13 = HIDWORD(v28);
        }
        LODWORD(v11) = v13 + 1;
        HIDWORD(v28) = v13 + 1;
        if (!--v9)
        {
          v14 = v28;
          goto LABEL_17;
        }
      }
LABEL_37:
      v27 = 0;
      LODWORD(v28) = 0;
      WTF::fastFree(v10, v12);
LABEL_38:
      v22 = *a2;
      v23 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      result = a2[3];
      if (result)
      {
        if (v23)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v22);
          v24 = *a2;
          v23 = a2[1];
          result = a2[3];
LABEL_41:
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 16) = 0;
          *a2 = 0;
          a2[1] = 0;
          if (result)
          {
            if (v23)
              return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v24);
          }
          return result;
        }
      }
      else
      {
        v23 = 0;
      }
      v24 = 0;
      goto LABEL_41;
    }
    v10 = 0;
    v14 = 0;
    LODWORD(v11) = 0;
LABEL_17:
    *(_QWORD *)v3 = v10;
    *(_DWORD *)(v3 + 8) = v14;
    *(_DWORD *)(v3 + 12) = v11;
    *(_BYTE *)(v3 + 16) = 1;
  }
  return result;
}

_DWORD *IPC::Decoder::decode<std::tuple<WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::InjectUserScriptImmediately>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unsigned int v8;
  uint64_t v9;
  _DWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;

  IPC::Decoder::decode<WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (uint64_t)&v21);
  if (v23)
  {
    v4 = a2[1];
    v5 = (char *)*a2;
    v6 = a2[2] - *a2;
    if (v4 <= v6)
    {
      v13 = 0;
      v14 = 0;
      *a2 = 0;
      a2[1] = 0;
      v15 = a2[3];
      if (v15)
      {
        if (v4)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
          v14 = *a2;
          v13 = a2[1];
        }
        else
        {
          v13 = 0;
          v14 = 0;
        }
      }
    }
    else
    {
      v7 = &v5[v6];
      a2[2] = (uint64_t)(v7 + 1);
      if (v5)
      {
        v8 = *v7;
        if (v8 < 2)
        {
          *(_QWORD *)a1 = v21;
          v9 = v22;
          v21 = 0;
          v22 = 0;
          *(_QWORD *)(a1 + 8) = v9;
          *(_BYTE *)(a1 + 16) = v8 != 0;
          *(_BYTE *)(a1 + 24) = 1;
          return WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(&v21, v5);
        }
        goto LABEL_13;
      }
      v13 = v4;
      v14 = 0;
    }
    v4 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v16 = a2[3];
    if (v16)
    {
      if (v13)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v14, v13);
        v5 = (char *)*a2;
        v4 = a2[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
LABEL_13:
    *a2 = 0;
    a2[1] = 0;
    v17 = a2[3];
    if (v17)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v17 + 16))(v17, v5);
        v19 = a2[3];
        v5 = (char *)*a2;
        v20 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        if (v19)
        {
          if (v20)
            (*(void (**)(uint64_t, char *))(*(_QWORD *)v19 + 16))(v19, v5);
        }
      }
    }
    *(_BYTE *)a1 = 0;
    v18 = v23;
    *(_BYTE *)(a1 + 24) = 0;
    if (v18)
      WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(&v21, v5);
    goto LABEL_7;
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
LABEL_7:
  v11 = *a2;
  v12 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (_DWORD *)a2[3];
  if (result)
  {
    if (v12)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)result + 16))(result, v11);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v5
    && (v6 = v4,
        result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2),
        v8))
  {
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = result;
    *(_BYTE *)(a1 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    v9 = *a2;
    v10 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v11 = v10 == 0;
    else
      v11 = 1;
    if (!v11)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v9);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t a1, uint64_t *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  IPC::Decoder::decode<WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (uint64_t)&v10);
  if (v12)
  {
    *(_QWORD *)a1 = v10;
    v5 = v11;
    v10 = 0;
    v11 = 0;
    *(_QWORD *)(a1 + 8) = v5;
    result = WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v4);
    *(_BYTE *)(a1 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    v7 = *a2;
    v8 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v9 = v8 == 0;
    else
      v9 = 1;
    if (!v9)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t a1, uint64_t *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  IPC::Decoder::decode<WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (uint64_t)&v10);
  if (v12)
  {
    *(_QWORD *)a1 = v10;
    v5 = v11;
    v10 = 0;
    v11 = 0;
    *(_QWORD *)(a1 + 8) = v5;
    result = WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v4);
    *(_BYTE *)(a1 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    v7 = *a2;
    v8 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v9 = v8 == 0;
    else
      v9 = 1;
    if (!v9)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v7);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a1 + 16))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  WTF::StringImpl *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  result = IPC::Decoder::decode<WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (uint64_t)&v7);
  v5 = v9;
  if (v9)
  {
    *(_QWORD *)a1 = v7;
    v6 = v8;
    v7 = 0;
    v8 = 0;
    *(_QWORD *)(a1 + 8) = v6;
    result = WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v7, v4);
    v5 = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
  }
  *(_BYTE *)(a1 + 16) = v5;
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::WebUserContentControllerProxy::DidPostMessage,WebKit::WebUserContentControllerProxy,WebKit::WebUserContentControllerProxy,void ()(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::FrameInfoData &&,WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(unsigned char const,WTF::String const&)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD *, _QWORD, _QWORD *, _QWORD, _QWORD, _QWORD, uint64_t), uint64_t a5)
{
  WTF::StringImpl *v10;
  unint64_t v11;
  _QWORD *v12;
  unsigned __int8 **v13;
  _QWORD *v14;
  unint64_t v16;
  unsigned __int8 **v17;
  _QWORD *v18;
  _QWORD v19[41];
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::FrameInfoData,WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>>>(a2, v19);
  if (v20)
  {
    v11 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if ((_BYTE)v10)
    {
      v16 = v11;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v17, a1);
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v12 = off_1E3506778;
      v12[1] = v16;
      v13 = v17;
      v17 = 0;
      v18 = v12;
      v12[2] = v13;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v17);
      if (!v20)
        __break(1u);
      IPC::callMemberFunction<WebKit::WebUserContentControllerProxy,WebKit::WebUserContentControllerProxy,void ()(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::FrameInfoData &&,WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(unsigned char const,WTF::String const&)> &&),WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::FrameInfoData,WebKit::ScriptMessageHandlerIdentifierType,unsigned char const>,WTF::String const&>(a3, a4, a5, v19, (uint64_t)&v18);
      v14 = v18;
      v18 = 0;
      if (v14)
        (*(void (**)(_QWORD *))(*v14 + 8))(v14);
    }
  }
  return std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::FrameInfoData,WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v19, v10);
}

unint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::FrameInfoData,WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::FrameInfoData,WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[328])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::callMemberFunction<WebKit::WebUserContentControllerProxy,WebKit::WebUserContentControllerProxy,void ()(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::FrameInfoData &&,WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(unsigned char const,WTF::String const&)> &&),WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::FrameInfoData,WebKit::ScriptMessageHandlerIdentifierType,unsigned char const>,WTF::String const&>(uint64_t a1, uint64_t (*a2)(_QWORD *, _QWORD, _QWORD *, _QWORD, _QWORD, _QWORD, uint64_t), uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t (*v5)(_QWORD *, _QWORD, _QWORD *, _QWORD, _QWORD, _QWORD, uint64_t);
  _QWORD *v6;

  v5 = a2;
  v6 = (_QWORD *)(a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD *, _QWORD, _QWORD, _QWORD, uint64_t))(*v6 + a2);
  return v5(v6, *a4, a4 + 1, a4[38], a4[39], a4[40], a5);
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::FrameInfoData,WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  _QWORD v6[2];

  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6[0] = result;
  v6[1] = v5;
  if ((_BYTE)v5)
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::FrameInfoData,WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1, (uint64_t)v6, a2);
  *a2 = 0;
  a2[328] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::FrameInfoData,WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  WTF::StringImpl *v6;
  _BYTE v8[304];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebKit::FrameInfoData>(a1, (uint64_t)v8);
  if (v8[296])
  {
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::FrameInfoData,WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::FrameInfoData>(a1, a2, (uint64_t)v8, (uint64_t)a3);
  }
  else
  {
    *a3 = 0;
    a3[328] = 0;
  }
  return std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v8, v6);
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::FrameInfoData,WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::FrameInfoData>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result;
  char v9;
  unint64_t v10;
  char v11;
  __int128 v12;
  char v13;

  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  if (!v9)
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 328) = 0;
    return result;
  }
  v10 = result;
  result = (unint64_t)IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a1, (uint64_t)&v12);
  v11 = v13;
  if (v13)
  {
    if (!*(_BYTE *)(a2 + 8) || !*(_BYTE *)(a3 + 296))
    {
      __break(1u);
      return result;
    }
    *(_QWORD *)a4 = *(_QWORD *)a2;
    result = std::__tuple_leaf<0ul,WebKit::FrameInfoData,false>::__tuple_leaf[abi:sn180100]<WebKit::FrameInfoData,void>(a4 + 8, a3);
    *(_QWORD *)(a4 + 304) = v10;
    *(_OWORD *)(a4 + 312) = v12;
    v11 = 1;
  }
  else
  {
    *(_BYTE *)a4 = 0;
  }
  *(_BYTE *)(a4 + 328) = v11;
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29WebUserContentControllerProxy14DidPostMessageEN6WebKit29WebUserContentControllerProxyES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS7_13FrameInfoDataENS9_INS7_34ScriptMessageHandlerIdentifierTypeESC_yEENSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvSL_RKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_SP_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3506778;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29WebUserContentControllerProxy14DidPostMessageEN6WebKit29WebUserContentControllerProxyES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS7_13FrameInfoDataENS9_INS7_34ScriptMessageHandlerIdentifierTypeESC_yEENSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvSL_RKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_SP_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E3506778;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29WebUserContentControllerProxy14DidPostMessageEN6WebKit29WebUserContentControllerProxyES8_FvNS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS7_13FrameInfoDataENS9_INS7_34ScriptMessageHandlerIdentifierTypeESC_yEENSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvSL_RKNS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_SP_EE4callESL_SP_(uint64_t a1, const void *a2, size_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  IPC::Encoder *v14;

  v8 = *(_QWORD *)(a1 + 8);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 3504;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v14 = (IPC::Encoder *)v9;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v9, a2, a3);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, a4);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v14, 0, 0);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::FrameInfoData,WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  const void *v5;
  char v7;

  if (*(_BYTE *)(a1 + 328))
  {
    v3 = *(WTF::StringImpl **)(a1 + 248);
    *(_QWORD *)(a1 + 248) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(unsigned int *)(a1 + 240);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_15[v4])(&v7, a1 + 216);
    *(_DWORD *)(a1 + 240) = -1;
    v5 = *(const void **)(a1 + 208);
    *(_QWORD *)(a1 + 208) = 0;
    if (v5)
      CFRelease(v5);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 16));
  }
  return a1;
}

uint64_t WKBundlePageGetPDFDocumentInFrame()
{
  return 0;
}

void sub_1978337E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  *(_BYTE *)(v1 + v2) = v3;
  _Unwind_Resume(a1);
}

void sub_197833850(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  *(_BYTE *)(v1 + v2) = v3;
  _Unwind_Resume(a1);
}

id keyCommandsPlaceholderHackForEvernote(objc_object *a1, objc_selector *a2)
{
  objc_class *Class;
  objc_super v4;

  v4.receiver = a1;
  Class = object_getClass(a1);
  v4.super_class = class_getSuperclass(Class);
  return -[objc_object keyCommands](&v4, sel_keyCommands);
}

void sub_197834204(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

void sub_197834A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  _Unwind_Resume(exception_object);
}

void sub_197834ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_197834B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;
  const void *v11;

  if (v11)
    CFRelease(v11);
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void sub_197834C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;
  const void *v11;

  if (v11)
    CFRelease(v11);
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void sub_197834EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, int a12, int a13)
{
  uint64_t v13;
  uint64_t v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15 = a10;
  a10 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (a13 != -1)
    ((void (*)(uint64_t *, char *))off_1E35068F8[a13])(&a10, &a11);
  _Unwind_Resume(a1);
}

void sub_197835064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  unsigned __int8 *v10;
  int v12;

  v12 = __ldxr(v10);
  if (v12 == 1)
  {
    if (!__stlxr(0, v10))
    {
LABEL_6:
      if (cf)
        CFRelease(cf);
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v10);
  goto LABEL_6;
}

void sub_197835274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, int a12, int a13)
{
  uint64_t v13;
  uint64_t v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15 = a10;
  a10 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (a13 != -1)
    ((void (*)(uint64_t *, char *))off_1E35068F8[a13])(&a10, &a11);
  _Unwind_Resume(a1);
}

void sub_19783541C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  unsigned __int8 *v10;
  int v12;

  v12 = __ldxr(v10);
  if (v12 == 1)
  {
    if (!__stlxr(0, v10))
    {
LABEL_6:
      if (cf)
        CFRelease(cf);
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v10);
  goto LABEL_6;
}

WebKit::PageClientImpl *std::unique_ptr<WebKit::PageClientImpl>::reset[abi:sn180100](WebKit::PageClientImpl **a1, WebKit::PageClientImpl *a2)
{
  WebKit::PageClientImpl *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::PageClientImpl::~PageClientImpl(result);
    return (WebKit::PageClientImpl *)WTF::fastFree(v4, v5);
  }
  return result;
}

void sub_1978355B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf)
{
  const void *v13;

  if (v13)
    CFRelease(v13);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZZ49__WKContentView__removeTemporaryFilesIfNecessary_ENK3__0clEv_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = 0;
  return objc_msgSend(*(id *)(a1 + 32), "removeItemAtURL:error:", a2, &v3);
}

CFTypeRef __copy_helper_block_e8_32c37_ZTSN3WTF9RetainPtrI13NSFileManagerEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_32c37_ZTSN3WTF9RetainPtrI13NSFileManagerEE(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    CFRelease(v2);
}

uint64_t std::__optional_destruct_base<WebKit::RemoveBackgroundData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  const void *v4;

  if (*(_BYTE *)(a1 + 96))
  {
    v3 = *(WTF::StringImpl **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(const void **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = 0;
    if (v4)
      CFRelease(v4);
  }
  return a1;
}

uint64_t WTF::HashTable<WTF::RetainPtr<UIDragItem>,WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashMap<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UITargetedDragPreview>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  const void *v6;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *(const void **)v4;
      if (*(_QWORD *)v4 != -1)
      {
        v6 = *(const void **)(v4 + 8);
        *(_QWORD *)(v4 + 8) = 0;
        if (v6)
        {
          CFRelease(v6);
          v5 = *(const void **)v4;
        }
        *(_QWORD *)v4 = 0;
        if (v5)
          CFRelease(v5);
      }
      v4 += 16;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void WTF::VectorDestructor<true,WebKit::DragSourceState>::destruct(WTF::StringImpl *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  const void *v9;
  WTF::StringImpl *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 != a2)
  {
    v12 = v2;
    v13 = v3;
    v5 = (char *)a1 + 176;
    do
    {
      v6 = (WTF::StringImpl *)*((_QWORD *)v5 + 10);
      *((_QWORD *)v5 + 10) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v7 = (WTF::StringImpl *)*((_QWORD *)v5 + 9);
      *((_QWORD *)v5 + 9) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      if (v5[64])
      {
        v8 = *((unsigned int *)v5 + 14);
        if ((_DWORD)v8 != -1)
          ((void (*)(char *, char *))off_1E35067E0[v8])(&v11, v5);
        *((_DWORD *)v5 + 14) = -1;
      }
      std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(v5 - 128), a2);
      v9 = (const void *)*((_QWORD *)v5 - 17);
      *((_QWORD *)v5 - 17) = 0;
      if (v9)
        CFRelease(v9);
      v10 = (WTF::StringImpl *)(v5 + 136);
      v5 += 312;
    }
    while (v10 != a2);
  }
}

WebKit::GestureRecognizerConsistencyEnforcer *std::unique_ptr<WebKit::GestureRecognizerConsistencyEnforcer>::reset[abi:sn180100](WebKit::GestureRecognizerConsistencyEnforcer **a1, WebKit::GestureRecognizerConsistencyEnforcer *a2)
{
  WebKit::GestureRecognizerConsistencyEnforcer *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::GestureRecognizerConsistencyEnforcer::~GestureRecognizerConsistencyEnforcer(result, a2);
    return (WebKit::GestureRecognizerConsistencyEnforcer *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WTF::Vector<WebKit::KeyEventAndCompletionBlock,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  const void **v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,WebKit::KeyEventAndCompletionBlock>::destruct(*(const void ***)a1, (const void **)(*(_QWORD *)a1 + 16 * v3));
  v4 = *(const void ***)a1;
  if (a1 + 16 != *(_QWORD *)a1 && v4 != 0)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

void WTF::VectorDestructor<true,WebKit::KeyEventAndCompletionBlock>::destruct(const void **a1, const void **a2)
{
  const void **v3;
  const void *v4;

  if (a1 != a2)
  {
    v3 = a1;
    do
    {
      _Block_release(v3[1]);
      v4 = *v3;
      *v3 = 0;
      if (v4)
        CFRelease(v4);
      v3 += 2;
    }
    while (v3 != a2);
  }
}

void sub_197835CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void sub_197835F04(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, WTF *a10)
{
  if (a10)
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)a10, a2);
  _Unwind_Resume(exception_object);
}

void sub_19783614C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void sub_197836364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  const void *v10;
  const void *v11;

  if (v11)
    CFRelease(v11);
  if (v10)
    CFRelease(v10);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_197836C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t existingLocalDragSessionContext(void *a1)
{
  objc_msgSend(a1, "localContext");
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return objc_msgSend(a1, "localContext");
  else
    return 0;
}

void sub_197837420(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v14;

  WTF::Vector<WebKit::KeyEventAndCompletionBlock,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, a2);
  WTF::Vector<WebKit::KeyEventAndCompletionBlock,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v14);
  _Unwind_Resume(a1);
}

void sub_197837464()
{
  uint64_t v0;

  if (!v0)
    JUMPOUT(0x197837454);
  JUMPOUT(0x19783744CLL);
}

void sub_197837FE4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  WTF *v9;

  WTF::fastFree(v9, a2);
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void sub_197838280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v14;

  v14 = a10;
  a10 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  objc_destroyWeak((id *)&a9);
  *(_BYTE *)(v10 + v11) = v12;
  _Unwind_Resume(a1);
}

void sub_197838B50(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 176));
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c69_ZTSKZ55__WKContentView_WKInteraction___touchEventsRecognized__E4__14(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c69_ZTSKZ55__WKContentView_WKInteraction___touchEventsRecognized__E4__14(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 32));
}

void sub_1978391EC(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_197839348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

float inflateQuad(const FloatQuad *a1, float a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float result;

  v3 = a3[6];
  v4 = a3[7];
  v5 = a3[4];
  if (*a3 <= v3)
  {
    v6 = a3[7];
    v7 = a3[6];
    v4 = a3[1];
    v3 = *a3;
  }
  else
  {
    v6 = a3[1];
    v7 = *a3;
  }
  v8 = a3[5];
  if (a3[2] <= v5)
  {
    v9 = a3[5];
    v10 = a3[4];
    v8 = a3[3];
    v5 = a3[2];
  }
  else
  {
    v9 = a3[3];
    v10 = a3[2];
  }
  if (v3 <= v5)
  {
    v11 = v8;
    v12 = v5;
    v8 = v4;
    v5 = v3;
  }
  else
  {
    v11 = v4;
    v12 = v3;
  }
  if (v7 <= v10)
  {
    v13 = v9;
    v14 = v10;
    v9 = v6;
    v10 = v7;
  }
  else
  {
    v13 = v6;
    v14 = v7;
  }
  if (v10 <= v12)
  {
    v15 = v11;
    v16 = v12;
    v11 = v9;
    v12 = v10;
  }
  else
  {
    v15 = v9;
    v16 = v10;
  }
  if (v11 >= v8)
  {
    v17 = v11;
    v18 = v12;
    v11 = v8;
    v12 = v5;
  }
  else
  {
    v17 = v8;
    v18 = v5;
  }
  if (v13 >= v15)
  {
    v19 = v13;
    v20 = v14;
    v13 = v15;
    v14 = v16;
  }
  else
  {
    v19 = v15;
    v20 = v16;
  }
  a1->m_p1.m_x = v18 + -2.0;
  a1->m_p1.m_y = v17 + 2.0;
  a1->m_p2.m_x = v12 + -2.0;
  a1->m_p2.m_y = v11 + -2.0;
  a1->m_p3.m_x = v14 + 2.0;
  a1->m_p3.m_y = v13 + -2.0;
  result = v19 + 2.0;
  a1->m_p4.m_x = v20 + 2.0;
  a1->m_p4.m_y = result;
  return result;
}

void sub_1978399E0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if ((a10 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19783A2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  objc_destroyWeak((id *)&a9);
  _Unwind_Resume(a1);
}

uint64_t isBuiltInScrollViewPanGestureRecognizer(UIGestureRecognizer *a1)
{
  if (qword_1EE341A88 != -1)
    dispatch_once(&qword_1EE341A88, &__block_literal_global_2775);
  return objc_opt_isKindOfClass() & 1;
}

void sub_19783AF8C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_19783B21C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  const void *v13;

  _Block_release(v13);
  _Unwind_Resume(a1);
}

void sub_19783B3CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, int a14)
{
  uint64_t v14;

  if (a14 != -1)
    ((void (*)(uint64_t, char *))off_1E3507520[a14])(v14 - 33, &a12);
  _Unwind_Resume(exception_object);
}

void sub_19783B72C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19783BA84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_19783BB18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

BOOL std::operator==[abi:sn180100]<WebCore::ElementContext,WebCore::ElementContext>(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  BOOL v5;
  BOOL v6;

  if (*(_BYTE *)(a1 + 80))
    v2 = *(_BYTE *)(a2 + 80) == 0;
  else
    v2 = 1;
  if (v2)
    return (*(_BYTE *)(a1 + 80) != 0) == (*(_BYTE *)(a2 + 80) != 0);
  if (*(float *)a1 != *(float *)a2 || *(float *)(a1 + 4) != *(float *)(a2 + 4))
    return 0;
  v5 = *(float *)(a1 + 8) == *(float *)(a2 + 8) && *(float *)(a1 + 12) == *(float *)(a2 + 12);
  if (!v5 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v6 = *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40) && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32);
  if (v6 && *(_QWORD *)(a1 + 48) == *(_QWORD *)(a2 + 48))
    return *(_QWORD *)(a1 + 64) == *(_QWORD *)(a2 + 64);
  return v3;
}

void sub_19783C970(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

_BYTE *cancelPotentialTapIfNecessary(_BYTE *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  if (result[2956])
  {
    v1 = result;
    objc_msgSend(result, "_endPotentialTapAndEnableDoubleTapGesturesIfNecessary");
    objc_msgSend(v1, "_cancelInteraction");
    v2 = v1[55];
    v3 = *(_QWORD *)(v2 + 208);
    v4 = 0;
    return (_BYTE *)WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::CancelPotentialTap>(v3, (uint64_t)&v4, *(_QWORD *)(*(_QWORD *)(v2 + 32) + 1896), 0);
  }
  return result;
}

void sub_19783DB4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  WTF::StringImpl *v13;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Block_release(0);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v13);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, v13);
    else
      *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_19783DE18(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18)
{
  WebKit::InteractionInformationAtPosition::~InteractionInformationAtPosition((WebKit::InteractionInformationAtPosition *)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_19783DF58(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19783E224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_19783F6AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_19783F858(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_19783F9FC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  WTF *v10;

  WTF::fastFree(v10, a2);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19783FCD8(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_19783FE3C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1978409F0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_197840AD4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_197840CD0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_197840F00(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  WTF::StringImpl *v11;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  if ((a11 & 0x8000000000000) != 0)
  {
    v13 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFLL);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1978411A0(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_19784136C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  WebKit::EditorState::PostLayoutData *v51;

  if (a51)
    WebKit::EditorState::PostLayoutData::~PostLayoutData(v51, a2);
  _Unwind_Resume(exception_object);
}

void sub_197841F50(_Unwind_Exception *a1, void *a2)
{
  WebKit::EditorState::PostLayoutData *v2;
  uint64_t v3;
  void *v5;

  std::__optional_destruct_base<WebKit::EditorState::VisualData,false>::~__optional_destruct_base[abi:sn180100](v3, a2);
  if (LOBYTE(STACK[0x220]))
    WebKit::EditorState::PostLayoutData::~PostLayoutData(v2, v5);
  _Unwind_Resume(a1);
}

void sub_1978423E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1978427D0(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  CFRelease(v1);
  CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1978428D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_197842A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;
  WTF::StringImpl *v12;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Block_release(0);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v12);
    else
      *(_DWORD *)a10 -= 2;
  }
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void sub_197842C18(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_197842E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *logTextInteraction(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, char a10, int a11, char a12, int a13, char a14)
{
  uint64_t v20;
  unint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  unsigned __int8 v24;
  NSObject *v25;
  void *v26;
  char *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *result;
  WTF::StringImpl *v30;
  WTF *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  int v34;
  char v35;
  int v36;
  __int16 v37;
  int v38;
  uint8_t buf[4];
  uint64_t v40;
  __int16 v41;
  char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 1;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v20 = WTF::TextStream::operator<<();
  v21 = objc_msgSend(a2, "state");
  if (v21 >= 6)
    v22 = 0;
  else
    v22 = v21;
  operator<<(v20, v22);
  if (*(_BYTE *)(a3 + 16))
  {
    WTF::TextStream::operator<<();
    if (!*(_BYTE *)(a3 + 16) || (WTF::TextStream::operator<<(), WTF::TextStream::operator<<(), !*(_BYTE *)(a3 + 16)))
      __break(1u);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  if (a5)
  {
    WTF::TextStream::operator<<();
    v23 = WTF::TextStream::operator<<();
    if (a4 >= 6)
      v24 = 0;
    else
      v24 = a4;
    operator<<(v23, v24);
  }
  if (a7)
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  if (a10)
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  if (a14)
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    if ((a12 & 1) != 0)
    {
      WTF::TextStream::operator<<();
      if ((a12 & 2) == 0)
      {
LABEL_24:
        if ((a12 & 4) == 0)
          goto LABEL_27;
        WTF::TextStream::operator<<();
        goto LABEL_26;
      }
      WTF::TextStream::operator<<();
    }
    else if ((a12 & 2) == 0)
    {
LABEL_26:
      WTF::TextStream::operator<<();
      goto LABEL_27;
    }
    WTF::TextStream::operator<<();
    goto LABEL_24;
  }
LABEL_27:
  v25 = qword_1ECE719B0;
  if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_DEFAULT))
  {
    WTF::TextStream::release((WTF::TextStream *)&v32);
    WTF::String::utf8();
    if (v31)
      v27 = (char *)v31 + 16;
    else
      v27 = 0;
    *(_DWORD *)buf = 136315394;
    v40 = a1;
    v41 = 2080;
    v42 = v27;
    _os_log_impl(&dword_196BCC000, v25, OS_LOG_TYPE_DEFAULT, "Text interaction changing selection using '%s' (%s).", buf, 0x16u);
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        WTF::fastFree(v31, v26);
      else
        --*(_DWORD *)v31;
    }
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v26);
      else
        *(_DWORD *)v30 -= 2;
    }
  }
  v28 = v33;
  v33 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v26);
    else
      *(_DWORD *)v28 -= 2;
  }
  result = v32;
  v32 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v26);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1978431EC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, WTF::StringImpl *a12, WTF::StringImpl *a13)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_197843384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  _Unwind_Resume(exception_object);
}

void sub_1978434EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  _Unwind_Resume(exception_object);
}

void sub_1978435C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void sub_197843788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_1978437D0()
{
  uint64_t v0;

  if (!v0)
    JUMPOUT(0x1978437C8);
  JUMPOUT(0x1978437C0);
}

void sub_1978438DC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, int a12)
{
  if (a11)
    WTF::fastFree(a11, a2);
  _Unwind_Resume(exception_object);
}

void sub_197843A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock)
{
  id *v12;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Block_release(aBlock);
  objc_destroyWeak(v12);
  _Unwind_Resume(a1);
}

void sub_197843C98(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_197843F88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;

  v24 = v23;
  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  _Unwind_Resume(a1);
}

void sub_197844230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_1978443D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_197844554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_197844714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_197844864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_197844B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_197844FE4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_197845198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  const void *v9;

  _Block_release(v9);
  _Unwind_Resume(a1);
}

void sub_1978452F8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1978453BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_197845544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  const void *v11;

  _Block_release(v11);
  _Unwind_Resume(a1);
}

void sub_19784589C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_197845A88(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  *(_BYTE *)(v1 + v2) = v3;
  _Unwind_Resume(a1);
}

void sub_197845B04(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_197845C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  const void *v23;
  const void *v24;
  WTF::StringImpl *v26;

  _Block_release(v24);
  CFRelease(v23);
  if (a23)
    WebKit::WebKeyboardEvent::~WebKeyboardEvent((WebKit::WebKeyboardEvent *)&a11, v26);
  _Unwind_Resume(a1);
}

void sub_197845E3C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_197845F6C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if ((a10 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19784610C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_19784630C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v2) = 0;
  _Unwind_Resume(a1);
}

void sub_19784673C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  WTF *v9;

  WTF::fastFree(v9, a2);
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void sub_197846CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, WTF::StringImpl *a19)
{
  const void *v19;

  if (v19)
    CFRelease(v19);
  _Unwind_Resume(exception_object);
}

void sub_197847084(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  WTF::StringImpl *v10;

  if (*(_DWORD *)v10 == 2)
    WTF::StringImpl::destroy(v10, a2);
  else
    *(_DWORD *)v10 -= 2;
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef textSelectionRects(uint64_t *a1, double a2)
{
  void *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WKTextSelectionRect *v8;

  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *((unsigned int *)a1 + 3));
  v5 = *((_DWORD *)a1 + 3);
  if (v5)
  {
    v6 = *a1;
    v7 = 84 * v5;
    do
    {
      v8 = -[WKTextSelectionRect initWithSelectionGeometry:scaleFactor:]([WKTextSelectionRect alloc], "initWithSelectionGeometry:scaleFactor:", v6, a2);
      if (v8)
      {
        objc_msgSend(v4, "addObject:", v8);
        CFRelease(v8);
      }
      v6 += 84;
      v7 -= 84;
    }
    while (v7);
  }
  return (id)CFMakeCollectable(v4);
}

void sub_197847288(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_197847B6C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  void *v34;
  void *v35;
  void *v36;

  if ((a25 & 0x8000000000000) != 0)
  {
    v28 = (unsigned int *)(a25 & 0xFFFFFFFFFFFFLL);
    do
    {
      v29 = __ldaxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
    {
      atomic_store(1u, v28);
      WTF::fastFree((WTF *)v28, a2);
    }
  }
  if ((a22 & 0x8000000000000) != 0)
  {
    v31 = (unsigned int *)(a22 & 0xFFFFFFFFFFFFLL);
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      atomic_store(1u, v31);
      WTF::fastFree((WTF *)v31, a2);
    }
  }
  WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a27, v34);
  WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v35);
  WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a15, v36);
  _Unwind_Resume(a1);
}

void sub_197847E3C(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;

  if (v4)
  {
    CFRelease(v4);
    if (!v3)
    {
LABEL_3:
      if (!v2)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if (!v3)
  {
    goto LABEL_3;
  }
  CFRelease(v3);
  if (!v2)
  {
LABEL_4:
    if (!v1)
LABEL_10:
      _Unwind_Resume(exception_object);
LABEL_9:
    CFRelease(v1);
    goto LABEL_10;
  }
LABEL_8:
  CFRelease(v2);
  if (!v1)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_19784801C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v5);
  _Unwind_Resume(a1);
}

void sub_1978489EC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, CFTypeRef cf, uint64_t a19, uint64_t a20,CFTypeRef a21)
{
  const void *v21;
  const void *v22;

  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, a2);
    else
      *(_DWORD *)a14 -= 2;
  }
  if (cf)
  {
    CFRelease(cf);
    if (!v22)
    {
LABEL_7:
      if (!v21)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  else if (!v22)
  {
    goto LABEL_7;
  }
  CFRelease(v22);
  if (!v21)
LABEL_9:
    _Unwind_Resume(exception_object);
LABEL_8:
  CFRelease(v21);
  goto LABEL_9;
}

void sub_197848A84()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x197848A74);
  JUMPOUT(0x197848A58);
}

void sub_197848A90()
{
  uint64_t v0;

  if (!v0)
    JUMPOUT(0x197848A64);
  JUMPOUT(0x197848A5CLL);
}

void sub_197848BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  const void *v12;

  CFRelease(v12);
  _Unwind_Resume(a1);
}

void sub_197848CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  objc_destroyWeak((id *)&a9);
  _Unwind_Resume(a1);
}

void sub_19784925C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id location, CFTypeRef cf, void *aBlock)
{
  CFTypeRef v15;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Block_release(aBlock);
  v15 = cf;
  cf = 0;
  if (v15)
    CFRelease(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1978492C0()
{
  JUMPOUT(0x1978492A0);
}

void sub_1978492C8()
{
  JUMPOUT(0x1978492B0);
}

void sub_19784944C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id location, void *aBlock)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Block_release(aBlock);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_197849808(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_197849E18(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_19784A0E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, void *aBlock)
{
  _Block_release(aBlock);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

void sub_19784A4BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  *(_BYTE *)(v1 + v2) = v3;
  _Unwind_Resume(exception_object);
}

void sub_19784A82C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_19784CC80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t *a17, uint64_t a18, void *a19)
{
  uint64_t v19;
  const void *v20;
  uint64_t v21;

  if (v20)
    CFRelease(v20);
  objc_msgSend(a19, "stopDeferringInputViewUpdates:", 5);
  WTF::ScopeExit<-[WKContentView(WKInteraction) _elementDidFocus:userIsInteracting:blurPreviousNode:activityStateChanges:userObject:]::$_66>::~ScopeExit(&a17);
  *(_BYTE *)(v19 + v21) = a13;
  *(_BYTE *)(v19 + a15) = a14;
  _Unwind_Resume(a1);
}

void sub_19784CD5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_19784D354(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_19784D460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  _Block_release(aBlock);
  _Unwind_Resume(a1);
}

void sub_19784D538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  const void *v11;
  void *v13;

  _Block_release(v11);
  WTF::Vector<WTF::BlockPtr<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, v13);
  _Unwind_Resume(a1);
}

void sub_19784D6D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  objc_destroyWeak(v14);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19784DAA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location, uint64_t a11)
{
  uint64_t v12;

  v12 = a11;
  a11 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19784DC84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *aBlock)
{
  id *v11;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  objc_destroyWeak(v11);
  _Block_release(aBlock);
  _Unwind_Resume(a1);
}

void sub_19784DE24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock)
{
  const void *v14;

  _Block_release(aBlock);
  _Block_release(v14);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c113_ZTSKZ99__WKContentView_WKInteraction__prepareSelectionForContextMenuWithLocationInView_completionHandler__E4__74(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 32));
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c113_ZTSKZ99__WKContentView_WKInteraction__prepareSelectionForContextMenuWithLocationInView_completionHandler__E4__74(uint64_t a1)
{
  _Block_release(*(const void **)(a1 + 32));
}

void sub_19784DFF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, uint64_t a11)
{
  uint64_t v12;

  v12 = a11;
  a11 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  _Block_release(aBlock);
  objc_destroyWeak((id *)&a9);
  _Unwind_Resume(a1);
}

void sub_19784E4F8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_19784E6EC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19784EA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  const void *v10;
  uint64_t v11;

  CFRelease(*(CFTypeRef *)(v11 + 8));
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(a1);
}

void sub_19784F594(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, WTF::StringImpl *a19, WTF::StringImpl *a20,WTF::StringImpl *a21,uint64_t a22,uint64_t a23,WTF::StringImpl *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v29, a2);
  if (a29)
  {
    v32 = a24;
    a24 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v31);
      else
        *(_DWORD *)v32 -= 2;
    }
  }
  WTF::Vector<WTF::Ref<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a22, v31);
  if (a21)
  {
    if (*(_DWORD *)a21 == 2)
      WTF::StringImpl::destroy(a21, v33);
    else
      *(_DWORD *)a21 -= 2;
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2)
      WTF::StringImpl::destroy(a20, v33);
    else
      *(_DWORD *)a20 -= 2;
  }
  if (a19)
  {
    if (*(_DWORD *)a19 == 2)
      WTF::StringImpl::destroy(a19, v33);
    else
      *(_DWORD *)a19 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_19784F9F8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned int *a18, WTF::StringImpl *a19, WTF::StringImpl *a20,WTF::StringImpl *a21,uint64_t a22,uint64_t a23,WTF::StringImpl *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v30;
  void *v32;
  unsigned int *v33;
  WTF::StringImpl *v34;
  unsigned int *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;

  WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  v33 = *(unsigned int **)(v30 - 96);
  *(_QWORD *)(v30 - 96) = 0;
  if (v33)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v33, v32);
  v34 = *(WTF::StringImpl **)(v30 - 104);
  *(_QWORD *)(v30 - 104) = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v32);
    else
      *(_DWORD *)v34 -= 2;
  }
  v35 = a18;
  a18 = 0;
  if (v35)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v35, v32);
  WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v29, v32);
  if (a29)
  {
    v37 = a24;
    a24 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, v36);
      else
        *(_DWORD *)v37 -= 2;
    }
  }
  WTF::Vector<WTF::Ref<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a22, v36);
  v39 = a21;
  a21 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v38);
    else
      *(_DWORD *)v39 -= 2;
  }
  v40 = a20;
  a20 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v38);
    else
      *(_DWORD *)v40 -= 2;
  }
  v41 = a19;
  a19 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, v38);
    else
      *(_DWORD *)v41 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_19784FD58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_197850018(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1978503C4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  const void *v2;

  *v1 = 0;
  if (v2)
    CFRelease(v2);
  _Unwind_Resume(exception_object);
}

void sub_1978504AC(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_19785058C(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_19785068C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_197850710(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_197850EC4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1978511AC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, CFTypeRef cf, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,int a43,char a44,WTF::StringImpl *a45,WTF::StringImpl *a46)
{
  const void *v46;
  uint64_t v47;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  CFTypeRef v51;

  v49 = a46;
  a46 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, a2);
    else
      *(_DWORD *)v49 -= 2;
  }
  v50 = a45;
  a45 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
      WTF::StringImpl::destroy(v50, a2);
    else
      *(_DWORD *)v50 -= 2;
  }
  if (a44)
  {
    if (a42 != -1)
      ((void (*)(uint64_t *, uint64_t *))off_1E35070A0[a42])(&a9, &a35);
    a42 = -1;
  }
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100](v47, a2);
  v51 = cf;
  cf = 0;
  if (v51)
    CFRelease(v51);
  _Block_release(v46);
  _Unwind_Resume(a1);
}

void sub_197851418(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1978518D4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_197851AA8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_197851B58(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_197851C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  const void *v10;

  _Block_release(v10);
  _Unwind_Resume(a1);
}

void sub_197851E94(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _DWORD *v10;
  const void *v11;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;

  if (v11)
    CFRelease(v11);
  if (!a10)
  {
LABEL_21:
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
    _Unwind_Resume(exception_object);
  }
  v13 = *(_QWORD *)(a10 + 8);
  if (__ldaxr((unsigned __int8 *)v13))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v13))
  {
LABEL_9:
    v15 = *(_QWORD *)(v13 + 8);
    v16 = v15 - 1;
    *(_QWORD *)(v13 + 8) = v15 - 1;
    if (v15 == 1)
    {
      v20 = *(_QWORD *)(v13 + 16);
      v17 = *(_QWORD *)(v13 + 24);
      *(_QWORD *)(v13 + 24) = 0;
      v18 = v20 != 0;
    }
    else
    {
      v17 = 0;
      v18 = 1;
    }
    v19 = __ldxr((unsigned __int8 *)v13);
    if (v19 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v13))
      {
LABEL_16:
        if (!v16)
        {
          if (v17)
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
          if (!v18)
            WTF::fastFree((WTF *)v13, a2);
        }
        goto LABEL_21;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
    goto LABEL_16;
  }
  MEMORY[0x19AEABB3C](v13);
  goto LABEL_9;
}

void sub_197852300(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_19785279C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, uint64_t a20,CFTypeRef cf,uint64_t a22,WTF::StringImpl *a23)
{
  const void *v23;

  CFRelease(v23);
  _Unwind_Resume(a1);
}

void sub_197852BD4(_Unwind_Exception *a1)
{
  const void *v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  CFRelease(*(CFTypeRef *)(v3 + 8));
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c79_ZTSKZ65__WKContentView_WKInteraction___prepareToDragPromisedAttachment__E4__77(uint64_t a1, uint64_t a2)
{
  const void *v4;
  _DWORD *v5;

  v4 = *(const void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    CFRetain(v4);
  *(_QWORD *)(a1 + 40) = 0;
  objc_copyWeak((id *)(a1 + 40), (id *)(a2 + 40));
  v5 = *(_DWORD **)(a2 + 48);
  if (v5)
    *v5 += 2;
  *(_QWORD *)(a1 + 48) = v5;
  return WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 56, a2 + 56);
}

void sub_197852CA4(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  id *v3;
  WTF::StringImpl *v5;
  const void *v6;

  v5 = *(WTF::StringImpl **)(v2 + 48);
  *(_QWORD *)(v2 + 48) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  objc_destroyWeak(v3);
  v6 = *(const void **)(v2 + 32);
  *(_QWORD *)(v2 + 32) = 0;
  if (v6)
    CFRelease(v6);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c79_ZTSKZ65__WKContentView_WKInteraction___prepareToDragPromisedAttachment__E4__77(uint64_t a1, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  const void *v5;

  WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 56, a2);
  v4 = *(WTF::StringImpl **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  objc_destroyWeak((id *)(a1 + 40));
  v5 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v5)
    CFRelease(v5);
}

void sub_197853294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,CFTypeRef cf,CFTypeRef a32)
{
  const void *v32;
  const void *v33;

  if (v32)
    CFRelease(v32);
  CFRelease(v33);
  if (v32)
    CFRelease(v32);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c121_ZTSKZ106__WKContentView_WKInteraction___itemsForBeginningOrAddingToSessionWithRegistrationLists_stagedDragSource__E4__78(uint64_t a1, uint64_t a2)
{
  const void *v4;
  CFTypeRef result;

  v4 = *(const void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    CFRetain(v4);
  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void sub_197853468(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c121_ZTSKZ106__WKContentView_WKInteraction___itemsForBeginningOrAddingToSessionWithRegistrationLists_stagedDragSource__E4__78(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    CFRelease(v3);
}

void sub_197853598(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  WTF *v10;

  WTF::fastFree(v10, a2);
  _Block_release(aBlock);
  objc_destroyWeak((id *)&a9);
  _Unwind_Resume(a1);
}

void sub_1978536B8(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  _Block_release(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_197853A40(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, WTF::StringImpl *a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF *a23,int a24,uint64_t a25)
{
  if (a23)
    WTF::fastFree(a23, a2);
  _Unwind_Resume(exception_object);
}

void sub_197853F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location, CFTypeRef cf, void *aBlock, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, CFTypeRef a18, void *a19)
{
  id *v19;
  CFTypeRef v21;

  objc_destroyWeak(v19);
  _Block_release(aBlock);
  v21 = cf;
  cf = 0;
  if (v21)
    CFRelease(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19785435C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, CFTypeRef cf, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,int a43,char a44,WTF::StringImpl *a45,WTF::StringImpl *a46)
{
  uint64_t v46;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  CFTypeRef v50;

  v48 = a46;
  a46 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      WTF::StringImpl::destroy(v48, a2);
    else
      *(_DWORD *)v48 -= 2;
  }
  v49 = a45;
  a45 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, a2);
    else
      *(_DWORD *)v49 -= 2;
  }
  if (a44)
  {
    if (a42 != -1)
      ((void (*)(uint64_t *, uint64_t *))off_1E35070A0[a42])(&a9, &a35);
    a42 = -1;
  }
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100](v46, a2);
  v50 = cf;
  cf = 0;
  if (v50)
    CFRelease(v50);
  _Unwind_Resume(a1);
}

void sub_197854508(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  void *v25;

  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a24, a2);
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, v25);
  _Unwind_Resume(a1);
}

void sub_197854788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, CFTypeRef cf, uint64_t a17)
{
  const void *v17;
  uint64_t v18;

  if (a17)
    CFRelease(*(CFTypeRef *)(a17 + 8));
  if (cf)
    CFRelease(cf);
  if (v18)
    CFRelease(*(CFTypeRef *)(v18 + 8));
  CFRelease(v17);
  CFRelease(v17);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c98_ZTSKZ84__WKContentView_WKInteraction__dragInteraction_willAnimateLiftWithAnimator_session__E4__82(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;
  uint64_t v5;

  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  result = *(CFTypeRef *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = result;
  if (result)
    result = CFRetain(result);
  v5 = *(_QWORD *)(a2 + 56);
  if (v5)
    result = CFRetain(*(CFTypeRef *)(v5 + 8));
  *(_QWORD *)(a1 + 56) = v5;
  return result;
}

void sub_197854970(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 48);
  *(_QWORD *)(v1 + 48) = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c98_ZTSKZ84__WKContentView_WKInteraction__dragInteraction_willAnimateLiftWithAnimator_session__E4__82(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  v3 = *(const void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v3)
    CFRelease(v3);
}

void sub_197854F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, CFTypeRef cf, uint64_t a16)
{
  const void *v16;
  const void *v17;
  uint64_t v18;

  CFRelease(v16);
  if (v18)
    CFRelease(*(CFTypeRef *)(v18 + 8));
  if (v17)
    CFRelease(v17);
  CFRelease(v16);
  _Unwind_Resume(a1);
}

void sub_197855014()
{
  uint64_t v0;

  if (!v0)
    JUMPOUT(0x19785500CLL);
  JUMPOUT(0x197855004);
}

void sub_197855100(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e8_32c97_ZTSKZ83__WKContentView_WKInteraction__dragInteraction_item_willAnimateCancelWithAnimator__E4__83(_QWORD *a1, _QWORD *a2)
{
  const void *v4;
  CFTypeRef result;
  uint64_t v6;

  v4 = (const void *)a2[4];
  a1[4] = v4;
  if (v4)
    CFRetain(v4);
  result = (CFTypeRef)a2[5];
  a1[5] = result;
  if (result)
    result = CFRetain(result);
  v6 = a2[6];
  if (v6)
    result = CFRetain(*(CFTypeRef *)(v6 + 8));
  a1[6] = v6;
  return result;
}

void sub_197855180(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c97_ZTSKZ83__WKContentView_WKInteraction__dragInteraction_item_willAnimateCancelWithAnimator__E4__83(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;

  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  v3 = (const void *)a1[5];
  a1[5] = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[4];
  a1[4] = 0;
  if (v4)
    CFRelease(v4);
}

void sub_1978552BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock)
{
  const void *v14;

  _Block_release(aBlock);
  _Block_release(v14);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c92_ZTSKZ78__WKContentView_WKInteraction__dragInteraction_prepareDragSession_completion__E4__84(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 32));
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c92_ZTSKZ78__WKContentView_WKInteraction__dragInteraction_prepareDragSession_completion__E4__84(uint64_t a1)
{
  _Block_release(*(const void **)(a1 + 32));
}

void sub_1978553CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock)
{
  const void *v14;

  _Block_release(aBlock);
  _Block_release(v14);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c113_ZTSKZ99__WKContentView_WKInteraction__dragInteraction_itemsForAddingToSession_forTouchAtPoint_completion__E4__85(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 32));
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c113_ZTSKZ99__WKContentView_WKInteraction__dragInteraction_itemsForAddingToSession_forTouchAtPoint_completion__E4__85(uint64_t a1)
{
  _Block_release(*(const void **)(a1 + 32));
}

void sub_197855730(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20)
{
  WTF::StringImpl *v21;

  v21 = a20;
  a20 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, a2);
    else
      *(_DWORD *)v21 -= 2;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a15, a2);
  _Unwind_Resume(a1);
}

void sub_197855A58(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20)
{
  WTF::StringImpl *v21;

  v21 = a20;
  a20 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, a2);
    else
      *(_DWORD *)v21 -= 2;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a15, a2);
  _Unwind_Resume(a1);
}

void sub_197855FE4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF::StringImpl *a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,WTF::StringImpl *a35)
{
  WTF::StringImpl *v36;

  v36 = a35;
  a35 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, a2);
    else
      *(_DWORD *)v36 -= 2;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a30, a2);
  _Unwind_Resume(a1);
}

void sub_1978560CC()
{
  JUMPOUT(0x1978560C4);
}

void *extractItemProvidersFromDragItems(void *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v10;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(a1);
        v7 = objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * v6), "itemProvider");
        if (v7)
          objc_msgSend(v2, "addObject:", v7);
        ++v6;
      }
      while (v4 != v6);
      v4 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v4);
  }
  return v2;
}

void sub_197856478(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, a2);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c74_ZTSKZ60__WKContentView_WKInteraction__dropInteraction_performDrop__E4__86(uint64_t a1, uint64_t a2)
{
  const void *v4;
  __int128 v5;
  uint64_t result;
  __int128 v7;
  _DWORD *v8;

  v4 = *(const void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    CFRetain(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 50) = *(_OWORD *)(a2 + 50);
  *(_OWORD *)(a1 + 40) = v5;
  result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 72, a2 + 72);
  v7 = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v7;
  v8 = *(_DWORD **)(a2 + 112);
  if (v8)
    *v8 += 2;
  *(_QWORD *)(a1 + 112) = v8;
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  return result;
}

void sub_197856564(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c74_ZTSKZ60__WKContentView_WKInteraction__dropInteraction_performDrop__E4__86(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  const void *v4;

  v3 = *(WTF::StringImpl **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 72, a2);
  v4 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v4)
    CFRelease(v4);
}

void sub_19785667C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf)
{
  const void *v14;

  if (cf)
    CFRelease(cf);
  CFRelease(v14);
  _Unwind_Resume(a1);
}

void sub_197856708(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e8_32c95_ZTSKZ81__WKContentView_WKInteraction__dropInteraction_item_willAnimateDropWithAnimator__E4__87(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_32c95_ZTSKZ81__WKContentView_WKInteraction__dropInteraction_item_willAnimateDropWithAnimator__E4__87(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    CFRelease(v2);
}

void sub_1978567E8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1978569A4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_197856DD8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void sub_197856FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void createFallbackTargetedPreview(UIView *a1, UIView *a2, const WebCore::FloatRect *a3, UIColor *a4, uint64_t a5)
{
  id v10;
  const void *v11;
  UIView *v12;
  void *v13;
  double x;
  double y;
  double width;
  double height;
  double MidX;
  const void *v19;
  CGRect v20;
  CGRect v21;
  CGRect v22;

  if (-[WebCore::FloatRect window](a3, "window")
    && *(float *)&a4[1].super.isa > 0.0
    && *((float *)&a4[1].super.isa + 1) > 0.0)
  {
    v10 = objc_alloc_init(MEMORY[0x1E0CEA8B8]);
    v11 = v10;
    if (a5)
      objc_msgSend(v10, "setBackgroundColor:", a5);
    WebCore::FloatRect::operator CGRect();
    v12 = -[UIView resizableSnapshotViewFromRect:afterScreenUpdates:withCapInsets:](a2, "resizableSnapshotViewFromRect:afterScreenUpdates:withCapInsets:", 0);
    v13 = v12;
    if (v12)
      CFRetain(v12);
    else
      v13 = (void *)objc_opt_new();
    WebCore::FloatRect::operator CGRect();
    -[UIView convertRect:toView:](a2, "convertRect:toView:", a3);
    x = v20.origin.x;
    y = v20.origin.y;
    width = v20.size.width;
    height = v20.size.height;
    if (CGRectIsEmpty(v20))
    {
      a1->super.super.isa = 0;
    }
    else
    {
      objc_msgSend(v13, "setFrame:", x, y, width, height);
      v21.origin.x = x;
      v21.origin.y = y;
      v21.size.width = width;
      v21.size.height = height;
      MidX = CGRectGetMidX(v21);
      v22.origin.x = x;
      v22.origin.y = y;
      v22.size.width = width;
      v22.size.height = height;
      v19 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA8C0]), "initWithContainer:center:", a3, MidX, CGRectGetMidY(v22));
      a1->super.super.isa = (Class)objc_msgSend(objc_alloc(MEMORY[0x1E0CEAA98]), "initWithView:parameters:target:", v13, v11, v19);
      if (v19)
        CFRelease(v19);
    }
    if (v13)
      CFRelease(v13);
    if (v11)
      CFRelease(v11);
  }
  else
  {
    a1->super.super.isa = 0;
  }
}

void sub_1978571CC(_Unwind_Exception *a1)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_197857768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, CFTypeRef cf, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,WTF *a27,int a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  const void *v33;

  if (v33)
    CFRelease(v33);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void createTargetedPreview(_QWORD *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  float v18;
  float v19;
  float v20;
  float v21;
  void *v22;
  uint64_t v23;
  float v24;
  CGPoint *v25;
  uint64_t v26;
  float v27;
  void *v28;
  uint64_t v29;
  id v30;
  void *v31;
  double MidX;
  const void *v33;
  void *v34;
  CGRect v35;
  _BYTE v36[8];
  float v37;
  float v38;
  CGRect v39;
  CGRect v40;

  if (*(float *)(a5 + 8) <= 0.0)
    goto LABEL_14;
  if (!a2)
    goto LABEL_14;
  if (*(float *)(a5 + 12) <= 0.0)
    goto LABEL_14;
  if (!objc_msgSend(a4, "window"))
    goto LABEL_14;
  WebCore::FloatRect::operator CGRect();
  objc_msgSend(a3, "convertRect:toView:", a4);
  v35.origin.x = v14;
  v35.origin.y = v15;
  v35.size.width = v16;
  v35.size.height = v17;
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v36, &v35);
  v18 = v37;
  if (v37 <= 0.0)
    goto LABEL_14;
  v19 = v38;
  if (v38 > 0.0)
  {
    v21 = *(float *)(a5 + 8);
    v20 = *(float *)(a5 + 12);
    v22 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a6 + 12));
    v23 = *(unsigned int *)(a6 + 12);
    if ((_DWORD)v23)
    {
      v24 = v18 / v21;
      v25 = *(CGPoint **)a6;
      v26 = 16 * v23;
      v27 = v19 / v20;
      do
      {
        v35.origin = *v25;
        WebCore::FloatRect::scale((WebCore::FloatRect *)&v35, v24, v27);
        v28 = (void *)MEMORY[0x1E0CB3B18];
        WebCore::FloatRect::operator CGRect();
        v29 = objc_msgSend(v28, "valueWithCGRect:");
        if (v29)
          objc_msgSend(v22, "addObject:", v29);
        ++v25;
        v26 -= 16;
      }
      while (v26);
    }
    if (objc_msgSend(v22, "count"))
      v30 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA8B8]), "initWithTextLineRects:", v22);
    else
      v30 = objc_alloc_init(MEMORY[0x1E0CEA8B8]);
    v31 = v30;
    if (!a7)
      a7 = objc_msgSend(MEMORY[0x1E0CEA478], "clearColor");
    objc_msgSend(v31, "setBackgroundColor:", a7);
    WebCore::FloatRect::operator CGRect();
    MidX = CGRectGetMidX(v39);
    WebCore::FloatRect::operator CGRect();
    v33 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA8C0]), "initWithContainer:center:", a4, MidX, CGRectGetMidY(v40));
    v34 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA658]), "initWithImage:", a2);
    WebCore::FloatRect::operator CGRect();
    objc_msgSend(v34, "setFrame:");
    *a1 = objc_msgSend(objc_alloc(MEMORY[0x1E0CEAA98]), "initWithView:parameters:target:", v34, v31, v33);
    if (v34)
      CFRelease(v34);
    if (v33)
      CFRelease(v33);
    if (v31)
      CFRelease(v31);
    if (v22)
      CFRelease(v22);
  }
  else
  {
LABEL_14:
    *a1 = 0;
  }
}

void sub_197857C98(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_197857D88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

WebCore::TextIndicatorData *__copy_helper_block_e8_32c33_ZTSN7WebCore17TextIndicatorDataE(uint64_t a1, uint64_t a2)
{
  return WebCore::TextIndicatorData::TextIndicatorData((WebCore::TextIndicatorData *)(a1 + 32), (const TextIndicatorData *)(a2 + 32));
}

WTF *__destroy_helper_block_e8_32c33_ZTSN7WebCore17TextIndicatorDataE(uint64_t a1, void *a2)
{
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  WTF *result;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)(a1 + 128);
  if ((v3 & 0x8000000000000) != 0)
  {
    v8 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  v4 = *(_DWORD **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *(_DWORD **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = *(_DWORD **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  result = *(WTF **)(a1 + 80);
  if (result)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void sub_197858264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_1978583FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, CFTypeRef cf, void *aBlock)
{
  const void *v19;
  const void *v20;
  const void *v21;

  if (v19)
    CFRelease(v19);
  _Block_release(v21);
  if (v20)
    CFRelease(v20);
  if (v19)
    CFRelease(v19);
  _Unwind_Resume(a1);
}

void sub_19785848C()
{
  uint64_t v0;

  if (!v0)
    JUMPOUT(0x197858478);
  JUMPOUT(0x197858470);
}

void sub_197858524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock)
{
  const void *v14;

  _Block_release(aBlock);
  _Block_release(v14);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c105_ZTSKZ91__WKContentView_WKInteraction__selectPositionAtPoint_withContextRequest_completionHandler__E4__91(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *result;

  v4 = *(const void **)(a2 + 32);
  a1[4] = v4;
  if (v4)
    CFRetain(v4);
  v5 = *(const void **)(a2 + 40);
  a1[5] = v5;
  if (v5)
    CFRetain(v5);
  result = _Block_copy(*(const void **)(a2 + 48));
  a1[6] = result;
  return result;
}

void sub_197858594(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c105_ZTSKZ91__WKContentView_WKInteraction__selectPositionAtPoint_withContextRequest_completionHandler__E4__91(uint64_t a1)
{
  const void *v2;
  const void *v3;

  _Block_release(*(const void **)(a1 + 48));
  v2 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    CFRelease(v3);
}

void sub_197858860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  id *v11;
  const void *v12;

  _Block_release(v12);
  objc_destroyWeak(v11);
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(a1);
}

void sub_197858A5C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_197858BF0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_197859084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  id *v10;

  objc_destroyWeak(v10);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_197859148(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

__n128 __copy_helper_block_e8_32c79_ZTSKZ65__WKContentView_WKInteraction___updateLastPointerRegionIfNeeded__E4__95(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __n128 result;

  *(_QWORD *)(a1 + 32) = 0;
  v3 = a1 + 32;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(v3 + 8) = result;
  return result;
}

void __destroy_helper_block_e8_32c79_ZTSKZ65__WKContentView_WKInteraction___updateLastPointerRegionIfNeeded__E4__95(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 32));
}

void sub_197859AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, CFTypeRef cf, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,CFTypeRef a25)
{
  uint64_t v25;
  const void *v26;

  if (a20)
    CFRelease(*(CFTypeRef *)(a20 + 8));
  CFRelease(*(CFTypeRef *)(v25 + 8));
  if (v26)
    CFRelease(v26);
  CFRelease(*(CFTypeRef *)(v25 + 8));
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c38_ZTSN3WTF9RetainPtrI14NSItemProviderEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_32c38_ZTSN3WTF9RetainPtrI14NSItemProviderEE(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    CFRelease(v2);
}

void sub_197859D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  _Block_release(aBlock);
  _Unwind_Resume(a1);
}

void sub_197859E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  const void *v11;
  void *v13;

  _Block_release(v11);
  WTF::Vector<WTF::BlockPtr<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, v13);
  _Unwind_Resume(a1);
}

void sub_19785A07C(_Unwind_Exception *a1)
{
  _DWORD *v1;

  WTF::RefCounted<WebCore::TextIndicator>::deref(v1);
  _Unwind_Resume(a1);
}

void sub_19785A1B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  id *v9;

  objc_destroyWeak(v9);
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void sub_19785A214(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_32c58_ZTSKZ44__WKContentView_WKInteraction__startFadeOut_E4__96(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c58_ZTSKZ44__WKContentView_WKInteraction__startFadeOut_E4__96(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 32));
}

void sub_19785A6FC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_19785A840(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13)
{
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_19785AC38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  const void *v12;
  WTF::StringImpl *v14;

  _Block_release(v12);
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, v14);
    else
      *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(a1);
}

_QWORD *WTF::valueOrDefault<std::optional<WebKit::ImageAnalysisContextMenuActionData> &>(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  const void *v4;

  v2 = result;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_WORD *)result = *(_WORD *)a2;
    v4 = *(const void **)(a2 + 8);
    result[1] = v4;
    if (v4)
      CFRetain(v4);
    result = *(_QWORD **)(a2 + 16);
    v2[2] = result;
    if (result)
      return CFRetain(result);
  }
  else
  {
    *(_WORD *)result = 0;
    result[1] = 0;
    result[2] = 0;
  }
  return result;
}

void sub_19785AD3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v2;

  *(_QWORD *)(v1 + 8) = 0;
  if (v2)
    CFRelease(v2);
  _Unwind_Resume(exception_object);
}

void sub_19785B2A8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  const void *v10;
  const void *v11;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (v11)
    CFRelease(v11);
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void sub_19785B394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_19785B5A4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_19785B68C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  _QWORD *v10;
  const void *v11;

  *v10 = 0;
  if (v11)
    CFRelease(v11);
  _Unwind_Resume(exception_object);
}

void sub_19785BB90(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, CFTypeRef cf, CFTypeRef a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, CFTypeRef a17)
{
  uint64_t v17;
  uint64_t v19;

  if (cf)
    CFRelease(cf);
  v19 = *(_QWORD *)(v17 - 56);
  *(_QWORD *)(v17 - 56) = 0;
  if (v19)
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v19, a2);
  _Unwind_Resume(exception_object);
}

void sub_19785BF10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  id *v19;
  id *v20;

  if (a19)
    WTF::RefCounted<WebKit::ImageAnalysisGestureDeferralToken>::deref(a19);
  objc_destroyWeak(v20);
  if (a12)
    WTF::RefCounted<WebKit::ImageAnalysisGestureDeferralToken>::deref(a12);
  objc_destroyWeak(v19);
  _Unwind_Resume(a1);
}

void sub_19785C36C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef a9, CFTypeRef a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,CFTypeRef cf,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,CFTypeRef a44,uint64_t a45)
{
  const void *v45;
  id *v46;
  id *v47;

  objc_destroyWeak(v46);
  if (a25)
    WTF::RefCounted<WebKit::ImageAnalysisGestureDeferralToken>::deref(a25);
  if (cf)
    CFRelease(cf);
  objc_destroyWeak(v47);
  if (a9)
    CFRelease(a9);
  if (a10)
    CFRelease(a10);
  CFRelease(v45);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c75_ZTSKZ61__WKContentView_WKInteraction__imageAnalysisGestureDidBegin__E4__99(uint64_t a1, uint64_t a2)
{
  void *v4;
  id *v5;
  _DWORD *v6;

  v4 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  v5 = (id *)(a1 + 40);
  *(v5 - 1) = v4;
  objc_copyWeak(v5, (id *)(a2 + 40));
  v6 = *(_DWORD **)(a2 + 48);
  if (v6)
    ++*v6;
  *(_QWORD *)(a1 + 48) = v6;
}

void __destroy_helper_block_e8_32c75_ZTSKZ61__WKContentView_WKInteraction__imageAnalysisGestureDidBegin__E4__99(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    WTF::RefCounted<WebKit::ImageAnalysisGestureDeferralToken>::deref(v2);
  objc_destroyWeak((id *)(a1 + 40));
}

void sub_19785C8D0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id location, WTF *a12, WTF *a13, uint64_t a14, WTF *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,unsigned int *a25,WTF *a26)
{
  WTF *v26;
  unsigned int *v27;
  id *v28;
  uint64_t v29;
  WTF *v31;
  unsigned int *v32;
  void *v33;
  WTF *v34;
  unsigned int *v35;
  const void *v36;
  void *v37;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  v31 = a13;
  a13 = 0;
  if (v31)
    WTF::ThreadSafeRefCounted<WTF::Box<WebKit::ImageAnalysisContextMenuActionData>::Data,(WTF::DestructionThread)0>::deref(v31, a2);
  v32 = (unsigned int *)a12;
  a12 = 0;
  if (v32)
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v32);
  objc_destroyWeak(&location);
  v34 = a26;
  a26 = 0;
  if (v34)
    WTF::ThreadSafeRefCounted<WTF::Box<WebKit::ImageAnalysisContextMenuActionData>::Data,(WTF::DestructionThread)0>::deref(v34, v33);
  v35 = a25;
  a25 = 0;
  if (v35)
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v35);
  objc_destroyWeak(v28);
  v36 = *(const void **)(v29 - 112);
  *(_QWORD *)(v29 - 112) = 0;
  if (v36)
    CFRelease(v36);
  WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v27);
  objc_destroyWeak((id *)(v29 - 104));
  WTF::ThreadSafeRefCounted<WTF::Box<WebKit::ImageAnalysisContextMenuActionData>::Data,(WTF::DestructionThread)0>::deref(v26, v37);
  _Unwind_Resume(a1);
}

void sub_19785CBD8(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

__n128 __copy_helper_block_e8_32c125_ZTSKZ109__WKContentView_WKInteraction___completeImageAnalysisRequestForContextMenu_requestIdentifier_hasTextResults__E5__101(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  __n128 result;

  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  v5 = a1 + 40;
  *(_QWORD *)(a1 + 32) = v4;
  objc_copyWeak((id *)(a1 + 40), (id *)(a2 + 40));
  *(_QWORD *)(v5 + 8) = *(_QWORD *)(a2 + 48);
  v6 = *(unsigned int **)(a2 + 56);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  *(_QWORD *)(a1 + 56) = v6;
  v8 = *(unsigned int **)(a2 + 64);
  if (v8)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  *(_QWORD *)(a1 + 64) = v8;
  result = *(__n128 *)(a2 + 72);
  *(__n128 *)(a1 + 72) = result;
  return result;
}

void __destroy_helper_block_e8_32c125_ZTSKZ109__WKContentView_WKInteraction___completeImageAnalysisRequestForContextMenu_requestIdentifier_hasTextResults__E5__101(uint64_t a1, void *a2)
{
  WTF *v3;
  unsigned int *v4;

  v3 = *(WTF **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WTF::Box<WebKit::ImageAnalysisContextMenuActionData>::Data,(WTF::DestructionThread)0>::deref(v3, a2);
  v4 = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v4);
  objc_destroyWeak((id *)(a1 + 40));
}

void sub_19785CD70(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_19785CF30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef a14, CFTypeRef cf, WTF::StringImpl *a16)
{
  const void *v16;
  const void *v17;
  uint64_t v18;
  const void *v20;
  const void *v21;

  if (v16)
    CFRelease(v16);
  CFRelease(v17);
  if (v16)
    CFRelease(v16);
  v20 = *(const void **)(v18 - 40);
  *(_QWORD *)(v18 - 40) = 0;
  if (v20)
    CFRelease(v20);
  v21 = *(const void **)(v18 - 48);
  *(_QWORD *)(v18 - 48) = 0;
  if (v21)
    CFRelease(v21);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c95_ZTSKZ80__WKContentView_WKInteraction__actionSheetAssistant_copySubject_sourceMIMEType__E5__103(uint64_t a1, uint64_t a2)
{
  const void *v4;
  CFTypeRef result;

  v4 = *(const void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    CFRetain(v4);
  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void sub_19785D048(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c95_ZTSKZ80__WKContentView_WKInteraction__actionSheetAssistant_copySubject_sourceMIMEType__E5__103(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    CFRelease(v3);
}

void sub_19785D320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location, CFTypeRef a11, CFTypeRef cf, CFTypeRef a13, WTF *a14, id a15, CFTypeRef a16)
{
  void *v17;
  CFTypeRef v18;
  CFTypeRef v19;
  WTF *v20;

  objc_destroyWeak(&location);
  v18 = cf;
  cf = 0;
  if (v18)
    CFRelease(v18);
  v19 = a13;
  a13 = 0;
  if (v19)
    CFRelease(v19);
  v20 = a14;
  a14 = 0;
  if (v20)
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v20, v17);
  _Unwind_Resume(a1);
}

void sub_19785D614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, CFTypeRef cf, WTF *a20)
{
  const void *v20;
  id *v21;
  void *v23;
  CFTypeRef v24;
  WTF *v25;

  objc_destroyWeak(v21);
  objc_destroyWeak((id *)&a9);
  if (v20)
    CFRelease(v20);
  v24 = cf;
  cf = 0;
  if (v24)
    CFRelease(v24);
  v25 = a20;
  a20 = 0;
  if (v25)
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v25, v23);
  _Unwind_Resume(a1);
}

void sub_19785D70C(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

__n128 __copy_helper_block_e8_32c102_ZTSKZ87__WKContentView_WKInteraction__beginTextRecognitionForVideoInElementFullscreen_bounds__E5__104(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __n128 result;

  *(_QWORD *)(a1 + 32) = 0;
  v3 = a1 + 32;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(v3 + 8) = result;
  return result;
}

void __destroy_helper_block_e8_32c102_ZTSKZ87__WKContentView_WKInteraction__beginTextRecognitionForVideoInElementFullscreen_bounds__E5__104(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 32));
}

void sub_19785DA18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19785DAA0(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c79_ZTSKZ64__WKContentView_WKInteraction__installImageAnalysisInteraction__E5__105(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c79_ZTSKZ64__WKContentView_WKInteraction__installImageAnalysisInteraction__E5__105(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 32));
}

void sub_19785DCFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  id *v9;

  objc_destroyWeak(v9);
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c79_ZTSKZ64__WKContentView_WKInteraction__willPresentEditMenuWithAnimator__E5__106(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c79_ZTSKZ64__WKContentView_WKInteraction__willPresentEditMenuWithAnimator__E5__106(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 32));
}

void sub_19785DE48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  id *v9;

  objc_destroyWeak(v9);
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c79_ZTSKZ64__WKContentView_WKInteraction__willDismissEditMenuWithAnimator__E5__107(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c79_ZTSKZ64__WKContentView_WKInteraction__willDismissEditMenuWithAnimator__E5__107(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 32));
}

void sub_19785E0E4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_19785E2A8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, CFTypeRef cf)
{
  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, a2);
    else
      *(_DWORD *)a15 -= 2;
  }
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_19785E480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf, void *aBlock)
{
  const void *v14;
  const void *v15;
  const void *v16;

  _Block_release(v16);
  CFRelease(v15);
  if (v14)
    CFRelease(v14);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c84_ZTSKZ69__WKContentView_WKInteraction__handleKeyEntry_withCompletionHandler__E5__109(uint64_t a1, uint64_t a2)
{
  const void *v4;
  void *result;

  v4 = *(const void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    CFRetain(v4);
  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_19785E554(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c84_ZTSKZ69__WKContentView_WKInteraction__handleKeyEntry_withCompletionHandler__E5__109(uint64_t a1)
{
  const void *v2;

  _Block_release(*(const void **)(a1 + 40));
  v2 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    CFRelease(v2);
}

void sub_19785E65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_19785E6A4()
{
  uint64_t v0;

  if (!v0)
    JUMPOUT(0x19785E69CLL);
  JUMPOUT(0x19785E694);
}

void sub_19785E748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_19785E790()
{
  uint64_t v0;

  if (!v0)
    JUMPOUT(0x19785E788);
  JUMPOUT(0x19785E780);
}

void sub_19785E8B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;

  _Block_release(v10);
  _Unwind_Resume(a1);
}

void sub_19785E998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock)
{
  const void *v14;

  _Block_release(aBlock);
  _Block_release(v14);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c108_ZTSKZ93__WKContentView_WKInteraction__selectTextForContextMenuWithLocationInView_completionHandler__E5__113(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 32));
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c108_ZTSKZ93__WKContentView_WKInteraction__selectTextForContextMenuWithLocationInView_completionHandler__E5__113(uint64_t a1)
{
  _Block_release(*(const void **)(a1 + 32));
}

void sub_19785F0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_19785F21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_19785F34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_19785F7F4(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_19785FA24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, CFTypeRef cf)
{
  const void *v16;

  CFRelease(v16);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c77_ZTSKZ62__WKContentView_WKTesting___simulateElementAction_atLocation__E5__117(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  result = *(CFTypeRef *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_32c77_ZTSKZ62__WKContentView_WKTesting___simulateElementAction_atLocation__E5__117(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    CFRelease(v2);
}

void sub_19785FC38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf)
{
  const void *v14;

  CFRelease(v14);
  CFRelease(v14);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c78_ZTSKZ63__WKContentView_WKTesting___simulateLongPressActionAtLocation__E5__118(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_32c78_ZTSKZ63__WKContentView_WKTesting___simulateLongPressActionAtLocation__E5__118(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    CFRelease(v2);
}

void sub_197860454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c72_ZTSKZ57__WKContentView_WKTesting___contentsOfUserInterfaceItem__E5__119(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

void sub_197860FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, CFTypeRef a17, CFTypeRef a18, CFTypeRef cf, uint64_t a20,uint64_t a21,CFTypeRef a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,CFTypeRef a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,CFTypeRef a38)
{
  const void *v38;
  const void *v39;
  const void *v40;

  if (a18)
    CFRelease(a18);
  if (cf)
    CFRelease(cf);
  if (a29)
    CFRelease(a29);
  if (v38)
    CFRelease(v38);
  if (a38)
  {
    CFRelease(a38);
    if (!v39)
    {
LABEL_12:
      if (v40)
        CFRelease(v40);
      _Unwind_Resume(exception_object);
    }
  }
  else if (!v39)
  {
    goto LABEL_12;
  }
  CFRelease(v39);
  goto LABEL_12;
}

void *menuElementsFromDefaultActions(id *a1, _QWORD *a2)
{
  id v3;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  if (!v3 || !objc_msgSend(v3, "count"))
    return 0;
  v5 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(*a1, "count"));
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v6 = *a1;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v13 != v9)
          objc_enumerationMutation(v6);
        objc_msgSend(v5, "addObject:", objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * i), "uiActionForElementInfo:", *a2));
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v8);
  }
  return v5;
}

uint64_t menuFromLegacyPreviewOrDefaultActions(void *a1, id *a2, const void **a3, uint64_t a4)
{
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  id *v19;
  id obj;
  const void *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _QWORD v27[6];
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!a1)
    goto LABEL_12;
  v7 = (void *)objc_msgSend(a1, "previewActionItems");
  if (!v7)
    goto LABEL_12;
  v8 = v7;
  if (!objc_msgSend(v7, "count"))
    goto LABEL_12;
  v19 = a2;
  v9 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v8, "count"));
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  obj = v8;
  v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
  if (v10)
  {
    v11 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v24 != v11)
          objc_enumerationMutation(obj);
        v13 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * i);
        v14 = (void *)MEMORY[0x1E0CEA2A8];
        v15 = objc_msgSend(v13, "title");
        v16 = objc_msgSend(v13, "image");
        v27[0] = MEMORY[0x1E0C809B0];
        v27[1] = 3221225472;
        v27[2] = ___ZL30uiActionForLegacyPreviewActionP15UIPreviewActionP16UIViewController_block_invoke;
        v27[3] = &unk_1E3507338;
        v27[4] = v13;
        v27[5] = a1;
        objc_msgSend(v9, "addObject:", objc_msgSend(v14, "actionWithTitle:image:identifier:handler:", v15, v16, 0, v27));
      }
      v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
    }
    while (v10);
  }
  a2 = v19;
  if (!v9)
  {
LABEL_12:
    v17 = *a3;
    v22 = v17;
    if (v17)
      CFRetain(v17);
    v9 = menuElementsFromDefaultActions(a2, &v22);
    if (v17)
      CFRelease(v17);
  }
  return objc_msgSend(MEMORY[0x1E0CEA740], "menuWithTitle:children:", a4, v9);
}

void sub_1978615B4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1978616D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf)
{
  const void *v14;

  if (cf)
    CFRelease(cf);
  CFRelease(v14);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c108_ZTSKZ93__WKContentView_WKInteractionPreview__contextMenuInteraction_configurationForMenuAtLocation__E5__123(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_32c108_ZTSKZ93__WKContentView_WKInteractionPreview__contextMenuInteraction_configurationForMenuAtLocation__E5__123(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    CFRelease(v2);
}

void sub_1978618D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, void *aBlock, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, CFTypeRef a17, void *a18)
{
  id *v18;
  CFTypeRef v20;

  objc_destroyWeak(v18);
  _Block_release(aBlock);
  v20 = cf;
  cf = 0;
  if (v20)
    CFRelease(v20);
  objc_destroyWeak((id *)&a9);
  _Unwind_Resume(a1);
}

void sub_1978619E0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1978621CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF::StringImpl *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *aBlock,WTF::StringImpl *a32)
{
  const void *v32;
  uint64_t v33;
  WTF::StringImpl *v35;

  CFRelease(*(CFTypeRef *)(v33 + 8));
  _Block_release(v32);
  if (a26)
  {
    if (*(_DWORD *)a26 == 2)
      WTF::StringImpl::destroy(a26, v35);
    else
      *(_DWORD *)a26 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t needsDeprecatedPreviewAPI(uint64_t a1)
{
  if (a1)
  {
    if ((objc_opt_respondsToSelector() & 1) != 0
      || (objc_opt_respondsToSelector() & 1) != 0
      || (objc_opt_respondsToSelector() & 1) != 0
      || (objc_opt_respondsToSelector() & 1) != 0
      || (objc_opt_respondsToSelector() & 1) != 0
      || (objc_opt_respondsToSelector() & 1) != 0)
    {
      LOBYTE(a1) = 0;
    }
    else if ((objc_opt_respondsToSelector() & 1) != 0
           || (objc_opt_respondsToSelector() & 1) != 0
           || (objc_opt_respondsToSelector() & 1) != 0
           || (objc_opt_respondsToSelector() & 1) != 0
           || (objc_opt_respondsToSelector() & 1) != 0)
    {
      LOBYTE(a1) = 1;
    }
    else
    {
      LOBYTE(a1) = objc_opt_respondsToSelector();
    }
  }
  return a1 & 1;
}

void sub_197862554(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c85_ZTSKZ70__WKContentView_WKInteractionPreview__continueContextMenuInteraction__E5__125(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c85_ZTSKZ70__WKContentView_WKInteractionPreview__continueContextMenuInteraction__E5__125(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 32));
}

void sub_1978625DC(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c85_ZTSKZ70__WKContentView_WKInteractionPreview__continueContextMenuInteraction__E5__126(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c85_ZTSKZ70__WKContentView_WKInteractionPreview__continueContextMenuInteraction__E5__126(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 32));
}

void sub_1978627A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  NSException *v22;

  if (a2 != 1)
    _Unwind_Resume(exception_object);
  v22 = (NSException *)objc_begin_catch(exception_object);
  ReportBlockedObjCException(v22);
  objc_end_catch();
}

void sub_197862A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  id *v9;

  objc_destroyWeak(v9);
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void sub_197862AAC(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c119_ZTSKZ103__WKContentView_WKInteractionPreview__contextMenuInteraction_willDisplayMenuForConfiguration_animator__E5__127(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c119_ZTSKZ103__WKContentView_WKInteractionPreview__contextMenuInteraction_willDisplayMenuForConfiguration_animator__E5__127(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 32));
}

void sub_197862EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, CFTypeRef cf, CFTypeRef a20)
{
  const void *v20;
  const void *v21;

  if (cf)
    CFRelease(cf);
  if (v20)
    CFRelease(v20);
  if (v21)
    CFRelease(v21);
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e8_32c40_ZTSN3WTF9RetainPtrI16UIViewControllerEE40c40_ZTSN3WTF9RetainPtrI16UIViewControllerEE(uint64_t a1, uint64_t a2)
{
  const void *v4;
  CFTypeRef result;

  v4 = *(const void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    CFRetain(v4);
  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void sub_197862FB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c40_ZTSN3WTF9RetainPtrI16UIViewControllerEE40c40_ZTSN3WTF9RetainPtrI16UIViewControllerEE(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    CFRelease(v3);
}

void sub_197863248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  const void *v9;

  CFRelease(v9);
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void sub_197863454(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_197863964(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;

  if (v1)
    CFRelease(v1);
  if (v2)
    CFRelease(v2);
  _Unwind_Resume(exception_object);
}

void sub_197864150(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef a13, uint64_t a14, CFTypeRef a15, CFTypeRef a16, CFTypeRef a17, CFTypeRef a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,WTF::StringImpl *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,CFTypeRef cf)
{
  const void *v39;

  if (v39)
    CFRelease(v39);
  if (a34)
  {
    if (*(_DWORD *)a34 == 2)
      WTF::StringImpl::destroy(a34, a2);
    else
      *(_DWORD *)a34 -= 2;
  }
  _Unwind_Resume(exception_object);
}

NSString *previewIdentifierForElementAction(_WKElementAction *a1)
{
  int64_t v1;
  NSString *result;
  NSString *const *v3;

  v1 = -[_WKElementAction type](a1, "type");
  result = 0;
  switch(v1)
  {
    case 1:
      v3 = &WKPreviewActionItemIdentifierOpen;
      goto LABEL_6;
    case 2:
      v3 = &WKPreviewActionItemIdentifierCopy;
      goto LABEL_6;
    case 4:
      v3 = &WKPreviewActionItemIdentifierAddToReadingList;
      goto LABEL_6;
    case 7:
      v3 = &WKPreviewActionItemIdentifierShare;
LABEL_6:
      result = *v3;
      break;
    default:
      return result;
  }
  return result;
}

CFTypeRef __copy_helper_block_e8_40c47_ZTSN3WTF9RetainPtrI23_WKActivatedElementInfoEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_40c47_ZTSN3WTF9RetainPtrI23_WKActivatedElementInfoEE(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    CFRelease(v2);
}

void sub_1978647E0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;

  if (!a10)
    goto LABEL_19;
  v11 = *(_QWORD *)(a10 + 8);
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v11))
  {
LABEL_7:
    v13 = *(_QWORD *)(v11 + 8);
    v14 = v13 - 1;
    *(_QWORD *)(v11 + 8) = v13 - 1;
    if (v13 == 1)
    {
      v18 = *(_QWORD *)(v11 + 16);
      v15 = *(_QWORD *)(v11 + 24);
      *(_QWORD *)(v11 + 24) = 0;
      v16 = v18 != 0;
    }
    else
    {
      v15 = 0;
      v16 = 1;
    }
    v17 = __ldxr((unsigned __int8 *)v11);
    if (v17 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v11))
      {
LABEL_14:
        if (!v14)
        {
          if (v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
          if (!v16)
            WTF::fastFree((WTF *)v11, a2);
        }
LABEL_19:
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
    goto LABEL_14;
  }
  MEMORY[0x19AEABB3C](v11);
  goto LABEL_7;
}

void sub_197864A2C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_197864B90(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_197864FD0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1978651AC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_197865320(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;

  *(_QWORD *)(v2 + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_197865420(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_197865514(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_197865600(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_19786578C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WTF::VectorMover<false,WebKit::KeyEventAndCompletionBlock>::move(const void **a1, const void **a2, _QWORD *a3)
{
  const void **v5;
  const void *v6;
  const void *v7;
  const void *v8;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *v5;
      *v5 = 0;
      *a3 = v6;
      v7 = v5[1];
      v5[1] = 0;
      a3[1] = v7;
      _Block_release(v5[1]);
      v8 = *v5;
      *v5 = 0;
      if (v8)
        CFRelease(v8);
      v5 += 2;
      a3 += 2;
    }
    while (v5 != a2);
  }
}

Class ___ZL36isBuiltInScrollViewGestureRecognizerP19UIGestureRecognizer_block_invoke()
{
  Class result;

  qword_1EE341A68 = (uint64_t)NSClassFromString(CFSTR("UIScrollViewPinchGestureRecognizer"));
  result = NSClassFromString(CFSTR("UIScrollViewKnobLongPressGestureRecognizer"));
  qword_1EE341A70 = (uint64_t)result;
  return result;
}

Class ___ZL39isBuiltInScrollViewPanGestureRecognizerP19UIGestureRecognizer_block_invoke()
{
  Class result;

  result = NSClassFromString(CFSTR("UIScrollViewPanGestureRecognizer"));
  qword_1EE341A80 = (uint64_t)result;
  return result;
}

uint64_t initNSForegroundColorAttributeName(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (byte_1EE341A56 == 1)
  {
    v0 = (void *)qword_1EE341AA8;
  }
  else
  {
    v0 = (void *)___ZL19UIFoundationLibraryv_block_invoke_0();
    qword_1EE341AA8 = (uint64_t)v0;
    byte_1EE341A56 = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSForegroundColorAttributeName");
  if (!v1)
  {
    __break(0xC471u);
    JUMPOUT(0x1978658ECLL);
  }
  result = *v1;
  qword_1EE341AA0 = result;
  _MergedGlobals_855 = NSForegroundColorAttributeNameFunction;
  return result;
}

uint64_t NSForegroundColorAttributeNameFunction(void)
{
  return qword_1EE341AA0;
}

uint64_t ___ZL19UIFoundationLibraryv_block_invoke_0()
{
  uint64_t result;

  result = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
  if (!result)
  {
    result = 32;
    __break(0xC471u);
  }
  return result;
}

uint64_t initNSFontAttributeName(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (byte_1EE341A56 == 1)
  {
    v0 = (void *)qword_1EE341AA8;
  }
  else
  {
    v0 = (void *)___ZL19UIFoundationLibraryv_block_invoke_0();
    qword_1EE341AA8 = (uint64_t)v0;
    byte_1EE341A56 = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSFontAttributeName");
  if (!v1)
  {
    __break(0xC471u);
    JUMPOUT(0x1978659CCLL);
  }
  result = *v1;
  qword_1EE341AB0 = result;
  off_1ECE70DD8 = NSFontAttributeNameFunction;
  return result;
}

uint64_t NSFontAttributeNameFunction(void)
{
  return qword_1EE341AB0;
}

uint64_t std::__optional_copy_base<WebKit::EditorState::PostLayoutData,false>::__optional_copy_base[abi:sn180100](uint64_t a1, __int128 *a2)
{
  __int128 v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _DWORD *v15;
  __int16 v16;
  __int16 v17;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 304) = 0;
  if (*((_BYTE *)a2 + 304))
  {
    v4 = *a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_OWORD *)a1 = v4;
    WebCore::Color::Color((WebCore::Color *)(a1 + 24), (const Color *)a2 + 3);
    *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
    v5 = (_DWORD *)*((_QWORD *)a2 + 5);
    if (v5)
      *v5 += 2;
    *(_QWORD *)(a1 + 40) = v5;
    v6 = (_DWORD *)*((_QWORD *)a2 + 6);
    if (v6)
      *v6 += 2;
    *(_QWORD *)(a1 + 48) = v6;
    v7 = *((_QWORD *)a2 + 7);
    *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 16);
    *(_QWORD *)(a1 + 56) = v7;
    WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 72, (uint64_t)a2 + 72);
    v8 = *((_DWORD *)a2 + 22);
    *(_BYTE *)(a1 + 92) = *((_BYTE *)a2 + 92);
    *(_DWORD *)(a1 + 88) = v8;
    WebCore::Color::Color((WebCore::Color *)(a1 + 96), (const Color *)a2 + 12);
    v9 = *(__int128 *)((char *)a2 + 136);
    v10 = *(__int128 *)((char *)a2 + 152);
    v11 = *(__int128 *)((char *)a2 + 168);
    v12 = *(__int128 *)((char *)a2 + 177);
    v13 = *(__int128 *)((char *)a2 + 104);
    v14 = *(__int128 *)((char *)a2 + 120);
    *(_BYTE *)(a1 + 208) = 0;
    *(_OWORD *)(a1 + 120) = v14;
    *(_OWORD *)(a1 + 104) = v13;
    *(_OWORD *)(a1 + 177) = v12;
    *(_OWORD *)(a1 + 168) = v11;
    *(_OWORD *)(a1 + 152) = v10;
    *(_OWORD *)(a1 + 136) = v9;
    *(_BYTE *)(a1 + 288) = 0;
    if (*((_BYTE *)a2 + 288))
    {
      v15 = (_DWORD *)*((_QWORD *)a2 + 26);
      if (v15)
        ++*v15;
      *(_QWORD *)(a1 + 208) = v15;
      WebCore::Color::Color((WebCore::Color *)(a1 + 216), (const Color *)a2 + 27);
      WebCore::Color::Color((WebCore::Color *)(a1 + 224), (const Color *)a2 + 28);
      WebCore::Color::Color((WebCore::Color *)(a1 + 232), (const Color *)a2 + 29);
      *(_OWORD *)(a1 + 240) = a2[15];
      *(_WORD *)(a1 + 256) = *((_WORD *)a2 + 128);
      WTF::Vector<WebCore::TextList,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 264, (uint64_t *)a2 + 33);
      v16 = *((_WORD *)a2 + 140);
      *(_BYTE *)(a1 + 282) = *((_BYTE *)a2 + 282);
      *(_WORD *)(a1 + 280) = v16;
      *(_BYTE *)(a1 + 288) = 1;
    }
    v17 = *((_WORD *)a2 + 148);
    *(_BYTE *)(a1 + 298) = *((_BYTE *)a2 + 298);
    *(_WORD *)(a1 + 296) = v17;
    *(_BYTE *)(a1 + 304) = 1;
  }
  return a1;
}

void sub_197865C58(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  _QWORD *v3;
  WTF **v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  _DWORD *v20;
  void *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  WTF *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;

  if ((*v9 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(*v9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  if ((*v8 & 0x8000000000000) != 0)
  {
    v14 = (unsigned int *)(*v8 & 0xFFFFFFFFFFFFLL);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, a2);
    }
  }
  if ((*v7 & 0x8000000000000) != 0)
  {
    v17 = (unsigned int *)(*v7 & 0xFFFFFFFFFFFFLL);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, a2);
    }
  }
  v20 = (_DWORD *)*v6;
  *v6 = 0;
  if (v20)
    WTF::RefCounted<WebCore::Font>::deref(v20);
  std::__optional_destruct_base<WebCore::FontAttributes,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, a2);
  if ((*v5 & 0x8000000000000) != 0)
  {
    v22 = (unsigned int *)(*v5 & 0xFFFFFFFFFFFFLL);
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, v22);
      WTF::fastFree((WTF *)v22, v21);
    }
  }
  v25 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v2 + 72) = 0;
    *(_DWORD *)(v2 + 80) = 0;
    WTF::fastFree(v25, v21);
  }
  v26 = *(WTF::StringImpl **)(v2 + 48);
  *(_QWORD *)(v2 + 48) = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v21);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = *(WTF::StringImpl **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v21);
    else
      *(_DWORD *)v27 -= 2;
  }
  if ((*v3 & 0x8000000000000) != 0)
  {
    v28 = (unsigned int *)(*v3 & 0xFFFFFFFFFFFFLL);
    do
    {
      v29 = __ldaxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
    {
      atomic_store(1u, v28);
      WTF::fastFree((WTF *)v28, v21);
    }
  }
  if (*(_BYTE *)(v2 + 304))
    WebKit::EditorState::PostLayoutData::~PostLayoutData((WebKit::EditorState::PostLayoutData *)v2, v21);
  _Unwind_Resume(a1);
}

void sub_197865DF0()
{
  JUMPOUT(0x197865DB0);
}

uint64_t std::__optional_copy_base<WebKit::EditorState::VisualData,false>::__optional_copy_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (*(_BYTE *)(a2 + 112))
  {
    std::construct_at[abi:sn180100]<WebKit::EditorState::VisualData,WebKit::EditorState::VisualData const&,WebKit::EditorState::VisualData*>((_OWORD *)a1, (uint64_t *)a2);
    *(_BYTE *)(a1 + 112) = 1;
  }
  return a1;
}

void sub_197865E38(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebKit::EditorState::VisualData,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

void std::__optional_destruct_base<WebKit::RemoveBackgroundData,false>::reset[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  const void *v4;

  if (*(_BYTE *)(a1 + 96))
  {
    v3 = *(WTF::StringImpl **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(const void **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = 0;
    if (v4)
      CFRelease(v4);
    *(_BYTE *)(a1 + 96) = 0;
  }
}

uint64_t operator<<(uint64_t a1, unsigned int a2)
{
  if (a2 <= 5)
    WTF::TextStream::operator<<();
  return a1;
}

uint64_t WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char32_t,void>>(WTF::StringBuilder *a1, unsigned int *a2)
{
  unsigned int v3;
  uint64_t v4;
  int v5;
  uint64_t result;
  unsigned int v8;
  __int16 v9;

  v3 = *a2;
  v4 = *((_QWORD *)a1 + 1);
  if (v4 || (v4 = *(_QWORD *)a1) != 0)
  {
    v5 = *(_DWORD *)(v4 + 16) & 4;
    if (v3 <= 0xFF && v5 != 0)
      goto LABEL_13;
  }
  else if (v3 <= 0xFF)
  {
LABEL_13:
    result = MEMORY[0x19AEAB398]();
    if (result)
      *(_BYTE *)result = *a2;
    return result;
  }
  result = WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
  if (result)
  {
    v8 = *a2;
    if (HIWORD(*a2))
    {
      v9 = v8 & 0x3FF | 0xDC00;
      v8 = (v8 >> 10) - 10304;
      *(_WORD *)(result + 2) = v9;
    }
    *(_WORD *)result = v8;
  }
  return result;
}

uint64_t initNSBackgroundColorAttributeName(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (byte_1EE341A56 == 1)
  {
    v0 = (void *)qword_1EE341AA8;
  }
  else
  {
    v0 = (void *)___ZL19UIFoundationLibraryv_block_invoke_0();
    qword_1EE341AA8 = (uint64_t)v0;
    byte_1EE341A56 = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSBackgroundColorAttributeName");
  if (!v1)
  {
    __break(0xC471u);
    JUMPOUT(0x197866004);
  }
  result = *v1;
  qword_1EE341AC0 = result;
  off_1ECE70DE8 = NSBackgroundColorAttributeNameFunction;
  return result;
}

uint64_t NSBackgroundColorAttributeNameFunction(void)
{
  return qword_1EE341AC0;
}

uint64_t ___ZL32shouldUseHighlightsForMarkedTextP18NSAttributedString_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char v12;

  v8 = objc_msgSend(a2, "objectForKey:", off_1ECE70DE0());
  v9 = v8 | objc_msgSend(a2, "objectForKey:", *MEMORY[0x1E0CEA178]);
  v10 = objc_msgSend(a2, "objectForKey:", off_1ECE70DE8());
  result = objc_msgSend(a2, "objectForKey:", _MergedGlobals_855());
  if (v9)
  {
    v12 = 0;
  }
  else
  {
    if (!(v10 | result))
      return result;
    v12 = 1;
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v12;
  *a5 = 1;
  return result;
}

void sub_197866260(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  if ((a13 & 0x8000000000000) != 0)
  {
    v14 = (unsigned int *)(a13 & 0xFFFFFFFFFFFFLL);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, a2);
    }
  }
  if ((a10 & 0x8000000000000) != 0)
  {
    v17 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c52_ZTSKZL17extractUnderlinesP18NSAttributedStringE3__1(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

unsigned int *std::__introsort<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *,false>(unsigned int *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v6;
  unsigned int *v7;
  unint64_t i;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  void *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t *v23;
  BOOL v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  void *v30;
  char v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  void *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t j;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  void *v51;
  unsigned int v52;
  unsigned int v53;
  int64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  void *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t k;
  void *v99;
  unsigned int v100;
  unsigned int v101;
  int64_t v103;
  uint64_t v104;
  char v105;
  _BYTE v106[7];
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  char v116;
  char v117;
  char v118;
  char v119;
  char v120;
  char v121;
  _BYTE v122[7];
  char v123;
  char v124;
  char v125;
  char v126;
  char v127;
  char v128;
  char v129;

  v6 = (uint64_t)result;
LABEL_2:
  v7 = (unsigned int *)(a2 - 4);
  i = v6;
  while (2)
  {
    v6 = i;
    v9 = (uint64_t)a2 - i;
    v10 = v9 >> 5;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v41 = *((_DWORD *)a2 - 8);
        if (v41 < *(_DWORD *)v6 || v41 <= *(_DWORD *)v6 && *((_DWORD *)a2 - 7) < *(_DWORD *)(v6 + 4))
          return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WebCore::CompositionUnderline *&,WebCore::CompositionUnderline *&>((uint64_t *)v6, a2 - 4);
        return result;
      case 3:
        return std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *>((unsigned int *)v6, (unsigned int *)(v6 + 32), (uint64_t)(a2 - 4));
      case 4:
        return std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *>((unsigned int *)v6, (unsigned int *)(v6 + 32), v6 + 64, (uint64_t)(a2 - 4));
      case 5:
        return std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *,0>((unsigned int *)v6, (unsigned int *)(v6 + 32), v6 + 64, v6 + 96, (uint64_t)(a2 - 4));
      default:
        if (v9 > 767)
        {
          if (!a3)
          {
            if ((uint64_t *)v6 != a2)
            {
              v103 = (unint64_t)(v10 - 2) >> 1;
              v54 = v103;
              do
              {
                v55 = v54;
                if (v103 >= v54)
                {
                  v56 = (2 * v54) | 1;
                  v57 = v6 + 32 * v56;
                  if (2 * v54 + 2 < v10)
                  {
                    v58 = *(_DWORD *)(v57 + 32);
                    if (*(_DWORD *)v57 < v58
                      || *(_DWORD *)v57 <= v58 && *(_DWORD *)(v6 + 32 * v56 + 4) < *(_DWORD *)(v57 + 36))
                    {
                      v57 += 32;
                      v56 = 2 * v54 + 2;
                    }
                  }
                  v59 = v6 + 32 * v54;
                  if (*(_DWORD *)v57 >= *(_DWORD *)v59
                    && (*(_DWORD *)v57 > *(_DWORD *)v59 || *(_DWORD *)(v57 + 4) >= *(_DWORD *)(v6 + 32 * v54 + 4)))
                  {
                    v119 = *(_BYTE *)(v59 + 8);
                    v112 = *(_QWORD *)v59;
                    WebCore::Color::Color();
                    v127 = *(_BYTE *)(v6 + 32 * v55 + 24);
                    while (1)
                    {
                      v60 = v57;
                      v61 = *(_QWORD *)v57;
                      *(_BYTE *)(v59 + 8) = *(_BYTE *)(v57 + 8);
                      *(_QWORD *)v59 = v61;
                      WebCore::Color::operator=();
                      *(_BYTE *)(v59 + 24) = *(_BYTE *)(v57 + 24);
                      if (v103 < v56)
                        break;
                      v62 = (2 * v56) | 1;
                      v57 = v6 + 32 * v62;
                      if (2 * v56 + 2 < v10)
                      {
                        v63 = *(_DWORD *)(v57 + 32);
                        if (*(_DWORD *)v57 < v63
                          || *(_DWORD *)v57 <= v63 && *(_DWORD *)(v6 + 32 * v62 + 4) < *(_DWORD *)(v57 + 36))
                        {
                          v57 += 32;
                          v62 = 2 * v56 + 2;
                        }
                      }
                      if (*(_DWORD *)v57 < v112)
                        break;
                      v59 = v60;
                      v56 = v62;
                      if (*(_DWORD *)v57 <= v112)
                      {
                        v59 = v60;
                        v56 = v62;
                        if (*(_DWORD *)(v57 + 4) < HIDWORD(v112))
                          break;
                      }
                    }
                    *(_BYTE *)(v60 + 8) = v119;
                    *(_QWORD *)v60 = v112;
                    WebCore::Color::operator=();
                    *(_BYTE *)(v60 + 24) = v127;
                    if ((*(_QWORD *)v122 & 0x8000000000000) != 0)
                    {
                      v65 = (unsigned int *)(*(_QWORD *)v122 & 0xFFFFFFFFFFFFLL);
                      do
                      {
                        v66 = __ldaxr(v65);
                        v67 = v66 - 1;
                      }
                      while (__stlxr(v67, v65));
                      if (!v67)
                      {
                        atomic_store(1u, v65);
                        WTF::fastFree((WTF *)v65, v64);
                      }
                    }
                  }
                }
                v54 = v55 - 1;
              }
              while (v55);
              v68 = (unint64_t)v9 >> 5;
              do
              {
                v69 = a2;
                v105 = *(_BYTE *)(v6 + 8);
                v104 = *(_QWORD *)v6;
                WebCore::Color::Color();
                v70 = 0;
                v107 = *(_BYTE *)(v6 + 24);
                v71 = v6;
                do
                {
                  v72 = v70 + 1;
                  v73 = v71 + 32 * (v70 + 1);
                  v74 = 2 * v70;
                  v70 = (2 * v70) | 1;
                  v75 = v74 + 2;
                  if (v75 < v68)
                  {
                    v76 = *(_DWORD *)(v73 + 32);
                    if (*(_DWORD *)v73 < v76
                      || *(_DWORD *)v73 <= v76 && *(_DWORD *)(v71 + 32 * v72 + 4) < *(_DWORD *)(v73 + 36))
                    {
                      v73 += 32;
                      v70 = v75;
                    }
                  }
                  v77 = *(_QWORD *)v73;
                  *(_BYTE *)(v71 + 8) = *(_BYTE *)(v73 + 8);
                  *(_QWORD *)v71 = v77;
                  WebCore::Color::operator=();
                  *(_BYTE *)(v71 + 24) = *(_BYTE *)(v73 + 24);
                  v71 = v73;
                }
                while (v70 <= (uint64_t)((unint64_t)(v68 - 2) >> 1));
                a2 -= 4;
                if ((uint64_t *)v73 == v69 - 4)
                {
                  *(_BYTE *)(v73 + 8) = v105;
                  *(_QWORD *)v73 = v104;
                  result = (unsigned int *)WebCore::Color::operator=();
                  *(_BYTE *)(v73 + 24) = v107;
                }
                else
                {
                  v78 = *a2;
                  *(_BYTE *)(v73 + 8) = *((_BYTE *)v69 - 24);
                  *(_QWORD *)v73 = v78;
                  WebCore::Color::operator=();
                  *(_BYTE *)(v73 + 24) = *((_BYTE *)v69 - 8);
                  *((_BYTE *)v69 - 24) = v105;
                  *a2 = v104;
                  result = (unsigned int *)WebCore::Color::operator=();
                  *((_BYTE *)v69 - 8) = v107;
                  v80 = v73 - v6 + 32;
                  if (v80 >= 33)
                  {
                    v81 = (((unint64_t)v80 >> 5) - 2) >> 1;
                    v82 = v6 + 32 * v81;
                    if (*(_DWORD *)v82 < *(_DWORD *)v73
                      || *(_DWORD *)v82 <= *(_DWORD *)v73 && *(_DWORD *)(v6 + 32 * v81 + 4) < *(_DWORD *)(v73 + 4))
                    {
                      v120 = *(_BYTE *)(v73 + 8);
                      v113 = *(_QWORD *)v73;
                      WebCore::Color::Color();
                      v128 = *(_BYTE *)(v73 + 24);
                      while (1)
                      {
                        v83 = v82;
                        v84 = *(_QWORD *)v82;
                        *(_BYTE *)(v73 + 8) = *(_BYTE *)(v82 + 8);
                        *(_QWORD *)v73 = v84;
                        WebCore::Color::operator=();
                        *(_BYTE *)(v73 + 24) = *(_BYTE *)(v82 + 24);
                        if (!v81)
                          break;
                        v81 = (v81 - 1) >> 1;
                        v82 = v6 + 32 * v81;
                        v73 = v83;
                        if (*(_DWORD *)v82 >= v113)
                        {
                          if (*(_DWORD *)v82 > v113)
                            break;
                          v73 = v83;
                          if (*(_DWORD *)(v6 + 32 * v81 + 4) >= HIDWORD(v113))
                            break;
                        }
                      }
                      *(_BYTE *)(v83 + 8) = v120;
                      *(_QWORD *)v83 = v113;
                      result = (unsigned int *)WebCore::Color::operator=();
                      *(_BYTE *)(v83 + 24) = v128;
                      if ((*(_QWORD *)v122 & 0x8000000000000) != 0)
                      {
                        result = (unsigned int *)(*(_QWORD *)v122 & 0xFFFFFFFFFFFFLL);
                        do
                        {
                          v85 = __ldaxr(result);
                          v86 = v85 - 1;
                        }
                        while (__stlxr(v86, result));
                        if (!v86)
                        {
                          atomic_store(1u, result);
                          result = (unsigned int *)WTF::fastFree((WTF *)result, v79);
                        }
                      }
                    }
                  }
                }
                if ((*(_QWORD *)v106 & 0x8000000000000) != 0)
                {
                  result = (unsigned int *)(*(_QWORD *)v106 & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v88 = __ldaxr(result);
                    v89 = v88 - 1;
                  }
                  while (__stlxr(v89, result));
                  if (!v89)
                  {
                    atomic_store(1u, result);
                    result = (unsigned int *)WTF::fastFree((WTF *)result, v79);
                  }
                }
              }
              while (v68-- > 2);
            }
            return result;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = v6 + 32 * ((unint64_t)v10 >> 1);
          if ((unint64_t)v9 <= 0x1000)
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *>((unsigned int *)v12, (unsigned int *)v6, (uint64_t)(a2 - 4));
          }
          else
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *>((unsigned int *)v6, (unsigned int *)v12, (uint64_t)(a2 - 4));
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *>((unsigned int *)(v6 + 32), (unsigned int *)(v12 - 32), (uint64_t)(a2 - 8));
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *>((unsigned int *)(v6 + 64), (unsigned int *)(v6 + 32 + 32 * v11), (uint64_t)(a2 - 12));
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *>((unsigned int *)(v12 - 32), (unsigned int *)v12, v6 + 32 + 32 * v11);
            v115 = *(_BYTE *)(v6 + 8);
            v108 = *(_QWORD *)v6;
            WebCore::Color::Color();
            v123 = *(_BYTE *)(v6 + 24);
            v13 = *(_QWORD *)v12;
            *(_BYTE *)(v6 + 8) = *(_BYTE *)(v12 + 8);
            *(_QWORD *)v6 = v13;
            WebCore::Color::operator=();
            v14 = (_BYTE *)(v6 + 24 + 32 * v11);
            *(_BYTE *)(v6 + 24) = *v14;
            *(_QWORD *)v12 = v108;
            *(_BYTE *)(v12 + 8) = v115;
            WebCore::Color::operator=();
            *v14 = v123;
            if ((*(_QWORD *)v122 & 0x8000000000000) != 0)
            {
              v16 = (unsigned int *)(*(_QWORD *)v122 & 0xFFFFFFFFFFFFLL);
              do
              {
                v17 = __ldaxr(v16);
                v18 = v17 - 1;
              }
              while (__stlxr(v18, v16));
              if (!v18)
              {
                atomic_store(1u, v16);
                WTF::fastFree((WTF *)v16, v15);
              }
            }
          }
          --a3;
          if ((a4 & 1) == 0)
          {
            v19 = *(_DWORD *)(v6 - 32);
            if (v19 >= *(_DWORD *)v6 && (v19 > *(_DWORD *)v6 || *(_DWORD *)(v6 - 28) >= *(_DWORD *)(v6 + 4)))
            {
              v117 = *(_BYTE *)(v6 + 8);
              v110 = *(_QWORD *)v6;
              result = (unsigned int *)WebCore::Color::Color();
              v125 = *(_BYTE *)(v6 + 24);
              if (v110 < *v7 || v110 <= *v7 && HIDWORD(v110) < *((_DWORD *)a2 - 7))
              {
                i = v6 + 32;
                if ((uint64_t *)(v6 + 32) == a2)
                  goto LABEL_230;
                while (v110 >= *(_DWORD *)i
                     && (v110 > *(_DWORD *)i || HIDWORD(v110) >= *(_DWORD *)(i + 4)))
                {
                  i += 32;
                  if ((uint64_t *)i == a2)
                    goto LABEL_230;
                }
              }
              else
              {
                for (i = v6 + 32; i < (unint64_t)a2; i += 32)
                {
                  if (v110 < *(_DWORD *)i
                    || v110 <= *(_DWORD *)i && HIDWORD(v110) < *(_DWORD *)(i + 4))
                  {
                    break;
                  }
                }
              }
              v32 = a2;
              if (i >= (unint64_t)a2)
                goto LABEL_90;
              if (a2 != (uint64_t *)v6)
              {
                v32 = a2 - 4;
                while (v110 < *(_DWORD *)v32
                     || v110 <= *(_DWORD *)v32 && HIDWORD(v110) < *((_DWORD *)v32 + 1))
                {
                  v24 = v32 == (uint64_t *)v6;
                  v32 -= 4;
                  if (v24)
                    goto LABEL_230;
                }
LABEL_90:
                while (i < (unint64_t)v32)
                {
                  result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WebCore::CompositionUnderline *&,WebCore::CompositionUnderline *&>((uint64_t *)i, v32);
                  i += 32;
                  if ((uint64_t *)i == a2)
                    goto LABEL_230;
                  while (v110 >= *(_DWORD *)i
                       && (v110 > *(_DWORD *)i || HIDWORD(v110) >= *(_DWORD *)(i + 4)))
                  {
                    i += 32;
                    if ((uint64_t *)i == a2)
                      goto LABEL_230;
                  }
                  if (v32 == (uint64_t *)v6)
                    goto LABEL_230;
                  v32 -= 4;
                  while (v110 < *(_DWORD *)v32
                       || v110 <= *(_DWORD *)v32 && HIDWORD(v110) < *((_DWORD *)v32 + 1))
                  {
                    v24 = v32 == (uint64_t *)v6;
                    v32 -= 4;
                    if (v24)
                      goto LABEL_230;
                  }
                }
                v33 = (uint64_t *)(i - 32);
                if (i - 32 != v6)
                {
                  v34 = *v33;
                  *(_BYTE *)(v6 + 8) = *(_BYTE *)(i - 24);
                  *(_QWORD *)v6 = v34;
                  WebCore::Color::operator=();
                  *(_BYTE *)(v6 + 24) = *(_BYTE *)(i - 8);
                }
                *(_BYTE *)(i - 24) = v117;
                *v33 = v110;
                result = (unsigned int *)WebCore::Color::operator=();
                *(_BYTE *)(i - 8) = v125;
                if ((*(_QWORD *)v122 & 0x8000000000000) != 0)
                {
                  result = (unsigned int *)(*(_QWORD *)v122 & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v39 = __ldaxr(result);
                    v40 = v39 - 1;
                  }
                  while (__stlxr(v40, result));
                  if (!v40)
                  {
                    atomic_store(1u, result);
                    result = (unsigned int *)WTF::fastFree((WTF *)result, v35);
                  }
                }
                goto LABEL_108;
              }
LABEL_230:
              __break(1u);
              return result;
            }
          }
          v116 = *(_BYTE *)(v6 + 8);
          v109 = *(_QWORD *)v6;
          result = (unsigned int *)WebCore::Color::Color();
          v124 = *(_BYTE *)(v6 + 24);
          if ((uint64_t *)(v6 + 32) == a2)
            goto LABEL_230;
          v20 = 0;
          while (1)
          {
            v21 = *(_DWORD *)(v6 + v20 + 32);
            if (v21 >= v109 && (v21 > v109 || *(_DWORD *)(v6 + v20 + 36) >= HIDWORD(v109)))
              break;
            v20 += 32;
            if ((uint64_t *)(v6 + v20 + 32) == a2)
              goto LABEL_230;
          }
          v22 = v6 + v20 + 32;
          if (v20)
          {
            v23 = a2 - 4;
            if (a2 == (uint64_t *)v6)
              goto LABEL_230;
            while (*(_DWORD *)v23 >= v109
                 && (*(_DWORD *)v23 > v109 || *((_DWORD *)v23 + 1) >= HIDWORD(v109)))
            {
              v24 = v23 == (uint64_t *)v6;
              v23 -= 4;
              if (v24)
                goto LABEL_230;
            }
          }
          else
          {
            v23 = a2;
            if (v22 < (unint64_t)a2)
            {
              v25 = *v7;
              v23 = a2 - 4;
              if (*v7 >= v109)
              {
                v23 = a2 - 4;
                do
                {
                  if (v25 <= v109)
                  {
                    if (v22 >= (unint64_t)v23 || *((_DWORD *)v23 + 1) < HIDWORD(v109))
                      break;
                  }
                  else if (v22 >= (unint64_t)v23)
                  {
                    break;
                  }
                  v26 = *((_DWORD *)v23 - 8);
                  v23 -= 4;
                  v25 = v26;
                }
                while (v26 >= v109);
              }
            }
          }
          if (v22 < (unint64_t)v23)
          {
            v27 = v23;
            i = v22;
            while (1)
            {
              result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WebCore::CompositionUnderline *&,WebCore::CompositionUnderline *&>((uint64_t *)i, v27);
              i += 32;
              if ((uint64_t *)i == a2)
                goto LABEL_230;
              while (*(_DWORD *)i < v109
                   || *(_DWORD *)i <= v109 && *(_DWORD *)(i + 4) < HIDWORD(v109))
              {
                i += 32;
                if ((uint64_t *)i == a2)
                  goto LABEL_230;
              }
              if (v27 == (uint64_t *)v6)
                goto LABEL_230;
              v27 -= 4;
              while (*(_DWORD *)v27 >= v109
                   && (*(_DWORD *)v27 > v109 || *((_DWORD *)v27 + 1) >= HIDWORD(v109)))
              {
                v24 = v27 == (uint64_t *)v6;
                v27 -= 4;
                if (v24)
                  goto LABEL_230;
              }
              if (i >= (unint64_t)v27)
                goto LABEL_60;
            }
          }
          i = v22;
LABEL_60:
          v28 = (uint64_t *)(i - 32);
          if (i - 32 != v6)
          {
            v29 = *v28;
            *(_BYTE *)(v6 + 8) = *(_BYTE *)(i - 24);
            *(_QWORD *)v6 = v29;
            WebCore::Color::operator=();
            *(_BYTE *)(v6 + 24) = *(_BYTE *)(i - 8);
          }
          *(_BYTE *)(i - 24) = v116;
          *v28 = v109;
          WebCore::Color::operator=();
          *(_BYTE *)(i - 8) = v124;
          if ((*(_QWORD *)v122 & 0x8000000000000) != 0)
          {
            v36 = (unsigned int *)(*(_QWORD *)v122 & 0xFFFFFFFFFFFFLL);
            do
            {
              v37 = __ldaxr(v36);
              v38 = v37 - 1;
            }
            while (__stlxr(v38, v36));
            if (!v38)
            {
              atomic_store(1u, v36);
              WTF::fastFree((WTF *)v36, v30);
            }
          }
          if (v22 < (unint64_t)v23)
            goto LABEL_66;
          v31 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *>(v6, i - 32);
          result = (unsigned int *)std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *>(i, (uint64_t)a2);
          if (!(_DWORD)result)
          {
            if ((v31 & 1) != 0)
              continue;
LABEL_66:
            result = (unsigned int *)std::__introsort<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *,false>(v6, i - 32, a3, a4 & 1);
LABEL_108:
            a4 = 0;
            continue;
          }
          a2 = (uint64_t *)(i - 32);
          if ((v31 & 1) != 0)
            return result;
          goto LABEL_2;
        }
        if ((a4 & 1) != 0)
        {
          if ((uint64_t *)v6 != a2)
          {
            v42 = v6 + 32;
            if ((uint64_t *)(v6 + 32) != a2)
            {
              v43 = 0;
              v44 = v6;
              do
              {
                v45 = v44;
                v44 = v42;
                v46 = *(_DWORD *)(v45 + 32);
                if (v46 < *(_DWORD *)v45 || v46 <= *(_DWORD *)v45 && *(_DWORD *)(v45 + 36) < *(_DWORD *)(v45 + 4))
                {
                  v118 = *(_BYTE *)(v44 + 8);
                  v111 = *(_QWORD *)v44;
                  WebCore::Color::Color();
                  v126 = *(_BYTE *)(v45 + 56);
                  for (j = v43; ; j -= 32)
                  {
                    v48 = v6 + j;
                    *(_QWORD *)(v48 + 32) = *(_QWORD *)(v6 + j);
                    *(_BYTE *)(v48 + 40) = *(_BYTE *)(v6 + j + 8);
                    WebCore::Color::operator=();
                    *(_BYTE *)(v48 + 56) = *(_BYTE *)(v48 + 24);
                    if (!j)
                    {
                      v50 = v6;
                      goto LABEL_141;
                    }
                    v49 = *(_DWORD *)(v6 + j - 32);
                    if (v111 >= v49
                      && (v111 > v49 || HIDWORD(v111) >= *(_DWORD *)(v6 + j - 28)))
                    {
                      break;
                    }
                  }
                  v50 = v6 + j;
LABEL_141:
                  *(_BYTE *)(v50 + 8) = v118;
                  *(_QWORD *)v50 = v111;
                  result = (unsigned int *)WebCore::Color::operator=();
                  *(_BYTE *)(v50 + 24) = v126;
                  if ((*(_QWORD *)v122 & 0x8000000000000) != 0)
                  {
                    result = (unsigned int *)(*(_QWORD *)v122 & 0xFFFFFFFFFFFFLL);
                    do
                    {
                      v52 = __ldaxr(result);
                      v53 = v52 - 1;
                    }
                    while (__stlxr(v53, result));
                    if (!v53)
                    {
                      atomic_store(1u, result);
                      result = (unsigned int *)WTF::fastFree((WTF *)result, v51);
                    }
                  }
                }
                v42 = v44 + 32;
                v43 += 32;
              }
              while ((uint64_t *)(v44 + 32) != a2);
            }
          }
        }
        else if ((uint64_t *)v6 != a2)
        {
          v90 = v6 + 32;
          if ((uint64_t *)(v6 + 32) != a2)
          {
            v91 = 0;
            v92 = v6 - 32;
            v93 = -1;
            v94 = 1;
            v95 = v6;
            while (1)
            {
              v96 = v91;
              v91 = v94;
              if (*(_DWORD *)v90 < *(_DWORD *)v95
                || *(_DWORD *)v90 <= *(_DWORD *)v95 && *(_DWORD *)(v95 + 36) < *(_DWORD *)(v6 + 32 * v96 + 4))
              {
                break;
              }
LABEL_228:
              v95 = v6 + 32 * v91;
              v94 = v91 + 1;
              v90 = v6 + 32 * (v91 + 1);
              v92 += 32;
              --v93;
              if ((uint64_t *)v90 == a2)
                return result;
            }
            v121 = *(_BYTE *)(v90 + 8);
            v114 = *(_QWORD *)v90;
            WebCore::Color::Color();
            v129 = *(_BYTE *)(v95 + 56);
            v97 = v93;
            for (k = v92; ; k -= 32)
            {
              *(_QWORD *)(k + 64) = *(_QWORD *)(k + 32);
              *(_BYTE *)(k + 72) = *(_BYTE *)(k + 40);
              result = (unsigned int *)WebCore::Color::operator=();
              *(_BYTE *)(k + 88) = *(_BYTE *)(k + 56);
              if (!v97)
                break;
              if (v114 >= *(_DWORD *)k
                && (v114 > *(_DWORD *)k || HIDWORD(v114) >= *(_DWORD *)(k + 4)))
              {
                *(_BYTE *)(k + 40) = v121;
                *(_QWORD *)(k + 32) = v114;
                result = (unsigned int *)WebCore::Color::operator=();
                *(_BYTE *)(k + 56) = v129;
                if ((*(_QWORD *)v122 & 0x8000000000000) != 0)
                {
                  result = (unsigned int *)(*(_QWORD *)v122 & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v100 = __ldaxr(result);
                    v101 = v100 - 1;
                  }
                  while (__stlxr(v101, result));
                  if (!v101)
                  {
                    atomic_store(1u, result);
                    result = (unsigned int *)WTF::fastFree((WTF *)result, v99);
                  }
                }
                goto LABEL_228;
              }
              ++v97;
            }
            goto LABEL_230;
          }
        }
        return result;
    }
  }
}

void sub_197867180(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;

  if ((a19 & 0x8000000000000) != 0)
  {
    v20 = (unsigned int *)(a19 & 0xFFFFFFFFFFFFLL);
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v20);
      WTF::fastFree((WTF *)v20, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WebCore::CompositionUnderline *&,WebCore::CompositionUnderline *&>(uint64_t *a1, uint64_t *a2)
{
  char v4;
  unsigned int *result;
  void *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  char v10;
  _BYTE v11[7];
  char v12;

  v9 = *a1;
  v10 = *((_BYTE *)a1 + 8);
  WebCore::Color::Color();
  v12 = *((_BYTE *)a1 + 24);
  v4 = *((_BYTE *)a2 + 8);
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v4;
  WebCore::Color::operator=();
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  *a2 = v9;
  *((_BYTE *)a2 + 8) = v10;
  result = (unsigned int *)WebCore::Color::operator=();
  *((_BYTE *)a2 + 24) = v12;
  if ((*(_QWORD *)v11 & 0x8000000000000) != 0)
  {
    result = (unsigned int *)(*(_QWORD *)v11 & 0xFFFFFFFFFFFFLL);
    do
    {
      v7 = __ldaxr(result);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, result));
    if (!v8)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v6);
    }
  }
  return result;
}

void sub_1978673C8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  if ((a11 & 0x8000000000000) != 0)
  {
    v12 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFLL);
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *,0>(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *result;

  result = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *>(a1, a2, a3, a4);
  if (*(_DWORD *)a5 < *(_DWORD *)a4 || *(_DWORD *)a5 <= *(_DWORD *)a4 && *(_DWORD *)(a5 + 4) < *(_DWORD *)(a4 + 4))
  {
    result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WebCore::CompositionUnderline *&,WebCore::CompositionUnderline *&>((uint64_t *)a4, (uint64_t *)a5);
    if (*(_DWORD *)a4 < *(_DWORD *)a3 || *(_DWORD *)a4 <= *(_DWORD *)a3 && *(_DWORD *)(a4 + 4) < *(_DWORD *)(a3 + 4))
    {
      result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WebCore::CompositionUnderline *&,WebCore::CompositionUnderline *&>((uint64_t *)a3, (uint64_t *)a4);
      if (*(_DWORD *)a3 < *a2 || *(_DWORD *)a3 <= *a2 && *(_DWORD *)(a3 + 4) < a2[1])
      {
        result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WebCore::CompositionUnderline *&,WebCore::CompositionUnderline *&>((uint64_t *)a2, (uint64_t *)a3);
        if (*a2 < *a1 || *a2 <= *a1 && a2[1] < a1[1])
          return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WebCore::CompositionUnderline *&,WebCore::CompositionUnderline *&>((uint64_t *)a1, (uint64_t *)a2);
      }
    }
  }
  return result;
}

unsigned int *std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *>(unsigned int *result, unsigned int *a2, uint64_t a3)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t *v7;

  v5 = result;
  v6 = *a2;
  if (*a2 >= *result && (v6 > *result || a2[1] >= result[1]))
  {
    if (*(_DWORD *)a3 < v6 || *(_DWORD *)a3 <= v6 && *(_DWORD *)(a3 + 4) < a2[1])
    {
      result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WebCore::CompositionUnderline *&,WebCore::CompositionUnderline *&>((uint64_t *)a2, (uint64_t *)a3);
      if (*a2 < *v5 || *a2 <= *v5 && a2[1] < v5[1])
      {
        result = v5;
        v7 = (uint64_t *)a2;
        return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WebCore::CompositionUnderline *&,WebCore::CompositionUnderline *&>((uint64_t *)result, v7);
      }
    }
  }
  else
  {
    if (*(_DWORD *)a3 < v6 || *(_DWORD *)a3 <= v6 && *(_DWORD *)(a3 + 4) < a2[1])
      goto LABEL_17;
    result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WebCore::CompositionUnderline *&,WebCore::CompositionUnderline *&>((uint64_t *)result, (uint64_t *)a2);
    if (*(_DWORD *)a3 < *a2 || *(_DWORD *)a3 <= *a2 && *(_DWORD *)(a3 + 4) < a2[1])
    {
      result = a2;
LABEL_17:
      v7 = (uint64_t *)a3;
      return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WebCore::CompositionUnderline *&,WebCore::CompositionUnderline *&>((uint64_t *)result, v7);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *>(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  uint64_t *v5;
  unsigned int v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t i;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v20;
  char v21;
  _BYTE v22[7];
  char v23;

  v4 = 1;
  switch((a2 - a1) >> 5)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      v5 = (uint64_t *)(a2 - 32);
      v6 = *(_DWORD *)(a2 - 32);
      if (v6 < *(_DWORD *)a1 || v6 <= *(_DWORD *)a1 && *(_DWORD *)(a2 - 28) < *(_DWORD *)(a1 + 4))
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WebCore::CompositionUnderline *&,WebCore::CompositionUnderline *&>((uint64_t *)a1, v5);
      break;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *>((unsigned int *)a1, (unsigned int *)(a1 + 32), a2 - 32);
      break;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *>((unsigned int *)a1, (unsigned int *)(a1 + 32), a1 + 64, a2 - 32);
      break;
    case 5:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *,0>((unsigned int *)a1, (unsigned int *)(a1 + 32), a1 + 64, a1 + 96, a2 - 32);
      break;
    default:
      v7 = (_DWORD *)(a1 + 64);
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *>((unsigned int *)a1, (unsigned int *)(a1 + 32), a1 + 64);
      v8 = a1 + 96;
      v4 = 1;
      if (a1 + 96 != a2)
      {
        v9 = 0;
        v10 = 0;
        while (1)
        {
          if (*(_DWORD *)v8 < *v7 || *(_DWORD *)v8 <= *v7 && *(_DWORD *)(v8 + 4) < v7[1])
          {
            v20 = *(_QWORD *)v8;
            v21 = *(_BYTE *)(v8 + 8);
            WebCore::Color::Color();
            v23 = *(_BYTE *)(v8 + 24);
            for (i = v9; ; i -= 32)
            {
              v12 = a1 + i;
              *(_QWORD *)(v12 + 96) = *(_QWORD *)(a1 + i + 64);
              *(_BYTE *)(v12 + 104) = *(_BYTE *)(a1 + i + 72);
              WebCore::Color::operator=();
              *(_BYTE *)(v12 + 120) = *(_BYTE *)(v12 + 88);
              if (i == -64)
              {
                v14 = a1;
                goto LABEL_20;
              }
              v13 = *(_DWORD *)(a1 + i + 32);
              if (v20 >= v13 && (v20 > v13 || HIDWORD(v20) >= *(_DWORD *)(a1 + i + 36)))
                break;
            }
            v14 = a1 + i + 64;
LABEL_20:
            *(_QWORD *)v14 = v20;
            *(_BYTE *)(v14 + 8) = v21;
            WebCore::Color::operator=();
            *(_BYTE *)(v14 + 24) = v23;
            if ((*(_QWORD *)v22 & 0x8000000000000) != 0)
            {
              v16 = (unsigned int *)(*(_QWORD *)v22 & 0xFFFFFFFFFFFFLL);
              do
              {
                v17 = __ldaxr(v16);
                v18 = v17 - 1;
              }
              while (__stlxr(v18, v16));
              if (!v18)
              {
                atomic_store(1u, v16);
                WTF::fastFree((WTF *)v16, v15);
              }
            }
            if (++v10 == 8)
              break;
          }
          v7 = (_DWORD *)v8;
          v9 += 32;
          v8 += 32;
          if (v8 == a2)
            return 1;
        }
        v4 = v8 + 32 == a2;
      }
      break;
  }
  return v4;
}

void sub_1978678BC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  if ((a11 & 0x8000000000000) != 0)
  {
    v12 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFLL);
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *>(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  unsigned int *result;

  result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *>(a1, a2, a3);
  if (*(_DWORD *)a4 < *(_DWORD *)a3 || *(_DWORD *)a4 <= *(_DWORD *)a3 && *(_DWORD *)(a4 + 4) < *(_DWORD *)(a3 + 4))
  {
    result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WebCore::CompositionUnderline *&,WebCore::CompositionUnderline *&>((uint64_t *)a3, (uint64_t *)a4);
    if (*(_DWORD *)a3 < *a2 || *(_DWORD *)a3 <= *a2 && *(_DWORD *)(a3 + 4) < a2[1])
    {
      result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WebCore::CompositionUnderline *&,WebCore::CompositionUnderline *&>((uint64_t *)a2, (uint64_t *)a3);
      if (*a2 < *a1 || *a2 <= *a1 && a2[1] < a1[1])
        return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WebCore::CompositionUnderline *&,WebCore::CompositionUnderline *&>((uint64_t *)a1, (uint64_t *)a2);
    }
  }
  return result;
}

void sub_197867BCC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;
  uint64_t v17;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;

  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100](v16, a2);
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a14, v19);
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a12, v20);
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, v21);
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a16, v22);
  v24 = *(_QWORD *)(v17 - 56);
  if ((v24 & 0x8000000000000) != 0)
  {
    v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFLL);
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
    {
      atomic_store(1u, v25);
      WTF::fastFree((WTF *)v25, v23);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c56_ZTSKZL21compositionHighlightsP18NSAttributedStringE3__1(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

BOOL std::operator!=[abi:sn180100]<WebCore::Color,WebCore::Color>(unint64_t a1, char a2, unint64_t a3, char a4)
{
  uint64_t v4;
  _BOOL4 v6;
  unint64_t v8;
  __int128 v9;
  _BOOL4 v10;
  __int128 v11;
  __int128 v12;

  v4 = (a2 != 0) ^ (a4 != 0);
  if (a2 && a4)
  {
    if ((a1 & 0x8000000000000) != 0)
    {
      v6 = 0;
      if ((a3 & 0x8000000000000) != 0)
      {
        v8 = 0;
        v9 = *(_OWORD *)((a1 & 0xFFFFFFFFFFFFLL) + 4);
        v11 = *(_OWORD *)((a3 & 0xFFFFFFFFFFFFLL) + 4);
        v12 = v9;
        do
        {
          if (*((float *)&v12 + v8) != *((float *)&v11 + v8))
            break;
          LOBYTE(v6) = v8++ > 2;
        }
        while (v8 != 4);
        v10 = HIBYTE(a1) == HIBYTE(a3) && BYTE6(a1) == BYTE6(a3);
        v6 = v6 && v10;
      }
    }
    else
    {
      v6 = (a3 & 0x8000000000000) == 0 && a1 == a3;
    }
    return !v6;
  }
  return v4;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *,false>(uint64_t result, _DWORD *a2, uint64_t a3, char a4)
{
  uint64_t v6;
  unint64_t i;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  _DWORD *v18;
  BOOL v19;
  unsigned int v20;
  unsigned int v21;
  _DWORD *v22;
  void *v23;
  void *v24;
  BOOL v25;
  _DWORD *v26;
  void *v27;
  void *v28;
  unsigned int v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t j;
  unsigned int v36;
  _QWORD *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  int64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  void *v53;
  void *v54;
  int64_t v55;
  _DWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  int64_t v62;
  unsigned int v63;
  uint64_t v64;
  unsigned __int8 *v65;
  void *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  void *v72;
  void *v73;
  void *v74;
  _DWORD *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t k;
  void *v84;
  void *v85;
  unsigned int *v87;
  int64_t v88;
  int64_t v89;
  uint64_t v90;
  unsigned __int8 v91[16];
  unsigned __int8 v92[16];
  uint64_t v93;
  unsigned __int8 v94[16];
  unsigned __int8 v95[16];

  v6 = result;
LABEL_2:
  v87 = a2 - 10;
  i = v6;
  while (2)
  {
    v6 = i;
    v8 = (uint64_t)a2 - i;
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - i) >> 3);
    switch(v9)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v29 = *(a2 - 10);
        if (v29 < *(_DWORD *)i || v29 <= *(_DWORD *)i && *(a2 - 9) < *(_DWORD *)(i + 4))
          return std::swap[abi:sn180100]<WebCore::CompositionHighlight>((uint64_t *)i, (uint64_t)(a2 - 10));
        return result;
      case 3:
        return std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *>(i, i + 40, v87);
      case 4:
        return std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *>(i, i + 40, (unsigned int *)(i + 80), v87);
      case 5:
        return std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *,0>(i, i + 40, (unsigned int *)(i + 80), (unsigned int *)(i + 120), v87);
      default:
        if (v8 > 959)
        {
          if (!a3)
          {
            if ((_DWORD *)i != a2)
            {
              v89 = (unint64_t)(v9 - 2) >> 1;
              v41 = v89;
              do
              {
                v42 = v41;
                if (v89 >= v41)
                {
                  v43 = (2 * v41) | 1;
                  v44 = v6 + 40 * v43;
                  if (2 * v41 + 2 < v9)
                  {
                    v45 = *(_DWORD *)(v44 + 40);
                    if (*(_DWORD *)v44 < v45
                      || *(_DWORD *)v44 <= v45 && *(_DWORD *)(v6 + 40 * v43 + 4) < *(_DWORD *)(v44 + 44))
                    {
                      v44 += 40;
                      v43 = 2 * v41 + 2;
                    }
                  }
                  v46 = (uint64_t *)(v6 + 40 * v41);
                  if (*(_DWORD *)v44 >= *(_DWORD *)v46
                    && (*(_DWORD *)v44 > *(_DWORD *)v46 || *(_DWORD *)(v44 + 4) >= *(_DWORD *)(v6 + 40 * v41 + 4)))
                  {
                    v93 = *v46;
                    v88 = v41;
                    v47 = v6 + 40 * v41;
                    std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](v94, v47 + 8);
                    std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](v95, v47 + 24);
                    while (1)
                    {
                      v48 = (uint64_t *)v44;
                      v49 = v44 + 8;
                      *v46 = *(_QWORD *)v44;
                      std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>((uint64_t)(v46 + 1), (unsigned __int8 *)(v44 + 8));
                      v50 = v44 + 24;
                      std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>((uint64_t)(v46 + 3), (unsigned __int8 *)(v44 + 24));
                      if (v89 < v43)
                        break;
                      v51 = (2 * v43) | 1;
                      v44 = v6 + 40 * v51;
                      if (2 * v43 + 2 < v9)
                      {
                        v52 = *(_DWORD *)(v44 + 40);
                        if (*(_DWORD *)v44 < v52
                          || *(_DWORD *)v44 <= v52 && *(_DWORD *)(v6 + 40 * v51 + 4) < *(_DWORD *)(v44 + 44))
                        {
                          v44 += 40;
                          v51 = 2 * v43 + 2;
                        }
                      }
                      if (*(_DWORD *)v44 < v93)
                        break;
                      v46 = v48;
                      v43 = v51;
                      if (*(_DWORD *)v44 <= v93)
                      {
                        v46 = v48;
                        v43 = v51;
                        if (*(_DWORD *)(v44 + 4) < HIDWORD(v93))
                          break;
                      }
                    }
                    *v48 = v93;
                    std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(v49, v94);
                    std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(v50, v95);
                    std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v95, v53);
                    std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v94, v54);
                    v42 = v88;
                  }
                }
                v41 = v42 - 1;
              }
              while (v42);
              v55 = v8 / 0x28uLL;
              do
              {
                v56 = a2;
                v90 = *(_QWORD *)v6;
                std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](v91, v6 + 8);
                std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](v92, v6 + 24);
                v57 = 0;
                v58 = (_QWORD *)v6;
                do
                {
                  v59 = v57 + 1;
                  v60 = &v58[5 * v57 + 5];
                  v61 = 2 * v57;
                  v57 = (2 * v57) | 1;
                  v62 = v61 + 2;
                  if (v62 < v55)
                  {
                    v63 = *((_DWORD *)v60 + 10);
                    if (*(_DWORD *)v60 < v63 || *(_DWORD *)v60 <= v63 && HIDWORD(v58[5 * v59]) < *((_DWORD *)v60 + 11))
                    {
                      v60 += 5;
                      v57 = v62;
                    }
                  }
                  *v58 = *v60;
                  std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>((uint64_t)(v58 + 1), (unsigned __int8 *)v60 + 8);
                  std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>((uint64_t)(v58 + 3), (unsigned __int8 *)v60 + 24);
                  v58 = v60;
                }
                while (v57 <= (uint64_t)((unint64_t)(v55 - 2) >> 1));
                a2 -= 10;
                if (v60 == (uint64_t *)(v56 - 10))
                {
                  *v60 = v90;
                  std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>((uint64_t)(v60 + 1), v91);
                  std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>((uint64_t)(v60 + 3), v92);
                }
                else
                {
                  *v60 = *((_QWORD *)v56 - 5);
                  v64 = (uint64_t)(v56 - 8);
                  std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>((uint64_t)(v60 + 1), (unsigned __int8 *)v56 - 32);
                  v65 = (unsigned __int8 *)(v56 - 4);
                  std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>((uint64_t)(v60 + 3), v65);
                  *(_QWORD *)a2 = v90;
                  std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(v64, v91);
                  std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>((uint64_t)v65, v92);
                  v67 = (uint64_t)v60 - v6 + 40;
                  if (v67 >= 41)
                  {
                    v68 = (v67 / 0x28uLL - 2) >> 1;
                    v69 = v6 + 40 * v68;
                    if (*(_DWORD *)v69 < *(_DWORD *)v60
                      || *(_DWORD *)v69 <= *(_DWORD *)v60 && *(_DWORD *)(v6 + 40 * v68 + 4) < *((_DWORD *)v60 + 1))
                    {
                      v93 = *v60;
                      std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](v94, (uint64_t)(v60 + 1));
                      std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](v95, (uint64_t)(v60 + 3));
                      while (1)
                      {
                        v70 = (uint64_t *)v69;
                        v71 = v69 + 8;
                        *v60 = *(_QWORD *)v69;
                        std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>((uint64_t)(v60 + 1), (unsigned __int8 *)(v69 + 8));
                        std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>((uint64_t)(v60 + 3), (unsigned __int8 *)(v69 + 24));
                        if (!v68)
                          break;
                        v68 = (v68 - 1) >> 1;
                        v69 = v6 + 40 * v68;
                        v60 = v70;
                        if (*(_DWORD *)v69 >= v93)
                        {
                          if (*(_DWORD *)v69 > v93)
                            break;
                          v60 = v70;
                          if (*(_DWORD *)(v6 + 40 * v68 + 4) >= HIDWORD(v93))
                            break;
                        }
                      }
                      *v70 = v93;
                      std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(v71, v94);
                      std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>((uint64_t)(v70 + 3), v95);
                      std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v95, v72);
                      std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v94, v73);
                    }
                  }
                }
                std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v92, v66);
                result = std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v91, v74);
              }
              while (v55-- > 2);
            }
            return result;
          }
          v10 = (unint64_t)v9 >> 1;
          v11 = i + 40 * ((unint64_t)v9 >> 1);
          if ((unint64_t)v8 < 0x1401)
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *>(v11, i, v87);
          }
          else
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *>(i, v11, v87);
            v12 = 5 * v10;
            v13 = i + 8 * v12 - 40;
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *>(v6 + 40, v13, a2 - 20);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *>(v6 + 80, v6 + 40 + 8 * v12, a2 - 30);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *>(v13, v11, (unsigned int *)(v6 + 40 + 8 * v12));
            std::swap[abi:sn180100]<WebCore::CompositionHighlight>((uint64_t *)v6, v11);
          }
          --a3;
          if ((a4 & 1) == 0)
          {
            v14 = *(_DWORD *)(v6 - 40);
            if (v14 >= *(_DWORD *)v6 && (v14 > *(_DWORD *)v6 || *(_DWORD *)(v6 - 36) >= *(_DWORD *)(v6 + 4)))
            {
              v93 = *(_QWORD *)v6;
              std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](v94, v6 + 8);
              result = (uint64_t)std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](v95, v6 + 24);
              if (v93 >= *v87 && (v93 > *v87 || HIDWORD(v93) >= *(a2 - 9)))
              {
                for (i = v6 + 40; i < (unint64_t)a2; i += 40)
                {
                  if (v93 < *(_DWORD *)i
                    || v93 <= *(_DWORD *)i && HIDWORD(v93) < *(_DWORD *)(i + 4))
                  {
                    break;
                  }
                }
              }
              else
              {
                i = v6 + 40;
                if ((_DWORD *)(v6 + 40) == a2)
                  goto LABEL_192;
                while (v93 >= *(_DWORD *)i
                     && (v93 > *(_DWORD *)i || HIDWORD(v93) >= *(_DWORD *)(i + 4)))
                {
                  i += 40;
                  if ((_DWORD *)i == a2)
                    goto LABEL_192;
                }
              }
              v26 = a2;
              if (i >= (unint64_t)a2)
                goto LABEL_83;
              if (a2 == (_DWORD *)v6)
                goto LABEL_192;
              v26 = a2 - 10;
              while (v93 < *v26 || v93 <= *v26 && HIDWORD(v93) < v26[1])
              {
                v19 = v26 == (_DWORD *)v6;
                v26 -= 10;
                if (v19)
                  goto LABEL_192;
              }
LABEL_83:
              while (i < (unint64_t)v26)
              {
                result = std::swap[abi:sn180100]<WebCore::CompositionHighlight>((uint64_t *)i, (uint64_t)v26);
                i += 40;
                if ((_DWORD *)i == a2)
                  goto LABEL_192;
                while (v93 >= *(_DWORD *)i
                     && (v93 > *(_DWORD *)i || HIDWORD(v93) >= *(_DWORD *)(i + 4)))
                {
                  i += 40;
                  if ((_DWORD *)i == a2)
                    goto LABEL_192;
                }
                if (v26 == (_DWORD *)v6)
                  goto LABEL_192;
                v26 -= 10;
                while (v93 < *v26 || v93 <= *v26 && HIDWORD(v93) < v26[1])
                {
                  v19 = v26 == (_DWORD *)v6;
                  v26 -= 10;
                  if (v19)
                    goto LABEL_192;
                }
              }
              if (i - 40 != v6)
              {
                *(_QWORD *)v6 = *(_QWORD *)(i - 40);
                std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(v6 + 8, (unsigned __int8 *)(i - 32));
                std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(v6 + 24, (unsigned __int8 *)(i - 16));
              }
              *(_QWORD *)(i - 40) = v93;
              std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(i - 32, v94);
              std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(i - 16, v95);
              std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v95, v27);
              result = std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v94, v28);
              a4 = 0;
              continue;
            }
          }
          v93 = *(_QWORD *)v6;
          std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](v94, v6 + 8);
          result = (uint64_t)std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](v95, v6 + 24);
          if ((_DWORD *)(v6 + 40) == a2)
            goto LABEL_192;
          v15 = 0;
          while (1)
          {
            v16 = *(_DWORD *)(v6 + v15 + 40);
            if (v16 >= v93 && (v16 > v93 || *(_DWORD *)(v6 + v15 + 44) >= HIDWORD(v93)))
              break;
            v15 += 40;
            if ((_DWORD *)(v6 + v15 + 40) == a2)
              goto LABEL_192;
          }
          v17 = v6 + v15 + 40;
          if (v15)
          {
            v18 = a2 - 10;
            if (a2 != (_DWORD *)v6)
            {
              while (*v18 >= v93 && (*v18 > v93 || v18[1] >= HIDWORD(v93)))
              {
                v19 = v18 == (_DWORD *)v6;
                v18 -= 10;
                if (v19)
                  goto LABEL_192;
              }
              goto LABEL_37;
            }
LABEL_192:
            __break(1u);
            return result;
          }
          v18 = a2;
          if (v17 < (unint64_t)a2)
          {
            v18 = a2 - 10;
            v20 = *v87;
            if (*v87 >= v93)
            {
              v18 = a2 - 10;
              do
              {
                if (v20 <= v93)
                {
                  if (v17 >= (unint64_t)v18 || v18[1] < HIDWORD(v93))
                    break;
                }
                else if (v17 >= (unint64_t)v18)
                {
                  break;
                }
                v21 = *(v18 - 10);
                v18 -= 10;
                v20 = v21;
              }
              while (v21 >= v93);
            }
          }
LABEL_37:
          i = v17;
          if (v17 < (unint64_t)v18)
          {
            v22 = v18;
            do
            {
              result = std::swap[abi:sn180100]<WebCore::CompositionHighlight>((uint64_t *)i, (uint64_t)v22);
              i += 40;
              if ((_DWORD *)i == a2)
                goto LABEL_192;
              while (*(_DWORD *)i < v93
                   || *(_DWORD *)i <= v93 && *(_DWORD *)(i + 4) < HIDWORD(v93))
              {
                i += 40;
                if ((_DWORD *)i == a2)
                  goto LABEL_192;
              }
              if (v22 == (_DWORD *)v6)
                goto LABEL_192;
              v22 -= 10;
              while (*v22 >= v93 && (*v22 > v93 || v22[1] >= HIDWORD(v93)))
              {
                v19 = v22 == (_DWORD *)v6;
                v22 -= 10;
                if (v19)
                  goto LABEL_192;
              }
            }
            while (i < (unint64_t)v22);
          }
          if (i - 40 != v6)
          {
            *(_QWORD *)v6 = *(_QWORD *)(i - 40);
            std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(v6 + 8, (unsigned __int8 *)(i - 32));
            std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(v6 + 24, (unsigned __int8 *)(i - 16));
          }
          *(_QWORD *)(i - 40) = v93;
          std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(i - 32, v94);
          std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(i - 16, v95);
          std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v95, v23);
          std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v94, v24);
          if (v17 < (unint64_t)v18)
          {
LABEL_59:
            result = std::__introsort<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *,false>(v6, i - 40, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          v25 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *>(v6, (_DWORD *)(i - 40));
          result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *>(i, a2);
          if (!(_DWORD)result)
          {
            if (v25)
              continue;
            goto LABEL_59;
          }
          a2 = (_DWORD *)(i - 40);
          if (v25)
            return result;
          goto LABEL_2;
        }
        if ((a4 & 1) != 0)
        {
          if ((_DWORD *)i != a2)
          {
            v30 = (_QWORD *)(i + 40);
            if ((_DWORD *)(i + 40) != a2)
            {
              v31 = 0;
              v32 = (_QWORD *)i;
              do
              {
                v33 = (unsigned int *)v32;
                v32 = v30;
                v34 = v33[10];
                if (v34 < *v33 || v34 <= *v33 && v33[11] < v33[1])
                {
                  v93 = *v32;
                  std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](v94, (uint64_t)(v33 + 12));
                  std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](v95, (uint64_t)(v33 + 16));
                  for (j = v31; ; j -= 40)
                  {
                    *(_QWORD *)(i + j + 40) = *(_QWORD *)(i + j);
                    std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(i + j + 48, (unsigned __int8 *)(i + j + 8));
                    std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(i + j + 64, (unsigned __int8 *)(i + j + 24));
                    if (!j)
                    {
                      v37 = (_QWORD *)i;
                      goto LABEL_125;
                    }
                    v36 = *(_DWORD *)(i + j - 40);
                    if (v93 >= v36
                      && (v93 > v36 || HIDWORD(v93) >= *(_DWORD *)(i + j - 36)))
                    {
                      break;
                    }
                  }
                  v37 = (_QWORD *)(i + j);
LABEL_125:
                  *v37 = v93;
                  v38 = i + j;
                  std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(v38 + 8, v94);
                  std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(v38 + 24, v95);
                  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v95, v39);
                  result = std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v94, v40);
                }
                v30 = v32 + 5;
                v31 += 40;
              }
              while (v32 + 5 != (_QWORD *)a2);
            }
          }
        }
        else if ((_DWORD *)i != a2)
        {
          v76 = (_DWORD *)(i + 40);
          if ((_DWORD *)(i + 40) != a2)
          {
            v77 = 0;
            v78 = i - 40;
            v79 = -1;
            v80 = 1;
            while (1)
            {
              v81 = v77;
              v77 = v80;
              if (*v76 < *(_DWORD *)i || *v76 <= *(_DWORD *)i && *(_DWORD *)(i + 44) < *(_DWORD *)(v6 + 40 * v81 + 4))
                break;
LABEL_190:
              i = v6 + 40 * v77;
              v80 = v77 + 1;
              v76 = (_DWORD *)(i + 40);
              v78 += 40;
              --v79;
              if ((_DWORD *)(i + 40) == a2)
                return result;
            }
            v93 = *(_QWORD *)v76;
            std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](v94, i + 48);
            std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](v95, i + 64);
            v82 = v79;
            for (k = v78; ; k -= 40)
            {
              *(_QWORD *)(k + 80) = *(_QWORD *)(k + 40);
              std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(k + 88, (unsigned __int8 *)(k + 48));
              result = std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(k + 104, (unsigned __int8 *)(k + 64));
              if (!v82)
                break;
              if (v93 >= *(_DWORD *)k
                && (v93 > *(_DWORD *)k || HIDWORD(v93) >= *(_DWORD *)(k + 4)))
              {
                *(_QWORD *)(k + 40) = v93;
                std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(k + 48, v94);
                std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(k + 64, v95);
                std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v95, v84);
                result = std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v94, v85);
                goto LABEL_190;
              }
              ++v82;
            }
            goto LABEL_192;
          }
        }
        return result;
    }
  }
}

void sub_197868B2C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100](a14, a2);
  _Unwind_Resume(a1);
}

uint64_t std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *,0>(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t result;

  result = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *>(a1, a2, a3, a4);
  if (*a5 < *a4 || *a5 <= *a4 && a5[1] < a4[1])
  {
    result = std::swap[abi:sn180100]<WebCore::CompositionHighlight>((uint64_t *)a4, (uint64_t)a5);
    if (*a4 < *a3 || *a4 <= *a3 && a4[1] < a3[1])
    {
      result = std::swap[abi:sn180100]<WebCore::CompositionHighlight>((uint64_t *)a3, (uint64_t)a4);
      if (*a3 < *(_DWORD *)a2 || *a3 <= *(_DWORD *)a2 && a3[1] < *(_DWORD *)(a2 + 4))
      {
        result = std::swap[abi:sn180100]<WebCore::CompositionHighlight>((uint64_t *)a2, (uint64_t)a3);
        if (*(_DWORD *)a2 < *(_DWORD *)a1
          || *(_DWORD *)a2 <= *(_DWORD *)a1 && *(_DWORD *)(a2 + 4) < *(_DWORD *)(a1 + 4))
        {
          return std::swap[abi:sn180100]<WebCore::CompositionHighlight>((uint64_t *)a1, a2);
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *>(uint64_t result, uint64_t a2, unsigned int *a3)
{
  _DWORD *v5;
  unsigned int v6;
  uint64_t v7;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 >= *(_DWORD *)result && (v6 > *(_DWORD *)result || *(_DWORD *)(a2 + 4) >= *(_DWORD *)(result + 4)))
  {
    if (*a3 < v6 || *a3 <= v6 && a3[1] < *(_DWORD *)(a2 + 4))
    {
      result = std::swap[abi:sn180100]<WebCore::CompositionHighlight>((uint64_t *)a2, (uint64_t)a3);
      if (*(_DWORD *)a2 < *v5 || *(_DWORD *)a2 <= *v5 && *(_DWORD *)(a2 + 4) < v5[1])
      {
        result = (uint64_t)v5;
        v7 = a2;
        return std::swap[abi:sn180100]<WebCore::CompositionHighlight>((uint64_t *)result, v7);
      }
    }
  }
  else
  {
    if (*a3 < v6 || *a3 <= v6 && a3[1] < *(_DWORD *)(a2 + 4))
      goto LABEL_17;
    result = std::swap[abi:sn180100]<WebCore::CompositionHighlight>((uint64_t *)result, a2);
    if (*a3 < *(_DWORD *)a2 || *a3 <= *(_DWORD *)a2 && a3[1] < *(_DWORD *)(a2 + 4))
    {
      result = a2;
LABEL_17:
      v7 = (uint64_t)a3;
      return std::swap[abi:sn180100]<WebCore::CompositionHighlight>((uint64_t *)result, v7);
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *>(uint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  unsigned int v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t i;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  unsigned __int8 v19[16];
  unsigned __int8 v20[16];

  v4 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (uint64_t)(a2 - 10);
      v7 = *(a2 - 10);
      if (v7 < *(_DWORD *)a1 || v7 <= *(_DWORD *)a1 && *(a2 - 9) < *(_DWORD *)(a1 + 4))
      {
        std::swap[abi:sn180100]<WebCore::CompositionHighlight>((uint64_t *)a1, v6);
        return 1;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *>(a1, a1 + 40, a2 - 10);
      return 1;
    case 4uLL:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *>(a1, a1 + 40, (unsigned int *)(a1 + 80), a2 - 10);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *,0>(a1, a1 + 40, (unsigned int *)(a1 + 80), (unsigned int *)(a1 + 120), a2 - 10);
      return 1;
    default:
      v8 = (_DWORD *)(a1 + 80);
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *>(a1, a1 + 40, (unsigned int *)(a1 + 80));
      v9 = (_DWORD *)(a1 + 120);
      if ((_DWORD *)(a1 + 120) == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    if (*v9 < *v8 || *v9 <= *v8 && v9[1] < v8[1])
    {
      v18 = *(_QWORD *)v9;
      std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](v19, (uint64_t)(v9 + 2));
      std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](v20, (uint64_t)(v9 + 6));
      for (i = v10; ; i -= 40)
      {
        *(_QWORD *)(a1 + i + 120) = *(_QWORD *)(a1 + i + 80);
        std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(a1 + i + 128, (unsigned __int8 *)(a1 + i + 88));
        std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(a1 + i + 144, (unsigned __int8 *)(a1 + i + 104));
        if (i == -80)
        {
          v14 = (_QWORD *)a1;
          goto LABEL_19;
        }
        v13 = *(_DWORD *)(a1 + i + 40);
        if (v18 >= v13 && (v18 > v13 || HIDWORD(v18) >= *(_DWORD *)(a1 + i + 44)))
          break;
      }
      v14 = (_QWORD *)(a1 + i + 80);
LABEL_19:
      *v14 = v18;
      v15 = a1 + i;
      std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(v15 + 88, v19);
      std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(v15 + 104, v20);
      ++v11;
      std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v20, v16);
      std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v19, v17);
      if (v11 == 8)
        return v9 + 10 == a2;
    }
    v8 = v9;
    v10 += 40;
    v9 += 10;
    if (v9 == a2)
      return 1;
  }
}

void sub_197869080(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t std::swap[abi:sn180100]<WebCore::CompositionHighlight>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v9;
  unsigned __int8 v10[16];
  unsigned __int8 v11[16];

  v4 = (uint64_t)(a1 + 3);
  v9 = *a1;
  v5 = (uint64_t)(a1 + 1);
  std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](v10, (uint64_t)(a1 + 1));
  std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](v11, v4);
  *a1 = *(_QWORD *)a2;
  std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(v5, (unsigned __int8 *)(a2 + 8));
  std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(v4, (unsigned __int8 *)(a2 + 24));
  *(_QWORD *)a2 = v9;
  std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(a2 + 8, v10);
  std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(a2 + 24, v11);
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v11, v6);
  return std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v10, v7);
}

void sub_197869174(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *>(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result;

  result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *>(a1, a2, a3);
  if (*a4 < *a3 || *a4 <= *a3 && a4[1] < a3[1])
  {
    result = std::swap[abi:sn180100]<WebCore::CompositionHighlight>((uint64_t *)a3, (uint64_t)a4);
    if (*a3 < *(_DWORD *)a2 || *a3 <= *(_DWORD *)a2 && a3[1] < *(_DWORD *)(a2 + 4))
    {
      result = std::swap[abi:sn180100]<WebCore::CompositionHighlight>((uint64_t *)a2, (uint64_t)a3);
      if (*(_DWORD *)a2 < *(_DWORD *)a1 || *(_DWORD *)a2 <= *(_DWORD *)a1 && *(_DWORD *)(a2 + 4) < *(_DWORD *)(a1 + 4))
        return std::swap[abi:sn180100]<WebCore::CompositionHighlight>((uint64_t *)a1, a2);
    }
  }
  return result;
}

uint64_t WTF::Vector<WebKit::OptionItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _DWORD *v14;

  if (a2 != a1)
  {
    v4 = *(unsigned int *)(a1 + 12);
    v5 = *(unsigned int *)(a2 + 12);
    if (v4 <= v5)
    {
      if (v5 > *(_DWORD *)(a1 + 8))
      {
        WTF::Vector<WebKit::OptionItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebKit::OptionItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a2 + 12));
        LODWORD(v4) = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      WTF::VectorDestructor<true,WebCore::SpeechRecognitionAlternativeData>::destruct((WTF::StringImpl *)(*(_QWORD *)a1 + 16 * v5), (WTF::StringImpl *)(*(_QWORD *)a1 + 16 * v4));
      *(_DWORD *)(a1 + 12) = v5;
      LODWORD(v4) = v5;
    }
    v6 = *(WTF::StringImpl **)a2;
    if ((_DWORD)v4)
    {
      v7 = (WTF::StringImpl *)((char *)v6 + 16 * v4);
      v8 = *(_QWORD *)a1;
      do
      {
        WTF::String::operator=((WTF::StringImpl **)v8, v6);
        *(_QWORD *)(v8 + 8) = *((_QWORD *)v6 + 1);
        v6 = (WTF::StringImpl *)((char *)v6 + 16);
        v8 += 16;
      }
      while (v6 != v7);
      v6 = *(WTF::StringImpl **)a2;
      v9 = *(_DWORD *)(a1 + 12);
    }
    else
    {
      v9 = 0;
    }
    v10 = *(unsigned int *)(a2 + 12);
    if (v9 != (_DWORD)v10)
    {
      v11 = (_QWORD *)((char *)v6 + 16 * v10);
      v12 = (_QWORD *)(*(_QWORD *)a1 + 16 * v9);
      v13 = (_QWORD *)((char *)v6 + 16 * v9);
      do
      {
        v14 = (_DWORD *)*v13;
        if (*v13)
          *v14 += 2;
        *v12 = v14;
        v12[1] = v13[1];
        v13 += 2;
        v12 += 2;
      }
      while (v13 != v11);
      v9 = *(_DWORD *)(a2 + 12);
    }
    *(_DWORD *)(a1 + 12) = v9;
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::Color,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::Color *v10;
  const Color *v11;
  uint64_t v12;

  if (a2 != (uint64_t *)a1)
  {
    v4 = *(unsigned int *)(a1 + 12);
    v5 = *((unsigned int *)a2 + 3);
    if (v4 <= v5)
    {
      if (v5 > *(_DWORD *)(a1 + 8))
      {
        WTF::Vector<WebCore::Color,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebCore::Color,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *((unsigned int *)a2 + 3));
        LODWORD(v4) = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      WTF::VectorDestructor<true,WebCore::Color>::destruct((_QWORD *)(*(_QWORD *)a1 + 8 * v5), (_QWORD *)(*(_QWORD *)a1 + 8 * v4));
      *(_DWORD *)(a1 + 12) = v5;
      LODWORD(v4) = v5;
    }
    v6 = *a2;
    v7 = *(_QWORD *)a1;
    if ((_DWORD)v4)
    {
      v8 = 8 * v4;
      do
      {
        WebCore::Color::operator=();
        v6 += 8;
        v7 += 8;
        v8 -= 8;
      }
      while (v8);
      v6 = *a2;
      LODWORD(v4) = *(_DWORD *)(a1 + 12);
      v7 = *(_QWORD *)a1;
    }
    v9 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v4 != (_DWORD)v9)
    {
      v10 = (WebCore::Color *)(v7 + 8 * v4);
      v11 = (const Color *)(v6 + 8 * v4);
      v12 = 8 * v9 - 8 * v4;
      do
      {
        v10 = (WebCore::Color *)(WebCore::Color::Color(v10, v11++) + 8);
        v12 -= 8;
      }
      while (v12);
      LODWORD(v4) = *((_DWORD *)a2 + 3);
    }
    *(_DWORD *)(a1 + 12) = v4;
  }
  return a1;
}

void sub_197869618(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 1)
      WTF::fastFree(a10, a2);
    else
      --*(_DWORD *)a10;
  }
  _Unwind_Resume(exception_object);
}

void ___ZZ78__WKContentView_WKInteraction___dragInteraction_prepareForSession_completion__ENK4__81cvU13block_pointerFvN6WebKit31ProceedWithTextSelectionInImageEEEv_block_invoke(id *a1, int a2)
{
  _QWORD *WeakRetained;
  CGFloat v5;
  CGFloat v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  unint64_t v21;
  NSObject *v22;
  id v23;
  float v24[2];
  uint64_t v25;
  float v26[2];
  uint64_t v27;
  CGPoint v28;
  _BYTE buf[22];
  __int16 v30;
  CGFloat y;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained(a1 + 4);
  if (!WeakRetained || a2)
  {
    (*((void (**)(void))a1[6] + 2))();
    if (!WeakRetained)
      return;
  }
  else
  {
    objc_msgSend(a1[5], "locationInView:", WeakRetained);
    v28.x = v5;
    v28.y = v6;
    WebKit::DragDropInteractionState::prepareForDragSession((uint64_t)(WeakRetained + 388), a1[5], a1[6]);
    v7 = WeakRetained[55];
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v26, &v28);
    v8 = roundf(v26[0]);
    v9 = 0x7FFFFFFFLL;
    v10 = 0x80000000;
    if (v8 > -2147500000.0)
      v10 = (int)v8;
    if (v8 < 2147500000.0)
      v9 = v10;
    v11 = roundf(v26[1]);
    v12 = 0x7FFFFFFF00000000;
    v13 = 0x8000000000000000;
    if (v11 > -2147500000.0)
      v13 = (unint64_t)(int)v11 << 32;
    if (v11 < 2147500000.0)
      v12 = v13;
    v27 = v12 | v9;
    objc_msgSend(WeakRetained, "convertPoint:toView:", objc_msgSend(WeakRetained, "window"), v28.x, v28.y);
    *(_QWORD *)buf = v14;
    *(_QWORD *)&buf[8] = v15;
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v24, (const CGPoint *)buf);
    v16 = roundf(v24[0]);
    v17 = 0x7FFFFFFFLL;
    v18 = (int)v16;
    if (v16 <= -2147500000.0)
      v18 = 0x80000000;
    if (v16 < 2147500000.0)
      v17 = v18;
    v19 = roundf(v24[1]);
    v20 = 0x7FFFFFFF00000000;
    v21 = 0x8000000000000000;
    if (v19 > -2147500000.0)
      v21 = (unint64_t)(int)v19 << 32;
    if (v19 < 2147500000.0)
      v20 = v21;
    v25 = v20 | v17;
    WebKit::WebPageProxy::requestDragStart(v7, &v27, &v25, objc_msgSend(WeakRetained, "_allowedDragSourceActions"));
    v22 = qword_1ECE71078;
    if (os_log_type_enabled((os_log_t)qword_1ECE71078, OS_LOG_TYPE_DEFAULT))
    {
      v23 = a1[5];
      *(_DWORD *)buf = 134218496;
      *(_QWORD *)&buf[4] = v23;
      *(_WORD *)&buf[12] = 2048;
      *(CGFloat *)&buf[14] = v28.x;
      v30 = 2048;
      y = v28.y;
      _os_log_impl(&dword_196BCC000, v22, OS_LOG_TYPE_DEFAULT, "Drag session requested: %p at origin: {%.0f, %.0f}", buf, 0x20u);
    }
  }
  CFRelease(WeakRetained);
}

void sub_197869894(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_32c92_ZTSKZ78__WKContentView_WKInteraction___dragInteraction_prepareForSession_completion__E4__81(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  void *result;

  *(_QWORD *)(a1 + 32) = 0;
  v4 = a1 + 32;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
  v5 = *(const void **)(a2 + 40);
  *(_QWORD *)(v4 + 8) = v5;
  if (v5)
    CFRetain(v5);
  result = _Block_copy(*(const void **)(a2 + 48));
  *(_QWORD *)(a1 + 48) = result;
  return result;
}

void sub_197869914(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c92_ZTSKZ78__WKContentView_WKInteraction___dragInteraction_prepareForSession_completion__E4__81(uint64_t a1)
{
  const void *v2;

  _Block_release(*(const void **)(a1 + 48));
  v2 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    CFRelease(v2);
  objc_destroyWeak((id *)(a1 + 32));
}

uint64_t ___ZZ91__WKContentView_WKInteraction__selectPositionAtPoint_withContextRequest_completionHandler__EN4__91clEv_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void *__copy_helper_block_e8_32c126_ZTSKZZ91__WKContentView_WKInteraction__selectPositionAtPoint_withContextRequest_completionHandler__EN4__91clEvEUlP8NSObjectE_(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 32));
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c126_ZTSKZZ91__WKContentView_WKInteraction__selectPositionAtPoint_withContextRequest_completionHandler__EN4__91clEvEUlP8NSObjectE_(uint64_t a1)
{
  _Block_release(*(const void **)(a1 + 32));
}

void sub_197869B14(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZL18createItemProviderRKN6WebKit12WebPageProxyERKN7WebCore22PromisedAttachmentInfoE_block_invoke(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD))(a2 + 16))(a2, *(_QWORD *)(a1 + 32), 0);
  return 0;
}

CFTypeRef __copy_helper_block_e8_32c93_ZTSKZL18createItemProviderRKN6WebKit12WebPageProxyERKN7WebCore22PromisedAttachmentInfoEE3__1(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_32c93_ZTSKZL18createItemProviderRKN6WebKit12WebPageProxyERKN7WebCore22PromisedAttachmentInfoEE3__1(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    CFRelease(v2);
}

uint64_t ___ZL18createItemProviderRKN6WebKit12WebPageProxyERKN7WebCore22PromisedAttachmentInfoE_block_invoke_2854(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;

  v6 = a2;
  v2 = *(_QWORD *)(a1 + 32);
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E35071F8;
  v3[1] = &v6;
  v5 = v3;
  API::Attachment::doWithFileWrapper(v2, &v5);
  (*(void (**)(_QWORD *))(*v3 + 8))(v3);
  return 0;
}

void sub_197869BEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_32c93_ZTSKZL18createItemProviderRKN6WebKit12WebPageProxyERKN7WebCore22PromisedAttachmentInfoEE3__0(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = result;
  v3 = *(_QWORD *)(a2 + 32);
  if (v3)
    result = CFRetain(*(CFTypeRef *)(v3 + 8));
  v2[4] = v3;
  return result;
}

void __destroy_helper_block_e8_32c93_ZTSKZL18createItemProviderRKN6WebKit12WebPageProxyERKN7WebCore22PromisedAttachmentInfoEE3__0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 + 8));
}

void WTF::Detail::CallableWrapper<createItemProvider(WebKit::WebPageProxy const&,WebCore::PromisedAttachmentInfo const&)::$_0::operator() const(void({block_pointer})(NSData *,NSError *))::{lambda(NSFileWrapper *)#1},void,NSFileWrapper *>::call(uint64_t a1, void *a2)
{
  const void *v3;
  const void *v4;

  v3 = (const void *)objc_msgSend(a2, "regularFileContents");
  if (v3)
  {
    v4 = v3;
    CFRetain(v3);
    (*(void (**)(void))(**(_QWORD **)(a1 + 8) + 16))();
    CFRelease(v4);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(**(_QWORD **)(a1 + 8), 0, objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("WKErrorDomain"), 1, 0));
  }
}

void sub_197869CE8(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void std::__optional_destruct_base<WebKit::ImageAnalysisContextMenuActionData,false>::reset[abi:sn180100](uint64_t a1)
{
  const void *v2;
  const void *v3;

  if (*(_BYTE *)(a1 + 24))
  {
    v2 = *(const void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v2)
      CFRelease(v2);
    v3 = *(const void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v3)
      CFRelease(v3);
    *(_BYTE *)(a1 + 24) = 0;
  }
}

void sub_197869DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, CFTypeRef cf)
{
  uint64_t v16;
  uint64_t v17;
  void *v19;
  CFTypeRef v20;
  void *v21;
  void *v22;

  v17 = v16;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v20 = cf;
  cf = 0;
  if (v20)
    CFRelease(v20);
  WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a14, v19);
  WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a12, v21);
  WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, v22);
  _Unwind_Resume(a1);
}

void ___ZZ61__WKContentView_WKInteraction__imageAnalysisGestureDidBegin__EN4__99clEN6WebKit32InteractionInformationAtPositionE_block_invoke(uint64_t a1, void *a2)
{
  id *v4;
  _QWORD *WeakRetained;
  int v6;
  NSObject *v7;
  _BOOL8 v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  CFTypeRef v19;
  void *v20;
  CFTypeRef v21;
  void *v22;
  void *v23;
  uint64_t v24;
  id v25;
  char v26;
  CFTypeRef v27;
  _DWORD *v28;
  uint64_t v29;
  char v30[8];
  uint8_t buf[4];
  double v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  int v36;
  uint64_t v37;
  CFTypeRef cf;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if ((objc_msgSend(WeakRetained, "validateImageAnalysisRequestIdentifier:", *(_QWORD *)(a1 + 32)) & 1) != 0)
  {
    v6 = objc_msgSend(a2, "hasResultsForAnalysisTypes:", 1);
    v7 = qword_1ECE71C18;
    v8 = os_log_type_enabled((os_log_t)qword_1ECE71C18, OS_LOG_TYPE_DEFAULT);
    if (v8)
    {
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
      v10 = (v9 - *(double *)(a1 + 152)) * 1000.0;
      v11 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 134218496;
      v32 = v10;
      v33 = 2048;
      v34 = v11;
      v35 = 1024;
      v36 = v6;
      _os_log_impl(&dword_196BCC000, v7, OS_LOG_TYPE_DEFAULT, "Image analysis completed in %.0f ms (request %llu; found text? %d)",
        buf,
        0x1Cu);
    }
    v12 = WeakRetained[55];
    WebKit::makeTextRecognitionResult(a2, (uint64_t)buf);
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v30, (const IntPoint *)(a1 + 128));
    v24 = *(_QWORD *)(a1 + 32);
    v25 = 0;
    objc_copyWeak(&v25, v4);
    v26 = v6;
    v13 = *(const void **)(a1 + 136);
    v27 = v13;
    if (v13)
      CFRetain(v13);
    v14 = *(_DWORD **)(a1 + 144);
    if (v14)
      ++*v14;
    v28 = v14;
    v15 = WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)v15 = off_1E3507270;
    *(_QWORD *)(v15 + 8) = v24;
    *(_QWORD *)(v15 + 16) = 0;
    objc_moveWeak((id *)(v15 + 16), &v25);
    *(_BYTE *)(v15 + 24) = v26;
    *(_QWORD *)(v15 + 32) = v27;
    v16 = v28;
    v27 = 0;
    v28 = 0;
    *(_QWORD *)(v15 + 40) = v16;
    v29 = v15;
    WebKit::WebPageProxy::updateWithTextRecognitionResult(v12, (uint64_t)buf, a1 + 48, (uint64_t)v30, &v29);
    v17 = v29;
    v29 = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v18 = (uint64_t)v28;
    v28 = 0;
    if (v18)
      WTF::RefCounted<WebKit::ImageAnalysisGestureDeferralToken>::deref(v18);
    v19 = v27;
    v27 = 0;
    if (v19)
      CFRelease(v19);
    objc_destroyWeak(&v25);
    v21 = cf;
    cf = 0;
    if (v21)
      CFRelease(v21);
    WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, v20);
    WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34 + 2, v22);
    WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v23);
  }
  else if (!WeakRetained)
  {
    return;
  }
  CFRelease(WeakRetained);
}

void sub_19786A09C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,CFTypeRef cf)
{
  const void *v23;

  if (v23)
    CFRelease(v23);
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e16_32c156_ZTSKZZ61__WKContentView_WKInteraction__imageAnalysisGestureDidBegin__EN4__99clEN6WebKit32InteractionInformationAtPositionEEUlP16VKCImageAnalysisP7NSErrorE_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  CFTypeRef result;
  _DWORD *v11;

  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  v5 = a1 + 40;
  *(_QWORD *)(a1 + 32) = v4;
  objc_copyWeak((id *)(a1 + 40), (id *)(a2 + 40));
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v5 + 24) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v5 + 8) = v6;
  v7 = *(_OWORD *)(a2 + 80);
  v8 = *(_OWORD *)(a2 + 96);
  v9 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(v5 + 88) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(v5 + 72) = v9;
  *(_OWORD *)(v5 + 56) = v8;
  *(_OWORD *)(v5 + 40) = v7;
  result = *(CFTypeRef *)(a2 + 136);
  *(_QWORD *)(v5 + 96) = result;
  if (result)
    result = CFRetain(result);
  v11 = *(_DWORD **)(a2 + 144);
  if (v11)
    ++*v11;
  *(_QWORD *)(a1 + 144) = v11;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  return result;
}

void sub_19786A1E4(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e16_32c156_ZTSKZZ61__WKContentView_WKInteraction__imageAnalysisGestureDidBegin__EN4__99clEN6WebKit32InteractionInformationAtPositionEEUlP16VKCImageAnalysisP7NSErrorE_(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
    WTF::RefCounted<WebKit::ImageAnalysisGestureDeferralToken>::deref(v2);
  v3 = *(const void **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v3)
    CFRelease(v3);
  objc_destroyWeak((id *)(a1 + 40));
}

void sub_19786A3A4(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::RefCounted<WebKit::ImageAnalysisGestureDeferralToken>::deref(uint64_t result)
{
  uint64_t v1;
  id WeakRetained;
  const void *v3;
  void *v4;

  v1 = result;
  if (*(_DWORD *)result == 1)
  {
    WeakRetained = objc_loadWeakRetained((id *)(result + 8));
    v3 = WeakRetained;
    if (WeakRetained)
    {
      objc_msgSend(WeakRetained, "_endImageAnalysisGestureDeferral:", *(unsigned __int8 *)(v1 + 16));
      CFRelease(v3);
    }
    objc_destroyWeak((id *)(v1 + 8));
    return WTF::fastFree((WTF *)v1, v4);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void sub_19786A43C(_Unwind_Exception *a1)
{
  id *v1;
  const void *v2;

  CFRelease(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZL55shouldUseMachineReadableCodeMenuFromImageAnalysisResultP16VKCImageAnalysis_block_invoke(uint64_t a1, void *a2)
{
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend(a2, "isLiveCameraOnlyAction");
  else
    return 0;
}

WTF *WTF::ThreadSafeRefCounted<WTF::Box<WebKit::ImageAnalysisContextMenuActionData>::Data,(WTF::DestructionThread)0>::deref(WTF *this, void *a2)
{
  WTF *v2;
  unsigned int v3;
  unsigned int v4;
  const void *v5;
  const void *v6;

  v2 = this;
  do
  {
    v3 = __ldaxr((unsigned int *)this);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, (unsigned int *)this));
  if (!v4)
  {
    atomic_store(1u, (unsigned int *)this);
    v5 = (const void *)*((_QWORD *)this + 3);
    *((_QWORD *)v2 + 3) = 0;
    if (v5)
      CFRelease(v5);
    v6 = (const void *)*((_QWORD *)v2 + 2);
    *((_QWORD *)v2 + 2) = 0;
    if (v6)
      CFRelease(v6);
    return (WTF *)WTF::fastFree(v2, a2);
  }
  return this;
}

void sub_19786A8A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  const void *v31;
  const void *v32;

  if (v32)
    CFRelease(v32);
  if (v31)
    CFRelease(v31);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZZ85__WKContentView_WKInteraction___insertDynamicImageAnalysisContextMenuItemsIfPossible_ENK3__4clEP6UIMenu_block_invoke(_QWORD *a1, void *a2)
{
  uint64_t result;
  uint64_t v5;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    a2 = 0;
  result = objc_msgSend((id)objc_msgSend(a2, "identifier"), "isEqualToString:", a1[4]);
  if ((_DWORD)result)
  {
    v5 = a1[6];
  }
  else
  {
    result = objc_msgSend((id)objc_msgSend(a2, "identifier"), "isEqualToString:", a1[5]);
    if (!(_DWORD)result)
      return result;
    v5 = a1[7];
  }
  *(_BYTE *)(*(_QWORD *)(v5 + 8) + 24) = 1;
  return result;
}

void sub_19786AA40(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZL40wkLegacyPreviewActionsFromElementActionsP7NSArrayIP16_WKElementActionEP23_WKActivatedElementInfo_block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "runActionWithElementInfo:", *(_QWORD *)(a1 + 40));
}

uint64_t ___ZL30uiActionForLegacyPreviewActionP15UIPreviewActionP16UIViewController_block_invoke(uint64_t a1)
{
  uint64_t v2;

  v2 = objc_msgSend(*(id *)(a1 + 32), "handler");
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v2 + 16))(v2, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void ___ZZ113__WKContentView_WKInteractionPreview___internalContextMenuInteraction_configurationForMenuAtLocation_completion__ENK5__124cvU13block_pointerFvN6WebKit31ProceedWithTextSelectionInImageEEEv_block_invoke(uint64_t a1, int a2)
{
  _BYTE *WeakRetained;
  id v5;
  void *v6;
  CGFloat v7;
  CGFloat v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *aBlock;
  CGPoint v19;
  void (*v20)(uint64_t);
  void *v21;
  id v22;
  void *v23;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (!WeakRetained || a2)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    if (!v5)
      return;
  }
  else
  {
    WeakRetained[1216] = 1;
    v6 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "objectForKey:", CFSTR("WebKitShowLinkPreviews"));
    if (v6)
      *((_BYTE *)v5 + 1216) = objc_msgSend(v6, "BOOLValue");
    objc_msgSend(*(id *)(a1 + 40), "locationInView:", v5);
    v19.x = v7;
    v19.y = v8;
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v17, &v19);
    v9 = roundf(*(float *)&v17);
    v10 = 0x80000000;
    if (v9 > -2147500000.0)
      v10 = (int)v9;
    if (v9 < 2147500000.0)
      v11 = v10;
    else
      v11 = 0x7FFFFFFFLL;
    v12 = roundf(*((float *)&v17 + 1));
    v13 = 0x8000000000000000;
    if (v12 > -2147500000.0)
      v13 = (unint64_t)(int)v12 << 32;
    if (v12 < 2147500000.0)
      v14 = v13;
    else
      v14 = 0x7FFFFFFF00000000;
    if (objc_msgSend(v5, "_shouldUseContextMenus"))
      v15 = 16777473;
    else
      v15 = 0x1000001000101;
    if (objc_msgSend(objc_loadWeak((id *)v5 + 56), "_allowAnimationControls"))
      v16 = 0x10000000000;
    else
      v16 = 0;
    *(_QWORD *)&v19.x = MEMORY[0x1E0C809B0];
    *(_QWORD *)&v19.y = 3321888768;
    v20 = ___ZZ113__WKContentView_WKInteractionPreview___internalContextMenuInteraction_configurationForMenuAtLocation_completion__ENK5__124clEN6WebKit31ProceedWithTextSelectionInImageE_block_invoke;
    v21 = &__block_descriptor_48_e8_32c221_ZTSKZZ113__WKContentView_WKInteractionPreview___internalContextMenuInteraction_configurationForMenuAtLocation_completion__ENK5__124clEN6WebKit31ProceedWithTextSelectionInImageEEUlNS0_32InteractionInformationAtPositionEE__e4285_v648__0_InteractionInformationAtPosition__InteractionInformationRequest__IntPoint_ii_BBBBBBB_B_optional_BOOL_____cB_B_CBBBBBBBBBBBBB_Markable_WebCore::ProcessQualified_WTF::ObjectIdentifierGeneric_WebCore::ScrollingNodeIDType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long____WebCore::ProcessQualified_WTF::ObjectIdentifierGeneric_WebCore::ScrollingNodeIDType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__::MarkableTraits___ProcessQualified_WTF::ObjectIdentifierGeneric_WebCore::ScrollingNodeIDType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long____ObjectIdentifierGeneric_WebCore::ScrollingNodeIDType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q__ObjectIdentifierGeneric_WebCore::ProcessIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q___BBBBBB_FloatPoint_ff__URL__String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl___b1b1b1b3b26IIIIIII__URL__String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl___b1b1b1b3b26IIIIIII__String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl____String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl____String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl____IntRect__IntPoint_ii__IntSize_ii___RefPtr_WebCore::ShareableBitmap__WTF::RawPtrTraits_WebCore::ShareableBitmap___WTF::DefaultRefDerefTraits_WebCore::ShareableBitmap_____ShareableBitmap___String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl____String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl___f_FloatRect__FloatPoint_ff__FloatSize_ff___optional_WebCore::Cursor_____c_Cursor_C_RefPtr_WebCore::Image__WTF::RawPtrTraits_WebCore::Image___WTF::DefaultRefDerefTraits_WebCore::Image_____Image___IntPoint_ii__v__B__TextIndicatorData__FloatRect__FloatPoint_ff__FloatSize_ff___FloatRect__FloatPoint_ff__FloatSize_ff___FloatRect__FloatPoint_ff__FloatSize_ff___Vector_WebCore::FloatRect__0UL__WTF::CrashOnOverflow__16UL__WTF::FastMalloc____FloatRect_II_f_RefPtr_WebCore::Image__WTF::RawPtrTraits_WebCore::Image___WTF::DefaultRefDerefTraits_WebCore::Image_____Image___RefPtr_WebCore::Image__WTF::RawPtrTraits_WebCore::Image___WTF::DefaultRefDerefTraits_WebCore::Image_____Image___RefPtr_WebCore::Image__WTF::RawPtrTraits_WebCore::Image___WTF::DefaultRefDerefTraits_WebCore::Image_____Image___Color_Q_C_OptionSet_WebCore::TextIndicatorOption__S___String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl____RetainPtr_NSArray___v__IntRect__IntPoint_ii__IntSize_ii___optional_WebCore::ElementContext_____c_ElementContext__FloatRect__FloatPoint_ff__FloatSize_ff___ObjectIdentifierGeneric_WebCore::PageIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q__ProcessQualified_WTF::UUID___UUID_T__ObjectIdentifierGeneric_WebCore::ProcessIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q___ObjectIdentifierGeneric_WebCore::ElementIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q___B__optional_WebCore::ElementContext_____c_ElementContext__FloatRect__FloatPoint_ff__FloatSize_ff___ObjectIdentifierGeneric_WebCore::PageIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q__ProcessQualified_WTF::UUID___UUID_T__ObjectIdentifierGeneric_WebCore::ProcessIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q___ObjectIdentifierGeneric_WebCore::ElementIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q___B__Vector_WebCore::ElementAnimationContext__0UL__WTF::CrashOnOverflow__16UL__WTF::FastMalloc____ElementAnimationContext_II__8l;
    v17 = 0;
    objc_initWeak(&v17, v5);
    aBlock = _Block_copy(*(const void **)(a1 + 48));
    v22 = 0;
    objc_copyWeak(&v22, &v17);
    v23 = _Block_copy(aBlock);
    objc_msgSend(v5, "doAfterPositionInformationUpdate:forRequest:", &v19, v14 | v11, v16 | v15);
    _Block_release(aBlock);
    objc_destroyWeak(&v17);
    _Block_release(v23);
    objc_destroyWeak(&v22);
  }
  CFRelease(v5);
}

void sub_19786AC84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *aBlock)
{
  const void *v16;

  if (v16)
    CFRelease(v16);
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_32c129_ZTSKZ113__WKContentView_WKInteractionPreview___internalContextMenuInteraction_configurationForMenuAtLocation_completion__E5__124(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  void *result;

  *(_QWORD *)(a1 + 32) = 0;
  v4 = a1 + 32;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
  v5 = *(const void **)(a2 + 40);
  *(_QWORD *)(v4 + 8) = v5;
  if (v5)
    CFRetain(v5);
  result = _Block_copy(*(const void **)(a2 + 48));
  *(_QWORD *)(a1 + 48) = result;
  return result;
}

void sub_19786AD54(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c129_ZTSKZ113__WKContentView_WKInteractionPreview___internalContextMenuInteraction_configurationForMenuAtLocation_completion__E5__124(uint64_t a1)
{
  const void *v2;

  _Block_release(*(const void **)(a1 + 48));
  v2 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    CFRelease(v2);
  objc_destroyWeak((id *)(a1 + 32));
}

void ___ZZ113__WKContentView_WKInteractionPreview___internalContextMenuInteraction_configurationForMenuAtLocation_completion__ENK5__124clEN6WebKit31ProceedWithTextSelectionInImageE_block_invoke(uint64_t a1)
{
  id WeakRetained;
  uint64_t v3;
  const void *v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = *(_QWORD *)(a1 + 40);
  if (WeakRetained)
  {
    v4 = WeakRetained;
    objc_msgSend(WeakRetained, "continueContextMenuInteraction:", v3);
    CFRelease(v4);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v3 + 16))(*(_QWORD *)(a1 + 40), 0);
  }
}

void sub_19786AE08(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c221_ZTSKZZ113__WKContentView_WKInteractionPreview___internalContextMenuInteraction_configurationForMenuAtLocation_completion__ENK5__124clEN6WebKit31ProceedWithTextSelectionInImageEEUlNS0_32InteractionInformationAtPositionEE_(uint64_t a1, uint64_t a2)
{
  void *result;

  *(_QWORD *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_19786AE64(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c221_ZTSKZZ113__WKContentView_WKInteractionPreview___internalContextMenuInteraction_configurationForMenuAtLocation_completion__ENK5__124clEN6WebKit31ProceedWithTextSelectionInImageEEUlNS0_32InteractionInformationAtPositionEE_(uint64_t a1)
{
  id *v1;

  v1 = (id *)(a1 + 32);
  _Block_release(*(const void **)(a1 + 40));
  objc_destroyWeak(v1);
}

void sub_19786B278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location, CFTypeRef a11, CFTypeRef a12, char a13, CFTypeRef a14, uint64_t a15, uint64_t a16, uint64_t a17, CFTypeRef cf, CFTypeRef a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,CFTypeRef a25)
{
  const void *v25;
  const void *v26;
  id *v27;
  id *v28;
  uint64_t v29;
  CFTypeRef v31;
  CFTypeRef v32;
  CFTypeRef v33;
  CFTypeRef v34;
  const void *v35;

  v31 = cf;
  cf = 0;
  if (v31)
    CFRelease(v31);
  objc_destroyWeak(v28);
  v32 = a12;
  a12 = 0;
  if (v32)
    CFRelease(v32);
  v33 = a11;
  a11 = 0;
  if (v33)
    CFRelease(v33);
  objc_destroyWeak(&location);
  v34 = a25;
  a25 = 0;
  if (v34)
    CFRelease(v34);
  objc_destroyWeak(v27);
  if (v26)
    CFRelease(v26);
  v35 = *(const void **)(v29 - 88);
  *(_QWORD *)(v29 - 88) = 0;
  if (v35)
    CFRelease(v35);
  CFRelease(v25);
  _Unwind_Resume(a1);
}

uint64_t ___ZZ70__WKContentView_WKInteractionPreview__continueContextMenuInteraction__EN5__120clEP26UIContextMenuConfiguration_block_invoke(uint64_t a1)
{
  _QWORD *WeakRetained;
  _QWORD *v3;
  void *v4;
  CFTypeRef v5;
  char v6;
  uint64_t v7;
  const void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  const __CFString *v12;
  CFTypeRef v13;
  const void *v15;
  CFTypeRef v16;
  CFTypeRef cf;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (!WeakRetained)
    return 0;
  v3 = WeakRetained;
  v4 = (void *)WeakRetained[104];
  if (!v4)
  {
    v5 = 0;
    v16 = 0;
    cf = 0;
    goto LABEL_7;
  }
  objc_msgSend(v4, "defaultActionsForImageSheet:", *(_QWORD *)(a1 + 40));
  v5 = cf;
  v16 = cf;
  if (!cf)
  {
LABEL_7:
    v6 = 1;
    goto LABEL_8;
  }
  CFRetain(cf);
  v6 = 0;
LABEL_8:
  v8 = *(const void **)(a1 + 40);
  v15 = v8;
  if (v8)
    CFRetain(v8);
  v9 = menuElementsFromDefaultActions((id *)&v16, &v15);
  if (v8)
    CFRelease(v8);
  if ((v6 & 1) == 0)
    CFRelease(v5);
  v10 = objc_msgSend(v3, "placeholderForDynamicallyInsertedImageAnalysisActions");
  if (v10 || (v10 = objc_msgSend(v3, "machineReadableCodeSubMenuForImageContextMenu")) != 0)
    objc_msgSend(v9, "addObject:", v10);
  v11 = (void *)MEMORY[0x1E0CEA740];
  if (v3[210])
    v12 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v12 = &stru_1E351F1B8;
  v7 = objc_msgSend(v11, "menuWithTitle:children:", v12, v9);
  v13 = cf;
  cf = 0;
  if (v13)
    CFRelease(v13);
  CFRelease(v3);
  return v7;
}

void sub_19786B514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  const void *v12;

  if (cf)
    CFRelease(cf);
  CFRelease(v12);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c151_ZTSKZZ70__WKContentView_WKInteractionPreview__continueContextMenuInteraction__EN5__120clEP26UIContextMenuConfigurationEUlP7NSArrayIP13UIMenuElementEE_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CFTypeRef result;

  *(_QWORD *)(a1 + 32) = 0;
  v3 = a1 + 32;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(v3 + 8) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void sub_19786B5B4(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c151_ZTSKZZ70__WKContentView_WKInteractionPreview__continueContextMenuInteraction__EN5__120clEP26UIContextMenuConfigurationEUlP7NSArrayIP13UIMenuElementEE_(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    CFRelease(v2);
  objc_destroyWeak((id *)(a1 + 32));
}

CFTypeRef ___ZZ70__WKContentView_WKInteractionPreview__continueContextMenuInteraction__EN5__120clEP26UIContextMenuConfiguration_block_invoke_2948(uint64_t a1)
{
  _QWORD *WeakRetained;
  _QWORD *v3;
  void *v4;
  CFTypeRef v5;
  WKImagePreviewViewController *v6;
  const void *v7;
  const void *v8;
  CFTypeRef v9;
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef cf;
  CFTypeRef v14;
  CFTypeRef v15;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (!WeakRetained)
    return 0;
  v3 = WeakRetained;
  v4 = (void *)objc_msgSend(WeakRetained, "webViewUIDelegate");
  if ((objc_opt_respondsToSelector() & 1) == 0
    || (v5 = (CFTypeRef)objc_msgSend(v4, "_webView:contextMenuContentPreviewForElement:", objc_msgSend(v3, "webView"), v3[151])) == 0)
  {
    v6 = [WKImagePreviewViewController alloc];
    v7 = *(const void **)(a1 + 40);
    v15 = v7;
    if (v7)
      CFRetain(v7);
    v8 = *(const void **)(a1 + 48);
    cf = v8;
    v14 = 0;
    if (v8)
      CFRetain(v8);
    v5 = (id)CFMakeCollectable(-[WKImagePreviewViewController initWithCGImage:defaultActions:elementInfo:](v6, "initWithCGImage:defaultActions:elementInfo:", &v15, &v14, &cf));
    v9 = cf;
    cf = 0;
    if (v9)
      CFRelease(v9);
    v10 = v14;
    v14 = 0;
    if (v10)
      CFRelease(v10);
    v11 = v15;
    v15 = 0;
    if (v11)
      CFRelease(v11);
  }
  CFRelease(v3);
  return v5;
}

void sub_19786B710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, CFTypeRef a11, CFTypeRef cf)
{
  const void *v12;

  if (a11)
    CFRelease(a11);
  if (cf)
    CFRelease(cf);
  CFRelease(v12);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c126_ZTSKZZ70__WKContentView_WKInteractionPreview__continueContextMenuInteraction__EN5__120clEP26UIContextMenuConfigurationEUlvE0_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  CFTypeRef result;

  *(_QWORD *)(a1 + 32) = 0;
  v4 = a1 + 32;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
  v5 = *(const void **)(a2 + 40);
  *(_QWORD *)(v4 + 8) = v5;
  if (v5)
    CFRetain(v5);
  result = *(CFTypeRef *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void sub_19786B7D0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;
  const void *v4;

  v4 = *(const void **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;
  if (v4)
    CFRelease(v4);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c126_ZTSKZZ70__WKContentView_WKInteractionPreview__continueContextMenuInteraction__EN5__120clEP26UIContextMenuConfigurationEUlvE0_(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    CFRelease(v3);
  objc_destroyWeak((id *)(a1 + 32));
}

void ___ZZ95__WKContentView_WKInteractionPreview__contextMenuInteraction_willEndForConfiguration_animator__ENK5__128cvU13block_pointerFvvEEv_block_invoke(uint64_t a1)
{
  id *WeakRetained;
  id *v2;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    *((_BYTE *)WeakRetained + 1288) = 0;
    objc_msgSend(WeakRetained, "_removeContextMenuHintContainerIfPossible");
    objc_msgSend(objc_loadWeak(v2 + 56), "_didDismissContextMenu");
    objc_msgSend(v2, "_stopSuppressingSelectionAssistantForReason:", 4);
    CFRelease(v2);
  }
}

void sub_19786B9A0(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c110_ZTSKZ95__WKContentView_WKInteractionPreview__contextMenuInteraction_willEndForConfiguration_animator__E5__128(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c110_ZTSKZ95__WKContentView_WKInteractionPreview__contextMenuInteraction_willEndForConfiguration_animator__E5__128(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 32));
}

void sub_19786BA78(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_19786BB3C(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_19786BC00(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WTF::VectorMover<false,std::optional<std::pair<WebKit::InteractionInformationRequest,WTF::BlockPtr<void ()(WebKit::InteractionInformationAtPosition)>>>>::move(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = a1;
    v5 = (_BYTE *)(a3 + 24);
    do
    {
      *(v5 - 24) = 0;
      *v5 = 0;
      if (*(_BYTE *)(v4 + 24))
      {
        *(_OWORD *)(v5 - 24) = *(_OWORD *)v4;
        v6 = *(_QWORD *)(v4 + 16);
        *(_QWORD *)(v4 + 16) = 0;
        *((_QWORD *)v5 - 1) = v6;
        *v5 = 1;
        if (*(_BYTE *)(v4 + 24))
          _Block_release(*(const void **)(v4 + 16));
      }
      v4 += 32;
      v5 += 32;
    }
    while (v4 != a2);
  }
}

void sub_19786BFF8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, WTF::StringImpl *a15, uint64_t a16)
{
  uint64_t v16;
  WTF::StringImpl *v18;

  v18 = *(WTF::StringImpl **)(v16 - 48);
  *(_QWORD *)(v16 - 48) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_19786C2D4(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t selectionChangedWithGesture(void *a1, uint64_t a2, int a3, int a4, char a5)
{
  uint64_t v9;
  uint64_t v10;

  WebCore::IntPoint::operator CGPoint();
  if ((a3 - 1) > 6)
    v9 = 0;
  else
    v9 = qword_1978D2B98[(char)(a3 - 1)];
  if ((a4 - 1) < 5)
    v10 = (a4 - 1) + 1;
  else
    v10 = 0;
  return objc_msgSend(a1, "selectionChangedWithGestureAt:withGesture:withState:withFlags:", v9, v10, a5 & 7);
}

void sub_19786CEDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, uint64_t a11, uint64_t a12)
{
  const void *v12;

  CFRelease(v12);
  _Unwind_Resume(a1);
}

void sub_19786D09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;

  CFRelease(v10);
  _Unwind_Resume(a1);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZ95__WKContentView_WKInteraction__requestPreferredArrowDirectionForEditMenuWithCompletionHandler__EN4__40clEvENUlvE_clEvEUlRT_E_vJRKNS_6VectorIN7WebCore9FloatRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3507810;
  _Block_release(*(const void **)(a1 + 8));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZ95__WKContentView_WKInteraction__requestPreferredArrowDirectionForEditMenuWithCompletionHandler__EN4__40clEvENUlvE_clEvEUlRT_E_vJRKNS_6VectorIN7WebCore9FloatRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEED0Ev(const void **a1)
{
  void *v2;

  *a1 = off_1E3507810;
  _Block_release(a1[1]);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZ95__WKContentView_WKInteraction__requestPreferredArrowDirectionForEditMenuWithCompletionHandler__EN4__40clEvENUlvE_clEvEUlRT_E_vJRKNS_6VectorIN7WebCore9FloatRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEE4callESE_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

void sub_19786D3DC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef a11, CFTypeRef cf, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,CFTypeRef a29,WTF::StringImpl *a30)
{
  uint64_t v30;

  if (a18)
  {
    if (*(_DWORD *)a18 == 2)
      WTF::StringImpl::destroy(a18, a2);
    else
      *(_DWORD *)a18 -= 2;
  }
  if (cf)
    CFRelease(cf);
  if (a11)
    CFRelease(a11);
  if (a30)
  {
    if (*(_DWORD *)a30 == 2)
      WTF::StringImpl::destroy(a30, a2);
    else
      *(_DWORD *)a30 -= 2;
  }
  if (a29)
    CFRelease(a29);
  std::__optional_destruct_base<WebKit::RemoveBackgroundData,false>::~__optional_destruct_base[abi:sn180100](v30 - 160, a2);
  _Unwind_Resume(a1);
}

__n128 std::__optional_storage_base<WebKit::RemoveBackgroundData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::RemoveBackgroundData,false>>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  const void *v8;
  __n128 result;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  if (*(unsigned __int8 *)(a1 + 96) == *(unsigned __int8 *)(a2 + 96))
  {
    if (*(_BYTE *)(a1 + 96))
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v4 = *(_OWORD *)(a2 + 16);
      v5 = *(_OWORD *)(a2 + 32);
      v6 = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 32) = v5;
      *(_OWORD *)(a1 + 48) = v6;
      *(_OWORD *)(a1 + 16) = v4;
      v7 = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a2 + 80) = 0;
      v8 = *(const void **)(a1 + 80);
      *(_QWORD *)(a1 + 80) = v7;
      if (v8)
        CFRelease(v8);
      WTF::String::operator=((WTF::StringImpl **)(a1 + 88), (WTF::StringImpl *)(a2 + 88));
    }
  }
  else if (*(_BYTE *)(a1 + 96))
  {
    std::__optional_destruct_base<WebKit::RemoveBackgroundData,false>::reset[abi:sn180100](a1, (WTF::StringImpl *)a2);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    result = *(__n128 *)(a2 + 16);
    v10 = *(_OWORD *)(a2 + 32);
    v11 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v11;
    *(__n128 *)(a1 + 16) = result;
    *(_OWORD *)(a1 + 32) = v10;
    v12 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a1 + 80) = v12;
    v13 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a2 + 88) = 0;
    *(_QWORD *)(a1 + 88) = v13;
    *(_BYTE *)(a1 + 96) = 1;
  }
  return result;
}

void sub_19786D7D8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  const void *v21;
  id *v22;
  WTF *v23;
  uint64_t v25;

  v25 = *((_QWORD *)v23 + 12);
  *((_QWORD *)v23 + 12) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  WTF::fastFree(v23, a2);
  objc_destroyWeak(v22);
  if (a21)
    (*(void (**)(uint64_t))(*(_QWORD *)a21 + 8))(a21);
  CFRelease(v21);
  _Unwind_Resume(a1);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ89__WKContentView_WKInteraction__doAfterComputingImageAnalysisResultsForBackgroundRemoval__EN4__42clEbEUlONSt3__18optionalIN7WebCore21ShareableBitmapHandleEEERT_E_vJS8_RKNS_6StringEEED1Ev(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1E3507888;
  objc_destroyWeak((id *)(a1 + 104));
  v2 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ89__WKContentView_WKInteraction__doAfterComputingImageAnalysisResultsForBackgroundRemoval__EN4__42clEbEUlONSt3__18optionalIN7WebCore21ShareableBitmapHandleEEERT_E_vJS8_RKNS_6StringEEED0Ev(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E3507888;
  objc_destroyWeak((id *)(a1 + 104));
  v3 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree((WTF *)a1, v2);
}

void _ZN3WTF6Detail15CallableWrapperIZZ89__WKContentView_WKInteraction__doAfterComputingImageAnalysisResultsForBackgroundRemoval__EN4__42clEbEUlONSt3__18optionalIN7WebCore21ShareableBitmapHandleEEERT_E_vJS8_RKNS_6StringEEE4callES8_SE_(uint64_t a1, uint64_t a2, WTF::StringImpl **a3)
{
  id *v6;
  id WeakRetained;
  const void *v8;
  PAL *v9;
  WTF::StringImpl *v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  CFTypeRef v31;
  WTF *v32;
  uint64_t v33;
  CFTypeRef cf;
  WTF *v35;
  WTF::StringImpl *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  id v43[3];

  v43[2] = *(id *)MEMORY[0x1E0C80C00];
  v6 = (id *)(a1 + 104);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    v8 = WeakRetained;
    if (*(_BYTE *)(a2 + 64))
    {
      WebCore::ShareableBitmap::create();
      if (v35)
      {
        WebCore::ShareableBitmap::makeCGImage();
        v9 = (PAL *)cf;
        if (cf)
        {
          v10 = *a3;
          if (*a3)
            *(_DWORD *)v10 += 2;
          v36 = v10;
          v11 = *(_OWORD *)(a1 + 64);
          v39 = *(_OWORD *)(a1 + 48);
          v40 = v11;
          v12 = *(_QWORD *)(a1 + 80);
          v13 = *(_OWORD *)(a1 + 32);
          v37 = *(_OWORD *)(a1 + 16);
          v38 = v13;
          v14 = *(_QWORD *)(a1 + 96);
          *(_QWORD *)(a1 + 96) = 0;
          *(_QWORD *)&v41 = v12;
          v42 = v14;
          v43[0] = 0;
          objc_copyWeak(v43, v6);
          v15 = WTF::fastMalloc((WTF *)0x80);
          v16 = v15;
          *(_QWORD *)v15 = off_1E35078B0;
          v17 = v36;
          if (v36)
            *(_DWORD *)v36 += 2;
          *(_QWORD *)(v15 + 120) = 0;
          *(_QWORD *)(v15 + 16) = v17;
          v19 = v40;
          v18 = v41;
          v20 = v39;
          v21 = v37;
          *(_OWORD *)(v15 + 48) = v38;
          *(_OWORD *)(v15 + 64) = v20;
          *(_OWORD *)(v15 + 80) = v19;
          *(_OWORD *)(v15 + 96) = v18;
          *(_OWORD *)(v15 + 32) = v21;
          v22 = v42;
          v42 = 0;
          *(_QWORD *)(v15 + 112) = v22;
          objc_moveWeak((id *)(v15 + 120), v43);
          v33 = v16;
          WebKit::requestBackgroundRemoval(v9, &v33);
          v23 = v33;
          v33 = 0;
          if (v23)
            (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          objc_destroyWeak(v43);
          v25 = v42;
          v42 = 0;
          if (v25)
            (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
          v26 = v36;
          v36 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
              WTF::StringImpl::destroy(v26, v24);
            else
              *(_DWORD *)v26 -= 2;
          }
        }
        else
        {
          v30 = *(_QWORD *)(a1 + 96);
          *(_QWORD *)(a1 + 96) = 0;
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30);
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
        }
        v31 = cf;
        cf = 0;
        if (v31)
          CFRelease(v31);
      }
      else
      {
        v29 = *(_QWORD *)(a1 + 96);
        *(_QWORD *)(a1 + 96) = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
      }
      v32 = v35;
      v35 = 0;
      if (v32)
        WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v32, v24);
    }
    else
    {
      v28 = *(_QWORD *)(a1 + 96);
      *(_QWORD *)(a1 + 96) = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    }
    CFRelease(v8);
  }
  else
  {
    v27 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 96) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  }
}

void sub_19786DBCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf, WTF *a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  const void *v25;
  uint64_t v26;
  void *v28;

  (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  if (cf)
    CFRelease(cf);
  if (a12)
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)a12, v28);
  CFRelease(v25);
  _Unwind_Resume(a1);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZ89__WKContentView_WKInteraction__doAfterComputingImageAnalysisResultsForBackgroundRemoval__EN4__42clEbENUlONSt3__18optionalIN7WebCore21ShareableBitmapHandleEEERT_E_clIKNS_6StringEEEDaS8_SA_EUlP7CGImageE_vJSH_EED1Ev(uint64_t a1)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;

  *(_QWORD *)a1 = off_1E35078B0;
  objc_destroyWeak((id *)(a1 + 120));
  v3 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZ89__WKContentView_WKInteraction__doAfterComputingImageAnalysisResultsForBackgroundRemoval__EN4__42clEbENUlONSt3__18optionalIN7WebCore21ShareableBitmapHandleEEERT_E_clIKNS_6StringEEEDaS8_SA_EUlP7CGImageE_vJSH_EED0Ev(uint64_t a1)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;

  *(_QWORD *)a1 = off_1E35078B0;
  objc_destroyWeak((id *)(a1 + 120));
  v3 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree((WTF *)a1, v2);
}

void _ZN3WTF6Detail15CallableWrapperIZZZ89__WKContentView_WKInteraction__doAfterComputingImageAnalysisResultsForBackgroundRemoval__EN4__42clEbENUlONSt3__18optionalIN7WebCore21ShareableBitmapHandleEEERT_E_clIKNS_6StringEEEDaS8_SA_EUlP7CGImageE_vJSH_EE4callESH_(uint64_t a1, const void *a2)
{
  id WeakRetained;
  WTF::StringImpl *v5;
  const void *v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[5];
  const void *v17;
  _DWORD *v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 120));
  if (WeakRetained)
  {
    v6 = WeakRetained;
    if (a2)
    {
      v13 = *(_OWORD *)(a1 + 64);
      v14 = *(_OWORD *)(a1 + 80);
      *(_QWORD *)&v15 = *(_QWORD *)(a1 + 96);
      v11 = *(_OWORD *)(a1 + 32);
      v12 = *(_OWORD *)(a1 + 48);
      CFRetain(a2);
      v7 = *(_DWORD **)(a1 + 16);
      if (v7)
        *v7 += 2;
      v16[2] = v13;
      v16[3] = v14;
      v16[4] = v15;
      v16[0] = v11;
      v16[1] = v12;
      v17 = a2;
      v18 = v7;
      v19 = 1;
      std::__optional_storage_base<WebKit::RemoveBackgroundData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::RemoveBackgroundData,false>>((uint64_t)v6 + 3952, (uint64_t)v16);
      std::__optional_destruct_base<WebKit::RemoveBackgroundData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v16, v8);
    }
    else
    {
      std::__optional_destruct_base<WebKit::RemoveBackgroundData,false>::reset[abi:sn180100]((uint64_t)WeakRetained + 3952, v5);
    }
    v10 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    CFRelease(v6);
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
}

void sub_19786DF78(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t *WTF::Vector<WebCore::TextAlternativeWithRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  const void *v11;

  v3 = result;
  *result = 0;
  result[1] = 0;
  if (!a3)
    return v3;
  if (a3 < 0xAAAAAAB)
  {
    v6 = 24 * a3;
    v7 = WTF::fastMalloc((WTF *)(24 * a3));
    *((_DWORD *)v3 + 2) = v6 / 0x18;
    *v3 = v7;
    v8 = a2 + 24 * a3;
    v9 = *((_DWORD *)v3 + 3);
    do
    {
      v10 = *v3 + 24 * v9;
      *(_OWORD *)v10 = *(_OWORD *)a2;
      v11 = *(const void **)(a2 + 16);
      *(_QWORD *)(v10 + 16) = v11;
      if (v11)
        CFRetain(v11);
      v9 = *((_DWORD *)v3 + 3) + 1;
      *((_DWORD *)v3 + 3) = v9;
      a2 += 24;
    }
    while (a2 != v8);
    return v3;
  }
  __break(0xC471u);
  return result;
}

void sub_19786E920(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  v4 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_19786EC58(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF *a21,int a22)
{
  uint64_t v22;

  if (a21)
    WTF::fastFree(a21, a2);
  CFRelease(*(CFTypeRef *)(v22 + 8));
  CFRelease(cf);
  _Unwind_Resume(a1);
}

void sub_19786EE38(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_19786EFDC(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

unint64_t WTF::Vector<WebKit::KeyEventAndCompletionBlock,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::KeyEventAndCompletionBlock,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::KeyEventAndCompletionBlock,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<WebKit::KeyEventAndCompletionBlock,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  const void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    v4 = *(const void ***)a1;
    v5 = *(unsigned int *)(a1 + 12);
    if (a2 < 2)
    {
      v6 = (_QWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 1;
    }
    else
    {
      if (a2 >> 28)
      {
        __break(0xC471u);
        return;
      }
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(a1 + 8) = v2;
      *(_QWORD *)a1 = v6;
    }
    WTF::VectorMover<false,WebKit::KeyEventAndCompletionBlock>::move(v4, &v4[2 * v5], v6);
    if ((const void **)(a1 + 16) != v4 && v4 != 0)
    {
      if (*(const void ***)a1 == v4)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v4, v7);
    }
  }
}

void sub_19786F43C(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_19786F4EC(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_19786F5E0(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_19786F874(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *aBlock, uint64_t a10, WTF::StringImpl *a11, CFTypeRef cf, uint64_t a13, CFTypeRef a14, uint64_t a15, uint64_t a16)
{
  if (cf)
    CFRelease(cf);
  if (aBlock)
  {
    if (*(_DWORD *)aBlock == 2)
      WTF::StringImpl::destroy(aBlock, a2);
    else
      *(_DWORD *)aBlock -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ102__WKContentView_WKInteraction___internalSelectTextForContextMenuWithLocationInView_completionHandler__ENK4__75clIKN6WebKit10RevealItemEEEDabRT_EUlvE_vJEED1Ev(uint64_t a1)
{
  WTF::StringImpl *v2;
  const void *v3;
  WTF::StringImpl *v4;

  *(_QWORD *)a1 = off_1E3507BF8;
  objc_destroyWeak((id *)(a1 + 56));
  v3 = *(const void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *(WTF::StringImpl **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  _Block_release(*(const void **)(a1 + 8));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ102__WKContentView_WKInteraction___internalSelectTextForContextMenuWithLocationInView_completionHandler__ENK4__75clIKN6WebKit10RevealItemEEEDabRT_EUlvE_vJEED0Ev(uint64_t a1)
{
  WTF::StringImpl *v2;
  const void *v3;
  WTF::StringImpl *v4;
  void *v5;

  *(_QWORD *)a1 = off_1E3507BF8;
  objc_destroyWeak((id *)(a1 + 56));
  v3 = *(const void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *(WTF::StringImpl **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  _Block_release(*(const void **)(a1 + 8));
  return WTF::fastFree((WTF *)a1, v5);
}

void _ZN3WTF6Detail15CallableWrapperIZZ102__WKContentView_WKInteraction___internalSelectTextForContextMenuWithLocationInView_completionHandler__ENK4__75clIKN6WebKit10RevealItemEEEDabRT_EUlvE_vJEE4callEv(uint64_t a1)
{
  id WeakRetained;
  const void *v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    (*(void (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
    CFRelease(v3);
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
  }
}

void sub_19786FB3C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_19786FD64(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_197870154(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _DWORD *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  uint64_t v22;

  if (v11)
    CFRelease(v11);
  v14 = *(_QWORD *)(v12 - 80);
  *(_QWORD *)(v12 - 80) = 0;
  if (!v14)
  {
LABEL_22:
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
    std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a10, a2);
    _Unwind_Resume(a1);
  }
  v15 = *(_QWORD *)(v14 + 8);
  if (__ldaxr((unsigned __int8 *)v15))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v15))
  {
LABEL_9:
    v17 = *(_QWORD *)(v15 + 8);
    v18 = v17 - 1;
    *(_QWORD *)(v15 + 8) = v17 - 1;
    if (v17 == 1)
    {
      v22 = *(_QWORD *)(v15 + 16);
      v19 = *(_QWORD *)(v15 + 24);
      *(_QWORD *)(v15 + 24) = 0;
      v20 = v22 != 0;
    }
    else
    {
      v19 = 0;
      v20 = 1;
    }
    v21 = __ldxr((unsigned __int8 *)v15);
    if (v21 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v15))
      {
LABEL_16:
        if (!v18)
        {
          if (v19)
            (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
          if (!v20)
            WTF::fastFree((WTF *)v15, a2);
        }
        goto LABEL_22;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
    goto LABEL_16;
  }
  MEMORY[0x19AEABB3C](v15);
  goto LABEL_9;
}

unint64_t WTF::Vector<WTF::BlockPtr<void ()(WebKit::ProceedWithTextSelectionInImage)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::BlockPtr<void ()(WebKit::ProceedWithTextSelectionInImage)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::BlockPtr<void ()(WebKit::ProceedWithTextSelectionInImage)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<WTF::BlockPtr<void ()(WebKit::ProceedWithTextSelectionInImage)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  const void **v10;
  const void *v11;
  const void *v12;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = *(WTF **)a1;
      v5 = *(unsigned int *)(a1 + 12);
      v6 = WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(a1 + 8) = v2;
      *(_QWORD *)a1 = v6;
      if ((_DWORD)v5)
      {
        v8 = (_QWORD *)v6;
        v9 = 8 * v5;
        v10 = (const void **)v4;
        do
        {
          v11 = *v10;
          *v10 = 0;
          *v8++ = v11;
          v12 = *v10++;
          _Block_release(v12);
          v9 -= 8;
        }
        while (v9);
      }
      if (v4)
      {
        if (*(WTF **)a1 == v4)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v4, v7);
      }
    }
  }
}

void sub_197870658(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13)
{
  WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_19787089C(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1978709C8(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_197870BA0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_197870CF8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_197870EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,WTF *a37,int a38,WTF *a39,int a40)
{
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  MEMORY[0x19AEAEECC](v42);
  MEMORY[0x19AEAEECC](v41);
  MEMORY[0x19AEAEECC](v40);
  MEMORY[0x19AEAEECC](&a10);
  _Unwind_Resume(a1);
}

void sub_1978712B4(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  va_list va;

  va_start(va, a3);
  v6 = *(_QWORD *)(v4 - 56);
  *(_QWORD *)(v4 - 56) = 0;
  if (!v6)
    goto LABEL_20;
  v7 = *(_QWORD *)(v6 + 8);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
LABEL_7:
    v9 = *(_QWORD *)(v7 + 8);
    v10 = v9 - 1;
    *(_QWORD *)(v7 + 8) = v9 - 1;
    if (v9 == 1)
    {
      v14 = *(_QWORD *)(v7 + 16);
      v11 = *(_QWORD *)(v7 + 24);
      *(_QWORD *)(v7 + 24) = 0;
      v12 = v14 != 0;
    }
    else
    {
      v11 = 0;
      v12 = 1;
    }
    v13 = __ldxr((unsigned __int8 *)v7);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v7))
      {
LABEL_14:
        if (!v10)
        {
          if (v11)
            (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
          if (!v12)
            WTF::fastFree((WTF *)v7, a2);
        }
LABEL_20:
        if (v3[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
        else
          --v3[2];
        std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
        _Unwind_Resume(a1);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
    goto LABEL_14;
  }
  MEMORY[0x19AEABB3C](v7);
  goto LABEL_7;
}

void sub_19787172C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  const void *v10;

  _Block_release(v10);
  objc_destroyWeak((id *)&a9);
  _Unwind_Resume(a1);
}

void sub_197871938(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_197871AB4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_197871C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  objc_destroyWeak((id *)&a9);
  _Unwind_Resume(a1);
}

void WKXPCServiceMain(WebKit *a1, int a2)
{
  const char **v4;

  TZoneInit();
  TZoneRegistrationDone();
  WebKit::XPCServiceMain(a1, a2, v4);
}

uint64_t colorForItem(int a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;

  objc_msgSend(MEMORY[0x1E0CEA478], "colorWithRed:green:blue:alpha:", 0.998, 0.239, 0.233, 1.0);
  v4 = objc_msgSend(MEMORY[0x1E0CEA478], "whiteColor");
  v5 = objc_msgSend((id)objc_msgSend(a2, "traitCollection"), "horizontalSizeClass");
  if ((a1 - 4) >= 2)
  {
    if (a1 == 6)
    {
      if (v5 != 1)
        return objc_msgSend(a2, "tintColor");
    }
    else
    {
      return 0;
    }
  }
  else if (v5 != 1)
  {
    return objc_msgSend(MEMORY[0x1E0CEA478], "darkTextColor");
  }
  return v4;
}

void sub_1978721D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;
  uint64_t v16;

  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (a15 != -1)
    ((void (*)(uint64_t, id *))off_1E3508028[a15])(v16 - 33, &location);
  _Unwind_Resume(a1);
}

void sub_197872B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, CFTypeRef cf,CFTypeRef a21)
{
  const void *v21;

  if (v21)
    CFRelease(v21);
  if (cf)
    CFRelease(cf);
  if (a21)
    CFRelease(a21);
  if (a10)
    CFRelease(a10);
  _Unwind_Resume(exception_object);
}

uint64_t makeLabel(NSAttributedString *a1, uint64_t a2)
{
  void *v4;
  uint64_t result;

  v4 = (void *)objc_opt_new();
  objc_msgSend(v4, "setAttributedText:", a2);
  objc_msgSend(v4, "setLineBreakMode:", 0);
  objc_msgSend(v4, "setNumberOfLines:", 0);
  result = objc_msgSend(v4, "setAccessibilityTraits:", *MEMORY[0x1E0CEB120]);
  a1->super.isa = (Class)v4;
  return result;
}

void sub_197872C34(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void *makeButton(int a1, __CFString *a2, uint64_t a3)
{
  const void *v6;
  CFTypeRef v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  CFTypeRef arg;
  _QWORD v15[4];
  _QWORD v16[5];

  v16[4] = *MEMORY[0x1E0C80C00];
  if (a1 == 5)
  {
    WebCore::copyLocalizedString((WebCore *)CFSTR("Show Details"), a2);
    v6 = arg;
    if (arg)
      goto LABEL_5;
  }
  else
  {
    WebCore::copyLocalizedString((WebCore *)CFSTR("Go Back"), a2);
    v6 = arg;
    if (arg)
    {
LABEL_5:
      CFAutorelease(v6);
      v7 = arg;
      goto LABEL_6;
    }
  }
  v7 = 0;
LABEL_6:
  v8 = (void *)objc_msgSend(MEMORY[0x1E0CEA3A0], "buttonWithType:", 1);
  v9 = objc_alloc(MEMORY[0x1E0CB3498]);
  v10 = *MEMORY[0x1E0CEA180];
  v16[0] = &unk_1E356FEB0;
  v11 = *MEMORY[0x1E0CEA178];
  v15[0] = v10;
  v15[1] = v11;
  v16[1] = objc_msgSend(MEMORY[0x1E0CEA478], "whiteColor");
  v15[2] = *MEMORY[0x1E0CEA0A0];
  v16[2] = colorForItem(a1, a2);
  v15[3] = *MEMORY[0x1E0CEA098];
  v16[3] = objc_msgSend(MEMORY[0x1E0CEA5E8], "preferredFontForTextStyle:", *MEMORY[0x1E0CEB538]);
  v12 = (const void *)objc_msgSend(v9, "initWithString:attributes:", v7, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v16, v15, 4));
  objc_msgSend(v8, "setAttributedTitle:forState:", v12, 0);
  objc_msgSend(v8, "addTarget:action:forControlEvents:", a2, a3, 64);
  if (v12)
    CFRelease(v12);
  return v8;
}

void sub_197872E24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_197873340(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;
  const void *v3;

  if (v3)
  {
    CFRelease(v3);
    if (!v2)
    {
LABEL_3:
      if (!v1)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      CFRelease(v1);
      goto LABEL_8;
    }
  }
  else if (!v2)
  {
    goto LABEL_3;
  }
  CFRelease(v2);
  if (!v1)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_197873638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

void sub_197873704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;
  uint64_t v16;

  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_1E3508028[a15])(v16 - 17, &a10);
  _Unwind_Resume(a1);
}

void sub_197873868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;
  uint64_t v16;

  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_1E3508028[a15])(v16 - 33, &a10);
  _Unwind_Resume(a1);
}

void sub_197873B2C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_197873CB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_197873DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;
  uint64_t v16;

  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_1E3508028[a15])(v16 - 17, &a10);
  _Unwind_Resume(a1);
}

void sub_197873F2C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_197874138(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_197874678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, CFTypeRef cf, uint64_t a18, uint64_t a19, CFTypeRef a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  const void *v23;
  const void *v24;

  CFRelease(v24);
  if (v23)
    CFRelease(v23);
  _Unwind_Resume(a1);
}

void sub_197874B24(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_197874D3C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WTF::Vector<appendFilesAsShareableURLs(WTF::RetainPtr<NSMutableArray> &&,WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,NSURL *,BOOL,WTF::CompletionHandler<void ()(WTF::RetainPtr<NSMutableArray> &)> &&)::FileWriteTask,0ul,WebCore::RawFile,16ul,WTF::CrashOnOverflow>::~Vector(unsigned int *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  const void **v5;
  const void *v6;
  WTF::StringImpl *v7;
  WTF *v8;

  v3 = a1[3];
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = (const void **)(*(_QWORD *)a1 + 8);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
        CFRelease(v6);
      v7 = (WTF::StringImpl *)*(v5 - 1);
      *(v5 - 1) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
  }
  v8 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v8, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<appendFilesAsShareableURLs(WTF::RetainPtr<NSMutableArray> &&,WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,NSURL *,BOOL,WTF::CompletionHandler<void ()(WTF::RetainPtr<NSMutableArray> &)> &&)::$_1,void>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  const void *v4;
  const void *v5;

  *(_QWORD *)a1 = off_1E3508108;
  v3 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v4)
    CFRelease(v4);
  WTF::Vector<appendFilesAsShareableURLs(WTF::RetainPtr<NSMutableArray> &&,WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,NSURL *,BOOL,WTF::CompletionHandler<void ()(WTF::RetainPtr<NSMutableArray> &)> &&)::FileWriteTask,0ul,WebCore::RawFile,16ul,WTF::CrashOnOverflow>::~Vector((unsigned int *)(a1 + 16), a2);
  v5 = *(const void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
    CFRelease(v5);
  return a1;
}

{
  uint64_t v3;
  const void *v4;
  void *v5;
  const void *v6;

  *(_QWORD *)a1 = off_1E3508108;
  v3 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v4)
    CFRelease(v4);
  WTF::Vector<appendFilesAsShareableURLs(WTF::RetainPtr<NSMutableArray> &&,WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,NSURL *,BOOL,WTF::CompletionHandler<void ()(WTF::RetainPtr<NSMutableArray> &)> &&)::FileWriteTask,0ul,WebCore::RawFile,16ul,WTF::CrashOnOverflow>::~Vector((unsigned int *)(a1 + 16), a2);
  v6 = *(const void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v6)
    CFRelease(v6);
  return WTF::fastFree((WTF *)a1, v5);
}

uint64_t WTF::Detail::CallableWrapper<appendFilesAsShareableURLs(WTF::RetainPtr<NSMutableArray> &&,WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,NSURL *,BOOL,WTF::CompletionHandler<void ()(WTF::RetainPtr<NSMutableArray> &)> &&)::$_1,void>::call(uint64_t a1, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::ResourceResponseBase *v4;
  WebCore::ResourceResponseBase *v5;
  __CFString *v6;
  WTF::StringImpl *v7;
  id v8;
  WTF::StringImpl *v9;
  WKShareSheetFileItemProvider *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t result;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  v2 = a1;
  v3 = *(unsigned int *)(a1 + 28);
  if (!(_DWORD)v3)
    goto LABEL_21;
  v4 = *(WebCore::ResourceResponseBase **)(a1 + 16);
  v5 = (WebCore::ResourceResponseBase *)((char *)v4 + 16 * v3);
  while (1)
  {
    WebCore::ResourceResponseBase::sanitizeSuggestedFilename(v4, a2);
    v6 = v15 ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1E351F1B8;
    v8 = +[WKShareSheet writeFileToShareableURL:data:temporaryDirectory:](WKShareSheet, "writeFileToShareableURL:data:temporaryDirectory:", v6, *((_QWORD *)v4 + 1), *(_QWORD *)(v2 + 32));
    v9 = v15;
    v15 = 0;
    if (v9)
      break;
LABEL_8:
    if (!v8)
      goto LABEL_18;
LABEL_11:
    if (*(_BYTE *)(v2 + 40))
    {
      v10 = -[WKShareSheetFileItemProvider initWithURL:]([WKShareSheetFileItemProvider alloc], "initWithURL:", v8);
      a1 = *(_QWORD *)(v2 + 8);
      if (!v10)
        goto LABEL_19;
      objc_msgSend((id)a1, "addObject:", v10);
      CFRelease(v10);
    }
    else
    {
      a1 = objc_msgSend(*(id *)(v2 + 8), "addObject:", v8);
    }
    v4 = (WebCore::ResourceResponseBase *)((char *)v4 + 16);
    if (v4 == v5)
      goto LABEL_21;
  }
  if (*(_DWORD *)v9 != 2)
  {
    *(_DWORD *)v9 -= 2;
    goto LABEL_8;
  }
  WTF::StringImpl::destroy(v9, v7);
  if (v8)
    goto LABEL_11;
LABEL_18:
  a1 = *(_QWORD *)(v2 + 8);
LABEL_19:
  *(_QWORD *)(v2 + 8) = 0;
  if (a1)
    CFRelease((CFTypeRef)a1);
LABEL_21:
  WTF::RunLoop::main((WTF::RunLoop *)a1);
  v11 = *(_QWORD *)(v2 + 48);
  *(_QWORD *)(v2 + 48) = 0;
  v12 = *(_QWORD *)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;
  v13 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v13 = &off_1E3508130;
  *((_QWORD *)v13 + 1) = v11;
  *((_QWORD *)v13 + 2) = v12;
  v16 = v13;
  WTF::RunLoop::dispatch();
  result = (uint64_t)v16;
  if (v16)
    return (*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v16 + 8))(v16);
  return result;
}

void sub_197875174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<appendFilesAsShareableURLs(WTF::RetainPtr<NSMutableArray> &&,WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,NSURL *,BOOL,WTF::CompletionHandler<void ()(WTF::RetainPtr<NSMutableArray> &)> &&)::$_1::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  const void *v2;
  uint64_t v3;

  *a1 = &off_1E3508130;
  v2 = (const void *)a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<appendFilesAsShareableURLs(WTF::RetainPtr<NSMutableArray> &&,WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,NSURL *,BOOL,WTF::CompletionHandler<void ()(WTF::RetainPtr<NSMutableArray> &)> &&)::$_1::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  const void *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E3508130;
  v3 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<appendFilesAsShareableURLs(WTF::RetainPtr<NSMutableArray> &&,WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,NSURL *,BOOL,WTF::CompletionHandler<void ()(WTF::RetainPtr<NSMutableArray> &)> &&)::$_1::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, a1 + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_1978752D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::presentStorageAccessAlert(void *a1, WTF::String *this, WTF::String *a3, uint64_t *a4)
{
  void *v7;
  const __CFString *v8;
  CFTypeRef v9;
  WebKit *v10;
  void *v11;
  const __CFString *v12;
  CFTypeRef v13;
  CFTypeRef cf;
  CFTypeRef v15;
  CFTypeRef arg;

  WTF::String::createCFString(this);
  WTF::String::createCFString(a3);
  v7 = (void *)MEMORY[0x1E0CB3940];
  WebCore::copyLocalizedString((WebCore *)CFSTR("Allow “%@” to use cookies and website data while browsing “%@”?"), v8);
  if (arg)
  {
    CFAutorelease(arg);
    v9 = arg;
  }
  else
  {
    v9 = 0;
  }
  v10 = (WebKit *)objc_msgSend(v7, "stringWithFormat:", v9, v15, cf);
  v11 = (void *)MEMORY[0x1E0CB3940];
  WebCore::copyLocalizedString((WebCore *)CFSTR("This will allow “%@” to track your activity."), v12);
  if (arg)
  {
    CFAutorelease(arg);
    v13 = arg;
  }
  else
  {
    v13 = 0;
  }
  WebKit::displayStorageAccessAlert(a1, v10, (NSString *)objc_msgSend(v11, "stringWithFormat:", v13, v15), a4);
  if (cf)
    CFRelease(cf);
  if (v15)
    CFRelease(v15);
}

void sub_1978754AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef a12, CFTypeRef a13, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  if (a12)
    CFRelease(a12);
  if (a13)
    CFRelease(a13);
  _Unwind_Resume(exception_object);
}

void WebKit::displayStorageAccessAlert(void *a1, WebKit *a2, NSString *a3, uint64_t *a4)
{
  uint64_t v7;
  _QWORD *v8;
  const __CFString *v9;
  WTF::StringImpl *v10;
  const __CFString *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  const __CFString *v14;
  WTF::StringImpl *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  CFTypeRef v24;
  _QWORD v25[4];
  void *aBlock;
  _QWORD v27[4];
  void *v28;
  CFTypeRef cf;

  v7 = *a4;
  *a4 = 0;
  v8 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  *v8 = MEMORY[0x1E0C809A0];
  v8[1] = 50331650;
  v8[2] = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::displayStorageAccessAlert(WKWebView *,NSString *,NSString *,NSString *,NSArray<NSString *> *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::displayStorageAccessAlert(WKWebView *,NSString *,NSString *,NSString *,NSArray<NSString *> *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke;
  v8[3] = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::displayStorageAccessAlert(WKWebView *,NSString *,NSString *,NSString *,NSArray<NSString *> *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::displayStorageAccessAlert(WKWebView *,NSString *,NSString *,NSString *,NSArray<NSString *> *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::descriptor;
  v8[4] = v7;
  WebCore::localizedString((WebCore *)CFSTR("Allow (cross-site cookie and website data access)"), v9);
  if (cf)
  {
    v11 = (const __CFString *)WTF::StringImpl::operator NSString *();
    v12 = (WTF::StringImpl *)cf;
    cf = 0;
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  else
  {
    v11 = &stru_1E351F1B8;
  }
  WebCore::localizedString((WebCore *)CFSTR("Don’t Allow (cross-site cookie and website data access)"), (const __CFString *)v10);
  if (cf)
  {
    v14 = (const __CFString *)WTF::StringImpl::operator NSString *();
    v15 = (WTF::StringImpl *)cf;
    cf = 0;
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  else
  {
    v14 = &stru_1E351F1B8;
  }
  WebKit::createUIAlertController(a2, a3, &cf);
  v16 = (void *)MEMORY[0x1E0CEA2E0];
  v17 = MEMORY[0x1E0C809B0];
  v27[0] = MEMORY[0x1E0C809B0];
  v27[1] = 3321888768;
  v27[2] = ___ZN6WebKit25displayStorageAccessAlertEP9WKWebViewP8NSStringS3_S3_P7NSArrayIS3_EON3WTF17CompletionHandlerIFvbEEE_block_invoke;
  v27[3] = &__block_descriptor_40_e8_32c120_ZTSKZN6WebKit25displayStorageAccessAlertEP9WKWebViewP8NSStringS3_S3_P7NSArrayIS3_EON3WTF17CompletionHandlerIFvbEEEE3__1_e23_v16__0__UIAlertAction_8l;
  v18 = _Block_copy(v8);
  v28 = _Block_copy(v18);
  v19 = objc_msgSend(v16, "actionWithTitle:style:handler:", v11, 1, v27);
  _Block_release(v18);
  v20 = (void *)MEMORY[0x1E0CEA2E0];
  v25[0] = v17;
  v25[1] = 3321888768;
  v25[2] = ___ZN6WebKit25displayStorageAccessAlertEP9WKWebViewP8NSStringS3_S3_P7NSArrayIS3_EON3WTF17CompletionHandlerIFvbEEE_block_invoke_24;
  v25[3] = &__block_descriptor_40_e8_32c120_ZTSKZN6WebKit25displayStorageAccessAlertEP9WKWebViewP8NSStringS3_S3_P7NSArrayIS3_EON3WTF17CompletionHandlerIFvbEEEE3__2_e23_v16__0__UIAlertAction_8l;
  v21 = _Block_copy(v8);
  aBlock = _Block_copy(v21);
  v22 = objc_msgSend(v20, "actionWithTitle:style:handler:", v14, 0, v25);
  _Block_release(v21);
  objc_msgSend((id)cf, "addAction:", v22);
  objc_msgSend((id)cf, "addAction:", v19);
  v23 = (void *)objc_msgSend(a1, "_wk_viewControllerForFullScreenPresentation");
  objc_msgSend(v23, "presentViewController:animated:completion:", cf, 1, 0);
  _Block_release(aBlock);
  _Block_release(v28);
  v24 = cf;
  cf = 0;
  if (v24)
    CFRelease(v24);
  _Block_release(v8);
}

void sub_197875764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, CFTypeRef cf)
{
  const void *v20;
  const void *v21;

  _Block_release(aBlock);
  _Block_release(v21);
  _Block_release(a19);
  if (cf)
    CFRelease(cf);
  _Block_release(v20);
  _Unwind_Resume(a1);
}

void WebKit::presentStorageAccessAlertQuirk(void *a1, WTF::String *this, WTF::String *a3, WTF::String *a4, uint64_t *a5)
{
  void *v9;
  const __CFString *v10;
  const void *v11;
  WebKit *v12;
  void *v13;
  const __CFString *v14;
  const void *v15;
  CFTypeRef cf;
  CFTypeRef v17;
  CFTypeRef v18;
  const void *v19;

  WTF::String::createCFString(this);
  WTF::String::createCFString(a3);
  WTF::String::createCFString(a4);
  v9 = (void *)MEMORY[0x1E0CB3940];
  WebCore::copyLocalizedString((WebCore *)CFSTR("Allow “%@” and “%@” to use cookies and website data while browsing “%@”?"), v10);
  if (v19)
  {
    CFAutorelease(v19);
    v11 = v19;
  }
  else
  {
    v11 = 0;
  }
  v12 = (WebKit *)objc_msgSend(v9, "stringWithFormat:", v11, v18, v17, cf);
  v13 = (void *)MEMORY[0x1E0CB3940];
  WebCore::copyLocalizedString((WebCore *)CFSTR("This will allow “%@” and “%@” to track your activity."), v14);
  if (v19)
  {
    CFAutorelease(v19);
    v15 = v19;
  }
  else
  {
    v15 = 0;
  }
  WebKit::displayStorageAccessAlert(a1, v12, (NSString *)objc_msgSend(v13, "stringWithFormat:", v15, v18, v17), a5);
  if (cf)
    CFRelease(cf);
  if (v17)
    CFRelease(v17);
  if (v18)
    CFRelease(v18);
}

void sub_197875964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf, CFTypeRef a14, CFTypeRef a15)
{
  uint64_t v15;
  const void *v17;

  v17 = *(const void **)(v15 - 40);
  *(_QWORD *)(v15 - 40) = 0;
  if (v17)
    CFRelease(v17);
  if (cf)
    CFRelease(cf);
  if (a14)
    CFRelease(a14);
  if (a15)
    CFRelease(a15);
  _Unwind_Resume(exception_object);
}

uint64_t *WebKit::presentStorageAccessAlertSSOQuirk(void *a1, __CFString *a2, uint64_t *a3, uint64_t *a4)
{
  void *v8;
  CFTypeRef v9;
  uint64_t v10;
  const WTF::StringImpl *v11;
  WebKit *v12;
  CFTypeRef v13;
  uint64_t v14;
  const WTF::StringImpl *v15;
  WTF::StringImpl **v16;
  WTF::StringImpl **v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  uint64_t v26;
  const __CFString *v27;
  uint64_t v28;
  int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  int v33;
  void *v34;
  CFTypeRef v35;
  char *v36;
  char *v37;
  __CFString *v38;
  NSString *v39;
  WTF *v40;
  WTF *v41;
  void *v42;
  CFTypeRef v43;
  CFTypeRef v44;
  uint64_t v45;
  void *v46;
  WTF::StringImpl **v47;
  uint64_t v48;
  const __CFString *v49;
  void *v50;
  char *v51;
  WTF::StringImpl *v52;
  char *v53;
  char *v54;
  void *v55;
  WTF *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  void *v61;
  uint64_t *result;
  uint64_t v63;
  unint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  CFTypeRef arg;
  WTF::StringImpl *v69;
  int v70;
  char v71;
  WTF::StringImpl **v72;
  uint64_t v73;
  uint64_t *v74;
  char *v75;

  v8 = (void *)MEMORY[0x1E0CB3940];
  WebCore::copyLocalizedString((WebCore *)CFSTR("Allow related %@ websites to share cookies and website data?"), a2);
  if (arg)
  {
    CFAutorelease(arg);
    v9 = arg;
  }
  else
  {
    v9 = 0;
  }
  WTF::String::createCFString((WTF::String *)a2);
  v12 = (WebKit *)objc_msgSend(v8, "stringWithFormat:", v9, arg);
  v13 = arg;
  arg = 0;
  if (v13)
    CFRelease(v13);
  v74 = 0;
  v72 = (WTF::StringImpl **)WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(a3, v10, v11);
  v73 = v14;
  if (*a3)
    v16 = (WTF::StringImpl **)(*a3 + 24 * *(unsigned int *)(*a3 - 4));
  else
    v16 = 0;
  while (1)
  {
    v17 = v72;
    if (v72 == v16)
      break;
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v74, v72, v15, (uint64_t)&arg);
    v20 = *((unsigned int *)v17 + 5);
    if ((_DWORD)v20)
    {
      v21 = (WTF::StringImpl **)v17[1];
      v22 = 8 * v20;
      do
      {
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v74, v21++, v19, (uint64_t)&arg);
        v22 -= 8;
      }
      while (v22);
    }
    v72 += 3;
    WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)&v72, v18, v19);
  }
  if (!v74 || *((_DWORD *)v74 - 3) <= 1u)
  {
    v23 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, 1);
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    goto LABEL_93;
  }
  v72 = 0;
  v73 = 0;
  WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map((uint64_t *)&v72, &v74);
  arg = WTF::codePointCompareLessThan;
  v25 = 126 - 2 * __clz(HIDWORD(v73));
  if (HIDWORD(v73))
    v26 = v25;
  else
    v26 = 0;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*,false>((uint64_t)v72, &v72[HIDWORD(v73)], (uint64_t (**)(uint64_t *, uint64_t *))&arg, v26, 1);
  v28 = HIDWORD(v73);
  if (HIDWORD(v73) > 3)
  {
    v34 = (void *)MEMORY[0x1E0CB3940];
    WebCore::copyLocalizedString((WebCore *)CFSTR("Using the same cookies and website data is required for %s, %s, and %lu other websites to work correctly, but could make it easier to track your browsing across these websites."), v27);
    if (arg)
    {
      CFAutorelease(arg);
      v35 = arg;
    }
    else
    {
      v35 = 0;
    }
    if (!HIDWORD(v73))
    {
      __break(0xC471u);
      JUMPOUT(0x197876048);
    }
    WTF::String::utf8();
    if (arg)
      v36 = (char *)arg + 16;
    else
      v36 = 0;
    if (HIDWORD(v73) > 1)
    {
      WTF::String::utf8();
      if (v75)
        v37 = v75 + 16;
      else
        v37 = 0;
      v39 = (NSString *)objc_msgSend(v34, "stringWithFormat:", v35, v36, v37, HIDWORD(v73) - 2);
      v40 = (WTF *)v75;
      v75 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 1)
          WTF::fastFree(v40, v38);
        else
          --*(_DWORD *)v40;
      }
      v41 = (WTF *)arg;
      arg = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 1)
          WTF::fastFree(v41, v38);
        else
          --*(_DWORD *)v41;
      }
      v42 = (void *)MEMORY[0x1E0CB3940];
      WebCore::copyLocalizedString((WebCore *)CFSTR("Related %@ websites"), v38);
      if (arg)
      {
        CFAutorelease(arg);
        v43 = arg;
      }
      else
      {
        v43 = 0;
      }
      WTF::String::createCFString((WTF::String *)a2);
      objc_msgSend(v42, "stringWithFormat:", v43, arg);
      v44 = arg;
      arg = 0;
      if (v44)
        CFRelease(v44);
      v45 = objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", HIDWORD(v73));
      if (HIDWORD(v73))
      {
        v46 = (void *)v45;
        v47 = v72;
        v48 = 8 * HIDWORD(v73);
        do
        {
          if (*v47)
            v49 = (const __CFString *)WTF::StringImpl::operator NSString *();
          else
            v49 = &stru_1E351F1B8;
          objc_msgSend(v46, "addObject:", v49);
          ++v47;
          v48 -= 8;
        }
        while (v48);
      }
      goto LABEL_92;
    }
LABEL_107:
    __break(0xC471u);
    JUMPOUT(0x197876040);
  }
  if (!HIDWORD(v73))
    goto LABEL_107;
  v29 = HIDWORD(v73) - 1;
  v30 = v72[HIDWORD(v73) - 1];
  v72[HIDWORD(v73) - 1] = 0;
  v67 = v30;
  WTF::VectorDestructor<true,WTF::String>::destruct((WTF::StringImpl *)&v72[v28 - 1], (WTF::StringImpl *)&v72[v28]);
  HIDWORD(v73) = v29;
  arg = 0;
  v69 = 0;
  v70 = 0;
  v71 = 1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v65 = (WTF::StringImpl *)v75;
  WTF::makeStringByJoining();
  if (v70 || v69)
  {
    if (v66)
    {
      v63 = *((_QWORD *)v66 + 1);
      v64 = *((unsigned int *)v66 + 1) | ((unint64_t)((*((_DWORD *)v66 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v63 = 0;
      v64 = 0x100000000;
    }
    WTF::StringBuilder::append((uint64_t)&arg, v63, v64);
    v32 = v66;
  }
  else
  {
    WTF::String::operator=((WTF::StringImpl **)&arg, (WTF::StringImpl *)&v66);
    v32 = v66;
    if (v66)
      v33 = *((_DWORD *)v66 + 1);
    else
      v33 = 0;
    v70 = v33;
  }
  v66 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v31);
    else
      *(_DWORD *)v32 -= 2;
  }
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
      WTF::StringImpl::destroy(v65, v31);
    else
      *(_DWORD *)v65 -= 2;
  }
  if (HIDWORD(v73) == 2)
    WTF::StringBuilder::append();
  v50 = (void *)MEMORY[0x1E0CB3940];
  WebCore::copyLocalizedString((WebCore *)CFSTR("Using the same cookies and website data is required for %s and %s to work correctly, but could make it easier to track your browsing across these websites."), (const __CFString *)v31);
  if (v75)
  {
    CFAutorelease(v75);
    v51 = v75;
  }
  else
  {
    v51 = 0;
  }
  v52 = (WTF::StringImpl *)arg;
  if (arg
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&arg),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&arg),
        (v52 = (WTF::StringImpl *)arg) != 0))
  {
    *(_DWORD *)v52 += 2;
  }
  v66 = v52;
  WTF::String::utf8();
  v53 = v75;
  WTF::String::utf8();
  v54 = v53 + 16;
  if (!v53)
    v54 = 0;
  v39 = (NSString *)objc_msgSend(v50, "stringWithFormat:", v51, v54, 0);
  v56 = (WTF *)v75;
  v75 = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 1)
      WTF::fastFree(v56, v55);
    else
      --*(_DWORD *)v56;
  }
  v57 = v66;
  v66 = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
      WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v55);
    else
      *(_DWORD *)v57 -= 2;
  }
  v58 = v69;
  v69 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
      WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v55);
    else
      *(_DWORD *)v58 -= 2;
  }
  v59 = (WTF::StringImpl *)arg;
  arg = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
      WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v55);
    else
      *(_DWORD *)v59 -= 2;
  }
  v60 = v67;
  v67 = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
      WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v55);
    else
      *(_DWORD *)v60 -= 2;
  }
LABEL_92:
  WebKit::displayStorageAccessAlert(a1, v12, v39, a4);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v72, v61);
LABEL_93:
  result = v74;
  if (v74)
    return (uint64_t *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v74, v24);
  return result;
}

void sub_197876054(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, WTF::StringImpl *a14, WTF::StringImpl *a15, WTF::StringImpl *cf, WTF::StringImpl *a17, uint64_t a18, char a19)
{
  uint64_t v19;
  const void *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl **v23;

  v21 = *(const void **)(v19 - 72);
  *(_QWORD *)(v19 - 72) = 0;
  if (v21)
    CFRelease(v21);
  if (a17)
  {
    if (*(_DWORD *)a17 == 2)
      WTF::StringImpl::destroy(a17, a2);
    else
      *(_DWORD *)a17 -= 2;
  }
  if (cf)
  {
    if (*(_DWORD *)cf == 2)
      WTF::StringImpl::destroy(cf, a2);
    else
      *(_DWORD *)cf -= 2;
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, a2);
    else
      *(_DWORD *)a15 -= 2;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a19, a2);
  v23 = *(WTF::StringImpl ***)(v19 - 80);
  if (v23)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v23, v22);
  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebKit25displayStorageAccessAlertEP9WKWebViewP8NSStringS3_S3_P7NSArrayIS3_EON3WTF17CompletionHandlerIFvbEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void *__copy_helper_block_e8_32c120_ZTSKZN6WebKit25displayStorageAccessAlertEP9WKWebViewP8NSStringS3_S3_P7NSArrayIS3_EON3WTF17CompletionHandlerIFvbEEEE3__1(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 32));
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c120_ZTSKZN6WebKit25displayStorageAccessAlertEP9WKWebViewP8NSStringS3_S3_P7NSArrayIS3_EON3WTF17CompletionHandlerIFvbEEEE3__1(uint64_t a1)
{
  _Block_release(*(const void **)(a1 + 32));
}

uint64_t ___ZN6WebKit25displayStorageAccessAlertEP9WKWebViewP8NSStringS3_S3_P7NSArrayIS3_EON3WTF17CompletionHandlerIFvbEEE_block_invoke_24(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void *__copy_helper_block_e8_32c120_ZTSKZN6WebKit25displayStorageAccessAlertEP9WKWebViewP8NSStringS3_S3_P7NSArrayIS3_EON3WTF17CompletionHandlerIFvbEEEE3__2(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 32));
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c120_ZTSKZN6WebKit25displayStorageAccessAlertEP9WKWebViewP8NSStringS3_S3_P7NSArrayIS3_EON3WTF17CompletionHandlerIFvbEEEE3__2(uint64_t a1)
{
  _Block_release(*(const void **)(a1 + 32));
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::displayStorageAccessAlert(WKWebView *,NSString *,NSString *,NSString *,NSArray<NSString *> *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::displayStorageAccessAlert(WKWebView *,NSString *,NSString *,NSString *,NSArray<NSString *> *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::displayStorageAccessAlert(WKWebView *,NSString *,NSString *,NSString *,NSArray<NSString *> *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::displayStorageAccessAlert(WKWebView *,NSString *,NSString *,NSString *,NSArray<NSString *> *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_197876374(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c62_ZTSN3WTF11OSObjectPtrIPU24objcproto13OS_xpc_object8NSObjectEE(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 40);
  if (v1)

}

id WebKit::XPCEndpoint::endpoint@<X0>(WebKit::XPCEndpoint *this@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = (id)*((_QWORD *)this + 2);
  *a2 = result;
  if (result)
    return result;
  return result;
}

void sub_197876524(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t IPC::isSerializableValue(IPC *this, objc_object *a2)
{
  objc_object *v3;
  uint64_t result;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    return IPC::typeFromObject(this, v3) != 15;
  result = (uint64_t)CTFontCopyAttribute(this, (CFStringRef)*MEMORY[0x1E0CA8458]);
  if (result)
  {
    CFRelease((CFTypeRef)result);
    return 1;
  }
  return result;
}

void IPC::encodeObjectDirectly<NSURLRequest>(uint64_t a1, void *cf)
{
  char v4;
  CFTypeRef v5;
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef v8;
  CFTypeRef cfa;
  char v10;

  if (cf)
  {
    WebKit::CoreIPCSecureCoding::CoreIPCSecureCoding((WebKit::CoreIPCSecureCoding *)&v8, cf);
    v7 = v8;
    v8 = 0;
    cfa = v7;
    v4 = 1;
  }
  else
  {
    v4 = 0;
    LOBYTE(cfa) = 0;
  }
  v10 = v4;
  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCSecureCoding>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCSecureCoding>>(a1, (uint64_t)&cfa);
  if (v10)
  {
    v5 = cfa;
    cfa = 0;
    if (v5)
      CFRelease(v5);
  }
  if (cf)
  {
    v6 = v8;
    v8 = 0;
    if (v6)
      CFRelease(v6);
  }
}

void sub_1978766BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, CFTypeRef cf, char a12)
{
  uint64_t v12;

  if (a12 && cf)
    CFRelease(cf);
  if (v12)
  {
    if (a10)
      CFRelease(a10);
  }
  _Unwind_Resume(exception_object);
}

void IPC::decodeObjectDirectlyRequiringAllowedClasses<NSURLRequest>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  CFTypeRef v3;
  int v4;
  int v5;
  CFTypeRef v6;
  CFTypeRef cf;
  unsigned __int8 v8;
  unsigned __int8 v9;

  IPC::Decoder::decode<std::optional<WebKit::CoreIPCSecureCoding>>(a1, (uint64_t)&cf);
  if (!v9)
  {
    *a2 = 0;
    a2[8] = 0;
    return;
  }
  if (!v8)
  {
    *(_QWORD *)a2 = 0;
    a2[8] = 1;
    return;
  }
  v3 = cf;
  if (!cf)
  {
    *(_QWORD *)a2 = 0;
    a2[8] = 1;
LABEL_9:
    v6 = cf;
    cf = 0;
    if (v6)
      CFRelease(v6);
    return;
  }
  CFRetain(cf);
  v4 = v9;
  v5 = v8;
  *(_QWORD *)a2 = v3;
  a2[8] = 1;
  if (v4 && v5)
    goto LABEL_9;
}

void sub_197876798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11)
  {
    if (cf)
      CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<std::optional<WebKit::CoreIPCSecureCoding>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCSecureCoding>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_197876818(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<std::optional<WebKit::CoreIPCSecureCoding>,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

void IPC::encodeObjectDirectly<NSParagraphStyle>(uint64_t a1, void *cf)
{
  CFTypeRef v4;
  char v5;
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef v8;
  CFTypeRef cfa;
  char v10;

  if (cf)
  {
    WebKit::CoreIPCSecureCoding::CoreIPCSecureCoding((WebKit::CoreIPCSecureCoding *)&v8, cf);
    v4 = v8;
    v8 = 0;
    cfa = v4;
    v5 = 1;
  }
  else
  {
    v5 = 0;
    LOBYTE(cfa) = 0;
  }
  v10 = v5;
  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCSecureCoding>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCSecureCoding>>(a1, (uint64_t)&cfa);
  if (v10)
  {
    v6 = cfa;
    cfa = 0;
    if (v6)
      CFRelease(v6);
  }
  if (cf)
  {
    v7 = v8;
    v8 = 0;
    if (v7)
      CFRelease(v7);
  }
}

void sub_1978768B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, CFTypeRef cf, char a12)
{
  uint64_t v12;

  if (a12 && cf)
    CFRelease(cf);
  if (v12)
  {
    if (a10)
      CFRelease(a10);
  }
  _Unwind_Resume(exception_object);
}

void IPC::decodeObjectDirectlyRequiringAllowedClasses<NSParagraphStyle>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  CFTypeRef v3;
  int v4;
  int v5;
  CFTypeRef v6;
  CFTypeRef cf;
  unsigned __int8 v8;
  unsigned __int8 v9;

  IPC::Decoder::decode<std::optional<WebKit::CoreIPCSecureCoding>>(a1, (uint64_t)&cf);
  if (!v9)
  {
    *a2 = 0;
    a2[8] = 0;
    return;
  }
  if (!v8)
  {
    *(_QWORD *)a2 = 0;
    a2[8] = 1;
    return;
  }
  v3 = cf;
  if (!cf)
  {
    *(_QWORD *)a2 = 0;
    a2[8] = 1;
LABEL_6:
    v6 = cf;
    cf = 0;
    if (v6)
      CFRelease(v6);
    return;
  }
  CFRetain(cf);
  v4 = v9;
  v5 = v8;
  *(_QWORD *)a2 = v3;
  a2[8] = 1;
  if (v4 && v5)
    goto LABEL_6;
}

void sub_197876994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11)
  {
    if (cf)
      CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void IPC::encodeObjectDirectly<PKSecureElementPass>(uint64_t a1, void *cf)
{
  CFTypeRef v4;
  char v5;
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef v8;
  CFTypeRef cfa;
  char v10;

  if (cf)
  {
    WebKit::CoreIPCSecureCoding::CoreIPCSecureCoding((WebKit::CoreIPCSecureCoding *)&v8, cf);
    v4 = v8;
    v8 = 0;
    cfa = v4;
    v5 = 1;
  }
  else
  {
    v5 = 0;
    LOBYTE(cfa) = 0;
  }
  v10 = v5;
  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCSecureCoding>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCSecureCoding>>(a1, (uint64_t)&cfa);
  if (v10)
  {
    v6 = cfa;
    cfa = 0;
    if (v6)
      CFRelease(v6);
  }
  if (cf)
  {
    v7 = v8;
    v8 = 0;
    if (v7)
      CFRelease(v7);
  }
}

void sub_197876A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, CFTypeRef cf, char a12)
{
  uint64_t v12;

  if (a12 && cf)
    CFRelease(cf);
  if (v12)
  {
    if (a10)
      CFRelease(a10);
  }
  _Unwind_Resume(exception_object);
}

void IPC::decodeObjectDirectlyRequiringAllowedClasses<PKSecureElementPass>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  CFTypeRef v3;
  int v4;
  int v5;
  CFTypeRef v6;
  CFTypeRef cf;
  unsigned __int8 v8;
  unsigned __int8 v9;

  IPC::Decoder::decode<std::optional<WebKit::CoreIPCSecureCoding>>(a1, (uint64_t)&cf);
  if (!v9)
  {
    *a2 = 0;
    a2[8] = 0;
    return;
  }
  if (!v8)
  {
    *(_QWORD *)a2 = 0;
    a2[8] = 1;
    return;
  }
  v3 = cf;
  if (!cf)
  {
    *(_QWORD *)a2 = 0;
    a2[8] = 1;
LABEL_6:
    v6 = cf;
    cf = 0;
    if (v6)
      CFRelease(v6);
    return;
  }
  CFRetain(cf);
  v4 = v9;
  v5 = v8;
  *(_QWORD *)a2 = v3;
  a2[8] = 1;
  if (v4 && v5)
    goto LABEL_6;
}

void sub_197876B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11)
  {
    if (cf)
      CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<std::optional<WebKit::CoreIPCSecureCoding>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)(a1 + 16))
  {
    if (*(_BYTE *)(a1 + 8))
    {
      v2 = *(const void **)a1;
      *(_QWORD *)a1 = 0;
      if (v2)
        CFRelease(v2);
    }
  }
  return a1;
}

void IPC::ArgumentCoder<std::optional<WebKit::CoreIPCSecureCoding>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCSecureCoding>>(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  size_t v12;
  char *v13;
  void *v14;

  v4 = *(unsigned __int8 *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 544);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(a1 + 552);
  if (v7 < v5 + 1)
  {
    v11 = (2 * v7 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v12 = v11;
      v11 *= 2;
    }
    while (v12 < v6);
    v13 = (char *)mmap(0, v12, 3, 4098, -1, 0);
    if (v13 == (char *)-1)
      goto LABEL_14;
    v8 = v13;
    memcpy(v13, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v14 = *(void **)(a1 + 528);
    if (v14 != (void *)(a1 + 16))
      munmap(v14, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v8;
    *(_QWORD *)(a1 + 552) = v12;
    v9 = *(_QWORD *)(a1 + 544);
  }
  else
  {
    v8 = *(char **)(a1 + 528);
    v9 = *(_QWORD *)(a1 + 544);
  }
  bzero(&v8[v9], v5 - v9);
  *(_QWORD *)(a1 + 544) = v6;
  v10 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v5);
  *(_QWORD *)(a1 + 536) = v10 + 1;
  if (!v4)
  {
    *v10 = 0;
    return;
  }
  *v10 = 1;
  if (*(_BYTE *)(a2 + 8))
  {
    IPC::encodeObjectDirectly<NSObject  {objcproto14NSSecureCoding}>(a1, *(_QWORD *)a2);
    return;
  }
  std::__throw_bad_optional_access[abi:sn180100]();
LABEL_14:
  __break(0xC471u);
}

void IPC::ArgumentCoder<std::optional<WebKit::CoreIPCSecureCoding>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;

  v3 = a1[1];
  v4 = *a1;
  v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    v9 = 0;
    v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11)
    {
      v15 = a1;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
        a1 = v15;
        v10 = *v15;
        v9 = v15[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
    goto LABEL_12;
  }
  v6 = (unsigned __int8 *)(v4 + v5);
  a1[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    v9 = v3;
    v10 = 0;
LABEL_12:
    v3 = 0;
    v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12)
    {
      v14 = a1;
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v10, v9);
        a1 = v14;
        v4 = *v14;
        v3 = v14[1];
      }
      else
      {
        v3 = 0;
        v4 = 0;
      }
    }
    goto LABEL_13;
  }
  v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      IPC::Decoder::decode<WebKit::CoreIPCSecureCoding>(a1, (uint64_t)&v16);
      v8 = v17;
      if (v17)
      {
        *(_QWORD *)a2 = v16;
        v8 = 1;
        *(_BYTE *)(a2 + 8) = 1;
      }
      else
      {
        *(_BYTE *)a2 = 0;
      }
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 0;
      v8 = 1;
    }
    *(_BYTE *)(a2 + 16) = v8;
    return;
  }
LABEL_13:
  *a1 = 0;
  a1[1] = 0;
  v13 = a1[3];
  if (v13 && v3)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v4);
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
}

WebKit::CoreIPCArray *WebKit::CoreIPCArray::CoreIPCArray(WebKit::CoreIPCArray *this, NSArray *a2)
{
  objc_object *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  objc_object *v8;
  uint64_t v9;
  objc_object **v10;
  uint64_t v11;
  objc_object *v12;
  objc_object *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v5 = -[NSArray countByEnumeratingWithState:objects:count:](a2, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v16 != v6)
          objc_enumerationMutation(a2);
        v8 = *(objc_object **)(*((_QWORD *)&v15 + 1) + 8 * i);
        if ((IPC::isSerializableValue((IPC *)v8, v4) & 1) != 0)
        {
          WebKit::CoreIPCNSCFObject::CoreIPCNSCFObject((WebKit::CoreIPCNSCFObject *)&v14, v8);
          v9 = *((unsigned int *)this + 3);
          if ((_DWORD)v9 == *((_DWORD *)this + 2))
          {
            v10 = (objc_object **)WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this, v9 + 1, (unint64_t)&v14);
            v9 = *((unsigned int *)this + 3);
            v11 = *(_QWORD *)this;
            v12 = *v10;
            *v10 = 0;
          }
          else
          {
            v11 = *(_QWORD *)this;
            v12 = v14;
            v14 = 0;
          }
          *(_QWORD *)(v11 + 8 * v9) = v12;
          *((_DWORD *)this + 3) = v9 + 1;
          v4 = v14;
          v14 = 0;
          if (v4)
            std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::operator()[abi:sn180100]((uint64_t)&v14, (uint64_t)v4);
        }
      }
      v5 = -[NSArray countByEnumeratingWithState:objects:count:](a2, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v5);
  }
  return this;
}

void sub_197876F98(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::CoreIPCArray::toID(WebKit::CoreIPCNSCFObject **this@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  WebKit::CoreIPCNSCFObject *v6;
  uint64_t v7;
  CFTypeRef v8;
  CFTypeRef cf;

  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *((unsigned int *)this + 3));
  v5 = *((unsigned int *)this + 3);
  if ((_DWORD)v5)
  {
    v6 = *this;
    v7 = 8 * v5;
    do
    {
      WebKit::CoreIPCNSCFObject::toID(v6, &cf);
      objc_msgSend(v4, "addObject:", cf);
      v8 = cf;
      cf = 0;
      if (v8)
        CFRelease(v8);
      v6 = (WebKit::CoreIPCNSCFObject *)((char *)v6 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  *a2 = v4;
}

void sub_197877064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  const void *v10;

  if (cf)
    CFRelease(cf);
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

uint64_t std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::operator()[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  if (a2)
  {
    v3 = *(unsigned int *)(a2 + 40);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS6_13CoreIPCCFTypeENS6_12CoreIPCColorENS6_11CoreIPCDataENS6_11CoreIPCDateENS6_17CoreIPCDictionaryENS6_12CoreIPCErrorENS6_11CoreIPCFontENS6_13CoreIPCLocaleENS6_15CoreIPCNSShadowENS6_14CoreIPCNSValueENS6_13CoreIPCNumberENS6_11CoreIPCNullENS6_19CoreIPCSecureCodingENS6_13CoreIPCStringENS6_10CoreIPCURLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix[v3])(&v5, a2);
    *(_DWORD *)(a2 + 40) = -1;
    return MEMORY[0x19AEB936C](a2, 0x10E2C408981D52ALL);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t *result;
  uint64_t v3;

  result = a2;
  v3 = *a2;
  *result = 0;
  if (v3)
    return (uint64_t *)std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)result, v3);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, _QWORD *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  if ((*a2 & 0x8000000000000) != 0)
  {
    v2 = (unsigned int *)(*a2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  const void *v4;
  WTF::StringImpl *result;

  std::unique_ptr<WebKit::CoreIPCError>::reset[abi:sn180100]((WTF::StringImpl ***)(a2 + 24), 0);
  v4 = *(const void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  if (v4)
    CFRelease(v4);
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, uint64_t a2)
{
  const void *v2;

  v2 = *(const void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  if (v2)
    CFRelease(v2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E35082C8[v3])(&v5, a2 + 8);
  *(_DWORD *)(a2 + 32) = -1;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm14EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm15EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm16EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl ***std::unique_ptr<WebKit::CoreIPCError>::reset[abi:sn180100](WTF::StringImpl ***result, WTF::StringImpl **a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::unique_ptr<WebKit::CoreIPCError>::reset[abi:sn180100](v2 + 3, 0);
    v4 = v2[2];
    v2[2] = 0;
    if (v4)
      CFRelease(v4);
    v5 = *v2;
    *v2 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v3);
      else
        *(_DWORD *)v5 -= 2;
    }
    return (WTF::StringImpl ***)WTF::fastFree((WTF *)v2, v3);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJ8_NSRangeEEEN6WebKit19CoreIPCSecureCodingEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

uint64_t WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    v5 = 8 * v3;
    do
    {
      a2 = *(void **)v4;
      *(_QWORD *)v4 = 0;
      if (a2)
        std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::operator()[abi:sn180100]((uint64_t)v4, (uint64_t)a2);
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  v6 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

unint64_t WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  WTF *v4;
  uint64_t *v5;
  uint64_t *v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1978774E8);
    }
    v4 = *(WTF **)a1;
    v5 = (uint64_t *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 12));
    v6 = (uint64_t *)WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebKit::CoreIPCNSCFObject>::move((uint64_t)v4, v5, v6);
    if (v4)
    {
      if (*(WTF **)a1 == v4)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
  }
  return 1;
}

uint64_t WTF::VectorMover<false,WebKit::CoreIPCNSCFObject>::move(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  if ((uint64_t *)result != a2)
  {
    v5 = (uint64_t *)result;
    do
    {
      v6 = *v5;
      *v5 = 0;
      *a3 = v6;
      v7 = *v5;
      *v5 = 0;
      if (v7)
        result = std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::operator()[abi:sn180100]((uint64_t)v5, v7);
      ++a3;
      ++v5;
    }
    while (v5 != a2);
  }
  return result;
}

WebKit::CoreIPCCFArray *WebKit::CoreIPCCFArray::CoreIPCCFArray(WebKit::CoreIPCCFArray *this, CFArrayRef theArray)
{
  CFIndex Count;
  CFIndex v6;
  IPC *ValueAtIndex;
  const void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      v6 = 0;
      do
      {
        ValueAtIndex = (IPC *)CFArrayGetValueAtIndex(theArray, v6);
        if (IPC::typeFromCFTypeRef(ValueAtIndex, v8) != 16)
        {
          WebKit::CoreIPCCFType::CoreIPCCFType((WebKit::CoreIPCCFType *)&v14, ValueAtIndex);
          v9 = *((unsigned int *)this + 3);
          if ((_DWORD)v9 == *((_DWORD *)this + 2))
          {
            v10 = (uint64_t *)WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this, v9 + 1, (unint64_t)&v14);
            v9 = *((unsigned int *)this + 3);
            v11 = *(_QWORD *)this;
            v12 = *v10;
            *v10 = 0;
          }
          else
          {
            v11 = *(_QWORD *)this;
            v12 = v14;
            v14 = 0;
          }
          *(_QWORD *)(v11 + 8 * v9) = v12;
          *((_DWORD *)this + 3) = v9 + 1;
          v13 = v14;
          v14 = 0;
          if (v13)
            std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)&v14, v13);
        }
        ++v6;
      }
      while (Count != v6);
    }
  }
  return this;
}

void sub_197877644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v10;
  void *v12;

  v12 = a10;
  a10 = 0;
  if (v12)
    std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)&a10, (uint64_t)v12);
  WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v10, v12);
  _Unwind_Resume(a1);
}

void WebKit::CoreIPCCFArray::createCFArray(WebKit::CoreIPCCFType **this@<X0>, __CFArray **a2@<X8>)
{
  __CFArray *Mutable;
  uint64_t v5;
  WebKit::CoreIPCCFType *v6;
  uint64_t v7;
  void *v8;
  void *value;

  Mutable = CFArrayCreateMutable(0, *((unsigned int *)this + 3), MEMORY[0x1E0C9B378]);
  v5 = *((unsigned int *)this + 3);
  if ((_DWORD)v5)
  {
    v6 = *this;
    v7 = 8 * v5;
    do
    {
      WebKit::CoreIPCCFType::toID(v6, (CFTypeRef *)&value);
      v8 = value;
      if (value)
      {
        CFArrayAppendValue(Mutable, value);
        CFRelease(v8);
      }
      v6 = (WebKit::CoreIPCCFType *)((char *)v6 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  *a2 = Mutable;
}

void sub_197877718(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v6;
  uint64_t v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WTF **)a1;
    v7 = 8 * v3;
    do
    {
      a2 = *(void **)v6;
      *(_QWORD *)v6 = 0;
      if (a2)
        std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)v6, (uint64_t)a2);
      v6 = (WTF *)((char *)v6 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::CoreIPCCFType>(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (uint64_t *)WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *v3;
  *v3 = 0;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

unint64_t WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  WTF *v4;
  uint64_t *v5;
  uint64_t *v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x197877930);
    }
    v4 = *(WTF **)a1;
    v5 = (uint64_t *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 12));
    v6 = (uint64_t *)WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebKit::CoreIPCCFType>::move((uint64_t)v4, v5, v6);
    if (v4)
    {
      if (*(WTF **)a1 == v4)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
  }
  return 1;
}

uint64_t WTF::VectorMover<false,WebKit::CoreIPCCFType>::move(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  if ((uint64_t *)result != a2)
  {
    v5 = (uint64_t *)result;
    do
    {
      v6 = *v5;
      *v5 = 0;
      *a3 = v6;
      v7 = *v5;
      *v5 = 0;
      if (v7)
        result = std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)v5, v7);
      ++a3;
      ++v5;
    }
    while (v5 != a2);
  }
  return result;
}

unint64_t WebKit::CoreIPCCFDictionary::CoreIPCCFDictionary(WebKit::CoreIPCCFDictionary *this, const __CFDictionary *a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t result;
  int v7;
  uint64_t v8;
  _QWORD v9[5];

  *(_QWORD *)this = 0;
  if (!a2)
    return (unint64_t)this;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = 0;
  v4[1] = 0;
  std::unique_ptr<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::reset[abi:sn180100]((uint64_t *)this, v4);
  v5 = *(_QWORD *)this;
  result = CFDictionaryGetCount(a2);
  v7 = result;
  if (!result)
  {
LABEL_5:
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = ___ZN6WebKit19CoreIPCCFDictionaryC2EPK14__CFDictionary_block_invoke;
    v9[3] = &__block_descriptor_40_e15_v32__0_8_16_B24l;
    v9[4] = this;
    -[__CFDictionary enumerateKeysAndObjectsUsingBlock:](a2, "enumerateKeysAndObjectsUsingBlock:", v9);
    return (unint64_t)this;
  }
  if (!(result >> 28))
  {
    v8 = WTF::fastMalloc((WTF *)(16 * result));
    *(_DWORD *)(v5 + 8) = v7;
    *(_QWORD *)v5 = v8;
    goto LABEL_5;
  }
  __break(0xC471u);
  return result;
}

void sub_197877A60(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::reset[abi:sn180100](v1, 0);
  _Unwind_Resume(a1);
}

void ___ZN6WebKit19CoreIPCCFDictionaryC2EPK14__CFDictionary_block_invoke(uint64_t a1, IPC *this, IPC *a3)
{
  uint64_t *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(uint64_t **)(a1 + 32);
  if (IPC::typeFromCFTypeRef(this, this) != 16 && IPC::typeFromCFTypeRef(a3, v6) != 16)
  {
    v7 = *v5;
    WebKit::CoreIPCCFType::CoreIPCCFType((WebKit::CoreIPCCFType *)&v18, this);
    WebKit::CoreIPCCFType::CoreIPCCFType((WebKit::CoreIPCCFType *)&v17, a3);
    v9 = v17;
    v8 = v18;
    v17 = 0;
    v18 = 0;
    v19 = v8;
    v20 = v9;
    v10 = *(unsigned int *)(v7 + 12);
    if ((_DWORD)v10 == *(_DWORD *)(v7 + 8))
    {
      WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>>(v7, (unint64_t)&v19);
    }
    else
    {
      v11 = (uint64_t *)(*(_QWORD *)v7 + 16 * v10);
      v19 = 0;
      *v11 = v8;
      v12 = v20;
      v20 = 0;
      v11[1] = v12;
      *(_DWORD *)(v7 + 12) = v10 + 1;
    }
    v13 = v20;
    v20 = 0;
    if (v13)
      std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)&v20, v13);
    v14 = v19;
    v19 = 0;
    if (v14)
      std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)&v19, v14);
    v15 = v17;
    v17 = 0;
    if (v15)
      std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)&v17, v15);
    v16 = v18;
    v18 = 0;
    if (v16)
      std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)&v18, v16);
  }
}

void sub_197877B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v14 = a12;
  a12 = 0;
  if (v14)
    std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100](v12, v14);
  v15 = a11;
  a11 = 0;
  if (v15)
    std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)&a11, v15);
  v16 = a9;
  a9 = 0;
  if (v16)
    std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)&a9, v16);
  v17 = a10;
  a10 = 0;
  if (v17)
    std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)&a10, v17);
  _Unwind_Resume(exception_object);
}

void WebKit::CoreIPCCFDictionary::createCFDictionary(WebKit::CoreIPCCFType ***this@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  WebKit::CoreIPCCFType **v5;
  uint64_t v6;
  WebKit::CoreIPCCFType *v7;
  uint64_t v8;
  WebKit::CoreIPCCFType *v9;
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef v12;
  CFTypeRef v13;
  CFTypeRef v14;

  if (*this)
  {
    v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", *((unsigned int *)*this + 3));
    v5 = *this;
    v6 = *((unsigned int *)*this + 3);
    if ((_DWORD)v6)
    {
      v7 = *v5;
      v8 = (uint64_t)*v5 + 16 * v6;
      do
      {
        WebKit::CoreIPCCFType::toID(v7, &v14);
        v9 = (WebKit::CoreIPCCFType *)((char *)v7 + 8);
        WebKit::CoreIPCCFType::toID(v9, &v13);
        v11 = v13;
        v10 = v14;
        if (v14)
        {
          if (v13)
          {
            objc_msgSend(v4, "setObject:forKey:", v13, v14);
            CFRelease(v11);
          }
          v12 = v10;
        }
        else
        {
          if (!v13)
            goto LABEL_9;
          v12 = v13;
        }
        CFRelease(v12);
LABEL_9:
        v7 = (WebKit::CoreIPCCFType *)((char *)v9 + 8);
      }
      while (v7 != (WebKit::CoreIPCCFType *)v8);
    }
    *a2 = v4;
    if (v4)
    {
      CFRetain(v4);
      CFRelease(v4);
    }
  }
  else
  {
    *a2 = 0;
  }
}

void sub_197877CF4(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_197877D24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    JUMPOUT(0x197877D10);
  JUMPOUT(0x197877D08);
}

void sub_197877D34()
{
  JUMPOUT(0x197877D10);
}

uint64_t std::unique_ptr<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::reset[abi:sn180100](uint64_t *a1, void *a2)
{
  uint64_t result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = (uint64_t)a2;
  if (result)
  {
    v4 = (WTF *)WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(result, a2);
    return WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>>::destruct(*(_QWORD *)a1, (uint64_t *)(*(_QWORD *)a1 + 16 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::VectorDestructor<true,WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>>::destruct(uint64_t result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;

  if ((uint64_t *)result != a2)
  {
    v3 = (uint64_t *)(result + 8);
    do
    {
      v4 = *v3;
      *v3 = 0;
      v5 = v3 - 1;
      if (v4)
        result = std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)v3, v4);
      v6 = *v5;
      *v5 = 0;
      if (v6)
        result = std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)(v3 - 1), v6);
      v7 = v3 + 1;
      v3 += 2;
    }
    while (v7 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>>(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (uint64_t *)WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = (_QWORD *)(*(_QWORD *)a1 + 16 * v4);
  v6 = *v3;
  *v3 = 0;
  *v5 = v6;
  v7 = v3[1];
  v3[1] = 0;
  v5[1] = v7;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

unint64_t WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  WTF *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x197877FA0);
    }
    v4 = *(WTF **)a1;
    v5 = (_QWORD *)(*(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12));
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>>::move((uint64_t)v4, v5, v6);
    if (v4)
    {
      if (*(WTF **)a1 == v4)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
  }
  return 1;
}

uint64_t WTF::VectorMover<false,WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>>::move(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  if ((_QWORD *)result != a2)
  {
    v5 = (uint64_t *)(result + 8);
    do
    {
      v7 = v5 - 1;
      v6 = *(v5 - 1);
      *(v5 - 1) = 0;
      *a3 = v6;
      v8 = *v5;
      *v5 = 0;
      a3[1] = v8;
      v9 = *v5;
      *v5 = 0;
      if (v9)
        result = std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)v5, v9);
      v10 = *v7;
      *v7 = 0;
      if (v10)
        result = std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)(v5 - 1), v10);
      v11 = v5 + 1;
      v5 += 2;
      a3 += 2;
    }
    while (v11 != a2);
  }
  return result;
}

void WebKit::CoreIPCCFType::CoreIPCCFType(WebKit::CoreIPCCFType *this, IPC *a2)
{
  char *v2;

  v2 = (char *)&loc_19787805C + *((int *)qword_197878348 + IPC::typeFromCFTypeRef(a2, a2));
  __asm { BR              X10 }
}

uint64_t *sub_19787806C(int a1, const __CFNumber *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t *v19;
  WebKit::CoreIPCNumber *v20;
  uint64_t v21;
  _QWORD v23[2];
  int v24;
  uint64_t v25;

  v23[0] = WebKit::CoreIPCNumber::numberHolderForNumber(v20, a2);
  v23[1] = v21;
  v24 = 8;
  WTF::makeUniqueRefWithoutFastMallocCheck<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>((uint64_t)v23, v19);
  if (v24 != -1)
    ((void (*)(uint64_t *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS6_14CoreIPCBooleanENS6_21CoreIPCCFCharacterSetENS6_11CoreIPCDataENS6_11CoreIPCDateENS6_19CoreIPCCFDictionaryENS6_11CoreIPCNullENS6_13CoreIPCNumberENS6_13CoreIPCStringENS6_12CoreIPCCFURLENS6_21CoreIPCSecCertificateENS6_15CoreIPCSecTrustENS6_19CoreIPCCGColorSpaceEN7WebCore5ColorENS6_23CoreIPCSecAccessControlEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix[v24])(&v25, v23);
  return v19;
}

uint64_t WTF::makeUniqueRefWithoutFastMallocCheck<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,(std::__variant_detail::_Trait)1>::__move_constructor(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1978783DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19AEB936C](v1, 0x10E2C401DBBE44BLL);
  _Unwind_Resume(a1);
}

void WebKit::CoreIPCCFType::toID(WebKit::CoreIPCCFType *this@<X0>, CFTypeRef *a2@<X8>)
{
  CFTypeRef v3;
  CFTypeRef v4;
  CFTypeRef cf;

  WebKit::CoreIPCCFType::toCFType((uint64_t *)&cf, this);
  v3 = cf;
  *a2 = cf;
  if (v3)
  {
    CFRetain(v3);
    v4 = cf;
    cf = 0;
    if (v4)
      CFRelease(v4);
  }
}

void sub_19787844C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::CoreIPCCFType::toCFType(WebKit::CoreIPCCFType *this)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  char *v5;

  v1 = *(unsigned int *)(*(_QWORD *)this + 16);
  if ((_DWORD)v1 == -1)
  {
    v3 = std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<WTF::UniqueRef<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>,void>::encode<IPC::Encoder>(v3);
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(char **))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK6WebKit13CoreIPCCFType8toCFTypeEvE3__0JZNKS9_8toCFTypeEvE3__1ZNKS9_8toCFTypeEvE3__2ZNKS9_8toCFTypeEvE3__3ZNKS9_8toCFTypeEvE3__4ZNKS9_8toCFTypeEvE3__5ZNKS9_8toCFTypeEvE3__6ZNKS9_8toCFTypeEvE3__7ZNKS9_8toCFTypeEvE3__8ZNKS9_8toCFTypeEvE3__9ZNKS9_8toCFTypeEvE4__10ZNKS9_8toCFTypeEvE4__11ZNKS9_8toCFTypeEvE4__12ZNKS9_8toCFTypeEvE4__13ZNKS9_8toCFTypeEvE4__14ZNKS9_8toCFTypeEvE4__15EEEEEJRKNS0_6__implIJDnNS8_14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEEEEEDcOT_DpOT0____fmatrix
                                             + v1))(&v5);
  }
}

void IPC::ArgumentCoder<WTF::UniqueRef<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>,void>::encode<IPC::Encoder>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  size_t v12;
  char *v13;
  void *v14;

  v3 = *a2;
  v4 = *(unsigned __int8 *)(*a2 + 16);
  v5 = *(_QWORD *)(a1 + 544);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(a1 + 552);
  if (v7 >= v5 + 1)
  {
    v8 = *(char **)(a1 + 528);
    v9 = *(_QWORD *)(a1 + 544);
LABEL_3:
    bzero(&v8[v9], v5 - v9);
    *(_QWORD *)(a1 + 544) = v6;
    v10 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v5);
    *(_QWORD *)(a1 + 536) = v10 + 1;
    *v10 = v4;
    IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&>((IPC::Encoder *)a1, v3, v4);
    return;
  }
  v11 = (2 * v7 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v12 = v11;
    v11 *= 2;
  }
  while (v12 < v6);
  v13 = (char *)mmap(0, v12, 3, 4098, -1, 0);
  if (v13 != (char *)-1)
  {
    v8 = v13;
    memcpy(v13, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v14 = *(void **)(a1 + 528);
    if (v14 != (void *)(a1 + 16))
      munmap(v14, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v8;
    *(_QWORD *)(a1 + 552) = v12;
    v9 = *(_QWORD *)(a1 + 544);
    goto LABEL_3;
  }
  __break(0xC471u);
}

uint64_t IPC::typeFromCFTypeRef(IPC *this, const void *a2)
{
  CFTypeID v2;

  if (!this)
    return 15;
  v2 = CFGetTypeID(this);
  if (v2 == CFArrayGetTypeID())
    return 0;
  if (v2 == CFBooleanGetTypeID())
    return 1;
  if (v2 == CFCharacterSetGetTypeID())
    return 2;
  if (v2 == CFDataGetTypeID())
    return 3;
  if (v2 == CFDateGetTypeID())
    return 4;
  if (v2 == CFDictionaryGetTypeID())
    return 5;
  if (v2 == CFNullGetTypeID())
    return 6;
  if (v2 == CFNumberGetTypeID())
    return 7;
  if (v2 == CFStringGetTypeID())
    return 8;
  if (v2 == CFURLGetTypeID())
    return 9;
  if (v2 == CGColorSpaceGetTypeID())
    return 13;
  if (v2 == CGColorGetTypeID())
    return 14;
  if (v2 == SecCertificateGetTypeID())
    return 10;
  if (v2 == SecAccessControlGetTypeID())
    return 11;
  if (v2 == SecTrustGetTypeID())
    return 12;
  return 16;
}

void IPC::ArgumentCoder<WTF::UniqueRef<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>,void>::decode(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _BYTE v5[16];
  int v6;
  char v7;

  IPC::Decoder::decode<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>(a1, a2, (uint64_t)v5);
  if (v7)
  {
    WTF::makeUniqueRefWithoutFastMallocCheck<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>((uint64_t)v5, &v4);
    *(_QWORD *)a3 = v4;
    *(_BYTE *)(a3 + 8) = 1;
    if (v7)
    {
      if (v6 != -1)
        ((void (*)(uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS6_14CoreIPCBooleanENS6_21CoreIPCCFCharacterSetENS6_11CoreIPCDataENS6_11CoreIPCDateENS6_19CoreIPCCFDictionaryENS6_11CoreIPCNullENS6_13CoreIPCNumberENS6_13CoreIPCStringENS6_12CoreIPCCFURLENS6_21CoreIPCSecCertificateENS6_15CoreIPCSecTrustENS6_19CoreIPCCGColorSpaceEN7WebCore5ColorENS6_23CoreIPCSecAccessControlEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix[v6])(&v4, v5);
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 8) = 0;
  }
}

void sub_19787879C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, int a16, int a17, char a18)
{
  if (a18)
  {
    if (a16 != -1)
      ((void (*)(char *, __int16 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS6_14CoreIPCBooleanENS6_21CoreIPCCFCharacterSetENS6_11CoreIPCDataENS6_11CoreIPCDateENS6_19CoreIPCCFDictionaryENS6_11CoreIPCNullENS6_13CoreIPCNumberENS6_13CoreIPCStringENS6_12CoreIPCCFURLENS6_21CoreIPCSecCertificateENS6_15CoreIPCSecTrustENS6_19CoreIPCCGColorSpaceEN7WebCore5ColorENS6_23CoreIPCSecAccessControlEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix[a16])(&a10, &a12);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 24))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7)
      v8 = v6 == 0;
    else
      v8 = 1;
    if (!v8)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v5);
  }
}

void sub_197878830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  if (*(_BYTE *)(v13 + 24))
  {
    v15 = *(unsigned int *)(v13 + 16);
    if ((_DWORD)v15 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS6_14CoreIPCBooleanENS6_21CoreIPCCFCharacterSetENS6_11CoreIPCDataENS6_11CoreIPCDateENS6_19CoreIPCCFDictionaryENS6_11CoreIPCNullENS6_13CoreIPCNumberENS6_13CoreIPCStringENS6_12CoreIPCCFURLENS6_21CoreIPCSecCertificateENS6_15CoreIPCSecTrustENS6_19CoreIPCCGColorSpaceEN7WebCore5ColorENS6_23CoreIPCSecAccessControlEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix[v15])(&a13, v13);
    *(_DWORD *)(v13 + 16) = -1;
  }
  _Unwind_Resume(exception_object);
}

WebKit::CoreIPCCGColorSpace *WebKit::CoreIPCCGColorSpace::CoreIPCCGColorSpace(WebKit::CoreIPCCGColorSpace *this, CGColorSpace *a2)
{
  unsigned __int16 v4;
  char v5;
  uint64_t v6;
  CFStringRef Name;
  CFTypeRef v9;
  uint64_t v10;
  CFPropertyListRef v11;
  CFTypeRef cf;
  char v13;

  *(_BYTE *)this = 0;
  *((_DWORD *)this + 2) = 0;
  v4 = WebCore::colorSpaceForCGColorSpace(a2, a2);
  v5 = v4;
  if (v4 < 0x100u)
  {
    Name = CGColorSpaceGetName(a2);
    cf = Name;
    if (Name)
    {
      CFRetain(Name);
      std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>>::__assign_alt[abi:sn180100]<1ul,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<__CFString const*>>((uint64_t)this, (const void **)this, &cf);
      v9 = cf;
      cf = 0;
      if (!v9)
        return this;
    }
    else
    {
      v11 = CGColorSpaceCopyPropertyList(a2);
      if (!v11)
      {
        v10 = *((unsigned int *)this + 2);
        if ((_DWORD)v10 != -1)
        {
          if (!(_DWORD)v10)
          {
            *(_BYTE *)this = 17;
            return this;
          }
          ((void (*)(char *, WebKit::CoreIPCCGColorSpace *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v10])(&v13, this);
        }
        *(_BYTE *)this = 17;
        goto LABEL_7;
      }
      std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>>::__assign_alt[abi:sn180100]<2ul,WTF::RetainPtr<void const*>,WTF::RetainPtr<void const*>>((uint64_t)this, (const void **)this, &v11);
      v9 = v11;
      v11 = 0;
      if (!v9)
        return this;
    }
    CFRelease(v9);
    return this;
  }
  v6 = *((unsigned int *)this + 2);
  if ((_DWORD)v6 == -1)
  {
LABEL_6:
    *(_BYTE *)this = v5;
LABEL_7:
    *((_DWORD *)this + 2) = 0;
    return this;
  }
  if ((_DWORD)v6)
  {
    ((void (*)(CFTypeRef *, WebKit::CoreIPCCGColorSpace *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v6])(&cf, this);
    goto LABEL_6;
  }
  *(_BYTE *)this = v4;
  return this;
}

void sub_1978789E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf)
{
  uint64_t v11;
  CFTypeRef v13;
  uint64_t v14;

  v13 = cf;
  cf = 0;
  if (v13)
    CFRelease(v13);
  v14 = *(unsigned int *)(v11 + 8);
  if ((_DWORD)v14 != -1)
    ((void (*)(CFTypeRef *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v14])(&cf, v11);
  *(_DWORD *)(v11 + 8) = -1;
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENSB_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJS9_SF_SI_EEEEEEDcSM_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENSB_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJS9_SF_SI_EEEEEEDcSM_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>>::__assign_alt[abi:sn180100]<1ul,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<__CFString const*>>(uint64_t a1, const void **a2, const void **a3)
{
  uint64_t v5;
  const void *v6;
  const void *v7;
  const void *v8;
  char v9;

  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v5])(&v9, a1);
LABEL_6:
    v8 = *a3;
    *a3 = 0;
    *(_QWORD *)a1 = v8;
    *(_DWORD *)(a1 + 8) = 1;
    return;
  }
  v6 = *a3;
  *a3 = 0;
  v7 = *a2;
  *a2 = v6;
  if (v7)
    CFRelease(v7);
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>>::__assign_alt[abi:sn180100]<2ul,WTF::RetainPtr<void const*>,WTF::RetainPtr<void const*>>(uint64_t a1, const void **a2, const void **a3)
{
  uint64_t v5;
  const void *v6;
  const void *v7;
  const void *v8;
  char v9;

  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v5])(&v9, a1);
LABEL_6:
    v8 = *a3;
    *a3 = 0;
    *(_QWORD *)a1 = v8;
    *(_DWORD *)(a1 + 8) = 2;
    return;
  }
  v6 = *a3;
  *a3 = 0;
  v7 = *a2;
  *a2 = v6;
  if (v7)
    CFRelease(v7);
}

uint64_t std::__variant_detail::__impl<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>::__impl[abi:sn180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_197878BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 8);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v15])(&a13, v13);
  *(_DWORD *)(v13 + 8) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 8) = -1;
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E3508310[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENSB_IPKvEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSN_1EJS9_SF_SI_EEEOSY_EEEDcSQ_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENSB_IPKvEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSN_1EJS9_SF_SI_EEEOSY_EEEDcSQ_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENSB_IPKvEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSN_1EJS9_SF_SI_EEEOSY_EEEDcSQ_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, uint64_t *a2)
{
  return std::unique_ptr<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::reset[abi:sn180100](a2, 0);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v3])(&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm14EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, _QWORD *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  if ((*a2 & 0x8000000000000) != 0)
  {
    v2 = (unsigned int *)(*a2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm15EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

uint64_t std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  if (a2)
  {
    v3 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS6_14CoreIPCBooleanENS6_21CoreIPCCFCharacterSetENS6_11CoreIPCDataENS6_11CoreIPCDateENS6_19CoreIPCCFDictionaryENS6_11CoreIPCNullENS6_13CoreIPCNumberENS6_13CoreIPCStringENS6_12CoreIPCCFURLENS6_21CoreIPCSecCertificateENS6_15CoreIPCSecTrustENS6_19CoreIPCCGColorSpaceEN7WebCore5ColorENS6_23CoreIPCSecAccessControlEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix[v3])(&v5, a2);
    *(_DWORD *)(a2 + 16) = -1;
    return MEMORY[0x19AEB936C](a2, 0x10E2C401DBBE44BLL);
  }
  return result;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 16) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_197878EA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 16);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS6_14CoreIPCBooleanENS6_21CoreIPCCFCharacterSetENS6_11CoreIPCDataENS6_11CoreIPCDateENS6_19CoreIPCCFDictionaryENS6_11CoreIPCNullENS6_13CoreIPCNumberENS6_13CoreIPCStringENS6_12CoreIPCCFURLENS6_21CoreIPCSecCertificateENS6_15CoreIPCSecTrustENS6_19CoreIPCCGColorSpaceEN7WebCore5ColorENS6_23CoreIPCSecAccessControlEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix[v15])(&a13, v13);
  *(_DWORD *)(v13 + 16) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS6_14CoreIPCBooleanENS6_21CoreIPCCFCharacterSetENS6_11CoreIPCDataENS6_11CoreIPCDateENS6_19CoreIPCCFDictionaryENS6_11CoreIPCNullENS6_13CoreIPCNumberENS6_13CoreIPCStringENS6_12CoreIPCCFURLENS6_21CoreIPCSecCertificateENS6_15CoreIPCSecTrustENS6_19CoreIPCCGColorSpaceEN7WebCore5ColorENS6_23CoreIPCSecAccessControlEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS6_14CoreIPCBooleanENS6_21CoreIPCCFCharacterSetENS6_11CoreIPCDataENS6_11CoreIPCDateENS6_19CoreIPCCFDictionaryENS6_11CoreIPCNullENS6_13CoreIPCNumberENS6_13CoreIPCStringENS6_12CoreIPCCFURLENS6_21CoreIPCSecCertificateENS6_15CoreIPCSecTrustENS6_19CoreIPCCGColorSpaceEN7WebCore5ColorENS6_23CoreIPCSecAccessControlEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JST_SS_EEEDcmSV_DpOT0____fdiagonal[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11ELm11EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12ELm12EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13ELm13EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::__variant_detail::__impl<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>::__impl[abi:sn180100](a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm14ELm14EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEOS14_EEEDcSW_DpT0_()
{
  return WebCore::Color::Color();
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm15ELm15EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCCFType::toCFType(void)::$_0,WebKit::CoreIPCCFType::toCFType(void)::$_1,WebKit::CoreIPCCFType::toCFType(void)::$_2,WebKit::CoreIPCCFType::toCFType(void)::$_3,WebKit::CoreIPCCFType::toCFType(void)::$_4,WebKit::CoreIPCCFType::toCFType(void)::$_5,WebKit::CoreIPCCFType::toCFType(void)::$_6,WebKit::CoreIPCCFType::toCFType(void)::$_7,WebKit::CoreIPCCFType::toCFType(void)::$_8,WebKit::CoreIPCCFType::toCFType(void)::$_9,WebKit::CoreIPCCFType::toCFType(void)::$_10,WebKit::CoreIPCCFType::toCFType(void)::$_11,WebKit::CoreIPCCFType::toCFType(void)::$_12,WebKit::CoreIPCCFType::toCFType(void)::$_13,WebKit::CoreIPCCFType::toCFType(void)::$_14,WebKit::CoreIPCCFType::toCFType(void)::$_15>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&>(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCCFType::toCFType(void)::$_0,WebKit::CoreIPCCFType::toCFType(void)::$_1,WebKit::CoreIPCCFType::toCFType(void)::$_2,WebKit::CoreIPCCFType::toCFType(void)::$_3,WebKit::CoreIPCCFType::toCFType(void)::$_4,WebKit::CoreIPCCFType::toCFType(void)::$_5,WebKit::CoreIPCCFType::toCFType(void)::$_6,WebKit::CoreIPCCFType::toCFType(void)::$_7,WebKit::CoreIPCCFType::toCFType(void)::$_8,WebKit::CoreIPCCFType::toCFType(void)::$_9,WebKit::CoreIPCCFType::toCFType(void)::$_10,WebKit::CoreIPCCFType::toCFType(void)::$_11,WebKit::CoreIPCCFType::toCFType(void)::$_12,WebKit::CoreIPCCFType::toCFType(void)::$_13,WebKit::CoreIPCCFType::toCFType(void)::$_14,WebKit::CoreIPCCFType::toCFType(void)::$_15>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&>(WebKit::CoreIPCCFType **this@<X1>, _QWORD *a2@<X8>)
{
  __CFArray *v3;

  WebKit::CoreIPCCFArray::createCFArray(this, &v3);
  *a2 = v3;
}

CFTypeRef std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCCFType::toCFType(void)::$_0,WebKit::CoreIPCCFType::toCFType(void)::$_1,WebKit::CoreIPCCFType::toCFType(void)::$_2,WebKit::CoreIPCCFType::toCFType(void)::$_3,WebKit::CoreIPCCFType::toCFType(void)::$_4,WebKit::CoreIPCCFType::toCFType(void)::$_5,WebKit::CoreIPCCFType::toCFType(void)::$_6,WebKit::CoreIPCCFType::toCFType(void)::$_7,WebKit::CoreIPCCFType::toCFType(void)::$_8,WebKit::CoreIPCCFType::toCFType(void)::$_9,WebKit::CoreIPCCFType::toCFType(void)::$_10,WebKit::CoreIPCCFType::toCFType(void)::$_11,WebKit::CoreIPCCFType::toCFType(void)::$_12,WebKit::CoreIPCCFType::toCFType(void)::$_13,WebKit::CoreIPCCFType::toCFType(void)::$_14,WebKit::CoreIPCCFType::toCFType(void)::$_15>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&>@<X0>(_BYTE *a1@<X1>, _QWORD *a2@<X8>)
{
  CFTypeRef *v3;
  CFTypeRef v4;
  CFTypeRef result;

  v3 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  if (!*a1)
    v3 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
  v4 = *v3;
  if (*v3)
    result = CFRetain(*v3);
  *a2 = v4;
  return result;
}

CFCharacterSetRef std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCCFType::toCFType(void)::$_0,WebKit::CoreIPCCFType::toCFType(void)::$_1,WebKit::CoreIPCCFType::toCFType(void)::$_2,WebKit::CoreIPCCFType::toCFType(void)::$_3,WebKit::CoreIPCCFType::toCFType(void)::$_4,WebKit::CoreIPCCFType::toCFType(void)::$_5,WebKit::CoreIPCCFType::toCFType(void)::$_6,WebKit::CoreIPCCFType::toCFType(void)::$_7,WebKit::CoreIPCCFType::toCFType(void)::$_8,WebKit::CoreIPCCFType::toCFType(void)::$_9,WebKit::CoreIPCCFType::toCFType(void)::$_10,WebKit::CoreIPCCFType::toCFType(void)::$_11,WebKit::CoreIPCCFType::toCFType(void)::$_12,WebKit::CoreIPCCFType::toCFType(void)::$_13,WebKit::CoreIPCCFType::toCFType(void)::$_14,WebKit::CoreIPCCFType::toCFType(void)::$_15>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&>@<X0>(CFDataRef *a1@<X1>, CFCharacterSetRef *a2@<X8>)
{
  CFCharacterSetRef result;

  result = CFCharacterSetCreateWithBitmapRepresentation(0, *a1);
  *a2 = result;
  return result;
}

CFTypeRef std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCCFType::toCFType(void)::$_0,WebKit::CoreIPCCFType::toCFType(void)::$_1,WebKit::CoreIPCCFType::toCFType(void)::$_2,WebKit::CoreIPCCFType::toCFType(void)::$_3,WebKit::CoreIPCCFType::toCFType(void)::$_4,WebKit::CoreIPCCFType::toCFType(void)::$_5,WebKit::CoreIPCCFType::toCFType(void)::$_6,WebKit::CoreIPCCFType::toCFType(void)::$_7,WebKit::CoreIPCCFType::toCFType(void)::$_8,WebKit::CoreIPCCFType::toCFType(void)::$_9,WebKit::CoreIPCCFType::toCFType(void)::$_10,WebKit::CoreIPCCFType::toCFType(void)::$_11,WebKit::CoreIPCCFType::toCFType(void)::$_12,WebKit::CoreIPCCFType::toCFType(void)::$_13,WebKit::CoreIPCCFType::toCFType(void)::$_14,WebKit::CoreIPCCFType::toCFType(void)::$_15>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&>@<X0>(CFTypeRef *a1@<X1>, _QWORD *a2@<X8>)
{
  CFTypeRef v3;
  CFTypeRef result;

  v3 = *a1;
  if (*a1)
    result = CFRetain(*a1);
  *a2 = v3;
  return result;
}

CFDateRef std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCCFType::toCFType(void)::$_0,WebKit::CoreIPCCFType::toCFType(void)::$_1,WebKit::CoreIPCCFType::toCFType(void)::$_2,WebKit::CoreIPCCFType::toCFType(void)::$_3,WebKit::CoreIPCCFType::toCFType(void)::$_4,WebKit::CoreIPCCFType::toCFType(void)::$_5,WebKit::CoreIPCCFType::toCFType(void)::$_6,WebKit::CoreIPCCFType::toCFType(void)::$_7,WebKit::CoreIPCCFType::toCFType(void)::$_8,WebKit::CoreIPCCFType::toCFType(void)::$_9,WebKit::CoreIPCCFType::toCFType(void)::$_10,WebKit::CoreIPCCFType::toCFType(void)::$_11,WebKit::CoreIPCCFType::toCFType(void)::$_12,WebKit::CoreIPCCFType::toCFType(void)::$_13,WebKit::CoreIPCCFType::toCFType(void)::$_14,WebKit::CoreIPCCFType::toCFType(void)::$_15>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&>@<X0>(CFAbsoluteTime *a1@<X1>, CFDateRef *a2@<X8>)
{
  CFDateRef result;

  result = CFDateCreate(0, *a1);
  *a2 = result;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCCFType::toCFType(void)::$_0,WebKit::CoreIPCCFType::toCFType(void)::$_1,WebKit::CoreIPCCFType::toCFType(void)::$_2,WebKit::CoreIPCCFType::toCFType(void)::$_3,WebKit::CoreIPCCFType::toCFType(void)::$_4,WebKit::CoreIPCCFType::toCFType(void)::$_5,WebKit::CoreIPCCFType::toCFType(void)::$_6,WebKit::CoreIPCCFType::toCFType(void)::$_7,WebKit::CoreIPCCFType::toCFType(void)::$_8,WebKit::CoreIPCCFType::toCFType(void)::$_9,WebKit::CoreIPCCFType::toCFType(void)::$_10,WebKit::CoreIPCCFType::toCFType(void)::$_11,WebKit::CoreIPCCFType::toCFType(void)::$_12,WebKit::CoreIPCCFType::toCFType(void)::$_13,WebKit::CoreIPCCFType::toCFType(void)::$_14,WebKit::CoreIPCCFType::toCFType(void)::$_15>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&>(WebKit::CoreIPCCFType ***this@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  WebKit::CoreIPCCFDictionary::createCFDictionary(this, &v3);
  *a2 = v3;
}

CFTypeRef std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCCFType::toCFType(void)::$_0,WebKit::CoreIPCCFType::toCFType(void)::$_1,WebKit::CoreIPCCFType::toCFType(void)::$_2,WebKit::CoreIPCCFType::toCFType(void)::$_3,WebKit::CoreIPCCFType::toCFType(void)::$_4,WebKit::CoreIPCCFType::toCFType(void)::$_5,WebKit::CoreIPCCFType::toCFType(void)::$_6,WebKit::CoreIPCCFType::toCFType(void)::$_7,WebKit::CoreIPCCFType::toCFType(void)::$_8,WebKit::CoreIPCCFType::toCFType(void)::$_9,WebKit::CoreIPCCFType::toCFType(void)::$_10,WebKit::CoreIPCCFType::toCFType(void)::$_11,WebKit::CoreIPCCFType::toCFType(void)::$_12,WebKit::CoreIPCCFType::toCFType(void)::$_13,WebKit::CoreIPCCFType::toCFType(void)::$_14,WebKit::CoreIPCCFType::toCFType(void)::$_15>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&>@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  CFTypeRef result;

  v2 = *MEMORY[0x1E0C9B0D0];
  if (*MEMORY[0x1E0C9B0D0])
    result = CFRetain((CFTypeRef)*MEMORY[0x1E0C9B0D0]);
  *a1 = v2;
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCCFType::toCFType(void)::$_0,WebKit::CoreIPCCFType::toCFType(void)::$_1,WebKit::CoreIPCCFType::toCFType(void)::$_2,WebKit::CoreIPCCFType::toCFType(void)::$_3,WebKit::CoreIPCCFType::toCFType(void)::$_4,WebKit::CoreIPCCFType::toCFType(void)::$_5,WebKit::CoreIPCCFType::toCFType(void)::$_6,WebKit::CoreIPCCFType::toCFType(void)::$_7,WebKit::CoreIPCCFType::toCFType(void)::$_8,WebKit::CoreIPCCFType::toCFType(void)::$_9,WebKit::CoreIPCCFType::toCFType(void)::$_10,WebKit::CoreIPCCFType::toCFType(void)::$_11,WebKit::CoreIPCCFType::toCFType(void)::$_12,WebKit::CoreIPCCFType::toCFType(void)::$_13,WebKit::CoreIPCCFType::toCFType(void)::$_14,WebKit::CoreIPCCFType::toCFType(void)::$_15>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&>@<X0>(WebKit::CoreIPCNumber *this@<X1>, _QWORD *a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v4;

  result = WebKit::CoreIPCNumber::createCFNumber(this);
  *a2 = v4;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCCFType::toCFType(void)::$_0,WebKit::CoreIPCCFType::toCFType(void)::$_1,WebKit::CoreIPCCFType::toCFType(void)::$_2,WebKit::CoreIPCCFType::toCFType(void)::$_3,WebKit::CoreIPCCFType::toCFType(void)::$_4,WebKit::CoreIPCCFType::toCFType(void)::$_5,WebKit::CoreIPCCFType::toCFType(void)::$_6,WebKit::CoreIPCCFType::toCFType(void)::$_7,WebKit::CoreIPCCFType::toCFType(void)::$_8,WebKit::CoreIPCCFType::toCFType(void)::$_9,WebKit::CoreIPCCFType::toCFType(void)::$_10,WebKit::CoreIPCCFType::toCFType(void)::$_11,WebKit::CoreIPCCFType::toCFType(void)::$_12,WebKit::CoreIPCCFType::toCFType(void)::$_13,WebKit::CoreIPCCFType::toCFType(void)::$_14,WebKit::CoreIPCCFType::toCFType(void)::$_15>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&>(WebKit::CoreIPCString *this@<X1>, CFTypeRef *a2@<X8>)
{
  CFTypeRef v3;
  CFTypeRef v4;
  CFTypeRef cf;

  WebKit::CoreIPCString::toID(this, (const __CFString **)&cf);
  v3 = cf;
  *a2 = cf;
  if (v3)
  {
    CFRetain(v3);
    v4 = cf;
    cf = 0;
    if (v4)
      CFRelease(v4);
  }
}

void sub_197879260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

CFTypeRef std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCCFType::toCFType(void)::$_0,WebKit::CoreIPCCFType::toCFType(void)::$_1,WebKit::CoreIPCCFType::toCFType(void)::$_2,WebKit::CoreIPCCFType::toCFType(void)::$_3,WebKit::CoreIPCCFType::toCFType(void)::$_4,WebKit::CoreIPCCFType::toCFType(void)::$_5,WebKit::CoreIPCCFType::toCFType(void)::$_6,WebKit::CoreIPCCFType::toCFType(void)::$_7,WebKit::CoreIPCCFType::toCFType(void)::$_8,WebKit::CoreIPCCFType::toCFType(void)::$_9,WebKit::CoreIPCCFType::toCFType(void)::$_10,WebKit::CoreIPCCFType::toCFType(void)::$_11,WebKit::CoreIPCCFType::toCFType(void)::$_12,WebKit::CoreIPCCFType::toCFType(void)::$_13,WebKit::CoreIPCCFType::toCFType(void)::$_14,WebKit::CoreIPCCFType::toCFType(void)::$_15>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&>@<X0>(CFTypeRef *a1@<X1>, _QWORD *a2@<X8>)
{
  CFTypeRef v3;
  CFTypeRef result;

  v3 = *a1;
  if (*a1)
    result = CFRetain(*a1);
  *a2 = v3;
  return result;
}

SecCertificateRef std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCCFType::toCFType(void)::$_0,WebKit::CoreIPCCFType::toCFType(void)::$_1,WebKit::CoreIPCCFType::toCFType(void)::$_2,WebKit::CoreIPCCFType::toCFType(void)::$_3,WebKit::CoreIPCCFType::toCFType(void)::$_4,WebKit::CoreIPCCFType::toCFType(void)::$_5,WebKit::CoreIPCCFType::toCFType(void)::$_6,WebKit::CoreIPCCFType::toCFType(void)::$_7,WebKit::CoreIPCCFType::toCFType(void)::$_8,WebKit::CoreIPCCFType::toCFType(void)::$_9,WebKit::CoreIPCCFType::toCFType(void)::$_10,WebKit::CoreIPCCFType::toCFType(void)::$_11,WebKit::CoreIPCCFType::toCFType(void)::$_12,WebKit::CoreIPCCFType::toCFType(void)::$_13,WebKit::CoreIPCCFType::toCFType(void)::$_14,WebKit::CoreIPCCFType::toCFType(void)::$_15>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&>@<X0>(CFDataRef *a1@<X1>, SecCertificateRef *a2@<X8>)
{
  SecCertificateRef result;

  result = SecCertificateCreateWithData((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *a1);
  *a2 = result;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCCFType::toCFType(void)::$_0,WebKit::CoreIPCCFType::toCFType(void)::$_1,WebKit::CoreIPCCFType::toCFType(void)::$_2,WebKit::CoreIPCCFType::toCFType(void)::$_3,WebKit::CoreIPCCFType::toCFType(void)::$_4,WebKit::CoreIPCCFType::toCFType(void)::$_5,WebKit::CoreIPCCFType::toCFType(void)::$_6,WebKit::CoreIPCCFType::toCFType(void)::$_7,WebKit::CoreIPCCFType::toCFType(void)::$_8,WebKit::CoreIPCCFType::toCFType(void)::$_9,WebKit::CoreIPCCFType::toCFType(void)::$_10,WebKit::CoreIPCCFType::toCFType(void)::$_11,WebKit::CoreIPCCFType::toCFType(void)::$_12,WebKit::CoreIPCCFType::toCFType(void)::$_13,WebKit::CoreIPCCFType::toCFType(void)::$_14,WebKit::CoreIPCCFType::toCFType(void)::$_15>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = *a1;
  if (*a1)
    result = SecTrustDeserialize();
  *a2 = result;
  return result;
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCCFType::toCFType(void)::$_0,WebKit::CoreIPCCFType::toCFType(void)::$_1,WebKit::CoreIPCCFType::toCFType(void)::$_2,WebKit::CoreIPCCFType::toCFType(void)::$_3,WebKit::CoreIPCCFType::toCFType(void)::$_4,WebKit::CoreIPCCFType::toCFType(void)::$_5,WebKit::CoreIPCCFType::toCFType(void)::$_6,WebKit::CoreIPCCFType::toCFType(void)::$_7,WebKit::CoreIPCCFType::toCFType(void)::$_8,WebKit::CoreIPCCFType::toCFType(void)::$_9,WebKit::CoreIPCCFType::toCFType(void)::$_10,WebKit::CoreIPCCFType::toCFType(void)::$_11,WebKit::CoreIPCCFType::toCFType(void)::$_12,WebKit::CoreIPCCFType::toCFType(void)::$_13,WebKit::CoreIPCCFType::toCFType(void)::$_14,WebKit::CoreIPCCFType::toCFType(void)::$_15>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&>@<X0>(WebKit::CoreIPCCGColorSpace *this@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;

  result = WebKit::CoreIPCCGColorSpace::toCF(this, &v4);
  *a2 = v4;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCCFType::toCFType(void)::$_0,WebKit::CoreIPCCFType::toCFType(void)::$_1,WebKit::CoreIPCCFType::toCFType(void)::$_2,WebKit::CoreIPCCFType::toCFType(void)::$_3,WebKit::CoreIPCCFType::toCFType(void)::$_4,WebKit::CoreIPCCFType::toCFType(void)::$_5,WebKit::CoreIPCCFType::toCFType(void)::$_6,WebKit::CoreIPCCFType::toCFType(void)::$_7,WebKit::CoreIPCCFType::toCFType(void)::$_8,WebKit::CoreIPCCFType::toCFType(void)::$_9,WebKit::CoreIPCCFType::toCFType(void)::$_10,WebKit::CoreIPCCFType::toCFType(void)::$_11,WebKit::CoreIPCCFType::toCFType(void)::$_12,WebKit::CoreIPCCFType::toCFType(void)::$_13,WebKit::CoreIPCCFType::toCFType(void)::$_14,WebKit::CoreIPCCFType::toCFType(void)::$_15>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&>@<X0>(WebCore *this@<X1>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = WebCore::cachedCGColor(this, (const Color *)this);
  *a2 = v4;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<15ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCCFType::toCFType(void)::$_0,WebKit::CoreIPCCFType::toCFType(void)::$_1,WebKit::CoreIPCCFType::toCFType(void)::$_2,WebKit::CoreIPCCFType::toCFType(void)::$_3,WebKit::CoreIPCCFType::toCFType(void)::$_4,WebKit::CoreIPCCFType::toCFType(void)::$_5,WebKit::CoreIPCCFType::toCFType(void)::$_6,WebKit::CoreIPCCFType::toCFType(void)::$_7,WebKit::CoreIPCCFType::toCFType(void)::$_8,WebKit::CoreIPCCFType::toCFType(void)::$_9,WebKit::CoreIPCCFType::toCFType(void)::$_10,WebKit::CoreIPCCFType::toCFType(void)::$_11,WebKit::CoreIPCCFType::toCFType(void)::$_12,WebKit::CoreIPCCFType::toCFType(void)::$_13,WebKit::CoreIPCCFType::toCFType(void)::$_14,WebKit::CoreIPCCFType::toCFType(void)::$_15>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = SecAccessControlCreateFromData();
  *a1 = result;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(char const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned char const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(short const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned short const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(int const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned int const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(long long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned long long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(float const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(double const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double> const&>@<X0>(char *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithChar:", *a1);
  *a2 = result;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(char const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned char const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(short const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned short const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(int const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned int const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(long long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned long long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(float const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(double const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double> const&>@<X0>(unsigned __int8 *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithUnsignedChar:", *a1);
  *a2 = result;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(char const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned char const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(short const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned short const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(int const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned int const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(long long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned long long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(float const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(double const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double> const&>@<X0>(__int16 *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithShort:", *a1);
  *a2 = result;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(char const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned char const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(short const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned short const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(int const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned int const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(long long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned long long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(float const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(double const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double> const&>@<X0>(unsigned __int16 *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithUnsignedShort:", *a1);
  *a2 = result;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(char const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned char const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(short const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned short const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(int const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned int const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(long long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned long long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(float const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(double const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double> const&>@<X0>(unsigned int *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithInt:", *a1);
  *a2 = result;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(char const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned char const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(short const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned short const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(int const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned int const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(long long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned long long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(float const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(double const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double> const&>@<X0>(unsigned int *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithUnsignedInt:", *a1);
  *a2 = result;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(char const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned char const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(short const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned short const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(int const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned int const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(long long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned long long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(float const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(double const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double> const&>@<X0>(_QWORD *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithLong:", *a1);
  *a2 = result;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(char const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned char const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(short const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned short const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(int const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned int const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(long long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned long long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(float const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(double const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double> const&>@<X0>(_QWORD *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithUnsignedLong:", *a1);
  *a2 = result;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(char const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned char const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(short const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned short const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(int const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned int const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(long long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned long long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(float const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(double const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double> const&>@<X0>(_QWORD *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithLongLong:", *a1);
  *a2 = result;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(char const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned char const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(short const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned short const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(int const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned int const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(long long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned long long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(float const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(double const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double> const&>@<X0>(_QWORD *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithUnsignedLongLong:", *a1);
  *a2 = result;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(char const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned char const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(short const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned short const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(int const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned int const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(long long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned long long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(float const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(double const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double> const&>@<X0>(_DWORD *a1@<X1>, uint64_t *a2@<X8>)
{
  id v4;
  double v5;
  uint64_t result;

  v4 = objc_alloc(MEMORY[0x1E0CB37E8]);
  LODWORD(v5) = *a1;
  result = objc_msgSend(v4, "initWithFloat:", v5);
  *a2 = result;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(char const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned char const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(short const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned short const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(int const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned int const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(long long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(unsigned long long const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(float const&)#1},WebKit::CoreIPCNumber::createCFNumber(void)::{lambda(double const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double> const&>@<X0>(double *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithDouble:", *a1);
  *a2 = result;
  return result;
}

const __CFString *WebKit::CoreIPCString::toID@<X0>(WebKit::CoreIPCString *this@<X0>, const __CFString **a2@<X8>)
{
  const __CFString *result;

  if (*(_QWORD *)this)
  {
    result = (const __CFString *)WTF::StringImpl::operator NSString *();
    *a2 = result;
    if (!result)
      return result;
  }
  else
  {
    result = &stru_1E351F1B8;
    *a2 = &stru_1E351F1B8;
  }
  return (const __CFString *)CFRetain(result);
}

_QWORD *WebKit::CoreIPCCGColorSpace::toCF@<X0>(WebKit::CoreIPCCGColorSpace *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char *v8;

  v3 = *((unsigned int *)this + 2);
  if ((_DWORD)v3 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return (_QWORD *)std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCCGColorSpace::toCF(void)::{lambda(WebCore::ColorSpace)#1},WebKit::CoreIPCCGColorSpace::toCF(void)::{lambda(WTF::RetainPtr<__CFString const*>)#1},WebKit::CoreIPCCGColorSpace::toCF(void)::{lambda(WTF::RetainPtr<void const*>)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>> const&>(v5);
  }
  else
  {
    v8 = &v7;
    result = ((_QWORD *(*)(uint64_t *__return_ptr, char **, WebKit::CoreIPCCGColorSpace *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK6WebKit19CoreIPCCGColorSpace4toCFEvEUlN7WebCore10ColorSpaceEE_JZNKS9_4toCFEvEUlNS6_9RetainPtrIPK10__CFStringEEE_ZNKS9_4toCFEvEUlNSD_IPKvEEE_EEEEEJRKNS0_6__implIJSB_SH_SL_EEEEEEDcOT_DpOT0____fmatrix[v3])(&v6, &v8, this);
    *a2 = v6;
  }
  return result;
}

const void *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCCGColorSpace::toCF(void)::{lambda(WebCore::ColorSpace)#1},WebKit::CoreIPCCGColorSpace::toCF(void)::{lambda(WTF::RetainPtr<__CFString const*>)#1},WebKit::CoreIPCCGColorSpace::toCF(void)::{lambda(WTF::RetainPtr<void const*>)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>> const&>@<X0>(unsigned __int8 *a1@<X1>, _QWORD *a2@<X8>)
{
  const void *result;
  const void *v4;

  result = (const void *)WebCore::cachedNullableCGColorSpace((WebCore *)*a1);
  v4 = result;
  if (result)
    result = CFRetain(result);
  *a2 = v4;
  return result;
}

uint64_t WebCore::cachedNullableCGColorSpace(WebCore *a1)
{
  uint64_t result;

  if ((_DWORD)a1 == 17)
    return WebCore::sRGBColorSpaceRef(a1);
  switch((int)a1)
  {
    case 0:
      result = WebCore::adobeRGB1998ColorSpaceRef(a1);
      break;
    case 1:
      result = WebCore::displayP3ColorSpaceRef(a1);
      break;
    case 2:
      result = WebCore::extendedAdobeRGB1998ColorSpaceRef(a1);
      break;
    case 3:
      result = WebCore::extendedDisplayP3ColorSpaceRef(a1);
      break;
    case 4:
      result = WebCore::extendedLinearSRGBColorSpaceRef(a1);
      break;
    case 5:
      result = WebCore::extendedROMMRGBColorSpaceRef(a1);
      break;
    case 6:
      result = WebCore::extendedITUR_2020ColorSpaceRef(a1);
      break;
    case 7:
      result = WebCore::extendedSRGBColorSpaceRef(a1);
      break;
    case 12:
      result = WebCore::linearSRGBColorSpaceRef(a1);
      break;
    case 15:
      result = WebCore::ROMMRGBColorSpaceRef(a1);
      break;
    case 16:
      result = WebCore::ITUR_2020ColorSpaceRef(a1);
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

void std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCCGColorSpace::toCF(void)::{lambda(WebCore::ColorSpace)#1},WebKit::CoreIPCCGColorSpace::toCF(void)::{lambda(WTF::RetainPtr<__CFString const*>)#1},WebKit::CoreIPCCGColorSpace::toCF(void)::{lambda(WTF::RetainPtr<void const*>)#1}>>::operator()[abi:sn180100]<std::__variant_detail::__alt<1ul,WTF::RetainPtr<__CFString const*>> const&>(CFTypeRef *a1@<X1>, CGColorSpaceRef *a2@<X8>)
{
  const __CFString *v3;

  v3 = (const __CFString *)*a1;
  if (*a1)
    CFRetain(*a1);
  *a2 = CGColorSpaceCreateWithName(v3);
  if (v3)
    CFRelease(v3);
}

void sub_1978797F8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCCGColorSpace::toCF(void)::{lambda(WebCore::ColorSpace)#1},WebKit::CoreIPCCGColorSpace::toCF(void)::{lambda(WTF::RetainPtr<__CFString const*>)#1},WebKit::CoreIPCCGColorSpace::toCF(void)::{lambda(WTF::RetainPtr<void const*>)#1}>>::operator()[abi:sn180100]<std::__variant_detail::__alt<2ul,WTF::RetainPtr<void const*>> const&>(CFTypeRef *a1@<X1>, CGColorSpaceRef *a2@<X8>)
{
  CFTypeRef v3;

  v3 = *a1;
  if (*a1)
    CFRetain(*a1);
  *a2 = CGColorSpaceCreateWithPropertyList(v3);
  if (v3)
    CFRelease(v3);
}

void sub_19787985C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
    goto LABEL_2;
  if (*(_DWORD *)(a2 + 16))
  {
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_2:
    IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&,0ul>(a1, a2, a3);
  }
}

void IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&,0ul>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 1)
    goto LABEL_2;
  if (*(_DWORD *)(a2 + 16) != 1)
  {
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_2:
    IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&,0ul,1ul>(a1, a2, a3);
    return;
  }
  IPC::VectorArgumentCoder<false,WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2);
}

void IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&,0ul,1ul>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 2)
    goto LABEL_2;
  if (*(_DWORD *)(a2 + 16) != 2)
  {
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_2:
    IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&,0ul,1ul,2ul>(a1, a2, a3);
    return;
  }
  IPC::ArgumentCoder<WebKit::CoreIPCBoolean,void>::encode(a1, (char *)a2);
}

void IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 3)
    goto LABEL_2;
  if (*(_DWORD *)(a2 + 16) != 3)
  {
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_2:
    IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&,0ul,1ul,2ul,3ul>(a1, a2, a3);
    return;
  }
  IPC::ArgumentCoder<WebKit::CoreIPCCFCharacterSet,void>::encode((uint64_t)a1, (CFDataRef *)a2);
}

void IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 4)
    goto LABEL_2;
  if (*(_DWORD *)(a2 + 16) != 4)
  {
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_2:
    IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&,0ul,1ul,2ul,3ul,4ul>(a1, a2, a3);
    return;
  }
  IPC::ArgumentCoder<WebKit::CoreIPCData,void>::encode((uint64_t)a1, (CFDataRef *)a2);
}

void IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&,0ul,1ul,2ul,3ul,4ul>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  switch(a3)
  {
    case 5:
      if (*(_DWORD *)(a2 + 16) != 5)
        goto LABEL_13;
      IPC::ArgumentCoder<WTF::Seconds,void>::encode(a1, (uint64_t *)a2);
      break;
    case 6:
      if (*(_DWORD *)(a2 + 16) != 6)
        goto LABEL_13;
      IPC::ArgumentCoder<std::unique_ptr<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::unique_ptr<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>();
      break;
    case 7:
      if (*(_DWORD *)(a2 + 16) != 7)
        goto LABEL_13;
      WTF::isIntegralOrPointerType(a1);
      break;
    case 8:
      if (*(_DWORD *)(a2 + 16) != 8)
        goto LABEL_13;
      IPC::ArgumentCoder<WebKit::CoreIPCNumber,void>::encode(a1, (_QWORD *)a2);
      break;
    case 9:
      if (*(_DWORD *)(a2 + 16) != 9)
      {
LABEL_13:
        a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_8;
      }
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
      break;
    default:
LABEL_8:
      IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul>(a1, a2, a3);
      break;
  }
}

void IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  if (a3 == 10)
  {
    if (*(_DWORD *)(a2 + 16) == 10)
    {
      IPC::ArgumentCoder<WebKit::CoreIPCCFURL,void>::encode(a1, (CFURLRef *)a2);
      return;
    }
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
  }
  IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul>(a1, (WebKit::CoreIPCSecTrust *)a2, a3);
}

void IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul>(IPC::Encoder *a1, WebKit::CoreIPCSecTrust *this, uint64_t a3)
{
  const void *v4;
  size_t v5;
  uint64_t v6;

  switch(a3)
  {
    case 11:
      if (*((_DWORD *)this + 4) != 11)
        goto LABEL_13;
      v4 = (const void *)WebKit::CoreIPCSecCertificate::dataReference((CFDataRef *)this);
      goto LABEL_12;
    case 12:
      if (*((_DWORD *)this + 4) != 12)
        goto LABEL_13;
      v4 = WebKit::CoreIPCSecTrust::dataReference((CFDataRef *)this);
      goto LABEL_12;
    case 13:
      if (*((_DWORD *)this + 4) != 13)
        goto LABEL_13;
      IPC::ArgumentCoder<WebKit::CoreIPCCGColorSpace,void>::encode(a1, (uint64_t)this);
      return;
    case 14:
      if (*((_DWORD *)this + 4) != 14)
        goto LABEL_13;
      IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, this);
      return;
    case 15:
      if (*((_DWORD *)this + 4) == 15)
      {
        v4 = WebKit::CoreIPCSecAccessControl::dataReference((CFDataRef *)this);
LABEL_12:
        IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)a1, v4, v5);
      }
      else
      {
LABEL_13:
        v6 = std::__throw_bad_variant_access[abi:sn180100]();
        IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::StreamConnectionEncoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&>(v6);
      }
      return;
    default:
      return;
  }
}

void IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::StreamConnectionEncoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&>(WTF::StringImpl *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(unsigned __int8 *)(a2 + 16);
  v3 = *((_QWORD *)a1 + 2);
  if (v3 >= *((_QWORD *)a1 + 1))
  {
    *((_QWORD *)a1 + 1) = 0;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)a1 + v3) = v2;
    *((_QWORD *)a1 + 2) = v3 + 1;
  }
  IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::StreamConnectionEncoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&>(a1, a2, v2);
}

void IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::StreamConnectionEncoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&>(WTF::StringImpl *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
    goto LABEL_2;
  if (*(_DWORD *)(a2 + 16))
  {
    a1 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_2:
    IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::StreamConnectionEncoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&,0ul>(a1, a2, a3);
  }
}

void IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::StreamConnectionEncoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&,0ul>(WTF::StringImpl *a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 1)
    goto LABEL_2;
  if (*(_DWORD *)(a2 + 16) != 1)
  {
    a1 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_2:
    IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::StreamConnectionEncoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&,0ul,1ul>(a1, a2, a3);
    return;
  }
  IPC::ArgumentCoder<WebKit::CoreIPCCFArray,void>::encode();
}

void IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::StreamConnectionEncoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&,0ul,1ul>(WTF::StringImpl *a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 2)
    goto LABEL_2;
  if (*(_DWORD *)(a2 + 16) != 2)
  {
    a1 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_2:
    IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::StreamConnectionEncoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&,0ul,1ul,2ul>(a1, a2, a3);
    return;
  }
  IPC::ArgumentCoder<WebKit::CoreIPCBoolean,void>::encode(a1, (_BYTE *)a2);
}

void IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::StreamConnectionEncoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&,0ul,1ul,2ul>(WTF::StringImpl *a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 3)
    goto LABEL_2;
  if (*(_DWORD *)(a2 + 16) != 3)
  {
    a1 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_2:
    IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::StreamConnectionEncoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&,0ul,1ul,2ul,3ul>(a1, a2, a3);
    return;
  }
  IPC::ArgumentCoder<WebKit::CoreIPCCFCharacterSet,void>::encode(a1, (CFDataRef *)a2);
}

void IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::StreamConnectionEncoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&,0ul,1ul,2ul,3ul>(WTF::StringImpl *a1, uint64_t a2, uint64_t a3)
{
  if (a3 == 4)
  {
    if (*(_DWORD *)(a2 + 16) == 4)
    {
      IPC::ArgumentCoder<WebKit::CoreIPCData,void>::encode(a1, (CFDataRef *)a2);
      return;
    }
    a1 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
  }
  IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::StreamConnectionEncoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&,0ul,1ul,2ul,3ul,4ul>(a1, (WebKit::CoreIPCSecTrust *)a2, a3);
}

void IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::StreamConnectionEncoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&,0ul,1ul,2ul,3ul,4ul>(WTF::StringImpl *a1, WebKit::CoreIPCSecTrust *this, uint64_t a3)
{
  const void *v4;
  size_t v5;
  uint64_t *v6;
  void *v7;
  uint64_t v8;
  __int128 v9;

  switch(a3)
  {
    case 5:
      if (*((_DWORD *)this + 4) != 5)
        goto LABEL_26;
      IPC::ArgumentCoder<WebKit::CoreIPCDate,void>::encode(a1, this);
      return;
    case 6:
      if (*((_DWORD *)this + 4) != 6)
        goto LABEL_26;
      IPC::ArgumentCoder<std::unique_ptr<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::StreamConnectionEncoder,std::unique_ptr<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, (uint64_t **)this);
      return;
    case 7:
      if (*((_DWORD *)this + 4) != 7)
        goto LABEL_26;
      return;
    case 8:
      if (*((_DWORD *)this + 4) != 8)
        goto LABEL_26;
      v9 = *(_OWORD *)this;
      IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::StreamConnectionEncoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>>(a1, (uint64_t)&v9);
      return;
    case 9:
      if (*((_DWORD *)this + 4) != 9)
        goto LABEL_26;
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(a1, (uint64_t *)this);
      return;
    case 10:
      if (*((_DWORD *)this + 4) != 10)
        goto LABEL_26;
      IPC::ArgumentCoder<WebKit::CoreIPCCFURL,void>::encode(a1, (CFURLRef *)this);
      return;
    case 11:
      if (*((_DWORD *)this + 4) != 11)
        goto LABEL_26;
      v4 = (const void *)WebKit::CoreIPCSecCertificate::dataReference((CFDataRef *)this);
      goto LABEL_25;
    case 12:
      if (*((_DWORD *)this + 4) != 12)
        goto LABEL_26;
      v4 = WebKit::CoreIPCSecTrust::dataReference((CFDataRef *)this);
      goto LABEL_25;
    case 13:
      if (*((_DWORD *)this + 4) != 13)
        goto LABEL_26;
      IPC::ArgumentCoder<std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>> const&>(a1, (uint64_t)this);
      return;
    case 14:
      if (*((_DWORD *)this + 4) != 14)
        goto LABEL_26;
      IPC::ArgumentCoder<WebCore::Color,void>::encode((uint64_t *)a1, this);
      return;
    case 15:
      if (*((_DWORD *)this + 4) == 15)
      {
        v4 = WebKit::CoreIPCSecAccessControl::dataReference((CFDataRef *)this);
LABEL_25:
        IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(a1, v4, v5);
      }
      else
      {
LABEL_26:
        v6 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
        IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::decode<IPC::Decoder>(v6, v7, v8);
      }
      return;
    default:
      return;
  }
}

void IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  char v10;
  int v11;
  void *v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 v19;
  uint64_t v20;
  char v21;
  uint64_t *v22;
  __int128 v23;
  char v24;

  v3 = a1;
  v5 = a1[1];
  v6 = *a1;
  v7 = a1[2] - *a1;
  if (v5 <= v7)
  {
    v15 = 0;
    v16 = 0;
    *a1 = 0;
    a1[1] = 0;
    v17 = a1[3];
    if (v17)
    {
      v22 = v3;
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v17 + 16))(v17, v6, v5);
        v3 = v22;
        v16 = *v22;
        v15 = v22[1];
      }
      else
      {
        v15 = 0;
        v16 = 0;
      }
    }
    goto LABEL_30;
  }
  v8 = (_BYTE *)(v6 + v7);
  a1[2] = (uint64_t)(v8 + 1);
  if (!v6)
  {
    v15 = v5;
    v16 = 0;
LABEL_30:
    *v3 = 0;
    v3[1] = 0;
    v18 = v3[3];
    if (v18 && v15)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v16);
    goto LABEL_31;
  }
  v9 = *v8;
  if (v9 >= 0x10)
    goto LABEL_31;
  if (!*v8)
  {
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 16) = 0;
    goto LABEL_16;
  }
  if ((_DWORD)v9 != 1)
  {
    if ((_DWORD)v9 == 2)
    {
      v19 = IPC::Decoder::decode<WebKit::CoreIPCBoolean>(a1);
      if (v19 > 0xFFu)
      {
        *(_BYTE *)a3 = v19;
        v11 = 2;
        goto LABEL_15;
      }
    }
    else
    {
      if ((_DWORD)v9 == 3)
      {
        IPC::Decoder::decode<WebKit::CoreIPCCFCharacterSet>(a1, &v23);
        v10 = BYTE8(v23);
        if (BYTE8(v23))
        {
          *(_QWORD *)a3 = v23;
          v11 = 3;
          goto LABEL_15;
        }
        goto LABEL_38;
      }
      if ((_DWORD)v9 == 4)
      {
        IPC::Decoder::decode<WebKit::CoreIPCCFCharacterSet>(a1, &v23);
        v10 = BYTE8(v23);
        if (BYTE8(v23))
        {
          *(_QWORD *)a3 = v23;
          v11 = 4;
          goto LABEL_15;
        }
        goto LABEL_38;
      }
      if ((_DWORD)v9 == 5)
      {
        v20 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
        if (v21)
        {
          *(_QWORD *)a3 = v20;
          v11 = 5;
          goto LABEL_15;
        }
      }
      else
      {
        if ((_DWORD)v9 == 6)
        {
          IPC::Decoder::decode<WebKit::CoreIPCCFDictionary>(&v23, a1);
          v10 = BYTE8(v23);
          if (BYTE8(v23))
          {
            *(_QWORD *)a3 = v23;
            v11 = 6;
            goto LABEL_15;
          }
          goto LABEL_38;
        }
        if ((_DWORD)v9 != 7)
        {
          if ((_DWORD)v9 == 8)
          {
            IPC::Decoder::decode<WebKit::CoreIPCNumber>(a1, &v23);
            v10 = v24;
            if (v24)
            {
              *(_OWORD *)a3 = v23;
              v11 = 8;
LABEL_15:
              *(_DWORD *)(a3 + 16) = v11;
LABEL_16:
              v10 = 1;
LABEL_17:
              *(_BYTE *)(a3 + 24) = v10;
              return;
            }
          }
          else
          {
            if ((_DWORD)v9 != 9)
            {
              IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::decode<IPC::Decoder,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul>(a3, a1, v9);
              return;
            }
            IPC::Decoder::decode<WebKit::CoreIPCString>(a1, (uint64_t)&v23);
            v10 = BYTE8(v23);
            if (BYTE8(v23))
            {
              *(_QWORD *)a3 = v23;
              v11 = 9;
              goto LABEL_15;
            }
          }
LABEL_38:
          *(_BYTE *)a3 = 0;
          goto LABEL_17;
        }
        if ((unsigned __int16)IPC::Decoder::decode<WebKit::CoreIPCNull>(a1) > 0xFFu)
        {
          v11 = 7;
          goto LABEL_15;
        }
      }
    }
LABEL_31:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    return;
  }
  IPC::Decoder::decode<WebKit::CoreIPCCFArray>(a1, a2, (uint64_t)&v23);
  if (v24)
  {
    *(_QWORD *)a3 = v23;
    v13 = *((_QWORD *)&v23 + 1);
    v23 = 0uLL;
    *(_QWORD *)(a3 + 8) = v13;
    v14 = 1;
    *(_DWORD *)(a3 + 16) = 1;
    WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v12);
  }
  else
  {
    v14 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 24) = v14;
}

uint64_t IPC::Decoder::decode<WebKit::CoreIPCCFArray>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::ArgumentCoder<WebKit::CoreIPCCFArray,void>::decode(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

void sub_19787A0C8(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 16))
    WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebKit::CoreIPCBoolean>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebKit::CoreIPCBoolean,void>::decode(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::CoreIPCCFDictionary>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::CoreIPCCFDictionary,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 8))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_19787A198(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 8))
    std::unique_ptr<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::reset[abi:sn180100]((uint64_t *)v1, 0);
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebKit::CoreIPCNull>(_QWORD *a1)
{
  uint64_t result;
  uint64_t v2;

  if (*a1)
    return 256;
  v2 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    return 0;
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::CoreIPCString>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::ApplePayAMSUIRequest,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 8))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_19787A250(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::decode<IPC::Decoder,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char v4;
  uint64_t v5;
  char v6;

  if (a3 == 10)
  {
    IPC::Decoder::decode<WebKit::CoreIPCCFURL>(a2, &v5);
    v4 = v6;
    if (v6)
    {
      *(_QWORD *)a1 = v5;
      *(_DWORD *)(a1 + 16) = 10;
      v4 = 1;
    }
    else
    {
      *(_BYTE *)a1 = 0;
    }
    *(_BYTE *)(a1 + 24) = v4;
  }
  else
  {
    IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::decode<IPC::Decoder,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul>(a1, a2, a3);
  }
}

void IPC::Decoder::decode<WebKit::CoreIPCCFURL>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebKit::CoreIPCCFURL,void>::decode(a1, a2);
  if (!a2[8])
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_19787A32C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  if (*(_BYTE *)(v1 + 8))
  {
    v3 = *(const void **)v1;
    *(_QWORD *)v1 = 0;
    if (v3)
      CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::decode<IPC::Decoder,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  char v6;
  int v7;
  void *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  char v15;

  switch(a3)
  {
    case 11:
      result = (uint64_t)IPC::Decoder::decode<WebKit::CoreIPCCFCharacterSet>(a2, &v12);
      v6 = v13;
      if ((_BYTE)v13)
      {
        *(_QWORD *)a1 = v12;
        v7 = 11;
LABEL_7:
        *(_DWORD *)(a1 + 16) = v7;
        v6 = 1;
LABEL_20:
        *(_BYTE *)(a1 + 24) = v6;
        return result;
      }
      goto LABEL_19;
    case 12:
      result = (uint64_t)IPC::Decoder::decode<WebKit::CoreIPCSecTrust>(a2, &v12);
      v6 = v13;
      if ((_BYTE)v13)
      {
        *(_QWORD *)a1 = v12;
        v7 = 12;
        goto LABEL_7;
      }
LABEL_19:
      *(_BYTE *)a1 = 0;
      goto LABEL_20;
    case 13:
      result = IPC::Decoder::decode<WebKit::CoreIPCCGColorSpace>(a2, &v12);
      if (v14)
      {
        result = std::__variant_detail::__impl<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>::__impl[abi:sn180100](a1, (uint64_t)&v12);
        *(_DWORD *)(a1 + 16) = 13;
        *(_BYTE *)(a1 + 24) = 1;
        if (v14)
        {
          if (v13 != -1)
            return ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v13])(&v15, &v12);
        }
      }
      else
      {
        *(_BYTE *)a1 = 0;
        *(_BYTE *)(a1 + 24) = 0;
      }
      break;
    case 14:
      IPC::ArgumentCoder<WebCore::Color,void>::decode(a2, &v12);
      if ((_BYTE)v13
        || (v8 = (void *)*a2, v10 = a2[1], *a2 = 0, a2[1] = 0, (v11 = a2[3]) != 0)
        && v10
        && ((*(void (**)(uint64_t, void *))(*(_QWORD *)v11 + 16))(v11, v8), (_BYTE)v13))
      {
        WebCore::Color::Color();
        *(_DWORD *)(a1 + 16) = 14;
        v9 = 1;
      }
      else
      {
        v9 = 0;
        *(_BYTE *)a1 = 0;
      }
      *(_BYTE *)(a1 + 24) = v9;
      return std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v12, v8);
    default:
      result = (uint64_t)IPC::Decoder::decode<WebKit::CoreIPCCFCharacterSet>(a2, &v12);
      v6 = v13;
      if ((_BYTE)v13)
      {
        *(_QWORD *)a1 = v12;
        v7 = 15;
        goto LABEL_7;
      }
      goto LABEL_19;
  }
  return result;
}

void sub_19787A4E8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

void *IPC::Decoder::decode<WebKit::CoreIPCSecTrust>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  void *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::CoreIPCSecTrust,void>::decode(a1, a2);
  if (!a2[8])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (void *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (void *)(*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::CoreIPCCGColorSpace>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::CoreIPCCGColorSpace,void>::decode(a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_19787A5E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  if (*(_BYTE *)(v13 + 16))
  {
    v15 = *(unsigned int *)(v13 + 8);
    if ((_DWORD)v15 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v15])(&a13, v13);
    *(_DWORD *)(v13 + 8) = -1;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::CoreIPCCFURL::createWithBaseURLAndBytes@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  CFIndex v4;
  const __CFURL *v5;
  uint64_t result;
  const void *v7;
  const void *v8;

  v4 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v4)
  {
    if (*(_BYTE *)(a1 + 8))
      v5 = *(const __CFURL **)a1;
    else
      v5 = 0;
    result = (uint64_t)CFURLCreateAbsoluteURLWithBytes(0, *(const UInt8 **)a2, v4, 0x8000100u, v5, 1u);
    if (result)
    {
      *(_QWORD *)a3 = result;
      *(_BYTE *)(a3 + 8) = 1;
    }
    else
    {
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 8) = 0;
    }
  }
  else
  {
    v7 = (const void *)objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", &stru_1E351F1B8);
    if (v7)
    {
      v8 = v7;
      result = (uint64_t)CFRetain(v7);
      *(_QWORD *)a3 = v8;
      *(_BYTE *)(a3 + 8) = 1;
    }
    else
    {
      result = 40;
      __break(0xC471u);
    }
  }
  return result;
}

const void *WebKit::CoreIPCCFURL::baseURL@<X0>(CFURLRef *this@<X0>, uint64_t a2@<X8>)
{
  const void *result;
  char v4;
  const void *v5;

  result = CFURLGetBaseURL(*this);
  if (result)
  {
    v5 = result;
    result = CFRetain(result);
    *(_QWORD *)a2 = v5;
    v4 = 1;
  }
  else
  {
    v4 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 8) = v4;
  return result;
}

CFIndex WebKit::CoreIPCCFURL::toVector@<X0>(CFURLRef *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  CFIndex v5;
  UInt8 *v6;

  v4 = CFURLGetBytes(*this, 0, 0);
  if (v4 == -1)
    goto LABEL_7;
  v5 = v4;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v4;
  if (!v4)
  {
    v6 = 0;
    return CFURLGetBytes(*this, v6, v5);
  }
  if (HIDWORD(v4))
  {
LABEL_7:
    __break(0xC471u);
    JUMPOUT(0x19787A7C8);
  }
  v6 = (UInt8 *)WTF::fastMalloc((WTF *)v4);
  *(_DWORD *)(a2 + 8) = v5;
  *(_QWORD *)a2 = v6;
  return CFURLGetBytes(*this, v6, v5);
}

void sub_19787A7D4(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v3;

  if (v3)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v3, a2);
  }
  _Unwind_Resume(exception_object);
}

WebKit::CoreIPCCNPhoneNumber *WebKit::CoreIPCCNPhoneNumber::CoreIPCCNPhoneNumber(WebKit::CoreIPCCNPhoneNumber *this, CNPhoneNumber *a2)
{
  MEMORY[0x19AEABCC8](this, -[CNPhoneNumber digits](a2, "digits"));
  MEMORY[0x19AEABCC8]((char *)this + 8, -[CNPhoneNumber countryCode](a2, "countryCode"));
  return this;
}

void sub_19787A840(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v4;

  v4 = *v2;
  *v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef WebKit::CoreIPCCNPhoneNumber::toID@<X0>(WebKit::CoreIPCCNPhoneNumber *this@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  const __CFString *v5;
  const __CFString *v6;
  CFTypeRef result;

  v4 = (void *)((uint64_t (*)(void))*MEMORY[0x1E0DCDF90])();
  if (*(_QWORD *)this)
    v5 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v5 = &stru_1E351F1B8;
  if (*((_QWORD *)this + 1))
    v6 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v6 = &stru_1E351F1B8;
  result = (CFTypeRef)objc_msgSend(v4, "phoneNumberWithDigits:countryCode:", v5, v6);
  *a2 = result;
  if (result)
    return CFRetain(result);
  return result;
}

WebKit::CoreIPCCNPostalAddress *WebKit::CoreIPCCNPostalAddress::CoreIPCCNPostalAddress(WebKit::CoreIPCCNPostalAddress *this, CNPostalAddress *a2)
{
  MEMORY[0x19AEABCC8](this, -[CNPostalAddress street](a2, "street"));
  MEMORY[0x19AEABCC8]((char *)this + 8, -[CNPostalAddress subLocality](a2, "subLocality"));
  MEMORY[0x19AEABCC8]((char *)this + 16, -[CNPostalAddress city](a2, "city"));
  MEMORY[0x19AEABCC8]((char *)this + 24, -[CNPostalAddress subAdministrativeArea](a2, "subAdministrativeArea"));
  MEMORY[0x19AEABCC8]((char *)this + 32, -[CNPostalAddress state](a2, "state"));
  MEMORY[0x19AEABCC8]((char *)this + 40, -[CNPostalAddress postalCode](a2, "postalCode"));
  MEMORY[0x19AEABCC8]((char *)this + 48, -[CNPostalAddress country](a2, "country"));
  MEMORY[0x19AEABCC8]((char *)this + 56, -[CNPostalAddress ISOCountryCode](a2, "ISOCountryCode"));
  MEMORY[0x19AEABCC8]((char *)this + 64, -[CNPostalAddress formattedAddress](a2, "formattedAddress"));
  return this;
}

void sub_19787AA1C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  WTF::StringImpl **v5;
  WTF::StringImpl **v6;
  WTF::StringImpl **v7;
  WTF::StringImpl **v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  v11 = *v9;
  *v9 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *v8;
  *v8 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *v7;
  *v7 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = *v6;
  *v6 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *v5;
  *v5 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = *v4;
  *v4 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = *v3;
  *v3 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = *v2;
  *v2 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::CoreIPCCNPostalAddress::toID@<X0>(WebKit::CoreIPCCNPostalAddress *this@<X0>, _QWORD *a2@<X8>)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v4 = objc_alloc_init((Class)((uint64_t (*)(void))*MEMORY[0x1E0DCE0F8])());
  if (*(_QWORD *)this)
    v5 = WTF::StringImpl::operator NSString *();
  else
    v5 = 0;
  objc_msgSend(v4, "setStreet:", v5);
  if (*((_QWORD *)this + 1))
    v6 = WTF::StringImpl::operator NSString *();
  else
    v6 = 0;
  objc_msgSend(v4, "setSubLocality:", v6);
  if (*((_QWORD *)this + 2))
    v7 = WTF::StringImpl::operator NSString *();
  else
    v7 = 0;
  objc_msgSend(v4, "setCity:", v7);
  if (*((_QWORD *)this + 3))
    v8 = WTF::StringImpl::operator NSString *();
  else
    v8 = 0;
  objc_msgSend(v4, "setSubAdministrativeArea:", v8);
  if (*((_QWORD *)this + 4))
    v9 = WTF::StringImpl::operator NSString *();
  else
    v9 = 0;
  objc_msgSend(v4, "setState:", v9);
  if (*((_QWORD *)this + 5))
    v10 = WTF::StringImpl::operator NSString *();
  else
    v10 = 0;
  objc_msgSend(v4, "setPostalCode:", v10);
  if (*((_QWORD *)this + 6))
    v11 = WTF::StringImpl::operator NSString *();
  else
    v11 = 0;
  objc_msgSend(v4, "setCountry:", v11);
  if (*((_QWORD *)this + 7))
    v12 = WTF::StringImpl::operator NSString *();
  else
    v12 = 0;
  objc_msgSend(v4, "setISOCountryCode:", v12);
  if (*((_QWORD *)this + 8))
    v13 = WTF::StringImpl::operator NSString *();
  else
    v13 = 0;
  result = objc_msgSend(v4, "setFormattedAddress:", v13);
  *a2 = v4;
  return result;
}

void sub_19787ACE4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

WebKit::CoreIPCCNContact *WebKit::CoreIPCCNContact::CoreIPCCNContact(WebKit::CoreIPCCNContact *this, CNContact *a2)
{
  WTF::StringImpl *v4;
  PAL *v5;
  WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *v8;
  PAL *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  PAL *v12;
  int v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  PAL *v17;
  int v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  PAL *v22;
  int v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  PAL *v27;
  int v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  PAL *v32;
  int v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  PAL *v37;
  int v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  PAL *v42;
  int v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  PAL *v47;
  int v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  PAL *v52;
  int v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  PAL *v57;
  int v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  PAL *v62;
  int v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  PAL *v67;
  int v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  PAL *v72;
  int v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  PAL *v77;
  int v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  PAL *v82;
  int v83;
  WTF::StringImpl *v84;
  NSDateComponents *v85;
  NSDateComponents *v86;
  uint64_t v87;
  NSArray *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  __int128 v93;
  unsigned int v94;
  WTF::StringImpl *v95;
  PAL **v96;
  PAL *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  PAL *v104;
  NSArray *v105;
  PAL *v106;
  uint64_t v107;
  PAL *v108;
  void *v109;
  __int128 v110;
  unsigned int v111;
  WTF::StringImpl *v112;
  PAL **v113;
  PAL *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  PAL *v120;
  NSArray *v121;
  PAL *v122;
  uint64_t v123;
  PAL *v124;
  void *v125;
  unsigned int v126;
  WTF::StringImpl *v127;
  PAL **v128;
  PAL *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  PAL *v133;
  NSArray *v134;
  PAL *v135;
  uint64_t v136;
  PAL *v137;
  void *v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  unsigned int v144;
  WTF::StringImpl *v145;
  PAL **v146;
  PAL *v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  NSArray *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t i;
  void *v155;
  unsigned int v156;
  WTF::StringImpl *v157;
  PAL **v158;
  PAL *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl **v164;
  WTF::StringImpl **v165;
  CNContact *v166;
  _QWORD *v167;
  _QWORD *v168;
  _QWORD *v169;
  _QWORD *v170;
  _QWORD *v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  WTF::StringImpl *v176[2];
  WTF *v177[2];
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  PAL *v193;
  WTF::StringImpl *v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  int v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  char v205;
  _BYTE v206[128];
  _BYTE v207[128];
  _BYTE v208[128];
  _BYTE v209[128];
  _BYTE v210[128];
  uint64_t v211;

  v211 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 168) = 0;
  *((_BYTE *)this + 176) = 0;
  v164 = (WTF::StringImpl **)((char *)this + 176);
  v165 = (WTF::StringImpl **)((char *)this + 136);
  *((_BYTE *)this + 208) = 0;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  v170 = (_QWORD *)((char *)this + 232);
  v171 = (_QWORD *)((char *)this + 216);
  *(_OWORD *)((char *)this + 248) = 0u;
  v169 = (_QWORD *)((char *)this + 248);
  v167 = (_QWORD *)((char *)this + 280);
  v168 = (_QWORD *)((char *)this + 264);
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *(_OWORD *)((char *)this + 121) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  MEMORY[0x19AEABCC8](&v193, -[CNContact identifier](a2, "identifier"));
  v5 = v193;
  v193 = 0;
  v6 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = v5;
  if (v6)
  {
    v7 = *(_DWORD *)v6 - 2;
    if (*(_DWORD *)v6 != 2)
    {
LABEL_5:
      *(_DWORD *)v6 = v7;
      goto LABEL_6;
    }
    WTF::StringImpl::destroy(v6, v4);
    v6 = v193;
    v193 = 0;
    if (v6)
    {
      v7 = *(_DWORD *)v6 - 2;
      if (*(_DWORD *)v6 == 2)
      {
        WTF::StringImpl::destroy(v6, v8);
        goto LABEL_6;
      }
      goto LABEL_5;
    }
  }
LABEL_6:
  v9 = -[CNContact contactType](a2, "contactType");
  *((_QWORD *)this + 1) = v9;
  v10 = -[CNContact isKeyAvailable:](a2, "isKeyAvailable:", PAL::get_Contacts_CNContactNamePrefixKey(v9));
  if ((_DWORD)v10)
  {
    v10 = -[CNContact namePrefix](a2, "namePrefix");
    if (v10)
    {
      MEMORY[0x19AEABCC8](&v193, -[CNContact namePrefix](a2, "namePrefix"));
      v12 = v193;
      v193 = 0;
      v10 = *((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = v12;
      if (v10)
      {
        v13 = *(_DWORD *)v10 - 2;
        if (*(_DWORD *)v10 != 2)
        {
LABEL_12:
          *(_DWORD *)v10 = v13;
          goto LABEL_13;
        }
        WTF::StringImpl::destroy((WTF::StringImpl *)v10, v11);
        v10 = (uint64_t)v193;
        v193 = 0;
        if (v10)
        {
          v13 = *(_DWORD *)v10 - 2;
          if (*(_DWORD *)v10 == 2)
          {
            v10 = WTF::StringImpl::destroy((WTF::StringImpl *)v10, v14);
            goto LABEL_13;
          }
          goto LABEL_12;
        }
      }
    }
  }
LABEL_13:
  v15 = -[CNContact isKeyAvailable:](a2, "isKeyAvailable:", PAL::get_Contacts_CNContactGivenNameKey((PAL *)v10));
  if ((_DWORD)v15)
  {
    v15 = -[CNContact givenName](a2, "givenName");
    if (v15)
    {
      MEMORY[0x19AEABCC8](&v193, -[CNContact givenName](a2, "givenName"));
      v17 = v193;
      v193 = 0;
      v15 = *((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v17;
      if (v15)
      {
        v18 = *(_DWORD *)v15 - 2;
        if (*(_DWORD *)v15 != 2)
        {
LABEL_19:
          *(_DWORD *)v15 = v18;
          goto LABEL_20;
        }
        WTF::StringImpl::destroy((WTF::StringImpl *)v15, v16);
        v15 = (uint64_t)v193;
        v193 = 0;
        if (v15)
        {
          v18 = *(_DWORD *)v15 - 2;
          if (*(_DWORD *)v15 == 2)
          {
            v15 = WTF::StringImpl::destroy((WTF::StringImpl *)v15, v19);
            goto LABEL_20;
          }
          goto LABEL_19;
        }
      }
    }
  }
LABEL_20:
  v20 = -[CNContact isKeyAvailable:](a2, "isKeyAvailable:", PAL::get_Contacts_CNContactMiddleNameKey((PAL *)v15));
  if ((_DWORD)v20)
  {
    v20 = -[CNContact middleName](a2, "middleName");
    if (v20)
    {
      MEMORY[0x19AEABCC8](&v193, -[CNContact middleName](a2, "middleName"));
      v22 = v193;
      v193 = 0;
      v20 = *((_QWORD *)this + 4);
      *((_QWORD *)this + 4) = v22;
      if (v20)
      {
        v23 = *(_DWORD *)v20 - 2;
        if (*(_DWORD *)v20 != 2)
        {
LABEL_26:
          *(_DWORD *)v20 = v23;
          goto LABEL_27;
        }
        WTF::StringImpl::destroy((WTF::StringImpl *)v20, v21);
        v20 = (uint64_t)v193;
        v193 = 0;
        if (v20)
        {
          v23 = *(_DWORD *)v20 - 2;
          if (*(_DWORD *)v20 == 2)
          {
            v20 = WTF::StringImpl::destroy((WTF::StringImpl *)v20, v24);
            goto LABEL_27;
          }
          goto LABEL_26;
        }
      }
    }
  }
LABEL_27:
  v25 = -[CNContact isKeyAvailable:](a2, "isKeyAvailable:", PAL::get_Contacts_CNContactFamilyNameKey((PAL *)v20));
  if ((_DWORD)v25)
  {
    v25 = -[CNContact familyName](a2, "familyName");
    if (v25)
    {
      MEMORY[0x19AEABCC8](&v193, -[CNContact familyName](a2, "familyName"));
      v27 = v193;
      v193 = 0;
      v25 = *((_QWORD *)this + 5);
      *((_QWORD *)this + 5) = v27;
      if (v25)
      {
        v28 = *(_DWORD *)v25 - 2;
        if (*(_DWORD *)v25 != 2)
        {
LABEL_33:
          *(_DWORD *)v25 = v28;
          goto LABEL_34;
        }
        WTF::StringImpl::destroy((WTF::StringImpl *)v25, v26);
        v25 = (uint64_t)v193;
        v193 = 0;
        if (v25)
        {
          v28 = *(_DWORD *)v25 - 2;
          if (*(_DWORD *)v25 == 2)
          {
            v25 = WTF::StringImpl::destroy((WTF::StringImpl *)v25, v29);
            goto LABEL_34;
          }
          goto LABEL_33;
        }
      }
    }
  }
LABEL_34:
  v30 = -[CNContact isKeyAvailable:](a2, "isKeyAvailable:", PAL::get_Contacts_CNContactPreviousFamilyNameKey((PAL *)v25));
  if ((_DWORD)v30)
  {
    v30 = -[CNContact previousFamilyName](a2, "previousFamilyName");
    if (v30)
    {
      MEMORY[0x19AEABCC8](&v193, -[CNContact previousFamilyName](a2, "previousFamilyName"));
      v32 = v193;
      v193 = 0;
      v30 = *((_QWORD *)this + 6);
      *((_QWORD *)this + 6) = v32;
      if (v30)
      {
        v33 = *(_DWORD *)v30 - 2;
        if (*(_DWORD *)v30 != 2)
        {
LABEL_40:
          *(_DWORD *)v30 = v33;
          goto LABEL_41;
        }
        WTF::StringImpl::destroy((WTF::StringImpl *)v30, v31);
        v30 = (uint64_t)v193;
        v193 = 0;
        if (v30)
        {
          v33 = *(_DWORD *)v30 - 2;
          if (*(_DWORD *)v30 == 2)
          {
            v30 = WTF::StringImpl::destroy((WTF::StringImpl *)v30, v34);
            goto LABEL_41;
          }
          goto LABEL_40;
        }
      }
    }
  }
LABEL_41:
  v35 = -[CNContact isKeyAvailable:](a2, "isKeyAvailable:", PAL::get_Contacts_CNContactNameSuffixKey((PAL *)v30));
  if ((_DWORD)v35)
  {
    v35 = -[CNContact nameSuffix](a2, "nameSuffix");
    if (v35)
    {
      MEMORY[0x19AEABCC8](&v193, -[CNContact nameSuffix](a2, "nameSuffix"));
      v37 = v193;
      v193 = 0;
      v35 = *((_QWORD *)this + 7);
      *((_QWORD *)this + 7) = v37;
      if (v35)
      {
        v38 = *(_DWORD *)v35 - 2;
        if (*(_DWORD *)v35 != 2)
        {
LABEL_47:
          *(_DWORD *)v35 = v38;
          goto LABEL_48;
        }
        WTF::StringImpl::destroy((WTF::StringImpl *)v35, v36);
        v35 = (uint64_t)v193;
        v193 = 0;
        if (v35)
        {
          v38 = *(_DWORD *)v35 - 2;
          if (*(_DWORD *)v35 == 2)
          {
            v35 = WTF::StringImpl::destroy((WTF::StringImpl *)v35, v39);
            goto LABEL_48;
          }
          goto LABEL_47;
        }
      }
    }
  }
LABEL_48:
  v40 = -[CNContact isKeyAvailable:](a2, "isKeyAvailable:", PAL::get_Contacts_CNContactNicknameKey((PAL *)v35));
  if ((_DWORD)v40)
  {
    v40 = -[CNContact nickname](a2, "nickname");
    if (v40)
    {
      MEMORY[0x19AEABCC8](&v193, -[CNContact nickname](a2, "nickname"));
      v42 = v193;
      v193 = 0;
      v40 = *((_QWORD *)this + 8);
      *((_QWORD *)this + 8) = v42;
      if (v40)
      {
        v43 = *(_DWORD *)v40 - 2;
        if (*(_DWORD *)v40 != 2)
        {
LABEL_54:
          *(_DWORD *)v40 = v43;
          goto LABEL_55;
        }
        WTF::StringImpl::destroy((WTF::StringImpl *)v40, v41);
        v40 = (uint64_t)v193;
        v193 = 0;
        if (v40)
        {
          v43 = *(_DWORD *)v40 - 2;
          if (*(_DWORD *)v40 == 2)
          {
            v40 = WTF::StringImpl::destroy((WTF::StringImpl *)v40, v44);
            goto LABEL_55;
          }
          goto LABEL_54;
        }
      }
    }
  }
LABEL_55:
  v45 = -[CNContact isKeyAvailable:](a2, "isKeyAvailable:", PAL::get_Contacts_CNContactOrganizationNameKey((PAL *)v40));
  if ((_DWORD)v45)
  {
    v45 = -[CNContact organizationName](a2, "organizationName");
    if (v45)
    {
      MEMORY[0x19AEABCC8](&v193, -[CNContact organizationName](a2, "organizationName"));
      v47 = v193;
      v193 = 0;
      v45 = *((_QWORD *)this + 9);
      *((_QWORD *)this + 9) = v47;
      if (v45)
      {
        v48 = *(_DWORD *)v45 - 2;
        if (*(_DWORD *)v45 != 2)
        {
LABEL_61:
          *(_DWORD *)v45 = v48;
          goto LABEL_62;
        }
        WTF::StringImpl::destroy((WTF::StringImpl *)v45, v46);
        v45 = (uint64_t)v193;
        v193 = 0;
        if (v45)
        {
          v48 = *(_DWORD *)v45 - 2;
          if (*(_DWORD *)v45 == 2)
          {
            v45 = WTF::StringImpl::destroy((WTF::StringImpl *)v45, v49);
            goto LABEL_62;
          }
          goto LABEL_61;
        }
      }
    }
  }
LABEL_62:
  v50 = -[CNContact isKeyAvailable:](a2, "isKeyAvailable:", PAL::get_Contacts_CNContactDepartmentNameKey((PAL *)v45));
  if ((_DWORD)v50)
  {
    v50 = -[CNContact departmentName](a2, "departmentName");
    if (v50)
    {
      MEMORY[0x19AEABCC8](&v193, -[CNContact departmentName](a2, "departmentName"));
      v52 = v193;
      v193 = 0;
      v50 = *((_QWORD *)this + 10);
      *((_QWORD *)this + 10) = v52;
      if (v50)
      {
        v53 = *(_DWORD *)v50 - 2;
        if (*(_DWORD *)v50 != 2)
        {
LABEL_68:
          *(_DWORD *)v50 = v53;
          goto LABEL_69;
        }
        WTF::StringImpl::destroy((WTF::StringImpl *)v50, v51);
        v50 = (uint64_t)v193;
        v193 = 0;
        if (v50)
        {
          v53 = *(_DWORD *)v50 - 2;
          if (*(_DWORD *)v50 == 2)
          {
            v50 = WTF::StringImpl::destroy((WTF::StringImpl *)v50, v54);
            goto LABEL_69;
          }
          goto LABEL_68;
        }
      }
    }
  }
LABEL_69:
  v55 = -[CNContact isKeyAvailable:](a2, "isKeyAvailable:", PAL::get_Contacts_CNContactJobTitleKey((PAL *)v50));
  if ((_DWORD)v55)
  {
    v55 = -[CNContact jobTitle](a2, "jobTitle");
    if (v55)
    {
      MEMORY[0x19AEABCC8](&v193, -[CNContact jobTitle](a2, "jobTitle"));
      v57 = v193;
      v193 = 0;
      v55 = *((_QWORD *)this + 11);
      *((_QWORD *)this + 11) = v57;
      if (v55)
      {
        v58 = *(_DWORD *)v55 - 2;
        if (*(_DWORD *)v55 != 2)
        {
LABEL_75:
          *(_DWORD *)v55 = v58;
          goto LABEL_76;
        }
        WTF::StringImpl::destroy((WTF::StringImpl *)v55, v56);
        v55 = (uint64_t)v193;
        v193 = 0;
        if (v55)
        {
          v58 = *(_DWORD *)v55 - 2;
          if (*(_DWORD *)v55 == 2)
          {
            v55 = WTF::StringImpl::destroy((WTF::StringImpl *)v55, v59);
            goto LABEL_76;
          }
          goto LABEL_75;
        }
      }
    }
  }
LABEL_76:
  v60 = -[CNContact isKeyAvailable:](a2, "isKeyAvailable:", PAL::get_Contacts_CNContactPhoneticGivenNameKey((PAL *)v55));
  if ((_DWORD)v60)
  {
    v60 = -[CNContact phoneticGivenName](a2, "phoneticGivenName");
    if (v60)
    {
      MEMORY[0x19AEABCC8](&v193, -[CNContact phoneticGivenName](a2, "phoneticGivenName"));
      v62 = v193;
      v193 = 0;
      v60 = *((_QWORD *)this + 12);
      *((_QWORD *)this + 12) = v62;
      if (v60)
      {
        v63 = *(_DWORD *)v60 - 2;
        if (*(_DWORD *)v60 != 2)
        {
LABEL_82:
          *(_DWORD *)v60 = v63;
          goto LABEL_83;
        }
        WTF::StringImpl::destroy((WTF::StringImpl *)v60, v61);
        v60 = (uint64_t)v193;
        v193 = 0;
        if (v60)
        {
          v63 = *(_DWORD *)v60 - 2;
          if (*(_DWORD *)v60 == 2)
          {
            v60 = WTF::StringImpl::destroy((WTF::StringImpl *)v60, v64);
            goto LABEL_83;
          }
          goto LABEL_82;
        }
      }
    }
  }
LABEL_83:
  v65 = -[CNContact isKeyAvailable:](a2, "isKeyAvailable:", PAL::get_Contacts_CNContactPhoneticMiddleNameKey((PAL *)v60));
  if ((_DWORD)v65)
  {
    v65 = -[CNContact phoneticMiddleName](a2, "phoneticMiddleName");
    if (v65)
    {
      MEMORY[0x19AEABCC8](&v193, -[CNContact phoneticMiddleName](a2, "phoneticMiddleName"));
      v67 = v193;
      v193 = 0;
      v65 = *((_QWORD *)this + 13);
      *((_QWORD *)this + 13) = v67;
      if (v65)
      {
        v68 = *(_DWORD *)v65 - 2;
        if (*(_DWORD *)v65 != 2)
        {
LABEL_89:
          *(_DWORD *)v65 = v68;
          goto LABEL_90;
        }
        WTF::StringImpl::destroy((WTF::StringImpl *)v65, v66);
        v65 = (uint64_t)v193;
        v193 = 0;
        if (v65)
        {
          v68 = *(_DWORD *)v65 - 2;
          if (*(_DWORD *)v65 == 2)
          {
            v65 = WTF::StringImpl::destroy((WTF::StringImpl *)v65, v69);
            goto LABEL_90;
          }
          goto LABEL_89;
        }
      }
    }
  }
LABEL_90:
  v70 = -[CNContact isKeyAvailable:](a2, "isKeyAvailable:", PAL::get_Contacts_CNContactPhoneticFamilyNameKey((PAL *)v65));
  if ((_DWORD)v70)
  {
    v70 = -[CNContact phoneticFamilyName](a2, "phoneticFamilyName");
    if (v70)
    {
      MEMORY[0x19AEABCC8](&v193, -[CNContact phoneticFamilyName](a2, "phoneticFamilyName"));
      v72 = v193;
      v193 = 0;
      v70 = *((_QWORD *)this + 14);
      *((_QWORD *)this + 14) = v72;
      if (v70)
      {
        v73 = *(_DWORD *)v70 - 2;
        if (*(_DWORD *)v70 != 2)
        {
LABEL_96:
          *(_DWORD *)v70 = v73;
          goto LABEL_97;
        }
        WTF::StringImpl::destroy((WTF::StringImpl *)v70, v71);
        v70 = (uint64_t)v193;
        v193 = 0;
        if (v70)
        {
          v73 = *(_DWORD *)v70 - 2;
          if (*(_DWORD *)v70 == 2)
          {
            v70 = WTF::StringImpl::destroy((WTF::StringImpl *)v70, v74);
            goto LABEL_97;
          }
          goto LABEL_96;
        }
      }
    }
  }
LABEL_97:
  v75 = -[CNContact isKeyAvailable:](a2, "isKeyAvailable:", PAL::get_Contacts_CNContactPhoneticOrganizationNameKey((PAL *)v70));
  if ((_DWORD)v75)
  {
    v75 = -[CNContact phoneticOrganizationName](a2, "phoneticOrganizationName");
    if (v75)
    {
      MEMORY[0x19AEABCC8](&v193, -[CNContact phoneticOrganizationName](a2, "phoneticOrganizationName"));
      v77 = v193;
      v193 = 0;
      v75 = *((_QWORD *)this + 15);
      *((_QWORD *)this + 15) = v77;
      if (v75)
      {
        v78 = *(_DWORD *)v75 - 2;
        if (*(_DWORD *)v75 != 2)
        {
LABEL_103:
          *(_DWORD *)v75 = v78;
          goto LABEL_104;
        }
        WTF::StringImpl::destroy((WTF::StringImpl *)v75, v76);
        v75 = (uint64_t)v193;
        v193 = 0;
        if (v75)
        {
          v78 = *(_DWORD *)v75 - 2;
          if (*(_DWORD *)v75 == 2)
          {
            v75 = WTF::StringImpl::destroy((WTF::StringImpl *)v75, v79);
            goto LABEL_104;
          }
          goto LABEL_103;
        }
      }
    }
  }
LABEL_104:
  v80 = -[CNContact isKeyAvailable:](a2, "isKeyAvailable:", PAL::get_Contacts_CNContactNoteKey((PAL *)v75));
  if ((_DWORD)v80)
  {
    v80 = -[CNContact note](a2, "note");
    if (v80)
    {
      MEMORY[0x19AEABCC8](&v193, -[CNContact note](a2, "note"));
      v82 = v193;
      v193 = 0;
      v80 = *((_QWORD *)this + 16);
      *((_QWORD *)this + 16) = v82;
      if (v80)
      {
        v83 = *(_DWORD *)v80 - 2;
        if (*(_DWORD *)v80 != 2)
        {
LABEL_110:
          *(_DWORD *)v80 = v83;
          goto LABEL_111;
        }
        WTF::StringImpl::destroy((WTF::StringImpl *)v80, v81);
        v80 = (uint64_t)v193;
        v193 = 0;
        if (v80)
        {
          v83 = *(_DWORD *)v80 - 2;
          if (*(_DWORD *)v80 == 2)
          {
            v80 = WTF::StringImpl::destroy((WTF::StringImpl *)v80, v84);
            goto LABEL_111;
          }
          goto LABEL_110;
        }
      }
    }
  }
LABEL_111:
  v85 = (NSDateComponents *)-[CNContact isKeyAvailable:](a2, "isKeyAvailable:", PAL::get_Contacts_CNContactBirthdayKey((PAL *)v80));
  if ((_DWORD)v85)
  {
    v85 = -[CNContact birthday](a2, "birthday");
    if (v85)
      v85 = (NSDateComponents *)std::optional<WebKit::CoreIPCDateComponents>::operator=[abi:sn180100]<NSDateComponents *,void>(v165, -[CNContact birthday](a2, "birthday"));
  }
  v86 = (NSDateComponents *)-[CNContact isKeyAvailable:](a2, "isKeyAvailable:", PAL::get_Contacts_CNContactNonGregorianBirthdayKey((PAL *)v85));
  if ((_DWORD)v86)
  {
    v86 = -[CNContact nonGregorianBirthday](a2, "nonGregorianBirthday");
    if (v86)
      v86 = (NSDateComponents *)std::optional<WebKit::CoreIPCDateComponents>::operator=[abi:sn180100]<NSDateComponents *,void>(v164, -[CNContact nonGregorianBirthday](a2, "nonGregorianBirthday"));
  }
  v87 = -[CNContact isKeyAvailable:](a2, "isKeyAvailable:", PAL::get_Contacts_CNContactDatesKey((PAL *)v86));
  v166 = a2;
  if ((_DWORD)v87)
  {
    v87 = -[CNContact dates](a2, "dates");
    if (v87)
    {
      v203 = 0u;
      v204 = 0u;
      v201 = 0u;
      v202 = 0u;
      v88 = -[CNContact dates](a2, "dates");
      v87 = -[NSArray countByEnumeratingWithState:objects:count:](v88, "countByEnumeratingWithState:objects:count:", &v201, v210, 16);
      v89 = v87;
      if (v87)
      {
        v90 = *(_QWORD *)v202;
        do
        {
          v91 = 0;
          do
          {
            if (*(_QWORD *)v202 != v90)
              objc_enumerationMutation(v88);
            v92 = *(void **)(*((_QWORD *)&v201 + 1) + 8 * v91);
            MEMORY[0x19AEABCC8](&v193, objc_msgSend(v92, "identifier"));
            MEMORY[0x19AEABCC8](&v194, objc_msgSend(v92, "label"));
            WebKit::CoreIPCDateComponents::CoreIPCDateComponents((WebKit::CoreIPCDateComponents *)v176, (NSDateComponents *)objc_msgSend(v92, "value"));
            v93 = *(_OWORD *)v176;
            v176[0] = 0;
            v176[1] = 0;
            v195 = v93;
            *(WTF **)&v196 = v177[0];
            *(WTF **)&v93 = v177[1];
            v177[0] = 0;
            v177[1] = 0;
            *((_QWORD *)&v196 + 1) = v93;
            v200 = 0;
            v94 = *((_DWORD *)this + 57);
            if (v94 == *((_DWORD *)this + 56))
            {
              WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::CoreIPCContactLabeledValue>((uint64_t)v171, (unint64_t)&v193);
            }
            else
            {
              v96 = (PAL **)(*v171 + 96 * v94);
              v97 = v193;
              v193 = 0;
              *v96 = v97;
              v98 = v194;
              v194 = 0;
              v96[1] = v98;
              std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::CoreIPCDateComponents,WebKit::CoreIPCCNPhoneNumber,WebKit::CoreIPCCNPostalAddress,WebKit::CoreIPCString>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v96 + 2), (uint64_t)&v195);
              ++*((_DWORD *)this + 57);
            }
            if (v200 != -1)
              ((void (*)(char *, __int128 *))off_1E3508520[v200])(&v205, &v195);
            v200 = -1;
            v99 = v194;
            v194 = 0;
            if (v99)
            {
              if (*(_DWORD *)v99 == 2)
                WTF::StringImpl::destroy(v99, v95);
              else
                *(_DWORD *)v99 -= 2;
            }
            v100 = v193;
            v193 = 0;
            if (v100)
            {
              if (*(_DWORD *)v100 == 2)
                WTF::StringImpl::destroy(v100, v95);
              else
                *(_DWORD *)v100 -= 2;
            }
            v101 = v177[0];
            if (v177[0])
            {
              v177[0] = 0;
              LODWORD(v177[1]) = 0;
              WTF::fastFree(v101, v95);
            }
            v102 = v176[1];
            v176[1] = 0;
            if (v102)
            {
              if (*(_DWORD *)v102 == 2)
                WTF::StringImpl::destroy(v102, v95);
              else
                *(_DWORD *)v102 -= 2;
            }
            v103 = v176[0];
            v176[0] = 0;
            if (v103)
            {
              if (*(_DWORD *)v103 == 2)
                WTF::StringImpl::destroy(v103, v95);
              else
                *(_DWORD *)v103 -= 2;
            }
            ++v91;
          }
          while (v89 != v91);
          v87 = -[NSArray countByEnumeratingWithState:objects:count:](v88, "countByEnumeratingWithState:objects:count:", &v201, v210, 16);
          v89 = v87;
        }
        while (v87);
      }
    }
  }
  v104 = (PAL *)-[CNContact isKeyAvailable:](v166, "isKeyAvailable:", PAL::get_Contacts_CNContactPhoneNumbersKey((PAL *)v87));
  if ((_DWORD)v104)
  {
    v104 = -[CNContact phoneNumbers](v166, "phoneNumbers");
    if (v104)
    {
      v191 = 0u;
      v192 = 0u;
      v189 = 0u;
      v190 = 0u;
      v105 = -[CNContact phoneNumbers](v166, "phoneNumbers");
      v104 = (PAL *)-[NSArray countByEnumeratingWithState:objects:count:](v105, "countByEnumeratingWithState:objects:count:", &v189, v209, 16);
      v106 = v104;
      if (v104)
      {
        v107 = *(_QWORD *)v190;
        do
        {
          v108 = 0;
          do
          {
            if (*(_QWORD *)v190 != v107)
              objc_enumerationMutation(v105);
            v109 = *(void **)(*((_QWORD *)&v189 + 1) + 8 * (_QWORD)v108);
            MEMORY[0x19AEABCC8](&v193, objc_msgSend(v109, "identifier"));
            MEMORY[0x19AEABCC8](&v194, objc_msgSend(v109, "label"));
            WebKit::CoreIPCCNPhoneNumber::CoreIPCCNPhoneNumber((WebKit::CoreIPCCNPhoneNumber *)v176, (CNPhoneNumber *)objc_msgSend(v109, "value"));
            v110 = *(_OWORD *)v176;
            v176[0] = 0;
            v176[1] = 0;
            v195 = v110;
            v200 = 1;
            v111 = *((_DWORD *)this + 61);
            if (v111 == *((_DWORD *)this + 60))
            {
              WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::CoreIPCContactLabeledValue>((uint64_t)v170, (unint64_t)&v193);
            }
            else
            {
              v113 = (PAL **)(*v170 + 96 * v111);
              v114 = v193;
              v193 = 0;
              *v113 = v114;
              v115 = v194;
              v194 = 0;
              v113[1] = v115;
              std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::CoreIPCDateComponents,WebKit::CoreIPCCNPhoneNumber,WebKit::CoreIPCCNPostalAddress,WebKit::CoreIPCString>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v113 + 2), (uint64_t)&v195);
              ++*((_DWORD *)this + 61);
            }
            if (v200 != -1)
              ((void (*)(char *, __int128 *))off_1E3508520[v200])(&v205, &v195);
            v200 = -1;
            v116 = v194;
            v194 = 0;
            if (v116)
            {
              if (*(_DWORD *)v116 == 2)
                WTF::StringImpl::destroy(v116, v112);
              else
                *(_DWORD *)v116 -= 2;
            }
            v117 = v193;
            v193 = 0;
            if (v117)
            {
              if (*(_DWORD *)v117 == 2)
                WTF::StringImpl::destroy(v117, v112);
              else
                *(_DWORD *)v117 -= 2;
            }
            v118 = v176[1];
            v176[1] = 0;
            if (v118)
            {
              if (*(_DWORD *)v118 == 2)
                WTF::StringImpl::destroy(v118, v112);
              else
                *(_DWORD *)v118 -= 2;
            }
            v119 = v176[0];
            v176[0] = 0;
            if (v119)
            {
              if (*(_DWORD *)v119 == 2)
                WTF::StringImpl::destroy(v119, v112);
              else
                *(_DWORD *)v119 -= 2;
            }
            v108 = (PAL *)((char *)v108 + 1);
          }
          while (v106 != v108);
          v104 = (PAL *)-[NSArray countByEnumeratingWithState:objects:count:](v105, "countByEnumeratingWithState:objects:count:", &v189, v209, 16);
          v106 = v104;
        }
        while (v104);
      }
    }
  }
  v120 = (PAL *)-[CNContact isKeyAvailable:](v166, "isKeyAvailable:", PAL::get_Contacts_CNContactEmailAddressesKey(v104));
  if ((_DWORD)v120)
  {
    v120 = -[CNContact emailAddresses](v166, "emailAddresses");
    if (v120)
    {
      v187 = 0u;
      v188 = 0u;
      v185 = 0u;
      v186 = 0u;
      v121 = -[CNContact emailAddresses](v166, "emailAddresses");
      v120 = (PAL *)-[NSArray countByEnumeratingWithState:objects:count:](v121, "countByEnumeratingWithState:objects:count:", &v185, v208, 16);
      v122 = v120;
      if (v120)
      {
        v123 = *(_QWORD *)v186;
        do
        {
          v124 = 0;
          do
          {
            if (*(_QWORD *)v186 != v123)
              objc_enumerationMutation(v121);
            v125 = *(void **)(*((_QWORD *)&v185 + 1) + 8 * (_QWORD)v124);
            MEMORY[0x19AEABCC8](&v193, objc_msgSend(v125, "identifier"));
            MEMORY[0x19AEABCC8](&v194, objc_msgSend(v125, "label"));
            MEMORY[0x19AEABCC8](&v195, objc_msgSend(v125, "value"));
            v200 = 3;
            v126 = *((_DWORD *)this + 65);
            if (v126 == *((_DWORD *)this + 64))
            {
              WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::CoreIPCContactLabeledValue>((uint64_t)v169, (unint64_t)&v193);
            }
            else
            {
              v128 = (PAL **)(*v169 + 96 * v126);
              v129 = v193;
              v193 = 0;
              *v128 = v129;
              v130 = v194;
              v194 = 0;
              v128[1] = v130;
              std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::CoreIPCDateComponents,WebKit::CoreIPCCNPhoneNumber,WebKit::CoreIPCCNPostalAddress,WebKit::CoreIPCString>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v128 + 2), (uint64_t)&v195);
              ++*((_DWORD *)this + 65);
            }
            if (v200 != -1)
              ((void (*)(WTF::StringImpl **, __int128 *))off_1E3508520[v200])(v176, &v195);
            v200 = -1;
            v131 = v194;
            v194 = 0;
            if (v131)
            {
              if (*(_DWORD *)v131 == 2)
                WTF::StringImpl::destroy(v131, v127);
              else
                *(_DWORD *)v131 -= 2;
            }
            v132 = v193;
            v193 = 0;
            if (v132)
            {
              if (*(_DWORD *)v132 == 2)
                WTF::StringImpl::destroy(v132, v127);
              else
                *(_DWORD *)v132 -= 2;
            }
            v124 = (PAL *)((char *)v124 + 1);
          }
          while (v122 != v124);
          v120 = (PAL *)-[NSArray countByEnumeratingWithState:objects:count:](v121, "countByEnumeratingWithState:objects:count:", &v185, v208, 16);
          v122 = v120;
        }
        while (v120);
      }
    }
  }
  v133 = (PAL *)-[CNContact isKeyAvailable:](v166, "isKeyAvailable:", PAL::get_Contacts_CNContactPostalAddressesKey(v120));
  if ((_DWORD)v133)
  {
    v133 = -[CNContact postalAddresses](v166, "postalAddresses");
    if (v133)
    {
      v183 = 0u;
      v184 = 0u;
      v181 = 0u;
      v182 = 0u;
      v134 = -[CNContact postalAddresses](v166, "postalAddresses");
      v133 = (PAL *)-[NSArray countByEnumeratingWithState:objects:count:](v134, "countByEnumeratingWithState:objects:count:", &v181, v207, 16);
      v135 = v133;
      if (v133)
      {
        v136 = *(_QWORD *)v182;
        do
        {
          v137 = 0;
          do
          {
            if (*(_QWORD *)v182 != v136)
              objc_enumerationMutation(v134);
            v138 = *(void **)(*((_QWORD *)&v181 + 1) + 8 * (_QWORD)v137);
            MEMORY[0x19AEABCC8](&v193, objc_msgSend(v138, "identifier"));
            MEMORY[0x19AEABCC8](&v194, objc_msgSend(v138, "label"));
            WebKit::CoreIPCCNPostalAddress::CoreIPCCNPostalAddress((WebKit::CoreIPCCNPostalAddress *)v176, (CNPostalAddress *)objc_msgSend(v138, "value"));
            v139 = *(_OWORD *)v176;
            v140 = *(_OWORD *)v177;
            *(_OWORD *)v176 = 0u;
            *(_OWORD *)v177 = 0u;
            v195 = v139;
            v196 = v140;
            v141 = v178;
            v142 = v179;
            v178 = 0u;
            v179 = 0u;
            v197 = v141;
            v198 = v142;
            v143 = v180;
            v180 = 0;
            v199 = v143;
            v200 = 2;
            v144 = *((_DWORD *)this + 69);
            if (v144 == *((_DWORD *)this + 68))
            {
              WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::CoreIPCContactLabeledValue>((uint64_t)v168, (unint64_t)&v193);
            }
            else
            {
              v146 = (PAL **)(*v168 + 96 * v144);
              v147 = v193;
              v193 = 0;
              *v146 = v147;
              v148 = v194;
              v194 = 0;
              v146[1] = v148;
              std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::CoreIPCDateComponents,WebKit::CoreIPCCNPhoneNumber,WebKit::CoreIPCCNPostalAddress,WebKit::CoreIPCString>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v146 + 2), (uint64_t)&v195);
              ++*((_DWORD *)this + 69);
            }
            if (v200 != -1)
              ((void (*)(char *, __int128 *))off_1E3508520[v200])(&v205, &v195);
            v200 = -1;
            v149 = v194;
            v194 = 0;
            if (v149)
            {
              if (*(_DWORD *)v149 == 2)
                WTF::StringImpl::destroy(v149, v145);
              else
                *(_DWORD *)v149 -= 2;
            }
            v150 = v193;
            v193 = 0;
            if (v150)
            {
              if (*(_DWORD *)v150 == 2)
                WTF::StringImpl::destroy(v150, v145);
              else
                *(_DWORD *)v150 -= 2;
            }
            WebKit::CoreIPCCNPostalAddress::~CoreIPCCNPostalAddress((WebKit::CoreIPCCNPostalAddress *)v176, v145);
            v137 = (PAL *)((char *)v137 + 1);
          }
          while (v135 != v137);
          v133 = (PAL *)-[NSArray countByEnumeratingWithState:objects:count:](v134, "countByEnumeratingWithState:objects:count:", &v181, v207, 16);
          v135 = v133;
        }
        while (v133);
      }
    }
  }
  if (-[CNContact isKeyAvailable:](v166, "isKeyAvailable:", PAL::get_Contacts_CNContactUrlAddressesKey(v133)))
  {
    if (-[CNContact urlAddresses](v166, "urlAddresses"))
    {
      v174 = 0u;
      v175 = 0u;
      v172 = 0u;
      v173 = 0u;
      v151 = -[CNContact urlAddresses](v166, "urlAddresses");
      v152 = -[NSArray countByEnumeratingWithState:objects:count:](v151, "countByEnumeratingWithState:objects:count:", &v172, v206, 16);
      if (v152)
      {
        v153 = *(_QWORD *)v173;
        do
        {
          for (i = 0; i != v152; ++i)
          {
            if (*(_QWORD *)v173 != v153)
              objc_enumerationMutation(v151);
            v155 = *(void **)(*((_QWORD *)&v172 + 1) + 8 * i);
            MEMORY[0x19AEABCC8](&v193, objc_msgSend(v155, "identifier"));
            MEMORY[0x19AEABCC8](&v194, objc_msgSend(v155, "label"));
            MEMORY[0x19AEABCC8](&v195, objc_msgSend(v155, "value"));
            v200 = 3;
            v156 = *((_DWORD *)this + 73);
            if (v156 == *((_DWORD *)this + 72))
            {
              WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::CoreIPCContactLabeledValue>((uint64_t)v167, (unint64_t)&v193);
            }
            else
            {
              v158 = (PAL **)(*v167 + 96 * v156);
              v159 = v193;
              v193 = 0;
              *v158 = v159;
              v160 = v194;
              v194 = 0;
              v158[1] = v160;
              std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::CoreIPCDateComponents,WebKit::CoreIPCCNPhoneNumber,WebKit::CoreIPCCNPostalAddress,WebKit::CoreIPCString>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v158 + 2), (uint64_t)&v195);
              ++*((_DWORD *)this + 73);
            }
            if (v200 != -1)
              ((void (*)(WTF::StringImpl **, __int128 *))off_1E3508520[v200])(v176, &v195);
            v200 = -1;
            v161 = v194;
            v194 = 0;
            if (v161)
            {
              if (*(_DWORD *)v161 == 2)
                WTF::StringImpl::destroy(v161, v157);
              else
                *(_DWORD *)v161 -= 2;
            }
            v162 = v193;
            v193 = 0;
            if (v162)
            {
              if (*(_DWORD *)v162 == 2)
                WTF::StringImpl::destroy(v162, v157);
              else
                *(_DWORD *)v162 -= 2;
            }
          }
          v152 = -[NSArray countByEnumeratingWithState:objects:count:](v151, "countByEnumeratingWithState:objects:count:", &v172, v206, 16);
        }
        while (v152);
      }
    }
  }
  return this;
}

void sub_19787BFF4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  WTF::StringImpl **v16;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;

  WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a12, a2);
  WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a13, v18);
  WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a14, v19);
  WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a15, v20);
  WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a16, v21);
  std::__optional_destruct_base<WebKit::CoreIPCDateComponents,false>::~__optional_destruct_base[abi:sn180100](a9, v22);
  std::__optional_destruct_base<WebKit::CoreIPCDateComponents,false>::~__optional_destruct_base[abi:sn180100](a10, v23);
  v25 = v16[16];
  v16[16] = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v24);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = v16[15];
  v16[15] = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v24);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = v16[14];
  v16[14] = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v24);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = v16[13];
  v16[13] = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v24);
    else
      *(_DWORD *)v28 -= 2;
  }
  v29 = v16[12];
  v16[12] = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v24);
    else
      *(_DWORD *)v29 -= 2;
  }
  v30 = v16[11];
  v16[11] = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v24);
    else
      *(_DWORD *)v30 -= 2;
  }
  v31 = v16[10];
  v16[10] = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v24);
    else
      *(_DWORD *)v31 -= 2;
  }
  v32 = v16[9];
  v16[9] = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v24);
    else
      *(_DWORD *)v32 -= 2;
  }
  v33 = v16[8];
  v16[8] = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v24);
    else
      *(_DWORD *)v33 -= 2;
  }
  v34 = v16[7];
  v16[7] = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v24);
    else
      *(_DWORD *)v34 -= 2;
  }
  v35 = v16[6];
  v16[6] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v24);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = v16[5];
  v16[5] = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v24);
    else
      *(_DWORD *)v36 -= 2;
  }
  v37 = v16[4];
  v16[4] = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v24);
    else
      *(_DWORD *)v37 -= 2;
  }
  v38 = v16[3];
  v16[3] = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, v24);
    else
      *(_DWORD *)v38 -= 2;
  }
  v39 = v16[2];
  v16[2] = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v24);
    else
      *(_DWORD *)v39 -= 2;
  }
  v40 = *v16;
  *v16 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v24);
    else
      *(_DWORD *)v40 -= 2;
  }
  _Unwind_Resume(a1);
}

WebKit::CoreIPCDateComponents *std::optional<WebKit::CoreIPCDateComponents>::operator=[abi:sn180100]<NSDateComponents *,void>(WTF::StringImpl **this, NSDateComponents *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  if (*((_BYTE *)this + 32))
  {
    WebKit::CoreIPCDateComponents::CoreIPCDateComponents((WebKit::CoreIPCDateComponents *)&v13, a2);
    v4 = v13;
    v13 = 0;
    v5 = *this;
    *this = v4;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v3);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = v14;
    v14 = 0;
    v7 = this[1];
    this[1] = v6;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v3);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = this[2];
    if (v8)
    {
      this[2] = 0;
      *((_DWORD *)this + 6) = 0;
      WTF::fastFree(v8, v3);
    }
    v9 = v14;
    this[2] = v15;
    v10 = v16;
    v15 = 0;
    v16 = 0;
    this[3] = v10;
    v14 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v3);
      else
        *(_DWORD *)v9 -= 2;
    }
    v11 = v13;
    v13 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v3);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  else
  {
    WebKit::CoreIPCDateComponents::CoreIPCDateComponents((WebKit::CoreIPCDateComponents *)this, a2);
    *((_BYTE *)this + 32) = 1;
  }
  return (WebKit::CoreIPCDateComponents *)this;
}

void sub_19787C7D4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF *a11, int a12)
{
  if (a11)
    WTF::fastFree(a11, a2);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::CoreIPCCNContact::toID(WebKit::CoreIPCCNContact *this@<X0>, _QWORD *a2@<X8>)
{
  id v4;
  const __CFString *v5;
  void *v6;
  CFTypeRef v7;
  CFTypeRef v8;
  CFTypeRef v9;
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef v12;
  CFTypeRef v13;
  CFTypeRef cf;

  v4 = objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E0DCE018])());
  if (*(_QWORD *)this)
    v5 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v5 = &stru_1E351F1B8;
  v6 = (void *)objc_msgSend(v4, "initWithIdentifier:", v5);
  objc_msgSend(v6, "setContactType:", *((_QWORD *)this + 1));
  if (*((_QWORD *)this + 2))
    objc_msgSend(v6, "setNamePrefix:", WTF::StringImpl::operator NSString *());
  if (*((_QWORD *)this + 3))
    objc_msgSend(v6, "setGivenName:", WTF::StringImpl::operator NSString *());
  if (*((_QWORD *)this + 4))
    objc_msgSend(v6, "setMiddleName:", WTF::StringImpl::operator NSString *());
  if (*((_QWORD *)this + 5))
    objc_msgSend(v6, "setFamilyName:", WTF::StringImpl::operator NSString *());
  if (*((_QWORD *)this + 6))
    objc_msgSend(v6, "setPreviousFamilyName:", WTF::StringImpl::operator NSString *());
  if (*((_QWORD *)this + 7))
    objc_msgSend(v6, "setNameSuffix:", WTF::StringImpl::operator NSString *());
  if (*((_QWORD *)this + 8))
    objc_msgSend(v6, "setNickname:", WTF::StringImpl::operator NSString *());
  if (*((_QWORD *)this + 9))
    objc_msgSend(v6, "setOrganizationName:", WTF::StringImpl::operator NSString *());
  if (*((_QWORD *)this + 10))
    objc_msgSend(v6, "setDepartmentName:", WTF::StringImpl::operator NSString *());
  if (*((_QWORD *)this + 11))
    objc_msgSend(v6, "setJobTitle:", WTF::StringImpl::operator NSString *());
  if (*((_QWORD *)this + 12))
    objc_msgSend(v6, "setPhoneticGivenName:", WTF::StringImpl::operator NSString *());
  if (*((_QWORD *)this + 13))
    objc_msgSend(v6, "setPhoneticMiddleName:", WTF::StringImpl::operator NSString *());
  if (*((_QWORD *)this + 14))
    objc_msgSend(v6, "setPhoneticFamilyName:", WTF::StringImpl::operator NSString *());
  if (*((_QWORD *)this + 15))
    objc_msgSend(v6, "setPhoneticOrganizationName:", WTF::StringImpl::operator NSString *());
  if (*((_QWORD *)this + 16))
    objc_msgSend(v6, "setNote:", WTF::StringImpl::operator NSString *());
  if (*((_BYTE *)this + 168))
  {
    WebKit::CoreIPCDateComponents::toID((WebKit::CoreIPCCNContact *)((char *)this + 136), &cf);
    objc_msgSend(v6, "setBirthday:", cf);
    v7 = cf;
    cf = 0;
    if (v7)
      CFRelease(v7);
  }
  if (*((_BYTE *)this + 208))
  {
    WebKit::CoreIPCDateComponents::toID((WebKit::CoreIPCCNContact *)((char *)this + 176), &cf);
    objc_msgSend(v6, "setNonGregorianBirthday:", cf);
    v8 = cf;
    cf = 0;
    if (v8)
      CFRelease(v8);
  }
  if (*((_DWORD *)this + 57))
  {
    WebKit::nsArrayFromVectorOfLabeledValues(&cf, (uint64_t *)this + 27);
    v9 = cf;
    objc_msgSend(v6, "setDates:", cf);
    if (v9)
      CFRelease(v9);
  }
  if (*((_DWORD *)this + 61))
  {
    WebKit::nsArrayFromVectorOfLabeledValues(&cf, (uint64_t *)this + 29);
    v10 = cf;
    objc_msgSend(v6, "setPhoneNumbers:", cf);
    if (v10)
      CFRelease(v10);
  }
  if (*((_DWORD *)this + 65))
  {
    WebKit::nsArrayFromVectorOfLabeledValues(&cf, (uint64_t *)this + 31);
    v11 = cf;
    objc_msgSend(v6, "setEmailAddresses:", cf);
    if (v11)
      CFRelease(v11);
  }
  if (*((_DWORD *)this + 69))
  {
    WebKit::nsArrayFromVectorOfLabeledValues(&cf, (uint64_t *)this + 33);
    v12 = cf;
    objc_msgSend(v6, "setPostalAddresses:", cf);
    if (v12)
      CFRelease(v12);
  }
  if (*((_DWORD *)this + 73))
  {
    WebKit::nsArrayFromVectorOfLabeledValues(&cf, (uint64_t *)this + 35);
    v13 = cf;
    objc_msgSend(v6, "setUrlAddresses:", cf);
    if (v13)
      CFRelease(v13);
  }
  *a2 = v6;
}

void sub_19787CB84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  const void *v10;
  const void *v11;

  if (v11)
    CFRelease(v11);
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void WebKit::nsArrayFromVectorOfLabeledValues(_QWORD *a1, uint64_t *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (**v8)(_QWORD *);
  uint64_t v9;
  _QWORD *v10;
  id v11;
  const __CFString *v12;
  const __CFString *v13;
  const void *v14;
  CFTypeRef v15;
  char v16;
  CFTypeRef cf;
  char *v18;

  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *((unsigned int *)a2 + 3));
  v5 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v5)
  {
    v6 = *a2;
    v7 = 96 * v5;
    v8 = (uint64_t (**)(_QWORD *))MEMORY[0x1E0DCDFB0];
    while (1)
    {
      v9 = *(unsigned int *)(v6 + 88);
      if ((_DWORD)v9 == -1)
        break;
      v18 = &v16;
      v10 = ((_QWORD *(*)(CFTypeRef *__return_ptr, char **, uint64_t))off_1E3508540[v9])(&cf, &v18, v6 + 16);
      v11 = objc_alloc((Class)(*v8)(v10));
      if (*(_QWORD *)v6)
        v12 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v12 = &stru_1E351F1B8;
      if (*(_QWORD *)(v6 + 8))
        v13 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v13 = &stru_1E351F1B8;
      v14 = (const void *)objc_msgSend(v11, "initWithIdentifier:label:value:", v12, v13, cf);
      v15 = cf;
      cf = 0;
      if (v15)
        CFRelease(v15);
      if (v14)
      {
        objc_msgSend(v4, "addObject:", v14);
        CFRelease(v14);
      }
      v6 += 96;
      v7 -= 96;
      if (!v7)
        goto LABEL_16;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
  }
  else
  {
LABEL_16:
    *a1 = v4;
  }
}

void sub_19787CD4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf)
{
  const void *v11;
  const void *v12;

  CFRelease(v12);
  if (v11)
    CFRelease(v11);
  _Unwind_Resume(a1);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6WebKit21CoreIPCDateComponentsENS8_20CoreIPCCNPhoneNumberENS8_22CoreIPCCNPostalAddressENS8_13CoreIPCStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJS9_SA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, _QWORD *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;

  v3 = (WTF *)a2[2];
  if (v3)
  {
    a2[2] = 0;
    *((_DWORD *)a2 + 6) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF::StringImpl *)a2[1];
  a2[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = (WTF::StringImpl *)*a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6WebKit21CoreIPCDateComponentsENS8_20CoreIPCCNPhoneNumberENS8_22CoreIPCCNPostalAddressENS8_13CoreIPCStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJS9_SA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6WebKit21CoreIPCDateComponentsENS8_20CoreIPCCNPhoneNumberENS8_22CoreIPCCNPostalAddressENS8_13CoreIPCStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJS9_SA_SB_SC_EEEEEEDcSG_DpT0_(int a1, WebKit::CoreIPCCNPostalAddress *this)
{
  WebKit::CoreIPCCNPostalAddress::~CoreIPCCNPostalAddress(this, this);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6WebKit21CoreIPCDateComponentsENS8_20CoreIPCCNPhoneNumberENS8_22CoreIPCCNPostalAddressENS8_13CoreIPCStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJS9_SA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *std::__variant_detail::__alt<2ul,WebKit::CoreIPCCNPostalAddress>::__alt[abi:sn180100]<WebKit::CoreIPCCNPostalAddress>(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  v3 = a2[1];
  a2[1] = 0;
  result[1] = v3;
  v4 = a2[2];
  a2[2] = 0;
  result[2] = v4;
  v5 = a2[3];
  a2[3] = 0;
  result[3] = v5;
  v6 = a2[4];
  a2[4] = 0;
  result[4] = v6;
  v7 = a2[5];
  a2[5] = 0;
  result[5] = v7;
  v8 = a2[6];
  a2[6] = 0;
  result[6] = v8;
  v9 = a2[7];
  a2[7] = 0;
  result[7] = v9;
  v10 = a2[8];
  a2[8] = 0;
  result[8] = v10;
  return result;
}

void WebKit::CoreIPCCNPostalAddress::~CoreIPCCNPostalAddress(WebKit::CoreIPCCNPostalAddress *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
}

uint64_t std::__optional_destruct_base<WebKit::CoreIPCDateComponents,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(WTF **)(a1 + 16);
    if (v3)
    {
      *(_QWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = 0;
      WTF::fastFree(v3, a2);
    }
    v4 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

_DWORD *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::RetainPtr<objc_object *> WebKit::nsArrayFromVectorOfLabeledValues(WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0::operator()<WebKit::CoreIPCContactLabeledValue const> const(WebKit::CoreIPCContactLabeledValue const &)::{lambda(WebKit::CoreIPCContactLabeledValue const &)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebKit::CoreIPCDateComponents,WebKit::CoreIPCCNPhoneNumber,WebKit::CoreIPCCNPostalAddress,WebKit::CoreIPCString> const&>@<X0>(WebKit::CoreIPCDateComponents *this@<X1>, _QWORD *a2@<X8>)
{
  return WebKit::CoreIPCDateComponents::toID(this, a2);
}

CFTypeRef std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::RetainPtr<objc_object *> WebKit::nsArrayFromVectorOfLabeledValues(WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0::operator()<WebKit::CoreIPCContactLabeledValue const> const(WebKit::CoreIPCContactLabeledValue const &)::{lambda(WebKit::CoreIPCContactLabeledValue const &)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebKit::CoreIPCDateComponents,WebKit::CoreIPCCNPhoneNumber,WebKit::CoreIPCCNPostalAddress,WebKit::CoreIPCString> const&>@<X0>(WebKit::CoreIPCCNPhoneNumber *this@<X1>, _QWORD *a2@<X8>)
{
  return WebKit::CoreIPCCNPhoneNumber::toID(this, a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::RetainPtr<objc_object *> WebKit::nsArrayFromVectorOfLabeledValues(WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0::operator()<WebKit::CoreIPCContactLabeledValue const> const(WebKit::CoreIPCContactLabeledValue const &)::{lambda(WebKit::CoreIPCContactLabeledValue const &)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebKit::CoreIPCDateComponents,WebKit::CoreIPCCNPhoneNumber,WebKit::CoreIPCCNPostalAddress,WebKit::CoreIPCString> const&>@<X0>(WebKit::CoreIPCCNPostalAddress *this@<X1>, _QWORD *a2@<X8>)
{
  return WebKit::CoreIPCCNPostalAddress::toID(this, a2);
}

const __CFString *std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::RetainPtr<objc_object *> WebKit::nsArrayFromVectorOfLabeledValues(WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0::operator()<WebKit::CoreIPCContactLabeledValue const> const(WebKit::CoreIPCContactLabeledValue const &)::{lambda(WebKit::CoreIPCContactLabeledValue const &)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebKit::CoreIPCDateComponents,WebKit::CoreIPCCNPhoneNumber,WebKit::CoreIPCCNPostalAddress,WebKit::CoreIPCString> const&>@<X0>(WebKit::CoreIPCString *this@<X1>, const __CFString **a2@<X8>)
{
  return WebKit::CoreIPCString::toID(this, a2);
}

uint64_t WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebKit::CoreIPCContactLabeledValue>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 96 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebKit::CoreIPCContactLabeledValue>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  if (result != a2)
  {
    v9 = v2;
    v10 = v3;
    v5 = result;
    do
    {
      v6 = *((unsigned int *)v5 + 22);
      if ((_DWORD)v6 != -1)
        ((void (*)(char *, char *))off_1E3508520[v6])(&v8, (char *)v5 + 16);
      *((_DWORD *)v5 + 22) = -1;
      v7 = (WTF::StringImpl *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      result = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 = (WTF::StringImpl *)((char *)v5 + 96);
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::CoreIPCContactLabeledValue>(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (uint64_t *)WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = (_QWORD *)(*(_QWORD *)a1 + 96 * *(unsigned int *)(a1 + 12));
  v5 = *v3;
  *v3 = 0;
  *v4 = v5;
  v6 = v3[1];
  v3[1] = 0;
  v4[1] = v6;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::CoreIPCDateComponents,WebKit::CoreIPCCNPhoneNumber,WebKit::CoreIPCCNPostalAddress,WebKit::CoreIPCString>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v4 + 2), (uint64_t)(v3 + 2));
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

void sub_19787D298(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl **v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v5 = *v3;
  *v3 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *v2;
  *v2 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::CoreIPCDateComponents,WebKit::CoreIPCCNPhoneNumber,WebKit::CoreIPCCNPostalAddress,WebKit::CoreIPCString>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 72) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebKit::CoreIPCDateComponents,WebKit::CoreIPCCNPhoneNumber,WebKit::CoreIPCCNPostalAddress,WebKit::CoreIPCString>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::CoreIPCDateComponents,WebKit::CoreIPCCNPhoneNumber,WebKit::CoreIPCCNPostalAddress,WebKit::CoreIPCString>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_19787D324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 72);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_1E3508520[v15])(&a13, v13);
  *(_DWORD *)(v13 + 72) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebKit::CoreIPCDateComponents,WebKit::CoreIPCCNPhoneNumber,WebKit::CoreIPCCNPostalAddress,WebKit::CoreIPCString>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::CoreIPCDateComponents,WebKit::CoreIPCCNPhoneNumber,WebKit::CoreIPCCNPostalAddress,WebKit::CoreIPCString>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 72);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E3508520[v4])(&v7, result);
  *(_DWORD *)(v3 + 72) = -1;
  v5 = *(unsigned int *)(a2 + 72);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E3508560[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 72) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit21CoreIPCDateComponentsENS8_20CoreIPCCNPhoneNumberENS8_22CoreIPCCNPostalAddressENS8_13CoreIPCStringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  v4 = a3[1];
  a3[1] = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = v4;
  v5 = a3[2];
  a3[2] = 0;
  *(_QWORD *)(a2 + 16) = v5;
  LODWORD(v5) = *((_DWORD *)a3 + 6);
  *((_DWORD *)a3 + 6) = 0;
  *(_DWORD *)(a2 + 24) = v5;
  LODWORD(v5) = *((_DWORD *)a3 + 7);
  *((_DWORD *)a3 + 7) = 0;
  *(_DWORD *)(a2 + 28) = v5;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit21CoreIPCDateComponentsENS8_20CoreIPCCNPhoneNumberENS8_22CoreIPCCNPostalAddressENS8_13CoreIPCStringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  v4 = a3[1];
  a3[1] = 0;
  a2[1] = v4;
}

_QWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit21CoreIPCDateComponentsENS8_20CoreIPCCNPhoneNumberENS8_22CoreIPCCNPostalAddressENS8_13CoreIPCStringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  return std::__variant_detail::__alt<2ul,WebKit::CoreIPCCNPostalAddress>::__alt[abi:sn180100]<WebKit::CoreIPCCNPostalAddress>(a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit21CoreIPCDateComponentsENS8_20CoreIPCCNPhoneNumberENS8_22CoreIPCCNPostalAddressENS8_13CoreIPCStringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

unint64_t WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 96 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl **v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  if (a2 < 0x2AAAAAB)
  {
    v2 = result;
    v3 = *(WTF::StringImpl **)result;
    v4 = (WTF::StringImpl **)(*(_QWORD *)result + 96 * *(unsigned int *)(result + 12));
    v5 = 96 * a2;
    v6 = WTF::fastMalloc((WTF *)(96 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFE0) / 0x60;
    *(_QWORD *)v2 = v6;
    WTF::VectorMover<false,WebKit::CoreIPCContactLabeledValue>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebKit::CoreIPCContactLabeledValue>::move(WTF::StringImpl *result, WTF::StringImpl **a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  char v12;

  if (result != (WTF::StringImpl *)a2)
  {
    v4 = a3 + 16;
    v5 = (uint64_t)result + 16;
    do
    {
      v7 = (WTF::StringImpl **)(v5 - 16);
      v6 = *(_QWORD *)(v5 - 16);
      *(_QWORD *)(v5 - 16) = 0;
      *(_QWORD *)(v4 - 16) = v6;
      v8 = *(_QWORD *)(v5 - 8);
      *(_QWORD *)(v5 - 8) = 0;
      *(_QWORD *)(v4 - 8) = v8;
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::CoreIPCDateComponents,WebKit::CoreIPCCNPhoneNumber,WebKit::CoreIPCCNPostalAddress,WebKit::CoreIPCString>,(std::__variant_detail::_Trait)1>::__move_constructor(v4, v5);
      v10 = *(unsigned int *)(v5 + 72);
      if ((_DWORD)v10 != -1)
        ((void (*)(char *, uint64_t))off_1E3508520[v10])(&v12, v5);
      *(_DWORD *)(v5 + 72) = -1;
      v11 = *(WTF::StringImpl **)(v5 - 8);
      *(_QWORD *)(v5 - 8) = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v9);
        else
          *(_DWORD *)v11 -= 2;
      }
      result = *v7;
      *v7 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
        else
          *(_DWORD *)result -= 2;
      }
      v4 += 96;
      v5 += 96;
    }
    while (v7 + 12 != a2);
  }
  return result;
}

void sub_19787D6A8(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v4 = *(WTF::StringImpl **)(v2 - 8);
  *(_QWORD *)(v2 - 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(WTF::StringImpl **)(v2 - 16);
  *(_QWORD *)(v2 - 16) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::CoreIPCCVPixelBufferRef::toCF(mach_port_t *this@<X0>, _QWORD *a2@<X8>)
{
  mach_port_t v3;
  IOSurfaceRef v4;
  IOSurfaceRef v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  v3 = *this;
  if (v3 && (v4 = IOSurfaceLookupFromMachPort(v3)) != 0)
  {
    v5 = v4;
    v9 = 0;
    v6 = ((uint64_t (*)(_QWORD, IOSurfaceRef, _QWORD, uint64_t *))*MEMORY[0x1E0DD4938])(*MEMORY[0x1E0C9AE00], v4, 0, &v9);
    v7 = v9;
    if (v6)
      v8 = 1;
    else
      v8 = v9 == 0;
    if (v8)
    {
      *a2 = 0;
      CFRelease(v5);
    }
    else
    {
      CFRelease(v5);
      *a2 = v7;
    }
  }
  else
  {
    *a2 = 0;
  }
}

void sub_19787D79C(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

WebKit::CoreIPCDateComponents *WebKit::CoreIPCDateComponents::CoreIPCDateComponents(WebKit::CoreIPCDateComponents *this, NSDateComponents *a2)
{
  _QWORD *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  _QWORD *v19;
  WTF::StringImpl *v21;

  *((_OWORD *)this + 1) = 0u;
  v4 = (_QWORD *)((char *)this + 16);
  *(_OWORD *)this = 0u;
  if (-[NSDateComponents calendar](a2, "calendar"))
  {
    MEMORY[0x19AEABCC8](&v21, -[NSCalendar calendarIdentifier](-[NSDateComponents calendar](a2, "calendar"), "calendarIdentifier"));
    v6 = v21;
    v21 = 0;
    v7 = *(WTF::StringImpl **)this;
    *(_QWORD *)this = v6;
    if (v7)
    {
      v8 = *(_DWORD *)v7 - 2;
      if (*(_DWORD *)v7 != 2)
      {
LABEL_6:
        *(_DWORD *)v7 = v8;
        goto LABEL_7;
      }
      WTF::StringImpl::destroy(v7, v5);
      v7 = v21;
      v21 = 0;
      if (v7)
      {
        v8 = *(_DWORD *)v7 - 2;
        if (*(_DWORD *)v7 == 2)
        {
          WTF::StringImpl::destroy(v7, v9);
          goto LABEL_7;
        }
        goto LABEL_6;
      }
    }
  }
LABEL_7:
  if (!-[NSDateComponents timeZone](a2, "timeZone"))
    goto LABEL_13;
  MEMORY[0x19AEABCC8](&v21, -[NSTimeZone name](-[NSDateComponents timeZone](a2, "timeZone"), "name"));
  v11 = v21;
  v21 = 0;
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v11;
  if (!v12)
    goto LABEL_13;
  v13 = *(_DWORD *)v12 - 2;
  if (*(_DWORD *)v12 != 2)
  {
LABEL_12:
    *(_DWORD *)v12 = v13;
    goto LABEL_13;
  }
  WTF::StringImpl::destroy(v12, v10);
  v12 = v21;
  v21 = 0;
  if (v12)
  {
    v13 = *(_DWORD *)v12 - 2;
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::destroy(v12, v14);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_13:
  v15 = WTF::fastMalloc((WTF *)0x70);
  v16 = 0;
  *((_DWORD *)this + 6) = 14;
  *((_QWORD *)this + 2) = v15;
  do
  {
    v17 = -[NSDateComponents valueForComponent:](a2, "valueForComponent:", WebKit::calendarUnitForComponentIndex[v16]);
    v21 = v17;
    v18 = *((unsigned int *)this + 7);
    if ((_DWORD)v18 == *((_DWORD *)this + 6))
    {
      v19 = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v4, v18 + 1, (unint64_t)&v21);
      v18 = *((unsigned int *)this + 7);
      *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v18) = *v19;
    }
    else
    {
      *(_QWORD *)(*v4 + 8 * v18) = v17;
    }
    *((_DWORD *)this + 7) = v18 + 1;
    ++v16;
  }
  while (v16 != 14);
  return this;
}

void sub_19787D950(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF **v3;
  WTF *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 16) = 0;
    *(_DWORD *)(v2 + 24) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = *(WTF::StringImpl **)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *(WTF::StringImpl **)v2;
  *(_QWORD *)v2 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_DWORD *WebKit::CoreIPCDateComponents::toID@<X0>(WebKit::CoreIPCDateComponents *this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *result;
  void *v5;
  unint64_t i;

  result = (_DWORD *)objc_opt_new();
  v5 = result;
  for (i = 0; i != 14; ++i)
  {
    if (i >= *((unsigned int *)this + 7))
    {
      __break(0xC471u);
      return result;
    }
    result = (_DWORD *)objc_msgSend(v5, "setValue:forComponent:", *(_QWORD *)(*((_QWORD *)this + 2) + 8 * i), WebKit::calendarUnitForComponentIndex[i]);
  }
  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
    objc_msgSend(v5, "setCalendar:", objc_msgSend(MEMORY[0x1E0C99D48], "calendarWithIdentifier:", WTF::StringImpl::operator NSString *()));
  result = (_DWORD *)*((_QWORD *)this + 1);
  if (result)
  {
    if (result[1])
      result = (_DWORD *)objc_msgSend(v5, "setTimeZone:", objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneWithName:", WTF::StringImpl::operator NSString *()));
  }
  *a2 = v5;
  return result;
}

void sub_19787DAB0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

NSUInteger WebKit::CoreIPCDictionary::CoreIPCDictionary(WebKit::CoreIPCDictionary *this, NSDictionary *a2)
{
  NSUInteger result;
  int v5;
  uint64_t v6;
  NSUInteger v7;
  uint64_t v8;
  uint64_t i;
  objc_object *v10;
  objc_object *v11;
  objc_object *v12;
  objc_object *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  result = -[NSDictionary count](a2, "count");
  v5 = result;
  if (result)
  {
    if (result >> 28)
    {
      __break(0xC471u);
      return result;
    }
    v6 = WTF::fastMalloc((WTF *)(16 * result));
    *((_DWORD *)this + 2) = v5;
    *(_QWORD *)this = v6;
  }
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v7 = -[NSDictionary countByEnumeratingWithState:objects:count:](a2, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v29;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v29 != v8)
          objc_enumerationMutation(a2);
        v10 = *(objc_object **)(*((_QWORD *)&v28 + 1) + 8 * i);
        v11 = -[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", v10, v24);
        if (IPC::isSerializableValue((IPC *)v10, v12)
          && (IPC::isSerializableValue((IPC *)v11, v13) & 1) != 0)
        {
          WebKit::CoreIPCNSCFObject::CoreIPCNSCFObject((WebKit::CoreIPCNSCFObject *)&v25, v10);
          WebKit::CoreIPCNSCFObject::CoreIPCNSCFObject((WebKit::CoreIPCNSCFObject *)&v24, v11);
          v15 = v24;
          v14 = v25;
          v24 = 0;
          v25 = 0;
          v26 = v14;
          v27 = v15;
          v16 = *((unsigned int *)this + 3);
          if ((_DWORD)v16 == *((_DWORD *)this + 2))
          {
            WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>>((uint64_t)this, (unint64_t)&v26);
          }
          else
          {
            v17 = v16 + 1;
            v18 = (uint64_t *)(*(_QWORD *)this + 16 * v16);
            v26 = 0;
            *v18 = v14;
            v19 = v27;
            v27 = 0;
            v18[1] = v19;
            *((_DWORD *)this + 3) = v17;
          }
          v20 = v27;
          v27 = 0;
          if (v20)
            std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::operator()[abi:sn180100]((uint64_t)&v27, v20);
          v21 = v26;
          v26 = 0;
          if (v21)
            std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::operator()[abi:sn180100]((uint64_t)&v26, v21);
          v22 = v24;
          v24 = 0;
          if (v22)
            std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::operator()[abi:sn180100]((uint64_t)&v24, v22);
          v23 = v25;
          v25 = 0;
          if (v23)
            std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::operator()[abi:sn180100]((uint64_t)&v25, v23);
        }
      }
      v7 = -[NSDictionary countByEnumeratingWithState:objects:count:](a2, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
    }
    while (v7);
  }
  return (NSUInteger)this;
}

void sub_19787DCD8(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::CoreIPCDictionary::toID(WebKit::CoreIPCDictionary *this@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CFTypeRef v8;
  CFTypeRef v9;
  CFTypeRef v10;
  CFTypeRef cf;
  CFTypeRef v12;

  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", *((unsigned int *)this + 3));
  v5 = *((unsigned int *)this + 3);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)this;
    v7 = 16 * v5;
    do
    {
      WebKit::CoreIPCNSCFObject::toID((WebKit::CoreIPCNSCFObject *)(v6 + 8), &v12);
      v8 = v12;
      WebKit::CoreIPCNSCFObject::toID((WebKit::CoreIPCNSCFObject *)v6, &cf);
      objc_msgSend(v4, "setObject:forKey:", v8, cf);
      v9 = cf;
      cf = 0;
      if (v9)
        CFRelease(v9);
      v10 = v12;
      v12 = 0;
      if (v10)
        CFRelease(v10);
      v6 += 16;
      v7 -= 16;
    }
    while (v7);
  }
  *a2 = v4;
}

void sub_19787DE1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, CFTypeRef a10)
{
  const void *v10;

  if (cf)
    CFRelease(cf);
  if (a10)
    CFRelease(a10);
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>>::destruct(*(_QWORD *)a1, (uint64_t *)(*(_QWORD *)a1 + 16 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::VectorDestructor<true,WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>>::destruct(uint64_t result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;

  if ((uint64_t *)result != a2)
  {
    v3 = (uint64_t *)(result + 8);
    do
    {
      v4 = *v3;
      *v3 = 0;
      v5 = v3 - 1;
      if (v4)
        result = std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::operator()[abi:sn180100]((uint64_t)v3, v4);
      v6 = *v5;
      *v5 = 0;
      if (v6)
        result = std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::operator()[abi:sn180100]((uint64_t)(v3 - 1), v6);
      v7 = v3 + 1;
      v3 += 2;
    }
    while (v7 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>>(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (uint64_t *)WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = v4 + 1;
  v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v4);
  v7 = *v3;
  *v3 = 0;
  *v6 = v7;
  v8 = v3[1];
  v3[1] = 0;
  v6[1] = v8;
  *(_DWORD *)(a1 + 12) = v5;
  return 1;
}

unint64_t WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  WTF *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x19787E09CLL);
    }
    v4 = *(WTF **)a1;
    v5 = (_QWORD *)(*(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12));
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>>::move((uint64_t)v4, v5, v6);
    if (v4)
    {
      if (*(WTF **)a1 == v4)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
  }
  return 1;
}

uint64_t WTF::VectorMover<false,WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>>::move(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  if ((_QWORD *)result != a2)
  {
    v5 = (uint64_t *)(result + 8);
    do
    {
      v7 = v5 - 1;
      v6 = *(v5 - 1);
      *(v5 - 1) = 0;
      *a3 = v6;
      v8 = *v5;
      *v5 = 0;
      a3[1] = v8;
      v9 = *v5;
      *v5 = 0;
      if (v9)
        result = std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::operator()[abi:sn180100]((uint64_t)v5, v9);
      v10 = *v7;
      *v7 = 0;
      if (v10)
        result = std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::operator()[abi:sn180100]((uint64_t)(v5 - 1), v10);
      v11 = v5 + 1;
      v5 += 2;
      a3 += 2;
    }
    while (v11 != a2);
  }
  return result;
}

uint64_t WebKit::CoreIPCError::hasValidUserInfo(id *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  const void *v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CFTypeID v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFTypeID v17;
  CFTypeID v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = *a1;
  v2 = objc_msgSend(*a1, "objectForKey:", CFSTR("NSErrorClientCertificateChainKey"));
  if (v2)
  {
    v6 = (void *)v2;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      return 0;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v24;
LABEL_9:
      v10 = 0;
      while (1)
      {
        if (*(_QWORD *)v24 != v9)
          objc_enumerationMutation(v6);
        v11 = CFGetTypeID(*(CFTypeRef *)(*((_QWORD *)&v23 + 1) + 8 * v10));
        if (v11 != SecCertificateGetTypeID())
          return 0;
        if (v8 == ++v10)
        {
          v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
          if (v8)
            goto LABEL_9;
          break;
        }
      }
    }
  }
  v3 = (void *)objc_msgSend(v1, "objectForKey:", CFSTR("NSErrorPeerCertificateChainKey"));
  if (v3
    && (v12 = v3,
        v21 = 0u,
        v22 = 0u,
        v19 = 0u,
        v20 = 0u,
        (v13 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v19, v27, 16)) != 0))
  {
    v14 = v13;
    v15 = *(_QWORD *)v20;
LABEL_18:
    v16 = 0;
    while (1)
    {
      if (*(_QWORD *)v20 != v15)
        objc_enumerationMutation(v12);
      v17 = CFGetTypeID(*(CFTypeRef *)(*((_QWORD *)&v19 + 1) + 8 * v16));
      if (v17 != SecCertificateGetTypeID())
        break;
      if (v14 == ++v16)
      {
        v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
        if (v14)
          goto LABEL_18;
        goto LABEL_3;
      }
    }
  }
  else
  {
LABEL_3:
    v4 = (const void *)objc_msgSend(v1, "objectForKey:", *MEMORY[0x1E0CB32F8]);
    if (!v4 || (v18 = CFGetTypeID(v4), v18 == SecTrustGetTypeID()))
    {
      if (!objc_msgSend(v1, "objectForKey:", *MEMORY[0x1E0CB3388]))
        return 1;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        return 1;
    }
  }
  return 0;
}

void WebKit::CoreIPCError::toID(WebKit::CoreIPCError *this@<X0>, _QWORD *a2@<X8>)
{
  WebKit::CoreIPCError *v4;
  id v5;
  const __CFString *v6;
  const void *v7;
  CFIndex Count;
  __CFDictionary *MutableCopy;
  id v10;
  const __CFString *v11;
  const void *v12;

  v4 = (WebKit::CoreIPCError *)*((_QWORD *)this + 3);
  if (v4)
  {
    WebKit::CoreIPCError::toID((uint64_t *)&v12, v4);
    v7 = v12;
    if (v12)
    {
      Count = CFDictionaryGetCount(*((CFDictionaryRef *)this + 2));
      MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count + 1, *((CFDictionaryRef *)this + 2));
      CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0CB3388], v7);
      v10 = objc_alloc(MEMORY[0x1E0CB35C8]);
      if (*(_QWORD *)this)
        v11 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v11 = &stru_1E351F1B8;
      *a2 = objc_msgSend(v10, "initWithDomain:code:userInfo:", v11, *((_QWORD *)this + 1), MutableCopy);
      if (MutableCopy)
        CFRelease(MutableCopy);
      CFRelease(v7);
    }
    else
    {
      *a2 = 0;
    }
  }
  else
  {
    v5 = objc_alloc(MEMORY[0x1E0CB35C8]);
    if (*(_QWORD *)this)
      v6 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v6 = &stru_1E351F1B8;
    *a2 = objc_msgSend(v5, "initWithDomain:code:userInfo:", v6, *((_QWORD *)this + 1), *((_QWORD *)this + 2));
  }
}

void sub_19787E4A0(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::CoreIPCError::isSafeToEncodeUserInfo(WebKit::CoreIPCError *this, objc_object *a2)
{
  uint64_t result;
  char isKindOfClass;
  uint64_t v5;
  objc_object *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  void *v12;
  uint64_t v13;
  objc_object *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 1;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if (this && (isKindOfClass & 1) != 0)
  {
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v5 = -[WebKit::CoreIPCError countByEnumeratingWithState:objects:count:](this, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
    if (!v5)
      return 1;
    v7 = v5;
    v8 = *(_QWORD *)v23;
LABEL_10:
    v9 = 0;
    while (1)
    {
      if (*(_QWORD *)v23 != v8)
        objc_enumerationMutation(this);
      result = WebKit::CoreIPCError::isSafeToEncodeUserInfo(*(WebKit::CoreIPCError **)(*((_QWORD *)&v22 + 1) + 8 * v9), v6);
      if (!(_DWORD)result)
        break;
      if (v7 == ++v9)
      {
        v7 = -[WebKit::CoreIPCError countByEnumeratingWithState:objects:count:](this, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
        result = 1;
        if (v7)
          goto LABEL_10;
        return result;
      }
    }
  }
  else
  {
    objc_opt_class();
    v11 = (this != 0) & objc_opt_isKindOfClass();
    if (v11 == 1)
    {
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v12 = (void *)-[WebKit::CoreIPCError objectEnumerator](this, "objectEnumerator", 0);
      v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
      if (v13)
      {
        v15 = v13;
        v16 = *(_QWORD *)v19;
        while (2)
        {
          for (i = 0; i != v15; ++i)
          {
            if (*(_QWORD *)v19 != v16)
              objc_enumerationMutation(v12);
            if (!WebKit::CoreIPCError::isSafeToEncodeUserInfo(*(WebKit::CoreIPCError **)(*((_QWORD *)&v18 + 1) + 8 * i), v14))
            {
              v10 = 0;
              return v11 & v10;
            }
          }
          v15 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
          v10 = 1;
          if (v15)
            continue;
          break;
        }
      }
      else
      {
        v10 = 1;
      }
    }
    return v11 & v10;
  }
  return result;
}

WebKit::CoreIPCError *WebKit::CoreIPCError::CoreIPCError(WebKit::CoreIPCError *this, NSError *a2)
{
  NSInteger v4;
  char *v5;
  NSDictionary *v6;
  CFIndex v7;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v9;
  id v10;
  CFArrayRef v11;
  _QWORD *v12;
  __SecTrust *v13;
  __SecTrust *v14;
  const void *v15;
  id v16;
  const void *v17;
  const void *v18;
  WTF::StringImpl **v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  CFTypeID v26;
  CFTypeID v27;
  OSStatus v28;
  SecCertificateRef v29;
  CFTypeID v30;
  uint64_t v31;
  CFTypeID v32;
  CFTypeID v33;
  CFArrayRef v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  CFTypeID v38;
  WebKit::CoreIPCError *v39;
  WTF::StringImpl **v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  SecCertificateRef certificateRef;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _QWORD v50[5];
  CFTypeRef cf;
  _BYTE v52[128];
  _BYTE v53[128];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  MEMORY[0x19AEABCC8](this, -[NSError domain](a2, "domain"));
  v39 = this;
  v4 = -[NSError code](a2, "code");
  *((_QWORD *)this + 2) = 0;
  v5 = (char *)this + 16;
  *((_QWORD *)v5 - 1) = v4;
  *((_QWORD *)v5 + 1) = 0;
  v6 = -[NSError userInfo](a2, "userInfo");
  v7 = -[NSDictionary count](v6, "count");
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v7, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v9 = Mutable;
  v50[0] = MEMORY[0x1E0C809B0];
  v50[1] = 3321888768;
  v50[2] = ___ZN6WebKit12CoreIPCErrorC2EP7NSError_block_invoke;
  v50[3] = &__block_descriptor_48_e8_40c39_ZTSN3WTF9RetainPtrIP14__CFDictionaryEE_e15_v32__0_8_16_B24l;
  v50[4] = v39;
  cf = Mutable;
  if (Mutable)
    CFRetain(Mutable);
  -[NSDictionary enumerateKeysAndObjectsUsingBlock:](v6, "enumerateKeysAndObjectsUsingBlock:", v50);
  v10 = -[NSDictionary objectForKey:](v6, "objectForKey:", CFSTR("NSErrorClientCertificateChainKey"));
  if (v10)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v21 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v10, "count"));
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v22 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v46, v53, 16);
      if (v22)
      {
        v23 = *(_QWORD *)v47;
        do
        {
          v24 = 0;
          do
          {
            if (*(_QWORD *)v47 != v23)
              objc_enumerationMutation(v10);
            v25 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * v24);
            v26 = CFGetTypeID(v25);
            if (v26 == SecIdentityGetTypeID() || (v30 = CFGetTypeID(v25), v30 == SecCertificateGetTypeID()))
            {
              v27 = CFGetTypeID(v25);
              if (v27 == SecIdentityGetTypeID())
              {
                certificateRef = 0;
                v28 = SecIdentityCopyCertificate((SecIdentityRef)v25, &certificateRef);
                v29 = certificateRef;
                if (v28)
                  v21 = 0;
                else
                  objc_msgSend(v21, "addObject:", certificateRef);
                if (v29)
                  CFRelease(v29);
                if (v28)
                  goto LABEL_40;
              }
              else
              {
                objc_msgSend(v21, "addObject:", v25);
              }
            }
            ++v24;
          }
          while (v22 != v24);
          v31 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v46, v53, 16);
          v22 = v31;
        }
        while (v31);
      }
LABEL_40:
      CFDictionarySetValue(v9, CFSTR("NSErrorClientCertificateChainKey"), v21);
    }
  }
  v11 = -[NSDictionary objectForKey:](v6, "objectForKey:", CFSTR("NSErrorPeerCertificateChainKey"));
  v12 = (_QWORD *)MEMORY[0x1E0CB32F8];
  if (!v11)
  {
    v13 = -[NSDictionary objectForKey:](v6, "objectForKey:", *MEMORY[0x1E0CB32F8]);
    v14 = v13;
    if (!v13)
      goto LABEL_6;
    v33 = CFGetTypeID(v13);
    if (v33 != SecTrustGetTypeID())
      goto LABEL_6;
    v34 = SecTrustCopyCertificateChain(v14);
    v11 = v34;
    if (!v34)
      goto LABEL_6;
    CFAutorelease(v34);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v35 = -[__CFArray countByEnumeratingWithState:objects:count:](v11, "countByEnumeratingWithState:objects:count:", &v41, v52, 16);
    if (v35)
    {
      v36 = *(_QWORD *)v42;
LABEL_49:
      v37 = 0;
      while (1)
      {
        if (*(_QWORD *)v42 != v36)
          objc_enumerationMutation(v11);
        v38 = CFGetTypeID(*(CFTypeRef *)(*((_QWORD *)&v41 + 1) + 8 * v37));
        if (v38 != SecCertificateGetTypeID())
          break;
        if (v35 == ++v37)
        {
          v35 = -[__CFArray countByEnumeratingWithState:objects:count:](v11, "countByEnumeratingWithState:objects:count:", &v41, v52, 16);
          if (v35)
            goto LABEL_49;
          goto LABEL_55;
        }
      }
    }
    else
    {
LABEL_55:
      CFDictionarySetValue(v9, CFSTR("NSErrorPeerCertificateChainKey"), v11);
    }
  }
LABEL_6:
  v15 = (const void *)*v12;
  v16 = -[NSDictionary objectForKey:](v6, "objectForKey:", *v12);
  v17 = v16;
  if (v16)
  {
    v32 = CFGetTypeID(v16);
    if (v32 == SecTrustGetTypeID())
      CFDictionarySetValue(v9, v15, v17);
  }
  if (v9)
    CFRetain(v9);
  v18 = *(const void **)v5;
  *(_QWORD *)v5 = v9;
  if (v18)
    CFRelease(v18);
  certificateRef = -[NSDictionary objectForKey:](v6, "objectForKey:", *MEMORY[0x1E0CB3388]);
  if (certificateRef)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      std::make_unique[abi:sn180100]<WebKit::CoreIPCError,objc_object *&>((WebKit::CoreIPCError **)&v40, (NSError **)&certificateRef);
      v20 = v40;
      v40 = 0;
      std::unique_ptr<WebKit::CoreIPCError>::reset[abi:sn180100]((WTF::StringImpl ***)v5 + 1, v20);
      std::unique_ptr<WebKit::CoreIPCError>::reset[abi:sn180100](&v40, 0);
    }
  }
  if (cf)
    CFRelease(cf);
  if (v9)
    CFRelease(v9);
  return v39;
}

void sub_19787EBC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl ***a10, WTF::StringImpl **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,CFTypeRef cf)
{
  const void *v36;
  const void **v37;
  WTF::StringImpl *v39;
  const void *v40;
  WTF::StringImpl *v41;

  if (cf)
    CFRelease(cf);
  if (v36)
    CFRelease(v36);
  std::unique_ptr<WebKit::CoreIPCError>::reset[abi:sn180100](a10, 0);
  v40 = *v37;
  *v37 = 0;
  if (v40)
    CFRelease(v40);
  v41 = *a11;
  *a11 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, v39);
    else
      *(_DWORD *)v41 -= 2;
  }
  _Unwind_Resume(a1);
}

void ___ZN6WebKit12CoreIPCErrorC2EP7NSError_block_invoke(uint64_t a1, void *a2, void *a3)
{
  objc_object *v6;

  if (!objc_msgSend(a2, "isEqualToString:", CFSTR("NSErrorClientCertificateChainKey"))
    || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    if (WebKit::CoreIPCError::isSafeToEncodeUserInfo((WebKit::CoreIPCError *)a3, v6))
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), a2, a3);
  }
}

CFTypeRef __copy_helper_block_e8_40c39_ZTSN3WTF9RetainPtrIP14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_40c39_ZTSN3WTF9RetainPtrIP14__CFDictionaryEE(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    CFRelease(v2);
}

uint64_t std::make_unique[abi:sn180100]<WebKit::CoreIPCError,objc_object *&>(WebKit::CoreIPCError **a1, NSError **a2)
{
  WebKit::CoreIPCError *v4;
  uint64_t result;

  v4 = (WebKit::CoreIPCError *)WTF::fastMalloc((WTF *)0x20);
  result = WebKit::CoreIPCError::CoreIPCError(v4, *a2);
  *a1 = v4;
  return result;
}

void sub_19787EDA4(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::CoreIPCFont::toID(WebKit::CoreIPCFont *this@<X0>, _QWORD *a2@<X8>)
{
  NSDictionary *v3;
  const void *v4;
  CFTypeRef v5;
  CFTypeRef cf;

  WebKit::CoreIPCDictionary::toID(this, &cf);
  v4 = (const void *)WebKit::fontWithAttributes((WebKit *)cf, v3, 0.0);
  *a2 = v4;
  if (v4)
    CFRetain(v4);
  v5 = cf;
  cf = 0;
  if (v5)
    CFRelease(v5);
}

void sub_19787EE14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  _QWORD *v10;
  NSException *v11;

  if (a2 == 1)
  {
    v11 = (NSException *)objc_begin_catch(exception_object);
    ReportBlockedObjCException(v11);
    objc_end_catch();
    *v10 = 0;
    JUMPOUT(0x19787EE00);
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::CoreIPCLocale::isValidIdentifier(WebKit::CoreIPCLocale *this, const WTF::String *a2)
{
  void *v3;
  const __CFString *v4;
  _BOOL8 v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v9;
  char v10;

  v3 = (void *)objc_msgSend(MEMORY[0x1E0C99DC8], "availableLocaleIdentifiers");
  if (*(_QWORD *)this)
    v4 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v4 = &stru_1E351F1B8;
  if ((objc_msgSend(v3, "containsObject:", v4) & 1) != 0)
    return 1;
  WebKit::CoreIPCLocale::canonicalLocaleStringReplacement((WebKit::CoreIPCLocale *)&v9, this);
  v5 = v10 != 0;
  if (v10)
  {
    v7 = v9;
    v9 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  return v5;
}

uint64_t WebKit::CoreIPCLocale::canonicalLocaleStringReplacement(WebKit::CoreIPCLocale *this, const WTF::String *a2)
{
  void *v3;
  const __CFString *v4;
  uint64_t result;
  char v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  void *v12;
  const WTF::String *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (_MergedGlobals_130 == 1)
  {
    v3 = (void *)qword_1ECE73428;
  }
  else
  {
    v13 = a2;
    v3 = (void *)objc_opt_new();
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v7 = (void *)objc_msgSend(MEMORY[0x1E0C99DC8], "availableLocaleIdentifiers");
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v8)
    {
      v9 = *(_QWORD *)v15;
      do
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_QWORD *)v15 != v9)
            objc_enumerationMutation(v7);
          v11 = *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * i);
          v12 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99DC8], "localeWithLocaleIdentifier:", v11), "localeIdentifier");
          if ((objc_msgSend(v12, "isEqualToString:", v11) & 1) == 0)
            objc_msgSend(v3, "setObject:forKey:", v11, v12);
        }
        v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      }
      while (v8);
    }
    qword_1ECE73428 = (uint64_t)v3;
    _MergedGlobals_130 = 1;
    a2 = v13;
  }
  if (*(_QWORD *)a2)
    v4 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v4 = &stru_1E351F1B8;
  result = objc_msgSend(v3, "objectForKey:", v4);
  if (result)
  {
    result = MEMORY[0x19AEABCC8](this);
    v6 = 1;
  }
  else
  {
    v6 = 0;
    *(_BYTE *)this = 0;
  }
  *((_BYTE *)this + 8) = v6;
  return result;
}

void sub_19787F0C8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl **WebKit::CoreIPCLocale::CoreIPCLocale(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  void *v4;
  const __CFString *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v9;
  char v10;

  MEMORY[0x19AEABCC8](a1, objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale"), "localeIdentifier"));
  v4 = (void *)objc_msgSend(MEMORY[0x1E0C99DC8], "availableLocaleIdentifiers");
  if (*(_QWORD *)a2)
    v5 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v5 = &stru_1E351F1B8;
  if (objc_msgSend(v4, "containsObject:", v5))
  {
    WTF::String::operator=(a1, a2);
  }
  else
  {
    WebKit::CoreIPCLocale::canonicalLocaleStringReplacement((WebKit::CoreIPCLocale *)&v9, a2);
    if (v10)
    {
      WTF::String::operator=(a1, (WTF::StringImpl *)&v9);
      if (v10)
      {
        v7 = v9;
        v9 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, v6);
          else
            *(_DWORD *)v7 -= 2;
        }
      }
    }
  }
  return a1;
}

void sub_19787F1D4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  WTF::StringImpl **v10;
  WTF::StringImpl *v12;

  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  v12 = *v10;
  *v10 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef WebKit::CoreIPCLocale::toID@<X0>(WebKit::CoreIPCLocale *this@<X0>, _QWORD *a2@<X8>)
{
  id v4;
  const __CFString *v5;
  CFTypeRef result;

  v4 = objc_alloc(MEMORY[0x1E0C99DC8]);
  if (*(_QWORD *)this)
    v5 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v5 = &stru_1E351F1B8;
  result = (CFTypeRef)objc_msgSend(v4, "initWithLocaleIdentifier:", v5);
  *a2 = result;
  if (result)
    return CFRetain(result);
  return result;
}

uint64_t WTF::makeUniqueRefWithoutFastMallocCheck<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>,(std::__variant_detail::_Trait)1>::__move_constructor(v4, a1);
  *a2 = v4;
  return result;
}

void sub_19787F340(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19AEB936C](v1, 0x10E2C408981D52ALL);
  _Unwind_Resume(a1);
}

uint64_t WebKit::CoreIPCNSCFObject::valueIsAllowed(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];
  _QWORD *v8;

  v6 = 0;
  v7[0] = &v6;
  v7[1] = &v6;
  v2 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v2 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<WTF::UniqueRef<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>,void>::decode(v5);
  }
  else
  {
    v8 = v7;
    ((void (*)(_QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN6WebKit17CoreIPCNSCFObject14valueIsAllowedERN3IPC7DecoderERNS_7variantIJDnNS8_12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEEE3__0JZNS9_14valueIsAllowedESC_SV_E3__1EEEEEJRNS0_6__implIJDnSE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_EEEEEEDcOT_DpOT0____fmatrix[v2])(&v8);
    return !v6
        || WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<objc_class *>,WTF::DefaultHash<objc_class *>>,objc_class *>((uint64_t *)(a1 + 56), &v6);
  }
}

void IPC::ArgumentCoder<WTF::UniqueRef<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>,void>::decode(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v5;
  _BYTE v6[40];
  int v7;
  char v8;

  IPC::Decoder::decode<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>(a1, a2, (uint64_t)v6, a4);
  if (v8)
  {
    WTF::makeUniqueRefWithoutFastMallocCheck<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>((uint64_t)v6, &v5);
    *(_QWORD *)a3 = v5;
    *(_BYTE *)(a3 + 8) = 1;
    if (v8)
    {
      if (v7 != -1)
        ((void (*)(uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS6_13CoreIPCCFTypeENS6_12CoreIPCColorENS6_11CoreIPCDataENS6_11CoreIPCDateENS6_17CoreIPCDictionaryENS6_12CoreIPCErrorENS6_11CoreIPCFontENS6_13CoreIPCLocaleENS6_15CoreIPCNSShadowENS6_14CoreIPCNSValueENS6_13CoreIPCNumberENS6_11CoreIPCNullENS6_19CoreIPCSecureCodingENS6_13CoreIPCStringENS6_10CoreIPCURLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix_0[v7])(&v5, v6);
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 8) = 0;
  }
}

void sub_19787F464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, char a17)
{
  if (a17)
  {
    if (a15 != -1)
      ((void (*)(uint64_t *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS6_13CoreIPCCFTypeENS6_12CoreIPCColorENS6_11CoreIPCDataENS6_11CoreIPCDateENS6_17CoreIPCDictionaryENS6_12CoreIPCErrorENS6_11CoreIPCFontENS6_13CoreIPCLocaleENS6_15CoreIPCNSShadowENS6_14CoreIPCNSValueENS6_13CoreIPCNumberENS6_11CoreIPCNullENS6_19CoreIPCSecureCodingENS6_13CoreIPCStringENS6_10CoreIPCURLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix_0[a15])(&a9, &a10);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>,void>::decode<IPC::Decoder>(a1, a2, a3, a4);
  if (!*(_BYTE *)(a3 + 48))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v8 = a1[3];
    if (v8)
      v9 = v7 == 0;
    else
      v9 = 1;
    if (!v9)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v6);
  }
}

void sub_19787F4F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  if (*(_BYTE *)(v13 + 48))
  {
    v15 = *(unsigned int *)(v13 + 40);
    if ((_DWORD)v15 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS6_13CoreIPCCFTypeENS6_12CoreIPCColorENS6_11CoreIPCDataENS6_11CoreIPCDateENS6_17CoreIPCDictionaryENS6_12CoreIPCErrorENS6_11CoreIPCFontENS6_13CoreIPCLocaleENS6_15CoreIPCNSShadowENS6_14CoreIPCNSValueENS6_13CoreIPCNumberENS6_11CoreIPCNullENS6_19CoreIPCSecureCodingENS6_13CoreIPCStringENS6_10CoreIPCURLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix_0[v15])(&a13, v13);
    *(_DWORD *)(v13 + 40) = -1;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_19787F570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 24);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_1E35085B0[v15])(&a13, v13);
  *(_DWORD *)(v13 + 24) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 24);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E35085B0[v4])(&v7, result);
  *(_DWORD *)(v3 + 24) = -1;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E35085C0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_7variantIJ8_NSRangeEEEN6WebKit19CoreIPCSecureCodingEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSA_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_7variantIJ8_NSRangeEEEN6WebKit19CoreIPCSecureCodingEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSA_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 40) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_19787F68C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 40);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS6_13CoreIPCCFTypeENS6_12CoreIPCColorENS6_11CoreIPCDataENS6_11CoreIPCDateENS6_17CoreIPCDictionaryENS6_12CoreIPCErrorENS6_11CoreIPCFontENS6_13CoreIPCLocaleENS6_15CoreIPCNSShadowENS6_14CoreIPCNSValueENS6_13CoreIPCNumberENS6_11CoreIPCNullENS6_19CoreIPCSecureCodingENS6_13CoreIPCStringENS6_10CoreIPCURLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix_0[v15])(&a13, v13);
  *(_DWORD *)(v13 + 40) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 40);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS6_13CoreIPCCFTypeENS6_12CoreIPCColorENS6_11CoreIPCDataENS6_11CoreIPCDateENS6_17CoreIPCDictionaryENS6_12CoreIPCErrorENS6_11CoreIPCFontENS6_13CoreIPCLocaleENS6_15CoreIPCNSShadowENS6_14CoreIPCNSValueENS6_13CoreIPCNumberENS6_11CoreIPCNullENS6_19CoreIPCSecureCodingENS6_13CoreIPCStringENS6_10CoreIPCURLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix_0[v4])(&v7, result);
  *(_DWORD *)(v3 + 40) = -1;
  v5 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS6_13CoreIPCCFTypeENS6_12CoreIPCColorENS6_11CoreIPCDataENS6_11CoreIPCDateENS6_17CoreIPCDictionaryENS6_12CoreIPCErrorENS6_11CoreIPCFontENS6_13CoreIPCLocaleENS6_15CoreIPCNSShadowENS6_14CoreIPCNSValueENS6_13CoreIPCNumberENS6_11CoreIPCNullENS6_19CoreIPCSecureCodingENS6_13CoreIPCStringENS6_10CoreIPCURLEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JST_SS_EEEDcmSV_DpOT0____fdiagonal[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 40) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEOS14_EEEDcSW_DpT0_()
{
  return WebCore::Color::Color();
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a3;
  v4 = a3[1];
  *a3 = 0;
  *a2 = v3;
  a2[1] = v4;
  v5 = a3[2];
  a3[2] = 0;
  a2[2] = v5;
  v6 = a3[3];
  a3[3] = 0;
  a2[3] = v6;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;
  unint64_t v4;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  v4 = a3[1].n128_u64[1];
  a3[1].n128_u64[1] = 0;
  a2[1].n128_u64[1] = v4;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11ELm11EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding>,(std::__variant_detail::_Trait)1>::__move_constructor(a2 + 8, a3 + 8);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12ELm12EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm14ELm14EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm15ELm15EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm16ELm16EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return WTF::URL::URL(a2, a3);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNSCFObject::toID(void)::$_0,WebKit::CoreIPCNSCFObject::toID(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> const&>(const void ****a1, WebKit::CoreIPCNSCFObject **this)
{
  const void ***v2;
  const void **v3;
  CFTypeRef v4;
  const void *v5;
  CFTypeRef v6;
  CFTypeRef cf;

  v2 = *a1;
  WebKit::CoreIPCArray::toID(this, &cf);
  v3 = *v2;
  v4 = cf;
  cf = 0;
  v5 = *v3;
  *v3 = v4;
  if (v5)
    CFRelease(v5);
  v6 = cf;
  cf = 0;
  if (v6)
    CFRelease(v6);
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNSCFObject::toID(void)::$_0,WebKit::CoreIPCNSCFObject::toID(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> const&>(const void ****a1, WebKit::CoreIPCCFType *this)
{
  const void ***v2;
  const void *v3;
  CFTypeRef v4;

  v2 = *a1;
  WebKit::CoreIPCCFType::toID(this, &v4);
  v3 = **v2;
  **v2 = v4;
  if (v3)
    CFRelease(v3);
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNSCFObject::toID(void)::$_0,WebKit::CoreIPCNSCFObject::toID(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> const&>(const void ****a1, WebCore *this)
{
  const void ***v2;
  const void *v3;
  const void *v4;

  v2 = *a1;
  WebCore::cocoaColor(this, (const Color *)this);
  v3 = **v2;
  **v2 = v4;
  if (v3)
    CFRelease(v3);
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNSCFObject::toID(void)::$_0,WebKit::CoreIPCNSCFObject::toID(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> const&>(const void ****a1, CFTypeRef *a2)
{
  const void ***v2;
  CFTypeRef v3;
  const void *v4;

  v2 = *a1;
  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  v4 = **v2;
  **v2 = v3;
  if (v4)
    CFRelease(v4);
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNSCFObject::toID(void)::$_0,WebKit::CoreIPCNSCFObject::toID(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> const&>(const void ****a1, CFAbsoluteTime *this)
{
  const void ***v2;
  const void **v3;
  CFTypeRef v4;
  const void *v5;
  CFTypeRef v6;
  CFTypeRef cf;

  v2 = *a1;
  WebKit::CoreIPCDate::toID(this, (CFDateRef *)&cf);
  v3 = *v2;
  v4 = cf;
  cf = 0;
  v5 = *v3;
  *v3 = v4;
  if (v5)
    CFRelease(v5);
  v6 = cf;
  cf = 0;
  if (v6)
    CFRelease(v6);
}

void std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNSCFObject::toID(void)::$_0,WebKit::CoreIPCNSCFObject::toID(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> const&>(const void ****a1, WebKit::CoreIPCDictionary *this)
{
  const void ***v2;
  const void **v3;
  CFTypeRef v4;
  const void *v5;
  CFTypeRef v6;
  CFTypeRef cf;

  v2 = *a1;
  WebKit::CoreIPCDictionary::toID(this, &cf);
  v3 = *v2;
  v4 = cf;
  cf = 0;
  v5 = *v3;
  *v3 = v4;
  if (v5)
    CFRelease(v5);
  v6 = cf;
  cf = 0;
  if (v6)
    CFRelease(v6);
}

void std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNSCFObject::toID(void)::$_0,WebKit::CoreIPCNSCFObject::toID(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> const&>(const void ****a1, WebKit::CoreIPCError *this)
{
  const void ***v2;
  const void **v3;
  CFTypeRef v4;
  const void *v5;
  CFTypeRef v6;
  CFTypeRef cf;

  v2 = *a1;
  WebKit::CoreIPCError::toID(this, &cf);
  v3 = *v2;
  v4 = cf;
  cf = 0;
  v5 = *v3;
  *v3 = v4;
  if (v5)
    CFRelease(v5);
  v6 = cf;
  cf = 0;
  if (v6)
    CFRelease(v6);
}

void std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNSCFObject::toID(void)::$_0,WebKit::CoreIPCNSCFObject::toID(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> const&>(const void ****a1, WebKit::CoreIPCFont *this)
{
  const void ***v2;
  const void *v3;
  const void *v4;

  v2 = *a1;
  WebKit::CoreIPCFont::toID(this, &v4);
  v3 = **v2;
  **v2 = v4;
  if (v3)
    CFRelease(v3);
}

void std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNSCFObject::toID(void)::$_0,WebKit::CoreIPCNSCFObject::toID(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> const&>(const void ****a1, WebKit::CoreIPCLocale *this)
{
  const void ***v2;
  const void **v3;
  CFTypeRef v4;
  const void *v5;
  CFTypeRef v6;
  CFTypeRef cf;

  v2 = *a1;
  WebKit::CoreIPCLocale::toID(this, &cf);
  v3 = *v2;
  v4 = cf;
  cf = 0;
  v5 = *v3;
  *v3 = v4;
  if (v5)
    CFRelease(v5);
  v6 = cf;
  cf = 0;
  if (v6)
    CFRelease(v6);
}

void std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNSCFObject::toID(void)::$_0,WebKit::CoreIPCNSCFObject::toID(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> const&>(const void ****a1, WebKit::CoreIPCNSShadow *this)
{
  const void ***v2;
  const void *v3;
  const void *v4;

  v2 = *a1;
  WebKit::CoreIPCNSShadow::toID(this, &v4);
  v3 = **v2;
  **v2 = v4;
  if (v3)
    CFRelease(v3);
}

void std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNSCFObject::toID(void)::$_0,WebKit::CoreIPCNSCFObject::toID(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> const&>(const void ****a1, WebKit::CoreIPCNSValue *this)
{
  const void ***v2;
  const void **v3;
  CFTypeRef v4;
  const void *v5;
  CFTypeRef v6;
  CFTypeRef cf;

  v2 = *a1;
  WebKit::CoreIPCNSValue::toID(this, &cf);
  v3 = *v2;
  v4 = cf;
  cf = 0;
  v5 = *v3;
  *v3 = v4;
  if (v5)
    CFRelease(v5);
  v6 = cf;
  cf = 0;
  if (v6)
    CFRelease(v6);
}

void std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNSCFObject::toID(void)::$_0,WebKit::CoreIPCNSCFObject::toID(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> const&>(const void ****a1, WebKit::CoreIPCNumber *this)
{
  const void ***v2;
  const void **v3;
  CFTypeRef v4;
  const void *v5;
  CFTypeRef v6;
  CFTypeRef cf;

  v2 = *a1;
  WebKit::CoreIPCNumber::toID(this, &cf);
  v3 = *v2;
  v4 = cf;
  cf = 0;
  v5 = *v3;
  *v3 = v4;
  if (v5)
    CFRelease(v5);
  v6 = cf;
  cf = 0;
  if (v6)
    CFRelease(v6);
}

void std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNSCFObject::toID(void)::$_0,WebKit::CoreIPCNSCFObject::toID(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> const&>(const void ****a1, WebKit::CoreIPCNull *this)
{
  const void ***v2;
  const void **v3;
  CFTypeRef v4;
  const void *v5;
  CFTypeRef v6;
  CFTypeRef cf;

  v2 = *a1;
  WebKit::CoreIPCNull::toID(&cf);
  v3 = *v2;
  v4 = cf;
  cf = 0;
  v5 = *v3;
  *v3 = v4;
  if (v5)
    CFRelease(v5);
  v6 = cf;
  cf = 0;
  if (v6)
    CFRelease(v6);
}

void std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNSCFObject::toID(void)::$_0,WebKit::CoreIPCNSCFObject::toID(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> const&>(const void ****a1, CFTypeRef *a2)
{
  const void ***v2;
  CFTypeRef v3;
  const void *v4;

  v2 = *a1;
  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  v4 = **v2;
  **v2 = v3;
  if (v4)
    CFRelease(v4);
}

void std::__variant_detail::__visitation::__base::__dispatcher<15ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNSCFObject::toID(void)::$_0,WebKit::CoreIPCNSCFObject::toID(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> const&>(const void ****a1, WebKit::CoreIPCString *this)
{
  const void ***v2;
  const void **v3;
  CFTypeRef v4;
  const void *v5;
  CFTypeRef v6;
  CFTypeRef cf;

  v2 = *a1;
  WebKit::CoreIPCString::toID(this, (const __CFString **)&cf);
  v3 = *v2;
  v4 = cf;
  cf = 0;
  v5 = *v3;
  *v3 = v4;
  if (v5)
    CFRelease(v5);
  v6 = cf;
  cf = 0;
  if (v6)
    CFRelease(v6);
}

void std::__variant_detail::__visitation::__base::__dispatcher<16ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNSCFObject::toID(void)::$_0,WebKit::CoreIPCNSCFObject::toID(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> const&>(const void ****a1)
{
  const void ***v1;
  const void *v2;
  const void *v3;
  const void *v4;

  v1 = *a1;
  v2 = (const void *)WTF::URL::operator NSURL *();
  v3 = v2;
  if (v2)
    CFRetain(v2);
  v4 = **v1;
  **v1 = v3;
  if (v4)
    CFRelease(v4);
}

void WebKit::CoreIPCDate::toID(CFAbsoluteTime *this@<X0>, CFDateRef *a2@<X8>)
{
  CFDateRef v3;
  CFDateRef v4;

  v3 = CFDateCreate(0, *this);
  *a2 = v3;
  if (v3)
  {
    v4 = v3;
    CFRetain(v3);
    CFRelease(v4);
  }
}

void sub_19787FE5C(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::CoreIPCNumber::toID(WebKit::CoreIPCNumber *this@<X0>, _QWORD *a2@<X8>)
{
  CFTypeRef cf;

  WebKit::CoreIPCNumber::createCFNumber(this);
  *a2 = cf;
  if (cf)
  {
    CFRetain(cf);
    CFRelease(cf);
  }
}

void sub_19787FEC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNSCFObject::valueIsAllowed(IPC::Decoder &,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &)::$_0,WebKit::CoreIPCNSCFObject::valueIsAllowed(IPC::Decoder &,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &>(uint64_t result)
{
  **(_QWORD **)(*(_QWORD *)result + 8) = 0;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNSCFObject::valueIsAllowed(IPC::Decoder &,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &)::$_0,WebKit::CoreIPCNSCFObject::valueIsAllowed(IPC::Decoder &,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &>(uint64_t result)
{
  **(_QWORD **)(*(_QWORD *)result + 8) = 0;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNSCFObject::valueIsAllowed(IPC::Decoder &,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &)::$_0,WebKit::CoreIPCNSCFObject::valueIsAllowed(IPC::Decoder &,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &>(uint64_t result)
{
  **(_QWORD **)(*(_QWORD *)result + 8) = 0;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNSCFObject::valueIsAllowed(IPC::Decoder &,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &)::$_0,WebKit::CoreIPCNSCFObject::valueIsAllowed(IPC::Decoder &,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &>(uint64_t result)
{
  **(_QWORD **)(*(_QWORD *)result + 8) = 0;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNSCFObject::valueIsAllowed(IPC::Decoder &,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &)::$_0,WebKit::CoreIPCNSCFObject::valueIsAllowed(IPC::Decoder &,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &>(uint64_t result)
{
  **(_QWORD **)(*(_QWORD *)result + 8) = 0;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNSCFObject::valueIsAllowed(IPC::Decoder &,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &)::$_0,WebKit::CoreIPCNSCFObject::valueIsAllowed(IPC::Decoder &,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &>(uint64_t result)
{
  **(_QWORD **)(*(_QWORD *)result + 8) = 0;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNSCFObject::valueIsAllowed(IPC::Decoder &,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &)::$_0,WebKit::CoreIPCNSCFObject::valueIsAllowed(IPC::Decoder &,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &>(uint64_t result)
{
  **(_QWORD **)(*(_QWORD *)result + 8) = 0;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNSCFObject::valueIsAllowed(IPC::Decoder &,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &)::$_0,WebKit::CoreIPCNSCFObject::valueIsAllowed(IPC::Decoder &,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &>(uint64_t result)
{
  **(_QWORD **)(*(_QWORD *)result + 8) = 0;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNSCFObject::valueIsAllowed(IPC::Decoder &,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &)::$_0,WebKit::CoreIPCNSCFObject::valueIsAllowed(IPC::Decoder &,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &>(uint64_t result)
{
  **(_QWORD **)(*(_QWORD *)result + 8) = 0;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNSCFObject::valueIsAllowed(IPC::Decoder &,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &)::$_0,WebKit::CoreIPCNSCFObject::valueIsAllowed(IPC::Decoder &,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &>(uint64_t result)
{
  **(_QWORD **)(*(_QWORD *)result + 8) = 0;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNSCFObject::valueIsAllowed(IPC::Decoder &,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &)::$_0,WebKit::CoreIPCNSCFObject::valueIsAllowed(IPC::Decoder &,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &>(uint64_t result)
{
  **(_QWORD **)(*(_QWORD *)result + 8) = 0;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNSCFObject::valueIsAllowed(IPC::Decoder &,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &)::$_0,WebKit::CoreIPCNSCFObject::valueIsAllowed(IPC::Decoder &,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &>(uint64_t result)
{
  **(_QWORD **)(*(_QWORD *)result + 8) = 0;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNSCFObject::valueIsAllowed(IPC::Decoder &,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &)::$_0,WebKit::CoreIPCNSCFObject::valueIsAllowed(IPC::Decoder &,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &>(uint64_t result)
{
  **(_QWORD **)(*(_QWORD *)result + 8) = 0;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNSCFObject::valueIsAllowed(IPC::Decoder &,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &)::$_0,WebKit::CoreIPCNSCFObject::valueIsAllowed(IPC::Decoder &,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &>(uint64_t result)
{
  **(_QWORD **)(*(_QWORD *)result + 8) = 0;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNSCFObject::valueIsAllowed(IPC::Decoder &,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &)::$_0,WebKit::CoreIPCNSCFObject::valueIsAllowed(IPC::Decoder &,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &>(uint64_t ***a1)
{
  uint64_t **v1;
  uint64_t result;

  v1 = *a1;
  result = objc_opt_class();
  **v1 = result;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<15ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNSCFObject::valueIsAllowed(IPC::Decoder &,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &)::$_0,WebKit::CoreIPCNSCFObject::valueIsAllowed(IPC::Decoder &,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &>(uint64_t result)
{
  **(_QWORD **)(*(_QWORD *)result + 8) = 0;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<16ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNSCFObject::valueIsAllowed(IPC::Decoder &,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &)::$_0,WebKit::CoreIPCNSCFObject::valueIsAllowed(IPC::Decoder &,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> &>(uint64_t result)
{
  **(_QWORD **)(*(_QWORD *)result + 8) = 0;
  return result;
}

void IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> const&>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
    goto LABEL_2;
  if (*(_DWORD *)(a2 + 40))
  {
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_2:
    IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> const&,0ul>(a1, a2, a3);
  }
}

void IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> const&,0ul>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  if (a3 == 1)
  {
    if (*(_DWORD *)(a2 + 40) == 1)
    {
      IPC::VectorArgumentCoder<false,WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1);
      return;
    }
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
  }
  IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> const&,0ul,1ul>(a1, a2, a3);
}

void IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> const&,0ul,1ul>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  if (a3 == 2)
  {
    if (*(_DWORD *)(a2 + 40) == 2)
    {
      IPC::ArgumentCoder<WTF::UniqueRef<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
      return;
    }
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
  }
  IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> const&,0ul,1ul,2ul>(a1, (WebCore::Color *)a2, a3);
}

void IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> const&,0ul,1ul,2ul>(IPC::Encoder *a1, WebCore::Color *this, uint64_t a3)
{
  IPC::Encoder *v3;
  uint64_t v4;

  v3 = a1;
  if (a3 == 3)
  {
    if (*((_DWORD *)this + 10) == 3)
    {
      WebCore::Color::data(this);
      IPC::ArgumentCoder<std::optional<WebCore::ColorDataForIPC>,void>::encode<IPC::Encoder,std::optional<WebCore::ColorDataForIPC>>(v3, (uint64_t)&v4);
      return;
    }
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
  }
  IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> const&,0ul,1ul,2ul,3ul>(a1, (uint64_t)this, a3);
}

void IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> const&,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  if (a3 == 4)
  {
    if (*(_DWORD *)(a2 + 40) == 4)
    {
      IPC::ArgumentCoder<WebKit::CoreIPCData,void>::encode((uint64_t)a1, (CFDataRef *)a2);
      return;
    }
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
  }
  IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> const&,0ul,1ul,2ul,3ul,4ul>(a1, a2, a3);
}

void IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> const&,0ul,1ul,2ul,3ul,4ul>(IPC::Encoder *this, uint64_t a2, uint64_t a3)
{
  int v5;

  switch(a3)
  {
    case 5:
      if (*(_DWORD *)(a2 + 40) != 5)
        goto LABEL_23;
      IPC::ArgumentCoder<WTF::Seconds,void>::encode(this, (uint64_t *)a2);
      return;
    case 6:
      if (*(_DWORD *)(a2 + 40) == 6)
        goto LABEL_9;
      goto LABEL_23;
    case 7:
      if (*(_DWORD *)(a2 + 40) != 7)
        goto LABEL_23;
      IPC::ArgumentCoder<WebKit::CoreIPCError,void>::encode(this, a2);
      break;
    case 8:
      if (*(_DWORD *)(a2 + 40) != 8)
        goto LABEL_23;
LABEL_9:
      IPC::VectorArgumentCoder<false,WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(this, a2);
      break;
    case 9:
      if (*(_DWORD *)(a2 + 40) != 9)
        goto LABEL_23;
      IPC::ArgumentCoder<WebKit::CoreIPCLocale,void>::encode((uint64_t)this, (WTF::StringImpl **)a2);
      break;
    case 10:
      if (*(_DWORD *)(a2 + 40) != 10)
        goto LABEL_23;
      IPC::ArgumentCoder<WebKit::CoreIPCNSShadow,void>::encode(this, (uint64_t *)a2);
      break;
    case 11:
      if (*(_DWORD *)(a2 + 40) != 11)
        goto LABEL_23;
      v5 = *(_DWORD *)(a2 + 32);
      *IPC::Encoder::grow(this, 1uLL, 1) = v5;
      IPC::ArgumentCoder<std::variant<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding>,void>::encode<IPC::Encoder,std::variant<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding> const&>((uint64_t)this, a2, v5);
      break;
    case 12:
      if (*(_DWORD *)(a2 + 40) != 12)
        goto LABEL_23;
      IPC::ArgumentCoder<WebKit::CoreIPCNumber,void>::encode(this, (_QWORD *)a2);
      break;
    case 13:
      if (*(_DWORD *)(a2 + 40) == 13)
        return;
      goto LABEL_23;
    case 14:
      if (*(_DWORD *)(a2 + 40) != 14)
        goto LABEL_23;
      IPC::encodeObjectDirectly<NSObject  {objcproto14NSSecureCoding}>((uint64_t)this, *(_QWORD *)a2);
      break;
    case 15:
      if (*(_DWORD *)(a2 + 40) != 15)
        goto LABEL_23;
      goto LABEL_25;
    case 16:
      while (*(_DWORD *)(a2 + 40) != 16)
LABEL_23:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_25:
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)this, (uint64_t *)a2);
      break;
    default:
      return;
  }
}

void IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unsigned int v9;
  void *v10;
  WTF::StringImpl *v11;
  char v12;
  int v13;
  void *v14;
  char v15;
  uint64_t v16;
  char v17;
  void *v18;
  WTF::StringImpl *v19;
  int v20;
  char v21;
  WTF::StringImpl *v22;
  __int128 v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t *v32;
  char v33;
  WTF::StringImpl *v34[2];
  __int128 v35;
  int v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v5 = a1[1];
  v6 = *a1;
  v7 = a1[2] - *a1;
  if (v5 <= v7)
  {
    v26 = 0;
    v27 = 0;
    *a1 = 0;
    a1[1] = 0;
    v28 = a1[3];
    if (v28)
    {
      v32 = a1;
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v28 + 16))(a1[3], v6, v5);
        a1 = v32;
        v27 = *v32;
        v26 = v32[1];
      }
      else
      {
        v26 = 0;
        v27 = 0;
      }
    }
    goto LABEL_47;
  }
  v8 = (_BYTE *)(v6 + v7);
  a1[2] = (uint64_t)(v8 + 1);
  if (!v6)
  {
    v26 = v5;
    v27 = 0;
LABEL_47:
    *a1 = 0;
    a1[1] = 0;
    v29 = a1[3];
    if (v29 && v26)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, v27);
    goto LABEL_4;
  }
  v9 = *v8;
  if (v9 >= 0x11)
  {
LABEL_4:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 48) = 0;
    return;
  }
  if (!*v8)
  {
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 40) = 0;
LABEL_14:
    v12 = 1;
LABEL_15:
    *(_BYTE *)(a3 + 48) = v12;
    return;
  }
  if (v9 != 1)
  {
    switch(v9)
    {
      case 2u:
        IPC::Decoder::decode<WebKit::CoreIPCCFType>(a1, a2, (uint64_t)v34);
        v12 = (char)v34[1];
        if (LOBYTE(v34[1]))
        {
          *(WTF::StringImpl **)a3 = v34[0];
          v13 = 2;
LABEL_13:
          *(_DWORD *)(a3 + 40) = v13;
          goto LABEL_14;
        }
        break;
      case 3u:
        IPC::Decoder::decode<WebKit::CoreIPCColor>(a1, v34);
        v15 = (char)v34[1];
        if (LOBYTE(v34[1]))
        {
          WebCore::Color::Color();
          *(_DWORD *)(a3 + 40) = 3;
          v15 = 1;
        }
        else
        {
          *(_BYTE *)a3 = 0;
        }
        *(_BYTE *)(a3 + 48) = v15;
        std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v34, v14);
        return;
      case 4u:
        IPC::Decoder::decode<WebKit::CoreIPCCFCharacterSet>(a1, v34);
        v12 = (char)v34[1];
        if (LOBYTE(v34[1]))
        {
          *(WTF::StringImpl **)a3 = v34[0];
          v13 = 4;
          goto LABEL_13;
        }
        break;
      default:
        switch(v9)
        {
          case 5u:
            v16 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
            if (!v17)
              goto LABEL_4;
            *(_QWORD *)a3 = v16;
            v13 = 5;
            goto LABEL_13;
          case 6u:
            IPC::Decoder::decode<WebKit::CoreIPCDictionary>(v34);
            v12 = v35;
            if (!(_BYTE)v35)
              goto LABEL_67;
            *(WTF::StringImpl **)a3 = v34[0];
            v19 = v34[1];
            v34[0] = 0;
            v34[1] = 0;
            *(_QWORD *)(a3 + 8) = v19;
            v20 = 6;
            break;
          case 7u:
            IPC::Decoder::decode<WebKit::CoreIPCError>(a1, (uint64_t)v34);
            v21 = v36;
            if ((_BYTE)v36)
            {
              v22 = v34[1];
              *(WTF::StringImpl **)a3 = v34[0];
              *(_QWORD *)(a3 + 8) = v22;
              v23 = v35;
              v34[0] = 0;
              v35 = 0uLL;
              *(_OWORD *)(a3 + 16) = v23;
              *(_DWORD *)(a3 + 40) = 7;
              v21 = 1;
            }
            else
            {
              *(_BYTE *)a3 = 0;
            }
            *(_BYTE *)(a3 + 48) = v21;
            std::__optional_destruct_base<WebKit::CoreIPCError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v34);
            return;
          case 8u:
            IPC::Decoder::decode<WebKit::CoreIPCFont>(a1, (uint64_t)v34);
            v12 = v35;
            if (!(_BYTE)v35)
              goto LABEL_67;
            *(WTF::StringImpl **)a3 = v34[0];
            v24 = v34[1];
            v34[0] = 0;
            v34[1] = 0;
            *(_QWORD *)(a3 + 8) = v24;
            v20 = 8;
            break;
          default:
            switch(v9)
            {
              case 9u:
                IPC::Decoder::decode<WebKit::CoreIPCLocale>(a1, v34);
                v12 = (char)v34[1];
                if (LOBYTE(v34[1]))
                {
                  *(WTF::StringImpl **)a3 = v34[0];
                  v13 = 9;
                  goto LABEL_13;
                }
                break;
              case 0xAu:
                IPC::Decoder::decode<WebKit::CoreIPCNSShadow>(a1, (uint64_t)v34, a4);
                v12 = v36;
                if ((_BYTE)v36)
                {
                  *(_OWORD *)a3 = *(_OWORD *)v34;
                  v25 = *((_QWORD *)&v35 + 1);
                  *(_QWORD *)(a3 + 16) = v35;
                  *(_QWORD *)(a3 + 24) = v25;
                  v13 = 10;
                  goto LABEL_13;
                }
                break;
              case 0xBu:
                IPC::Decoder::decode<WebKit::CoreIPCNSValue>(a1, v34);
                if (!v37)
                  goto LABEL_4;
                std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding>,(std::__variant_detail::_Trait)1>::__move_constructor(a3 + 8, (uint64_t)&v34[1]);
                *(_DWORD *)(a3 + 40) = 11;
                *(_BYTE *)(a3 + 48) = 1;
                if (v37 && v36 != -1)
                  ((void (*)(char *, WTF::StringImpl **))off_1E35085B0[v36])(&v33, &v34[1]);
                return;
              case 0xCu:
                IPC::Decoder::decode<WebKit::CoreIPCNumber>(a1, v34);
                v12 = v35;
                if ((_BYTE)v35)
                {
                  *(_OWORD *)a3 = *(_OWORD *)v34;
                  v13 = 12;
                  goto LABEL_13;
                }
                break;
              case 0xDu:
                if ((unsigned __int16)IPC::Decoder::decode<WebKit::CoreIPCNull>(a1) <= 0xFFu)
                  goto LABEL_4;
                v13 = 13;
                goto LABEL_13;
              case 0xEu:
                IPC::Decoder::decode<WebKit::CoreIPCSecureCoding>(a1, (uint64_t)v34);
                v12 = (char)v34[1];
                if (LOBYTE(v34[1]))
                {
                  *(WTF::StringImpl **)a3 = v34[0];
                  v13 = 14;
                  goto LABEL_13;
                }
                break;
              case 0xFu:
                IPC::Decoder::decode<WebKit::CoreIPCString>(a1, (uint64_t)v34);
                v12 = (char)v34[1];
                if (LOBYTE(v34[1]))
                {
                  *(WTF::StringImpl **)a3 = v34[0];
                  v13 = 15;
                  goto LABEL_13;
                }
                break;
              default:
                IPC::Decoder::decode<WebKit::CoreIPCURL>(a1, v34);
                if (!v37)
                  goto LABEL_4;
                WTF::URL::URL(a3, (uint64_t *)v34);
                *(_DWORD *)(a3 + 40) = 16;
                *(_BYTE *)(a3 + 48) = 1;
                if (v37)
                {
                  v31 = v34[0];
                  v34[0] = 0;
                  if (v31)
                  {
                    if (*(_DWORD *)v31 == 2)
                      WTF::StringImpl::destroy(v31, v30);
                    else
                      *(_DWORD *)v31 -= 2;
                  }
                }
                return;
            }
            goto LABEL_67;
        }
        *(_DWORD *)(a3 + 40) = v20;
        WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v34, v18);
        goto LABEL_14;
    }
LABEL_67:
    *(_BYTE *)a3 = 0;
    goto LABEL_15;
  }
  IPC::Decoder::decode<WebKit::CoreIPCArray>(a1, a2, (uint64_t)v34);
  if (!(_BYTE)v35)
    goto LABEL_4;
  *(WTF::StringImpl **)a3 = v34[0];
  v11 = v34[1];
  v34[0] = 0;
  v34[1] = 0;
  *(_QWORD *)(a3 + 8) = v11;
  *(_DWORD *)(a3 + 40) = 1;
  *(_BYTE *)(a3 + 48) = 1;
  WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v34, v10);
}

void sub_1978807AC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, char a19)
{
  if (a19 && a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebKit::CoreIPCArray>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::ArgumentCoder<WebKit::CoreIPCArray,void>::decode(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

void sub_197880884(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 16))
    WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WebKit::CoreIPCCFType>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  IPC::ArgumentCoder<WebKit::CoreIPCCFType,void>::decode(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 8))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7)
      v8 = v6 == 0;
    else
      v8 = 1;
    if (!v8)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v5);
  }
}

void sub_1978808F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  if (*(_BYTE *)(v1 + 8))
  {
    v3 = *(_QWORD *)v1;
    *(_QWORD *)v1 = 0;
    if (v3)
      std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100](v1, v3);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *IPC::Decoder::decode<WebKit::CoreIPCColor>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned int *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::CoreIPCColor,void>::decode(a1, a2);
  if (!a2[8])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (unsigned int *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_197880970(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WebKit::CoreIPCDictionary>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  result = IPC::ArgumentCoder<WebKit::CoreIPCDictionary,void>::decode(a1, a2, a3, a4);
  if (!*(_BYTE *)(a3 + 16))
  {
    v7 = *a1;
    v8 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v9 = v8 == 0;
    else
      v9 = 1;
    if (!v9)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v7);
  }
  return result;
}

void sub_1978809D8(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 16))
    WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WebKit::CoreIPCError>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebKit::CoreIPCError,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 32))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_197880A48(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<WebKit::CoreIPCError,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<WebKit::CoreIPCError,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  WTF::StringImpl *v2;
  const void *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 32))
  {
    std::unique_ptr<WebKit::CoreIPCError>::reset[abi:sn180100]((WTF::StringImpl ***)(a1 + 24), 0);
    v3 = *(const void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v3)
      CFRelease(v3);
    v4 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

_QWORD *IPC::Decoder::decode<WebKit::CoreIPCFont>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::CoreIPCFont,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

void sub_197880B18(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 16))
    WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebKit::CoreIPCLocale>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::CoreIPCLocale,void>::decode(a1, a2);
  if (!a2[8])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_197880B88(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WebKit::CoreIPCNSShadow>(uint64_t *a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  IPC::ArgumentCoder<WebKit::CoreIPCNSShadow,void>::decode(a1, a2, a3);
  if (!*(_BYTE *)(a2 + 32))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7)
      v8 = v6 == 0;
    else
      v8 = 1;
    if (!v8)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v5);
  }
}

void sub_197880BF0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  if (*(_BYTE *)(v1 + 32))
  {
    v3 = *(const void **)(v1 + 24);
    *(_QWORD *)(v1 + 24) = 0;
    if (v3)
      CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WebKit::CoreIPCNSValue>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebKit::CoreIPCNSValue,void>::decode(a1, a2);
  if (!a2[40])
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_197880C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  if (*(_BYTE *)(v13 + 40))
  {
    v15 = *(unsigned int *)(v13 + 32);
    if ((_DWORD)v15 != -1)
      ((void (*)(char *, uint64_t))off_1E35085B0[v15])(&a13, v13 + 8);
    *(_DWORD *)(v13 + 32) = -1;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::CoreIPCURL>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::CoreIPCURL,void>::decode(a1, a2);
  if (!a2[40])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_197880D04(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

WebKit::CoreIPCNSShadow *WebKit::CoreIPCNSShadow::CoreIPCNSShadow(WebKit::CoreIPCNSShadow *this, NSShadow *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  -[NSShadow shadowOffset](a2, "shadowOffset");
  *(_QWORD *)this = v4;
  *((_QWORD *)this + 1) = v5;
  -[NSShadow shadowBlurRadius](a2, "shadowBlurRadius");
  *((_QWORD *)this + 2) = v6;
  v7 = -[NSShadow shadowColor](a2, "shadowColor");
  *((_QWORD *)this + 3) = v7;
  if (v7)
    CFRetain(v7);
  return this;
}

uint64_t WebKit::CoreIPCNSShadow::toID@<X0>(WebKit::CoreIPCNSShadow *this@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  uint64_t result;

  ((void (*)(void))*MEMORY[0x1E0DCDF18])();
  v4 = (void *)objc_opt_new();
  objc_msgSend(v4, "setShadowOffset:", *(double *)this, *((double *)this + 1));
  objc_msgSend(v4, "setShadowBlurRadius:", *((double *)this + 2));
  result = objc_msgSend(v4, "setShadowColor:", *((_QWORD *)this + 3));
  *a2 = v4;
  return result;
}

void sub_197880DCC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::CoreIPCNSValue::valueFromNSValue@<X0>(WebKit::CoreIPCNSValue *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  if (!strcmp((const char *)-[WebKit::CoreIPCNSValue objCType](this, "objCType"), "{_NSRange=QQ}"))
  {
    if (!strcmp((const char *)-[WebKit::CoreIPCNSValue objCType](this, "objCType"), "{_NSRange=QQ}"))
    {
      result = -[WebKit::CoreIPCNSValue rangeValue](this, "rangeValue");
      *(_QWORD *)(a2 + 8) = result;
      *(_QWORD *)(a2 + 16) = v6;
      *(_DWORD *)(a2 + 24) = 0;
      *(_DWORD *)(a2 + 32) = 0;
    }
    else
    {
      result = 46;
      __break(0xC471u);
    }
  }
  else
  {
    result = (uint64_t)WebKit::CoreIPCSecureCoding::CoreIPCSecureCoding((WebKit::CoreIPCSecureCoding *)&v7, this);
    *(_QWORD *)(a2 + 8) = v7;
    *(_DWORD *)(a2 + 32) = 1;
  }
  return result;
}

uint64_t WebKit::CoreIPCNSValue::toID@<X0>(WebKit::CoreIPCNSValue *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;
  _QWORD v5[3];
  _QWORD *v6;

  *a2 = 0;
  v4 = 0;
  v5[0] = a2;
  v5[1] = &v4;
  v5[2] = a2;
  v2 = *((unsigned int *)this + 8);
  if ((_DWORD)v2 == -1)
  {
    result = std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
  }
  else
  {
    v6 = v5;
    return ((uint64_t (*)(_QWORD **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK6WebKit14CoreIPCNSValue4toIDEvE3__1JZNKS9_4toIDEvE3__2EEEEEJRKNS0_6__implIJNS_7variantIJ8_NSRangeEEENS8_19CoreIPCSecureCodingEEEEEEEDcOT_DpOT0____fmatrix[v2])(&v6, (char *)this + 8);
  }
  return result;
}

void sub_197880EF8(_Unwind_Exception *exception_object)
{
  const void **v1;
  const void *v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNSValue::toID(void)::$_1,WebKit::CoreIPCNSValue::toID(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::variant<_NSRange>,WebKit::CoreIPCSecureCoding> const&>(const void ****a1, uint64_t a2)
{
  const void ***v2;
  const void *v3;
  const void *v4;
  const void *v5;
  uint64_t v6;

  if (*(_DWORD *)(a2 + 16) == -1)
  {
    v6 = std::__throw_bad_variant_access[abi:sn180100]();
    std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNSValue::toID(void)::$_1,WebKit::CoreIPCNSValue::toID(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::variant<_NSRange>,WebKit::CoreIPCSecureCoding> const&>(v6);
  }
  else
  {
    v2 = *a1;
    v3 = (const void *)objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithRange:", *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    v4 = v3;
    if (v3)
      CFRetain(v3);
    v5 = **v2;
    **v2 = v4;
    if (v5)
      CFRelease(v5);
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::CoreIPCNSValue::toID(void)::$_1,WebKit::CoreIPCNSValue::toID(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::variant<_NSRange>,WebKit::CoreIPCSecureCoding> const&>(uint64_t *a1, CFTypeRef *a2)
{
  uint64_t v2;
  CFTypeRef v3;
  const void **v4;
  const void *v5;

  v2 = *a1;
  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  v4 = *(const void ***)(v2 + 16);
  v5 = *v4;
  *v4 = v3;
  if (v5)
    CFRelease(v5);
}

CFTypeRef WebKit::CoreIPCNull::toID@<X0>(_QWORD *a1@<X8>)
{
  CFTypeRef result;

  result = (CFTypeRef)objc_msgSend(MEMORY[0x1E0C99E38], "null");
  *a1 = result;
  if (result)
    return CFRetain(result);
  return result;
}

WebKit::CoreIPCPKContact *WebKit::CoreIPCPKContact::CoreIPCPKContact(WebKit::CoreIPCPKContact *this, PKContact *a2)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **v5;
  NSPersonNameComponents *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WebKit::CoreIPCPersonNameComponents *v18;
  CNPhoneNumber *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  CNPostalAddress *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WebKit::CoreIPCPersonNameComponents *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WebKit::CoreIPCPersonNameComponents *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  *(_BYTE *)this = 0;
  *((_BYTE *)this + 48) = 0;
  MEMORY[0x19AEABCC8]((char *)this + 56, -[PKContact emailAddress](a2, "emailAddress"));
  *((_BYTE *)this + 64) = 0;
  v4 = (WTF::StringImpl **)((char *)this + 64);
  *((_BYTE *)this + 80) = 0;
  *((_BYTE *)this + 88) = 0;
  v5 = (WTF::StringImpl **)((char *)this + 88);
  *((_BYTE *)this + 160) = 0;
  MEMORY[0x19AEABCC8]((char *)this + 168, -[PKContact supplementarySubLocality](a2, "supplementarySubLocality"));
  if (-[PKContact name](a2, "name"))
  {
    v6 = -[PKContact name](a2, "name");
    if (*((_BYTE *)this + 48))
    {
      WebKit::CoreIPCPersonNameComponents::CoreIPCPersonNameComponents((WebKit::CoreIPCPersonNameComponents *)&v48, v6);
      v8 = v48;
      v48 = 0;
      v9 = *(WTF::StringImpl **)this;
      *(_QWORD *)this = v8;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v7);
        else
          *(_DWORD *)v9 -= 2;
      }
      v10 = v49;
      v49 = 0;
      v11 = (WTF::StringImpl *)*((_QWORD *)this + 1);
      *((_QWORD *)this + 1) = v10;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v7);
        else
          *(_DWORD *)v11 -= 2;
      }
      v12 = v50;
      v50 = 0;
      v13 = (WTF::StringImpl *)*((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = v12;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v7);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = v51;
      v51 = 0;
      v15 = (WTF::StringImpl *)*((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v14;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v7);
        else
          *(_DWORD *)v15 -= 2;
      }
      v16 = v52;
      v52 = 0;
      v17 = (WTF::StringImpl *)*((_QWORD *)this + 4);
      *((_QWORD *)this + 4) = v16;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v7);
        else
          *(_DWORD *)v17 -= 2;
      }
      v18 = v53;
      v53 = 0;
      std::unique_ptr<WebKit::CoreIPCPersonNameComponents>::reset[abi:sn180100]((WebKit::CoreIPCPersonNameComponents **)this + 5, v18);
      WebKit::CoreIPCPersonNameComponents::~CoreIPCPersonNameComponents(&v48);
    }
    else
    {
      WebKit::CoreIPCPersonNameComponents::CoreIPCPersonNameComponents(this, v6);
      *((_BYTE *)this + 48) = 1;
    }
  }
  if (-[PKContact phoneNumber](a2, "phoneNumber"))
  {
    v19 = -[PKContact phoneNumber](a2, "phoneNumber");
    if (*((_BYTE *)this + 80))
    {
      WebKit::CoreIPCCNPhoneNumber::CoreIPCCNPhoneNumber((WebKit::CoreIPCCNPhoneNumber *)&v48, v19);
      v21 = v48;
      v48 = 0;
      v22 = *v4;
      *v4 = v21;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v20);
        else
          *(_DWORD *)v22 -= 2;
      }
      v23 = v49;
      v49 = 0;
      v24 = (WTF::StringImpl *)*((_QWORD *)this + 9);
      *((_QWORD *)this + 9) = v23;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
        {
          WTF::StringImpl::destroy(v24, v20);
          v25 = v49;
          v49 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v20);
            else
              *(_DWORD *)v25 -= 2;
          }
        }
        else
        {
          *(_DWORD *)v24 -= 2;
          v49 = 0;
        }
      }
      v26 = v48;
      v48 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v20);
        else
          *(_DWORD *)v26 -= 2;
      }
    }
    else
    {
      WebKit::CoreIPCCNPhoneNumber::CoreIPCCNPhoneNumber((WebKit::CoreIPCPKContact *)((char *)this + 64), v19);
      *((_BYTE *)this + 80) = 1;
    }
  }
  if (-[PKContact postalAddress](a2, "postalAddress"))
  {
    v27 = -[PKContact postalAddress](a2, "postalAddress");
    if (*((_BYTE *)this + 160))
    {
      WebKit::CoreIPCCNPostalAddress::CoreIPCCNPostalAddress((WebKit::CoreIPCCNPostalAddress *)&v48, v27);
      v29 = v48;
      v48 = 0;
      v30 = *v5;
      *v5 = v29;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v28);
        else
          *(_DWORD *)v30 -= 2;
      }
      v31 = v49;
      v49 = 0;
      v32 = (WTF::StringImpl *)*((_QWORD *)this + 12);
      *((_QWORD *)this + 12) = v31;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v28);
        else
          *(_DWORD *)v32 -= 2;
      }
      v33 = v50;
      v50 = 0;
      v34 = (WTF::StringImpl *)*((_QWORD *)this + 13);
      *((_QWORD *)this + 13) = v33;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, v28);
        else
          *(_DWORD *)v34 -= 2;
      }
      v35 = v51;
      v51 = 0;
      v36 = (WTF::StringImpl *)*((_QWORD *)this + 14);
      *((_QWORD *)this + 14) = v35;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
          WTF::StringImpl::destroy(v36, v28);
        else
          *(_DWORD *)v36 -= 2;
      }
      v37 = v52;
      v52 = 0;
      v38 = (WTF::StringImpl *)*((_QWORD *)this + 15);
      *((_QWORD *)this + 15) = v37;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, v28);
        else
          *(_DWORD *)v38 -= 2;
      }
      v39 = v53;
      v53 = 0;
      v40 = (WTF::StringImpl *)*((_QWORD *)this + 16);
      *((_QWORD *)this + 16) = v39;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, v28);
        else
          *(_DWORD *)v40 -= 2;
      }
      v41 = v54;
      v54 = 0;
      v42 = (WTF::StringImpl *)*((_QWORD *)this + 17);
      *((_QWORD *)this + 17) = v41;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, v28);
        else
          *(_DWORD *)v42 -= 2;
      }
      v43 = v55;
      v55 = 0;
      v44 = (WTF::StringImpl *)*((_QWORD *)this + 18);
      *((_QWORD *)this + 18) = v43;
      if (v44)
      {
        if (*(_DWORD *)v44 == 2)
          WTF::StringImpl::destroy(v44, v28);
        else
          *(_DWORD *)v44 -= 2;
      }
      v45 = v56;
      v56 = 0;
      v46 = (WTF::StringImpl *)*((_QWORD *)this + 19);
      *((_QWORD *)this + 19) = v45;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
          WTF::StringImpl::destroy(v46, v28);
        else
          *(_DWORD *)v46 -= 2;
      }
      WebKit::CoreIPCCNPostalAddress::~CoreIPCCNPostalAddress((WebKit::CoreIPCCNPostalAddress *)&v48, v28);
    }
    else
    {
      WebKit::CoreIPCCNPostalAddress::CoreIPCCNPostalAddress((WebKit::CoreIPCPKContact *)((char *)this + 88), v27);
      *((_BYTE *)this + 160) = 1;
    }
  }
  return this;
}

void sub_19788146C(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl **v3;
  uint64_t v4;
  WebKit::CoreIPCCNPostalAddress *v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v8 = *v6;
  *v6 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  if (*(_BYTE *)(v2 + 160))
    WebKit::CoreIPCCNPostalAddress::~CoreIPCCNPostalAddress(v5, a2);
  std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100](v4, a2);
  v10 = *v3;
  *v3 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  if (*(_BYTE *)(v2 + 48))
    WebKit::CoreIPCPersonNameComponents::~CoreIPCPersonNameComponents((WebKit::CoreIPCPersonNameComponents **)v2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::CoreIPCPKContact::toID@<X0>(WebKit::CoreIPCPKContact *this@<X0>, _QWORD *a2@<X8>)
{
  id v4;
  CFTypeRef v5;
  CFTypeRef v6;
  CFTypeRef v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  CFTypeRef cf;

  v4 = objc_alloc_init((Class)((uint64_t (*)(void))*MEMORY[0x1E0DCDF38])());
  if (*((_BYTE *)this + 48))
  {
    WebKit::CoreIPCPersonNameComponents::toID(this, &cf);
    objc_msgSend(v4, "setName:", cf);
    v5 = cf;
    cf = 0;
    if (v5)
      CFRelease(v5);
  }
  if (*((_BYTE *)this + 80))
  {
    WebKit::CoreIPCCNPhoneNumber::toID((WebKit::CoreIPCPKContact *)((char *)this + 64), &cf);
    objc_msgSend(v4, "setPhoneNumber:", cf);
    v6 = cf;
    cf = 0;
    if (v6)
      CFRelease(v6);
  }
  if (*((_BYTE *)this + 160))
  {
    WebKit::CoreIPCCNPostalAddress::toID((WebKit::CoreIPCPKContact *)((char *)this + 88), &cf);
    v7 = cf;
    objc_msgSend(v4, "setPostalAddress:", cf);
    if (v7)
      CFRelease(v7);
  }
  if (*((_QWORD *)this + 7))
    v8 = WTF::StringImpl::operator NSString *();
  else
    v8 = 0;
  objc_msgSend(v4, "setEmailAddress:", v8);
  if (*((_QWORD *)this + 21))
    v9 = WTF::StringImpl::operator NSString *();
  else
    v9 = 0;
  result = objc_msgSend(v4, "setSupplementarySubLocality:", v9);
  *a2 = v4;
  return result;
}

void sub_197881620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  const void *v10;
  const void *v11;

  if (v11)
    CFRelease(v11);
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

WebKit::CoreIPCPersonNameComponents *std::unique_ptr<WebKit::CoreIPCPersonNameComponents>::reset[abi:sn180100](WebKit::CoreIPCPersonNameComponents **a1, WebKit::CoreIPCPersonNameComponents *a2)
{
  WebKit::CoreIPCPersonNameComponents *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::CoreIPCPersonNameComponents::~CoreIPCPersonNameComponents(result);
    return (WebKit::CoreIPCPersonNameComponents *)WTF::fastFree(v4, v5);
  }
  return result;
}

void WebKit::CoreIPCPersonNameComponents::~CoreIPCPersonNameComponents(WebKit::CoreIPCPersonNameComponents **this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  std::unique_ptr<WebKit::CoreIPCPersonNameComponents>::reset[abi:sn180100](this + 5, 0);
  v3 = this[4];
  this[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = this[3];
  this[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = this[2];
  this[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = this[1];
  this[1] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *this;
  *this = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v2);
    else
      *(_DWORD *)v7 -= 2;
  }
}

WebKit::CoreIPCPersonNameComponents *WebKit::CoreIPCPersonNameComponents::CoreIPCPersonNameComponents(WebKit::CoreIPCPersonNameComponents *this, NSPersonNameComponents *a2)
{
  NSPersonNameComponents *v4;
  WebKit::CoreIPCPersonNameComponents *v5;

  MEMORY[0x19AEABCC8](this, -[NSPersonNameComponents namePrefix](a2, "namePrefix"));
  MEMORY[0x19AEABCC8]((char *)this + 8, -[NSPersonNameComponents givenName](a2, "givenName"));
  MEMORY[0x19AEABCC8]((char *)this + 16, -[NSPersonNameComponents middleName](a2, "middleName"));
  MEMORY[0x19AEABCC8]((char *)this + 24, -[NSPersonNameComponents familyName](a2, "familyName"));
  MEMORY[0x19AEABCC8]((char *)this + 32, -[NSPersonNameComponents nickname](a2, "nickname"));
  *((_QWORD *)this + 5) = 0;
  if (-[NSPersonNameComponents phoneticRepresentation](a2, "phoneticRepresentation"))
  {
    v4 = -[NSPersonNameComponents phoneticRepresentation](a2, "phoneticRepresentation");
    v5 = (WebKit::CoreIPCPersonNameComponents *)WTF::fastMalloc((WTF *)0x30);
    WebKit::CoreIPCPersonNameComponents::CoreIPCPersonNameComponents(v5, v4);
    std::unique_ptr<WebKit::CoreIPCPersonNameComponents>::reset[abi:sn180100]((WebKit::CoreIPCPersonNameComponents **)this + 5, v5);
  }
  return this;
}

void sub_19788186C(_Unwind_Exception *a1, void *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  WTF::StringImpl **v5;
  WTF::StringImpl **v6;
  WebKit::CoreIPCPersonNameComponents **v7;
  WTF *v8;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  WTF::fastFree(v8, a2);
  std::unique_ptr<WebKit::CoreIPCPersonNameComponents>::reset[abi:sn180100](v7, 0);
  v11 = *v6;
  *v6 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *v5;
  *v5 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *v4;
  *v4 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v10);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = *v3;
  *v3 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v10);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *v2;
  *v2 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v10);
    else
      *(_DWORD *)v15 -= 2;
  }
  _Unwind_Resume(a1);
}

void WebKit::CoreIPCPersonNameComponents::toID(WebKit::CoreIPCPersonNameComponents *this@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebKit::CoreIPCPersonNameComponents *v10;
  const void *v11;
  const void *v12;

  v4 = (void *)objc_opt_new();
  if (*(_QWORD *)this)
    v5 = WTF::StringImpl::operator NSString *();
  else
    v5 = 0;
  objc_msgSend(v4, "setNamePrefix:", v5);
  if (*((_QWORD *)this + 1))
    v6 = WTF::StringImpl::operator NSString *();
  else
    v6 = 0;
  objc_msgSend(v4, "setGivenName:", v6);
  if (*((_QWORD *)this + 2))
    v7 = WTF::StringImpl::operator NSString *();
  else
    v7 = 0;
  objc_msgSend(v4, "setMiddleName:", v7);
  if (*((_QWORD *)this + 3))
    v8 = WTF::StringImpl::operator NSString *();
  else
    v8 = 0;
  objc_msgSend(v4, "setFamilyName:", v8);
  if (*((_QWORD *)this + 4))
    v9 = WTF::StringImpl::operator NSString *();
  else
    v9 = 0;
  objc_msgSend(v4, "setNickname:", v9);
  v10 = (WebKit::CoreIPCPersonNameComponents *)*((_QWORD *)this + 5);
  if (v10)
  {
    WebKit::CoreIPCPersonNameComponents::toID((uint64_t *)&v12, v10);
    v11 = v12;
    objc_msgSend(v4, "setPhoneticRepresentation:", v12);
    if (v11)
      CFRelease(v11);
  }
  *a2 = v4;
}

void sub_197881A7C(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

WebKit::CoreIPCPresentationIntent *WebKit::CoreIPCPresentationIntent::CoreIPCPresentationIntent(WebKit::CoreIPCPresentationIntent *this, NSPresentationIntent *a2)
{
  NSInteger v4;
  NSPresentationIntent *v5;
  WebKit::CoreIPCPresentationIntent *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  WTF::StringImpl *v11;
  NSArray *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  WTF::StringImpl *v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = -[NSPresentationIntent intentKind](a2, "intentKind");
  v4 = -[NSPresentationIntent identity](a2, "identity");
  *((_OWORD *)this + 2) = 0u;
  *((_QWORD *)this + 1) = v4;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 10) = 0;
  if (-[NSPresentationIntent parentIntent](a2, "parentIntent"))
  {
    v5 = -[NSPresentationIntent parentIntent](a2, "parentIntent");
    v6 = (WebKit::CoreIPCPresentationIntent *)WTF::fastMalloc((WTF *)0x58);
    WebKit::CoreIPCPresentationIntent::CoreIPCPresentationIntent(v6, v5);
    v27 = 0;
    std::unique_ptr<WebKit::CoreIPCPresentationIntent>::reset[abi:sn180100]((WTF::StringImpl **)this + 2, v6);
    std::unique_ptr<WebKit::CoreIPCPresentationIntent>::reset[abi:sn180100](&v27, 0);
  }
  switch(*(_QWORD *)this)
  {
    case 1:
      *((_QWORD *)this + 7) = -[NSPresentationIntent headerLevel](a2, "headerLevel");
      return this;
    case 4:
      *((_QWORD *)this + 9) = -[NSPresentationIntent ordinal](a2, "ordinal");
      return this;
    case 5:
      MEMORY[0x19AEABCC8](&v27, -[NSPresentationIntent languageHint](a2, "languageHint"));
      v8 = v27;
      v27 = 0;
      v9 = (WTF::StringImpl *)*((_QWORD *)this + 8);
      *((_QWORD *)this + 8) = v8;
      if (!v9)
        return this;
      v10 = *(_DWORD *)v9 - 2;
      if (*(_DWORD *)v9 != 2)
        goto LABEL_10;
      WTF::StringImpl::destroy(v9, v7);
      v9 = v27;
      v27 = 0;
      if (v9)
      {
        v10 = *(_DWORD *)v9 - 2;
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v11);
        else
LABEL_10:
          *(_DWORD *)v9 = v10;
      }
      return this;
    case 8:
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v12 = -[NSPresentationIntent columnAlignments](a2, "columnAlignments", 0);
      v13 = -[NSArray countByEnumeratingWithState:objects:count:](v12, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
      if (v13)
      {
        v14 = *(_QWORD *)v24;
        do
        {
          for (i = 0; i != v13; ++i)
          {
            if (*(_QWORD *)v24 != v14)
              objc_enumerationMutation(v12);
            v16 = objc_msgSend(*(id *)(*((_QWORD *)&v23 + 1) + 8 * i), "unsignedIntegerValue");
            v17 = *((unsigned int *)this + 11);
            if ((_DWORD)v17 == *((_DWORD *)this + 10))
            {
              v18 = v17 + (v17 >> 2);
              if (v18 >= 0x10)
                v19 = v18 + 1;
              else
                v19 = 16;
              if (v19 <= v17 + 1)
                v20 = v17 + 1;
              else
                v20 = v19;
              WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)this + 32, v20);
              v17 = *((unsigned int *)this + 11);
              v21 = (uint64_t *)(*((_QWORD *)this + 4) + 8 * v17);
            }
            else
            {
              v21 = (uint64_t *)(*((_QWORD *)this + 4) + 8 * v17);
            }
            *v21 = v16;
            *((_DWORD *)this + 11) = v17 + 1;
          }
          v13 = -[NSArray countByEnumeratingWithState:objects:count:](v12, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
        }
        while (v13);
      }
      *((_QWORD *)this + 6) = -[NSPresentationIntent columnCount](a2, "columnCount");
      return this;
    case 0xALL:
      *((_QWORD *)this + 10) = -[NSPresentationIntent row](a2, "row");
      return this;
    case 0xBLL:
      *((_QWORD *)this + 3) = -[NSPresentationIntent column](a2, "column");
      return this;
    default:
      return this;
  }
}

void sub_197881D54(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl **v3;
  WTF **v4;
  WTF::StringImpl *v6;
  WTF *v7;

  v6 = *(WTF::StringImpl **)(v2 + 64);
  *(_QWORD *)(v2 + 64) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v2 + 32) = 0;
    *(_DWORD *)(v2 + 40) = 0;
    WTF::fastFree(v7, a2);
  }
  std::unique_ptr<WebKit::CoreIPCPresentationIntent>::reset[abi:sn180100](v3, 0);
  _Unwind_Resume(a1);
}

void WebKit::CoreIPCPresentationIntent::toID(WebKit::CoreIPCPresentationIntent *this@<X0>, _QWORD *a2@<X8>)
{
  WebKit::CoreIPCPresentationIntent *v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  const __CFString *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const void *v31;

  v4 = (WebKit::CoreIPCPresentationIntent *)*((_QWORD *)this + 2);
  if (v4)
    WebKit::CoreIPCPresentationIntent::toID((uint64_t *)&v31, v4);
  else
    v31 = 0;
  switch(*(_QWORD *)this)
  {
    case 0:
      v5 = *((_QWORD *)this + 1);
      v6 = v31;
      v7 = (const void *)objc_msgSend(MEMORY[0x1E0CB3890], "paragraphIntentWithIdentity:nestedInsideIntent:", v5, v31);
      *a2 = v7;
      if (v7)
        goto LABEL_36;
      break;
    case 1:
      v8 = *((_QWORD *)this + 1);
      v9 = *((_QWORD *)this + 7);
      v6 = v31;
      v7 = (const void *)objc_msgSend(MEMORY[0x1E0CB3890], "headerIntentWithIdentity:level:nestedInsideIntent:", v8, v9, v31);
      *a2 = v7;
      if (v7)
        goto LABEL_36;
      break;
    case 2:
      v10 = *((_QWORD *)this + 1);
      v6 = v31;
      v7 = (const void *)objc_msgSend(MEMORY[0x1E0CB3890], "orderedListIntentWithIdentity:nestedInsideIntent:", v10, v31);
      *a2 = v7;
      if (v7)
        goto LABEL_36;
      break;
    case 3:
      v11 = *((_QWORD *)this + 1);
      v6 = v31;
      v7 = (const void *)objc_msgSend(MEMORY[0x1E0CB3890], "unorderedListIntentWithIdentity:nestedInsideIntent:", v11, v31);
      *a2 = v7;
      if (v7)
        goto LABEL_36;
      break;
    case 4:
      v12 = *((_QWORD *)this + 1);
      v13 = *((_QWORD *)this + 9);
      v6 = v31;
      v7 = (const void *)objc_msgSend(MEMORY[0x1E0CB3890], "listItemIntentWithIdentity:ordinal:nestedInsideIntent:", v12, v13, v31);
      *a2 = v7;
      if (v7)
        goto LABEL_36;
      break;
    case 5:
      v14 = (void *)MEMORY[0x1E0CB3890];
      v15 = *((_QWORD *)this + 1);
      if (*((_QWORD *)this + 8))
        v16 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v16 = &stru_1E351F1B8;
      v6 = v31;
      v7 = (const void *)objc_msgSend(v14, "codeBlockIntentWithIdentity:languageHint:nestedInsideIntent:", v15, v16, v31);
      *a2 = v7;
      if (v7)
        goto LABEL_36;
      break;
    case 6:
      v17 = *((_QWORD *)this + 1);
      v6 = v31;
      v7 = (const void *)objc_msgSend(MEMORY[0x1E0CB3890], "blockQuoteIntentWithIdentity:nestedInsideIntent:", v17, v31);
      *a2 = v7;
      if (v7)
        goto LABEL_36;
      break;
    case 7:
      v18 = *((_QWORD *)this + 1);
      v6 = v31;
      v7 = (const void *)objc_msgSend(MEMORY[0x1E0CB3890], "thematicBreakIntentWithIdentity:nestedInsideIntent:", v18, v31);
      *a2 = v7;
      if (v7)
        goto LABEL_36;
      break;
    case 8:
      v19 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *((unsigned int *)this + 11));
      v20 = *((unsigned int *)this + 11);
      if ((_DWORD)v20)
      {
        v21 = (_QWORD *)*((_QWORD *)this + 4);
        v22 = 8 * v20;
        do
        {
          objc_msgSend(v19, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *v21++));
          v22 -= 8;
        }
        while (v22);
      }
      v23 = *((_QWORD *)this + 1);
      v24 = *((_QWORD *)this + 6);
      v6 = v31;
      v25 = (const void *)objc_msgSend(MEMORY[0x1E0CB3890], "tableIntentWithIdentity:columnCount:alignments:nestedInsideIntent:", v23, v24, v19, v31);
      *a2 = v25;
      if (v25)
        CFRetain(v25);
      if (v19)
        CFRelease(v19);
      break;
    case 9:
      v26 = *((_QWORD *)this + 1);
      v6 = v31;
      v7 = (const void *)objc_msgSend(MEMORY[0x1E0CB3890], "tableHeaderRowIntentWithIdentity:nestedInsideIntent:", v26, v31);
      *a2 = v7;
      if (v7)
        goto LABEL_36;
      break;
    case 0xALL:
      v27 = *((_QWORD *)this + 1);
      v28 = *((_QWORD *)this + 10);
      v6 = v31;
      v7 = (const void *)objc_msgSend(MEMORY[0x1E0CB3890], "tableRowIntentWithIdentity:row:nestedInsideIntent:", v27, v28, v31);
      *a2 = v7;
      if (v7)
        goto LABEL_36;
      break;
    case 0xBLL:
      v29 = *((_QWORD *)this + 1);
      v30 = *((_QWORD *)this + 3);
      v6 = v31;
      v7 = (const void *)objc_msgSend(MEMORY[0x1E0CB3890], "tableCellIntentWithIdentity:column:nestedInsideIntent:", v29, v30, v31);
      *a2 = v7;
      if (v7)
LABEL_36:
        CFRetain(v7);
      break;
    default:
      *a2 = 0;
      v6 = v31;
      break;
  }
  if (v6)
    CFRelease(v6);
}

void sub_1978820E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl **std::unique_ptr<WebKit::CoreIPCPresentationIntent>::reset[abi:sn180100](WTF::StringImpl **result, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF *v4;
  void *v5;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)v2 + 8);
    *((_QWORD *)v2 + 8) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = (WTF *)*((_QWORD *)v2 + 4);
    if (v4)
    {
      *((_QWORD *)v2 + 4) = 0;
      *((_DWORD *)v2 + 10) = 0;
      WTF::fastFree(v4, a2);
    }
    std::unique_ptr<WebKit::CoreIPCPresentationIntent>::reset[abi:sn180100]((char *)v2 + 16, 0);
    return (WTF::StringImpl **)WTF::fastFree(v2, v5);
  }
  return result;
}

uint64_t WebKit::CoreIPCSecureCoding::conformsToWebKitSecureCoding(WebKit::CoreIPCSecureCoding *this, objc_object *a2)
{
  char v2;

  if ((objc_opt_respondsToSelector() & 1) != 0)
    v2 = objc_opt_respondsToSelector();
  else
    v2 = 0;
  return v2 & 1;
}

uint64_t WebKit::crashWithClassName(WebKit *this, objc_class *a2)
{
  WebKit *v3;
  const char *v4;
  const char *v5;
  WebKit *v6;
  NSDictionary *v7;
  double v8;
  char __dst[8];
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v3 = (WebKit *)WTF::StringLiterals::operator"" _s((WTF::ASCIILiteral *)"NSSecureCoding path used for unexpected object", (const char *)0x2E);
  WebKit::logAndSetCrashLogMessage(v3, v4);
  v5 = -[NSString UTF8String](NSStringFromClass(this), "UTF8String");
  strncpy(__dst, v5, 0x30uLL);
  v6 = (WebKit *)WTFCrashWithInfoImpl(103, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/Shared/Cocoa/CoreIPCSecureCoding.mm", "void WebKit::crashWithClassName(Class)", 30, *(unint64_t *)__dst, v11, v12, v13, v14, v15);
  return WebKit::fontWithAttributes(v6, v7, v8);
}

uint64_t WebKit::fontWithAttributes(WebKit *this, NSDictionary *a2, double a3)
{
  uint64_t v4;

  v4 = objc_msgSend(MEMORY[0x1E0CEA5F0], "fontDescriptorWithFontAttributes:", this);
  return objc_msgSend(MEMORY[0x1E0CEA5E8], "fontWithDescriptor:size:", v4, a3);
}

void WebKit::dictionaryForWebKitSecureCodingType(WebKit *this, objc_object *a2)
{
  const void *v4;
  void *v5;
  const void *v6;

  if (WebKit::CoreIPCSecureCoding::conformsToWebKitSecureCoding((WebKit::CoreIPCSecureCoding *)a2, a2))
  {
    v4 = (const void *)-[objc_object _webKitPropertyListData](a2, "_webKitPropertyListData");
    *(_QWORD *)this = v4;
    if (v4)
      CFRetain(v4);
  }
  else
  {
    v5 = (void *)objc_opt_new();
    -[objc_object encodeWithCoder:](a2, "encodeWithCoder:", v5);
    v6 = (const void *)objc_msgSend(v5, "accumulatedDictionary");
    *(_QWORD *)this = v6;
    if (v6)
      CFRetain(v6);
    if (v5)
      CFRelease(v5);
  }
}

void sub_197882360(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::CoreIPCDDScannerResult::CoreIPCDDScannerResult(uint64_t a1, objc_object *a2)
{
  const void **v3;
  id v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  void *v25;
  void *v26;
  char isKindOfClass;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void (**v31)(void);
  uint64_t i;
  const void *v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  const void **v41;
  uint64_t v42;
  const void *v43;
  WTF *v44;
  uint64_t v45;
  uint64_t v46;
  const void *v47;
  const void *v48;
  const void *v49;
  const void *v50;
  const void *v51;
  const void *v52;
  const void *v53;
  const void *v54;
  const void *v55;
  const void *v56;
  const void *v57;
  const void *v58;
  const void ***v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _BYTE v71[128];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v60 = (const void ***)(a1 + 40);
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v3 = (const void **)(a1 + 64);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 25) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  WebKit::dictionaryForWebKitSecureCodingType((WebKit *)&v64, a2);
  v4 = v64;
  v5 = (const void *)objc_msgSend(v64, "objectForKey:", CFSTR("AR"));
  v6 = v5;
  if (v5)
    CFRetain(v5);
  v7 = *(const void **)a1;
  *(_QWORD *)a1 = v6;
  if (v7)
    CFRelease(v7);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v8 = *(const void **)a1;
    *(_QWORD *)a1 = 0;
    if (v8)
      CFRelease(v8);
  }
  v9 = (const void *)objc_msgSend(v4, "objectForKey:", CFSTR("MS"));
  v10 = v9;
  if (v9)
    CFRetain(v9);
  v11 = *(const void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v10;
  if (v11)
    CFRelease(v11);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v12 = *(const void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v12)
      CFRelease(v12);
  }
  v13 = (const void *)objc_msgSend(v4, "objectForKey:", CFSTR("T"));
  v14 = v13;
  if (v13)
    CFRetain(v13);
  v15 = *(const void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  if (v15)
    CFRelease(v15);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v16 = *(const void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v16)
      CFRelease(v16);
  }
  v17 = (const void *)objc_msgSend(v4, "objectForKey:", CFSTR("P"));
  v18 = v17;
  if (v17)
    CFRetain(v17);
  v19 = *(const void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v18;
  if (v19)
    CFRelease(v19);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v20 = *(const void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v20)
      CFRelease(v20);
  }
  v21 = (const void *)objc_msgSend(v4, "objectForKey:", CFSTR("VN"));
  v22 = v21;
  if (v21)
    CFRetain(v21);
  v23 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v22;
  if (v23)
    CFRelease(v23);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v24 = *(const void **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (v24)
      CFRelease(v24);
  }
  v25 = (void *)objc_msgSend(v4, "objectForKey:", CFSTR("SR"));
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    v65 = 0;
    v66 = 0;
    if ((isKindOfClass & 1) != 0)
    {
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v29 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v67, v71, 16);
      if (v29)
      {
        v30 = *(_QWORD *)v68;
        v31 = (void (**)(void))MEMORY[0x1E0DCDFE8];
        do
        {
          for (i = 0; i != v29; ++i)
          {
            if (*(_QWORD *)v68 != v30)
              objc_enumerationMutation(v25);
            v33 = *(const void **)(*((_QWORD *)&v67 + 1) + 8 * i);
            (*v31)();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              v34 = HIDWORD(v66);
              if (HIDWORD(v66) == (_DWORD)v66)
              {
                v35 = HIDWORD(v66) + ((unint64_t)HIDWORD(v66) >> 2);
                if (v35 >= 0x10)
                  v36 = v35 + 1;
                else
                  v36 = 16;
                if (v36 <= (unint64_t)HIDWORD(v66) + 1)
                  v37 = HIDWORD(v66) + 1;
                else
                  v37 = v36;
                WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v65, v37);
                v34 = HIDWORD(v66);
                *(_QWORD *)(v65 + 8 * HIDWORD(v66)) = v33;
                if (v33)
                {
LABEL_54:
                  CFRetain(v33);
                  v34 = HIDWORD(v66);
                }
              }
              else
              {
                *(_QWORD *)(v65 + 8 * HIDWORD(v66)) = v33;
                if (v33)
                  goto LABEL_54;
              }
              HIDWORD(v66) = v34 + 1;
              continue;
            }
          }
          v29 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v67, v71, 16);
        }
        while (v29);
      }
    }
    v61 = v65;
    v38 = v66;
    v65 = 0;
    v66 = 0;
    v62 = v38;
    v63 = 1;
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v65, v28);
    v39 = 1;
  }
  else
  {
    v39 = 0;
    LOBYTE(v61) = 0;
    v63 = 0;
  }
  if (*(unsigned __int8 *)(a1 + 56) == v39)
  {
    if (!*(_BYTE *)(a1 + 56))
      goto LABEL_75;
    v40 = *(unsigned int *)(a1 + 52);
    if ((_DWORD)v40)
    {
      v41 = *v60;
      v42 = 8 * v40;
      do
      {
        v43 = *v41;
        *v41 = 0;
        if (v43)
          CFRelease(v43);
        ++v41;
        v42 -= 8;
      }
      while (v42);
    }
    v44 = (WTF *)*v60;
    if (*v60)
    {
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 48) = 0;
      WTF::fastFree(v44, v26);
    }
    *(_QWORD *)(a1 + 40) = v61;
    v45 = v62;
    v61 = 0;
    v62 = 0;
    *(_QWORD *)(a1 + 48) = v45;
  }
  else if (*(_BYTE *)(a1 + 56))
  {
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v60, v26);
    *(_BYTE *)(a1 + 56) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 40) = v61;
    v46 = v62;
    v61 = 0;
    v62 = 0;
    *(_QWORD *)(a1 + 48) = v46;
    *(_BYTE *)(a1 + 56) = 1;
  }
  if (v63)
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v61, v26);
LABEL_75:
  v47 = (const void *)objc_msgSend(v4, "objectForKey:", CFSTR("V"));
  v48 = v47;
  if (v47)
    CFRetain(v47);
  v49 = *v3;
  *v3 = v48;
  if (v49)
    CFRelease(v49);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v50 = *v3;
    *v3 = 0;
    if (v50)
      CFRelease(v50);
  }
  v51 = (const void *)objc_msgSend(v4, "objectForKey:", CFSTR("C"));
  v52 = v51;
  if (v51)
    CFRetain(v51);
  v53 = *(const void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v52;
  if (v53)
    CFRelease(v53);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v54 = *(const void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    if (v54)
      CFRelease(v54);
  }
  v55 = (const void *)objc_msgSend(v4, "objectForKey:", CFSTR("CF"));
  v56 = v55;
  if (v55)
    CFRetain(v55);
  v57 = *(const void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v56;
  if (v57)
    CFRelease(v57);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v58 = *(const void **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = 0;
    if (v58)
    {
      CFRelease(v58);
      if (!v4)
        return a1;
      goto LABEL_96;
    }
  }
  if (v4)
LABEL_96:
    CFRelease(v4);
  return a1;
}

void sub_197882980(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  uint64_t v15;
  const void *v16;
  const void **v17;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;

  if (a13)
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  if (v16)
    CFRelease(v16);
  v19 = *(const void **)(v15 + 80);
  *(_QWORD *)(v15 + 80) = 0;
  if (v19)
    CFRelease(v19);
  v20 = *(const void **)(v15 + 72);
  *(_QWORD *)(v15 + 72) = 0;
  if (v20)
    CFRelease(v20);
  v21 = *v17;
  *v17 = 0;
  if (v21)
    CFRelease(v21);
  if (*(_BYTE *)(v15 + 56))
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a10, a2);
  v22 = *(const void **)(v15 + 32);
  *(_QWORD *)(v15 + 32) = 0;
  if (v22)
    CFRelease(v22);
  v23 = *(const void **)(v15 + 24);
  *(_QWORD *)(v15 + 24) = 0;
  if (v23)
    CFRelease(v23);
  v24 = *(const void **)(v15 + 16);
  *(_QWORD *)(v15 + 16) = 0;
  if (v24)
    CFRelease(v24);
  v25 = *(const void **)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  if (v25)
    CFRelease(v25);
  v26 = *(const void **)v15;
  *(_QWORD *)v15 = 0;
  if (v26)
    CFRelease(v26);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::CoreIPCDDScannerResult::toID@<X0>(WebKit::CoreIPCDDScannerResult *this@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t (**v17)(void);
  uint64_t result;

  v4 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 9);
  v5 = v4;
  if (*(_QWORD *)this)
    objc_msgSend(v4, "setObject:forKeyedSubscript:", *(_QWORD *)this, CFSTR("AR"));
  v6 = *((_QWORD *)this + 1);
  if (v6)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v6, CFSTR("MS"));
  v7 = *((_QWORD *)this + 2);
  if (v7)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v7, CFSTR("T"));
  v8 = *((_QWORD *)this + 3);
  if (v8)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v8, CFSTR("P"));
  v9 = *((_QWORD *)this + 4);
  if (v9)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v9, CFSTR("VN"));
  v10 = *((_QWORD *)this + 8);
  if (v10)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v10, CFSTR("V"));
  v11 = *((_QWORD *)this + 9);
  if (v11)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v11, CFSTR("C"));
  v12 = *((_QWORD *)this + 10);
  if (v12)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v12, CFSTR("CF"));
  if (*((_BYTE *)this + 56))
  {
    v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *((unsigned int *)this + 13));
    v14 = *((unsigned int *)this + 13);
    if ((_DWORD)v14)
    {
      v15 = (_QWORD *)*((_QWORD *)this + 5);
      v16 = 8 * v14;
      do
      {
        if (*v15)
          objc_msgSend(v13, "addObject:");
        ++v15;
        v16 -= 8;
      }
      while (v16);
    }
    if (v13)
    {
      objc_msgSend(v5, "setObject:forKeyedSubscript:", v13, CFSTR("SR"));
      CFRelease(v13);
    }
  }
  v17 = (uint64_t (**)(void))MEMORY[0x1E0DCDFE8];
  if ((objc_msgSend((id)((uint64_t (*)(void))*MEMORY[0x1E0DCDFE8])(), "instancesRespondToSelector:", sel__initWithWebKitPropertyListData_) & 1) != 0)
  {
    result = objc_msgSend(objc_alloc((Class)(*v17)()), "_initWithWebKitPropertyListData:", v5);
    *a2 = result;
  }
  else
  {
    result = 430;
    __break(0xC471u);
  }
  return result;
}

void sub_197882C38(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

WebKit::CoreIPCNSURLCredential *WebKit::CoreIPCNSURLCredential::CoreIPCNSURLCredential(WebKit::CoreIPCNSURLCredential *this, objc_object *a2)
{
  id v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  id v9;

  *(_QWORD *)this = 0;
  WebKit::dictionaryForWebKitSecureCodingType((WebKit *)&v9, a2);
  v3 = v9;
  v4 = (const void *)objc_msgSend(v9, "objectForKey:", CFSTR("__nsurlcredential_proto_plist"));
  v5 = v4;
  if (v4)
    CFRetain(v4);
  v6 = *(const void **)this;
  *(_QWORD *)this = v5;
  if (v6)
    CFRelease(v6);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v7 = *(const void **)this;
    *(_QWORD *)this = 0;
    if (v7)
      CFRelease(v7);
  }
  if (v3)
    CFRelease(v3);
  return this;
}

void sub_197882D08(_Unwind_Exception *exception_object)
{
  const void **v1;
  const void *v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

void WebKit::CoreIPCNSURLCredential::toID(WebKit::CoreIPCNSURLCredential *this@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  void *v5;
  WKKeyedCoder *v6;

  v4 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 1);
  v5 = v4;
  if (*(_QWORD *)this)
    objc_msgSend(v4, "setObject:forKeyedSubscript:", *(_QWORD *)this, CFSTR("__nsurlcredential_proto_plist"));
  if ((objc_msgSend(MEMORY[0x1E0C92C60], "instancesRespondToSelector:", sel__initWithWebKitPropertyListData_) & 1) != 0)
  {
    *a2 = objc_msgSend(objc_alloc(MEMORY[0x1E0C92C60]), "_initWithWebKitPropertyListData:", v5);
  }
  else
  {
    v6 = -[WKKeyedCoder initWithDictionary:]([WKKeyedCoder alloc], "initWithDictionary:", v5);
    *a2 = objc_msgSend(objc_alloc(MEMORY[0x1E0C92C60]), "initWithCoder:", v6);
    if (v6)
      CFRelease(v6);
  }
}

void sub_197882E00(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

WebKit::CoreIPCNSURLProtectionSpace *WebKit::CoreIPCNSURLProtectionSpace::CoreIPCNSURLProtectionSpace(WebKit::CoreIPCNSURLProtectionSpace *this, objc_object *a2)
{
  const void ***v3;
  id v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  CFTypeID v32;
  const void *v33;
  void *v34;
  void *v35;
  char isKindOfClass;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  const void **v50;
  uint64_t v51;
  const void *v52;
  WTF *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  char v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _BYTE v67[128];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v3 = (const void ***)((char *)this + 56);
  *((_BYTE *)this + 72) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 41) = 0u;
  WebKit::dictionaryForWebKitSecureCodingType((WebKit *)&v60, a2);
  v4 = v60;
  v5 = (const void *)objc_msgSend(v60, "objectForKey:", CFSTR("__nsurlprotectionspace_proto_plist"));
  v6 = v5;
  if (v5)
    CFRetain(v5);
  v7 = *(const void **)this;
  *(_QWORD *)this = v6;
  if (v7)
    CFRelease(v7);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v8 = *(const void **)this;
    *(_QWORD *)this = 0;
    if (v8)
      CFRelease(v8);
  }
  v9 = (const void *)objc_msgSend(v4, "objectForKey:", CFSTR("host"));
  v10 = v9;
  if (v9)
    CFRetain(v9);
  v11 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v10;
  if (v11)
    CFRelease(v11);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v12 = (const void *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v12)
      CFRelease(v12);
  }
  v13 = (const void *)objc_msgSend(v4, "objectForKey:", CFSTR("port"));
  v14 = v13;
  if (v13)
    CFRetain(v13);
  v15 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v14;
  if (v15)
    CFRelease(v15);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v16 = (const void *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v16)
      CFRelease(v16);
  }
  v17 = (const void *)objc_msgSend(v4, "objectForKey:", CFSTR("type"));
  v18 = v17;
  if (v17)
    CFRetain(v17);
  v19 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v18;
  if (v19)
    CFRelease(v19);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v20 = (const void *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v20)
      CFRelease(v20);
  }
  v21 = (const void *)objc_msgSend(v4, "objectForKey:", CFSTR("realm"));
  v22 = v21;
  if (v21)
    CFRetain(v21);
  v23 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v22;
  if (v23)
    CFRelease(v23);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v24 = (const void *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v24)
      CFRelease(v24);
  }
  v25 = (const void *)objc_msgSend(v4, "objectForKey:", CFSTR("scheme"));
  v26 = v25;
  if (v25)
    CFRetain(v25);
  v27 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v26;
  if (v27)
    CFRelease(v27);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v28 = (const void *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v28)
      CFRelease(v28);
  }
  v29 = (const void *)objc_msgSend(v4, "objectForKey:", CFSTR("trust"));
  v30 = v29;
  if (v29)
    CFRetain(v29);
  v31 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v30;
  if (v31)
  {
    CFRelease(v31);
    v30 = (const void *)*((_QWORD *)this + 6);
    if (v30)
      goto LABEL_47;
LABEL_51:
    *((_QWORD *)this + 6) = 0;
    goto LABEL_52;
  }
  if (!v30)
    goto LABEL_51;
LABEL_47:
  v32 = CFGetTypeID(v30);
  if (v32 != SecTrustGetTypeID())
  {
    v33 = (const void *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    if (v33)
      CFRelease(v33);
  }
LABEL_52:
  v34 = (void *)objc_msgSend(v4, "objectForKey:", CFSTR("distnames"));
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    v61 = 0;
    v62 = 0;
    if ((isKindOfClass & 1) != 0)
    {
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v38 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v63, v67, 16);
      if (v38)
      {
        v39 = *(_QWORD *)v64;
        do
        {
          v40 = 0;
          do
          {
            if (*(_QWORD *)v64 != v39)
              objc_enumerationMutation(v34);
            v41 = *(const void **)(*((_QWORD *)&v63 + 1) + 8 * v40);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              v42 = HIDWORD(v62);
              if (HIDWORD(v62) == (_DWORD)v62)
              {
                v43 = HIDWORD(v62) + ((unint64_t)HIDWORD(v62) >> 2);
                if (v43 >= 0x10)
                  v44 = v43 + 1;
                else
                  v44 = 16;
                if (v44 <= (unint64_t)HIDWORD(v62) + 1)
                  v45 = HIDWORD(v62) + 1;
                else
                  v45 = v44;
                WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v61, v45);
                v42 = HIDWORD(v62);
                *(_QWORD *)(v61 + 8 * HIDWORD(v62)) = v41;
                if (v41)
                {
LABEL_70:
                  CFRetain(v41);
                  v42 = HIDWORD(v62);
                }
              }
              else
              {
                *(_QWORD *)(v61 + 8 * HIDWORD(v62)) = v41;
                if (v41)
                  goto LABEL_70;
              }
              HIDWORD(v62) = v42 + 1;
            }
            ++v40;
          }
          while (v38 != v40);
          v46 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v63, v67, 16);
          v38 = v46;
        }
        while (v46);
      }
    }
    v57 = v61;
    v47 = v62;
    v61 = 0;
    v62 = 0;
    v58 = v47;
    v59 = 1;
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v61, v37);
    v48 = 1;
  }
  else
  {
    v48 = 0;
    LOBYTE(v57) = 0;
    v59 = 0;
  }
  if (*((unsigned __int8 *)this + 72) == v48)
  {
    if (!*((_BYTE *)this + 72))
      goto LABEL_93;
    v49 = *((unsigned int *)this + 17);
    if ((_DWORD)v49)
    {
      v50 = *v3;
      v51 = 8 * v49;
      do
      {
        v52 = *v50;
        *v50 = 0;
        if (v52)
          CFRelease(v52);
        ++v50;
        v51 -= 8;
      }
      while (v51);
    }
    v53 = (WTF *)*v3;
    if (*v3)
    {
      *((_QWORD *)this + 7) = 0;
      *((_DWORD *)this + 16) = 0;
      WTF::fastFree(v53, v35);
    }
    *((_QWORD *)this + 7) = v57;
    v54 = v58;
    v57 = 0;
    v58 = 0;
    *((_QWORD *)this + 8) = v54;
  }
  else if (*((_BYTE *)this + 72))
  {
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3, v35);
    *((_BYTE *)this + 72) = 0;
  }
  else
  {
    *((_QWORD *)this + 7) = v57;
    v55 = v58;
    v57 = 0;
    v58 = 0;
    *((_QWORD *)this + 8) = v55;
    *((_BYTE *)this + 72) = 1;
  }
  if (v59)
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57, v35);
LABEL_93:
  if (v4)
    CFRelease(v4);
  return this;
}

void sub_1978833B4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;

  if (a11)
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  if (v14)
    CFRelease(v14);
  if (*(_BYTE *)(v13 + 72))
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v15, a2);
  v17 = *(const void **)(v13 + 48);
  *(_QWORD *)(v13 + 48) = 0;
  if (v17)
    CFRelease(v17);
  v18 = *(const void **)(v13 + 40);
  *(_QWORD *)(v13 + 40) = 0;
  if (v18)
    CFRelease(v18);
  v19 = *(const void **)(v13 + 32);
  *(_QWORD *)(v13 + 32) = 0;
  if (v19)
    CFRelease(v19);
  v20 = *(const void **)(v13 + 24);
  *(_QWORD *)(v13 + 24) = 0;
  if (v20)
    CFRelease(v20);
  v21 = *(const void **)(v13 + 16);
  *(_QWORD *)(v13 + 16) = 0;
  if (v21)
    CFRelease(v21);
  v22 = *(const void **)(v13 + 8);
  *(_QWORD *)(v13 + 8) = 0;
  if (v22)
    CFRelease(v22);
  v23 = *(const void **)v13;
  *(_QWORD *)v13 = 0;
  if (v23)
    CFRelease(v23);
  _Unwind_Resume(exception_object);
}

void WebKit::CoreIPCNSURLProtectionSpace::toID(WebKit::CoreIPCNSURLProtectionSpace *this@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  WKKeyedCoder *v16;

  v4 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 8);
  v5 = v4;
  if (*(_QWORD *)this)
    objc_msgSend(v4, "setObject:forKeyedSubscript:", *(_QWORD *)this, CFSTR("__nsurlprotectionspace_proto_plist"));
  v6 = *((_QWORD *)this + 1);
  if (v6)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v6, CFSTR("host"));
  v7 = *((_QWORD *)this + 2);
  if (v7)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v7, CFSTR("port"));
  v8 = *((_QWORD *)this + 3);
  if (v8)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v8, CFSTR("type"));
  v9 = *((_QWORD *)this + 4);
  if (v9)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v9, CFSTR("realm"));
  v10 = *((_QWORD *)this + 5);
  if (v10)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v10, CFSTR("scheme"));
  v11 = *((_QWORD *)this + 6);
  if (v11)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v11, CFSTR("trust"));
  if (*((_BYTE *)this + 72))
  {
    v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *((unsigned int *)this + 17));
    v13 = *((unsigned int *)this + 17);
    if ((_DWORD)v13)
    {
      v14 = (_QWORD *)*((_QWORD *)this + 7);
      v15 = 8 * v13;
      do
      {
        if (*v14)
          objc_msgSend(v12, "addObject:");
        ++v14;
        v15 -= 8;
      }
      while (v15);
    }
    if (v12)
    {
      objc_msgSend(v5, "setObject:forKeyedSubscript:", v12, CFSTR("distnames"));
      CFRelease(v12);
    }
  }
  if ((objc_msgSend((id)objc_opt_class(), "instancesRespondToSelector:", sel__initWithWebKitPropertyListData_) & 1) != 0)
  {
    *a2 = objc_msgSend(objc_alloc((Class)objc_opt_class()), "_initWithWebKitPropertyListData:", v5);
  }
  else
  {
    v16 = -[WKKeyedCoder initWithDictionary:]([WKKeyedCoder alloc], "initWithDictionary:", v5);
    *a2 = objc_msgSend(objc_alloc((Class)objc_opt_class()), "initWithCoder:", v16);
    if (v16)
      CFRelease(v16);
  }
}

void sub_197883674(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::CoreIPCPKPaymentMerchantSession::CoreIPCPKPaymentMerchantSession(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12, uint64_t *a13, uint64_t *a14, uint64_t *a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v15 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v15;
  v16 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 8) = v16;
  v17 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 16) = v17;
  v18 = *a5;
  *a5 = 0;
  *(_QWORD *)(result + 24) = v18;
  v19 = *a6;
  *a6 = 0;
  *(_QWORD *)(result + 32) = v19;
  v20 = *a7;
  *a7 = 0;
  *(_QWORD *)(result + 40) = v20;
  v21 = *a8;
  *a8 = 0;
  *(_QWORD *)(result + 48) = v21;
  v22 = *a9;
  *a9 = 0;
  *(_QWORD *)(result + 56) = v22;
  v23 = *a10;
  *a10 = 0;
  *(_QWORD *)(result + 64) = v23;
  v24 = *a11;
  *a11 = 0;
  *(_QWORD *)(result + 72) = v24;
  v25 = *a12;
  *a12 = 0;
  *(_QWORD *)(result + 80) = v25;
  v26 = *a13;
  *a13 = 0;
  *(_QWORD *)(result + 88) = v26;
  v27 = *a14;
  *a14 = 0;
  *(_BYTE *)(result + 104) = 0;
  *(_QWORD *)(result + 96) = v27;
  *(_BYTE *)(result + 120) = 0;
  if (*((_BYTE *)a15 + 16))
  {
    *(_QWORD *)(result + 104) = 0;
    *(_QWORD *)(result + 112) = 0;
    v28 = *a15;
    *a15 = 0;
    *(_QWORD *)(result + 104) = v28;
    LODWORD(v28) = *((_DWORD *)a15 + 2);
    *((_DWORD *)a15 + 2) = 0;
    *(_DWORD *)(result + 112) = v28;
    LODWORD(v28) = *((_DWORD *)a15 + 3);
    *((_DWORD *)a15 + 3) = 0;
    *(_DWORD *)(result + 116) = v28;
    *(_BYTE *)(result + 120) = 1;
  }
  return result;
}

WebKit::CoreIPCPKPaymentMerchantSession *WebKit::CoreIPCPKPaymentMerchantSession::CoreIPCPKPaymentMerchantSession(WebKit::CoreIPCPKPaymentMerchantSession *this, objc_object *a2)
{
  const void ***v3;
  id v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  const void *v36;
  const void *v37;
  const void *v38;
  const void *v39;
  const void *v40;
  const void *v41;
  const void *v42;
  const void *v43;
  const void *v44;
  const void *v45;
  const void *v46;
  const void *v47;
  const void *v48;
  const void *v49;
  const void *v50;
  const void *v51;
  const void *v52;
  const void *v53;
  const void *v54;
  const void *v55;
  const void *v56;
  void *v57;
  void *v58;
  char isKindOfClass;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const void *v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  const void **v73;
  uint64_t v74;
  const void *v75;
  WTF *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  char v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _BYTE v90[128];
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 120) = 0;
  v3 = (const void ***)((char *)this + 104);
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *(_OWORD *)((char *)this + 89) = 0u;
  WebKit::dictionaryForWebKitSecureCodingType((WebKit *)&v83, a2);
  v4 = v83;
  v5 = (const void *)objc_msgSend(v83, "objectForKey:", CFSTR("merchantIdentifier"));
  v6 = v5;
  if (v5)
    CFRetain(v5);
  v7 = *(const void **)this;
  *(_QWORD *)this = v6;
  if (v7)
    CFRelease(v7);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v8 = *(const void **)this;
    *(_QWORD *)this = 0;
    if (v8)
      CFRelease(v8);
  }
  v9 = (const void *)objc_msgSend(v4, "objectForKey:", CFSTR("merchantSessionIdentifier"));
  v10 = v9;
  if (v9)
    CFRetain(v9);
  v11 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v10;
  if (v11)
    CFRelease(v11);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v12 = (const void *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v12)
      CFRelease(v12);
  }
  v13 = (const void *)objc_msgSend(v4, "objectForKey:", CFSTR("nonce"));
  v14 = v13;
  if (v13)
    CFRetain(v13);
  v15 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v14;
  if (v15)
    CFRelease(v15);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v16 = (const void *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v16)
      CFRelease(v16);
  }
  v17 = (const void *)objc_msgSend(v4, "objectForKey:", CFSTR("epochTimestamp"));
  v18 = v17;
  if (v17)
    CFRetain(v17);
  v19 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v18;
  if (v19)
    CFRelease(v19);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v20 = (const void *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v20)
      CFRelease(v20);
  }
  v21 = (const void *)objc_msgSend(v4, "objectForKey:", CFSTR("expiresAt"));
  v22 = v21;
  if (v21)
    CFRetain(v21);
  v23 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v22;
  if (v23)
    CFRelease(v23);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v24 = (const void *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v24)
      CFRelease(v24);
  }
  v25 = (const void *)objc_msgSend(v4, "objectForKey:", CFSTR("domainName"));
  v26 = v25;
  if (v25)
    CFRetain(v25);
  v27 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v26;
  if (v27)
    CFRelease(v27);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v28 = (const void *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v28)
      CFRelease(v28);
  }
  v29 = (const void *)objc_msgSend(v4, "objectForKey:", CFSTR("displayName"));
  v30 = v29;
  if (v29)
    CFRetain(v29);
  v31 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v30;
  if (v31)
    CFRelease(v31);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v32 = (const void *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    if (v32)
      CFRelease(v32);
  }
  v33 = (const void *)objc_msgSend(v4, "objectForKey:", CFSTR("signature"));
  v34 = v33;
  if (v33)
    CFRetain(v33);
  v35 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = v34;
  if (v35)
    CFRelease(v35);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v36 = (const void *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    if (v36)
      CFRelease(v36);
  }
  v37 = (const void *)objc_msgSend(v4, "objectForKey:", CFSTR("retryNonce"));
  v38 = v37;
  if (v37)
    CFRetain(v37);
  v39 = (const void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v38;
  if (v39)
    CFRelease(v39);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v40 = (const void *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = 0;
    if (v40)
      CFRelease(v40);
  }
  v41 = (const void *)objc_msgSend(v4, "objectForKey:", CFSTR("initiativeContext"));
  v42 = v41;
  if (v41)
    CFRetain(v41);
  v43 = (const void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v42;
  if (v43)
    CFRelease(v43);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v44 = (const void *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (v44)
      CFRelease(v44);
  }
  v45 = (const void *)objc_msgSend(v4, "objectForKey:", CFSTR("initiative"));
  v46 = v45;
  if (v45)
    CFRetain(v45);
  v47 = (const void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = v46;
  if (v47)
    CFRelease(v47);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v48 = (const void *)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = 0;
    if (v48)
      CFRelease(v48);
  }
  v49 = (const void *)objc_msgSend(v4, "objectForKey:", CFSTR("ampEnrollmentPinning"));
  v50 = v49;
  if (v49)
    CFRetain(v49);
  v51 = (const void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = v50;
  if (v51)
    CFRelease(v51);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v52 = (const void *)*((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = 0;
    if (v52)
      CFRelease(v52);
  }
  v53 = (const void *)objc_msgSend(v4, "objectForKey:", CFSTR("operationalAnalyticsIdentifier"));
  v54 = v53;
  if (v53)
    CFRetain(v53);
  v55 = (const void *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = v54;
  if (v55)
    CFRelease(v55);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v56 = (const void *)*((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = 0;
    if (v56)
      CFRelease(v56);
  }
  v57 = (void *)objc_msgSend(v4, "objectForKey:", CFSTR("signedFields"));
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    v84 = 0;
    v85 = 0;
    if ((isKindOfClass & 1) != 0)
    {
      v88 = 0u;
      v89 = 0u;
      v86 = 0u;
      v87 = 0u;
      v61 = objc_msgSend(v57, "countByEnumeratingWithState:objects:count:", &v86, v90, 16);
      if (v61)
      {
        v62 = *(_QWORD *)v87;
        do
        {
          v63 = 0;
          do
          {
            if (*(_QWORD *)v87 != v62)
              objc_enumerationMutation(v57);
            v64 = *(const void **)(*((_QWORD *)&v86 + 1) + 8 * v63);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              v65 = HIDWORD(v85);
              if (HIDWORD(v85) == (_DWORD)v85)
              {
                v66 = HIDWORD(v85) + ((unint64_t)HIDWORD(v85) >> 2);
                if (v66 >= 0x10)
                  v67 = v66 + 1;
                else
                  v67 = 16;
                if (v67 <= (unint64_t)HIDWORD(v85) + 1)
                  v68 = HIDWORD(v85) + 1;
                else
                  v68 = v67;
                WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v84, v68);
                v65 = HIDWORD(v85);
                *(_QWORD *)(v84 + 8 * HIDWORD(v85)) = v64;
                if (v64)
                {
LABEL_110:
                  CFRetain(v64);
                  v65 = HIDWORD(v85);
                }
              }
              else
              {
                *(_QWORD *)(v84 + 8 * HIDWORD(v85)) = v64;
                if (v64)
                  goto LABEL_110;
              }
              HIDWORD(v85) = v65 + 1;
            }
            ++v63;
          }
          while (v61 != v63);
          v69 = objc_msgSend(v57, "countByEnumeratingWithState:objects:count:", &v86, v90, 16);
          v61 = v69;
        }
        while (v69);
      }
    }
    v80 = v84;
    v70 = v85;
    v84 = 0;
    v85 = 0;
    v81 = v70;
    v82 = 1;
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v84, v60);
    v71 = 1;
  }
  else
  {
    v71 = 0;
    LOBYTE(v80) = 0;
    v82 = 0;
  }
  if (*((unsigned __int8 *)this + 120) == v71)
  {
    if (!*((_BYTE *)this + 120))
      goto LABEL_133;
    v72 = *((unsigned int *)this + 29);
    if ((_DWORD)v72)
    {
      v73 = *v3;
      v74 = 8 * v72;
      do
      {
        v75 = *v73;
        *v73 = 0;
        if (v75)
          CFRelease(v75);
        ++v73;
        v74 -= 8;
      }
      while (v74);
    }
    v76 = (WTF *)*v3;
    if (*v3)
    {
      *((_QWORD *)this + 13) = 0;
      *((_DWORD *)this + 28) = 0;
      WTF::fastFree(v76, v58);
    }
    *((_QWORD *)this + 13) = v80;
    v77 = v81;
    v80 = 0;
    v81 = 0;
    *((_QWORD *)this + 14) = v77;
  }
  else if (*((_BYTE *)this + 120))
  {
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3, v58);
    *((_BYTE *)this + 120) = 0;
  }
  else
  {
    *((_QWORD *)this + 13) = v80;
    v78 = v81;
    v80 = 0;
    v81 = 0;
    *((_QWORD *)this + 14) = v78;
    *((_BYTE *)this + 120) = 1;
  }
  if (v82)
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v80, v58);
LABEL_133:
  if (v4)
    CFRelease(v4);
  return this;
}

void sub_197883F30(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;

  if (a11)
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  if (v14)
    CFRelease(v14);
  if (*(_BYTE *)(v13 + 120))
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v15, a2);
  v17 = *(const void **)(v13 + 96);
  *(_QWORD *)(v13 + 96) = 0;
  if (v17)
    CFRelease(v17);
  v18 = *(const void **)(v13 + 88);
  *(_QWORD *)(v13 + 88) = 0;
  if (v18)
    CFRelease(v18);
  v19 = *(const void **)(v13 + 80);
  *(_QWORD *)(v13 + 80) = 0;
  if (v19)
    CFRelease(v19);
  v20 = *(const void **)(v13 + 72);
  *(_QWORD *)(v13 + 72) = 0;
  if (v20)
    CFRelease(v20);
  v21 = *(const void **)(v13 + 64);
  *(_QWORD *)(v13 + 64) = 0;
  if (v21)
    CFRelease(v21);
  v22 = *(const void **)(v13 + 56);
  *(_QWORD *)(v13 + 56) = 0;
  if (v22)
    CFRelease(v22);
  v23 = *(const void **)(v13 + 48);
  *(_QWORD *)(v13 + 48) = 0;
  if (v23)
    CFRelease(v23);
  v24 = *(const void **)(v13 + 40);
  *(_QWORD *)(v13 + 40) = 0;
  if (v24)
    CFRelease(v24);
  v25 = *(const void **)(v13 + 32);
  *(_QWORD *)(v13 + 32) = 0;
  if (v25)
    CFRelease(v25);
  v26 = *(const void **)(v13 + 24);
  *(_QWORD *)(v13 + 24) = 0;
  if (v26)
    CFRelease(v26);
  v27 = *(const void **)(v13 + 16);
  *(_QWORD *)(v13 + 16) = 0;
  if (v27)
    CFRelease(v27);
  v28 = *(const void **)(v13 + 8);
  *(_QWORD *)(v13 + 8) = 0;
  if (v28)
    CFRelease(v28);
  v29 = *(const void **)v13;
  *(_QWORD *)v13 = 0;
  if (v29)
    CFRelease(v29);
  _Unwind_Resume(exception_object);
}

void WebKit::CoreIPCPKPaymentMerchantSession::toID(WebKit::CoreIPCPKPaymentMerchantSession *this@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t (**v22)(void);
  WKKeyedCoder *v23;

  v4 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 14);
  v5 = v4;
  if (*(_QWORD *)this)
    objc_msgSend(v4, "setObject:forKeyedSubscript:", *(_QWORD *)this, CFSTR("merchantIdentifier"));
  v6 = *((_QWORD *)this + 1);
  if (v6)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v6, CFSTR("merchantSessionIdentifier"));
  v7 = *((_QWORD *)this + 2);
  if (v7)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v7, CFSTR("nonce"));
  v8 = *((_QWORD *)this + 3);
  if (v8)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v8, CFSTR("epochTimestamp"));
  v9 = *((_QWORD *)this + 4);
  if (v9)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v9, CFSTR("expiresAt"));
  v10 = *((_QWORD *)this + 5);
  if (v10)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v10, CFSTR("domainName"));
  v11 = *((_QWORD *)this + 6);
  if (v11)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v11, CFSTR("displayName"));
  v12 = *((_QWORD *)this + 7);
  if (v12)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v12, CFSTR("signature"));
  v13 = *((_QWORD *)this + 8);
  if (v13)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v13, CFSTR("retryNonce"));
  v14 = *((_QWORD *)this + 9);
  if (v14)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v14, CFSTR("initiativeContext"));
  v15 = *((_QWORD *)this + 10);
  if (v15)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v15, CFSTR("initiative"));
  v16 = *((_QWORD *)this + 11);
  if (v16)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v16, CFSTR("ampEnrollmentPinning"));
  v17 = *((_QWORD *)this + 12);
  if (v17)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v17, CFSTR("operationalAnalyticsIdentifier"));
  if (*((_BYTE *)this + 120))
  {
    v18 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *((unsigned int *)this + 29));
    v19 = *((unsigned int *)this + 29);
    if ((_DWORD)v19)
    {
      v20 = (_QWORD *)*((_QWORD *)this + 13);
      v21 = 8 * v19;
      do
      {
        if (*v20)
          objc_msgSend(v18, "addObject:");
        ++v20;
        v21 -= 8;
      }
      while (v21);
    }
    if (v18)
    {
      objc_msgSend(v5, "setObject:forKeyedSubscript:", v18, CFSTR("signedFields"));
      CFRelease(v18);
    }
  }
  v22 = (uint64_t (**)(void))MEMORY[0x1E0DCE120];
  if ((objc_msgSend((id)((uint64_t (*)(void))*MEMORY[0x1E0DCE120])(), "instancesRespondToSelector:", sel__initWithWebKitPropertyListData_) & 1) != 0)
  {
    *a2 = objc_msgSend(objc_alloc((Class)(*v22)()), "_initWithWebKitPropertyListData:", v5);
  }
  else
  {
    v23 = -[WKKeyedCoder initWithDictionary:]([WKKeyedCoder alloc], "initWithDictionary:", v5);
    *a2 = objc_msgSend(objc_alloc((Class)(*v22)()), "initWithCoder:", v23);
    if (v23)
      CFRelease(v23);
  }
}

void sub_1978842DC(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

WebKit::CoreIPCPKPayment *WebKit::CoreIPCPKPayment::CoreIPCPKPayment(WebKit::CoreIPCPKPayment *this, objc_object *a2)
{
  id v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  void (**v11)(void);
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  const void *v36;
  id v38;

  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  WebKit::dictionaryForWebKitSecureCodingType((WebKit *)&v38, a2);
  v3 = v38;
  v4 = (const void *)objc_msgSend(v38, "objectForKey:", CFSTR("token"));
  v5 = v4;
  if (v4)
    CFRetain(v4);
  v6 = *(const void **)this;
  *(_QWORD *)this = v5;
  if (v6)
    CFRelease(v6);
  ((void (*)(void))*MEMORY[0x1E0DCDFC0])();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v7 = *(const void **)this;
    *(_QWORD *)this = 0;
    if (v7)
      CFRelease(v7);
  }
  v8 = (const void *)objc_msgSend(v3, "objectForKey:", CFSTR("shippingContact"));
  v9 = v8;
  if (v8)
    CFRetain(v8);
  v10 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v9;
  if (v10)
    CFRelease(v10);
  v11 = (void (**)(void))MEMORY[0x1E0DCDF38];
  ((void (*)(void))*MEMORY[0x1E0DCDF38])();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v12 = (const void *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v12)
      CFRelease(v12);
  }
  v13 = (const void *)objc_msgSend(v3, "objectForKey:", CFSTR("billingContact"));
  v14 = v13;
  if (v13)
    CFRetain(v13);
  v15 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v14;
  if (v15)
    CFRelease(v15);
  (*v11)();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v16 = (const void *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v16)
      CFRelease(v16);
  }
  v17 = (const void *)objc_msgSend(v3, "objectForKey:", CFSTR("shippingMethod"));
  v18 = v17;
  if (v17)
    CFRetain(v17);
  v19 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v18;
  if (v19)
    CFRelease(v19);
  ((void (*)(void))*MEMORY[0x1E0DCE028])();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v20 = (const void *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v20)
      CFRelease(v20);
  }
  v21 = (const void *)objc_msgSend(v3, "objectForKey:", CFSTR("credential"));
  v22 = v21;
  if (v21)
    CFRetain(v21);
  v23 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v22;
  if (v23)
    CFRelease(v23);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v24 = (const void *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v24)
      CFRelease(v24);
  }
  v25 = (const void *)objc_msgSend(v3, "objectForKey:", CFSTR("authKitAuthenticationResults"));
  v26 = v25;
  if (v25)
    CFRetain(v25);
  v27 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v26;
  if (v27)
    CFRelease(v27);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v28 = (const void *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v28)
      CFRelease(v28);
  }
  v29 = (const void *)objc_msgSend(v3, "objectForKey:", CFSTR("biometryAttempts"));
  v30 = v29;
  if (v29)
    CFRetain(v29);
  v31 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v30;
  if (v31)
    CFRelease(v31);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v32 = (const void *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    if (v32)
      CFRelease(v32);
  }
  v33 = (const void *)objc_msgSend(v3, "objectForKey:", CFSTR("installmentAuthorizationToken"));
  v34 = v33;
  if (v33)
    CFRetain(v33);
  v35 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = v34;
  if (v35)
    CFRelease(v35);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v36 = (const void *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    if (v36)
      CFRelease(v36);
  }
  if (v3)
    CFRelease(v3);
  return this;
}

void sub_197884668(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;

  v3 = *(const void **)(v1 + 56);
  *(_QWORD *)(v1 + 56) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(v1 + 48);
  *(_QWORD *)(v1 + 48) = 0;
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v6)
    CFRelease(v6);
  v7 = *(const void **)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (v7)
    CFRelease(v7);
  v8 = *(const void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v8)
    CFRelease(v8);
  v9 = *(const void **)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v9)
    CFRelease(v9);
  v10 = *(const void **)v1;
  *(_QWORD *)v1 = 0;
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void WebKit::CoreIPCPKPayment::toID(WebKit::CoreIPCPKPayment *this@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (**v13)(void);
  WKKeyedCoder *v14;

  v4 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 8);
  v5 = v4;
  if (*(_QWORD *)this)
    objc_msgSend(v4, "setObject:forKeyedSubscript:", *(_QWORD *)this, CFSTR("token"));
  v6 = *((_QWORD *)this + 1);
  if (v6)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v6, CFSTR("shippingContact"));
  v7 = *((_QWORD *)this + 2);
  if (v7)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v7, CFSTR("billingContact"));
  v8 = *((_QWORD *)this + 3);
  if (v8)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v8, CFSTR("shippingMethod"));
  v9 = *((_QWORD *)this + 4);
  if (v9)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v9, CFSTR("credential"));
  v10 = *((_QWORD *)this + 5);
  if (v10)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v10, CFSTR("authKitAuthenticationResults"));
  v11 = *((_QWORD *)this + 6);
  if (v11)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v11, CFSTR("biometryAttempts"));
  v12 = *((_QWORD *)this + 7);
  if (v12)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v12, CFSTR("installmentAuthorizationToken"));
  v13 = (uint64_t (**)(void))MEMORY[0x1E0DCDF40];
  if ((objc_msgSend((id)((uint64_t (*)(void))*MEMORY[0x1E0DCDF40])(), "instancesRespondToSelector:", sel__initWithWebKitPropertyListData_) & 1) != 0)
  {
    *a2 = objc_msgSend(objc_alloc((Class)(*v13)()), "_initWithWebKitPropertyListData:", v5);
  }
  else
  {
    v14 = -[WKKeyedCoder initWithDictionary:]([WKKeyedCoder alloc], "initWithDictionary:", v5);
    *a2 = objc_msgSend(objc_alloc((Class)(*v13)()), "initWithCoder:", v14);
    if (v14)
      CFRelease(v14);
  }
}

void sub_19788488C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

WebKit::CoreIPCPKPaymentToken *WebKit::CoreIPCPKPaymentToken::CoreIPCPKPaymentToken(WebKit::CoreIPCPKPaymentToken *this, objc_object *a2)
{
  id v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  id v33;

  *((_QWORD *)this + 6) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  WebKit::dictionaryForWebKitSecureCodingType((WebKit *)&v33, a2);
  v3 = v33;
  v4 = (const void *)objc_msgSend(v33, "objectForKey:", CFSTR("paymentInstrumentName"));
  v5 = v4;
  if (v4)
    CFRetain(v4);
  v6 = *(const void **)this;
  *(_QWORD *)this = v5;
  if (v6)
    CFRelease(v6);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v7 = *(const void **)this;
    *(_QWORD *)this = 0;
    if (v7)
      CFRelease(v7);
  }
  v8 = (const void *)objc_msgSend(v3, "objectForKey:", CFSTR("paymentNetwork"));
  v9 = v8;
  if (v8)
    CFRetain(v8);
  v10 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v9;
  if (v10)
    CFRelease(v10);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v11 = (const void *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v11)
      CFRelease(v11);
  }
  v12 = (const void *)objc_msgSend(v3, "objectForKey:", CFSTR("transactionIdentifier"));
  v13 = v12;
  if (v12)
    CFRetain(v12);
  v14 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v13;
  if (v14)
    CFRelease(v14);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v15 = (const void *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v15)
      CFRelease(v15);
  }
  v16 = (const void *)objc_msgSend(v3, "objectForKey:", CFSTR("paymentData"));
  v17 = v16;
  if (v16)
    CFRetain(v16);
  v18 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v17;
  if (v18)
    CFRelease(v18);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v19 = (const void *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v19)
      CFRelease(v19);
  }
  v20 = (const void *)objc_msgSend(v3, "objectForKey:", CFSTR("paymentMethod"));
  v21 = v20;
  if (v20)
    CFRetain(v20);
  v22 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v21;
  if (v22)
    CFRelease(v22);
  ((void (*)(void))*MEMORY[0x1E0DCDFF0])();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v23 = (const void *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v23)
      CFRelease(v23);
  }
  v24 = (const void *)objc_msgSend(v3, "objectForKey:", CFSTR("redeemURL"));
  v25 = v24;
  if (v24)
    CFRetain(v24);
  v26 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v25;
  if (v26)
    CFRelease(v26);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v27 = (const void *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v27)
      CFRelease(v27);
  }
  v28 = (const void *)objc_msgSend(v3, "objectForKey:", CFSTR("retryNonce"));
  v29 = v28;
  if (v28)
    CFRetain(v28);
  v30 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v29;
  if (v30)
    CFRelease(v30);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v31 = (const void *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    if (v31)
      CFRelease(v31);
  }
  if (v3)
    CFRelease(v3);
  return this;
}

void sub_197884B94(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;

  v3 = *(const void **)(v1 + 48);
  *(_QWORD *)(v1 + 48) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (v6)
    CFRelease(v6);
  v7 = *(const void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v7)
    CFRelease(v7);
  v8 = *(const void **)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v8)
    CFRelease(v8);
  v9 = *(const void **)v1;
  *(_QWORD *)v1 = 0;
  if (v9)
    CFRelease(v9);
  _Unwind_Resume(exception_object);
}

void WebKit::CoreIPCPKPaymentToken::toID(WebKit::CoreIPCPKPaymentToken *this@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (**v12)(void);
  WKKeyedCoder *v13;

  v4 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 7);
  v5 = v4;
  if (*(_QWORD *)this)
    objc_msgSend(v4, "setObject:forKeyedSubscript:", *(_QWORD *)this, CFSTR("paymentInstrumentName"));
  v6 = *((_QWORD *)this + 1);
  if (v6)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v6, CFSTR("paymentNetwork"));
  v7 = *((_QWORD *)this + 2);
  if (v7)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v7, CFSTR("transactionIdentifier"));
  v8 = *((_QWORD *)this + 3);
  if (v8)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v8, CFSTR("paymentData"));
  v9 = *((_QWORD *)this + 4);
  if (v9)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v9, CFSTR("paymentMethod"));
  v10 = *((_QWORD *)this + 5);
  if (v10)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v10, CFSTR("redeemURL"));
  v11 = *((_QWORD *)this + 6);
  if (v11)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v11, CFSTR("retryNonce"));
  v12 = (uint64_t (**)(void))MEMORY[0x1E0DCDFC0];
  if ((objc_msgSend((id)((uint64_t (*)(void))*MEMORY[0x1E0DCDFC0])(), "instancesRespondToSelector:", sel__initWithWebKitPropertyListData_) & 1) != 0)
  {
    *a2 = objc_msgSend(objc_alloc((Class)(*v12)()), "_initWithWebKitPropertyListData:", v5);
  }
  else
  {
    v13 = -[WKKeyedCoder initWithDictionary:]([WKKeyedCoder alloc], "initWithDictionary:", v5);
    *a2 = objc_msgSend(objc_alloc((Class)(*v12)()), "initWithCoder:", v13);
    if (v13)
      CFRelease(v13);
  }
}

void sub_197884D8C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

WebKit::CoreIPCPKShippingMethod *WebKit::CoreIPCPKShippingMethod::CoreIPCPKShippingMethod(WebKit::CoreIPCPKShippingMethod *this, objc_object *a2)
{
  id v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  const void *v36;
  const void *v37;
  const void *v38;
  const void *v39;
  const void *v40;
  const void *v41;
  const void *v42;
  const void *v43;
  id v45;

  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  WebKit::dictionaryForWebKitSecureCodingType((WebKit *)&v45, a2);
  v3 = v45;
  v4 = (const void *)objc_msgSend(v45, "objectForKey:", CFSTR("label"));
  v5 = v4;
  if (v4)
    CFRetain(v4);
  v6 = *(const void **)this;
  *(_QWORD *)this = v5;
  if (v6)
    CFRelease(v6);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v7 = *(const void **)this;
    *(_QWORD *)this = 0;
    if (v7)
      CFRelease(v7);
  }
  v8 = (const void *)objc_msgSend(v3, "objectForKey:", CFSTR("amount"));
  v9 = v8;
  if (v8)
    CFRetain(v8);
  v10 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v9;
  if (v10)
    CFRelease(v10);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v11 = (const void *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v11)
      CFRelease(v11);
  }
  v12 = (const void *)objc_msgSend(v3, "objectForKey:", CFSTR("type"));
  v13 = v12;
  if (v12)
    CFRetain(v12);
  v14 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v13;
  if (v14)
    CFRelease(v14);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v15 = (const void *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v15)
      CFRelease(v15);
  }
  v16 = (const void *)objc_msgSend(v3, "objectForKey:", CFSTR("localizedTitle"));
  v17 = v16;
  if (v16)
    CFRetain(v16);
  v18 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v17;
  if (v18)
    CFRelease(v18);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v19 = (const void *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v19)
      CFRelease(v19);
  }
  v20 = (const void *)objc_msgSend(v3, "objectForKey:", CFSTR("localizedAmount"));
  v21 = v20;
  if (v20)
    CFRetain(v20);
  v22 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v21;
  if (v22)
    CFRelease(v22);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v23 = (const void *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v23)
      CFRelease(v23);
  }
  v24 = (const void *)objc_msgSend(v3, "objectForKey:", CFSTR("useDarkColor"));
  v25 = v24;
  if (v24)
    CFRetain(v24);
  v26 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v25;
  if (v26)
    CFRelease(v26);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v27 = (const void *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v27)
      CFRelease(v27);
  }
  v28 = (const void *)objc_msgSend(v3, "objectForKey:", CFSTR("useLargeFont"));
  v29 = v28;
  if (v28)
    CFRetain(v28);
  v30 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v29;
  if (v30)
    CFRelease(v30);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v31 = (const void *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    if (v31)
      CFRelease(v31);
  }
  v32 = (const void *)objc_msgSend(v3, "objectForKey:", CFSTR("identifier"));
  v33 = v32;
  if (v32)
    CFRetain(v32);
  v34 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = v33;
  if (v34)
    CFRelease(v34);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v35 = (const void *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    if (v35)
      CFRelease(v35);
  }
  v36 = (const void *)objc_msgSend(v3, "objectForKey:", CFSTR("detail"));
  v37 = v36;
  if (v36)
    CFRetain(v36);
  v38 = (const void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v37;
  if (v38)
    CFRelease(v38);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v39 = (const void *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = 0;
    if (v39)
      CFRelease(v39);
  }
  v40 = (const void *)objc_msgSend(v3, "objectForKey:", CFSTR("dateComponentsRange"));
  v41 = v40;
  if (v40)
    CFRetain(v40);
  v42 = (const void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v41;
  if (v42)
    CFRelease(v42);
  ((void (*)(void))*MEMORY[0x1E0DCE0C0])();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v43 = (const void *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (v43)
      CFRelease(v43);
  }
  if (v3)
    CFRelease(v3);
  return this;
}

void sub_1978851CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;

  v3 = *(const void **)(v1 + 72);
  *(_QWORD *)(v1 + 72) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(v1 + 64);
  *(_QWORD *)(v1 + 64) = 0;
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(v1 + 56);
  *(_QWORD *)(v1 + 56) = 0;
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(v1 + 48);
  *(_QWORD *)(v1 + 48) = 0;
  if (v6)
    CFRelease(v6);
  v7 = *(const void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;
  if (v7)
    CFRelease(v7);
  v8 = *(const void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v8)
    CFRelease(v8);
  v9 = *(const void **)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (v9)
    CFRelease(v9);
  v10 = *(const void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v10)
    CFRelease(v10);
  v11 = *(const void **)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v11)
    CFRelease(v11);
  v12 = *(const void **)v1;
  *(_QWORD *)v1 = 0;
  if (v12)
    CFRelease(v12);
  _Unwind_Resume(exception_object);
}

void WebKit::CoreIPCPKShippingMethod::toID(WebKit::CoreIPCPKShippingMethod *this@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (**v15)(void);
  WKKeyedCoder *v16;

  v4 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 10);
  v5 = v4;
  if (*(_QWORD *)this)
    objc_msgSend(v4, "setObject:forKeyedSubscript:", *(_QWORD *)this, CFSTR("label"));
  v6 = *((_QWORD *)this + 1);
  if (v6)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v6, CFSTR("amount"));
  v7 = *((_QWORD *)this + 2);
  if (v7)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v7, CFSTR("type"));
  v8 = *((_QWORD *)this + 3);
  if (v8)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v8, CFSTR("localizedTitle"));
  v9 = *((_QWORD *)this + 4);
  if (v9)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v9, CFSTR("localizedAmount"));
  v10 = *((_QWORD *)this + 5);
  if (v10)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v10, CFSTR("useDarkColor"));
  v11 = *((_QWORD *)this + 6);
  if (v11)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v11, CFSTR("useLargeFont"));
  v12 = *((_QWORD *)this + 7);
  if (v12)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v12, CFSTR("identifier"));
  v13 = *((_QWORD *)this + 8);
  if (v13)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v13, CFSTR("detail"));
  v14 = *((_QWORD *)this + 9);
  if (v14)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v14, CFSTR("dateComponentsRange"));
  v15 = (uint64_t (**)(void))MEMORY[0x1E0DCE028];
  if ((objc_msgSend((id)((uint64_t (*)(void))*MEMORY[0x1E0DCE028])(), "instancesRespondToSelector:", sel__initWithWebKitPropertyListData_) & 1) != 0)
  {
    *a2 = objc_msgSend(objc_alloc((Class)(*v15)()), "_initWithWebKitPropertyListData:", v5);
  }
  else
  {
    v16 = -[WKKeyedCoder initWithDictionary:]([WKKeyedCoder alloc], "initWithDictionary:", v5);
    *a2 = objc_msgSend(objc_alloc((Class)(*v15)()), "initWithCoder:", v16);
    if (v16)
      CFRelease(v16);
  }
}

void sub_19788544C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

WebKit::CoreIPCPKDateComponentsRange *WebKit::CoreIPCPKDateComponentsRange::CoreIPCPKDateComponentsRange(WebKit::CoreIPCPKDateComponentsRange *this, objc_object *a2)
{
  id v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  id v13;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  WebKit::dictionaryForWebKitSecureCodingType((WebKit *)&v13, a2);
  v3 = v13;
  v4 = (const void *)objc_msgSend(v13, "objectForKey:", CFSTR("startDateComponents"));
  v5 = v4;
  if (v4)
    CFRetain(v4);
  v6 = *(const void **)this;
  *(_QWORD *)this = v5;
  if (v6)
    CFRelease(v6);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v7 = *(const void **)this;
    *(_QWORD *)this = 0;
    if (v7)
      CFRelease(v7);
  }
  v8 = (const void *)objc_msgSend(v3, "objectForKey:", CFSTR("endDateComponents"));
  v9 = v8;
  if (v8)
    CFRetain(v8);
  v10 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v9;
  if (v10)
    CFRelease(v10);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v11 = (const void *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v11)
      CFRelease(v11);
  }
  if (v3)
    CFRelease(v3);
  return this;
}

void sub_19788556C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;
  const void *v4;

  v3 = *(const void **)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)v1;
  *(_QWORD *)v1 = 0;
  if (v4)
    CFRelease(v4);
  _Unwind_Resume(exception_object);
}

void WebKit::CoreIPCPKDateComponentsRange::toID(WebKit::CoreIPCPKDateComponentsRange *this@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t (**v7)(void);
  WKKeyedCoder *v8;

  v4 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 2);
  v5 = v4;
  if (*(_QWORD *)this)
    objc_msgSend(v4, "setObject:forKeyedSubscript:", *(_QWORD *)this, CFSTR("startDateComponents"));
  v6 = *((_QWORD *)this + 1);
  if (v6)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v6, CFSTR("endDateComponents"));
  v7 = (uint64_t (**)(void))MEMORY[0x1E0DCE0C0];
  if ((objc_msgSend((id)((uint64_t (*)(void))*MEMORY[0x1E0DCE0C0])(), "instancesRespondToSelector:", sel__initWithWebKitPropertyListData_) & 1) != 0)
  {
    *a2 = objc_msgSend(objc_alloc((Class)(*v7)()), "_initWithWebKitPropertyListData:", v5);
  }
  else
  {
    v8 = -[WKKeyedCoder initWithDictionary:]([WKKeyedCoder alloc], "initWithDictionary:", v5);
    *a2 = objc_msgSend(objc_alloc((Class)(*v7)()), "initWithCoder:", v8);
    if (v8)
      CFRelease(v8);
  }
}

void sub_19788569C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

WebKit::CoreIPCPKPaymentMethod *WebKit::CoreIPCPKPaymentMethod::CoreIPCPKPaymentMethod(WebKit::CoreIPCPKPaymentMethod *this, objc_object *a2)
{
  id v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  id v37;

  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  WebKit::dictionaryForWebKitSecureCodingType((WebKit *)&v37, a2);
  v3 = v37;
  v4 = (const void *)objc_msgSend(v37, "objectForKey:", CFSTR("type"));
  v5 = v4;
  if (v4)
    CFRetain(v4);
  v6 = *(const void **)this;
  *(_QWORD *)this = v5;
  if (v6)
    CFRelease(v6);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v7 = *(const void **)this;
    *(_QWORD *)this = 0;
    if (v7)
      CFRelease(v7);
  }
  v8 = (const void *)objc_msgSend(v3, "objectForKey:", CFSTR("displayName"));
  v9 = v8;
  if (v8)
    CFRetain(v8);
  v10 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v9;
  if (v10)
    CFRelease(v10);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v11 = (const void *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v11)
      CFRelease(v11);
  }
  v12 = (const void *)objc_msgSend(v3, "objectForKey:", CFSTR("network"));
  v13 = v12;
  if (v12)
    CFRetain(v12);
  v14 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v13;
  if (v14)
    CFRelease(v14);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v15 = (const void *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v15)
      CFRelease(v15);
  }
  v16 = (const void *)objc_msgSend(v3, "objectForKey:", CFSTR("paymentPass"));
  v17 = v16;
  if (v16)
    CFRetain(v16);
  v18 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v17;
  if (v18)
    CFRelease(v18);
  ((void (*)(void))*MEMORY[0x1E0DCE088])();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v19 = (const void *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v19)
      CFRelease(v19);
  }
  v20 = (const void *)objc_msgSend(v3, "objectForKey:", CFSTR("peerPaymentQuoteIdentifier"));
  v21 = v20;
  if (v20)
    CFRetain(v20);
  v22 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v21;
  if (v22)
    CFRelease(v22);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v23 = (const void *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v23)
      CFRelease(v23);
  }
  v24 = (const void *)objc_msgSend(v3, "objectForKey:", CFSTR("billingAddress"));
  v25 = v24;
  if (v24)
    CFRetain(v24);
  v26 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v25;
  if (v26)
    CFRelease(v26);
  ((void (*)(void))*MEMORY[0x1E0DCDF30])();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v27 = (const void *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v27)
      CFRelease(v27);
  }
  v28 = (const void *)objc_msgSend(v3, "objectForKey:", CFSTR("installmentBindToken"));
  v29 = v28;
  if (v28)
    CFRetain(v28);
  v30 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v29;
  if (v30)
    CFRelease(v30);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v31 = (const void *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    if (v31)
      CFRelease(v31);
  }
  v32 = (const void *)objc_msgSend(v3, "objectForKey:", CFSTR("usePeerPaymentBalance"));
  v33 = v32;
  if (v32)
    CFRetain(v32);
  v34 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = v33;
  if (v34)
    CFRelease(v34);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v35 = (const void *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    if (v35)
    {
      CFRelease(v35);
      if (!v3)
        return this;
      goto LABEL_57;
    }
  }
  if (v3)
LABEL_57:
    CFRelease(v3);
  return this;
}

void sub_197885A1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;

  v3 = *(const void **)(v1 + 56);
  *(_QWORD *)(v1 + 56) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(v1 + 48);
  *(_QWORD *)(v1 + 48) = 0;
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v6)
    CFRelease(v6);
  v7 = *(const void **)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (v7)
    CFRelease(v7);
  v8 = *(const void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v8)
    CFRelease(v8);
  v9 = *(const void **)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v9)
    CFRelease(v9);
  v10 = *(const void **)v1;
  *(_QWORD *)v1 = 0;
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void WebKit::CoreIPCPKPaymentMethod::toID(WebKit::CoreIPCPKPaymentMethod *this@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (**v13)(void);
  WKKeyedCoder *v14;

  v4 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 8);
  v5 = v4;
  if (*(_QWORD *)this)
    objc_msgSend(v4, "setObject:forKeyedSubscript:", *(_QWORD *)this, CFSTR("type"));
  v6 = *((_QWORD *)this + 1);
  if (v6)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v6, CFSTR("displayName"));
  v7 = *((_QWORD *)this + 2);
  if (v7)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v7, CFSTR("network"));
  v8 = *((_QWORD *)this + 3);
  if (v8)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v8, CFSTR("paymentPass"));
  v9 = *((_QWORD *)this + 4);
  if (v9)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v9, CFSTR("peerPaymentQuoteIdentifier"));
  v10 = *((_QWORD *)this + 5);
  if (v10)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v10, CFSTR("billingAddress"));
  v11 = *((_QWORD *)this + 6);
  if (v11)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v11, CFSTR("installmentBindToken"));
  v12 = *((_QWORD *)this + 7);
  if (v12)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v12, CFSTR("usePeerPaymentBalance"));
  v13 = (uint64_t (**)(void))MEMORY[0x1E0DCDFF0];
  if ((objc_msgSend((id)((uint64_t (*)(void))*MEMORY[0x1E0DCDFF0])(), "instancesRespondToSelector:", sel__initWithWebKitPropertyListData_) & 1) != 0)
  {
    *a2 = objc_msgSend(objc_alloc((Class)(*v13)()), "_initWithWebKitPropertyListData:", v5);
  }
  else
  {
    v14 = -[WKKeyedCoder initWithDictionary:]([WKKeyedCoder alloc], "initWithDictionary:", v5);
    *a2 = objc_msgSend(objc_alloc((Class)(*v13)()), "initWithCoder:", v14);
    if (v14)
      CFRelease(v14);
  }
}

void sub_197885C44(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void IPC::Connection::platformInvalidate(IPC::Connection *this)
{
  WTF *v2;
  mach_port_name_t v3;
  ipc_space_t *v4;

  if (*((_BYTE *)this + 72))
  {
    std::unique_ptr<IPC::MachMessage>::reset[abi:sn180100]((uint64_t *)this + 43, 0);
    *((_BYTE *)this + 72) = 0;
    IPC::Connection::cancelSendSource(this);
    IPC::Connection::cancelReceiveSource((dispatch_source_t *)this);
  }
  else
  {
    v2 = (WTF *)*((unsigned int *)this + 78);
    if (((_DWORD)v2 + 1) >= 2)
    {
      WTF::deallocateSendRightSafely(v2);
      *((_DWORD *)this + 78) = 0;
    }
    if (*((_QWORD *)this + 42))
      IPC::Connection::cancelReceiveSource((dispatch_source_t *)this);
    v3 = *((_DWORD *)this + 82);
    if (v3)
    {
      v4 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
      mach_port_unguard(*MEMORY[0x1E0C83DA0], v3, (mach_port_context_t)this);
      IPC::requestNoSenderNotifications(*((_DWORD *)this + 82), 0);
      mach_port_mod_refs(*v4, *((_DWORD *)this + 82), 1u, -1);
      *((_DWORD *)this + 82) = 0;
    }
  }
}

void IPC::Connection::cancelReceiveSource(dispatch_source_t *this)
{
  dispatch_source_t v2;

  dispatch_source_cancel(this[42]);
  v2 = this[42];
  if (v2)

  this[42] = 0;
  *((_DWORD *)this + 82) = 0;
}

void IPC::Connection::cancelSendSource(IPC::Connection *this)
{
  NSObject *v2;
  void *v3;

  *((_DWORD *)this + 78) = 0;
  v2 = *((_QWORD *)this + 40);
  if (v2)
  {
    dispatch_source_cancel(v2);
    v3 = (void *)*((_QWORD *)this + 40);
    if (v3)

    *((_QWORD *)this + 40) = 0;
  }
}

unsigned __int8 ***__destroy_helper_block_e8_32c44_ZTSKZN3IPC10Connection12platformOpenEvE3__0(uint64_t a1)
{
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 40));
}

uint64_t ___ZN3IPC10Connection12platformOpenEv_block_invoke_2(uint64_t a1)
{
  ipc_space_t *v2;

  v2 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
  mach_port_unguard(*MEMORY[0x1E0C83DA0], *(_DWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
  IPC::requestNoSenderNotifications(*(_DWORD *)(a1 + 40), 0);
  return mach_port_mod_refs(*v2, *(_DWORD *)(a1 + 40), 1u, -1);
}

unsigned __int8 ***__destroy_helper_block_e8_32c44_ZTSKZN3IPC10Connection12platformOpenEvE3__1(uint64_t a1)
{
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 32));
}

uint64_t WTF::makeString<WTF::ASCIILiteral,WTF::HexNumberBuffer,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,IPC::MessageName,char>(_QWORD *a1, uint64_t a2, _BYTE *a3, uint64_t a4, unsigned __int16 a5)
{
  size_t v5;
  unsigned __int16 v6;
  int v9;
  int v10;
  unsigned int *v11;
  unsigned __int16 v12;
  unsigned int v13;
  uint64_t result;
  unsigned int v15;
  _DWORD *v16;
  _BYTE *v17;
  size_t v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  unsigned __int16 v24;
  unsigned int v25;
  void *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  _BYTE v30[4];
  unsigned int v31;
  _DWORD *v32;

  if (a4)
    v5 = a4 - 1;
  else
    v5 = 0;
  if (v5 >> 31)
  {
    __break(0xC471u);
    goto LABEL_30;
  }
  v6 = a5;
  v9 = 0;
  v11 = (unsigned int *)(a2 + 16);
  v10 = *(_DWORD *)(a2 + 16);
  v12 = a5;
  do
  {
    ++v9;
    v13 = v12;
    v12 /= 0xAu;
  }
  while (v13 > 9);
  result = WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(23, v10, 11, v5, 3, v9, 1, (uint64_t)v30);
  if (v30[0])
    goto LABEL_29;
  v15 = v31;
  if (!v31)
  {
    v29 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    *a1 = v29;
    return result;
  }
  if ((v31 & 0x80000000) != 0 || (result = WTF::tryFastCompactMalloc((WTF *)(v31 + 20)), (v16 = v32) == 0))
  {
LABEL_29:
    *a1 = 0;
    __break(0xC471u);
LABEL_30:
    JUMPOUT(0x19788600CLL);
  }
  *v32 = 2;
  v16[1] = v15;
  *((_QWORD *)v16 + 1) = v16 + 5;
  v16[4] = 4;
  qmemcpy(v16 + 5, "Unhandled error code 0x", 23);
  v17 = (char *)v16 + 43;
  v18 = *v11;
  if ((_DWORD)v18)
  {
    v19 = (char *)v11 - v18;
    if ((_DWORD)v18 == 1)
      *v17 = *v19;
    else
      result = (uint64_t)memcpy((char *)v16 + 43, v19, v18);
  }
  v20 = &v17[*v11];
  *(_QWORD *)v20 = *(_QWORD *)", message '";
  *(_DWORD *)(v20 + 7) = 656434535;
  v21 = v20 + 11;
  if ((_DWORD)v5)
  {
    if ((_DWORD)v5 == 1)
      *v21 = *a3;
    else
      result = (uint64_t)memcpy(v20 + 11, a3, v5);
  }
  v22 = 0;
  v23 = &v21[v5];
  v23[2] = 40;
  *(_WORD *)v23 = 8231;
  v24 = v6;
  do
  {
    v25 = v24;
    *((_BYTE *)&v32 + v22-- + 6) = (v24 % 0xAu) | 0x30;
    v24 /= 0xAu;
  }
  while (v25 > 9);
  v26 = v23 + 3;
  if (v22 + 8 <= 7)
    result = (uint64_t)memcpy(v26, (char *)&v32 + v22 + 7, -v22);
  v27 = 0;
  do
  {
    ++v27;
    v28 = v6;
    v6 /= 0xAu;
  }
  while (v28 >= 0xA);
  *((_BYTE *)v26 + v27) = 41;
  *a1 = v16;
  return result;
}

uint64_t WebKit::logAndSetCrashLogMessage(WebKit *this, const char *a2)
{
  const char *v3;

  WTFLogAlways();
  return WTF::setCrashLogMessage(this, v3);
}

uint64_t **__copy_helper_block_e8_32c52_ZTSKZN3IPC10Connection20initializeSendSourceEvE3__0(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)(a1 + 40), (uint64_t **)(a2 + 40));
}

unsigned __int8 ***__destroy_helper_block_e8_32c52_ZTSKZN3IPC10Connection20initializeSendSourceEvE3__0(uint64_t a1)
{
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 40));
}

uint64_t ___ZN3IPC10Connection20initializeSendSourceEv_block_invoke_8(uint64_t a1)
{
  IPC::Connection *v1;
  uint64_t result;
  void *v3;

  v1 = *(IPC::Connection **)(a1 + 32);
  result = *((_QWORD *)v1 + 40);
  if (result)
  {
    result = dispatch_source_get_data((dispatch_source_t)result);
    if ((result & 8) != 0)
      return IPC::Connection::resumeSendSource(v1, v3);
  }
  return result;
}

uint64_t **__copy_helper_block_e8_32c52_ZTSKZN3IPC10Connection20initializeSendSourceEvE3__1(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)(a1 + 40), (uint64_t **)(a2 + 40));
}

unsigned __int8 ***__destroy_helper_block_e8_32c52_ZTSKZN3IPC10Connection20initializeSendSourceEvE3__1(uint64_t a1)
{
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 40));
}

uint64_t ___ZN3IPC10Connection20initializeSendSourceEv_block_invoke_10(uint64_t a1)
{
  return WTF::deallocateSendRightSafely((WTF *)*(unsigned int *)(a1 + 32));
}

_xpc_connection_s *IPC::Connection::remoteProcessID(IPC::Connection *this)
{
  _xpc_connection_s *result;

  result = (_xpc_connection_s *)*((_QWORD *)this + 44);
  if (result)
    return (_xpc_connection_s *)xpc_connection_get_pid(result);
  return result;
}

void WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::send(xpc_connection_t *a1, uint64_t a2, uint64_t a3)
{
  xpc_object_t message;

  (*((void (**)(xpc_connection_t *))*a1 + 2))(a1);
  (*((void (**)(xpc_object_t *__return_ptr, xpc_connection_t *, uint64_t, uint64_t))*a1 + 4))(&message, a1, a2, a3);
  xpc_connection_send_message(a1[2], message);
  if (message)

}

void sub_197886188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10)

  _Unwind_Resume(exception_object);
}

void WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::sendWithReply(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  id v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  id v12;

  (*(void (**)(_QWORD *))(*a1 + 16))(a1);
  (*(void (**)(id *__return_ptr, _QWORD *, uint64_t, uint64_t))(*a1 + 32))(&v12, a1, a2, a3);
  v8 = v12;
  v9 = *a4;
  *a4 = 0;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = &off_1E3508B20;
  v10[1] = v9;
  v11 = v10;
  WebKit::Daemon::Connection::sendWithReply(a1, v8, (uint64_t *)&v11);
  if (v11)
    (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  if (v12)

}

void sub_197886254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a10)

  _Unwind_Resume(exception_object);
}

void WebKit::Daemon::Connection::sendWithReply(_QWORD *a1, void *a2, uint64_t *a3)
{
  _xpc_connection_s *v6;
  uint64_t v7;
  _QWORD *v8;

  (*(void (**)(_QWORD *))(*a1 + 16))(a1);
  v6 = (_xpc_connection_s *)a1[2];
  v7 = *a3;
  *a3 = 0;
  v8 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  *v8 = MEMORY[0x1E0C809A0];
  v8[1] = 50331650;
  v8[2] = WTF::BlockPtr<void ()(NSObject  {objcproto13OS_xpc_object}*)>::fromCallable<WebKit::Daemon::Connection::sendWithReply(NSObject  {objcproto13OS_xpc_object}*,WTF::CompletionHandler<void ()(NSObject  {objcproto13OS_xpc_object}*)> &&)::$_0>(WebKit::Daemon::Connection::sendWithReply(NSObject  {objcproto13OS_xpc_object}*,WTF::CompletionHandler<void ()(NSObject  {objcproto13OS_xpc_object}*)> &&)::$_0)::{lambda(void *,NSObject  {objcproto13OS_xpc_object}*)#1}::__invoke;
  v8[3] = &WTF::BlockPtr<void ()(NSObject  {objcproto13OS_xpc_object}*)>::fromCallable<WebKit::Daemon::Connection::sendWithReply(NSObject  {objcproto13OS_xpc_object}*,WTF::CompletionHandler<void ()(NSObject  {objcproto13OS_xpc_object}*)> &&)::$_0>(WebKit::Daemon::Connection::sendWithReply(NSObject  {objcproto13OS_xpc_object}*,WTF::CompletionHandler<void ()(NSObject  {objcproto13OS_xpc_object}*)> &&)::$_0)::descriptor;
  v8[4] = v7;
  xpc_connection_send_message_with_reply(v6, a2, MEMORY[0x1E0C80D38], v8);
  _Block_release(v8);
}

void sub_19788633C(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

WTF *WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::initializeConnectionIfNeeded(WTF *result)
{
  uint64_t v1;
  uint64_t v2;
  const char *v3;
  _xpc_connection_s *mach_service;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  void *v9;
  unsigned int v10;
  unsigned int v11;
  void *v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD handler[4];
  WTF *v16;

  if (!*((_QWORD *)result + 2))
  {
    v1 = (uint64_t)result;
    v2 = *((_QWORD *)result + 3);
    if (v2)
      v3 = (const char *)(v2 + 16);
    else
      v3 = 0;
    mach_service = xpc_connection_create_mach_service(v3, MEMORY[0x1E0C80D38], 0);
    v5 = *(void **)(v1 + 16);
    *(_QWORD *)(v1 + 16) = mach_service;
    if (v5)
    {

      mach_service = *(_xpc_connection_s **)(v1 + 16);
    }
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 3321888768;
    handler[2] = ___ZNK6WebKit6Daemon23ConnectionToMachServiceINS_3PCM16ConnectionTraitsEE28initializeConnectionIfNeededEv_block_invoke;
    handler[3] = &__block_descriptor_40_e8_32c149_ZTSKZNK6WebKit6Daemon23ConnectionToMachServiceINS_3PCM16ConnectionTraitsEE28initializeConnectionIfNeededEvEUlPU24objcproto13OS_xpc_object8NSObjectE__e33_v16__0__NSObject_OS_xpc_object__8l;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v1 + 8), v1);
    v6 = *(unsigned int **)(v1 + 8);
    if (v6)
    {
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
      do
        v8 = __ldaxr(v6);
      while (__stlxr(v8 + 1, v6));
    }
    v16 = (WTF *)v6;
    xpc_connection_set_event_handler(mach_service, handler);
    if (v6)
    {
      do
      {
        v10 = __ldaxr(v6);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v6));
      if (!v11)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, v9);
      }
    }
    xpc_connection_activate(*(xpc_connection_t *)(v1 + 16));
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
    result = v16;
    v16 = 0;
    if (result)
    {
      do
      {
        v13 = __ldaxr((unsigned int *)result);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, (unsigned int *)result));
      if (!v14)
      {
        atomic_store(1u, (unsigned int *)result);
        return (WTF *)WTF::fastFree(result, v12);
      }
    }
  }
  return result;
}

void sub_1978864BC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14)
{
  unsigned int *v14;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;

  if (!a14)
    goto LABEL_4;
  do
  {
    v16 = __ldaxr((unsigned int *)a14);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, (unsigned int *)a14));
  if (!v17)
  {
    atomic_store(1u, (unsigned int *)a14);
    WTF::fastFree(a14, a2);
    if (!v14)
      goto LABEL_11;
  }
  else
  {
LABEL_4:
    if (!v14)
      goto LABEL_11;
  }
  do
  {
    v18 = __ldaxr(v14);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v14));
  if (!v19)
  {
    atomic_store(1u, v14);
    WTF::fastFree((WTF *)v14, a2);
  }
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t ___ZNK6WebKit6Daemon23ConnectionToMachServiceINS_3PCM16ConnectionTraitsEE28initializeConnectionIfNeededEv_block_invoke(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v2 = *(_QWORD *)(result + 32);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v4 = result;
    if (a2 == MEMORY[0x1E0C81260])
    {
      v5 = xpc_connection_copy_invalidation_reason();
      WTFLogAlways();
      if (v5)
        MEMORY[0x19AEB9354](v5, 0x1000C8077774924);
    }
    v6 = *(_QWORD *)(v4 + 32);
    if (a2 == MEMORY[0x1E0C81258])
    {
      if (v6)
        v7 = *(_QWORD *)(v6 + 8);
      else
        v7 = 0;
      v8 = *(void **)(v7 + 16);
      if (v8)
      {

        v6 = *(_QWORD *)(v4 + 32);
      }
      *(_QWORD *)(v7 + 16) = 0;
    }
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v6 + 8) + 40))(*(_QWORD *)(v6 + 8), a2);
  }
  return result;
}

void sub_197886648(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    MEMORY[0x19AEB9354](v1, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c149_ZTSKZNK6WebKit6Daemon23ConnectionToMachServiceINS_3PCM16ConnectionTraitsEE28initializeConnectionIfNeededEvEUlPU24objcproto13OS_xpc_object8NSObjectE_(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;

  v2 = *(unsigned int **)(a2 + 32);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  *(_QWORD *)(result + 32) = v2;
  return result;
}

unsigned int *__destroy_helper_block_e8_32c149_ZTSKZNK6WebKit6Daemon23ConnectionToMachServiceINS_3PCM16ConnectionTraitsEE28initializeConnectionIfNeededEvEUlPU24objcproto13OS_xpc_object8NSObjectE_(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

WTF *WebKit::Daemon::ConnectionToMachService<WebKit::WebPushD::ConnectionTraits>::initializeConnectionIfNeeded(WTF *result)
{
  uint64_t v1;
  uint64_t v2;
  const char *v3;
  _xpc_connection_s *mach_service;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  void *v9;
  unsigned int v10;
  unsigned int v11;
  void *v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD handler[4];
  WTF *v16;

  if (!*((_QWORD *)result + 2))
  {
    v1 = (uint64_t)result;
    v2 = *((_QWORD *)result + 3);
    if (v2)
      v3 = (const char *)(v2 + 16);
    else
      v3 = 0;
    mach_service = xpc_connection_create_mach_service(v3, MEMORY[0x1E0C80D38], 0);
    v5 = *(void **)(v1 + 16);
    *(_QWORD *)(v1 + 16) = mach_service;
    if (v5)
    {

      mach_service = *(_xpc_connection_s **)(v1 + 16);
    }
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 3321888768;
    handler[2] = ___ZNK6WebKit6Daemon23ConnectionToMachServiceINS_8WebPushD16ConnectionTraitsEE28initializeConnectionIfNeededEv_block_invoke;
    handler[3] = &__block_descriptor_40_e8_32c154_ZTSKZNK6WebKit6Daemon23ConnectionToMachServiceINS_8WebPushD16ConnectionTraitsEE28initializeConnectionIfNeededEvEUlPU24objcproto13OS_xpc_object8NSObjectE__e33_v16__0__NSObject_OS_xpc_object__8l;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v1 + 8), v1);
    v6 = *(unsigned int **)(v1 + 8);
    if (v6)
    {
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
      do
        v8 = __ldaxr(v6);
      while (__stlxr(v8 + 1, v6));
    }
    v16 = (WTF *)v6;
    xpc_connection_set_event_handler(mach_service, handler);
    if (v6)
    {
      do
      {
        v10 = __ldaxr(v6);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v6));
      if (!v11)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, v9);
      }
    }
    xpc_connection_activate(*(xpc_connection_t *)(v1 + 16));
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
    result = v16;
    v16 = 0;
    if (result)
    {
      do
      {
        v13 = __ldaxr((unsigned int *)result);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, (unsigned int *)result));
      if (!v14)
      {
        atomic_store(1u, (unsigned int *)result);
        return (WTF *)WTF::fastFree(result, v12);
      }
    }
  }
  return result;
}

void sub_197886814(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14)
{
  unsigned int *v14;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;

  if (!a14)
    goto LABEL_4;
  do
  {
    v16 = __ldaxr((unsigned int *)a14);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, (unsigned int *)a14));
  if (!v17)
  {
    atomic_store(1u, (unsigned int *)a14);
    WTF::fastFree(a14, a2);
    if (!v14)
      goto LABEL_11;
  }
  else
  {
LABEL_4:
    if (!v14)
      goto LABEL_11;
  }
  do
  {
    v18 = __ldaxr(v14);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v14));
  if (!v19)
  {
    atomic_store(1u, v14);
    WTF::fastFree((WTF *)v14, a2);
  }
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t ___ZNK6WebKit6Daemon23ConnectionToMachServiceINS_8WebPushD16ConnectionTraitsEE28initializeConnectionIfNeededEv_block_invoke(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v2 = *(_QWORD *)(result + 32);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v4 = result;
    if (a2 == MEMORY[0x1E0C81260])
    {
      v5 = xpc_connection_copy_invalidation_reason();
      WTFLogAlways();
      if (v5)
        MEMORY[0x19AEB9354](v5, 0x1000C8077774924);
    }
    v6 = *(_QWORD *)(v4 + 32);
    if (a2 == MEMORY[0x1E0C81258])
    {
      if (v6)
        v7 = *(_QWORD *)(v6 + 8);
      else
        v7 = 0;
      v8 = *(void **)(v7 + 16);
      if (v8)
      {

        v6 = *(_QWORD *)(v4 + 32);
      }
      *(_QWORD *)(v7 + 16) = 0;
    }
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v6 + 8) + 40))(*(_QWORD *)(v6 + 8), a2);
  }
  return result;
}

void sub_1978869A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    MEMORY[0x19AEB9354](v1, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c154_ZTSKZNK6WebKit6Daemon23ConnectionToMachServiceINS_8WebPushD16ConnectionTraitsEE28initializeConnectionIfNeededEvEUlPU24objcproto13OS_xpc_object8NSObjectE_(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;

  v2 = *(unsigned int **)(a2 + 32);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  *(_QWORD *)(result + 32) = v2;
  return result;
}

unsigned int *__destroy_helper_block_e8_32c154_ZTSKZNK6WebKit6Daemon23ConnectionToMachServiceINS_8WebPushD16ConnectionTraitsEE28initializeConnectionIfNeededEvEUlPU24objcproto13OS_xpc_object8NSObjectE_(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void WebKit::transcode(WebKit *this@<X0>, const __CFString *a2@<X1>, __CFData **a3@<X8>)
{
  __CFData *v7;
  CGImageDestination *v8;
  _BOOL4 v9;
  __CFData *v10;

  if (this)
  {
    v7 = (__CFData *)objc_alloc_init(MEMORY[0x1E0C99DF0]);
    v8 = CGImageDestinationCreateWithData(v7, a2, 1uLL, 0);
    CGImageDestinationAddImage(v8, this, 0);
    v9 = CGImageDestinationFinalize(v8);
    if (v9)
      v10 = v7;
    else
      v10 = 0;
    if (v9)
      v7 = 0;
    *a3 = v10;
    if (v8)
      CFRelease(v8);
    if (v7)
      CFRelease(v7);
  }
  else
  {
    *a3 = 0;
  }
}

void sub_197886ABC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::transcodeWithPreferredMIMEType(WebKit *this, CGImage *a2, const __CFString *a3)
{
  const __CFString *v5;
  const __CFString *v6;
  const WTF::String *v7;
  WTF::StringImpl *v8;
  int isSupportedImageType;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v5 = (const __CFString *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CEC3F8], "typeWithMIMEType:conformingToType:", a3, *MEMORY[0x1E0CEC520]), "identifier");
  v6 = v5;
  if (v5)
    CFRetain(v5);
  MEMORY[0x19AEABCC8](&v12, v6);
  isSupportedImageType = WebCore::isSupportedImageType((WebCore *)&v12, v7);
  v10 = v12;
  v12 = 0;
  if (!v10)
  {
LABEL_6:
    if (!isSupportedImageType)
      goto LABEL_13;
    goto LABEL_9;
  }
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
    goto LABEL_6;
  }
  WTF::StringImpl::destroy(v10, v8);
  if (!isSupportedImageType)
    goto LABEL_13;
LABEL_9:
  WebKit::transcode(a2, v6, &v12);
  v11 = v12;
  if (-[WTF::StringImpl length](v12, "length"))
  {
    *(_QWORD *)this = v11;
    *((_QWORD *)this + 1) = v6;
    return;
  }
  if (v11)
    CFRelease(v11);
LABEL_13:
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  if (v6)
    CFRelease(v6);
}

void sub_197886BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;
  const void *v11;

  if (v11)
    CFRelease(v11);
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void WebKit::makeTextRecognitionResult(void *a1@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  void *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  int v24;
  char v25;
  int v26;
  unsigned int v27;
  int v28;
  const char *v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  WTF::StringImpl *v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  char v48;
  BOOL v49;
  void *v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  void *v58;
  void *v59;
  unint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t i;
  void *v66;
  void *v67;
  const void *v68;
  const void *v69;
  void *v70;
  unint64_t v71;
  void *v72;
  unint64_t v73;
  _OWORD *v74;
  uint64_t v75;
  _OWORD *v76;
  unsigned int v77;
  uint64_t v78;
  CFTypeRef v79;
  WTF *v80;
  CFTypeRef v81;
  uint64_t v82;
  const void *v83;
  const void *v84;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  void *v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  _BYTE v97[40];
  uint64_t v98;
  __int16 v99;
  CFTypeRef cf[2];
  __int128 v101;
  WTF::StringImpl *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  _BYTE v114[128];
  _BYTE v115[128];
  _BYTE v116[128];
  uint64_t v117;

  v117 = *MEMORY[0x1E0C80C00];
  v3 = (void *)objc_msgSend(a1, "allLines");
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  v89 = a2;
  *(_QWORD *)(a2 + 48) = 0;
  v4 = objc_msgSend(v3, "count");
  if (v4)
  {
    if (v4 >= 0x4924925)
    {
      __break(0xC471u);
      JUMPOUT(0x19788753CLL);
    }
    v5 = 56 * v4;
    v6 = WTF::fastMalloc((WTF *)(56 * v4));
    *(_DWORD *)(a2 + 8) = v5 / 0x38;
    *(_QWORD *)a2 = v6;
  }
  v112 = 0u;
  v113 = 0u;
  v110 = 0u;
  v111 = 0u;
  v7 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v110, v116, 16);
  if (v7)
  {
    v8 = 0;
    v86 = v3;
    v87 = *(_QWORD *)v111;
    v9 = 1;
    do
    {
      v10 = 0;
      v88 = v7;
      do
      {
        if (*(_QWORD *)v111 != v87)
          objc_enumerationMutation(v3);
        v11 = *(void **)(*((_QWORD *)&v110 + 1) + 8 * v10);
        v108 = 0;
        v109 = 0;
        v91 = v10;
        v92 = v11;
        v12 = (void *)objc_msgSend(v11, "children");
        v13 = objc_msgSend(v12, "count");
        if (v13)
        {
          if (v13 >= 0x5555556)
            goto LABEL_120;
          v14 = 48 * v13;
          v15 = WTF::fastMalloc((WTF *)(48 * v13));
          LODWORD(v109) = v14 / 0x30;
          v108 = v15;
        }
        MEMORY[0x19AEABCC8](&v107, objc_msgSend(v92, "string"));
        v105 = 0u;
        v106 = 0u;
        v103 = 0u;
        v104 = 0u;
        v16 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v103, v115, 16);
        v90 = v9;
        if (!v16)
          goto LABEL_59;
        v17 = 0;
        v18 = *(_QWORD *)v104;
        do
        {
          v19 = 0;
          do
          {
            if (*(_QWORD *)v104 != v18)
              objc_enumerationMutation(v12);
            v20 = v107;
            if (v107)
              v20 = *((_DWORD *)v107 + 1);
            if (v17 < v20)
            {
              v21 = *(void **)(*((_QWORD *)&v103 + 1) + 8 * v19);
              MEMORY[0x19AEABCC8](&v102, objc_msgSend(v21, "string"));
              if (v102)
                v22 = (WTF::StringImpl *)*((_QWORD *)v102 + 1);
              else
                v22 = 0;
              if (v107)
              {
                v23 = WTF::StringImpl::find();
                v24 = v23;
                if (v23 != -1)
                {
                  if (v23 == v17)
                  {
                    v25 = v8 & (v17 == 0);
                    goto LABEL_36;
                  }
                  *(_QWORD *)v97 = 0;
                  v26 = (int)v107;
                  if (v107)
                  {
                    v27 = *((unsigned __int8 *)v107 + 16);
                    v26 = *((_DWORD *)v107 + 1);
                    *(_QWORD *)v97 = *((_QWORD *)v107 + 1);
                    v28 = (v27 >> 2) & 1;
                  }
                  else
                  {
                    LOBYTE(v28) = 1;
                  }
                  *(_DWORD *)&v97[8] = v26;
                  v97[12] = v28;
                  v29 = WTF::StringView::substring(v97, v17, v23 - v17);
                  if ((_DWORD)v30)
                  {
                    if ((v30 & 0xFF00000000) != 0)
                    {
                      v31 = *(unsigned __int8 *)v29;
                      goto LABEL_33;
                    }
                    v31 = *(unsigned __int16 *)v29;
                    if (v31 <= 0xFF)
                    {
LABEL_33:
                      if (v31 == 11)
                        v25 = 1;
                      else
                        v25 = (v31 < 0x21u) & (0x100003600uLL >> v31);
                      goto LABEL_36;
                    }
                    v25 = MEMORY[0x19AEBA3C8]() == 9;
                  }
                  else
                  {
                    v25 = 0;
                  }
LABEL_36:
                  if (v102)
                    v32 = *((_DWORD *)v102 + 1);
                  else
                    v32 = 0;
                  WebKit::floatQuad(cf, (void *)objc_msgSend(v21, "quad"));
                  v33 = v102;
                  if (v102)
                    *(_DWORD *)v102 += 2;
                  *(_QWORD *)v97 = v33;
                  *(_OWORD *)&v97[8] = *(_OWORD *)cf;
                  *(_OWORD *)&v97[24] = v101;
                  LOBYTE(v98) = v25;
                  v34 = HIDWORD(v109);
                  if (HIDWORD(v109) == (_DWORD)v109)
                  {
                    v35 = WTF::Vector<WebCore::TextRecognitionWordData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v108, HIDWORD(v109) + 1, (unint64_t)v97);
                    v34 = HIDWORD(v109);
                    v36 = v108 + 48 * HIDWORD(v109);
                    v37 = *(_QWORD *)v35;
                    *(_QWORD *)v35 = 0;
                    *(_QWORD *)v36 = v37;
                    v38 = *(_OWORD *)(v35 + 8);
                    v39 = *(_OWORD *)(v35 + 24);
                    *(_BYTE *)(v36 + 40) = *(_BYTE *)(v35 + 40);
                    *(_OWORD *)(v36 + 24) = v39;
                    *(_OWORD *)(v36 + 8) = v38;
                  }
                  else
                  {
                    v40 = v108 + 48 * HIDWORD(v109);
                    *(_QWORD *)v97 = 0;
                    *(_QWORD *)v40 = v33;
                    v41 = *(_OWORD *)&v97[8];
                    v42 = *(_OWORD *)&v97[24];
                    *(_BYTE *)(v40 + 40) = v98;
                    *(_OWORD *)(v40 + 24) = v42;
                    *(_OWORD *)(v40 + 8) = v41;
                  }
                  HIDWORD(v109) = v34 + 1;
                  v43 = *(WTF::StringImpl **)v97;
                  *(_QWORD *)v97 = 0;
                  if (v43)
                  {
                    if (*(_DWORD *)v43 == 2)
                      WTF::StringImpl::destroy(v43, v22);
                    else
                      *(_DWORD *)v43 -= 2;
                  }
                  v17 = v32 + v24;
                }
              }
              v44 = v102;
              v102 = 0;
              if (v44)
              {
                if (*(_DWORD *)v44 == 2)
                  WTF::StringImpl::destroy(v44, v22);
                else
                  *(_DWORD *)v44 -= 2;
              }
            }
            ++v19;
          }
          while (v16 != v19);
          v45 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v103, v115, 16);
          v16 = v45;
        }
        while (v45);
LABEL_59:
        v3 = v86;
        if (v90 < objc_msgSend(v86, "count")
          && (v46 = (void *)objc_msgSend(v86, "objectAtIndexedSubscript:", v90)) != 0)
        {
          v47 = v88;
          if ((objc_opt_respondsToSelector() & 1) != 0)
            v48 = objc_msgSend(v46, "shouldWrap") ^ 1;
          else
            v48 = 1;
        }
        else
        {
          v48 = 0;
          v47 = v88;
        }
        v49 = (objc_opt_respondsToSelector() & 1) != 0 && objc_msgSend(v92, "layoutDirection") == 3;
        WebKit::floatQuad(cf, (void *)objc_msgSend(v92, "quad"));
        *(_OWORD *)v97 = *(_OWORD *)cf;
        *(_OWORD *)&v97[16] = v101;
        *(_QWORD *)&v97[32] = v108;
        v51 = v109;
        v108 = 0;
        v109 = 0;
        v98 = v51;
        LOBYTE(v99) = v48;
        HIBYTE(v99) = v49;
        v52 = *(_DWORD *)(v89 + 12);
        if (v52 == *(_DWORD *)(v89 + 8))
        {
          WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextRecognitionLineData>(v89, (unint64_t)v97);
        }
        else
        {
          v53 = *(_QWORD *)v89 + 56 * v52;
          *(_OWORD *)v53 = *(_OWORD *)cf;
          *(_OWORD *)(v53 + 16) = v101;
          *(_QWORD *)(v53 + 32) = 0;
          *(_QWORD *)(v53 + 40) = 0;
          v54 = *(_QWORD *)&v97[32];
          *(_QWORD *)&v97[32] = 0;
          *(_QWORD *)(v53 + 32) = v54;
          LODWORD(v54) = v98;
          LODWORD(v98) = 0;
          *(_DWORD *)(v53 + 40) = v54;
          LODWORD(v54) = HIDWORD(v98);
          HIDWORD(v98) = 0;
          *(_DWORD *)(v53 + 44) = v54;
          *(_WORD *)(v53 + 48) = v99;
          ++*(_DWORD *)(v89 + 12);
        }
        WTF::Vector<WebCore::TextRecognitionWordData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v97[32], v50);
        v56 = v107;
        v107 = 0;
        if (v56)
        {
          if (*(_DWORD *)v56 == 2)
            WTF::StringImpl::destroy(v56, v55);
          else
            *(_DWORD *)v56 -= 2;
        }
        v9 = v90 + 1;
        WTF::Vector<WebCore::TextRecognitionWordData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v108, v55);
        v10 = v91 + 1;
        v8 = 1;
      }
      while (v91 + 1 != v47);
      v57 = objc_msgSend(v86, "countByEnumeratingWithState:objects:count:", &v110, v116, 16);
      v7 = v57;
    }
    while (v57);
  }
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v58 = (void *)objc_msgSend(a1, "textDataDetectors");
    v59 = v58;
    if (v58)
      CFRetain(v58);
    v60 = objc_msgSend(v59, "count");
    if (v60)
    {
      if (v60 >= 0xAAAAAAB)
      {
LABEL_120:
        __break(0xC471u);
        JUMPOUT(0x19788752CLL);
      }
      v61 = 24 * v60;
      v62 = WTF::fastMalloc((WTF *)(24 * v60));
      *(_DWORD *)(v89 + 24) = v61 / 0x18;
      *(_QWORD *)(v89 + 16) = v62;
    }
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v63 = objc_msgSend(v59, "countByEnumeratingWithState:objects:count:", &v93, v114, 16);
    if (v63)
    {
      v64 = *(_QWORD *)v94;
      do
      {
        for (i = 0; i != v63; ++i)
        {
          if (*(_QWORD *)v94 != v64)
            objc_enumerationMutation(v59);
          v66 = v59;
          v67 = *(void **)(*((_QWORD *)&v93 + 1) + 8 * i);
          v68 = (const void *)objc_msgSend(v67, "result");
          v69 = v68;
          if (v68)
            CFRetain(v68);
          v70 = (void *)objc_msgSend(v67, "boundingQuads");
          v71 = objc_msgSend(v70, "count");
          v73 = v71;
          if (v71)
          {
            if (v71 >> 27)
            {
              __break(0xC471u);
              JUMPOUT(0x197887534);
            }
            v74 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v71));
            v75 = 0;
            v76 = v74;
            do
            {
              WebKit::floatQuad(v97, (void *)objc_msgSend(v70, "objectAtIndexedSubscript:", v75));
              *v76 = *(_OWORD *)v97;
              v76[1] = *(_OWORD *)&v97[16];
              ++v75;
              v76 += 2;
            }
            while (v73 != v75);
          }
          else
          {
            v74 = 0;
          }
          cf[0] = v69;
          cf[1] = v74;
          LODWORD(v101) = v73;
          DWORD1(v101) = v73;
          v77 = *(_DWORD *)(v89 + 28);
          if (v77 == *(_DWORD *)(v89 + 24))
          {
            v59 = v66;
            WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextRecognitionDataDetector>(v89 + 16, (unint64_t)cf);
          }
          else
          {
            v78 = *(_QWORD *)(v89 + 16) + 24 * v77;
            cf[0] = 0;
            *(_QWORD *)(v78 + 8) = 0;
            *(_QWORD *)(v78 + 16) = 0;
            *(_QWORD *)v78 = v69;
            v79 = cf[1];
            cf[1] = 0;
            *(_QWORD *)(v78 + 8) = v79;
            LODWORD(v79) = v101;
            LODWORD(v101) = 0;
            *(_DWORD *)(v78 + 16) = (_DWORD)v79;
            LODWORD(v79) = DWORD1(v101);
            DWORD1(v101) = 0;
            *(_DWORD *)(v78 + 20) = (_DWORD)v79;
            ++*(_DWORD *)(v89 + 28);
            v59 = v66;
          }
          v80 = (WTF *)cf[1];
          if (cf[1])
          {
            cf[1] = 0;
            LODWORD(v101) = 0;
            WTF::fastFree(v80, v72);
          }
          v81 = cf[0];
          cf[0] = 0;
          if (v81)
            CFRelease(v81);
        }
        v63 = objc_msgSend(v59, "countByEnumeratingWithState:objects:count:", &v93, v114, 16);
      }
      while (v63);
    }
    if (v59)
      CFRelease(v59);
  }
  ((void (*)(void))*MEMORY[0x1E0DCE030])();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    if (a1)
      CFRetain(a1);
    WebCore::TextRecognitionResult::encodeVKCImageAnalysis();
    v82 = *(_QWORD *)v97;
    *(_QWORD *)v97 = 0;
    v83 = *(const void **)(v89 + 48);
    *(_QWORD *)(v89 + 48) = v82;
    if (v83)
    {
      CFRelease(v83);
      v84 = *(const void **)v97;
      *(_QWORD *)v97 = 0;
      if (v84)
        CFRelease(v84);
    }
    if (a1)
      CFRelease(a1);
  }
}

void sub_197887548(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, CFTypeRef cf,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,WTF::StringImpl *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,CFTypeRef a36,WTF *a37,int a38,uint64_t a39,WTF::StringImpl *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,WTF::StringImpl *a50,char a51)
{
  const void *v52;
  void *v53;
  void *v54;

  v52 = *(const void **)(a16 + 48);
  *(_QWORD *)(a16 + 48) = 0;
  if (v52)
    CFRelease(v52);
  WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a16 + 32, a2);
  WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a16 + 16, v53);
  WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a16, v54);
  _Unwind_Resume(a1);
}

uint64_t WebKit::floatQuad(_QWORD *a1, void *a2)
{
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  CGPoint v15;
  uint64_t v16;
  CGPoint v17;
  uint64_t v18;
  CGPoint v19;
  uint64_t v20;
  CGPoint v21;
  uint64_t v22;

  objc_msgSend(a2, "topLeft");
  v21.x = v4;
  v21.y = v5;
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v22, &v21);
  objc_msgSend(a2, "topRight");
  v19.x = v6;
  v19.y = v7;
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v20, &v19);
  objc_msgSend(a2, "bottomRight");
  v17.x = v8;
  v17.y = v9;
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v18, &v17);
  objc_msgSend(a2, "bottomLeft");
  v15.x = v10;
  v15.y = v11;
  result = WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v16, &v15);
  v13 = v20;
  *a1 = v22;
  a1[1] = v13;
  v14 = v16;
  a1[2] = v18;
  a1[3] = v14;
  return result;
}

uint64_t WebKit::languageIdentifierSupportsLiveText(WebKit *this, NSString *a2)
{
  WTF::StringImpl *v2;
  const WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  char *v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  WTF **v13;
  WTF *v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v19;
  unsigned int v20;
  int v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  WTF::StringImpl *v27;
  const WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  WTF::StringImpl **v37;
  WTF::StringImpl *v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  WTF::StringImpl **v42;
  WTF::StringImpl *v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  WTF **v53;
  WTF *v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  unsigned int v64;
  int v65;
  WTF *v66;
  WTF **v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _BYTE v81[128];
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  MEMORY[0x19AEABCC8](&v75, objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99DC8], "localeWithLocaleIdentifier:", this), "languageCode"));
  v4 = v75;
  if (!v75)
    return 1;
  if (!*((_DWORD *)v75 + 1))
  {
    v75 = 0;
    v6 = 1;
LABEL_21:
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
    return v6;
  }
  v5 = &_MergedGlobals_106;
  if (_MergedGlobals_132 != 1)
  {
    v77 = 0u;
    v78 = 0u;
    v79 = 0u;
    v80 = 0u;
    v70 = (void *)objc_msgSend((id)((uint64_t (*)(void))*MEMORY[0x1E0DCE038])(), "supportedRecognitionLanguages");
    v73 = objc_msgSend(v70, "countByEnumeratingWithState:objects:count:", &v77, v81, 16);
    if (!v73)
    {
      v19 = 0;
      v21 = 0;
      v6 = 0;
      goto LABEL_106;
    }
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v6 = 0;
    v22 = 0;
    v69 = *(_QWORD *)v78;
    while (1)
    {
      v23 = 0;
      v24 = 0x1E0C99000uLL;
      v25 = v69;
      v26 = v70;
      do
      {
        if (*(_QWORD *)v78 != v25)
          objc_enumerationMutation(v26);
        MEMORY[0x19AEABCC8](&v76, objc_msgSend((id)objc_msgSend(*(id *)(v24 + 3528), "localeWithLocaleIdentifier:", *(_QWORD *)(*((_QWORD *)&v77 + 1) + 8 * v23), v69), "languageCode"));
        v29 = v76;
        if (!v76)
          goto LABEL_102;
        if (!*((_DWORD *)v76 + 1))
        {
          v76 = 0;
LABEL_99:
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, v27);
          else
            *(_DWORD *)v29 -= 2;
          goto LABEL_102;
        }
        v72 = v20;
        v71 = v23;
        if (10 * (unint64_t)v20 >= 9 * (unint64_t)v19 || v19 <= 2 * v20 && v22)
        {
          if (v19)
            v30 = 2 * v19;
          else
            v30 = 8;
          v31 = WTF::fastZeroedMalloc((WTF *)(8 * v30));
          v32 = (~(v31 << 32) + v31) ^ ((unint64_t)(~(v31 << 32) + v31) >> 22);
          v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
          v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
          v21 = (v34 >> 31) ^ v34;
          if (v19)
          {
            v35 = 0;
            v74 = v19;
            v36 = 2 * v19 - 1;
            do
            {
              v37 = (WTF::StringImpl **)(v6 + 8 * v35);
              v38 = *v37;
              if (*v37)
              {
                v39 = *((_DWORD *)v38 + 4);
                if (v39 >= 0x100)
                  v40 = v39 >> 8;
                else
                  v40 = WTF::StringImpl::hashSlowCase(v38);
                v41 = (v40 ^ v21) & v36;
                v42 = (WTF::StringImpl **)(v31 + 8 * v41);
                v43 = *v42;
                if (*v42)
                {
                  v44 = 0;
                  do
                  {
                    v45 = *((_DWORD *)v43 + 4);
                    if (v45 >= 0x100)
                      v46 = v45 >> 8;
                    else
                      v46 = WTF::StringImpl::hashSlowCase(v43);
                    if (v44 > ((v41 + v30 - ((v46 ^ v21) & v36)) & v36))
                    {
                      v47 = *v37;
                      *v37 = *v42;
                      *v42 = v47;
                      v44 = (v41 + v30 - ((v46 ^ v21) & v36)) & v36;
                    }
                    v41 = (v41 + 1) & v36;
                    ++v44;
                    v42 = (WTF::StringImpl **)(v31 + 8 * v41);
                    v43 = *v42;
                  }
                  while (*v42);
                }
                WTF::String::operator=(v42, (WTF::StringImpl *)(v6 + 8 * v35));
                v48 = *v37;
                *v37 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                    WTF::StringImpl::destroy(v48, v27);
                  else
                    *(_DWORD *)v48 -= 2;
                }
              }
              else
              {
                *v37 = 0;
              }
              ++v35;
            }
            while (v35 != v74);
LABEL_62:
            WTF::fastFree((WTF *)v6, v27);
            v22 = 0;
            v19 = v30;
          }
          else
          {
            if (v6)
              goto LABEL_62;
            v22 = 0;
            v19 = 8;
          }
          v6 = v31;
        }
        v49 = *((_DWORD *)v76 + 4);
        if (v49 >= 0x100)
          v50 = v49 >> 8;
        else
          v50 = WTF::StringImpl::hashSlowCase(v76);
        v51 = v19 - 1;
        v52 = (v50 ^ v21) & (v19 - 1);
        v53 = (WTF **)(v6 + 8 * v52);
        v54 = *v53;
        if (*v53)
        {
          v55 = 0;
          while (1)
          {
            v56 = *((_DWORD *)v54 + 4);
            v57 = v56 >= 0x100 ? v56 >> 8 : WTF::StringImpl::hashSlowCase(v54);
            v58 = (v52 + v19 - ((v57 ^ v21) & v51)) & v51;
            if (v55 > v58)
              break;
            if (v57 == v50 && (WTF::equal(*v53, v76, v28) & 1) != 0)
            {
              v24 = 0x1E0C99000;
              v25 = v69;
              v26 = v70;
              v20 = v72;
              goto LABEL_98;
            }
            v52 = (v52 + 1) & v51;
            ++v55;
            v53 = (WTF **)(v6 + 8 * v52);
            v54 = *v53;
            if (!*v53)
            {
              if (v55 > 0x7F)
                v22 = 1;
              goto LABEL_78;
            }
          }
          if (v55 > 0x7F)
            v22 = 1;
          v61 = *v53;
          *v53 = 0;
          v62 = v76;
          v76 = 0;
          v63 = *v53;
          *v53 = v62;
          if (v63)
          {
            if (*(_DWORD *)v63 == 2)
              WTF::StringImpl::destroy(v63, v27);
            else
              *(_DWORD *)v63 -= 2;
          }
          while (1)
          {
            v52 = (v52 + 1) & v51;
            v67 = (WTF **)(v6 + 8 * v52);
            v68 = *v67;
            if (!*v67)
              break;
            v64 = *((_DWORD *)v68 + 4);
            if (v64 >= 0x100)
              v65 = v64 >> 8;
            else
              v65 = WTF::StringImpl::hashSlowCase(v68);
            if (++v58 > ((v52 + v19 - ((v65 ^ v21) & v51)) & v51))
            {
              v66 = *v67;
              *v67 = v61;
              v61 = v66;
              v58 = (v52 + v19 - ((v65 ^ v21) & v51)) & v51;
            }
          }
          *v67 = v61;
        }
        else
        {
LABEL_78:
          v59 = v76;
          v76 = 0;
          v60 = *v53;
          *v53 = v59;
          if (v60)
          {
            if (*(_DWORD *)v60 == 2)
              WTF::StringImpl::destroy(v60, v27);
            else
              *(_DWORD *)v60 -= 2;
          }
        }
        v20 = v72 + 1;
        v24 = 0x1E0C99000;
        v25 = v69;
        v26 = v70;
LABEL_98:
        v23 = v71;
        v29 = v76;
        v76 = 0;
        if (v29)
          goto LABEL_99;
LABEL_102:
        ++v23;
      }
      while (v23 != v73);
      v73 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v77, v81, 16);
      if (!v73)
      {
LABEL_106:
        qword_1ECE73470 = v6;
        dword_1ECE73450 = v19;
        dword_1ECE73458 = v21;
        _MergedGlobals_132 = 1;
        v5 = &_MergedGlobals_106;
        if (!v6)
          goto LABEL_20;
        goto LABEL_5;
      }
    }
  }
  v6 = qword_1ECE73470;
  if (!qword_1ECE73470)
    goto LABEL_20;
LABEL_5:
  v7 = dword_1ECE73450;
  v8 = dword_1ECE73458;
  v9 = *((_DWORD *)v75 + 4);
  if (v9 >= 0x100)
  {
    v10 = v9 >> 8;
  }
  else
  {
    v10 = WTF::StringImpl::hashSlowCase(v75);
    v6 = *((_QWORD *)v5 + 142);
  }
  v11 = v7 - 1;
  v12 = (v10 ^ v8) & (v7 - 1);
  v13 = (WTF **)(v6 + 8 * v12);
  v14 = *v13;
  if (*v13)
  {
    v15 = -1;
    do
    {
      v16 = *((_DWORD *)v14 + 4);
      v17 = v16 >= 0x100 ? v16 >> 8 : WTF::StringImpl::hashSlowCase(v14);
      if (++v15 > ((v12 + v7 - ((v17 ^ v8) & v11)) & v11))
        break;
      if (v17 == v10 && (WTF::equal(*v13, v75, v3) & 1) != 0)
      {
        v6 = 1;
        goto LABEL_20;
      }
      v12 = (v12 + 1) & v11;
      v13 = (WTF **)(*((_QWORD *)v5 + 142) + 8 * v12);
      v14 = *v13;
    }
    while (*v13);
  }
  v6 = 0;
LABEL_20:
  v4 = v75;
  v75 = 0;
  if (v4)
    goto LABEL_21;
  return v6;
}

void sub_197887DDC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, WTF::StringImpl *a16)
{
  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, a2);
    else
      *(_DWORD *)a15 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::requestVisualTranslation(WTF::MonotonicTime *a1, uint64_t a2, WTF::StringImpl **a3, WTF::StringImpl **a4, uint64_t a5, uint64_t *a6)
{
  WebKit *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::String *v15;
  int shouldLogFullImageTranslationResults;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  const char *v20;
  NSObject *v21;
  uint32_t v22;
  char *v23;
  void *v24;
  WTF *v25;
  const void *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  _QWORD *v30;
  WTF::StringImpl *v31;
  const void *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF *v35;
  _BYTE buf[24];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v12 = (WebKit *)WTF::MonotonicTime::now(a1);
  v14 = v13;
  v15 = (WTF::String *)++WebKit::requestVisualTranslation(VKCImageAnalyzer *,NSURL *,WTF::String const&,WTF::String const&,CGImage *,WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)> &&)::imageAnalysisRequestID;
  shouldLogFullImageTranslationResults = WebKit::shouldLogFullImageTranslationResults(v12);
  v17 = qword_1ECE71BF0;
  v18 = os_log_type_enabled((os_log_t)qword_1ECE71BF0, OS_LOG_TYPE_DEFAULT);
  if (shouldLogFullImageTranslationResults)
  {
    if (!(_DWORD)v18)
      goto LABEL_20;
    WTF::String::number(v15);
    WTF::String::utf8();
    if (v35)
      v19 = (char *)v35 + 16;
    else
      v19 = 0;
    *(_DWORD *)buf = 136446467;
    *(_QWORD *)&buf[4] = v19;
    *(_WORD *)&buf[12] = 2113;
    *(_QWORD *)&buf[14] = a2;
    v20 = "[#%{public}s] Image translation started for %{private}@";
    v21 = v17;
    v22 = 22;
  }
  else
  {
    if (!(_DWORD)v18)
      goto LABEL_20;
    WTF::String::number(v15);
    WTF::String::utf8();
    if (v35)
      v23 = (char *)v35 + 16;
    else
      v23 = 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v23;
    v20 = "[#%{public}s] Image translation started";
    v21 = v17;
    v22 = 12;
  }
  _os_log_impl(&dword_196BCC000, v21, OS_LOG_TYPE_DEFAULT, v20, buf, v22);
  v25 = v35;
  v35 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 1)
      WTF::fastFree(v25, v24);
    else
      --*(_DWORD *)v25;
  }
  v18 = (uint64_t)v34;
  v34 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      v18 = WTF::StringImpl::destroy((WTF::StringImpl *)v18, (WTF::StringImpl *)v24);
    else
      *(_DWORD *)v18 -= 2;
  }
LABEL_20:
  v26 = (const void *)objc_msgSend(objc_alloc((Class)((uint64_t (*)(uint64_t))*MEMORY[0x1E0DCE108])(v18)), "initWithCGImage:orientation:requestType:", a5, 0, 1);
  v27 = *a6;
  *a6 = 0;
  v28 = *a3;
  if (*a3)
    *(_DWORD *)v28 += 2;
  v29 = *a4;
  if (v29)
    *(_DWORD *)v29 += 2;
  if (v28)
    *(_DWORD *)v28 += 2;
  if (v29)
    *(_DWORD *)v29 += 2;
  v30 = malloc_type_malloc(0x48uLL, 0x10E00409BCA8E5CuLL);
  v32 = v30;
  *v30 = MEMORY[0x1E0C809A0];
  v30[1] = 50331650;
  v30[2] = WTF::BlockPtr<void ()(VKCImageAnalysis *,NSError *)>::fromCallable<WebKit::requestVisualTranslation(VKCImageAnalyzer *,NSURL *,WTF::String const&,WTF::String const&,CGImage *,WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)> &&)::$_0>(WebKit::requestVisualTranslation(VKCImageAnalyzer *,NSURL *,WTF::String const&,WTF::String const&,CGImage *,WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)> &&)::$_0)::{lambda(void *,VKCImageAnalysis *,NSError *)#1}::__invoke;
  v30[3] = &WTF::BlockPtr<void ()(VKCImageAnalysis *,NSError *)>::fromCallable<WebKit::requestVisualTranslation(VKCImageAnalyzer *,NSURL *,WTF::String const&,WTF::String const&,CGImage *,WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)> &&)::$_0>(WebKit::requestVisualTranslation(VKCImageAnalyzer *,NSURL *,WTF::String const&,WTF::String const&,CGImage *,WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)> &&)::$_0)::descriptor;
  v30[4] = v27;
  if (v28)
    *(_DWORD *)v28 += 2;
  v30[5] = v28;
  if (v29)
  {
    *(_DWORD *)v29 += 2;
    v30[6] = v29;
    v30[7] = v15;
    v30[8] = v14;
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::destroy(v29, v31);
      if (!v28)
        goto LABEL_38;
    }
    else
    {
      *(_DWORD *)v29 -= 2;
      if (!v28)
        goto LABEL_38;
    }
  }
  else
  {
    v30[6] = 0;
    v30[7] = v15;
    v30[8] = v14;
    if (!v28)
      goto LABEL_38;
  }
  if (*(_DWORD *)v28 == 2)
    WTF::StringImpl::destroy(v28, v31);
  else
    *(_DWORD *)v28 -= 2;
LABEL_38:
  -[WTF::MonotonicTime processRequest:progressHandler:completionHandler:](a1, "processRequest:progressHandler:completionHandler:", v26, 0, v32, v34, v35, *(_OWORD *)buf, *(_QWORD *)&buf[16], v37);
  _Block_release(v32);
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::destroy(v29, v33);
      if (!v28)
        goto LABEL_46;
      goto LABEL_44;
    }
    *(_DWORD *)v29 -= 2;
  }
  if (!v28)
  {
LABEL_46:
    if (!v26)
      return;
    goto LABEL_47;
  }
LABEL_44:
  if (*(_DWORD *)v28 != 2)
  {
    *(_DWORD *)v28 -= 2;
    goto LABEL_46;
  }
  WTF::StringImpl::destroy(v28, v33);
  if (v26)
LABEL_47:
    CFRelease(v26);
}

void sub_197888238(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::shouldLogFullImageTranslationResults(WebKit *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&qword_1ECE73488);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&qword_1ECE73488, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::shouldLogFullImageTranslationResults(void)::$_0 &&>>);
  }
  return byte_1ECE7344B;
}

void WebKit::requestBackgroundRemoval(PAL *a1, uint64_t *a2)
{
  const __CFData *v4;
  CGImageSource *v5;
  CGImage *ImageAtIndex;
  CGImage *v7;
  size_t Width;
  WTF::MonotonicTime *Height;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(CGImage *, uint64_t, _QWORD *);
  _QWORD v19[4];
  void *aBlock;
  __CFData *v21;

  if ((PAL::canLoad_VisionKitCore_vk_cgImageRemoveBackground(a1) & 1) == 0)
  {
    v14 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 16))(v14, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return;
  }
  WebKit::transcode(a1, (const __CFString *)objc_msgSend((id)*MEMORY[0x1E0CEC600], "identifier"), &v21);
  v4 = v21;
  if (!-[__CFData length](v21, "length"))
  {
    v15 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 16))(v15, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    goto LABEL_17;
  }
  v5 = CGImageSourceCreateWithData(v4, 0);
  ImageAtIndex = CGImageSourceCreateImageAtIndex(v5, 0, 0);
  v7 = ImageAtIndex;
  if (ImageAtIndex)
  {
    Width = CGImageGetWidth(ImageAtIndex);
    Height = (WTF::MonotonicTime *)CGImageGetHeight(v7);
    if (Width && Height)
    {
      WTF::MonotonicTime::now(Height);
      v11 = v10;
      v12 = *a2;
      *a2 = 0;
      v13 = malloc_type_malloc(0x30uLL, 0x10E00408A6C46E4uLL);
      *v13 = MEMORY[0x1E0C809A0];
      v13[1] = 50331650;
      v13[2] = WTF::BlockPtr<void ()(CGImage *,NSError *)>::fromCallable<WebKit::requestBackgroundRemoval(CGImage *,WTF::CompletionHandler<void ()(CGImage *)> &&)::$_0>(WebKit::requestBackgroundRemoval(CGImage *,WTF::CompletionHandler<void ()(CGImage *)> &&)::$_0)::{lambda(void *,CGImage *,NSError *)#1}::__invoke;
      v13[3] = &WTF::BlockPtr<void ()(CGImage *,NSError *)>::fromCallable<WebKit::requestBackgroundRemoval(CGImage *,WTF::CompletionHandler<void ()(CGImage *)> &&)::$_0>(WebKit::requestBackgroundRemoval(CGImage *,WTF::CompletionHandler<void ()(CGImage *)> &&)::$_0)::descriptor;
      v13[4] = v12;
      v13[5] = v11;
      if (PAL::canLoad_VisionKitCore_vk_cgImageRemoveBackgroundWithDownsizing((PAL *)v13))
      {
        ((void (*)(CGImage *, uint64_t, uint64_t, _QWORD *))*MEMORY[0x1E0DCE370])(v7, 1, 1, v13);
      }
      else
      {
        v18 = (void (*)(CGImage *, uint64_t, _QWORD *))*MEMORY[0x1E0DCE300];
        v19[0] = MEMORY[0x1E0C809B0];
        v19[1] = 3321888768;
        v19[2] = ___ZN6WebKit24requestBackgroundRemovalEP7CGImageON3WTF17CompletionHandlerIFvS1_EEE_block_invoke;
        v19[3] = &__block_descriptor_40_e8_32c89_ZTSKZN6WebKit24requestBackgroundRemovalEP7CGImageON3WTF17CompletionHandlerIFvS1_EEEE3__1_e64_v56__0__CGImage__8_CGRect__CGPoint_dd__CGSize_dd__16__NSError_48l;
        aBlock = _Block_copy(v13);
        v18(v7, 1, v19);
        _Block_release(v13);
        _Block_release(aBlock);
        v13 = 0;
      }
      _Block_release(v13);
    }
    else
    {
      v17 = *a2;
      *a2 = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 16))(v17, 0);
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    }
    CFRelease(v7);
    if (!v5)
      goto LABEL_17;
    goto LABEL_16;
  }
  v16 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 16))(v16, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (v5)
LABEL_16:
    CFRelease(v5);
LABEL_17:
  if (v4)
    CFRelease(v4);
}

void sub_197888634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *aBlock)
{
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;

  _Block_release(aBlock);
  _Block_release(v16);
  _Block_release(0);
  CFRelease(v15);
  if (v14)
    CFRelease(v14);
  if (v13)
    CFRelease(v13);
  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebKit24requestBackgroundRemovalEP7CGImageON3WTF17CompletionHandlerIFvS1_EEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void *__copy_helper_block_e8_32c89_ZTSKZN6WebKit24requestBackgroundRemovalEP7CGImageON3WTF17CompletionHandlerIFvS1_EEEE3__1(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 32));
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c89_ZTSKZN6WebKit24requestBackgroundRemovalEP7CGImageON3WTF17CompletionHandlerIFvS1_EEEE3__1(uint64_t a1)
{
  _Block_release(*(const void **)(a1 + 32));
}

void WebKit::imageDataForRemoveBackground(WebKit *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::String *a3@<X2>, WebKit *a4@<X8>)
{
  WTF::StringImpl *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  WTF **v14;
  WTF *v15;
  int v16;
  unsigned int v17;
  int v18;
  CFTypeRef v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char **v23;
  WTF::StringImpl *v24;
  char *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  CFTypeRef cf[3];
  WTF::StringImpl *v35;

  if ((byte_1ECE73449 & 1) == 0)
  {
    v30 = WTF::fastZeroedMalloc((WTF *)0x40);
    v31 = 8;
    v20 = (~(v30 << 32) + v30) ^ ((unint64_t)(~(v30 << 32) + v30) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v32 = (v22 >> 31) ^ v22;
    v33 = 0;
    v23 = &WebKit::imageDataForRemoveBackground(CGImage *,WTF::String const&)::$_0::operator() const(void)::types;
    v24 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    do
    {
      v25 = v23[1];
      if (v25)
      {
        if (v25 == (char *)1)
        {
          *(_DWORD *)v24 += 2;
          v26 = v24;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v26 = (WTF::StringImpl *)cf[0];
        }
        v35 = v26;
      }
      else
      {
        v35 = 0;
      }
      WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)&v30, &v35, a3, (uint64_t)cf);
      v28 = v35;
      v35 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, v27);
        else
          *(_DWORD *)v28 -= 2;
      }
      v23 += 2;
    }
    qword_1ECE73478 = v30;
    dword_1ECE73460 = v31;
    dword_1ECE73468 = v32;
    byte_1ECE73449 = 1;
  }
  v6 = *a2;
  if (*a2)
  {
    if (*((_DWORD *)v6 + 1))
    {
      v7 = qword_1ECE73478;
      if (qword_1ECE73478)
      {
        v8 = dword_1ECE73460;
        v9 = dword_1ECE73460 - 1;
        v10 = dword_1ECE73468;
        v11 = *((_DWORD *)v6 + 4);
        if (v11 >= 0x100)
        {
          v12 = v11 >> 8;
        }
        else
        {
          v12 = WTF::StringImpl::hashSlowCase(v6);
          v7 = qword_1ECE73478;
        }
        v13 = (v12 ^ v10) & v9;
        v14 = (WTF **)(v7 + 8 * v13);
        v15 = *v14;
        if (*v14)
        {
          v16 = -1;
          do
          {
            v17 = *((_DWORD *)v15 + 4);
            v18 = v17 >= 0x100 ? v17 >> 8 : WTF::StringImpl::hashSlowCase(v15);
            if (++v16 > ((v13 + v8 - ((v18 ^ v10) & v9)) & v9))
              break;
            if (v18 == v12 && (WTF::equal(*v14, *a2, a3) & 1) != 0)
            {
              WTF::String::createCFString((WTF::String *)a2);
              WebKit::transcodeWithPreferredMIMEType(a4, this, (const __CFString *)cf[0]);
              v19 = cf[0];
              cf[0] = 0;
              if (v19)
                CFRelease(v19);
              return;
            }
            v13 = (v13 + 1) & v9;
            v14 = (WTF **)(qword_1ECE73478 + 8 * v13);
            v15 = *v14;
          }
          while (*v14);
        }
      }
    }
  }
  WebKit::transcodeWithPreferredMIMEType(a4, this, CFSTR("image/png"));
}

void sub_1978889F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl **a10, unsigned int a11, uint64_t a12, CFTypeRef cf, uint64_t a14, uint64_t a15, WTF::StringImpl *a16)
{
  if (a10)
    WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::deallocateTable(a10, (WTF::StringImpl *)a11);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::LayerHostingContext::createForPort@<X0>(WebKit::LayerHostingContext *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  const void **v6;
  uint64_t *v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  const void *v11;
  uint64_t result;
  uint64_t v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  v5 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)(v5 + 8) = 0;
  v6 = (const void **)(v5 + 8);
  *(_QWORD *)(v5 + 16) = 0;
  v7 = (uint64_t *)MEMORY[0x1E0CD2A48];
  *a2 = v5;
  v13 = *v7;
  v14[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *(unsigned int *)this);
  v8 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v14, &v13, 1);
  *(_BYTE *)v5 = 0;
  v9 = (const void *)objc_msgSend(MEMORY[0x1E0CD2720], "remoteContextWithOptions:", v8);
  v10 = v9;
  if (v9)
    CFRetain(v9);
  v11 = *v6;
  *v6 = v10;
  if (v11)
    CFRelease(v11);
  result = WebKit::LayerHostingContext::contextID((id *)v5);
  *(_DWORD *)(v5 + 4) = result;
  return result;
}

void sub_197888B48(_Unwind_Exception *a1)
{
  id **v1;

  std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100](v1, 0);
  _Unwind_Resume(a1);
}

CFTypeRef WebKit::LayerHostingContext::createPlatformLayerForHostingContext@<X0>(WebKit::LayerHostingContext *this@<X0>, _QWORD *a2@<X8>)
{
  CFTypeRef result;

  result = (CFTypeRef)objc_msgSend(MEMORY[0x1E0CD27A8], "_web_renderLayerWithContextID:shouldPreserveFlip:", this, 0);
  *a2 = result;
  if (result)
    return CFRetain(result);
  return result;
}

void WebKit::LayerHostingContext::~LayerHostingContext(id *this)
{
  id v2;
  id v3;

  objc_msgSend(this[2], "invalidate");
  v2 = this[2];
  this[2] = 0;
  if (v2)
    CFRelease(v2);
  v3 = this[1];
  this[1] = 0;
  if (v3)
    CFRelease(v3);
}

void sub_197888BEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;
  const void *v4;

  v3 = *(const void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v4)
    CFRelease(v4);
  _Unwind_Resume(exception_object);
}

void WebKit::LayerHostingContext::createHostingUpdateCoordinator(_QWORD *a1@<X8>)
{
  xpc_object_t v3;
  const void *v4;
  uint64_t v5;

  v3 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_mach_send();
  v5 = 0;
  v4 = (const void *)objc_msgSend((id)getBELayerHierarchyHostingTransactionCoordinatorClass(), "coordinatorWithXPCRepresentation:error:", v3, &v5);
  if (v5)
    NSLog(CFSTR("Could not create update coordinator, error = %@"), v5);
  *a1 = v4;
  if (v4)
    CFRetain(v4);
  if (v3)

}

void sub_197888CBC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)

  _Unwind_Resume(exception_object);
}

void WebKit::LayerHostingContext::createHostingHandle(WebKit::LayerHostingContext *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  xpc_object_t v6;
  const void *v7;
  uint64_t v8;

  v6 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_uint64(v6, "pid", (uint64_t)this);
  xpc_dictionary_set_uint64(v6, "cid", a2);
  v8 = 0;
  v7 = (const void *)objc_msgSend((id)getBELayerHierarchyHandleClass(), "handleWithXPCRepresentation:error:", v6, &v8);
  if (v8)
    NSLog(CFSTR("Could not create layer hierarchy handle, error = %@"), v8);
  *a3 = v7;
  if (v7)
    CFRetain(v7);
  if (v6)

}

void sub_197888D90(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)

  _Unwind_Resume(exception_object);
}

WebKit::NetworkIssueReporter *WebKit::NetworkIssueReporter::NetworkIssueReporter(WebKit::NetworkIssueReporter *this)
{
  char *v2;
  uint64_t (*v3)(char *);
  void *v5;
  char *v6;

  *((_QWORD *)this + 2) = 0;
  v2 = (char *)this + 16;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  {
    v3 = (uint64_t (*)(char *))ne_tracker_copy_current_stacktracePtr(void)::ptr;
    if (ne_tracker_copy_current_stacktracePtr(void)::ptr)
LABEL_3:
      *((_QWORD *)this + 1) = v3(v2);
  }
  else
  {
    v6 = v2;
    {
      v5 = (void *)libsystem_networkextensionLibrary(void)::dylib;
    }
    else
    {
      v5 = (void *)___ZL33libsystem_networkextensionLibraryv_block_invoke();
      libsystem_networkextensionLibrary(void)::dylib = (uint64_t)v5;
    }
    v3 = (uint64_t (*)(char *))dlsym(v5, "ne_tracker_copy_current_stacktrace");
    ne_tracker_copy_current_stacktracePtr(void)::ptr = v3;
    v2 = v6;
    if (v3)
      goto LABEL_3;
  }
  return this;
}

void sub_197888E64(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl ***v2;

  if (*v2)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*v2, a2);
  _Unwind_Resume(exception_object);
}

void WebKit::NetworkIssueReporter::~NetworkIssueReporter(WebKit::NetworkIssueReporter *this, WTF::StringImpl *a2)
{
  void *v3;

  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
    free(v3);
  if (*(_QWORD *)this)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)this, a2);
}

WTF::StringImpl *WebKit::NetworkIssueReporter::report(WTF::StringImpl *this, const WTF::URL *a2)
{
  uint64_t *v2;
  uint64_t v3;
  const WTF::StringImpl *v4;
  void *v5;
  void *v6;
  char *v7;
  WTF *v8;
  void *v9;
  WTF *v10;
  char v11;
  WTF::StringImpl *v12;

  if (!*((_QWORD *)this + 1))
    return this;
  v2 = (uint64_t *)this;
  WTF::URL::host(a2);
  if ((v3 & 0xFF00000000) != 0)
    WTF::String::String();
  else
    WTF::String::String();
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v2, &v12, v4, (uint64_t)&v10);
  if (v11)
  {
    if (byte_1ECE7344D == 1)
    {
      v6 = off_1ECE734B0;
      if (off_1ECE734B0)
        goto LABEL_7;
    }
    else
    {
      {
        v9 = (void *)libsystem_networkextensionLibrary(void)::dylib;
      }
      else
      {
        v9 = (void *)___ZL33libsystem_networkextensionLibraryv_block_invoke();
        libsystem_networkextensionLibrary(void)::dylib = (uint64_t)v9;
      }
      v6 = dlsym(v9, "ne_tracker_create_xcode_issue");
      off_1ECE734B0 = v6;
      byte_1ECE7344D = 1;
      if (v6)
      {
LABEL_7:
        WTF::String::utf8();
        if (v10)
          v7 = (char *)v10 + 16;
        else
          v7 = 0;
        ((void (*)(char *, uint64_t, uint64_t))v6)(v7, v2[1], v2[2]);
        v8 = v10;
        v10 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 1)
            WTF::fastFree(v8, v5);
          else
            --*(_DWORD *)v8;
        }
      }
    }
  }
  this = v12;
  v12 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

void sub_197889018(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::handleXPCExitMessage(void *a1)
{
  uint64_t result;
  NSObject *v3;
  uint64_t *v4;
  void *v5;
  uint8_t v6[16];

  result = (uint64_t)object_getClass(a1);
  if (result == MEMORY[0x1E0C812F8])
  {
    result = (uint64_t)xpc_dictionary_get_string(a1, "message-name");
    if (result)
    {
      result = strcmp("exit", (const char *)result);
      if (!(_DWORD)result)
      {
        v3 = off_1ECE71C40;
        if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v6 = 0;
          _os_log_error_impl(&dword_196BCC000, v3, OS_LOG_TYPE_ERROR, "Received exit message, exiting now.", v6, 2u);
        }
        v4 = (uint64_t *)WTF::terminateProcess((WTF *)1);
        return std::unique_ptr<IPC::MachMessage>::reset[abi:sn180100](v4, v5);
      }
    }
  }
  return result;
}

uint64_t std::unique_ptr<IPC::MachMessage>::reset[abi:sn180100](uint64_t *a1, void *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  *a1 = (uint64_t)a2;
  if (result)
  {
    if (*(_BYTE *)(result + 16))
    {
      v4 = result;
      mach_msg_destroy((mach_msg_header_t *)(result + 20));
      result = v4;
    }
    return WTF::fastFree((WTF *)result, a2);
  }
  return result;
}

uint64_t WTF::Vector<char,4164ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;

  if (*(unsigned int *)(result + 12) < a2)
  {
    v2 = *(unsigned int *)(result + 8);
    if (v2 < a2)
    {
      v3 = v2 + (v2 >> 2);
      if (v3 >= 0x10)
        v4 = v3 + 1;
      else
        v4 = 16;
      if (v4 <= a2)
        v4 = a2;
      v5 = a2;
      v6 = result;
      WTF::Vector<char,4164ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)result, (WTF *)v4);
      LODWORD(a2) = v5;
      result = v6;
    }
  }
  *(_DWORD *)(result + 12) = a2;
  return result;
}

void **WTF::Vector<char,4164ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(void **result, WTF *this)
{
  int v2;
  uint64_t v3;
  void *v4;
  size_t v5;
  void *v6;
  void *v7;

  if (*((unsigned int *)result + 2) < (unint64_t)this)
  {
    v2 = (int)this;
    v3 = (uint64_t)result;
    v4 = *result;
    v5 = *((unsigned int *)result + 3);
    if ((unint64_t)this < 0x1045)
    {
      v6 = result + 2;
      *(_QWORD *)v3 = v3 + 16;
      *(_DWORD *)(v3 + 8) = 4164;
    }
    else
    {
      if ((unint64_t)this >> 32)
      {
        __break(0xC471u);
        return result;
      }
      v6 = (void *)WTF::fastMalloc(this);
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = v6;
    }
    result = (void **)memcpy(v6, v4, v5);
    if ((void *)(v3 + 16) != v4 && v4 != 0)
    {
      if (*(void **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return (void **)WTF::fastFree((WTF *)v4, v7);
    }
  }
  return result;
}

void WTF::Detail::CallableWrapper<IPC::createMessageDecoder(mach_msg_header_t *,unsigned long)::$_0,void,std::span<unsigned char const,18446744073709551615ul>>::call()
{
  JUMPOUT(0x19AEBA404);
}

uint64_t WTF::BlockPtr<void ()(NSObject  {objcproto13OS_xpc_object}*)>::fromCallable<WebKit::Daemon::Connection::sendWithReply(NSObject  {objcproto13OS_xpc_object}*,WTF::CompletionHandler<void ()(NSObject  {objcproto13OS_xpc_object}*)> &&)::$_0>(WebKit::Daemon::Connection::sendWithReply(NSObject  {objcproto13OS_xpc_object}*,WTF::CompletionHandler<void ()(NSObject  {objcproto13OS_xpc_object}*)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(NSObject  {objcproto13OS_xpc_object}*)>::fromCallable<WebKit::Daemon::Connection::sendWithReply(NSObject  {objcproto13OS_xpc_object}*,WTF::CompletionHandler<void ()(NSObject  {objcproto13OS_xpc_object}*)> &&)::$_0>(WebKit::Daemon::Connection::sendWithReply(NSObject  {objcproto13OS_xpc_object}*,WTF::CompletionHandler<void ()(NSObject  {objcproto13OS_xpc_object}*)> &&)::$_0)::{lambda(void *,NSObject  {objcproto13OS_xpc_object}*)#1}::__invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_19788933C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::shouldLogFullImageTranslationResults(void)::$_0 &&>>()
{
  uint64_t result;

  result = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("WebKitLogFullImageTranslationResults"));
  byte_1ECE7344B = result;
  return result;
}

uint64_t WTF::BlockPtr<void ()(VKCImageAnalysis *,NSError *)>::fromCallable<WebKit::requestVisualTranslation(VKCImageAnalyzer *,NSURL *,WTF::String const&,WTF::String const&,CGImage *,WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)> &&)::$_0>(WebKit::requestVisualTranslation(VKCImageAnalyzer *,NSURL *,WTF::String const&,WTF::String const&,CGImage *,WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t result;

  v3 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = a1[4];
  a1[4] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(VKCImageAnalysis *,NSError *)>::fromCallable<WebKit::requestVisualTranslation(VKCImageAnalyzer *,NSURL *,WTF::String const&,WTF::String const&,CGImage *,WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)> &&)::$_0>(WebKit::requestVisualTranslation(VKCImageAnalyzer *,NSURL *,WTF::String const&,WTF::String const&,CGImage *,WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)> &&)::$_0)::{lambda(void *,VKCImageAnalysis *,NSError *)#1}::__invoke(_QWORD *a1, CFTypeRef cf, CFTypeRef a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  WTF::StringImpl *v12;
  uint64_t result;
  uint64_t v14;

  v6 = a1[4];
  a1[4] = 0;
  if (cf)
    CFRetain(cf);
  if (a3)
    CFRetain(a3);
  v7 = (WTF::StringImpl *)a1[5];
  if (v7)
    *(_DWORD *)v7 += 2;
  v8 = (WTF::StringImpl *)a1[6];
  if (v8)
    *(_DWORD *)v8 += 2;
  v10 = a1[7];
  v9 = a1[8];
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x40);
  *v11 = &off_1E3508A28;
  v11[1] = v6;
  v11[2] = cf;
  v11[3] = a3;
  if (v7)
    *(_DWORD *)v7 += 2;
  v11[4] = v7;
  if (v8)
    *(_DWORD *)v8 += 2;
  v11[5] = v8;
  v11[6] = v10;
  v11[7] = v9;
  v14 = (uint64_t)v11;
  WTF::callOnMainRunLoop();
  result = v14;
  if (v14)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (!v8)
  {
LABEL_18:
    if (!v7)
      return result;
    goto LABEL_21;
  }
  if (*(_DWORD *)v8 != 2)
  {
    *(_DWORD *)v8 -= 2;
    goto LABEL_18;
  }
  result = WTF::StringImpl::destroy(v8, v12);
  if (!v7)
    return result;
LABEL_21:
  if (*(_DWORD *)v7 == 2)
    return WTF::StringImpl::destroy(v7, v12);
  *(_DWORD *)v7 -= 2;
  return result;
}

void sub_197889548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::requestVisualTranslation(VKCImageAnalyzer *,NSURL *,WTF::String const&,WTF::String const&,CGImage *,WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)> &&)::$_0::operator()(VKCImageAnalysis *,NSError *)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  const void *v5;
  const void *v6;
  uint64_t v7;

  *a1 = &off_1E3508A28;
  v3 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (const void *)a1[3];
  a1[3] = 0;
  if (v5)
    CFRelease(v5);
  v6 = (const void *)a1[2];
  a1[2] = 0;
  if (v6)
    CFRelease(v6);
  v7 = a1[1];
  a1[1] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::requestVisualTranslation(VKCImageAnalyzer *,NSURL *,WTF::String const&,WTF::String const&,CGImage *,WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)> &&)::$_0::operator()(VKCImageAnalysis *,NSError *)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  const void *v5;
  const void *v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E3508A28;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
    CFRelease(v5);
  v6 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
    CFRelease(v6);
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::requestVisualTranslation(VKCImageAnalyzer *,NSURL *,WTF::String const&,WTF::String const&,CGImage *,WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)> &&)::$_0::operator()(VKCImageAnalysis *,NSError *)::{lambda(void)#1},void>::call(uint64_t a1)
{
  double v2;
  double v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  void *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  void *v18;
  char *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  char *v22;
  WTF *v23;
  NSObject *v24;
  char *v25;
  uint64_t v26;
  void *v27;
  WTF *v28;
  NSObject *v29;
  char *v30;
  void *v31;
  WTF *v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  WTF *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  void *v41;
  CFTypeRef v42;
  void *v43;
  void *v44;
  WTF::StringImpl *v45;
  WTF *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  char v54;
  void *v55;
  const __CFString *v56;
  const __CFString *v57;
  const __CFString *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF *v61;
  WTF::StringImpl *v62;
  WTF *v63;
  WTF *v64[2];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  int v70;
  char v71;
  _BYTE buf[12];
  __int16 v73;
  double v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  char *v78;
  uint8_t v79[32];
  __int128 v80;
  CFTypeRef cf;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  v3 = v2 - *(double *)(a1 + 56);
  v4 = *(void **)(a1 + 16);
  if (v4)
  {
    if ((objc_msgSend(v4, "hasResultsForAnalysisTypes:", 1) & 1) != 0)
    {
      v5 = (void *)objc_msgSend(*(id *)(a1 + 16), "allLines");
      if (WebKit::shouldLogFullImageTranslationResults((WebKit *)v5))
      {
        v68 = 0;
        v69 = 0;
        v70 = 0;
        v71 = 1;
        *(_OWORD *)v64 = 0u;
        v65 = 0u;
        v66 = 0u;
        v67 = 0u;
        v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", v64, v79, 16);
        if (v6)
        {
          v7 = *(_QWORD *)v65;
          v8 = 1;
          do
          {
            v9 = 0;
            do
            {
              if (*(_QWORD *)v65 != v7)
                objc_enumerationMutation(v5);
              v10 = (void *)*((_QWORD *)v64[1] + v9);
              if ((v8 & 1) == 0)
                WTF::StringBuilder::append();
              MEMORY[0x19AEABCC8](buf, objc_msgSend(v10, "string"));
              if (v70 || v69)
              {
                if (*(_QWORD *)buf)
                {
                  v14 = *(_QWORD *)(*(_QWORD *)buf + 8);
                  v15 = *(unsigned int *)(*(_QWORD *)buf + 4) | ((unint64_t)((*(_DWORD *)(*(_QWORD *)buf + 16) >> 2) & 1) << 32);
                }
                else
                {
                  v14 = 0;
                  v15 = 0x100000000;
                }
                WTF::StringBuilder::append((uint64_t)&v68, v14, v15);
                v12 = *(WTF::StringImpl **)buf;
              }
              else
              {
                WTF::String::operator=(&v68, (WTF::StringImpl *)buf);
                v12 = *(WTF::StringImpl **)buf;
                if (*(_QWORD *)buf)
                  v13 = *(_DWORD *)(*(_QWORD *)buf + 4);
                else
                  v13 = 0;
                v70 = v13;
              }
              *(_QWORD *)buf = 0;
              if (v12)
              {
                if (*(_DWORD *)v12 == 2)
                  WTF::StringImpl::destroy(v12, v11);
                else
                  *(_DWORD *)v12 -= 2;
              }
              v8 = 0;
              ++v9;
            }
            while (v6 != v9);
            v16 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", v64, v79, 16);
            v6 = v16;
            v8 = 0;
          }
          while (v16);
        }
        v17 = qword_1ECE71BF0;
        if (os_log_type_enabled((os_log_t)qword_1ECE71BF0, OS_LOG_TYPE_DEFAULT))
        {
          WTF::String::number(*(WTF::String **)(a1 + 48));
          WTF::String::utf8();
          if (v63)
            v19 = (char *)v63 + 16;
          else
            v19 = 0;
          v20 = objc_msgSend(v5, "count");
          v21 = v68;
          if (v68
            || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v68),
                WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v68),
                (v21 = v68) != 0))
          {
            *(_DWORD *)v21 += 2;
          }
          v60 = v21;
          WTF::String::utf8();
          if (v61)
            v22 = (char *)v61 + 16;
          else
            v22 = 0;
          *(_DWORD *)buf = 136446979;
          *(_QWORD *)&buf[4] = v19;
          v73 = 2048;
          v74 = v3;
          v75 = 2048;
          v76 = v20;
          v77 = 2081;
          v78 = v22;
          _os_log_impl(&dword_196BCC000, v17, OS_LOG_TYPE_DEFAULT, "[#%{public}s] Image translation recognized text in %.3f sec. (line count: %zu): \"%{private}s\"", buf, 0x2Au);
          v23 = v61;
          v61 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 1)
              WTF::fastFree(v23, v18);
            else
              --*(_DWORD *)v23;
          }
          v45 = v60;
          v59 = 0;
          if (v45)
          {
            if (*(_DWORD *)v45 == 2)
              WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v18);
            else
              *(_DWORD *)v45 -= 2;
          }
          v46 = v63;
          v63 = 0;
          if (v46)
          {
            if (*(_DWORD *)v46 == 1)
              WTF::fastFree(v46, v18);
            else
              --*(_DWORD *)v46;
          }
          v47 = v62;
          v62 = 0;
          if (v47)
          {
            if (*(_DWORD *)v47 == 2)
              WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v18);
            else
              *(_DWORD *)v47 -= 2;
          }
        }
        v48 = v69;
        v69 = 0;
        if (v48)
        {
          if (*(_DWORD *)v48 == 2)
            WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v18);
          else
            *(_DWORD *)v48 -= 2;
        }
        v34 = (uint64_t)v68;
        v68 = 0;
        if (!v34)
          goto LABEL_99;
      }
      else
      {
        v33 = qword_1ECE71BF0;
        v34 = os_log_type_enabled((os_log_t)qword_1ECE71BF0, OS_LOG_TYPE_DEFAULT);
        if (!(_DWORD)v34)
          goto LABEL_99;
        WTF::String::number(*(WTF::String **)(a1 + 48));
        WTF::String::utf8();
        v35 = objc_msgSend(v5, "count");
        v36 = (char *)v64[0] + 16;
        *(_DWORD *)v79 = 136446722;
        if (!v64[0])
          v36 = 0;
        *(_QWORD *)&v79[4] = v36;
        *(_WORD *)&v79[12] = 2048;
        *(double *)&v79[14] = v3;
        *(_WORD *)&v79[22] = 2048;
        *(_QWORD *)&v79[24] = v35;
        _os_log_impl(&dword_196BCC000, v33, OS_LOG_TYPE_DEFAULT, "[#%{public}s] Image translation recognized text in %.3f sec. (line count: %zu)", v79, 0x20u);
        v37 = v64[0];
        v64[0] = 0;
        if (v37)
        {
          if (*(_DWORD *)v37 == 1)
            WTF::fastFree(v37, v18);
          else
            --*(_DWORD *)v37;
        }
        v34 = *(_QWORD *)buf;
        *(_QWORD *)buf = 0;
        if (!v34)
          goto LABEL_99;
      }
      if (*(_DWORD *)v34 == 2)
        v34 = WTF::StringImpl::destroy((WTF::StringImpl *)v34, (WTF::StringImpl *)v18);
      else
        *(_DWORD *)v34 -= 2;
LABEL_99:
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v34);
      v50 = v49;
      v51 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      v52 = *(_QWORD *)(a1 + 48);
      v53 = malloc_type_malloc(0x38uLL, 0x10E004042FCD456uLL);
      *v53 = MEMORY[0x1E0C809A0];
      v53[1] = 50331650;
      v53[2] = WTF::BlockPtr<void ()(VKCImageAnalysisTranslation *,NSError *)>::fromCallable<WebKit::requestVisualTranslation(VKCImageAnalyzer *,NSURL *,WTF::String const&,WTF::String const&,CGImage *,WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)> &&)::$_0::operator()(VKCImageAnalysis *,NSError *)::{lambda(void)#1}::operator()(void)::{lambda(VKCImageAnalysisTranslation *,NSError *)#1}>(WebKit::requestVisualTranslation(VKCImageAnalyzer *,NSURL *,WTF::String const&,WTF::String const&,CGImage *,WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)> &&)::$_0::operator()(VKCImageAnalysis *,NSError *)::{lambda(void)#1}::operator()(void)::{lambda(VKCImageAnalysisTranslation *,NSError *)#1})::{lambda(void *,VKCImageAnalysisTranslation *,NSError *)#1}::__invoke;
      v53[3] = &WTF::BlockPtr<void ()(VKCImageAnalysisTranslation *,NSError *)>::fromCallable<WebKit::requestVisualTranslation(VKCImageAnalyzer *,NSURL *,WTF::String const&,WTF::String const&,CGImage *,WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)> &&)::$_0::operator()(VKCImageAnalysis *,NSError *)::{lambda(void)#1}::operator()(void)::{lambda(VKCImageAnalysisTranslation *,NSError *)#1}>(WebKit::requestVisualTranslation(VKCImageAnalyzer *,NSURL *,WTF::String const&,WTF::String const&,CGImage *,WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)> &&)::$_0::operator()(VKCImageAnalysis *,NSError *)::{lambda(void)#1}::operator()(void)::{lambda(VKCImageAnalysisTranslation *,NSError *)#1})::descriptor;
      v53[4] = v51;
      v53[5] = v52;
      v53[6] = v50;
      v54 = objc_opt_respondsToSelector();
      v55 = *(void **)(a1 + 16);
      if ((v54 & 1) != 0)
      {
        if (*(_QWORD *)(a1 + 32))
          v56 = (const __CFString *)WTF::StringImpl::operator NSString *();
        else
          v56 = &stru_1E351F1B8;
        if (*(_QWORD *)(a1 + 40))
          v57 = (const __CFString *)WTF::StringImpl::operator NSString *();
        else
          v57 = &stru_1E351F1B8;
        objc_msgSend(v55, "translateFrom:to:withCompletion:", v56, v57, v53, v59, v61, v62, v63, v64[0]);
      }
      else
      {
        if (*(_QWORD *)(a1 + 40))
          v58 = (const __CFString *)WTF::StringImpl::operator NSString *();
        else
          v58 = &stru_1E351F1B8;
        objc_msgSend(v55, "translateTo:withCompletion:", v58, v53, v59, v61, v62, v63, v64[0]);
      }
      _Block_release(v53);
      return;
    }
    v29 = qword_1ECE71BF0;
    if (os_log_type_enabled((os_log_t)qword_1ECE71BF0, OS_LOG_TYPE_DEFAULT))
    {
      WTF::String::number(*(WTF::String **)(a1 + 48));
      WTF::String::utf8();
      if (v64[0])
        v30 = (char *)v64[0] + 16;
      else
        v30 = 0;
      *(_DWORD *)v79 = 136446466;
      *(_QWORD *)&v79[4] = v30;
      *(_WORD *)&v79[12] = 2048;
      *(double *)&v79[14] = v3;
      _os_log_impl(&dword_196BCC000, v29, OS_LOG_TYPE_DEFAULT, "[#%{public}s] Image translation completed in %.3f sec. (no text)", v79, 0x16u);
      v32 = v64[0];
      v64[0] = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 1)
          WTF::fastFree(v32, v31);
        else
          --*(_DWORD *)v32;
      }
      v39 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2)
          WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v31);
        else
          *(_DWORD *)v39 -= 2;
      }
    }
  }
  else
  {
    v24 = qword_1ECE71BF0;
    if (os_log_type_enabled((os_log_t)qword_1ECE71BF0, OS_LOG_TYPE_DEFAULT))
    {
      WTF::String::number(*(WTF::String **)(a1 + 48));
      WTF::String::utf8();
      if (v64[0])
        v25 = (char *)v64[0] + 16;
      else
        v25 = 0;
      v26 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)v79 = 136446722;
      *(_QWORD *)&v79[4] = v25;
      *(_WORD *)&v79[12] = 2048;
      *(double *)&v79[14] = v3;
      *(_WORD *)&v79[22] = 2114;
      *(_QWORD *)&v79[24] = v26;
      _os_log_impl(&dword_196BCC000, v24, OS_LOG_TYPE_DEFAULT, "[#%{public}s] Image translation failed in %.3f sec. (error: %{public}@)", v79, 0x20u);
      v28 = v64[0];
      v64[0] = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 1)
          WTF::fastFree(v28, v27);
        else
          --*(_DWORD *)v28;
      }
      v38 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v27);
        else
          *(_DWORD *)v38 -= 2;
      }
    }
  }
  cf = 0;
  v80 = 0u;
  memset(v79, 0, sizeof(v79));
  v40 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v40 + 16))(v40, v79);
  (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v42 = cf;
  cf = 0;
  if (v42)
    CFRelease(v42);
  WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v80, v41);
  WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v79[16], v43);
  WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v79, v44);
}

void sub_197889F54(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, WTF *a12, WTF *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF::StringImpl *a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,CFTypeRef cf)
{
  if (a13)
  {
    if (*(_DWORD *)a13 == 1)
      WTF::fastFree(a13, a2);
    else
      --*(_DWORD *)a13;
  }
  if (a25)
  {
    if (*(_DWORD *)a25 == 2)
      WTF::StringImpl::destroy(a25, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a25 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::BlockPtr<void ()(VKCImageAnalysisTranslation *,NSError *)>::fromCallable<WebKit::requestVisualTranslation(VKCImageAnalyzer *,NSURL *,WTF::String const&,WTF::String const&,CGImage *,WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)> &&)::$_0::operator()(VKCImageAnalysis *,NSError *)::{lambda(void)#1}::operator()(void)::{lambda(VKCImageAnalysisTranslation *,NSError *)#1}>(WebKit::requestVisualTranslation(VKCImageAnalyzer *,NSURL *,WTF::String const&,WTF::String const&,CGImage *,WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)> &&)::$_0::operator()(VKCImageAnalysis *,NSError *)::{lambda(void)#1}::operator()(void)::{lambda(VKCImageAnalysisTranslation *,NSError *)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unint64_t WTF::BlockPtr<void ()(VKCImageAnalysisTranslation *,NSError *)>::fromCallable<WebKit::requestVisualTranslation(VKCImageAnalyzer *,NSURL *,WTF::String const&,WTF::String const&,CGImage *,WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)> &&)::$_0::operator()(VKCImageAnalysis *,NSError *)::{lambda(void)#1}::operator()(void)::{lambda(VKCImageAnalysisTranslation *,NSError *)#1}>(WebKit::requestVisualTranslation(VKCImageAnalyzer *,NSURL *,WTF::String const&,WTF::String const&,CGImage *,WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)> &&)::$_0::operator()(VKCImageAnalysis *,NSError *)::{lambda(void)#1}::operator()(void)::{lambda(VKCImageAnalysisTranslation *,NSError *)#1})::{lambda(void *,VKCImageAnalysisTranslation *,NSError *)#1}::__invoke(uint64_t a1, void *a2, uint64_t a3)
{
  WebKit *v6;
  double v7;
  double v8;
  NSObject *v9;
  char *v10;
  void *v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  NSObject *v25;
  void *v26;
  char *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF *v31;
  NSObject *v32;
  char *v33;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  void *v38;
  const void *v39;
  void *v40;
  void *v41;
  void *v42;
  WTF::StringImpl *v43;
  WTF *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::String *v47;
  void *v48;
  unint64_t result;
  uint64_t v50;
  uint64_t v51;
  uint64_t i;
  void *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  NSObject *v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  int v63;
  uint64_t v64;
  __int128 v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  void *v68;
  CFTypeRef v69;
  void *v70;
  uint64_t v71;
  WTF *v72[2];
  __int128 v73;
  __int128 v74;
  CFTypeRef cf;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83[2];
  __int128 v84;
  __int128 v85;
  __int128 v86;
  WTF *v87[16];
  _QWORD v88[3];
  __int128 v89;
  uint8_t buf[32];
  __int128 v91;
  const void *v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v6 = (WebKit *)WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  v8 = v7 - *(double *)(a1 + 48);
  if (a3)
  {
    v9 = qword_1ECE71BF0;
    if (os_log_type_enabled((os_log_t)qword_1ECE71BF0, OS_LOG_TYPE_DEFAULT))
    {
      WTF::String::number(*(WTF::String **)(a1 + 40));
      WTF::String::utf8();
      if (v87[0])
        v10 = (char *)v87[0] + 16;
      else
        v10 = 0;
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = v10;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v8;
      *(_WORD *)&buf[22] = 2114;
      *(_QWORD *)&buf[24] = a3;
      _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "[#%{public}s] Image translation failed in %.3f sec. (error: %{public}@)", buf, 0x20u);
      v12 = v87[0];
      v87[0] = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 1)
          WTF::fastFree(v12, v11);
        else
          --*(_DWORD *)v12;
      }
      v36 = v83[0];
      v83[0] = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
          WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v11);
        else
          *(_DWORD *)v36 -= 2;
      }
    }
    v92 = 0;
    v91 = 0u;
    memset(buf, 0, sizeof(buf));
    v37 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v37 + 16))(v37, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
    v39 = v92;
    v92 = 0;
    if (v39)
      CFRelease(v39);
    WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v91, v38);
    WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&buf[16], v40);
    v42 = buf;
    return WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v42, v41);
  }
  if (WebKit::shouldLogFullImageTranslationResults(v6))
  {
    v83[0] = 0;
    v83[1] = 0;
    LODWORD(v84) = 0;
    BYTE4(v84) = 1;
    v76 = 0u;
    v77 = 0u;
    v78 = 0u;
    v79 = 0u;
    v13 = (void *)objc_msgSend(a2, "paragraphs");
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v76, v87, 16);
    if (v14)
    {
      v15 = *(_QWORD *)v77;
      v16 = 1;
      do
      {
        v17 = 0;
        do
        {
          if (*(_QWORD *)v77 != v15)
            objc_enumerationMutation(v13);
          v18 = *(void **)(*((_QWORD *)&v76 + 1) + 8 * v17);
          if ((v16 & 1) == 0)
            WTF::StringBuilder::append();
          MEMORY[0x19AEABCC8](buf, objc_msgSend(v18, "text"));
          if ((_DWORD)v84 || v83[1])
          {
            if (*(_QWORD *)buf)
            {
              v22 = *(_QWORD *)(*(_QWORD *)buf + 8);
              v23 = *(unsigned int *)(*(_QWORD *)buf + 4) | ((unint64_t)((*(_DWORD *)(*(_QWORD *)buf + 16) >> 2) & 1) << 32);
            }
            else
            {
              v22 = 0;
              v23 = 0x100000000;
            }
            WTF::StringBuilder::append((uint64_t)v83, v22, v23);
            v20 = *(WTF::StringImpl **)buf;
          }
          else
          {
            WTF::String::operator=(v83, (WTF::StringImpl *)buf);
            v20 = *(WTF::StringImpl **)buf;
            if (*(_QWORD *)buf)
              v21 = *(_DWORD *)(*(_QWORD *)buf + 4);
            else
              v21 = 0;
            LODWORD(v84) = v21;
          }
          *(_QWORD *)buf = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v19);
            else
              *(_DWORD *)v20 -= 2;
          }
          v16 = 0;
          ++v17;
        }
        while (v14 != v17);
        v24 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v76, v87, 16);
        v14 = v24;
        v16 = 0;
      }
      while (v24);
    }
    v25 = qword_1ECE71BF0;
    if (os_log_type_enabled((os_log_t)qword_1ECE71BF0, OS_LOG_TYPE_DEFAULT))
    {
      WTF::String::number(*(WTF::String **)(a1 + 40));
      WTF::String::utf8();
      if (v72[0])
        v27 = (char *)v72[0] + 16;
      else
        v27 = 0;
      v28 = objc_msgSend((id)objc_msgSend(a2, "paragraphs"), "count");
      v29 = v83[0];
      if (v83[0]
        || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)v83),
            WTF::StringBuilder::reifyString((WTF::StringBuilder *)v83),
            (v29 = v83[0]) != 0))
      {
        *(_DWORD *)v29 += 2;
      }
      v82 = v29;
      WTF::String::utf8();
      if ((_QWORD)v80)
        v30 = v80 + 16;
      else
        v30 = 0;
      *(_DWORD *)buf = 136446979;
      *(_QWORD *)&buf[4] = v27;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v8;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = v28;
      LOWORD(v91) = 2081;
      *(_QWORD *)((char *)&v91 + 2) = v30;
      _os_log_impl(&dword_196BCC000, v25, OS_LOG_TYPE_DEFAULT, "[#%{public}s] Image translation completed in %.3f sec. (paragraph count: %zu): \"%{private}s\"", buf, 0x2Au);
      v31 = (WTF *)v80;
      *(_QWORD *)&v80 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 1)
          WTF::fastFree(v31, v26);
        else
          --*(_DWORD *)v31;
      }
      v43 = v82;
      v82 = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2)
          WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v26);
        else
          *(_DWORD *)v43 -= 2;
      }
      v44 = v72[0];
      v72[0] = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 1)
          WTF::fastFree(v44, v26);
        else
          --*(_DWORD *)v44;
      }
      v45 = (WTF::StringImpl *)v88[0];
      v88[0] = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 2)
          WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v26);
        else
          *(_DWORD *)v45 -= 2;
      }
    }
    v34 = v83[1];
    v83[1] = 0;
    if (!v34)
      goto LABEL_79;
    v35 = *(_DWORD *)v34 - 2;
    if (*(_DWORD *)v34 != 2)
    {
LABEL_77:
      *(_DWORD *)v34 = v35;
      goto LABEL_79;
    }
    WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v26);
    goto LABEL_79;
  }
  v32 = qword_1ECE71BF0;
  if (os_log_type_enabled((os_log_t)qword_1ECE71BF0, OS_LOG_TYPE_DEFAULT))
  {
    WTF::String::number(*(WTF::String **)(a1 + 40));
    WTF::String::utf8();
    if (v87[0])
      v33 = (char *)v87[0] + 16;
    else
      v33 = 0;
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = v33;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = v8;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = objc_msgSend((id)objc_msgSend(a2, "paragraphs"), "count");
    _os_log_impl(&dword_196BCC000, v32, OS_LOG_TYPE_DEFAULT, "[#%{public}s] Image translation completed in %.3f sec. (paragraph count: %zu)", buf, 0x20u);
    v34 = v87[0];
    v87[0] = 0;
    if (v34)
    {
      v35 = *(_DWORD *)v34 - 1;
      if (*(_DWORD *)v34 == 1)
      {
        WTF::fastFree(v34, v26);
        goto LABEL_79;
      }
      goto LABEL_77;
    }
LABEL_79:
    v46 = v83[0];
    v83[0] = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v26);
      else
        *(_DWORD *)v46 -= 2;
    }
  }
  v47 = *(WTF::String **)(a1 + 40);
  *(_OWORD *)v72 = 0u;
  v73 = 0u;
  v74 = 0u;
  cf = 0;
  v48 = (void *)objc_msgSend(a2, "paragraphs");
  result = objc_msgSend(v48, "count");
  if (result)
  {
    if (result >= 0x6666667)
    {
      __break(0xC471u);
      return result;
    }
    DWORD2(v74) = 40 * (int)result / 0x28u;
    *(_QWORD *)&v74 = WTF::fastMalloc((WTF *)(40 * result));
  }
  v85 = 0u;
  v86 = 0u;
  *(_OWORD *)v83 = 0u;
  v84 = 0u;
  v50 = objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", v83, buf, 16, a1);
  if (!v50)
    goto LABEL_120;
  v51 = *(_QWORD *)v84;
  do
  {
    for (i = 0; i != v50; ++i)
    {
      if (*(_QWORD *)v84 != v51)
        objc_enumerationMutation(v48);
      v53 = (void *)*((_QWORD *)v83[1] + i);
      if (objc_msgSend((id)objc_msgSend(v53, "text"), "length"))
      {
        if ((objc_msgSend(v53, "isPassthrough") & 1) != 0)
          continue;
        WebKit::floatQuad(&v80, (void *)objc_msgSend(v53, "quad"));
        if (*((float *)&v80 + 2) > *((float *)&v81 + 2)
          && *((float *)&v80 + 3) > *((float *)&v81 + 3)
          && *(float *)&v80 < *(float *)&v81
          && *((float *)&v80 + 1) > *((float *)&v81 + 1))
        {
          *((float *)&v80 + 1) = 1.0 - *((float *)&v80 + 1);
          *((float *)&v80 + 3) = 1.0 - *((float *)&v80 + 3);
          *((float *)&v81 + 1) = 1.0 - *((float *)&v81 + 1);
          *((float *)&v81 + 3) = 1.0 - *((float *)&v81 + 3);
        }
        MEMORY[0x19AEABCC8](&v82, objc_msgSend(v53, "text"));
        v55 = v82;
        if (v82)
          *(_DWORD *)v82 += 2;
        v88[0] = v55;
        *(_OWORD *)&v88[1] = v80;
        v89 = v81;
        if (HIDWORD(v74) == DWORD2(v74))
        {
          v56 = WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v74, HIDWORD(v74) + 1, (unint64_t)v88);
          v57 = v74 + 40 * HIDWORD(v74);
          v58 = *(_QWORD *)v56;
          *(_QWORD *)v56 = 0;
          *(_QWORD *)v57 = v58;
          v59 = *(_OWORD *)(v56 + 8);
          *(_OWORD *)(v57 + 24) = *(_OWORD *)(v56 + 24);
          *(_OWORD *)(v57 + 8) = v59;
        }
        else
        {
          v64 = v74 + 40 * HIDWORD(v74);
          v88[0] = 0;
          *(_QWORD *)v64 = v55;
          v65 = *(_OWORD *)&v88[1];
          *(_OWORD *)(v64 + 24) = v89;
          *(_OWORD *)(v64 + 8) = v65;
        }
        ++HIDWORD(v74);
        v62 = (WTF::StringImpl *)v88[0];
        v88[0] = 0;
        if (!v62)
          goto LABEL_114;
        v63 = *(_DWORD *)v62 - 2;
        if (*(_DWORD *)v62 != 2)
          goto LABEL_112;
        WTF::StringImpl::destroy(v62, v54);
      }
      else
      {
        v60 = qword_1ECE71BF0;
        if (!os_log_type_enabled((os_log_t)qword_1ECE71BF0, OS_LOG_TYPE_DEFAULT))
          continue;
        WTF::String::number(v47);
        WTF::String::utf8();
        if ((_QWORD)v80)
          v61 = v80 + 16;
        else
          v61 = 0;
        LODWORD(v88[0]) = 136446210;
        *(_QWORD *)((char *)v88 + 4) = v61;
        _os_log_impl(&dword_196BCC000, v60, OS_LOG_TYPE_DEFAULT, "[#%{public}s] Skipping empty translation paragraph", (uint8_t *)v88, 0xCu);
        v62 = (WTF::StringImpl *)v80;
        *(_QWORD *)&v80 = 0;
        if (v62)
        {
          v63 = *(_DWORD *)v62 - 1;
          if (*(_DWORD *)v62 == 1)
          {
            WTF::fastFree(v62, v54);
            goto LABEL_114;
          }
LABEL_112:
          *(_DWORD *)v62 = v63;
        }
      }
LABEL_114:
      v66 = v82;
      v82 = 0;
      if (v66)
      {
        if (*(_DWORD *)v66 == 2)
          WTF::StringImpl::destroy(v66, v54);
        else
          *(_DWORD *)v66 -= 2;
      }
    }
    v50 = objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", v83, buf, 16);
  }
  while (v50);
LABEL_120:
  v67 = *(_QWORD *)(v71 + 32);
  *(_QWORD *)(v71 + 32) = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v67 + 16))(v67, v72);
  (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  v69 = cf;
  cf = 0;
  if (v69)
    CFRelease(v69);
  WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v74, v68);
  WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v73, v70);
  v42 = v72;
  return WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v42, v41);
}

void sub_19788AA84(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, CFTypeRef cf, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,WTF::StringImpl *a34,WTF::StringImpl *a35,WTF::StringImpl *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,WTF *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,WTF::StringImpl *a59)
{
  if (a34)
  {
    if (*(_DWORD *)a34 == 2)
      WTF::StringImpl::destroy(a34, a2);
    else
      *(_DWORD *)a34 -= 2;
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 1)
      WTF::fastFree(a13, a2);
    else
      --*(_DWORD *)a13;
  }
  if (a59)
  {
    if (*(_DWORD *)a59 == 2)
      WTF::StringImpl::destroy(a59, a2);
    else
      *(_DWORD *)a59 -= 2;
  }
  if (a36)
  {
    if (*(_DWORD *)a36 == 2)
      WTF::StringImpl::destroy(a36, a2);
    else
      *(_DWORD *)a36 -= 2;
  }
  if (a35)
  {
    if (*(_DWORD *)a35 == 2)
      WTF::StringImpl::destroy(a35, a2);
    else
      *(_DWORD *)a35 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::BlockPtr<void ()(CGImage *,NSError *)>::fromCallable<WebKit::requestBackgroundRemoval(CGImage *,WTF::CompletionHandler<void ()(CGImage *)> &&)::$_0>(WebKit::requestBackgroundRemoval(CGImage *,WTF::CompletionHandler<void ()(CGImage *)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(CGImage *,NSError *)>::fromCallable<WebKit::requestBackgroundRemoval(CGImage *,WTF::CompletionHandler<void ()(CGImage *)> &&)::$_0>(WebKit::requestBackgroundRemoval(CGImage *,WTF::CompletionHandler<void ()(CGImage *)> &&)::$_0)::{lambda(void *,CGImage *,NSError *)#1}::__invoke(uint64_t a1, CFTypeRef cf, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v6 = qword_1ECE71C18;
    if (os_log_type_enabled((os_log_t)qword_1ECE71C18, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v11[0]) = 138412290;
      *(_QWORD *)((char *)v11 + 4) = a3;
      _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "Remove background failed with error: %@", (uint8_t *)v11, 0xCu);
    }
  }
  if (cf)
    CFRetain(cf);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = 0;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v9 = &off_1E3508A90;
  v9[1] = cf;
  v9[2] = v7;
  v9[3] = v8;
  v11[0] = v9;
  WTF::callOnMainRunLoop();
  result = v11[0];
  v11[0] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19788ADF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::requestBackgroundRemoval(CGImage *,WTF::CompletionHandler<void ()(CGImage *)> &&)::$_0::operator()(CGImage *,NSError *)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;

  *a1 = &off_1E3508A90;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (const void *)a1[1];
  a1[1] = 0;
  if (v3)
    CFRelease(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::requestBackgroundRemoval(CGImage *,WTF::CompletionHandler<void ()(CGImage *)> &&)::$_0::operator()(CGImage *,NSError *)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  const void *v4;

  *(_QWORD *)this = &off_1E3508A90;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    CFRelease(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::requestBackgroundRemoval(CGImage *,WTF::CompletionHandler<void ()(CGImage *)> &&)::$_0::operator()(CGImage *,NSError *)::{lambda(void)#1},void>::call(uint64_t a1)
{
  NSObject *v2;
  _BOOL8 v3;
  double v4;
  double v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  double v11;
  __int16 v12;
  _BOOL4 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71C18;
  v3 = os_log_type_enabled((os_log_t)qword_1ECE71C18, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v3);
    v5 = (v4 - *(double *)(a1 + 24)) * 1000.0;
    v6 = *(_QWORD *)(a1 + 8) != 0;
    v10 = 134218240;
    v11 = v5;
    v12 = 1024;
    v13 = v6;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "Remove background finished in %.0f ms (found subject? %d)", (uint8_t *)&v10, 0x12u);
  }
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v7);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

void sub_19788AFE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

Class initBELayerHierarchy(void)
{
  Class result;

  if ((byte_1ECE7344C & 1) == 0)
  {
    *(_QWORD *)algn_1ECE73498 = dlopen("/System/Library/Frameworks/BrowserEngineKit.framework/BrowserEngineKit", 2);
    byte_1ECE7344C = 1;
  }
  result = objc_getClass("BELayerHierarchy");
  qword_1ECE73490 = (uint64_t)result;
  getBELayerHierarchyClass = BELayerHierarchyFunction;
  return result;
}

uint64_t BELayerHierarchyFunction(void)
{
  return qword_1ECE73490;
}

Class initBELayerHierarchyHostingTransactionCoordinator(void)
{
  Class result;

  if ((byte_1ECE7344C & 1) == 0)
  {
    *(_QWORD *)algn_1ECE73498 = dlopen("/System/Library/Frameworks/BrowserEngineKit.framework/BrowserEngineKit", 2);
    byte_1ECE7344C = 1;
  }
  result = objc_getClass("BELayerHierarchyHostingTransactionCoordinator");
  qword_1ECE734A0 = (uint64_t)result;
  getBELayerHierarchyHostingTransactionCoordinatorClass = BELayerHierarchyHostingTransactionCoordinatorFunction;
  return result;
}

uint64_t BELayerHierarchyHostingTransactionCoordinatorFunction(void)
{
  return qword_1ECE734A0;
}

Class initBELayerHierarchyHandle(void)
{
  Class result;

  if ((byte_1ECE7344C & 1) == 0)
  {
    *(_QWORD *)algn_1ECE73498 = dlopen("/System/Library/Frameworks/BrowserEngineKit.framework/BrowserEngineKit", 2);
    byte_1ECE7344C = 1;
  }
  result = objc_getClass("BELayerHierarchyHandle");
  qword_1ECE734A8 = (uint64_t)result;
  getBELayerHierarchyHandleClass = BELayerHierarchyHandleFunction;
  return result;
}

uint64_t BELayerHierarchyHandleFunction(void)
{
  return qword_1ECE734A8;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::platformOpen(void)::$_2,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3508AF8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 8));
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::sendWithReply(WebKit::PCM::MessageType,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::{lambda(NSObject  {objcproto13OS_xpc_object}*)#1},void,NSObject>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3508B20;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::sendWithReply(WebKit::PCM::MessageType,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::{lambda(NSObject  {objcproto13OS_xpc_object}*)#1},void,NSObject>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3508B20;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::sendWithReply(WebKit::PCM::MessageType,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::{lambda(NSObject  {objcproto13OS_xpc_object}*)#1},void,NSObject>::call(uint64_t a1, id a2)
{
  WTF *result;
  size_t v5;
  WTF *v6;
  WTF *v7;
  char v8;
  uint64_t v9;
  void *v10;
  size_t length;
  WTF *v12;
  uint64_t v13;

  if (object_getClass(a2) == (Class)MEMORY[0x1E0C812F8] && xpc_dictionary_get_uint64(a2, "version") == 1)
  {
    length = 0;
    result = (WTF *)xpc_dictionary_get_data(a2, "encoded message", &length);
    v5 = length;
    v12 = 0;
    LODWORD(v13) = 0;
    HIDWORD(v13) = length;
    if (length)
    {
      if (HIDWORD(length))
      {
        __break(0xC471u);
        return result;
      }
      v6 = result;
      v7 = (WTF *)WTF::fastMalloc((WTF *)length);
      LODWORD(v13) = v5;
      v12 = v7;
      do
      {
        v8 = *(_BYTE *)v6;
        v6 = (WTF *)((char *)v6 + 1);
        *(_BYTE *)v7 = v8;
        v7 = (WTF *)((char *)v7 + 1);
        --v5;
      }
      while (v5);
    }
    v9 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v9 + 16))(v9, &v12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v9 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v9 + 16))(v9, &v12);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  result = v12;
  if (v12)
  {
    v12 = 0;
    LODWORD(v13) = 0;
    return (WTF *)WTF::fastFree(result, v10);
  }
  return result;
}

void sub_19788B350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12)
{
  uint64_t v12;
  void *v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (a11)
    WTF::fastFree(a11, v14);
  _Unwind_Resume(a1);
}

uint64_t WebKit::getLogChannel(WebKit *this, const WTF::String *a2)
{
  const WTF::String *v2;

  v2 = this;
  {
    WebKit::LogChannels::LogChannels((WebKit::LogChannels *)&WebKit::logChannels(void)::logChannels);
    v2 = this;
  }
  return WTF::LogChannels::getLogChannel((WTF::LogChannels *)&WebKit::logChannels(void)::logChannels, v2);
}

_QWORD *IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(_QWORD *result, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v13;
  uint64_t v14;
  const void *v15;
  size_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v2 = result;
  v3 = *a2;
  if (!*a2)
  {
    v22 = result[2];
    v23 = *result + v22;
    v24 = (v23 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v8 = v24 >= v23;
    v25 = v24 - v23;
    if (!v8)
      return result;
    v26 = v25 + v22;
    v27 = v26 + 4;
    if (v26 <= 0xFFFFFFFFFFFFFFFBLL && v27 <= result[1])
    {
      *(_DWORD *)(*result + v26) = -1;
      result[2] = v27;
      return result;
    }
LABEL_33:
    result[1] = 0;
    return result;
  }
  v4 = *(_DWORD *)(v3 + 16);
  v5 = result[2];
  v6 = *result + v5;
  v7 = (v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v8 = v7 >= v6;
  v9 = v7 - v6;
  if (v8)
  {
    v10 = v9 + v5;
    v11 = v9 + v5 + 4;
    if (v10 > 0xFFFFFFFFFFFFFFFBLL || v11 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(*result + v10) = *(_DWORD *)(v3 + 4);
      result[2] = v11;
      v5 = v11;
    }
  }
  v13 = (v4 >> 2) & 1;
  if (v5 >= result[1])
  {
    result[1] = 0;
  }
  else
  {
    *(_BYTE *)(*result + v5++) = v13;
    result[2] = v5;
  }
  v14 = *a2;
  if (v13)
  {
    if (v14)
    {
      v15 = *(const void **)(v14 + 8);
      v16 = *(unsigned int *)(v14 + 4);
    }
    else
    {
      v15 = 0;
      v16 = 0;
    }
    v21 = v16 + v5;
    if (__CFADD__(v16, v5) || v21 > result[1])
      goto LABEL_33;
    v17 = *result;
    goto LABEL_31;
  }
  if (v14)
  {
    v15 = *(const void **)(v14 + 8);
    v16 = 2 * *(unsigned int *)(v14 + 4);
  }
  else
  {
    v15 = 0;
    v16 = 0;
  }
  v17 = *result;
  v18 = *result + v5;
  v19 = (v18 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v8 = v19 >= v18;
  v20 = v19 - v18;
  if (v8)
  {
    v5 += v20;
    v21 = v5 + v16;
    if (__CFADD__(v5, v16) || v21 > result[1])
      goto LABEL_33;
LABEL_31:
    result = memcpy((void *)(v17 + v5), v15, v16);
    v2[2] = v21;
  }
  return result;
}

void IPC::Connection::SyncMessageStateRelease::operator()(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;

  if (a2)
  {
    if (__ldaxr(IPC::Connection::SyncMessageState::syncMessageStateMapLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, IPC::Connection::SyncMessageState::syncMessageStateMapLock))
    {
LABEL_5:
      v4 = *(_DWORD *)(a2 + 88);
      v5 = v4 - 1;
      *(_DWORD *)(a2 + 88) = v4 - 1;
      if (v4 == 1)
      {
        {
          IPC::Connection::SyncMessageState::syncMessageStateMap(void)::map = 0;
        }
        v8 = *(_QWORD *)(a2 + 80);
        v6 = (_QWORD *)WTF::HashTable<WTF::SerialFunctionDispatcher *,WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>>,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashMap<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<IPC::Connection::SyncMessageState *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::SerialFunctionDispatcher *>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<IPC::Connection::SyncMessageState *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>>,WTF::SerialFunctionDispatcher *>(&IPC::Connection::SyncMessageState::syncMessageStateMap(void)::map, &v8);
        WTF::HashMap<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<IPC::Connection::SyncMessageState *>,WTF::HashTableTraits>::remove(&IPC::Connection::SyncMessageState::syncMessageStateMap(void)::map, v6);
      }
      v7 = __ldxr(IPC::Connection::SyncMessageState::syncMessageStateMapLock);
      if (v7 == 1)
      {
        if (!__stlxr(0, IPC::Connection::SyncMessageState::syncMessageStateMapLock))
          goto LABEL_11;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)IPC::Connection::SyncMessageState::syncMessageStateMapLock);
LABEL_11:
      if (!v5)
      {
        IPC::Connection::SyncMessageState::~SyncMessageState((IPC::Connection::SyncMessageState *)a2);
        MEMORY[0x19AEB936C]();
      }
      return;
    }
    MEMORY[0x19AEABB3C](IPC::Connection::SyncMessageState::syncMessageStateMapLock);
    goto LABEL_5;
  }
}

unsigned __int8 ***IPC::Connection::SyncMessageState::enqueueMatchingMessages(IPC::Connection&,IPC::MessageReceiveQueue &,IPC::ReceiverMatcher const&)::$_0::operator()(uint64_t a1, unint64_t *a2)
{
  __int128 v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  unsigned __int8 ***v16;
  unsigned __int8 ***v17;
  unsigned __int8 ***v18;
  unsigned __int8 ***result;
  void *v20;
  unsigned __int8 ***v21;
  unsigned int v22;
  __int128 v23;
  __int128 v24;

  v3 = 0uLL;
  v23 = 0u;
  v24 = 0u;
  v4 = *a2;
  v5 = a2[1];
  if (*a2 == v5)
  {
    v6 = 0;
    v7 = 0;
    LODWORD(v8) = *((_DWORD *)a2 + 6);
    v9 = *a2;
  }
  else
  {
    do
    {
      v11 = a2[2];
      v12 = (uint64_t *)(v11 + 24 * v4);
      if (*v12 != *(_QWORD *)a1)
        goto LABEL_8;
      v13 = *(_QWORD *)(v11 + 24 * v4 + 8);
      v14 = *(unsigned __int8 **)(a1 + 8);
      if (!v14[1])
        goto LABEL_15;
      v15 = *(unsigned __int16 *)(v13 + 50);
      if (v15 >= 0xE98)
        v15 = 3736;
      if (*v14 == LOBYTE((&IPC::Detail::messageDescriptions)[3 * v15 + 2])
        && (!v14[16] || *((_QWORD *)v14 + 1) == *(_QWORD *)(v13 + 64)))
      {
LABEL_15:
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
      }
      else
      {
LABEL_8:
        WTF::Deque<IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage,0ul>::append((uint64_t)&v23, v12);
      }
      v8 = *((unsigned int *)a2 + 6);
      v4 += v8 + 1;
      do
        v4 -= v8;
      while (v4 >= v8);
    }
    while (v5 != v4);
    v9 = *a2;
    v4 = a2[1];
    v3 = v23;
    v7 = v24;
    v6 = DWORD2(v24);
  }
  *(_OWORD *)a2 = v3;
  v16 = (unsigned __int8 ***)a2[2];
  a2[2] = v7;
  *((_DWORD *)a2 + 6) = v6;
  if (v9 > v4)
  {
    v21 = &v16[3 * v4];
    v22 = v8;
    WTF::VectorDestructor<true,IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage>::destruct(v16, v21);
    v17 = &v16[3 * v9];
    v18 = &v16[3 * v22];
  }
  else
  {
    v17 = &v16[3 * v9];
    v18 = &v16[3 * v4];
  }
  result = WTF::VectorDestructor<true,IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage>::destruct(v17, v18);
  if (v16)
    return (unsigned __int8 ***)WTF::fastFree((WTF *)v16, v20);
  return result;
}

uint64_t IPC::Connection::SyncMessageState::processIncomingMessage(uint64_t a1, uint64_t a2, IPC::Decoder **a3)
{
  int v3;
  uint64_t result;
  unsigned __int8 *v8;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  IPC::Decoder *v26;
  IPC::Decoder *v27;
  WTF *v28;
  void *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 **v33;
  unsigned __int8 **v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  IPC::Decoder *v39;
  uint64_t v40;
  uint64_t v41;
  IPC::Decoder *v42;
  WTF *v43;
  void *v44;
  unsigned __int8 **v46;
  unsigned __int8 **v47;
  IPC::Decoder *v48;
  uint64_t IdentifierInternal;

  if ((*((_BYTE *)*a3 + 48) & 1) != 0)
    v3 = 1;
  else
    v3 = *((_BYTE *)*a3 + 48) & 2;
  if (!v3)
    return 0;
  if (v3 == 2 && !atomic_load((unsigned int *)&IPC::UnboundedSynchronousIPCScope::unboundedSynchronousIPCCount))
    return 0;
  v8 = (unsigned __int8 *)(a1 + 3);
  if (__ldaxr((unsigned __int8 *)(a1 + 3)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_10;
  }
  MEMORY[0x19AEABB3C](a1 + 3);
LABEL_10:
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a2);
  v11 = (uint64_t *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10
    || (WTF::HashTable<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>,WTF::HashTraits<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>,WTF::HashTraits<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>>::expand((uint64_t *)(a1 + 8)),
        (v10 = *v11) != 0))
  {
    v12 = *(_DWORD *)(v10 - 8);
  }
  else
  {
    v12 = 0;
  }
  v13 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
  v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  v16 = v12 & ((v15 >> 31) ^ v15);
  v17 = (_QWORD *)(v10 + 8 * v16);
  v18 = *v17;
  if (*v17)
  {
    v35 = 0;
    v36 = 1;
    do
    {
      if (v18 == a2)
      {
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref((unsigned __int8 **)a2);
        v25 = 1;
        goto LABEL_21;
      }
      if (v18 == -1)
        v35 = v17;
      v16 = (v16 + v36) & v12;
      v17 = (_QWORD *)(v10 + 8 * v16);
      v18 = *v17;
      ++v36;
    }
    while (*v17);
    if (v35)
    {
      *v35 = 0;
      --*(_DWORD *)(*v11 - 16);
      v17 = v35;
    }
  }
  *v17 = a2;
  v19 = *v11;
  if (*v11)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v21 = *v11;
  if (*v11)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 > 2 * v23)
      goto LABEL_20;
LABEL_59:
    WTF::HashTable<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>,WTF::HashTraits<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>,WTF::HashTraits<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>>::expand((uint64_t *)(a1 + 8));
    goto LABEL_20;
  }
  if (3 * v24 <= 4 * v23)
    goto LABEL_59;
LABEL_20:
  v25 = 0;
LABEL_21:
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a2 + 104));
  if ((*((_BYTE *)*a3 + 48) & 8) == 0 || *(_QWORD *)(a2 + 112) == *(_QWORD *)(a2 + 120))
  {
LABEL_22:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v47, (unsigned __int8 **)a2);
    v26 = *a3;
    *a3 = 0;
    v48 = v26;
    IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
    WTF::Deque<IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage,0ul>::append(a1 + 48, (uint64_t *)&v47);
    v27 = v48;
    v48 = 0;
    if (v27)
    {
      IPC::Decoder::~Decoder(v27);
      WTF::fastFree(v28, v29);
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v47);
    v30 = __ldxr(v8);
    if (v30 == 1)
    {
      if (!__stlxr(0, v8))
        goto LABEL_29;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 3));
LABEL_29:
    if ((v25 & 1) == 0)
    {
      v31 = *(_QWORD *)(a1 + 80);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v46, (unsigned __int8 **)a2);
      v32 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v32 = off_1E351EDA8;
      v33 = v46;
      v46 = 0;
      v47 = (unsigned __int8 **)v32;
      *(_QWORD *)(v32 + 8) = v33;
      (*(void (**)(uint64_t, unsigned __int8 ***))(*(_QWORD *)v31 + 16))(v31, &v47);
      v34 = v47;
      v47 = 0;
      if (v34)
        (*((void (**)(unsigned __int8 **))*v34 + 1))(v34);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v46);
    }
    WTF::BinarySemaphore::signal((WTF::BinarySemaphore *)a1);
    return 1;
  }
  while (1)
  {
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v47, (unsigned __int8 **)a2);
    v37 = *(_QWORD *)(a2 + 112);
    if (v37 == *(_QWORD *)(a2 + 120))
      break;
    v38 = *(_QWORD *)(a2 + 128);
    v39 = *(IPC::Decoder **)(v38 + 8 * v37);
    *(_QWORD *)(v38 + 8 * v37) = 0;
    v48 = v39;
    std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(*(_QWORD *)(a2 + 128) + 8 * v37), 0);
    v40 = *(_QWORD *)(a2 + 112);
    if (v40 == *(unsigned int *)(a2 + 136) - 1)
      v41 = 0;
    else
      v41 = v40 + 1;
    *(_QWORD *)(a2 + 112) = v41;
    IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
    WTF::Deque<IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage,0ul>::append(a1 + 48, (uint64_t *)&v47);
    v42 = v48;
    v48 = 0;
    if (v42)
    {
      IPC::Decoder::~Decoder(v42);
      WTF::fastFree(v43, v44);
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v47);
    if (*(_QWORD *)(a2 + 112) == *(_QWORD *)(a2 + 120))
      goto LABEL_22;
  }
  result = 80;
  __break(0xC471u);
  return result;
}

uint64_t WTF::Deque<IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage,0ul>::takeFirst(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  uint64_t v7;

  if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 8))
  {
    result = 80;
    __break(0xC471u);
  }
  else
  {
    v3 = 3 * *(_QWORD *)a2;
    v4 = *(_QWORD *)(a2 + 16) + 24 * *(_QWORD *)a2;
    v5 = *(_OWORD *)v4;
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_OWORD *)a1 = v5;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(v4 + 16);
    result = (uint64_t)WTF::VectorDestructor<true,IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage>::destruct((unsigned __int8 ***)(*(_QWORD *)(a2 + 16) + 8 * v3), (unsigned __int8 ***)(*(_QWORD *)(a2 + 16) + 8 * v3 + 24));
    if (*(_QWORD *)a2 == *(unsigned int *)(a2 + 24) - 1)
      v7 = 0;
    else
      v7 = *(_QWORD *)a2 + 1;
    *(_QWORD *)a2 = v7;
  }
  return result;
}

uint64_t WTF::Deque<IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage,0ul>::last(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 == v1)
  {
    result = 84;
    __break(0xC471u);
  }
  else
  {
    if (!v1)
      v1 = *(unsigned int *)(a1 + 24);
    return *(_QWORD *)(a1 + 16) + 24 * v1 - 24;
  }
  return result;
}

void IPC::Connection::createServerConnection(uint64_t a1@<X0>, mach_port_context_t *a2@<X8>)
{
  mach_port_context_t v4;
  mach_port_context_t v5;
  void *v6;
  int v7;
  void *v8;

  v4 = WTF::fastMalloc((WTF *)0x170);
  v5 = v4;
  v7 = *(_DWORD *)a1;
  v6 = *(void **)(a1 + 8);
  v8 = v6;
  if (v6)
  {
    os_retain(v6);
    IPC::Connection::Connection(v5, &v7, 1);
    os_release(v6);
  }
  else
  {
    IPC::Connection::Connection(v4, &v7, 1);
  }
  *a2 = v5;
}

mach_port_context_t IPC::Connection::Connection(mach_port_context_t a1, int *a2, char a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned __int8 **v18;
  WTF::ThreadSafeWeakPtrControlBlock *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  int v27;
  int v28;
  void *object;

  v6 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v6 = 0;
  *(_OWORD *)(v6 + 8) = xmmword_1978CE9C0;
  *(_QWORD *)(v6 + 24) = a1;
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_BYTE *)(a1 + 32) = a3;
  *(_WORD *)(a1 + 33) = 1;
  *(_BYTE *)(a1 + 35) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  WTF::WorkQueue::create();
  *(_BYTE *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 76) = 0;
  *(_QWORD *)(a1 + 92) = 0;
  *(_QWORD *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 100) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 223) = 0;
  *(_WORD *)(a1 + 241) = 257;
  *(_QWORD *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 300) = 0u;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 360) = 0;
  os_unfair_lock_lock(&IPC::s_connectionMapLock);
  {
    v8 = IPC::connectionMap(void)::map;
    if (IPC::connectionMap(void)::map)
    {
LABEL_4:
      v9 = *(_DWORD *)(v8 - 8);
      goto LABEL_5;
    }
  }
  else
  {
    IPC::connectionMap(void)::map = 0;
  }
  WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand();
  v8 = IPC::connectionMap(void)::map;
  if (IPC::connectionMap(void)::map)
    goto LABEL_4;
  v9 = 0;
LABEL_5:
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (v10 + ~(v10 << 32)) ^ ((unint64_t)(v10 + ~(v10 << 32)) >> 22);
  v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = v9 & ((v13 >> 31) ^ v13);
  v15 = (_QWORD *)(v8 + 24 * v14);
  v16 = *v15;
  if (*v15)
  {
    v17 = 0;
    v27 = 1;
    while (v16 != v10)
    {
      if (v16 == -1)
        v17 = v15;
      v14 = (v14 + v27) & v9;
      v15 = (_QWORD *)(v8 + 24 * v14);
      v16 = *v15;
      ++v27;
      if (!*v15)
      {
        if (v17)
        {
          *v17 = 0;
          v17[1] = 0;
          v17[2] = 0;
          --*(_DWORD *)(v8 - 16);
          v10 = *(_QWORD *)(a1 + 24);
          v15 = v17;
          goto LABEL_7;
        }
        *v15 = v10;
        v18 = (unsigned __int8 **)(v8 + 24 * v14 + 8);
        if (a1)
          goto LABEL_8;
        v19 = 0;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v17 = (_QWORD *)(v8 + 24 * v14);
LABEL_7:
    *v17 = v10;
    v18 = (unsigned __int8 **)(v17 + 1);
LABEL_8:
    v19 = *(WTF::ThreadSafeWeakPtrControlBlock **)a1;
    if (*(_QWORD *)a1)
      v19 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v19);
LABEL_10:
    v20 = *v18;
    *v18 = (unsigned __int8 *)v19;
    if (v20)
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v20, v7);
    v15[2] = a1;
    if (IPC::connectionMap(void)::map)
      v21 = *(_DWORD *)(IPC::connectionMap(void)::map - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(IPC::connectionMap(void)::map - 12) = v21;
    if (IPC::connectionMap(void)::map)
      v22 = *(_DWORD *)(IPC::connectionMap(void)::map - 12);
    else
      v22 = 0;
    v23 = (*(_DWORD *)(IPC::connectionMap(void)::map - 16) + v22);
    v24 = *(unsigned int *)(IPC::connectionMap(void)::map - 4);
    if (v24 > 0x400)
    {
      if (v24 > 2 * v23)
        goto LABEL_18;
    }
    else if (3 * v24 > 4 * v23)
    {
      goto LABEL_18;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand();
  }
LABEL_18:
  os_unfair_lock_unlock(&IPC::s_connectionMapLock);
  v28 = *a2;
  v25 = (void *)*((_QWORD *)a2 + 1);
  object = v25;
  if (v25)
    os_retain(v25);
  IPC::Connection::platformInitialize(a1, (uint64_t)&v28);
  if (object)
    os_release(object);
  return a1;
}

void IPC::Connection::~Connection(IPC::Connection *this)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  os_unfair_lock_lock(&IPC::s_connectionMapLock);
  {
    IPC::connectionMap(void)::map = 0;
  }
  v2 = WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((_QWORD *)this + 3);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::HashTableTraits>::remove(v2, v3);
  os_unfair_lock_unlock(&IPC::s_connectionMapLock);
  IPC::Connection::cancelAsyncReplyHandlers((os_unfair_lock_s *)this);
  v4 = (void *)*((_QWORD *)this + 44);
  if (v4)
    os_release(v4);
  std::unique_ptr<IPC::MachMessage>::reset[abi:sn180100]((uint64_t *)this + 43, 0);
  v6 = (void *)*((_QWORD *)this + 42);
  if (v6)
    os_release(v6);
  v7 = (void *)*((_QWORD *)this + 40);
  if (v7)
    os_release(v7);
  v8 = *((_QWORD *)this + 38);
  if (v8)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v8, v5);
  v9 = *((_QWORD *)this + 37);
  if (v9)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v9, v5);
  v10 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 56))(v10);
  v11 = *((_QWORD *)this + 34);
  if (v11)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v11, v5);
  WTF::Vector<IPC::Connection::PendingSyncReply,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)this + 62, v5);
  WTF::Deque<WTF::UniqueRef<IPC::Encoder>,0ul>::~Deque((uint64_t)this + 192);
  IPC::MessageReceiveQueueMap::~MessageReceiveQueueMap((IPC::Connection *)((char *)this + 144), v12);
  WTF::Deque<WTF::UniqueRef<IPC::Decoder>,0ul>::~Deque((unint64_t *)this + 14, v13);
  v14 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 56))(v14);
  v15 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v15)
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v16)
    IPC::Connection::SyncMessageStateRelease::operator()(v15, v16);
}

void IPC::Connection::cancelAsyncReplyHandlers(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  IPC::Decoder *v18;
  WTF *v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  IPC::Decoder *v23;

  v2 = this + 26;
  os_unfair_lock_lock(this + 26);
  v3 = *(_QWORD *)&this[74]._os_unfair_lock_opaque;
  v4 = *(_QWORD *)&this[76]._os_unfair_lock_opaque;
  *(_QWORD *)&this[74]._os_unfair_lock_opaque = 0;
  *(_QWORD *)&this[76]._os_unfair_lock_opaque = 0;
  os_unfair_lock_unlock(v2);
  if (!v3)
  {
    v8 = 0;
    v6 = 0;
    goto LABEL_48;
  }
  v6 = *(unsigned int *)(v3 - 4);
  v7 = (_QWORD *)(v3 + 16 * v6);
  if (!*(_DWORD *)(v3 - 12))
  {
    v8 = (_QWORD *)(v3 + 16 * v6);
LABEL_48:
    v7 = (_QWORD *)(v3 + 16 * v6);
    goto LABEL_8;
  }
  v8 = (_QWORD *)v3;
  if ((_DWORD)v6)
  {
    v9 = 16 * v6;
    v8 = (_QWORD *)v3;
    while ((unint64_t)(*v8 + 1) <= 1)
    {
      v8 += 2;
      v9 -= 16;
      if (!v9)
      {
        v8 = v7;
        break;
      }
    }
  }
LABEL_8:
  if (v3)
    v10 = (_QWORD *)(v3 + 16 * *(unsigned int *)(v3 - 4));
  else
    v10 = 0;
  while (v8 != v10)
  {
    v15 = v8[1];
    if (v15)
    {
      v8[1] = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 16))(v15, 0);
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
    v16 = v8 + 2;
    v8 = v7;
    if (v16 != v7)
    {
      v8 = v16;
      while ((unint64_t)(*v8 + 1) <= 1)
      {
        v8 += 2;
        if (v8 == v7)
        {
          v8 = v7;
          break;
        }
      }
    }
  }
  if (!v4)
  {
    v11 = 0;
    v12 = 0;
LABEL_13:
    v13 = (_QWORD *)(v4 + 16 * v12);
    goto LABEL_14;
  }
  v12 = *(unsigned int *)(v4 - 4);
  v13 = (_QWORD *)(v4 + 16 * v12);
  if (!*(_DWORD *)(v4 - 12))
  {
    v11 = (_QWORD *)(v4 + 16 * v12);
    goto LABEL_13;
  }
  v11 = (_QWORD *)v4;
  if ((_DWORD)v12)
  {
    v22 = 16 * v12;
    v11 = (_QWORD *)v4;
    while ((unint64_t)(*v11 + 1) <= 1)
    {
      v11 += 2;
      v22 -= 16;
      if (!v22)
      {
        v11 = v13;
        break;
      }
    }
  }
LABEL_14:
  if (v4)
    v14 = (_QWORD *)(v4 + 16 * *(unsigned int *)(v4 - 4));
  else
    v14 = 0;
  while (v11 != v14)
  {
    v17 = v11[1];
    if (v17)
    {
      v23 = 0;
      v11[1] = 0;
      (*(void (**)(uint64_t, IPC::Decoder **))(*(_QWORD *)v17 + 16))(v17, &v23);
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      v18 = v23;
      v23 = 0;
      if (v18)
      {
        IPC::Decoder::~Decoder(v18);
        WTF::fastFree(v19, v20);
      }
    }
    v21 = v11 + 2;
    v11 = v13;
    if (v21 != v13)
    {
      v11 = v21;
      while ((unint64_t)(*v11 + 1) <= 1)
      {
        v11 += 2;
        if (v11 == v13)
        {
          v11 = v13;
          break;
        }
      }
    }
  }
  if (v4)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v4, v5);
  if (v3)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v3, v5);
}

unint64_t *WTF::Deque<WTF::UniqueRef<IPC::Decoder>,0ul>::~Deque(unint64_t *a1, void *a2)
{
  unint64_t v3;
  unint64_t v4;
  IPC::Decoder **v5;
  IPC::Decoder **v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  IPC::Decoder **v11;
  uint64_t v12;

  v3 = *a1;
  v4 = a1[1];
  v5 = (IPC::Decoder **)a1[2];
  if (*a1 > v4)
  {
    if (v4)
    {
      v9 = 8 * v4;
      do
      {
        std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](v5++, 0);
        v9 -= 8;
      }
      while (v9);
      v5 = (IPC::Decoder **)a1[2];
      v3 = *a1;
    }
    v10 = *((unsigned int *)a1 + 6);
    if (v3 != v10)
    {
      v11 = &v5[v3];
      v12 = 8 * v10 - 8 * v3;
      do
      {
        std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](v11++, 0);
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    if (*a1 == v4)
      goto LABEL_6;
    v6 = &v5[v3];
    v7 = 8 * v4 - 8 * v3;
    do
    {
      std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](v6++, 0);
      v7 -= 8;
    }
    while (v7);
  }
  v5 = (IPC::Decoder **)a1[2];
LABEL_6:
  if (v5)
  {
    a1[2] = 0;
    *((_DWORD *)a1 + 6) = 0;
    WTF::fastFree((WTF *)v5, a2);
  }
  return a1;
}

void IPC::Connection::connection(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  unsigned __int8 *v4;
  WTF::ThreadSafeWeakPtrControlBlock *v5[2];
  uint64_t v6;

  v6 = a1;
  os_unfair_lock_lock(&IPC::s_connectionMapLock);
  {
    IPC::connectionMap(void)::map = 0;
  }
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((WTF::ThreadSafeWeakPtrControlBlock *)&IPC::connectionMap(void)::map, &v6, v5);
  if (v5[0])
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>((unsigned __int8 *)v5[0], (uint64_t)v5[1], a2);
    v4 = (unsigned __int8 *)v5[0];
    v5[0] = 0;
    if (v4)
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, v3);
  }
  else
  {
    *a2 = 0;
  }
  os_unfair_lock_unlock(&IPC::s_connectionMapLock);
}

uint64_t *WTF::Deque<WTF::UniqueRef<IPC::Decoder>,0ul>::append(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = result;
  v4 = result[1];
  if (*result)
  {
    if (v4 + 1 != *result)
      goto LABEL_3;
    goto LABEL_9;
  }
  v8 = *((unsigned int *)result + 6);
  if (v4)
  {
    if (v4 == v8 - 1)
      goto LABEL_9;
  }
  else
  {
    if (!(_DWORD)v8)
    {
LABEL_9:
      result = WTF::Deque<WTF::UniqueRef<IPC::Decoder>,0ul>::expandCapacity(result);
      v4 = v3[1];
      goto LABEL_3;
    }
    v4 = 0;
  }
LABEL_3:
  v5 = v3[2];
  v6 = *a2;
  *a2 = 0;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  if (v4 == *((unsigned int *)v3 + 6) - 1)
    v7 = 0;
  else
    v7 = v4 + 1;
  v3[1] = v7;
  return result;
}

void IPC::Connection::removeWorkQueueMessageReceiver(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  char v4;
  unsigned __int8 v5[8];
  uint64_t v6;
  char v7;

  if (a3)
  {
    v6 = a3;
    v4 = 1;
  }
  else
  {
    v4 = 0;
    LOBYTE(v6) = 0;
  }
  v5[0] = a2;
  v5[1] = 1;
  v7 = v4;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
  IPC::MessageReceiveQueueMap::remove((uint64_t *)(a1 + 144), v5);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 104));
}

void IPC::Connection::removeMessageReceiver(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  char v3;
  unsigned __int8 v4[8];
  uint64_t v5;
  char v6;

  if (a3)
  {
    v5 = a3;
    v3 = 1;
  }
  else
  {
    v3 = 0;
    LOBYTE(v5) = 0;
  }
  v4[0] = a2;
  v4[1] = 1;
  v6 = v3;
  IPC::Connection::removeMessageReceiveQueue(a1, v4);
}

IPC::Encoder *IPC::Connection::dispatchMessageReceiverMessage(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  IPC::Encoder *result;
  char v6;
  IPC::Encoder *v7;
  uint64_t v8;
  void *v9;
  WTF *v10;
  void *v11;
  _QWORD *v12;
  IPC::Encoder *v15;

  v4 = *a3;
  if (*(unsigned __int16 *)(v4 + 50) <= 0xDB0u)
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
  v12 = a3;
  result = (IPC::Encoder *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)v4);
  if (v6)
  {
    v7 = result;
    v8 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v8 = 2823;
    *(_QWORD *)(v8 + 8) = v7;
    *(_QWORD *)(v8 + 528) = v8 + 16;
    *(_QWORD *)(v8 + 536) = v8 + 16;
    *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v8 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
    v15 = (IPC::Encoder *)v8;
    if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, IPC::Encoder **))(*(_QWORD *)a2 + 32))(a2, a1, *v12, &v15) & 1) == 0)IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v15, 0, 0);
    result = v15;
    v15 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v9);
      return (IPC::Encoder *)WTF::fastFree(v10, v11);
    }
  }
  return result;
}

uint64_t IPC::Connection::invalidate(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned __int8 **v7;
  _QWORD *v8;
  unsigned __int8 **v9;
  _QWORD *v10;

  atomic_store(0, (unsigned __int8 *)(this + 33));
  if (*(_QWORD *)(this + 8))
  {
    v1 = this;
    if (*(_QWORD *)(this + 16))
    {
      *(_QWORD *)(this + 8) = 0;
      v2 = *(_QWORD *)(this + 48);
      *(_QWORD *)(v1 + 48) = 0;
      if (v2)
        (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
      os_unfair_lock_lock((os_unfair_lock_t)(v1 + 104));
      v3 = *(_QWORD *)(v1 + 16);
      *(_QWORD *)(v1 + 16) = 0;
      os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 104));
      if (v3)
        IPC::Connection::SyncMessageStateRelease::operator()(v4, v3);
      IPC::Connection::cancelAsyncReplyHandlers((os_unfair_lock_s *)v1);
      v5 = *(_QWORD *)(v1 + 64);
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v9, (unsigned __int8 **)v1);
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v6 = off_1E351EDD0;
      v7 = v9;
      v9 = 0;
      v10 = v6;
      v6[1] = v7;
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v5 + 32))(v5, &v10);
      v8 = v10;
      v10 = 0;
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v9);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
    }
    else
    {
      this = 1494;
      __break(0xC471u);
    }
  }
  return this;
}

char *IPC::Connection::createSyncMessageEncoder@<X0>(__int16 a1@<W1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v8;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = a1;
  *(_QWORD *)(v8 + 8) = a2;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  *a4 = v8;
  *a3 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  return IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v8, a3);
}

uint64_t IPC::Connection::sendMessageImpl(uint64_t a1, uint64_t *a2, char a3, uint64_t a4)
{
  unsigned __int8 v4;
  char v5;
  WTF::MonotonicTime *isMainRunLoop;
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  WTF::MonotonicTime *v24;
  const WTF::ASCIILiteral *v25;
  double v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  int v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  uint64_t v50;
  IPC::Encoder *v52;
  unint64_t v53;
  unsigned int v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  const char *v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int v66;
  unint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  void *v73;
  IPC::Encoder *v74;
  WTF *v75;
  void *v76;
  _xpc_connection_s *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unsigned int v83;
  uint64_t v84;
  IPC::Encoder *v85;
  _QWORD *v86;
  char v87;
  _BYTE __s2[18];
  __int16 v89;
  unsigned int v90;
  __int16 v91;
  uint64_t v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v4 = atomic_load((unsigned __int8 *)(a1 + 33));
  if ((v4 & 1) == 0)
    return 1;
  v5 = BYTE4(a4);
  isMainRunLoop = (WTF::MonotonicTime *)WTF::isMainRunLoop((WTF *)a1);
  if ((_DWORD)isMainRunLoop)
  {
    if (*(_DWORD *)(a1 + 92))
    {
      v50 = *a2;
      if (*(unsigned __int16 *)*a2 <= 0xDB0uLL
        && LOBYTE((&IPC::Detail::messageDescriptions)[3 * *(unsigned __int16 *)*a2 + 2]) != 207
        && (a3 & 4) == 0)
      {
        v86 = 0;
        IPC::Connection::createSyncMessageEncoder(3736, *(_QWORD *)(v50 + 8), (uint64_t *)&v86, (uint64_t *)&v85);
        v52 = v85;
        IPC::Encoder::setFullySynchronousModeForTesting((uint64_t)v85);
        IPC::Encoder::wrapForTesting((uint64_t)v52, a2);
        IPC::Connection::sendSyncMessage(a1, (uint64_t)v86, (uint64_t *)&v85, 0, (uint64_t)__s2, INFINITY);
        if (*(_DWORD *)&__s2[8])
        {
          if (*(_DWORD *)&__s2[8] != 1)
          {
            std::__throw_bad_variant_access[abi:sn180100]();
            goto LABEL_119;
          }
          v33 = __s2[0];
        }
        else
        {
          v33 = 0;
        }
        ((void (*)(char *, _BYTE *))off_1E351EA58[*(unsigned int *)&__s2[8]])(&v87, __s2);
        v74 = v85;
        v85 = 0;
        if (v74)
        {
          IPC::Encoder::~Encoder(v74, v73);
          WTF::fastFree(v75, v76);
        }
        return v33;
      }
    }
  }
  if ((a3 & 1) != 0 && (!*(_BYTE *)(a1 + 34) || *(_DWORD *)(a1 + 88)))
  {
    v35 = 1;
  }
  else
  {
    if ((a3 & 2) == 0)
      goto LABEL_6;
    v35 = 2;
  }
  isMainRunLoop = (WTF::MonotonicTime *)IPC::Encoder::setShouldDispatchMessageWhenWaitingForSyncReply(*a2, v35);
LABEL_6:
  v10 = (unsigned __int8 *)(a1 + 184);
  if (__ldaxr((unsigned __int8 *)(a1 + 184)))
  {
    __clrex();
LABEL_8:
    isMainRunLoop = (WTF::MonotonicTime *)MEMORY[0x19AEABB3C](a1 + 184);
    goto LABEL_9;
  }
  if (__stxr(1u, v10))
    goto LABEL_8;
LABEL_9:
  v12 = *(_QWORD *)(a1 + 192);
  v13 = *(_QWORD *)(a1 + 200);
  if (!v12)
  {
    v38 = *(unsigned int *)(a1 + 216);
    if (v13)
    {
      if (v13 != v38 - 1)
      {
        v14 = 0;
        v15 = *(_QWORD *)(a1 + 200);
        goto LABEL_11;
      }
    }
    else if ((_DWORD)v38)
    {
      v14 = 0;
      v15 = 0;
      goto LABEL_11;
    }
    goto LABEL_51;
  }
  v14 = *(_QWORD *)(a1 + 192);
  v15 = *(_QWORD *)(a1 + 200);
  if (v13 + 1 == v12)
  {
    LODWORD(v38) = *(_DWORD *)(a1 + 216);
LABEL_51:
    v39 = v38;
    v40 = ((unint64_t)v38 >> 2) + v38;
    if (v40 <= 0xF)
      v40 = 15;
    if (v40 < 0x1FFFFFFF)
    {
      v41 = *(char **)(a1 + 208);
      v42 = v40 + 1;
      v43 = (char *)WTF::fastMalloc((WTF *)(8 * (v40 + 1)));
      *(_DWORD *)(a1 + 216) = v42;
      *(_QWORD *)(a1 + 208) = v43;
      v45 = *(_QWORD *)(a1 + 192);
      v44 = *(_QWORD *)(a1 + 200);
      if (v45 > v44)
      {
        memcpy(v43, v41, 8 * v44);
        v47 = *(_QWORD *)(a1 + 192);
        v48 = v47 - v39 + *(unsigned int *)(a1 + 216);
        isMainRunLoop = (WTF::MonotonicTime *)memcpy((void *)(*(_QWORD *)(a1 + 208) + 8 * v48), &v41[8 * v47], 8 * v39 - 8 * v47);
        *(_QWORD *)(a1 + 192) = v48;
      }
      else
      {
        isMainRunLoop = (WTF::MonotonicTime *)memcpy(&v43[8 * v45], &v41[8 * v45], 8 * v44 - 8 * v45);
      }
      if (v41)
      {
        if (*(char **)(a1 + 208) == v41)
        {
          *(_QWORD *)(a1 + 208) = 0;
          *(_DWORD *)(a1 + 216) = 0;
        }
        isMainRunLoop = (WTF::MonotonicTime *)WTF::fastFree((WTF *)v41, v46);
      }
      v14 = *(_QWORD *)(a1 + 192);
      v15 = *(_QWORD *)(a1 + 200);
      goto LABEL_11;
    }
LABEL_119:
    __break(0xC471u);
    JUMPOUT(0x19788D030);
  }
LABEL_11:
  v16 = 0;
  v17 = 0;
  v18 = *(_QWORD *)(a1 + 208);
  v19 = *a2;
  *a2 = 0;
  *(_QWORD *)(v18 + 8 * v15) = v19;
  v20 = *(unsigned int *)(a1 + 216);
  if (v15 == v20 - 1)
    v21 = 0;
  else
    v21 = v15 + 1;
  *(_QWORD *)(a1 + 200) = v21;
  if (v14 <= v21)
    v20 = 0;
  v22 = v21 + v20 - v14;
  if (!*(_QWORD *)(a1 + 48))
  {
    v23 = 0;
    goto LABEL_23;
  }
  v23 = 0;
  if (v22 < 0x81)
    goto LABEL_23;
  v79 = v13;
  v80 = v21 + v20 - v14;
  v78 = v12;
  v24 = (WTF::MonotonicTime *)WTF::MonotonicTime::now(isMainRunLoop);
  if (v26 - *(double *)(a1 + 56) < 20.0)
  {
    v16 = 0;
    v17 = 0;
    v23 = 0;
    goto LABEL_23;
  }
  v86 = 0;
  v81 = *(_QWORD *)(a1 + 200);
  if (*(_QWORD *)(a1 + 192) == v81)
  {
    WTF::MonotonicTime::now(v24);
    v83 = 0;
    v84 = 0;
    *(_QWORD *)(a1 + 56) = v27;
    goto LABEL_21;
  }
  v53 = *(_QWORD *)(a1 + 192);
  v83 = 0;
  v84 = 0;
  do
  {
    v82 = v53;
    v54 = **(unsigned __int16 **)(*(_QWORD *)(a1 + 208) + 8 * v53);
    if (v54 >= 0xE98)
      v54 = 3736;
    *(_OWORD *)__s2 = *(_OWORD *)&(&IPC::Detail::messageDescriptions)[3 * v54];
    v55 = (uint64_t)v86;
    if (v86
      || (WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,unsigned int>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,unsigned int,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand((uint64_t *)&v86, 0), (v55 = (uint64_t)v86) != 0))
    {
      v56 = *(_DWORD *)(v55 - 8);
    }
    else
    {
      v56 = 0;
    }
    v57 = WTF::ASCIILiteralHash::hash((WTF::ASCIILiteralHash *)__s2, v25) & v56;
    v58 = v55 + 24 * v57;
    v59 = *(_QWORD *)v58;
    if (!*(_QWORD *)v58)
      goto LABEL_95;
    v60 = 0;
    v61 = 1;
    v62 = *(const char **)__s2;
    do
    {
      if (v59 == -1)
      {
        v60 = v58;
      }
      else if (v62)
      {
        v59 = strcmp((const char *)v59, v62);
        if (!(_DWORD)v59)
          goto LABEL_103;
      }
      else if (!v59)
      {
        goto LABEL_103;
      }
      v57 = (v57 + v61) & v56;
      v58 = v55 + 24 * v57;
      v59 = *(_QWORD *)v58;
      ++v61;
    }
    while (*(_QWORD *)v58);
    if (v60)
    {
      *(_QWORD *)v60 = 0;
      *(_QWORD *)(v60 + 8) = 0;
      *(_QWORD *)(v60 + 16) = 0;
      --*(_DWORD *)(v55 - 16);
      *(_OWORD *)v60 = *(_OWORD *)__s2;
      *(_DWORD *)(v60 + 16) = 0;
      v63 = *(_DWORD *)(v55 - 12) + 1;
      *(_DWORD *)(v55 - 12) = v63;
    }
    else
    {
LABEL_95:
      *(_OWORD *)v58 = *(_OWORD *)__s2;
      *(_DWORD *)(v58 + 16) = 0;
      v63 = *(_DWORD *)(v55 - 12) + 1;
      *(_DWORD *)(v55 - 12) = v63;
      v60 = v58;
    }
    v64 = (*(_DWORD *)(v55 - 16) + v63);
    v65 = *(unsigned int *)(v55 - 4);
    if (v65 > 0x400)
    {
      if (v65 <= 2 * v64)
      {
LABEL_102:
        v59 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,unsigned int>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,unsigned int,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand((uint64_t *)&v86, (__int128 *)v60);
        v58 = v59;
        goto LABEL_103;
      }
    }
    else if (3 * v65 <= 4 * v64)
    {
      goto LABEL_102;
    }
    v58 = v60;
LABEL_103:
    v66 = *(_DWORD *)(v58 + 16) + 1;
    *(_DWORD *)(v58 + 16) = v66;
    v67 = *(unsigned int *)(a1 + 216);
    v53 = v82 + v67 + 1;
    do
      v53 -= v67;
    while (v53 >= v67);
    v68 = v83;
    v69 = v84;
    if (v66 > v83)
      v69 = *(_QWORD *)__s2;
    v84 = v69;
    if (v66 > v83)
      v68 = v66;
    v83 = v68;
  }
  while (v81 != v53);
  v70 = (uint64_t)v86;
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v59);
  *(_QWORD *)(a1 + 56) = v72;
  if (v70)
    WTF::fastFree((WTF *)(v70 - 16), v71);
LABEL_21:
  v16 = 1;
  v12 = v78;
  v13 = v79;
  v22 = v80;
  v17 = v84;
  v23 = v83;
LABEL_23:
  v28 = __ldxr(v10);
  if (v28 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, v10))
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 184));
  if (v16)
  {
    v49 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_ERROR))
    {
      v77 = *(_xpc_connection_s **)(a1 + 352);
      if (v77)
        LODWORD(v77) = xpc_connection_get_pid(v77);
      *(_DWORD *)__s2 = 134218754;
      *(_QWORD *)&__s2[4] = v22;
      *(_WORD *)&__s2[12] = 1024;
      *(_DWORD *)&__s2[14] = (_DWORD)v77;
      v89 = 1024;
      v90 = v23;
      v91 = 2082;
      v92 = v17;
      _os_log_error_impl(&dword_196BCC000, v49, OS_LOG_TYPE_ERROR, "Connection::sendMessage(): Too many messages (%zu) in the queue to remote PID: %d (most common: %u %{public}s messages), notifying client", __s2, 0x22u);
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
  }
  if (v12 == v13)
  {
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)__s2, (unsigned __int8 **)a1);
    if (!v5)
    {
      v29 = *(_QWORD *)(a1 + 64);
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 48))(v29);
      v30 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v30 = off_1E351EDF8;
      v31 = *(_QWORD *)__s2;
      *(_QWORD *)__s2 = 0;
      v30[1] = v31;
      v86 = v30;
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v29 + 32))(v29, &v86);
      goto LABEL_32;
    }
LABEL_44:
    v29 = *(_QWORD *)(a1 + 64);
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 48))(v29);
    v36 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v36 = off_1E351EDF8;
    v37 = *(_QWORD *)__s2;
    *(_QWORD *)__s2 = 0;
    v36[1] = v37;
    v86 = v36;
    WTF::WorkQueueBase::dispatchWithQOS();
LABEL_32:
    v32 = (uint64_t)v86;
    v86 = 0;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 56))(v29);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)__s2);
  }
  else if (v5)
  {
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)__s2, (unsigned __int8 **)a1);
    goto LABEL_44;
  }
  return 0;
}

uint64_t IPC::Connection::sendSyncMessage@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v6;
  unsigned __int8 v8;
  char v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  char v18;
  unsigned __int8 **v19;

  v6 = result;
  v8 = atomic_load((unsigned __int8 *)(result + 33));
  if ((v8 & 1) == 0)
  {
    if (*(_BYTE *)(result + 35))
      goto LABEL_20;
    *(_BYTE *)a5 = 1;
    goto LABEL_15;
  }
  if (*(_QWORD *)(result + 16))
  {
    result = IPC::Connection::pushPendingSyncRequestID(result, a2);
    if ((result & 1) != 0)
    {
      v13 = a4;
      if ((a4 & 2) != 0)
        v14 = 3;
      else
        v14 = 1;
      if ((v13 & 4) != 0)
        result = IPC::Encoder::setShouldMaintainOrderingWithAsyncMessages(*a3);
      v15 = *(unsigned __int16 *)*a3;
      v16 = WTF::Thread::currentThreadQOS((WTF::Thread *)result);
      IPC::Connection::sendMessageImpl(v6, a3, v14, v16 | 0x100000000);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v19, (unsigned __int8 **)v6);
      IPC::Connection::waitForSyncReply(v6, a2, v15, a5, a6);
      IPC::Connection::popPendingSyncRequestID((IPC::Decoder *)v6);
      v17 = *(_DWORD *)(a5 + 8);
      if (!v17)
        return (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v19);
      if (v17 != 1)
        goto LABEL_21;
      if (!*(_BYTE *)a5)
      {
        v18 = 5;
        std::experimental::fundamentals_v3::expected<WTF::UniqueRef<IPC::Decoder>,IPC::Error>::operator=(a5, &v18);
        if (*(_DWORD *)(a5 + 8) != 1)
          goto LABEL_21;
      }
      if (!*(_BYTE *)(v6 + 35))
        return (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v19);
LABEL_20:
      WTF::exitProcess(0);
LABEL_21:
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_22;
    }
    if (*(_BYTE *)(v6 + 35))
      goto LABEL_20;
    *(_BYTE *)a5 = 11;
LABEL_15:
    *(_DWORD *)(a5 + 8) = 1;
    return result;
  }
LABEL_22:
  result = 1494;
  __break(0xC471u);
  return result;
}

void IPC::Connection::takeAsyncReplyHandler(os_unfair_lock_s *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  os_unfair_lock_s *v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;

  v9 = a2;
  v6 = a1 + 26;
  os_unfair_lock_lock(a1 + 26);
  if ((unint64_t)(a2 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    *a3 = 0;
  }
  else
  {
    v7 = (uint64_t *)&a1[74];
    v8 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v7, &v9);
    WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::take(v7, v8, a3);
  }
  os_unfair_lock_unlock(v6);
}

uint64_t IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(os_unfair_lock_s *a1, IPC::Encoder **a2, uint64_t *a3, char a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  IPC::Decoder *v13;
  WTF *v14;
  void *v15;
  uint64_t v16;
  IPC::Decoder *v18;
  uint64_t v19;
  uint64_t v20;

  v10 = a3[1];
  v20 = v10;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(*a2, &v20);
  IPC::Connection::addAsyncReplyHandlerWithDispatcher((uint64_t)a1, a3);
  v11 = IPC::Connection::sendMessageImpl((uint64_t)a1, (uint64_t *)a2, a4, a5);
  if ((_DWORD)v11)
  {
    os_unfair_lock_lock(a1 + 26);
    IPC::Connection::takeAsyncReplyHandlerWithDispatcherWithLockHeld((uint64_t)a1, v10, &v19);
    os_unfair_lock_unlock(a1 + 26);
    v12 = v19;
    if (v19)
    {
      v18 = 0;
      v19 = 0;
      (*(void (**)(uint64_t, IPC::Decoder **))(*(_QWORD *)v12 + 16))(v12, &v18);
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      v13 = v18;
      v18 = 0;
      if (v13)
      {
        IPC::Decoder::~Decoder(v13);
        WTF::fastFree(v14, v15);
      }
      v16 = v19;
      v19 = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    }
  }
  return v11;
}

void IPC::Connection::addAsyncReplyHandlerWithDispatcher(uint64_t a1, uint64_t *a2)
{
  os_unfair_lock_s *v4;
  _BYTE v5[24];

  v4 = (os_unfair_lock_s *)(a1 + 104);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
  WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>><void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::HashTableTraits>::add<void ()(std::unique_ptr<IPC::Decoder> &&)>((uint64_t *)(a1 + 304), a2 + 1, a2, (uint64_t)v5);
  os_unfair_lock_unlock(v4);
}

BOOL IPC::Connection::pushPendingSyncRequestID(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  IPC::Decoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  IPC::Decoder *v15;
  __int128 v16;

  v4 = (unsigned __int8 *)(a1 + 240);
  if (__ldaxr((unsigned __int8 *)(a1 + 240)))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEABB3C](a1 + 240);
    goto LABEL_4;
  }
  if (__stxr(1u, v4))
    goto LABEL_3;
LABEL_4:
  v6 = *(unsigned __int8 *)(a1 + 241);
  if (*(_BYTE *)(a1 + 241))
  {
    v14 = a2;
    v15 = 0;
    LOBYTE(v16) = 0;
    BYTE8(v16) = 0;
    v7 = *(unsigned int *)(a1 + 260);
    if ((_DWORD)v7 == *(_DWORD *)(a1 + 256))
    {
      WTF::Vector<IPC::Connection::PendingSyncReply,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,IPC::Connection::PendingSyncReply>(a1 + 248, (unint64_t)&v14);
      v11 = v15;
      v15 = 0;
      if (v11)
      {
        IPC::Decoder::~Decoder(v11);
        WTF::fastFree(v12, v13);
      }
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 248) + 32 * v7;
      *(_QWORD *)v8 = a2;
      v15 = 0;
      *(_QWORD *)(v8 + 8) = 0;
      *(_OWORD *)(v8 + 16) = v16;
      ++*(_DWORD *)(a1 + 260);
    }
  }
  v9 = __ldxr(v4);
  if (v9 == 1)
  {
    if (!__stlxr(0, v4))
      goto LABEL_9;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_9:
  if (v6)
    ++*(_DWORD *)(a1 + 76);
  return v6 != 0;
}

IPC::Decoder *IPC::Connection::popPendingSyncRequestID(IPC::Decoder *result)
{
  IPC::Decoder *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  int v5;
  int v6;

  v1 = result;
  --*((_DWORD *)result + 19);
  v2 = (unsigned __int8 *)result + 240;
  if (__ldaxr((unsigned __int8 *)result + 240))
  {
    __clrex();
LABEL_3:
    result = (IPC::Decoder *)MEMORY[0x19AEABB3C]((char *)result + 240);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = *((unsigned int *)v1 + 65);
  if (!(_DWORD)v4)
  {
    __break(0xC471u);
    return result;
  }
  v5 = v4 - 1;
  result = std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(*((_QWORD *)v1 + 31) + 32 * (v4 - 1) + 8), 0);
  *((_DWORD *)v1 + 65) = v5;
  v6 = __ldxr(v2);
  if (v6 != 1)
  {
    __clrex();
    return (IPC::Decoder *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return (IPC::Decoder *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

void IPC::Connection::waitForSyncReply(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>, double a5@<D0>)
{
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  IPC::Decoder **v15;
  uint64_t v16;
  int v17;
  unsigned __int8 v18;
  NSObject *v19;
  int v20;
  uint64_t v21;
  int v22;
  NSObject *v23;
  int v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  IPC::Decoder *v36;
  WTF *v37;
  void *v38;
  int v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  IPC::Decoder *v48;
  WTF *v49;
  void *v50;
  unsigned int v51;
  char *v52;
  _xpc_connection_s *v53;
  _BYTE v54[28];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 97))
    a5 = INFINITY;
  v10 = (unsigned __int8 *)(a1 + 240);
  while (1)
  {
    v11 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)v54 = 0;
    IPC::Connection::SyncMessageState::dispatchMessages(v11, v54);
    if (__ldaxr(v10))
    {
      __clrex();
    }
    else if (!__stxr(1u, v10))
    {
      goto LABEL_9;
    }
    MEMORY[0x19AEABB3C](v10);
LABEL_9:
    v13 = *(unsigned int *)(a1 + 260);
    if (!(_DWORD)v13)
    {
      __break(0xC471u);
      return;
    }
    v14 = *(_QWORD *)(a1 + 248) + 32 * (v13 - 1);
    v15 = (IPC::Decoder **)(v14 + 8);
    v16 = *(_QWORD *)(v14 + 8);
    if (v16)
      break;
    if (!*(_BYTE *)(a1 + 241))
    {
      v20 = 1;
      *(_BYTE *)a4 = 1;
      goto LABEL_31;
    }
    v17 = __ldxr(v10);
    if (v17 != 1)
    {
      __clrex();
LABEL_16:
      WTF::Lock::unlockSlow((WTF::Lock *)v10);
      goto LABEL_17;
    }
    if (__stlxr(0, v10))
      goto LABEL_16;
LABEL_17:
    v18 = atomic_load((unsigned __int8 *)(a1 + 33));
    if ((v18 & 1) == 0)
    {
      v23 = off_1ECE71C40;
      if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v54 = 134217984;
        *(_QWORD *)&v54[4] = a2;
        _os_log_error_impl(&dword_196BCC000, v23, OS_LOG_TYPE_ERROR, "Connection::waitForSyncReply: Connection no longer valid, id=%llu", v54, 0xCu);
      }
      *(_BYTE *)a4 = 1;
      goto LABEL_29;
    }
    *(double *)v54 = a5;
    *(_DWORD *)&v54[8] = 2;
    if ((WTF::BinarySemaphore::waitUntil() & 1) == 0)
    {
      v19 = off_1ECE71C40;
      if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_ERROR))
      {
        if (a3 >= 0xE98)
          v51 = 3736;
        else
          v51 = a3;
        v52 = (&IPC::Detail::messageDescriptions)[3 * v51];
        v53 = *(_xpc_connection_s **)(a1 + 352);
        if (v53)
          LODWORD(v53) = xpc_connection_get_pid(v53);
        *(_DWORD *)v54 = 136446722;
        *(_QWORD *)&v54[4] = v52;
        *(_WORD *)&v54[12] = 1024;
        *(_DWORD *)&v54[14] = (_DWORD)v53;
        *(_WORD *)&v54[18] = 2048;
        *(_QWORD *)&v54[20] = a2;
        _os_log_error_impl(&dword_196BCC000, v19, OS_LOG_TYPE_ERROR, "Connection::waitForSyncReply: Timed-out while waiting for reply for %{public}s from process %d, id=%llu", v54, 0x1Cu);
      }
      *(_BYTE *)a4 = 4;
LABEL_29:
      *(_DWORD *)(a4 + 8) = 1;
      return;
    }
  }
  *v15 = 0;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](v15, 0);
  v20 = *(unsigned __int8 *)(v14 + 24);
  if (*(_BYTE *)(v14 + 24))
  {
    v21 = *(_QWORD *)(v14 + 16);
    v22 = __ldxr(v10);
    if (v22 == 1)
    {
      if (!__stlxr(0, v10))
      {
LABEL_38:
        v25 = *(_QWORD *)(a1 + 16);
        v26 = (unsigned __int8 *)(v25 + 3);
        if (__ldaxr((unsigned __int8 *)(v25 + 3)))
        {
          __clrex();
          goto LABEL_41;
        }
        if (__stxr(1u, v26))
LABEL_41:
          MEMORY[0x19AEABB3C](v25 + 3);
        v28 = *(_QWORD *)(v25 + 48);
        v29 = *(_QWORD *)(v25 + 56);
        if (v28 != v29)
        {
          while (*(_QWORD *)(*(_QWORD *)(v25 + 64) + 24 * v28 + 16) != v21)
          {
            v40 = *(unsigned int *)(v25 + 72);
            v28 += v40 + 1;
            do
              v28 -= v40;
            while (v28 >= v40);
            if (v29 == v28)
              goto LABEL_56;
          }
        }
        if (v28 == v29)
        {
LABEL_56:
          v39 = 0;
        }
        else
        {
          do
          {
            v30 = *(_QWORD *)(v25 + 48);
            if (v30 == *(_QWORD *)(v25 + 56))
              break;
            v31 = 3 * v30;
            v32 = *(_QWORD *)(v25 + 64) + 8 * v31;
            v33 = *(_OWORD *)v32;
            *(_QWORD *)v32 = 0;
            *(_QWORD *)(v32 + 8) = 0;
            *(_OWORD *)v54 = v33;
            *(_QWORD *)&v54[16] = *(_QWORD *)(v32 + 16);
            WTF::VectorDestructor<true,IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage>::destruct((unsigned __int8 ***)(*(_QWORD *)(v25 + 64) + 8 * v31), (unsigned __int8 ***)(*(_QWORD *)(v25 + 64) + 8 * v31 + 24));
            v34 = *(_QWORD *)(v25 + 48);
            if (v34 == *(unsigned int *)(v25 + 72) - 1)
              v35 = 0;
            else
              v35 = v34 + 1;
            *(_QWORD *)(v25 + 48) = v35;
            WTF::Deque<IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage,0ul>::append(v25 + 16, (uint64_t *)v54);
            v36 = *(IPC::Decoder **)&v54[8];
            *(_QWORD *)&v54[8] = 0;
            if (v36)
            {
              IPC::Decoder::~Decoder(v36);
              WTF::fastFree(v37, v38);
            }
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v54);
          }
          while (*(_QWORD *)(WTF::Deque<IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage,0ul>::last(v25 + 16)
                            + 16) != v21);
          v39 = 1;
        }
        v41 = __ldxr(v26);
        if (v41 == 1)
        {
          if (!__stlxr(0, v26))
            goto LABEL_62;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)(v25 + 3));
LABEL_62:
        if (v39)
        {
          while (1)
          {
            v42 = *(_QWORD *)(v25 + 16);
            if (v42 == *(_QWORD *)(v25 + 24))
              break;
            v43 = 3 * v42;
            v44 = *(_QWORD *)(v25 + 32) + 8 * v43;
            v45 = *(_OWORD *)v44;
            *(_QWORD *)v44 = 0;
            *(_QWORD *)(v44 + 8) = 0;
            *(_OWORD *)v54 = v45;
            *(_QWORD *)&v54[16] = *(_QWORD *)(v44 + 16);
            WTF::VectorDestructor<true,IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage>::destruct((unsigned __int8 ***)(*(_QWORD *)(v25 + 32) + 8 * v43), (unsigned __int8 ***)(*(_QWORD *)(v25 + 32) + 8 * v43 + 24));
            v46 = *(_QWORD *)(v25 + 16);
            if (v46 == *(unsigned int *)(v25 + 40) - 1)
              v47 = 0;
            else
              v47 = v46 + 1;
            *(_QWORD *)(v25 + 16) = v47;
            IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage::dispatch((uint64_t **)v54);
            v48 = *(IPC::Decoder **)&v54[8];
            *(_QWORD *)&v54[8] = 0;
            if (v48)
            {
              IPC::Decoder::~Decoder(v48);
              WTF::fastFree(v49, v50);
            }
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v54);
          }
        }
        *(_QWORD *)a4 = v16;
        *(_DWORD *)(a4 + 8) = 0;
        return;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
    goto LABEL_38;
  }
  *(_QWORD *)a4 = v16;
LABEL_31:
  *(_DWORD *)(a4 + 8) = v20;
  v24 = __ldxr(v10);
  if (v24 == 1)
  {
    if (!__stlxr(0, v10))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v10);
}

uint64_t std::experimental::fundamentals_v3::expected<WTF::UniqueRef<IPC::Decoder>,IPC::Error>::operator=(uint64_t a1, char *a2)
{
  char v3;
  int v4;
  int v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE v9[8];
  int v10;
  _BYTE v11[8];
  int v12;
  char v13;

  v3 = *a2;
  v9[0] = *a2;
  v10 = 1;
  v4 = *(_DWORD *)(a1 + 8);
  if (v4 == 1)
  {
    v9[0] = *(_BYTE *)a1;
    *(_BYTE *)a1 = v3;
    v5 = 1;
LABEL_12:
    ((void (*)(_BYTE *, _BYTE *))off_1E351EA58[v5])(v11, v9);
    return a1;
  }
  if ((v4 + 1) >= 3)
    v6 = (_BYTE *)a1;
  else
    v6 = v9;
  if ((v4 + 1) >= 3)
    v7 = v9;
  else
    v7 = (_BYTE *)a1;
  v11[0] = 0;
  v12 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v11, (uint64_t)v7);
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>((uint64_t)v7, (uint64_t)v6);
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>((uint64_t)v6, (uint64_t)v11);
  if (v12 != -1)
    ((void (*)(char *, _BYTE *))off_1E351EA58[v12])(&v13, v11);
  v5 = v10;
  if (v10 != -1)
    goto LABEL_12;
  return a1;
}

void IPC::Connection::processIncomingMessage(uint64_t a1, IPC::Decoder **a2)
{
  IPC::Decoder *v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  BOOL v8;
  unsigned __int8 *v9;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned __int16 *v14;
  IPC::Decoder *v15;
  IPC::Decoder *v16;
  IPC::Decoder *v17;
  WTF *v18;
  void *v19;
  int v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  char *v40;
  WTF::BinarySemaphore *v41;
  int v42;
  WTF *v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned __int8 *v48;
  uint64_t *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  int v56;
  int v57;
  IPC::Decoder *v58;
  unsigned int v59;
  IPC::Decoder *v60;
  IPC::Decoder *v61;
  WTF *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  IPC::Decoder *v66;
  IPC::Decoder *v67;
  IPC::Decoder *v68;
  uint64_t v69;

  v4 = *a2;
  v5 = *((unsigned __int16 *)*a2 + 25);
  if (v5 == 2823)
  {
    *a2 = 0;
    v22 = (unsigned __int8 *)(a1 + 240);
    if (__ldaxr((unsigned __int8 *)(a1 + 240)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v22))
    {
      goto LABEL_40;
    }
    MEMORY[0x19AEABB3C](a1 + 240);
LABEL_40:
    v24 = *(unsigned int *)(a1 + 260);
    v25 = v24 + 1;
    v26 = (32 * v24) | 0x18;
    while (v26 != 24)
    {
      v27 = *(_QWORD *)(a1 + 248);
      v28 = *(_QWORD *)(v27 + v26 - 56);
      --v25;
      v26 -= 32;
      if (v28 == *((_QWORD *)v4 + 8))
      {
        std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(v27 + v26 - 16), v4);
        v29 = *(_QWORD *)(a1 + 16);
        v30 = (unsigned __int8 *)(v29 + 3);
        if (__ldaxr((unsigned __int8 *)(v29 + 3)))
        {
          __clrex();
          goto LABEL_45;
        }
        if (__stxr(1u, v30))
LABEL_45:
          MEMORY[0x19AEABB3C](v29 + 3);
        v32 = *(_QWORD *)(v29 + 48);
        v33 = *(_QWORD *)(v29 + 56);
        v34 = v29 + 48;
        if (v32 == v33)
        {
          v35 = 0;
          v36 = 0;
          v37 = 0;
        }
        else
        {
          v38 = WTF::Deque<IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage,0ul>::last(v34);
          v37 = *(_QWORD *)(v38 + 16) & 0xFFFFFFFFFFFFFF00;
          v35 = *(_QWORD *)(v38 + 16);
          v36 = 1;
        }
        v39 = __ldxr(v30);
        if (v39 == 1)
        {
          if (!__stlxr(0, v30))
            goto LABEL_54;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v30);
LABEL_54:
        v40 = (char *)(v27 + v26);
        *((_QWORD *)v40 - 1) = v37 | v35;
        *v40 = v36;
        if (*(_DWORD *)(a1 + 260) == v25)
        {
          os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
          v41 = *(WTF::BinarySemaphore **)(a1 + 16);
          if (v41)
            WTF::BinarySemaphore::signal(v41);
          os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 104));
        }
        v4 = 0;
        break;
      }
    }
    v42 = __ldxr(v22);
    if (v42 == 1)
    {
      if (!__stlxr(0, v22))
      {
LABEL_64:
        if (v4)
        {
          IPC::Decoder::~Decoder(v4);
          WTF::fastFree(v43, v44);
        }
        return;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 240));
    goto LABEL_64;
  }
  if (v5 >= 0xE98)
    v6 = 3736;
  else
    v6 = v5;
  v7 = LOBYTE((&IPC::Detail::messageDescriptions)[3 * v6 + 2]);
  if (v7 == 255 || (!v7 ? (v8 = *((_QWORD *)v4 + 8) == 0) : (v8 = 0), v8))
  {
    IPC::Connection::dispatchDidReceiveInvalidMessage(a1, v5);
    return;
  }
  v9 = (unsigned __int8 *)(a1 + 226);
  if (__ldaxr((unsigned __int8 *)(a1 + 226)))
  {
    __clrex();
LABEL_12:
    MEMORY[0x19AEABB3C](a1 + 226);
    goto LABEL_13;
  }
  if (__stxr(1u, v9))
    goto LABEL_12;
LABEL_13:
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
  if (*(_QWORD *)(a1 + 16))
  {
    v11 = (uint64_t)*a2;
    v12 = *((unsigned __int16 *)*a2 + 25);
    if (v12 >= 0xE98)
      v12 = 3736;
    if (LOBYTE((&IPC::Detail::messageDescriptions)[3 * v12 + 2]) == 208)
    {
      IPC::Connection::takeAsyncReplyHandlerWithDispatcherWithLockHeld(a1, *(_QWORD *)(v11 + 64), &v69);
      v21 = v69;
      if (v69)
      {
        v60 = *a2;
        *a2 = 0;
        v68 = v60;
        v69 = 0;
        (*(void (**)(uint64_t, IPC::Decoder **))(*(_QWORD *)v21 + 16))(v21, &v68);
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
        v61 = v68;
        v68 = 0;
        if (v61)
        {
          IPC::Decoder::~Decoder(v61);
          WTF::fastFree(v62, v63);
        }
        v64 = v69;
        v69 = 0;
        if (v64)
          (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
        goto LABEL_27;
      }
      v11 = (uint64_t)*a2;
    }
    v13 = IPC::MessageReceiveQueueMap::get((uint64_t *)(a1 + 144), v11);
    if (v13)
    {
      (*(void (**)(uint64_t, uint64_t, IPC::Decoder **))(*(_QWORD *)v13 + 16))(v13, a1, a2);
      goto LABEL_27;
    }
    if (*((unsigned __int16 *)*a2 + 25) < 0xDB1u)
    {
LABEL_19:
      v14 = *(unsigned __int16 **)(a1 + 232);
      if (!v14)
      {
        v15 = *a2;
        goto LABEL_21;
      }
      v15 = *a2;
      if (*((_QWORD *)v14 + 3))
        goto LABEL_21;
      v45 = *((unsigned __int16 *)v15 + 25);
      if (*v14 == v45 && *((_QWORD *)v14 + 1) == *((_QWORD *)v15 + 8))
      {
        *a2 = 0;
        std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(*(_QWORD *)(a1 + 232) + 24), v15);
LABEL_74:
        WTF::Condition::notifyOne((WTF::Condition *)(a1 + 225));
        goto LABEL_27;
      }
      v57 = *((_DWORD *)v14 + 4);
      if (v45 >= 0xDB1 && (v57 & 2) != 0)
      {
        if ((IPC::Connection::SyncMessageState::processIncomingMessage(*(_QWORD *)(a1 + 16), a1, a2) & 1) != 0)
          goto LABEL_74;
        v14 = *(unsigned __int16 **)(a1 + 232);
        v57 = *((_DWORD *)v14 + 4);
        v15 = *a2;
      }
      if ((v57 & 1) != 0 && *((unsigned __int16 *)v15 + 25) >= 0xDB1u)
      {
        *((_BYTE *)v14 + 20) = 1;
        WTF::Condition::notifyOne((WTF::Condition *)(a1 + 225));
        v58 = *a2;
        *a2 = 0;
        v67 = v58;
        IPC::Connection::enqueueIncomingMessage(a1, (uint64_t *)&v67);
        v17 = v67;
        v67 = 0;
        if (!v17)
          goto LABEL_27;
LABEL_25:
        IPC::Decoder::~Decoder(v17);
        WTF::fastFree(v18, v19);
        goto LABEL_27;
      }
LABEL_21:
      if ((*((_BYTE *)v15 + 48) & 3) == 2
        && ((v46 = *((unsigned __int16 *)v15 + 25), v46 >= 0xE98)
          ? (v59 = 3736)
          : (v59 = *((unsigned __int16 *)v15 + 25)),
            (*((_BYTE *)&IPC::Detail::messageDescriptions + 24 * v59 + 17) & 2) == 0)
        || (*((_BYTE *)v15 + 48) & 1) != 0
        && ((v46 = *((unsigned __int16 *)v15 + 25), v46 >= 0xE98)
          ? (v47 = 3736)
          : (v47 = *((unsigned __int16 *)v15 + 25)),
            (*((_BYTE *)&IPC::Detail::messageDescriptions + 24 * v47 + 17) & 1) == 0 && !*((_BYTE *)v15 + 49)))
      {
        IPC::Connection::dispatchDidReceiveInvalidMessage(a1, v46);
        goto LABEL_27;
      }
      if ((IPC::Connection::SyncMessageState::processIncomingMessage(*(_QWORD *)(a1 + 16), a1, a2) & 1) != 0)
        goto LABEL_27;
      v16 = *a2;
      *a2 = 0;
      v66 = v16;
      IPC::Connection::enqueueIncomingMessage(a1, (uint64_t *)&v66);
      v17 = v66;
      v66 = 0;
      if (!v17)
        goto LABEL_27;
      goto LABEL_25;
    }
    v48 = (unsigned __int8 *)(a1 + 264);
    if (__ldaxr((unsigned __int8 *)(a1 + 264)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v48))
    {
LABEL_84:
      v50 = (uint64_t *)(a1 + 272);
      v52 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(a1 + 272));
      v53 = v51;
      v54 = *(_QWORD *)(a1 + 272);
      if (v54)
        v55 = (_QWORD *)(v54 + 16 * *(unsigned int *)(v54 - 4));
      else
        v55 = 0;
      if (v55 != v52)
      {
        do
        {
          v65 = *(_QWORD *)(a1 + 280);
          if (v65)
            (*(void (**)(_QWORD))(*(_QWORD *)v65 + 48))(*(_QWORD *)(a1 + 280));
          (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v65 + 32))(v65, v52 + 1);
          (*(void (**)(uint64_t))(*(_QWORD *)v65 + 56))(v65);
          v52 += 2;
          if (v52 == v53)
          {
LABEL_119:
            v52 = v53;
          }
          else
          {
            while ((unint64_t)(*v52 + 1) <= 1)
            {
              v52 += 2;
              if (v52 == v53)
                goto LABEL_119;
            }
          }
        }
        while (v52 != v55);
        v54 = *v50;
      }
      if (v54)
      {
        *v50 = 0;
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v54, v51);
      }
      v56 = __ldxr(v48);
      if (v56 == 1)
      {
        if (!__stlxr(0, v48))
          goto LABEL_19;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 264));
      goto LABEL_19;
    }
    MEMORY[0x19AEABB3C](a1 + 264);
    goto LABEL_84;
  }
LABEL_27:
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 104));
  v20 = __ldxr(v9);
  if (v20 == 1)
  {
    if (!__stlxr(0, v9))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 226));
}

void IPC::Connection::takeAsyncReplyHandlerWithDispatcherWithLockHeld(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;

  v6 = a2;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 104));
  if ((unint64_t)(a2 - 1) >= 0xFFFFFFFFFFFFFFFELL)
    *a3 = 0;
  else
    WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>><void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::HashTableTraits>::take((uint64_t *)(a1 + 304), &v6, a3);
}

void IPC::Connection::enqueueIncomingMessage(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (**v7)();
  unsigned __int8 **v8;
  unsigned __int8 **v9;
  unsigned __int8 ***v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 **v16;
  unsigned __int8 **v17;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 104));
  if (!*(_BYTE *)(a1 + 360))
  {
    if (*(_BYTE *)(a1 + 100))
    {
      v11 = *(_QWORD *)(a1 + 112);
      v12 = *(_QWORD *)(a1 + 120);
      if (v11 > v12)
        v12 += *(unsigned int *)(a1 + 136);
      if ((v12 - v11) >> 4 >= 0xC35)
      {
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v17, (unsigned __int8 **)a1);
        IPC::Connection::dispatchToClient<IPC::Connection::enqueueIncomingMessage(WTF::UniqueRef<IPC::Decoder>)::$_0>(a1, (uint64_t *)&v17);
        v10 = &v17;
LABEL_9:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v10);
        return;
      }
    }
    WTF::Deque<WTF::UniqueRef<IPC::Decoder>,0ul>::append((uint64_t *)(a1 + 112), a2);
    if (!*(_BYTE *)(a1 + 100))
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (!v4)
        return;
      v5 = *(_QWORD *)(v4 + 80);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v16, (unsigned __int8 **)a1);
      v6 = WTF::fastMalloc((WTF *)0x10);
      v7 = off_1E351EF20;
      goto LABEL_6;
    }
    v13 = *(_QWORD *)(a1 + 112);
    v14 = *(_QWORD *)(a1 + 120);
    if (v13 > v14)
      v14 += *(unsigned int *)(a1 + 136);
    if (v14 - v13 == 1)
    {
      v15 = *(_QWORD *)(a1 + 16);
      if (v15)
      {
        v5 = *(_QWORD *)(v15 + 80);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v16, (unsigned __int8 **)a1);
        v6 = WTF::fastMalloc((WTF *)0x10);
        v7 = off_1E351EEF8;
LABEL_6:
        *(_QWORD *)v6 = v7;
        v8 = v16;
        v16 = 0;
        v17 = (unsigned __int8 **)v6;
        *(_QWORD *)(v6 + 8) = v8;
        (*(void (**)(uint64_t, unsigned __int8 ***))(*(_QWORD *)v5 + 16))(v5, &v17);
        v9 = v17;
        v17 = 0;
        if (v9)
          (*((void (**)(unsigned __int8 **))*v9 + 1))(v9);
        v10 = &v16;
        goto LABEL_9;
      }
    }
  }
}

unsigned __int8 ***IPC::Connection::connectionDidClose(IPC::Connection *this)
{
  void *v2;
  unsigned __int8 *v3;
  int v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  unsigned __int8 v12;
  unsigned __int8 *v13;
  unint64_t v15;
  unint64_t v16;
  IPC::Encoder **v17;
  IPC::Encoder **v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 v21;
  int v22;
  void (*v23)(IPC::Connection *);
  os_unfair_lock_s *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unsigned __int8 **v28;
  _QWORD *v29;
  WTF::BinarySemaphore *v31;
  uint64_t v32;
  uint64_t v33;
  IPC::Encoder **v34;
  uint64_t v35;
  unsigned __int8 **v36;
  _QWORD *v37;

  atomic_store(0, (unsigned __int8 *)this + 33);
  IPC::Connection::platformInvalidate(this);
  v3 = (unsigned __int8 *)this + 240;
  if (__ldaxr((unsigned __int8 *)this + 240))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEABB3C]((char *)this + 240);
    goto LABEL_4;
  }
  if (__stxr(1u, v3))
    goto LABEL_3;
LABEL_4:
  *((_BYTE *)this + 241) = 0;
  v5 = *((_DWORD *)this + 65);
  v6 = __ldxr(v3);
  if (v6 != 1)
  {
    __clrex();
    goto LABEL_8;
  }
  if (__stlxr(0, v3))
LABEL_8:
    WTF::Lock::unlockSlow((IPC::Connection *)((char *)this + 240));
  if (v5)
  {
    os_unfair_lock_lock((os_unfair_lock_t)this + 26);
    v31 = (WTF::BinarySemaphore *)*((_QWORD *)this + 2);
    if (v31)
      WTF::BinarySemaphore::signal(v31);
    os_unfair_lock_unlock((os_unfair_lock_t)this + 26);
  }
  v7 = (unsigned __int8 *)this + 226;
  if (__ldaxr((unsigned __int8 *)this + 226))
  {
    __clrex();
LABEL_12:
    MEMORY[0x19AEABB3C]((char *)this + 226);
    goto LABEL_13;
  }
  if (__stxr(1u, v7))
    goto LABEL_12;
LABEL_13:
  *((_BYTE *)this + 242) = 0;
  v9 = *((_QWORD *)this + 29);
  if (v9)
    *(_BYTE *)(v9 + 20) = 1;
  v10 = __ldxr(v7);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_19;
  }
  if (__stlxr(0, v7))
LABEL_19:
    WTF::Lock::unlockSlow((IPC::Connection *)((char *)this + 226));
  v11 = (unsigned __int8 *)this + 225;
  v12 = atomic_load((unsigned __int8 *)this + 225);
  if ((v12 & 1) != 0)
  {
    atomic_store(0, v11);
    WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v11, v2);
  }
  v13 = (unsigned __int8 *)this + 184;
  if (__ldaxr((unsigned __int8 *)this + 184))
  {
    __clrex();
LABEL_24:
    MEMORY[0x19AEABB3C]((char *)this + 184);
    goto LABEL_25;
  }
  if (__stxr(1u, v13))
    goto LABEL_24;
LABEL_25:
  v15 = *((_QWORD *)this + 24);
  v16 = *((_QWORD *)this + 25);
  v17 = (IPC::Encoder **)*((_QWORD *)this + 26);
  if (v15 > v16)
  {
    if (v16)
    {
      v32 = 8 * v16;
      do
      {
        std::unique_ptr<IPC::Encoder>::reset[abi:sn180100](v17++, 0);
        v32 -= 8;
      }
      while (v32);
      v17 = (IPC::Encoder **)*((_QWORD *)this + 26);
      v15 = *((_QWORD *)this + 24);
    }
    v33 = *((unsigned int *)this + 54);
    if (v15 != v33)
    {
      v34 = &v17[v15];
      v35 = 8 * v33 - 8 * v15;
      do
      {
        std::unique_ptr<IPC::Encoder>::reset[abi:sn180100](v34++, 0);
        v35 -= 8;
      }
      while (v35);
    }
  }
  else
  {
    if (v15 == v16)
      goto LABEL_30;
    v18 = &v17[v15];
    v19 = 8 * v16 - 8 * v15;
    do
    {
      std::unique_ptr<IPC::Encoder>::reset[abi:sn180100](v18++, 0);
      v19 -= 8;
    }
    while (v19);
  }
  v17 = (IPC::Encoder **)*((_QWORD *)this + 26);
LABEL_30:
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  if (v17)
  {
    *((_QWORD *)this + 26) = 0;
    *((_DWORD *)this + 54) = 0;
    WTF::fastFree((WTF *)v17, v2);
  }
  v20 = (unsigned __int8 *)this + 224;
  v21 = atomic_load((unsigned __int8 *)this + 224);
  if ((v21 & 1) != 0)
  {
    atomic_store(0, v20);
    WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v20, v2);
  }
  v22 = __ldxr(v13);
  if (v22 != 1)
  {
    __clrex();
    goto LABEL_38;
  }
  if (__stlxr(0, v13))
LABEL_38:
    WTF::Lock::unlockSlow((IPC::Connection *)((char *)this + 184));
  v23 = (void (*)(IPC::Connection *))*((_QWORD *)this + 5);
  if (v23)
    v23(this);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v36, (unsigned __int8 **)this);
  v24 = (os_unfair_lock_s *)((char *)this + 104);
  os_unfair_lock_lock((os_unfair_lock_t)this + 26);
  v25 = *((_QWORD *)this + 2);
  if (v25)
  {
    v26 = *(_QWORD *)(v25 + 80);
    v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v27 = off_1E351EEA8;
    v28 = v36;
    v36 = 0;
    v37 = v27;
    v27[1] = v28;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v26 + 16))(v26, &v37);
    v29 = v37;
    v37 = 0;
    if (v29)
      (*(void (**)(_QWORD *))(*v29 + 8))(v29);
  }
  os_unfair_lock_unlock(v24);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v36);
}

void IPC::Connection::dispatchToClient<IPC::Connection::enqueueIncomingMessage(WTF::UniqueRef<IPC::Decoder>)::$_0>(uint64_t a1, uint64_t *a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v4 = (os_unfair_lock_s *)(a1 + 104);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 80);
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    v8 = *a2;
    *a2 = 0;
    *v7 = off_1E351EED0;
    v7[1] = v8;
    v10 = v7;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v6 + 16))(v6, &v10);
    v9 = v10;
    v10 = 0;
    if (v9)
      (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  }
  os_unfair_lock_unlock(v4);
}

void IPC::Connection::dispatchMessage(uint64_t a1, uint64_t *a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned __int8 v18;
  uint64_t v19;

  if (*(_QWORD *)(a1 + 16))
  {
    v4 = (os_unfair_lock_s *)(a1 + 104);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
    v5 = IPC::MessageReceiveQueueMap::get((uint64_t *)(a1 + 144), *a2);
    if (v5)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v5 + 16))(v5, a1, a2);
      os_unfair_lock_unlock(v4);
      return;
    }
    os_unfair_lock_unlock(v4);
    v6 = *a2;
    if ((*(_BYTE *)(*a2 + 48) & 4) != 0)
    {
      if (!*(_BYTE *)(a1 + 96))
      {
        (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), a1, *(unsigned __int16 *)(v6 + 50));
        return;
      }
      ++*(_DWORD *)(a1 + 92);
    }
    ++*(_DWORD *)(a1 + 80);
    v7 = *(_BYTE *)(v6 + 48);
    if ((v7 & 1) != 0)
      v8 = 1;
    else
      v8 = v7 & 2;
    if (v8 == 1
      || v8 == 2
      && (v17 = atomic_load((unsigned int *)&IPC::UnboundedSynchronousIPCScope::unboundedSynchronousIPCCount)) != 0)
    {
      ++*(_DWORD *)(a1 + 88);
      v9 = 1;
    }
    else
    {
      v9 = 0;
    }
    v10 = *(_BYTE *)(a1 + 98);
    *(_BYTE *)(a1 + 98) = 0;
    v11 = *a2;
    if (*(unsigned __int16 *)(*a2 + 50) >= 0xDB1uLL)
    {
      IPC::Connection::dispatchSyncMessage((IPC::Connection *)a1, (IPC::Decoder *)*a2);
    }
    else
    {
      if (!*(_QWORD *)(a1 + 16))
      {
        __break(0xC471u);
        JUMPOUT(0x19788E7E4);
      }
      v12 = *(_QWORD *)(a1 + 8);
      if (!v12)
      {
        __break(0xC471u);
        JUMPOUT(0x19788E804);
      }
      if (LOBYTE((&IPC::Detail::messageDescriptions)[3 * *(unsigned __int16 *)(*a2 + 50) + 2]) == 208)
      {
        IPC::Connection::takeAsyncReplyHandler((os_unfair_lock_s *)a1, *(_QWORD *)(v11 + 64), &v19);
        v15 = v19;
        if (v19)
        {
          v19 = 0;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v11);
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
          v16 = v19;
          v19 = 0;
          if (v16)
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        }
        else
        {
          *(_BYTE *)(a1 + 98) = 1;
        }
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, a1, *a2);
      }
    }
    v13 = *a2;
    v14 = *(_BYTE *)(a1 + 98) | (*(_QWORD *)*a2 == 0);
    *(_BYTE *)(a1 + 98) = v14;
    --*(_DWORD *)(a1 + 80);
    if (v9)
      --*(_DWORD *)(a1 + 88);
    if ((*(_BYTE *)(v13 + 48) & 4) != 0)
      --*(_DWORD *)(a1 + 92);
    if (v14)
    {
      v18 = atomic_load((unsigned __int8 *)(a1 + 33));
      if ((v18 & 1) != 0)
        (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), a1, *(unsigned __int16 *)(*a2 + 50));
    }
    *(_BYTE *)(a1 + 98) = v10;
  }
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(IPC::Decoder *)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::CompletionHandler<void ()(IPC::Decoder *)>>,WTF::HashTableTraits>::add<WTF::CompletionHandler<void ()(IPC::Decoder *)>>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v27 = 0;
    v28 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v29 = 0;
        else
          v29 = *(unsigned int *)(v8 - 4);
        v26 = 0;
        v25 = v8 + 16 * v29;
        goto LABEL_13;
      }
      if (v17 == -1)
        v27 = v16;
      v15 = (v15 + v28) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v28;
    }
    while (*v16);
    if (v27)
    {
      *v27 = 0;
      v27[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v27;
    }
  }
  *v16 = v11;
  v18 = *a3;
  *a3 = 0;
  result = (uint64_t *)v16[1];
  v16[1] = v18;
  if (result)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  v19 = *v6;
  if (*v6)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v21 = *v6;
  if (*v6)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 > 2 * v23)
      goto LABEL_12;
LABEL_22:
    result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v6, v16);
    v16 = result;
    v21 = *v6;
    if (*v6)
      v24 = *(unsigned int *)(v21 - 4);
    else
      v24 = 0;
    goto LABEL_12;
  }
  if (3 * v24 <= 4 * v23)
    goto LABEL_22;
LABEL_12:
  v25 = v21 + 16 * v24;
  v26 = 1;
LABEL_13:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v25;
  *(_BYTE *)(a4 + 16) = v26;
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>><void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::HashTableTraits>::add<void ()(std::unique_ptr<IPC::Decoder> &&)>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(std::unique_ptr<IPC::Decoder> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v29 = 0;
        else
          v29 = *(unsigned int *)(v8 - 4);
        v28 = 0;
        v27 = v8 + 16 * v29;
        goto LABEL_26;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  v20 = *a3;
  *a3 = 0;
  result = (uint64_t *)v16[1];
  v16[1] = v20;
  if (result)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  v21 = *v6;
  if (*v6)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *v6;
  if (*v6)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
    {
LABEL_20:
      result = WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(std::unique_ptr<IPC::Decoder> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::expand(v6, v16);
      v16 = result;
      v23 = *v6;
      if (*v6)
        v26 = *(unsigned int *)(v23 - 4);
      else
        v26 = 0;
    }
  }
  else if (3 * v26 <= 4 * v25)
  {
    goto LABEL_20;
  }
  v27 = v23 + 16 * v26;
  v28 = 1;
LABEL_26:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v27;
  *(_BYTE *)(a4 + 16) = v28;
  return result;
}

_QWORD *WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>><void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::HashTableTraits>::take@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;

  result = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(std::unique_ptr<IPC::Decoder> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(std::unique_ptr<IPC::Decoder> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::HashTableTraits>,WTF::DefaultHash>,WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1, a2);
  v6 = *a1;
  if (*a1)
    v6 += 16 * *(unsigned int *)(v6 - 4);
  if ((_QWORD *)v6 == result)
  {
    v7 = 0;
  }
  else
  {
    v7 = result[1];
    result[1] = 0;
    result = (_QWORD *)WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>><void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::HashTableTraits>::remove(a1, result);
  }
  *a3 = v7;
  return result;
}

unsigned int *IPC::Connection::wakeUpRunLoop(unsigned int *this)
{
  unsigned __int8 v1;
  uint64_t v2;
  unsigned int *v3;
  WTF::RunLoop *v4;
  unsigned int *v5;
  unsigned int v6;

  v1 = atomic_load((unsigned __int8 *)this + 33);
  if ((v1 & 1) != 0)
  {
    v2 = *((_QWORD *)this + 2);
    if (!v2)
    {
      __break(0xC471u);
      JUMPOUT(0x19788EDA0);
    }
    v3 = *(unsigned int **)(v2 + 80);
    this = (unsigned int *)WTF::RunLoop::main((WTF::RunLoop *)this);
    if (v3 == this)
    {
      v4 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)this);
      v5 = (unsigned int *)((char *)v4 + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
      WTF::RunLoop::wakeUp(v4);
      return WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref(v5);
    }
  }
  return this;
}

const char *IPC::errorAsString(int a1)
{
  const char *result;

  result = "NoError";
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = "InvalidConnection";
      break;
    case 2:
      result = "NoConnectionForIdentifier";
      break;
    case 3:
      result = "NoMessageSenderConnection";
      break;
    case 4:
      result = "Timeout";
      break;
    case 5:
      result = "Unspecified";
      break;
    case 6:
      result = "MultipleWaitingClients";
      break;
    case 7:
      result = "AttemptingToWaitOnClosedConnection";
      break;
    case 8:
      result = "WaitingOnAlreadyDispatchedMessage";
      break;
    case 9:
      result = "AttemptingToWaitInsideSyncMessageHandling";
      break;
    case 10:
      result = "SyncMessageInterruptedWait";
      break;
    case 11:
      result = "CantWaitForSyncReplies";
      break;
    case 12:
      result = "FailedToEncodeMessageArguments";
      break;
    case 13:
      result = "FailedToDecodeReplyArguments";
      break;
    case 14:
      result = "FailedToFindReplyHandler";
      break;
    case 15:
      result = "FailedToAcquireBufferSpan";
      break;
    case 16:
      result = "FailedToAcquireReplyBufferSpan";
      break;
    case 17:
      result = "StreamConnectionEncodingError";
      break;
    default:
      result = (const char *)&str_114_2;
      break;
  }
  return result;
}

unsigned int *WebKit::Daemon::Encoder::encodeFixedLengthData(unsigned int *result, void *__src, size_t __n)
{
  unsigned int *v5;
  WTF::FastMalloc *v6;
  size_t v7;
  WTF::FastMalloc *v8;
  unint64_t v9;
  unint64_t v10;
  WTF::FastMalloc *v11;

  if (__n)
  {
    v5 = result;
    v7 = result[2];
    v6 = (WTF::FastMalloc *)result[3];
    v8 = (WTF::FastMalloc *)((char *)v6 + __n);
    if ((unint64_t)v6 + __n > v7)
    {
      v9 = v7 + (v7 >> 2);
      if (v9 >= 0x10)
        v10 = v9 + 1;
      else
        v10 = 16;
      if (v10 <= (unint64_t)v8)
        v11 = v8;
      else
        v11 = (WTF::FastMalloc *)v10;
      result = (unsigned int *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)result, v11);
      v6 = (WTF::FastMalloc *)v5[3];
    }
    if (v8 < v6)
    {
      __break(0xC471u);
    }
    else
    {
      result = (unsigned int *)memcpy((char *)v6 + *(_QWORD *)v5, __src, __n);
      v5[3] = v8;
    }
  }
  return result;
}

void IPC::Connection::SyncMessageState::~SyncMessageState(IPC::Connection::SyncMessageState *this)
{
  unint64_t v2;
  unint64_t v3;
  unsigned __int8 ***v4;
  unsigned __int8 ***v5;
  unsigned __int8 ***v6;
  void *v7;
  WTF *v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 ***v11;
  unsigned __int8 ***v12;
  unsigned __int8 ***v13;
  void *v14;
  WTF *v15;
  unsigned __int8 ***v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *((_QWORD *)this + 6);
  v3 = *((_QWORD *)this + 7);
  v4 = (unsigned __int8 ***)*((_QWORD *)this + 8);
  if (v2 > v3)
  {
    WTF::VectorDestructor<true,IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage>::destruct(v4, &v4[3 * v3]);
    v17 = *((_QWORD *)this + 8);
    v6 = (unsigned __int8 ***)(v17 + 24 * *((_QWORD *)this + 6));
    v5 = (unsigned __int8 ***)(v17 + 24 * *((unsigned int *)this + 18));
  }
  else
  {
    v5 = &v4[3 * v3];
    v6 = &v4[3 * v2];
  }
  WTF::VectorDestructor<true,IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage>::destruct(v6, v5);
  v8 = (WTF *)*((_QWORD *)this + 8);
  if (v8)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v8, v7);
  }
  v9 = *((_QWORD *)this + 2);
  v10 = *((_QWORD *)this + 3);
  v11 = (unsigned __int8 ***)*((_QWORD *)this + 4);
  if (v9 > v10)
  {
    WTF::VectorDestructor<true,IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage>::destruct(v11, &v11[3 * v10]);
    v18 = *((_QWORD *)this + 4);
    v13 = (unsigned __int8 ***)(v18 + 24 * *((_QWORD *)this + 2));
    v12 = (unsigned __int8 ***)(v18 + 24 * *((unsigned int *)this + 10));
  }
  else
  {
    v12 = &v11[3 * v10];
    v13 = &v11[3 * v9];
  }
  WTF::VectorDestructor<true,IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage>::destruct(v13, v12);
  v15 = (WTF *)*((_QWORD *)this + 4);
  if (v15)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v15, v14);
  }
  v16 = (unsigned __int8 ***)*((_QWORD *)this + 1);
  if (v16)
    WTF::HashTable<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>,WTF::HashTraits<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>,WTF::HashTraits<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>>::deallocateTable(v16, v14);
}

uint64_t WTF::HashTable<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>,WTF::HashTraits<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>,WTF::HashTraits<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>>::deallocateTable(unsigned __int8 ***a1, void *a2)
{
  uint64_t v3;
  unsigned __int8 ***v4;
  unsigned __int8 **v5;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (unsigned __int8 **)-1)
      {
        *v4 = 0;
        if (v5)
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v5);
      }
      ++v4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

void IPC::MessageReceiveQueueMap::~MessageReceiveQueueMap(IPC::MessageReceiveQueueMap *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  if (*((_BYTE *)this + 32))
  {
    v3 = *((unsigned int *)this + 6);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS7_NS_14default_deleteIS7_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v3])(&v5, (char *)this + 16);
    *((_DWORD *)this + 6) = -1;
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
    WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<unsigned char>,WTF::HashTraits<unsigned char>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned char>>::deallocateTable(v4, a2);
  if (*(_QWORD *)this)
    WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::deallocateTable(*(_QWORD *)this, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS9_NS_14default_deleteIS9_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSA_SE_EEEEEEDcSI_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<unsigned char>,WTF::HashTraits<unsigned char>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned char>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1 + 8;
    do
    {
      if (*(unsigned __int8 *)(v4 - 8) != 255)
      {
        v5 = *(unsigned int *)(v4 + 8);
        if ((_DWORD)v5 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS7_NS_14default_deleteIS7_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v5])(&v7, v4);
        *(_DWORD *)(v4 + 8) = -1;
      }
      v4 += 24;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1 + 16;
    do
    {
      if (*(unsigned __int8 *)(v4 - 16) != 255)
      {
        v5 = *(unsigned int *)(v4 + 8);
        if ((_DWORD)v5 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS7_NS_14default_deleteIS7_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v5])(&v7, v4);
        *(_DWORD *)(v4 + 8) = -1;
      }
      v4 += 32;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t IPC::WorkQueueMessageReceiverQueue::enqueueMessage(uint64_t a1, unsigned __int8 **a2, IPC::Decoder **a3)
{
  uint64_t v6;
  IPC::Decoder *v7;
  uint64_t v8;
  _QWORD *v9;
  IPC::Decoder *v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  IPC::Decoder *v15;
  WTF *v16;
  void *v17;
  unsigned __int8 **v19;
  IPC::Decoder *v20;
  uint64_t v21;
  _QWORD *v22;

  v6 = *(_QWORD *)(a1 + 8);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v19, a2);
  v7 = *a3;
  *a3 = 0;
  v20 = v7;
  v8 = *(_QWORD *)(a1 + 16);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v8 + 16));
  v21 = v8;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v9 = off_1E351E9F0;
  v9[1] = v19;
  v10 = v20;
  v19 = 0;
  v20 = 0;
  v9[2] = v10;
  v11 = v21;
  v21 = 0;
  v22 = v9;
  v9[3] = v11;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v6 + 32))(v6, &v22);
  v13 = v22;
  v22 = 0;
  if (v13)
    (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  v14 = v21;
  v21 = 0;
  if (v14)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v14 + 16), v12);
  v15 = v20;
  v20 = 0;
  if (v15)
  {
    IPC::Decoder::~Decoder(v15);
    WTF::fastFree(v16, v17);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v19);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6);
}

uint64_t WTF::Detail::CallableWrapper<IPC::WorkQueueMessageReceiverQueue::enqueueMessage(IPC::Connection &,WTF::UniqueRef<IPC::Decoder> &&)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = off_1E351E9F0;
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(a1 + 16), 0);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 8));
  return a1;
}

{
  uint64_t v3;
  void *v4;

  *(_QWORD *)a1 = off_1E351E9F0;
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(a1 + 16), 0);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 8));
  return WTF::fastFree((WTF *)a1, v4);
}

IPC::Encoder *WTF::Detail::CallableWrapper<IPC::WorkQueueMessageReceiverQueue::enqueueMessage(IPC::Connection &,WTF::UniqueRef<IPC::Decoder> &&)::{lambda(void)#1},void>::call(uint64_t *a1)
{
  return IPC::Connection::dispatchMessageReceiverMessage(a1[1], a1[3], a1 + 2);
}

unsigned __int8 ***IPC::FunctionDispatcherQueue::enqueueMessage(uint64_t a1, unsigned __int8 **a2, IPC::Decoder **a3)
{
  uint64_t v5;
  IPC::Decoder *v6;
  IPC::Decoder *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  IPC::Decoder *v11;
  WTF *v12;
  void *v13;
  unsigned __int8 **v15;
  IPC::Decoder *v16[2];
  uint64_t v17;

  v5 = *(_QWORD *)(a1 + 8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v15, a2);
  v6 = *a3;
  *a3 = 0;
  v7 = *(IPC::Decoder **)(a1 + 16);
  v16[0] = v6;
  v16[1] = v7;
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v8 = off_1E351EA40;
  *(_QWORD *)(v8 + 8) = v15;
  v9 = *(_OWORD *)v16;
  v15 = 0;
  v16[0] = 0;
  *(_OWORD *)(v8 + 16) = v9;
  v17 = v8;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 16))(v5, &v17);
  v10 = v17;
  v17 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = v16[0];
  v16[0] = 0;
  if (v11)
  {
    IPC::Decoder::~Decoder(v11);
    WTF::fastFree(v12, v13);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v15);
}

uint64_t WTF::Detail::CallableWrapper<IPC::FunctionDispatcherQueue::enqueueMessage(IPC::Connection &,WTF::UniqueRef<IPC::Decoder> &&)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E351EA40;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(a1 + 16), 0);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 8));
  return a1;
}

{
  void *v2;

  *(_QWORD *)a1 = off_1E351EA40;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(a1 + 16), 0);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 8));
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<IPC::FunctionDispatcherQueue::enqueueMessage(IPC::Connection &,WTF::UniqueRef<IPC::Decoder> &&)::{lambda(void)#1},void>::call(uint64_t *a1)
{
  return IPC::Connection::dispatchMessageReceiverMessage(a1[1], a1[3], a1 + 2);
}

void WebKit::LogChannels::~LogChannels(WebKit::LogChannels *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E351ED80;
  v3 = (WTF *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v3, a2);
  }
}

{
  WTF *v3;

  *(_QWORD *)this = off_1E351ED80;
  v3 = (WTF *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v3, a2);
  }
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WTF::HashMap<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<IPC::Connection::SyncMessageState *>,WTF::HashTableTraits>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  if (!*a1)
  {
    if (a2)
    {
      v2 = 0;
      goto LABEL_3;
    }
    return 0;
  }
  v2 = *a1 + 16 * *(unsigned int *)(*a1 - 4);
  if ((_QWORD *)v2 == a2)
    return 0;
LABEL_3:
  if ((_QWORD *)v2 != a2)
    WTF::HashTable<WTF::SerialFunctionDispatcher *,WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>>,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashMap<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<IPC::Connection::SyncMessageState *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::SerialFunctionDispatcher *>>::remove(a1, a2);
  return 1;
}

uint64_t *WTF::HashTable<WTF::SerialFunctionDispatcher *,WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>>,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashMap<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<IPC::Connection::SyncMessageState *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::SerialFunctionDispatcher *>>::remove(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  v2 = *result;
  if (*result)
    v3 = *(_DWORD *)(v2 - 12) - 1;
  else
    v3 = -1;
  *(_DWORD *)(v2 - 12) = v3;
  v4 = *result;
  if (*result)
  {
    v5 = 6 * *(_DWORD *)(v4 - 12);
    v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9)
      return (uint64_t *)WTF::HashTable<WTF::SerialFunctionDispatcher *,WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>>,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashMap<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<IPC::Connection::SyncMessageState *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::SerialFunctionDispatcher *>>::rehash(result, v6 >> 1, 0);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::SerialFunctionDispatcher *,WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>>,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashMap<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<IPC::Connection::SyncMessageState *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::SerialFunctionDispatcher *>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<IPC::Connection::SyncMessageState *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>>,WTF::SerialFunctionDispatcher *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  if (!*a1)
    return 0;
  result = WTF::HashTable<WTF::SerialFunctionDispatcher *,WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>>,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashMap<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<IPC::Connection::SyncMessageState *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::SerialFunctionDispatcher *>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<IPC::Connection::SyncMessageState *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>>,WTF::SerialFunctionDispatcher *>(*a1, *a2);
  if (!result)
    return v2 + 16 * *(unsigned int *)(v2 - 4);
  return result;
}

uint64_t WTF::HashTable<WTF::SerialFunctionDispatcher *,WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>>,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashMap<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<IPC::Connection::SyncMessageState *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::SerialFunctionDispatcher *>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<IPC::Connection::SyncMessageState *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>>,WTF::SerialFunctionDispatcher *>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  if (result)
  {
    v3 = result;
    v4 = *(_DWORD *)(result - 8);
    v5 = WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::hash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2) & v4;
    v6 = *(_QWORD *)(v3 + 16 * v5);
    if (v6 == a2)
    {
      return v3 + 16 * v5;
    }
    else
    {
      v7 = 1;
      while (v6)
      {
        v5 = ((_DWORD)v5 + v7) & v4;
        v6 = *(_QWORD *)(v3 + 16 * v5);
        ++v7;
        if (v6 == a2)
          return v3 + 16 * v5;
      }
      return 0;
    }
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>,WTF::HashTraits<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>,WTF::HashTraits<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>>::reinsert(uint64_t a1, uint64_t *a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;

  if (a1)
    v2 = *(_DWORD *)(a1 - 8);
  else
    v2 = 0;
  v3 = (~(*a2 << 32) + *a2) ^ ((unint64_t)(~(*a2 << 32) + *a2) >> 22);
  v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  v6 = v2 & ((v5 >> 31) ^ v5);
  v7 = 1;
  do
  {
    v8 = v6;
    v9 = *(_QWORD *)(a1 + 8 * v6);
    v6 = (v6 + v7++) & v2;
  }
  while (v9);
  result = (_QWORD *)(a1 + 8 * v8);
  *result = 0;
  v11 = *a2;
  *a2 = 0;
  *result = v11;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::SyncMessageState::processIncomingMessage(IPC::Connection&,WTF::UniqueRef<IPC::Decoder> &)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E351EDA8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::SyncMessageState::processIncomingMessage(IPC::Connection&,WTF::UniqueRef<IPC::Decoder> &)::$_0,void>::~CallableWrapper(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E351EDA8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::SyncMessageState::processIncomingMessage(IPC::Connection&,WTF::UniqueRef<IPC::Decoder> &)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t *v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 **v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v20;
  unint64_t v21;
  unsigned __int8 ***v22;
  unint64_t v23;
  uint64_t *v24;
  IPC::Decoder **v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  unsigned __int8 ***v29;
  unsigned __int8 ***v30;
  void *v31;
  int v32;
  uint64_t v33;
  uint64_t i;
  IPC::Decoder *v35;
  WTF *v36;
  void *v37;
  int v38;
  unsigned int v39;
  IPC::Decoder *v40[2];
  __int128 v41;

  v1 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return result;
  v3 = (unsigned __int8 *)(v2 + 3);
  if (__ldaxr((unsigned __int8 *)(v2 + 3)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEABB3C](v2 + 3);
LABEL_6:
  v6 = (uint64_t *)(v2 + 8);
  v5 = *(_QWORD *)(v2 + 8);
  if (v5)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = (~(v1 << 32) + v1) ^ ((unint64_t)(~(v1 << 32) + v1) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_QWORD *)(v5 + 8 * v11);
    if (v12 != v1)
    {
      v38 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v38) & v7;
        v12 = *(_QWORD *)(v5 + 8 * v11);
        ++v38;
        if (v12 == v1)
          goto LABEL_8;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_8:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v13 = *(unsigned __int8 ***)(v5 + 8 * v11);
      *(_QWORD *)(v5 + 8 * v11) = -1;
      if (v13)
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v13);
      ++*(_DWORD *)(*v6 - 16);
      v14 = *v6;
      if (*v6)
        v15 = *(_DWORD *)(v14 - 12) - 1;
      else
        v15 = -1;
      *(_DWORD *)(v14 - 12) = v15;
      v16 = *v6;
      if (*v6)
      {
        v17 = 6 * *(_DWORD *)(v16 - 12);
        v18 = *(_DWORD *)(v16 - 4);
        if (v17 < v18 && v18 >= 9)
          WTF::HashTable<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>,WTF::HashTraits<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>,WTF::HashTraits<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>>::rehash((uint64_t *)(v2 + 8), v18 >> 1);
      }
    }
  }
  *(_OWORD *)v40 = 0u;
  v41 = 0u;
  v21 = *(_QWORD *)(v2 + 48);
  v20 = *(_QWORD *)(v2 + 56);
  if (v21 == v20)
  {
    *(_QWORD *)(v2 + 48) = 0;
    *(_QWORD *)(v2 + 56) = 0;
    v22 = *(unsigned __int8 ****)(v2 + 64);
    *(_QWORD *)(v2 + 64) = 0;
    v23 = v21;
    *(_DWORD *)(v2 + 72) = 0;
LABEL_28:
    v29 = &v22[3 * v21];
    v30 = &v22[3 * v23];
    goto LABEL_29;
  }
  do
  {
    v24 = (uint64_t *)(*(_QWORD *)(v2 + 64) + 24 * v21);
    if (*v24 == v1)
      v25 = (IPC::Decoder **)(v2 + 16);
    else
      v25 = v40;
    WTF::Deque<IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage,0ul>::append((uint64_t)v25, v24);
    v26 = *(unsigned int *)(v2 + 72);
    v21 += v26 + 1;
    do
      v21 -= v26;
    while (v21 >= v26);
  }
  while (v20 != v21);
  v21 = *(_QWORD *)(v2 + 48);
  v23 = *(_QWORD *)(v2 + 56);
  v27 = v41;
  v28 = DWORD2(v41);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)v40;
  v22 = *(unsigned __int8 ****)(v2 + 64);
  *(_QWORD *)(v2 + 64) = v27;
  *(_DWORD *)(v2 + 72) = v28;
  if (v21 <= v23)
    goto LABEL_28;
  v39 = v26;
  WTF::VectorDestructor<true,IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage>::destruct(v22, &v22[3 * v23]);
  v29 = &v22[3 * v21];
  v30 = &v22[3 * v39];
LABEL_29:
  result = (uint64_t)WTF::VectorDestructor<true,IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage>::destruct(v29, v30);
  if (v22)
    result = WTF::fastFree((WTF *)v22, v31);
  v32 = __ldxr(v3);
  if (v32 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, v3))
LABEL_35:
    result = WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 3));
  v33 = *(_QWORD *)(v2 + 16);
  for (i = *(_QWORD *)(v2 + 24); v33 != i; i = *(_QWORD *)(v2 + 24))
  {
    WTF::Deque<IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage,0ul>::takeFirst((uint64_t)v40, v2 + 16);
    IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage::dispatch((uint64_t **)v40);
    v35 = v40[1];
    v40[1] = 0;
    if (v35)
    {
      IPC::Decoder::~Decoder(v35);
      WTF::fastFree(v36, v37);
    }
    result = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v40);
    v33 = *(_QWORD *)(v2 + 16);
  }
  return result;
}

IPC::Decoder *WTF::Deque<WTF::UniqueRef<IPC::Decoder>,0ul>::destroyAll(IPC::Decoder *result)
{
  uint64_t v1;
  unint64_t v2;
  IPC::Decoder **v3;
  IPC::Decoder **v4;
  uint64_t v5;
  IPC::Decoder *v6;
  uint64_t v7;
  uint64_t v8;
  IPC::Decoder **v9;
  uint64_t v10;

  v1 = *(_QWORD *)result;
  v2 = *((_QWORD *)result + 1);
  v3 = (IPC::Decoder **)*((_QWORD *)result + 2);
  if (*(_QWORD *)result > v2)
  {
    v6 = result;
    if (v2)
    {
      v7 = 8 * v2;
      do
      {
        result = std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](v3++, 0);
        v7 -= 8;
      }
      while (v7);
      v3 = (IPC::Decoder **)*((_QWORD *)v6 + 2);
      v1 = *(_QWORD *)v6;
    }
    v8 = *((unsigned int *)v6 + 6);
    if (v1 != v8)
    {
      v9 = &v3[v1];
      v10 = 8 * v8 - 8 * v1;
      do
      {
        result = std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](v9++, 0);
        v10 -= 8;
      }
      while (v10);
    }
  }
  else if (*(_QWORD *)result != v2)
  {
    v4 = &v3[v1];
    v5 = 8 * v2 - 8 * v1;
    do
    {
      result = std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](v4++, 0);
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

uint64_t WTF::Deque<WTF::UniqueRef<IPC::Encoder>,0ul>::~Deque(uint64_t a1)
{
  void *v2;
  WTF *v3;

  WTF::Deque<WTF::UniqueRef<IPC::Encoder>,0ul>::destroyAll((IPC::Encoder *)a1);
  v3 = *(WTF **)(a1 + 16);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v3, v2);
  }
  return a1;
}

IPC::Encoder *WTF::Deque<WTF::UniqueRef<IPC::Encoder>,0ul>::destroyAll(IPC::Encoder *result)
{
  uint64_t v1;
  unint64_t v2;
  IPC::Encoder **v3;
  IPC::Encoder **v4;
  uint64_t v5;
  IPC::Encoder *v6;
  uint64_t v7;
  uint64_t v8;
  IPC::Encoder **v9;
  uint64_t v10;

  v1 = *(_QWORD *)result;
  v2 = *((_QWORD *)result + 1);
  v3 = (IPC::Encoder **)*((_QWORD *)result + 2);
  if (*(_QWORD *)result > v2)
  {
    v6 = result;
    if (v2)
    {
      v7 = 8 * v2;
      do
      {
        result = std::unique_ptr<IPC::Encoder>::reset[abi:sn180100](v3++, 0);
        v7 -= 8;
      }
      while (v7);
      v3 = (IPC::Encoder **)*((_QWORD *)v6 + 2);
      v1 = *(_QWORD *)v6;
    }
    v8 = *((unsigned int *)v6 + 6);
    if (v1 != v8)
    {
      v9 = &v3[v1];
      v10 = 8 * v8 - 8 * v1;
      do
      {
        result = std::unique_ptr<IPC::Encoder>::reset[abi:sn180100](v9++, 0);
        v10 -= 8;
      }
      while (v10);
    }
  }
  else if (*(_QWORD *)result != v2)
  {
    v4 = &v3[v1];
    v5 = 8 * v2 - 8 * v1;
    do
    {
      result = std::unique_ptr<IPC::Encoder>::reset[abi:sn180100](v4++, 0);
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

unsigned int *WTF::Vector<IPC::Connection::PendingSyncReply,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v6;
  IPC::Decoder **v7;

  v3 = a1[3];
  if ((_DWORD)v3)
  {
    v6 = 32 * v3;
    v7 = (IPC::Decoder **)(*(_QWORD *)a1 + 8);
    do
    {
      std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](v7, 0);
      v7 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand()
{
  int v0;

  if (IPC::connectionMap(void)::map && (v0 = *(_DWORD *)(IPC::connectionMap(void)::map - 4)) != 0)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v0 << (6 * *(_DWORD *)(IPC::connectionMap(void)::map - 12) >= (2 * v0)));
  else
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(8u);
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(unsigned int a1)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned __int8 *v11;

  v2 = IPC::connectionMap(void)::map;
  if (IPC::connectionMap(void)::map)
  {
    v3 = *(_DWORD *)(IPC::connectionMap(void)::map - 4);
    v4 = *(_DWORD *)(IPC::connectionMap(void)::map - 12);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = WTF::fastMalloc((WTF *)(24 * a1 + 16));
  v7 = v5;
  v8 = v5 + 16;
  if (a1)
    bzero((void *)(v5 + 16), 24 * a1);
  IPC::connectionMap(void)::map = v8;
  *(_DWORD *)(v7 + 12) = a1;
  *(_DWORD *)(IPC::connectionMap(void)::map - 8) = a1 - 1;
  *(_DWORD *)(IPC::connectionMap(void)::map - 16) = 0;
  *(_DWORD *)(IPC::connectionMap(void)::map - 12) = v4;
  if (v3)
  {
    v9 = v3;
    v10 = (_QWORD *)v2;
    while (1)
    {
      if (*v10 != -1)
      {
        if (*v10)
        {
          WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::reinsert(v10, v6);
          v11 = (unsigned __int8 *)v10[1];
          v10[1] = 0;
          if (v11)
LABEL_15:
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v11, v6);
        }
        else
        {
          v11 = (unsigned __int8 *)v10[1];
          v10[1] = 0;
          if (v11)
            goto LABEL_15;
        }
      }
      v10 += 3;
      if (!--v9)
        goto LABEL_17;
    }
  }
  if (v2)
LABEL_17:
    WTF::fastFree((WTF *)(v2 - 16), v6);
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::reinsert(_QWORD *a1, void *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  _QWORD *v15;
  unsigned __int8 *v16;
  uint64_t v17;

  v3 = IPC::connectionMap(void)::map;
  if (IPC::connectionMap(void)::map)
    v4 = *(_DWORD *)(IPC::connectionMap(void)::map - 8);
  else
    v4 = 0;
  v5 = (*a1 + ~(*a1 << 32)) ^ ((*a1 + ~(*a1 << 32)) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((unint64_t)(v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  v9 = 1;
  do
  {
    v10 = v8;
    v11 = (_QWORD *)(IPC::connectionMap(void)::map + 24 * v8);
    v8 = (v8 + v9++) & v4;
  }
  while (*v11);
  v12 = v10;
  v13 = IPC::connectionMap(void)::map + 24 * v10;
  v16 = *(unsigned __int8 **)(v13 + 8);
  v15 = (_QWORD *)(v13 + 8);
  v14 = v16;
  *v15 = 0;
  if (v16)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v14, a2);
  *v11 = *a1;
  *v15 = a1[1];
  v17 = a1[2];
  a1[1] = 0;
  a1[2] = 0;
  *(_QWORD *)(v3 + 24 * v12 + 16) = v17;
  return v11;
}

void WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::HashTableTraits>::remove(_QWORD *a1, void *a2)
{
  _QWORD *v2;

  if (IPC::connectionMap(void)::map)
  {
    v2 = (_QWORD *)(IPC::connectionMap(void)::map + 24 * *(unsigned int *)(IPC::connectionMap(void)::map - 4));
    if (v2 == a1)
      return;
  }
  else
  {
    if (!a1)
      return;
    v2 = 0;
  }
  if (v2 != a1)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(a1, a2);
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(_QWORD *a1, void *a2)
{
  unsigned __int8 *v3;
  int v4;
  unsigned int v5;

  v3 = (unsigned __int8 *)a1[1];
  *a1 = -1;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  ++*(_DWORD *)(IPC::connectionMap(void)::map - 16);
  if (IPC::connectionMap(void)::map)
    v4 = *(_DWORD *)(IPC::connectionMap(void)::map - 12) - 1;
  else
    v4 = -1;
  *(_DWORD *)(IPC::connectionMap(void)::map - 12) = v4;
  if (IPC::connectionMap(void)::map)
  {
    v5 = *(_DWORD *)(IPC::connectionMap(void)::map - 4);
    if (6 * *(_DWORD *)(IPC::connectionMap(void)::map - 12) < v5 && v5 >= 9)
      WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v5 >> 1);
  }
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(_QWORD *a1)
{
  uint64_t *result;

  if (!IPC::connectionMap(void)::map)
    return 0;
  result = WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1);
  if (!result)
  {
    if (IPC::connectionMap(void)::map)
      return (uint64_t *)(IPC::connectionMap(void)::map + 24 * *(unsigned int *)(IPC::connectionMap(void)::map - 4));
    else
      return 0;
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<IPC::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(_QWORD *a1)
{
  uint64_t v1;
  int v3;
  unsigned int v4;
  uint64_t *result;
  uint64_t v6;
  int v7;

  v1 = IPC::connectionMap(void)::map;
  if (!IPC::connectionMap(void)::map)
    return 0;
  v3 = *(_DWORD *)(IPC::connectionMap(void)::map - 8);
  v4 = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a1) & v3;
  result = (uint64_t *)(v1 + 24 * v4);
  v6 = *result;
  if (*result != *a1)
  {
    v7 = 1;
    while (v6)
    {
      v4 = (v4 + v7) & v3;
      result = (uint64_t *)(v1 + 24 * v4);
      v6 = *result;
      ++v7;
      if (*result == *a1)
        return result;
    }
    return 0;
  }
  return result;
}

uint64_t *WTF::Deque<WTF::UniqueRef<IPC::Decoder>,0ul>::expandCapacity(uint64_t *result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t *v3;
  char *v4;
  int v5;
  char *v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;

  v1 = *((unsigned int *)result + 6);
  v2 = v1 + (v1 >> 2);
  if (v2 <= 0xF)
    v2 = 15;
  if (v2 >= 0x1FFFFFFF)
  {
    __break(0xC471u);
  }
  else
  {
    v3 = result;
    v4 = (char *)result[2];
    v5 = v2 + 1;
    v6 = (char *)WTF::fastMalloc((WTF *)(8 * (v2 + 1)));
    *((_DWORD *)v3 + 6) = v5;
    v3[2] = (uint64_t)v6;
    v7 = v3[1];
    if (*v3 > v7)
    {
      memcpy(v6, v4, 8 * v7);
      v9 = *v3 - v1 + *((unsigned int *)v3 + 6);
      result = (uint64_t *)memcpy((void *)(v3[2] + 8 * v9), &v4[8 * *v3], 8 * v1 - 8 * *v3);
      *v3 = v9;
    }
    else
    {
      result = (uint64_t *)memcpy(&v6[8 * *v3], &v4[8 * *v3], 8 * v7 - 8 * *v3);
    }
    if (v4)
    {
      if ((char *)v3[2] == v4)
      {
        v3[2] = 0;
        *((_DWORD *)v3 + 6) = 0;
      }
      return (uint64_t *)WTF::fastFree((WTF *)v4, v8);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::invalidate(void)::$_1,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E351EDD0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::invalidate(void)::$_1,void>::~CallableWrapper(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E351EDD0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

void WTF::Detail::CallableWrapper<IPC::Connection::invalidate(void)::$_1,void>::call(uint64_t a1)
{
  IPC::Connection::platformInvalidate(*(IPC::Connection **)(a1 + 8));
}

uint64_t WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,unsigned int>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,unsigned int,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand(uint64_t *a1, __int128 *a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  const WTF::ASCIILiteral *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  _QWORD *v19;
  __int128 v20;
  uint64_t result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      v7 = v5 << (6 * v6 >= 2 * v5);
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = 8;
LABEL_6:
  v8 = WTF::fastZeroedMalloc((WTF *)(24 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v10 = 0;
    v11 = 0;
    v12 = v5;
    do
    {
      v13 = (__int128 *)(v4 + 24 * v10);
      if ((unint64_t)(*(_QWORD *)v13 + 1) >= 2)
      {
        v14 = *a1;
        if (*a1)
          v15 = *(_DWORD *)(v14 - 8);
        else
          v15 = 0;
        v16 = WTF::ASCIILiteralHash::hash((WTF::ASCIILiteralHash *)(v4 + 24 * v10), v9);
        v17 = 0;
        do
        {
          v18 = v16 & v15;
          v19 = (_QWORD *)(v14 + 24 * (v16 & v15));
          v16 = ++v17 + (v16 & v15);
        }
        while (*v19);
        v20 = *v13;
        v19[2] = *((_QWORD *)v13 + 2);
        *(_OWORD *)v19 = v20;
        if (v13 == a2)
          v11 = v14 + 24 * v18;
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v11;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::sendMessageImpl(WTF::UniqueRef<IPC::Encoder> &&,WTF::OptionSet<IPC::SendOption>,std::optional<WTF::Thread::QOS>)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E351EDF8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::sendMessageImpl(WTF::UniqueRef<IPC::Encoder> &&,WTF::OptionSet<IPC::SendOption>,std::optional<WTF::Thread::QOS>)::$_0,void>::~CallableWrapper(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E351EDF8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::sendMessageImpl(WTF::UniqueRef<IPC::Encoder> &&,WTF::OptionSet<IPC::SendOption>,std::optional<WTF::Thread::QOS>)::$_0,void>::call(uint64_t a1, void *a2)
{
  return IPC::Connection::sendOutgoingMessages(*(_QWORD *)(a1 + 8), a2);
}

_QWORD *WTF::Detail::CallableWrapper<IPC::Connection::sendMessageWithAsyncReply(WTF::UniqueRef<IPC::Encoder> &&,IPC::ConnectionAsyncReplyHandler,WTF::OptionSet<IPC::SendOption>,std::optional<WTF::Thread::QOS>)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E351EE20;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::sendMessageWithAsyncReply(WTF::UniqueRef<IPC::Encoder> &&,IPC::ConnectionAsyncReplyHandler,WTF::OptionSet<IPC::SendOption>,std::optional<WTF::Thread::QOS>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E351EE20;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::sendMessageWithAsyncReply(WTF::UniqueRef<IPC::Encoder> &&,IPC::ConnectionAsyncReplyHandler,WTF::OptionSet<IPC::SendOption>,std::optional<WTF::Thread::QOS>)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

unint64_t *WTF::Deque<WTF::UniqueRef<IPC::Decoder>,0ul>::remove(unint64_t *result, unint64_t a2)
{
  unint64_t *v3;
  unint64_t v4;
  IPC::Decoder **v5;

  if (result[1] != a2)
  {
    v3 = result;
    v4 = result[2];
    v5 = (IPC::Decoder **)(v4 + 8 * a2);
    std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](v5, 0);
    if (*v3 > a2)
    {
      result = (unint64_t *)memmove(v5, v5 + 1, v4 + 8 * v3[1] - (_QWORD)(v5 + 1));
      v3[1] = (v3[1] + *((unsigned int *)v3 + 6) - 1) % *((unsigned int *)v3 + 6);
    }
    else
    {
      result = (unint64_t *)memmove((void *)(v4 + 8 * *v3 + 8), (const void *)(v4 + 8 * *v3), (size_t)v5 - v4 + -8 * *v3);
      *v3 = (*v3 + 1) % *((unsigned int *)v3 + 6);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::waitForMessage(IPC::MessageName,unsigned long long,IPC::Timeout,WTF::OptionSet<IPC::WaitForOption>)::$_0,void,IPC::MessageName,unsigned long long>::call(uint64_t result, int a2, uint64_t a3)
{
  BOOL v3;

  v3 = **(unsigned __int16 **)(result + 16) == a2 && **(_QWORD **)(result + 24) == a3;
  **(_BYTE **)(result + 8) |= v3;
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E351EA58[v4])(&v7, result);
  *(_DWORD *)(v3 + 8) = -1;
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E351EE60[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF9UniqueRefIN3IPC7DecoderEEENSA_5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSC_SD_EEEEEvRSF_OT_EUlRSK_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSC_SD_EEEOST_EEEDcSK_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF9UniqueRefIN3IPC7DecoderEEENSA_5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSC_SD_EEEEEvRSF_OT_EUlRSK_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSC_SD_EEEOST_EEEDcSK_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::dispatchDidReceiveInvalidMessage(IPC::MessageName)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E351EE80;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::dispatchDidReceiveInvalidMessage(IPC::MessageName)::$_0,void>::~CallableWrapper(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E351EE80;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::dispatchDidReceiveInvalidMessage(IPC::MessageName)::$_0,void>::call(uint64_t result)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(*(_QWORD *)(result + 8) + 33));
  if ((v1 & 1) != 0)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(result + 8) + 8) + 48))(*(_QWORD *)(*(_QWORD *)(result + 8) + 8));
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::dispatchDidCloseAndInvalidate(void)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E351EEA8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::dispatchDidCloseAndInvalidate(void)::$_0,void>::~CallableWrapper(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E351EEA8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::dispatchDidCloseAndInvalidate(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    return IPC::Connection::invalidate(*(_QWORD *)(a1 + 8));
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::enqueueIncomingMessage(WTF::UniqueRef<IPC::Decoder>)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E351EED0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::enqueueIncomingMessage(WTF::UniqueRef<IPC::Decoder>)::$_0,void>::~CallableWrapper(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E351EED0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

void WTF::Detail::CallableWrapper<IPC::Connection::enqueueIncomingMessage(WTF::UniqueRef<IPC::Decoder>)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
    v3 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v5 = *(_QWORD *)(a1 + 8);
      v6 = 134218240;
      v7 = v5;
      v8 = 2048;
      v9 = 50000;
      _os_log_fault_impl(&dword_196BCC000, v3, OS_LOG_TYPE_FAULT, "%p - Connection::enqueueIncomingMessage: Over %zu incoming messages have been queued without the main thread processing them, terminating the remote process as it seems to be misbehaving", (uint8_t *)&v6, 0x16u);
    }
    v4 = (os_unfair_lock_s *)(*(_QWORD *)(a1 + 8) + 104);
    os_unfair_lock_lock(v4);
    WTF::Deque<WTF::UniqueRef<IPC::Decoder>,0ul>::clear(*(_QWORD *)(a1 + 8) + 112);
    os_unfair_lock_unlock(v4);
  }
}

WTF *WTF::Deque<WTF::UniqueRef<IPC::Decoder>,0ul>::clear(uint64_t a1)
{
  void *v2;
  WTF *result;

  WTF::Deque<WTF::UniqueRef<IPC::Decoder>,0ul>::destroyAll((IPC::Decoder *)a1);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  result = *(WTF **)(a1 + 16);
  if (result)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    return (WTF *)WTF::fastFree(result, v2);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::enqueueIncomingMessage(WTF::UniqueRef<IPC::Decoder>)::$_1,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E351EEF8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::enqueueIncomingMessage(WTF::UniqueRef<IPC::Decoder>)::$_1,void>::~CallableWrapper(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E351EEF8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

void WTF::Detail::CallableWrapper<IPC::Connection::enqueueIncomingMessage(WTF::UniqueRef<IPC::Decoder>)::$_1,void>::call(uint64_t a1)
{
  IPC::Connection::dispatchIncomingMessages(*(IPC::Connection **)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::enqueueIncomingMessage(WTF::UniqueRef<IPC::Decoder>)::$_2,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E351EF20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::enqueueIncomingMessage(WTF::UniqueRef<IPC::Decoder>)::$_2,void>::~CallableWrapper(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E351EF20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

void WTF::Detail::CallableWrapper<IPC::Connection::enqueueIncomingMessage(WTF::UniqueRef<IPC::Decoder>)::$_2,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  IPC::Decoder *v4;
  uint64_t v5;
  uint64_t v6;
  IPC::Decoder *v7;
  WTF *v8;
  void *v9;
  IPC::Decoder *v10;

  v1 = *(_QWORD *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 104));
  v2 = *(_QWORD *)(v1 + 112);
  if (v2 == *(_QWORD *)(v1 + 120))
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 104));
  }
  else
  {
    v3 = *(_QWORD *)(v1 + 128);
    v4 = *(IPC::Decoder **)(v3 + 8 * v2);
    *(_QWORD *)(v3 + 8 * v2) = 0;
    std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(*(_QWORD *)(v1 + 128) + 8 * v2), 0);
    v5 = *(_QWORD *)(v1 + 112);
    if (v5 == *(unsigned int *)(v1 + 136) - 1)
      v6 = 0;
    else
      v6 = v5 + 1;
    *(_QWORD *)(v1 + 112) = v6;
    os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 104));
    v10 = v4;
    IPC::Connection::dispatchMessage(v1, (uint64_t *)&v10);
    v7 = v10;
    v10 = 0;
    if (v7)
    {
      IPC::Decoder::~Decoder(v7);
      WTF::fastFree(v8, v9);
    }
  }
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::dispatchIncomingMessages(void)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E351EF48;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::dispatchIncomingMessages(void)::$_0,void>::~CallableWrapper(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E351EF48;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

void WTF::Detail::CallableWrapper<IPC::Connection::dispatchIncomingMessages(void)::$_0,void>::call(uint64_t a1)
{
  IPC::Connection::dispatchIncomingMessages(*(IPC::Connection **)(a1 + 8));
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(std::unique_ptr<IPC::Decoder> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(std::unique_ptr<IPC::Decoder> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(a1, v4, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(std::unique_ptr<IPC::Decoder> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    v15 = v7;
    do
    {
      v16 = (uint64_t *)(v6 + 16 * v13);
      v17 = *v16;
      if (*v16 != -1)
      {
        if (v17)
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = (v17 + ~(v17 << 32)) ^ ((unint64_t)(v17 + ~(v17 << 32)) >> 22);
          v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
          v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
          v25 = v21 & ((v24 >> 31) ^ v24);
          v26 = 1;
          do
          {
            v27 = v25;
            v28 = *(_QWORD *)(v20 + 16 * v25);
            v25 = (v25 + v26++) & v21;
          }
          while (v28);
          v29 = (uint64_t *)(v20 + 16 * v27);
          v30 = v29[1];
          v29[1] = 0;
          if (v30)
            (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
          *v29 = *v16;
          v31 = v6 + 16 * v13;
          v32 = *(_QWORD *)(v31 + 8);
          *(_QWORD *)(v31 + 8) = 0;
          v29[1] = v32;
          v33 = *(_QWORD *)(v31 + 8);
          *(_QWORD *)(v31 + 8) = 0;
          if (v33)
            (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
          if (v16 == a3)
            v14 = v29;
        }
        else
        {
          v18 = v6 + 16 * v13;
          v19 = *(_QWORD *)(v18 + 8);
          *(_QWORD *)(v18 + 8) = 0;
          if (v19)
            (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>><void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::HashTableTraits>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v9;
  unsigned int v10;

  if (*a1)
  {
    v3 = *a1 + 16 * *(unsigned int *)(*a1 - 4);
    if ((_QWORD *)v3 != a2)
      goto LABEL_4;
    return 0;
  }
  if (!a2)
    return 0;
  v3 = 0;
LABEL_4:
  if ((_QWORD *)v3 != a2)
  {
    v4 = a2[1];
    *a2 = -1;
    a2[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    ++*(_DWORD *)(*a1 - 16);
    v5 = *a1;
    if (*a1)
      v6 = *(_DWORD *)(v5 - 12) - 1;
    else
      v6 = -1;
    *(_DWORD *)(v5 - 12) = v6;
    v7 = *a1;
    if (*a1)
    {
      v9 = 6 * *(_DWORD *)(v7 - 12);
      v10 = *(_DWORD *)(v7 - 4);
      if (v9 < v10 && v10 >= 9)
        WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(std::unique_ptr<IPC::Decoder> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(a1, v10 >> 1, 0);
    }
  }
  return 1;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(std::unique_ptr<IPC::Decoder> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void ()(std::unique_ptr<IPC::Decoder> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::HashTableTraits>,WTF::DefaultHash>,WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  if (!*a1)
    return 0;
  result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::GPUProcess::MediaCaptureAccess>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::GPUProcess::MediaCaptureAccess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::GPUProcess::MediaCaptureAccess,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::GPUProcess::MediaCaptureAccess>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::GPUProcess::MediaCaptureAccess,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::GPUProcess::MediaCaptureAccess>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(*a1, *a2);
  if (!result)
    return v2 + 16 * *(unsigned int *)(v2 - 4);
  return result;
}

uint64_t IPC::Decoder::unwrapForTesting@<X0>(IPC::Decoder *this@<X0>, IPC::Decoder *a2@<X1>, IPC::Decoder **a3@<X8>)
{
  void *v5;
  const void *v7;
  WTF *v8;
  char v9;
  uint64_t v10[2];

  v10[0] = *((_QWORD *)this + 4);
  v10[1] = *((_QWORD *)this + 5);
  v7 = 0;
  *((_QWORD *)this + 4) = 0;
  v8 = 0;
  *((_QWORD *)this + 5) = 0;
  WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v7, a2);
  IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>((uint64_t *)this, (uint64_t)&v7);
  if (v9)
  {
    IPC::Decoder::create(v8, v7, v10, a3);
    *((_BYTE *)*a3 + 49) = 1;
  }
  else
  {
    *a3 = 0;
  }
  return WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v5);
}

uint64_t IPC::Encoder::setFullySynchronousModeForTesting(uint64_t this)
{
  **(_BYTE **)(this + 528) |= 4u;
  return this;
}

uint64_t IPC::Encoder::setShouldMaintainOrderingWithAsyncMessages(uint64_t this)
{
  **(_BYTE **)(this + 528) |= 8u;
  return this;
}

uint64_t IPC::Encoder::wrapForTesting(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  unint64_t v13;
  int v14;
  int v15;
  _QWORD v16[2];

  v4 = *a2;
  v5 = *(_BYTE **)(*a2 + 528);
  *v5 = *v5 & 0xFC | 1;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, v5, *(_QWORD *)(v4 + 544));
  v6 = *a2;
  v7 = *(_QWORD *)(*a2 + 560);
  v13 = v7;
  v8 = *(unsigned int *)(v6 + 572);
  v14 = *(_DWORD *)(v6 + 568);
  v15 = v8;
  v16[0] = 0;
  *(_QWORD *)(v6 + 560) = 0;
  v16[1] = 0;
  *(_QWORD *)(v6 + 568) = 0;
  WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v16, v9);
  IPC::Encoder::reserve(a1, v8);
  if ((_DWORD)v8)
  {
    v11 = 4 * v8;
    do
    {
      IPC::Encoder::addAttachment(a1, v7);
      v7 += 4;
      v11 -= 4;
    }
    while (v11);
  }
  return WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v10);
}

uint64_t IPC::Encoder::reserve(uint64_t this, size_t a2)
{
  size_t v2;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(this + 552);
  if (v2 < a2)
  {
    v3 = this;
    v4 = (2 * v2 + 4095) & 0x7FFFFFFFFFFFF000;
    do
    {
      v5 = v4;
      v4 *= 2;
    }
    while (v5 < a2);
    this = (uint64_t)mmap(0, v5, 3, 4098, -1, 0);
    if (this == -1)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = this;
      memcpy((void *)this, *(const void **)(v3 + 528), *(_QWORD *)(v3 + 544));
      this = *(_QWORD *)(v3 + 528);
      if (this != v3 + 16)
        this = munmap((void *)this, *(_QWORD *)(v3 + 552));
      *(_QWORD *)(v3 + 528) = v6;
      *(_QWORD *)(v3 + 552) = v5;
    }
  }
  return this;
}

char *IPC::Encoder::operator<<<unsigned long long &>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  size_t v6;
  unint64_t v7;
  char *v8;
  _QWORD *v9;
  char *result;
  unint64_t v11;
  size_t v12;
  void *v13;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 544);
  v5 = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v5 + 8;
  v7 = *(_QWORD *)(a1 + 552);
  if (v7 >= v5 + 8)
  {
    v8 = *(char **)(a1 + 528);
LABEL_3:
    bzero(&v8[v4], v5 - v4);
    *(_QWORD *)(a1 + 544) = v6;
    v9 = (_QWORD *)(*(_QWORD *)(a1 + 528) + v5);
    *(_QWORD *)(a1 + 536) = v9 + 1;
    *v9 = v3;
    return (char *)a1;
  }
  v11 = (2 * v7 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v12 = v11;
    v11 *= 2;
  }
  while (v12 < v6);
  result = (char *)mmap(0, v12, 3, 4098, -1, 0);
  if (result != (char *)-1)
  {
    v8 = result;
    memcpy(result, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v13 = *(void **)(a1 + 528);
    if (v13 != (void *)(a1 + 16))
      munmap(v13, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v8;
    *(_QWORD *)(a1 + 552) = v12;
    v4 = *(_QWORD *)(a1 + 544);
    goto LABEL_3;
  }
  __break(0xC471u);
  return result;
}

uint64_t std::optional<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>::operator=[abi:sn180100]<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,void>(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 16))
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_DWORD *)(a1 + 8) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,(std::__variant_detail::_Trait)1>>(a1, a2);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t std::optional<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>::operator=[abi:sn180100]<decltype(nullptr),void>(uint64_t a1)
{
  uint64_t v2;
  char v4;

  if (!*(_BYTE *)(a1 + 16))
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 1;
    return a1;
  }
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
  {
LABEL_7:
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    return a1;
  }
  if ((_DWORD)v2)
  {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS7_NS_14default_deleteIS7_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v2])(&v4, a1);
    goto LABEL_7;
  }
  *(_QWORD *)a1 = 0;
  return a1;
}

WTF *IPC::MessageReceiverMap::removeMessageReceiver(IPC::MessageReceiverMap *this, IPC::MessageReceiver *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  WTF *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  int v29;
  int v30;
  _BOOL4 v32;
  unsigned __int8 *v34;
  WTF *v35;
  WTF *result;
  __int128 v37;
  WTF *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;

  v40 = 0;
  v41 = 0;
  v4 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
  {
    v7 = 0;
    v5 = 0;
    goto LABEL_10;
  }
  v5 = *(unsigned int *)(v4 - 4);
  v6 = (unsigned __int8 *)(v4 + 16 * v5);
  if (!*(_DWORD *)(v4 - 12))
  {
    v7 = (unsigned __int8 *)(v4 + 16 * v5);
LABEL_10:
    v6 = (unsigned __int8 *)(v4 + 16 * v5);
    goto LABEL_11;
  }
  v7 = *(unsigned __int8 **)this;
  if ((_DWORD)v5)
  {
    v8 = 16 * v5;
    v7 = *(unsigned __int8 **)this;
    while (*v7 >= 0xFEu)
    {
      v7 += 16;
      v8 -= 16;
      if (!v8)
      {
        v7 = v6;
        break;
      }
    }
  }
LABEL_11:
  if (v4)
    v9 = (unsigned __int8 *)(v4 + 16 * *(unsigned int *)(v4 - 4));
  else
    v9 = 0;
  if (v9 != v7)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = *((_QWORD *)v7 + 1);
      if (v12 && *(IPC::MessageReceiver **)(v12 + 8) == a2)
      {
        if (v11 == (_DWORD)v41)
        {
          v13 = (unsigned __int8 *)WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v40, (WTF *)(v11 + 1), (unint64_t)v7);
          v11 = HIDWORD(v41);
          v10 = (unsigned __int8 *)v40;
          v14 = (unsigned __int8 *)v40 + HIDWORD(v41);
        }
        else
        {
          v14 = &v10[v11];
          v13 = v7;
        }
        ++v11;
        *v14 = *v13;
        HIDWORD(v41) = v11;
      }
      v15 = v7 + 16;
      v7 = v6;
      if (v15 != v6)
      {
        v7 = v15;
        while (*v7 >= 0xFEu)
        {
          v7 += 16;
          if (v7 == v6)
          {
            v7 = v6;
            break;
          }
        }
      }
    }
    while (v7 != v9);
    if (v11)
    {
      v16 = v11;
      do
      {
        v17 = *v10++;
        IPC::MessageReceiverMap::removeMessageReceiver((uint64_t *)this, v17);
        --v16;
      }
      while (v16);
    }
  }
  v38 = 0;
  v39 = 0;
  v18 = (unsigned __int8 *)*((_QWORD *)this + 1);
  v19 = WTF::HashTable<std::pair<IPC::ReceiverName,unsigned long long>,WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>>::begin(v18);
  v21 = v19;
  v22 = v20;
  if (v18)
    v23 = &v18[24 * *((unsigned int *)v18 - 1)];
  else
    v23 = 0;
  if (v23 != v19)
  {
    v24 = 0;
    v25 = 0;
    do
    {
      v26 = *((_QWORD *)v21 + 2);
      if (v26 && *(IPC::MessageReceiver **)(v26 + 8) == a2)
      {
        v27 = *((_QWORD *)v21 + 1);
        *(_QWORD *)&v37 = *v21;
        *((_QWORD *)&v37 + 1) = v27;
        if (v25 == (_DWORD)v39)
        {
          v28 = (_OWORD *)WTF::Vector<WebCore::LinearTimingFunction::Point,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v38, v25 + 1, (unint64_t)&v37);
          v29 = HIDWORD(v39);
          v24 = v38;
          *((_OWORD *)v38 + HIDWORD(v39)) = *v28;
        }
        else
        {
          *((_OWORD *)v24 + v25) = v37;
          v29 = HIDWORD(v39);
        }
        v25 = v29 + 1;
        HIDWORD(v39) = v25;
      }
      while (1)
      {
        v21 += 24;
        if (v21 == v22)
          break;
        v30 = *v21;
        v32 = v30 == 255 && *((_QWORD *)v21 + 1) == 0;
        if (v30 != 254 && !v32)
          goto LABEL_54;
      }
      v21 = v22;
LABEL_54:
      ;
    }
    while (v21 != v23);
    if (v25)
    {
      v34 = (unsigned __int8 *)v24 + 16 * v25;
      v35 = v24;
      do
      {
        IPC::MessageReceiverMap::removeMessageReceiver((uint64_t)this, *(unsigned __int8 *)v35, *((_QWORD *)v35 + 1));
        v35 = (WTF *)((char *)v35 + 16);
      }
      while (v35 != (WTF *)v34);
    }
    if (v24)
    {
      v38 = 0;
      LODWORD(v39) = 0;
      WTF::fastFree(v24, v20);
    }
  }
  result = v40;
  if (v40)
    return (WTF *)WTF::fastFree(v40, v20);
  return result;
}

void IPC::MessageSender::performSendWithoutUsingIPCConnection()
{
  __break(0xC471u);
}

void IPC::MessageSender::performSendWithAsyncReplyWithoutUsingIPCConnection()
{
  __break(0xC471u);
}

uint64_t IPC::SharedBufferReference::span(IPC::SharedBufferReference *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  if (*(_QWORD *)this)
  {
    if (*((_QWORD *)this + 1) || (v2 = *((_QWORD *)this + 2)) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1978915D4);
    }
LABEL_6:
    if (*(_QWORD *)(v2 + 8) >= *(_QWORD *)this)
      return *(_QWORD *)(v2 + 16);
    goto LABEL_12;
  }
  v2 = *((_QWORD *)this + 2);
  if (v2)
    goto LABEL_6;
  v4 = *((_QWORD *)this + 1);
  if (!v4 || !*(_BYTE *)(v4 + 40))
    return 0;
  result = WebCore::SharedBuffer::data(*((WebCore::SharedBuffer **)this + 1));
  if (*(_QWORD *)(v4 + 48) < *(_QWORD *)this)
  {
LABEL_12:
    __break(1u);
    return 0;
  }
  return result;
}

unsigned int *IPC::SharedBufferReference::sharedCopy@<X0>(unsigned int *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int *v2;
  void *v3;
  unsigned int *v4;

  if (*(_QWORD *)this)
  {
    IPC::SharedBufferReference::unsafeBuffer(this, &v4);
    v2 = v4;
    WebCore::SharedMemory::copyBuffer();
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v2, v3);
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 8);
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS7_NS_14default_deleteIS7_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 8) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E351EFC0[v4])(&v5, result, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS9_NS_14default_deleteIS9_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSA_SE_EEEOST_EEEDcSL_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS7_NS_14default_deleteIS7_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 8) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS9_NS_14default_deleteIS9_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSA_SE_EEEOST_EEEDcSL_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 1)
  {
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS7_NS_14default_deleteIS7_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS7_NS_14default_deleteIS7_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v4])(&v7, result);
  *(_DWORD *)(v3 + 8) = -1;
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E351EFD0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS9_NS_14default_deleteIS9_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSA_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS9_NS_14default_deleteIS9_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSA_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<IPC::MessageReceiveQueueMap::get(IPC::Decoder const&)::$_0,IPC::MessageReceiveQueueMap::get(IPC::Decoder const&)::$_1> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,IPC::MessageReceiveQueue *,std::unique_ptr<std::__variant_detail::_Trait>> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<IPC::MessageReceiveQueueMap::get(IPC::Decoder const&)::$_0,IPC::MessageReceiveQueueMap::get(IPC::Decoder const&)::$_1> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,IPC::MessageReceiveQueue *,std::unique_ptr<std::__variant_detail::_Trait>> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t std::__optional_destruct_base<IPC::SharedBufferReference::SerializableBuffer,false>::__optional_destruct_base[abi:sn180100]<IPC::SharedBufferReference::SerializableBuffer>(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    WTF::MachSendRight::MachSendRight();
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = 1;
  }
  *(_BYTE *)(a1 + 32) = 1;
  return a1;
}

_BYTE *WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<unsigned char>,WTF::HashTraits<unsigned char>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned char>>::reinsert(uint64_t a1, _BYTE *a2)
{
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unsigned int v15;
  uint64_t v16;
  char v18;

  v4 = *a2;
  if (a1)
    v5 = *(_DWORD *)(a1 - 8);
  else
    v5 = 0;
  v6 = 0;
  v7 = 9 * ((~(v4 << 15) + v4) ^ ((~(v4 << 15) + v4) >> 10));
  v8 = (v7 ^ (v7 >> 6)) + ~((v7 ^ (v7 >> 6)) << 11);
  v9 = v8 ^ HIWORD(v8);
  do
  {
    v10 = v9 & v5;
    v11 = (_BYTE *)(a1 + 24 * (v9 & v5));
    v9 = ++v6 + (v9 & v5);
  }
  while (*v11);
  v12 = a1 + 24 * v10;
  v15 = *(_DWORD *)(v12 + 16);
  v14 = (_DWORD *)(v12 + 16);
  v13 = v15;
  if (v15 != -1)
  {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS7_NS_14default_deleteIS7_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v13])(&v18, a1 + 24 * v10 + 8);
    LOBYTE(v4) = *a2;
  }
  *v11 = v4;
  v16 = a1 + 24 * v10;
  *(_BYTE *)(v16 + 8) = 0;
  *v14 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,(std::__variant_detail::_Trait)1>>(v16 + 8, (uint64_t)(a2 + 8));
  return v11;
}

uint64_t WTF::HashMap<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<unsigned char>,WTF::HashTraits<unsigned char>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::remove(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  if (!*a1)
  {
    if (a2)
    {
      v2 = 0;
      goto LABEL_3;
    }
    return 0;
  }
  v2 = *a1 + 24 * *(unsigned int *)(*a1 - 4);
  if (v2 == a2)
    return 0;
LABEL_3:
  if (v2 != a2)
    WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<unsigned char>,WTF::HashTraits<unsigned char>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned char>>::remove(a1, a2);
  return 1;
}

uint64_t *WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<unsigned char>,WTF::HashTraits<unsigned char>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned char>>::remove(uint64_t *result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  char v11;

  v3 = result;
  *(_BYTE *)a2 = -1;
  v4 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v4 != -1)
    result = (uint64_t *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS7_NS_14default_deleteIS7_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v4])(&v11, a2 + 8);
  v5 = -1;
  *(_DWORD *)(a2 + 16) = -1;
  ++*(_DWORD *)(*v3 - 16);
  v6 = *v3;
  if (*v3)
    v5 = *(_DWORD *)(v6 - 12) - 1;
  *(_DWORD *)(v6 - 12) = v5;
  v7 = *v3;
  if (*v3)
  {
    v8 = 6 * *(_DWORD *)(v7 - 12);
    v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9)
      return (uint64_t *)WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<unsigned char>,WTF::HashTraits<unsigned char>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned char>>::rehash(v3, v9 >> 1, 0);
  }
  return result;
}

unsigned __int8 *WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<unsigned char>,WTF::HashTraits<unsigned char>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned char>>::find<WTF::IdentityHashTranslator<WTF::HashMap<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<unsigned char>,WTF::HashTraits<unsigned char>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned char>>,unsigned char>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  unsigned __int8 *result;

  v2 = *a1;
  if (!*a1)
    return 0;
  result = WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<unsigned char>,WTF::HashTraits<unsigned char>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned char>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<unsigned char>,WTF::HashTraits<unsigned char>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned char>>,unsigned char>(*a1, *a2);
  if (!result)
    return (unsigned __int8 *)(v2 + 24 * *(unsigned int *)(v2 - 4));
  return result;
}

unsigned __int8 *WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<unsigned char>,WTF::HashTraits<unsigned char>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned char>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<unsigned char>,WTF::HashTraits<unsigned char>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned char>>,unsigned char>(uint64_t a1, unsigned __int8 a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned __int8 *v6;
  int v7;
  int v8;

  if (!a1)
    return 0;
  v2 = *(_DWORD *)(a1 - 8);
  v3 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v4 = (v3 ^ (v3 >> 6)) + ~((v3 ^ (v3 >> 6)) << 11);
  v5 = v2 & (v4 ^ HIWORD(v4));
  v6 = (unsigned __int8 *)(a1 + 24 * v5);
  v7 = *v6;
  if (v7 != a2)
  {
    v8 = 1;
    while (v7)
    {
      v5 = (v5 + v8) & v2;
      v6 = (unsigned __int8 *)(a1 + 24 * v5);
      v7 = *v6;
      ++v8;
      if (v7 == a2)
        return v6;
    }
    return 0;
  }
  return v6;
}

uint64_t WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::remove(uint64_t result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  char v11;

  v3 = (uint64_t *)result;
  *(_BYTE *)a2 = -1;
  v4 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS7_NS_14default_deleteIS7_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v4])(&v11, a2 + 16);
  v5 = -1;
  *(_DWORD *)(a2 + 24) = -1;
  ++*(_DWORD *)(*v3 - 16);
  v6 = *v3;
  if (*v3)
    v5 = *(_DWORD *)(v6 - 12) - 1;
  *(_DWORD *)(v6 - 12) = v5;
  v7 = *v3;
  if (*v3)
  {
    v8 = 6 * *(_DWORD *)(v7 - 12);
    v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9)
      return WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::rehash(v3, v9 >> 1, 0);
  }
  return result;
}

unsigned __int8 *WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>>,std::pair<unsigned char,unsigned long long>>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *result;
  int v8;
  uint64_t v9;
  int v11;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = *a2;
  v5 = *((_QWORD *)a2 + 1);
  v6 = WTF::PairHash<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::hash(*a2, v5) & v3;
  result = (unsigned __int8 *)(v2 + 32 * v6);
  v8 = *result;
  v9 = *((_QWORD *)result + 1);
  if (v8 != v4 || v9 != v5)
  {
    v11 = 1;
    while ((_BYTE)v8 || v9)
    {
      v6 = ((_DWORD)v6 + v11) & v3;
      result = (unsigned __int8 *)(v2 + 32 * v6);
      v8 = *result;
      v9 = *((_QWORD *)result + 1);
      ++v11;
      if (v8 == v4 && v9 == v5)
        return result;
    }
    return (unsigned __int8 *)(v2 + 32 * *(unsigned int *)(v2 - 4));
  }
  return result;
}

uint64_t WTF::HashTable<IPC::ReceiverName,WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::IntHash<IPC::ReceiverName>,WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<IPC::ReceiverName>>::reinsert(uint64_t a1, _BYTE *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;

  if (a1)
    v3 = *(_DWORD *)(a1 - 8);
  else
    v3 = 0;
  v4 = 0;
  v5 = 9
     * ((~(*a2 << 15) + *a2) ^ ((~(*a2 << 15)
                                                                 + *a2) >> 10));
  v6 = ((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) ^ (((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) >> 16);
  do
  {
    v7 = v6 & v3;
    v6 = ++v4 + v7;
  }
  while (*(unsigned __int8 *)(a1 + 16 * v7) != 255);
  v8 = a1 + 16 * v7;
  v9 = *(unsigned int **)(v8 + 8);
  *(_QWORD *)(v8 + 8) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  *(_BYTE *)v8 = *a2;
  v12 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)(v8 + 8) = v12;
  return v8;
}

uint64_t IPC::StreamClientConnection::DedicatedConnectionClient::didReceiveSyncMessage(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
}

uint64_t IPC::StreamClientConnection::DedicatedConnectionClient::didClose(IPC::StreamClientConnection::DedicatedConnectionClient *this, IPC::Connection *a2)
{
  return (*(uint64_t (**)(_QWORD, IPC::Connection *))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2), a2);
}

uint64_t std::optional<IPC::StreamClientConnection::StreamConnectionPair>::optional[abi:sn180100]<IPC::StreamClientConnection::StreamConnectionPair,0>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  WTF::MachSendRight::MachSendRight();
  WTF::MachSendRight::MachSendRight();
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_BYTE *)(a1 + 32) = 1;
  return a1;
}

uint64_t IPC::StreamClientConnection::StreamClientConnection(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)a1 = 1;
  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  v5 = *a3;
  v6 = a3[1];
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v5;
  a3[1] = 0;
  v7 = a3[2];
  *(_QWORD *)(a1 + 64) = v6;
  *(_QWORD *)(a1 + 72) = v7;
  std::__optional_copy_assign_base<IPC::StreamClientConnectionBuffer::Semaphores,false>::__optional_copy_assign_base[abi:sn180100](a1 + 80, (uint64_t)(a3 + 3));
  *(_QWORD *)(a1 + 104) = 20;
  return a1;
}

void IPC::StreamClientConnection::~StreamClientConnection(IPC::StreamClientConnection *this)
{
  void *v2;
  unsigned int *v3;

  std::__optional_destruct_base<std::tuple<IPC::Semaphore,IPC::Semaphore>,false>::~__optional_destruct_base[abi:sn180100]((_BYTE *)this + 80);
  v3 = (unsigned int *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
  if (*((_BYTE *)this + 40))
  {
    *((_QWORD *)this + 2) = &off_1E34B0558;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v2);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)this + 1);
}

unsigned __int8 ***IPC::StreamClientConnection::invalidate(uint64_t **this)
{
  IPC::Connection *v2;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v2, this + 1);
  IPC::Connection::invalidate((uint64_t)v2);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v2);
}

uint64_t IPC::StreamClientConnection::wakeUpServerBatched(uint64_t result, char a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;

  v2 = result;
  v3 = *(_DWORD *)(result + 108);
  if ((a2 & 1) != 0 || v3)
  {
    v4 = v3 + 1;
    *(_DWORD *)(result + 108) = v4;
    if (v4 >= *(_DWORD *)(result + 104))
    {
      if (*(_BYTE *)(result + 96))
        result = MEMORY[0x19AEBA1A0](*(unsigned int *)(result + 84));
      *(_DWORD *)(v2 + 108) = 0;
    }
  }
  return result;
}

unsigned __int8 ***IPC::StreamClientConnection::addWorkQueueMessageReceiver(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v10;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v10, (uint64_t **)(a1 + 8));
  IPC::Connection::addWorkQueueMessageReceiver((uint64_t)v10, a2, a3, a4, a5);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v10);
}

unsigned __int8 ***IPC::StreamClientConnection::removeWorkQueueMessageReceiver(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  uint64_t *v6;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v6, (uint64_t **)(a1 + 8));
  IPC::Connection::removeWorkQueueMessageReceiver((uint64_t)v6, a2, a3);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v6);
}

uint64_t IPC::StreamConnectionWorkQueue::StreamConnectionWorkQueue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = WTF::FunctionDispatcher::FunctionDispatcher((WTF::FunctionDispatcher *)a1);
  *(_DWORD *)(v6 + 8) = 1;
  *(_QWORD *)v6 = off_1E351F078;
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = a3;
  *(_DWORD *)(v6 + 32) = 0;
  *(_DWORD *)(v6 + 36) = 0;
  semaphore_create(*MEMORY[0x1E0C83DA0], (semaphore_t *)(v6 + 36), 0, 0);
  *(_WORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  return a1;
}

void IPC::StreamConnectionWorkQueue::~StreamConnectionWorkQueue(IPC::StreamConnectionWorkQueue *this, void *a2)
{
  void *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF::Thread *v8;

  WTF::Vector<WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 96, a2);
  v4 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WTF::Deque<WTF::Function<void ()(void)>,0ul>::~Deque((unint64_t *)this + 7, v3);
  v5 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v8 = (WTF::Thread *)v5;
      WTF::ThreadSafeRefCounted<WTF::Thread,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v8);
    }
  }
  IPC::Semaphore::destroy((IPC::StreamConnectionWorkQueue *)((char *)this + 32));
  WTF::MachSendRight::~MachSendRight((IPC::StreamConnectionWorkQueue *)((char *)this + 32));
  WTF::FunctionDispatcher::~FunctionDispatcher(this);
}

{
  WTF *v2;
  void *v3;

  IPC::StreamConnectionWorkQueue::~StreamConnectionWorkQueue(this, a2);
  WTF::fastFree(v2, v3);
}

unint64_t *WTF::Deque<WTF::Function<void ()(void)>,0ul>::~Deque(unint64_t *result, void *a2)
{
  unint64_t v2;
  unint64_t v3;
  WTF *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;

  v2 = *result;
  v3 = result[1];
  v4 = (WTF *)result[2];
  if (*result > v3)
  {
    v15 = (uint64_t *)result[2];
    v16 = (uint64_t *)result;
    if (v3)
    {
      v13 = 8 * v3;
      do
      {
        v14 = *v15;
        *v15 = 0;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        ++v15;
        v13 -= 8;
      }
      while (v13);
      v15 = (uint64_t *)v16[2];
      v2 = *v16;
    }
    v9 = *((unsigned int *)v16 + 6);
    if (v2 != v9)
    {
      v10 = &v15[v2];
      v11 = 8 * v9 - 8 * v2;
      do
      {
        v12 = *v10;
        *v10 = 0;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        ++v10;
        v11 -= 8;
      }
      while (v11);
    }
LABEL_9:
    result = (unint64_t *)v16;
    v4 = (WTF *)v16[2];
    if (v4)
      goto LABEL_10;
    return result;
  }
  if (*result != v3)
  {
    v16 = (uint64_t *)result;
    v5 = (uint64_t *)((char *)v4 + 8 * v2);
    v6 = 8 * v3 - 8 * v2;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      ++v5;
      v6 -= 8;
    }
    while (v6);
    goto LABEL_9;
  }
  if (v4)
  {
LABEL_10:
    result[2] = 0;
    *((_DWORD *)result + 6) = 0;
    v8 = result;
    WTF::fastFree(v4, a2);
    return v8;
  }
  return result;
}

void IPC::StreamConnectionWorkQueue::removeStreamConnection(unsigned int **this, IPC::StreamServerConnection *a2)
{
  unsigned __int8 *v4;
  int v6;

  v4 = (unsigned __int8 *)this + 41;
  if (__ldaxr((unsigned __int8 *)this + 41))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
LABEL_4:
    WTF::Vector<WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeFirstMatching<IPC::StreamConnectionWorkQueue::removeStreamConnection(IPC::StreamServerConnection&)::$_0>(this + 12, (unsigned int *)a2);
    v6 = __ldxr(v4);
    if (v6 == 1)
    {
      if (!__stlxr(0, v4))
LABEL_11:
        JUMPOUT(0x19AEBA1A0);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    goto LABEL_11;
  }
  MEMORY[0x19AEABB3C]((char *)this + 41);
  goto LABEL_4;
}

unsigned int **WTF::Vector<WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeFirstMatching<IPC::StreamConnectionWorkQueue::removeStreamConnection(IPC::StreamServerConnection&)::$_0>(unsigned int **result, unsigned int *a2)
{
  uint64_t v2;
  unsigned int **v3;
  char *v4;
  unsigned int **v5;

  v2 = *((unsigned int *)result + 3);
  if ((_DWORD)v2)
  {
    v3 = result;
    result = (unsigned int **)*result;
    v4 = (char *)(result + 1);
    while (*result != a2)
    {
      ++result;
      v4 += 8;
      if (!--v2)
        return result;
    }
    v5 = WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(result);
    result = (unsigned int **)memmove(v5, v5 + 1, (char *)&(*v3)[2 * *((unsigned int *)v3 + 3)] - v4);
    --*((_DWORD *)v3 + 3);
  }
  return result;
}

WTF::Thread *IPC::StreamConnectionWorkQueue::stopAndWaitForCompletion(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  WTF::Thread *result;
  int v9;
  int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  WTF::Thread *v15;
  WTF::Thread *v16;

  v15 = 0;
  v4 = (unsigned __int8 *)(a1 + 41);
  if (__ldaxr((unsigned __int8 *)(a1 + 41)))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEABB3C](a1 + 41);
    goto LABEL_4;
  }
  if (__stxr(1u, v4))
    goto LABEL_3;
LABEL_4:
  v6 = *a2;
  *a2 = 0;
  v7 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  result = (WTF::Thread *)WTF::RefPtr<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>::operator=((unsigned int **)&v15, (unsigned int **)(a1 + 48));
  atomic_store(1u, (unsigned __int8 *)(a1 + 40));
  v9 = __ldxr(v4);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, v4))
LABEL_10:
    result = (WTF::Thread *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (!v15)
    return result;
  MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 36));
  WTF::Thread::waitForCompletion(v15);
  if (__ldaxr(v4))
  {
    __clrex();
LABEL_14:
    MEMORY[0x19AEABB3C](v4);
    goto LABEL_15;
  }
  if (__stxr(1u, v4))
    goto LABEL_14;
LABEL_15:
  result = (WTF::Thread *)WTF::RefPtr<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>::operator=((unsigned int **)(a1 + 48));
  v11 = __ldxr(v4);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_21;
  }
  if (__stlxr(0, v4))
LABEL_21:
    result = (WTF::Thread *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  v12 = (unsigned int *)v15;
  v15 = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      v16 = (WTF::Thread *)v12;
      return WTF::ThreadSafeRefCounted<WTF::Thread,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v16);
    }
  }
  return result;
}

unsigned int **WTF::RefPtr<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>::operator=(unsigned int **a1, unsigned int **a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF::Thread *v9;

  v3 = *a2;
  if (*a2)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  v5 = *a1;
  *a1 = v3;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v9 = (WTF::Thread *)v5;
      WTF::ThreadSafeRefCounted<WTF::Thread,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v9);
    }
  }
  return a1;
}

BOOL IPC::StreamConnectionWorkQueue::isCurrent(IPC::StreamConnectionWorkQueue *this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _BOOL8 v7;
  int v8;

  v2 = (unsigned __int8 *)this + 41;
  if (__ldaxr((unsigned __int8 *)this + 41))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 41);
LABEL_5:
  v4 = *((_QWORD *)this + 6);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 48);
    v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v6)
      v6 = WTF::Thread::initializeCurrentTLS(0);
    v7 = v5 == *(_DWORD *)(v6 + 48);
  }
  else
  {
    v7 = 0;
  }
  v8 = __ldxr(v2);
  if (v8 == 1)
  {
    if (!__stlxr(0, v2))
      return v7;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v7;
}

uint64_t IPC::StreamServerConnection::StreamServerConnection(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E351F0A8;
  *(_QWORD *)(a1 + 16) = &unk_1E351F0F0;
  *(_QWORD *)(a1 + 24) = 0;
  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = 0;
  v5 = *a3;
  v6 = a3[1];
  a3[1] = 0;
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = a3[2];
  *(_BYTE *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  semaphore_create(*MEMORY[0x1E0C83DA0], (semaphore_t *)(a1 + 140), 0, 0);
  return a1;
}

void IPC::StreamServerConnection::~StreamServerConnection(IPC::StreamServerConnection *this)
{
  WTF::MachSendRight *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  unsigned int *v6;
  uint64_t v7;
  void *v8;

  v2 = (IPC::StreamServerConnection *)((char *)this + 136);
  IPC::Semaphore::destroy((IPC::StreamServerConnection *)((char *)this + 136));
  WTF::MachSendRight::~MachSendRight(v2);
  v4 = *((_QWORD *)this + 15);
  if (v4)
    WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::deallocateTable(v4, v3);
  WTF::Deque<WTF::UniqueRef<IPC::Decoder>,0ul>::~Deque((unint64_t *)this + 10, v3);
  v6 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v6)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v6);
  v7 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v7)
    WTF::ThreadSafeRefCounted<IPC::StreamConnectionWorkQueue,(WTF::DestructionThread)0>::deref((unsigned int *)(v7 + 8), v5);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)this + 4);
  *((_QWORD *)this + 2) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v8);
}

{
  WTF *v1;
  void *v2;

  IPC::StreamServerConnection::~StreamServerConnection(this);
  WTF::fastFree(v1, v2);
}

void `non-virtual thunk to'IPC::StreamServerConnection::~StreamServerConnection(IPC::StreamServerConnection *this)
{
  IPC::StreamServerConnection::~StreamServerConnection((IPC::StreamServerConnection *)((char *)this - 16));
}

{
  WTF *v1;
  void *v2;

  IPC::StreamServerConnection::~StreamServerConnection((IPC::StreamServerConnection *)((char *)this - 16));
  WTF::fastFree(v1, v2);
}

unsigned __int8 ***IPC::StreamServerConnection::invalidate(uint64_t **this)
{
  unsigned int **v2;
  unsigned int *v3;
  unsigned int v4;
  IPC::Connection *v6;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v6, this + 4);
  v2 = (unsigned int **)this[5];
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 1);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    IPC::StreamConnectionWorkQueue::removeStreamConnection(v2, (IPC::StreamServerConnection *)this);
  }
  IPC::Connection::invalidate((uint64_t)v6);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v6);
}

uint64_t WTF::HashMap<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::HashTableTraits>::add<IPC::StreamMessageReceiver&>@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  BOOL v19;
  unsigned __int8 *v20;
  int v21;
  BOOL v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned __int8 *v37;

  v4 = (uint64_t *)result;
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result
    || (v37 = a2,
        v36 = a3,
        result = WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::expand((uint64_t *)result, 0), a2 = v37, a3 = v36, (v6 = *v4) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = *a2;
  v9 = *((_QWORD *)a2 + 1);
  v10 = 9 * ((~(v8 << 15) + v8) ^ ((~(v8 << 15) + v8) >> 10));
  v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
  v12 = (v9 + ~(v9 << 32)) ^ ((unint64_t)(v9 + ~(v9 << 32)) >> 22);
  v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v7 & ((0xD7862706ELL
             * (unint64_t)(277951225 * (v11 ^ HIWORD(v11))
                                + 95187966 * ((v14 >> 31) ^ v14))) >> 4);
  v16 = (unsigned __int8 *)(v6 + 24 * v15);
  v17 = *v16;
  v18 = *((_QWORD *)v16 + 1);
  if (*v16)
    v19 = 0;
  else
    v19 = v18 == 0;
  if (!v19)
  {
    v20 = 0;
    v21 = 1;
    do
    {
      if (v17 == v8 && v18 == v9)
      {
        v32 = 0;
        v31 = v6 + 24 * *(unsigned int *)(v6 - 4);
        goto LABEL_29;
      }
      if (v17 == 255)
        v20 = v16;
      v15 = (v15 + v21) & v7;
      v16 = (unsigned __int8 *)(v6 + 24 * v15);
      v17 = *v16;
      v18 = *((_QWORD *)v16 + 1);
      ++v21;
      if (*v16)
        v22 = 0;
      else
        v22 = v18 == 0;
    }
    while (!v22);
    if (v20)
    {
      *(_QWORD *)v20 = 0;
      *((_QWORD *)v20 + 1) = 0;
      *((_QWORD *)v20 + 2) = 0;
      --*(_DWORD *)(*v4 - 16);
      LOBYTE(v8) = *a2;
      v9 = *((_QWORD *)a2 + 1);
      v16 = v20;
    }
  }
  *v16 = v8;
  *((_QWORD *)v16 + 1) = v9;
  v23 = (unsigned int *)(a3 + 8);
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 + 1, v23));
  result = *((_QWORD *)v16 + 2);
  *((_QWORD *)v16 + 2) = a3;
  if (result)
  {
    v33 = (unsigned int *)(result + 8);
    do
    {
      v34 = __ldaxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
    {
      atomic_store(1u, (unsigned int *)(result + 8));
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  v25 = *v4;
  if (*v4)
    v26 = *(_DWORD *)(v25 - 12) + 1;
  else
    v26 = 1;
  *(_DWORD *)(v25 - 12) = v26;
  v27 = *v4;
  if (*v4)
    v28 = *(_DWORD *)(v27 - 12);
  else
    v28 = 0;
  v29 = (*(_DWORD *)(v27 - 16) + v28);
  v30 = *(unsigned int *)(v27 - 4);
  if (v30 > 0x400)
  {
    if (v30 > 2 * v29)
      goto LABEL_28;
LABEL_35:
    result = WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::expand(v4, v16);
    v16 = (unsigned __int8 *)result;
    v27 = *v4;
    if (*v4)
      LODWORD(v30) = *(_DWORD *)(v27 - 4);
    else
      LODWORD(v30) = 0;
    goto LABEL_28;
  }
  if (3 * v30 <= 4 * v29)
    goto LABEL_35;
LABEL_28:
  v31 = v27 + 24 * v30;
  v32 = 1;
LABEL_29:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v31;
  *(_BYTE *)(a4 + 16) = v32;
  return result;
}

unsigned int *IPC::StreamServerConnection::enqueueMessage(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 *v5;
  int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  void *v11;

  v5 = (unsigned __int8 *)(a1 + 72);
  if (__ldaxr((unsigned __int8 *)(a1 + 72)))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEABB3C](a1 + 72);
    goto LABEL_4;
  }
  if (__stxr(1u, v5))
    goto LABEL_3;
LABEL_4:
  WTF::Deque<WTF::UniqueRef<IPC::Decoder>,0ul>::append((uint64_t *)(a1 + 80), a3);
  v7 = __ldxr(v5);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_8;
  }
  if (__stlxr(0, v5))
LABEL_8:
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
  {
    v9 = (unsigned int *)(v8 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  MEMORY[0x19AEBA1A0](*(unsigned int *)(v8 + 36));
  return WTF::ThreadSafeRefCounted<IPC::StreamConnectionWorkQueue,(WTF::DestructionThread)0>::deref((unsigned int *)(v8 + 8), v11);
}

uint64_t IPC::StreamServerConnection::didReceiveSyncMessage()
{
  return 0;
}

uint64_t `non-virtual thunk to'IPC::StreamServerConnection::didReceiveSyncMessage()
{
  return 0;
}

IPC::Semaphore *IPC::Semaphore::operator=(IPC::Semaphore *this, IPC::Semaphore *a2)
{
  int v4;

  if (this != a2)
  {
    IPC::Semaphore::destroy(this);
    WTF::MachSendRight::operator=();
    v4 = *((_DWORD *)a2 + 1);
    *((_DWORD *)a2 + 1) = 0;
    *((_DWORD *)this + 1) = v4;
  }
  return this;
}

BOOL IPC::Semaphore::waitFor(semaphore_t *a1, double a2)
{
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  unint64_t v9;
  mach_timespec_t v10;

  WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
  v5 = a2 - v4;
  if (v5 < 0.0)
    v5 = 0.0;
  v6 = 0xFFFFFFFFLL;
  v7 = v5;
  if (v5 <= 0.0)
    v7 = 0;
  if (v5 < 4294967300.0)
    v6 = v7;
  v8 = v5 * 1000.0 * 1000.0 * 1000.0;
  if (v8 >= 1.84467441e19)
  {
    LODWORD(v9) = -1;
  }
  else if (v8 <= 0.0)
  {
    LODWORD(v9) = 0;
  }
  else
  {
    v9 = (unint64_t)v8;
  }
  v10 = (mach_timespec_t)(v6 | ((unint64_t)(v9 - 1000000000 * v6) << 32));
  return semaphore_timedwait(a1[1], v10) == 0;
}

void IPC::StreamClientConnection::DedicatedConnectionClient::~DedicatedConnectionClient(unsigned int **this, void *a2)
{
  *this = (unsigned int *)&off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, a2);
}

{
  *this = (unsigned int *)&off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, a2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t IPC::StreamClientConnectionBuffer::StreamClientConnectionBuffer(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  v3 = *(_QWORD *)(*a2 + 8) - 256;
  *a2 = 0;
  *(_QWORD *)result = v3;
  *(_QWORD *)(result + 8) = v2;
  *(_QWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 24) = 0;
  *(_BYTE *)(result + 40) = 0;
  if ((unint64_t)(*(_QWORD *)(v2 + 8) - 257) >= 0x7FFFFFFF)
  {
    result = 93;
    __break(0xC471u);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v2 + 16) + 128) = 0x80000000;
    **(_QWORD **)(*(_QWORD *)(result + 8) + 16) = 0;
  }
  return result;
}

uint64_t std::__optional_destruct_base<IPC::StreamClientConnectionBuffer,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  unsigned int *v2;

  if (*(_BYTE *)(a1 + 48))
  {
    std::__optional_destruct_base<std::tuple<IPC::Semaphore,IPC::Semaphore>,false>::~__optional_destruct_base[abi:sn180100]((_BYTE *)(a1 + 24));
    v2 = *(unsigned int **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v2)
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t std::__optional_copy_assign_base<IPC::StreamClientConnectionBuffer::Semaphores,false>::__optional_copy_assign_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    WTF::MachSendRight::MachSendRight();
    v4 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a2 + 4) = 0;
    *(_DWORD *)(a1 + 4) = v4;
    WTF::MachSendRight::MachSendRight();
    v5 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    *(_DWORD *)(a1 + 12) = v5;
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

void IPC::StreamClientConnectionBuffer::Semaphores::~Semaphores(IPC::StreamClientConnectionBuffer::Semaphores *this)
{
  WTF::MachSendRight *v2;

  v2 = (IPC::StreamClientConnectionBuffer::Semaphores *)((char *)this + 8);
  IPC::Semaphore::destroy((IPC::StreamClientConnectionBuffer::Semaphores *)((char *)this + 8));
  WTF::MachSendRight::~MachSendRight(v2);
  IPC::Semaphore::destroy(this);
  WTF::MachSendRight::~MachSendRight(this);
}

IPC::Semaphore *std::optional<IPC::StreamClientConnectionBuffer::Semaphores>::operator=[abi:sn180100]<IPC::StreamClientConnectionBuffer::Semaphores,void>(IPC::Semaphore *this, _DWORD *a2)
{
  int v4;
  int v5;

  if (*((_BYTE *)this + 16))
  {
    IPC::Semaphore::operator=(this, (IPC::Semaphore *)a2);
    IPC::Semaphore::operator=((IPC::Semaphore *)((char *)this + 8), (IPC::Semaphore *)(a2 + 2));
  }
  else
  {
    WTF::MachSendRight::MachSendRight();
    v4 = a2[1];
    a2[1] = 0;
    *((_DWORD *)this + 1) = v4;
    WTF::MachSendRight::MachSendRight();
    v5 = a2[3];
    a2[3] = 0;
    *((_DWORD *)this + 3) = v5;
    *((_BYTE *)this + 16) = 1;
  }
  return this;
}

uint64_t WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      if (*(unsigned __int8 *)(a1 + 24 * i) != 255)
      {
        v5 = a1 + 24 * i;
        v6 = *(unsigned int **)(v5 + 16);
        *(_QWORD *)(v5 + 16) = 0;
        if (v6)
        {
          v7 = v6 + 2;
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
          {
            atomic_store(1u, v6 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
          }
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::Vector<WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int **v4;
  uint64_t v5;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = *(unsigned int ***)a1;
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    do
    {
      v4 = WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(v4)
         + 1;
      v5 -= 8;
    }
    while (v5);
    v4 = *(unsigned int ***)a1;
  }
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

void **WTF::Vector<WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,IPC::StreamServerConnection&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void **result;
  uint64_t v9;
  _QWORD *v10;
  unsigned int *v11;
  unsigned int v12;

  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  result = WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, v7);
  v9 = *(unsigned int *)(a1 + 12);
  v10 = *(_QWORD **)a1;
  v11 = (unsigned int *)(a2 + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  v10[v9] = a2;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

void WTF::Detail::CallableWrapper<IPC::StreamConnectionWorkQueue::startProcessingThread(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 *v4;
  uint64_t v6;
  int v7;

  v1 = *(_QWORD *)(a1 + 8);
  IPC::StreamConnectionWorkQueue::processStreams((IPC::StreamConnectionWorkQueue *)v1);
  v2 = atomic_load((unsigned __int8 *)(v1 + 40));
  if ((v2 & 1) == 0)
  {
    do
    {
      MEMORY[0x19AEBA1B8](*(unsigned int *)(v1 + 36));
      IPC::StreamConnectionWorkQueue::processStreams((IPC::StreamConnectionWorkQueue *)v1);
      v3 = atomic_load((unsigned __int8 *)(v1 + 40));
    }
    while ((v3 & 1) == 0);
  }
  IPC::StreamConnectionWorkQueue::processStreams((IPC::StreamConnectionWorkQueue *)v1);
  v4 = (unsigned __int8 *)(v1 + 41);
  if (__ldaxr((unsigned __int8 *)(v1 + 41)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEABB3C](v1 + 41);
LABEL_7:
  v6 = *(_QWORD *)(v1 + 88);
  *(_QWORD *)(v1 + 88) = 0;
  v7 = __ldxr(v4);
  if (v7 == 1)
  {
    if (!__stlxr(0, v4))
    {
      if (!v6)
        return;
      goto LABEL_10;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 41));
  if (v6)
  {
LABEL_10:
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

uint64_t WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::expand(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  unsigned int *v26;
  _QWORD *v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t result;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v10 = 0;
    v11 = 0;
    v12 = v6;
    do
    {
      v13 = (unsigned __int8 *)(v5 + 24 * v10);
      v14 = *v13;
      if (v14 != 255)
      {
        v9 = (void *)*((_QWORD *)v13 + 1);
        if (*v13)
          v15 = 0;
        else
          v15 = v9 == 0;
        if (v15)
        {
          v16 = v5 + 24 * v10;
          v17 = *(unsigned int **)(v16 + 16);
          *(_QWORD *)(v16 + 16) = 0;
          if (v17)
          {
            v32 = v17 + 2;
            do
            {
              v33 = __ldaxr(v32);
              v34 = v33 - 1;
            }
            while (__stlxr(v34, v32));
            if (!v34)
            {
              atomic_store(1u, v17 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
            }
          }
        }
        else
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = WTF::PairHash<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::hash(v14, (uint64_t)v9);
          v21 = 0;
          do
          {
            v22 = v20 & v19;
            v23 = v18 + 24 * (v20 & v19);
            v20 = ++v21 + (v20 & v19);
            if (*(_BYTE *)v23)
              v24 = 0;
            else
              v24 = *(_QWORD *)(v23 + 8) == 0;
          }
          while (!v24);
          v25 = v18 + 24 * v22;
          v28 = *(unsigned int **)(v25 + 16);
          v27 = (_QWORD *)(v25 + 16);
          v26 = v28;
          *v27 = 0;
          if (v28)
          {
            v35 = v26 + 2;
            do
            {
              v36 = __ldaxr(v35);
              v37 = v36 - 1;
            }
            while (__stlxr(v37, v35));
            if (!v37)
            {
              atomic_store(1u, v26 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
            }
          }
          *(_OWORD *)v23 = *(_OWORD *)v13;
          v29 = v5 + 24 * v10;
          v30 = *(_QWORD *)(v29 + 16);
          *(_QWORD *)(v29 + 16) = 0;
          *v27 = v30;
          v31 = *(unsigned int **)(v29 + 16);
          *(_QWORD *)(v29 + 16) = 0;
          if (v31)
          {
            v38 = v31 + 2;
            do
            {
              v39 = __ldaxr(v38);
              v40 = v39 - 1;
            }
            while (__stlxr(v40, v38));
            if (!v40)
            {
              atomic_store(1u, v31 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v31 + 8))(v31);
            }
          }
          if (v13 == a3)
            v11 = v23;
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v11;
}

unsigned int *WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::remove(uint64_t *a1, uint64_t a2)
{
  unsigned int *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_BYTE *)a2 = -1;
  result = *(unsigned int **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  if (result)
  {
    v10 = result + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (unsigned int *)WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

unsigned __int8 *WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>>,std::pair<unsigned char,unsigned long long>>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned __int8 *result;
  int v8;
  uint64_t v9;
  int v11;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = *a2;
  v5 = *((_QWORD *)a2 + 1);
  v6 = WTF::PairHash<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::hash(*a2, v5) & v3;
  result = (unsigned __int8 *)(v2 + 24 * v6);
  v8 = *result;
  v9 = *((_QWORD *)result + 1);
  if (v8 != v4 || v9 != v5)
  {
    v11 = 1;
    while ((_BYTE)v8 || v9)
    {
      v6 = (v6 + v11) & v3;
      result = (unsigned __int8 *)(v2 + 24 * v6);
      v8 = *result;
      v9 = *((_QWORD *)result + 1);
      ++v11;
      if (v8 == v4 && v9 == v5)
        return result;
    }
    return (unsigned __int8 *)(v2 + 24 * *(unsigned int *)(v2 - 4));
  }
  return result;
}

WTF::StringImpl *WebKit::EnvironmentUtilities::stripEntriesEndingWith@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  int v4;
  WTF::StringImpl *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v14;
  const char *v15;
  uint64_t v16;
  WTF::StringView *v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  char v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  unsigned int v27;
  char v28;
  char v29;

  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 1;
  v21 = a1;
  v22 = a2;
  v23 = 58;
  v24 = 1;
  v17 = (WTF::StringView *)&v21;
  v18 = 0;
  v20 = 0;
  WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v17);
  v4 = v22;
  LODWORD(v5) = v18;
  if (v18 != (_DWORD)v22 || !v20)
  {
    v6 = 0;
    do
    {
      v15 = WTF::StringView::substring((const char *)v17, v5, v19);
      v16 = v7;
      if ((WTF::StringView::endsWith() & 1) == 0)
      {
        if ((v6 & 1) != 0)
        {
          v29 = 58;
          if (v26 && ((v8 = v27, v27 < *((_DWORD *)v26 + 1)) ? (v9 = v25 == 0) : (v9 = 0), v9))
          {
            v10 = *((_DWORD *)v26 + 4);
            v11 = *((_QWORD *)v26 + 1);
            ++v27;
            if ((v10 & 4) != 0)
              *(_BYTE *)(v11 + v8) = 58;
            else
              *(_WORD *)(v11 + 2 * v8) = 58;
          }
          else
          {
            WTF::StringBuilder::append();
          }
        }
        WTF::StringBuilder::append((uint64_t)&v25, (uint64_t)v15, v16);
        v6 = 1;
      }
      WTF::StringView::SplitResult::Iterator::operator++();
      v5 = (WTF::StringImpl *)v18;
    }
    while (v18 != v4 || v20 == 0);
    result = v25;
    if (v25)
      goto LABEL_24;
  }
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v25);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v25);
  result = v25;
  if (v25)
LABEL_24:
    *(_DWORD *)result += 2;
  *a3 = result;
  v14 = v26;
  v26 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::destroy(v14, v5);
      result = v25;
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  v25 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void IPC::encodeObjectDirectly<DDScannerResult>(uint64_t a1, objc_object *a2)
{
  __int128 v4;
  __int128 v5;
  WebKit::CoreIPCNumber *v6;
  uint64_t v7;
  __int128 v8;
  WebKit::CoreIPCNumber *v9;
  WebKit::CoreIPCNSValue *v10;
  char v11;
  void *v12;
  uint64_t v13;
  size_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  _BYTE *v25;
  int v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  size_t v32;
  char *v33;
  void *v34;
  unint64_t v35;
  size_t v36;
  char *v37;
  void *v38;
  __int128 v39;
  __int128 v40;
  WebKit::CoreIPCNumber *v41;
  _QWORD *v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  WebKit::CoreIPCNumber *v46;
  WebKit::CoreIPCNSValue *v47[2];
  WebKit::CoreIPCNumber *v48[2];
  WebKit::CoreIPCNumber *v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned __int8 v52;
  NSDictionary *v53[2];
  WebKit::CoreIPCNumber *v54;
  char v55;
  char v56;
  char v57[8];
  _BYTE v58[24];
  int v59;
  char v60[8];
  _BYTE v61[24];
  int v62;
  char v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    LOBYTE(v47[0]) = 0;
    v55 = 0;
    *IPC::Encoder::grow((IPC::Encoder *)a1, 1uLL, 1) = 0;
    goto LABEL_32;
  }
  WebKit::CoreIPCDDScannerResult::CoreIPCDDScannerResult((uint64_t)&v39, a2);
  v4 = v39;
  v5 = v40;
  v39 = 0u;
  v40 = 0u;
  *(_OWORD *)v47 = v4;
  *(_OWORD *)v48 = v5;
  v6 = v41;
  v41 = 0;
  v49 = v6;
  LOBYTE(v50) = 0;
  v52 = 0;
  if (v44)
  {
    v50 = v42;
    v7 = v43;
    v42 = 0;
    v43 = 0;
    v51 = v7;
    v52 = 1;
  }
  v8 = v45;
  v45 = 0uLL;
  *(_OWORD *)v53 = v8;
  v9 = v46;
  v46 = 0;
  v54 = v9;
  v55 = 1;
  *IPC::Encoder::grow((IPC::Encoder *)a1, 1uLL, 1) = 1;
  if (!v55)
    goto LABEL_49;
  v10 = v47[0];
  if (v47[0])
  {
    WebKit::CoreIPCNSValue::valueFromNSValue(v47[0], (uint64_t)v57);
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v61, (uint64_t)v58);
    v11 = 1;
  }
  else
  {
    v11 = 0;
    v60[0] = 0;
  }
  v63 = v11;
  v13 = *(_QWORD *)(a1 + 544);
  v14 = v13 + 1;
  v15 = *(_QWORD *)(a1 + 552);
  if (v15 < v13 + 1)
  {
    v31 = (2 * v15 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v32 = v31;
      v31 *= 2;
    }
    while (v32 < v14);
    v33 = (char *)mmap(0, v32, 3, 4098, -1, 0);
    if (v33 == (char *)-1)
      goto LABEL_50;
    v16 = v33;
    memcpy(v33, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v34 = *(void **)(a1 + 528);
    if (v34 != (void *)(a1 + 16))
      munmap(v34, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v16;
    *(_QWORD *)(a1 + 552) = v32;
    v17 = *(_QWORD *)(a1 + 544);
  }
  else
  {
    v16 = *(char **)(a1 + 528);
    v17 = *(_QWORD *)(a1 + 544);
  }
  bzero(&v16[v17], v13 - v17);
  *(_QWORD *)(a1 + 544) = v14;
  v18 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v13);
  *(_QWORD *)(a1 + 536) = v18 + 1;
  if (v10)
  {
    *v18 = 1;
    if (v63)
    {
      v19 = v62;
      v20 = *(_QWORD *)(a1 + 544);
      v21 = v20 + 1;
      v22 = *(_QWORD *)(a1 + 552);
      if (v22 >= v20 + 1)
      {
        v23 = *(char **)(a1 + 528);
        v24 = *(_QWORD *)(a1 + 544);
LABEL_15:
        bzero(&v23[v24], v20 - v24);
        *(_QWORD *)(a1 + 544) = v21;
        v25 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v20);
        *(_QWORD *)(a1 + 536) = v25 + 1;
        *v25 = v19;
        IPC::ArgumentCoder<std::variant<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding>,void>::encode<IPC::Encoder,std::variant<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding> const&>(a1, (uint64_t)v60, v19);
        goto LABEL_17;
      }
      v35 = (2 * v22 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v36 = v35;
        v35 *= 2;
      }
      while (v36 < v21);
      v37 = (char *)mmap(0, v36, 3, 4098, -1, 0);
      if (v37 != (char *)-1)
      {
        v23 = v37;
        memcpy(v37, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
        v38 = *(void **)(a1 + 528);
        if (v38 != (void *)(a1 + 16))
          munmap(v38, *(_QWORD *)(a1 + 552));
        *(_QWORD *)(a1 + 528) = v23;
        *(_QWORD *)(a1 + 552) = v36;
        v24 = *(_QWORD *)(a1 + 544);
        goto LABEL_15;
      }
LABEL_50:
      __break(0xC471u);
      JUMPOUT(0x197893BA4);
    }
LABEL_49:
    std::__throw_bad_optional_access[abi:sn180100]();
    __break(1u);
    goto LABEL_50;
  }
  *v18 = 0;
LABEL_17:
  if (v63)
  {
    if (v62 != -1)
      ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJ8_NSRangeEEEN6WebKit19CoreIPCSecureCodingEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v62])(&v56, v61);
    v62 = -1;
  }
  if (v10 && v59 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJ8_NSRangeEEEN6WebKit19CoreIPCSecureCodingEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v59])(&v56, v58);
  IPC::encodeObjectDirectly<NSString>(a1, (uint64_t)v47[1]);
  IPC::encodeObjectDirectly<NSString>(a1, (uint64_t)v48[0]);
  IPC::encodeObjectDirectly<NSNumber>((IPC::Encoder *)a1, v48[1]);
  IPC::encodeObjectDirectly<NSNumber>((IPC::Encoder *)a1, v49);
  v26 = v52;
  v27 = IPC::Encoder::grow((IPC::Encoder *)a1, 1uLL, 1);
  if (v26)
  {
    *v27 = 1;
    if (v52)
    {
      v28 = HIDWORD(v51);
      *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)a1, 8uLL, 8) = v28;
      if (HIDWORD(v51))
      {
        v29 = v50;
        v30 = 8 * HIDWORD(v51);
        do
        {
          IPC::encodeObjectDirectly<DDScannerResult>(a1, *v29++);
          v30 -= 8;
        }
        while (v30);
      }
      goto LABEL_31;
    }
    goto LABEL_49;
  }
  *v27 = 0;
LABEL_31:
  IPC::encodeObjectDirectly<NSString>(a1, (uint64_t)v53[0]);
  IPC::encodeObjectDirectly<NSDictionary>((IPC::Encoder *)a1, v53[1]);
  IPC::encodeObjectDirectly<NSNumber>((IPC::Encoder *)a1, v54);
LABEL_32:
  if (v55)
    WebKit::CoreIPCDDScannerResult::~CoreIPCDDScannerResult((WebKit::CoreIPCDDScannerResult *)v47, v12);
  if (a2)
    WebKit::CoreIPCDDScannerResult::~CoreIPCDDScannerResult((WebKit::CoreIPCDDScannerResult *)&v39, v12);
}

void sub_197893BB0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  uint64_t v34;

  v34 = *(unsigned int *)(v32 - 144);
  if ((_DWORD)v34 != -1)
    ((void (*)(uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJ8_NSRangeEEEN6WebKit19CoreIPCSecureCodingEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v34])(v32 - 177, v32 - 168);
  if (a32)
    WebKit::CoreIPCDDScannerResult::~CoreIPCDDScannerResult((WebKit::CoreIPCDDScannerResult *)&a21, a2);
  WebKit::CoreIPCDDScannerResult::~CoreIPCDDScannerResult((WebKit::CoreIPCDDScannerResult *)&a9, a2);
  _Unwind_Resume(a1);
}

void IPC::decodeObjectDirectlyRequiringAllowedClasses<DDScannerResult>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  int v4;
  int v5;
  uint64_t v6;
  _BYTE v7[88];
  unsigned __int8 v8;
  unsigned __int8 v9;

  IPC::Decoder::decode<std::optional<WebKit::CoreIPCDDScannerResult>>(a1, (uint64_t)v7);
  if (v9)
  {
    if (v8)
    {
      WebKit::CoreIPCDDScannerResult::toID((WebKit::CoreIPCDDScannerResult *)v7, &v6);
      v4 = v9;
      v5 = v8;
      *(_QWORD *)a2 = v6;
      *(_BYTE *)(a2 + 8) = 1;
      if (v4)
      {
        if (v5)
          WebKit::CoreIPCDDScannerResult::~CoreIPCDDScannerResult((WebKit::CoreIPCDDScannerResult *)v7, v3);
      }
    }
    else
    {
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 1;
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
  }
}

void sub_197893CDC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if ((_BYTE)a23)
  {
    if (a21)
      WebKit::CoreIPCDDScannerResult::~CoreIPCDDScannerResult((WebKit::CoreIPCDDScannerResult *)&a10, a2);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<std::optional<WebKit::CoreIPCDDScannerResult>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCDDScannerResult>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 96))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_197893D54(_Unwind_Exception *exception_object, void *a2)
{
  WebKit::CoreIPCDDScannerResult *v2;

  if (*((_BYTE *)v2 + 96))
  {
    if (*((_BYTE *)v2 + 88))
      WebKit::CoreIPCDDScannerResult::~CoreIPCDDScannerResult(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

void IPC::encodeObjectDirectly<PKPaymentMethod>(IPC::Encoder *a1, objc_object *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[4];
  char v14;

  if (a2)
  {
    WebKit::CoreIPCPKPaymentMethod::CoreIPCPKPaymentMethod((WebKit::CoreIPCPKPaymentMethod *)&v9, a2);
    v4 = v9;
    v5 = v10;
    v9 = 0u;
    v10 = 0u;
    v13[0] = v4;
    v13[1] = v5;
    v6 = v11;
    v7 = v12;
    v11 = 0u;
    v12 = 0u;
    v8 = 1;
    v13[2] = v6;
    v13[3] = v7;
  }
  else
  {
    v8 = 0;
    LOBYTE(v13[0]) = 0;
  }
  v14 = v8;
  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCPKPaymentMethod>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCPKPaymentMethod>>(a1, (uint64_t)v13);
  if (v14)
    WebKit::CoreIPCPKPaymentMethod::~CoreIPCPKPaymentMethod((WebKit::CoreIPCPKPaymentMethod *)v13);
  if (a2)
    WebKit::CoreIPCPKPaymentMethod::~CoreIPCPKPaymentMethod((WebKit::CoreIPCPKPaymentMethod *)&v9);
}

void sub_197893E08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  if (a25)
    WebKit::CoreIPCPKPaymentMethod::~CoreIPCPKPaymentMethod((WebKit::CoreIPCPKPaymentMethod *)&a17);
  if (v25)
    WebKit::CoreIPCPKPaymentMethod::~CoreIPCPKPaymentMethod((WebKit::CoreIPCPKPaymentMethod *)&a9);
  _Unwind_Resume(exception_object);
}

void IPC::decodeObjectDirectlyRequiringAllowedClasses<PKPaymentMethod>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  int v4;
  uint64_t v5;
  _BYTE v6[64];
  unsigned __int8 v7;
  unsigned __int8 v8;

  IPC::Decoder::decode<std::optional<WebKit::CoreIPCPKPaymentMethod>>(a1, (uint64_t)v6);
  if (v8)
  {
    if (v7)
    {
      WebKit::CoreIPCPKPaymentMethod::toID((WebKit::CoreIPCPKPaymentMethod *)v6, &v5);
      v3 = v8;
      v4 = v7;
      *(_QWORD *)a2 = v5;
      *(_BYTE *)(a2 + 8) = 1;
      if (v3)
      {
        if (v4)
          WebKit::CoreIPCPKPaymentMethod::~CoreIPCPKPaymentMethod((WebKit::CoreIPCPKPaymentMethod *)v6);
      }
    }
    else
    {
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 1;
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
  }
}

void sub_197893EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, int a20,__int16 a21,char a22,char a23)
{
  if ((_BYTE)a21)
  {
    if (a19)
      WebKit::CoreIPCPKPaymentMethod::~CoreIPCPKPaymentMethod((WebKit::CoreIPCPKPaymentMethod *)&a11);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<std::optional<WebKit::CoreIPCPKPaymentMethod>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCPKPaymentMethod>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 72))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_197893F34(_Unwind_Exception *exception_object)
{
  WebKit::CoreIPCPKPaymentMethod *v1;

  if (*((_BYTE *)v1 + 72))
  {
    if (*((_BYTE *)v1 + 64))
      WebKit::CoreIPCPKPaymentMethod::~CoreIPCPKPaymentMethod(v1);
  }
  _Unwind_Resume(exception_object);
}

void IPC::encodeObjectDirectly<PKPaymentMerchantSession>(IPC::Encoder *this, objc_object *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char *v13;
  void *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  WebKit::CoreIPCNumber *v29[2];
  WebKit::CoreIPCNumber *v30[2];
  CFTypeRef cf[2];
  __int128 v32;
  CFTypeRef v33[2];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unsigned __int8 v37;
  char v38;

  if (a2)
  {
    WebKit::CoreIPCPKPaymentMerchantSession::CoreIPCPKPaymentMerchantSession((WebKit::CoreIPCPKPaymentMerchantSession *)&v18, a2);
    v4 = v18;
    v5 = v19;
    v18 = 0u;
    v19 = 0u;
    v28 = v4;
    *(_OWORD *)v29 = v5;
    v6 = v20;
    v7 = v21;
    v20 = 0u;
    v21 = 0u;
    *(_OWORD *)v30 = v6;
    *(_OWORD *)cf = v7;
    v8 = v22;
    v9 = v23;
    v22 = 0u;
    v23 = 0u;
    v32 = v8;
    *(_OWORD *)v33 = v9;
    v10 = v24;
    v24 = 0;
    v34 = v10;
    LOBYTE(v35) = 0;
    v37 = 0;
    if (v27)
    {
      v35 = v25;
      v11 = v26;
      v25 = 0;
      v26 = 0;
      v36 = v11;
      v37 = 1;
    }
    v38 = 1;
    *IPC::Encoder::grow(this, 1uLL, 1) = 1;
    if (!v38)
      goto LABEL_18;
    IPC::encodeObjectDirectly<NSString>((uint64_t)this, v28);
    IPC::encodeObjectDirectly<NSString>((uint64_t)this, *((uint64_t *)&v28 + 1));
    IPC::encodeObjectDirectly<NSString>((uint64_t)this, (uint64_t)v29[0]);
    IPC::encodeObjectDirectly<NSNumber>(this, v29[1]);
    IPC::encodeObjectDirectly<NSNumber>(this, v30[0]);
    IPC::encodeObjectDirectly<NSString>((uint64_t)this, (uint64_t)v30[1]);
    IPC::encodeObjectDirectly<NSString>((uint64_t)this, (uint64_t)cf[0]);
    IPC::encodeObjectDirectly<NSData>(this, cf[1]);
    IPC::encodeObjectDirectly<NSString>((uint64_t)this, v32);
    IPC::encodeObjectDirectly<NSString>((uint64_t)this, *((uint64_t *)&v32 + 1));
    IPC::encodeObjectDirectly<NSString>((uint64_t)this, (uint64_t)v33[0]);
    IPC::encodeObjectDirectly<NSData>(this, v33[1]);
    IPC::encodeObjectDirectly<NSString>((uint64_t)this, v34);
    v12 = v37;
    v13 = IPC::Encoder::grow(this, 1uLL, 1);
    if (v12)
    {
      *v13 = 1;
      if (v37)
      {
        v15 = HIDWORD(v36);
        *(_QWORD *)IPC::Encoder::grow(this, 8uLL, 8) = v15;
        if (HIDWORD(v36))
        {
          v16 = v35;
          v17 = 8 * HIDWORD(v36);
          do
          {
            IPC::encodeObjectDirectly<NSString>((uint64_t)this, *v16++);
            v17 -= 8;
          }
          while (v17);
        }
        goto LABEL_13;
      }
LABEL_18:
      std::__throw_bad_optional_access[abi:sn180100]();
      __break(1u);
      return;
    }
  }
  else
  {
    LOBYTE(v28) = 0;
    v38 = 0;
    v13 = IPC::Encoder::grow(this, 1uLL, 1);
  }
  *v13 = 0;
LABEL_13:
  if (v38)
    WebKit::CoreIPCPKPaymentMerchantSession::~CoreIPCPKPaymentMerchantSession((WebKit::CoreIPCPKPaymentMerchantSession *)&v28, v14);
  if (a2)
    WebKit::CoreIPCPKPaymentMerchantSession::~CoreIPCPKPaymentMerchantSession((WebKit::CoreIPCPKPaymentMerchantSession *)&v18, v14);
}

void sub_19789416C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  if (a41)
    WebKit::CoreIPCPKPaymentMerchantSession::~CoreIPCPKPaymentMerchantSession((WebKit::CoreIPCPKPaymentMerchantSession *)&a25, a2);
  WebKit::CoreIPCPKPaymentMerchantSession::~CoreIPCPKPaymentMerchantSession((WebKit::CoreIPCPKPaymentMerchantSession *)&a9, a2);
  _Unwind_Resume(a1);
}

void IPC::decodeObjectDirectlyRequiringAllowedClasses<PKPaymentMerchantSession>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  int v4;
  int v5;
  uint64_t v6;
  _BYTE v7[128];
  unsigned __int8 v8;
  unsigned __int8 v9;

  IPC::Decoder::decode<std::optional<WebKit::CoreIPCPKPaymentMerchantSession>>(a1, v7);
  if (v9)
  {
    if (v8)
    {
      WebKit::CoreIPCPKPaymentMerchantSession::toID((WebKit::CoreIPCPKPaymentMerchantSession *)v7, &v6);
      v4 = v9;
      v5 = v8;
      *(_QWORD *)a2 = v6;
      *(_BYTE *)(a2 + 8) = 1;
      if (v4)
      {
        if (v5)
          WebKit::CoreIPCPKPaymentMerchantSession::~CoreIPCPKPaymentMerchantSession((WebKit::CoreIPCPKPaymentMerchantSession *)v7, v3);
      }
    }
    else
    {
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 1;
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
  }
}

void sub_197894220(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,int a28,__int16 a29,char a30,char a31)
{
  if ((_BYTE)a29)
  {
    if (a27)
      WebKit::CoreIPCPKPaymentMerchantSession::~CoreIPCPKPaymentMerchantSession((WebKit::CoreIPCPKPaymentMerchantSession *)&a11, a2);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<std::optional<WebKit::CoreIPCPKPaymentMerchantSession>>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCPKPaymentMerchantSession>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[136])
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_197894298(_Unwind_Exception *exception_object, void *a2)
{
  WebKit::CoreIPCPKPaymentMerchantSession *v2;

  if (*((_BYTE *)v2 + 136))
  {
    if (*((_BYTE *)v2 + 128))
      WebKit::CoreIPCPKPaymentMerchantSession::~CoreIPCPKPaymentMerchantSession(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

void IPC::encodeObjectDirectly<PKContact>(IPC::Encoder *this, PKContact *a2)
{
  int v4;
  char *v5;
  WTF::StringImpl *v6;
  int v7;
  char *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *i;
  uint64_t v14;
  int v15;
  char *v16;
  int v17;
  char *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WebKit::CoreIPCPersonNameComponents *v23[6];
  char v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  _BYTE v27[80];
  WTF::StringImpl *v28;
  _BYTE v29[8];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39[9];
  unsigned __int8 v40;
  uint64_t v41;
  unsigned __int8 v42;

  if (!a2)
  {
    v29[0] = 0;
    v42 = 0;
    v5 = IPC::Encoder::grow(this, 1uLL, 1);
    goto LABEL_13;
  }
  WebKit::CoreIPCPKContact::CoreIPCPKContact((WebKit::CoreIPCPKContact *)v23, a2);
  std::__optional_destruct_base<WebKit::CoreIPCPKContact,false>::__optional_destruct_base[abi:sn180100]<WebKit::CoreIPCPKContact>((uint64_t)v29, (uint64_t)v23);
  v4 = v42;
  v5 = IPC::Encoder::grow(this, 1uLL, 1);
  if (!v4)
  {
LABEL_13:
    *v5 = 0;
    goto LABEL_20;
  }
  *v5 = 1;
  if (!v42)
    goto LABEL_34;
  v7 = v34;
  v8 = IPC::Encoder::grow(this, 1uLL, 1);
  if (v7)
  {
    *v8 = 1;
    if (!v34)
      goto LABEL_34;
    v9 = &v33;
    v10 = &v32;
    v11 = &v31;
    v12 = &v30;
    for (i = (uint64_t *)v29; ; v12 = i + 1)
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)this, i);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)this, v12);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)this, v11);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)this, v10);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)this, v9);
      v14 = i[5];
      v8 = IPC::Encoder::grow(this, 1uLL, 1);
      if (!v14)
        break;
      *v8 = 1;
      i = (uint64_t *)i[5];
      v9 = i + 4;
      v10 = i + 3;
      v11 = i + 2;
    }
  }
  *v8 = 0;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)this, &v35);
  v15 = v38;
  v16 = IPC::Encoder::grow(this, 1uLL, 1);
  if (v15)
  {
    *v16 = 1;
    if (!v38)
      goto LABEL_34;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)this, &v36);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)this, &v37);
  }
  else
  {
    *v16 = 0;
  }
  v17 = v40;
  v18 = IPC::Encoder::grow(this, 1uLL, 1);
  if (!v17)
  {
    *v18 = 0;
    goto LABEL_19;
  }
  *v18 = 1;
  if (!v40)
  {
LABEL_34:
    std::__throw_bad_optional_access[abi:sn180100]();
    __break(1u);
    return;
  }
  IPC::ArgumentCoder<WebKit::CoreIPCCNPostalAddress,void>::encode((uint64_t)this, v39);
LABEL_19:
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)this, &v41);
LABEL_20:
  std::__optional_destruct_base<WebKit::CoreIPCPKContact,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v29, v6);
  if (a2)
  {
    v20 = v28;
    v28 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v19);
      else
        *(_DWORD *)v20 -= 2;
    }
    if (v27[72])
      WebKit::CoreIPCCNPostalAddress::~CoreIPCCNPostalAddress((WebKit::CoreIPCCNPostalAddress *)v27, v19);
    std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v26, v19);
    v22 = v25;
    v25 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v21);
      else
        *(_DWORD *)v22 -= 2;
    }
    if (v24)
      WebKit::CoreIPCPersonNameComponents::~CoreIPCPersonNameComponents(v23);
  }
}

void sub_197894560(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebKit::CoreIPCPersonNameComponents *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, WTF::StringImpl *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,WTF::StringImpl *a31,char a32)
{
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;

  std::__optional_destruct_base<WebKit::CoreIPCPKContact,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a32, a2);
  v34 = a31;
  a31 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v33);
    else
      *(_DWORD *)v34 -= 2;
  }
  if (a30)
    WebKit::CoreIPCCNPostalAddress::~CoreIPCCNPostalAddress((WebKit::CoreIPCCNPostalAddress *)&a21, v33);
  std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a18, v33);
  v36 = a17;
  a17 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v35);
    else
      *(_DWORD *)v36 -= 2;
  }
  if (a16)
    WebKit::CoreIPCPersonNameComponents::~CoreIPCPersonNameComponents(&a10);
  _Unwind_Resume(a1);
}

uint64_t IPC::decodeObjectDirectlyRequiringAllowedClasses<PKContact>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  _BYTE v7[184];
  unsigned __int8 v8;

  result = IPC::Decoder::decode<std::optional<WebKit::CoreIPCPKContact>>(a1, v7);
  if (!v8)
  {
    *a2 = 0;
    a2[8] = 0;
    return result;
  }
  if (!v7[176])
  {
    *(_QWORD *)a2 = 0;
    a2[8] = 1;
    return std::__optional_destruct_base<WebKit::CoreIPCPKContact,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v4);
  }
  result = WebKit::CoreIPCPKContact::toID((WebKit::CoreIPCPKContact *)v7, &v6);
  v5 = v8;
  *(_QWORD *)a2 = v6;
  a2[8] = 1;
  if (v5)
    return std::__optional_destruct_base<WebKit::CoreIPCPKContact,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v4);
  return result;
}

void sub_197894674(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  if (a34)
    std::__optional_destruct_base<WebKit::CoreIPCPKContact,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a11, a2);
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::optional<WebKit::CoreIPCPKContact>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WebKit::CoreIPCPKContact>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[184])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_1978946E4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 184))
    std::__optional_destruct_base<WebKit::CoreIPCPKContact,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(exception_object);
}

void IPC::encodeObjectDirectly<PKPayment>(IPC::Encoder *a1, objc_object *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[4];
  char v14;

  if (a2)
  {
    WebKit::CoreIPCPKPayment::CoreIPCPKPayment((WebKit::CoreIPCPKPayment *)&v9, a2);
    v4 = v9;
    v5 = v10;
    v9 = 0u;
    v10 = 0u;
    v13[0] = v4;
    v13[1] = v5;
    v6 = v11;
    v7 = v12;
    v11 = 0u;
    v12 = 0u;
    v8 = 1;
    v13[2] = v6;
    v13[3] = v7;
  }
  else
  {
    v8 = 0;
    LOBYTE(v13[0]) = 0;
  }
  v14 = v8;
  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCPKPayment>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCPKPayment>>(a1, (uint64_t)v13);
  if (v14)
    WebKit::CoreIPCPKPayment::~CoreIPCPKPayment((WebKit::CoreIPCPKPayment *)v13);
  if (a2)
    WebKit::CoreIPCPKPayment::~CoreIPCPKPayment((WebKit::CoreIPCPKPayment *)&v9);
}

void sub_197894790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  if (a25)
    WebKit::CoreIPCPKPayment::~CoreIPCPKPayment((WebKit::CoreIPCPKPayment *)&a17);
  if (v25)
    WebKit::CoreIPCPKPayment::~CoreIPCPKPayment((WebKit::CoreIPCPKPayment *)&a9);
  _Unwind_Resume(exception_object);
}

void IPC::decodeObjectDirectlyRequiringAllowedClasses<PKPayment>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  int v4;
  uint64_t v5;
  _BYTE v6[64];
  unsigned __int8 v7;
  unsigned __int8 v8;

  IPC::Decoder::decode<std::optional<WebKit::CoreIPCPKPayment>>(a1, (uint64_t)v6);
  if (v8)
  {
    if (v7)
    {
      WebKit::CoreIPCPKPayment::toID((WebKit::CoreIPCPKPayment *)v6, &v5);
      v3 = v8;
      v4 = v7;
      *(_QWORD *)a2 = v5;
      *(_BYTE *)(a2 + 8) = 1;
      if (v3)
      {
        if (v4)
          WebKit::CoreIPCPKPayment::~CoreIPCPKPayment((WebKit::CoreIPCPKPayment *)v6);
      }
    }
    else
    {
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 1;
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
  }
}

void sub_197894844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, int a20,__int16 a21,char a22,char a23)
{
  if ((_BYTE)a21)
  {
    if (a19)
      WebKit::CoreIPCPKPayment::~CoreIPCPKPayment((WebKit::CoreIPCPKPayment *)&a11);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<std::optional<WebKit::CoreIPCPKPayment>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCPKPayment>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 72))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_1978948BC(_Unwind_Exception *exception_object)
{
  WebKit::CoreIPCPKPayment *v1;

  if (*((_BYTE *)v1 + 72))
  {
    if (*((_BYTE *)v1 + 64))
      WebKit::CoreIPCPKPayment::~CoreIPCPKPayment(v1);
  }
  _Unwind_Resume(exception_object);
}

void IPC::encodeObjectDirectly<PKPaymentToken>(IPC::Encoder *this, objc_object *a2)
{
  CFTypeRef v3;
  CFTypeRef v4;
  CFTypeRef v5;
  CFTypeRef v6;
  objc_object *v7;
  CFTypeRef v8;
  CFTypeRef v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  CFTypeRef v14;
  CFTypeRef v15;
  CFTypeRef v16;
  CFTypeRef v17;
  CFTypeRef v18;
  CFTypeRef v19;
  CFTypeRef v20;
  CFTypeRef v21[2];
  CFTypeRef v22[2];
  CFTypeRef v23[2];
  CFTypeRef cf;
  WTF::StringImpl *v25;
  __int128 v26;
  __int128 v27;
  WTF::StringImpl *v28;
  __int128 v29;
  __int128 v30;
  char v31;

  if (a2)
  {
    WebKit::CoreIPCPKPaymentToken::CoreIPCPKPaymentToken((WebKit::CoreIPCPKPaymentToken *)v21, a2);
    v3 = v21[0];
    v4 = v21[1];
    v5 = v22[0];
    v6 = v22[1];
    *(_OWORD *)v21 = 0u;
    *(_OWORD *)v22 = 0u;
    v7 = (objc_object *)v23[0];
    v8 = v23[1];
    *(_OWORD *)v23 = 0u;
    v9 = cf;
    cf = 0;
    *IPC::Encoder::grow(this, 1uLL, 1) = 1;
    IPC::encodeObjectDirectly<NSString>((uint64_t)this, (uint64_t)v3);
    IPC::encodeObjectDirectly<NSString>((uint64_t)this, (uint64_t)v4);
    IPC::encodeObjectDirectly<NSString>((uint64_t)this, (uint64_t)v5);
    IPC::encodeObjectDirectly<NSData>(this, v6);
    IPC::encodeObjectDirectly<PKPaymentMethod>(this, v7);
    if (v8)
    {
      MEMORY[0x19AEABB18](&v25, v8);
      v10 = v25;
      v25 = 0;
      v28 = v10;
      v29 = v26;
      v30 = v27;
      LODWORD(v26) = v26 & 0xFFFFFFFE;
      v31 = 1;
      *IPC::Encoder::grow(this, 1uLL, 1) = 1;
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)this, (uint64_t *)&v28);
      if (v31)
      {
        v12 = v28;
        v28 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v11);
          else
            *(_DWORD *)v12 -= 2;
        }
      }
      v13 = v25;
      v25 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v11);
        else
          *(_DWORD *)v13 -= 2;
      }
    }
    else
    {
      *IPC::Encoder::grow(this, 1uLL, 1) = 0;
    }
    IPC::encodeObjectDirectly<NSString>((uint64_t)this, (uint64_t)v9);
    if (v9)
      CFRelease(v9);
    if (v8)
      CFRelease(v8);
    if (v7)
      CFRelease(v7);
    if (v6)
      CFRelease(v6);
    if (v5)
      CFRelease(v5);
    if (v4)
      CFRelease(v4);
    if (v3)
      CFRelease(v3);
    v14 = cf;
    cf = 0;
    if (v14)
      CFRelease(v14);
    v15 = v23[1];
    v23[1] = 0;
    if (v15)
      CFRelease(v15);
    v16 = v23[0];
    v23[0] = 0;
    if (v16)
      CFRelease(v16);
    v17 = v22[1];
    v22[1] = 0;
    if (v17)
      CFRelease(v17);
    v18 = v22[0];
    v22[0] = 0;
    if (v18)
      CFRelease(v18);
    v19 = v21[1];
    v21[1] = 0;
    if (v19)
      CFRelease(v19);
    v20 = v21[0];
    v21[0] = 0;
    if (v20)
      CFRelease(v20);
  }
  else
  {
    *IPC::Encoder::grow(this, 1uLL, 1) = 0;
  }
}

void sub_197894B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef a9, CFTypeRef a10, CFTypeRef a11, CFTypeRef a12, CFTypeRef a13, CFTypeRef a14, CFTypeRef cf)
{
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;

  if (v21)
    CFRelease(v21);
  if (v20)
  {
    CFRelease(v20);
    if (!v19)
    {
LABEL_5:
      if (!v18)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  else if (!v19)
  {
    goto LABEL_5;
  }
  CFRelease(v19);
  if (!v18)
  {
LABEL_7:
    if (v17)
      CFRelease(v17);
    if (v16)
      CFRelease(v16);
    if (v15)
      CFRelease(v15);
    if (cf)
      CFRelease(cf);
    if (a14)
      CFRelease(a14);
    if (a13)
      CFRelease(a13);
    if (a12)
      CFRelease(a12);
    if (a11)
      CFRelease(a11);
    if (a10)
      CFRelease(a10);
    if (a9)
      CFRelease(a9);
    _Unwind_Resume(exception_object);
  }
LABEL_6:
  CFRelease(v18);
  goto LABEL_7;
}

void IPC::encodeObjectDirectly<PKShippingMethod>(IPC::Encoder *this, objc_object *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  const void *v10;
  const void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  WebKit::CoreIPCNumber *v17[2];
  WebKit::CoreIPCNumber *v18[2];
  WebKit::CoreIPCNumber *v19[2];
  WebKit::CoreIPCNumber *v20[2];
  PKDateComponentsRange *v21[2];
  char v22;
  __int128 v23;
  __int128 v24;
  char v25;

  if (a2)
  {
    WebKit::CoreIPCPKShippingMethod::CoreIPCPKShippingMethod((WebKit::CoreIPCPKShippingMethod *)&v12, a2);
    v4 = v12;
    v5 = v13;
    v12 = 0u;
    v13 = 0u;
    *(_OWORD *)v17 = v4;
    *(_OWORD *)v18 = v5;
    v6 = v14;
    v7 = v15;
    v14 = 0u;
    v15 = 0u;
    *(_OWORD *)v19 = v6;
    *(_OWORD *)v20 = v7;
    v8 = v16;
    v16 = 0u;
    *(_OWORD *)v21 = v8;
    v22 = 1;
    *IPC::Encoder::grow(this, 1uLL, 1) = 1;
    if (!v22)
      goto LABEL_16;
    IPC::encodeObjectDirectly<NSString>((uint64_t)this, (uint64_t)v17[0]);
    IPC::encodeObjectDirectly<NSNumber>(this, v17[1]);
    IPC::encodeObjectDirectly<NSNumber>(this, v18[0]);
    IPC::encodeObjectDirectly<NSString>((uint64_t)this, (uint64_t)v18[1]);
    IPC::encodeObjectDirectly<NSString>((uint64_t)this, (uint64_t)v19[0]);
    IPC::encodeObjectDirectly<NSNumber>(this, v19[1]);
    IPC::encodeObjectDirectly<NSNumber>(this, v20[0]);
    IPC::encodeObjectDirectly<NSString>((uint64_t)this, (uint64_t)v20[1]);
    IPC::encodeObjectDirectly<NSString>((uint64_t)this, (uint64_t)v21[0]);
    if (v21[1])
    {
      WebKit::CoreIPCPKDateComponentsRange::CoreIPCPKDateComponentsRange((WebKit::CoreIPCPKDateComponentsRange *)&v23, (objc_object *)v21[1]);
      v9 = v23;
      v23 = 0uLL;
      v24 = v9;
      v25 = 1;
      *IPC::Encoder::grow(this, 1uLL, 1) = 1;
      if (v25)
      {
        IPC::encodeObjectDirectly<NSDateComponents>(this, (NSDateComponents *)v24);
        IPC::encodeObjectDirectly<NSDateComponents>(this, *((NSDateComponents **)&v24 + 1));
        std::__optional_destruct_base<WebKit::CoreIPCPKDateComponentsRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v24);
        v10 = (const void *)*((_QWORD *)&v23 + 1);
        *((_QWORD *)&v23 + 1) = 0;
        if (v10)
          CFRelease(v10);
        v11 = (const void *)v23;
        *(_QWORD *)&v23 = 0;
        if (v11)
          CFRelease(v11);
        goto LABEL_11;
      }
LABEL_16:
      std::__throw_bad_optional_access[abi:sn180100]();
      __break(1u);
      return;
    }
    LOBYTE(v24) = 0;
    v25 = 0;
    *IPC::Encoder::grow(this, 1uLL, 1) = 0;
    std::__optional_destruct_base<WebKit::CoreIPCPKDateComponentsRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v24);
  }
  else
  {
    LOBYTE(v17[0]) = 0;
    v22 = 0;
    *IPC::Encoder::grow(this, 1uLL, 1) = 0;
  }
LABEL_11:
  if (v22)
    WebKit::CoreIPCPKShippingMethod::~CoreIPCPKShippingMethod((WebKit::CoreIPCPKShippingMethod *)v17);
  if (a2)
    WebKit::CoreIPCPKShippingMethod::~CoreIPCPKShippingMethod((WebKit::CoreIPCPKShippingMethod *)&v12);
}

void sub_197894E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  const void *v31;
  const void *v32;

  std::__optional_destruct_base<WebKit::CoreIPCPKDateComponentsRange,false>::~__optional_destruct_base[abi:sn180100](v29 - 64);
  v31 = *(const void **)(v29 - 72);
  *(_QWORD *)(v29 - 72) = 0;
  if (v31)
    CFRelease(v31);
  v32 = *(const void **)(v29 - 80);
  *(_QWORD *)(v29 - 80) = 0;
  if (v32)
    CFRelease(v32);
  if (a29)
    WebKit::CoreIPCPKShippingMethod::~CoreIPCPKShippingMethod((WebKit::CoreIPCPKShippingMethod *)&a19);
  WebKit::CoreIPCPKShippingMethod::~CoreIPCPKShippingMethod((WebKit::CoreIPCPKShippingMethod *)&a9);
  _Unwind_Resume(a1);
}

void IPC::encodeObjectDirectly<CNContact>(IPC::Encoder *this, CNContact *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6[37];
  uint64_t v7[2];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  if (a2)
  {
    WebKit::CoreIPCCNContact::CoreIPCCNContact((WebKit::CoreIPCCNContact *)v6, a2);
    WebKit::CoreIPCCNContact::CoreIPCCNContact((uint64_t)v7, v6);
    v30 = 1;
    *IPC::Encoder::grow(this, 1uLL, 1) = 1;
    if (!v30)
    {
      std::__throw_bad_optional_access[abi:sn180100]();
      __break(1u);
      return;
    }
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)this, v7);
    v4 = v7[1];
    *(_QWORD *)IPC::Encoder::grow(this, 8uLL, 8) = v4;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)this, &v8);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)this, &v9);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)this, &v10);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)this, &v11);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)this, &v12);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)this, &v13);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)this, &v14);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)this, &v15);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)this, &v16);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)this, &v17);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)this, &v18);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)this, &v19);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)this, &v20);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)this, &v21);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)this, &v22);
    IPC::ArgumentCoder<std::optional<WebKit::CoreIPCDateComponents>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCDateComponents> const&>(this, (uint64_t)&v23);
    IPC::ArgumentCoder<std::optional<WebKit::CoreIPCDateComponents>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCDateComponents> const&>(this, (uint64_t)&v24);
    IPC::VectorArgumentCoder<false,WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(this, &v25);
    IPC::VectorArgumentCoder<false,WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(this, &v26);
    IPC::VectorArgumentCoder<false,WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(this, &v27);
    IPC::VectorArgumentCoder<false,WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(this, &v28);
    IPC::VectorArgumentCoder<false,WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(this, &v29);
  }
  else
  {
    LOBYTE(v7[0]) = 0;
    v30 = 0;
    *IPC::Encoder::grow(this, 1uLL, 1) = 0;
  }
  if (v30)
    WebKit::CoreIPCCNContact::~CoreIPCCNContact((WebKit::CoreIPCCNContact *)v7, v5);
  if (a2)
    WebKit::CoreIPCCNContact::~CoreIPCCNContact((WebKit::CoreIPCCNContact *)v6, v5);
}

void sub_197895064(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  if (LOBYTE(STACK[0x258]))
    WebKit::CoreIPCCNContact::~CoreIPCCNContact((WebKit::CoreIPCCNContact *)&a47, a2);
  WebKit::CoreIPCCNContact::~CoreIPCCNContact((WebKit::CoreIPCCNContact *)&a10, a2);
  _Unwind_Resume(a1);
}

void IPC::encodeObjectDirectly<NSURLProtectionSpace>(IPC::Encoder *a1, objc_object *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _OWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;

  if (a2)
  {
    WebKit::CoreIPCNSURLProtectionSpace::CoreIPCNSURLProtectionSpace((WebKit::CoreIPCNSURLProtectionSpace *)&v11, a2);
    v4 = v11;
    v5 = v12;
    v11 = 0u;
    v12 = 0u;
    v18[0] = v4;
    v18[1] = v5;
    v6 = v13;
    v13 = 0u;
    v18[2] = v6;
    v7 = v14;
    v14 = 0;
    v19 = v7;
    LOBYTE(v20) = 0;
    v22 = 0;
    v8 = 1;
    if (v17)
    {
      v20 = v15;
      v9 = v16;
      v15 = 0;
      v16 = 0;
      v21 = v9;
      v22 = 1;
    }
  }
  else
  {
    v8 = 0;
    LOBYTE(v18[0]) = 0;
  }
  v23 = v8;
  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNSURLProtectionSpace>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCNSURLProtectionSpace>>(a1, (uint64_t)v18);
  if (v23)
    WebKit::CoreIPCNSURLProtectionSpace::~CoreIPCNSURLProtectionSpace((WebKit::CoreIPCNSURLProtectionSpace *)v18, v10);
  if (a2)
    WebKit::CoreIPCNSURLProtectionSpace::~CoreIPCNSURLProtectionSpace((WebKit::CoreIPCNSURLProtectionSpace *)&v11, v10);
}

void sub_19789514C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  if (a29)
    WebKit::CoreIPCNSURLProtectionSpace::~CoreIPCNSURLProtectionSpace((WebKit::CoreIPCNSURLProtectionSpace *)&a19, a2);
  if (v29)
    WebKit::CoreIPCNSURLProtectionSpace::~CoreIPCNSURLProtectionSpace((WebKit::CoreIPCNSURLProtectionSpace *)&a9, a2);
  _Unwind_Resume(exception_object);
}

void IPC::decodeObjectDirectlyRequiringAllowedClasses<NSURLProtectionSpace>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  int v4;
  int v5;
  uint64_t v6;
  _BYTE v7[80];
  unsigned __int8 v8;
  unsigned __int8 v9;

  IPC::Decoder::decode<std::optional<WebKit::CoreIPCNSURLProtectionSpace>>(a1, (uint64_t)v7);
  if (v9)
  {
    if (v8)
    {
      WebKit::CoreIPCNSURLProtectionSpace::toID((WebKit::CoreIPCNSURLProtectionSpace *)v7, &v6);
      v4 = v9;
      v5 = v8;
      *(_QWORD *)a2 = v6;
      *(_BYTE *)(a2 + 8) = 1;
      if (v4)
      {
        if (v5)
          WebKit::CoreIPCNSURLProtectionSpace::~CoreIPCNSURLProtectionSpace((WebKit::CoreIPCNSURLProtectionSpace *)v7, v3);
      }
    }
    else
    {
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 1;
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
  }
}

void sub_197895200(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if ((_BYTE)a23)
  {
    if (a21)
      WebKit::CoreIPCNSURLProtectionSpace::~CoreIPCNSURLProtectionSpace((WebKit::CoreIPCNSURLProtectionSpace *)&a11, a2);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<std::optional<WebKit::CoreIPCNSURLProtectionSpace>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNSURLProtectionSpace>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 88))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_197895278(_Unwind_Exception *exception_object, void *a2)
{
  WebKit::CoreIPCNSURLProtectionSpace *v2;

  if (*((_BYTE *)v2 + 88))
  {
    if (*((_BYTE *)v2 + 80))
      WebKit::CoreIPCNSURLProtectionSpace::~CoreIPCNSURLProtectionSpace(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

void IPC::encodeObjectDirectly<NSShadow>(IPC::Encoder *a1, NSShadow *a2)
{
  CFTypeRef v4;
  char v5;
  CFTypeRef v6;
  CFTypeRef v7;
  __int128 v8;
  uint64_t v9;
  CFTypeRef v10;
  __int128 v11;
  uint64_t v12;
  CFTypeRef cf;
  char v14;

  if (a2)
  {
    WebKit::CoreIPCNSShadow::CoreIPCNSShadow((WebKit::CoreIPCNSShadow *)&v8, a2);
    v11 = v8;
    v4 = v10;
    v10 = 0;
    v12 = v9;
    cf = v4;
    v5 = 1;
  }
  else
  {
    v5 = 0;
    LOBYTE(v11) = 0;
  }
  v14 = v5;
  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNSShadow>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCNSShadow>>(a1, (uint64_t)&v11);
  if (v14)
  {
    v6 = cf;
    cf = 0;
    if (v6)
      CFRelease(v6);
  }
  if (a2)
  {
    v7 = v10;
    v10 = 0;
    if (v7)
      CFRelease(v7);
  }
}

void sub_197895334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef a12, uint64_t a13, uint64_t a14, uint64_t a15, CFTypeRef cf, char a17)
{
  uint64_t v17;

  if (a17 && cf)
    CFRelease(cf);
  if (v17)
  {
    if (a12)
      CFRelease(a12);
  }
  _Unwind_Resume(exception_object);
}

void IPC::decodeObjectDirectlyRequiringAllowedClasses<NSShadow>(uint64_t *a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  int v4;
  int v5;
  CFTypeRef v6;
  uint64_t v7;
  _BYTE v8[24];
  CFTypeRef cf;
  unsigned __int8 v10;
  unsigned __int8 v11;

  IPC::Decoder::decode<std::optional<WebKit::CoreIPCNSShadow>>(a1, (uint64_t)v8, a3);
  if (v11)
  {
    if (v10)
    {
      WebKit::CoreIPCNSShadow::toID((WebKit::CoreIPCNSShadow *)v8, &v7);
      v4 = v11;
      v5 = v10;
      *(_QWORD *)a2 = v7;
      *(_BYTE *)(a2 + 8) = 1;
      if (v4 && v5)
      {
        v6 = cf;
        cf = 0;
        if (v6)
          CFRelease(v6);
      }
    }
    else
    {
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 1;
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
  }
}

void sub_197895400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf, char a15, int a16, __int16 a17, char a18, char a19)
{
  if ((_BYTE)a17 && a15)
  {
    if (cf)
      CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<std::optional<WebKit::CoreIPCNSShadow>>(uint64_t *a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNSShadow>,void>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(_BYTE *)(a2 + 40))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7)
      v8 = v6 == 0;
    else
      v8 = 1;
    if (!v8)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v5);
  }
}

void sub_197895480(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<std::optional<WebKit::CoreIPCNSShadow>,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

void IPC::encodeObjectDirectly<NSURLCredential>(IPC::Encoder *a1, objc_object *a2)
{
  CFTypeRef v4;
  char v5;
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef v8;
  CFTypeRef cf;
  char v10;

  if (a2)
  {
    WebKit::CoreIPCNSURLCredential::CoreIPCNSURLCredential((WebKit::CoreIPCNSURLCredential *)&v8, a2);
    v4 = v8;
    v8 = 0;
    cf = v4;
    v5 = 1;
  }
  else
  {
    v5 = 0;
    LOBYTE(cf) = 0;
  }
  v10 = v5;
  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNSURLCredential>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCNSURLCredential>>(a1, (uint64_t)&cf);
  if (v10)
  {
    v6 = cf;
    cf = 0;
    if (v6)
      CFRelease(v6);
  }
  if (a2)
  {
    v7 = v8;
    v8 = 0;
    if (v7)
      CFRelease(v7);
  }
}

void sub_197895520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, CFTypeRef cf, char a12)
{
  uint64_t v12;

  if (a12 && cf)
    CFRelease(cf);
  if (v12)
  {
    if (a10)
      CFRelease(a10);
  }
  _Unwind_Resume(exception_object);
}

void IPC::decodeObjectDirectlyRequiringAllowedClasses<NSURLCredential>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  int v4;
  CFTypeRef v5;
  uint64_t v6;
  CFTypeRef cf;
  unsigned __int8 v8;
  unsigned __int8 v9;

  IPC::Decoder::decode<std::optional<WebKit::CoreIPCNSURLCredential>>(a1, &cf);
  if (v9)
  {
    if (v8)
    {
      WebKit::CoreIPCNSURLCredential::toID((WebKit::CoreIPCNSURLCredential *)&cf, &v6);
      v3 = v9;
      v4 = v8;
      *(_QWORD *)a2 = v6;
      *(_BYTE *)(a2 + 8) = 1;
      if (v3 && v4)
      {
        v5 = cf;
        cf = 0;
        if (v5)
          CFRelease(v5);
      }
    }
    else
    {
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 1;
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
  }
}

void sub_1978955EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11)
  {
    if (cf)
      CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::Decoder::decode<std::optional<WebKit::CoreIPCNSURLCredential>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNSURLCredential>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

void sub_19789566C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<std::optional<WebKit::CoreIPCSecureCoding>,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::encodeObjectDirectly<NSDateComponents>(IPC::Encoder *this, NSDateComponents *a2)
{
  __int128 v3;
  void *v4;
  void *v5;
  WTF *v6;
  WTF::StringImpl *v7;
  void *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10[2];
  WTF *v11;
  uint64_t v12;
  __int128 v13;
  WTF *v14;
  uint64_t v15;
  char v16;

  if (a2)
  {
    WebKit::CoreIPCDateComponents::CoreIPCDateComponents((WebKit::CoreIPCDateComponents *)v10, a2);
    v3 = *(_OWORD *)v10;
    v10[0] = 0;
    v10[1] = 0;
    v13 = v3;
    v14 = v11;
    *(_QWORD *)&v3 = v12;
    v11 = 0;
    v12 = 0;
    v15 = v3;
    v16 = 1;
    *IPC::Encoder::grow(this, 1uLL, 1) = 1;
    if (v16)
    {
      IPC::ArgumentCoder<WebKit::CoreIPCDateComponents,void>::encode(this, (uint64_t)&v13);
      std::__optional_destruct_base<WebKit::CoreIPCDateComponents,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v13, v4);
      v6 = v11;
      if (v11)
      {
        v11 = 0;
        LODWORD(v12) = 0;
        WTF::fastFree(v6, v5);
      }
      v7 = v10[1];
      v10[1] = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, (WTF::StringImpl *)v5);
        else
          *(_DWORD *)v7 -= 2;
      }
      result = v10[0];
      v10[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else
    {
      result = (WTF::StringImpl *)std::__throw_bad_optional_access[abi:sn180100]();
      __break(1u);
    }
  }
  else
  {
    LOBYTE(v13) = 0;
    v16 = 0;
    *IPC::Encoder::grow(this, 1uLL, 1) = 0;
    return (WTF::StringImpl *)std::__optional_destruct_base<WebKit::CoreIPCDateComponents,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v13, v8);
  }
  return result;
}

void sub_197895794(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF *a11, int a12, int a13, char a14)
{
  void *v15;

  std::__optional_destruct_base<WebKit::CoreIPCDateComponents,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a14, a2);
  if (a11)
    WTF::fastFree(a11, v15);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<std::optional<WebKit::CoreIPCDateComponents>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unsigned int v9;
  __int128 v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v4 = a2[2];
  v5 = (char *)*a2;
  v6 = a2[1];
  v7 = v4 - (_QWORD)v5;
  if (v6 <= v7)
  {
    v14 = 0;
    v15 = 0;
    *a2 = 0;
    a2[1] = 0;
    v16 = a2[3];
    if (v16)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
        v15 = *a2;
        v14 = a2[1];
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
    }
    goto LABEL_15;
  }
  v8 = &v5[v7];
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v14 = v6;
    v15 = 0;
LABEL_15:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v17 = a2[3];
    if (v17)
    {
      if (v14)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v15, v14);
        v5 = (char *)*a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_16;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_16:
    *a2 = 0;
    a2[1] = 0;
    v18 = a2[3];
    if (v18 && v6)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v18 + 16))(v18, v5);
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 40) = 0;
    goto LABEL_10;
  }
  if (!v9)
  {
    LOBYTE(v19) = 0;
    v22 = 0;
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 32) = 0;
    goto LABEL_8;
  }
  IPC::Decoder::decode<WebKit::CoreIPCDateComponents>((uint64_t)&v19, a2);
  if (v22)
  {
    v10 = v19;
    v19 = 0uLL;
    *(_OWORD *)a1 = v10;
    *(_QWORD *)(a1 + 16) = v20;
    *(_QWORD *)&v10 = v21;
    v20 = 0;
    v21 = 0;
    *(_QWORD *)(a1 + 24) = v10;
    *(_BYTE *)(a1 + 32) = 1;
LABEL_8:
    *(_BYTE *)(a1 + 40) = 1;
    return std::__optional_destruct_base<WebKit::CoreIPCDateComponents,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19, v5);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 40) = 0;
  std::__optional_destruct_base<WebKit::CoreIPCDateComponents,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19, v5);
LABEL_10:
  v12 = *a2;
  v13 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v13)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v12);
  }
  return result;
}

void IPC::encodeObjectDirectly<NSData>(IPC::Encoder *a1, CFTypeRef cf)
{
  char v4;
  CFTypeRef v5;
  CFTypeRef cfa;
  char v7;

  if (cf)
  {
    CFRetain(cf);
    cfa = cf;
    v4 = 1;
  }
  else
  {
    v4 = 0;
    LOBYTE(cfa) = 0;
  }
  v7 = v4;
  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCData>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCData>>(a1, (uint64_t)&cfa);
  if (v7)
  {
    v5 = cfa;
    cfa = 0;
    if (v5)
      CFRelease(v5);
  }
}

void sub_197895A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, char a10)
{
  if (a10)
  {
    if (cf)
      CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void IPC::decodeObjectDirectlyRequiringAllowedClasses<NSData>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  CFTypeRef v3;
  int v4;
  int v5;
  CFTypeRef v6;
  CFTypeRef cf;
  unsigned __int8 v8;
  unsigned __int8 v9;

  IPC::Decoder::decode<std::optional<WebKit::CoreIPCData>>(a1, (uint64_t)&cf);
  if (!v9)
  {
    *a2 = 0;
    a2[8] = 0;
    return;
  }
  if (!v8)
  {
    *(_QWORD *)a2 = 0;
    a2[8] = 1;
    return;
  }
  v3 = cf;
  if (!cf)
  {
    *(_QWORD *)a2 = 0;
    a2[8] = 1;
LABEL_6:
    v6 = cf;
    cf = 0;
    if (v6)
      CFRelease(v6);
    return;
  }
  CFRetain(cf);
  v4 = v9;
  v5 = v8;
  *(_QWORD *)a2 = v3;
  a2[8] = 1;
  if (v4 && v5)
    goto LABEL_6;
}

void sub_197895AE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11)
  {
    if (cf)
      CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::Decoder::decode<std::optional<WebKit::CoreIPCData>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WebKit::CoreIPCData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

void sub_197895B64(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<std::optional<WebKit::CoreIPCSecureCoding>,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

char *IPC::encodeObjectDirectly<NSDate>(IPC::Encoder *a1, uint64_t a2)
{
  char v3;
  double v5;
  char v6;

  if (a2)
  {
    v5 = MEMORY[0x19AEA96AC](a2);
    v3 = 1;
  }
  else
  {
    v3 = 0;
    LOBYTE(v5) = 0;
  }
  v6 = v3;
  return IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, (uint64_t *)&v5);
}

void IPC::decodeObjectDirectlyRequiringAllowedClasses<NSDate>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  CFDateRef v3;
  CFDateRef v4;
  CFAbsoluteTime v5;
  char v6;
  char v7;

  IPC::Decoder::decode<std::optional<WTF::WallTime>>(a1, &v5);
  if (v7)
  {
    if (v6)
    {
      WebKit::CoreIPCDate::toID(&v5, &v4);
      v3 = v4;
    }
    else
    {
      v3 = 0;
    }
    *(_QWORD *)a2 = v3;
    *(_BYTE *)(a2 + 8) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
  }
}

void IPC::encodeObjectDirectly<NSArray>(IPC::Encoder *a1, NSArray *a2)
{
  uint64_t v4;
  char v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];
  char v10;

  if (a2)
  {
    WebKit::CoreIPCArray::CoreIPCArray((WebKit::CoreIPCArray *)&v7, a2);
    v9[0] = v7;
    v4 = v8;
    v7 = 0;
    v8 = 0;
    v9[1] = v4;
    v5 = 1;
  }
  else
  {
    v5 = 0;
    LOBYTE(v9[0]) = 0;
  }
  v10 = v5;
  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCArray>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCArray>>(a1, (uint64_t)v9);
  if (v10)
    WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v6);
  if (a2)
    WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v7, v6);
}

void sub_197895CC0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  uint64_t v14;

  if (a14)
    WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a12, a2);
  if (v14)
    WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  _Unwind_Resume(exception_object);
}

void IPC::decodeObjectDirectlyRequiringAllowedClasses<NSArray>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  int v4;
  int v5;
  uint64_t v6;
  WebKit::CoreIPCNSCFObject *v7[2];
  unsigned __int8 v8;
  unsigned __int8 v9;

  IPC::Decoder::decode<std::optional<WebKit::CoreIPCArray>>(a1, (uint64_t)v7);
  if (v9)
  {
    if (v8)
    {
      WebKit::CoreIPCArray::toID(v7, &v6);
      v4 = v9;
      v5 = v8;
      *(_QWORD *)a2 = v6;
      *(_BYTE *)(a2 + 8) = 1;
      if (v4)
      {
        if (v5)
          WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v3);
      }
    }
    else
    {
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 1;
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
  }
}

void sub_197895D74(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17)
{
  if ((_BYTE)a15)
  {
    if (a13)
      WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::Decoder::decode<std::optional<WebKit::CoreIPCArray>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WebKit::CoreIPCArray>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 24))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

void sub_197895DEC(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 24))
  {
    if (*(_BYTE *)(v2 + 16))
      WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

void IPC::encodeObjectDirectly<NSError>(IPC::Encoder *a1, NSError *a2)
{
  char v4;
  __int128 v5;
  WTF::StringImpl **v6[2];
  __int128 v7;
  _QWORD v8[2];
  __int128 v9;
  char v10;

  if (a2)
  {
    WebKit::CoreIPCError::CoreIPCError((WebKit::CoreIPCError *)v6, a2);
    v8[0] = v6[0];
    v8[1] = v6[1];
    v5 = v7;
    v6[0] = 0;
    v7 = 0uLL;
    v9 = v5;
    v4 = 1;
  }
  else
  {
    v4 = 0;
    LOBYTE(v8[0]) = 0;
  }
  v10 = v4;
  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCError>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCError>>(a1, (uint64_t)v8);
  std::__optional_destruct_base<WebKit::CoreIPCError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v8);
  if (a2)
    WebKit::CoreIPCError::~CoreIPCError(v6);
}

void sub_197895E94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  WTF::StringImpl **v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, WTF::StringImpl **);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::__optional_destruct_base<WebKit::CoreIPCError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va1);
  if (v2)
    WebKit::CoreIPCError::~CoreIPCError((WTF::StringImpl ***)va);
  _Unwind_Resume(a1);
}

void WebKit::CoreIPCError::~CoreIPCError(WTF::StringImpl ***this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;

  std::unique_ptr<WebKit::CoreIPCError>::reset[abi:sn180100](this + 3, 0);
  v3 = this[2];
  this[2] = 0;
  if (v3)
    CFRelease(v3);
  v4 = *this;
  *this = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

void IPC::decodeObjectDirectlyRequiringAllowedClasses<NSError>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  uint64_t v4;
  _BYTE v5[40];
  unsigned __int8 v6;

  IPC::Decoder::decode<std::optional<WebKit::CoreIPCError>>((uint64_t)v5, a1);
  if (v6)
  {
    if (!v5[32])
    {
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 1;
LABEL_4:
      std::__optional_destruct_base<WebKit::CoreIPCError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5);
      return;
    }
    WebKit::CoreIPCError::toID((WebKit::CoreIPCError *)v5, &v4);
    v3 = v6;
    *(_QWORD *)a2 = v4;
    *(_BYTE *)(a2 + 8) = 1;
    if (v3)
      goto LABEL_4;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
  }
}

void sub_197895F9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a16)
    std::__optional_destruct_base<WebKit::CoreIPCError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a11);
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::optional<WebKit::CoreIPCError>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WebKit::CoreIPCError>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a1 + 40))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WTF::StringImpl *IPC::encodeObjectDirectly<NSLocale>(IPC::Encoder *a1, void *a2)
{
  WTF::StringImpl *v4;
  char v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;

  if (a2)
  {
    MEMORY[0x19AEABCC8](&v8, objc_msgSend(a2, "localeIdentifier"));
    v4 = v8;
    v8 = 0;
    v9 = v4;
    v5 = 1;
  }
  else
  {
    v5 = 0;
    LOBYTE(v9) = 0;
  }
  v10 = v5;
  result = (WTF::StringImpl *)IPC::ArgumentCoder<std::optional<WebKit::CoreIPCLocale>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCLocale>>(a1, (uint64_t)&v9);
  if (v10)
  {
    result = v9;
    v9 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
        if (!a2)
          return result;
        goto LABEL_9;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (!a2)
    return result;
LABEL_9:
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1978960D0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  uint64_t v12;

  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (v12 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::decodeObjectDirectlyRequiringAllowedClasses<NSLocale>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  int v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  unsigned __int8 v9;
  unsigned __int8 v10;

  result = (WTF::StringImpl *)IPC::Decoder::decode<std::optional<WebKit::CoreIPCLocale>>(a1, (uint64_t)&v8);
  if (v10)
  {
    if (v9)
    {
      result = (WTF::StringImpl *)WebKit::CoreIPCLocale::toID((WebKit::CoreIPCLocale *)&v8, &v7);
      v5 = v10;
      v6 = v9;
      *(_QWORD *)a2 = v7;
      *(_BYTE *)(a2 + 8) = 1;
      if (v5)
      {
        if (v6)
        {
          result = v8;
          v8 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
            else
              *(_DWORD *)result -= 2;
          }
        }
      }
    }
    else
    {
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 1;
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
  }
  return result;
}

void sub_1978961D8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::Decoder::decode<std::optional<WebKit::CoreIPCLocale>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WebKit::CoreIPCLocale>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

void sub_19789626C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 16))
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(exception_object);
}

void IPC::encodeObjectDirectly<NSNumber>(IPC::Encoder *a1, WebKit::CoreIPCNumber *this)
{
  uint64_t v3;
  char v4;
  _QWORD v5[2];
  char v6;

  if (this)
  {
    v5[0] = WebKit::CoreIPCNumber::numberHolderForNumber(this, this);
    v5[1] = v3;
    v4 = 1;
  }
  else
  {
    v4 = 0;
    LOBYTE(v5[0]) = 0;
  }
  v6 = v4;
  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNumber>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCNumber>>(a1, (uint64_t)v5);
}

void IPC::decodeObjectDirectlyRequiringAllowedClasses<NSNumber>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v5[32];

  IPC::Decoder::decode<std::optional<WebKit::CoreIPCNumber>>(a1, (uint64_t)v5);
  if (v5[24])
  {
    if (v5[16])
    {
      WebKit::CoreIPCNumber::toID((WebKit::CoreIPCNumber *)v5, &v4);
      v3 = v4;
    }
    else
    {
      v3 = 0;
    }
    *(_QWORD *)a2 = v3;
    *(_BYTE *)(a2 + 8) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
  }
}

uint64_t *IPC::Decoder::decode<std::optional<WebKit::CoreIPCNumber>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNumber>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 24))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

void IPC::encodeObjectDirectly<NSString>(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  char v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  char v11;

  if (a2)
  {
    MEMORY[0x19AEABCC8](&v9, a2);
    v4 = v9;
    v9 = 0;
    v10 = v4;
    v5 = 1;
  }
  else
  {
    v5 = 0;
    LOBYTE(v10) = 0;
  }
  v11 = v5;
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>(a1, (uint64_t)&v10);
  if (v11)
  {
    v7 = v10;
    v10 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
      {
        WTF::StringImpl::destroy(v7, v6);
        if (!a2)
          return;
        goto LABEL_9;
      }
      *(_DWORD *)v7 -= 2;
    }
  }
  if (!a2)
    return;
LABEL_9:
  v8 = v9;
  v9 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
}

void sub_197896458(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  uint64_t v12;

  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (v12 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::decodeObjectDirectlyRequiringAllowedClasses<NSString>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  int v5;
  int v6;
  const __CFString *v7;
  WTF::StringImpl *v8;
  unsigned __int8 v9;
  unsigned __int8 v10;

  result = (WTF::StringImpl *)IPC::Decoder::decode<std::optional<WebKit::CoreIPCString>>(a1, (uint64_t)&v8);
  if (v10)
  {
    if (v9)
    {
      result = (WTF::StringImpl *)WebKit::CoreIPCString::toID((WebKit::CoreIPCString *)&v8, &v7);
      v5 = v10;
      v6 = v9;
      *(_QWORD *)a2 = v7;
      *(_BYTE *)(a2 + 8) = 1;
      if (v5)
      {
        if (v6)
        {
          result = v8;
          v8 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
            else
              *(_DWORD *)result -= 2;
          }
        }
      }
    }
    else
    {
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 1;
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
  }
  return result;
}

void sub_197896560(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::Decoder::decode<std::optional<WebKit::CoreIPCString>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WebKit::CoreIPCString>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

void sub_1978965F4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 16))
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(exception_object);
}

uint64_t IPC::encodeObjectDirectly<NSDictionary>(IPC::Encoder *a1, NSDictionary *a2)
{
  uint64_t v4;
  char v5;
  uint64_t result;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];
  char v11;

  if (a2)
  {
    WebKit::CoreIPCDictionary::CoreIPCDictionary((WebKit::CoreIPCDictionary *)&v8, a2);
    v10[0] = v8;
    v4 = v9;
    v8 = 0;
    v9 = 0;
    v10[1] = v4;
    v5 = 1;
  }
  else
  {
    v5 = 0;
    LOBYTE(v10[0]) = 0;
  }
  v11 = v5;
  result = (uint64_t)IPC::ArgumentCoder<std::optional<WebKit::CoreIPCDictionary>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCDictionary>>(a1, (uint64_t)v10);
  if (v11)
    result = WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v7);
  if (a2)
    return WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v7);
  return result;
}

void sub_197896698(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  uint64_t v14;

  if (a14)
    WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a12, a2);
  if (v14)
    WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl **IPC::encodeObjectDirectly<NSPresentationIntent>(IPC::Encoder *this, NSPresentationIntent *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl **result;
  WTF *v10;
  __int128 v11;
  __int128 v12;
  WTF *v13;
  uint64_t v14;
  __int128 v15;
  WTF::StringImpl *v16;
  __int128 v17;
  _OWORD v18[2];
  WTF *v19;
  uint64_t v20;
  __int128 v21;
  WTF::StringImpl *v22;
  __int128 v23;
  char v24;

  if (a2)
  {
    WebKit::CoreIPCPresentationIntent::CoreIPCPresentationIntent((WebKit::CoreIPCPresentationIntent *)&v11, a2);
    v18[0] = v11;
    v18[1] = v12;
    *(_QWORD *)&v12 = 0;
    v19 = v13;
    v3 = v14;
    v13 = 0;
    v14 = 0;
    v20 = v3;
    v21 = v15;
    v4 = v16;
    v16 = 0;
    v22 = v4;
    v23 = v17;
    v24 = 1;
    *IPC::Encoder::grow(this, 1uLL, 1) = 1;
    if (v24)
    {
      IPC::ArgumentCoder<WebKit::CoreIPCPresentationIntent,void>::encode(this, (uint64_t *)v18);
      std::__optional_destruct_base<WebKit::CoreIPCPresentationIntent,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18, v5);
      v7 = v16;
      v16 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, v6);
        else
          *(_DWORD *)v7 -= 2;
      }
      v10 = v13;
      if (v13)
      {
        v13 = 0;
        LODWORD(v14) = 0;
        WTF::fastFree(v10, v6);
      }
      return std::unique_ptr<WebKit::CoreIPCPresentationIntent>::reset[abi:sn180100]((WTF::StringImpl **)&v12, 0);
    }
    else
    {
      result = (WTF::StringImpl **)std::__throw_bad_optional_access[abi:sn180100]();
      __break(1u);
    }
  }
  else
  {
    LOBYTE(v18[0]) = 0;
    v24 = 0;
    *IPC::Encoder::grow(this, 1uLL, 1) = 0;
    return (WTF::StringImpl **)std::__optional_destruct_base<WebKit::CoreIPCPresentationIntent,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18, v8);
  }
  return result;
}

void sub_1978967F0(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14, int a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, uint64_t a20,char a21)
{
  WTF::StringImpl **v21;
  WTF::StringImpl *v23;

  std::__optional_destruct_base<WebKit::CoreIPCPresentationIntent,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a21, a2);
  if (a18)
  {
    if (*(_DWORD *)a18 == 2)
      WTF::StringImpl::destroy(a18, v23);
    else
      *(_DWORD *)a18 -= 2;
  }
  if (a14)
    WTF::fastFree(a14, v23);
  std::unique_ptr<WebKit::CoreIPCPresentationIntent>::reset[abi:sn180100](v21, 0);
  _Unwind_Resume(a1);
}

void IPC::decodeObjectDirectlyRequiringAllowedClasses<NSPresentationIntent>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *v3;
  int v4;
  uint64_t v5;
  _BYTE v6[96];
  unsigned __int8 v7;

  IPC::Decoder::decode<std::optional<WebKit::CoreIPCPresentationIntent>>(a1, (uint64_t)v6);
  if (!v7)
  {
    *a2 = 0;
    a2[8] = 0;
    return;
  }
  if (!v6[88])
  {
    *(_QWORD *)a2 = 0;
    a2[8] = 1;
    goto LABEL_7;
  }
  WebKit::CoreIPCPresentationIntent::toID((WebKit::CoreIPCPresentationIntent *)v6, &v5);
  v4 = v7;
  *(_QWORD *)a2 = v5;
  a2[8] = 1;
  if (v4)
LABEL_7:
    std::__optional_destruct_base<WebKit::CoreIPCPresentationIntent,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v3);
}

void sub_1978968CC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a22)
    std::__optional_destruct_base<WebKit::CoreIPCPresentationIntent,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a10, a2);
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::optional<WebKit::CoreIPCPresentationIntent>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WebKit::CoreIPCPresentationIntent>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 96))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_19789693C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 96))
    std::__optional_destruct_base<WebKit::CoreIPCPresentationIntent,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(exception_object);
}

unsigned int *IPC::encodeObjectDirectly<UIColor>(IPC::Encoder *a1, WebCore *this)
{
  unsigned __int8 v4;
  void *v5;
  unsigned int *result;
  void *v7;
  unsigned int v8;
  unsigned int v9;
  _BYTE v10[7];
  unsigned __int8 v11[16];

  if (this)
  {
    WebCore::colorFromCocoaColor(this, (UIColor *)this);
    WebCore::Color::Color();
    v4 = 1;
  }
  else
  {
    v4 = 0;
    v11[0] = 0;
  }
  v11[8] = v4;
  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCColor>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCColor>>(a1, v11);
  result = (unsigned int *)std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v11, v5);
  if (this && (*(_QWORD *)v10 & 0x8000000000000) != 0)
  {
    result = (unsigned int *)(*(_QWORD *)v10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v8 = __ldaxr(result);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, result));
    if (!v9)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v7);
    }
  }
  return result;
}

void sub_1978969F8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  if ((a10 & 0x8000000000000) != 0)
  {
    v12 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<IPC::ConnectionHandle,void>::decode(IPC::Decoder *a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE v4[4];
  _BYTE v5[4];
  char v6;

  IPC::Decoder::takeLastAttachment(a1, v5);
  if (*(_QWORD *)a1)
  {
    if (!v6)
    {
      __break(1u);
      return;
    }
    WTF::MachSendRight::MachSendRight();
    WTF::MachSendRight::MachSendRight();
    a2[4] = 1;
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v4);
  }
  else
  {
    *a2 = 0;
    a2[4] = 0;
  }
  if (v6)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v5);
}

void sub_197896AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, __int16 a11, char a12, __int16 a13, char a14)
{
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a10);
  if (a14)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a12);
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<WebKit::CoreIPCArray,void>::decode@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];
  uint64_t v10;
  uint64_t v11;
  char v12;

  result = IPC::Decoder::decode<WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)&v10);
  if (*a1)
  {
    if (!v12)
    {
      __break(1u);
      return result;
    }
    v7 = v10;
    v10 = 0;
    v9[0] = 0;
    *(_QWORD *)a3 = v7;
    v9[1] = 0;
    v8 = v11;
    v11 = 0;
    *(_QWORD *)(a3 + 8) = v8;
    *(_BYTE *)(a3 + 16) = 1;
    result = WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v6);
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  if (v12)
    return WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v6);
  return result;
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::VectorArgumentCoder<false,WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

void sub_197896BE8(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 16))
    WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebKit::CoreIPCCFType,void>::decode(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char v7;

  IPC::Decoder::decode<WTF::UniqueRef<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>>(a1, a2, (uint64_t)&v6);
  if (*a1)
  {
    if (v7)
    {
      *(_QWORD *)a3 = v6;
      *(_BYTE *)(a3 + 8) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 8) = 0;
    if (v7)
    {
      v5 = v6;
      v6 = 0;
      if (v5)
        std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)&v6, v5);
    }
  }
}

void IPC::Decoder::decode<WTF::UniqueRef<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  IPC::ArgumentCoder<WTF::UniqueRef<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>,void>::decode(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 8))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7)
      v8 = v6 == 0;
    else
      v8 = 1;
    if (!v8)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v5);
  }
}

WTF *IPC::ArgumentCoder<WebKit::CoreIPCCFURL,void>::encode(IPC::Encoder *a1, CFURLRef *this)
{
  CFTypeRef v4;
  void *v5;
  WTF *result;
  CFTypeRef cf;
  int v8;
  unsigned int v9;

  WebKit::CoreIPCCFURL::baseURL(this, (uint64_t)&cf);
  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCCFURL>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCCFURL>>(a1, (unsigned __int8 *)&cf);
  if ((_BYTE)v8)
  {
    v4 = cf;
    cf = 0;
    if (v4)
      CFRelease(v4);
  }
  WebKit::CoreIPCCFURL::toVector(this, (uint64_t)&cf);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)a1, cf, v9);
  result = (WTF *)cf;
  if (cf)
  {
    cf = 0;
    v8 = 0;
    return (WTF *)WTF::fastFree(result, v5);
  }
  return result;
}

void sub_197896D64(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  if (a9)
    WTF::fastFree(a9, a2);
  _Unwind_Resume(exception_object);
}

void sub_197896D84(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, char a10)
{
  if (a10)
  {
    if (cf)
      CFRelease(cf);
  }
  JUMPOUT(0x197896D7CLL);
}

WTF *IPC::ArgumentCoder<WebKit::CoreIPCCFURL,void>::encode(_QWORD *a1, CFURLRef *this)
{
  CFTypeRef v4;
  void *v5;
  WTF *result;
  CFTypeRef cf;
  int v8;
  unsigned int v9;

  WebKit::CoreIPCCFURL::baseURL(this, (uint64_t)&cf);
  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCCFURL>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::CoreIPCCFURL>>(a1, (WebKit::CoreIPCCFURL *)&cf);
  if ((_BYTE)v8)
  {
    v4 = cf;
    cf = 0;
    if (v4)
      CFRelease(v4);
  }
  WebKit::CoreIPCCFURL::toVector(this, (uint64_t)&cf);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(a1, cf, v9);
  result = (WTF *)cf;
  if (cf)
  {
    cf = 0;
    v8 = 0;
    return (WTF *)WTF::fastFree(result, v5);
  }
  return result;
}

void sub_197896E30(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *cf, int a10)
{
  if (cf)
    WTF::fastFree(cf, a2);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebKit::CoreIPCCFURL,void>::decode(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  void *v4;
  WTF *v5;
  CFTypeRef v6;
  WTF *v7;
  int v8;
  char v9;
  CFTypeRef cf;
  char v11;
  char v12;

  IPC::Decoder::decode<std::optional<WebKit::CoreIPCCFURL>>(&cf, a1);
  IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, &v7);
  if (!*a1)
    goto LABEL_14;
  if (!v12 || !v9)
  {
    __break(1u);
LABEL_14:
    *a2 = 0;
    a2[8] = 0;
    goto LABEL_5;
  }
  WebKit::CoreIPCCFURL::createWithBaseURLAndBytes((uint64_t)&cf, (uint64_t)&v7, (uint64_t)a2);
LABEL_5:
  if (v9)
  {
    v5 = v7;
    if (v7)
    {
      v7 = 0;
      v8 = 0;
      WTF::fastFree(v5, v4);
    }
  }
  if (v12 && v11)
  {
    v6 = cf;
    cf = 0;
    if (v6)
      CFRelease(v6);
  }
}

void sub_197896F2C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, int a11, char a12, CFTypeRef cf, char a14, int a15, __int16 a16, char a17, char a18)
{
  BOOL v19;

  if (a12 && a9)
    WTF::fastFree(a9, a2);
  if ((_BYTE)a16)
    v19 = a14 == 0;
  else
    v19 = 1;
  if (!v19)
  {
    if (cf)
      CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *IPC::Decoder::decode<std::optional<WebKit::CoreIPCCFURL>>(_BYTE *a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WebKit::CoreIPCCFURL>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[16])
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (_QWORD *)a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

void sub_197896FD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<std::optional<WebKit::CoreIPCCFURL>,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

unsigned int *IPC::ArgumentCoder<WebKit::CoreIPCColor,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned int *result;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  _BYTE v11[7];
  _BYTE v12[8];
  char v13;

  result = IPC::ArgumentCoder<WebCore::Color,void>::decode(a1, v12);
  if (!v13)
  {
    v5 = (void *)*a1;
    v9 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (unsigned int *)a1[3];
    if (result && v9 != 0)
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *, void *))(*(_QWORD *)result + 16))(result, v5);
  }
  if (!*a1)
  {
    *a2 = 0;
    a2[8] = 0;
    return (unsigned int *)std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v12, v5);
  }
  if (v13)
  {
    WebCore::Color::Color();
    WebCore::Color::Color();
    a2[8] = 1;
    if ((*(_QWORD *)v11 & 0x8000000000000) != 0)
    {
      v6 = (unsigned int *)(*(_QWORD *)v11 & 0xFFFFFFFFFFFFLL);
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, v5);
      }
    }
    return (unsigned int *)std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v12, v5);
  }
  __break(1u);
  return result;
}

void sub_1978970C4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<WebKit::CoreIPCCNPostalAddress,void>::encode(uint64_t a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 1);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 3);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 4);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 5);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 6);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 7);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 8);
}

uint64_t IPC::Decoder::decode<long>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = a1[1];
  v2 = *a1;
  v3 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v1 >= v3 && v1 - v3 > 7)
  {
    v5 = v2 + v3;
    a1[2] = v5 + 8;
    if (v2)
      return *(_QWORD *)v5;
    v7 = v1;
    v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9)
    {
      v10 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v9 + 16))(v9, v2, v1);
        a1 = v10;
        v8 = *v10;
        v7 = v10[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v8);
    return 0;
  }
  return result;
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t *v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[80];
  char v37;
  uint64_t v38;
  uint64_t v39;

  v4 = a2[1];
  v5 = *a2;
  v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    v19 = 0;
    v20 = 0;
    *a2 = 0;
    a2[1] = 0;
    v21 = a2[3];
    if (v21)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v21 + 16))(v21, v5, v4);
        v20 = *a2;
        v19 = a2[1];
      }
      else
      {
        v19 = 0;
        v20 = 0;
      }
    }
    goto LABEL_20;
  }
  v8 = (unint64_t *)(v5 + v6);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v19 = v4;
    v20 = 0;
LABEL_20:
    *a2 = 0;
    a2[1] = 0;
    v22 = a2[3];
    if (v22 && v19)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, v20);
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
LABEL_37:
    v32 = *a2;
    v33 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
    {
      if (v33)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v32);
    }
    return result;
  }
  v9 = *v8;
  v38 = 0;
  v39 = 0;
  if (v9 >= 0x2AAA)
  {
    do
    {
      IPC::Decoder::decode<WebKit::CoreIPCContactLabeledValue>(&v34, a2);
      if (!v37)
        goto LABEL_36;
      if (HIDWORD(v39) == (_DWORD)v39)
      {
        WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::CoreIPCContactLabeledValue>((uint64_t)&v38, (unint64_t)&v34);
      }
      else
      {
        v24 = (_QWORD *)(v38 + 96 * HIDWORD(v39));
        v25 = v34;
        v34 = 0;
        *v24 = v25;
        v26 = v35;
        v35 = 0;
        v24[1] = v26;
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::CoreIPCDateComponents,WebKit::CoreIPCCNPhoneNumber,WebKit::CoreIPCCNPostalAddress,WebKit::CoreIPCString>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v24 + 2), (uint64_t)v36);
        ++HIDWORD(v39);
      }
      result = std::__optional_destruct_base<WebKit::CoreIPCContactLabeledValue,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v34, v23);
      --v9;
    }
    while (v9);
    v27 = HIDWORD(v39);
    v28 = (WTF::StringImpl *)v38;
    if (v39 > HIDWORD(v39))
    {
      v29 = (WTF::StringImpl *)v38;
      if (HIDWORD(v39))
      {
        if (HIDWORD(v39) >= 0x2AAAAAB)
        {
          __break(0xC471u);
          return result;
        }
        v30 = WTF::fastMalloc((WTF *)(96 * HIDWORD(v39)));
        LODWORD(v39) = 96 * v27 / 0x60;
        v38 = v30;
        v29 = v28;
        if ((WTF::StringImpl *)v30 != v28)
        {
          WTF::VectorMover<false,WebKit::CoreIPCContactLabeledValue>::move(v28, (WTF::StringImpl **)v28 + 12 * v27, v30);
          v29 = (WTF::StringImpl *)v38;
        }
      }
      if (v28)
      {
        if (v29 == v28)
        {
          v38 = 0;
          LODWORD(v39) = 0;
        }
        WTF::fastFree(v28, a2);
        v28 = (WTF::StringImpl *)v38;
      }
      else
      {
        v28 = v29;
      }
    }
    v38 = 0;
    *(_QWORD *)a1 = v28;
    v17 = v39;
    v16 = HIDWORD(v39);
    goto LABEL_18;
  }
  if (v9)
  {
    LODWORD(v39) = 96 * (int)v9 / 0x60u;
    v38 = WTF::fastMalloc((WTF *)(96 * v9));
    while (1)
    {
      IPC::Decoder::decode<WebKit::CoreIPCContactLabeledValue>(&v34, a2);
      if (!v37)
        break;
      if (HIDWORD(v39) == (_DWORD)v39)
      {
        WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::CoreIPCContactLabeledValue>((uint64_t)&v38, (unint64_t)&v34);
      }
      else
      {
        v12 = (_QWORD *)(v38 + 96 * HIDWORD(v39));
        v13 = v34;
        v34 = 0;
        *v12 = v13;
        v14 = v35;
        v35 = 0;
        v12[1] = v14;
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::CoreIPCDateComponents,WebKit::CoreIPCCNPhoneNumber,WebKit::CoreIPCCNPostalAddress,WebKit::CoreIPCString>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v12 + 2), (uint64_t)v36);
        ++HIDWORD(v39);
      }
      std::__optional_destruct_base<WebKit::CoreIPCContactLabeledValue,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v34, v11);
      if (!--v9)
      {
        v15 = v38;
        v17 = v39;
        v16 = HIDWORD(v39);
        goto LABEL_17;
      }
    }
LABEL_36:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    std::__optional_destruct_base<WebKit::CoreIPCContactLabeledValue,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v34, v10);
    WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v31);
    goto LABEL_37;
  }
  v16 = 0;
  v17 = 0;
  v15 = 0;
LABEL_17:
  v38 = 0;
  *(_QWORD *)a1 = v15;
LABEL_18:
  v39 = 0;
  *(_DWORD *)(a1 + 8) = v17;
  *(_DWORD *)(a1 + 12) = v16;
  *(_BYTE *)(a1 + 16) = 1;
  return WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, a2);
}

void sub_1978975D0(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  va_list va;

  va_start(va, a3);
  std::__optional_destruct_base<WebKit::CoreIPCContactLabeledValue,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 - 80, v5);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WTF::RetainPtr<NSDictionary>>(uint64_t a1, uint64_t *a2)
{
  __n128 v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  char *v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  CFTypeRef v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD v25[2];
  char v26;
  char v27;
  CFTypeRef cf;
  uint64_t v29;
  char v30;
  uint64_t v31[2];

  v31[1] = *MEMORY[0x1E0C80C00];
  v31[0] = objc_opt_class();
  WTF::HashSet<objc_class *,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::HashSet((uint64_t *)&v24, v31, 1);
  WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::operator=(a2 + 7, &v24);
  v5 = a2[1];
  v6 = (char *)*a2;
  v7 = a2[2] - *a2;
  if (v5 <= v7)
  {
    v14 = 0;
    v15 = 0;
    *a2 = 0;
    a2[1] = 0;
    v16 = a2[3];
    if (v16)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
        v15 = *a2;
        v14 = a2[1];
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
    }
    goto LABEL_14;
  }
  v8 = &v6[v7];
  a2[2] = (uint64_t)(v8 + 1);
  if (!v6)
  {
    v14 = v5;
    v15 = 0;
LABEL_14:
    v5 = 0;
    v6 = 0;
    *a2 = 0;
    a2[1] = 0;
    v17 = a2[3];
    if (v17)
    {
      if (v14)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v15, v14);
        v6 = (char *)*a2;
        v5 = a2[1];
      }
      else
      {
        v5 = 0;
        v6 = 0;
      }
    }
    goto LABEL_15;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_15:
    *a2 = 0;
    a2[1] = 0;
    v18 = a2[3];
    if (v18 && v5)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v18 + 16))(v18, v6);
    goto LABEL_16;
  }
  if (!v9)
  {
    *(_QWORD *)a1 = 0;
LABEL_12:
    v13 = 0;
    *(_BYTE *)(a1 + 8) = 1;
    goto LABEL_18;
  }
  IPC::Decoder::decode<WebKit::CoreIPCDictionary>(a2, v6, (uint64_t)&cf, v4);
  if (v30)
  {
    v25[0] = cf;
    v11 = v29;
    cf = 0;
    v29 = 0;
    v25[1] = v11;
    v26 = 1;
    WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&cf, v10);
    v27 = 1;
    WebKit::CoreIPCDictionary::toID((WebKit::CoreIPCDictionary *)v25, &cf);
    v12 = cf;
    if (v27 && v26)
      WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v25, v6);
    *(_QWORD *)a1 = v12;
    if (v12)
    {
      CFRetain(v12);
      *(_BYTE *)(a1 + 8) = 1;
      CFRelease(v12);
      v13 = 0;
      goto LABEL_18;
    }
    goto LABEL_12;
  }
LABEL_16:
  v6 = (char *)*a2;
  v19 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v20 = a2[3];
  if (v20 && v19)
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v20 + 16))(v20, v6);
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  v13 = 1;
LABEL_18:
  if (v24)
  {
    WTF::fastFree((WTF *)(v24 - 2), v6);
    if (!v13)
      return;
  }
  else if (!v13)
  {
    return;
  }
  v21 = *a2;
  v22 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v23 = a2[3];
  if (v23)
  {
    if (v22)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v21);
  }
}

void sub_1978978C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16)
{
  const void *v16;
  void *v18;

  CFRelease(v16);
  if (a9)
    WTF::fastFree((WTF *)(a9 - 16), v18);
  _Unwind_Resume(a1);
}

_QWORD *IPC::ArgumentCoder<WebKit::CoreIPCData,void>::encode(_QWORD *a1, CFDataRef *a2)
{
  const UInt8 *BytePtr;
  size_t Length;

  BytePtr = CFDataGetBytePtr(*a2);
  Length = CFDataGetLength(*a2);
  return IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(a1, BytePtr, Length);
}

_QWORD *IPC::ArgumentCoder<WebKit::CoreIPCDate,void>::encode(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = result[2];
  v3 = *result + v2;
  v4 = (v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (v5)
  {
    v7 = v6 + v2;
    v8 = v7 + 8;
    if (v7 > 0xFFFFFFFFFFFFFFF7 || v8 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_QWORD *)(*result + v7) = *a2;
      result[2] = v8;
    }
  }
  return result;
}

char *IPC::ArgumentCoder<WebKit::CoreIPCDateComponents,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  const void *v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char *v8;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 8));
  v4 = *(const void **)(a2 + 16);
  v5 = *(unsigned int *)(a2 + 28);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v5;
  if ((_DWORD)v5)
  {
    v7 = 8 * v5;
    v8 = IPC::Encoder::grow(a1, 8uLL, v7);
    return (char *)memcpy(v8, v4, v7);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::CoreIPCDictionary,void>::decode@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t result;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];
  uint64_t v11;
  uint64_t v12;
  char v13;

  result = IPC::Decoder::decode<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)&v11, a4);
  if (*a1)
  {
    if (!v13)
    {
      __break(1u);
      return result;
    }
    v8 = v11;
    v11 = 0;
    v10[0] = 0;
    *(_QWORD *)a3 = v8;
    v10[1] = 0;
    v9 = v12;
    v12 = 0;
    *(_QWORD *)(a3 + 8) = v9;
    *(_BYTE *)(a3 + 16) = 1;
    result = WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v7);
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  if (v13)
    return WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v11, v7);
  return result;
}

uint64_t IPC::Decoder::decode<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  result = IPC::VectorArgumentCoder<false,WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3, a4);
  if (!*(_BYTE *)(a3 + 16))
  {
    v7 = *a1;
    v8 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v9 = v8 == 0;
    else
      v9 = 1;
    if (!v9)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v7);
  }
  return result;
}

void sub_197897B18(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 16))
    WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::CoreIPCError,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  const __CFDictionary *v8;
  WTF::StringImpl *v10;

  v4 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v4 += 2;
  v10 = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)&v10);
  v6 = v10;
  v10 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v7;
  v8 = *(const __CFDictionary **)(a2 + 16);
  if (v8)
    CFRetain(*(CFTypeRef *)(a2 + 16));
  IPC::ArgumentCoder<__CFDictionary const*,void>::encode(a1, v8);
  if (v8)
    CFRelease(v8);
  return IPC::ArgumentCoder<std::unique_ptr<WebKit::CoreIPCError>,void>::encode<IPC::Encoder,std::unique_ptr<WebKit::CoreIPCError> const&>(a1, (_QWORD *)(a2 + 24));
}

void sub_197897BF8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebKit::CoreIPCError,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char v5;
  char v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  CFTypeRef v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  CFTypeRef v17;
  WTF::StringImpl **v18;
  CFTypeRef v19;
  WTF::StringImpl *v20;
  CFTypeRef v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl **v29;
  char v30;
  CFTypeRef v31;
  char v32;
  WTF::StringImpl *v33;
  char v34;
  WTF::StringImpl **v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  CFTypeRef cf;
  WTF::StringImpl **v39;
  char v40;

  IPC::Decoder::decode<WTF::String>(a1, &v33);
  v4 = IPC::Decoder::decode<long long>(a1);
  v6 = v5;
  IPC::Decoder::decode<WTF::RetainPtr<__CFDictionary const*>>(a1, (uint64_t)&v31);
  if (!*a1)
    goto LABEL_34;
  if (!v32)
    goto LABEL_36;
  if ((WebKit::CoreIPCError::hasValidUserInfo((id *)&v31) & 1) != 0)
  {
    v8 = a1[1];
    v7 = (WTF::StringImpl *)*a1;
    v9 = a1[2] - *a1;
    if (v8 <= v9)
      goto LABEL_37;
    v10 = (unsigned __int8 *)v7 + v9;
    a1[2] = (uint64_t)(v10 + 1);
    if (!v7)
    {
      v23 = v8;
      v24 = 0;
      goto LABEL_38;
    }
    v11 = *v10;
    if (v11 >= 2)
      goto LABEL_39;
    if (v11)
    {
      IPC::Decoder::decode<WebKit::CoreIPCError>(&v36, a1);
      if (v40)
      {
        v12 = WTF::fastMalloc((WTF *)0x20);
        v13 = v36;
        v36 = 0;
        *(_QWORD *)v12 = v13;
        *(_QWORD *)(v12 + 8) = v37;
        v14 = cf;
        cf = 0;
        *(_QWORD *)(v12 + 16) = v14;
        v15 = v39;
        v39 = 0;
        *(_QWORD *)(v12 + 24) = v15;
        v35 = 0;
        v29 = (WTF::StringImpl **)v12;
        v30 = 1;
        std::unique_ptr<WebKit::CoreIPCError>::reset[abi:sn180100](&v35, 0);
      }
      else
      {
        LOBYTE(v29) = 0;
        v30 = 0;
      }
      std::__optional_destruct_base<WebKit::CoreIPCError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v36);
      if (!v30)
        goto LABEL_41;
    }
    else
    {
      v29 = 0;
      v30 = 1;
    }
    while (1)
    {
      if (!*a1)
      {
        *(_BYTE *)a2 = 0;
        *(_BYTE *)(a2 + 32) = 0;
        goto LABEL_22;
      }
      if (v34 && v6 && v32 && v30)
        break;
LABEL_36:
      __break(1u);
LABEL_37:
      v23 = 0;
      v24 = 0;
      *a1 = 0;
      a1[1] = 0;
      v25 = a1[3];
      if (v25)
      {
        if (v8)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
          v24 = *a1;
          v23 = a1[1];
        }
        else
        {
          v23 = 0;
          v24 = 0;
        }
      }
LABEL_38:
      v8 = 0;
      v7 = 0;
      *a1 = 0;
      a1[1] = 0;
      v26 = a1[3];
      if (v26)
      {
        if (v23)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, v24, v23);
          v7 = (WTF::StringImpl *)*a1;
          v8 = a1[1];
        }
        else
        {
          v8 = 0;
          v7 = 0;
        }
      }
LABEL_39:
      *a1 = 0;
      a1[1] = 0;
      v27 = a1[3];
      if (v27 && v8)
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v27 + 16))(v27, v7);
      LOBYTE(v29) = 0;
      v30 = 0;
LABEL_41:
      v7 = (WTF::StringImpl *)*a1;
      v8 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v28 = a1[3];
      if (v28 && v8)
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v28 + 16))(v28, v7);
    }
    v16 = v33;
    v33 = 0;
    v17 = v31;
    v31 = 0;
    v18 = v29;
    v29 = 0;
    v36 = 0;
    v37 = v4;
    *(_QWORD *)a2 = v16;
    *(_QWORD *)(a2 + 8) = v4;
    cf = 0;
    v39 = 0;
    *(_QWORD *)(a2 + 16) = v17;
    *(_QWORD *)(a2 + 24) = v18;
    *(_BYTE *)(a2 + 32) = 1;
    std::unique_ptr<WebKit::CoreIPCError>::reset[abi:sn180100](&v39, 0);
    v19 = cf;
    cf = 0;
    if (v19)
      CFRelease(v19);
    v20 = v36;
    v36 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v7);
      else
        *(_DWORD *)v20 -= 2;
    }
LABEL_22:
    if (v30)
      std::unique_ptr<WebKit::CoreIPCError>::reset[abi:sn180100](&v29, 0);
  }
  else
  {
LABEL_34:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
  }
  if (v32)
  {
    v21 = v31;
    v31 = 0;
    if (v21)
      CFRelease(v21);
  }
  if (v34)
  {
    v22 = v33;
    v33 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v7);
      else
        *(_DWORD *)v22 -= 2;
    }
  }
}

void sub_197897F24(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, CFTypeRef cf, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  CFTypeRef v20;

  if (a10)
    std::unique_ptr<WebKit::CoreIPCError>::reset[abi:sn180100]((WTF::StringImpl ***)&a9, 0);
  if (a12)
  {
    v20 = cf;
    cf = 0;
    if (v20)
      CFRelease(v20);
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a14, a2);
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<WebKit::CoreIPCCVPixelBufferRef,void>::decode(IPC::Decoder *a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE v4[4];
  _BYTE v5[4];
  char v6;

  IPC::Decoder::takeLastAttachment(a1, v5);
  if (*(_QWORD *)a1)
  {
    if (!v6)
    {
      __break(1u);
      return;
    }
    WTF::MachSendRight::MachSendRight();
    WTF::MachSendRight::MachSendRight();
    a2[4] = 1;
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v4);
  }
  else
  {
    *a2 = 0;
    a2[4] = 0;
  }
  if (v6)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v5);
}

void sub_197898014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, __int16 a11, char a12, __int16 a13, char a14)
{
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a10);
  if (a14)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a12);
  _Unwind_Resume(a1);
}

_QWORD *IPC::ArgumentCoder<WebKit::CoreIPCFont,void>::decode@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  char v11;

  result = IPC::Decoder::decode<WebKit::CoreIPCDictionary>(&v9);
  if (*a1)
  {
    if (!v11)
    {
      __break(1u);
      return result;
    }
    v6 = v9;
    v9 = 0;
    v8[0] = 0;
    *(_QWORD *)a2 = v6;
    v8[1] = 0;
    v7 = v10;
    v10 = 0;
    *(_QWORD *)(a2 + 8) = v7;
    *(_BYTE *)(a2 + 16) = 1;
    result = (_QWORD *)WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, v5);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
  if (v11)
    return (_QWORD *)WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v5);
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::CoreIPCLocale,void>::encode(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;

  v2 = *a2;
  if (*a2)
    *(_DWORD *)v2 += 2;
  v5 = v2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)&v5);
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::CoreIPCLocale,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  const WTF::String *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  char v8;

  result = (uint64_t)IPC::Decoder::decode<WTF::String>(a1, &v7);
  if (!*a1)
    goto LABEL_7;
  if (!v8)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  result = WebKit::CoreIPCLocale::isValidIdentifier((WebKit::CoreIPCLocale *)&v7, v5);
  if ((result & 1) == 0 || !*a1)
  {
LABEL_7:
    *a2 = 0;
    a2[8] = 0;
    goto LABEL_8;
  }
  if (!v8)
    goto LABEL_14;
  result = (uint64_t)WebKit::CoreIPCLocale::CoreIPCLocale(&v6, (WTF::StringImpl *)&v7);
  *(_QWORD *)a2 = v6;
  a2[8] = 1;
LABEL_8:
  if (v8)
  {
    result = (uint64_t)v7;
    v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1978981E4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

unsigned int *IPC::ArgumentCoder<WebKit::CoreIPCNSShadow,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = a2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = a2[2];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  return IPC::encodeObjectDirectly<UIColor>(a1, (WebCore *)a2[3]);
}

void IPC::ArgumentCoder<WebKit::CoreIPCNSShadow,void>::decode(_QWORD *a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  _QWORD *v5;
  int v6;
  unint64_t v7;
  Color *v8;
  unint64_t v9;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  Color *v15;
  unint64_t v16;
  unsigned __int8 *v17;
  unsigned int v18;
  char v19;
  CFTypeRef v20;
  int v21;
  Color *v22;
  uint64_t v23;
  BOOL v24;
  unint64_t v25;
  Color *v26;
  uint64_t v27;
  unint64_t v28;
  Color *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Color *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  __int128 v40;
  unsigned __int8 v41;
  _QWORD *v42;
  char v43[8];
  char v44;
  char v45;
  CFTypeRef cf;
  char v47;
  uint64_t v48[2];

  v48[1] = *MEMORY[0x1E0C80C00];
  v5 = IPC::ArgumentCoder<CGSize,void>::decode(a1, (uint64_t)&v40, a3);
  v6 = v41;
  if (!v41)
    goto LABEL_36;
  while (1)
  {
    v7 = a1[1];
    v8 = (Color *)*a1;
    v9 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
    if (v7 >= v9 && v7 - v9 > 7)
    {
      v11 = (uint64_t *)((char *)v8 + v9);
      a1[2] = v11 + 1;
      if (v8)
      {
        v12 = 0;
        v13 = *v11;
        goto LABEL_9;
      }
      v25 = v7;
      v26 = 0;
    }
    else
    {
      v25 = 0;
      v26 = 0;
      *a1 = 0;
      a1[1] = 0;
      v27 = a1[3];
      if (v27)
      {
        if (v7)
        {
          (*(void (**)(uint64_t, Color *, unint64_t))(*(_QWORD *)v27 + 16))(v27, v8, v7);
          v26 = (Color *)*a1;
          v25 = a1[1];
        }
        else
        {
          v25 = 0;
          v26 = 0;
        }
      }
    }
    *a1 = 0;
    a1[1] = 0;
    v13 = 0;
    v5 = (_QWORD *)a1[3];
    if (v5 && v25)
      v5 = (_QWORD *)(*(uint64_t (**)(_QWORD *, Color *))(*v5 + 16))(v5, v26);
    v12 = 1;
LABEL_9:
    v48[0] = ((uint64_t (*)(_QWORD *))*MEMORY[0x1E0DCDF08])(v5);
    WTF::HashSet<objc_class *,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::HashSet((uint64_t *)&v42, v48, 1);
    WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::operator=(a1 + 7, &v42);
    v14 = a1[1];
    v15 = (Color *)*a1;
    v16 = a1[2] - *a1;
    if (v14 <= v16)
    {
      v28 = 0;
      v29 = 0;
      *a1 = 0;
      a1[1] = 0;
      v30 = a1[3];
      if (v30)
      {
        if (v14)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30);
          v29 = (Color *)*a1;
          v28 = a1[1];
        }
        else
        {
          v28 = 0;
          v29 = 0;
        }
      }
      goto LABEL_45;
    }
    v17 = (unsigned __int8 *)v15 + v16;
    a1[2] = v17 + 1;
    if (!v15)
    {
      v28 = v14;
      v29 = 0;
LABEL_45:
      v14 = 0;
      v15 = 0;
      *a1 = 0;
      a1[1] = 0;
      v31 = a1[3];
      if (v31)
      {
        if (v28)
        {
          (*(void (**)(uint64_t, Color *, unint64_t))(*(_QWORD *)v31 + 16))(v31, v29, v28);
          v15 = (Color *)*a1;
          v14 = a1[1];
        }
        else
        {
          v14 = 0;
          v15 = 0;
        }
      }
      goto LABEL_46;
    }
    v18 = *v17;
    if (v18 < 2)
    {
      if (v18)
      {
        IPC::Decoder::decode<WebKit::CoreIPCColor>(a1, &cf);
        v19 = v47;
        if (v47)
        {
          WebCore::Color::Color();
          v19 = 1;
          v44 = 1;
        }
        else
        {
          v43[0] = 0;
        }
      }
      else
      {
        LOBYTE(cf) = 0;
        v47 = 0;
        v43[0] = 0;
        v44 = 0;
        v19 = 1;
      }
      v45 = v19;
      std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&cf, v15);
      goto LABEL_18;
    }
LABEL_46:
    *a1 = 0;
    a1[1] = 0;
    v32 = a1[3];
    if (v32 && v14)
      (*(void (**)(uint64_t, Color *))(*(_QWORD *)v32 + 16))(v32, v15);
    v43[0] = 0;
    v45 = 0;
LABEL_18:
    if (v45
      || (v15 = (Color *)*a1, v33 = a1[1], *a1 = 0, a1[1] = 0, (v34 = a1[3]) != 0)
      && v33
      && ((*(void (**)(uint64_t, Color *))(*(_QWORD *)v34 + 16))(v34, v15), v45))
    {
      if (v44)
      {
        WebCore::cocoaColor((WebCore *)v43, v15);
        v20 = cf;
        if (!v45)
        {
          if (!cf)
            goto LABEL_26;
          goto LABEL_25;
        }
      }
      else
      {
        v20 = 0;
      }
      std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v43, v15);
      if (!v20)
      {
LABEL_26:
        v21 = 0;
        goto LABEL_27;
      }
LABEL_25:
      CFRetain(v20);
      CFRelease(v20);
      goto LABEL_26;
    }
    v20 = 0;
    v21 = 1;
LABEL_27:
    if (v42)
      break;
    if (!v21)
      goto LABEL_29;
LABEL_53:
    v35 = (Color *)*a1;
    v36 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v37 = a1[3];
    if (!v37
      || !v36
      || (v39 = v21, (*(void (**)(uint64_t, Color *))(*(_QWORD *)v37 + 16))(v37, v35), v21 = v39, !*a1))
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 32) = 0;
      return;
    }
LABEL_30:
    if (v6 && !v12 && !v21)
    {
      *(_OWORD *)a2 = v40;
      *(_QWORD *)(a2 + 16) = v13;
      *(_QWORD *)(a2 + 24) = v20;
      *(_BYTE *)(a2 + 32) = 1;
      return;
    }
    __break(1u);
LABEL_36:
    v22 = (Color *)*a1;
    v23 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = (_QWORD *)a1[3];
    if (v5)
      v24 = v23 == 0;
    else
      v24 = 1;
    if (!v24)
      v5 = (_QWORD *)(*(uint64_t (**)(_QWORD *, Color *))(*v5 + 16))(v5, v22);
  }
  v38 = v21;
  WTF::fastFree((WTF *)(v42 - 2), v15);
  v21 = v38;
  if (v38)
    goto LABEL_53;
LABEL_29:
  if (*a1)
    goto LABEL_30;
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 32) = 0;
  if (v20)
    CFRelease(v20);
}

void sub_197898684(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22)
{
  if (a18)
    std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a16, a2);
  if (a15)
    WTF::fastFree((WTF *)(a15 - 16), a2);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebKit::CoreIPCNSURLProtectionSpace,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::encodeObjectDirectly<NSDictionary>(a1, *(NSDictionary **)a2);
  IPC::encodeObjectDirectly<NSString>((uint64_t)a1, *(_QWORD *)(a2 + 8));
  IPC::encodeObjectDirectly<NSNumber>(a1, *(WebKit::CoreIPCNumber **)(a2 + 16));
  IPC::encodeObjectDirectly<NSNumber>(a1, *(WebKit::CoreIPCNumber **)(a2 + 24));
  IPC::encodeObjectDirectly<NSString>((uint64_t)a1, *(_QWORD *)(a2 + 32));
  IPC::encodeObjectDirectly<NSNumber>(a1, *(WebKit::CoreIPCNumber **)(a2 + 40));
  IPC::ArgumentCoder<__SecTrust *,void>::encode((uint64_t)a1);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::RetainPtr<NSData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WTF::RetainPtr<NSData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 56);
}

void IPC::ArgumentCoder<WebKit::CoreIPCNSValue,void>::decode(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  char v4;
  _BYTE v5[8];
  _BYTE v6[24];
  int v7;
  _BYTE v8[8];
  _BYTE v9[24];
  int v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<std::variant<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding>>(a1, (uint64_t)v8);
  if (*a1)
  {
    if (!v11)
      __break(1u);
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v6, (uint64_t)v9);
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(a2 + 8), (uint64_t)v6);
    a2[40] = 1;
    if (v7 != -1)
      ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJ8_NSRangeEEEN6WebKit19CoreIPCSecureCodingEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v7])(&v4, v6);
  }
  else
  {
    *a2 = 0;
    a2[40] = 0;
  }
  if (v11)
  {
    if (v10 != -1)
      ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJ8_NSRangeEEEN6WebKit19CoreIPCSecureCodingEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v10])(v5, v9);
  }
}

void sub_197898860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,int a24,char a25)
{
  uint64_t v25;
  uint64_t v26;

  if (a18 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJ8_NSRangeEEEN6WebKit19CoreIPCSecureCodingEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[a18])(&a13, v26);
  if (a25)
  {
    if (a23 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJ8_NSRangeEEEN6WebKit19CoreIPCSecureCodingEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[a23])(&a14, v25);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<std::variant<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::variant<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 40))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_197898928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  if (*(_BYTE *)(v13 + 40))
  {
    v15 = *(unsigned int *)(v13 + 32);
    if ((_DWORD)v15 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJ8_NSRangeEEEN6WebKit19CoreIPCSecureCodingEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v15])(&a13, v13 + 8);
    *(_DWORD *)(v13 + 32) = -1;
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebKit::CoreIPCPKPayment,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::encodeObjectDirectly<PKPaymentToken>(a1, *(objc_object **)a2);
  IPC::encodeObjectDirectly<PKContact>(a1, *(PKContact **)(a2 + 8));
  IPC::encodeObjectDirectly<PKContact>(a1, *(PKContact **)(a2 + 16));
  IPC::encodeObjectDirectly<PKShippingMethod>(a1, *(objc_object **)(a2 + 24));
  IPC::encodeObjectDirectly<NSData>(a1, *(CFTypeRef *)(a2 + 32));
  IPC::encodeObjectDirectly<NSDictionary>(a1, *(NSDictionary **)(a2 + 40));
  IPC::encodeObjectDirectly<NSNumber>(a1, *(WebKit::CoreIPCNumber **)(a2 + 48));
  IPC::encodeObjectDirectly<NSString>((uint64_t)a1, *(_QWORD *)(a2 + 56));
}

void IPC::Decoder::decode<WTF::RetainPtr<PKContact>>(uint64_t a1, uint64_t *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v9[0] = ((uint64_t (*)(void))*MEMORY[0x1E0DCDF38])();
  WTF::HashSet<objc_class *,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::HashSet((uint64_t *)&v8, v9, 1);
  WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::operator=(a2 + 7, &v8);
  IPC::decodeRequiringAllowedClasses<PKContact,PKContact*>(a2, a1);
  if (v8)
    WTF::fastFree((WTF *)(v8 - 2), v4);
  if (!*(_BYTE *)(a1 + 8))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v7 = a2[3];
    if (v7)
    {
      if (v6)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v5);
    }
  }
}

void sub_197898AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  const void *v12;

  if (*(_BYTE *)(v10 + 8))
  {
    v12 = *(const void **)v10;
    *(_QWORD *)v10 = 0;
    if (v12)
      CFRelease(v12);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WTF::RetainPtr<NSDateComponents>>(_BYTE *a1, uint64_t *a2)
{
  void *v4;
  CFTypeRef v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  CFTypeRef cf;
  _BYTE v11[40];
  char v12;
  uint64_t v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  v13[0] = objc_opt_class();
  WTF::HashSet<objc_class *,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::HashSet((uint64_t *)&v9, v13, 1);
  WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::operator=(a2 + 7, &v9);
  IPC::Decoder::decode<std::optional<WebKit::CoreIPCDateComponents>>((uint64_t)v11, a2);
  if (!v12)
  {
    *a1 = 0;
    a1[8] = 0;
    goto LABEL_11;
  }
  if (!v11[32])
  {
    v5 = 0;
    goto LABEL_7;
  }
  WebKit::CoreIPCDateComponents::toID((WebKit::CoreIPCDateComponents *)v11, &cf);
  v5 = cf;
  if (v12)
LABEL_7:
    std::__optional_destruct_base<WebKit::CoreIPCDateComponents,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v11, v4);
  *(_QWORD *)a1 = v5;
  if (v5)
  {
    CFRetain(v5);
    a1[8] = 1;
    CFRelease(v5);
  }
  else
  {
    a1[8] = 1;
  }
LABEL_11:
  if (v9)
    WTF::fastFree((WTF *)(v9 - 2), v4);
  if (!a1[8])
  {
    v6 = *a2;
    v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v8 = a2[3];
    if (v8)
    {
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v6);
    }
  }
}

void sub_197898C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  const void *v16;
  void *v18;

  CFRelease(v16);
  if (a9)
    WTF::fastFree((WTF *)(a9 - 16), v18);
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<WebKit::CoreIPCPKPaymentMethod,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::encodeObjectDirectly<NSNumber>(a1, *(WebKit::CoreIPCNumber **)a2);
  IPC::encodeObjectDirectly<NSString>((uint64_t)a1, *(_QWORD *)(a2 + 8));
  IPC::encodeObjectDirectly<NSString>((uint64_t)a1, *(_QWORD *)(a2 + 16));
  IPC::encodeObjectDirectly<PKSecureElementPass>((uint64_t)a1, *(void **)(a2 + 24));
  IPC::encodeObjectDirectly<NSString>((uint64_t)a1, *(_QWORD *)(a2 + 32));
  IPC::encodeObjectDirectly<CNContact>(a1, *(CNContact **)(a2 + 40));
  IPC::encodeObjectDirectly<NSString>((uint64_t)a1, *(_QWORD *)(a2 + 48));
  IPC::encodeObjectDirectly<NSNumber>(a1, *(WebKit::CoreIPCNumber **)(a2 + 56));
}

char *IPC::ArgumentCoder<WebKit::CoreIPCPresentationIntent,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *result;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = a2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = a2[2];
  v7 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *v7 = 1;
    IPC::ArgumentCoder<WebKit::CoreIPCPresentationIntent,void>::encode(a1, a2[2]);
  }
  else
  {
    *v7 = 0;
  }
  v8 = a2[3];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v8;
  v9 = (const void *)a2[4];
  v10 = *((unsigned int *)a2 + 11);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v10;
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    v12 = IPC::Encoder::grow(a1, 8uLL, v11);
    memcpy(v12, v9, v11);
  }
  v13 = a2[6];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v13;
  v14 = a2[7];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v14;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2 + 8);
  v15 = a2[9];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v15;
  v16 = a2[10];
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v16;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::CoreIPCURL,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  __int128 v8;
  __int128 v9;
  WTF::StringImpl *v10;
  __int128 v11;
  __int128 v12;
  char v13;

  result = IPC::Decoder::decode<WTF::URL>(a1, &v10);
  if (*a1)
  {
    if (!v13)
    {
      __break(1u);
      return result;
    }
    v6 = v10;
    v10 = 0;
    v7 = v6;
    v8 = v11;
    v9 = v12;
    LODWORD(v11) = v11 & 0xFFFFFFFE;
    WTF::URL::URL((uint64_t)a2, (uint64_t *)&v7);
    a2[40] = 1;
    result = v7;
    v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    *a2 = 0;
    a2[40] = 0;
  }
  if (v13)
  {
    result = v10;
    v10 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_197898F28(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a20 && a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, a2);
    else
      *(_DWORD *)a15 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebKit::CoreIPCCFCharacterSet,void>::encode(uint64_t a1, CFDataRef *a2)
{
  const __CFData *v3;
  const UInt8 *BytePtr;
  size_t Length;

  v3 = *a2;
  BytePtr = CFDataGetBytePtr(*a2);
  Length = CFDataGetLength(v3);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, BytePtr, Length);
}

_QWORD *IPC::ArgumentCoder<WebKit::CoreIPCCFCharacterSet,void>::encode(_QWORD *a1, CFDataRef *a2)
{
  const __CFData *v3;
  const UInt8 *BytePtr;
  size_t Length;

  v3 = *a2;
  BytePtr = CFDataGetBytePtr(*a2);
  Length = CFDataGetLength(v3);
  return IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(a1, BytePtr, Length);
}

void IPC::ArgumentCoder<WebKit::WebPushD::PushMessageForTesting,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 16));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 56));
  v4 = *(_BYTE *)(a2 + 64);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<std::optional<WebCore::NotificationPayload>,void>::encode<IPC::Encoder,std::optional<WebCore::NotificationPayload>>(a1, a2 + 72);
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebPushD::PushMessageForTesting,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  int v9;
  BOOL i;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  __int128 v32;
  __int128 v33;
  WTF::StringImpl *v34;
  BOOL v35;
  _BYTE v36[144];
  _BYTE v37[144];
  char v38;
  WTF::StringImpl *v39;
  char v40;
  WTF::StringImpl *v41;
  __int128 v42;
  __int128 v43;
  char v44;
  WTF::StringImpl *v45;
  char v46;
  WTF::StringImpl *v47;
  char v48;

  IPC::Decoder::decode<WTF::String>(a1, &v47);
  IPC::Decoder::decode<WTF::String>(a1, &v45);
  IPC::Decoder::decode<WTF::URL>(a1, &v41);
  IPC::Decoder::decode<WTF::String>(a1, &v39);
  v4 = a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
    goto LABEL_52;
  v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v21 = v4;
    v22 = 0;
    goto LABEL_53;
  }
  v8 = *v7;
  if (v8 >= 2)
    goto LABEL_54;
  v9 = 0;
  for (i = v8 != 0; ; i = 0)
  {
    result = (WTF::StringImpl *)IPC::Decoder::decode<std::optional<WebCore::NotificationPayload>>(a1, v37);
    if (!*a1)
    {
      *a2 = 0;
      a2[216] = 0;
      goto LABEL_28;
    }
    if (v48)
    {
      v13 = v47;
      v47 = 0;
      v29 = v13;
      if (v46)
      {
        v14 = v45;
        v45 = 0;
        v30 = v14;
        if (v44)
        {
          v15 = v41;
          v41 = 0;
          v31 = v15;
          v32 = v42;
          v33 = v43;
          LODWORD(v42) = v42 & 0xFFFFFFFE;
          if (v40)
          {
            v16 = v39;
            v39 = 0;
            v34 = v16;
            if (!v9)
            {
              v35 = i;
              if (v38)
                break;
            }
          }
        }
      }
    }
    __break(1u);
LABEL_52:
    v21 = 0;
    v22 = 0;
    *a1 = 0;
    a1[1] = 0;
    v23 = a1[3];
    if (v23)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
        v22 = *a1;
        v21 = a1[1];
      }
      else
      {
        v21 = 0;
        v22 = 0;
      }
    }
LABEL_53:
    v4 = 0;
    v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    v24 = a1[3];
    if (v24)
    {
      if (v21)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, v22, v21);
        v5 = *a1;
        v4 = a1[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
LABEL_54:
    *a1 = 0;
    a1[1] = 0;
    v25 = a1[3];
    if (v25 && v4)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v5);
    v26 = *a1;
    v27 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v28 = a1[3];
    if (v28 && v27)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v26);
    v9 = 1;
  }
  std::__optional_move_base<WebCore::NotificationPayload,false>::__optional_move_base[abi:sn180100](v36, (uint64_t)v37);
  WebKit::WebPushD::PushMessageForTesting::PushMessageForTesting((uint64_t)a2, (uint64_t *)&v29);
  a2[216] = 1;
  std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v36, v17);
  v18 = v34;
  v34 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v12);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v31;
  v31 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v12);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v30;
  v30 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v12);
    else
      *(_DWORD *)v20 -= 2;
  }
  result = v29;
  v29 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_28:
  if (v38)
    result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v37, v12);
  if (v40)
  {
    result = v39;
    v39 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v44)
  {
    result = v41;
    v41 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v46)
  {
    result = v45;
    v45 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v48)
  {
    result = v47;
    v47 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_19789941C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  uint64_t v54;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;

  if (*(_BYTE *)(v54 - 136))
  {
    v56 = *(WTF::StringImpl **)(v54 - 144);
    *(_QWORD *)(v54 - 144) = 0;
    if (v56)
    {
      if (*(_DWORD *)v56 == 2)
        WTF::StringImpl::destroy(v56, a2);
      else
        *(_DWORD *)v56 -= 2;
    }
  }
  if (*(_BYTE *)(v54 - 88))
  {
    v57 = *(WTF::StringImpl **)(v54 - 128);
    *(_QWORD *)(v54 - 128) = 0;
    if (v57)
    {
      if (*(_DWORD *)v57 == 2)
        WTF::StringImpl::destroy(v57, a2);
      else
        *(_DWORD *)v57 -= 2;
    }
  }
  if (*(_BYTE *)(v54 - 72))
  {
    v58 = *(WTF::StringImpl **)(v54 - 80);
    *(_QWORD *)(v54 - 80) = 0;
    if (v58)
    {
      if (*(_DWORD *)v58 == 2)
        WTF::StringImpl::destroy(v58, a2);
      else
        *(_DWORD *)v58 -= 2;
    }
  }
  if (*(_BYTE *)(v54 - 56))
  {
    v59 = *(WTF::StringImpl **)(v54 - 64);
    *(_QWORD *)(v54 - 64) = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2)
        WTF::StringImpl::destroy(v59, a2);
      else
        *(_DWORD *)v59 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,void>::decode(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v13;
  _QWORD *v14;

  v1 = a1[1];
  v2 = *a1;
  v3 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v1 >= v3 && v1 - v3 > 7)
  {
    v5 = (_QWORD *)(v2 + v3);
    a1[2] = v5 + 1;
    if (!v2)
      goto LABEL_20;
    if ((unint64_t)(*v5 - 1) > 0xFFFFFFFFFFFFFFFDLL)
    {
LABEL_14:
      v7 = 0;
LABEL_15:
      v6 = 0;
    }
    else
    {
      v6 = *v5 & 0xFFFFFFFFFFFFFF00;
      v7 = *v5;
    }
  }
  else
  {
    v8 = 0;
    v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10)
    {
      v14 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v10 + 16))(v10, v2, v1);
        a1 = v14;
        v9 = *v14;
        v8 = v14[1];
      }
      else
      {
        v8 = 0;
        v9 = 0;
      }
    }
    while (1)
    {
      v7 = 0;
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      v11 = a1[3];
      if (!v11)
        break;
      v13 = a1;
      if (!v8)
        goto LABEL_14;
      a1 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v9);
      v2 = *v13;
      if (!*v13)
      {
        v7 = 0;
        goto LABEL_15;
      }
      __break(1u);
LABEL_20:
      v8 = v1;
      v9 = v2;
    }
  }
  return v6 | v7;
}

uint64_t IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,void>::decode(uint64_t *a1)
{
  uint64_t result;
  char v3;
  uint64_t v4;
  unint64_t v5;

  result = IPC::Decoder::decode<unsigned long long>(a1);
  v4 = *a1;
  if (!*a1)
  {
    v5 = 0;
    return v5 | v4;
  }
  if (v3)
  {
    v5 = result & 0xFFFFFFFFFFFFFF00;
    v4 = result;
    if ((unint64_t)(result - 1) > 0xFFFFFFFFFFFFFFFDLL)
    {
      v4 = 0;
      v5 = 0;
    }
    return v5 | v4;
  }
  __break(1u);
  return result;
}

unint64_t IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void>::decode(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;

  v1 = a1[1];
  v2 = *a1;
  v3 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v1 >= v3 && v1 - v3 > 7)
  {
    v5 = (_QWORD *)(v2 + v3);
    a1[2] = v5 + 1;
    if (!v2)
      goto LABEL_20;
    if ((unint64_t)(*v5 - 1) > 0xFFFFFFFFFFFFFFFDLL)
    {
LABEL_18:
      v7 = 0;
LABEL_15:
      v6 = 0;
    }
    else
    {
      v6 = *v5 & 0xFFFFFFFFFFFFFF00;
      v7 = *v5;
    }
  }
  else
  {
    v9 = 0;
    v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11)
    {
      v14 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v2, v1);
        a1 = v14;
        v10 = *v14;
        v9 = v14[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
    while (1)
    {
      v7 = 0;
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      v12 = a1[3];
      if (!v12)
        break;
      v13 = a1;
      if (!v9)
        goto LABEL_18;
      a1 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v10);
      v2 = *v13;
      if (!*v13)
      {
        v7 = 0;
        goto LABEL_15;
      }
      __break(1u);
LABEL_20:
      v9 = v1;
      v10 = v2;
    }
  }
  return v6 | v7;
}

char *IPC::ArgumentCoder<CGSize,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *result;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = a2[1];
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v5;
  return result;
}

_QWORD *IPC::ArgumentCoder<CGRect,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  __n128 v5;
  _QWORD *result;
  int v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  __int128 v13;
  unsigned __int8 v14;
  __int128 v15;
  char v16;

  IPC::Decoder::decode<CGPoint>(a1, (uint64_t)&v15, a3);
  result = IPC::ArgumentCoder<CGSize,void>::decode(a1, (uint64_t)&v13, v5);
  v7 = v14;
  if (!v14)
    goto LABEL_8;
  while (*a1)
  {
    if (v16 && v7)
    {
      v8 = v13;
      *(_OWORD *)a2 = v15;
      *(_OWORD *)(a2 + 16) = v8;
      *(_BYTE *)(a2 + 32) = 1;
      return result;
    }
    __break(1u);
LABEL_8:
    v9 = *a1;
    v10 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v11 = v10 == 0;
    else
      v11 = 1;
    if (!v11)
    {
      v12 = v7;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v9);
      v7 = v12;
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 32) = 0;
  return result;
}

_QWORD *IPC::Decoder::decode<CGPoint>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::ArgumentCoder<CGSize,void>::decode(a1, a2, a3);
  if (!*(_BYTE *)(a2 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v6);
  }
  return result;
}

char *IPC::ArgumentCoder<WebCore::OutOfLineColorDataForIPC,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  int v5;
  int v6;
  int v7;
  int v8;
  char *result;

  v4 = *(_BYTE *)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v6;
  v7 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v7;
  v8 = *(_DWORD *)(a2 + 16);
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = v8;
  return result;
}

uint64_t *IPC::ArgumentCoder<WebCore::Color,void>::encode(uint64_t *a1, WebCore::Color *this)
{
  _BYTE v4[32];

  WebCore::Color::data(this);
  return IPC::ArgumentCoder<std::optional<WebCore::ColorDataForIPC>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebCore::ColorDataForIPC>>(a1, v4);
}

char *IPC::ArgumentCoder<WebCore::NotificationPayload,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v2;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 5);
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, v2 + 6);
  IPC::ArgumentCoder<std::optional<WebCore::NotificationOptionsPayload>,void>::encode<IPC::Encoder,std::optional<WebCore::NotificationOptionsPayload> const&>(a1, (uint64_t)(v2 + 8));
  LOBYTE(v2) = *((_BYTE *)v2 + 128);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::NotificationPayload,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  __int16 v7;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  unsigned __int16 v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  int v28;
  BOOL v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  WTF::StringImpl *v52;
  __int128 v53;
  __int128 v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  char v57;
  char v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  __int16 v64;
  char v65;
  BOOL v66;
  uint64_t v67;
  char v68;
  char v69;
  WTF::StringImpl *v70;
  char v71;
  WTF::StringImpl *v72;
  __int128 v73;
  __int128 v74;
  char v75;
  WTF::StringImpl *v76;
  char v77;
  WTF::StringImpl *v78;
  char v79;
  WTF::StringImpl *v80;
  char v81;
  WTF::StringImpl *v82;
  char v83;

  IPC::Decoder::decode<WTF::URL>(a1, &v72);
  IPC::Decoder::decode<WTF::String>(a1, &v70);
  IPC::Decoder::decode<std::optional<unsigned long long>>(a1, (uint64_t)&v67);
  v11 = a1[1];
  v12 = *a1;
  v13 = a1[2] - *a1;
  if (v11 <= v13)
    goto LABEL_114;
  v14 = (unsigned __int8 *)(v12 + v13);
  a1[2] = (uint64_t)(v14 + 1);
  if (!v12)
  {
    v39 = v11;
    v40 = 0;
    goto LABEL_115;
  }
  v15 = *v14;
  if (v15 >= 2)
    goto LABEL_123;
  if (!v15)
  {
    v20 = 0;
    LOBYTE(v16) = 0;
    LOBYTE(v7) = 1;
    goto LABEL_36;
  }
  v16 = IPC::Decoder::decode<WebCore::NotificationDirection>(a1);
  IPC::Decoder::decode<WTF::String>(a1, &v52);
  IPC::Decoder::decode<WTF::String>(a1, &v82);
  IPC::Decoder::decode<WTF::String>(a1, &v80);
  IPC::Decoder::decode<WTF::String>(a1, &v78);
  IPC::Decoder::decode<WTF::String>(a1, &v76);
  v10 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  v18 = *a1;
  if (!*a1)
  {
    if (v77)
    {
      v43 = v76;
      v76 = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 != 2)
        {
          LOBYTE(v16) = 0;
          *(_DWORD *)v43 -= 2;
          goto LABEL_13;
        }
        v2 = (WTF::StringImpl *)v10;
        WTF::StringImpl::destroy(v43, v17);
        LOWORD(v10) = (_WORD)v2;
      }
    }
    LOBYTE(v16) = 0;
    goto LABEL_13;
  }
  if (v16 <= 0xFFu)
    goto LABEL_113;
  if (!(_BYTE)v53)
    goto LABEL_113;
  v2 = v52;
  v52 = 0;
  if (!v83)
    goto LABEL_113;
  v3 = v82;
  v82 = 0;
  if (!v81)
    goto LABEL_113;
  v4 = v80;
  v80 = 0;
  if (!v79)
    goto LABEL_113;
  v5 = v78;
  v78 = 0;
  if (!v77)
    goto LABEL_113;
  v6 = v76;
  v76 = 0;
  if ((v10 & 0xFF0000) == 0)
    goto LABEL_113;
LABEL_13:
  if (v79)
  {
    v19 = v78;
    v78 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        v7 = v10;
        WTF::StringImpl::destroy(v19, v17);
        LOWORD(v10) = v7;
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
  }
  if (v81)
  {
    v21 = v80;
    v80 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
      {
        v7 = v10;
        WTF::StringImpl::destroy(v21, v17);
        LOWORD(v10) = v7;
      }
      else
      {
        *(_DWORD *)v21 -= 2;
      }
    }
  }
  if (v83)
  {
    v22 = v82;
    v82 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
      {
        v7 = v10;
        WTF::StringImpl::destroy(v22, v17);
        LOWORD(v10) = v7;
      }
      else
      {
        *(_DWORD *)v22 -= 2;
      }
    }
  }
  if ((_BYTE)v53)
  {
    v23 = v52;
    v52 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
      {
        v7 = v10;
        WTF::StringImpl::destroy(v23, v17);
        LOWORD(v10) = v7;
      }
      else
      {
        *(_DWORD *)v23 -= 2;
      }
    }
  }
  v11 = a1[1];
  if (!v18)
  {
    v12 = *a1;
    goto LABEL_123;
  }
  LOBYTE(v7) = 0;
  v20 = 0;
LABEL_36:
  v24 = (WTF::StringImpl *)*a1;
  v25 = a1[2] - *a1;
  if (v11 > v25)
  {
    v26 = (unsigned __int8 *)v24 + v25;
    a1[2] = (uint64_t)(v26 + 1);
    if (v24)
    {
      v27 = *v26;
      if (v27 <= 1)
      {
        v28 = 0;
        v29 = v27 != 0;
        goto LABEL_40;
      }
      v51 = v10;
      goto LABEL_130;
    }
    v51 = v10;
    v49 = 0;
    goto LABEL_128;
  }
  v51 = v10;
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    v48 = a1[3];
    if (v48)
    {
      if (v11)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v48 + 16))(v48, v24);
        v49 = *a1;
        v11 = a1[1];
      }
      else
      {
        v49 = 0;
      }
    }
    else
    {
      v49 = 0;
      v11 = 0;
    }
LABEL_128:
    *a1 = 0;
    a1[1] = 0;
    v50 = a1[3];
    if (v50)
    {
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 16))(v50, v49);
        v24 = (WTF::StringImpl *)*a1;
        v11 = a1[1];
      }
      else
      {
        v24 = 0;
      }
    }
    else
    {
      v24 = 0;
      v11 = 0;
    }
LABEL_130:
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (!result
      || !v11
      || (result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result + 16))(result, v24), !*a1))
    {
      *a2 = 0;
      a2[136] = 0;
      if ((v7 & 1) != 0)
        goto LABEL_102;
LABEL_77:
      if ((v20 & 1) != 0)
        goto LABEL_102;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
        {
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v24);
          if (!v5)
            goto LABEL_86;
LABEL_84:
          if (*(_DWORD *)v5 == 2)
          {
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v24);
            if (!v4)
              goto LABEL_91;
LABEL_89:
            if (*(_DWORD *)v4 == 2)
            {
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v24);
              if (!v3)
                goto LABEL_96;
LABEL_94:
              if (*(_DWORD *)v3 == 2)
              {
                result = (WTF::StringImpl *)WTF::StringImpl::destroy(v3, v24);
                if (!v2)
                  goto LABEL_102;
                goto LABEL_99;
              }
              *(_DWORD *)v3 -= 2;
LABEL_96:
              if (!v2)
                goto LABEL_102;
LABEL_99:
              if (*(_DWORD *)v2 == 2)
                result = (WTF::StringImpl *)WTF::StringImpl::destroy(v2, v24);
              else
                *(_DWORD *)v2 -= 2;
              goto LABEL_102;
            }
            *(_DWORD *)v4 -= 2;
LABEL_91:
            if (!v3)
              goto LABEL_96;
            goto LABEL_94;
          }
          *(_DWORD *)v5 -= 2;
LABEL_86:
          if (!v4)
            goto LABEL_91;
          goto LABEL_89;
        }
        *(_DWORD *)v6 -= 2;
      }
      if (!v5)
        goto LABEL_86;
      goto LABEL_84;
    }
    v29 = 0;
    v28 = 1;
    LOWORD(v10) = v51;
LABEL_40:
    if (v75)
    {
      v30 = v72;
      v72 = 0;
      v52 = v30;
      v53 = v73;
      v54 = v74;
      LODWORD(v73) = v73 & 0xFFFFFFFE;
      if (v71)
      {
        v31 = v70;
        v70 = 0;
        v55 = v31;
        if (v69)
        {
          v56 = v67;
          v57 = v68;
          if (!v20)
          {
            v58 = 0;
            v65 = 0;
            if ((v7 & 1) == 0)
            {
              v58 = v16;
              v59 = v2;
              v60 = v3;
              v61 = v4;
              v62 = v5;
              v63 = v6;
              v64 = v10;
              v65 = 1;
              v6 = 0;
              v5 = 0;
              v4 = 0;
              v3 = 0;
              v2 = 0;
            }
            if (!v28)
              break;
          }
        }
      }
    }
LABEL_113:
    __break(1u);
LABEL_114:
    v39 = 0;
    v40 = 0;
    *a1 = 0;
    a1[1] = 0;
    v41 = a1[3];
    if (v41)
    {
      if (v11)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41);
        v40 = *a1;
        v39 = a1[1];
      }
      else
      {
        v39 = 0;
        v40 = 0;
      }
    }
LABEL_115:
    v11 = 0;
    v12 = 0;
    *a1 = 0;
    a1[1] = 0;
    v42 = a1[3];
    if (v42)
    {
      if (v39)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v42 + 16))(v42, v40, v39);
        v12 = *a1;
        v11 = a1[1];
      }
      else
      {
        v11 = 0;
        v12 = 0;
      }
    }
LABEL_123:
    *a1 = 0;
    a1[1] = 0;
    v44 = a1[3];
    if (v44 && v11)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 16))(v44, v12);
    v45 = *a1;
    v46 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v47 = a1[3];
    if (v47 && v46)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v47 + 16))(v47, v45);
      LOBYTE(v16) = 0;
      v11 = a1[1];
      v20 = 1;
      goto LABEL_36;
    }
    LOBYTE(v16) = 0;
    v11 = 0;
    v24 = (WTF::StringImpl *)*a1;
    v20 = 1;
  }
  v66 = v29;
  std::__optional_destruct_base<WebCore::NotificationPayload,false>::__optional_destruct_base[abi:sn180100]<WebCore::NotificationPayload>((uint64_t)a2, (uint64_t)&v52);
  if (v65)
  {
    v32 = v63;
    v63 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v24);
      else
        *(_DWORD *)v32 -= 2;
    }
    v33 = v62;
    v62 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v24);
      else
        *(_DWORD *)v33 -= 2;
    }
    v34 = v61;
    v61 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v24);
      else
        *(_DWORD *)v34 -= 2;
    }
    v35 = v60;
    v60 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v24);
      else
        *(_DWORD *)v35 -= 2;
    }
    v36 = v59;
    v59 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, v24);
      else
        *(_DWORD *)v36 -= 2;
    }
  }
  v37 = v55;
  v55 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v24);
    else
      *(_DWORD *)v37 -= 2;
  }
  result = v52;
  v52 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
    else
      *(_DWORD *)result -= 2;
  }
  LOBYTE(v20) = 0;
  if ((v7 & 1) == 0)
    goto LABEL_77;
LABEL_102:
  if (v71)
  {
    result = v70;
    v70 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v75)
  {
    result = v72;
    v72 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_19789A238(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, WTF::StringImpl *a20,WTF::StringImpl *a21,WTF::StringImpl *a22,WTF::StringImpl *a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,WTF::StringImpl *a30,char a31,WTF::StringImpl *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  char v41;
  WTF::StringImpl *v42;
  char v43;

  if ((v43 & 1) == 0 && (v41 & 1) == 0)
  {
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, a2);
      else
        *(_DWORD *)v42 -= 2;
    }
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, a2);
      else
        *(_DWORD *)v40 -= 2;
    }
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, a2);
      else
        *(_DWORD *)v39 -= 2;
    }
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, a2);
      else
        *(_DWORD *)v38 -= 2;
    }
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, a2);
      else
        *(_DWORD *)v37 -= 2;
    }
  }
  if (a31 && a30)
  {
    if (*(_DWORD *)a30 == 2)
      WTF::StringImpl::destroy(a30, a2);
    else
      *(_DWORD *)a30 -= 2;
  }
  if (a37 && a32)
  {
    if (*(_DWORD *)a32 == 2)
      WTF::StringImpl::destroy(a32, a2);
    else
      *(_DWORD *)a32 -= 2;
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::NotificationOptionsPayload,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char *v4;
  char v5;

  v4 = (char *)(a2 + 48);
  v5 = *(_BYTE *)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 16));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 24));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 32));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 40));
  return IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, v4);
}

void IPC::ArgumentCoder<WebKit::WebPushMessage,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 24));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 32));
  IPC::ArgumentCoder<std::optional<WebCore::NotificationPayload>,void>::encode<IPC::Encoder,std::optional<WebCore::NotificationPayload>>(a1, a2 + 72);
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebPushMessage,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF *v11;
  uint64_t v12;
  char v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[144];
  _BYTE v19[144];
  char v20;
  WTF::StringImpl *v21;
  __int128 v22;
  __int128 v23;
  char v24;
  WTF::StringImpl *v25;
  char v26;
  WTF *v27;
  uint64_t v28;
  char v29;
  char v30;

  IPC::Decoder::decode<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a1, (uint64_t)&v27);
  IPC::Decoder::decode<WTF::String>(a1, &v25);
  IPC::Decoder::decode<WTF::URL>(a1, &v21);
  result = (WTF::StringImpl *)IPC::Decoder::decode<std::optional<WebCore::NotificationPayload>>(a1, v19);
  if (!*a1)
    goto LABEL_37;
  if (!v30)
    goto LABEL_36;
  LOBYTE(v11) = 0;
  v13 = 0;
  if (v29)
  {
    v11 = v27;
    v6 = v28;
    v27 = 0;
    v28 = 0;
    v12 = v6;
    v13 = 1;
  }
  if (!v26)
    goto LABEL_36;
  v7 = v25;
  v25 = 0;
  v14 = v7;
  if (!v24 || (v8 = v21, v21 = 0, v15 = v8, v16 = v22, v17 = v23, LODWORD(v22) = v22 & 0xFFFFFFFE, !v20))
  {
LABEL_36:
    __break(1u);
LABEL_37:
    *a2 = 0;
    a2[216] = 0;
    goto LABEL_19;
  }
  std::__optional_move_base<WebCore::NotificationPayload,false>::__optional_move_base[abi:sn180100](v18, (uint64_t)v19);
  WebKit::WebPushMessage::WebPushMessage((uint64_t)a2, (uint64_t *)&v11);
  a2[216] = 1;
  std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18, v9);
  v10 = v15;
  v15 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v5);
    else
      *(_DWORD *)v10 -= 2;
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  if (v13)
  {
    result = v11;
    if (v11)
    {
      v11 = 0;
      LODWORD(v12) = 0;
      result = (WTF::StringImpl *)WTF::fastFree(result, v5);
    }
  }
LABEL_19:
  if (v20)
    result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v19, v5);
  if (v24)
  {
    result = v21;
    v21 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v26)
  {
    result = v25;
    v25 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v30 && v29)
  {
    result = v27;
    if (v27)
    {
      v27 = 0;
      LODWORD(v28) = 0;
      return (WTF::StringImpl *)WTF::fastFree(result, v5);
    }
  }
  return result;
}

void sub_19789A844(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, int a11, char a12, WTF::StringImpl *a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  BOOL v61;
  WTF *v62;

  std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100](v55, a2);
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, v58);
    else
      *(_DWORD *)a14 -= 2;
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, v58);
    else
      *(_DWORD *)a13 -= 2;
  }
  if (a12 && a9)
    WTF::fastFree(a9, v58);
  if (a55)
    std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a37, v58);
  if (*(_BYTE *)(v56 - 88))
  {
    v59 = *(WTF::StringImpl **)(v56 - 128);
    *(_QWORD *)(v56 - 128) = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2)
        WTF::StringImpl::destroy(v59, v58);
      else
        *(_DWORD *)v59 -= 2;
    }
  }
  if (*(_BYTE *)(v56 - 72))
  {
    v60 = *(WTF::StringImpl **)(v56 - 80);
    *(_QWORD *)(v56 - 80) = 0;
    if (v60)
    {
      if (*(_DWORD *)v60 == 2)
        WTF::StringImpl::destroy(v60, v58);
      else
        *(_DWORD *)v60 -= 2;
    }
  }
  if (*(_BYTE *)(v56 - 40))
    v61 = *(_BYTE *)(v56 - 48) == 0;
  else
    v61 = 1;
  if (!v61)
  {
    v62 = *(WTF **)(v56 - 64);
    if (v62)
    {
      *(_QWORD *)(v56 - 64) = 0;
      *(_DWORD *)(v56 - 56) = 0;
      WTF::fastFree(v62, v58);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<void const*,void>::encode(IPC::Encoder *a1, IPC *a2)
{
  uint64_t v3;
  int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  WebKit::CoreIPCCFType::CoreIPCCFType((WebKit::CoreIPCCFType *)&v7, a2);
  v3 = v7;
  v4 = *(_DWORD *)(v7 + 16);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  result = IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&>(a1, v3, v4);
  v6 = v7;
  v7 = 0;
  if (v6)
    return std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)&v7, v6);
  return result;
}

void sub_19789A9E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)&a10, v11);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<void const*,void>::encode(WTF::StringImpl *a1, IPC *a2)
{
  uint64_t v3;
  uint64_t v4;

  WebKit::CoreIPCCFType::CoreIPCCFType((WebKit::CoreIPCCFType *)&v4, a2);
  IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::StreamConnectionEncoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&>(a1, v4);
  v3 = v4;
  v4 = 0;
  if (v3)
    std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)&v4, v3);
}

void sub_19789AA50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)&a10, v11);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::ArgumentCoder<__CFString const*,void>::encode(_QWORD *a1)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;

  MEMORY[0x19AEABCC8](&v4);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(a1, (uint64_t *)&v4);
  result = v4;
  v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19789AACC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<__CFArray const*,void>::encode(IPC::Encoder *a1, const __CFArray *a2)
{
  void *v3;
  _BYTE v5[16];

  WebKit::CoreIPCCFArray::CoreIPCCFArray((WebKit::CoreIPCCFArray *)v5, a2);
  IPC::VectorArgumentCoder<false,WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)v5);
  return WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5, v3);
}

void sub_19789AB3C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<WTF::RetainPtr<__CFArray const*>,void>::decode(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  void *v5;
  __CFArray *v6;
  WebKit::CoreIPCCFType *v7[2];
  char v8;

  IPC::Decoder::decode<WebKit::CoreIPCCFArray>(a1, a2, (uint64_t)v7);
  if (*a1)
  {
    if (!v8)
    {
      __break(1u);
      return;
    }
    WebKit::CoreIPCCFArray::createCFArray(v7, &v6);
    *(_QWORD *)a3 = v6;
    *(_BYTE *)(a3 + 8) = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 8) = 0;
  }
  if (v8)
    WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v5);
}

void sub_19789ABCC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (a12)
    WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<__CFDictionary const*,void>::encode(IPC::Encoder *a1, const __CFDictionary *a2)
{
  void *v3;
  uint64_t result;
  WTF *v5;
  void *v6;
  uint64_t v7;

  WebKit::CoreIPCCFDictionary::CoreIPCCFDictionary((WebKit::CoreIPCCFDictionary *)&v7, a2);
  IPC::ArgumentCoder<std::unique_ptr<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::unique_ptr<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, &v7);
  result = v7;
  v7 = 0;
  if (result)
  {
    v5 = (WTF *)WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(result, v3);
    return WTF::fastFree(v5, v6);
  }
  return result;
}

void sub_19789AC34(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    v11 = (WTF *)WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<__CFBoolean const*,void>::encode(IPC::Encoder *a1, CFBooleanRef BOOLean)
{
  BOOL v3;
  char *result;

  v3 = CFBooleanGetValue(BOOLean) != 0;
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = v3;
  return result;
}

uint64_t IPC::ArgumentCoder<WTF::RetainPtr<__CFBoolean const*>,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  CFTypeRef *v6;
  CFTypeRef v7;

  result = IPC::Decoder::decode<WebKit::CoreIPCBoolean>(a1);
  v5 = *a1;
  if (!*a1)
  {
    *a2 = 0;
LABEL_8:
    a2[8] = v5;
    return result;
  }
  if ((unsigned __int16)result > 0xFFu)
  {
    v6 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    if (!(_BYTE)result)
      v6 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    v7 = *v6;
    if (*v6)
      result = (uint64_t)CFRetain(*v6);
    *(_QWORD *)a2 = v7;
    LOBYTE(v5) = 1;
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

void IPC::ArgumentCoder<__CFNumber const*,void>::encode(IPC::Encoder *a1, WebKit::CoreIPCNumber *this)
{
  uint64_t v3;
  _QWORD v4[2];

  v4[0] = WebKit::CoreIPCNumber::numberHolderForNumber(this, this);
  v4[1] = v3;
  IPC::ArgumentCoder<WebKit::CoreIPCNumber,void>::encode(a1, v4);
}

void IPC::ArgumentCoder<__SecCertificate *,void>::encode(uint64_t a1, SecCertificateRef certificate)
{
  const void *v3;
  size_t v4;
  CFTypeRef v5;
  CFTypeRef cf;

  cf = SecCertificateCopyData(certificate);
  v3 = (const void *)WebKit::CoreIPCSecCertificate::dataReference((CFDataRef *)&cf);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, v3, v4);
  v5 = cf;
  cf = 0;
  if (v5)
    CFRelease(v5);
}

void sub_19789ADA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WTF::RetainPtr<__SecCertificate *>,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  CFDataRef v5;
  CFDataRef data;
  char v7;

  IPC::Decoder::decode<WebKit::CoreIPCCFCharacterSet>(a1, &data);
  v4 = *a1;
  if (*a1)
  {
    if (!v7)
    {
      __break(1u);
      return;
    }
    *(_QWORD *)a2 = SecCertificateCreateWithData((CFAllocatorRef)*MEMORY[0x1E0C9AE00], data);
    LOBYTE(v4) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 8) = v4;
  if (v7)
  {
    v5 = data;
    data = 0;
    if (v5)
      CFRelease(v5);
  }
}

void sub_19789AE48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, char a10)
{
  if (a10)
  {
    if (cf)
      CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<__CVBuffer *,void>::encode(uint64_t a1, CFTypeRef cf)
{
  __IOSurface *v4;
  WTF::MachSendRight *MachPort;
  _BYTE v6[4];

  if (cf)
    CFRetain(cf);
  v4 = (__IOSurface *)((uint64_t (*)(CFTypeRef))*MEMORY[0x1E0DD48C0])(cf);
  MachPort = (WTF::MachSendRight *)IOSurfaceCreateMachPort(v4);
  WTF::MachSendRight::adopt(MachPort);
  IPC::Encoder::addAttachment(a1, (unint64_t)v6);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v6);
  if (cf)
    CFRelease(cf);
}

void sub_19789AEE0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WTF::RetainPtr<__CVBuffer *>,void>::decode(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  mach_port_t v5;
  char v6;

  IPC::Decoder::decode<WebKit::CoreIPCCVPixelBufferRef>(a1, &v5);
  if (*(_QWORD *)a1)
  {
    if (!v6)
    {
      __break(1u);
      return;
    }
    WebKit::CoreIPCCVPixelBufferRef::toCF(&v5, &v4);
    *(_QWORD *)a2 = v4;
    *(_BYTE *)(a2 + 8) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
  }
  if (v6)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v5);
}

void sub_19789AF74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, __int16 a11, char a12, char a13)
{
  if (a12)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a10);
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WebKit::CoreIPCCVPixelBufferRef>(IPC::Decoder *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebKit::CoreIPCCVPixelBufferRef,void>::decode(a1, a2);
  if (!a2[4])
  {
    v4 = *(_QWORD *)a1;
    v5 = *((_QWORD *)a1 + 1);
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    v6 = *((_QWORD *)a1 + 3);
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_19789AFE4(_Unwind_Exception *exception_object)
{
  WTF::MachSendRight *v1;

  if (*((_BYTE *)v1 + 4))
    WTF::MachSendRight::~MachSendRight(v1);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<__SecTrust *,void>::encode(uint64_t a1)
{
  const UInt8 *v2;
  size_t v3;
  CFTypeRef v4;
  CFTypeRef cf;

  cf = (CFTypeRef)SecTrustSerialize();
  v2 = WebKit::CoreIPCSecTrust::dataReference((CFDataRef *)&cf);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, v2, v3);
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
}

void sub_19789B068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WTF::RetainPtr<__SecTrust *>,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  CFTypeRef v6;
  CFTypeRef cf;
  char v8;

  IPC::Decoder::decode<WebKit::CoreIPCSecTrust>(a1, &cf);
  v4 = *a1;
  if (*a1)
  {
    if (!v8)
    {
      __break(1u);
      return;
    }
    v5 = (uint64_t)cf;
    if (cf)
      v5 = SecTrustDeserialize();
    *(_QWORD *)a2 = v5;
    LOBYTE(v4) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 8) = v4;
  if (v8)
  {
    v6 = cf;
    cf = 0;
    if (v6)
      CFRelease(v6);
  }
}

void sub_19789B110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, char a10)
{
  if (a10)
  {
    if (cf)
      CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *IPC::ArgumentCoder<CGColor *,void>::encode(IPC::Encoder *a1)
{
  unsigned int *result;
  void *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  WebCore::Color::createAndPreserveColorSpace();
  result = (unsigned int *)IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)&v6);
  if ((v6 & 0x8000000000000) != 0)
  {
    result = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v3);
    }
  }
  return result;
}

void sub_19789B1A8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if ((a10 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *IPC::ArgumentCoder<WTF::RetainPtr<CGColor *>,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned int *result;
  Color *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  _BYTE v9[8];
  char v10;

  result = IPC::ArgumentCoder<WebCore::Color,void>::decode(a1, v9);
  if (!v10)
  {
    v5 = (Color *)*a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (unsigned int *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *, Color *))(*(_QWORD *)result + 16))(result, v5);
  }
  if (!*a1)
  {
    *a2 = 0;
    a2[8] = 0;
    return (unsigned int *)std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v9, v5);
  }
  if (v10)
  {
    WebCore::cachedCGColor((WebCore *)v9, v5);
    *(_QWORD *)a2 = v8;
    a2[8] = 1;
    return (unsigned int *)std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v9, v5);
  }
  __break(1u);
  return result;
}

void sub_19789B288(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<CGColorSpace *,void>::encode(IPC::Encoder *a1, CGColorSpace *a2)
{
  char v3;
  uint64_t v4;
  char *result;
  _BYTE v6[8];
  unsigned int v7;
  char v8;

  WebKit::CoreIPCCGColorSpace::CoreIPCCGColorSpace((WebKit::CoreIPCCGColorSpace *)v6, a2);
  v3 = v7;
  v4 = v7;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v3;
  result = IPC::ArgumentCoder<std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>,void>::encode<IPC::Encoder,std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>> const&>(a1, (uint64_t)v6, v4);
  if (v7 != -1)
    return (char *)((uint64_t (*)(char *, _BYTE *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0
                                                             + v7))(&v8, v6);
  return result;
}

void sub_19789B324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, unsigned int a12, int a13, int a14, __int16 a15, char a16, char a17)
{
  if (a12 != -1)
    ((void (*)(char *, char *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0
                                          + a12))(&a17, &a10);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::ArgumentCoder<CGColorSpace *,void>::encode(WTF::StringImpl *a1, CGColorSpace *a2)
{
  WTF::StringImpl *result;
  _BYTE v4[8];
  unsigned int v5;
  char v6;

  WebKit::CoreIPCCGColorSpace::CoreIPCCGColorSpace((WebKit::CoreIPCCGColorSpace *)v4, a2);
  result = IPC::ArgumentCoder<std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>> const&>(a1, (uint64_t)v4);
  if (v5 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(char *, _BYTE *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0
                                                                        + v5))(&v6, v4);
  return result;
}

void sub_19789B3B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, unsigned int a12)
{
  uint64_t v12;

  if (a12 != -1)
    ((void (*)(uint64_t, char *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0
                                           + a12))(v12 - 17, &a10);
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::CoreIPCBoolean,void>::encode(IPC::Encoder *a1, char *a2)
{
  char v2;
  char *result;

  v2 = *a2;
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = v2;
  return result;
}

_QWORD *IPC::ArgumentCoder<WebKit::CoreIPCBoolean,void>::encode(_QWORD *result, _BYTE *a2)
{
  unint64_t v2;

  v2 = result[2];
  if (v2 >= result[1])
  {
    result[1] = 0;
  }
  else
  {
    *(_BYTE *)(*result + v2) = *a2;
    result[2] = v2 + 1;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::CoreIPCBoolean,void>::decode(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v6 = 0;
    v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10)
    {
      v14 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
        a1 = v14;
        v9 = *v14;
        v6 = v14[1];
      }
      else
      {
        v6 = 0;
        v9 = 0;
      }
    }
  }
  else
  {
    v4 = (unsigned __int8 *)(v2 + v3);
    a1[2] = v4 + 1;
    if (v2)
    {
      v5 = *v4;
      if (v5 >= 2)
        goto LABEL_8;
      LODWORD(v6) = v5 != 0;
      v7 = 1;
      return v6 | (v7 << 8);
    }
    v6 = v1;
    v9 = 0;
  }
  v1 = 0;
  v2 = 0;
  *a1 = 0;
  a1[1] = 0;
  v11 = a1[3];
  if (v11)
    goto LABEL_13;
LABEL_8:
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (!v6)
      break;
    v12 = a1;
    if (!v1)
    {
      LODWORD(v6) = 0;
      break;
    }
    a1 = (_QWORD *)(*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v2);
    v6 = *v12;
    if (!*v12)
      break;
    __break(1u);
LABEL_13:
    v13 = a1;
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v9, v6);
      a1 = v13;
      v2 = *v13;
      v1 = v13[1];
    }
    else
    {
      v1 = 0;
      v2 = 0;
    }
  }
  v7 = 0;
  return v6 | (v7 << 8);
}

uint64_t IPC::ArgumentCoder<WebKit::CoreIPCCFArray,void>::decode@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];
  uint64_t v10;
  uint64_t v11;
  char v12;

  result = IPC::Decoder::decode<WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)&v10);
  if (*a1)
  {
    if (!v12)
    {
      __break(1u);
      return result;
    }
    v7 = v10;
    v10 = 0;
    v9[0] = 0;
    *(_QWORD *)a3 = v7;
    v9[1] = 0;
    v8 = v11;
    v11 = 0;
    *(_QWORD *)(a3 + 8) = v8;
    *(_BYTE *)(a3 + 16) = 1;
    result = WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v6);
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  if (v12)
    return WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v6);
  return result;
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::VectorArgumentCoder<false,WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

void sub_19789B664(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 16))
    WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebKit::CoreIPCCFDictionary,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  void *v5;
  WTF *v6;
  void *v7;
  uint64_t v8;
  char v9;

  result = IPC::Decoder::decode<std::unique_ptr<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a1, &v8);
  if (*a1)
  {
    if (v9)
    {
      *(_QWORD *)a2 = v8;
      *(_BYTE *)(a2 + 8) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
    if (v9)
    {
      result = v8;
      v8 = 0;
      if (result)
      {
        v6 = (WTF *)WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(result, v5);
        return WTF::fastFree(v6, v7);
      }
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::unique_ptr<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::unique_ptr<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>((uint64_t)a1, a2);
  if (!a2[8])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_19789B750(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 8))
    std::unique_ptr<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::reset[abi:sn180100]((uint64_t *)v1, 0);
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebKit::CoreIPCCGColorSpace,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  int v4;

  v4 = *(_DWORD *)(a2 + 8);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  return IPC::ArgumentCoder<std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>,void>::encode<IPC::Encoder,std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>> const&>(a1, a2, v4);
}

uint64_t IPC::ArgumentCoder<WebKit::CoreIPCCGColorSpace,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  uint64_t result;
  unsigned int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned __int8 v22;
  uint64_t v23;
  unsigned int v24;
  char v25;

  v4 = a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
    goto LABEL_26;
  v7 = (_BYTE *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v12 = v4;
    v13 = 0;
    goto LABEL_27;
  }
  v8 = *v7;
  if (v8 > 2)
    goto LABEL_28;
  if (*v7)
  {
    if (v8 == 1)
    {
      result = (uint64_t)IPC::Decoder::decode<WTF::RetainPtr<__CFString const*>>(a1, (uint64_t)&v23);
      v11 = v24;
      if ((_BYTE)v24)
      {
        v20 = v23;
        v11 = 1;
        v21 = 1;
        goto LABEL_21;
      }
    }
    else
    {
      result = (uint64_t)IPC::Decoder::decode<WTF::RetainPtr<void const*>>(a1, (uint64_t)&v23);
      v11 = v24;
      if ((_BYTE)v24)
      {
        v20 = v23;
        v21 = 2;
        v11 = 1;
LABEL_21:
        v22 = v11;
        if (!v11)
          goto LABEL_29;
        v4 = 0;
        v5 = 1;
        goto LABEL_23;
      }
    }
    LOBYTE(v20) = 0;
    goto LABEL_21;
  }
  result = IPC::Decoder::decode<WebCore::ColorSpace>(a1);
  if ((unsigned __int16)result < 0x100u)
  {
LABEL_28:
    while (1)
    {
      LOBYTE(v20) = 0;
      v22 = 0;
LABEL_29:
      v16 = *a1;
      v17 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      result = a1[3];
      if (result && v17)
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v16);
      v5 = 0;
      v4 = 1;
LABEL_23:
      if (!*a1)
        goto LABEL_31;
      if (!(_DWORD)v4)
        goto LABEL_7;
      __break(1u);
LABEL_26:
      v12 = 0;
      v13 = 0;
      *a1 = 0;
      a1[1] = 0;
      v14 = a1[3];
      if (v14)
      {
        if (v4)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v14 + 16))(v14, v5, v4);
          v13 = *a1;
          v12 = a1[1];
        }
        else
        {
          v12 = 0;
          v13 = 0;
        }
      }
LABEL_27:
      *a1 = 0;
      a1[1] = 0;
      v15 = a1[3];
      if (v15 && v12)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13);
    }
  }
  LOBYTE(v20) = result;
  v21 = 0;
  LODWORD(v5) = 1;
  v22 = 1;
  if (!*a1)
  {
LABEL_31:
    *a2 = 0;
    a2[16] = 0;
    goto LABEL_14;
  }
LABEL_7:
  std::__variant_detail::__impl<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>::__impl[abi:sn180100]((uint64_t)&v18, (uint64_t)&v20);
  LOBYTE(v23) = 0;
  v24 = -1;
  v10 = v19;
  if (v19 != -1)
  {
    ((void (*)(char *, uint64_t *, uint64_t *))*(&off_1E351F1A0 + v19))(&v25, &v23, &v18);
    v24 = v10;
  }
  result = std::__variant_detail::__impl<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>::__impl[abi:sn180100]((uint64_t)a2, (uint64_t)&v23);
  a2[16] = 1;
  if (v24 != -1)
    result = ((uint64_t (*)(char *, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0
                                                         + v24))(&v25, &v23);
  v24 = -1;
  if (v19 != -1)
    result = ((uint64_t (*)(char *, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0
                                                         + v19))(&v25, &v18);
  v19 = -1;
  LODWORD(v5) = v22;
LABEL_14:
  if ((_DWORD)v5)
  {
    if (v21 != -1)
      return ((uint64_t (*)(uint64_t *, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0
                                                            + v21))(&v23, &v20);
  }
  return result;
}

void sub_19789BA4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int a10, int a11, char a12, int a13, unsigned int a14, int a15, char a16, int a17, __int16 a18, char a19, char a20,int a21,unsigned int a22)
{
  uint64_t v22;

  if (a22 != -1)
    ((void (*)(uint64_t, __int16 *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0
                                              + a22))(v22 - 18, &a18);
  a22 = -1;
  if (a10 != -1)
    ((void (*)(uint64_t, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0
                                              + a10))(v22 - 18, &a9);
  a10 = -1;
  if (a16)
  {
    if (a14 != -1)
      ((void (*)(__int16 *, char *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0
                                               + a14))(&a18, &a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_19789BAFC()
{
  JUMPOUT(0x19789BAC8);
}

const UInt8 *WebKit::CoreIPCSecAccessControl::dataReference(CFDataRef *this)
{
  const __CFData *v1;
  const UInt8 *BytePtr;

  v1 = *this;
  if (!*this)
    return 0;
  BytePtr = CFDataGetBytePtr(*this);
  CFDataGetLength(v1);
  return BytePtr;
}

uint64_t WebKit::CoreIPCSecCertificate::dataReference(CFDataRef *this)
{
  const __CFData *v1;
  const UInt8 *BytePtr;
  uint64_t result;

  v1 = *this;
  if (*this)
  {
    BytePtr = CFDataGetBytePtr(*this);
    CFDataGetLength(v1);
    return (uint64_t)BytePtr;
  }
  else
  {
    result = 61;
    __break(0xC471u);
  }
  return result;
}

const UInt8 *WebKit::CoreIPCSecTrust::dataReference(CFDataRef *this)
{
  const __CFData *v1;
  const UInt8 *BytePtr;

  v1 = *this;
  if (!*this)
    return 0;
  BytePtr = CFDataGetBytePtr(*this);
  CFDataGetLength(v1);
  return BytePtr;
}

void *IPC::ArgumentCoder<WebKit::CoreIPCSecTrust,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  void *result;
  uint64_t v5;
  UInt8 *bytes;
  CFIndex length;
  char v8;

  result = IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a1, (uint64_t)&bytes);
  v5 = *a1;
  if (!*a1)
  {
    *a2 = 0;
LABEL_6:
    a2[8] = v5;
    return result;
  }
  if (v8)
  {
    if (length)
      result = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, length);
    else
      result = 0;
    *(_QWORD *)a2 = result;
    LOBYTE(v5) = 1;
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

void WebKit::CoreIPCDDScannerResult::~CoreIPCDDScannerResult(WebKit::CoreIPCDDScannerResult *this, void *a2)
{
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;

  v3 = (const void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
    CFRelease(v4);
  v5 = (const void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
    CFRelease(v5);
  if (*((_BYTE *)this + 56))
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 40, a2);
  v6 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
    CFRelease(v6);
  v7 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
    CFRelease(v7);
  v8 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
    CFRelease(v8);
  v9 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
    CFRelease(v9);
  v10 = *(const void **)this;
  *(_QWORD *)this = 0;
  if (v10)
    CFRelease(v10);
}

void WebKit::CoreIPCPKPaymentMethod::~CoreIPCPKPaymentMethod(WebKit::CoreIPCPKPaymentMethod *this)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;

  v2 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
    CFRelease(v4);
  v5 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
    CFRelease(v5);
  v6 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
    CFRelease(v6);
  v7 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
    CFRelease(v7);
  v8 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
    CFRelease(v8);
  v9 = *(const void **)this;
  *(_QWORD *)this = 0;
  if (v9)
    CFRelease(v9);
}

uint64_t std::__optional_destruct_base<WebKit::CoreIPCPKPaymentMerchantSession,false>::__optional_destruct_base[abi:sn180100]<WebKit::CoreIPCPKPaymentMerchantSession>(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  v3 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(result + 8) = v3;
  v4 = a2[2];
  a2[2] = 0;
  *(_QWORD *)(result + 16) = v4;
  v5 = a2[3];
  a2[3] = 0;
  *(_QWORD *)(result + 24) = v5;
  v6 = a2[4];
  a2[4] = 0;
  *(_QWORD *)(result + 32) = v6;
  v7 = a2[5];
  a2[5] = 0;
  *(_QWORD *)(result + 40) = v7;
  v8 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(result + 48) = v8;
  v9 = a2[7];
  a2[7] = 0;
  *(_QWORD *)(result + 56) = v9;
  v10 = a2[8];
  a2[8] = 0;
  *(_QWORD *)(result + 64) = v10;
  v11 = a2[9];
  a2[9] = 0;
  *(_QWORD *)(result + 72) = v11;
  v12 = a2[10];
  a2[10] = 0;
  *(_QWORD *)(result + 80) = v12;
  v13 = a2[11];
  a2[11] = 0;
  *(_QWORD *)(result + 88) = v13;
  v14 = a2[12];
  a2[12] = 0;
  *(_BYTE *)(result + 104) = 0;
  *(_QWORD *)(result + 96) = v14;
  *(_BYTE *)(result + 120) = 0;
  if (*((_BYTE *)a2 + 120))
  {
    *(_QWORD *)(result + 104) = 0;
    *(_QWORD *)(result + 112) = 0;
    v15 = a2[13];
    a2[13] = 0;
    *(_QWORD *)(result + 104) = v15;
    LODWORD(v15) = *((_DWORD *)a2 + 28);
    *((_DWORD *)a2 + 28) = 0;
    *(_DWORD *)(result + 112) = v15;
    LODWORD(v15) = *((_DWORD *)a2 + 29);
    *((_DWORD *)a2 + 29) = 0;
    *(_DWORD *)(result + 116) = v15;
    *(_BYTE *)(result + 120) = 1;
  }
  *(_BYTE *)(result + 128) = 1;
  return result;
}

void WebKit::CoreIPCPKPaymentMerchantSession::~CoreIPCPKPaymentMerchantSession(WebKit::CoreIPCPKPaymentMerchantSession *this, void *a2)
{
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;

  if (*((_BYTE *)this + 120))
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 104, a2);
  v3 = (const void *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
    CFRelease(v4);
  v5 = (const void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v5)
    CFRelease(v5);
  v6 = (const void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v6)
    CFRelease(v6);
  v7 = (const void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v7)
    CFRelease(v7);
  v8 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v8)
    CFRelease(v8);
  v9 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v9)
    CFRelease(v9);
  v10 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
    CFRelease(v10);
  v11 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v11)
    CFRelease(v11);
  v12 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v12)
    CFRelease(v12);
  v13 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v13)
    CFRelease(v13);
  v14 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v14)
    CFRelease(v14);
  v15 = *(const void **)this;
  *(_QWORD *)this = 0;
  if (v15)
    CFRelease(v15);
}

uint64_t std::__optional_destruct_base<WebKit::CoreIPCPKContact,false>::__optional_destruct_base[abi:sn180100]<WebKit::CoreIPCPKContact>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = std::__optional_move_base<WebKit::CoreIPCPersonNameComponents,false>::__optional_move_base[abi:sn180100](a1, (uint64_t *)a2);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(v4 + 56) = v5;
  *(_BYTE *)(v4 + 64) = 0;
  *(_BYTE *)(v4 + 80) = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    v6 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a1 + 64) = v6;
    v7 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a1 + 72) = v7;
    *(_BYTE *)(a1 + 80) = 1;
  }
  std::__optional_move_base<WebKit::CoreIPCCNPostalAddress,false>::__optional_move_base[abi:sn180100](a1 + 88, (uint64_t *)(a2 + 88));
  v8 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a1 + 168) = v8;
  *(_BYTE *)(a1 + 176) = 1;
  return a1;
}

uint64_t std::__optional_move_base<WebKit::CoreIPCPersonNameComponents,false>::__optional_move_base[abi:sn180100](uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 48) = 0;
  if (*((_BYTE *)a2 + 48))
  {
    v2 = *a2;
    *a2 = 0;
    *(_QWORD *)result = v2;
    v3 = a2[1];
    a2[1] = 0;
    *(_QWORD *)(result + 8) = v3;
    v4 = a2[2];
    a2[2] = 0;
    *(_QWORD *)(result + 16) = v4;
    v5 = a2[3];
    a2[3] = 0;
    *(_QWORD *)(result + 24) = v5;
    v6 = a2[4];
    a2[4] = 0;
    *(_QWORD *)(result + 32) = v6;
    v7 = a2[5];
    a2[5] = 0;
    *(_QWORD *)(result + 40) = v7;
    *(_BYTE *)(result + 48) = 1;
  }
  return result;
}

uint64_t std::__optional_move_base<WebKit::CoreIPCCNPostalAddress,false>::__optional_move_base[abi:sn180100](uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 72) = 0;
  if (*((_BYTE *)a2 + 72))
  {
    v2 = *a2;
    *a2 = 0;
    *(_QWORD *)result = v2;
    v3 = a2[1];
    a2[1] = 0;
    *(_QWORD *)(result + 8) = v3;
    v4 = a2[2];
    a2[2] = 0;
    *(_QWORD *)(result + 16) = v4;
    v5 = a2[3];
    a2[3] = 0;
    *(_QWORD *)(result + 24) = v5;
    v6 = a2[4];
    a2[4] = 0;
    *(_QWORD *)(result + 32) = v6;
    v7 = a2[5];
    a2[5] = 0;
    *(_QWORD *)(result + 40) = v7;
    v8 = a2[6];
    a2[6] = 0;
    *(_QWORD *)(result + 48) = v8;
    v9 = a2[7];
    a2[7] = 0;
    *(_QWORD *)(result + 56) = v9;
    v10 = a2[8];
    a2[8] = 0;
    *(_QWORD *)(result + 64) = v10;
    *(_BYTE *)(result + 72) = 1;
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::CoreIPCPKContact,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(a1 + 176))
  {
    v3 = *(WTF::StringImpl **)(a1 + 168);
    *(_QWORD *)(a1 + 168) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    if (*(_BYTE *)(a1 + 160))
      WebKit::CoreIPCCNPostalAddress::~CoreIPCCNPostalAddress((WebKit::CoreIPCCNPostalAddress *)(a1 + 88), a2);
    std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100](a1 + 64, a2);
    v5 = *(WTF::StringImpl **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
    if (*(_BYTE *)(a1 + 48))
      WebKit::CoreIPCPersonNameComponents::~CoreIPCPersonNameComponents((WebKit::CoreIPCPersonNameComponents **)a1);
  }
  return a1;
}

void WebKit::CoreIPCPKPayment::~CoreIPCPKPayment(WebKit::CoreIPCPKPayment *this)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;

  v2 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
    CFRelease(v4);
  v5 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
    CFRelease(v5);
  v6 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
    CFRelease(v6);
  v7 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
    CFRelease(v7);
  v8 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
    CFRelease(v8);
  v9 = *(const void **)this;
  *(_QWORD *)this = 0;
  if (v9)
    CFRelease(v9);
}

void WebKit::CoreIPCPKShippingMethod::~CoreIPCPKShippingMethod(WebKit::CoreIPCPKShippingMethod *this)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;

  v2 = (const void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
    CFRelease(v4);
  v5 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
    CFRelease(v5);
  v6 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
    CFRelease(v6);
  v7 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
    CFRelease(v7);
  v8 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
    CFRelease(v8);
  v9 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
    CFRelease(v9);
  v10 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v10)
    CFRelease(v10);
  v11 = *(const void **)this;
  *(_QWORD *)this = 0;
  if (v11)
    CFRelease(v11);
}

uint64_t std::__optional_destruct_base<WebKit::CoreIPCPKDateComponentsRange,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  const void *v2;
  const void *v3;

  if (*(_BYTE *)(a1 + 16))
  {
    v2 = *(const void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v2)
      CFRelease(v2);
    v3 = *(const void **)a1;
    *(_QWORD *)a1 = 0;
    if (v3)
      CFRelease(v3);
  }
  return a1;
}

uint64_t WebKit::CoreIPCCNContact::CoreIPCCNContact(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = *a2;
  v5 = a2[1];
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a2[2];
  a2[2] = 0;
  *(_QWORD *)(a1 + 16) = v6;
  v7 = a2[3];
  a2[3] = 0;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = a2[4];
  a2[4] = 0;
  *(_QWORD *)(a1 + 32) = v8;
  v9 = a2[5];
  a2[5] = 0;
  *(_QWORD *)(a1 + 40) = v9;
  v10 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(a1 + 48) = v10;
  v11 = a2[7];
  a2[7] = 0;
  *(_QWORD *)(a1 + 56) = v11;
  v12 = a2[8];
  a2[8] = 0;
  *(_QWORD *)(a1 + 64) = v12;
  v13 = a2[9];
  a2[9] = 0;
  *(_QWORD *)(a1 + 72) = v13;
  v14 = a2[10];
  a2[10] = 0;
  *(_QWORD *)(a1 + 80) = v14;
  v15 = a2[11];
  a2[11] = 0;
  *(_QWORD *)(a1 + 88) = v15;
  v16 = a2[12];
  a2[12] = 0;
  *(_QWORD *)(a1 + 96) = v16;
  v17 = a2[13];
  a2[13] = 0;
  *(_QWORD *)(a1 + 104) = v17;
  v18 = a2[14];
  a2[14] = 0;
  *(_QWORD *)(a1 + 112) = v18;
  v19 = a2[15];
  a2[15] = 0;
  *(_QWORD *)(a1 + 120) = v19;
  v20 = a2[16];
  a2[16] = 0;
  *(_QWORD *)(a1 + 128) = v20;
  std::__optional_move_base<WebKit::CoreIPCDateComponents,false>::__optional_move_base[abi:sn180100](a1 + 136, a2 + 17);
  std::__optional_move_base<WebKit::CoreIPCDateComponents,false>::__optional_move_base[abi:sn180100](a1 + 176, a2 + 22);
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  v21 = a2[27];
  a2[27] = 0;
  *(_QWORD *)(a1 + 216) = v21;
  LODWORD(v21) = *((_DWORD *)a2 + 56);
  *((_DWORD *)a2 + 56) = 0;
  *(_DWORD *)(a1 + 224) = v21;
  LODWORD(v21) = *((_DWORD *)a2 + 57);
  *((_DWORD *)a2 + 57) = 0;
  *(_DWORD *)(a1 + 228) = v21;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  v22 = a2[29];
  a2[29] = 0;
  *(_QWORD *)(a1 + 232) = v22;
  LODWORD(v22) = *((_DWORD *)a2 + 60);
  *((_DWORD *)a2 + 60) = 0;
  *(_DWORD *)(a1 + 240) = v22;
  LODWORD(v22) = *((_DWORD *)a2 + 61);
  *((_DWORD *)a2 + 61) = 0;
  *(_DWORD *)(a1 + 244) = v22;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  v23 = a2[31];
  a2[31] = 0;
  *(_QWORD *)(a1 + 248) = v23;
  LODWORD(v23) = *((_DWORD *)a2 + 64);
  *((_DWORD *)a2 + 64) = 0;
  *(_DWORD *)(a1 + 256) = v23;
  LODWORD(v23) = *((_DWORD *)a2 + 65);
  *((_DWORD *)a2 + 65) = 0;
  *(_DWORD *)(a1 + 260) = v23;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  v24 = a2[33];
  a2[33] = 0;
  *(_QWORD *)(a1 + 264) = v24;
  LODWORD(v24) = *((_DWORD *)a2 + 68);
  *((_DWORD *)a2 + 68) = 0;
  *(_DWORD *)(a1 + 272) = v24;
  LODWORD(v24) = *((_DWORD *)a2 + 69);
  *((_DWORD *)a2 + 69) = 0;
  *(_DWORD *)(a1 + 276) = v24;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  v25 = a2[35];
  a2[35] = 0;
  *(_QWORD *)(a1 + 280) = v25;
  LODWORD(v25) = *((_DWORD *)a2 + 72);
  *((_DWORD *)a2 + 72) = 0;
  *(_DWORD *)(a1 + 288) = v25;
  LODWORD(v25) = *((_DWORD *)a2 + 73);
  *((_DWORD *)a2 + 73) = 0;
  *(_DWORD *)(a1 + 292) = v25;
  return a1;
}

uint64_t std::__optional_move_base<WebKit::CoreIPCDateComponents,false>::__optional_move_base[abi:sn180100](uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 32) = 0;
  if (*((_BYTE *)a2 + 32))
  {
    v2 = *a2;
    *a2 = 0;
    *(_QWORD *)result = v2;
    v3 = a2[1];
    a2[1] = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 8) = v3;
    v4 = a2[2];
    a2[2] = 0;
    *(_QWORD *)(result + 16) = v4;
    LODWORD(v4) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = 0;
    *(_DWORD *)(result + 24) = v4;
    LODWORD(v4) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = 0;
    *(_DWORD *)(result + 28) = v4;
    *(_BYTE *)(result + 32) = 1;
  }
  return result;
}

void WebKit::CoreIPCCNContact::~CoreIPCCNContact(WebKit::CoreIPCCNContact *this, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;

  WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 280, a2);
  WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 264, v3);
  WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 248, v4);
  WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 232, v5);
  WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 216, v6);
  std::__optional_destruct_base<WebKit::CoreIPCDateComponents,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 176, v7);
  std::__optional_destruct_base<WebKit::CoreIPCDateComponents,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 136, v8);
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v9);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v9);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v9);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v9);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v9);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v9);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v9);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v9);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v9);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v9);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v9);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v9);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v9);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v9);
    else
      *(_DWORD *)v25 -= 2;
  }
}

void WebKit::CoreIPCNSURLProtectionSpace::~CoreIPCNSURLProtectionSpace(WebKit::CoreIPCNSURLProtectionSpace *this, void *a2)
{
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;

  if (*((_BYTE *)this + 72))
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 56, a2);
  v3 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
    CFRelease(v4);
  v5 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
    CFRelease(v5);
  v6 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
    CFRelease(v6);
  v7 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
    CFRelease(v7);
  v8 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
    CFRelease(v8);
  v9 = *(const void **)this;
  *(_QWORD *)this = 0;
  if (v9)
    CFRelease(v9);
}

uint64_t std::__optional_destruct_base<std::optional<WebKit::CoreIPCNSShadow>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)(a1 + 40))
  {
    if (*(_BYTE *)(a1 + 32))
    {
      v2 = *(const void **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      if (v2)
        CFRelease(v2);
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebKit::CoreIPCPresentationIntent,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF *v4;

  if (*(_BYTE *)(a1 + 88))
  {
    v3 = *(WTF::StringImpl **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF **)(a1 + 32);
    if (v4)
    {
      *(_QWORD *)(a1 + 32) = 0;
      *(_DWORD *)(a1 + 40) = 0;
      WTF::fastFree(v4, a2);
    }
    std::unique_ptr<WebKit::CoreIPCPresentationIntent>::reset[abi:sn180100]((WTF::StringImpl **)(a1 + 16), 0);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<std::optional<WebKit::CoreIPCCFURL>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)(a1 + 16))
  {
    if (*(_BYTE *)(a1 + 8))
    {
      v2 = *(const void **)a1;
      *(_QWORD *)a1 = 0;
      if (v2)
        CFRelease(v2);
    }
  }
  return a1;
}

uint64_t std::__optional_storage_base<WebKit::CoreIPCDateComponents,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::CoreIPCDateComponents,false>>(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  WTF *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result;
  if (*(unsigned __int8 *)(result + 32) == *((unsigned __int8 *)a2 + 32))
  {
    if (*(_BYTE *)(result + 32))
    {
      WTF::String::operator=((WTF::StringImpl **)result, (WTF::StringImpl *)a2);
      WTF::String::operator=((WTF::StringImpl **)(v3 + 8), (WTF::StringImpl *)(a2 + 1));
      result = *(_QWORD *)(v3 + 16);
      if (result)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        result = WTF::fastFree((WTF *)result, v4);
      }
      v5 = a2[2];
      a2[2] = 0;
      *(_QWORD *)(v3 + 16) = v5;
      LODWORD(v5) = *((_DWORD *)a2 + 6);
      *((_DWORD *)a2 + 6) = 0;
      *(_DWORD *)(v3 + 24) = v5;
      LODWORD(v5) = *((_DWORD *)a2 + 7);
      *((_DWORD *)a2 + 7) = 0;
      *(_DWORD *)(v3 + 28) = v5;
    }
  }
  else if (*(_BYTE *)(result + 32))
  {
    v6 = *(WTF **)(result + 16);
    if (v6)
    {
      *(_QWORD *)(v3 + 16) = 0;
      *(_DWORD *)(v3 + 24) = 0;
      WTF::fastFree(v6, a2);
    }
    v7 = *(WTF::StringImpl **)(v3 + 8);
    *(_QWORD *)(v3 + 8) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v7 -= 2;
    }
    result = *(_QWORD *)v3;
    *(_QWORD *)v3 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
    *(_BYTE *)(v3 + 32) = 0;
  }
  else
  {
    v8 = *a2;
    *a2 = 0;
    *(_QWORD *)result = v8;
    v9 = a2[1];
    a2[1] = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 8) = v9;
    v10 = a2[2];
    a2[2] = 0;
    *(_QWORD *)(result + 16) = v10;
    LODWORD(v10) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = 0;
    *(_DWORD *)(result + 24) = v10;
    LODWORD(v10) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = 0;
    *(_DWORD *)(result + 28) = v10;
    *(_BYTE *)(result + 32) = 1;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENSB_IPKvEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JRNS0_6__baseILSN_1EJS9_SF_SI_EEERKS10_EEEDcSS_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

CFTypeRef _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENSB_IPKvEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JRNS0_6__baseILSN_1EJS9_SF_SI_EEERKS10_EEEDcSS_DpT0_(uint64_t a1, CFTypeRef *a2, CFTypeRef *a3)
{
  CFTypeRef result;

  result = *a3;
  *a2 = *a3;
  if (result)
    return CFRetain(result);
  return result;
}

CFTypeRef _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENSB_IPKvEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JRNS0_6__baseILSN_1EJS9_SF_SI_EEERKS10_EEEDcSS_DpT0_(uint64_t a1, CFTypeRef *a2, CFTypeRef *a3)
{
  CFTypeRef result;

  result = *a3;
  *a2 = *a3;
  if (result)
    return CFRetain(result);
  return result;
}

void IPC::ArgumentCoder<std::optional<WebKit::CoreIPCDDScannerResult>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  char *v12;
  unsigned int v13;
  const void *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const void *v57;
  void *v58;
  uint64_t v59;
  CFTypeRef v60;
  CFTypeRef v61;
  CFTypeRef v62;
  CFTypeRef v63;
  uint64_t v64;
  uint64_t v65;
  CFTypeRef v66;
  CFTypeRef v67;
  uint64_t v68;
  CFTypeRef v69;
  const void *v70;
  CFTypeRef v71;
  CFTypeRef v72;
  CFTypeRef v73;
  CFTypeRef v74;
  __int128 v75;
  __int128 v76;
  CFTypeRef v77;
  uint64_t v78;
  __int128 v79;
  CFTypeRef v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  WTF *v99;
  WTF *v100;
  WTF *v101;
  WTF *v102;
  WTF *v103;
  const void *v104;
  WTF *v105;
  const void *v106;
  WTF *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  CFTypeRef cf;
  char v113;
  CFTypeRef v114;
  char v115;
  _QWORD *v116;
  uint64_t v117;
  char v118;
  char v119;
  CFTypeRef v120;
  char v121;
  CFTypeRef v122;
  char v123;
  CFTypeRef v124;
  char v125;
  CFTypeRef v126;
  char v127;
  __int128 v128;
  __int128 v129;
  CFTypeRef v130;
  _QWORD *v131;
  uint64_t v132;
  char v133;
  __int128 v134;
  CFTypeRef v135;
  unsigned __int8 v136;
  _OWORD v137[2];
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  const void *v145;
  char v146;
  uint64_t v147;

  v147 = *MEMORY[0x1E0C80C00];
  v4 = a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
  {
    v16 = 0;
    v17 = 0;
    *a1 = 0;
    a1[1] = 0;
    v18 = a1[3];
    if (v18)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
        v17 = *a1;
        v16 = a1[1];
      }
      else
      {
        v16 = 0;
        v17 = 0;
      }
    }
    goto LABEL_26;
  }
  v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v16 = v4;
    v17 = 0;
LABEL_26:
    v4 = 0;
    v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    v19 = a1[3];
    if (v19)
    {
      if (v16)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v17, v16);
        v5 = *a1;
        v4 = a1[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
    goto LABEL_27;
  }
  v8 = *v7;
  if (v8 >= 2)
  {
LABEL_27:
    *a1 = 0;
    a1[1] = 0;
    v20 = a1[3];
    if (v20 && v4)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v5);
LABEL_144:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 96) = 0;
    return;
  }
  if (!v8)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 88) = 0;
    *(_BYTE *)(a2 + 96) = 1;
    return;
  }
  v145 = (const void *)objc_opt_class();
  WTF::HashSet<objc_class *,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::HashSet((uint64_t *)&v116, (uint64_t *)&v145, 1);
  WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::operator=(a1 + 7, &v116);
  v9 = a1[1];
  v10 = (char *)*a1;
  v11 = a1[2] - *a1;
  if (v9 <= v11)
  {
    v21 = 0;
    v22 = 0;
    *a1 = 0;
    a1[1] = 0;
    v23 = a1[3];
    if (v23)
    {
      if (v9)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
        v22 = *a1;
        v21 = a1[1];
      }
      else
      {
        v21 = 0;
        v22 = 0;
      }
    }
    goto LABEL_31;
  }
  v12 = &v10[v11];
  a1[2] = (uint64_t)(v12 + 1);
  if (!v10)
  {
    v21 = v9;
    v22 = 0;
LABEL_31:
    v9 = 0;
    v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    v24 = a1[3];
    if (v24)
    {
      if (v21)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, v22, v21);
        v10 = (char *)*a1;
        v9 = a1[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
    goto LABEL_32;
  }
  v13 = *v12;
  if (v13 >= 2)
  {
LABEL_32:
    *a1 = 0;
    a1[1] = 0;
    v25 = a1[3];
    if (v25 && v9)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v25 + 16))(v25, v10);
    goto LABEL_33;
  }
  if (!v13)
  {
    LOBYTE(v128) = 0;
    LOBYTE(v131) = 0;
    LOBYTE(v132) = 1;
    goto LABEL_16;
  }
  IPC::Decoder::decode<WebKit::CoreIPCNSValue>(a1, v137);
  if ((_BYTE)v139)
  {
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v128 + 8, (uint64_t)v137 + 8);
    LOBYTE(v131) = 1;
    LOBYTE(v132) = 1;
    if (!(_BYTE)v139)
      goto LABEL_16;
    if ((_DWORD)v138 == -1)
      goto LABEL_16;
    ((void (*)(CFTypeRef *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJ8_NSRangeEEEN6WebKit19CoreIPCSecureCodingEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v138])(&v126, (char *)v137 + 8);
    if ((_BYTE)v132)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  LOBYTE(v128) = 0;
  LOBYTE(v132) = 0;
LABEL_34:
  v10 = (char *)*a1;
  v26 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v27 = a1[3];
  if (!v27 || !v26 || ((*(void (**)(uint64_t, char *))(*(_QWORD *)v27 + 16))(v27, v10), !(_BYTE)v132))
  {
    v14 = 0;
    v15 = 1;
    goto LABEL_36;
  }
LABEL_16:
  if ((_BYTE)v131)
  {
    WebKit::CoreIPCNSValue::toID((WebKit::CoreIPCNSValue *)&v128, v137);
    v14 = *(const void **)&v137[0];
    if ((_BYTE)v132 && (_BYTE)v131 && (_DWORD)v130 != -1)
      ((void (*)(_OWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJ8_NSRangeEEEN6WebKit19CoreIPCSecureCodingEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v130])(v137, (char *)&v128 + 8);
    if (v14)
    {
      CFRetain(v14);
      CFRelease(v14);
    }
  }
  else
  {
    v14 = 0;
  }
  v15 = 0;
LABEL_36:
  if (!v116)
  {
    if (!v15)
      goto LABEL_38;
LABEL_141:
    v92 = *a1;
    v93 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v94 = a1[3];
    if (v94 && v93)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v94 + 16))(v94, v92);
    LOBYTE(v128) = 0;
    v136 = 0;
    goto LABEL_143;
  }
  WTF::fastFree((WTF *)(v116 - 2), v10);
  if (v15)
    goto LABEL_141;
LABEL_38:
  IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v126);
  if (!v127)
  {
    v49 = 0;
    LOBYTE(v128) = 0;
    v136 = 0;
    goto LABEL_119;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v124);
  if (!v125)
  {
    v49 = 0;
    LOBYTE(v128) = 0;
    v136 = 0;
    goto LABEL_116;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSNumber>>(a1, (uint64_t)&v122);
  if (!v123)
  {
    v49 = 0;
    LOBYTE(v128) = 0;
    v136 = 0;
    goto LABEL_113;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSNumber>>(a1, (uint64_t)&v120);
  if (!v121)
  {
    v49 = 0;
    LOBYTE(v128) = 0;
    v136 = 0;
    goto LABEL_110;
  }
  v29 = a1[1];
  v30 = (char *)*a1;
  v31 = a1[2] - *a1;
  if (v29 <= v31)
  {
    v81 = 0;
    v82 = 0;
    *a1 = 0;
    a1[1] = 0;
    v83 = a1[3];
    if (v83)
    {
      if (v29)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v83 + 16))(v83);
        v82 = *a1;
        v81 = a1[1];
      }
      else
      {
        v81 = 0;
        v82 = 0;
      }
    }
    goto LABEL_131;
  }
  v32 = &v30[v31];
  v33 = (uint64_t)&v30[v31 + 1];
  a1[2] = v33;
  if (!v30)
  {
    v81 = v29;
    v82 = 0;
LABEL_131:
    v29 = 0;
    v30 = 0;
    *a1 = 0;
    a1[1] = 0;
    v84 = a1[3];
    if (v84)
    {
      if (v81)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v84 + 16))(v84, v82, v81);
        v30 = (char *)*a1;
        v29 = a1[1];
      }
      else
      {
        v29 = 0;
        v30 = 0;
      }
    }
    goto LABEL_132;
  }
  v34 = *v32;
  if (v34 >= 2)
  {
LABEL_132:
    *a1 = 0;
    a1[1] = 0;
    v85 = a1[3];
    if (v85 && v29)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v85 + 16))(v85, v30);
    goto LABEL_138;
  }
  if (!v34)
  {
    LOBYTE(v116) = 0;
    v118 = 0;
    v119 = 1;
    goto LABEL_79;
  }
  v35 = ((v33 + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v30;
  if (v29 < v35 || v29 - v35 <= 7)
  {
    *a1 = 0;
    a1[1] = 0;
    v86 = a1[3];
    if (v86)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v86 + 16))(v86);
      v109 = *a1;
      v110 = a1[1];
      v111 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v111)
      {
        if (v110)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v111 + 16))(v111, v109);
      }
    }
    LOBYTE(v128) = 0;
    LOBYTE(v129) = 0;
    goto LABEL_137;
  }
  v36 = (unint64_t *)&v30[v35];
  v37 = *v36;
  a1[2] = (uint64_t)(v36 + 1);
  v137[0] = 0uLL;
  if (v37 < 0x20000)
  {
    if (!v37)
    {
      v47 = 0;
      v48 = 0;
LABEL_66:
      v137[0] = 0uLL;
      *(_QWORD *)&v128 = v47;
      *((_QWORD *)&v128 + 1) = v48;
      goto LABEL_67;
    }
    v38 = WTF::fastMalloc((WTF *)(8 * v37));
    DWORD2(v137[0]) = v37;
    *(_QWORD *)&v137[0] = v38;
    while (1)
    {
      IPC::Decoder::decode<WTF::RetainPtr<DDScannerResult>>(&v145, a1);
      if (!v146)
        goto LABEL_76;
      v39 = HIDWORD(v137[0]);
      if (HIDWORD(v137[0]) != DWORD2(v137[0]))
        break;
      v40 = (uint64_t *)WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v137, HIDWORD(v137[0]) + 1, (unint64_t)&v145);
      v41 = HIDWORD(v137[0]);
      v42 = HIDWORD(v137[0]) + 1;
      v43 = *(_QWORD *)&v137[0];
      v44 = *v40;
      *v40 = 0;
      *(_QWORD *)(v43 + 8 * v41) = v44;
      HIDWORD(v137[0]) = v42;
      if (v146)
        goto LABEL_56;
LABEL_58:
      if (!--v37)
      {
        v48 = *((_QWORD *)&v137[0] + 1);
        v47 = *(_QWORD *)&v137[0];
        goto LABEL_66;
      }
    }
    v45 = (uint64_t)v145;
    v145 = 0;
    *(_QWORD *)(*(_QWORD *)&v137[0] + 8 * HIDWORD(v137[0])) = v45;
    HIDWORD(v137[0]) = v39 + 1;
LABEL_56:
    v46 = v145;
    v145 = 0;
    if (v46)
      CFRelease(v46);
    goto LABEL_58;
  }
  do
  {
    IPC::Decoder::decode<WTF::RetainPtr<DDScannerResult>>(&v145, a1);
    if (!v146)
    {
LABEL_76:
      LOBYTE(v128) = 0;
      LOBYTE(v129) = 0;
      goto LABEL_77;
    }
    v50 = HIDWORD(v137[0]);
    if (HIDWORD(v137[0]) == DWORD2(v137[0]))
    {
      v51 = (uint64_t *)WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v137, HIDWORD(v137[0]) + 1, (unint64_t)&v145);
      v52 = HIDWORD(v137[0]);
      v53 = HIDWORD(v137[0]) + 1;
      v54 = *(_QWORD *)&v137[0];
      v55 = *v51;
      *v51 = 0;
      *(_QWORD *)(v54 + 8 * v52) = v55;
      HIDWORD(v137[0]) = v53;
      if (!v146)
        goto LABEL_74;
    }
    else
    {
      v56 = (uint64_t)v145;
      v145 = 0;
      *(_QWORD *)(*(_QWORD *)&v137[0] + 8 * HIDWORD(v137[0])) = v56;
      HIDWORD(v137[0]) = v50 + 1;
    }
    v57 = v145;
    v145 = 0;
    if (v57)
      CFRelease(v57);
LABEL_74:
    --v37;
  }
  while (v37);
  v98 = HIDWORD(v137[0]);
  v99 = *(WTF **)&v137[0];
  if (DWORD2(v137[0]) <= HIDWORD(v137[0]))
    goto LABEL_160;
  v100 = *(WTF **)&v137[0];
  if (!HIDWORD(v137[0]))
    goto LABEL_154;
  if (HIDWORD(v137[0]) >> 29)
  {
    __break(0xC471u);
LABEL_199:
    __break(1u);
    return;
  }
  v101 = (WTF *)(8 * HIDWORD(v137[0]));
  v102 = (WTF *)WTF::fastMalloc(v101);
  DWORD2(v137[0]) = v98;
  *(_QWORD *)&v137[0] = v102;
  v100 = v99;
  if (v102 != v99)
  {
    v103 = v99;
    do
    {
      v104 = *(const void **)v103;
      *(_QWORD *)v103 = 0;
      v105 = v102;
      *(_QWORD *)v102 = v104;
      v106 = *(const void **)v103;
      v107 = v103;
      *(_QWORD *)v103 = 0;
      if (v106)
        CFRelease(v106);
      v102 = (WTF *)((char *)v105 + 8);
      v103 = (WTF *)((char *)v107 + 8);
      v101 = (WTF *)((char *)v101 - 8);
    }
    while (v101);
    v100 = *(WTF **)&v137[0];
  }
LABEL_154:
  if (v99)
  {
    if (v100 == v99)
    {
      *(_QWORD *)&v137[0] = 0;
      DWORD2(v137[0]) = 0;
    }
    WTF::fastFree(v99, v30);
    v99 = *(WTF **)&v137[0];
  }
  else
  {
    v99 = v100;
  }
LABEL_160:
  *(_QWORD *)&v128 = v99;
  v108 = *((_QWORD *)&v137[0] + 1);
  v137[0] = 0uLL;
  *((_QWORD *)&v128 + 1) = v108;
LABEL_67:
  LOBYTE(v129) = 1;
LABEL_77:
  WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v137, v30);
  if ((_BYTE)v129)
  {
LABEL_78:
    v59 = *((_QWORD *)&v128 + 1);
    v116 = (_QWORD *)v128;
    v128 = 0uLL;
    v117 = v59;
    v118 = 1;
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v128, v58);
    v119 = 1;
    goto LABEL_79;
  }
LABEL_137:
  v87 = *a1;
  v88 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v89 = a1[3];
  if (v89)
  {
    if (v88)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v89 + 16))(v89, v87);
      if ((_BYTE)v129)
        goto LABEL_78;
    }
  }
LABEL_138:
  LOBYTE(v116) = 0;
  v119 = 0;
  v28 = (void *)*a1;
  v90 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v91 = a1[3];
  if (!v91 || !v90 || ((*(void (**)(uint64_t, void *))(*(_QWORD *)v91 + 16))(v91, v28), !v119))
  {
    v49 = 0;
    LOBYTE(v128) = 0;
    v136 = 0;
    goto LABEL_107;
  }
LABEL_79:
  IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v145);
  if (!v146)
  {
    v49 = 0;
    LOBYTE(v128) = 0;
    v136 = 0;
    goto LABEL_104;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSDictionary>>((uint64_t)&v114, a1);
  if (!v115)
  {
    v49 = 0;
    LOBYTE(v128) = 0;
    v136 = 0;
    goto LABEL_101;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSNumber>>(a1, (uint64_t)&cf);
  if (!v113)
  {
    v49 = 0;
    LOBYTE(v128) = 0;
    v136 = 0;
    goto LABEL_99;
  }
  if (!*a1)
  {
    v49 = 0;
    LOBYTE(v128) = 0;
    v136 = 0;
    goto LABEL_94;
  }
  if (!v127 || !v125 || !v123 || !v121 || !v119 || !v146)
    goto LABEL_199;
  v60 = v126;
  v126 = 0;
  v61 = v124;
  v124 = 0;
  v62 = v122;
  v122 = 0;
  v63 = v120;
  v120 = 0;
  LOBYTE(v139) = 0;
  v141 = 0;
  if (v118)
  {
    v139 = v116;
    v64 = v117;
    v116 = 0;
    v117 = 0;
    v140 = v64;
    v141 = 1;
  }
  v65 = (uint64_t)v145;
  v145 = 0;
  v66 = v114;
  v114 = 0;
  v67 = cf;
  cf = 0;
  *(_QWORD *)&v128 = v14;
  *((_QWORD *)&v128 + 1) = v60;
  memset(v137, 0, sizeof(v137));
  *(_QWORD *)&v129 = v61;
  *((_QWORD *)&v129 + 1) = v62;
  v138 = 0;
  v130 = v63;
  LOBYTE(v131) = 0;
  v133 = 0;
  if (v118)
  {
    v131 = v139;
    v68 = v140;
    v139 = 0;
    v140 = 0;
    v132 = v68;
    v133 = 1;
  }
  v142 = 0;
  v143 = 0;
  *(_QWORD *)&v134 = v65;
  *((_QWORD *)&v134 + 1) = v66;
  v144 = 0;
  v135 = v67;
  v49 = 1;
  v136 = 1;
  WebKit::CoreIPCDDScannerResult::~CoreIPCDDScannerResult((WebKit::CoreIPCDDScannerResult *)v137, v28);
  v14 = 0;
  if (v113)
  {
LABEL_94:
    v69 = cf;
    cf = 0;
    if (v69)
      CFRelease(v69);
  }
LABEL_99:
  if (v114)
    CFRelease(v114);
LABEL_101:
  if (v146)
  {
    v70 = v145;
    v145 = 0;
    if (v70)
      CFRelease(v70);
  }
LABEL_104:
  if (v119 && v118)
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v116, v28);
LABEL_107:
  if (v121)
  {
    v71 = v120;
    v120 = 0;
    if (v71)
      CFRelease(v71);
  }
LABEL_110:
  if (v123)
  {
    v72 = v122;
    v122 = 0;
    if (v72)
      CFRelease(v72);
  }
LABEL_113:
  if (v125)
  {
    v73 = v124;
    v124 = 0;
    if (v73)
      CFRelease(v73);
  }
LABEL_116:
  if (v127)
  {
    v74 = v126;
    v126 = 0;
    if (v74)
      CFRelease(v74);
  }
LABEL_119:
  if (v14)
  {
    CFRelease(v14);
    v49 = v136;
  }
  if (!v49)
  {
LABEL_143:
    v95 = *a1;
    v96 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v97 = a1[3];
    if (v97)
    {
      if (v96)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v97 + 16))(v97, v95);
        if (v136)
          goto LABEL_122;
      }
    }
    goto LABEL_144;
  }
LABEL_122:
  v75 = v128;
  v76 = v129;
  v128 = 0u;
  v129 = 0u;
  *(_OWORD *)a2 = v75;
  *(_OWORD *)(a2 + 16) = v76;
  v77 = v130;
  v130 = 0;
  *(_QWORD *)(a2 + 32) = v77;
  *(_BYTE *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 56) = 0;
  if (v133)
  {
    *(_QWORD *)(a2 + 40) = v131;
    v78 = v132;
    v131 = 0;
    v132 = 0;
    *(_QWORD *)(a2 + 48) = v78;
    *(_BYTE *)(a2 + 56) = 1;
  }
  v79 = v134;
  v134 = 0uLL;
  *(_OWORD *)(a2 + 64) = v79;
  v80 = v135;
  v135 = 0;
  *(_QWORD *)(a2 + 80) = v80;
  *(_BYTE *)(a2 + 88) = 1;
  *(_BYTE *)(a2 + 96) = 1;
  if (v136)
    WebKit::CoreIPCDDScannerResult::~CoreIPCDDScannerResult((WebKit::CoreIPCDDScannerResult *)&v128, v28);
}

void sub_19789D6DC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, __int16 a17, char a18, char a19, CFTypeRef a20,char a21,CFTypeRef a22,char a23,CFTypeRef cf,char a25,CFTypeRef a26,char a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,char a33,uint64_t a34,int a35,int a36,char a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  const void *v46;

  if (a33)
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a29, a2);
  if (a21 && a20)
    CFRelease(a20);
  if (a23 && a22)
    CFRelease(a22);
  if (a25 && cf)
    CFRelease(cf);
  if (a27 && a26)
    CFRelease(a26);
  if (v46)
    CFRelease(v46);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<std::optional<WebKit::CoreIPCPKPaymentMethod>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCPKPaymentMethod>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;

  v4 = *(unsigned __int8 *)(a2 + 64);
  v5 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *v5 = 1;
    if (*(_BYTE *)(a2 + 64))
    {
      IPC::ArgumentCoder<WebKit::CoreIPCPKPaymentMethod,void>::encode(a1, a2);
    }
    else
    {
      v6 = (uint64_t *)std::__throw_bad_optional_access[abi:sn180100]();
      IPC::ArgumentCoder<std::optional<WebKit::CoreIPCPKPaymentMethod>,void>::decode<IPC::Decoder>(v6, v7);
    }
  }
  else
  {
    *v5 = 0;
  }
}

void IPC::ArgumentCoder<std::optional<WebKit::CoreIPCPKPaymentMethod>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  void *v9;
  int v10;
  CFTypeRef v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  unsigned int v16;
  unint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  int *v21;
  int v22;
  uint64_t v23;
  int *v24;
  int v25;
  uint64_t v26;
  int *v27;
  int v28;
  uint64_t v29;
  int *v30;
  int v31;
  uint64_t v32;
  int *v33;
  int v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  void *v51;
  WTF *v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  uint64_t v56;
  uint64_t v57;
  WTF *v58;
  uint64_t v59;
  uint64_t v60;
  WTF *v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  CFTypeRef v84;
  int v85;
  CFTypeRef v86;
  CFTypeRef v87;
  CFTypeRef v88;
  CFTypeRef v89;
  CFTypeRef v90;
  CFTypeRef v91;
  CFTypeRef v92;
  CFTypeRef v93;
  CFTypeRef v94;
  CFTypeRef v95;
  CFTypeRef v96;
  CFTypeRef v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  char v130;
  CFTypeRef v131;
  char v132;
  CFTypeRef v133;
  char v134;
  CFTypeRef v135;
  char v136;
  CFTypeRef v137;
  char v138;
  _QWORD *v139;
  CFTypeRef cf[2];
  __int128 v141;
  __int128 v142;
  __int128 v143;
  char v144;
  char v145;
  CFTypeRef v146;
  char v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  uint64_t v164[5];
  char v165;
  uint64_t v166[5];
  char v167;
  WTF::StringImpl *v168;
  char v169;
  WTF::StringImpl *v170;
  char v171;
  WTF::StringImpl *v172;
  char v173;
  WTF::StringImpl *v174;
  char v175;
  WTF::StringImpl *v176;
  char v177;
  WTF::StringImpl *v178;
  char v179;
  WTF::StringImpl *v180;
  char v181;
  WTF::StringImpl *v182;
  char v183;
  WTF::StringImpl *v184;
  char v185;
  WTF::StringImpl *v186;
  char v187;
  WTF::StringImpl *v188;
  char v189;
  WTF::StringImpl *v190;
  char v191;
  WTF::StringImpl *v192;
  char v193;
  WTF::StringImpl *v194;
  char v195;
  WTF::StringImpl *v196;
  char v197;
  WTF::StringImpl *v198;
  char v199;
  uint64_t v200;
  CFTypeRef v201[2];
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  _OWORD v208[3];
  char v209;
  _BYTE v210[40];
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  uint64_t v216;

  v216 = *MEMORY[0x1E0C80C00];
  v4 = a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
  {
    v102 = 0;
    v103 = 0;
    *a1 = 0;
    a1[1] = 0;
    v104 = a1[3];
    if (v104)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v104 + 16))(v104);
        v103 = *a1;
        v102 = a1[1];
      }
      else
      {
        v102 = 0;
        v103 = 0;
      }
    }
    goto LABEL_250;
  }
  v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v102 = v4;
    v103 = 0;
LABEL_250:
    v4 = 0;
    v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    v105 = a1[3];
    if (v105)
    {
      if (v102)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v105 + 16))(v105, v103, v102);
        v5 = *a1;
        v4 = a1[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
    goto LABEL_251;
  }
  v8 = *v7;
  if (v8 >= 2)
  {
LABEL_251:
    *a1 = 0;
    a1[1] = 0;
    v106 = a1[3];
    if (v106 && v4)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v106 + 16))(v106, v5);
    goto LABEL_255;
  }
  if (!v8)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 64) = 0;
    *(_BYTE *)(a2 + 72) = 1;
    return;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSNumber>>(a1, (uint64_t)&v137);
  if (!v138)
  {
    LOBYTE(v126) = 0;
    v130 = 0;
    goto LABEL_247;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v135);
  if (!v136)
  {
    LOBYTE(v126) = 0;
    v130 = 0;
    goto LABEL_244;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v133);
  if (!v134)
  {
    LOBYTE(v126) = 0;
    v130 = 0;
    goto LABEL_241;
  }
  v201[0] = (CFTypeRef)((uint64_t (*)(void))*MEMORY[0x1E0DCE088])();
  WTF::HashSet<objc_class *,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::HashSet((uint64_t *)&v146, (uint64_t *)v201, 1);
  WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::operator=(a1 + 7, (_QWORD **)&v146);
  IPC::decodeObjectDirectlyRequiringAllowedClasses<PKSecureElementPass>(a1, cf);
  v10 = LOBYTE(cf[1]);
  if (LOBYTE(cf[1]))
  {
    v11 = cf[0];
    if (cf[0])
    {
      CFRetain(cf[0]);
      CFRelease(v11);
    }
  }
  else
  {
    v11 = 0;
  }
  if (!v146)
  {
    if (v10)
      goto LABEL_18;
LABEL_268:
    v120 = *a1;
    v121 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v122 = a1[3];
    if (v122 && v121)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v122 + 16))(v122, v120);
    LOBYTE(v126) = 0;
    v130 = 0;
    goto LABEL_238;
  }
  WTF::fastFree((WTF *)((char *)v146 - 16), v9);
  if (!v10)
    goto LABEL_268;
LABEL_18:
  IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v131);
  if (!v132)
  {
    LOBYTE(v126) = 0;
    v130 = 0;
    goto LABEL_236;
  }
  v200 = ((uint64_t (*)(void))*MEMORY[0x1E0DCDF30])();
  WTF::HashSet<objc_class *,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::HashSet((uint64_t *)&v139, &v200, 1);
  WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::operator=(a1 + 7, &v139);
  v12 = a1[1];
  v13 = (char *)*a1;
  v14 = a1[2] - *a1;
  if (v12 <= v14)
    goto LABEL_257;
  v15 = &v13[v14];
  a1[2] = (uint64_t)(v15 + 1);
  if (!v13)
  {
    v110 = v12;
    v111 = 0;
    goto LABEL_258;
  }
  v16 = *v15;
  if (v16 >= 2)
    goto LABEL_259;
  if (!v16)
  {
    LOBYTE(cf[0]) = 0;
    v144 = 0;
    v145 = 1;
    goto LABEL_205;
  }
  IPC::Decoder::decode<WTF::String>(a1, &v198);
  v17 = IPC::Decoder::decode<long>(a1);
  if (!*a1)
    goto LABEL_102;
  if (!(_BYTE)v18)
    goto LABEL_256;
  v19 = (const void *)v17;
  if (v17 >= 2)
  {
LABEL_102:
    LOBYTE(v146) = 0;
    v148 = 0;
    goto LABEL_197;
  }
  IPC::Decoder::decode<WTF::String>(a1, &v196);
  IPC::Decoder::decode<WTF::String>(a1, &v194);
  IPC::Decoder::decode<WTF::String>(a1, &v192);
  IPC::Decoder::decode<WTF::String>(a1, &v190);
  IPC::Decoder::decode<WTF::String>(a1, &v188);
  IPC::Decoder::decode<WTF::String>(a1, &v186);
  IPC::Decoder::decode<WTF::String>(a1, &v184);
  IPC::Decoder::decode<WTF::String>(a1, &v182);
  IPC::Decoder::decode<WTF::String>(a1, &v180);
  IPC::Decoder::decode<WTF::String>(a1, &v178);
  IPC::Decoder::decode<WTF::String>(a1, &v176);
  IPC::Decoder::decode<WTF::String>(a1, &v174);
  IPC::Decoder::decode<WTF::String>(a1, &v172);
  IPC::Decoder::decode<WTF::String>(a1, &v170);
  IPC::Decoder::decode<WTF::String>(a1, &v168);
  IPC::Decoder::decode<std::optional<WebKit::CoreIPCDateComponents>>((uint64_t)v166, a1);
  IPC::Decoder::decode<std::optional<WebKit::CoreIPCDateComponents>>((uint64_t)v164, a1);
  IPC::Decoder::decode<WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v161, a1);
  if (!*a1)
    goto LABEL_103;
  if (!v163)
    goto LABEL_256;
  if (!HIDWORD(v162))
  {
LABEL_32:
    IPC::Decoder::decode<WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v158, a1);
    if (!*a1)
    {
LABEL_104:
      LOBYTE(v146) = 0;
      v148 = 0;
LABEL_114:
      if (v160)
        WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v158, v18);
      goto LABEL_116;
    }
    if (!v160)
      goto LABEL_256;
    if (HIDWORD(v159))
    {
      v23 = 96 * HIDWORD(v159);
      v24 = (int *)(v158 + 88);
      do
      {
        v25 = *v24;
        v24 += 24;
        if (v25 != 1)
          goto LABEL_104;
        v23 -= 96;
      }
      while (v23);
    }
    IPC::Decoder::decode<WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v155, a1);
    if (!*a1)
      goto LABEL_105;
    if (!v157)
      goto LABEL_256;
    if (HIDWORD(v156))
    {
      v26 = 96 * HIDWORD(v156);
      v27 = (int *)(v155 + 88);
      while (1)
      {
        v28 = *v27;
        v27 += 24;
        if (v28 != 3)
          break;
        v26 -= 96;
        if (!v26)
          goto LABEL_44;
      }
LABEL_105:
      LOBYTE(v146) = 0;
      v148 = 0;
LABEL_112:
      if (v157)
        WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v155, v18);
      goto LABEL_114;
    }
LABEL_44:
    IPC::Decoder::decode<WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v152, a1);
    if (!*a1)
      goto LABEL_106;
    if (!v154)
      goto LABEL_256;
    if (HIDWORD(v153))
    {
      v29 = 96 * HIDWORD(v153);
      v30 = (int *)(v152 + 88);
      while (1)
      {
        v31 = *v30;
        v30 += 24;
        if (v31 != 2)
          break;
        v29 -= 96;
        if (!v29)
          goto LABEL_50;
      }
LABEL_106:
      LOBYTE(v146) = 0;
      v148 = 0;
LABEL_110:
      if (v154)
        WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v152, v18);
      goto LABEL_112;
    }
LABEL_50:
    IPC::Decoder::decode<WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v149, a1);
    if (*a1)
    {
      if (!v151)
        goto LABEL_256;
      if (!HIDWORD(v150))
      {
LABEL_56:
        v209 = 0;
        v210[0] = 0;
        v210[32] = 0;
        *(_OWORD *)v201 = 0u;
        v202 = 0u;
        v203 = 0u;
        v204 = 0u;
        v205 = 0u;
        v206 = 0u;
        v207 = 0u;
        memset(v208, 0, 25);
        v214 = 0u;
        v215 = 0u;
        v211 = 0u;
        v212 = 0u;
        v213 = 0u;
        if (!v199)
          goto LABEL_256;
        v35 = v198;
        v198 = 0;
        v201[0] = v35;
        v201[1] = v19;
        if (!v197)
          goto LABEL_256;
        v36 = v196;
        v196 = 0;
        *(_QWORD *)&v202 = v36;
        if (!v195)
          goto LABEL_256;
        v37 = v194;
        v194 = 0;
        *((_QWORD *)&v202 + 1) = v37;
        if (!v193)
          goto LABEL_256;
        v38 = v192;
        v192 = 0;
        *(_QWORD *)&v203 = v38;
        if (!v191)
          goto LABEL_256;
        v39 = v190;
        v190 = 0;
        *((_QWORD *)&v203 + 1) = v39;
        if (!v189)
          goto LABEL_256;
        v40 = v188;
        v188 = 0;
        *(_QWORD *)&v204 = v40;
        if (!v187)
          goto LABEL_256;
        v41 = v186;
        v186 = 0;
        *((_QWORD *)&v204 + 1) = v41;
        if (!v185)
          goto LABEL_256;
        v42 = v184;
        v184 = 0;
        *(_QWORD *)&v205 = v42;
        if (!v183)
          goto LABEL_256;
        v43 = v182;
        v182 = 0;
        *((_QWORD *)&v205 + 1) = v43;
        if (!v181)
          goto LABEL_256;
        v44 = v180;
        v180 = 0;
        *(_QWORD *)&v206 = v44;
        if (!v179)
          goto LABEL_256;
        v45 = v178;
        v178 = 0;
        *((_QWORD *)&v206 + 1) = v45;
        if (!v177)
          goto LABEL_256;
        v46 = v176;
        v176 = 0;
        *(_QWORD *)&v207 = v46;
        if (!v175)
          goto LABEL_256;
        v47 = v174;
        v174 = 0;
        *((_QWORD *)&v207 + 1) = v47;
        if (!v173)
          goto LABEL_256;
        v48 = v172;
        v172 = 0;
        *(_QWORD *)&v208[0] = v48;
        if (!v171)
          goto LABEL_256;
        v49 = v170;
        v170 = 0;
        *((_QWORD *)&v208[0] + 1) = v49;
        if (!v169)
          goto LABEL_256;
        v50 = v168;
        v168 = 0;
        *(_QWORD *)&v208[1] = v50;
        if (!v167)
          goto LABEL_256;
        std::__optional_storage_base<WebKit::CoreIPCDateComponents,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::CoreIPCDateComponents,false>>((uint64_t)&v208[1] + 8, v166);
        if (!v165)
          goto LABEL_256;
        std::__optional_storage_base<WebKit::CoreIPCDateComponents,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::CoreIPCDateComponents,false>>((uint64_t)v210, v164);
        if (!v163)
          goto LABEL_256;
        if (HIDWORD(v211))
          WTF::VectorDestructor<true,WebKit::CoreIPCContactLabeledValue>::destruct((WTF::StringImpl *)v211, (WTF::StringImpl *)(v211 + 96 * HIDWORD(v211)));
        v52 = (WTF *)v211;
        if ((_QWORD)v211)
        {
          *(_QWORD *)&v211 = 0;
          DWORD2(v211) = 0;
          WTF::fastFree(v52, v51);
        }
        v53 = v161;
        v161 = 0;
        *(_QWORD *)&v211 = v53;
        v54 = v162;
        v162 = 0;
        *((_QWORD *)&v211 + 1) = v54;
        if (!v160)
          goto LABEL_256;
        if (HIDWORD(v212))
          WTF::VectorDestructor<true,WebKit::CoreIPCContactLabeledValue>::destruct((WTF::StringImpl *)v212, (WTF::StringImpl *)(v212 + 96 * HIDWORD(v212)));
        v55 = (WTF *)v212;
        if ((_QWORD)v212)
        {
          *(_QWORD *)&v212 = 0;
          DWORD2(v212) = 0;
          WTF::fastFree(v55, v51);
        }
        v56 = v158;
        v158 = 0;
        *(_QWORD *)&v212 = v56;
        v57 = v159;
        v159 = 0;
        *((_QWORD *)&v212 + 1) = v57;
        if (!v157)
          goto LABEL_256;
        if (HIDWORD(v213))
          WTF::VectorDestructor<true,WebKit::CoreIPCContactLabeledValue>::destruct((WTF::StringImpl *)v213, (WTF::StringImpl *)(v213 + 96 * HIDWORD(v213)));
        v58 = (WTF *)v213;
        if ((_QWORD)v213)
        {
          *(_QWORD *)&v213 = 0;
          DWORD2(v213) = 0;
          WTF::fastFree(v58, v51);
        }
        v59 = v155;
        v155 = 0;
        *(_QWORD *)&v213 = v59;
        v60 = v156;
        v156 = 0;
        *((_QWORD *)&v213 + 1) = v60;
        if (!v154)
          goto LABEL_256;
        if (HIDWORD(v214))
          WTF::VectorDestructor<true,WebKit::CoreIPCContactLabeledValue>::destruct((WTF::StringImpl *)v214, (WTF::StringImpl *)(v214 + 96 * HIDWORD(v214)));
        v61 = (WTF *)v214;
        if ((_QWORD)v214)
        {
          *(_QWORD *)&v214 = 0;
          DWORD2(v214) = 0;
          WTF::fastFree(v61, v51);
        }
        v62 = v152;
        v152 = 0;
        *(_QWORD *)&v214 = v62;
        v63 = v153;
        v153 = 0;
        *((_QWORD *)&v214 + 1) = v63;
        if (!v151)
          goto LABEL_256;
        if (HIDWORD(v215))
          WTF::VectorDestructor<true,WebKit::CoreIPCContactLabeledValue>::destruct((WTF::StringImpl *)v215, (WTF::StringImpl *)(v215 + 96 * HIDWORD(v215)));
        v64 = (WTF *)v215;
        if ((_QWORD)v215)
        {
          *(_QWORD *)&v215 = 0;
          DWORD2(v215) = 0;
          WTF::fastFree(v64, v51);
        }
        v65 = v149;
        v149 = 0;
        *(_QWORD *)&v215 = v65;
        v66 = v150;
        v150 = 0;
        *((_QWORD *)&v215 + 1) = v66;
        WebKit::CoreIPCCNContact::CoreIPCCNContact((uint64_t)&v146, (uint64_t *)v201);
        v148 = 1;
        WebKit::CoreIPCCNContact::~CoreIPCCNContact((WebKit::CoreIPCCNContact *)v201, v67);
        goto LABEL_108;
      }
      v32 = 96 * HIDWORD(v150);
      v33 = (int *)(v149 + 88);
      while (1)
      {
        v34 = *v33;
        v33 += 24;
        if (v34 != 3)
          break;
        v32 -= 96;
        if (!v32)
          goto LABEL_56;
      }
    }
    LOBYTE(v146) = 0;
    v148 = 0;
LABEL_108:
    if (v151)
      WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v149, v18);
    goto LABEL_110;
  }
  v20 = 96 * HIDWORD(v162);
  v21 = (int *)(v161 + 88);
  while (1)
  {
    v22 = *v21;
    v21 += 24;
    if (v22)
      break;
    v20 -= 96;
    if (!v20)
      goto LABEL_32;
  }
LABEL_103:
  LOBYTE(v146) = 0;
  v148 = 0;
LABEL_116:
  if (v163)
    WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v161, v18);
  if (v165)
    std::__optional_destruct_base<WebKit::CoreIPCDateComponents,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v164, v18);
  if (v167)
    std::__optional_destruct_base<WebKit::CoreIPCDateComponents,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v166, v18);
  if (v169)
  {
    v68 = v168;
    v168 = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 == 2)
        WTF::StringImpl::destroy(v68, (WTF::StringImpl *)v18);
      else
        *(_DWORD *)v68 -= 2;
    }
  }
  if (v171)
  {
    v69 = v170;
    v170 = 0;
    if (v69)
    {
      if (*(_DWORD *)v69 == 2)
        WTF::StringImpl::destroy(v69, (WTF::StringImpl *)v18);
      else
        *(_DWORD *)v69 -= 2;
    }
  }
  if (v173)
  {
    v70 = v172;
    v172 = 0;
    if (v70)
    {
      if (*(_DWORD *)v70 == 2)
        WTF::StringImpl::destroy(v70, (WTF::StringImpl *)v18);
      else
        *(_DWORD *)v70 -= 2;
    }
  }
  if (v175)
  {
    v71 = v174;
    v174 = 0;
    if (v71)
    {
      if (*(_DWORD *)v71 == 2)
        WTF::StringImpl::destroy(v71, (WTF::StringImpl *)v18);
      else
        *(_DWORD *)v71 -= 2;
    }
  }
  if (v177)
  {
    v72 = v176;
    v176 = 0;
    if (v72)
    {
      if (*(_DWORD *)v72 == 2)
        WTF::StringImpl::destroy(v72, (WTF::StringImpl *)v18);
      else
        *(_DWORD *)v72 -= 2;
    }
  }
  if (v179)
  {
    v73 = v178;
    v178 = 0;
    if (v73)
    {
      if (*(_DWORD *)v73 == 2)
        WTF::StringImpl::destroy(v73, (WTF::StringImpl *)v18);
      else
        *(_DWORD *)v73 -= 2;
    }
  }
  if (v181)
  {
    v74 = v180;
    v180 = 0;
    if (v74)
    {
      if (*(_DWORD *)v74 == 2)
        WTF::StringImpl::destroy(v74, (WTF::StringImpl *)v18);
      else
        *(_DWORD *)v74 -= 2;
    }
  }
  if (v183)
  {
    v75 = v182;
    v182 = 0;
    if (v75)
    {
      if (*(_DWORD *)v75 == 2)
        WTF::StringImpl::destroy(v75, (WTF::StringImpl *)v18);
      else
        *(_DWORD *)v75 -= 2;
    }
  }
  if (v185)
  {
    v76 = v184;
    v184 = 0;
    if (v76)
    {
      if (*(_DWORD *)v76 == 2)
        WTF::StringImpl::destroy(v76, (WTF::StringImpl *)v18);
      else
        *(_DWORD *)v76 -= 2;
    }
  }
  if (v187)
  {
    v77 = v186;
    v186 = 0;
    if (v77)
    {
      if (*(_DWORD *)v77 == 2)
        WTF::StringImpl::destroy(v77, (WTF::StringImpl *)v18);
      else
        *(_DWORD *)v77 -= 2;
    }
  }
  if (v189)
  {
    v78 = v188;
    v188 = 0;
    if (v78)
    {
      if (*(_DWORD *)v78 == 2)
        WTF::StringImpl::destroy(v78, (WTF::StringImpl *)v18);
      else
        *(_DWORD *)v78 -= 2;
    }
  }
  if (v191)
  {
    v79 = v190;
    v190 = 0;
    if (v79)
    {
      if (*(_DWORD *)v79 == 2)
        WTF::StringImpl::destroy(v79, (WTF::StringImpl *)v18);
      else
        *(_DWORD *)v79 -= 2;
    }
  }
  if (v193)
  {
    v80 = v192;
    v192 = 0;
    if (v80)
    {
      if (*(_DWORD *)v80 == 2)
        WTF::StringImpl::destroy(v80, (WTF::StringImpl *)v18);
      else
        *(_DWORD *)v80 -= 2;
    }
  }
  if (v195)
  {
    v81 = v194;
    v194 = 0;
    if (v81)
    {
      if (*(_DWORD *)v81 == 2)
        WTF::StringImpl::destroy(v81, (WTF::StringImpl *)v18);
      else
        *(_DWORD *)v81 -= 2;
    }
  }
  if (v197)
  {
    v82 = v196;
    v196 = 0;
    if (v82)
    {
      if (*(_DWORD *)v82 == 2)
        WTF::StringImpl::destroy(v82, (WTF::StringImpl *)v18);
      else
        *(_DWORD *)v82 -= 2;
    }
  }
LABEL_197:
  if (v199)
  {
    v83 = v198;
    v198 = 0;
    if (v83)
    {
      if (*(_DWORD *)v83 == 2)
        WTF::StringImpl::destroy(v83, (WTF::StringImpl *)v18);
      else
        *(_DWORD *)v83 -= 2;
    }
  }
  if (v148
    || (v115 = *a1, v116 = a1[1], *a1 = 0, a1[1] = 0, (v117 = a1[3]) != 0)
    && v116
    && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v117 + 16))(v117, v115), v148))
  {
    WebKit::CoreIPCCNContact::CoreIPCCNContact((uint64_t)cf, (uint64_t *)&v146);
    v144 = 1;
    v145 = 1;
    if (!v148)
      goto LABEL_205;
    WebKit::CoreIPCCNContact::~CoreIPCCNContact((WebKit::CoreIPCCNContact *)&v146, v13);
    if (v145)
      goto LABEL_205;
    goto LABEL_264;
  }
  while (1)
  {
    LOBYTE(cf[0]) = 0;
    v145 = 0;
LABEL_264:
    v13 = (char *)*a1;
    v118 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v119 = a1[3];
    if (v119 && v118 && ((*(void (**)(uint64_t, char *))(*(_QWORD *)v119 + 16))(v119, v13), v145))
    {
LABEL_205:
      if (v144)
      {
        WebKit::CoreIPCCNContact::toID((WebKit::CoreIPCCNContact *)cf, &v146);
        v84 = v146;
        if (v145 && v144)
          WebKit::CoreIPCCNContact::~CoreIPCCNContact((WebKit::CoreIPCCNContact *)cf, v13);
        if (v84)
        {
          CFRetain(v84);
          CFRelease(v84);
        }
      }
      else
      {
        v84 = 0;
      }
      v85 = 0;
    }
    else
    {
      v84 = 0;
      v85 = 1;
    }
    if (v139)
      break;
    if (v85)
      goto LABEL_271;
LABEL_215:
    IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v146);
    if (!v147)
    {
      LOBYTE(v126) = 0;
      v130 = 0;
      goto LABEL_231;
    }
    IPC::Decoder::decode<WTF::RetainPtr<NSNumber>>(a1, (uint64_t)v201);
    if (!LOBYTE(v201[1]))
    {
      LOBYTE(v126) = 0;
      v130 = 0;
      goto LABEL_228;
    }
    if (!*a1)
    {
      LOBYTE(v126) = 0;
      v130 = 0;
      goto LABEL_224;
    }
    if (v138 && v136 && v134 && v132 && v147)
    {
      v86 = v137;
      v137 = 0;
      v87 = v135;
      v135 = 0;
      v88 = v133;
      v133 = 0;
      v89 = v131;
      v131 = 0;
      v90 = v146;
      v146 = 0;
      v91 = v201[0];
      v201[0] = 0;
      *(_QWORD *)&v126 = v86;
      *((_QWORD *)&v126 + 1) = v87;
      *(_OWORD *)cf = 0u;
      v141 = 0u;
      *(_QWORD *)&v127 = v88;
      *((_QWORD *)&v127 + 1) = v11;
      *(_QWORD *)&v128 = v89;
      *((_QWORD *)&v128 + 1) = v84;
      v142 = 0u;
      v143 = 0u;
      *(_QWORD *)&v129 = v90;
      *((_QWORD *)&v129 + 1) = v91;
      v130 = 1;
      WebKit::CoreIPCPKPaymentMethod::~CoreIPCPKPaymentMethod((WebKit::CoreIPCPKPaymentMethod *)cf);
      v11 = 0;
      v84 = 0;
      if (LOBYTE(v201[1]))
      {
LABEL_224:
        v92 = v201[0];
        v201[0] = 0;
        if (v92)
          CFRelease(v92);
      }
LABEL_228:
      if (v147)
      {
        v93 = v146;
        v146 = 0;
        if (v93)
          CFRelease(v93);
      }
LABEL_231:
      if (v84)
        CFRelease(v84);
      goto LABEL_233;
    }
LABEL_256:
    __break(1u);
LABEL_257:
    v110 = 0;
    v111 = 0;
    *a1 = 0;
    a1[1] = 0;
    v112 = a1[3];
    if (v112)
    {
      if (v12)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v112 + 16))(v112);
        v111 = *a1;
        v110 = a1[1];
      }
      else
      {
        v110 = 0;
        v111 = 0;
      }
    }
LABEL_258:
    v12 = 0;
    v13 = 0;
    *a1 = 0;
    a1[1] = 0;
    v113 = a1[3];
    if (v113)
    {
      if (v110)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v113 + 16))(v113, v111, v110);
        v13 = (char *)*a1;
        v12 = a1[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
    }
LABEL_259:
    *a1 = 0;
    a1[1] = 0;
    v114 = a1[3];
    if (v114 && v12)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v114 + 16))(v114, v13);
  }
  WTF::fastFree((WTF *)(v139 - 2), v13);
  if (!v85)
    goto LABEL_215;
LABEL_271:
  v123 = *a1;
  v124 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v125 = a1[3];
  if (v125 && v124)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v125 + 16))(v125, v123);
  LOBYTE(v126) = 0;
  v130 = 0;
LABEL_233:
  if (v132)
  {
    v94 = v131;
    v131 = 0;
    if (v94)
      CFRelease(v94);
  }
LABEL_236:
  if (v11)
    CFRelease(v11);
LABEL_238:
  if (v134)
  {
    v95 = v133;
    v133 = 0;
    if (v95)
      CFRelease(v95);
  }
LABEL_241:
  if (v136)
  {
    v96 = v135;
    v135 = 0;
    if (v96)
      CFRelease(v96);
  }
LABEL_244:
  if (v138)
  {
    v97 = v137;
    v137 = 0;
    if (v97)
      CFRelease(v97);
  }
LABEL_247:
  if (v130)
  {
    v98 = v126;
    v99 = v127;
    v126 = 0u;
    v127 = 0u;
    *(_OWORD *)a2 = v98;
    *(_OWORD *)(a2 + 16) = v99;
    v100 = v128;
    v101 = v129;
    v128 = 0u;
    v129 = 0u;
    *(_OWORD *)(a2 + 32) = v100;
    *(_OWORD *)(a2 + 48) = v101;
    *(_BYTE *)(a2 + 64) = 1;
    *(_BYTE *)(a2 + 72) = 1;
    WebKit::CoreIPCPKPaymentMethod::~CoreIPCPKPaymentMethod((WebKit::CoreIPCPKPaymentMethod *)&v126);
    return;
  }
  v107 = *a1;
  v108 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v109 = a1[3];
  if (v109)
  {
    if (v108)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v109 + 16))(v109, v107);
  }
LABEL_255:
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 72) = 0;
}

void sub_19789E94C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, CFTypeRef cf, char a19, CFTypeRef a20,char a21,CFTypeRef a22,char a23,CFTypeRef a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  CFTypeRef a67;
  const void *v67;

  if (LOBYTE(STACK[0x2F8]))
    WebKit::CoreIPCCNContact::~CoreIPCCNContact((WebKit::CoreIPCCNContact *)&a67, a2);
  if (a26)
    WTF::fastFree((WTF *)(a26 - 16), a2);
  if (a19 && cf)
    CFRelease(cf);
  if (v67)
    CFRelease(v67);
  if (a21 && a20)
    CFRelease(a20);
  if (a23 && a22)
    CFRelease(a22);
  if (a25)
  {
    if (a24)
      CFRelease(a24);
  }
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<std::optional<WebKit::CoreIPCPKPaymentMerchantSession>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  WTF **v16;
  WTF *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  WTF *v22;
  uint64_t v23;
  const void *v24;
  const void *v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t *v47;
  uint64_t v48;
  int v49;
  WTF *v50;
  uint64_t v51;
  const void *v52;
  const void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  CFTypeRef v60;
  CFTypeRef v61;
  const void *v62;
  const void *v63;
  const void *v64;
  const void *v65;
  const void *v66;
  const void *v67;
  const void *v68;
  const void *v69;
  const void *v70;
  const void *v71;
  const void *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  WTF *v84;
  WTF *v85;
  WTF *v86;
  const void **v87;
  const void *v88;
  const void *v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  char v101;
  WTF *v102[2];
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t v112[2];
  char v113;
  char v114;
  CFTypeRef cf;
  char v116;
  CFTypeRef v117;
  char v118;
  const void *v119;
  char v120;
  const void *v121;
  char v122;
  const void *v123;
  char v124;
  const void *v125;
  char v126;
  const void *v127;
  char v128;
  const void *v129;
  char v130;
  const void *v131;
  char v132;
  const void *v133;
  char v134;
  const void *v135;
  char v136;
  const void *v137;
  char v138;
  const void *v139;
  char v140;
  const void *v141;
  char v142;

  v4 = a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
  {
    v31 = 0;
    v32 = 0;
    *a1 = 0;
    a1[1] = 0;
    v33 = a1[3];
    if (v33)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
        v32 = *a1;
        v31 = a1[1];
      }
      else
      {
        v31 = 0;
        v32 = 0;
      }
    }
    goto LABEL_58;
  }
  v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v31 = v4;
    v32 = 0;
LABEL_58:
    v4 = 0;
    v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    v34 = a1[3];
    if (v34)
    {
      if (v31)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v32, v31);
        v5 = *a1;
        v4 = a1[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
    goto LABEL_59;
  }
  v8 = *v7;
  if (v8 >= 2)
  {
LABEL_59:
    *a1 = 0;
    a1[1] = 0;
    v35 = a1[3];
    if (v35 && v4)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 16))(v35, v5);
    goto LABEL_40;
  }
  if (!v8)
  {
    *a2 = 0;
    a2[128] = 0;
    a2[136] = 1;
    return;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v139);
  if (!v140)
  {
    LOBYTE(v91) = 0;
    v101 = 0;
    goto LABEL_39;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v137);
  if (!v138)
  {
    v30 = 0;
    LOBYTE(v91) = 0;
    v101 = 0;
    goto LABEL_131;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v135);
  if (!v136)
  {
    v30 = 0;
    LOBYTE(v91) = 0;
    v101 = 0;
LABEL_128:
    if (v138)
    {
      v71 = v137;
      v137 = 0;
      if (v71)
        CFRelease(v71);
    }
LABEL_131:
    if (v140)
    {
      v72 = v139;
      v139 = 0;
      if (v72)
        CFRelease(v72);
    }
    if (v30)
      goto LABEL_135;
LABEL_39:
    v27 = *a1;
    v28 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v29 = a1[3];
    if (v29)
    {
      if (v28)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, v27);
        if (v101)
        {
LABEL_135:
          std::__optional_destruct_base<WebKit::CoreIPCPKPaymentMerchantSession,false>::__optional_destruct_base[abi:sn180100]<WebKit::CoreIPCPKPaymentMerchantSession>((uint64_t)a2, (uint64_t *)&v91);
          a2[136] = 1;
          if (v101)
            WebKit::CoreIPCPKPaymentMerchantSession::~CoreIPCPKPaymentMerchantSession((WebKit::CoreIPCPKPaymentMerchantSession *)&v91, v73);
          return;
        }
      }
    }
LABEL_40:
    *a2 = 0;
    a2[136] = 0;
    return;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSNumber>>(a1, (uint64_t)&v133);
  if (!v134)
  {
    v30 = 0;
    LOBYTE(v91) = 0;
    v101 = 0;
LABEL_125:
    if (v136)
    {
      v70 = v135;
      v135 = 0;
      if (v70)
        CFRelease(v70);
    }
    goto LABEL_128;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSNumber>>(a1, (uint64_t)&v131);
  if (!v132)
  {
    v30 = 0;
    LOBYTE(v91) = 0;
    v101 = 0;
LABEL_122:
    if (v134)
    {
      v69 = v133;
      v133 = 0;
      if (v69)
        CFRelease(v69);
    }
    goto LABEL_125;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v129);
  if (!v130)
  {
    v30 = 0;
    LOBYTE(v91) = 0;
    v101 = 0;
LABEL_119:
    if (v132)
    {
      v68 = v131;
      v131 = 0;
      if (v68)
        CFRelease(v68);
    }
    goto LABEL_122;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v127);
  if (!v128)
  {
    v30 = 0;
    LOBYTE(v91) = 0;
    v101 = 0;
LABEL_116:
    if (v130)
    {
      v67 = v129;
      v129 = 0;
      if (v67)
        CFRelease(v67);
    }
    goto LABEL_119;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSData>>(a1, (uint64_t)&v125);
  if (!v126)
  {
    v30 = 0;
    LOBYTE(v91) = 0;
    v101 = 0;
LABEL_113:
    if (v128)
    {
      v66 = v127;
      v127 = 0;
      if (v66)
        CFRelease(v66);
    }
    goto LABEL_116;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v123);
  if (!v124)
  {
    v30 = 0;
    LOBYTE(v91) = 0;
    v101 = 0;
LABEL_110:
    if (v126)
    {
      v65 = v125;
      v125 = 0;
      if (v65)
        CFRelease(v65);
    }
    goto LABEL_113;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v121);
  if (!v122)
  {
    v30 = 0;
    LOBYTE(v91) = 0;
    v101 = 0;
LABEL_107:
    if (v124)
    {
      v64 = v123;
      v123 = 0;
      if (v64)
        CFRelease(v64);
    }
    goto LABEL_110;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v119);
  if (!v120)
  {
    v30 = 0;
    LOBYTE(v91) = 0;
    v101 = 0;
LABEL_104:
    if (v122)
    {
      v63 = v121;
      v121 = 0;
      if (v63)
        CFRelease(v63);
    }
    goto LABEL_107;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSData>>(a1, (uint64_t)&v117);
  if (!v118)
  {
    v30 = 0;
    LOBYTE(v91) = 0;
    v101 = 0;
LABEL_101:
    if (v120)
    {
      v62 = v119;
      v119 = 0;
      if (v62)
        CFRelease(v62);
    }
    goto LABEL_104;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&cf);
  if (!v116)
  {
    v30 = 0;
    LOBYTE(v91) = 0;
    v101 = 0;
LABEL_98:
    if (v118)
    {
      v61 = v117;
      v117 = 0;
      if (v61)
        CFRelease(v61);
    }
    goto LABEL_101;
  }
  v9 = a1[1];
  v10 = (char *)*a1;
  v11 = a1[2] - *a1;
  if (v9 <= v11)
  {
    v74 = 0;
    v75 = 0;
    *a1 = 0;
    a1[1] = 0;
    v76 = a1[3];
    if (v76)
    {
      if (v9)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v76 + 16))(v76);
        v75 = *a1;
        v74 = a1[1];
      }
      else
      {
        v74 = 0;
        v75 = 0;
      }
    }
    goto LABEL_148;
  }
  v12 = &v10[v11];
  v13 = (uint64_t)&v10[v11 + 1];
  a1[2] = v13;
  if (!v10)
  {
    v74 = v9;
    v75 = 0;
LABEL_148:
    v9 = 0;
    v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    v77 = a1[3];
    if (v77)
    {
      if (v74)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v77 + 16))(v77, v75, v74);
        v10 = (char *)*a1;
        v9 = a1[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
    goto LABEL_149;
  }
  v14 = *v12;
  if (v14 >= 2)
  {
LABEL_149:
    *a1 = 0;
    a1[1] = 0;
    v78 = a1[3];
    if (v78 && v9)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v78 + 16))(v78, v10);
LABEL_93:
    LOBYTE(v112[0]) = 0;
    v114 = 0;
    v57 = *a1;
    v58 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v59 = a1[3];
    if (!v59 || !v58 || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v59 + 16))(v59, v57), !v114))
    {
      v30 = 0;
      LOBYTE(v91) = 0;
      v101 = 0;
      goto LABEL_95;
    }
LABEL_64:
    if (*a1)
    {
      if (!v140
        || !v138
        || !v136
        || !v134
        || !v132
        || !v130
        || !v128
        || !v126
        || !v124
        || !v122
        || !v120
        || !v118
        || !v116)
      {
        goto LABEL_182;
      }
      WebKit::CoreIPCPKPaymentMerchantSession::CoreIPCPKPaymentMerchantSession((uint64_t)v102, (uint64_t *)&v139, (uint64_t *)&v137, (uint64_t *)&v135, (uint64_t *)&v133, (uint64_t *)&v131, (uint64_t *)&v129, (uint64_t *)&v127, (uint64_t *)&v125, (uint64_t *)&v123, (uint64_t *)&v121, (uint64_t *)&v119, (uint64_t *)&v117, (uint64_t *)&cf, v112);
      v38 = *(_OWORD *)v102;
      v39 = v103;
      *(_OWORD *)v102 = 0u;
      v103 = 0u;
      v91 = v38;
      v92 = v39;
      v40 = v104;
      v41 = v105;
      v104 = 0u;
      v105 = 0u;
      v93 = v40;
      v94 = v41;
      v42 = v106;
      v43 = v107;
      v106 = 0u;
      v107 = 0u;
      v95 = v42;
      v96 = v43;
      v44 = v108;
      v108 = 0;
      v97 = v44;
      LOBYTE(v98) = 0;
      v100 = 0;
      if (v111)
      {
        v98 = v109;
        v45 = v110;
        v109 = 0;
        v110 = 0;
        v99 = v45;
        v100 = 1;
      }
      v30 = 1;
      v101 = 1;
      WebKit::CoreIPCPKPaymentMerchantSession::~CoreIPCPKPaymentMerchantSession((WebKit::CoreIPCPKPaymentMerchantSession *)v102, v37);
      if (!v114)
        goto LABEL_95;
    }
    else
    {
      v30 = 0;
      LOBYTE(v91) = 0;
      v101 = 0;
    }
    if (v113)
      WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v112, v10);
LABEL_95:
    if (v116)
    {
      v60 = cf;
      cf = 0;
      if (v60)
        CFRelease(v60);
    }
    goto LABEL_98;
  }
  if (!v14)
  {
    LOBYTE(v112[0]) = 0;
    v113 = 0;
    v114 = 1;
    goto LABEL_64;
  }
  v15 = ((v13 + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v10;
  if (v9 < v15 || v9 - v15 <= 7)
  {
    *a1 = 0;
    a1[1] = 0;
    v79 = a1[3];
    if (v79)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v79 + 16))(v79);
      v80 = *a1;
      v81 = a1[1];
      v82 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v82)
      {
        if (v81)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v82 + 16))(v82, v80);
      }
    }
    goto LABEL_92;
  }
  v16 = (WTF **)&v10[v15];
  v17 = *v16;
  a1[2] = (uint64_t)(v16 + 1);
  v102[0] = 0;
  v102[1] = 0;
  if ((unint64_t)v17 < 0x20000)
  {
    if (v17)
    {
      LODWORD(v102[1]) = (_DWORD)v17;
      v102[0] = (WTF *)WTF::fastMalloc((WTF *)(8 * (_QWORD)v17));
      while (1)
      {
        IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v141);
        if (!v142)
          goto LABEL_91;
        v18 = HIDWORD(v102[1]);
        if (HIDWORD(v102[1]) != LODWORD(v102[1]))
          break;
        v19 = (uint64_t *)WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v102, HIDWORD(v102[1]) + 1, (unint64_t)&v141);
        v20 = HIDWORD(v102[1]);
        v21 = HIDWORD(v102[1]) + 1;
        v22 = v102[0];
        v23 = *v19;
        *v19 = 0;
        *((_QWORD *)v22 + v20) = v23;
        HIDWORD(v102[1]) = v21;
        if (v142)
          goto LABEL_32;
LABEL_34:
        v17 = (WTF *)((char *)v17 - 1);
        if (!v17)
          goto LABEL_35;
      }
      v24 = v141;
      v141 = 0;
      *((_QWORD *)v102[0] + HIDWORD(v102[1])) = v24;
      HIDWORD(v102[1]) = v18 + 1;
LABEL_32:
      v25 = v141;
      v141 = 0;
      if (v25)
        CFRelease(v25);
      goto LABEL_34;
    }
    v26 = 0;
LABEL_63:
    v90 = (uint64_t)v26;
    v102[0] = 0;
    v102[1] = 0;
    LOBYTE(v92) = 1;
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v102, v10);
    v91 = 0uLL;
    v112[0] = (uint64_t)v17;
    v112[1] = v90;
    v113 = 1;
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v91, v36);
    v114 = 1;
    goto LABEL_64;
  }
  do
  {
    IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v141);
    if (!v142)
    {
LABEL_91:
      WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v102, v10);
LABEL_92:
      v54 = *a1;
      v55 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v56 = a1[3];
      if (v56 && v55)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v56 + 16))(v56, v54);
      goto LABEL_93;
    }
    v46 = HIDWORD(v102[1]);
    if (HIDWORD(v102[1]) == LODWORD(v102[1]))
    {
      v47 = (uint64_t *)WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v102, HIDWORD(v102[1]) + 1, (unint64_t)&v141);
      v48 = HIDWORD(v102[1]);
      v49 = HIDWORD(v102[1]) + 1;
      v50 = v102[0];
      v51 = *v47;
      *v47 = 0;
      *((_QWORD *)v50 + v48) = v51;
      HIDWORD(v102[1]) = v49;
      if (!v142)
        goto LABEL_89;
    }
    else
    {
      v52 = v141;
      v141 = 0;
      *((_QWORD *)v102[0] + HIDWORD(v102[1])) = v52;
      HIDWORD(v102[1]) = v46 + 1;
    }
    v53 = v141;
    v141 = 0;
    if (v53)
      CFRelease(v53);
LABEL_89:
    v17 = (WTF *)((char *)v17 - 1);
  }
  while (v17);
  v83 = HIDWORD(v102[1]);
  v17 = v102[0];
  if (LODWORD(v102[1]) <= HIDWORD(v102[1]))
  {
LABEL_36:
    v26 = v102[1];
    goto LABEL_63;
  }
  v84 = v102[0];
  if (!HIDWORD(v102[1]))
  {
LABEL_166:
    if (v17)
    {
      if (v84 == v17)
      {
        v102[0] = 0;
        LODWORD(v102[1]) = 0;
      }
      WTF::fastFree(v17, v10);
LABEL_35:
      v17 = v102[0];
    }
    else
    {
      v17 = v84;
    }
    goto LABEL_36;
  }
  if (!(HIDWORD(v102[1]) >> 29))
  {
    v85 = (WTF *)(8 * HIDWORD(v102[1]));
    v86 = (WTF *)WTF::fastMalloc(v85);
    LODWORD(v102[1]) = v83;
    v102[0] = v86;
    v84 = v17;
    if (v86 != v17)
    {
      v87 = (const void **)v17;
      do
      {
        v88 = *v87;
        *v87 = 0;
        *(_QWORD *)v86 = v88;
        v89 = *v87;
        *v87 = 0;
        if (v89)
          CFRelease(v89);
        v86 = (WTF *)((char *)v86 + 8);
        ++v87;
        v85 = (WTF *)((char *)v85 - 8);
      }
      while (v85);
      v84 = v102[0];
    }
    goto LABEL_166;
  }
  __break(0xC471u);
LABEL_182:
  __break(1u);
}

void sub_19789F878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,CFTypeRef cf,char a58,CFTypeRef a59,char a60)
{
  uint64_t v60;
  const void *v62;
  const void *v63;
  const void *v64;
  const void *v65;
  const void *v66;
  const void *v67;
  const void *v68;
  const void *v69;
  const void *v70;
  const void *v71;
  const void *v72;

  if (a58 && cf)
    CFRelease(cf);
  if (a60 && a59)
    CFRelease(a59);
  if (*(_BYTE *)(v60 - 248))
  {
    v62 = *(const void **)(v60 - 256);
    *(_QWORD *)(v60 - 256) = 0;
    if (v62)
      CFRelease(v62);
  }
  if (*(_BYTE *)(v60 - 232))
  {
    v63 = *(const void **)(v60 - 240);
    *(_QWORD *)(v60 - 240) = 0;
    if (v63)
      CFRelease(v63);
  }
  if (*(_BYTE *)(v60 - 216))
  {
    v64 = *(const void **)(v60 - 224);
    *(_QWORD *)(v60 - 224) = 0;
    if (v64)
      CFRelease(v64);
  }
  if (*(_BYTE *)(v60 - 200))
  {
    v65 = *(const void **)(v60 - 208);
    *(_QWORD *)(v60 - 208) = 0;
    if (v65)
      CFRelease(v65);
  }
  if (*(_BYTE *)(v60 - 184))
  {
    v66 = *(const void **)(v60 - 192);
    *(_QWORD *)(v60 - 192) = 0;
    if (v66)
      CFRelease(v66);
  }
  if (*(_BYTE *)(v60 - 168))
  {
    v67 = *(const void **)(v60 - 176);
    *(_QWORD *)(v60 - 176) = 0;
    if (v67)
      CFRelease(v67);
  }
  if (*(_BYTE *)(v60 - 152))
  {
    v68 = *(const void **)(v60 - 160);
    *(_QWORD *)(v60 - 160) = 0;
    if (v68)
      CFRelease(v68);
  }
  if (*(_BYTE *)(v60 - 136))
  {
    v69 = *(const void **)(v60 - 144);
    *(_QWORD *)(v60 - 144) = 0;
    if (v69)
      CFRelease(v69);
  }
  if (*(_BYTE *)(v60 - 120))
  {
    v70 = *(const void **)(v60 - 128);
    *(_QWORD *)(v60 - 128) = 0;
    if (v70)
      CFRelease(v70);
  }
  if (*(_BYTE *)(v60 - 104))
  {
    v71 = *(const void **)(v60 - 112);
    *(_QWORD *)(v60 - 112) = 0;
    if (v71)
      CFRelease(v71);
  }
  if (*(_BYTE *)(v60 - 88))
  {
    v72 = *(const void **)(v60 - 96);
    *(_QWORD *)(v60 - 96) = 0;
    if (v72)
      CFRelease(v72);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<std::optional<WebKit::CoreIPCPKContact>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v4;
  WTF::StringImpl *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  unsigned __int8 *v27;
  unsigned int v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  unsigned int v37;
  WTF::StringImpl *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  _QWORD *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  WTF::StringImpl *v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  char v80;
  char v81;
  _OWORD v82[3];
  char v83;
  WTF::StringImpl *v84;
  __int128 v85;
  char v86;
  _OWORD v87[4];
  uint64_t v88;
  char v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  char v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  char v98;
  char v99;
  __int128 v100;
  char v101;
  char v102;
  WTF::StringImpl *v103;
  char v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  char v108;
  char v109;

  v4 = a1[1];
  v5 = (WTF::StringImpl *)*a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
  {
    v12 = 0;
    v13 = 0;
    *a1 = 0;
    a1[1] = 0;
    v14 = a1[3];
    if (v14)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
        v13 = *a1;
        v12 = a1[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
    }
    goto LABEL_13;
  }
  v7 = (unsigned __int8 *)v5 + v6;
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v12 = v4;
    v13 = 0;
LABEL_13:
    v4 = 0;
    v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    v15 = a1[3];
    if (v15)
    {
      if (v12)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v15 + 16))(v15, v13, v12);
        v5 = (WTF::StringImpl *)*a1;
        v4 = a1[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
    goto LABEL_14;
  }
  if (*v7 < 2u)
  {
    if (!*v7)
    {
      LOBYTE(v75) = 0;
      v81 = 0;
      *a2 = 0;
      a2[176] = 0;
      goto LABEL_92;
    }
    if (v4 <= v7 + 1 - (unsigned __int8 *)v5)
    {
      v17 = 0;
      v18 = 0;
      *a1 = 0;
      a1[1] = 0;
      v19 = a1[3];
      if (v19)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
        v17 = 0;
        v72 = *a1;
        v73 = a1[1];
        v74 = a1[3];
        *a1 = 0;
        a1[1] = 0;
        v18 = 0;
        if (v74)
        {
          if (v73)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v74 + 16))(v74, v72);
            v18 = *a1;
            v17 = a1[1];
          }
        }
      }
    }
    else
    {
      a1[2] = (uint64_t)(v7 + 2);
      v8 = v7[1];
      if (v8 < 2)
      {
        if (!v8)
        {
          LOBYTE(v105) = 0;
          v108 = 0;
          v109 = 1;
          goto LABEL_19;
        }
        IPC::Decoder::decode<WebKit::CoreIPCPersonNameComponents>((uint64_t)&v75, a1);
        if ((_BYTE)v78)
        {
          v9 = v75;
          v10 = v76;
          v75 = 0u;
          v76 = 0u;
          v105 = v9;
          v106 = v10;
          v11 = v77;
          v77 = 0u;
          v107 = v11;
          v108 = 1;
          WebKit::CoreIPCPersonNameComponents::~CoreIPCPersonNameComponents((WebKit::CoreIPCPersonNameComponents **)&v75);
          v109 = 1;
          goto LABEL_19;
        }
LABEL_18:
        LOBYTE(v105) = 0;
        v109 = 0;
        v21 = *a1;
        v22 = a1[1];
        *a1 = 0;
        a1[1] = 0;
        v23 = a1[3];
        if (v23 && v22)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v21);
LABEL_19:
        IPC::Decoder::decode<WTF::String>(a1, &v103);
        v24 = a1[1];
        v25 = (WTF::StringImpl *)*a1;
        v26 = a1[2] - *a1;
        if (v24 <= v26)
        {
          v44 = 0;
          v45 = 0;
          *a1 = 0;
          a1[1] = 0;
          v46 = a1[3];
          if (v46)
          {
            if (v24)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v46 + 16))(v46);
              v45 = *a1;
              v44 = a1[1];
            }
            else
            {
              v44 = 0;
              v45 = 0;
            }
          }
        }
        else
        {
          v27 = (unsigned __int8 *)v25 + v26;
          a1[2] = (uint64_t)(v27 + 1);
          if (v25)
          {
            v28 = *v27;
            if (v28 < 2)
            {
              if (!v28)
              {
                LOBYTE(v75) = 0;
                LOBYTE(v76) = 0;
                LOBYTE(v100) = 0;
                v101 = 0;
                goto LABEL_26;
              }
              IPC::Decoder::decode<WebKit::CoreIPCCNPhoneNumber>((uint64_t)&v75, a1);
              if ((_BYTE)v76)
              {
                v29 = v75;
                v75 = 0uLL;
                v100 = v29;
                v101 = 1;
LABEL_26:
                v102 = 1;
                std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v75, v25);
                goto LABEL_29;
              }
              LOBYTE(v100) = 0;
              v102 = 0;
              std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v75, v25);
LABEL_28:
              v30 = *a1;
              v31 = a1[1];
              *a1 = 0;
              a1[1] = 0;
              v32 = a1[3];
              if (v32 && v31)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 16))(v32, v30);
LABEL_29:
              v33 = a1[1];
              v34 = *a1;
              v35 = a1[2] - *a1;
              if (v33 <= v35)
              {
                v49 = 0;
                v50 = 0;
                *a1 = 0;
                a1[1] = 0;
                v51 = a1[3];
                if (v51)
                {
                  if (v33)
                  {
                    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 16))(v51);
                    v50 = *a1;
                    v49 = a1[1];
                  }
                  else
                  {
                    v49 = 0;
                    v50 = 0;
                  }
                }
              }
              else
              {
                v36 = (unsigned __int8 *)(v34 + v35);
                a1[2] = (uint64_t)(v36 + 1);
                if (v34)
                {
                  v37 = *v36;
                  if (v37 < 2)
                  {
                    if (!v37)
                    {
                      LOBYTE(v93) = 0;
                      v98 = 0;
                      v99 = 1;
                      goto LABEL_48;
                    }
                    IPC::Decoder::decode<WebKit::CoreIPCCNPostalAddress>((uint64_t)&v75, a1);
                    if (v80)
                    {
                      v39 = v75;
                      v40 = v76;
                      v75 = 0u;
                      v76 = 0u;
                      v93 = v39;
                      v94 = v40;
                      v41 = v77;
                      v42 = v78;
                      v77 = 0u;
                      v78 = 0u;
                      v95 = v41;
                      v96 = v42;
                      v43 = v79;
                      v79 = 0;
                      v97 = v43;
                      v98 = 1;
                      WebKit::CoreIPCCNPostalAddress::~CoreIPCCNPostalAddress((WebKit::CoreIPCCNPostalAddress *)&v75, v38);
                      v99 = 1;
                      goto LABEL_48;
                    }
LABEL_47:
                    LOBYTE(v93) = 0;
                    v99 = 0;
                    v54 = (WTF::StringImpl *)*a1;
                    v55 = a1[1];
                    *a1 = 0;
                    a1[1] = 0;
                    v56 = (_QWORD *)a1[3];
                    if (v56)
                      goto LABEL_95;
                    while (1)
                    {
LABEL_48:
                      v56 = IPC::Decoder::decode<WTF::String>(a1, &v91);
                      if (!*a1)
                      {
                        LOBYTE(v75) = 0;
                        v81 = 0;
                        goto LABEL_72;
                      }
                      if (v109 && v104 && v102 && v99 && v92)
                        break;
                      __break(1u);
LABEL_95:
                      if (v55)
                        (*(void (**)(_QWORD *, WTF::StringImpl *))(*v56 + 16))(v56, v54);
                    }
                    LOBYTE(v82[0]) = 0;
                    v83 = 0;
                    if (v108)
                    {
                      v57 = v105;
                      v58 = v106;
                      v105 = 0u;
                      v106 = 0u;
                      v82[0] = v57;
                      v82[1] = v58;
                      v59 = v107;
                      v107 = 0u;
                      v82[2] = v59;
                      v83 = 1;
                    }
                    v60 = v103;
                    v103 = 0;
                    v84 = v60;
                    LOBYTE(v85) = 0;
                    v86 = 0;
                    if (v101)
                    {
                      v61 = v100;
                      v100 = 0uLL;
                      v85 = v61;
                      v86 = 1;
                    }
                    LOBYTE(v87[0]) = 0;
                    v89 = 0;
                    if (v98)
                    {
                      v87[0] = v93;
                      v87[1] = v94;
                      v62 = v96;
                      v87[2] = v95;
                      v93 = 0u;
                      v94 = 0u;
                      v95 = 0u;
                      v96 = 0u;
                      v87[3] = v62;
                      v63 = v97;
                      v97 = 0;
                      v88 = v63;
                      v89 = 1;
                    }
                    v90 = v91;
                    v91 = 0;
                    std::__optional_destruct_base<WebKit::CoreIPCPKContact,false>::__optional_destruct_base[abi:sn180100]<WebKit::CoreIPCPKContact>((uint64_t)&v75, (uint64_t)v82);
                    v65 = v90;
                    v90 = 0;
                    if (v65)
                    {
                      if (*(_DWORD *)v65 == 2)
                        WTF::StringImpl::destroy(v65, v64);
                      else
                        *(_DWORD *)v65 -= 2;
                    }
                    if (v89)
                      WebKit::CoreIPCCNPostalAddress::~CoreIPCCNPostalAddress((WebKit::CoreIPCCNPostalAddress *)v87, v64);
                    std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v85, v64);
                    v66 = v84;
                    v84 = 0;
                    if (v66)
                    {
                      if (*(_DWORD *)v66 == 2)
                        WTF::StringImpl::destroy(v66, v54);
                      else
                        *(_DWORD *)v66 -= 2;
                    }
                    if (v83)
                      WebKit::CoreIPCPersonNameComponents::~CoreIPCPersonNameComponents((WebKit::CoreIPCPersonNameComponents **)v82);
LABEL_72:
                    if (v92)
                    {
                      v67 = v91;
                      v91 = 0;
                      if (v67)
                      {
                        if (*(_DWORD *)v67 == 2)
                          WTF::StringImpl::destroy(v67, v54);
                        else
                          *(_DWORD *)v67 -= 2;
                      }
                    }
                    if (v99 && v98)
                      WebKit::CoreIPCCNPostalAddress::~CoreIPCCNPostalAddress((WebKit::CoreIPCCNPostalAddress *)&v93, v54);
                    if (v102)
                      std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v100, v54);
                    if (v104)
                    {
                      v68 = v103;
                      v103 = 0;
                      if (v68)
                      {
                        if (*(_DWORD *)v68 == 2)
                          WTF::StringImpl::destroy(v68, v54);
                        else
                          *(_DWORD *)v68 -= 2;
                      }
                    }
                    if (v109 && v108)
                      WebKit::CoreIPCPersonNameComponents::~CoreIPCPersonNameComponents((WebKit::CoreIPCPersonNameComponents **)&v105);
                    if (!v81)
                    {
                      v5 = (WTF::StringImpl *)*a1;
                      v70 = a1[1];
                      *a1 = 0;
                      a1[1] = 0;
                      v71 = a1[3];
                      if (!v71
                        || !v70
                        || ((*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v71 + 16))(v71, v5), !v81))
                      {
                        v69 = 0;
                        *a2 = 0;
                        goto LABEL_93;
                      }
                    }
                    std::__optional_destruct_base<WebKit::CoreIPCPKContact,false>::__optional_destruct_base[abi:sn180100]<WebKit::CoreIPCPKContact>((uint64_t)a2, (uint64_t)&v75);
LABEL_92:
                    v69 = 1;
LABEL_93:
                    a2[184] = v69;
                    return std::__optional_destruct_base<WebKit::CoreIPCPKContact,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v75, v5);
                  }
LABEL_46:
                  *a1 = 0;
                  a1[1] = 0;
                  v53 = a1[3];
                  if (v53 && v33)
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v53 + 16))(v53, v34);
                  goto LABEL_47;
                }
                v49 = v33;
                v50 = 0;
              }
              v33 = 0;
              v34 = 0;
              *a1 = 0;
              a1[1] = 0;
              v52 = a1[3];
              if (v52)
              {
                if (v49)
                {
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v52 + 16))(v52, v50, v49);
                  v34 = *a1;
                  v33 = a1[1];
                }
                else
                {
                  v33 = 0;
                  v34 = 0;
                }
              }
              goto LABEL_46;
            }
LABEL_42:
            *a1 = 0;
            a1[1] = 0;
            v48 = a1[3];
            if (v48 && v24)
              (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v48 + 16))(v48, v25);
            LOBYTE(v100) = 0;
            v102 = 0;
            goto LABEL_28;
          }
          v44 = v24;
          v45 = 0;
        }
        v24 = 0;
        v25 = 0;
        *a1 = 0;
        a1[1] = 0;
        v47 = a1[3];
        if (v47)
        {
          if (v44)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v47 + 16))(v47, v45, v44);
            v25 = (WTF::StringImpl *)*a1;
            v24 = a1[1];
          }
          else
          {
            v24 = 0;
            v25 = 0;
          }
        }
        goto LABEL_42;
      }
      v17 = v4;
      v18 = (uint64_t)v5;
    }
    *a1 = 0;
    a1[1] = 0;
    v20 = a1[3];
    if (v20 && v17)
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v20 + 16))(v20, v18, v17);
    goto LABEL_18;
  }
LABEL_14:
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result && v4)
    result = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)result + 16))(result, v5);
  *a2 = 0;
  a2[184] = 0;
  return result;
}

void sub_1978A022C(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__optional_destruct_base<WebKit::CoreIPCPKContact,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<std::optional<WebKit::CoreIPCPKPayment>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCPKPayment>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;

  v4 = *(unsigned __int8 *)(a2 + 64);
  v5 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *v5 = 1;
    if (*(_BYTE *)(a2 + 64))
    {
      IPC::ArgumentCoder<WebKit::CoreIPCPKPayment,void>::encode(a1, a2);
    }
    else
    {
      v6 = (uint64_t *)std::__throw_bad_optional_access[abi:sn180100]();
      IPC::ArgumentCoder<std::optional<WebKit::CoreIPCPKPayment>,void>::decode<IPC::Decoder>(v6, v7);
    }
  }
  else
  {
    *v5 = 0;
  }
}

void IPC::ArgumentCoder<std::optional<WebKit::CoreIPCPKPayment>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeRef v2;
  CFTypeRef v3;
  CFTypeRef v4;
  CFTypeRef v5;
  CFTypeRef v6;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  unsigned int v18;
  void *v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  const void *v25;
  CFTypeRef v26;
  int v27;
  WTF::StringImpl *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  CFTypeRef v53;
  CFTypeRef v54;
  CFTypeRef v55;
  CFTypeRef v56;
  CFTypeRef v57;
  CFTypeRef v58;
  CFTypeRef v59;
  CFTypeRef v60;
  CFTypeRef v61;
  CFTypeRef v62;
  CFTypeRef v63;
  CFTypeRef v64;
  CFTypeRef v65;
  char *v66;
  unint64_t v67;
  char *v68;
  unsigned int v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unsigned __int8 *v73;
  unsigned int v74;
  int v75;
  CFTypeRef v76;
  int v77;
  CFTypeRef v78;
  CFTypeRef v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  void *v84;
  int v85;
  uint64_t v86;
  CFTypeRef v87;
  CFTypeRef v88;
  CFTypeRef v89;
  const void *v90;
  CFTypeRef v91;
  const void *v92;
  CFTypeRef v93;
  CFTypeRef v94;
  CFTypeRef v95;
  CFTypeRef v96;
  CFTypeRef v97;
  CFTypeRef v98;
  const void *v99;
  CFTypeRef v100;
  const void *v101;
  CFTypeRef v102;
  CFTypeRef v103;
  CFTypeRef v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  int v109;
  CFTypeRef v110;
  CFTypeRef v111;
  CFTypeRef v112;
  uint64_t v113;
  CFTypeRef v114;
  CFTypeRef v115;
  CFTypeRef v116;
  CFTypeRef v117;
  CFTypeRef v118;
  CFTypeRef v119;
  CFTypeRef v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  const void *v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  char v155;
  CFTypeRef v156;
  char v157;
  CFTypeRef v158;
  char v159;
  _QWORD *v160;
  CFTypeRef v161[2];
  CFTypeRef v162[2];
  CFTypeRef v163[2];
  CFTypeRef v164[2];
  __int128 v165;
  char v166;
  char v167;
  CFTypeRef cf[6];
  __int128 v169;
  __int128 v170;
  char v171;
  CFTypeRef v172;
  char v173;
  CFTypeRef v174;
  char v175;
  CFTypeRef v176;
  char v177;
  CFTypeRef v178;
  char v179;
  CFTypeRef v180;
  char v181;
  CFTypeRef v182;
  char v183;
  CFTypeRef v184;
  char v185;
  _QWORD *v186;
  CFTypeRef v187[2];
  unsigned __int8 v188;
  CFTypeRef v189;
  char v190;
  CFTypeRef v191;
  char v192;
  uint64_t v193;
  _OWORD v194[5];
  const void *v195;
  char v196;
  const void *v197;
  char v198;
  uint64_t v199[4];

  v199[1] = *MEMORY[0x1E0C80C00];
  v9 = a1[1];
  v10 = *a1;
  v11 = a1[2] - *a1;
  if (v9 <= v11)
  {
    v30 = 0;
    v31 = 0;
    *a1 = 0;
    a1[1] = 0;
    v32 = a1[3];
    if (v32)
    {
      if (v9)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
        v31 = *a1;
        v30 = a1[1];
      }
      else
      {
        v30 = 0;
        v31 = 0;
      }
    }
    goto LABEL_39;
  }
  v12 = (unsigned __int8 *)(v10 + v11);
  a1[2] = (uint64_t)(v12 + 1);
  if (!v10)
  {
    v30 = v9;
    v31 = 0;
LABEL_39:
    v9 = 0;
    v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    v33 = a1[3];
    if (v33)
    {
      if (v30)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, v31, v30);
        v10 = *a1;
        v9 = a1[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
    goto LABEL_40;
  }
  v13 = *v12;
  if (v13 >= 2)
  {
LABEL_40:
    *a1 = 0;
    a1[1] = 0;
    v34 = a1[3];
    if (v34 && v9)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v10);
    goto LABEL_266;
  }
  if (!v13)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 64) = 0;
    *(_BYTE *)(a2 + 72) = 1;
    return;
  }
  v195 = (const void *)((uint64_t (*)(void))*MEMORY[0x1E0DCDFC0])();
  WTF::HashSet<objc_class *,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::HashSet((uint64_t *)&v178, (uint64_t *)&v195, 1);
  WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::operator=(a1 + 7, (_QWORD **)&v178);
  v14 = a1[1];
  v15 = (char *)*a1;
  v16 = a1[2] - *a1;
  if (v14 <= v16)
  {
    v35 = 0;
    v36 = 0;
    *a1 = 0;
    a1[1] = 0;
    v37 = a1[3];
    if (v37)
    {
      if (v14)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
        v36 = *a1;
        v35 = a1[1];
      }
      else
      {
        v35 = 0;
        v36 = 0;
      }
    }
    goto LABEL_44;
  }
  v17 = &v15[v16];
  a1[2] = (uint64_t)(v17 + 1);
  if (!v15)
  {
    v35 = v14;
    v36 = 0;
LABEL_44:
    v14 = 0;
    v15 = 0;
    *a1 = 0;
    a1[1] = 0;
    v38 = a1[3];
    if (!v38)
      goto LABEL_48;
    if (!v35)
    {
      v14 = 0;
      v15 = 0;
LABEL_48:
      *a1 = 0;
      a1[1] = 0;
      v39 = a1[3];
      if (v39)
      {
        if (v14)
        {
          (*(void (**)(uint64_t, char *))(*(_QWORD *)v39 + 16))(v39, v15);
          v15 = (char *)*a1;
          v14 = a1[1];
          v39 = a1[3];
          goto LABEL_51;
        }
      }
      else
      {
        v14 = 0;
      }
      v15 = 0;
LABEL_51:
      LOBYTE(v161[0]) = 0;
      LOBYTE(v165) = 0;
      *a1 = 0;
      a1[1] = 0;
      if (!v39 || !v14 || ((*(void (**)(uint64_t, char *))(*(_QWORD *)v39 + 16))(v39, v15), !(_BYTE)v165))
      {
        v2 = 0;
        v40 = 1;
        goto LABEL_124;
      }
      if (LOBYTE(v164[1]))
        goto LABEL_105;
      goto LABEL_58;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v38 + 16))(v38, v36, v35);
LABEL_47:
    v15 = (char *)*a1;
    v14 = a1[1];
    goto LABEL_48;
  }
  v18 = *v17;
  if (v18 >= 2)
    goto LABEL_48;
  if (!v18)
  {
    LOBYTE(v161[0]) = 0;
    goto LABEL_104;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)v187);
  if (!LOBYTE(v187[1]))
    goto LABEL_47;
  IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v191);
  if (!v192)
  {
    v26 = 0;
    v27 = 0;
    goto LABEL_99;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v189);
  if (v190)
  {
    IPC::Decoder::decode<WTF::RetainPtr<NSData>>(a1, (uint64_t)&v184);
    if (!v185)
    {
      v26 = 0;
      v27 = 0;
LABEL_93:
      if (v190)
      {
        v56 = v189;
        v189 = 0;
        if (v56)
          CFRelease(v56);
      }
      goto LABEL_96;
    }
    *(_QWORD *)&v194[0] = ((uint64_t (*)(void))*MEMORY[0x1E0DCDFF0])();
    WTF::HashSet<objc_class *,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::HashSet((uint64_t *)cf, (uint64_t *)v194, 1);
    WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::operator=(a1 + 7, (_QWORD **)cf);
    IPC::decodeRequiringAllowedClasses<PKPaymentMethod,PKPaymentMethod*>(a1, (uint64_t)&v182);
    if (cf[0])
      WTF::fastFree((WTF *)((char *)cf[0] - 16), v19);
    if (!v183)
    {
      v15 = (char *)*a1;
      v41 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v42 = a1[3];
      if (!v42 || !v41 || ((*(void (**)(uint64_t, char *))(*(_QWORD *)v42 + 16))(v42, v15), !v183))
      {
        v26 = 0;
        v27 = 0;
LABEL_90:
        if (v185)
        {
          v55 = v184;
          v184 = 0;
          if (v55)
            CFRelease(v55);
        }
        goto LABEL_93;
      }
    }
    v197 = (const void *)objc_opt_class();
    WTF::HashSet<objc_class *,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::HashSet((uint64_t *)&v180, (uint64_t *)&v197, 1);
    WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::operator=(a1 + 7, (_QWORD **)&v180);
    v20 = a1[1];
    v21 = (WTF::StringImpl *)*a1;
    v22 = a1[2] - *a1;
    if (v20 <= v22)
    {
      v43 = 0;
      v44 = 0;
      *a1 = 0;
      a1[1] = 0;
      v45 = a1[3];
      if (v45)
      {
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v45 + 16))(v45);
          v44 = *a1;
          v43 = a1[1];
        }
        else
        {
          v43 = 0;
          v44 = 0;
        }
      }
    }
    else
    {
      v23 = (unsigned __int8 *)v21 + v22;
      a1[2] = (uint64_t)(v23 + 1);
      if (v21)
      {
        v24 = *v23;
        if (v24 < 2)
        {
          if (!v24)
          {
            v2 = 0;
            LOBYTE(cf[0]) = 0;
            LOBYTE(cf[5]) = 0;
            LOBYTE(v169) = 1;
LABEL_29:
            if ((_BYTE)v169)
            {
              if (LOBYTE(cf[5]))
              {
                v28 = (WTF::StringImpl *)cf[0];
                cf[0] = 0;
                if (v28)
                {
                  if (*(_DWORD *)v28 == 2)
                    WTF::StringImpl::destroy(v28, v21);
                  else
                    *(_DWORD *)v28 -= 2;
                }
              }
            }
            if (v2)
            {
              CFRetain(v2);
              CFRelease(v2);
            }
            v29 = 0;
            goto LABEL_66;
          }
          IPC::Decoder::decode<WebKit::CoreIPCURL>(a1, v194);
          if (BYTE8(v194[2]))
          {
            cf[0] = *(CFTypeRef *)&v194[0];
            *(_OWORD *)&cf[1] = *(_OWORD *)((char *)v194 + 8);
            *(_OWORD *)&cf[3] = *(_OWORD *)((char *)&v194[1] + 8);
            LOBYTE(cf[5]) = 1;
            LOBYTE(v169) = 1;
            v25 = (const void *)WTF::URL::operator NSURL *();
            v2 = v25;
            if (v25)
              CFRetain(v25);
            goto LABEL_29;
          }
LABEL_64:
          v21 = (WTF::StringImpl *)*a1;
          v48 = a1[1];
          *a1 = 0;
          a1[1] = 0;
          v49 = a1[3];
          if (v49 && v48)
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v49 + 16))(v49, v21);
          v2 = 0;
          v29 = 1;
LABEL_66:
          if (v180)
            WTF::fastFree((WTF *)((char *)v180 - 16), v21);
          v150 = v2;
          if (v29)
          {
            v15 = (char *)*a1;
            v51 = a1[1];
            *a1 = 0;
            a1[1] = 0;
            v52 = a1[3];
            if (v52 && v51)
              (*(void (**)(uint64_t, char *))(*(_QWORD *)v52 + 16))(v52, v15);
          }
          else
          {
            IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)cf);
            if (LOBYTE(cf[1]))
            {
              if (*a1)
              {
                if (!LOBYTE(v187[1]) || !v192 || !v190 || !v185 || !v183)
                  goto LABEL_267;
                v26 = v187[0];
                v187[0] = 0;
                v2 = v191;
                v191 = 0;
                v6 = v189;
                v189 = 0;
                v5 = v184;
                v184 = 0;
                v4 = v182;
                v182 = 0;
                v27 = 1;
                v3 = cf[0];
                goto LABEL_87;
              }
              v53 = cf[0];
              cf[0] = 0;
              if (v53)
                CFRelease(v53);
            }
            if (v2)
              CFRelease(v2);
          }
          v26 = 0;
          v27 = 0;
LABEL_87:
          if (v183)
          {
            v54 = v182;
            v182 = 0;
            if (v54)
              CFRelease(v54);
          }
          goto LABEL_90;
        }
LABEL_63:
        *a1 = 0;
        a1[1] = 0;
        v47 = a1[3];
        if (v47 && v20)
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v47 + 16))(v47, v21);
        goto LABEL_64;
      }
      v43 = v20;
      v44 = 0;
    }
    v20 = 0;
    v21 = 0;
    *a1 = 0;
    a1[1] = 0;
    v46 = a1[3];
    if (v46)
    {
      if (v43)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v46 + 16))(v46, v44, v43);
        v21 = (WTF::StringImpl *)*a1;
        v20 = a1[1];
      }
      else
      {
        v20 = 0;
        v21 = 0;
      }
    }
    goto LABEL_63;
  }
  v26 = 0;
  v27 = 0;
LABEL_96:
  if (v192)
  {
    v57 = v191;
    v191 = 0;
    if (v57)
      CFRelease(v57);
  }
LABEL_99:
  if (LOBYTE(v187[1]))
  {
    v58 = v187[0];
    v187[0] = 0;
    if (v58)
      CFRelease(v58);
  }
  if (!v27)
    goto LABEL_47;
  v161[0] = v26;
  v161[1] = v2;
  v162[0] = v6;
  v162[1] = v5;
  v163[0] = v4;
  v163[1] = v150;
  v18 = 1;
  v164[0] = v3;
LABEL_104:
  LOBYTE(v164[1]) = v18;
  LOBYTE(v165) = 1;
  if (v18)
  {
LABEL_105:
    WebKit::CoreIPCPKPaymentToken::toID((WebKit::CoreIPCPKPaymentToken *)v161, cf);
    v2 = cf[0];
    if ((_BYTE)v165 && LOBYTE(v164[1]))
    {
      v59 = v164[0];
      v164[0] = 0;
      if (v59)
        CFRelease(v59);
      v60 = v163[1];
      v163[1] = 0;
      if (v60)
        CFRelease(v60);
      v61 = v163[0];
      v163[0] = 0;
      if (v61)
        CFRelease(v61);
      v62 = v162[1];
      v162[1] = 0;
      if (v62)
        CFRelease(v62);
      v63 = v162[0];
      v162[0] = 0;
      if (v63)
        CFRelease(v63);
      v64 = v161[1];
      v161[1] = 0;
      if (v64)
        CFRelease(v64);
      v65 = v161[0];
      v161[0] = 0;
      if (v65)
        CFRelease(v65);
    }
    if (v2)
    {
      CFRetain(v2);
      CFRelease(v2);
    }
    goto LABEL_123;
  }
LABEL_58:
  v2 = 0;
LABEL_123:
  v40 = 0;
LABEL_124:
  if (!v178)
  {
    if (!v40)
      goto LABEL_126;
LABEL_278:
    v136 = *a1;
    v137 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v138 = a1[3];
    if (v138 && v137)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v138 + 16))(v138, v136);
    LOBYTE(v151) = 0;
    v155 = 0;
    goto LABEL_263;
  }
  WTF::fastFree((WTF *)((char *)v178 - 16), v15);
  if (v40)
    goto LABEL_278;
LABEL_126:
  IPC::Decoder::decode<WTF::RetainPtr<PKContact>>((uint64_t)&v158, a1);
  if (!v159)
  {
    LOBYTE(v151) = 0;
    v155 = 0;
    goto LABEL_261;
  }
  IPC::Decoder::decode<WTF::RetainPtr<PKContact>>((uint64_t)&v156, a1);
  if (!v157)
  {
    LOBYTE(v151) = 0;
    v155 = 0;
    goto LABEL_258;
  }
  v193 = ((uint64_t (*)(void))*MEMORY[0x1E0DCE028])();
  WTF::HashSet<objc_class *,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::HashSet((uint64_t *)&v160, &v193, 1);
  WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::operator=(a1 + 7, &v160);
  v50 = a1[1];
  v66 = (char *)*a1;
  v67 = a1[2] - *a1;
  if (v50 <= v67)
    goto LABEL_268;
  v68 = &v66[v67];
  a1[2] = (uint64_t)(v68 + 1);
  if (!v66)
  {
    v128 = v50;
    v129 = 0;
    goto LABEL_269;
  }
  v69 = *v68;
  if (v69 >= 2)
    goto LABEL_270;
  if (v69)
  {
    IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v184);
    if (!v185)
    {
      LOBYTE(cf[0]) = 0;
      v171 = 0;
LABEL_220:
      if (!v171)
      {
        v66 = (char *)*a1;
        v133 = a1[1];
        *a1 = 0;
        a1[1] = 0;
        v132 = a1[3];
        if (!v132 || !v133)
          goto LABEL_274;
        goto LABEL_272;
      }
      v105 = *(_OWORD *)cf;
      v106 = *(_OWORD *)&cf[2];
      memset(cf, 0, sizeof(cf));
      *(_OWORD *)v161 = v105;
      *(_OWORD *)v162 = v106;
      v107 = v169;
      v169 = 0u;
      *(_OWORD *)v163 = *(_OWORD *)&cf[4];
      *(_OWORD *)v164 = v107;
      v108 = v170;
      v170 = 0u;
      v165 = v108;
      v166 = 1;
      v167 = 1;
      WebKit::CoreIPCPKShippingMethod::~CoreIPCPKShippingMethod((WebKit::CoreIPCPKShippingMethod *)cf);
      WebKit::CoreIPCPKShippingMethod::toID((WebKit::CoreIPCPKShippingMethod *)v161, cf);
      v78 = cf[0];
      if (v167 && v166)
        WebKit::CoreIPCPKShippingMethod::~CoreIPCPKShippingMethod((WebKit::CoreIPCPKShippingMethod *)v161);
      if (v78)
      {
        CFRetain(v78);
        CFRelease(v78);
      }
      goto LABEL_226;
    }
    IPC::Decoder::decode<WTF::RetainPtr<NSNumber>>(a1, (uint64_t)&v182);
    if (!v183)
    {
      LOBYTE(cf[0]) = 0;
      v171 = 0;
LABEL_217:
      if (v185)
      {
        v104 = v184;
        v184 = 0;
        if (v104)
          CFRelease(v104);
      }
      goto LABEL_220;
    }
    IPC::Decoder::decode<WTF::RetainPtr<NSNumber>>(a1, (uint64_t)&v180);
    if (!v181)
    {
      LOBYTE(cf[0]) = 0;
      v171 = 0;
LABEL_214:
      if (v183)
      {
        v103 = v182;
        v182 = 0;
        if (v103)
          CFRelease(v103);
      }
      goto LABEL_217;
    }
    IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v197);
    if (!v198)
    {
      LOBYTE(cf[0]) = 0;
      v171 = 0;
LABEL_211:
      if (v181)
      {
        v102 = v180;
        v180 = 0;
        if (v102)
          CFRelease(v102);
      }
      goto LABEL_214;
    }
    IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v178);
    if (!v179)
    {
      LOBYTE(cf[0]) = 0;
      v171 = 0;
LABEL_208:
      if (v198)
      {
        v101 = v197;
        v197 = 0;
        if (v101)
          CFRelease(v101);
      }
      goto LABEL_211;
    }
    IPC::Decoder::decode<WTF::RetainPtr<NSNumber>>(a1, (uint64_t)&v195);
    if (!v196)
    {
      LOBYTE(cf[0]) = 0;
      v171 = 0;
LABEL_205:
      if (v179)
      {
        v100 = v178;
        v178 = 0;
        if (v100)
          CFRelease(v100);
      }
      goto LABEL_208;
    }
    IPC::Decoder::decode<WTF::RetainPtr<NSNumber>>(a1, (uint64_t)&v176);
    if (!v177)
    {
      LOBYTE(cf[0]) = 0;
      v171 = 0;
LABEL_202:
      if (v196)
      {
        v99 = v195;
        v195 = 0;
        if (v99)
          CFRelease(v99);
      }
      goto LABEL_205;
    }
    IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v174);
    if (!v175)
    {
      LOBYTE(cf[0]) = 0;
      v171 = 0;
LABEL_199:
      if (v177)
      {
        v98 = v176;
        v176 = 0;
        if (v98)
          CFRelease(v98);
      }
      goto LABEL_202;
    }
    IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v172);
    if (!v173)
    {
      LOBYTE(cf[0]) = 0;
      v171 = 0;
LABEL_196:
      if (v175)
      {
        v97 = v174;
        v174 = 0;
        if (v97)
          CFRelease(v97);
      }
      goto LABEL_199;
    }
    v199[0] = ((uint64_t (*)(void))*MEMORY[0x1E0DCE0C0])();
    WTF::HashSet<objc_class *,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTableTraits>::HashSet((uint64_t *)&v186, v199, 1);
    WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::operator=(a1 + 7, &v186);
    v70 = a1[1];
    v71 = *a1;
    v72 = a1[2] - *a1;
    if (v70 <= v72)
    {
      v142 = 0;
      v143 = 0;
      *a1 = 0;
      a1[1] = 0;
      v144 = a1[3];
      if (v144)
      {
        if (v70)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v144 + 16))(v144);
          v143 = *a1;
          v142 = a1[1];
        }
        else
        {
          v142 = 0;
          v143 = 0;
        }
      }
    }
    else
    {
      v73 = (unsigned __int8 *)(v71 + v72);
      a1[2] = (uint64_t)(v73 + 1);
      if (v71)
      {
        v74 = *v73;
        if (v74 < 2)
        {
          if (!v74)
          {
            LOBYTE(v187[0]) = 0;
            v188 = 0;
            LOBYTE(v194[0]) = 0;
            LOBYTE(v194[1]) = 0;
            BYTE8(v194[1]) = 1;
            std::__optional_destruct_base<WebKit::CoreIPCPKDateComponentsRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v187);
            v79 = 0;
            goto LABEL_173;
          }
          IPC::Decoder::decode<WTF::RetainPtr<NSDateComponents>>(&v191, a1);
          if (!v192)
          {
            v77 = 0;
            LOBYTE(v187[0]) = 0;
            v188 = 0;
LABEL_163:
            v80 = *a1;
            v81 = a1[1];
            *a1 = 0;
            a1[1] = 0;
            v82 = a1[3];
            if (v82 && v81)
            {
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v82 + 16))(v82, v80);
              v77 = v188;
            }
LABEL_171:
            if (v77)
            {
              v83 = *(_OWORD *)v187;
              v187[0] = 0;
              v187[1] = 0;
              v194[0] = v83;
              LOBYTE(v194[1]) = 1;
              BYTE8(v194[1]) = 1;
              std::__optional_destruct_base<WebKit::CoreIPCPKDateComponentsRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v187);
              WebKit::CoreIPCPKDateComponentsRange::toID((WebKit::CoreIPCPKDateComponentsRange *)v194, v187);
              v79 = v187[0];
              if (!BYTE8(v194[1]))
              {
LABEL_174:
                if (v79)
                {
                  CFRetain(v79);
                  CFRelease(v79);
                }
                v85 = 0;
                goto LABEL_180;
              }
LABEL_173:
              std::__optional_destruct_base<WebKit::CoreIPCPKDateComponentsRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v194);
              goto LABEL_174;
            }
            std::__optional_destruct_base<WebKit::CoreIPCPKDateComponentsRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v187);
LABEL_178:
            v84 = (void *)*a1;
            v50 = a1[1];
            *a1 = 0;
            a1[1] = 0;
            v86 = a1[3];
            if (v86 && v50)
              (*(void (**)(uint64_t, void *))(*(_QWORD *)v86 + 16))(v86, v84);
            v79 = 0;
            v85 = 1;
LABEL_180:
            if (v186)
            {
              WTF::fastFree((WTF *)(v186 - 2), v84);
              if (!v85)
              {
LABEL_182:
                if (*a1)
                {
                  if (!v185 || !v183 || !v181 || !v198 || !v179 || !v196 || !v177 || !v175 || !v173)
                    goto LABEL_267;
                  v87 = v184;
                  v184 = 0;
                  v88 = v182;
                  v182 = 0;
                  v89 = v180;
                  v180 = 0;
                  v90 = v197;
                  v197 = 0;
                  v91 = v178;
                  v178 = 0;
                  v92 = v195;
                  v195 = 0;
                  v93 = v176;
                  v176 = 0;
                  v94 = v174;
                  v174 = 0;
                  v95 = v172;
                  v172 = 0;
                  cf[0] = v87;
                  cf[1] = v88;
                  memset(v194, 0, sizeof(v194));
                  cf[2] = v89;
                  cf[3] = v90;
                  cf[4] = v91;
                  cf[5] = v92;
                  *(_QWORD *)&v169 = v93;
                  *((_QWORD *)&v169 + 1) = v94;
                  *(_QWORD *)&v170 = v95;
                  *((_QWORD *)&v170 + 1) = v79;
                  v171 = 1;
                  WebKit::CoreIPCPKShippingMethod::~CoreIPCPKShippingMethod((WebKit::CoreIPCPKShippingMethod *)v194);
                }
                else
                {
                  LOBYTE(cf[0]) = 0;
                  v171 = 0;
                  if (v79)
                    CFRelease(v79);
                }
                goto LABEL_193;
              }
            }
            else if (!v85)
            {
              goto LABEL_182;
            }
            v147 = *a1;
            v148 = a1[1];
            *a1 = 0;
            a1[1] = 0;
            v149 = a1[3];
            if (v149 && v148)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v149 + 16))(v149, v147);
            LOBYTE(cf[0]) = 0;
            v171 = 0;
LABEL_193:
            if (v173)
            {
              v96 = v172;
              v172 = 0;
              if (v96)
                CFRelease(v96);
            }
            goto LABEL_196;
          }
          IPC::Decoder::decode<WTF::RetainPtr<NSDateComponents>>(&v189, a1);
          if (v190)
          {
            if (*a1)
            {
              v75 = 0;
              v76 = v191;
              v191 = 0;
              v187[0] = v76;
              v187[1] = v189;
              v77 = 1;
              v188 = 1;
              goto LABEL_168;
            }
            LOBYTE(v187[0]) = 0;
            v188 = 0;
            if (v189)
              CFRelease(v189);
            v77 = 0;
          }
          else
          {
            v77 = 0;
            LOBYTE(v187[0]) = 0;
            v188 = 0;
          }
          v75 = 1;
LABEL_168:
          if (v191)
            CFRelease(v191);
          if (!v75)
            goto LABEL_171;
          goto LABEL_163;
        }
LABEL_291:
        *a1 = 0;
        a1[1] = 0;
        v146 = a1[3];
        if (v146 && v70)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v146 + 16))(v146, v71);
        goto LABEL_178;
      }
      v142 = v70;
      v143 = 0;
    }
    v70 = 0;
    v71 = 0;
    *a1 = 0;
    a1[1] = 0;
    v145 = a1[3];
    if (v145)
    {
      if (v142)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v145 + 16))(v145, v143, v142);
        v71 = *a1;
        v70 = a1[1];
      }
      else
      {
        v70 = 0;
        v71 = 0;
      }
    }
    goto LABEL_291;
  }
  v78 = 0;
LABEL_226:
  v109 = 0;
  while (!v160)
  {
    if (v109)
      goto LABEL_281;
LABEL_229:
    IPC::Decoder::decode<WTF::RetainPtr<NSData>>(a1, (uint64_t)cf);
    if (!LOBYTE(cf[1]))
    {
      LOBYTE(v151) = 0;
      v155 = 0;
      goto LABEL_253;
    }
    IPC::Decoder::decode<WTF::RetainPtr<NSDictionary>>((uint64_t)v194, a1);
    if (!BYTE8(v194[0]))
    {
      LOBYTE(v151) = 0;
      v155 = 0;
      goto LABEL_250;
    }
    IPC::Decoder::decode<WTF::RetainPtr<NSNumber>>(a1, (uint64_t)v187);
    if (!LOBYTE(v187[1]))
    {
      LOBYTE(v151) = 0;
      v155 = 0;
      goto LABEL_248;
    }
    IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v191);
    if (!v192)
    {
      LOBYTE(v151) = 0;
      v155 = 0;
      goto LABEL_245;
    }
    if (!*a1)
    {
      LOBYTE(v151) = 0;
      v155 = 0;
      goto LABEL_239;
    }
    if (v159 && v157 && LOBYTE(cf[1]) && LOBYTE(v187[1]))
    {
      v110 = v158;
      v158 = 0;
      v111 = v156;
      v156 = 0;
      v112 = cf[0];
      cf[0] = 0;
      v113 = *(_QWORD *)&v194[0];
      *(_QWORD *)&v194[0] = 0;
      v114 = v187[0];
      v187[0] = 0;
      v115 = v191;
      v191 = 0;
      *(_QWORD *)&v151 = v2;
      *((_QWORD *)&v151 + 1) = v110;
      *(_OWORD *)v161 = 0u;
      *(_OWORD *)v162 = 0u;
      *(_QWORD *)&v152 = v111;
      *((_QWORD *)&v152 + 1) = v78;
      *(_QWORD *)&v153 = v112;
      *((_QWORD *)&v153 + 1) = v113;
      *(_OWORD *)v163 = 0u;
      *(_OWORD *)v164 = 0u;
      *(_QWORD *)&v154 = v114;
      *((_QWORD *)&v154 + 1) = v115;
      v155 = 1;
      WebKit::CoreIPCPKPayment::~CoreIPCPKPayment((WebKit::CoreIPCPKPayment *)v161);
      v2 = 0;
      v78 = 0;
      if (v192)
      {
LABEL_239:
        v116 = v191;
        v191 = 0;
        if (v116)
          CFRelease(v116);
      }
LABEL_245:
      if (LOBYTE(v187[1]))
      {
        v117 = v187[0];
        v187[0] = 0;
        if (v117)
          CFRelease(v117);
      }
LABEL_248:
      if (*(_QWORD *)&v194[0])
        CFRelease(*(CFTypeRef *)&v194[0]);
LABEL_250:
      if (LOBYTE(cf[1]))
      {
        v118 = cf[0];
        cf[0] = 0;
        if (v118)
          CFRelease(v118);
      }
LABEL_253:
      if (v78)
        CFRelease(v78);
      goto LABEL_255;
    }
LABEL_267:
    __break(1u);
LABEL_268:
    v128 = 0;
    v129 = 0;
    *a1 = 0;
    a1[1] = 0;
    v130 = a1[3];
    if (v130)
    {
      if (v50)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v130 + 16))(v130);
        v129 = *a1;
        v128 = a1[1];
      }
      else
      {
        v128 = 0;
        v129 = 0;
      }
    }
LABEL_269:
    v50 = 0;
    v66 = 0;
    *a1 = 0;
    a1[1] = 0;
    v131 = a1[3];
    if (v131)
    {
      if (v128)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v131 + 16))(v131, v129, v128);
        v66 = (char *)*a1;
        v50 = a1[1];
      }
      else
      {
        v50 = 0;
        v66 = 0;
      }
    }
LABEL_270:
    *a1 = 0;
    a1[1] = 0;
    v132 = a1[3];
    if (v132 && v50)
LABEL_272:
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v132 + 16))(v132, v66);
LABEL_274:
    v66 = (char *)*a1;
    v134 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v135 = a1[3];
    if (v135 && v134)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v135 + 16))(v135, v66);
    v78 = 0;
    v109 = 1;
  }
  WTF::fastFree((WTF *)(v160 - 2), v66);
  if (!v109)
    goto LABEL_229;
LABEL_281:
  v139 = *a1;
  v140 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v141 = a1[3];
  if (v141 && v140)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v141 + 16))(v141, v139);
  LOBYTE(v151) = 0;
  v155 = 0;
LABEL_255:
  if (v157)
  {
    v119 = v156;
    v156 = 0;
    if (v119)
      CFRelease(v119);
  }
LABEL_258:
  if (v159)
  {
    v120 = v158;
    v158 = 0;
    if (v120)
      CFRelease(v120);
  }
LABEL_261:
  if (v2)
    CFRelease(v2);
LABEL_263:
  if (v155)
  {
    v121 = v151;
    v122 = v152;
    v151 = 0u;
    v152 = 0u;
    *(_OWORD *)a2 = v121;
    *(_OWORD *)(a2 + 16) = v122;
    v123 = v153;
    v124 = v154;
    v153 = 0u;
    v154 = 0u;
    *(_OWORD *)(a2 + 32) = v123;
    *(_OWORD *)(a2 + 48) = v124;
    *(_BYTE *)(a2 + 64) = 1;
    *(_BYTE *)(a2 + 72) = 1;
    WebKit::CoreIPCPKPayment::~CoreIPCPKPayment((WebKit::CoreIPCPKPayment *)&v151);
    return;
  }
  v125 = *a1;
  v126 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v127 = a1[3];
  if (v127)
  {
    if (v126)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v127 + 16))(v127, v125);
  }
LABEL_266:
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 72) = 0;
}

void sub_1978A15AC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, CFTypeRef a20,uint64_t a21,CFTypeRef a22,uint64_t a23,uint64_t a24,uint64_t a25,CFTypeRef a26,CFTypeRef a27,CFTypeRef a28,CFTypeRef a29,CFTypeRef a30,CFTypeRef a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,CFTypeRef a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,CFTypeRef a48,uint64_t a49,CFTypeRef a50,uint64_t a51,CFTypeRef a52,uint64_t a53,char *a54,uint64_t a55,CFTypeRef a56,uint64_t a57,CFTypeRef cf,char a59,CFTypeRef a60,char a61,uint64_t a62,CFTypeRef a63)
{
  char a64;
  CFTypeRef a66;
  char a67;
  uint64_t v67;
  const void *v69;

  if (a59 && cf)
    CFRelease(cf);
  if (a61 && a60)
    CFRelease(a60);
  if (a67 && a66)
    CFRelease(a66);
  if (*(_BYTE *)(v67 - 240))
  {
    v69 = *(const void **)(v67 - 248);
    *(_QWORD *)(v67 - 248) = 0;
    if (v69)
      CFRelease(v69);
  }
  if (a64 && a63)
    CFRelease(a63);
  if (a54)
    WTF::fastFree((WTF *)(a54 - 16), a2);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::CoreIPCCNPhoneNumber>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  char v12;
  WTF::StringImpl *v13;
  char v14;

  IPC::Decoder::decode<WTF::String>(a2, &v13);
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a2, &v11);
  v6 = *a2;
  if (*a2)
  {
    if (v14 && v12)
    {
      v7 = v13;
      v13 = 0;
      v8 = v11;
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v8;
      *(_BYTE *)(a1 + 16) = 1;
      goto LABEL_5;
    }
    __break(1u);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
  if (v12)
  {
    result = v11;
    v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
LABEL_5:
  if (v14)
  {
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        if (v6)
          return result;
        goto LABEL_12;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (v6)
    return result;
LABEL_12:
  v9 = *a2;
  v10 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (WTF::StringImpl *)a2[3];
  if (result)
  {
    if (v10)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v9);
  }
  return result;
}

void sub_1978A1B1C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12)
{
  uint64_t v12;

  std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100](v12, a2);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WebKit::CoreIPCCNPostalAddress>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD v27[4];
  uint64_t v28;
  WTF::StringImpl *v29;
  char v30;
  WTF::StringImpl *v31;
  char v32;
  WTF::StringImpl *v33;
  char v34;
  WTF::StringImpl *v35;
  char v36;
  WTF::StringImpl *v37;
  char v38;
  WTF::StringImpl *v39;
  char v40;
  WTF::StringImpl *v41;
  char v42;
  WTF::StringImpl *v43;
  char v44;
  WTF::StringImpl *v45;
  char v46;

  IPC::Decoder::decode<WTF::String>(a2, &v45);
  IPC::Decoder::decode<WTF::String>(a2, &v43);
  IPC::Decoder::decode<WTF::String>(a2, &v41);
  IPC::Decoder::decode<WTF::String>(a2, &v39);
  IPC::Decoder::decode<WTF::String>(a2, &v37);
  IPC::Decoder::decode<WTF::String>(a2, &v35);
  IPC::Decoder::decode<WTF::String>(a2, &v33);
  IPC::Decoder::decode<WTF::String>(a2, &v31);
  IPC::Decoder::decode<WTF::String>(a2, &v29);
  v5 = *a2;
  if (!*a2)
    goto LABEL_63;
  if (!v46 || !v44 || !v42 || !v40 || !v38 || !v36 || !v34 || !v32 || !v30)
  {
    __break(1u);
LABEL_63:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 72) = 0;
    goto LABEL_12;
  }
  v6 = v45;
  v45 = 0;
  v7 = v43;
  v43 = 0;
  v8 = v41;
  v41 = 0;
  v9 = v39;
  v39 = 0;
  v10 = v37;
  v37 = 0;
  v11 = v35;
  v35 = 0;
  v12 = v33;
  v33 = 0;
  v13 = v31;
  v31 = 0;
  v14 = v29;
  v29 = 0;
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  memset(v27, 0, 32);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v11;
  memset(&v27[2], 0, 32);
  *(_QWORD *)(a1 + 48) = v12;
  *(_QWORD *)(a1 + 56) = v13;
  v28 = 0;
  *(_QWORD *)(a1 + 64) = v14;
  *(_BYTE *)(a1 + 72) = 1;
  WebKit::CoreIPCCNPostalAddress::~CoreIPCCNPostalAddress((WebKit::CoreIPCCNPostalAddress *)v27, v4);
LABEL_12:
  if (v30)
  {
    v15 = v29;
    v29 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v4);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  if (v32)
  {
    v16 = v31;
    v31 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v4);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  if (v34)
  {
    v17 = v33;
    v33 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v4);
      else
        *(_DWORD *)v17 -= 2;
    }
  }
  if (v36)
  {
    v18 = v35;
    v35 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v4);
      else
        *(_DWORD *)v18 -= 2;
    }
  }
  if (v38)
  {
    v19 = v37;
    v37 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v4);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
  if (v40)
  {
    v20 = v39;
    v39 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v4);
      else
        *(_DWORD *)v20 -= 2;
    }
  }
  if (v42)
  {
    v21 = v41;
    v41 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v4);
      else
        *(_DWORD *)v21 -= 2;
    }
  }
  if (v44)
  {
    v22 = v43;
    v43 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v4);
      else
        *(_DWORD *)v22 -= 2;
    }
  }
  if (v46)
  {
    v23 = v45;
    v45 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
      {
        WTF::StringImpl::destroy(v23, v4);
        if (v5)
          return;
        goto LABEL_59;
      }
      *(_DWORD *)v23 -= 2;
    }
  }
  if (v5)
    return;
LABEL_59:
  v24 = *a2;
  v25 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v26 = a2[3];
  if (v26)
  {
    if (v25)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, v24);
  }
}

void sub_1978A1E90(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF::StringImpl *a21,char a22,WTF::StringImpl *a23,char a24,WTF::StringImpl *a25,char a26)
{
  uint64_t v26;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;

  if (a22 && a21)
  {
    if (*(_DWORD *)a21 == 2)
      WTF::StringImpl::destroy(a21, a2);
    else
      *(_DWORD *)a21 -= 2;
  }
  if (a24 && a23)
  {
    if (*(_DWORD *)a23 == 2)
      WTF::StringImpl::destroy(a23, a2);
    else
      *(_DWORD *)a23 -= 2;
  }
  if (a26 && a25)
  {
    if (*(_DWORD *)a25 == 2)
      WTF::StringImpl::destroy(a25, a2);
    else
      *(_DWORD *)a25 -= 2;
  }
  if (*(_BYTE *)(v26 - 104))
  {
    v28 = *(WTF::StringImpl **)(v26 - 112);
    *(_QWORD *)(v26 - 112) = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, a2);
      else
        *(_DWORD *)v28 -= 2;
    }
  }
  if (*(_BYTE *)(v26 - 88))
  {
    v29 = *(WTF::StringImpl **)(v26 - 96);
    *(_QWORD *)(v26 - 96) = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, a2);
      else
        *(_DWORD *)v29 -= 2;
    }
  }
  if (*(_BYTE *)(v26 - 72))
  {
    v30 = *(WTF::StringImpl **)(v26 - 80);
    *(_QWORD *)(v26 - 80) = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, a2);
      else
        *(_DWORD *)v30 -= 2;
    }
  }
  if (*(_BYTE *)(v26 - 56))
  {
    v31 = *(WTF::StringImpl **)(v26 - 64);
    *(_QWORD *)(v26 - 64) = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, a2);
      else
        *(_DWORD *)v31 -= 2;
    }
  }
  if (*(_BYTE *)(v26 - 40))
  {
    v32 = *(WTF::StringImpl **)(v26 - 48);
    *(_QWORD *)(v26 - 48) = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, a2);
      else
        *(_DWORD *)v32 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNSURLProtectionSpace>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCNSURLProtectionSpace>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *v5;
  id v6;

  v4 = *(unsigned __int8 *)(a2 + 80);
  v5 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *v5 = 1;
    if (*(_BYTE *)(a2 + 80))
    {
      IPC::ArgumentCoder<WebKit::CoreIPCNSURLProtectionSpace,void>::encode(a1, a2);
    }
    else
    {
      v6 = std::__throw_bad_optional_access[abi:sn180100]();
      IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNSURLProtectionSpace>,void>::decode<IPC::Decoder>(v6);
    }
  }
  else
  {
    *v5 = 0;
  }
}

void IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNSURLProtectionSpace>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  WTF *v3;
  _QWORD *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  WTF **v22;
  WTF *v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  WTF *v29;
  uint64_t v30;
  const void *v31;
  const void *v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  int v36;
  void *v37;
  CFTypeRef v38;
  WTF *v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t *v47;
  uint64_t v48;
  int v49;
  WTF *v50;
  uint64_t v51;
  const void *v52;
  const void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  CFTypeRef v58;
  const void *v59;
  const void *v60;
  const void *v61;
  const void *v62;
  WTF *v63;
  WTF *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF *v73;
  WTF *v74;
  const void *v75;
  const void *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _QWORD *v83;
  WTF *v84;
  unint64_t v85;
  char v86;
  char v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  WTF *v92;
  unint64_t v93;
  char v94;
  WTF *v95;
  unint64_t v96;
  char v97;
  char v98;
  CFTypeRef cf;
  char v100;
  const void *v101;
  char v102;
  const void *v103;
  char v104;
  const void *v105;
  char v106;
  const void *v107;
  char v108;
  WTF *v109;
  char v110;
  CFTypeRef v111;
  char v112;
  const void *v113;
  char v114;
  WTF *v115;
  uint64_t v116;

  v10 = a1[1];
  v11 = *a1;
  v12 = a1[2] - *a1;
  if (v10 <= v12)
  {
    v41 = 0;
    v42 = 0;
    *a1 = 0;
    a1[1] = 0;
    v43 = a1[3];
    if (v43)
    {
      if (v10)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43);
        v42 = *a1;
        v41 = a1[1];
      }
      else
      {
        v41 = 0;
        v42 = 0;
      }
    }
LABEL_55:
    v10 = 0;
    v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    v44 = a1[3];
    if (v44)
    {
      if (v41)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v44 + 16))(v44, v42, v41);
        goto LABEL_58;
      }
      v10 = 0;
      v11 = 0;
    }
    goto LABEL_59;
  }
  v13 = (unsigned __int8 *)(v11 + v12);
  a1[2] = (uint64_t)(v13 + 1);
  if (!v11)
  {
    v41 = v10;
    v42 = 0;
    goto LABEL_55;
  }
  v14 = *v13;
  if (v14 >= 2)
    goto LABEL_59;
  if (!v14)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 80) = 0;
    *(_BYTE *)(a2 + 88) = 1;
    return;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSDictionary>>((uint64_t)&v111, a1);
  if (!v112)
    goto LABEL_58;
  IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v109);
  if (!v110)
  {
    v35 = 0;
    v36 = 0;
    LOBYTE(v80) = 0;
    v87 = 0;
    goto LABEL_93;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSNumber>>(a1, (uint64_t)&v107);
  if (!v108)
  {
    v35 = 0;
    v36 = 0;
    LOBYTE(v80) = 0;
    v87 = 0;
    goto LABEL_90;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSNumber>>(a1, (uint64_t)&v105);
  if (!v106)
  {
    v35 = 0;
    v36 = 0;
    LOBYTE(v80) = 0;
    v87 = 0;
    goto LABEL_87;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v103);
  if (!v104)
  {
    v35 = 0;
    v36 = 0;
    LOBYTE(v80) = 0;
    v87 = 0;
    goto LABEL_84;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSNumber>>(a1, (uint64_t)&v101);
  if (!v102)
  {
    v35 = 0;
    v36 = 0;
    LOBYTE(v80) = 0;
    v87 = 0;
    goto LABEL_81;
  }
  IPC::Decoder::decode<WTF::RetainPtr<__SecTrust *>>(a1, (uint64_t)&cf);
  if (!v100)
  {
    v35 = 0;
    v36 = 0;
    LOBYTE(v80) = 0;
    v87 = 0;
    goto LABEL_78;
  }
  v16 = a1[1];
  v15 = (char *)*a1;
  v17 = a1[2] - *a1;
  if (v16 <= v17)
  {
    v65 = 0;
    v66 = 0;
    *a1 = 0;
    a1[1] = 0;
    v67 = a1[3];
    if (v67)
    {
      if (v16)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v67 + 16))(v67);
        v66 = *a1;
        v65 = a1[1];
      }
      else
      {
        v65 = 0;
        v66 = 0;
      }
    }
    goto LABEL_104;
  }
  v18 = &v15[v17];
  v19 = (uint64_t)&v15[v17 + 1];
  a1[2] = v19;
  if (!v15)
  {
    v65 = v16;
    v66 = 0;
LABEL_104:
    v16 = 0;
    v15 = 0;
    *a1 = 0;
    a1[1] = 0;
    v68 = a1[3];
    if (v68)
    {
      if (v65)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v68 + 16))(v68, v66, v65);
        v15 = (char *)*a1;
        v16 = a1[1];
      }
      else
      {
        v16 = 0;
        v15 = 0;
      }
    }
LABEL_105:
    *a1 = 0;
    a1[1] = 0;
    v55 = a1[3];
    if (!v55 || !v16)
      goto LABEL_73;
    goto LABEL_102;
  }
  v20 = *v18;
  if (v20 >= 2)
    goto LABEL_105;
  if (!*v18)
  {
    LOBYTE(v95) = 0;
    v97 = 0;
    v98 = 1;
    goto LABEL_40;
  }
  v21 = ((v19 + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v15;
  if (v16 < v21 || v16 - v21 <= 7)
  {
    *a1 = 0;
    a1[1] = 0;
    v69 = a1[3];
    if (v69)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v69 + 16))(v69);
      v70 = *a1;
      v71 = a1[1];
      v72 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v72)
      {
        if (v71)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v72 + 16))(v72, v70);
      }
    }
LABEL_72:
    v15 = (char *)*a1;
    v54 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v55 = a1[3];
    if (!v55 || !v54)
      goto LABEL_73;
LABEL_102:
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v55 + 16))(v55, v15);
LABEL_73:
    LOBYTE(v95) = 0;
    v98 = 0;
    v15 = (char *)*a1;
    v56 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v57 = a1[3];
    if (v57 && v56)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v57 + 16))(v57, v15);
    v35 = 0;
    v36 = 0;
    LOBYTE(v80) = 0;
    v87 = 0;
    goto LABEL_75;
  }
  v22 = (WTF **)&v15[v21];
  v23 = *v22;
  a1[2] = (uint64_t)(v22 + 1);
  v115 = 0;
  v116 = 0;
  if ((unint64_t)v23 < 0x20000)
  {
    if (!v23)
    {
      v33 = 0;
      v34 = 0;
      goto LABEL_39;
    }
    v24 = WTF::fastMalloc((WTF *)(8 * (_QWORD)v23));
    LODWORD(v116) = (_DWORD)v23;
    v115 = (WTF *)v24;
    while (1)
    {
      IPC::Decoder::decode<WTF::RetainPtr<NSData>>(a1, (uint64_t)&v113);
      if (!v114)
        goto LABEL_71;
      v25 = HIDWORD(v116);
      if (HIDWORD(v116) != (_DWORD)v116)
        break;
      v26 = (uint64_t *)WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v115, HIDWORD(v116) + 1, (unint64_t)&v113);
      v27 = HIDWORD(v116);
      v28 = HIDWORD(v116) + 1;
      v29 = v115;
      v30 = *v26;
      *v26 = 0;
      *((_QWORD *)v29 + v27) = v30;
      HIDWORD(v116) = v28;
      if (v114)
        goto LABEL_26;
LABEL_28:
      v23 = (WTF *)((char *)v23 - 1);
      if (!v23)
      {
        v23 = v115;
        v34 = v116;
        v33 = HIDWORD(v116);
        goto LABEL_39;
      }
    }
    v31 = v113;
    v113 = 0;
    *((_QWORD *)v115 + HIDWORD(v116)) = v31;
    HIDWORD(v116) = v25 + 1;
LABEL_26:
    v32 = v113;
    v113 = 0;
    if (v32)
      CFRelease(v32);
    goto LABEL_28;
  }
  do
  {
    IPC::Decoder::decode<WTF::RetainPtr<NSData>>(a1, (uint64_t)&v113);
    if (!v114)
    {
LABEL_71:
      WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v115, v15);
      goto LABEL_72;
    }
    v46 = HIDWORD(v116);
    if (HIDWORD(v116) == (_DWORD)v116)
    {
      v47 = (uint64_t *)WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v115, HIDWORD(v116) + 1, (unint64_t)&v113);
      v48 = HIDWORD(v116);
      v49 = HIDWORD(v116) + 1;
      v50 = v115;
      v51 = *v47;
      *v47 = 0;
      *((_QWORD *)v50 + v48) = v51;
      HIDWORD(v116) = v49;
      if (!v114)
        goto LABEL_69;
    }
    else
    {
      v52 = v113;
      v113 = 0;
      *((_QWORD *)v115 + HIDWORD(v116)) = v52;
      HIDWORD(v116) = v46 + 1;
    }
    v53 = v113;
    v113 = 0;
    if (v53)
      CFRelease(v53);
LABEL_69:
    v23 = (WTF *)((char *)v23 - 1);
  }
  while (v23);
  v4 = (_QWORD *)HIDWORD(v116);
  v23 = v115;
  if (v116 <= HIDWORD(v116))
    goto LABEL_129;
  v73 = v115;
  if (!HIDWORD(v116))
    goto LABEL_122;
  if (HIDWORD(v116) >> 29)
  {
    __break(0xC471u);
LABEL_141:
    __break(1u);
    return;
  }
  v74 = (WTF *)(8 * HIDWORD(v116));
  v3 = (WTF *)WTF::fastMalloc(v74);
  LODWORD(v116) = (_DWORD)v4;
  v115 = v3;
  v73 = v23;
  if (v3 != v23)
  {
    v4 = v23;
    do
    {
      v75 = (const void *)*v4;
      *v4 = 0;
      *(_QWORD *)v3 = v75;
      v76 = (const void *)*v4;
      *v4 = 0;
      if (v76)
        CFRelease(v76);
      v3 = (WTF *)((char *)v3 + 8);
      ++v4;
      v74 = (WTF *)((char *)v74 - 8);
    }
    while (v74);
    v73 = v115;
  }
LABEL_122:
  if (v23)
  {
    if (v73 == v23)
    {
      v115 = 0;
      LODWORD(v116) = 0;
    }
    WTF::fastFree(v23, v15);
    v23 = v115;
  }
  else
  {
    v23 = v73;
  }
LABEL_129:
  v34 = v116;
  v33 = HIDWORD(v116);
LABEL_39:
  v78 = v33;
  v79 = v34;
  v115 = 0;
  v116 = 0;
  v2 = 1;
  LOBYTE(v89) = 1;
  WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v115, v15);
  v88 = 0uLL;
  v95 = v23;
  v96 = __PAIR64__(v78, v79);
  v97 = 1;
  WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v88, v37);
  v98 = 1;
  if (!*a1)
  {
    v77 = v20;
    v35 = 0;
    v36 = 0;
    LOBYTE(v80) = 0;
    v87 = 0;
    goto LABEL_52;
  }
LABEL_40:
  if (!v110 || !v108 || !v106 || !v104 || !v102 || !v100)
    goto LABEL_141;
  v38 = v111;
  v111 = 0;
  v3 = v109;
  v109 = 0;
  v2 = (uint64_t)v107;
  v107 = 0;
  v7 = v105;
  v105 = 0;
  v6 = v103;
  v103 = 0;
  v5 = v101;
  v101 = 0;
  v4 = cf;
  cf = 0;
  LOBYTE(v92) = 0;
  v94 = 0;
  if (v20)
  {
    v39 = v95;
    v95 = 0;
    v96 = 0;
    v92 = v39;
    v93 = __PAIR64__(v78, v79);
    v94 = 1;
  }
  *(_QWORD *)&v80 = v38;
  *((_QWORD *)&v80 + 1) = v3;
  v88 = 0u;
  v89 = 0u;
  *(_QWORD *)&v81 = v2;
  *((_QWORD *)&v81 + 1) = v7;
  v90 = 0u;
  *(_QWORD *)&v82 = v6;
  *((_QWORD *)&v82 + 1) = v5;
  v91 = 0;
  v83 = v4;
  LOBYTE(v84) = 0;
  v86 = 0;
  v77 = v20;
  if (v20)
  {
    v40 = v92;
    v92 = 0;
    v93 = 0;
    v84 = v40;
    v85 = __PAIR64__(v78, v79);
    v35 = 1;
    v86 = 1;
  }
  else
  {
    v35 = 0;
  }
  v36 = 1;
  v87 = 1;
  WebKit::CoreIPCNSURLProtectionSpace::~CoreIPCNSURLProtectionSpace((WebKit::CoreIPCNSURLProtectionSpace *)&v88, v15);
LABEL_52:
  if (v77)
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v95, v15);
LABEL_75:
  if (v100)
  {
    v58 = cf;
    cf = 0;
    if (v58)
      CFRelease(v58);
  }
LABEL_78:
  if (v102)
  {
    v59 = v101;
    v101 = 0;
    if (v59)
      CFRelease(v59);
  }
LABEL_81:
  if (v104)
  {
    v60 = v103;
    v103 = 0;
    if (v60)
      CFRelease(v60);
  }
LABEL_84:
  if (v106)
  {
    v61 = v105;
    v105 = 0;
    if (v61)
      CFRelease(v61);
  }
LABEL_87:
  if (v108)
  {
    v62 = v107;
    v107 = 0;
    if (v62)
      CFRelease(v62);
  }
LABEL_90:
  if (v110)
  {
    v63 = v109;
    v109 = 0;
    if (v63)
      CFRelease(v63);
  }
LABEL_93:
  if (v111)
    CFRelease(v111);
  if (v36)
  {
    *(_QWORD *)a2 = v80;
    *(_QWORD *)(a2 + 8) = v3;
    v80 = 0u;
    v81 = 0u;
    *(_QWORD *)(a2 + 16) = v2;
    *(_QWORD *)(a2 + 24) = v7;
    v82 = 0u;
    *(_QWORD *)(a2 + 32) = v6;
    *(_QWORD *)(a2 + 40) = v5;
    v83 = 0;
    *(_QWORD *)(a2 + 48) = v4;
    *(_BYTE *)(a2 + 56) = 0;
    *(_BYTE *)(a2 + 72) = 0;
    if (v35)
    {
      v64 = v84;
      v84 = 0;
      v85 = 0;
      *(_QWORD *)(a2 + 56) = v64;
      *(_DWORD *)(a2 + 64) = v79;
      *(_DWORD *)(a2 + 68) = v78;
      *(_BYTE *)(a2 + 72) = 1;
    }
    *(_BYTE *)(a2 + 80) = 1;
    *(_BYTE *)(a2 + 88) = 1;
    WebKit::CoreIPCNSURLProtectionSpace::~CoreIPCNSURLProtectionSpace((WebKit::CoreIPCNSURLProtectionSpace *)&v80, v15);
    return;
  }
LABEL_58:
  v11 = *a1;
  v10 = a1[1];
LABEL_59:
  *a1 = 0;
  a1[1] = 0;
  v45 = a1[3];
  if (v45 && v10)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v45 + 16))(v45, v11);
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 88) = 0;
}

void sub_1978A2904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,CFTypeRef cf,char a39)
{
  uint64_t v39;
  const void *v41;
  const void *v42;
  const void *v43;
  const void *v44;
  const void *v45;
  const void *v46;

  if (a39 && cf)
    CFRelease(cf);
  if (*(_BYTE *)(v39 - 208))
  {
    v41 = *(const void **)(v39 - 216);
    *(_QWORD *)(v39 - 216) = 0;
    if (v41)
      CFRelease(v41);
  }
  if (*(_BYTE *)(v39 - 192))
  {
    v42 = *(const void **)(v39 - 200);
    *(_QWORD *)(v39 - 200) = 0;
    if (v42)
      CFRelease(v42);
  }
  if (*(_BYTE *)(v39 - 176))
  {
    v43 = *(const void **)(v39 - 184);
    *(_QWORD *)(v39 - 184) = 0;
    if (v43)
      CFRelease(v43);
  }
  if (*(_BYTE *)(v39 - 160))
  {
    v44 = *(const void **)(v39 - 168);
    *(_QWORD *)(v39 - 168) = 0;
    if (v44)
      CFRelease(v44);
  }
  if (*(_BYTE *)(v39 - 144))
  {
    v45 = *(const void **)(v39 - 152);
    *(_QWORD *)(v39 - 152) = 0;
    if (v45)
      CFRelease(v45);
  }
  v46 = *(const void **)(v39 - 136);
  if (v46)
    CFRelease(v46);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNSShadow>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCNSShadow>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  __n128 v8;

  v4 = *(unsigned __int8 *)(a2 + 32);
  v5 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *v5 = 1;
    if (*(_BYTE *)(a2 + 32))
    {
      IPC::ArgumentCoder<WebKit::CoreIPCNSShadow,void>::encode(a1, (uint64_t *)a2);
    }
    else
    {
      v6 = (uint64_t *)std::__throw_bad_optional_access[abi:sn180100]();
      IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNSShadow>,void>::decode<IPC::Decoder>(v6, v7, v8);
    }
  }
  else
  {
    *v5 = 0;
  }
}

void IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNSShadow>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v4 = a1[1];
  v5 = *a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
  {
    v11 = 0;
    v12 = 0;
    *a1 = 0;
    a1[1] = 0;
    v13 = a1[3];
    if (v13)
    {
      v17 = a1;
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
        a1 = v17;
        v12 = *v17;
        v11 = v17[1];
      }
      else
      {
        v11 = 0;
        v12 = 0;
      }
    }
    goto LABEL_12;
  }
  v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v11 = v4;
    v12 = 0;
LABEL_12:
    v4 = 0;
    v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    v14 = a1[3];
    if (v14)
    {
      v16 = a1;
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v14 + 16))(v14, v12, v11);
        a1 = v16;
        v5 = *v16;
        v4 = v16[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
    goto LABEL_13;
  }
  v8 = *v7;
  if (v8 < 2)
  {
    if (v8)
    {
      IPC::Decoder::decode<WebKit::CoreIPCNSShadow>(a1, (uint64_t)&v18, a3);
      v9 = v21;
      if (v21)
      {
        *(_OWORD *)a2 = v18;
        v10 = v20;
        *(_QWORD *)(a2 + 16) = v19;
        *(_QWORD *)(a2 + 24) = v10;
        v9 = 1;
        *(_BYTE *)(a2 + 32) = 1;
      }
      else
      {
        *(_BYTE *)a2 = 0;
      }
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 32) = 0;
      v9 = 1;
    }
    *(_BYTE *)(a2 + 40) = v9;
    return;
  }
LABEL_13:
  *a1 = 0;
  a1[1] = 0;
  v15 = a1[3];
  if (v15 && v4)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v5);
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 40) = 0;
}

char *IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNSURLCredential>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCNSURLCredential>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  id v6;

  v4 = *(unsigned __int8 *)(a2 + 8);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 8))
    {
      return (char *)IPC::encodeObjectDirectly<NSDictionary>(a1, *(NSDictionary **)a2);
    }
    else
    {
      v6 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNSURLCredential>,void>::decode<IPC::Decoder>(v6);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNSURLCredential>,void>::decode<IPC::Decoder>@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFTypeRef cf;
  char v15;

  v2 = result;
  v4 = result[1];
  v5 = *result;
  v6 = result[2] - *result;
  if (v4 <= v6)
  {
    v10 = 0;
    v11 = 0;
    *result = 0;
    result[1] = 0;
    v12 = result[3];
    if (v12)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        v11 = *v2;
        v10 = v2[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
  }
  else
  {
    v7 = (unsigned __int8 *)(v5 + v6);
    result[2] = (uint64_t)(v7 + 1);
    if (v5)
    {
      v8 = *v7;
      if (v8 >= 2)
        goto LABEL_17;
      if (!v8)
      {
        *a2 = 0;
        a2[8] = 0;
        v9 = 1;
        goto LABEL_9;
      }
      IPC::Decoder::decode<WTF::RetainPtr<NSDictionary>>((uint64_t)&cf, result);
      if (v15)
      {
        result = (uint64_t *)cf;
        if (*v2)
        {
          *(_QWORD *)a2 = cf;
          v9 = 1;
          a2[8] = 1;
          goto LABEL_9;
        }
        if (cf)
          CFRelease(cf);
      }
      goto LABEL_16;
    }
    v10 = v4;
    v11 = 0;
  }
  v4 = 0;
  v5 = 0;
  *v2 = 0;
  v2[1] = 0;
  v13 = v2[3];
  if (!v13)
    goto LABEL_17;
  if (v10)
  {
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v11, v10);
LABEL_16:
    v5 = *v2;
    v4 = v2[1];
    goto LABEL_17;
  }
  v4 = 0;
  v5 = 0;
LABEL_17:
  *v2 = 0;
  v2[1] = 0;
  result = (uint64_t *)v2[3];
  if (result && v4)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  v9 = 0;
  *a2 = 0;
LABEL_9:
  a2[16] = v9;
  return result;
}

void IPC::Decoder::decode<WebKit::CoreIPCPersonNameComponents>(uint64_t a1, uint64_t *a2)
{
  WebKit::CoreIPCPersonNameComponents **v4;
  unint64_t v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  WebKit::CoreIPCPersonNameComponents **v10;
  WebKit::CoreIPCPersonNameComponents *v11;
  WebKit::CoreIPCPersonNameComponents *v12;
  WebKit::CoreIPCPersonNameComponents *v13;
  WebKit::CoreIPCPersonNameComponents *v14;
  WebKit::CoreIPCPersonNameComponents *v15;
  WebKit::CoreIPCPersonNameComponents *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  void *v37;
  WTF::StringImpl *v38;
  char v39;
  WTF::StringImpl *v40;
  char v41;
  WTF::StringImpl *v42;
  char v43;
  WTF::StringImpl *v44;
  char v45;
  WTF::StringImpl *v46;
  char v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  char v51;

  IPC::Decoder::decode<WTF::String>(a2, &v46);
  IPC::Decoder::decode<WTF::String>(a2, &v44);
  IPC::Decoder::decode<WTF::String>(a2, &v42);
  IPC::Decoder::decode<WTF::String>(a2, &v40);
  v4 = (WebKit::CoreIPCPersonNameComponents **)IPC::Decoder::decode<WTF::String>(a2, &v38);
  v5 = a2[1];
  v6 = (WTF::StringImpl *)*a2;
  v7 = a2[2] - *a2;
  if (v5 <= v7)
  {
    v17 = 0;
    v18 = 0;
    *a2 = 0;
    a2[1] = 0;
    v19 = a2[3];
    if (v19)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
        v18 = *a2;
        v17 = a2[1];
      }
      else
      {
        v17 = 0;
        v18 = 0;
      }
    }
    goto LABEL_11;
  }
  v8 = (unsigned __int8 *)v6 + v7;
  a2[2] = (uint64_t)(v8 + 1);
  if (!v6)
  {
    v17 = v5;
    v18 = 0;
LABEL_11:
    v5 = 0;
    v6 = 0;
    *a2 = 0;
    a2[1] = 0;
    v20 = a2[3];
    if (v20)
    {
      if (v17)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v18, v17);
        v6 = (WTF::StringImpl *)*a2;
        v5 = a2[1];
      }
      else
      {
        v5 = 0;
        v6 = 0;
      }
    }
    goto LABEL_12;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_12:
    *a2 = 0;
    a2[1] = 0;
    v21 = a2[3];
    if (v21 && v5)
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v21 + 16))(v21, v6);
    goto LABEL_13;
  }
  if (!v9)
  {
    v10 = 0;
    goto LABEL_15;
  }
  IPC::Decoder::decode<WebKit::CoreIPCPersonNameComponents>(&v48, a2);
  if (!v51)
  {
LABEL_13:
    v6 = (WTF::StringImpl *)*a2;
    v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v4 = (WebKit::CoreIPCPersonNameComponents **)a2[3];
    if (v4)
      goto LABEL_64;
    goto LABEL_14;
  }
  v4 = (WebKit::CoreIPCPersonNameComponents **)WTF::fastMalloc((WTF *)0x30);
  v10 = v4;
  v11 = (WebKit::CoreIPCPersonNameComponents *)v48;
  *(_QWORD *)&v48 = 0;
  *v4 = v11;
  v12 = (WebKit::CoreIPCPersonNameComponents *)*((_QWORD *)&v48 + 1);
  *((_QWORD *)&v48 + 1) = 0;
  v4[1] = v12;
  v13 = (WebKit::CoreIPCPersonNameComponents *)v49;
  *(_QWORD *)&v49 = 0;
  v4[2] = v13;
  v14 = (WebKit::CoreIPCPersonNameComponents *)*((_QWORD *)&v49 + 1);
  *((_QWORD *)&v49 + 1) = 0;
  v4[3] = v14;
  v15 = (WebKit::CoreIPCPersonNameComponents *)v50;
  *(_QWORD *)&v50 = 0;
  v4[4] = v15;
  v16 = (WebKit::CoreIPCPersonNameComponents *)*((_QWORD *)&v50 + 1);
  *((_QWORD *)&v50 + 1) = 0;
  v4[5] = v16;
  if (v51)
    WebKit::CoreIPCPersonNameComponents::~CoreIPCPersonNameComponents((WebKit::CoreIPCPersonNameComponents **)&v48);
  v9 = 0;
LABEL_15:
  while (1)
  {
    v22 = *a2;
    if (!*a2)
      break;
    if (v47 && v45 && v43 && v41 && v39 && !v9)
    {
      v23 = v46;
      if (v46)
        *(_DWORD *)v46 += 2;
      v24 = v44;
      if (v44)
        *(_DWORD *)v44 += 2;
      v25 = v42;
      if (v42)
        *(_DWORD *)v42 += 2;
      v26 = v40;
      if (v40)
        *(_DWORD *)v40 += 2;
      v27 = v38;
      if (v38)
        *(_DWORD *)v38 += 2;
      *(_QWORD *)a1 = v23;
      *(_QWORD *)(a1 + 8) = v24;
      v48 = 0u;
      v49 = 0u;
      *(_QWORD *)(a1 + 16) = v25;
      *(_QWORD *)(a1 + 24) = v26;
      v50 = 0u;
      *(_QWORD *)(a1 + 32) = v27;
      *(_QWORD *)(a1 + 40) = v10;
      *(_BYTE *)(a1 + 48) = 1;
      WebKit::CoreIPCPersonNameComponents::~CoreIPCPersonNameComponents((WebKit::CoreIPCPersonNameComponents **)&v48);
      goto LABEL_33;
    }
    __break(1u);
LABEL_64:
    if (v5)
      v4 = (WebKit::CoreIPCPersonNameComponents **)(*((uint64_t (**)(WebKit::CoreIPCPersonNameComponents **, WTF::StringImpl *))*v4
                                                    + 2))(v4, v6);
LABEL_14:
    v10 = 0;
    v9 = 1;
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (!v10)
    LOBYTE(v9) = 1;
  if ((v9 & 1) == 0)
  {
    WebKit::CoreIPCPersonNameComponents::~CoreIPCPersonNameComponents(v10);
    WTF::fastFree(v36, v37);
  }
LABEL_33:
  if (v39)
  {
    v28 = v38;
    v38 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v6);
      else
        *(_DWORD *)v28 -= 2;
    }
  }
  if (v41)
  {
    v29 = v40;
    v40 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v6);
      else
        *(_DWORD *)v29 -= 2;
    }
  }
  if (v43)
  {
    v30 = v42;
    v42 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v6);
      else
        *(_DWORD *)v30 -= 2;
    }
  }
  if (v45)
  {
    v31 = v44;
    v44 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v6);
      else
        *(_DWORD *)v31 -= 2;
    }
  }
  if (v47)
  {
    v32 = v46;
    v46 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
      {
        WTF::StringImpl::destroy(v32, v6);
        if (v22)
          return;
        goto LABEL_60;
      }
      *(_DWORD *)v32 -= 2;
    }
  }
  if (v22)
    return;
LABEL_60:
  v33 = *a2;
  v34 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v35 = a2[3];
  if (v35)
  {
    if (v34)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 16))(v35, v33);
  }
}

void sub_1978A319C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, WTF::StringImpl *a11, char a12, WTF::StringImpl *a13, char a14, WTF::StringImpl *a15, char a16, WTF::StringImpl *a17, char a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  if (a16 && a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, a2);
    else
      *(_DWORD *)a15 -= 2;
  }
  if (a18 && a17)
  {
    if (*(_DWORD *)a17 == 2)
      WTF::StringImpl::destroy(a17, a2);
    else
      *(_DWORD *)a17 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF *IPC::Decoder::decode<WebKit::CoreIPCDateComponents>(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *result;
  unint64_t v14;
  unint64_t v15;
  char *v17;
  uint64_t v18;
  int v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  char v30;
  WTF::StringImpl *v31;
  char v32;

  IPC::Decoder::decode<WTF::String>(a2, &v31);
  IPC::Decoder::decode<WTF::String>(a2, &v29);
  v5 = a2[1];
  v6 = (char *)*a2;
  v7 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v5 >= v7 && v5 - v7 > 7)
  {
    v9 = &v6[v7];
    v10 = (uint64_t)&v6[v7 + 8];
    a2[2] = v10;
    if (!v6)
    {
      v23 = v5;
      v24 = 0;
      goto LABEL_51;
    }
    v2 = *(_QWORD *)v9;
    if (*(_QWORD *)v9)
    {
      if (v2 >> 61)
      {
        v11 = v5;
        v12 = (uint64_t)v6;
        goto LABEL_10;
      }
      v14 = ((v10 + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v6;
      v15 = 8 * v2;
      if (v5 < v14 || v5 - v14 < v15)
      {
        v11 = 0;
        v12 = 0;
        *a2 = 0;
        a2[1] = 0;
        v26 = a2[3];
        if (!v26)
          goto LABEL_10;
        if (!v5)
          goto LABEL_67;
        v24 = (uint64_t)v6;
        v23 = v5;
        goto LABEL_60;
      }
      v17 = &v6[v14];
      a2[2] = (uint64_t)&v6[v14 + v15];
      if (v2 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1978A35A0);
      }
      result = (WTF *)WTF::fastMalloc((WTF *)(8 * v2));
      v18 = 0;
      do
      {
        *(_QWORD *)((char *)result + v18) = *(_QWORD *)&v17[v18];
        v18 += 8;
      }
      while (v15 != v18);
    }
    else
    {
      result = 0;
    }
    v19 = 0;
    goto LABEL_22;
  }
  while (1)
  {
    v23 = 0;
    v24 = 0;
    *a2 = 0;
    a2[1] = 0;
    v25 = a2[3];
    if (v25)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
        v24 = *a2;
        v23 = a2[1];
      }
      else
      {
        v23 = 0;
        v24 = 0;
      }
    }
LABEL_51:
    v11 = 0;
    v12 = 0;
    *a2 = 0;
    a2[1] = 0;
    v26 = a2[3];
    if (v26)
    {
      if (v23)
      {
LABEL_60:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, v24, v23);
        v12 = *a2;
        v11 = a2[1];
      }
      else
      {
LABEL_67:
        v11 = 0;
        v12 = 0;
      }
    }
LABEL_10:
    *a2 = 0;
    a2[1] = 0;
    result = (WTF *)a2[3];
    if (!result
      || !v11
      || ((*(void (**)(WTF *, uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v12, v11),
          v6 = (char *)*a2,
          v5 = a2[1],
          result = (WTF *)a2[3],
          *a2 = 0,
          a2[1] = 0,
          !result))
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 32) = 0;
      goto LABEL_32;
    }
    if (v5)
      (*(void (**)(WTF *, char *))(*(_QWORD *)result + 16))(result, v6);
    result = 0;
    v19 = 1;
LABEL_22:
    if (!*a2)
      break;
    if (!v19)
    {
      if ((_DWORD)v2 != 14)
      {
        v22 = 0;
        *(_BYTE *)a1 = 0;
        goto LABEL_29;
      }
      if (v32)
      {
        v20 = v31;
        v31 = 0;
        if (v30)
        {
          v21 = v29;
          v29 = 0;
          *(_QWORD *)a1 = v20;
          *(_QWORD *)(a1 + 8) = v21;
          *(_QWORD *)(a1 + 16) = result;
          *(_QWORD *)(a1 + 24) = 0xE0000000ELL;
          v22 = 1;
          result = 0;
LABEL_29:
          *(_BYTE *)(a1 + 32) = v22;
          goto LABEL_30;
        }
      }
    }
    __break(1u);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 32) = 0;
  if ((v19 & 1) != 0)
    goto LABEL_32;
LABEL_30:
  if (result)
    result = (WTF *)WTF::fastFree(result, v6);
LABEL_32:
  if (v30)
  {
    result = v29;
    v29 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v32)
  {
    result = v31;
    v31 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (!*(_BYTE *)(a1 + 32))
  {
    v27 = *a2;
    v28 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF *)a2[3];
    if (result)
    {
      if (v28)
        return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v27);
    }
  }
  return result;
}

void sub_1978A35BC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, WTF::StringImpl *a11, char a12)
{
  uint64_t v12;

  std::__optional_destruct_base<WebKit::CoreIPCDateComponents,false>::~__optional_destruct_base[abi:sn180100](v12, a2);
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<std::optional<WebKit::CoreIPCData>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCData>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;

  v4 = *(unsigned __int8 *)(a2 + 8);
  v5 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *v5 = 1;
    if (*(_BYTE *)(a2 + 8))
    {
      IPC::ArgumentCoder<WebKit::CoreIPCData,void>::encode((uint64_t)a1, (CFDataRef *)a2);
    }
    else
    {
      v6 = (uint64_t *)std::__throw_bad_optional_access[abi:sn180100]();
      IPC::ArgumentCoder<std::optional<WebKit::CoreIPCData>,void>::decode<IPC::Decoder>(v6, v7);
    }
  }
  else
  {
    *v5 = 0;
  }
}

uint64_t *IPC::ArgumentCoder<std::optional<WebKit::CoreIPCData>,void>::decode<IPC::Decoder>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;

  v3 = result[1];
  v4 = *result;
  v5 = result[2] - *result;
  if (v3 <= v5)
  {
    v9 = 0;
    v10 = 0;
    *result = 0;
    result[1] = 0;
    v11 = result[3];
    if (v11)
    {
      v14 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
        result = v14;
        v10 = *v14;
        v9 = v14[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
    goto LABEL_12;
  }
  v6 = (unsigned __int8 *)(v4 + v5);
  result[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    v9 = v3;
    v10 = 0;
LABEL_12:
    v3 = 0;
    v4 = 0;
    *result = 0;
    result[1] = 0;
    v12 = result[3];
    if (v12)
    {
      v13 = result;
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v10, v9);
        result = v13;
        v4 = *v13;
        v3 = v13[1];
      }
      else
      {
        v3 = 0;
        v4 = 0;
      }
    }
    goto LABEL_13;
  }
  v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      result = (uint64_t *)IPC::Decoder::decode<WebKit::CoreIPCCFCharacterSet>(result, &v15);
      v8 = v16;
      if (v16)
      {
        *(_QWORD *)a2 = v15;
        v8 = 1;
        *(_BYTE *)(a2 + 8) = 1;
      }
      else
      {
        *(_BYTE *)a2 = 0;
      }
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 0;
      v8 = 1;
    }
    *(_BYTE *)(a2 + 16) = v8;
    return result;
  }
LABEL_13:
  *result = 0;
  result[1] = 0;
  result = (uint64_t *)result[3];
  if (result && v3)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v4);
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  return result;
}

void IPC::ArgumentCoder<std::optional<WebKit::CoreIPCArray>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCArray>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *v5;
  id v6;

  v4 = *(unsigned __int8 *)(a2 + 16);
  v5 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *v5 = 1;
    if (*(_BYTE *)(a2 + 16))
    {
      IPC::VectorArgumentCoder<false,WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2);
    }
    else
    {
      v6 = std::__throw_bad_optional_access[abi:sn180100]();
      IPC::ArgumentCoder<std::optional<WebKit::CoreIPCArray>,void>::decode<IPC::Decoder>(v6);
    }
  }
  else
  {
    *v5 = 0;
  }
}

uint64_t *IPC::ArgumentCoder<std::optional<WebKit::CoreIPCArray>,void>::decode<IPC::Decoder>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  char *v4;
  unint64_t v5;
  char *v6;
  unsigned int v7;
  void *v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v3 = result[1];
  v4 = (char *)*result;
  v5 = result[2] - *result;
  if (v3 <= v5)
  {
    v11 = 0;
    v12 = 0;
    *result = 0;
    result[1] = 0;
    v13 = result[3];
    if (v13)
    {
      v16 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
        result = v16;
        v12 = *v16;
        v11 = v16[1];
      }
      else
      {
        v11 = 0;
        v12 = 0;
      }
    }
    goto LABEL_12;
  }
  v6 = &v4[v5];
  result[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    v11 = v3;
    v12 = 0;
LABEL_12:
    v3 = 0;
    v4 = 0;
    *result = 0;
    result[1] = 0;
    v14 = result[3];
    if (v14)
    {
      v15 = result;
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v14 + 16))(v14, v12, v11);
        result = v15;
        v4 = (char *)*v15;
        v3 = v15[1];
      }
      else
      {
        v3 = 0;
        v4 = 0;
      }
    }
    goto LABEL_13;
  }
  v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      result = (uint64_t *)IPC::Decoder::decode<WebKit::CoreIPCArray>(result, v4, (uint64_t)&v17);
      if (v19)
      {
        *(_QWORD *)a2 = v17;
        v9 = v18;
        v17 = 0;
        v18 = 0;
        *(_QWORD *)(a2 + 8) = v9;
        v10 = 1;
        *(_BYTE *)(a2 + 16) = 1;
        result = (uint64_t *)WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v8);
      }
      else
      {
        v10 = 0;
        *(_BYTE *)a2 = 0;
      }
      *(_BYTE *)(a2 + 24) = v10;
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 24) = 1;
    }
    return result;
  }
LABEL_13:
  *result = 0;
  result[1] = 0;
  result = (uint64_t *)result[3];
  if (result && v3)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *, char *))(*result + 16))(result, v4);
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  return result;
}

char *IPC::ArgumentCoder<std::optional<WebKit::CoreIPCError>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCError>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  id v6;

  v4 = *(unsigned __int8 *)(a2 + 32);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 32))
    {
      return IPC::ArgumentCoder<WebKit::CoreIPCError,void>::encode(a1, a2);
    }
    else
    {
      v6 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)IPC::ArgumentCoder<std::optional<WebKit::CoreIPCError>,void>::decode<IPC::Decoder>(v6);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::optional<WebKit::CoreIPCError>,void>::decode<IPC::Decoder>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  char v5;
  uint64_t v6;
  __int128 v7;
  _QWORD v8[2];
  __int128 v9;
  char v10;

  result = IPC::Decoder::decode<BOOL>(a2);
  if ((unsigned __int16)result <= 0xFFu)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 40) = 0;
  }
  else
  {
    if ((_BYTE)result)
    {
      IPC::Decoder::decode<WebKit::CoreIPCError>(a2, (uint64_t)v8);
      v5 = v10;
      if (v10)
      {
        v6 = v8[1];
        *(_QWORD *)a1 = v8[0];
        *(_QWORD *)(a1 + 8) = v6;
        v7 = v9;
        v8[0] = 0;
        v9 = 0uLL;
        *(_OWORD *)(a1 + 16) = v7;
        v5 = 1;
        *(_BYTE *)(a1 + 32) = 1;
      }
      else
      {
        *(_BYTE *)a1 = 0;
      }
    }
    else
    {
      LOBYTE(v8[0]) = 0;
      v10 = 0;
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 32) = 0;
      v5 = 1;
    }
    *(_BYTE *)(a1 + 40) = v5;
    return std::__optional_destruct_base<WebKit::CoreIPCError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v8);
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::optional<WebKit::CoreIPCLocale>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCLocale>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  uint64_t *result;
  uint64_t *v6;
  uint64_t v7;

  v4 = *(unsigned __int8 *)(a2 + 8);
  result = (uint64_t *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *(_BYTE *)result = 1;
    if (*(_BYTE *)(a2 + 8))
    {
      return (uint64_t *)IPC::ArgumentCoder<WebKit::CoreIPCLocale,void>::encode((uint64_t)a1, (WTF::StringImpl **)a2);
    }
    else
    {
      v6 = (uint64_t *)std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::optional<WebKit::CoreIPCLocale>,void>::decode<IPC::Decoder>(v6, v7);
    }
  }
  else
  {
    *(_BYTE *)result = 0;
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::optional<WebKit::CoreIPCLocale>,void>::decode<IPC::Decoder>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;

  v3 = result[1];
  v4 = *result;
  v5 = result[2] - *result;
  if (v3 <= v5)
  {
    v9 = 0;
    v10 = 0;
    *result = 0;
    result[1] = 0;
    v11 = result[3];
    if (v11)
    {
      v14 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
        result = v14;
        v10 = *v14;
        v9 = v14[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
    goto LABEL_12;
  }
  v6 = (unsigned __int8 *)(v4 + v5);
  result[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    v9 = v3;
    v10 = 0;
LABEL_12:
    v3 = 0;
    v4 = 0;
    *result = 0;
    result[1] = 0;
    v12 = result[3];
    if (v12)
    {
      v13 = result;
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v10, v9);
        result = v13;
        v4 = *v13;
        v3 = v13[1];
      }
      else
      {
        v3 = 0;
        v4 = 0;
      }
    }
    goto LABEL_13;
  }
  v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      result = (uint64_t *)IPC::Decoder::decode<WebKit::CoreIPCLocale>(result, &v15);
      v8 = v16;
      if (v16)
      {
        *(_QWORD *)a2 = v15;
        v8 = 1;
        *(_BYTE *)(a2 + 8) = 1;
      }
      else
      {
        *(_BYTE *)a2 = 0;
      }
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 0;
      v8 = 1;
    }
    *(_BYTE *)(a2 + 16) = v8;
    return result;
  }
LABEL_13:
  *result = 0;
  result[1] = 0;
  result = (uint64_t *)result[3];
  if (result && v3)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v4);
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  return result;
}

void IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNumber>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCNumber>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;

  v4 = *(unsigned __int8 *)(a2 + 16);
  v5 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *v5 = 1;
    if (*(_BYTE *)(a2 + 16))
    {
      IPC::ArgumentCoder<WebKit::CoreIPCNumber,void>::encode(a1, (_QWORD *)a2);
    }
    else
    {
      v6 = (uint64_t *)std::__throw_bad_optional_access[abi:sn180100]();
      IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNumber>,void>::decode<IPC::Decoder>(v6, v7);
    }
  }
  else
  {
    *v5 = 0;
  }
}

uint64_t *IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNumber>,void>::decode<IPC::Decoder>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  __int128 v15;
  char v16;

  v3 = result[1];
  v4 = *result;
  v5 = result[2] - *result;
  if (v3 <= v5)
  {
    v9 = 0;
    v10 = 0;
    *result = 0;
    result[1] = 0;
    v11 = result[3];
    if (v11)
    {
      v14 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
        result = v14;
        v10 = *v14;
        v9 = v14[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
    goto LABEL_12;
  }
  v6 = (unsigned __int8 *)(v4 + v5);
  result[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    v9 = v3;
    v10 = 0;
LABEL_12:
    v3 = 0;
    v4 = 0;
    *result = 0;
    result[1] = 0;
    v12 = result[3];
    if (v12)
    {
      v13 = result;
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v10, v9);
        result = v13;
        v4 = *v13;
        v3 = v13[1];
      }
      else
      {
        v3 = 0;
        v4 = 0;
      }
    }
    goto LABEL_13;
  }
  v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      result = (uint64_t *)IPC::Decoder::decode<WebKit::CoreIPCNumber>(result, &v15);
      v8 = v16;
      if (v16)
      {
        *(_OWORD *)a2 = v15;
        v8 = 1;
        *(_BYTE *)(a2 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a2 = 0;
      }
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 16) = 0;
      v8 = 1;
    }
    *(_BYTE *)(a2 + 24) = v8;
    return result;
  }
LABEL_13:
  *result = 0;
  result[1] = 0;
  result = (uint64_t *)result[3];
  if (result && v3)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v4);
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  return result;
}

uint64_t *IPC::ArgumentCoder<std::optional<WebKit::CoreIPCString>,void>::decode<IPC::Decoder>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;

  v3 = result[1];
  v4 = *result;
  v5 = result[2] - *result;
  if (v3 <= v5)
  {
    v9 = 0;
    v10 = 0;
    *result = 0;
    result[1] = 0;
    v11 = result[3];
    if (v11)
    {
      v14 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
        result = v14;
        v10 = *v14;
        v9 = v14[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
    goto LABEL_12;
  }
  v6 = (unsigned __int8 *)(v4 + v5);
  result[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    v9 = v3;
    v10 = 0;
LABEL_12:
    v3 = 0;
    v4 = 0;
    *result = 0;
    result[1] = 0;
    v12 = result[3];
    if (v12)
    {
      v13 = result;
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v10, v9);
        result = v13;
        v4 = *v13;
        v3 = v13[1];
      }
      else
      {
        v3 = 0;
        v4 = 0;
      }
    }
    goto LABEL_13;
  }
  v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      result = (uint64_t *)IPC::Decoder::decode<WebKit::CoreIPCString>(result, (uint64_t)&v15);
      v8 = v16;
      if (v16)
      {
        *(_QWORD *)a2 = v15;
        v8 = 1;
        *(_BYTE *)(a2 + 8) = 1;
      }
      else
      {
        *(_BYTE *)a2 = 0;
      }
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 0;
      v8 = 1;
    }
    *(_BYTE *)(a2 + 16) = v8;
    return result;
  }
LABEL_13:
  *result = 0;
  result[1] = 0;
  result = (uint64_t *)result[3];
  if (result && v3)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v4);
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  return result;
}

char *IPC::ArgumentCoder<std::optional<WebKit::CoreIPCDictionary>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCDictionary>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  uint64_t *v6;
  uint64_t v7;

  v4 = *(unsigned __int8 *)(a2 + 16);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 16))
    {
      return IPC::VectorArgumentCoder<false,WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2);
    }
    else
    {
      v6 = (uint64_t *)std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)IPC::ArgumentCoder<std::optional<WebKit::CoreIPCPresentationIntent>,void>::decode<IPC::Decoder>(v6, v7);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::optional<WebKit::CoreIPCPresentationIntent>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  unint64_t v4;
  WTF::StringImpl *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  char v27;

  v2 = a1;
  v4 = a1[1];
  v5 = (WTF::StringImpl *)*a1;
  v6 = a1[2] - *a1;
  if (v4 <= v6)
  {
    v14 = 0;
    v15 = 0;
    *a1 = 0;
    a1[1] = 0;
    v16 = a1[3];
    if (v16)
    {
      v19 = v2;
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
        v2 = v19;
        v15 = *v19;
        v14 = v19[1];
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
    }
    goto LABEL_12;
  }
  v7 = (unsigned __int8 *)v5 + v6;
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v14 = v4;
    v15 = 0;
LABEL_12:
    v4 = 0;
    v5 = 0;
    *v2 = 0;
    v2[1] = 0;
    v17 = v2[3];
    if (v17)
    {
      v18 = v2;
      if (v14)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v17 + 16))(v17, v15, v14);
        v2 = v18;
        v5 = (WTF::StringImpl *)*v18;
        v4 = v18[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
    goto LABEL_13;
  }
  v8 = *v7;
  if (v8 < 2)
  {
    if (v8)
    {
      IPC::Decoder::decode<WebKit::CoreIPCPresentationIntent>((uint64_t)&v20, a1);
      v9 = v27;
      if (v27)
      {
        v10 = v21;
        *(_OWORD *)a2 = v20;
        *(_OWORD *)(a2 + 16) = v10;
        *(_QWORD *)&v21 = 0;
        *(_QWORD *)(a2 + 32) = v22;
        v11 = v23;
        v22 = 0;
        v23 = 0;
        *(_QWORD *)(a2 + 40) = v11;
        *(_OWORD *)(a2 + 48) = v24;
        v12 = v25;
        v25 = 0;
        *(_QWORD *)(a2 + 64) = v12;
        *(_OWORD *)(a2 + 72) = v26;
        v9 = 1;
        *(_BYTE *)(a2 + 88) = 1;
      }
      else
      {
        *(_BYTE *)a2 = 0;
      }
    }
    else
    {
      LOBYTE(v20) = 0;
      v27 = 0;
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 88) = 0;
      v9 = 1;
    }
    *(_BYTE *)(a2 + 96) = v9;
    return std::__optional_destruct_base<WebKit::CoreIPCPresentationIntent,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v20, v5);
  }
LABEL_13:
  *v2 = 0;
  v2[1] = 0;
  result = v2[3];
  if (result && v4)
    result = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)result + 16))(result, v5);
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 96) = 0;
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::CoreIPCPresentationIntent>(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  char v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unint64_t v40;
  char v41;
  char v42;
  unint64_t v43;
  char v44;
  char v45;
  WTF::StringImpl *result;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char v68;
  char v69;
  char v70;
  int v71;
  WTF::StringImpl *v72;
  char v73;
  WTF::StringImpl *v74;
  char v75;
  __int128 v76;
  WTF::StringImpl *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  char v84;

  v67 = IPC::Decoder::decode<long long>(a2);
  v70 = v5;
  v66 = IPC::Decoder::decode<long long>(a2);
  v69 = v6;
  v7 = a2[1];
  v8 = *a2;
  v9 = a2[2] - *a2;
  if (v7 <= v9)
  {
    v54 = 0;
    v55 = 0;
    *a2 = 0;
    a2[1] = 0;
    v56 = a2[3];
    if (v56)
    {
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v56 + 16))(v56);
        v55 = *a2;
        v54 = a2[1];
      }
      else
      {
        v54 = 0;
        v55 = 0;
      }
    }
    goto LABEL_59;
  }
  v10 = (unsigned __int8 *)(v8 + v9);
  a2[2] = (uint64_t)(v10 + 1);
  if (!v8)
  {
    v54 = v7;
    v55 = 0;
LABEL_59:
    v7 = 0;
    v8 = 0;
    *a2 = 0;
    a2[1] = 0;
    v57 = a2[3];
    if (!v57)
      goto LABEL_60;
    if (v54)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v57 + 16))(v57, v55, v54);
      v8 = *a2;
      v7 = a2[1];
      goto LABEL_60;
    }
    goto LABEL_86;
  }
  v11 = *v10;
  if (v11 >= 2)
    goto LABEL_60;
  if (v11)
  {
    IPC::Decoder::decode<WebKit::CoreIPCPresentationIntent>(&v76, a2);
    if (!v84)
    {
      LOBYTE(v74) = 0;
      v75 = 0;
      std::__optional_destruct_base<WebKit::CoreIPCPresentationIntent,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v76, v12);
      goto LABEL_9;
    }
    v13 = WTF::fastMalloc((WTF *)0x58);
    *(_OWORD *)v13 = v76;
    v14 = v77;
    v77 = 0;
    *(_QWORD *)(v13 + 16) = v14;
    v15 = v78;
    *(_QWORD *)(v13 + 32) = 0;
    *(_QWORD *)(v13 + 40) = 0;
    *(_QWORD *)(v13 + 24) = v15;
    v16 = v79;
    v79 = 0;
    *(_QWORD *)(v13 + 32) = v16;
    LODWORD(v16) = v80;
    LODWORD(v80) = 0;
    *(_DWORD *)(v13 + 40) = v16;
    LODWORD(v16) = HIDWORD(v80);
    HIDWORD(v80) = 0;
    *(_DWORD *)(v13 + 44) = v16;
    *(_OWORD *)(v13 + 48) = v81;
    v17 = v82;
    v82 = 0;
    *(_QWORD *)(v13 + 64) = v17;
    *(_OWORD *)(v13 + 72) = v83;
    v72 = 0;
    v74 = (WTF::StringImpl *)v13;
    v75 = 1;
    std::unique_ptr<WebKit::CoreIPCPresentationIntent>::reset[abi:sn180100](&v72, 0);
    std::__optional_destruct_base<WebKit::CoreIPCPresentationIntent,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v76, v18);
  }
  else
  {
    v74 = 0;
    v75 = 1;
  }
  while (1)
  {
    v65 = IPC::Decoder::decode<long long>(a2);
    v68 = v22;
    v23 = a2[1];
    v24 = *a2;
    v25 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
    if (v23 < v25 || v23 - v25 <= 7)
    {
      v59 = 0;
      v60 = 0;
      *a2 = 0;
      a2[1] = 0;
      v61 = a2[3];
      if (v61)
      {
        if (v23)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v61 + 16))(v61);
          v60 = *a2;
          v59 = a2[1];
        }
        else
        {
          v59 = 0;
          v60 = 0;
        }
      }
LABEL_63:
      *a2 = 0;
      a2[1] = 0;
      v62 = a2[3];
      if (v62 && v59)
        goto LABEL_73;
      goto LABEL_15;
    }
    v26 = (unint64_t *)(v24 + v25);
    v27 = v24 + v25 + 8;
    a2[2] = v27;
    if (!v24)
    {
      v59 = v23;
      v60 = 0;
      goto LABEL_63;
    }
    v2 = *v26;
    if (!*v26)
    {
      v31 = 0;
LABEL_24:
      v71 = 0;
      goto LABEL_25;
    }
    if (v2 >> 61)
      goto LABEL_15;
    v32 = ((v27 + 7) & 0xFFFFFFFFFFFFFFF8) - v24;
    if (v23 >= v32)
    {
      v33 = 8 * v2;
      if (v23 - v32 >= 8 * v2)
      {
        v34 = v24 + v32;
        a2[2] = v24 + v32 + v33;
        if (v2 >> 29)
        {
          __break(0xC471u);
          goto LABEL_85;
        }
        v35 = WTF::fastMalloc((WTF *)(8 * v2));
        v31 = (WTF *)v35;
        v36 = 0;
        do
        {
          *(_QWORD *)(v35 + v36) = *(_QWORD *)(v34 + v36);
          v36 += 8;
        }
        while (v33 != v36);
        goto LABEL_24;
      }
    }
    *a2 = 0;
    a2[1] = 0;
    v62 = a2[3];
    if (v62 && v23)
    {
      v60 = v24;
      v59 = v23;
LABEL_73:
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v62 + 16))(v62, v60, v59);
    }
LABEL_15:
    v28 = *a2;
    v29 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v30 = a2[3];
    if (!v30 || !v29)
      goto LABEL_16;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, v28);
    v31 = 0;
    v51 = *a2;
    v52 = a2[1];
    v53 = a2[3];
    v71 = 1;
    *a2 = 0;
    a2[1] = 0;
    if (v53 && v52)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v53 + 16))(v53, v51);
LABEL_16:
      v31 = 0;
      v71 = 1;
    }
LABEL_25:
    v37 = IPC::Decoder::decode<long long>(a2);
    v39 = v38;
    v40 = IPC::Decoder::decode<long long>(a2);
    v42 = v41;
    IPC::Decoder::decode<WTF::String>(a2, &v72);
    v43 = IPC::Decoder::decode<long long>(a2);
    v45 = v44;
    result = (WTF::StringImpl *)IPC::Decoder::decode<long long>(a2);
    if (!*a2)
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 88) = 0;
      goto LABEL_39;
    }
    if (v70 && v69 && v75 && v68 && !v71 && v39 && v42 && v73 && v45 && (_BYTE)v47)
      break;
LABEL_85:
    __break(1u);
LABEL_86:
    v7 = 0;
    v8 = 0;
LABEL_60:
    *a2 = 0;
    a2[1] = 0;
    v58 = a2[3];
    if (v58 && v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v58 + 16))(v58, v8);
    LOBYTE(v74) = 0;
    v75 = 0;
LABEL_9:
    v19 = *a2;
    v20 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v21 = a2[3];
    if (v21 && v20)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v19);
  }
  *(_QWORD *)&v76 = v67;
  *((_QWORD *)&v76 + 1) = v66;
  v48 = v74;
  v74 = 0;
  v78 = v65;
  *(_QWORD *)&v81 = v37;
  *((_QWORD *)&v81 + 1) = v40;
  v49 = v72;
  if (v72)
    *(_DWORD *)v72 += 2;
  *(_QWORD *)&v83 = v43;
  *((_QWORD *)&v83 + 1) = result;
  *(_OWORD *)a1 = v76;
  *(_QWORD *)(a1 + 16) = v48;
  *(_QWORD *)(a1 + 24) = v65;
  v77 = 0;
  v79 = 0;
  v80 = 0;
  *(_QWORD *)(a1 + 32) = v31;
  *(_DWORD *)(a1 + 40) = v2;
  *(_DWORD *)(a1 + 44) = v2;
  *(_OWORD *)(a1 + 48) = v81;
  *(_QWORD *)(a1 + 64) = v49;
  *(_OWORD *)(a1 + 72) = v83;
  *(_BYTE *)(a1 + 88) = 1;
  v82 = 0;
  result = (WTF::StringImpl *)std::unique_ptr<WebKit::CoreIPCPresentationIntent>::reset[abi:sn180100](&v77, 0);
  v31 = 0;
LABEL_39:
  if (v73)
  {
    result = v72;
    v72 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v47);
      else
        *(_DWORD *)result -= 2;
    }
  }
  v50 = v71;
  if (!v31)
    v50 = 1;
  if ((v50 & 1) == 0)
    result = (WTF::StringImpl *)WTF::fastFree(v31, v47);
  if (v75)
    result = (WTF::StringImpl *)std::unique_ptr<WebKit::CoreIPCPresentationIntent>::reset[abi:sn180100](&v74, 0);
  if (!*(_BYTE *)(a1 + 88))
  {
    v63 = *a2;
    v64 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
    {
      if (v64)
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v63);
    }
  }
  return result;
}

void sub_1978A47C8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, WTF::StringImpl *a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  std::__optional_destruct_base<WebKit::CoreIPCPresentationIntent,false>::~__optional_destruct_base[abi:sn180100](v30, a2);
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<std::optional<WebKit::CoreIPCColor>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCColor>>(IPC::Encoder *a1, unsigned __int8 *a2)
{
  int v4;
  char *result;
  id v6;
  uint64_t v7;

  v4 = a2[8];
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (a2[8])
    {
      WebCore::Color::data((WebCore::Color *)a2);
      return IPC::ArgumentCoder<std::optional<WebCore::ColorDataForIPC>,void>::encode<IPC::Encoder,std::optional<WebCore::ColorDataForIPC>>(a1, (uint64_t)&v7);
    }
    else
    {
      v6 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)IPC::VectorArgumentCoder<false,WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v6);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

void IPC::VectorArgumentCoder<false,WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v4 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = *(uint64_t **)a2;
    v7 = 8 * v5;
    do
    {
      v8 = *v6++;
      v9 = *(_DWORD *)(v8 + 40);
      *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
      IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> const&>(a1, v8, v9);
      v7 -= 8;
    }
    while (v7);
  }
}

uint64_t IPC::VectorArgumentCoder<false,WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  WTF *v15;
  uint64_t v16;
  void *v17;
  WTF *v18;
  uint64_t v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  int v23;
  WTF *v24;
  uint64_t v25;
  void *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  WTF *v32;
  WTF *v33;
  uint64_t v34;
  void *v35;
  char v36;
  WTF *v37;
  uint64_t v38;

  v5 = a1[1];
  v6 = *a1;
  v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    v27 = 0;
    v28 = 0;
    *a1 = 0;
    a1[1] = 0;
    v29 = a1[3];
    if (v29)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v29 + 16))(v29, v6, v5);
        v28 = *a1;
        v27 = a1[1];
      }
      else
      {
        v27 = 0;
        v28 = 0;
      }
    }
    goto LABEL_33;
  }
  v9 = (unint64_t *)(v6 + v7);
  a1[2] = (uint64_t)(v9 + 1);
  if (!v6)
  {
    v27 = v5;
    v28 = 0;
LABEL_33:
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
    {
      if (v27)
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v28);
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return result;
  }
  v10 = *v9;
  v37 = 0;
  v38 = 0;
  if (v10 < 0x20000)
  {
    if (!v10)
    {
      v18 = 0;
      v19 = 0;
LABEL_20:
      v37 = 0;
      v38 = 0;
      *(_QWORD *)a3 = v18;
      *(_QWORD *)(a3 + 8) = v19;
      goto LABEL_21;
    }
    LODWORD(v38) = v10;
    v37 = (WTF *)WTF::fastMalloc((WTF *)(8 * v10));
    while (1)
    {
      IPC::Decoder::decode<WebKit::CoreIPCNSCFObject>(&v35, a1);
      if (!v36)
        goto LABEL_30;
      v11 = HIDWORD(v38);
      if (HIDWORD(v38) != (_DWORD)v38)
        break;
      v12 = (uint64_t *)WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v37, HIDWORD(v38) + 1, (unint64_t)&v35);
      v13 = HIDWORD(v38);
      v14 = HIDWORD(v38) + 1;
      v15 = v37;
      v16 = *v12;
      *v12 = 0;
      *((_QWORD *)v15 + v13) = v16;
      HIDWORD(v38) = v14;
      if (v36)
        goto LABEL_15;
LABEL_17:
      if (!--v10)
      {
        v18 = v37;
        v19 = v38;
        goto LABEL_20;
      }
    }
    v17 = v35;
    v35 = 0;
    *((_QWORD *)v37 + HIDWORD(v38)) = v17;
    HIDWORD(v38) = v11 + 1;
LABEL_15:
    a2 = v35;
    v35 = 0;
    if (a2)
      std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::operator()[abi:sn180100]((uint64_t)&v35, (uint64_t)a2);
    goto LABEL_17;
  }
  do
  {
    result = IPC::Decoder::decode<WebKit::CoreIPCNSCFObject>(&v35, a1);
    if (!v36)
    {
LABEL_30:
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 16) = 0;
      return WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, a2);
    }
    v20 = HIDWORD(v38);
    if (HIDWORD(v38) == (_DWORD)v38)
    {
      result = WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v37, HIDWORD(v38) + 1, (unint64_t)&v35);
      v22 = HIDWORD(v38);
      v23 = HIDWORD(v38) + 1;
      v24 = v37;
      v25 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      *((_QWORD *)v24 + v22) = v25;
      HIDWORD(v38) = v23;
      if (!v36)
        goto LABEL_28;
    }
    else
    {
      v26 = v35;
      v35 = 0;
      *((_QWORD *)v37 + HIDWORD(v38)) = v26;
      HIDWORD(v38) = v20 + 1;
    }
    a2 = v35;
    v35 = 0;
    if (a2)
      result = std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::operator()[abi:sn180100]((uint64_t)&v35, (uint64_t)a2);
LABEL_28:
    --v10;
  }
  while (v10);
  v30 = HIDWORD(v38);
  v31 = v37;
  if (v38 <= HIDWORD(v38))
    goto LABEL_45;
  v32 = v37;
  if (!HIDWORD(v38))
    goto LABEL_40;
  if (HIDWORD(v38) >> 29)
  {
    __break(0xC471u);
  }
  else
  {
    v33 = (WTF *)WTF::fastMalloc((WTF *)(8 * HIDWORD(v38)));
    LODWORD(v38) = v30;
    v37 = v33;
    v32 = v31;
    if (v33 != v31)
    {
      WTF::VectorMover<false,WebKit::CoreIPCNSCFObject>::move((uint64_t)v31, (uint64_t *)v31 + v30, (uint64_t *)v33);
      v32 = v37;
    }
LABEL_40:
    if (v31)
    {
      if (v32 == v31)
      {
        v37 = 0;
        LODWORD(v38) = 0;
      }
      WTF::fastFree(v31, a2);
      v31 = v37;
    }
    else
    {
      v31 = v32;
    }
LABEL_45:
    *(_QWORD *)a3 = v31;
    v34 = v38;
    v37 = 0;
    v38 = 0;
    *(_QWORD *)(a3 + 8) = v34;
LABEL_21:
    *(_BYTE *)(a3 + 16) = 1;
    return WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, a2);
  }
  return result;
}

void sub_1978A4C50(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, char a10, int a11, char a12)
{
  if (a10)
  {
    a2 = a9;
    a9 = 0;
    if (a2)
      std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::operator()[abi:sn180100]((uint64_t)&a9, (uint64_t)a2);
  }
  WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a12, a2);
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<std::optional<WebKit::CoreIPCCFURL>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCCFURL>>(IPC::Encoder *a1, unsigned __int8 *a2)
{
  int v3;
  int v4;
  char *result;
  id v6;

  v3 = (int)a1;
  v4 = a2[8];
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (a2[8])
    {
      return (char *)IPC::ArgumentCoder<WebKit::CoreIPCCFURL,void>::encode(v3, (WebKit::CoreIPCCFURL *)a2);
    }
    else
    {
      v6 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)IPC::ArgumentCoder<std::optional<WebKit::CoreIPCCFURL>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::CoreIPCCFURL>>(v6);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::optional<WebKit::CoreIPCCFURL>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::CoreIPCCFURL>>(_QWORD *result, WebKit::CoreIPCCFURL *a2)
{
  unint64_t v2;
  unint64_t v3;
  _BYTE *v4;
  _QWORD *v5;

  v3 = result[1];
  v2 = result[2];
  if (*((_BYTE *)a2 + 8))
  {
    if (v2 >= v3)
    {
      result[1] = 0;
      return (_QWORD *)IPC::ArgumentCoder<WebKit::CoreIPCCFURL,void>::encode((int)result, a2);
    }
    *(_BYTE *)(*result + v2) = 1;
    result[2] = v2 + 1;
    if (*((_BYTE *)a2 + 8))
      return (_QWORD *)IPC::ArgumentCoder<WebKit::CoreIPCCFURL,void>::encode((int)result, a2);
    v4 = std::__throw_bad_optional_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::optional<WebKit::CoreIPCCFURL>,void>::decode<IPC::Decoder>(v4, v5);
  }
  else if (v2 >= v3)
  {
    result[1] = 0;
  }
  else
  {
    *(_BYTE *)(*result + v2) = 0;
    result[2] = v2 + 1;
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::optional<WebKit::CoreIPCCFURL>,void>::decode<IPC::Decoder>(_BYTE *a1, _QWORD *a2)
{
  _QWORD *result;
  char v5;
  uint64_t v6;
  char v7;

  result = (_QWORD *)IPC::Decoder::decode<BOOL>(a2);
  if ((unsigned __int16)result <= 0xFFu)
  {
    *a1 = 0;
    a1[16] = 0;
  }
  else
  {
    if ((_BYTE)result)
    {
      result = IPC::Decoder::decode<WebKit::CoreIPCCFURL>(&v6, a2);
      v5 = v7;
      if (v7)
      {
        *(_QWORD *)a1 = v6;
        v5 = 1;
        a1[8] = 1;
      }
      else
      {
        *a1 = 0;
      }
    }
    else
    {
      *a1 = 0;
      a1[8] = 0;
      v5 = 1;
    }
    a1[16] = v5;
  }
  return result;
}

char *IPC::ArgumentCoder<std::optional<WebKit::CoreIPCDateComponents>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCDateComponents> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  id v6;

  v4 = *(unsigned __int8 *)(a2 + 32);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 32))
    {
      return IPC::ArgumentCoder<WebKit::CoreIPCDateComponents,void>::encode(a1, a2);
    }
    else
    {
      v6 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)IPC::VectorArgumentCoder<false,WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v6);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

void IPC::VectorArgumentCoder<false,WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  _BYTE *v10;
  uint64_t *v11;

  v4 = *((unsigned int *)a2 + 3);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v5)
  {
    v6 = *a2;
    v7 = 96 * v5;
    while (2)
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)v6);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(v6 + 8));
      v8 = *(unsigned __int8 *)(v6 + 88);
      *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
      v9 = (uint64_t *)(v6 + 16);
      switch(v8)
      {
        case 0:
          if (*(_DWORD *)(v6 + 88))
            goto LABEL_14;
          IPC::ArgumentCoder<WebKit::CoreIPCDateComponents,void>::encode(a1, (uint64_t)v9);
          goto LABEL_12;
        case 1:
          if (*(_DWORD *)(v6 + 88) != 1)
            goto LABEL_14;
          IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v9);
          v9 = (uint64_t *)(v6 + 24);
LABEL_11:
          IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v9);
          goto LABEL_12;
        case 2:
          if (*(_DWORD *)(v6 + 88) != 2)
            goto LABEL_14;
          IPC::ArgumentCoder<WebKit::CoreIPCCNPostalAddress,void>::encode((uint64_t)a1, v9);
          goto LABEL_12;
        case 3:
          if (*(_DWORD *)(v6 + 88) == 3)
            goto LABEL_11;
LABEL_14:
          v10 = (_BYTE *)std::__throw_bad_variant_access[abi:sn180100]();
          IPC::Decoder::decode<WebKit::CoreIPCContactLabeledValue>(v10, v11);
          return;
        default:
LABEL_12:
          v6 += 96;
          v7 -= 96;
          if (!v7)
            return;
          continue;
      }
    }
  }
}

void IPC::Decoder::decode<WebKit::CoreIPCContactLabeledValue>(_BYTE *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  __int128 v13;
  int v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  __int128 v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  int v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  int v48;
  unsigned __int8 v49;
  WTF::StringImpl *v50;
  unsigned __int8 v51;
  WTF::StringImpl *v52;
  unsigned __int8 v53;
  char v54;

  IPC::Decoder::decode<WTF::String>(a2, &v52);
  IPC::Decoder::decode<WTF::String>(a2, &v50);
  v4 = a2[1];
  v5 = *a2;
  v6 = a2[2] - *a2;
  if (v4 <= v6)
    goto LABEL_57;
  v7 = (_BYTE *)(v5 + v6);
  a2[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v29 = v4;
    v30 = 0;
    goto LABEL_58;
  }
  v8 = *v7;
  if (v8 < 4)
  {
    if (!*v7)
    {
      IPC::Decoder::decode<WebKit::CoreIPCDateComponents>((uint64_t)v36, a2);
      if ((_BYTE)v38)
      {
        v16 = *(_OWORD *)v36;
        v36[0] = 0;
        v36[1] = 0;
        v43 = v16;
        *(_QWORD *)&v16 = *((_QWORD *)&v37 + 1);
        *(_QWORD *)&v44 = v37;
        v37 = 0uLL;
        *((_QWORD *)&v44 + 1) = v16;
        v14 = 1;
        v48 = 0;
      }
      else
      {
        v14 = 0;
        LOBYTE(v43) = 0;
      }
      v49 = v14;
      std::__optional_destruct_base<WebKit::CoreIPCDateComponents,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v36, v15);
LABEL_26:
      if (!v14)
        goto LABEL_5;
      goto LABEL_27;
    }
    if (v8 == 1)
    {
      IPC::Decoder::decode<WebKit::CoreIPCCNPhoneNumber>((uint64_t)v36, a2);
      if ((_BYTE)v37)
      {
        v13 = *(_OWORD *)v36;
        v36[0] = 0;
        v36[1] = 0;
        v43 = v13;
        v14 = 1;
        v48 = 1;
      }
      else
      {
        v14 = 0;
        LOBYTE(v43) = 0;
      }
      v49 = v14;
      std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v36, v12);
      goto LABEL_26;
    }
    if (v8 == 2)
    {
      IPC::Decoder::decode<WebKit::CoreIPCCNPostalAddress>((uint64_t)v36, a2);
      if (v41)
      {
        v17 = *(_OWORD *)v36;
        v18 = v37;
        *(_OWORD *)v36 = 0u;
        v37 = 0u;
        v43 = v17;
        v44 = v18;
        v19 = v38;
        v20 = v39;
        v38 = 0u;
        v39 = 0u;
        v45 = v19;
        v46 = v20;
        v21 = v40;
        v40 = 0;
        v47 = v21;
        v48 = 2;
        WebKit::CoreIPCCNPostalAddress::~CoreIPCCNPostalAddress((WebKit::CoreIPCCNPostalAddress *)v36, v9);
LABEL_19:
        v14 = 1;
LABEL_25:
        v49 = v14;
        goto LABEL_26;
      }
    }
    else
    {
      IPC::Decoder::decode<WebKit::CoreIPCString>(a2, (uint64_t)v36);
      if (LOBYTE(v36[1]))
      {
        *(WTF::StringImpl **)&v43 = v36[0];
        v48 = 3;
        goto LABEL_19;
      }
    }
    v14 = 0;
    LOBYTE(v43) = 0;
    goto LABEL_25;
  }
  while (1)
  {
    LOBYTE(v43) = 0;
    v49 = 0;
LABEL_5:
    v9 = (WTF::StringImpl *)*a2;
    v10 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v11 = a2[3];
    if (v11 && v10)
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v11 + 16))(v11, v9);
LABEL_27:
    if (!*a2)
    {
      *a1 = 0;
      a1[96] = 0;
      goto LABEL_41;
    }
    v5 = v53;
    if (v53)
    {
      v22 = v52;
      v52 = 0;
      v36[0] = v22;
      v5 = v51;
      if (v51)
      {
        v23 = v50;
        v50 = 0;
        v36[1] = v23;
        v5 = v49;
        if (v49)
          break;
      }
    }
    __break(1u);
LABEL_57:
    v29 = 0;
    v30 = 0;
    *a2 = 0;
    a2[1] = 0;
    v31 = a2[3];
    if (v31)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v31 + 16))(v31, v5, v4);
        v30 = *a2;
        v29 = a2[1];
      }
      else
      {
        v29 = 0;
        v30 = 0;
      }
    }
LABEL_58:
    *a2 = 0;
    a2[1] = 0;
    v32 = a2[3];
    if (v32 && v29)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 16))(v32, v30);
  }
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::CoreIPCDateComponents,WebKit::CoreIPCCNPhoneNumber,WebKit::CoreIPCCNPostalAddress,WebKit::CoreIPCString>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v37, (uint64_t)&v43);
  v24 = *(_OWORD *)v36;
  v36[0] = 0;
  v36[1] = 0;
  *(_OWORD *)a1 = v24;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::CoreIPCDateComponents,WebKit::CoreIPCCNPhoneNumber,WebKit::CoreIPCCNPostalAddress,WebKit::CoreIPCString>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(a1 + 16), (uint64_t)&v37);
  a1[96] = 1;
  if (v42 != -1)
    ((void (*)(char *, __int128 *))off_1E351F168[v42])(&v54, &v37);
  v42 = -1;
  v25 = v36[1];
  v36[1] = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v9);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = v36[0];
  v36[0] = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v9);
    else
      *(_DWORD *)v26 -= 2;
  }
LABEL_41:
  if (v49 && v48 != -1)
    ((void (*)(WTF::StringImpl **, __int128 *))off_1E351F168[v48])(v36, &v43);
  if (v51)
  {
    v27 = v50;
    v50 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v9);
      else
        *(_DWORD *)v27 -= 2;
    }
  }
  if (v53)
  {
    v28 = v52;
    v52 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v9);
      else
        *(_DWORD *)v28 -= 2;
    }
  }
  if (!a1[96])
  {
    v33 = *a2;
    v34 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v35 = a2[3];
    if (v35)
    {
      if (v34)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 16))(v35, v33);
    }
  }
}

void sub_1978A5370(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,int a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,int a32,char a33)
{
  uint64_t v33;

  std::__optional_destruct_base<WebKit::CoreIPCContactLabeledValue,false>::~__optional_destruct_base[abi:sn180100](v33, a2);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<WebKit::CoreIPCContactLabeledValue,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  char v7;

  if (*(_BYTE *)(a1 + 96))
  {
    v3 = *(unsigned int *)(a1 + 88);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_1E351F168[v3])(&v7, a1 + 16);
    *(_DWORD *)(a1 + 88) = -1;
    v4 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

char *IPC::VectorArgumentCoder<false,WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  char *result;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;

  v4 = *(unsigned int *)(a2 + 12);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a2;
    v8 = *(_QWORD *)a2 + 16 * v6;
    do
    {
      v9 = *v7;
      v10 = *(_DWORD *)(*v7 + 40);
      *IPC::Encoder::grow(a1, 1uLL, 1) = v10;
      IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> const&>(a1, v9, v10);
      v11 = v7[1];
      v12 = *(_DWORD *)(v11 + 40);
      *IPC::Encoder::grow(a1, 1uLL, 1) = v12;
      result = (char *)IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> const&>(a1, v11, v12);
      v7 += 2;
    }
    while (v7 != (_QWORD *)v8);
  }
  return result;
}

uint64_t IPC::VectorArgumentCoder<false,WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t *v10;
  unint64_t v11;
  __n128 v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  WTF *v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  WTF *v35;
  uint64_t v36;

  v6 = a1[1];
  v7 = *a1;
  v8 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v6 < v8 || v6 - v8 <= 7)
  {
    v24 = 0;
    v25 = 0;
    *a1 = 0;
    a1[1] = 0;
    v26 = a1[3];
    if (v26)
    {
      if (v6)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v26 + 16))(v26, v7, v6);
        v25 = *a1;
        v24 = a1[1];
      }
      else
      {
        v24 = 0;
        v25 = 0;
      }
    }
    goto LABEL_28;
  }
  v10 = (unint64_t *)(v7 + v8);
  a1[2] = (uint64_t)(v10 + 1);
  if (!v7)
  {
    v24 = v6;
    v25 = 0;
LABEL_28:
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
    {
      if (v24)
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v25);
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return result;
  }
  v11 = *v10;
  v35 = 0;
  v36 = 0;
  if (v11 >= 0x10000)
  {
    do
    {
      IPC::Decoder::decode<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>>((uint64_t)&v32, a1, a4);
      if (!v34)
        goto LABEL_24;
      if (HIDWORD(v36) == (_DWORD)v36)
      {
        WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>>((uint64_t)&v35, (unint64_t)&v32);
      }
      else
      {
        v19 = HIDWORD(v36) + 1;
        v20 = (_QWORD *)((char *)v35 + 16 * HIDWORD(v36));
        v21 = v32;
        v32 = 0;
        *v20 = v21;
        v22 = v33;
        v33 = 0;
        v20[1] = v22;
        HIDWORD(v36) = v19;
      }
      result = std::__optional_destruct_base<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v32);
      --v11;
    }
    while (v11);
    v27 = HIDWORD(v36);
    v28 = v35;
    if (v36 > HIDWORD(v36))
    {
      v29 = v35;
      if (HIDWORD(v36))
      {
        if (HIDWORD(v36) >> 28)
        {
          __break(0xC471u);
          return result;
        }
        v30 = (WTF *)WTF::fastMalloc((WTF *)(16 * HIDWORD(v36)));
        LODWORD(v36) = v27;
        v35 = v30;
        v29 = v28;
        if (v30 != v28)
        {
          WTF::VectorMover<false,WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>>::move((uint64_t)v28, (_QWORD *)v28 + 2 * v27, v30);
          v29 = v35;
        }
      }
      if (v28)
      {
        if (v29 == v28)
        {
          v35 = 0;
          LODWORD(v36) = 0;
        }
        WTF::fastFree(v28, a2);
        v28 = v35;
      }
      else
      {
        v28 = v29;
      }
    }
    *(_QWORD *)a3 = v28;
    v31 = v36;
    v35 = 0;
    v36 = 0;
    *(_QWORD *)(a3 + 8) = v31;
    goto LABEL_18;
  }
  if (v11)
  {
    LODWORD(v36) = v11;
    v35 = (WTF *)WTF::fastMalloc((WTF *)(16 * v11));
    while (1)
    {
      IPC::Decoder::decode<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>>((uint64_t)&v32, a1, v12);
      if (!v34)
        break;
      if (HIDWORD(v36) == (_DWORD)v36)
      {
        WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>>((uint64_t)&v35, (unint64_t)&v32);
      }
      else
      {
        v13 = HIDWORD(v36) + 1;
        v14 = (_QWORD *)((char *)v35 + 16 * HIDWORD(v36));
        v15 = v32;
        v32 = 0;
        *v14 = v15;
        v16 = v33;
        v33 = 0;
        v14[1] = v16;
        HIDWORD(v36) = v13;
      }
      std::__optional_destruct_base<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v32);
      if (!--v11)
      {
        v17 = v35;
        v18 = v36;
        goto LABEL_17;
      }
    }
LABEL_24:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    std::__optional_destruct_base<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v32);
  }
  else
  {
    v17 = 0;
    v18 = 0;
LABEL_17:
    v35 = 0;
    v36 = 0;
    *(_QWORD *)a3 = v17;
    *(_QWORD *)(a3 + 8) = v18;
LABEL_18:
    *(_BYTE *)(a3 + 16) = 1;
  }
  return WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, a2);
}

void sub_1978A58EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v3;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::__optional_destruct_base<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va);
  WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v3);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>>(uint64_t a1, uint64_t *a2, __n128 a3)
{
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;

  IPC::Decoder::decode<WebKit::CoreIPCNSCFObject>((uint64_t)&v14, a2, a3);
  if (v15)
  {
    IPC::Decoder::decode<WebKit::CoreIPCNSCFObject>((uint64_t)&v12, a2, v5);
    if (v13)
    {
      if (v15)
      {
        v6 = v12;
        *(_QWORD *)a1 = v14;
        *(_QWORD *)(a1 + 8) = v6;
        *(_BYTE *)(a1 + 16) = 1;
      }
      else
      {
        __break(1u);
      }
      return;
    }
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    if (v15)
    {
      v7 = v14;
      v14 = 0;
      if (v7)
        std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::operator()[abi:sn180100]((uint64_t)&v14, v7);
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
  }
  v8 = *a2;
  v9 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v10 = a2[3];
  if (v10)
    v11 = v9 == 0;
  else
    v11 = 1;
  if (!v11)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v8);
}

void sub_1978A59E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(a1 + 16))
  {
    v2 = a1 + 8;
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v3)
      std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::operator()[abi:sn180100](v2, v3);
    v4 = *(_QWORD *)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
      std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::operator()[abi:sn180100](a1, v4);
  }
  return a1;
}

char *IPC::ArgumentCoder<std::unique_ptr<WebKit::CoreIPCError>,void>::encode<IPC::Encoder,std::unique_ptr<WebKit::CoreIPCError> const&>(IPC::Encoder *a1, _QWORD *a2)
{
  uint64_t v4;
  char *result;

  v4 = *a2;
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    return (char *)IPC::ArgumentCoder<WebKit::CoreIPCError,void>::encode(a1, *a2);
  }
  else
  {
    *result = 0;
  }
  return result;
}

void IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::RetainPtr<NSData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WTF::RetainPtr<NSData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *v5;
  IPC::Encoder *v6;
  uint64_t v7;

  v4 = *(unsigned __int8 *)(a2 + 16);
  v5 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *v5 = 1;
    if (*(_BYTE *)(a2 + 16))
    {
      v6 = a1;
      v7 = a2;
    }
    else
    {
      v6 = (IPC::Encoder *)std::__throw_bad_optional_access[abi:sn180100]();
    }
    IPC::VectorArgumentCoder<false,WTF::RetainPtr<NSData>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::RetainPtr<NSData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v6, v7);
  }
  else
  {
    *v5 = 0;
  }
}

void IPC::VectorArgumentCoder<false,WTF::RetainPtr<NSData>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::RetainPtr<NSData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const void **v6;
  uint64_t v7;
  const void *v8;

  v4 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = *(const void ***)a2;
    v7 = 8 * v5;
    do
    {
      v8 = *v6++;
      IPC::encodeObjectDirectly<NSData>(a1, v8);
      v7 -= 8;
    }
    while (v7);
  }
}

void IPC::ArgumentCoder<std::variant<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding>,void>::encode<IPC::Encoder,std::variant<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  size_t v13;
  char *v14;
  void *v15;

  if (a3)
  {
    IPC::ArgumentCoder<std::variant<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding>,void>::encode<IPC::Encoder,std::variant<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding> const&,0ul>(a1, a2, a3);
    return;
  }
  if (*(_DWORD *)(a2 + 32))
  {
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  else
  {
    v5 = *(unsigned __int8 *)(a2 + 24);
    v6 = *(_QWORD *)(a1 + 544);
    v7 = v6 + 1;
    v8 = *(_QWORD *)(a1 + 552);
    if (v8 >= v6 + 1)
    {
      v9 = *(char **)(a1 + 528);
      v10 = *(_QWORD *)(a1 + 544);
LABEL_6:
      bzero(&v9[v10], v6 - v10);
      *(_QWORD *)(a1 + 544) = v7;
      v11 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v6);
      *(_QWORD *)(a1 + 536) = v11 + 1;
      *v11 = v5;
      IPC::ArgumentCoder<std::variant<_NSRange>,void>::encode<IPC::Encoder,std::variant<_NSRange> const&>(a1, (uint64_t *)(a2 + 8), v5);
      return;
    }
    v12 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v13 = v12;
      v12 *= 2;
    }
    while (v13 < v7);
    v14 = (char *)mmap(0, v13, 3, 4098, -1, 0);
    if (v14 != (char *)-1)
    {
      v9 = v14;
      memcpy(v14, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
      v15 = *(void **)(a1 + 528);
      if (v15 != (void *)(a1 + 16))
        munmap(v15, *(_QWORD *)(a1 + 552));
      *(_QWORD *)(a1 + 528) = v9;
      *(_QWORD *)(a1 + 552) = v13;
      v10 = *(_QWORD *)(a1 + 544);
      goto LABEL_6;
    }
  }
  __break(0xC471u);
}

void IPC::ArgumentCoder<std::variant<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding>,void>::encode<IPC::Encoder,std::variant<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding> const&,0ul>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a3 == 1)
  {
    if (*(_DWORD *)(a2 + 32) == 1)
    {
      IPC::encodeObjectDirectly<NSObject  {objcproto14NSSecureCoding}>(a1, *(_QWORD *)(a2 + 8));
    }
    else
    {
      v3 = std::__throw_bad_variant_access[abi:sn180100]();
      IPC::ArgumentCoder<std::variant<_NSRange>,void>::encode<IPC::Encoder,std::variant<_NSRange> const&>(v3);
    }
  }
}

void IPC::ArgumentCoder<std::variant<_NSRange>,void>::encode<IPC::Encoder,std::variant<_NSRange> const&>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  size_t v15;
  unint64_t v16;
  char *v17;
  _QWORD *v18;
  unint64_t v19;
  size_t v20;
  char *v21;
  void *v22;
  unint64_t v23;
  size_t v24;
  char *v25;
  void *v26;

  if (!a3)
  {
    if (*((_DWORD *)a2 + 4))
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_22;
    }
    v5 = *a2;
    v6 = *(_QWORD *)(a1 + 544);
    v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v8 = v7 + 8;
    v9 = *(_QWORD *)(a1 + 552);
    if (v9 < v7 + 8)
    {
      v19 = (2 * v9 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v20 = v19;
        v19 *= 2;
      }
      while (v20 < v8);
      v21 = (char *)mmap(0, v20, 3, 4098, -1, 0);
      if (v21 == (char *)-1)
        goto LABEL_22;
      v10 = v21;
      memcpy(v21, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
      v22 = *(void **)(a1 + 528);
      if (v22 != (void *)(a1 + 16))
        munmap(v22, *(_QWORD *)(a1 + 552));
      *(_QWORD *)(a1 + 528) = v10;
      *(_QWORD *)(a1 + 552) = v20;
      v6 = *(_QWORD *)(a1 + 544);
    }
    else
    {
      v10 = *(char **)(a1 + 528);
    }
    bzero(&v10[v6], v7 - v6);
    *(_QWORD *)(a1 + 544) = v8;
    v11 = (_QWORD *)(*(_QWORD *)(a1 + 528) + v7);
    *(_QWORD *)(a1 + 536) = v11 + 1;
    *v11 = v5;
    v12 = a2[1];
    v13 = *(_QWORD *)(a1 + 544);
    v14 = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
    v15 = v14 + 8;
    v16 = *(_QWORD *)(a1 + 552);
    if (v16 >= v14 + 8)
    {
      v17 = *(char **)(a1 + 528);
LABEL_7:
      bzero(&v17[v13], v14 - v13);
      *(_QWORD *)(a1 + 544) = v15;
      v18 = (_QWORD *)(*(_QWORD *)(a1 + 528) + v14);
      *(_QWORD *)(a1 + 536) = v18 + 1;
      *v18 = v12;
      return;
    }
    v23 = (2 * v16 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v24 = v23;
      v23 *= 2;
    }
    while (v24 < v15);
    v25 = (char *)mmap(0, v24, 3, 4098, -1, 0);
    if (v25 != (char *)-1)
    {
      v17 = v25;
      memcpy(v25, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
      v26 = *(void **)(a1 + 528);
      if (v26 != (void *)(a1 + 16))
        munmap(v26, *(_QWORD *)(a1 + 552));
      *(_QWORD *)(a1 + 528) = v17;
      *(_QWORD *)(a1 + 552) = v24;
      v13 = *(_QWORD *)(a1 + 544);
      goto LABEL_7;
    }
LABEL_22:
    __break(0xC471u);
    JUMPOUT(0x1978A5EE0);
  }
}

void IPC::ArgumentCoder<std::variant<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  char v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BOOL4 v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  char v41;

  v3 = a1[1];
  v4 = *a1;
  v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    v21 = 0;
    v22 = 0;
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (!v7)
      goto LABEL_29;
    goto LABEL_50;
  }
  v6 = (unsigned __int8 *)(v4 + v5);
  a1[2] = (uint64_t)(v6 + 1);
  if (!v4)
    goto LABEL_58;
  v7 = *v6;
  if (v7 >= 2)
  {
LABEL_4:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 40) = 0;
    return;
  }
  if (!*v6)
  {
    if (v3 <= (unint64_t)&v6[-v4 + 1])
    {
      *a1 = 0;
      a1[1] = 0;
      v24 = a1[3];
      if (!v24)
        goto LABEL_10;
      v37 = a1;
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
      a1 = v37;
      v25 = *v37;
      v26 = v37[1];
      v27 = v37[3];
      *v37 = 0;
      v37[1] = 0;
      if (!v27 || !v26)
        goto LABEL_10;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, v25);
LABEL_48:
      a1 = v37;
      goto LABEL_10;
    }
    a1[2] = (uint64_t)(v6 + 2);
    if (v6[1])
    {
LABEL_10:
      v10 = *a1;
      v11 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v12 = a1[3];
      if (v12)
      {
        if (v11)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v10);
      }
      v8 = 0;
      goto LABEL_12;
    }
    v9 = v6 + 2;
    v13 = ((unint64_t)(v6 + 9) & 0xFFFFFFFFFFFFFFF8) - v4;
    v15 = v3 < v13 || v3 - v13 < 8;
    if (v15)
    {
      *a1 = 0;
      a1[1] = 0;
      v38 = a1;
      v28 = a1[3];
      if (v28)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
        v3 = 0;
        v35 = *v38;
        v36 = v38[1];
        v7 = v38[3];
        *v38 = 0;
        v38[1] = 0;
        v4 = 0;
        v17 = 0;
        if (v7)
        {
          a1 = v38;
          v15 = 1;
          if (v36)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v35, v36);
            v15 = 1;
            a1 = v38;
            v17 = 0;
            v4 = *v38;
            v3 = v38[1];
          }
          goto LABEL_21;
        }
      }
      else
      {
        v3 = 0;
        v4 = 0;
        v17 = 0;
      }
      a1 = v38;
      v15 = 1;
    }
    else
    {
      v16 = (uint64_t *)((unint64_t)(v9 + 7) & 0xFFFFFFFFFFFFFFF8);
      v17 = *v16;
      a1[2] = (uint64_t)(v16 + 1);
    }
LABEL_21:
    v18 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v4;
    if (v3 < v18 || v3 - v18 <= 7)
    {
      v29 = 0;
      v30 = 0;
      *a1 = 0;
      a1[1] = 0;
      v37 = a1;
      v31 = a1[3];
      if (v31)
      {
        if (v3)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
          v30 = *v37;
          v29 = v37[1];
        }
        else
        {
          v29 = 0;
          v30 = 0;
        }
      }
    }
    else
    {
      v19 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a1[2] = (uint64_t)(v19 + 1);
      if (v4)
      {
        if (!v15)
        {
          v20 = *v19;
          *(_QWORD *)(a2 + 8) = v17;
          *(_QWORD *)(a2 + 16) = v20;
          *(_DWORD *)(a2 + 24) = 0;
          *(_DWORD *)(a2 + 32) = 0;
          v8 = 1;
          goto LABEL_26;
        }
        __break(1u);
LABEL_50:
        v39 = a1;
        if (v3)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
          a1 = v39;
          v22 = *v39;
          v21 = v39[1];
        }
        else
        {
          v21 = 0;
          v22 = 0;
        }
LABEL_29:
        *a1 = 0;
        a1[1] = 0;
        v23 = a1[3];
        if (v23 && v21)
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v23 + 16))(v23, v22, v21);
        goto LABEL_4;
      }
      v37 = a1;
      v29 = v3;
      v30 = 0;
    }
    a1 = v37;
    *v37 = 0;
    v37[1] = 0;
    v32 = v37[3];
    if (!v32 || !v29)
      goto LABEL_10;
    a1 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v32 + 16))(v37[3], v30, v29);
    if (!*v37)
    {
      a1 = v37;
      v33 = v37[1];
      v34 = v37[3];
      *v37 = 0;
      v37[1] = 0;
      if (!v34 || !v33)
        goto LABEL_10;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v34 + 16))(v34, 0);
      goto LABEL_48;
    }
    __break(1u);
LABEL_58:
    v21 = v3;
    v22 = v4;
    goto LABEL_29;
  }
  IPC::Decoder::decode<WebKit::CoreIPCSecureCoding>(a1, (uint64_t)&v40);
  v8 = v41;
  if (!v41)
  {
LABEL_12:
    *(_BYTE *)a2 = 0;
    goto LABEL_26;
  }
  *(_QWORD *)(a2 + 8) = v40;
  v8 = 1;
  *(_DWORD *)(a2 + 32) = 1;
LABEL_26:
  *(_BYTE *)(a2 + 40) = v8;
}

char *IPC::ArgumentCoder<std::variant<WebCore::PackedColor::RGBA,WebCore::OutOfLineColorDataForIPC>,void>::encode<IPC::Encoder,std::variant<WebCore::PackedColor::RGBA,WebCore::OutOfLineColorDataForIPC> const&,0ul>(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a3 == 1)
  {
    if (*(_DWORD *)(a2 + 20) == 1)
    {
      return IPC::ArgumentCoder<WebCore::OutOfLineColorDataForIPC,void>::encode((IPC::Encoder *)result, a2);
    }
    else
    {
      v3 = std::__throw_bad_variant_access[abi:sn180100]();
      return (char *)IPC::ArgumentCoder<std::variant<WebCore::PackedColor::RGBA,WebCore::OutOfLineColorDataForIPC>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::PackedColor::RGBA,WebCore::OutOfLineColorDataForIPC> const&,0ul>(v3);
    }
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::variant<WebCore::PackedColor::RGBA,WebCore::OutOfLineColorDataForIPC>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::PackedColor::RGBA,WebCore::OutOfLineColorDataForIPC> const&,0ul>(uint64_t *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _DWORD *v22;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  if (a3 == 1)
  {
    if (*(_DWORD *)(a2 + 20) == 1)
    {
      v3 = result[2];
      if (v3 >= result[1])
      {
        result[1] = 0;
      }
      else
      {
        *(_BYTE *)(*result + v3++) = *(_BYTE *)a2;
        result[2] = v3;
      }
      v4 = *result;
      v5 = *result + v3;
      v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v7 = v6 >= v5;
      v8 = v6 - v5;
      if (v7)
      {
        v9 = v8 + v3;
        v10 = v8 + v3 + 4;
        if (v9 > 0xFFFFFFFFFFFFFFFBLL || v10 > result[1])
        {
          result[1] = 0;
        }
        else
        {
          *(_DWORD *)(v4 + v9) = *(_DWORD *)(a2 + 4);
          result[2] = v10;
          v4 = *result;
          v3 = v10;
        }
      }
      v12 = (v4 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v13 = v12 - (v4 + v3);
      if (v12 >= v4 + v3)
      {
        v14 = v12 - v4;
        v15 = v13 + v3 + 4;
        if (v14 > 0xFFFFFFFFFFFFFFFBLL || v15 > result[1])
        {
          result[1] = 0;
        }
        else
        {
          *(_DWORD *)(v4 + v14) = *(_DWORD *)(a2 + 8);
          result[2] = v15;
          v4 = *result;
          v3 = v15;
        }
      }
      v17 = (v4 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v18 = v17 - (v4 + v3);
      if (v17 >= v4 + v3)
      {
        v19 = v17 - v4;
        v20 = v18 + v3 + 4;
        if (v19 > 0xFFFFFFFFFFFFFFFBLL || v20 > result[1])
        {
          result[1] = 0;
        }
        else
        {
          *(_DWORD *)(v4 + v19) = *(_DWORD *)(a2 + 12);
          result[2] = v20;
          v4 = *result;
          v3 = v20;
        }
      }
      v22 = (_DWORD *)((v4 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v22 >= v4 + v3)
      {
        v23 = (char *)v22 - v4;
        if ((unint64_t)v22 - v4 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v23 + 4) > result[1])
        {
          result[1] = 0;
        }
        else
        {
          *v22 = *(_DWORD *)(a2 + 16);
          result[2] = (uint64_t)(v23 + 4);
        }
      }
    }
    else
    {
      v24 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::variant<WebCore::PackedColor::RGBA,WebCore::OutOfLineColorDataForIPC>,void>::decode<IPC::Decoder>(v24, v25, v26);
    }
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::variant<WebCore::PackedColor::RGBA,WebCore::OutOfLineColorDataForIPC>,void>::decode<IPC::Decoder>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  if (a2)
    return (_QWORD *)IPC::ArgumentCoder<std::variant<WebCore::PackedColor::RGBA,WebCore::OutOfLineColorDataForIPC>,void>::decode<IPC::Decoder,0ul>((uint64_t)result, a2, a3);
  v3 = result[1];
  v4 = *result;
  v5 = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *result;
  if (v3 >= v5 && v3 - v5 > 3)
  {
    v7 = (_DWORD *)(v4 + v5);
    result[2] = v7 + 1;
    if (!v4)
      goto LABEL_21;
    *(_DWORD *)a3 = *v7;
    *(_DWORD *)(a3 + 20) = 0;
    *(_BYTE *)(a3 + 24) = 1;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    *result = 0;
    result[1] = 0;
    v10 = result[3];
    if (v10)
    {
      v14 = result;
      v16 = a3;
      if (v3)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v10 + 16))(v10, v4, v3);
        result = v14;
        a3 = v16;
        v9 = *v14;
        v8 = v14[1];
      }
      else
      {
        v8 = 0;
        v9 = 0;
      }
    }
    while (1)
    {
      *result = 0;
      result[1] = 0;
      v11 = result[3];
      if (!v11 || !v8)
        break;
      v15 = a3;
      v12 = result;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v9);
      v4 = *v12;
      if (!*v12)
      {
        v13 = v12[1];
        result = (_QWORD *)v12[3];
        *v12 = 0;
        v12[1] = 0;
        a3 = v15;
        if (result)
        {
          if (v13)
          {
            result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*result + 16))(result, 0);
            a3 = v15;
          }
        }
        break;
      }
      __break(1u);
LABEL_21:
      v8 = v3;
      v9 = v4;
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::variant<WebCore::PackedColor::RGBA,WebCore::OutOfLineColorDataForIPC>,void>::decode<IPC::Decoder,0ul>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int *v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  int *v15;
  int v16;
  int v17;
  unint64_t v18;
  int *v19;
  int v20;
  int v21;
  unint64_t v22;
  int *v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;

  if (a2 == 1)
  {
    v4 = (uint64_t *)result;
    result = IPC::Decoder::decode<WebCore::ColorSpace>((_QWORD *)result);
    v5 = v4[1];
    v6 = *v4;
    v7 = ((v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *v4;
    if (v5 >= v7 && v5 - v7 > 3)
    {
      v9 = (int *)(v6 + v7);
      v4[2] = (uint64_t)(v9 + 1);
      if (!v6)
      {
        v27 = v5;
        v28 = 0;
        goto LABEL_32;
      }
      v10 = 0;
      v11 = *v9;
      v12 = v6;
      goto LABEL_9;
    }
    while (1)
    {
      v27 = 0;
      v28 = 0;
      *v4 = 0;
      v4[1] = 0;
      v29 = v4[3];
      if (v29)
      {
        v65 = result;
        if (v5)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, v6);
          v28 = *v4;
          v27 = v4[1];
        }
        else
        {
          v27 = 0;
          v28 = 0;
        }
        result = v65;
      }
LABEL_32:
      *v4 = 0;
      v4[1] = 0;
      v6 = v4[3];
      if (v6)
      {
        v61 = result;
        if (v27)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v28, v27);
          v11 = 0;
          v12 = *v4;
          v5 = v4[1];
          v10 = 1;
          v6 = *v4;
        }
        else
        {
          v12 = 0;
          v5 = 0;
          v6 = 0;
          v11 = 0;
          v10 = 1;
        }
        result = v61;
      }
      else
      {
        v12 = 0;
        v5 = 0;
        v11 = 0;
        v10 = 1;
      }
LABEL_9:
      v13 = ((v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v6;
      if (v5 >= v13 && v5 - v13 > 3)
      {
        v15 = (int *)((v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
        v4[2] = (uint64_t)(v15 + 1);
        if (v6)
        {
          v16 = 0;
          v17 = *v15;
          goto LABEL_16;
        }
        v30 = v5;
      }
      else
      {
        v30 = 0;
        v12 = 0;
        *v4 = 0;
        v4[1] = 0;
        v31 = v4[3];
        if (v31)
        {
          v52 = v11;
          v58 = v10;
          v66 = result;
          if (v5)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 16))(v31, v6);
            v12 = *v4;
            v30 = v4[1];
          }
          else
          {
            v30 = 0;
            v12 = 0;
          }
          result = v66;
          v11 = v52;
          v10 = v58;
        }
      }
      *v4 = 0;
      v4[1] = 0;
      v6 = v4[3];
      if (v6)
      {
        v49 = v11;
        v55 = v10;
        v62 = result;
        if (v30)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v12, v30);
          v17 = 0;
          v12 = *v4;
          v5 = v4[1];
          v16 = 1;
          v6 = *v4;
        }
        else
        {
          v12 = 0;
          v5 = 0;
          v6 = 0;
          v17 = 0;
          v16 = 1;
        }
        result = v62;
        v11 = v49;
        v10 = v55;
      }
      else
      {
        v12 = 0;
        v5 = 0;
        v17 = 0;
        v16 = 1;
      }
LABEL_16:
      v18 = ((v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v6;
      if (v5 < v18 || v5 - v18 <= 3)
      {
        v32 = 0;
        v12 = 0;
        *v4 = 0;
        v4[1] = 0;
        v33 = v4[3];
        if (v33)
        {
          v43 = v16;
          v47 = v17;
          v53 = v11;
          v59 = v10;
          v67 = result;
          if (v5)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, v6);
            v12 = *v4;
            v32 = v4[1];
          }
          else
          {
            v32 = 0;
            v12 = 0;
          }
          result = v67;
          v11 = v53;
          v10 = v59;
          v16 = v43;
          v17 = v47;
        }
      }
      else
      {
        v19 = (int *)((v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
        v4[2] = (uint64_t)(v19 + 1);
        if (v6)
        {
          v20 = 0;
          v21 = *v19;
          goto LABEL_20;
        }
        v32 = v5;
      }
      *v4 = 0;
      v4[1] = 0;
      v21 = 0;
      v6 = v4[3];
      if (v6)
      {
        v41 = v16;
        v45 = v17;
        v50 = v11;
        v56 = v10;
        v63 = result;
        if (v32)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)v6 + 16))(v6, v12, v32, 0.0);
          v12 = *v4;
          v5 = v4[1];
          v20 = 1;
          v6 = *v4;
          result = v63;
          v11 = v50;
          v10 = v56;
          v16 = v41;
          v17 = v45;
          v21 = 0;
        }
        else
        {
          v12 = 0;
          v5 = 0;
          v6 = 0;
          v20 = 1;
          result = result;
        }
      }
      else
      {
        v12 = 0;
        v5 = 0;
        v20 = 1;
      }
LABEL_20:
      v22 = ((v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v6;
      if (v5 < v22 || v5 - v22 <= 3)
      {
        v24 = 0;
        v12 = 0;
        *v4 = 0;
        v4[1] = 0;
        v34 = v4[3];
        if (v34)
        {
          v40 = v20;
          v44 = v16;
          v38 = v21;
          v48 = v17;
          v54 = v11;
          v60 = v10;
          v68 = result;
          if (v5)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v6);
            v12 = *v4;
            v24 = v4[1];
          }
          else
          {
            v24 = 0;
            v12 = 0;
          }
          result = v68;
          v11 = v54;
          v10 = v60;
          v16 = v44;
          v17 = v48;
          v21 = v38;
          v20 = v40;
        }
      }
      else
      {
        v23 = (int *)((v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
        v4[2] = (uint64_t)(v23 + 1);
        v24 = v5;
        if (v6)
        {
          v6 = 0;
          v25 = *v23;
          goto LABEL_24;
        }
      }
      *v4 = 0;
      v4[1] = 0;
      v35 = v4[3];
      if (!v35 || !v24)
        break;
      v39 = v20;
      v42 = v16;
      v37 = v21;
      v46 = v17;
      v51 = v11;
      v57 = v10;
      v64 = result;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 16))(v35, v12, v24);
      if (!*v4)
      {
        v36 = v4[1];
        result = v4[3];
        *v4 = 0;
        v4[1] = 0;
        if (result && v36)
          result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 16))(result, 0);
        break;
      }
      v25 = 0;
      v6 = 1;
      result = v64;
      v11 = v51;
      v10 = v57;
      v16 = v42;
      v17 = v46;
      v21 = v37;
      v20 = v39;
LABEL_24:
      if ((unsigned __int16)result > 0xFFu && !v10 && !v16 && !v20 && !(_DWORD)v6)
      {
        *(_BYTE *)a3 = result;
        *(_DWORD *)(a3 + 4) = v11;
        *(_DWORD *)(a3 + 8) = v17;
        *(_DWORD *)(a3 + 12) = v21;
        *(_DWORD *)(a3 + 16) = v25;
        v26 = 1;
        *(_DWORD *)(a3 + 20) = 1;
        goto LABEL_43;
      }
      __break(1u);
    }
  }
  v26 = 0;
  *(_BYTE *)a3 = 0;
LABEL_43:
  *(_BYTE *)(a3 + 24) = v26;
  return result;
}

uint64_t *IPC::ArgumentCoder<std::optional<WebCore::ColorDataForIPC>,void>::decode<IPC::Decoder>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[28];
  char v17;

  v2 = result;
  v4 = result[1];
  v5 = *result;
  v6 = result[2] - *result;
  if (v4 <= v6)
  {
    v10 = 0;
    v11 = 0;
    *result = 0;
    result[1] = 0;
    v12 = result[3];
    if (v12)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        v11 = *v2;
        v10 = v2[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
    goto LABEL_11;
  }
  v7 = (unsigned __int8 *)(v5 + v6);
  result[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v10 = v4;
    v11 = 0;
LABEL_11:
    v4 = 0;
    v5 = 0;
    *v2 = 0;
    v2[1] = 0;
    v13 = v2[3];
    if (v13)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v11, v10);
        v5 = *v2;
        v4 = v2[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
    goto LABEL_12;
  }
  v8 = *v7;
  if (v8 < 2)
  {
    if (v8)
    {
      result = IPC::ArgumentCoder<WebCore::ColorDataForIPC,void>::decode(result, (uint64_t)v16);
      if (v17)
      {
        *(_OWORD *)a2 = *(_OWORD *)v16;
        *(_OWORD *)(a2 + 12) = *(_OWORD *)&v16[12];
        v9 = 1;
        *(_BYTE *)(a2 + 28) = 1;
      }
      else
      {
        v14 = *v2;
        v15 = v2[1];
        *v2 = 0;
        v2[1] = 0;
        result = (uint64_t *)v2[3];
        if (result)
        {
          if (v15)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v14);
        }
        v9 = 0;
        *(_BYTE *)a2 = 0;
      }
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 28) = 0;
      v9 = 1;
    }
    *(_BYTE *)(a2 + 32) = v9;
    return result;
  }
LABEL_12:
  *v2 = 0;
  v2[1] = 0;
  result = (uint64_t *)v2[3];
  if (result && v4)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 32) = 0;
  return result;
}

char *IPC::ArgumentCoder<std::optional<WebCore::NotificationOptionsPayload>,void>::encode<IPC::Encoder,std::optional<WebCore::NotificationOptionsPayload> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  IPC::Encoder *v6;
  uint64_t v7;

  v4 = *(unsigned __int8 *)(a2 + 56);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 56))
    {
      return IPC::ArgumentCoder<WebCore::NotificationOptionsPayload,void>::encode(a1, a2);
    }
    else
    {
      v6 = (IPC::Encoder *)std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::VectorArgumentCoder<false,WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v6, v7);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

char *IPC::VectorArgumentCoder<false,WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  char *result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v4 = *(unsigned int *)(a2 + 12);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(uint64_t **)a2;
    v8 = 8 * v6;
    do
    {
      v9 = *v7++;
      v10 = *(_DWORD *)(v9 + 16);
      *IPC::Encoder::grow(a1, 1uLL, 1) = v10;
      result = (char *)IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&>(a1, v9, v10);
      v8 -= 8;
    }
    while (v8);
  }
  return result;
}

void IPC::VectorArgumentCoder<false,WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(WTF::StringImpl *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(unsigned int *)(a2 + 12);
  v4 = *((_QWORD *)a1 + 2);
  v5 = *(_QWORD *)a1 + v4;
  v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v6 >= v5;
  v8 = v6 - v5;
  if (!v7)
  {
LABEL_8:
    if (!(_DWORD)v3)
      return;
    goto LABEL_9;
  }
  v9 = v8 + v4;
  v10 = v9 + 8;
  if (v9 <= 0xFFFFFFFFFFFFFFF7 && v10 <= *((_QWORD *)a1 + 1))
  {
    *(_QWORD *)(*(_QWORD *)a1 + v9) = v3;
    *((_QWORD *)a1 + 2) = v10;
    v3 = *(unsigned int *)(a2 + 12);
    goto LABEL_8;
  }
  *((_QWORD *)a1 + 1) = 0;
  if (!(_DWORD)v3)
    return;
LABEL_9:
  v12 = *(uint64_t **)a2;
  v13 = 8 * v3;
  do
  {
    v14 = *v12++;
    IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::StreamConnectionEncoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&>(a1, v14);
    v13 -= 8;
  }
  while (v13);
}

uint64_t IPC::VectorArgumentCoder<false,WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  int v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;

  v5 = a1[1];
  v6 = *a1;
  v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    v23 = 0;
    v24 = 0;
    *a1 = 0;
    a1[1] = 0;
    v25 = a1[3];
    if (v25)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v25 + 16))(v25, v6, v5);
        v24 = *a1;
        v23 = a1[1];
      }
      else
      {
        v23 = 0;
        v24 = 0;
      }
    }
    goto LABEL_33;
  }
  v9 = (unint64_t *)(v6 + v7);
  a1[2] = (uint64_t)(v9 + 1);
  if (!v6)
  {
    v23 = v5;
    v24 = 0;
LABEL_33:
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
    {
      if (v23)
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v24);
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return result;
  }
  v10 = *v9;
  v29 = 0;
  v30 = 0;
  if (v10 < 0x20000)
  {
    if (!v10)
    {
      v17 = 0;
      v18 = 0;
LABEL_19:
      v29 = 0;
      v30 = 0;
      *(_QWORD *)a3 = v17;
      *(_QWORD *)(a3 + 8) = v18;
      goto LABEL_20;
    }
    LODWORD(v30) = v10;
    v29 = WTF::fastMalloc((WTF *)(8 * v10));
    while (1)
    {
      IPC::Decoder::decode<WebKit::CoreIPCCFType>(&v27, a1);
      if (!v28)
        goto LABEL_31;
      v11 = HIDWORD(v30);
      if (HIDWORD(v30) != (_DWORD)v30)
        break;
      v12 = (uint64_t *)WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v29, HIDWORD(v30) + 1, (unint64_t)&v27);
      v13 = HIDWORD(v30);
      v14 = v29;
      v15 = *v12;
      *v12 = 0;
      *(_QWORD *)(v14 + 8 * v13) = v15;
      HIDWORD(v30) = v13 + 1;
      if (v28)
        goto LABEL_15;
LABEL_17:
      if (!--v10)
      {
        v17 = v29;
        v18 = v30;
        goto LABEL_19;
      }
    }
    v16 = v27;
    v27 = 0;
    *(_QWORD *)(v29 + 8 * HIDWORD(v30)) = v16;
    HIDWORD(v30) = v11 + 1;
LABEL_15:
    a2 = v27;
    v27 = 0;
    if (a2)
      std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)&v27, (uint64_t)a2);
    goto LABEL_17;
  }
  do
  {
    IPC::Decoder::decode<WebKit::CoreIPCCFType>(&v27, a1);
    if (!v28)
    {
LABEL_31:
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 16) = 0;
      return WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, a2);
    }
    v20 = HIDWORD(v30);
    if (HIDWORD(v30) == (_DWORD)v30)
    {
      WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::CoreIPCCFType>((uint64_t)&v29, (unint64_t)&v27);
      if (!v28)
        goto LABEL_29;
    }
    else
    {
      v21 = v27;
      v27 = 0;
      *(_QWORD *)(v29 + 8 * HIDWORD(v30)) = v21;
      HIDWORD(v30) = v20 + 1;
    }
    v22 = (uint64_t)v27;
    v27 = 0;
    if (v22)
      std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)&v27, v22);
LABEL_29:
    --v10;
  }
  while (v10);
  WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v29, HIDWORD(v30));
  *(_QWORD *)a3 = v29;
  v26 = v30;
  v29 = 0;
  v30 = 0;
  *(_QWORD *)(a3 + 8) = v26;
LABEL_20:
  *(_BYTE *)(a3 + 16) = 1;
  return WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, a2);
}

void sub_1978A6F64(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, char a10, int a11, char a12)
{
  if (a10)
  {
    a2 = a9;
    a9 = 0;
    if (a2)
      std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)&a9, (uint64_t)a2);
  }
  WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a12, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  WTF *v7;

  if (*(unsigned int *)(result + 8) > a2)
  {
    v2 = a2;
    v3 = result;
    v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      v5 = (unint64_t *)(*(_QWORD *)result + 8 * a2);
      v6 = 8 * v4 - 8 * a2;
      do
      {
        a2 = *v5;
        *v5 = 0;
        if (a2)
          result = std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)v5, a2);
        ++v5;
        v6 -= 8;
      }
      while (v6);
      *(_DWORD *)(v3 + 12) = v2;
      LODWORD(v4) = v2;
    }
    v7 = *(WTF **)v3;
    if (v2)
    {
      if (v2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      result = WTF::fastMalloc((WTF *)(8 * v2));
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = result;
      if ((WTF *)result != v7)
        result = WTF::VectorMover<false,WebKit::CoreIPCCFType>::move((uint64_t)v7, (uint64_t *)v7 + v4, (uint64_t *)result);
    }
    if (v7)
    {
      if (*(WTF **)v3 == v7)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v7, (void *)a2);
    }
  }
  return result;
}

void IPC::ArgumentCoder<std::unique_ptr<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::unique_ptr<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  char *v5;

  v4 = *a2;
  v5 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *v5 = 1;
    IPC::VectorArgumentCoder<false,WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, *a2);
  }
  else
  {
    *v5 = 0;
  }
}

void IPC::VectorArgumentCoder<false,WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  v4 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = *(uint64_t **)a2;
    v7 = *(_QWORD *)a2 + 16 * v5;
    do
    {
      v8 = *v6;
      v9 = *(_DWORD *)(*v6 + 16);
      *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
      IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&>(a1, v8, v9);
      v10 = v6[1];
      v11 = *(_DWORD *)(v10 + 16);
      *IPC::Encoder::grow(a1, 1uLL, 1) = v11;
      IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&>(a1, v10, v11);
      v6 += 2;
    }
    while (v6 != (uint64_t *)v7);
  }
}

_QWORD *IPC::ArgumentCoder<std::unique_ptr<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::StreamConnectionEncoder,std::unique_ptr<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(_QWORD *result, uint64_t **a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *a2;
  v5 = result[1];
  v4 = result[2];
  if (v3)
  {
    if (v4 >= v5)
    {
      result[1] = 0;
    }
    else
    {
      *(_BYTE *)(*result + v4) = 1;
      result[2] = v4 + 1;
      v3 = *a2;
    }
    return IPC::VectorArgumentCoder<false,WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(result, v3);
  }
  else if (v4 >= v5)
  {
    result[1] = 0;
  }
  else
  {
    *(_BYTE *)(*result + v4) = 0;
    result[2] = v4 + 1;
  }
  return result;
}

_QWORD *IPC::VectorArgumentCoder<false,WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(_QWORD *result, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v2 = result;
  v3 = *((unsigned int *)a2 + 3);
  v4 = result[2];
  v5 = *result + v4;
  v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v6 >= v5;
  v8 = v6 - v5;
  if (!v7)
  {
LABEL_8:
    if (!(_DWORD)v3)
      return result;
    goto LABEL_9;
  }
  v9 = v8 + v4;
  v10 = v9 + 8;
  if (v9 <= 0xFFFFFFFFFFFFFFF7 && v10 <= result[1])
  {
    *(_QWORD *)(*result + v9) = v3;
    result[2] = v10;
    v3 = *((unsigned int *)a2 + 3);
    goto LABEL_8;
  }
  result[1] = 0;
  if (!(_DWORD)v3)
    return result;
LABEL_9:
  v12 = *a2;
  v13 = *a2 + 16 * v3;
  do
  {
    IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::StreamConnectionEncoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&>(v2);
    result = (_QWORD *)IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::StreamConnectionEncoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&>(v2);
    v12 += 16;
  }
  while (v12 != v13);
  return result;
}

uint64_t IPC::ArgumentCoder<std::unique_ptr<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *v2;
  unint64_t v4;
  char *v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  int v38;
  int v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;

  v2 = (uint64_t *)result;
  v4 = *(_QWORD *)(result + 8);
  v5 = *(char **)result;
  v6 = *(_QWORD *)(result + 16) - *(_QWORD *)result;
  if (v4 <= v6)
  {
    v23 = 0;
    v24 = 0;
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v25 = *(_QWORD *)(result + 24);
    if (v25)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
        v24 = *v2;
        v23 = v2[1];
      }
      else
      {
        v23 = 0;
        v24 = 0;
      }
    }
LABEL_24:
    v4 = 0;
    v5 = 0;
    *v2 = 0;
    v2[1] = 0;
    v26 = v2[3];
    if (v26)
    {
      if (v23)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, v24, v23);
LABEL_48:
        v5 = (char *)*v2;
        v4 = v2[1];
        goto LABEL_38;
      }
      v4 = 0;
      v5 = 0;
    }
LABEL_38:
    *v2 = 0;
    v2[1] = 0;
    result = v2[3];
    if (result)
    {
      if (v4)
        result = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)result + 16))(result, v5);
    }
    *a2 = 0;
    a2[8] = 0;
    return result;
  }
  v7 = &v5[v6];
  v8 = (uint64_t)&v5[v6 + 1];
  *(_QWORD *)(result + 16) = v8;
  if (!v5)
  {
    v23 = v4;
    v24 = 0;
    goto LABEL_24;
  }
  v9 = *v7;
  if (v9 >= 2)
    goto LABEL_38;
  if (!v9)
  {
    *(_QWORD *)a2 = 0;
    a2[8] = 1;
    return result;
  }
  v10 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v5;
  if (v4 < v10 || v4 - v10 <= 7)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v27 = *(_QWORD *)(result + 24);
    if (v27)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
      v28 = *v2;
      v29 = v2[1];
      v30 = v2[3];
      *v2 = 0;
      v2[1] = 0;
      if (v30)
      {
        if (v29)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, v28);
      }
    }
    goto LABEL_48;
  }
  v12 = (unint64_t *)&v5[v10];
  v13 = *v12;
  *(_QWORD *)(result + 16) = v12 + 1;
  v44 = 0;
  v45 = 0;
  if (v13 >= 0x10000)
  {
    while (1)
    {
      IPC::Decoder::decode<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>>((uint64_t)&v41, v2);
      if (!v43)
        goto LABEL_47;
      v31 = HIDWORD(v45);
      if (HIDWORD(v45) == (_DWORD)v45)
      {
        WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>>((uint64_t)&v44, (unint64_t)&v41);
      }
      else
      {
        v32 = (_QWORD *)(v44 + 16 * HIDWORD(v45));
        v33 = v41;
        v41 = 0;
        *v32 = v33;
        v34 = v42;
        v42 = 0;
        v32[1] = v34;
        HIDWORD(v45) = v31 + 1;
      }
      std::__optional_destruct_base<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v41);
      if (!--v13)
      {
        WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v44, HIDWORD(v45));
        v35 = v44;
        v44 = 0;
        v37 = v35;
        v20 = v45;
        v19 = HIDWORD(v45);
        goto LABEL_19;
      }
    }
  }
  if (v13)
  {
    LODWORD(v45) = v13;
    v44 = WTF::fastMalloc((WTF *)(16 * v13));
    while (1)
    {
      IPC::Decoder::decode<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>>((uint64_t)&v41, v2);
      if (!v43)
        break;
      v14 = HIDWORD(v45);
      if (HIDWORD(v45) == (_DWORD)v45)
      {
        WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>>((uint64_t)&v44, (unint64_t)&v41);
      }
      else
      {
        v15 = (_QWORD *)(v44 + 16 * HIDWORD(v45));
        v16 = v41;
        v41 = 0;
        *v15 = v16;
        v17 = v42;
        v42 = 0;
        v15[1] = v17;
        HIDWORD(v45) = v14 + 1;
      }
      std::__optional_destruct_base<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v41);
      if (!--v13)
      {
        v18 = v44;
        v20 = v45;
        v19 = HIDWORD(v45);
        goto LABEL_18;
      }
    }
LABEL_47:
    std::__optional_destruct_base<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v41);
    WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v36);
    goto LABEL_48;
  }
  v19 = 0;
  v20 = 0;
  v18 = 0;
LABEL_18:
  v44 = 0;
  v37 = v18;
LABEL_19:
  v45 = 0;
  v38 = v20;
  v39 = v19;
  v40 = 1;
  WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v5);
  result = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  v22 = v37;
  v37 = 0;
  *(_QWORD *)result = v22;
  LODWORD(v22) = v38;
  v38 = 0;
  *(_DWORD *)(result + 8) = v22;
  LODWORD(v22) = v39;
  v39 = 0;
  *(_DWORD *)(result + 12) = v22;
  *(_QWORD *)a2 = result;
  a2[8] = 1;
  if (v40)
    return WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, v21);
  return result;
}

void IPC::Decoder::decode<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>>(uint64_t a1, uint64_t *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;

  IPC::Decoder::decode<WebKit::CoreIPCCFType>(a2, a2, (uint64_t)&v13);
  if (v14)
  {
    IPC::Decoder::decode<WebKit::CoreIPCCFType>(a2, v4, (uint64_t)&v11);
    if (!v12)
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 16) = 0;
      if (v14)
      {
        v10 = v13;
        v13 = 0;
        if (v10)
          std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)&v13, v10);
      }
      goto LABEL_8;
    }
    if (v14)
    {
      v5 = v11;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_BYTE *)(a1 + 16) = 1;
      return;
    }
    __break(1u);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
LABEL_8:
  v6 = *a2;
  v7 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v8 = a2[3];
  if (v8)
    v9 = v7 == 0;
  else
    v9 = 1;
  if (!v9)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v6);
}

void sub_1978A76E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(a1 + 16))
  {
    v2 = a1 + 8;
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v3)
      std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100](v2, v3);
    v4 = *(_QWORD *)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
      std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100](a1, v4);
  }
  return a1;
}

uint64_t WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  WTF *v5;

  if (*(unsigned int *)(result + 8) > a2)
  {
    v3 = result;
    v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      result = WTF::VectorDestructor<true,WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>>::destruct(*(_QWORD *)result + 16 * a2, (uint64_t *)(*(_QWORD *)result + 16 * v4));
      *(_DWORD *)(v3 + 12) = a2;
      LODWORD(v4) = a2;
    }
    v5 = *(WTF **)v3;
    if (a2)
    {
      if (a2 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      result = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(v3 + 8) = a2;
      *(_QWORD *)v3 = result;
      if ((WTF *)result != v5)
        result = WTF::VectorMover<false,WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>>::move((uint64_t)v5, (_QWORD *)v5 + 2 * v4, (_QWORD *)result);
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

char *IPC::ArgumentCoder<std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>,void>::encode<IPC::Encoder,std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>> const&>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  char v3;
  char *result;

  if (!a3)
  {
    if (!*(_DWORD *)(a2 + 8))
    {
      v3 = *(_BYTE *)a2;
      result = IPC::Encoder::grow(a1, 1uLL, 1);
      *result = v3;
      return result;
    }
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
  }
  return (char *)IPC::ArgumentCoder<std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>,void>::encode<IPC::Encoder,std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>> const&,0ul>(a1, a2, a3);
}

WTF::StringImpl *IPC::ArgumentCoder<std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>,void>::encode<IPC::Encoder,std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>> const&,0ul>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 1)
    return IPC::ArgumentCoder<std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>,void>::encode<IPC::Encoder,std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>> const&,0ul,1ul>(a1, a2, a3);
  if (*(_DWORD *)(a2 + 8) != 1)
  {
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>,void>::encode<IPC::Encoder,std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>> const&,0ul,1ul>(a1, a2, a3);
  }
  return IPC::ArgumentCoder<__CFString const*,void>::encode((uint64_t)a1);
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>,void>::encode<IPC::Encoder,std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>> const&,0ul,1ul>(IPC::Encoder *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a3 == 2)
  {
    if (*(_DWORD *)(a2 + 8) == 2)
    {
      return (IPC::Encoder *)IPC::ArgumentCoder<void const*,void>::encode(result, *(IPC **)a2);
    }
    else
    {
      v3 = std::__throw_bad_variant_access[abi:sn180100]();
      return (IPC::Encoder *)IPC::ArgumentCoder<std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>> const&>(v3);
    }
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>> const&>(WTF::StringImpl *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(unsigned __int8 *)(a2 + 8);
  v3 = *((_QWORD *)a1 + 2);
  if (v3 >= *((_QWORD *)a1 + 1))
  {
    *((_QWORD *)a1 + 1) = 0;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)a1 + v3) = v2;
    *((_QWORD *)a1 + 2) = v3 + 1;
  }
  return IPC::ArgumentCoder<std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>> const&>(a1, a2, v2);
}

WTF::StringImpl *IPC::ArgumentCoder<std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>> const&>(WTF::StringImpl *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;

  if (a3)
    return IPC::ArgumentCoder<std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>> const&,0ul>(result, a2, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>> const&,0ul>(result, a2, a3);
  }
  v3 = *((_QWORD *)result + 2);
  if (v3 >= *((_QWORD *)result + 1))
  {
    *((_QWORD *)result + 1) = 0;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)result + v3) = *(_BYTE *)a2;
    *((_QWORD *)result + 2) = v3 + 1;
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>> const&,0ul>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 1)
__ZN3IPC13ArgumentCoderINSt3__17variantIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS6_IPKvEEEEEvE6encodeINS_23StreamConnectionEncoderERKSE_JLm0ELm1EEEEvRT_OT0_NS1_16integer_sequenceImJXspT1_EEEEm:
    JUMPOUT(0x1978A798CLL);
  if (*(_DWORD *)(a2 + 8) != 1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto __ZN3IPC13ArgumentCoderINSt3__17variantIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS6_IPKvEEEEEvE6encodeINS_23StreamConnectionEncoderERKSE_JLm0ELm1EEEEvRT_OT0_NS1_16integer_sequenceImJXspT1_EEEEm;
  }
  return IPC::ArgumentCoder<__CFString const*,void>::encode(a1);
}

_QWORD *IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::StreamConnectionEncoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(unsigned __int8 *)(a2 + 8);
  v3 = a1[2];
  if (v3 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(_BYTE *)(*a1 + v3) = v2;
    a1[2] = v3 + 1;
  }
  return IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::StreamConnectionEncoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>>(a1, a2, v2);
}

_QWORD *IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::StreamConnectionEncoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>>(_QWORD *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;

  if (a3)
    return IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::StreamConnectionEncoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,0ul>(result, a2, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    result = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::StreamConnectionEncoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,0ul>(result, a2, a3);
  }
  v3 = result[2];
  if (v3 >= result[1])
  {
    result[1] = 0;
  }
  else
  {
    *(_BYTE *)(*result + v3) = *(_BYTE *)a2;
    result[2] = v3 + 1;
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::StreamConnectionEncoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,0ul>(_QWORD *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;

  if (a3 != 1)
    return IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::StreamConnectionEncoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,0ul,1ul>(result, (__int16 *)a2, a3);
  if (*(_DWORD *)(a2 + 8) != 1)
  {
    result = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::StreamConnectionEncoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,0ul,1ul>(result, (__int16 *)a2, a3);
  }
  v3 = result[2];
  if (v3 >= result[1])
  {
    result[1] = 0;
  }
  else
  {
    *(_BYTE *)(*result + v3) = *(_BYTE *)a2;
    result[2] = v3 + 1;
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::StreamConnectionEncoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,0ul,1ul>(_QWORD *a1, __int16 *a2, uint64_t a3)
{
  __int16 v4;

  if (a3 == 2)
  {
    if (*((_DWORD *)a2 + 2) == 2)
    {
      v4 = *a2;
      return (_QWORD *)IPC::StreamConnectionEncoder::encodeSpan<short const,18446744073709551615ul>(a1, &v4, 1);
    }
    a1 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
  }
  return IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::StreamConnectionEncoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,0ul,1ul,2ul>(a1, (uint64_t *)a2, a3);
}

_QWORD *IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::StreamConnectionEncoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,0ul,1ul,2ul>(_QWORD *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;

  switch(a3)
  {
    case 3:
      if (*((_DWORD *)a2 + 2) != 3)
        goto LABEL_54;
      v3 = result[2];
      v4 = *result + v3;
      v5 = (v4 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v6 = v5 >= v4;
      v7 = v5 - v4;
      if (v6)
      {
        v8 = v7 + v3;
        v9 = v8 + 2;
        if (v8 <= 0xFFFFFFFFFFFFFFFDLL && v9 <= result[1])
        {
          *(_WORD *)(*result + v8) = *(_WORD *)a2;
          goto LABEL_51;
        }
        goto LABEL_53;
      }
      return result;
    case 4:
      if (*((_DWORD *)a2 + 2) == 4)
        goto LABEL_22;
      goto LABEL_54;
    case 5:
      if (*((_DWORD *)a2 + 2) != 5)
        goto LABEL_54;
LABEL_22:
      v17 = result[2];
      v18 = *result + v17;
      v19 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v6 = v19 >= v18;
      v20 = v19 - v18;
      if (!v6)
        return result;
      v21 = v20 + v17;
      v9 = v21 + 4;
      if (v21 > 0xFFFFFFFFFFFFFFFBLL || v9 > result[1])
        goto LABEL_53;
      *(_DWORD *)(*result + v21) = *(_DWORD *)a2;
      goto LABEL_51;
    case 6:
      if (*((_DWORD *)a2 + 2) != 6)
        goto LABEL_54;
      goto LABEL_36;
    case 7:
      if (*((_DWORD *)a2 + 2) != 7)
        goto LABEL_54;
      goto LABEL_36;
    case 8:
      if (*((_DWORD *)a2 + 2) != 8)
        goto LABEL_54;
      v36 = *a2;
      return (_QWORD *)IPC::StreamConnectionEncoder::encodeSpan<long long const,18446744073709551615ul>(result, &v36, 1);
    case 9:
      if (*((_DWORD *)a2 + 2) != 9)
        goto LABEL_54;
LABEL_36:
      v23 = result[2];
      v24 = *result + v23;
      v25 = (v24 + 7) & 0xFFFFFFFFFFFFFFF8;
      v6 = v25 >= v24;
      v26 = v25 - v24;
      if (!v6)
        return result;
      v27 = v26 + v23;
      v9 = v27 + 8;
      if (v27 > 0xFFFFFFFFFFFFFFF7 || v9 > result[1])
        goto LABEL_53;
      *(_QWORD *)(*result + v27) = *a2;
      goto LABEL_51;
    case 10:
      if (*((_DWORD *)a2 + 2) != 10)
        goto LABEL_54;
      v29 = result[2];
      v30 = *result + v29;
      v31 = (v30 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v6 = v31 >= v30;
      v32 = v31 - v30;
      if (!v6)
        return result;
      v33 = v32 + v29;
      v9 = v33 + 4;
      if (v33 > 0xFFFFFFFFFFFFFFFBLL || v9 > result[1])
        goto LABEL_53;
      *(_DWORD *)(*result + v33) = *(_DWORD *)a2;
      goto LABEL_51;
    default:
      if (a3 != 11)
        return result;
      if (*((_DWORD *)a2 + 2) == 11)
      {
        v11 = result[2];
        v12 = *result + v11;
        v13 = (v12 + 7) & 0xFFFFFFFFFFFFFFF8;
        v6 = v13 >= v12;
        v14 = v13 - v12;
        if (v6)
        {
          v15 = v14 + v11;
          v9 = v15 + 8;
          if (v15 > 0xFFFFFFFFFFFFFFF7 || v9 > result[1])
          {
LABEL_53:
            result[1] = 0;
          }
          else
          {
            *(_QWORD *)(*result + v15) = *a2;
LABEL_51:
            result[2] = v9;
          }
        }
      }
      else
      {
LABEL_54:
        v35 = std::__throw_bad_variant_access[abi:sn180100]();
        return (_QWORD *)IPC::StreamConnectionEncoder::encodeSpan<short const,18446744073709551615ul>(v35);
      }
      return result;
  }
}

uint64_t IPC::StreamConnectionEncoder::encodeSpan<short const,18446744073709551615ul>(_QWORD *a1, const void *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t result;
  size_t v10;
  uint64_t v11;
  size_t v12;

  v3 = a1[2];
  v4 = *a1 + v3;
  v5 = (v4 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (!v6)
    return 0;
  v10 = 2 * a3;
  v11 = v7 + v3;
  v12 = v11 + v10;
  if (__CFADD__(v11, v10) || v12 > a1[1])
  {
    result = 0;
    a1[1] = 0;
  }
  else
  {
    memcpy((void *)(*a1 + v11), a2, v10);
    a1[2] = v12;
    return 1;
  }
  return result;
}

unint64_t WebKit::WebPushMessage::fromDictionary@<X0>(WebKit::WebPushMessage *this@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  unint64_t v6;
  void *v7;
  char v8;
  char v9;
  unint64_t v10;
  void *v11;
  char v12;
  NSDictionary *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  char *v16;
  unint64_t v17;
  WTF *v18;
  char v19;
  void *v20;
  WTF *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF *v25;
  WTF *v26;
  uint64_t v27;
  WTF *v28;
  int v29;
  char v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  _BYTE v33[144];
  _BYTE v34[40];
  unsigned __int8 v35;

  result = -[WebKit::WebPushMessage objectForKey:](this, "objectForKey:", CFSTR("WebKitPushRegistrationURL"));
  if (!result)
    goto LABEL_9;
  v6 = result;
  objc_opt_class();
  result = objc_opt_isKindOfClass();
  if ((result & 1) == 0)
    goto LABEL_9;
  v7 = (void *)-[WebKit::WebPushMessage objectForKey:](this, "objectForKey:", CFSTR("WebKitPushData"));
  v8 = objc_msgSend(v7, "isEqual:", objc_msgSend(MEMORY[0x1E0C99E38], "null"));
  objc_opt_class();
  result = objc_opt_isKindOfClass();
  v9 = result;
  if ((v8 & 1) == 0 && (result & 1) == 0)
    goto LABEL_9;
  result = -[WebKit::WebPushMessage objectForKey:](this, "objectForKey:", CFSTR("WebKitPushPartition"));
  if (!result
    || (v10 = result, objc_opt_class(), result = objc_opt_isKindOfClass(), (result & 1) == 0)
    || (v11 = (void *)-[WebKit::WebPushMessage objectForKey:](this, "objectForKey:", CFSTR("WebKitNotificationPayload")),
        v12 = objc_msgSend(v11, "isEqual:", objc_msgSend(MEMORY[0x1E0C99E38], "null")),
        objc_opt_class(),
        result = objc_opt_isKindOfClass(),
        (v12 & 1) == 0)
    && (result & 1) == 0)
  {
LABEL_9:
    *a2 = 0;
    a2[216] = 0;
    return result;
  }
  v34[0] = 0;
  v35 = 0;
  if ((result & 1) != 0)
  {
    WebCore::NotificationPayload::fromDictionary((WebCore::NotificationPayload *)v11, v13);
    if (v35 != v33[64])
    {
      std::construct_at[abi:sn180100]<WebCore::NotificationPayload,WebCore::NotificationPayload,WebCore::NotificationPayload*>((uint64_t)v34, (uint64_t)&v28);
      v35 = 1;
    }
    std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v28, v14);
    if (!v35)
    {
      *a2 = 0;
      a2[216] = 0;
      return std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v34, v15);
    }
  }
  LOBYTE(v28) = 0;
  v30 = 0;
  MEMORY[0x19AEABCC8](&v31, v10);
  MEMORY[0x19AEABB18](&v32, v6);
  std::__optional_move_base<WebCore::NotificationPayload,false>::__optional_move_base[abi:sn180100](v33, (uint64_t)v34);
  if ((v9 & 1) == 0)
  {
LABEL_22:
    WebKit::WebPushMessage::WebPushMessage((uint64_t)a2, (uint64_t *)&v28);
    a2[216] = 1;
    std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v33, v22);
    v23 = v32;
    v32 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v15);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = v31;
    v31 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v15);
      else
        *(_DWORD *)v24 -= 2;
    }
    if (v30)
    {
      v25 = v28;
      if (v28)
      {
        v28 = 0;
        v29 = 0;
        WTF::fastFree(v25, v15);
      }
    }
    return std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v34, v15);
  }
  if (!v7)
  {
    v26 = 0;
    v27 = 0;
    goto LABEL_20;
  }
  v16 = (char *)objc_msgSend(v7, "bytes");
  result = objc_msgSend(v7, "length");
  v17 = result;
  v26 = 0;
  LODWORD(v27) = 0;
  HIDWORD(v27) = result;
  if (!result)
    goto LABEL_20;
  if (!HIDWORD(result))
  {
    v18 = (WTF *)WTF::fastMalloc((WTF *)result);
    LODWORD(v27) = v17;
    v26 = v18;
    do
    {
      v19 = *v16++;
      *(_BYTE *)v18 = v19;
      v18 = (WTF *)((char *)v18 + 1);
      --v17;
    }
    while (v17);
LABEL_20:
    std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>((uint64_t)&v28, (uint64_t)&v26);
    v21 = v26;
    if (v26)
    {
      v26 = 0;
      LODWORD(v27) = 0;
      WTF::fastFree(v21, v20);
    }
    goto LABEL_22;
  }
  __break(0xC471u);
  return result;
}

void sub_1978A81FC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, WTF *a12, int a13, int a14, char a15, WTF::StringImpl *a16, WTF::StringImpl *a17)
{
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v20;

  if (a10)
    WTF::fastFree(a10, a2);
  std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100](v17, (WTF::StringImpl *)a2);
  if (a17)
  {
    if (*(_DWORD *)a17 == 2)
      WTF::StringImpl::destroy(a17, v20);
    else
      *(_DWORD *)a17 -= 2;
  }
  if (a16)
  {
    if (*(_DWORD *)a16 == 2)
      WTF::StringImpl::destroy(a16, v20);
    else
      *(_DWORD *)a16 -= 2;
  }
  if (a15)
  {
    if (a12)
      WTF::fastFree(a12, v20);
  }
  std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100](v18 - 208, v20);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPushMessage::toDictionary(WebKit::WebPushMessage *this)
{
  const void *v2;
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v6;
  uint64_t v7;
  _QWORD v9[4];
  _QWORD v10[5];

  v10[4] = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 16))
  {
    v2 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", *(_QWORD *)this, *((unsigned int *)this + 3));
    v3 = v2;
    if (v2)
    {
      CFRetain(v2);
      CFRelease(v3);
    }
  }
  else
  {
    v3 = 0;
  }
  if (*((_BYTE *)this + 208))
    v4 = WebCore::NotificationPayload::dictionaryRepresentation((WebKit::WebPushMessage *)((char *)this + 72));
  else
    v4 = 0;
  v9[0] = CFSTR("WebKitPushData");
  v5 = (uint64_t)v3;
  if (!v3)
    v5 = objc_msgSend(MEMORY[0x1E0C99E38], "null");
  v10[0] = v5;
  v9[1] = CFSTR("WebKitPushRegistrationURL");
  v10[1] = WTF::URL::operator NSURL *();
  v9[2] = CFSTR("WebKitPushPartition");
  if (*((_QWORD *)this + 3))
    v6 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v6 = &stru_1E351F1B8;
  v10[2] = v6;
  v9[3] = CFSTR("WebKitNotificationPayload");
  if (!v4)
    v4 = objc_msgSend(MEMORY[0x1E0C99E38], "null");
  v10[3] = v4;
  v7 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, v9, 4);
  if (v3)
    CFRelease(v3);
  return v7;
}

void sub_1978A843C(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x1E0D15428]();
}

uint64_t CABackingStoreCollectBlocking()
{
  return MEMORY[0x1E0CD2318]();
}

CFTimeInterval CACurrentMediaTime(void)
{
  CFTimeInterval result;

  MEMORY[0x1E0CD2388]();
  return result;
}

CAFrameRateRange CAFrameRateRangeMake(float minimum, float maximum, float preferred)
{
  float v3;
  float v4;
  float v5;
  CAFrameRateRange result;

  MEMORY[0x1E0CD23D0](minimum, maximum, preferred);
  result.preferred = v5;
  result.maximum = v4;
  result.minimum = v3;
  return result;
}

uint64_t CAMachPortCreate()
{
  return MEMORY[0x1E0CD2518]();
}

uint64_t CAMachPortGetPort()
{
  return MEMORY[0x1E0CD2520]();
}

uint64_t CAMachPortGetTypeID()
{
  return MEMORY[0x1E0CD2528]();
}

uint64_t CARenderServerRenderDisplayLayerWithTransformAndTimeOffset()
{
  return MEMORY[0x1E0CD25B0]();
}

uint64_t CARenderServerRenderLayerWithTransform()
{
  return MEMORY[0x1E0CD25B8]();
}

CATransform3D *__cdecl CATransform3DMakeScale(CATransform3D *__return_ptr retstr, CGFloat sx, CGFloat sy, CGFloat sz)
{
  return (CATransform3D *)MEMORY[0x1E0CD2640](retstr, sx, sy, sz);
}

CATransform3D *__cdecl CATransform3DTranslate(CATransform3D *__return_ptr retstr, CATransform3D *t, CGFloat tx, CGFloat ty, CGFloat tz)
{
  return (CATransform3D *)MEMORY[0x1E0CD2678](retstr, t, tx, ty, tz);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C97C58]();
  return result;
}

CFAllocatorRef CFAllocatorCreate(CFAllocatorRef allocator, CFAllocatorContext *context)
{
  return (CFAllocatorRef)MEMORY[0x1E0C97CA8](allocator, context);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x1E0C97CF8](theArray, value);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D38](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1E0C97D90]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return (CFTypeRef)MEMORY[0x1E0C97E90](arg);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1E0C97FC8]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1E0C97FE0](BOOLean);
}

CFURLRef CFBundleCopyResourcesDirectoryURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x1E0C980B0](bundle);
}

CFBundleRef CFBundleGetBundleWithIdentifier(CFStringRef bundleID)
{
  return (CFBundleRef)MEMORY[0x1E0C980E8](bundleID);
}

void *__cdecl CFBundleGetFunctionPointerForName(CFBundleRef bundle, CFStringRef functionName)
{
  return (void *)MEMORY[0x1E0C98108](bundle, functionName);
}

CFDataRef CFCharacterSetCreateBitmapRepresentation(CFAllocatorRef alloc, CFCharacterSetRef theSet)
{
  return (CFDataRef)MEMORY[0x1E0C982B0](alloc, theSet);
}

CFCharacterSetRef CFCharacterSetCreateWithBitmapRepresentation(CFAllocatorRef alloc, CFDataRef theData)
{
  return (CFCharacterSetRef)MEMORY[0x1E0C982D8](alloc, theData);
}

CFTypeID CFCharacterSetGetTypeID(void)
{
  return MEMORY[0x1E0C982F8]();
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1E0C983A0](allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x1E0C983B8](allocator, capacity);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x1E0C983C8](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1E0C983E0](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
  MEMORY[0x1E0C983F0](theData, range.location, range.length, buffer);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1E0C983F8](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x1E0C98408](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1E0C98418]();
}

void CFDataIncreaseLength(CFMutableDataRef theData, CFIndex extraLength)
{
  MEMORY[0x1E0C98420](theData, extraLength);
}

CFDateRef CFDateCreate(CFAllocatorRef allocator, CFAbsoluteTime at)
{
  return (CFDateRef)MEMORY[0x1E0C98448](allocator, at);
}

CFAbsoluteTime CFDateGetAbsoluteTime(CFDateRef theDate)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C984D8](theDate);
  return result;
}

CFTypeID CFDateGetTypeID(void)
{
  return MEMORY[0x1E0C984E8]();
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1E0C98518](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98530](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98538](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98558](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1E0C98570](theDict);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1E0C985A8]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

uint64_t CFHTTPCookieStorageCreateFromFile()
{
  return MEMORY[0x1E0C92788]();
}

uint64_t CFHTTPCookieStorageCreateFromIdentifyingData()
{
  return MEMORY[0x1E0C92790]();
}

uint64_t CFHTTPCookieStorageCreateIdentifyingData()
{
  return MEMORY[0x1E0C92798]();
}

uint64_t CFHTTPCookieStorageScheduleWithRunLoop()
{
  return MEMORY[0x1E0C927C0]();
}

uint64_t CFHTTPCookieStorageSetCookieAcceptPolicy()
{
  return MEMORY[0x1E0C927C8]();
}

CFStringRef CFHTTPMessageCopyResponseStatusLine(CFHTTPMessageRef response)
{
  return (CFStringRef)MEMORY[0x1E0C92810](response);
}

CFTypeRef CFMakeCollectable(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98858](cf);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
  MEMORY[0x1E0C988B0](center, observer, callBack, name, object, suspensionBehavior);
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988B8]();
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988D0]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
  MEMORY[0x1E0C988E0](center, name, object, userInfo, deliverImmediately);
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
  MEMORY[0x1E0C98900](center, observer, name, object);
}

CFTypeID CFNullGetTypeID(void)
{
  return MEMORY[0x1E0C98908]();
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

CFNumberType CFNumberGetType(CFNumberRef number)
{
  return MEMORY[0x1E0C989A8](number);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1E0C989B8]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1E0C989C0](number, theType, valuePtr);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A60](key, applicationID, userName, hostName);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1E0C98A70](key, applicationID, keyExistsAndHasValidFormat);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1E0C98A78](key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  MEMORY[0x1E0C98A90](key, value, applicationID, userName, hostName);
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return MEMORY[0x1E0C98A98](applicationID, userName, hostName);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98AD0](allocator, data, options, format, error);
}

CFIndex CFPropertyListWrite(CFPropertyListRef propertyList, CFWriteStreamRef stream, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return MEMORY[0x1E0C98AF8](propertyList, stream, format, options, error);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x1E0C98C30]();
}

CFRunLoopRef CFRunLoopGetMain(void)
{
  return (CFRunLoopRef)MEMORY[0x1E0C98C40]();
}

void CFRunLoopPerformBlock(CFRunLoopRef rl, CFTypeRef mode, void *block)
{
  MEMORY[0x1E0C98C80](rl, mode, block);
}

void CFRunLoopRun(void)
{
  MEMORY[0x1E0C98CA8]();
}

void CFRunLoopStop(CFRunLoopRef rl)
{
  MEMORY[0x1E0C98D00](rl);
}

void CFRunLoopWakeUp(CFRunLoopRef rl)
{
  MEMORY[0x1E0C98D68](rl);
}

CFStringRef CFStringConvertEncodingToIANACharSetName(CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98F28](*(_QWORD *)&encoding);
}

CFStringEncoding CFStringConvertNSStringEncodingToEncoding(unint64_t encoding)
{
  return MEMORY[0x1E0C98F48](encoding);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1E0C98FB8](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98FD0](alloc, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithCharacters(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars)
{
  return (CFStringRef)MEMORY[0x1E0C98FE8](alloc, chars, numChars);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1E0C990A0](theString, *(_QWORD *)&encoding);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
  MEMORY[0x1E0C990C0](theString, range.location, range.length, buffer);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1E0C99100](theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1E0C99170]();
}

void CFStringTrimWhitespace(CFMutableStringRef theString)
{
  MEMORY[0x1E0C99258](theString);
}

CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
{
  return (CFStringRef)MEMORY[0x1E0C992D8](anURL, pathStyle);
}

CFURLRef CFURLCreateAbsoluteURLWithBytes(CFAllocatorRef alloc, const UInt8 *relativeURLBytes, CFIndex length, CFStringEncoding encoding, CFURLRef baseURL, Boolean useCompatibilityMode)
{
  return (CFURLRef)MEMORY[0x1E0C99360](alloc, relativeURLBytes, length, *(_QWORD *)&encoding, baseURL, useCompatibilityMode);
}

CFURLRef CFURLCreateCopyAppendingPathComponent(CFAllocatorRef allocator, CFURLRef url, CFStringRef pathComponent, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1E0C99380](allocator, url, pathComponent, isDirectory);
}

CFURLRef CFURLCreateFilePathURL(CFAllocatorRef allocator, CFURLRef url, CFErrorRef *error)
{
  return (CFURLRef)MEMORY[0x1E0C993B8](allocator, url, error);
}

CFURLRef CFURLCreateFromFileSystemRepresentation(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1E0C993C8](allocator, buffer, bufLen, isDirectory);
}

CFURLRef CFURLGetBaseURL(CFURLRef anURL)
{
  return (CFURLRef)MEMORY[0x1E0C99478](anURL);
}

CFIndex CFURLGetBytes(CFURLRef url, UInt8 *buffer, CFIndex bufferLength)
{
  return MEMORY[0x1E0C99488](url, buffer, bufferLength);
}

CFTypeID CFURLGetTypeID(void)
{
  return MEMORY[0x1E0C994B8]();
}

uint64_t CFURLResponseGetHTTPResponse()
{
  return MEMORY[0x1E0C92A68]();
}

void CFWriteStreamClose(CFWriteStreamRef stream)
{
  MEMORY[0x1E0C99600](stream);
}

CFTypeRef CFWriteStreamCopyProperty(CFWriteStreamRef stream, CFStreamPropertyKey propertyName)
{
  return (CFTypeRef)MEMORY[0x1E0C99610](stream, propertyName);
}

CFWriteStreamRef CFWriteStreamCreateWithAllocatedBuffers(CFAllocatorRef alloc, CFAllocatorRef bufferAllocator)
{
  return (CFWriteStreamRef)MEMORY[0x1E0C99620](alloc, bufferAllocator);
}

Boolean CFWriteStreamOpen(CFWriteStreamRef stream)
{
  return MEMORY[0x1E0C99650](stream);
}

CFIndex CFWriteStreamWrite(CFWriteStreamRef stream, const UInt8 *buffer, CFIndex bufferLength)
{
  return MEMORY[0x1E0C99688](stream, buffer, bufferLength);
}

CGAffineTransform *__cdecl CGAffineTransformConcat(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t1, CGAffineTransform *t2)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BA90](retstr, t1, t2);
}

CGAffineTransform *__cdecl CGAffineTransformInvert(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAB0](retstr, t);
}

BOOL CGAffineTransformIsIdentity(CGAffineTransform *t)
{
  return MEMORY[0x1E0C9BAB8](t);
}

CGAffineTransform *__cdecl CGAffineTransformMakeRotation(CGAffineTransform *__return_ptr retstr, CGFloat angle)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAD0](retstr, angle);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAD8](retstr, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformMakeTranslation(CGAffineTransform *__return_ptr retstr, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAE0](retstr, tx, ty);
}

CGAffineTransform *__cdecl CGAffineTransformScale(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAF8](retstr, t, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformTranslate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BB00](retstr, t, tx, ty);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x1E0C9BB10](data, width, height, bitsPerComponent, bytesPerRow, space, *(_QWORD *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x1E0C9BB20](context);
}

void *__cdecl CGBitmapContextGetData(CGContextRef context)
{
  return (void *)MEMORY[0x1E0C9BB70](context);
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x1E0C9BC78](space, components);
}

CGFloat CGColorGetAlpha(CGColorRef color)
{
  CGFloat result;

  MEMORY[0x1E0C9BCF8](color);
  return result;
}

CFTypeID CGColorGetTypeID(void)
{
  return MEMORY[0x1E0C9BD38]();
}

CFPropertyListRef CGColorSpaceCopyPropertyList(CGColorSpaceRef space)
{
  return (CFPropertyListRef)MEMORY[0x1E0C9BDC0](space);
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BE50](name);
}

CGColorSpaceRef CGColorSpaceCreateWithPropertyList(CFPropertyListRef plist)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BE60](plist);
}

CFStringRef CGColorSpaceGetName(CGColorSpaceRef space)
{
  return (CFStringRef)MEMORY[0x1E0C9BED0](space);
}

CFTypeID CGColorSpaceGetTypeID(void)
{
  return MEMORY[0x1E0C9BEF8]();
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
  MEMORY[0x1E0C9BF30](space);
}

BOOL CGColorSpaceSupportsOutput(CGColorSpaceRef space)
{
  return MEMORY[0x1E0C9BF40](space);
}

void CGContextAddPath(CGContextRef c, CGPathRef path)
{
  MEMORY[0x1E0C9BFD8](c, path);
}

void CGContextBeginTransparencyLayer(CGContextRef c, CFDictionaryRef auxiliaryInfo)
{
  MEMORY[0x1E0C9C008](c, auxiliaryInfo);
}

void CGContextClearRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C020](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextClipToRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C038](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextConcatCTM(CGContextRef c, CGAffineTransform *transform)
{
  MEMORY[0x1E0C9C050](c, transform);
}

void CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image)
{
  MEMORY[0x1E0C9C170](c, image, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextDrawPDFPage(CGContextRef c, CGPDFPageRef page)
{
  MEMORY[0x1E0C9C1A0](c, page);
}

void CGContextDrawPath(CGContextRef c, CGPathDrawingMode mode)
{
  MEMORY[0x1E0C9C1B8](c, *(_QWORD *)&mode);
}

void CGContextEndTransparencyLayer(CGContextRef c)
{
  MEMORY[0x1E0C9C200](c);
}

void CGContextRestoreGState(CGContextRef c)
{
  MEMORY[0x1E0C9C370](c);
}

void CGContextSaveGState(CGContextRef c)
{
  MEMORY[0x1E0C9C388](c);
}

void CGContextScaleCTM(CGContextRef c, CGFloat sx, CGFloat sy)
{
  MEMORY[0x1E0C9C390](c, sx, sy);
}

void CGContextSetAllowsFontSubpixelPositioning(CGContextRef c, BOOL allowsFontSubpixelPositioning)
{
  MEMORY[0x1E0C9C3A8](c, allowsFontSubpixelPositioning);
}

void CGContextSetAlpha(CGContextRef c, CGFloat alpha)
{
  MEMORY[0x1E0C9C3B8](c, alpha);
}

void CGContextSetInterpolationQuality(CGContextRef c, CGInterpolationQuality quality)
{
  MEMORY[0x1E0C9C458](c, *(_QWORD *)&quality);
}

void CGContextSetLineJoin(CGContextRef c, CGLineJoin join)
{
  MEMORY[0x1E0C9C478](c, *(_QWORD *)&join);
}

void CGContextSetLineWidth(CGContextRef c, CGFloat width)
{
  MEMORY[0x1E0C9C480](c, width);
}

void CGContextSetShouldSubpixelQuantizeFonts(CGContextRef c, BOOL shouldSubpixelQuantizeFonts)
{
  MEMORY[0x1E0C9C4F0](c, shouldSubpixelQuantizeFonts);
}

void CGContextTranslateCTM(CGContextRef c, CGFloat tx, CGFloat ty)
{
  MEMORY[0x1E0C9C588](c, tx, ty);
}

CGDataConsumerRef CGDataConsumerCreateWithCFData(CFMutableDataRef data)
{
  return (CGDataConsumerRef)MEMORY[0x1E0C9C5B0](data);
}

CGDataProviderRef CGDataProviderCreateWithCFData(CFDataRef data)
{
  return (CGDataProviderRef)MEMORY[0x1E0C9C5F0](data);
}

void CGDataProviderRelease(CGDataProviderRef provider)
{
  MEMORY[0x1E0C9C638](provider);
}

uint64_t CGEnterLockdownModeForPDF()
{
  return MEMORY[0x1E0C9C6B0]();
}

CGImageRef CGImageCreate(size_t width, size_t height, size_t bitsPerComponent, size_t bitsPerPixel, size_t bytesPerRow, CGColorSpaceRef space, CGBitmapInfo bitmapInfo, CGDataProviderRef provider, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return (CGImageRef)MEMORY[0x1E0C9CB80](width, height, bitsPerComponent, bitsPerPixel, bytesPerRow, space, *(_QWORD *)&bitmapInfo, provider);
}

CGImageRef CGImageCreateWithImageInRect(CGImageRef image, CGRect rect)
{
  return (CGImageRef)MEMORY[0x1E0C9CBA8](image, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGImageRef CGImageCreateWithPNGDataProvider(CGDataProviderRef source, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return (CGImageRef)MEMORY[0x1E0C9CBD0](source, decode, shouldInterpolate, *(_QWORD *)&intent);
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
  MEMORY[0x1E0CBC308](idst, image, properties);
}

CGImageDestinationRef CGImageDestinationCreateWithData(CFMutableDataRef data, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x1E0CBC338](data, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x1E0CBC358](idst);
}

CGColorSpaceRef CGImageGetColorSpace(CGImageRef image)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9CC20](image);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x1E0C9CC60](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x1E0C9CCD0](image);
}

void CGImageRelease(CGImageRef image)
{
  MEMORY[0x1E0C9CDA0](image);
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x1E0CBC568](isrc, index, options);
}

CGImageRef CGImageSourceCreateThumbnailAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x1E0CBC588](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithData(CFDataRef data, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x1E0CBC590](data, options);
}

CGImageSourceRef CGImageSourceCreateWithURL(CFURLRef url, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x1E0CBC5C0](url, options);
}

uint64_t CGImageSourceDisableHardwareDecoding()
{
  return MEMORY[0x1E0CBC5C8]();
}

uint64_t CGImageSourceEnableRestrictedDecoding()
{
  return MEMORY[0x1E0CBC5E0]();
}

size_t CGPDFArrayGetCount(CGPDFArrayRef array)
{
  return MEMORY[0x1E0C9CE88](array);
}

BOOL CGPDFArrayGetDictionary(CGPDFArrayRef array, size_t index, CGPDFDictionaryRef *value)
{
  return MEMORY[0x1E0C9CE90](array, index, value);
}

BOOL CGPDFArrayGetObject(CGPDFArrayRef array, size_t index, CGPDFObjectRef *value)
{
  return MEMORY[0x1E0C9CEA8](array, index, value);
}

void CGPDFContextBeginPage(CGContextRef context, CFDictionaryRef pageInfo)
{
  MEMORY[0x1E0C9CEC0](context, pageInfo);
}

void CGPDFContextClose(CGContextRef context)
{
  MEMORY[0x1E0C9CEC8](context);
}

CGContextRef CGPDFContextCreate(CGDataConsumerRef consumer, const CGRect *mediaBox, CFDictionaryRef auxiliaryInfo)
{
  return (CGContextRef)MEMORY[0x1E0C9CED0](consumer, mediaBox, auxiliaryInfo);
}

void CGPDFContextEndPage(CGContextRef context)
{
  MEMORY[0x1E0C9CEE0](context);
}

BOOL CGPDFDictionaryGetArray(CGPDFDictionaryRef dict, const char *key, CGPDFArrayRef *value)
{
  return MEMORY[0x1E0C9CEF8](dict, key, value);
}

BOOL CGPDFDictionaryGetDictionary(CGPDFDictionaryRef dict, const char *key, CGPDFDictionaryRef *value)
{
  return MEMORY[0x1E0C9CF00](dict, key, value);
}

BOOL CGPDFDictionaryGetName(CGPDFDictionaryRef dict, const char *key, const char **value)
{
  return MEMORY[0x1E0C9CF08](dict, key, value);
}

BOOL CGPDFDictionaryGetStream(CGPDFDictionaryRef dict, const char *key, CGPDFStreamRef *value)
{
  return MEMORY[0x1E0C9CF20](dict, key, value);
}

BOOL CGPDFDictionaryGetString(CGPDFDictionaryRef dict, const char *key, CGPDFStringRef *value)
{
  return MEMORY[0x1E0C9CF28](dict, key, value);
}

BOOL CGPDFDocumentAllowsPrinting(CGPDFDocumentRef document)
{
  return MEMORY[0x1E0C9CF38](document);
}

CGPDFDocumentRef CGPDFDocumentCreateWithProvider(CGDataProviderRef provider)
{
  return (CGPDFDocumentRef)MEMORY[0x1E0C9CF58](provider);
}

CGPDFDictionaryRef CGPDFDocumentGetCatalog(CGPDFDocumentRef document)
{
  return (CGPDFDictionaryRef)MEMORY[0x1E0C9CF70](document);
}

size_t CGPDFDocumentGetNumberOfPages(CGPDFDocumentRef document)
{
  return MEMORY[0x1E0C9CF98](document);
}

CGPDFPageRef CGPDFDocumentGetPage(CGPDFDocumentRef document, size_t pageNumber)
{
  return (CGPDFPageRef)MEMORY[0x1E0C9CFA0](document, pageNumber);
}

uint64_t CGPDFDocumentIsTaggedPDF()
{
  return MEMORY[0x1E0C9CFB8]();
}

BOOL CGPDFDocumentIsUnlocked(CGPDFDocumentRef document)
{
  return MEMORY[0x1E0C9CFC0](document);
}

BOOL CGPDFDocumentUnlockWithPassword(CGPDFDocumentRef document, const char *password)
{
  return MEMORY[0x1E0C9CFD8](document, password);
}

BOOL CGPDFObjectGetValue(CGPDFObjectRef object, CGPDFObjectType type, void *value)
{
  return MEMORY[0x1E0C9D070](object, *(_QWORD *)&type, value);
}

CGRect CGPDFPageGetBoxRect(CGPDFPageRef page, CGPDFBox box)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D090](page, *(_QWORD *)&box);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

CGAffineTransform *__cdecl CGPDFPageGetDrawingTransform(CGAffineTransform *__return_ptr retstr, CGPDFPageRef page, CGPDFBox box, CGRect rect, int rotate, BOOL preserveAspectRatio)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9D0A8](retstr, page, *(_QWORD *)&box, *(_QWORD *)&rotate, preserveAspectRatio, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

uint64_t CGPDFPageLayoutGetAreaOfInterestAtPoint()
{
  return MEMORY[0x1E0C9D0D8]();
}

CFDataRef CGPDFStreamCopyData(CGPDFStreamRef stream, CGPDFDataFormat *format)
{
  return (CFDataRef)MEMORY[0x1E0C9D260](stream, format);
}

const unsigned __int8 *__cdecl CGPDFStringGetBytePtr(CGPDFStringRef string)
{
  return (const unsigned __int8 *)MEMORY[0x1E0C9D270](string);
}

size_t CGPDFStringGetLength(CGPDFStringRef string)
{
  return MEMORY[0x1E0C9D278](string);
}

void CGPathAddLineToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D2A8](path, m, x, y);
}

void CGPathCloseSubpath(CGMutablePathRef path)
{
  MEMORY[0x1E0C9D310](path);
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return (CGMutablePathRef)MEMORY[0x1E0C9D388]();
}

void CGPathMoveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D490](path, m, x, y);
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D548](t, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

BOOL CGRectContainsPoint(CGRect rect, CGPoint point)
{
  return MEMORY[0x1E0C9D550]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, (__n128)point, *(__n128 *)&point.y);
}

BOOL CGRectContainsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D558]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D570]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D580]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D588]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5A0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5A8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5B0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5C0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5C8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5D0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGRect result;

  MEMORY[0x1E0C9D5E8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

CGRect CGRectIntegral(CGRect rect)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGRect result;

  MEMORY[0x1E0C9D5F0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D5F8]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

BOOL CGRectIntersectsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D600]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x1E0C9D608]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsNull(CGRect rect)
{
  return MEMORY[0x1E0C9D618]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGRect CGRectOffset(CGRect rect, CGFloat dx, CGFloat dy)
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGRect result;

  MEMORY[0x1E0C9D630]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

CGRect CGRectStandardize(CGRect rect)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGRect result;

  MEMORY[0x1E0C9D638]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

CGRect CGRectUnion(CGRect r1, CGRect r2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D640]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

CFTypeRef CTFontCopyAttribute(CTFontRef font, CFStringRef attribute)
{
  return (CFTypeRef)MEMORY[0x1E0CA7968](font, attribute);
}

DNSServiceErrorType DNSServiceCreateConnection(DNSServiceRef *sdRef)
{
  return MEMORY[0x1E0C80438](sdRef);
}

void DNSServiceRefDeallocate(DNSServiceRef sdRef)
{
  MEMORY[0x1E0C80490](sdRef);
}

DNSServiceErrorType DNSServiceRegisterRecord(DNSServiceRef sdRef, DNSRecordRef *RecordRef, DNSServiceFlags flags, uint32_t interfaceIndex, const char *fullname, uint16_t rrtype, uint16_t rrclass, uint16_t rdlen, const void *rdata, uint32_t ttl, DNSServiceRegisterRecordReply callBack, void *context)
{
  return MEMORY[0x1E0C804A8](sdRef, RecordRef, *(_QWORD *)&flags, *(_QWORD *)&interfaceIndex, fullname, rrtype, rrclass, rdlen);
}

DNSServiceErrorType DNSServiceSetDispatchQueue(DNSServiceRef service, dispatch_queue_t queue)
{
  return MEMORY[0x1E0C804C8](service, queue);
}

uint64_t GSCurrentEventTimestamp()
{
  return MEMORY[0x1E0D27AD0]();
}

uint64_t GSEventGetHardwareKeyboardCountry()
{
  return MEMORY[0x1E0D27B08]();
}

uint64_t GSEventGetHardwareKeyboardType()
{
  return MEMORY[0x1E0D27B10]();
}

uint64_t GSEventIsHardwareKeyboardAttached()
{
  return MEMORY[0x1E0D27B50]();
}

uint64_t GSEventSetHardwareKeyboardAttachedWithCountryCodeAndType()
{
  return MEMORY[0x1E0D27B98]();
}

uint64_t GSInitialize()
{
  return MEMORY[0x1E0D27BB8]();
}

uint64_t GSSystemRootDirectory()
{
  return MEMORY[0x1E0D27C80]();
}

IOReturn IOHIDDeviceClose(IOHIDDeviceRef device, IOOptionBits options)
{
  return MEMORY[0x1E0CBAE60](device, *(_QWORD *)&options);
}

IOReturn IOHIDDeviceOpen(IOHIDDeviceRef device, IOOptionBits options)
{
  return MEMORY[0x1E0CBAEB8](device, *(_QWORD *)&options);
}

void IOHIDDeviceRegisterInputReportCallback(IOHIDDeviceRef device, uint8_t *report, CFIndex reportLength, IOHIDReportCallback callback, void *context)
{
  MEMORY[0x1E0CBAEC0](device, report, reportLength, callback, context);
}

void IOHIDDeviceScheduleWithRunLoop(IOHIDDeviceRef device, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
  MEMORY[0x1E0CBAEE0](device, runLoop, runLoopMode);
}

IOReturn IOHIDDeviceSetReport(IOHIDDeviceRef device, IOHIDReportType reportType, CFIndex reportID, const uint8_t *report, CFIndex reportLength)
{
  return MEMORY[0x1E0CBAF10](device, *(_QWORD *)&reportType, reportID, report, reportLength);
}

void IOHIDDeviceUnscheduleFromRunLoop(IOHIDDeviceRef device, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
  MEMORY[0x1E0CBAF28](device, runLoop, runLoopMode);
}

uint64_t IOHIDEventAppendEvent()
{
  return MEMORY[0x1E0CBB008]();
}

uint64_t IOHIDEventCreateDigitizerEvent()
{
  return MEMORY[0x1E0CBB040]();
}

uint64_t IOHIDEventCreateDigitizerFingerEvent()
{
  return MEMORY[0x1E0CBB048]();
}

uint64_t IOHIDEventCreateVendorDefinedEvent()
{
  return MEMORY[0x1E0CBB0D0]();
}

uint64_t IOHIDEventGetIntegerValue()
{
  return MEMORY[0x1E0CBB130]();
}

uint64_t IOHIDEventGetType()
{
  return MEMORY[0x1E0CBB168]();
}

uint64_t IOHIDEventSetFloatValue()
{
  return MEMORY[0x1E0CBB1A8]();
}

uint64_t IOHIDEventSetIntegerValue()
{
  return MEMORY[0x1E0CBB1B0]();
}

uint64_t IOHIDEventSystemClientCreate()
{
  return MEMORY[0x1E0CBB1F0]();
}

IOReturn IOHIDManagerClose(IOHIDManagerRef manager, IOOptionBits options)
{
  return MEMORY[0x1E0CBB380](manager, *(_QWORD *)&options);
}

IOHIDManagerRef IOHIDManagerCreate(CFAllocatorRef allocator, IOOptionBits options)
{
  return (IOHIDManagerRef)MEMORY[0x1E0CBB3A0](allocator, *(_QWORD *)&options);
}

IOReturn IOHIDManagerOpen(IOHIDManagerRef manager, IOOptionBits options)
{
  return MEMORY[0x1E0CBB3B8](manager, *(_QWORD *)&options);
}

void IOHIDManagerRegisterDeviceMatchingCallback(IOHIDManagerRef manager, IOHIDDeviceCallback callback, void *context)
{
  MEMORY[0x1E0CBB3C0](manager, callback, context);
}

void IOHIDManagerRegisterDeviceRemovalCallback(IOHIDManagerRef manager, IOHIDDeviceCallback callback, void *context)
{
  MEMORY[0x1E0CBB3C8](manager, callback, context);
}

void IOHIDManagerScheduleWithRunLoop(IOHIDManagerRef manager, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
  MEMORY[0x1E0CBB3E0](manager, runLoop, runLoopMode);
}

void IOHIDManagerSetDeviceMatching(IOHIDManagerRef manager, CFDictionaryRef matching)
{
  MEMORY[0x1E0CBB3F0](manager, matching);
}

void IOHIDManagerUnscheduleFromRunLoop(IOHIDManagerRef manager, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
  MEMORY[0x1E0CBB428](manager, runLoop, runLoopMode);
}

mach_port_t IOSurfaceCreateMachPort(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBB00](buffer);
}

void *__cdecl IOSurfaceGetBaseAddress(IOSurfaceRef buffer)
{
  return (void *)MEMORY[0x1E0CBBB40](buffer);
}

kern_return_t IOSurfaceLock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x1E0CBBD28](buffer, *(_QWORD *)&options, seed);
}

IOSurfaceRef IOSurfaceLookupFromMachPort(mach_port_t port)
{
  return (IOSurfaceRef)MEMORY[0x1E0CBBD40](*(_QWORD *)&port);
}

kern_return_t IOSurfaceUnlock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x1E0CBBE88](buffer, *(_QWORD *)&options, seed);
}

uint64_t InitWebCoreThreadSystemInterface()
{
  return MEMORY[0x1E0DCDD50]();
}

JSClassRef JSClassCreate(const JSClassDefinition *definition)
{
  return (JSClassRef)MEMORY[0x1E0CBDDD0](definition);
}

JSGlobalContextRef JSContextGetGlobalContext(JSContextRef ctx)
{
  return (JSGlobalContextRef)MEMORY[0x1E0CBDDD8](ctx);
}

JSObjectRef JSContextGetGlobalObject(JSContextRef ctx)
{
  return (JSObjectRef)MEMORY[0x1E0CBDDE0](ctx);
}

JSValueRef JSEvaluateScript(JSContextRef ctx, JSStringRef script, JSObjectRef thisObject, JSStringRef sourceURL, int startingLineNumber, JSValueRef *exception)
{
  return (JSValueRef)MEMORY[0x1E0CBDDF8](ctx, script, thisObject, sourceURL, *(_QWORD *)&startingLineNumber, exception);
}

void JSGlobalContextRelease(JSGlobalContextRef ctx)
{
  MEMORY[0x1E0CBDE18](ctx);
}

JSGlobalContextRef JSGlobalContextRetain(JSGlobalContextRef ctx)
{
  return (JSGlobalContextRef)MEMORY[0x1E0CBDE20](ctx);
}

JSValueRef JSObjectCallAsFunction(JSContextRef ctx, JSObjectRef object, JSObjectRef thisObject, size_t argumentCount, const JSValueRef arguments[], JSValueRef *exception)
{
  return (JSValueRef)MEMORY[0x1E0CBDE30](ctx, object, thisObject, argumentCount, arguments, exception);
}

JSPropertyNameArrayRef JSObjectCopyPropertyNames(JSContextRef ctx, JSObjectRef object)
{
  return (JSPropertyNameArrayRef)MEMORY[0x1E0CBDE38](ctx, object);
}

void *__cdecl JSObjectGetPrivate(JSObjectRef object)
{
  return (void *)MEMORY[0x1E0CBDE58](object);
}

JSValueRef JSObjectGetProperty(JSContextRef ctx, JSObjectRef object, JSStringRef propertyName, JSValueRef *exception)
{
  return (JSValueRef)MEMORY[0x1E0CBDE60](ctx, object, propertyName, exception);
}

size_t JSObjectGetTypedArrayByteLength(JSContextRef ctx, JSObjectRef object, JSValueRef *exception)
{
  return MEMORY[0x1E0CBDE78](ctx, object, exception);
}

void *__cdecl JSObjectGetTypedArrayBytesPtr(JSContextRef ctx, JSObjectRef object, JSValueRef *exception)
{
  return (void *)MEMORY[0x1E0CBDE88](ctx, object, exception);
}

BOOL JSObjectIsFunction(JSContextRef ctx, JSObjectRef object)
{
  return MEMORY[0x1E0CBDEA8](ctx, object);
}

JSObjectRef JSObjectMake(JSContextRef ctx, JSClassRef jsClass, void *data)
{
  return (JSObjectRef)MEMORY[0x1E0CBDEB0](ctx, jsClass, data);
}

JSObjectRef JSObjectMakeArray(JSContextRef ctx, size_t argumentCount, const JSValueRef arguments[], JSValueRef *exception)
{
  return (JSObjectRef)MEMORY[0x1E0CBDEB8](ctx, argumentCount, arguments, exception);
}

JSObjectRef JSObjectMakeDeferredPromise(JSContextRef ctx, JSObjectRef *resolve, JSObjectRef *reject, JSValueRef *exception)
{
  return (JSObjectRef)MEMORY[0x1E0CBDEC8](ctx, resolve, reject, exception);
}

JSObjectRef JSObjectMakeError(JSContextRef ctx, size_t argumentCount, const JSValueRef arguments[], JSValueRef *exception)
{
  return (JSObjectRef)MEMORY[0x1E0CBDED0](ctx, argumentCount, arguments, exception);
}

JSObjectRef JSObjectMakeFunctionWithCallback(JSContextRef ctx, JSStringRef name, JSObjectCallAsFunctionCallback callAsFunction)
{
  return (JSObjectRef)MEMORY[0x1E0CBDED8](ctx, name, callAsFunction);
}

BOOL JSObjectSetPrivate(JSObjectRef object, void *data)
{
  return MEMORY[0x1E0CBDF08](object, data);
}

void JSObjectSetProperty(JSContextRef ctx, JSObjectRef object, JSStringRef propertyName, JSValueRef value, JSPropertyAttributes attributes, JSValueRef *exception)
{
  MEMORY[0x1E0CBDF10](ctx, object, propertyName, value, *(_QWORD *)&attributes, exception);
}

void JSPropertyNameAccumulatorAddName(JSPropertyNameAccumulatorRef accumulator, JSStringRef propertyName)
{
  MEMORY[0x1E0CBDF40](accumulator, propertyName);
}

size_t JSPropertyNameArrayGetCount(JSPropertyNameArrayRef array)
{
  return MEMORY[0x1E0CBDF48](array);
}

JSStringRef JSPropertyNameArrayGetNameAtIndex(JSPropertyNameArrayRef array, size_t index)
{
  return (JSStringRef)MEMORY[0x1E0CBDF50](array, index);
}

void JSPropertyNameArrayRelease(JSPropertyNameArrayRef array)
{
  MEMORY[0x1E0CBDF58](array);
}

uint64_t JSRemoteInspectorGetInspectionEnabledByDefault()
{
  return MEMORY[0x1E0CBDF60]();
}

uint64_t JSRemoteInspectorGetInspectionFollowsInternalPolicies()
{
  return MEMORY[0x1E0CBDF68]();
}

uint64_t JSRemoteInspectorSetInspectionEnabledByDefault()
{
  return MEMORY[0x1E0CBDF70]();
}

uint64_t JSRemoteInspectorSetInspectionFollowsInternalPolicies()
{
  return MEMORY[0x1E0CBDF78]();
}

CFStringRef JSStringCopyCFString(CFAllocatorRef alloc, JSStringRef string)
{
  return (CFStringRef)MEMORY[0x1E0CBDFA0](alloc, string);
}

JSStringRef JSStringCreateWithCFString(CFStringRef string)
{
  return (JSStringRef)MEMORY[0x1E0CBDFA8](string);
}

JSStringRef JSStringCreateWithUTF8CString(const char *string)
{
  return (JSStringRef)MEMORY[0x1E0CBDFB8](string);
}

BOOL JSStringIsEqualToUTF8CString(JSStringRef a, const char *b)
{
  return MEMORY[0x1E0CBDFE0](a, b);
}

void JSStringRelease(JSStringRef string)
{
  MEMORY[0x1E0CBDFE8](string);
}

JSStringRef JSStringRetain(JSStringRef string)
{
  return (JSStringRef)MEMORY[0x1E0CBDFF0](string);
}

JSStringRef JSValueCreateJSONString(JSContextRef ctx, JSValueRef value, unsigned int indent, JSValueRef *exception)
{
  return (JSStringRef)MEMORY[0x1E0CBDFF8](ctx, value, *(_QWORD *)&indent, exception);
}

JSTypedArrayType JSValueGetTypedArrayType(JSContextRef ctx, JSValueRef value, JSValueRef *exception)
{
  return MEMORY[0x1E0CBE008](ctx, value, exception);
}

BOOL JSValueIsArray(JSContextRef ctx, JSValueRef value)
{
  return MEMORY[0x1E0CBE010](ctx, value);
}

BOOL JSValueIsBoolean(JSContextRef ctx, JSValueRef value)
{
  return MEMORY[0x1E0CBE018](ctx, value);
}

BOOL JSValueIsNull(JSContextRef ctx, JSValueRef value)
{
  return MEMORY[0x1E0CBE028](ctx, value);
}

BOOL JSValueIsNumber(JSContextRef ctx, JSValueRef value)
{
  return MEMORY[0x1E0CBE030](ctx, value);
}

BOOL JSValueIsObject(JSContextRef ctx, JSValueRef value)
{
  return MEMORY[0x1E0CBE038](ctx, value);
}

BOOL JSValueIsObjectOfClass(JSContextRef ctx, JSValueRef value, JSClassRef jsClass)
{
  return MEMORY[0x1E0CBE040](ctx, value, jsClass);
}

BOOL JSValueIsString(JSContextRef ctx, JSValueRef value)
{
  return MEMORY[0x1E0CBE048](ctx, value);
}

BOOL JSValueIsUndefined(JSContextRef ctx, JSValueRef value)
{
  return MEMORY[0x1E0CBE050](ctx, value);
}

JSValueRef JSValueMakeBoolean(JSContextRef ctx, BOOL BOOLean)
{
  return (JSValueRef)MEMORY[0x1E0CBE058](ctx, BOOLean);
}

JSValueRef JSValueMakeNull(JSContextRef ctx)
{
  return (JSValueRef)MEMORY[0x1E0CBE068](ctx);
}

JSValueRef JSValueMakeNumber(JSContextRef ctx, double number)
{
  return (JSValueRef)MEMORY[0x1E0CBE070](ctx, number);
}

JSValueRef JSValueMakeString(JSContextRef ctx, JSStringRef string)
{
  return (JSValueRef)MEMORY[0x1E0CBE078](ctx, string);
}

JSValueRef JSValueMakeUndefined(JSContextRef ctx)
{
  return (JSValueRef)MEMORY[0x1E0CBE080](ctx);
}

void JSValueProtect(JSContextRef ctx, JSValueRef value)
{
  MEMORY[0x1E0CBE088](ctx, value);
}

BOOL JSValueToBoolean(JSContextRef ctx, JSValueRef value)
{
  return MEMORY[0x1E0CBE090](ctx, value);
}

double JSValueToNumber(JSContextRef ctx, JSValueRef value, JSValueRef *exception)
{
  double result;

  MEMORY[0x1E0CBE098](ctx, value, exception);
  return result;
}

JSObjectRef JSValueToObject(JSContextRef ctx, JSValueRef value, JSValueRef *exception)
{
  return (JSObjectRef)MEMORY[0x1E0CBE0A0](ctx, value, exception);
}

JSStringRef JSValueToStringCopy(JSContextRef ctx, JSValueRef value, JSValueRef *exception)
{
  return (JSStringRef)MEMORY[0x1E0CBE0A8](ctx, value, exception);
}

void JSValueUnprotect(JSContextRef ctx, JSValueRef value)
{
  MEMORY[0x1E0CBE0B0](ctx, value);
}

uint64_t JSWeakObjectMapCreate()
{
  return MEMORY[0x1E0CBE0C8]();
}

uint64_t JSWeakObjectMapGet()
{
  return MEMORY[0x1E0CBE0D0]();
}

uint64_t JSWeakObjectMapRemove()
{
  return MEMORY[0x1E0CBE0D8]();
}

uint64_t JSWeakObjectMapSet()
{
  return MEMORY[0x1E0CBE0E0]();
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1E0DE2B20]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1E0DE2B50]();
}

uint64_t MGGetFloat32Answer()
{
  return MEMORY[0x1E0DE2B58]();
}

uint64_t MGGetSInt32Answer()
{
  return MEMORY[0x1E0DE2B70]();
}

uint64_t MKBDeviceUnlockedSinceBoot()
{
  return MEMORY[0x1E0D4E4A0]();
}

id MTLCreateSystemDefaultDevice(void)
{
  return (id)MEMORY[0x1E0CC6980]();
}

uint64_t MTLSetShaderCachePath()
{
  return MEMORY[0x1E0CC69F0]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1E0CB28A0](aClassName);
}

NSString *NSHomeDirectory(void)
{
  return (NSString *)MEMORY[0x1E0CB2C00]();
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x1E0CB2D88](format);
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  return (NSArray *)MEMORY[0x1E0CB3178](directory, domainMask, expandTilde);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1E0CB3190](aSelectorName);
}

NSString *__cdecl NSStringFromCGRect(CGRect rect)
{
  return (NSString *)MEMORY[0x1E0CEA110]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

NSString *__cdecl NSStringFromCGSize(CGSize size)
{
  return (NSString *)MEMORY[0x1E0CEA118]((__n128)size, *(__n128 *)&size.height);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1E0CB3200](aClass);
}

NSString *__cdecl NSStringFromProtocol(Protocol *proto)
{
  return (NSString *)MEMORY[0x1E0CB3218](proto);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1E0CB3230](aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1E0CB3250]();
}

uint64_t SecAccessControlCopyData()
{
  return MEMORY[0x1E0CD5E90]();
}

uint64_t SecAccessControlCreateFromData()
{
  return MEMORY[0x1E0CD5EA0]();
}

SecAccessControlRef SecAccessControlCreateWithFlags(CFAllocatorRef allocator, CFTypeRef protection, SecAccessControlCreateFlags flags, CFErrorRef *error)
{
  return (SecAccessControlRef)MEMORY[0x1E0CD5EA8](allocator, protection, flags, error);
}

CFTypeID SecAccessControlGetTypeID(void)
{
  return MEMORY[0x1E0CD5ED0]();
}

CFDataRef SecCertificateCopyData(SecCertificateRef certificate)
{
  return (CFDataRef)MEMORY[0x1E0CD5F60](certificate);
}

SecCertificateRef SecCertificateCreateWithData(CFAllocatorRef allocator, CFDataRef data)
{
  return (SecCertificateRef)MEMORY[0x1E0CD6010](allocator, data);
}

CFTypeID SecCertificateGetTypeID(void)
{
  return MEMORY[0x1E0CD6050]();
}

OSStatus SecCodeCopySigningInformation(SecStaticCodeRef code, SecCSFlags flags, CFDictionaryRef *information)
{
  return MEMORY[0x1E0CD61F0](code, *(_QWORD *)&flags, information);
}

OSStatus SecIdentityCopyCertificate(SecIdentityRef identityRef, SecCertificateRef *certificateRef)
{
  return MEMORY[0x1E0CD6270](identityRef, certificateRef);
}

OSStatus SecIdentityCopyPrivateKey(SecIdentityRef identityRef, SecKeyRef *privateKeyRef)
{
  return MEMORY[0x1E0CD6278](identityRef, privateKeyRef);
}

CFTypeID SecIdentityGetTypeID(void)
{
  return MEMORY[0x1E0CD6288]();
}

OSStatus SecItemAdd(CFDictionaryRef attributes, CFTypeRef *result)
{
  return MEMORY[0x1E0CD6290](attributes, result);
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return MEMORY[0x1E0CD6298](query, result);
}

OSStatus SecItemDelete(CFDictionaryRef query)
{
  return MEMORY[0x1E0CD62A0](query);
}

OSStatus SecItemUpdate(CFDictionaryRef query, CFDictionaryRef attributesToUpdate)
{
  return MEMORY[0x1E0CD62D8](query, attributesToUpdate);
}

CFDataRef SecKeyCopyExternalRepresentation(SecKeyRef key, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1E0CD62F8](key, error);
}

SecKeyRef SecKeyCopyPublicKey(SecKeyRef key)
{
  return (SecKeyRef)MEMORY[0x1E0CD6318](key);
}

SecKeyRef SecKeyCreateRandomKey(CFDictionaryRef parameters, CFErrorRef *error)
{
  return (SecKeyRef)MEMORY[0x1E0CD6388](parameters, error);
}

CFDataRef SecKeyCreateSignature(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef dataToSign, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1E0CD6390](key, algorithm, dataToSign, error);
}

SecKeyRef SecKeyCreateWithData(CFDataRef keyData, CFDictionaryRef attributes, CFErrorRef *error)
{
  return (SecKeyRef)MEMORY[0x1E0CD63A0](keyData, attributes, error);
}

SecPolicyRef SecPolicyCreateBasicX509(void)
{
  return (SecPolicyRef)MEMORY[0x1E0CD64D8]();
}

OSStatus SecStaticCodeCreateWithPath(CFURLRef path, SecCSFlags flags, SecStaticCodeRef *staticCode)
{
  return MEMORY[0x1E0CD65D0](path, *(_QWORD *)&flags, staticCode);
}

CFStringRef SecTaskCopySigningIdentifier(SecTaskRef task, CFErrorRef *error)
{
  return (CFStringRef)MEMORY[0x1E0CD65E0](task, error);
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x1E0CD65F0](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x1E0CD6610](allocator);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return (SecTaskRef)MEMORY[0x1E0CD6620](allocator, token);
}

uint32_t SecTaskGetCodeSignStatus(SecTaskRef task)
{
  return MEMORY[0x1E0CD6638](task);
}

CFArrayRef SecTrustCopyCertificateChain(SecTrustRef trust)
{
  return (CFArrayRef)MEMORY[0x1E0CD6648](trust);
}

uint64_t SecTrustCopyInfo()
{
  return MEMORY[0x1E0CD6668]();
}

OSStatus SecTrustCreateWithCertificates(CFTypeRef certificates, CFTypeRef policies, SecTrustRef *trust)
{
  return MEMORY[0x1E0CD6698](certificates, policies, trust);
}

uint64_t SecTrustDeserialize()
{
  return MEMORY[0x1E0CD66A0]();
}

BOOL SecTrustEvaluateWithError(SecTrustRef trust, CFErrorRef *error)
{
  return MEMORY[0x1E0CD66C8](trust, error);
}

CFTypeID SecTrustGetTypeID(void)
{
  return MEMORY[0x1E0CD66F0]();
}

uint64_t SecTrustSerialize()
{
  return MEMORY[0x1E0CD6708]();
}

uint64_t SecTrustSetClientAuditToken()
{
  return MEMORY[0x1E0CD6720]();
}

uint64_t TZoneInit()
{
  return MEMORY[0x1E0CBE118]();
}

uint64_t TZoneRegistrationDone()
{
  return MEMORY[0x1E0CBE120]();
}

uint64_t UIEdgeInsetsAdd()
{
  return MEMORY[0x1E0CEB480]();
}

void UIGraphicsBeginImageContextWithOptions(CGSize size, BOOL opaque, CGFloat scale)
{
  MEMORY[0x1E0CEB630](opaque, (__n128)size, *(__n128 *)&size.height, scale);
}

void UIGraphicsEndImageContext(void)
{
  MEMORY[0x1E0CEB638]();
}

CGContextRef UIGraphicsGetCurrentContext(void)
{
  return (CGContextRef)MEMORY[0x1E0CEB640]();
}

UIImage *UIGraphicsGetImageFromCurrentImageContext(void)
{
  return (UIImage *)MEMORY[0x1E0CEB648]();
}

uint64_t UIImageDataWriteToSavedPhotosAlbum()
{
  return MEMORY[0x1E0CEB668]();
}

NSData *__cdecl UIImageJPEGRepresentation(UIImage *image, CGFloat compressionQuality)
{
  return (NSData *)MEMORY[0x1E0CEB680](image, compressionQuality);
}

NSData *__cdecl UIImagePNGRepresentation(UIImage *image)
{
  return (NSData *)MEMORY[0x1E0CEB688](image);
}

uint64_t UIKeyboardEnabledInputModesAllowChineseTransliterationForText()
{
  return MEMORY[0x1E0CEB850]();
}

uint64_t UIKeyboardEnabledInputModesAllowOneToManyShortcuts()
{
  return MEMORY[0x1E0CEB858]();
}

uint64_t UIKeyboardIsRightToLeftInputModeActive()
{
  return MEMORY[0x1E0CEB8C0]();
}

void UIRectFill(CGRect rect)
{
  MEMORY[0x1E0CEBAD0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

Boolean UTTypeConformsTo(CFStringRef inUTI, CFStringRef inConformsToUTI)
{
  return MEMORY[0x1E0CA5940](inUTI, inConformsToUTI);
}

CFStringRef UTTypeCopyPreferredTagWithClass(CFStringRef inUTI, CFStringRef inTagClass)
{
  return (CFStringRef)MEMORY[0x1E0CA5970](inUTI, inTagClass);
}

CFStringRef UTTypeCreatePreferredIdentifierForTag(CFStringRef inTagClass, CFStringRef inTag, CFStringRef inConformingToUTI)
{
  return (CFStringRef)MEMORY[0x1E0CA5980](inTagClass, inTag, inConformingToUTI);
}

Boolean UTTypeIsDeclared(CFStringRef inUTI)
{
  return MEMORY[0x1E0CA5990](inUTI);
}

Boolean UTTypeIsDynamic(CFStringRef inUTI)
{
  return MEMORY[0x1E0CA5998](inUTI);
}

uint64_t WTFCurrentContinuousTime()
{
  return MEMORY[0x1E0CBE128]();
}

uint64_t WTFLogAlways()
{
  return MEMORY[0x1E0CBE138]();
}

uint64_t WTFSignpostHandleIndirectLog()
{
  return MEMORY[0x1E0CBE148]();
}

uint64_t WTFSignpostLogHandle()
{
  return MEMORY[0x1E0CBE158]();
}

uint64_t _AXDarkenSystemColorsApp()
{
  return MEMORY[0x1E0DDD4A8]();
}

uint64_t _AXSApplicationAccessibilityEnabled()
{
  return MEMORY[0x1E0DDD550]();
}

uint64_t _AXSApplicationAccessibilitySetEnabled()
{
  return MEMORY[0x1E0DDD558]();
}

uint64_t _AXSEnhanceTextLegibilityEnabled()
{
  return MEMORY[0x1E0DDD710]();
}

uint64_t _AXSEnhanceTextLegibilityEnabledApp()
{
  return MEMORY[0x1E0DDD720]();
}

uint64_t _AXSFullKeyboardAccessEnabled()
{
  return MEMORY[0x1E0DDD760]();
}

uint64_t _AXSIncreaseButtonLegibilityApp()
{
  return MEMORY[0x1E0DDD998]();
}

uint64_t _AXSInvertColorsEnabledApp()
{
  return MEMORY[0x1E0DDD9B0]();
}

uint64_t _AXSInvertColorsSetEnabledApp()
{
  return MEMORY[0x1E0DDD9C8]();
}

uint64_t _AXSPrefersNonBlinkingCursorIndicator()
{
  return MEMORY[0x1E0DDDAD8]();
}

uint64_t _AXSReduceMotionEnabledApp()
{
  return MEMORY[0x1E0DDDB28]();
}

uint64_t _AXSSetDarkenSystemColorsApp()
{
  return MEMORY[0x1E0DDDBE0]();
}

uint64_t _AXSSetEnhanceTextLegibilityEnabledApp()
{
  return MEMORY[0x1E0DDDBF8]();
}

uint64_t _AXSSetIncreaseButtonLegibilityApp()
{
  return MEMORY[0x1E0DDDC30]();
}

uint64_t _AXSSetReduceMotionEnabledApp()
{
  return MEMORY[0x1E0DDDC88]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
  MEMORY[0x1E0C80940](a1, a2, *(_QWORD *)&a3);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

const char *__cdecl _Block_signature(void *aBlock)
{
  return (const char *)MEMORY[0x1E0C80960](aBlock);
}

uint64_t _CFBundleSetupXPCBootstrap()
{
  return MEMORY[0x1E0C9A050]();
}

uint64_t _CFNetworkCopyATSContext()
{
  return MEMORY[0x1E0C92EC8]();
}

uint64_t _CFNetworkHTTPConnectionCacheSetLimit()
{
  return MEMORY[0x1E0C92F08]();
}

uint64_t _CFNetworkIsKnownHSTSHostWithSession()
{
  return MEMORY[0x1E0C92F10]();
}

uint64_t _CFNetworkSetATSContext()
{
  return MEMORY[0x1E0C92F20]();
}

uint64_t _CFPrefsSetDirectModeEnabled()
{
  return MEMORY[0x1E0C9A3C8]();
}

uint64_t _CFPrefsSetReadOnly()
{
  return MEMORY[0x1E0C9A3D0]();
}

uint64_t _CFURLConnectionSetFrameworkStubs()
{
  return MEMORY[0x1E0C92F50]();
}

uint64_t _CFURLStorageSessionCopyCookieStorage()
{
  return MEMORY[0x1E0C92F90]();
}

uint64_t _MGCacheValid()
{
  return MEMORY[0x1E0DE2C88]();
}

int _NSGetExecutablePath(char *buf, uint32_t *bufsize)
{
  return MEMORY[0x1E0C809D8](buf, bufsize);
}

char **_NSGetProgname(void)
{
  return (char **)MEMORY[0x1E0C809E8]();
}

uint64_t _UIApplicationIsExtension()
{
  return MEMORY[0x1E0CEBEE0]();
}

uint64_t _UIDragInteractionDefaultLiftDelay()
{
  return MEMORY[0x1E0CEBF58]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

uint64_t WTFCrashWithInfoImpl(uint64_t a1, const char *a2, const char *a3)
{
  return MEMORY[0x1E0CBE180](a1, a2, a3);
}

{
  return MEMORY[0x1E0CBE188](a1, a2, a3);
}

{
  return MEMORY[0x1E0CBE190](a1, a2, a3);
}

uint64_t WTFCrashWithInfoImpl(uint64_t a1, const char *a2, const char *a3, int a4, unint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8, unint64_t a9, unint64_t a10)
{
  return MEMORY[0x1E0CBE198](a1, a2, a3);
}

uint64_t ReportBlockedObjCException(NSException *a1)
{
  return MEMORY[0x1E0CBE1A0](a1);
}

uint64_t suggestedFilenameWithMIMEType(NSURL *a1, const WTF::String *a2)
{
  return MEMORY[0x1E0DCDE90](a1, a2);
}

uint64_t WebCoreObjCScheduleDeallocateOnMainThread(objc_class *a1, objc_object *a2)
{
  return MEMORY[0x1E0DCDEA0](a1, a2);
}

uint64_t WebCoreObjCScheduleDeallocateOnMainRunLoop(objc_class *a1, objc_object *a2)
{
  return MEMORY[0x1E0DCDEA8](a1, a2);
}

uint64_t OpaqueJSString::tryCreate()
{
  return MEMORY[0x1E0CBE1B0]();
}

uint64_t OpaqueJSString::tryCreate(OpaqueJSString *this, const WTF::String *a2)
{
  return MEMORY[0x1E0CBE1B8](this, a2);
}

void OpaqueJSString::~OpaqueJSString(OpaqueJSString *this)
{
  MEMORY[0x1E0CBE1C0](this);
}

uint64_t JSC::initialize(JSC *this)
{
  return MEMORY[0x1E0CBE220](this);
}

uint64_t JSC::jsToNumber()
{
  return MEMORY[0x1E0CBE228]();
}

uint64_t JSC::ArrayBuffer::tryCreateUninitialized(JSC::ArrayBuffer *this)
{
  return MEMORY[0x1E0CBE248](this);
}

uint64_t JSC::ArrayBuffer::create()
{
  return MEMORY[0x1E0CBE250]();
}

uint64_t JSC::ArrayBuffer::create(JSC::ArrayBuffer *this)
{
  return MEMORY[0x1E0CBE268](this);
}

uint64_t JSC::ArrayBuffer::tryCreate()
{
  return MEMORY[0x1E0CBE278]();
}

uint64_t JSC::JSLockHolder::JSLockHolder()
{
  return MEMORY[0x1E0CBE2F0]();
}

{
  return MEMORY[0x1E0CBE300]();
}

void JSC::JSLockHolder::~JSLockHolder(JSC::JSLockHolder *this)
{
  MEMORY[0x1E0CBE308](this);
}

uint64_t JSC::throwTypeError()
{
  return MEMORY[0x1E0CBE510]();
}

uint64_t JSC::ArrayBufferView::ArrayBufferView()
{
  return MEMORY[0x1E0CBE538]();
}

uint64_t JSC::ArrayBufferView::operator delete()
{
  return MEMORY[0x1E0CBE540]();
}

uint64_t JSC::SamplingProfiler::reportTopBytecodes()
{
  return MEMORY[0x1E0CBE5E8]();
}

uint64_t JSC::SamplingProfiler::reportTopFunctions()
{
  return MEMORY[0x1E0CBE5F0]();
}

uint64_t JSC::JSArrayBufferView::possiblySharedImpl(JSC::JSArrayBufferView *this)
{
  return MEMORY[0x1E0CBE650](this);
}

uint64_t JSC::JSArrayBufferView::slowDownAndWasteMemory(JSC::JSArrayBufferView *this)
{
  return MEMORY[0x1E0CBE668](this);
}

uint64_t JSC::processConfigFile(JSC *this, const char *a2, const char *a3, const char *a4)
{
  return MEMORY[0x1E0CBE6B8](this, a2, a3, a4);
}

void JSC::BufferMemoryHandle::~BufferMemoryHandle(JSC::BufferMemoryHandle *this)
{
  MEMORY[0x1E0CBE6C0](this);
}

uint64_t JSC::ArrayBufferContents::fromSpan()
{
  return MEMORY[0x1E0CBE6E8]();
}

uint64_t JSC::ExecutableAllocator::disableJIT(JSC::ExecutableAllocator *this)
{
  return MEMORY[0x1E0CBE6F8](this);
}

uint64_t JSC::InlineWatchpointSet::freeFat(JSC::InlineWatchpointSet *this)
{
  return MEMORY[0x1E0CBE730](this);
}

uint64_t JSC::globalMemoryStatistics(JSC *this)
{
  return MEMORY[0x1E0CBE7F8](this);
}

void JSC::SharedArrayBufferContents::~SharedArrayBufferContents(JSC::SharedArrayBufferContents *this)
{
  MEMORY[0x1E0CBE848](this);
}

uint64_t JSC::VM::hasExceptionsAfterHandlingTraps(JSC::VM *this)
{
  return MEMORY[0x1E0CBE900](this);
}

void JSC::VM::~VM(JSC::VM *this)
{
  MEMORY[0x1E0CBE938](this);
}

uint64_t JSC::Heap::objectCount(JSC::Heap *this)
{
  return MEMORY[0x1E0CBE998](this);
}

uint64_t JSC::Heap::size(JSC::Heap *this)
{
  return MEMORY[0x1E0CBEA60](this);
}

uint64_t JSC::Heap::capacity(JSC::Heap *this)
{
  return MEMORY[0x1E0CBEA70](this);
}

void JSC::Wasm::Module::~Module(JSC::Wasm::Module *this)
{
  MEMORY[0x1E0CBEAC8](this);
}

uint64_t JSC::Yarr::RegularExpression::RegularExpression()
{
  return MEMORY[0x1E0CBEAE0]();
}

uint64_t JSC::Config::enableRestrictedOptions(JSC::Config *this)
{
  return MEMORY[0x1E0CBEB38](this);
}

uint64_t JSC::Options::initialize(JSC::Options *this)
{
  return MEMORY[0x1E0CBEB90](this);
}

uint64_t JSC::Options::notifyOptionsChanged(JSC::Options *this)
{
  return MEMORY[0x1E0CBEB98](this);
}

uint64_t JSC::VMTraps::fireTrap(JSC::VMTraps *this)
{
  return MEMORY[0x1E0CBEC20](this);
}

uint64_t JSC::JSObject::fillGetterPropertySlot()
{
  return MEMORY[0x1E0CBEDA0]();
}

uint64_t JSC::JSObject::getOwnStaticPropertySlot()
{
  return MEMORY[0x1E0CBEDD0]();
}

uint64_t JSC::Structure::materializePropertyTable(JSC::Structure *this, JSC::VM *a2)
{
  return MEMORY[0x1E0CBEED0](this, a2);
}

uint64_t PAL::systemBeep(PAL *this)
{
  return MEMORY[0x1E0DCDEB0](this);
}

uint64_t PAL::CryptoDigest::computeHash(PAL::CryptoDigest *this)
{
  return MEMORY[0x1E0DCDEB8](this);
}

uint64_t PAL::CryptoDigest::create()
{
  return MEMORY[0x1E0DCDEC0]();
}

uint64_t PAL::CryptoDigest::addBytes()
{
  return MEMORY[0x1E0DCDEC8]();
}

void PAL::CryptoDigest::~CryptoDigest(PAL::CryptoDigest *this)
{
  MEMORY[0x1E0DCDED0](this);
}

uint64_t PAL::TextEncoding::TextEncoding(PAL::TextEncoding *this, const char *a2)
{
  return MEMORY[0x1E0DCDED8](this, a2);
}

uint64_t PAL::TextEncoding::TextEncoding(PAL::TextEncoding *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DCDEE0](this, a2);
}

uint64_t PAL::ContactsLibrary(PAL *this)
{
  return MEMORY[0x1E0DCDF00](this);
}

uint64_t PAL::RevealCoreLibrary(PAL *this)
{
  return MEMORY[0x1E0DCDF20](this);
}

uint64_t PAL::WebPrivacyLibrary(PAL *this)
{
  return MEMORY[0x1E0DCDF28](this);
}

uint64_t PAL::PassKitCoreLibrary(PAL *this)
{
  return MEMORY[0x1E0DCDF48](this);
}

uint64_t PAL::SleepDisablerCocoa::setScreenWakeLockHandler()
{
  return MEMORY[0x1E0DCDF50]();
}

uint64_t PAL::AVFoundationLibrary(PAL *this)
{
  return MEMORY[0x1E0DCDF60](this);
}

uint64_t PAL::VideoToolboxLibrary(PAL *this)
{
  return MEMORY[0x1E0DCDF68](this);
}

uint64_t PAL::VisionKitCoreLibrary(PAL *this)
{
  return MEMORY[0x1E0DCDF78](this);
}

uint64_t PAL::isLockdownModeEnabled(PAL *this)
{
  return MEMORY[0x1E0DCDFA8](this);
}

uint64_t PAL::registerNotifyCallback()
{
  return MEMORY[0x1E0DCDFC8]();
}

uint64_t PAL::deviceHasIPadCapability(PAL *this)
{
  return MEMORY[0x1E0DCDFD0](this);
}

uint64_t PAL::DataDetectorsCoreLibrary(PAL *this)
{
  return MEMORY[0x1E0DCE000](this);
}

uint64_t PAL::deviceClassIsSmallScreen(PAL *this)
{
  return MEMORY[0x1E0DCE010](this);
}

uint64_t PAL::get_AppSSO_SOErrorDomain(PAL *this)
{
  return MEMORY[0x1E0DCE040](this);
}

uint64_t PAL::currentUserInterfaceIdiom(PAL *this)
{
  return MEMORY[0x1E0DCE048](this);
}

uint64_t PAL::get_CoreMedia_kCMTimeZero(PAL *this)
{
  return MEMORY[0x1E0DCE058](this);
}

uint64_t PAL::TranslationUIServicesLibrary(PAL *this)
{
  return MEMORY[0x1E0DCE098](this);
}

uint64_t PAL::setCurrentUserInterfaceIdiom()
{
  return MEMORY[0x1E0DCE0A8]();
}

uint64_t PAL::get_Contacts_CNContactNoteKey(PAL *this)
{
  return MEMORY[0x1E0DCE0F0](this);
}

uint64_t PAL::get_Contacts_CNContactDatesKey(PAL *this)
{
  return MEMORY[0x1E0DCE100](this);
}

uint64_t PAL::updateCurrentUserInterfaceIdiom(PAL *this)
{
  return MEMORY[0x1E0DCE110](this);
}

uint64_t PAL::currentUserInterfaceIdiomIsVision(PAL *this)
{
  return MEMORY[0x1E0DCE138](this);
}

uint64_t PAL::get_AVFoundation_AVMediaTypeAudio(PAL *this)
{
  return MEMORY[0x1E0DCE148](this);
}

uint64_t PAL::get_AVFoundation_AVMediaTypeVideo(PAL *this)
{
  return MEMORY[0x1E0DCE150](this);
}

uint64_t PAL::get_Contacts_CNContactBirthdayKey(PAL *this)
{
  return MEMORY[0x1E0DCE158](this);
}

uint64_t PAL::get_Contacts_CNContactJobTitleKey(PAL *this)
{
  return MEMORY[0x1E0DCE160](this);
}

uint64_t PAL::get_Contacts_CNContactNicknameKey(PAL *this)
{
  return MEMORY[0x1E0DCE168](this);
}

uint64_t PAL::get_Contacts_CNContactGivenNameKey(PAL *this)
{
  return MEMORY[0x1E0DCE180](this);
}

uint64_t PAL::get_PassKitCore_PKContactFieldName(PAL *this)
{
  return MEMORY[0x1E0DCE188](this);
}

uint64_t PAL::get_Contacts_CNContactFamilyNameKey(PAL *this)
{
  return MEMORY[0x1E0DCE1A0](this);
}

uint64_t PAL::get_Contacts_CNContactMiddleNameKey(PAL *this)
{
  return MEMORY[0x1E0DCE1A8](this);
}

uint64_t PAL::get_Contacts_CNContactNamePrefixKey(PAL *this)
{
  return MEMORY[0x1E0DCE1B0](this);
}

uint64_t PAL::get_Contacts_CNContactNameSuffixKey(PAL *this)
{
  return MEMORY[0x1E0DCE1B8](this);
}

uint64_t PAL::canLoad_QuartzCore_CAIOSurfaceCreate(PAL *this)
{
  return MEMORY[0x1E0DCE1C0](this);
}

uint64_t PAL::get_PassKitCore_PKPassKitErrorDomain(PAL *this)
{
  return MEMORY[0x1E0DCE1E0](this);
}

uint64_t PAL::get_PassKitCore_PKPaymentErrorDomain(PAL *this)
{
  return MEMORY[0x1E0DCE1E8](this);
}

uint64_t PAL::get_Contacts_CNContactPhoneNumbersKey(PAL *this)
{
  return MEMORY[0x1E0DCE1F8](this);
}

uint64_t PAL::get_Contacts_CNContactUrlAddressesKey(PAL *this)
{
  return MEMORY[0x1E0DCE200](this);
}

uint64_t PAL::currentUserInterfaceIdiomIsSmallScreen(PAL *this)
{
  return MEMORY[0x1E0DCE208](this);
}

uint64_t PAL::get_Contacts_CNContactDepartmentNameKey(PAL *this)
{
  return MEMORY[0x1E0DCE218](this);
}

uint64_t PAL::get_Contacts_CNContactEmailAddressesKey(PAL *this)
{
  return MEMORY[0x1E0DCE220](this);
}

uint64_t PAL::defaultTextEncodingNameForSystemLanguage(PAL *this)
{
  return MEMORY[0x1E0DCE228](this);
}

uint64_t PAL::get_Contacts_CNContactPostalAddressesKey(PAL *this)
{
  return MEMORY[0x1E0DCE240](this);
}

uint64_t PAL::get_AVFoundation_AVFileTypeQuickTimeMovie(PAL *this)
{
  return MEMORY[0x1E0DCE248](this);
}

uint64_t PAL::get_Contacts_CNContactOrganizationNameKey(PAL *this)
{
  return MEMORY[0x1E0DCE250](this);
}

uint64_t PAL::get_PassKitCore_PKContactFieldPhoneNumber(PAL *this)
{
  return MEMORY[0x1E0DCE258](this);
}

uint64_t PAL::get_PassKitCore_PKDisbursementErrorDomain(PAL *this)
{
  return MEMORY[0x1E0DCE260](this);
}

uint64_t PAL::get_Contacts_CNContactPhoneticGivenNameKey(PAL *this)
{
  return MEMORY[0x1E0DCE268](this);
}

uint64_t PAL::get_PassKitCore_PKContactFieldEmailAddress(PAL *this)
{
  return MEMORY[0x1E0DCE270](this);
}

uint64_t PAL::get_PassKitCore_PKContactFieldPhoneticName(PAL *this)
{
  return MEMORY[0x1E0DCE278](this);
}

uint64_t PAL::get_PassKitCore_PKMerchantCategoryCodeNone(PAL *this)
{
  return MEMORY[0x1E0DCE280](this);
}

uint64_t PAL::get_Contacts_CNContactPhoneticFamilyNameKey(PAL *this)
{
  return MEMORY[0x1E0DCE290](this);
}

uint64_t PAL::get_Contacts_CNContactPhoneticMiddleNameKey(PAL *this)
{
  return MEMORY[0x1E0DCE298](this);
}

uint64_t PAL::get_Contacts_CNContactPreviousFamilyNameKey(PAL *this)
{
  return MEMORY[0x1E0DCE2A0](this);
}

uint64_t PAL::get_PassKitCore_PKContactFieldPostalAddress(PAL *this)
{
  return MEMORY[0x1E0DCE2A8](this);
}

uint64_t PAL::canLoad_VideoToolbox_VTRestrictVideoDecoders(PAL *this)
{
  return MEMORY[0x1E0DCE2B8](this);
}

uint64_t PAL::get_Contacts_CNContactNonGregorianBirthdayKey(PAL *this)
{
  return MEMORY[0x1E0DCE2E0](this);
}

uint64_t PAL::get_DataDetectorsUI_kDataDetectorsLeadingText(PAL *this)
{
  return MEMORY[0x1E0DCE2E8](this);
}

uint64_t PAL::get_DataDetectorsUI_kDataDetectorsTrailingText(PAL *this)
{
  return MEMORY[0x1E0DCE2F0](this);
}

uint64_t PAL::get_AppSSO_SOAuthorizationOptionInitiatorOrigin(PAL *this)
{
  return MEMORY[0x1E0DCE2F8](this);
}

uint64_t PAL::canLoad_VisionKitCore_vk_cgImageRemoveBackground(PAL *this)
{
  return MEMORY[0x1E0DCE308](this);
}

uint64_t PAL::get_AppSSO_SOAuthorizationOptionInitiatingAction(PAL *this)
{
  return MEMORY[0x1E0DCE310](this);
}

uint64_t PAL::get_Contacts_CNContactPhoneticOrganizationNameKey(PAL *this)
{
  return MEMORY[0x1E0DCE318](this);
}

uint64_t PAL::get_DataDetectorsUI_kDDContextMenuWantsPreviewKey(PAL *this)
{
  return MEMORY[0x1E0DCE320](this);
}

uint64_t PAL::get_AVFoundation_AVAssetExportPresetHighestQuality(PAL *this)
{
  return MEMORY[0x1E0DCE328](this);
}

uint64_t PAL::get_AppSSO_SOAuthorizationOptionUserActionInitiated(PAL *this)
{
  return MEMORY[0x1E0DCE330](this);
}

uint64_t PAL::get_WebPrivacy_WPNotificationUserInfoResourceTypeKey(PAL *this)
{
  return MEMORY[0x1E0DCE338](this);
}

uint64_t PAL::get_WebPrivacy_WPResourceDataChangedNotificationName(PAL *this)
{
  return MEMORY[0x1E0DCE340](this);
}

uint64_t PAL::get_PassKitCore_PKPaymentErrorContactFieldUserInfoKey(PAL *this)
{
  return MEMORY[0x1E0DCE348](this);
}

uint64_t PAL::get_PassKitCore_PKPaymentErrorPostalAddressUserInfoKey(PAL *this)
{
  return MEMORY[0x1E0DCE350](this);
}

uint64_t PAL::get_ManagedConfiguration_MCFeatureDefinitionLookupAllowed(PAL *this)
{
  return MEMORY[0x1E0DCE358](this);
}

uint64_t PAL::canLoad_DataDetectorsCore_DDResultDisableURLSchemeChecking(PAL *this)
{
  return MEMORY[0x1E0DCE368](this);
}

uint64_t PAL::canLoad_VisionKitCore_vk_cgImageRemoveBackgroundWithDownsizing(PAL *this)
{
  return MEMORY[0x1E0DCE378](this);
}

uint64_t PAL::canLoad_CoreText_CTFontManagerCreateMemorySafeFontDescriptorFromData(PAL *this)
{
  return MEMORY[0x1E0DCE380](this);
}

uint64_t PAL::SessionID::enableGenerationProtection(PAL::SessionID *this)
{
  return MEMORY[0x1E0DCE390](this);
}

uint64_t PAL::SessionID::generateEphemeralSessionID(PAL::SessionID *this)
{
  return MEMORY[0x1E0DCE398](this);
}

uint64_t PAL::SessionID::generatePersistentSessionID(PAL::SessionID *this)
{
  return MEMORY[0x1E0DCE3A0](this);
}

uint64_t WTF::ParkingLot::unparkOneImpl()
{
  return MEMORY[0x1E0CBEF38]();
}

uint64_t WTF::ParkingLot::parkConditionallyImpl()
{
  return MEMORY[0x1E0CBEF40]();
}

uint64_t WTF::ParkingLot::unparkAll(WTF::ParkingLot *this, const void *a2)
{
  return MEMORY[0x1E0CBEF48](this, a2);
}

uint64_t WTF::StringImpl::reverseFind()
{
  return MEMORY[0x1E0CBEF58]();
}

uint64_t WTF::StringImpl::createUninitialized()
{
  return MEMORY[0x1E0CBEF80]();
}

uint64_t WTF::StringImpl::createUninitialized(WTF::StringImpl *this, uint64_t a2, unsigned __int8 **a3)
{
  return MEMORY[0x1E0CBEF88](this, a2, a3);
}

uint64_t WTF::StringImpl::createWithoutCopyingNonEmpty()
{
  return MEMORY[0x1E0CBEFA8]();
}

{
  return MEMORY[0x1E0CBEFB0]();
}

uint64_t WTF::StringImpl::find()
{
  return MEMORY[0x1E0CBEFB8]();
}

{
  return MEMORY[0x1E0CBEFC0]();
}

{
  return MEMORY[0x1E0CBEFC8]();
}

uint64_t WTF::StringImpl::destroy(WTF::StringImpl *this, WTF::StringImpl *a2)
{
  return MEMORY[0x1E0CBEFF8](this, a2);
}

uint64_t WTF::StringImpl::replace()
{
  return MEMORY[0x1E0CBF008]();
}

{
  return MEMORY[0x1E0CBF010]();
}

uint64_t WTF::StringImpl::endsWith()
{
  return MEMORY[0x1E0CBF020]();
}

{
  return MEMORY[0x1E0CC0BD0]();
}

uint64_t WTF::StringImpl::substring(WTF::StringImpl *this)
{
  return MEMORY[0x1E0CBF028](this);
}

uint64_t WTF::StringImpl::operator NSString *()
{
  return MEMORY[0x1E0CBF030]();
}

uint64_t WTF::StringView::SplitResult::Iterator::findNextSubstring(WTF::StringView::SplitResult::Iterator *this)
{
  return MEMORY[0x1E0CBF038](this);
}

uint64_t WTF::StringView::SplitResult::Iterator::operator++()
{
  return MEMORY[0x1E0CBF040]();
}

uint64_t WTF::SymbolImpl::create(WTF::SymbolImpl *this, WTF::StringImpl *a2)
{
  return MEMORY[0x1E0CBF060](this, a2);
}

uint64_t WTF::TextStream::startGroup(WTF::TextStream *this)
{
  return MEMORY[0x1E0CBF068](this);
}

uint64_t WTF::TextStream::writeIndent(WTF::TextStream *this)
{
  return MEMORY[0x1E0CBF070](this);
}

uint64_t WTF::TextStream::release(WTF::TextStream *this)
{
  return MEMORY[0x1E0CBF078](this);
}

uint64_t WTF::TextStream::endGroup(WTF::TextStream *this)
{
  return MEMORY[0x1E0CBF080](this);
}

uint64_t WTF::TextStream::operator<<()
{
  return MEMORY[0x1E0CBF088]();
}

{
  return MEMORY[0x1E0CBF090]();
}

{
  return MEMORY[0x1E0CBF098]();
}

{
  return MEMORY[0x1E0CBF0B0]();
}

{
  return MEMORY[0x1E0CBF0B8]();
}

{
  return MEMORY[0x1E0CBF0C8]();
}

{
  return MEMORY[0x1E0CBF0D8]();
}

{
  return MEMORY[0x1E0CBF0E0]();
}

{
  return MEMORY[0x1E0CBF0E8]();
}

uint64_t WTF::URLHelpers::userVisibleURL(WTF::URLHelpers *this, const CString *a2)
{
  return MEMORY[0x1E0CBF0F8](this, a2);
}

uint64_t WTF::fastMalloc(WTF *this)
{
  return MEMORY[0x1E0CBF100](this);
}

uint64_t WTF::isUIThread(WTF *this)
{
  return MEMORY[0x1E0CBF110](this);
}

uint64_t WTF::protocolIs()
{
  return MEMORY[0x1E0CBF118]();
}

uint64_t WTF::LogArgument<void const*>::toString()
{
  return MEMORY[0x1E0CBF128]();
}

uint64_t WTF::LogChannels::getLogChannel(WTF::LogChannels *this, const WTF::String *a2)
{
  return MEMORY[0x1E0CBF130](this, a2);
}

uint64_t WTF::LogChannels::initializeLogChannelsIfNecessary()
{
  return MEMORY[0x1E0CBF138]();
}

uint64_t WTF::Persistence::Coder<WebCore::HTTPHeaderMap>::decodeForPersistence()
{
  return MEMORY[0x1E0DCE3A8]();
}

uint64_t WTF::Persistence::Coder<WebCore::HTTPHeaderMap>::encodeForPersistence()
{
  return MEMORY[0x1E0DCE3B0]();
}

uint64_t WTF::Persistence::Coder<WebCore::ResourceRequest>::decodeForPersistence()
{
  return MEMORY[0x1E0DCE3B8]();
}

uint64_t WTF::Persistence::Coder<WebCore::ResourceRequest>::encodeForPersistence()
{
  return MEMORY[0x1E0DCE3C0]();
}

uint64_t WTF::Persistence::Coder<WebCore::ResourceResponse>::decodeForPersistence()
{
  return MEMORY[0x1E0DCE3C8]();
}

uint64_t WTF::Persistence::Coder<WebCore::ResourceResponse>::encodeForPersistence()
{
  return MEMORY[0x1E0DCE3D0]();
}

uint64_t WTF::Persistence::Coder<WebCore::ResourceResponseData>::decodeForPersistence()
{
  return MEMORY[0x1E0DCE3D8]();
}

uint64_t WTF::Persistence::Coder<WebCore::ResourceResponseData>::encodeForPersistence()
{
  return MEMORY[0x1E0DCE3E0]();
}

uint64_t WTF::Persistence::Coder<WTF::URL>::decodeForPersistence()
{
  return MEMORY[0x1E0CBF150]();
}

uint64_t WTF::Persistence::Coder<WTF::URL>::encodeForPersistence()
{
  return MEMORY[0x1E0CBF158]();
}

uint64_t WTF::Persistence::Coder<WTF::String>::decodeForPersistence()
{
  return MEMORY[0x1E0CBF160]();
}

uint64_t WTF::Persistence::Coder<WTF::String>::encodeForPersistence()
{
  return MEMORY[0x1E0CBF168]();
}

uint64_t WTF::Persistence::Coder<WTF::Seconds>::decodeForPersistence()
{
  return MEMORY[0x1E0CBF170]();
}

uint64_t WTF::Persistence::Coder<WTF::Seconds>::encodeForPersistence()
{
  return MEMORY[0x1E0CBF178]();
}

uint64_t WTF::Persistence::Coder<WTF::WallTime>::decodeForPersistence()
{
  return MEMORY[0x1E0CBF180]();
}

uint64_t WTF::Persistence::Coder<WTF::WallTime>::encodeForPersistence()
{
  return MEMORY[0x1E0CBF188]();
}

uint64_t WTF::Persistence::Coder<std::array<unsigned char,20ul>>::decodeForPersistence()
{
  return MEMORY[0x1E0CBF190]();
}

uint64_t WTF::Persistence::Coder<std::array<unsigned char,20ul>>::encodeForPersistence()
{
  return MEMORY[0x1E0CBF198]();
}

uint64_t WTF::Persistence::Decoder::verifyChecksum(WTF::Persistence::Decoder *this)
{
  return MEMORY[0x1E0CBF1A0](this);
}

uint64_t WTF::Persistence::Decoder::Decoder()
{
  return MEMORY[0x1E0CBF1B8]();
}

void WTF::Persistence::Decoder::~Decoder(WTF::Persistence::Decoder *this)
{
  MEMORY[0x1E0CBF1C0](this);
}

uint64_t WTF::Persistence::Decoder::operator>>()
{
  return MEMORY[0x1E0CBF1C8]();
}

{
  return MEMORY[0x1E0CBF1D0]();
}

{
  return MEMORY[0x1E0CBF1D8]();
}

{
  return MEMORY[0x1E0CBF1E8]();
}

{
  return MEMORY[0x1E0CBF208]();
}

uint64_t WTF::Persistence::Encoder::encodeChecksum(WTF::Persistence::Encoder *this)
{
  return MEMORY[0x1E0CBF210](this);
}

uint64_t WTF::Persistence::Encoder::Encoder(WTF::Persistence::Encoder *this)
{
  return MEMORY[0x1E0CBF220](this);
}

void WTF::Persistence::Encoder::~Encoder(WTF::Persistence::Encoder *this)
{
  MEMORY[0x1E0CBF228](this);
}

uint64_t WTF::Persistence::Encoder::operator<<()
{
  return MEMORY[0x1E0CBF230]();
}

{
  return MEMORY[0x1E0CBF238]();
}

{
  return MEMORY[0x1E0CBF240]();
}

{
  return MEMORY[0x1E0CBF250]();
}

{
  return MEMORY[0x1E0CBF270]();
}

uint64_t WTF::exitProcess(WTF *this)
{
  return MEMORY[0x1E0CBF288](this);
}

uint64_t WTF::fastRealloc(WTF *this, void *a2)
{
  return MEMORY[0x1E0CBF290](this, a2);
}

uint64_t WTF::logChannels(WTF *this)
{
  return MEMORY[0x1E0CBF2A0](this);
}

uint64_t WTF::portAllowed(WTF *this, const URL *a2)
{
  return MEMORY[0x1E0CBF2B8](this, a2);
}

uint64_t WTF::base64Decode()
{
  return MEMORY[0x1E0CBF2D0]();
}

{
  return MEMORY[0x1E0CBF2D8]();
}

uint64_t WTF::isMainThread(WTF *this)
{
  return MEMORY[0x1E0CBF2F0](this);
}

uint64_t WTF::MachSendRight::leakSendRight(WTF::MachSendRight *this)
{
  return MEMORY[0x1E0CBF300](this);
}

uint64_t WTF::MachSendRight::createFromReceiveRight(WTF::MachSendRight *this)
{
  return MEMORY[0x1E0CBF308](this);
}

uint64_t WTF::MachSendRight::adopt(WTF::MachSendRight *this)
{
  return MEMORY[0x1E0CBF310](this);
}

uint64_t WTF::MachSendRight::create(WTF::MachSendRight *this)
{
  return MEMORY[0x1E0CBF318](this);
}

uint64_t WTF::MachSendRight::MachSendRight()
{
  return MEMORY[0x1E0CBF320]();
}

uint64_t WTF::MachSendRight::MachSendRight(WTF::MachSendRight *this, const WTF::MachSendRight *a2)
{
  return MEMORY[0x1E0CBF328](this, a2);
}

void WTF::MachSendRight::~MachSendRight(WTF::MachSendRight *this)
{
  MEMORY[0x1E0CBF330](this);
}

uint64_t WTF::MachSendRight::operator=()
{
  return MEMORY[0x1E0CBF338]();
}

uint64_t WTF::MonotonicTime::fromMachAbsoluteTime(WTF::MonotonicTime *this)
{
  return MEMORY[0x1E0CBF340](this);
}

uint64_t WTF::MonotonicTime::now(WTF::MonotonicTime *this)
{
  return MEMORY[0x1E0CBF348](this);
}

uint64_t WTF::StringBuilder::shrinkToFit(WTF::StringBuilder *this)
{
  return MEMORY[0x1E0CBF350](this);
}

uint64_t WTF::StringBuilder::reserveCapacity(WTF::StringBuilder *this)
{
  return MEMORY[0x1E0CBF358](this);
}

uint64_t WTF::StringBuilder::appendQuotedJSONString(WTF::StringBuilder *this, const WTF::String *a2)
{
  return MEMORY[0x1E0CBF360](this, a2);
}

uint64_t WTF::StringBuilder::extendBufferForAppendingLChar(WTF::StringBuilder *this)
{
  return MEMORY[0x1E0CBF368](this);
}

uint64_t WTF::StringBuilder::extendBufferForAppendingWithUpconvert(WTF::StringBuilder *this)
{
  return MEMORY[0x1E0CBF370](this);
}

uint64_t WTF::StringBuilder::append()
{
  return MEMORY[0x1E0CBF378]();
}

{
  return MEMORY[0x1E0CBF380]();
}

uint64_t WTF::WorkQueueBase::dispatchWithQOS()
{
  return MEMORY[0x1E0CBF390]();
}

uint64_t WTF::aboutBlankURL(WTF *this)
{
  return MEMORY[0x1E0CBF398](this);
}

uint64_t WTF::allPrivileges(WTF *this)
{
  return MEMORY[0x1E0CBF3A0](this);
}

uint64_t WTF::bytesAsString(WTF *this, const __CFURL *a2)
{
  return MEMORY[0x1E0CBF3A8](this, a2);
}

uint64_t WTF::bytesAsVector(WTF *this, const __CFURL *a2)
{
  return MEMORY[0x1E0CBF3B0](this, a2);
}

uint64_t WTF::isMainRunLoop(WTF *this)
{
  return MEMORY[0x1E0CBF3C0](this);
}

uint64_t WTF::tryFastMalloc(WTF *this)
{
  return MEMORY[0x1E0CBF438](this);
}

uint64_t WTF::AtomStringImpl::addSlowCase()
{
  return MEMORY[0x1E0CBF448]();
}

uint64_t WTF::AtomStringImpl::addSlowCase(WTF::AtomStringImpl *this, WTF::StringImpl *a2)
{
  return MEMORY[0x1E0CBF450](this, a2);
}

uint64_t WTF::AtomStringImpl::add()
{
  return MEMORY[0x1E0CBF468]();
}

{
  return MEMORY[0x1E0CBF470]();
}

uint64_t WTF::AtomStringImpl::add(WTF::AtomStringImpl *this, const __CFString *a2)
{
  return MEMORY[0x1E0CBF478](this, a2);
}

uint64_t WTF::FileSystemImpl::deleteFile(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1E0CBF4A0](this, a2);
}

uint64_t WTF::FileSystemImpl::fileExists(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1E0CBF4A8](this, a2);
}

uint64_t WTF::FileSystemImpl::parentPath(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1E0CBF4B0](this, a2);
}

uint64_t WTF::FileSystemImpl::writeToFile()
{
  return MEMORY[0x1E0CBF4B8]();
}

uint64_t WTF::FileSystemImpl::pathFileName(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1E0CBF4C8](this, a2);
}

uint64_t WTF::FileSystemImpl::directorySize(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1E0CBF4E0](this, a2);
}

uint64_t WTF::FileSystemImpl::hardLinkCount(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1E0CBF4E8](this, a2);
}

uint64_t WTF::FileSystemImpl::listDirectory(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1E0CBF4F0](this, a2);
}

uint64_t WTF::FileSystemImpl::markPurgeable(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1E0CBF4F8](this, a2);
}

uint64_t WTF::FileSystemImpl::MappedFileData::mapFileHandle()
{
  return MEMORY[0x1E0CBF500]();
}

uint64_t WTF::FileSystemImpl::MappedFileData::MappedFileData()
{
  return MEMORY[0x1E0CBF508]();
}

void WTF::FileSystemImpl::MappedFileData::~MappedFileData(WTF::FileSystemImpl::MappedFileData *this)
{
  MEMORY[0x1E0CBF510](this);
}

uint64_t WTF::FileSystemImpl::readEntireFile(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1E0CBF518](this, a2);
}

uint64_t WTF::FileSystemImpl::readEntireFile(WTF::FileSystemImpl *this)
{
  return MEMORY[0x1E0CBF520](this);
}

uint64_t WTF::FileSystemImpl::readOrMakeSalt(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1E0CBF528](this, a2);
}

uint64_t WTF::FileSystemImpl::volumeCapacity(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1E0CBF530](this, a2);
}

uint64_t WTF::FileSystemImpl::openAndLockFile()
{
  return MEMORY[0x1E0CBF540]();
}

uint64_t WTF::FileSystemImpl::volumeFreeSpace(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1E0CBF548](this, a2);
}

uint64_t WTF::FileSystemImpl::fileCreationTime(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1E0CBF550](this, a2);
}

uint64_t WTF::FileSystemImpl::encodeForFileName(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1E0CBF558](this, a2);
}

uint64_t WTF::FileSystemImpl::openTemporaryFile()
{
  return MEMORY[0x1E0CBF560]();
}

uint64_t WTF::FileSystemImpl::decodeFromFilename(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1E0CBF568](this, a2);
}

uint64_t WTF::FileSystemImpl::hardLinkOrCopyFile(WTF::FileSystemImpl *this, const WTF::String *a2, const WTF::String *a3)
{
  return MEMORY[0x1E0CBF570](this, a2, a3);
}

uint64_t WTF::FileSystemImpl::makeAllDirectories(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1E0CBF578](this, a2);
}

uint64_t WTF::FileSystemImpl::unlockAndCloseFile(WTF::FileSystemImpl *this)
{
  return MEMORY[0x1E0CBF580](this);
}

uint64_t WTF::FileSystemImpl::overwriteEntireFile()
{
  return MEMORY[0x1E0CBF588]();
}

uint64_t WTF::FileSystemImpl::systemDirectoryPath(WTF::FileSystemImpl *this)
{
  return MEMORY[0x1E0CBF590](this);
}

uint64_t WTF::FileSystemImpl::volumeFileBlockSize(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1E0CBF598](this, a2);
}

uint64_t WTF::FileSystemImpl::deleteEmptyDirectory(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1E0CBF5A8](this, a2);
}

uint64_t WTF::FileSystemImpl::fileModificationTime(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1E0CBF5B0](this, a2);
}

uint64_t WTF::FileSystemImpl::setExcludedFromBackup(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1E0CBF5B8](this, a2);
}

uint64_t WTF::FileSystemImpl::deleteNonEmptyDirectory(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1E0CBF5C8](this, a2);
}

uint64_t WTF::FileSystemImpl::createTemporaryDirectory(WTF::FileSystemImpl *this, NSString *a2)
{
  return MEMORY[0x1E0CBF5D0](this, a2);
}

uint64_t WTF::FileSystemImpl::fileSystemRepresentation(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1E0CBF5D8](this, a2);
}

uint64_t WTF::FileSystemImpl::pathByAppendingComponent()
{
  return MEMORY[0x1E0CBF5E0]();
}

uint64_t WTF::FileSystemImpl::fileTypeFollowingSymlinks(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1E0CBF5F0](this, a2);
}

uint64_t WTF::FileSystemImpl::pathByAppendingComponents()
{
  return MEMORY[0x1E0CBF5F8]();
}

uint64_t WTF::FileSystemImpl::updateFileModificationTime(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1E0CBF600](this, a2);
}

uint64_t WTF::FileSystemImpl::deleteAllFilesModifiedSince(WTF::FileSystemImpl *this, const WTF::String *a2, __n128 a3)
{
  return MEMORY[0x1E0CBF608](this, a2, a3);
}

uint64_t WTF::FileSystemImpl::makeSafeToUseMemoryMapForPath(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1E0CBF618](this, a2);
}

uint64_t WTF::FileSystemImpl::stringFromFileSystemRepresentation(WTF::FileSystemImpl *this, const char *a2)
{
  return MEMORY[0x1E0CBF628](this, a2);
}

uint64_t WTF::FileSystemImpl::setAllowsMaterializingDatalessFiles()
{
  return MEMORY[0x1E0CBF630]();
}

uint64_t WTF::FileSystemImpl::lastComponentOfPathIgnoringTrailingSlash(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1E0CBF638](this, a2);
}

uint64_t WTF::FileSystemImpl::fileSize(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1E0CBF648](this, a2);
}

uint64_t WTF::FileSystemImpl::fileSize(WTF::FileSystemImpl *this)
{
  return MEMORY[0x1E0CBF650](this);
}

uint64_t WTF::FileSystemImpl::fileType(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1E0CBF658](this, a2);
}

uint64_t WTF::FileSystemImpl::hardLink(WTF::FileSystemImpl *this, const WTF::String *a2, const WTF::String *a3)
{
  return MEMORY[0x1E0CBF660](this, a2, a3);
}

uint64_t WTF::FileSystemImpl::moveFile(WTF::FileSystemImpl *this, const WTF::String *a2, const WTF::String *a3)
{
  return MEMORY[0x1E0CBF668](this, a2, a3);
}

uint64_t WTF::FileSystemImpl::openFile()
{
  return MEMORY[0x1E0CBF670]();
}

uint64_t WTF::FileSystemImpl::seekFile()
{
  return MEMORY[0x1E0CBF680]();
}

uint64_t WTF::FileSystemImpl::closeFile(WTF::FileSystemImpl *this, int *a2)
{
  return MEMORY[0x1E0CBF688](this, a2);
}

uint64_t WTF::FileSystemImpl::mapToFile()
{
  return MEMORY[0x1E0CBF698]();
}

uint64_t WTF::hasEntitlement()
{
  return MEMORY[0x1E0CBF6C8]();
}

{
  return MEMORY[0x1E0CBF6D0]();
}

{
  return MEMORY[0x1E0CBF6D8]();
}

{
  return MEMORY[0x1E0CBF6E0]();
}

uint64_t WTF::isVersion4UUID()
{
  return MEMORY[0x1E0CBF6E8]();
}

uint64_t WTF::numberToString()
{
  return MEMORY[0x1E0CBF6F8]();
}

{
  return MEMORY[0x1E0CBF700]();
}

uint64_t WTF::ApproximateTime::now(WTF::ApproximateTime *this)
{
  return MEMORY[0x1E0CBF708](this);
}

uint64_t WTF::AutodrainedPool::AutodrainedPool(WTF::AutodrainedPool *this)
{
  return MEMORY[0x1E0CBF710](this);
}

void WTF::AutodrainedPool::~AutodrainedPool(WTF::AutodrainedPool *this)
{
  MEMORY[0x1E0CBF718](this);
}

uint64_t WTF::BinarySemaphore::signal(WTF::BinarySemaphore *this)
{
  return MEMORY[0x1E0CBF720](this);
}

uint64_t WTF::BinarySemaphore::waitUntil()
{
  return MEMORY[0x1E0CBF728]();
}

uint64_t WTF::defaultLanguage()
{
  return MEMORY[0x1E0CBF730]();
}

uint64_t WTF::callOnMainThread()
{
  return MEMORY[0x1E0CBF778]();
}

uint64_t WTF::codePointCompare(WTF *this, const WTF::String *a2, const WTF::String *a3)
{
  return MEMORY[0x1E0CBF788](this, a2, a3);
}

uint64_t WTF::fastZeroedMalloc(WTF *this)
{
  return MEMORY[0x1E0CBF790](this);
}

uint64_t WTF::terminateProcess(WTF *this)
{
  return MEMORY[0x1E0CBF7A0](this);
}

uint64_t WTF::weakRandomNumber<unsigned int>()
{
  return MEMORY[0x1E0CBF7A8]();
}

uint64_t WTF::NativePromiseBase::logChannel(WTF::NativePromiseBase *this)
{
  return MEMORY[0x1E0CBF7B8](this);
}

uint64_t WTF::StringPrintStream::toString(WTF::StringPrintStream *this)
{
  return MEMORY[0x1E0CBF7C8](this);
}

uint64_t WTF::StringPrintStream::StringPrintStream(WTF::StringPrintStream *this)
{
  return MEMORY[0x1E0CBF7D8](this);
}

void WTF::StringPrintStream::~StringPrintStream(WTF::StringPrintStream *this)
{
  MEMORY[0x1E0CBF7E0](this);
}

uint64_t WTF::callOnMainRunLoop()
{
  return MEMORY[0x1E0CBF7F0]();
}

uint64_t WTF::fastCompactMalloc(WTF *this)
{
  return MEMORY[0x1E0CBF820](this);
}

uint64_t WTF::languageDidChange(WTF *this)
{
  return MEMORY[0x1E0CBF828](this);
}

uint64_t WTF::makeVectorElement(WTF *this, const WTF::String *a2, objc_object *a3)
{
  return MEMORY[0x1E0CBF830](this, a2, a3);
}

uint64_t WTF::userVisibleString(WTF *this, NSURL *a2)
{
  return MEMORY[0x1E0CBF848](this, a2);
}

uint64_t WTF::FunctionDispatcher::FunctionDispatcher(WTF::FunctionDispatcher *this)
{
  return MEMORY[0x1E0CBF858](this);
}

void WTF::FunctionDispatcher::~FunctionDispatcher(WTF::FunctionDispatcher *this)
{
  MEMORY[0x1E0CBF860](this);
}

uint64_t WTF::ensureOnMainThread()
{
  return MEMORY[0x1E0CBF880]();
}

uint64_t WTF::makeNSArrayElement(WTF *this, const URL *a2)
{
  return MEMORY[0x1E0CBF898](this, a2);
}

uint64_t WTF::makeNSArrayElement(WTF *this, const WTF::String *a2)
{
  return MEMORY[0x1E0CBF8A0](this, a2);
}

uint64_t WTF::setCrashLogMessage(WTF *this, const char *a2)
{
  return MEMORY[0x1E0CBF8A8](this, a2);
}

uint64_t WTF::ConcurrentWorkQueue::create()
{
  return MEMORY[0x1E0CBF8B8]();
}

uint64_t WTF::ConcurrentWorkQueue::dispatch()
{
  return MEMORY[0x1E0CBF8C0]();
}

uint64_t WTF::ensureOnMainRunLoop()
{
  return MEMORY[0x1E0CBF8D8]();
}

uint64_t WTF::makeStringByJoining()
{
  return MEMORY[0x1E0CBF8F8]();
}

uint64_t WTF::numGraphemeClusters()
{
  return MEMORY[0x1E0CBF908]();
}

uint64_t WTF::sdkAlignedBehaviors(WTF *this)
{
  return MEMORY[0x1E0CBF910](this);
}

uint64_t WTF::setTimeZoneOverride()
{
  return MEMORY[0x1E0CBF918]();
}

uint64_t WTF::SuspendableWorkQueue::dispatchAfter()
{
  return MEMORY[0x1E0CBF930]();
}

uint64_t WTF::SuspendableWorkQueue::create()
{
  return MEMORY[0x1E0CBF938]();
}

uint64_t WTF::SuspendableWorkQueue::resume(WTF::SuspendableWorkQueue *this)
{
  return MEMORY[0x1E0CBF940](this);
}

uint64_t WTF::SuspendableWorkQueue::suspend()
{
  return MEMORY[0x1E0CBF948]();
}

uint64_t WTF::SuspendableWorkQueue::dispatch()
{
  return MEMORY[0x1E0CBF950]();
}

uint64_t WTF::base64EncodeToString()
{
  return MEMORY[0x1E0CBF960]();
}

uint64_t WTF::fastMallocStatistics(WTF *this)
{
  return MEMORY[0x1E0CBF978](this);
}

uint64_t WTF::initializeMainThread(WTF *this)
{
  return MEMORY[0x1E0CBF980](this);
}

uint64_t WTF::protocolIsJavaScript()
{
  return MEMORY[0x1E0CBF990]();
}

uint64_t WTF::setProcessPrivileges()
{
  return MEMORY[0x1E0CBF998]();
}

uint64_t WTF::tryFastCompactMalloc(WTF *this)
{
  return MEMORY[0x1E0CBF9A0](this);
}

uint64_t WTF::MemoryPressureHandler::releaseMemory()
{
  return MEMORY[0x1E0CBF9B8]();
}

uint64_t WTF::MemoryPressureHandler::processStateDescription(WTF::MemoryPressureHandler *this)
{
  return MEMORY[0x1E0CBF9C8](this);
}

uint64_t WTF::MemoryPressureHandler::install(WTF::MemoryPressureHandler *this)
{
  return MEMORY[0x1E0CBF9D8](this);
}

uint64_t WTF::MemoryPressureHandler::singleton(WTF::MemoryPressureHandler *this)
{
  return MEMORY[0x1E0CBF9E0](this);
}

uint64_t WTF::processHasEntitlement()
{
  return MEMORY[0x1E0CBF9F8]();
}

uint64_t WTF::removeQueryParameters()
{
  return MEMORY[0x1E0CBFA00]();
}

uint64_t WTF::setProcessIsExtension(WTF *this)
{
  return MEMORY[0x1E0CBFA10](this);
}

uint64_t WTF::equalIgnoringASCIICase(WTF *this, const WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  return MEMORY[0x1E0CBFA30](this, a2, a3);
}

uint64_t WTF::numberOfProcessorCores(WTF *this)
{
  return MEMORY[0x1E0CBFA40](this);
}

uint64_t WTF::setSDKAlignedBehaviors()
{
  return MEMORY[0x1E0CBFA58]();
}

uint64_t WTF::callOnMainThreadAndWait()
{
  return MEMORY[0x1E0CBFA68]();
}

uint64_t WTF::callOnMainRunLoopAndWait()
{
  return MEMORY[0x1E0CBFA88]();
}

uint64_t WTF::createVersion4UUIDString(WTF *this)
{
  return MEMORY[0x1E0CBFA90](this);
}

uint64_t WTF::isDefaultPortForProtocol()
{
  return MEMORY[0x1E0CBFAA8]();
}

uint64_t WTF::deallocateSendRightSafely(WTF *this)
{
  return MEMORY[0x1E0CBFAC8](this);
}

uint64_t WTF::hasEntitlementValueInArray()
{
  return MEMORY[0x1E0CBFAD0]();
}

uint64_t WTF::setPermissionsOfConfigPage(WTF *this)
{
  return MEMORY[0x1E0CBFAE0](this);
}

uint64_t WTF::protocolHostAndPortAreEqual(WTF *this, const URL *a2, const URL *a3)
{
  return MEMORY[0x1E0CBFAE8](this, a2, a3);
}

uint64_t WTF::releaseFastMallocFreeMemory(WTF *this)
{
  return MEMORY[0x1E0CBFAF0](this);
}

uint64_t WTF::enableAllSDKAlignedBehaviors(WTF *this)
{
  return MEMORY[0x1E0CBFB10](this);
}

uint64_t WTF::encodeWithURLEscapeSequences(WTF *this, const WTF::String *a2)
{
  return MEMORY[0x1E0CBFB18](this, a2);
}

uint64_t WTF::cryptographicallyRandomNumber<unsigned int>()
{
  return MEMORY[0x1E0CBFB40]();
}

uint64_t WTF::cryptographicallyRandomNumber<unsigned long long>()
{
  return MEMORY[0x1E0CBFB48]();
}

uint64_t WTF::cryptographicallyRandomValues()
{
  return MEMORY[0x1E0CBFB50]();
}

uint64_t WTF::disableAllSDKAlignedBehaviors(WTF *this)
{
  return MEMORY[0x1E0CBFB58](this);
}

uint64_t WTF::linkedOnOrAfterSDKWithBehavior()
{
  return MEMORY[0x1E0CBFB70]();
}

uint64_t WTF::overrideUserPreferredLanguages()
{
  return MEMORY[0x1E0CBFB80]();
}

uint64_t WTF::ramSizeDisregardingJetsamLimit(WTF *this)
{
  return MEMORY[0x1E0CBFB88](this);
}

uint64_t WTF::equalIgnoringFragmentIdentifier(WTF *this, const URL *a2, const URL *a3)
{
  return MEMORY[0x1E0CBFBA0](this, a2, a3);
}

uint64_t WTF::cryptographicallyRandomUnitInterval(WTF *this)
{
  return MEMORY[0x1E0CBFBD0](this);
}

uint64_t WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal()
{
  return MEMORY[0x1E0CBFBE8]();
}

uint64_t WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal()
{
  return MEMORY[0x1E0CBFBF0]();
}

uint64_t WTF::URL::invalidate(WTF::URL *this)
{
  return MEMORY[0x1E0CBFC08](this);
}

uint64_t WTF::URL::setProtocol()
{
  return MEMORY[0x1E0CBFC18]();
}

uint64_t WTF::URL::hostIsIPAddress()
{
  return MEMORY[0x1E0CBFC28]();
}

uint64_t WTF::URL::setFragmentIdentifier()
{
  return MEMORY[0x1E0CBFC40]();
}

uint64_t WTF::URL::removeFragmentIdentifier(WTF::URL *this)
{
  return MEMORY[0x1E0CBFC58](this);
}

uint64_t WTF::URL::fileURLWithFileSystemPath()
{
  return MEMORY[0x1E0CBFC60]();
}

uint64_t WTF::URL::removeQueryAndFragmentIdentifier(WTF::URL *this)
{
  return MEMORY[0x1E0CBFC68](this);
}

uint64_t WTF::URL::setHost()
{
  return MEMORY[0x1E0CBFC70]();
}

uint64_t WTF::URL::URL()
{
  return MEMORY[0x1E0CBFC98]();
}

{
  return MEMORY[0x1E0CBFCB0]();
}

uint64_t WTF::URL::URL(WTF::URL *this, NSURL *a2)
{
  return MEMORY[0x1E0CBFCA0](this, a2);
}

uint64_t WTF::Lock::unlockSlow(WTF::Lock *this)
{
  return MEMORY[0x1E0CBFCE8](this);
}

uint64_t WTF::Lock::lockSlow(WTF::Lock *this)
{
  return MEMORY[0x1E0CBFCF0](this);
}

uint64_t WTF::SHA1::computeHash()
{
  return MEMORY[0x1E0CBFCF8]();
}

uint64_t WTF::SHA1::addUTF8Bytes()
{
  return MEMORY[0x1E0CBFD00]();
}

uint64_t WTF::SHA1::addUTF8Bytes(WTF::SHA1 *this, const __CFString *a2)
{
  return MEMORY[0x1E0CBFD08](this, a2);
}

uint64_t WTF::SHA1::addBytes()
{
  return MEMORY[0x1E0CBFD10]();
}

uint64_t WTF::SHA1::hexDigest()
{
  return MEMORY[0x1E0CBFD18]();
}

uint64_t WTF::SHA1::SHA1(WTF::SHA1 *this)
{
  return MEMORY[0x1E0CBFD20](this);
}

uint64_t WTF::UUID::fromNSUUID(WTF::UUID *this, NSUUID *a2)
{
  return MEMORY[0x1E0CBFD28](this, a2);
}

uint64_t WTF::UUID::parseVersion4()
{
  return MEMORY[0x1E0CBFD30]();
}

uint64_t WTF::UUID::generateWeakRandomUUIDVersion4(WTF::UUID *this)
{
  return MEMORY[0x1E0CBFD38](this);
}

uint64_t WTF::UUID::parse()
{
  return MEMORY[0x1E0CBFD40]();
}

uint64_t WTF::UUID::UUID(WTF::UUID *this)
{
  return MEMORY[0x1E0CBFD48](this);
}

uint64_t WTF::equal()
{
  return MEMORY[0x1E0CBFD78]();
}

uint64_t WTF::equal(WTF *this, const WTF::StringImpl *a2, const unsigned __int8 *a3)
{
  return MEMORY[0x1E0CBFD80](this, a2, a3);
}

uint64_t WTF::equal(WTF *this, const WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  return MEMORY[0x1E0CBFD88](this, a2, a3);
}

{
  return MEMORY[0x1E0CBFD90](this, a2, a3);
}

uint64_t WTF::sleep()
{
  return MEMORY[0x1E0CBFD98]();
}

uint64_t WTF::Config::disableFreezingForTesting(WTF::Config *this)
{
  return MEMORY[0x1E0CBFDA0](this);
}

uint64_t WTF::Config::finalize(WTF::Config *this)
{
  return MEMORY[0x1E0CBFDA8](this);
}

uint64_t WTF::Logger::observers(WTF::Logger *this)
{
  return MEMORY[0x1E0CBFDB0](this);
}

uint64_t WTF::String::numberToStringFixedPrecision()
{
  return MEMORY[0x1E0CBFDD0]();
}

uint64_t WTF::String::number(WTF::String *this, double a2)
{
  return MEMORY[0x1E0CBFDD8](this, a2);
}

uint64_t WTF::String::number(WTF::String *this, float a2)
{
  return MEMORY[0x1E0CBFDE0](this, a2);
}

uint64_t WTF::String::number(WTF::String *this)
{
  return MEMORY[0x1E0CBFDE8](this);
}

{
  return MEMORY[0x1E0CBFDF0](this);
}

{
  return MEMORY[0x1E0CBFDF8](this);
}

{
  return MEMORY[0x1E0CBFE00](this);
}

{
  return MEMORY[0x1E0CBFE08](this);
}

{
  return MEMORY[0x1E0CBFE10](this);
}

uint64_t WTF::String::fromUTF8()
{
  return MEMORY[0x1E0CBFE18]();
}

uint64_t WTF::String::String()
{
  return MEMORY[0x1E0CBFE28]();
}

{
  return MEMORY[0x1E0CBFE30]();
}

{
  return MEMORY[0x1E0CBFE38]();
}

uint64_t WTF::String::String(WTF::String *this, const __CFString *a2)
{
  return MEMORY[0x1E0CBFE40](this, a2);
}

uint64_t WTF::String::String(WTF::String *this, const char *a2)
{
  return MEMORY[0x1E0CBFE48](this, a2);
}

uint64_t WTF::Thread::changePriority(WTF::Thread *this)
{
  return MEMORY[0x1E0CBFE68](this);
}

uint64_t WTF::Thread::currentThreadQOS(WTF::Thread *this)
{
  return MEMORY[0x1E0CBFE70](this);
}

uint64_t WTF::Thread::waitForCompletion(WTF::Thread *this)
{
  return MEMORY[0x1E0CBFE78](this);
}

uint64_t WTF::Thread::initializeCurrentTLS(WTF::Thread *this)
{
  return MEMORY[0x1E0CBFE80](this);
}

uint64_t WTF::Thread::setGlobalMaxQOSClass(WTF::Thread *this, uint64_t a2)
{
  return MEMORY[0x1E0CBFE88](this, a2);
}

uint64_t WTF::Thread::setThreadTimeConstraints()
{
  return MEMORY[0x1E0CBFE90]();
}

uint64_t WTF::Thread::setCurrentThreadIsUserInitiated(WTF::Thread *this)
{
  return MEMORY[0x1E0CBFE98](this);
}

uint64_t WTF::Thread::setCurrentThreadIsUserInteractive(WTF::Thread *this)
{
  return MEMORY[0x1E0CBFEA0](this);
}

uint64_t WTF::Thread::create()
{
  return MEMORY[0x1E0CBFEA8]();
}

void WTF::Thread::~Thread(WTF::Thread *this)
{
  MEMORY[0x1E0CBFEB8](this);
}

uint64_t WTF::CString::mutableData(WTF::CString *this)
{
  return MEMORY[0x1E0CBFEC8](this);
}

uint64_t WTF::CString::CString()
{
  return MEMORY[0x1E0CBFED8]();
}

uint64_t WTF::CString::CString(WTF::CString *this, const char *a2)
{
  return MEMORY[0x1E0CBFEE0](this, a2);
}

uint64_t WTF::RunLoop::dispatchAfter()
{
  return MEMORY[0x1E0CBFEF0]();
}

uint64_t WTF::RunLoop::run(WTF::RunLoop *this)
{
  return MEMORY[0x1E0CBFEF8](this);
}

uint64_t WTF::RunLoop::main(WTF::RunLoop *this)
{
  return MEMORY[0x1E0CBFF00](this);
}

uint64_t WTF::RunLoop::stop(WTF::RunLoop *this)
{
  return MEMORY[0x1E0CBFF08](this);
}

uint64_t WTF::RunLoop::wakeUp(WTF::RunLoop *this)
{
  return MEMORY[0x1E0CBFF20](this);
}

uint64_t WTF::RunLoop::current(WTF::RunLoop *this)
{
  return MEMORY[0x1E0CBFF28](this);
}

uint64_t WTF::RunLoop::dispatch()
{
  return MEMORY[0x1E0CBFF30]();
}

uint64_t WTF::RunLoop::TimerBase::stop(WTF::RunLoop::TimerBase *this)
{
  return MEMORY[0x1E0CBFF40](this);
}

uint64_t WTF::RunLoop::TimerBase::start()
{
  return MEMORY[0x1E0CBFF48]();
}

uint64_t WTF::RunLoop::TimerBase::TimerBase(WTF::RunLoop::TimerBase *this, WTF::RunLoop *a2)
{
  return MEMORY[0x1E0CBFF50](this, a2);
}

void WTF::RunLoop::TimerBase::~TimerBase(WTF::RunLoop::TimerBase *this)
{
  MEMORY[0x1E0CBFF58](this);
}

void WTF::RunLoop::~RunLoop(WTF::RunLoop *this)
{
  MEMORY[0x1E0CBFF60](this);
}

uint64_t WTF::Unicode::convertReplacingInvalidSequences()
{
  return MEMORY[0x1E0CBFF68]();
}

uint64_t WTF::Unicode::convert()
{
  return MEMORY[0x1E0CBFF70]();
}

{
  return MEMORY[0x1E0CBFF80]();
}

uint64_t WTF::ramSize(WTF *this)
{
  return MEMORY[0x1E0CBFF90](this);
}

uint64_t WTF::Internal::appendHex()
{
  return MEMORY[0x1E0CBFFA8]();
}

uint64_t WTF::JSONImpl::Value::create(WTF::JSONImpl::Value *this, const WTF::String *a2)
{
  return MEMORY[0x1E0CBFFC0](this, a2);
}

uint64_t WTF::JSONImpl::Value::create(WTF::JSONImpl::Value *this)
{
  return MEMORY[0x1E0CBFFC8](this);
}

{
  return MEMORY[0x1E0CBFFD8](this);
}

uint64_t WTF::JSONImpl::Value::create(WTF::JSONImpl::Value *this, double a2)
{
  return MEMORY[0x1E0CBFFD0](this, a2);
}

uint64_t WTF::JSONImpl::Value::parseJSON()
{
  return MEMORY[0x1E0CBFFE0]();
}

uint64_t WTF::JSONImpl::Value::operator delete()
{
  return MEMORY[0x1E0CBFFE8]();
}

uint64_t WTF::JSONImpl::Object::create(WTF::JSONImpl::Object *this)
{
  return MEMORY[0x1E0CBFFF0](this);
}

uint64_t WTF::JSONImpl::ArrayBase::ArrayBase(WTF::JSONImpl::ArrayBase *this)
{
  return MEMORY[0x1E0CBFFF8](this);
}

uint64_t WTF::WallTime::now(WTF::WallTime *this)
{
  return MEMORY[0x1E0CC0000](this);
}

uint64_t WTF::fastFree(WTF *this, void *a2)
{
  return MEMORY[0x1E0CC0018](this, a2);
}

uint64_t WTF::pageSize(WTF *this)
{
  return MEMORY[0x1E0CC0020](this);
}

uint64_t WTF::MediaTime::invalidTime(WTF::MediaTime *this)
{
  return MEMORY[0x1E0CC0040](this);
}

uint64_t WTF::MediaTime::createWithDouble(WTF::MediaTime *this, double a2)
{
  return MEMORY[0x1E0CC0060](this, a2);
}

uint64_t WTF::MediaTime::zeroTime(WTF::MediaTime *this)
{
  return MEMORY[0x1E0CC0080](this);
}

uint64_t WTF::URLParser::maybeCanonicalizeScheme()
{
  return MEMORY[0x1E0CC00A8]();
}

uint64_t WTF::WorkQueue::main(WTF::WorkQueue *this)
{
  return MEMORY[0x1E0CC00B8](this);
}

uint64_t WTF::WorkQueue::create()
{
  return MEMORY[0x1E0CC00C0]();
}

uint64_t WTF::operator<<()
{
  return MEMORY[0x1E0CC00E0]();
}

uint64_t WTF::operator<()
{
  return MEMORY[0x1E0CC00F0]();
}

void rtc::PacketInfo::~PacketInfo(rtc::PacketInfo *this)
{
  MEMORY[0x1E0DCD5D8](this);
}

uint64_t rtc::SentPacket::SentPacket(rtc::SentPacket *this)
{
  return MEMORY[0x1E0DCD5E0](this);
}

uint64_t rtc::TimeMicros(rtc *this)
{
  return MEMORY[0x1E0DCD5E8](this);
}

uint64_t rtc::TimeMillis(rtc *this)
{
  return MEMORY[0x1E0DCD5F0](this);
}

uint64_t rtc::PacketOptions::PacketOptions()
{
  return MEMORY[0x1E0DCD600]();
}

uint64_t rtc::PacketOptions::PacketOptions(rtc::PacketOptions *this)
{
  return MEMORY[0x1E0DCD608](this);
}

void rtc::PacketOptions::~PacketOptions(rtc::PacketOptions *this)
{
  MEMORY[0x1E0DCD610](this);
}

uint64_t rtc::SocketAddress::SetResolvedIP(rtc::SocketAddress *this, const rtc::IPAddress *a2)
{
  return MEMORY[0x1E0DCD618](this, a2);
}

uint64_t rtc::SocketAddress::SetIP()
{
  return MEMORY[0x1E0DCD620]();
}

uint64_t rtc::SocketAddress::SetPort(rtc::SocketAddress *this)
{
  return MEMORY[0x1E0DCD628](this);
}

uint64_t rtc::SocketAddress::SocketAddress()
{
  return MEMORY[0x1E0DCD630]();
}

uint64_t rtc::SocketAddress::SocketAddress(rtc::SocketAddress *this, const rtc::IPAddress *a2)
{
  return MEMORY[0x1E0DCD638](this, a2);
}

uint64_t rtc::SocketAddress::SocketAddress(rtc::SocketAddress *this, const rtc::SocketAddress *a2)
{
  return MEMORY[0x1E0DCD640](this, a2);
}

uint64_t rtc::SocketAddress::SocketAddress(rtc::SocketAddress *this)
{
  return MEMORY[0x1E0DCD648](this);
}

uint64_t rtc::SocketAddress::operator=()
{
  return MEMORY[0x1E0DCD650]();
}

uint64_t rtc::ReceivedPacket::ReceivedPacket()
{
  return MEMORY[0x1E0DCD668]();
}

uint64_t rtc::AsyncPacketSocket::SubscribeCloseEvent()
{
  return MEMORY[0x1E0DCD680]();
}

uint64_t rtc::AsyncPacketSocket::NotifyPacketReceived()
{
  return MEMORY[0x1E0DCD688]();
}

uint64_t rtc::AsyncPacketSocket::RegisterReceivedPacketCallback()
{
  return MEMORY[0x1E0DCD690]();
}

uint64_t rtc::AsyncPacketSocket::DeregisterReceivedPacketCallback(rtc::AsyncPacketSocket *this)
{
  return MEMORY[0x1E0DCD698](this);
}

void rtc::AsyncPacketSocket::~AsyncPacketSocket(rtc::AsyncPacketSocket *this)
{
  MEMORY[0x1E0DCD6A0](this);
}

uint64_t rtc::NetworkManagerBase::MergeNetworkList()
{
  return MEMORY[0x1E0DCD6C0]();
}

uint64_t rtc::NetworkManagerBase::set_default_local_addresses(rtc::NetworkManagerBase *this, const rtc::IPAddress *a2, const rtc::IPAddress *a3)
{
  return MEMORY[0x1E0DCD6C8](this, a2, a3);
}

uint64_t rtc::NetworkManagerBase::NetworkManagerBase(rtc::NetworkManagerBase *this)
{
  return MEMORY[0x1E0DCD6D0](this);
}

uint64_t rtc::BasicNetworkManager::BasicNetworkManager()
{
  return MEMORY[0x1E0DCD6D8]();
}

uint64_t rtc::PacketTimeUpdateParams::PacketTimeUpdateParams(rtc::PacketTimeUpdateParams *this)
{
  return MEMORY[0x1E0DCD6E8](this);
}

void rtc::PacketTimeUpdateParams::~PacketTimeUpdateParams(rtc::PacketTimeUpdateParams *this)
{
  MEMORY[0x1E0DCD6F0](this);
}

uint64_t rtc::BasicPacketSocketFactory::BasicPacketSocketFactory()
{
  return MEMORY[0x1E0DCD700]();
}

uint64_t rtc::Thread::socketserver(rtc::Thread *this)
{
  return MEMORY[0x1E0DCD728](this);
}

uint64_t rtc::Thread::CreateWithSocketServer(rtc::Thread *this)
{
  return MEMORY[0x1E0DCD730](this);
}

uint64_t rtc::Thread::Start(rtc::Thread *this)
{
  return MEMORY[0x1E0DCD738](this);
}

uint64_t rtc::Thread::SetName()
{
  return MEMORY[0x1E0DCD748]();
}

uint64_t rtc::Network::SetIPs()
{
  return MEMORY[0x1E0DCD750]();
}

uint64_t rtc::Network::Network()
{
  return MEMORY[0x1E0DCD758]();
}

{
  return MEMORY[0x1E0DCD760]();
}

void rtc::Network::~Network(rtc::Network *this)
{
  MEMORY[0x1E0DCD768](this);
}

uint64_t apdu::ApduResponse::createFromMessage()
{
  return MEMORY[0x1E0DCE3E8]();
}

uint64_t cbor::CBORReader::read()
{
  return MEMORY[0x1E0DCE3F0]();
}

uint64_t cbor::CBORWriter::write()
{
  return MEMORY[0x1E0DCE3F8]();
}

uint64_t cbor::CBORValue::CBORValue()
{
  return MEMORY[0x1E0DCE400]();
}

{
  return MEMORY[0x1E0DCE408]();
}

{
  return MEMORY[0x1E0DCE410]();
}

{
  return MEMORY[0x1E0DCE418]();
}

{
  return MEMORY[0x1E0DCE420]();
}

{
  return MEMORY[0x1E0DCE428]();
}

{
  return MEMORY[0x1E0DCE440]();
}

{
  return MEMORY[0x1E0DCE450]();
}

uint64_t cbor::CBORValue::CBORValue(cbor::CBORValue *this, const char *a2)
{
  return MEMORY[0x1E0DCE430](this, a2);
}

uint64_t cbor::CBORValue::CBORValue(cbor::CBORValue *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DCE438](this, a2);
}

uint64_t cbor::CBORValue::CBORValue(cbor::CBORValue *this, const WebCore::BufferSource *a2)
{
  return MEMORY[0x1E0DCE448](this, a2);
}

uint64_t cbor::CBORValue::CBORValue(cbor::CBORValue *this)
{
  return MEMORY[0x1E0DCE458](this);
}

{
  return MEMORY[0x1E0DCE460](this);
}

{
  return MEMORY[0x1E0DCE468](this);
}

void cbor::CBORValue::~CBORValue(cbor::CBORValue *this)
{
  MEMORY[0x1E0DCE470](this);
}

uint64_t cbor::CBORValue::operator=()
{
  return MEMORY[0x1E0DCE478]();
}

uint64_t fido::encodeAsCBOR(fido *this, const fido::AuthenticatorGetInfoResponse *a2)
{
  return MEMORY[0x1E0DCE480](this, a2);
}

uint64_t fido::FidoHidMessage::popNextPacket(fido::FidoHidMessage *this)
{
  return MEMORY[0x1E0DCE488](this);
}

uint64_t fido::FidoHidMessage::addContinuationPacket()
{
  return MEMORY[0x1E0DCE490]();
}

uint64_t fido::FidoHidMessage::createFromSerializedData()
{
  return MEMORY[0x1E0DCE498]();
}

uint64_t fido::FidoHidMessage::create()
{
  return MEMORY[0x1E0DCE4A0]();
}

uint64_t fido::getResponseCode()
{
  return MEMORY[0x1E0DCE4A8]();
}

uint64_t fido::FidoHidInitPacket::FidoHidInitPacket()
{
  return MEMORY[0x1E0DCE4B0]();
}

uint64_t fido::readU2fSignResponse()
{
  return MEMORY[0x1E0DCE4B8]();
}

uint64_t fido::convertToU2fSignCommand()
{
  return MEMORY[0x1E0DCE4C0]();
}

uint64_t fido::readCTAPGetInfoResponse()
{
  return MEMORY[0x1E0DCE4C8]();
}

uint64_t fido::readU2fRegisterResponse()
{
  return MEMORY[0x1E0DCE4D0]();
}

uint64_t fido::FidoHidContinuationPacket::FidoHidContinuationPacket()
{
  return MEMORY[0x1E0DCE4D8]();
}

uint64_t fido::convertToU2fRegisterCommand()
{
  return MEMORY[0x1E0DCE4E0]();
}

uint64_t fido::AuthenticatorGetInfoResponse::setOptions()
{
  return MEMORY[0x1E0DCE4E8]();
}

uint64_t fido::AuthenticatorGetInfoResponse::setPinProtocols()
{
  return MEMORY[0x1E0DCE4F0]();
}

uint64_t fido::AuthenticatorGetInfoResponse::AuthenticatorGetInfoResponse()
{
  return MEMORY[0x1E0DCE4F8]();
}

uint64_t fido::readCTAPGetAssertionResponse()
{
  return MEMORY[0x1E0DCE500]();
}

uint64_t fido::AuthenticatorSupportedOptions::setClientPinAvailability()
{
  return MEMORY[0x1E0DCE508]();
}

uint64_t fido::AuthenticatorSupportedOptions::setUserVerificationAvailability()
{
  return MEMORY[0x1E0DCE510]();
}

uint64_t fido::isConvertibleToU2fSignCommand(fido *this, const PublicKeyCredentialRequestOptions *a2)
{
  return MEMORY[0x1E0DCE518](this, a2);
}

uint64_t fido::readCTAPMakeCredentialResponse()
{
  return MEMORY[0x1E0DCE520]();
}

uint64_t fido::encodeEmptyAuthenticatorRequest()
{
  return MEMORY[0x1E0DCE528]();
}

uint64_t fido::encodeGetAssertionRequestAsCBOR()
{
  return MEMORY[0x1E0DCE530]();
}

uint64_t fido::convertToU2fCheckOnlySignCommand()
{
  return MEMORY[0x1E0DCE538]();
}

uint64_t fido::encodeMakeCredentialRequestAsCBOR()
{
  return MEMORY[0x1E0DCE540]();
}

uint64_t fido::isConvertibleToU2fRegisterCommand(fido *this, const PublicKeyCredentialCreationOptions *a2)
{
  return MEMORY[0x1E0DCE548](this, a2);
}

uint64_t fido::constructBogusU2fRegistrationCommand(fido *this)
{
  return MEMORY[0x1E0DCE550](this);
}

uint64_t fido::pin::TokenRequest::tryCreate()
{
  return MEMORY[0x1E0DCE558]();
}

uint64_t fido::pin::encodeAsCBOR()
{
  return MEMORY[0x1E0DCE560]();
}

{
  return MEMORY[0x1E0DCE568]();
}

{
  return MEMORY[0x1E0DCE570]();
}

uint64_t fido::pin::TokenResponse::parse()
{
  return MEMORY[0x1E0DCE578]();
}

uint64_t fido::pin::RetriesResponse::parse()
{
  return MEMORY[0x1E0DCE580]();
}

uint64_t fido::pin::KeyAgreementResponse::parse()
{
  return MEMORY[0x1E0DCE588]();
}

uint64_t fido::pin::KeyAgreementResponse::KeyAgreementResponse()
{
  return MEMORY[0x1E0DCE590]();
}

void fido::pin::KeyAgreementResponse::~KeyAgreementResponse(fido::pin::KeyAgreementResponse *this)
{
  MEMORY[0x1E0DCE598](this);
}

uint64_t fido::pin::validateAndConvertToUTF8(fido::pin *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DCE5A0](this, a2);
}

uint64_t webrtc::SdpVideoFormat::SdpVideoFormat()
{
  return MEMORY[0x1E0DCD8D8]();
}

void webrtc::SdpVideoFormat::~SdpVideoFormat(webrtc::SdpVideoFormat *this)
{
  MEMORY[0x1E0DCD8E0](this);
}

uint64_t webrtc::flushLocalEncoder(webrtc *this, void *a2)
{
  return MEMORY[0x1E0DCD920](this, a2);
}

uint64_t webrtc::callback_list_impl::CallbackListReceivers::Foreach()
{
  return MEMORY[0x1E0DCD960]();
}

uint64_t webrtc::callback_list_impl::CallbackListReceivers::CallbackListReceivers(webrtc::callback_list_impl::CallbackListReceivers *this)
{
  return MEMORY[0x1E0DCD968](this);
}

uint64_t webrtc::createLocalEncoder()
{
  return MEMORY[0x1E0DCD970]();
}

uint64_t webrtc::releaseLocalEncoder(webrtc *this, void *a2)
{
  return MEMORY[0x1E0DCD9A8](this, a2);
}

uint64_t webrtc::setLocalEncoderRates(webrtc *this, void *a2)
{
  return MEMORY[0x1E0DCD9F0](this, a2);
}

uint64_t webrtc::createLocalVP9Decoder()
{
  return MEMORY[0x1E0DCDA10]();
}

uint64_t webrtc::createLocalH264Decoder()
{
  return MEMORY[0x1E0DCDA38]();
}

uint64_t webrtc::createLocalH265Decoder()
{
  return MEMORY[0x1E0DCDA40]();
}

uint64_t webrtc::initializeLocalEncoder(webrtc *this, void *a2)
{
  return MEMORY[0x1E0DCDA48](this, a2);
}

uint64_t webrtc::copyPixelBufferForFrame()
{
  return MEMORY[0x1E0DCDA78]();
}

uint64_t webrtc::encodeLocalEncoderFrame()
{
  return MEMORY[0x1E0DCDA80]();
}

uint64_t webrtc::encoderVideoTaskComplete()
{
  return MEMORY[0x1E0DCDAA8]();
}

uint64_t webrtc::setVideoDecoderCallbacks()
{
  return MEMORY[0x1E0DCDAC0]();
}

uint64_t webrtc::setVideoEncoderCallbacks()
{
  return MEMORY[0x1E0DCDAC8]();
}

uint64_t webrtc::videoDecoderTaskComplete(webrtc *this, void *a2, uint64_t a3, uint64_t a4, __CVBuffer *a5)
{
  return MEMORY[0x1E0DCDAD8](this, a2, a3, a4, a5);
}

uint64_t webrtc::videoDecoderTaskComplete(webrtc *this, void *a2, uint64_t a3, uint64_t a4, void *a5, __CVBuffer *(*a6)(void *), void (*a7)(void *), int a8, int a9)
{
  return MEMORY[0x1E0DCDAE0](this, a2, a3, a4, a5, a6, a7);
}

uint64_t webrtc::videoFrameBufferProvider()
{
  return MEMORY[0x1E0DCDAE8]();
}

uint64_t webrtc::setLocalEncoderLowLatency(webrtc *this, void *a2)
{
  return MEMORY[0x1E0DCDB08](this, a2);
}

uint64_t WebCore::CDMFactory::registeredFactories(WebCore::CDMFactory *this)
{
  return MEMORY[0x1E0DCE5B0](this);
}

uint64_t WebCore::CDMFactory::platformRegisterFactories()
{
  return MEMORY[0x1E0DCE5B8]();
}

uint64_t WebCore::CDMPrivate::CDMPrivate(WebCore::CDMPrivate *this)
{
  return MEMORY[0x1E0DCE5C0](this);
}

void WebCore::CDMPrivate::~CDMPrivate(WebCore::CDMPrivate *this)
{
  MEMORY[0x1E0DCE5C8](this);
}

uint64_t WebCore::CachedPage::restore()
{
  return MEMORY[0x1E0DCE5D0]();
}

void WebCore::CachedPage::~CachedPage(WebCore::CachedPage *this)
{
  MEMORY[0x1E0DCE5D8](this);
}

uint64_t WebCore::Credential::fromIPCData()
{
  return MEMORY[0x1E0DCE5E0]();
}

uint64_t WebCore::Credential::Credential(WebCore::Credential *this, NSURLCredential *a2)
{
  return MEMORY[0x1E0DCE5E8](this, a2);
}

uint64_t WebCore::FileHandle::FileHandle()
{
  return MEMORY[0x1E0DCE5F0]();
}

uint64_t WebCore::FileHandle::FileHandle(WebCore::FileHandle *this)
{
  return MEMORY[0x1E0DCE5F8](this);
}

void WebCore::FileHandle::~FileHandle(WebCore::FileHandle *this)
{
  MEMORY[0x1E0DCE600](this);
}

uint64_t WebCore::FileHandle::operator=()
{
  return MEMORY[0x1E0DCE608]();
}

uint64_t WebCore::FloatPoint::FloatPoint(WebCore::FloatPoint *this, const CGPoint *a2)
{
  return MEMORY[0x1E0DCE610](this, a2);
}

uint64_t WebCore::FloatPoint::FloatPoint(WebCore::FloatPoint *this, const IntPoint *a2)
{
  return MEMORY[0x1E0DCE618](this, a2);
}

uint64_t WebCore::LayoutRect::LayoutRect(WebCore::LayoutRect *this, const FloatRect *a2)
{
  return MEMORY[0x1E0DCE628](this, a2);
}

uint64_t WebCore::LocalFrame::createView()
{
  return MEMORY[0x1E0DCE630]();
}

uint64_t WebCore::LocalFrame::checkedEditor(WebCore::LocalFrame *this)
{
  return MEMORY[0x1E0DCE638](this);
}

uint64_t WebCore::LocalFrame::fromJSContext(WebCore::LocalFrame *this, const OpaqueJSContext *a2)
{
  return MEMORY[0x1E0DCE640](this, a2);
}

uint64_t WebCore::LocalFrame::rangeForPoint(WebCore::LocalFrame *this, const IntPoint *a2)
{
  return MEMORY[0x1E0DCE648](this, a2);
}

uint64_t WebCore::LocalFrame::createSubframe()
{
  return MEMORY[0x1E0DCE650]();
}

uint64_t WebCore::LocalFrame::createMainFrame()
{
  return MEMORY[0x1E0DCE658]();
}

uint64_t WebCore::LocalFrame::setPageZoomFactor(WebCore::LocalFrame *this, float a2)
{
  return MEMORY[0x1E0DCE668](this, a2);
}

uint64_t WebCore::LocalFrame::setTextZoomFactor(WebCore::LocalFrame *this, float a2)
{
  return MEMORY[0x1E0DCE670](this, a2);
}

uint64_t WebCore::LocalFrame::orientationChanged(WebCore::LocalFrame *this)
{
  return MEMORY[0x1E0DCE678](this);
}

uint64_t WebCore::LocalFrame::checkedEventHandler(WebCore::LocalFrame *this)
{
  return MEMORY[0x1E0DCE680](this);
}

uint64_t WebCore::LocalFrame::dataDetectionResults(WebCore::LocalFrame *this)
{
  return MEMORY[0x1E0DCE688](this);
}

uint64_t WebCore::LocalFrame::deepestNodeAtLocation(WebCore::LocalFrame *this, const WebCore::FloatPoint *a2)
{
  return MEMORY[0x1E0DCE690](this, a2);
}

uint64_t WebCore::LocalFrame::createProvisionalSubframe()
{
  return MEMORY[0x1E0DCE6B0]();
}

uint64_t WebCore::LocalFrame::setPageAndTextZoomFactors(WebCore::LocalFrame *this, float a2, float a3)
{
  return MEMORY[0x1E0DCE6B8](this, a2, a3);
}

uint64_t WebCore::LocalFrame::injectUserScriptImmediately()
{
  return MEMORY[0x1E0DCE6C8]();
}

uint64_t WebCore::LocalFrame::nodeRespondingToClickEvents(WebCore::LocalFrame *this, const WebCore::FloatPoint *a2, WebCore::FloatPoint *a3, WebCore::SecurityOrigin *a4)
{
  return MEMORY[0x1E0DCE6D0](this, a2, a3, a4);
}

uint64_t WebCore::LocalFrame::nodeRespondingToInteraction(WebCore::LocalFrame *this, const WebCore::FloatPoint *a2, WebCore::FloatPoint *a3)
{
  return MEMORY[0x1E0DCE6D8](this, a2, a3);
}

uint64_t WebCore::LocalFrame::resetAllGeolocationPermission(WebCore::LocalFrame *this)
{
  return MEMORY[0x1E0DCE6E8](this);
}

uint64_t WebCore::LocalFrame::nodeRespondingToDoubleClickEvent(WebCore::LocalFrame *this, const WebCore::FloatPoint *a2, WebCore::FloatPoint *a3)
{
  return MEMORY[0x1E0DCE6F8](this, a2, a3);
}

uint64_t WebCore::LocalFrame::contentFrameFromWindowOrFrameElement(WebCore::LocalFrame *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  return MEMORY[0x1E0DCE728](this, a2, a3);
}

uint64_t WebCore::LocalFrame::init(WebCore::LocalFrame *this)
{
  return MEMORY[0x1E0DCE758](this);
}

uint64_t WebCore::LocalFrame::setView()
{
  return MEMORY[0x1E0DCE770]();
}

uint64_t WebCore::MotionPath::computePathForBox()
{
  return MEMORY[0x1E0DCE788]();
}

uint64_t WebCore::MotionPath::computePathForShape()
{
  return MEMORY[0x1E0DCE790]();
}

uint64_t WebCore::MouseEvent::create()
{
  return MEMORY[0x1E0DCE7A0]();
}

{
  return MEMORY[0x1E0DCE7A8]();
}

void WebCore::OriginLock::~OriginLock(WebCore::OriginLock *this)
{
  MEMORY[0x1E0DCE7B0](this);
}

uint64_t WebCore::Pasteboard::createForDragAndDrop()
{
  return MEMORY[0x1E0DCE7B8]();
}

uint64_t WebCore::Pasteboard::nameOfDragPasteboard(WebCore::Pasteboard *this)
{
  return MEMORY[0x1E0DCE7C0](this);
}

uint64_t WebCore::Pasteboard::createForCopyAndPaste()
{
  return MEMORY[0x1E0DCE7C8]();
}

uint64_t WebCore::Pasteboard::supportedFileUploadPasteboardTypes(WebCore::Pasteboard *this)
{
  return MEMORY[0x1E0DCE7D0](this);
}

uint64_t WebCore::PingLoader::sendViolationReport()
{
  return MEMORY[0x1E0DCE7D8]();
}

uint64_t WebCore::PushCrypto::ClientKeys::generate(WebCore::PushCrypto::ClientKeys *this)
{
  return MEMORY[0x1E0DCE7E0](this);
}

uint64_t WebCore::PushCrypto::decryptAESGCMPayload()
{
  return MEMORY[0x1E0DCE7E8]();
}

uint64_t WebCore::PushCrypto::decryptAES128GCMPayload()
{
  return MEMORY[0x1E0DCE7F0]();
}

uint64_t WebCore::RenderView::compositor(WebCore::RenderView *this)
{
  return MEMORY[0x1E0DCE7F8](this);
}

uint64_t WebCore::ScrollView::setScrollOffset(WebCore::ScrollView *this, const IntPoint *a2)
{
  return MEMORY[0x1E0DCE800](this, a2);
}

uint64_t WebCore::ScrollView::setScrollbarModes()
{
  return MEMORY[0x1E0DCE810]();
}

uint64_t WebCore::ScrollView::setUseFixedLayout(WebCore::ScrollView *this)
{
  return MEMORY[0x1E0DCE818](this);
}

uint64_t WebCore::ScrollView::setFixedLayoutSize(WebCore::ScrollView *this, const IntSize *a2)
{
  return MEMORY[0x1E0DCE820](this, a2);
}

uint64_t WebCore::ScrollView::setExposedContentRect(WebCore::ScrollView *this, const FloatRect *a2)
{
  return MEMORY[0x1E0DCE828](this, a2);
}

uint64_t WebCore::ScrollView::setUnobscuredContentSize(WebCore::ScrollView *this, const FloatSize *a2)
{
  return MEMORY[0x1E0DCE830](this, a2);
}

uint64_t WebCore::ScrollView::setDelegatedScrollingMode()
{
  return MEMORY[0x1E0DCE838]();
}

uint64_t WebCore::ScrollView::paint()
{
  return MEMORY[0x1E0DCE848]();
}

uint64_t WebCore::StorageMap::removeItem(WebCore::StorageMap *this, const WTF::String *a2, WTF::String *a3)
{
  return MEMORY[0x1E0DCE850](this, a2, a3);
}

uint64_t WebCore::StorageMap::importItems()
{
  return MEMORY[0x1E0DCE858]();
}

uint64_t WebCore::StorageMap::setItemIgnoringQuota(WebCore::StorageMap *this, const WTF::String *a2, const WTF::String *a3)
{
  return MEMORY[0x1E0DCE860](this, a2, a3);
}

uint64_t WebCore::StorageMap::key(WebCore::StorageMap *this)
{
  return MEMORY[0x1E0DCE868](this);
}

uint64_t WebCore::StorageMap::clear(WebCore::StorageMap *this)
{
  return MEMORY[0x1E0DCE870](this);
}

uint64_t WebCore::StorageMap::setItem(WebCore::StorageMap *this, const WTF::String *a2, const WTF::String *a3, WTF::String *a4, BOOL *a5)
{
  return MEMORY[0x1E0DCE878](this, a2, a3, a4, a5);
}

uint64_t WebCore::StorageMap::StorageMap(WebCore::StorageMap *this)
{
  return MEMORY[0x1E0DCE880](this);
}

uint64_t WebCore::StyleColor::StyleColor()
{
  return MEMORY[0x1E0DCE888]();
}

void WebCore::StyleColor::~StyleColor(WebCore::StyleColor *this)
{
  MEMORY[0x1E0DCE890](this);
}

uint64_t WebCore::TimeRanges::add()
{
  return MEMORY[0x1E0DCE898]();
}

uint64_t WebCore::TimeRanges::create(WebCore::TimeRanges *this)
{
  return MEMORY[0x1E0DCE8A0](this);
}

uint64_t WebCore::UserScript::UserScript()
{
  return MEMORY[0x1E0DCE8F0]();
}

uint64_t WebCore::VideoFrame::asVideoFrameCV(WebCore::VideoFrame *this)
{
  return MEMORY[0x1E0DCE8F8](this);
}

uint64_t WebCore::VideoFrame::VideoFrame()
{
  return MEMORY[0x1E0DCE900]();
}

uint64_t WebCore::cocoaColor(WebCore *this, const Color *a2)
{
  return MEMORY[0x1E0DCE908](this, a2);
}

uint64_t WebCore::intersects()
{
  return MEMORY[0x1E0DCE910]();
}

uint64_t WebCore::parseRange()
{
  return MEMORY[0x1E0DCE918]();
}

uint64_t WebCore::resolveDNS()
{
  return MEMORY[0x1E0DCE920]();
}

uint64_t WebCore::screenSize(WebCore *this)
{
  return MEMORY[0x1E0DCE928](this);
}

void WebCore::AbortSignal::~AbortSignal(WebCore::AbortSignal *this)
{
  MEMORY[0x1E0DCE930](this);
}

void WebCore::AbortSignal::operator delete(void *a1)
{
  MEMORY[0x1E0DCE938](a1);
}

uint64_t WebCore::BitmapImage::create()
{
  return MEMORY[0x1E0DCE940]();
}

{
  return MEMORY[0x1E0DCE948]();
}

{
  return MEMORY[0x1E0DCE950]();
}

uint64_t WebCore::CachedImage::imageForRenderer()
{
  return MEMORY[0x1E0DCE978]();
}

uint64_t WebCore::ContentType::ContentType(WebCore::ContentType *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DCE980](this, a2);
}

{
  return MEMORY[0x1E0DCE988](this, a2);
}

uint64_t WebCore::ControlPart::ControlPart()
{
  return MEMORY[0x1E0DCE990]();
}

void WebCore::DOMRectList::~DOMRectList(WebCore::DOMRectList *this)
{
  MEMORY[0x1E0DCE998](this);
}

uint64_t WebCore::DataSegment::create()
{
  return MEMORY[0x1E0DCE9A0]();
}

{
  return MEMORY[0x1E0DCE9A8]();
}

uint64_t WebCore::DisplayList::DrawGlyphs::DrawGlyphs()
{
  return MEMORY[0x1E0DCE9B0]();
}

{
  return MEMORY[0x1E0DCE9B8]();
}

uint64_t WebCore::DisplayList::DrawPattern::DrawPattern()
{
  return MEMORY[0x1E0DCE9C0]();
}

uint64_t WebCore::DisplayList::DrawControlPart::DrawControlPart()
{
  return MEMORY[0x1E0DCE9C8]();
}

uint64_t WebCore::DisplayList::DrawLinesForText::DrawLinesForText()
{
  return MEMORY[0x1E0DCE9D0]();
}

uint64_t WebCore::DisplayList::PaintFrameForMedia::PaintFrameForMedia()
{
  return MEMORY[0x1E0DCE9D8]();
}

uint64_t WebCore::DisplayList::DrawDisplayListItems::DrawDisplayListItems()
{
  return MEMORY[0x1E0DCE9E0]();
}

uint64_t WebCore::DisplayList::FillRectWithGradient::FillRectWithGradient()
{
  return MEMORY[0x1E0DCE9E8]();
}

{
  return MEMORY[0x1E0DCE9F0]();
}

uint64_t WebCore::DisplayList::DrawFilteredImageBuffer::DrawFilteredImageBuffer()
{
  return MEMORY[0x1E0DCE9F8]();
}

uint64_t WebCore::DisplayList::FillRectWithGradientAndSpaceTransform::FillRectWithGradientAndSpaceTransform()
{
  return MEMORY[0x1E0DCEA00]();
}

{
  return MEMORY[0x1E0DCEA08]();
}

uint64_t WebCore::DisplayList::Recorder::Recorder()
{
  return MEMORY[0x1E0DCEA10]();
}

void WebCore::DisplayList::Recorder::~Recorder(WebCore::DisplayList::Recorder *this)
{
  MEMORY[0x1E0DCEA18](this);
}

uint64_t WebCore::DisplayList::SetState::SetState()
{
  return MEMORY[0x1E0DCEA20]();
}

uint64_t WebCore::EventRegion::EventRegion()
{
  return MEMORY[0x1E0DCEA28]();
}

uint64_t WebCore::EventRegion::EventRegion(WebCore::EventRegion *this)
{
  return MEMORY[0x1E0DCEA30](this);
}

uint64_t WebCore::FEComposite::create()
{
  return MEMORY[0x1E0DCEA50]();
}

uint64_t WebCore::FileChooser::chooseFiles()
{
  return MEMORY[0x1E0DCEA60]();
}

uint64_t WebCore::FileChooser::chooseMediaFiles()
{
  return MEMORY[0x1E0DCEA68]();
}

uint64_t WebCore::FileChooser::cancelFileChoosing(WebCore::FileChooser *this)
{
  return MEMORY[0x1E0DCEA70](this);
}

void WebCore::FileChooser::~FileChooser(WebCore::FileChooser *this)
{
  MEMORY[0x1E0DCEA78](this);
}

uint64_t WebCore::FontCascade::setCodePath()
{
  return MEMORY[0x1E0DCEA80]();
}

uint64_t WebCore::FontCascade::setDisableFontSubpixelAntialiasingForTesting(WebCore::FontCascade *this)
{
  return MEMORY[0x1E0DCEA88](this);
}

uint64_t WebCore::FontChanges::FontChanges()
{
  return MEMORY[0x1E0DCEA90]();
}

uint64_t WebCore::FrameLoader::shouldClose(WebCore::FrameLoader *this)
{
  return MEMORY[0x1E0DCEAA0](this);
}

uint64_t WebCore::FrameLoader::changeLocation()
{
  return MEMORY[0x1E0DCEAA8]();
}

uint64_t WebCore::FrameLoader::detachFromParent(WebCore::FrameLoader *this)
{
  return MEMORY[0x1E0DCEAB0](this);
}

uint64_t WebCore::FrameLoader::stopForUserCancel(WebCore::FrameLoader *this)
{
  return MEMORY[0x1E0DCEAC0](this);
}

uint64_t WebCore::FrameLoader::outgoingReferrerURL(WebCore::FrameLoader *this)
{
  return MEMORY[0x1E0DCEAC8](this);
}

uint64_t WebCore::FrameLoader::reloadWithOverrideEncoding(WebCore::FrameLoader *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DCEAD0](this, a2);
}

uint64_t WebCore::FrameLoader::completePageTransitionIfNeeded(WebCore::FrameLoader *this)
{
  return MEMORY[0x1E0DCEAD8](this);
}

uint64_t WebCore::FrameLoader::load()
{
  return MEMORY[0x1E0DCEAE0]();
}

uint64_t WebCore::FrameLoader::reload()
{
  return MEMORY[0x1E0DCEAE8]();
}

uint64_t WebCore::Geolocation::setIsAllowed(WebCore::Geolocation *this, uint64_t a2, const WTF::String *a3)
{
  return MEMORY[0x1E0DCEAF0](this, a2, a3);
}

void WebCore::Geolocation::~Geolocation(WebCore::Geolocation *this)
{
  MEMORY[0x1E0DCEB00](this);
}

void WebCore::Geolocation::operator delete(void *a1)
{
  MEMORY[0x1E0DCEB08](a1);
}

uint64_t WebCore::HTMLElement::shouldExtendSelectionToTargetNode()
{
  return MEMORY[0x1E0DCEB50]();
}

uint64_t WebCore::HTMLElement::labels(WebCore::HTMLElement *this)
{
  return MEMORY[0x1E0DCEB60](this);
}

uint64_t WebCore::HistoryItem::setFormData()
{
  return MEMORY[0x1E0DCEB70]();
}

uint64_t WebCore::HistoryItem::setReferrer(WebCore::HistoryItem *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DCEB78](this, a2);
}

uint64_t WebCore::HistoryItem::addChildItem()
{
  return MEMORY[0x1E0DCEB80]();
}

uint64_t WebCore::HistoryItem::setStateObject()
{
  return MEMORY[0x1E0DCEB98]();
}

uint64_t WebCore::HistoryItem::setDocumentState()
{
  return MEMORY[0x1E0DCEBA0]();
}

uint64_t WebCore::HistoryItem::setScrollPosition(WebCore::HistoryItem *this, const IntPoint *a2)
{
  return MEMORY[0x1E0DCEBB0](this, a2);
}

uint64_t WebCore::HistoryItem::setFormContentType(WebCore::HistoryItem *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DCEBB8](this, a2);
}

uint64_t WebCore::HistoryItem::setPageScaleFactor(WebCore::HistoryItem *this, float a2)
{
  return MEMORY[0x1E0DCEBC0](this, a2);
}

uint64_t WebCore::HistoryItem::setOriginalURLString(WebCore::HistoryItem *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DCEBC8](this, a2);
}

uint64_t WebCore::HistoryItem::setShouldRestoreScrollPosition(WebCore::HistoryItem *this)
{
  return MEMORY[0x1E0DCEBD0](this);
}

uint64_t WebCore::HistoryItem::setShouldOpenExternalURLsPolicy()
{
  return MEMORY[0x1E0DCEBD8]();
}

uint64_t WebCore::HistoryItem::formData(WebCore::HistoryItem *this)
{
  return MEMORY[0x1E0DCEBE0](this);
}

uint64_t WebCore::HistoryItem::setTarget(WebCore::HistoryItem *this, const AtomString *a2)
{
  return MEMORY[0x1E0DCEBF0](this, a2);
}

uint64_t WebCore::HistoryItem::HistoryItem()
{
  return MEMORY[0x1E0DCEBF8]();
}

void WebCore::HistoryItem::~HistoryItem(WebCore::HistoryItem *this)
{
  MEMORY[0x1E0DCEC00](this);
}

uint64_t WebCore::ImageBuffer::setBackend()
{
  return MEMORY[0x1E0DCEC08]();
}

uint64_t WebCore::ImageBuffer::setVolatile(WebCore::ImageBuffer *this)
{
  return MEMORY[0x1E0DCEC10](this);
}

uint64_t WebCore::ImageBuffer::putPixelBuffer()
{
  return MEMORY[0x1E0DCEC18]();
}

uint64_t WebCore::ImageBuffer::setNonVolatile(WebCore::ImageBuffer *this)
{
  return MEMORY[0x1E0DCEC20](this);
}

uint64_t WebCore::ImageBuffer::backendParameters()
{
  return MEMORY[0x1E0DCEC28]();
}

uint64_t WebCore::ImageBuffer::sinkIntoNativeImage()
{
  return MEMORY[0x1E0DCEC30]();
}

uint64_t WebCore::ImageBuffer::calculateBackendSize(WebCore::ImageBuffer *this, FloatSize a2, float a3)
{
  return MEMORY[0x1E0DCEC38](this, *(__n128 *)&a2.m_width, *(__n128 *)&a2.m_height, a3);
}

uint64_t WebCore::ImageBuffer::transferToNewContext()
{
  return MEMORY[0x1E0DCEC40]();
}

uint64_t WebCore::ImageBuffer::setVolatileAndPurgeForTesting(WebCore::ImageBuffer *this)
{
  return MEMORY[0x1E0DCEC48](this);
}

uint64_t WebCore::ImageBuffer::sinkIntoBufferForDifferentThread()
{
  return MEMORY[0x1E0DCEC50]();
}

uint64_t WebCore::ImageBuffer::create()
{
  return MEMORY[0x1E0DCEC58]();
}

uint64_t WebCore::ImageBuffer::ImageBuffer()
{
  return MEMORY[0x1E0DCEC60]();
}

{
  return MEMORY[0x1E0DCEC68]();
}

void WebCore::ImageBuffer::~ImageBuffer(WebCore::ImageBuffer *this)
{
  MEMORY[0x1E0DCEC70](this);
}

uint64_t WebCore::MediaPlayer::cancelLoad(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEC88](this);
}

uint64_t WebCore::MediaPlayer::colorSpace(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEC90](this);
}

uint64_t WebCore::MediaPlayer::invalidate(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEC98](this);
}

uint64_t WebCore::MediaPlayer::setPreload()
{
  return MEMORY[0x1E0DCECA0]();
}

uint64_t WebCore::MediaPlayer::mediaEngine()
{
  return MEMORY[0x1E0DCECA8]();
}

uint64_t WebCore::MediaPlayer::muteChanged(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCECB0](this);
}

uint64_t WebCore::MediaPlayer::naturalSize(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCECB8](this);
}

uint64_t WebCore::MediaPlayer::rateChanged(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCECC0](this);
}

uint64_t WebCore::MediaPlayer::sizeChanged(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCECC8](this);
}

uint64_t WebCore::MediaPlayer::timeChanged(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCECD0](this);
}

uint64_t WebCore::MediaPlayer::addTextTrack(WebCore::MediaPlayer *this, WebCore::InbandTextTrackPrivate *a2)
{
  return MEMORY[0x1E0DCECD8](this, a2);
}

uint64_t WebCore::MediaPlayer::networkState(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCECE0](this);
}

uint64_t WebCore::MediaPlayer::seekToTarget()
{
  return MEMORY[0x1E0DCECE8]();
}

uint64_t WebCore::MediaPlayer::addAudioTrack(WebCore::MediaPlayer *this, WebCore::AudioTrackPrivate *a2)
{
  return MEMORY[0x1E0DCECF0](this, a2);
}

uint64_t WebCore::MediaPlayer::addVideoTrack(WebCore::MediaPlayer *this, WebCore::VideoTrackPrivate *a2)
{
  return MEMORY[0x1E0DCECF8](this, a2);
}

uint64_t WebCore::MediaPlayer::playerPrivate(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCED00](this);
}

uint64_t WebCore::MediaPlayer::prepareToPlay(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCED08](this);
}

uint64_t WebCore::MediaPlayer::setCDMSession()
{
  return MEMORY[0x1E0DCED10]();
}

uint64_t WebCore::MediaPlayer::tracksChanged(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCED18](this);
}

uint64_t WebCore::MediaPlayer::volumeChanged(WebCore::MediaPlayer *this, double a2)
{
  return MEMORY[0x1E0DCED20](this, a2);
}

uint64_t WebCore::MediaPlayer::playAtHostTime(WebCore::MediaPlayer *this, const WTF::MonotonicTime *a2)
{
  return MEMORY[0x1E0DCED28](this, a2);
}

uint64_t WebCore::MediaPlayer::durationChanged(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCED30](this);
}

uint64_t WebCore::MediaPlayer::pauseAtHostTime(WebCore::MediaPlayer *this, const WTF::MonotonicTime *a2)
{
  return MEMORY[0x1E0DCED38](this, a2);
}

uint64_t WebCore::MediaPlayer::removeTextTrack(WebCore::MediaPlayer *this, WebCore::InbandTextTrackPrivate *a2)
{
  return MEMORY[0x1E0DCED40](this, a2);
}

uint64_t WebCore::MediaPlayer::removeAudioTrack(WebCore::MediaPlayer *this, WebCore::AudioTrackPrivate *a2)
{
  return MEMORY[0x1E0DCED48](this, a2);
}

uint64_t WebCore::MediaPlayer::removeVideoTrack(WebCore::MediaPlayer *this, WebCore::VideoTrackPrivate *a2)
{
  return MEMORY[0x1E0DCED50](this, a2);
}

uint64_t WebCore::MediaPlayer::setPageIsVisible(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCED58](this);
}

uint64_t WebCore::MediaPlayer::setResourceOwner()
{
  return MEMORY[0x1E0DCED60]();
}

uint64_t WebCore::MediaPlayer::mediaPlayerLogger(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCED68](this);
}

uint64_t WebCore::MediaPlayer::performTaskAtTime()
{
  return MEMORY[0x1E0DCED70]();
}

uint64_t WebCore::MediaPlayer::readyStateChanged(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCED78](this);
}

uint64_t WebCore::MediaPlayer::setPreservesPitch(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCED80](this);
}

uint64_t WebCore::MediaPlayer::liveUpdateInterval(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCED88](this);
}

uint64_t WebCore::MediaPlayer::setBufferingPolicy()
{
  return MEMORY[0x1E0DCED90]();
}

uint64_t WebCore::MediaPlayer::audioSourceProvider(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCED98](this);
}

uint64_t WebCore::MediaPlayer::cdmInstanceAttached(WebCore::MediaPlayer *this, WebCore::CDMInstance *a2)
{
  return MEMORY[0x1E0DCEDA0](this, a2);
}

uint64_t WebCore::MediaPlayer::cdmInstanceDetached(WebCore::MediaPlayer *this, WebCore::CDMInstance *a2)
{
  return MEMORY[0x1E0DCEDA8](this, a2);
}

uint64_t WebCore::MediaPlayer::networkStateChanged(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEDB0](this);
}

uint64_t WebCore::MediaPlayer::prepareForRendering(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEDB8](this);
}

uint64_t WebCore::MediaPlayer::setPresentationSize(WebCore::MediaPlayer *this, const IntSize *a2)
{
  return MEMORY[0x1E0DCEDC0](this, a2);
}

uint64_t WebCore::MediaPlayer::setShouldDisableHDR(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEDC8](this);
}

uint64_t WebCore::MediaPlayer::createResourceLoader(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEDD0](this);
}

uint64_t WebCore::MediaPlayer::playbackStateChanged(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEDD8](this);
}

uint64_t WebCore::MediaPlayer::waitingForKeyChanged(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEDE0](this);
}

uint64_t WebCore::MediaPlayer::characteristicChanged(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEDE8](this);
}

uint64_t WebCore::MediaPlayer::endSimulatedHDCPError(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEDF0](this);
}

uint64_t WebCore::MediaPlayer::outOfBandTrackSources(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEDF8](this);
}

uint64_t WebCore::MediaPlayer::setShouldDisableSleep(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEE00](this);
}

uint64_t WebCore::MediaPlayer::notifyTrackModeChanged(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEE08](this);
}

uint64_t WebCore::MediaPlayer::setPrivateBrowsingMode(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEE10](this);
}

uint64_t WebCore::MediaPlayer::setVideoFullscreenMode(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEE18](this);
}

uint64_t WebCore::MediaPlayer::beginSimulatedHDCPError(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEE20](this);
}

uint64_t WebCore::MediaPlayer::setVideoLayerSizeFenced()
{
  return MEMORY[0x1E0DCEE28]();
}

uint64_t WebCore::MediaPlayer::videoLayerSizeDidChange(WebCore::MediaPlayer *this, const FloatSize *a2)
{
  return MEMORY[0x1E0DCEE30](this, a2);
}

uint64_t WebCore::MediaPlayer::firstVideoFrameAvailable(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEE38](this);
}

uint64_t WebCore::MediaPlayer::remoteEngineFailedToLoad(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEE40](this);
}

uint64_t WebCore::MediaPlayer::videoFrameForCurrentTime(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEE48](this);
}

uint64_t WebCore::MediaPlayer::nativeImageForCurrentTime(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEE50](this);
}

uint64_t WebCore::MediaPlayer::setVideoFullscreenGravity()
{
  return MEMORY[0x1E0DCEE58]();
}

uint64_t WebCore::MediaPlayer::setWirelessPlaybackTarget()
{
  return MEMORY[0x1E0DCEE60]();
}

uint64_t WebCore::MediaPlayer::shouldIgnoreIntrinsicSize(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEE68](this);
}

uint64_t WebCore::MediaPlayer::applicationDidBecomeActive(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEE70](this);
}

uint64_t WebCore::MediaPlayer::applicationWillResignActive(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEE78](this);
}

uint64_t WebCore::MediaPlayer::playerContentBoxRectChanged(WebCore::MediaPlayer *this, const WebCore::LayoutRect *a2)
{
  return MEMORY[0x1E0DCEE80](this, a2);
}

uint64_t WebCore::MediaPlayer::setPitchCorrectionAlgorithm()
{
  return MEMORY[0x1E0DCEE88]();
}

uint64_t WebCore::MediaPlayer::attemptToDecryptWithInstance(WebCore::MediaPlayer *this, WebCore::CDMInstance *a2)
{
  return MEMORY[0x1E0DCEE90](this, a2);
}

uint64_t WebCore::MediaPlayer::setPreferredDynamicRangeMode()
{
  return MEMORY[0x1E0DCEE98]();
}

uint64_t WebCore::MediaPlayer::setShouldMaintainAspectRatio(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEEA0](this);
}

uint64_t WebCore::MediaPlayer::initializationDataEncountered()
{
  return MEMORY[0x1E0DCEEA8]();
}

uint64_t WebCore::MediaPlayer::setShouldCheckHardwareSupport(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEEB0](this);
}

uint64_t WebCore::MediaPlayer::setShouldPlayToPlaybackTarget(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEEB8](this);
}

uint64_t WebCore::MediaPlayer::videoFullscreenStandbyChanged(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEEC0](this);
}

uint64_t WebCore::MediaPlayer::reloadAndResumePlaybackIfNeeded(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEEC8](this);
}

uint64_t WebCore::MediaPlayer::setCurrentTimeDidChangeCallback()
{
  return MEMORY[0x1E0DCEED0]();
}

uint64_t WebCore::MediaPlayer::setShouldContinueAfterKeyNeeded(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEED8](this);
}

uint64_t WebCore::MediaPlayer::stopVideoFrameMetadataGathering(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEEE0](this);
}

uint64_t WebCore::MediaPlayer::acceleratedRenderingStateChanged(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEEE8](this);
}

uint64_t WebCore::MediaPlayer::asyncVideoPlaybackQualityMetrics(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEEF0](this);
}

uint64_t WebCore::MediaPlayer::setWirelessVideoPlaybackDisabled(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEEF8](this);
}

uint64_t WebCore::MediaPlayer::startVideoFrameMetadataGathering(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEF00](this);
}

uint64_t WebCore::MediaPlayer::updateVideoFullscreenInlineImage(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEF08](this);
}

uint64_t WebCore::MediaPlayer::setInFullscreenOrPictureInPicture(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEF10](this);
}

uint64_t WebCore::MediaPlayer::seekableTimeRangesLastModifiedTime(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEF18](this);
}

uint64_t WebCore::MediaPlayer::currentPlaybackTargetIsWirelessChanged(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEF20](this);
}

uint64_t WebCore::MediaPlayer::load(WebCore::MediaPlayer *this, const WTF::URL *a2, const WebCore::ContentType *a3, const WTF::String *a4)
{
  return MEMORY[0x1E0DCEF28](this, a2, a3, a4);
}

uint64_t WebCore::MediaPlayer::load(WebCore::MediaPlayer *this, const WTF::URL *a2, const WebCore::ContentType *a3, WebCore::MediaSourcePrivateClient *a4)
{
  return MEMORY[0x1E0DCEF30](this, a2, a3, a4);
}

uint64_t WebCore::MediaPlayer::play(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEF38](this);
}

uint64_t WebCore::MediaPlayer::pause(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEF40](this);
}

uint64_t WebCore::MediaPlayer::create()
{
  return MEMORY[0x1E0DCEF48]();
}

uint64_t WebCore::MediaPlayer::seeked(WebCore::MediaPlayer *this, const WTF::MediaTime *a2)
{
  return MEMORY[0x1E0DCEF50](this, a2);
}

uint64_t WebCore::MediaPlayer::setRate(WebCore::MediaPlayer *this, double a2)
{
  return MEMORY[0x1E0DCEF58](this, a2);
}

uint64_t WebCore::MediaPlayer::keyAdded(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEF60](this);
}

uint64_t WebCore::MediaPlayer::setMuted(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1E0DCEF68](this);
}

uint64_t WebCore::MediaPlayer::keyNeeded()
{
  return MEMORY[0x1E0DCEF70]();
}

uint64_t WebCore::MediaPlayer::setVolume(WebCore::MediaPlayer *this, double a2)
{
  return MEMORY[0x1E0DCEF78](this, a2);
}

void WebCore::MediaPlayer::~MediaPlayer(WebCore::MediaPlayer *this)
{
  MEMORY[0x1E0DCEF80](this);
}

uint64_t WebCore::MemoryCache::setDisabled(WebCore::MemoryCache *this)
{
  return MEMORY[0x1E0DCEF88](this);
}

uint64_t WebCore::MemoryCache::setCapacities(WebCore::MemoryCache *this)
{
  return MEMORY[0x1E0DCEF98](this);
}

uint64_t WebCore::MemoryCache::evictResources()
{
  return MEMORY[0x1E0DCEFA0]();
}

uint64_t WebCore::MemoryCache::resourceForRequest()
{
  return MEMORY[0x1E0DCEFB0]();
}

uint64_t WebCore::MemoryCache::removeResourcesWithOrigin(WebCore::MemoryCache *this, const WebCore::ClientOrigin *a2)
{
  return MEMORY[0x1E0DCEFB8](this, a2);
}

uint64_t WebCore::MemoryCache::removeResourcesWithOrigins()
{
  return MEMORY[0x1E0DCEFC0]();
}

uint64_t WebCore::MemoryCache::destroyDecodedDataForAllImages(WebCore::MemoryCache *this)
{
  return MEMORY[0x1E0DCEFC8](this);
}

uint64_t WebCore::MemoryCache::singleton(WebCore::MemoryCache *this)
{
  return MEMORY[0x1E0DCEFD0](this);
}

uint64_t WebCore::MessagePort::notifyMessageAvailable()
{
  return MEMORY[0x1E0DCEFD8]();
}

void WebCore::MessagePort::~MessagePort(WebCore::MessagePort *this)
{
  MEMORY[0x1E0DCEFE0](this);
}

void WebCore::MessagePort::operator delete(void *a1)
{
  MEMORY[0x1E0DCEFE8](a1);
}

void WebCore::ModelPlayer::~ModelPlayer(WebCore::ModelPlayer *this)
{
  MEMORY[0x1E0DCEFF0](this);
}

uint64_t WebCore::NativeImage::replaceBackend()
{
  return MEMORY[0x1E0DCEFF8]();
}

uint64_t WebCore::NativeImage::createTransient()
{
  return MEMORY[0x1E0DCF000]();
}

uint64_t WebCore::NativeImage::create()
{
  return MEMORY[0x1E0DCF008]();
}

uint64_t WebCore::PageOverlay::setNeedsDisplay(WebCore::PageOverlay *this, const IntRect *a2)
{
  return MEMORY[0x1E0DCF010](this, a2);
}

uint64_t WebCore::PageOverlay::setNeedsDisplay(WebCore::PageOverlay *this)
{
  return MEMORY[0x1E0DCF018](this);
}

uint64_t WebCore::PageOverlay::stopFadeOutAnimation(WebCore::PageOverlay *this)
{
  return MEMORY[0x1E0DCF020](this);
}

uint64_t WebCore::PageOverlay::clear(WebCore::PageOverlay *this)
{
  return MEMORY[0x1E0DCF028](this);
}

uint64_t WebCore::PageOverlay::layer(WebCore::PageOverlay *this)
{
  return MEMORY[0x1E0DCF030](this);
}

uint64_t WebCore::PageOverlay::create()
{
  return MEMORY[0x1E0DCF038]();
}

uint64_t WebCore::PageOverlay::setFrame(WebCore::PageOverlay *this, IntRect a2)
{
  return MEMORY[0x1E0DCF040](this, *(_QWORD *)&a2.m_location, *(_QWORD *)&a2.m_size);
}

void WebCore::PageOverlay::~PageOverlay(WebCore::PageOverlay *this)
{
  MEMORY[0x1E0DCF048](this);
}

uint64_t WebCore::PathSegment::PathSegment()
{
  return MEMORY[0x1E0DCF050]();
}

uint64_t WebCore::Permissions::toPermissionName(WebCore::Permissions *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DCF058](this, a2);
}

uint64_t WebCore::PixelBuffer::computeBufferSize()
{
  return MEMORY[0x1E0DCF060]();
}

uint64_t WebCore::PixelBuffer::supportedPixelFormat()
{
  return MEMORY[0x1E0DCF068]();
}

uint64_t WebCore::PixelBuffer::zeroRange(WebCore::PixelBuffer *this)
{
  return MEMORY[0x1E0DCF070](this);
}

uint64_t WebCore::PixelBuffer::PixelBuffer()
{
  return MEMORY[0x1E0DCF078]();
}

void WebCore::PixelBuffer::~PixelBuffer(WebCore::PixelBuffer *this)
{
  MEMORY[0x1E0DCF080](this);
}

uint64_t WebCore::RemoteFrame::createSubframe()
{
  return MEMORY[0x1E0DCF088]();
}

uint64_t WebCore::RemoteFrame::createMainFrame()
{
  return MEMORY[0x1E0DCF090]();
}

uint64_t WebCore::RemoteFrame::createSubframeWithContentsInAnotherProcess()
{
  return MEMORY[0x1E0DCF098]();
}

uint64_t WebCore::RemoteFrame::setView()
{
  return MEMORY[0x1E0DCF0A0]();
}

uint64_t WebCore::SimpleRange::SimpleRange()
{
  return MEMORY[0x1E0DCF0B0]();
}

{
  return MEMORY[0x1E0DCF0B8]();
}

uint64_t WebCore::SourceAlpha::create()
{
  return MEMORY[0x1E0DCF0C0]();
}

uint64_t WebCore::SourceBrush::setGradient()
{
  return MEMORY[0x1E0DCF0C8]();
}

uint64_t WebCore::SourceBrush::SourceBrush()
{
  return MEMORY[0x1E0DCF0D0]();
}

uint64_t WebCore::SourceImage::SourceImage()
{
  return MEMORY[0x1E0DCF0D8]();
}

uint64_t WebCore::StaticRange::create()
{
  return MEMORY[0x1E0DCF0E0]();
}

void WebCore::WindowProxy::~WindowProxy(WebCore::WindowProxy *this)
{
  MEMORY[0x1E0DCF0F8](this);
}

uint64_t WebCore::logChannels(WebCore *this)
{
  return MEMORY[0x1E0DCF120](this);
}

uint64_t WebCore::prefetchDNS(WebCore *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DCF128](this, a2);
}

uint64_t WebCore::startOfWord()
{
  return MEMORY[0x1E0DCF138]();
}

uint64_t WebCore::AudioSession::sharedSession(WebCore::AudioSession *this)
{
  return MEMORY[0x1E0DCF140](this);
}

uint64_t WebCore::AudioSession::tryToSetActive(WebCore::AudioSession *this)
{
  return MEMORY[0x1E0DCF148](this);
}

uint64_t WebCore::AudioSession::endInterruption()
{
  return MEMORY[0x1E0DCF150]();
}

uint64_t WebCore::AudioSession::setSharedSession()
{
  return MEMORY[0x1E0DCF158]();
}

uint64_t WebCore::AudioSession::beginInterruption(WebCore::AudioSession *this)
{
  return MEMORY[0x1E0DCF160](this);
}

uint64_t WebCore::AudioSession::activeStateChanged(WebCore::AudioSession *this)
{
  return MEMORY[0x1E0DCF168](this);
}

uint64_t WebCore::AudioSession::addInterruptionObserver(WebCore::AudioSession *this, WebCore::AudioSessionInterruptionObserver *a2)
{
  return MEMORY[0x1E0DCF170](this, a2);
}

uint64_t WebCore::AudioSession::removeInterruptionObserver(WebCore::AudioSession *this, WebCore::AudioSessionInterruptionObserver *a2)
{
  return MEMORY[0x1E0DCF178](this, a2);
}

uint64_t WebCore::AudioSession::create(WebCore::AudioSession *this)
{
  return MEMORY[0x1E0DCF180](this);
}

uint64_t WebCore::AudioSession::AudioSession(WebCore::AudioSession *this)
{
  return MEMORY[0x1E0DCF188](this);
}

void WebCore::AudioSession::~AudioSession(WebCore::AudioSession *this)
{
  MEMORY[0x1E0DCF190](this);
}

void WebCore::BlobRegistry::~BlobRegistry(WebCore::BlobRegistry *this)
{
  MEMORY[0x1E0DCF1A0](this);
}

uint64_t WebCore::CARingBuffer::initialize(WebCore::CARingBuffer *this)
{
  return MEMORY[0x1E0DCF1A8](this);
}

uint64_t WebCore::CARingBuffer::fetchIfHasEnoughData()
{
  return MEMORY[0x1E0DCF1B0]();
}

uint64_t WebCore::CARingBuffer::computeSizeForBuffers(WebCore::CARingBuffer *this)
{
  return MEMORY[0x1E0DCF1B8](this);
}

uint64_t WebCore::CARingBuffer::fetch()
{
  return MEMORY[0x1E0DCF1C0]();
}

uint64_t WebCore::CARingBuffer::store(WebCore::CARingBuffer *this, const AudioBufferList *a2)
{
  return MEMORY[0x1E0DCF1C8](this, a2);
}

uint64_t WebCore::CARingBuffer::CARingBuffer(WebCore::CARingBuffer *this)
{
  return MEMORY[0x1E0DCF1D0](this);
}

void WebCore::CARingBuffer::~CARingBuffer(WebCore::CARingBuffer *this)
{
  MEMORY[0x1E0DCF1D8](this);
}

uint64_t WebCore::ChromeClient::ChromeClient(WebCore::ChromeClient *this)
{
  return MEMORY[0x1E0DCF1F0](this);
}

void WebCore::ChromeClient::~ChromeClient(WebCore::ChromeClient *this)
{
  MEMORY[0x1E0DCF1F8](this);
}

uint64_t WebCore::EditingStyle::styleAtSelectionStart()
{
  return MEMORY[0x1E0DCF220]();
}

uint64_t WebCore::EditingStyle::hasStyle()
{
  return MEMORY[0x1E0DCF228]();
}

void WebCore::EditingStyle::~EditingStyle(WebCore::EditingStyle *this)
{
  MEMORY[0x1E0DCF238](this);
}

uint64_t WebCore::EventHandler::mouseMoved()
{
  return MEMORY[0x1E0DCF248]();
}

uint64_t WebCore::EventHandler::didStartDrag(WebCore::EventHandler *this)
{
  return MEMORY[0x1E0DCF260](this);
}

uint64_t WebCore::EventHandler::selectCursor()
{
  return MEMORY[0x1E0DCF268]();
}

uint64_t WebCore::EventHandler::dragCancelled(WebCore::EventHandler *this)
{
  return MEMORY[0x1E0DCF270](this);
}

uint64_t WebCore::EventHandler::handleAccessKey()
{
  return MEMORY[0x1E0DCF280]();
}

uint64_t WebCore::EventHandler::invalidateClick(WebCore::EventHandler *this)
{
  return MEMORY[0x1E0DCF288](this);
}

uint64_t WebCore::EventHandler::handleTouchEvent()
{
  return MEMORY[0x1E0DCF290]();
}

uint64_t WebCore::EventHandler::handleWheelEvent()
{
  return MEMORY[0x1E0DCF298]();
}

uint64_t WebCore::EventHandler::dragSourceEndedAt()
{
  return MEMORY[0x1E0DCF2A0]();
}

uint64_t WebCore::EventHandler::scrollRecursively()
{
  return MEMORY[0x1E0DCF2A8]();
}

uint64_t WebCore::EventHandler::sendContextMenuEvent()
{
  return MEMORY[0x1E0DCF2B8]();
}

uint64_t WebCore::EventHandler::handleMouseForceEvent()
{
  return MEMORY[0x1E0DCF2C0]();
}

uint64_t WebCore::EventHandler::handleMousePressEvent()
{
  return MEMORY[0x1E0DCF2C8]();
}

uint64_t WebCore::EventHandler::tryToBeginDragAtPoint(WebCore::EventHandler *this, const IntPoint *a2, const IntPoint *a3)
{
  return MEMORY[0x1E0DCF2D0](this, a2, a3);
}

uint64_t WebCore::EventHandler::handleMouseReleaseEvent()
{
  return MEMORY[0x1E0DCF2D8]();
}

uint64_t WebCore::EventHandler::startSelectionAutoscroll()
{
  return MEMORY[0x1E0DCF2E0]();
}

uint64_t WebCore::EventHandler::cancelSelectionAutoscroll(WebCore::EventHandler *this)
{
  return MEMORY[0x1E0DCF2E8](this);
}

uint64_t WebCore::EventHandler::dispatchSyntheticMouseOut()
{
  return MEMORY[0x1E0DCF2F0]();
}

uint64_t WebCore::EventHandler::setLastKnownMousePosition(WebCore::EventHandler *this, IntPoint a2, IntPoint a3)
{
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x1E0DCF2F8])(this, a2, a3);
}

uint64_t WebCore::EventHandler::dispatchSyntheticMouseMove()
{
  return MEMORY[0x1E0DCF300]();
}

uint64_t WebCore::EventHandler::getHitTestResultForMouseEvent()
{
  return MEMORY[0x1E0DCF308]();
}

uint64_t WebCore::EventHandler::setCapturingMouseEventsElement()
{
  return MEMORY[0x1E0DCF310]();
}

uint64_t WebCore::EventHandler::passMouseMovedEventToScrollbars()
{
  return MEMORY[0x1E0DCF318]();
}

uint64_t WebCore::EventHandler::selectionExtentRespectingEditingBoundary()
{
  return MEMORY[0x1E0DCF320]();
}

uint64_t WebCore::EventHandler::selectClosestContextualWordOrLinkFromHitTestResult()
{
  return MEMORY[0x1E0DCF328]();
}

uint64_t WebCore::EventHandler::keyEvent()
{
  return MEMORY[0x1E0DCF340]();
}

uint64_t WebCore::FEDropShadow::create()
{
  return MEMORY[0x1E0DCF350]();
}

uint64_t WebCore::FEMorphology::create()
{
  return MEMORY[0x1E0DCF358]();
}

uint64_t WebCore::FETurbulence::create()
{
  return MEMORY[0x1E0DCF360]();
}

uint64_t WebCore::GCController::garbageCollectNow(WebCore::GCController *this)
{
  return MEMORY[0x1E0DCF368](this);
}

uint64_t WebCore::GCController::setJavaScriptGarbageCollectorTimerEnabled(WebCore::GCController *this)
{
  return MEMORY[0x1E0DCF370](this);
}

uint64_t WebCore::GCController::garbageCollectOnAlternateThreadForDebugging(WebCore::GCController *this)
{
  return MEMORY[0x1E0DCF378](this);
}

uint64_t WebCore::GCController::singleton(WebCore::GCController *this)
{
  return MEMORY[0x1E0DCF380](this);
}

void WebCore::IDBGetResult::operator delete(void *a1)
{
  MEMORY[0x1E0DCF388](a1);
}

uint64_t WebCore::IDBGetResult::operator new(WebCore::IDBGetResult *this)
{
  return MEMORY[0x1E0DCF390](this);
}

uint64_t WebCore::IDBIndexInfo::IDBIndexInfo(WebCore::IDBIndexInfo *this)
{
  return MEMORY[0x1E0DCF398](this);
}

uint64_t WebCore::IDBIndexInfo::IDBIndexInfo()
{
  return MEMORY[0x1E0DCF3A0]();
}

uint64_t WebCore::ISOWebVTTCue::ISOWebVTTCue()
{
  return MEMORY[0x1E0DCF3A8]();
}

{
  return MEMORY[0x1E0DCF3B0]();
}

void WebCore::ISOWebVTTCue::~ISOWebVTTCue(WebCore::ISOWebVTTCue *this)
{
  MEMORY[0x1E0DCF3B8](this);
}

uint64_t WebCore::ImageDecoder::clearFactories(WebCore::ImageDecoder *this)
{
  return MEMORY[0x1E0DCF3C0](this);
}

uint64_t WebCore::ImageDecoder::installFactory()
{
  return MEMORY[0x1E0DCF3C8]();
}

uint64_t WebCore::ImageDecoder::resetFactories(WebCore::ImageDecoder *this)
{
  return MEMORY[0x1E0DCF3D0](this);
}

uint64_t WebCore::ImageDecoder::ImageDecoder(WebCore::ImageDecoder *this)
{
  return MEMORY[0x1E0DCF3D8](this);
}

void WebCore::ImageDecoder::~ImageDecoder(WebCore::ImageDecoder *this)
{
  MEMORY[0x1E0DCF3E0](this);
}

uint64_t WebCore::ImageOverlay::hasOverlay(WebCore::ImageOverlay *this, const WebCore::HTMLElement *a2)
{
  return MEMORY[0x1E0DCF3E8](this, a2);
}

uint64_t WebCore::ImageOverlay::isOverlayText(WebCore::ImageOverlay *this, const Node *a2)
{
  return MEMORY[0x1E0DCF3F0](this, a2);
}

{
  return MEMORY[0x1E0DCF3F8](this, a2);
}

uint64_t WebCore::ImageOverlay::isInsideOverlay()
{
  return MEMORY[0x1E0DCF400]();
}

uint64_t WebCore::ImageOverlay::isInsideOverlay(WebCore::ImageOverlay *this, const Node *a2)
{
  return MEMORY[0x1E0DCF408](this, a2);
}

uint64_t WebCore::ImageOverlay::updateWithTextRecognitionResult()
{
  return MEMORY[0x1E0DCF410]();
}

uint64_t WebCore::KeyedDecoder::decoder()
{
  return MEMORY[0x1E0DCF428]();
}

uint64_t WebCore::KeyedEncoder::encoder(WebCore::KeyedEncoder *this)
{
  return MEMORY[0x1E0DCF430](this);
}

uint64_t WebCore::Notification::dispatchShowEvent(WebCore::Notification *this)
{
  return MEMORY[0x1E0DCF480](this);
}

uint64_t WebCore::Notification::dispatchClickEvent(WebCore::Notification *this)
{
  return MEMORY[0x1E0DCF488](this);
}

uint64_t WebCore::Notification::dispatchCloseEvent(WebCore::Notification *this)
{
  return MEMORY[0x1E0DCF490](this);
}

uint64_t WebCore::Notification::ensureOnNotificationThread()
{
  return MEMORY[0x1E0DCF4A0]();
}

uint64_t WebCore::PrintContext::numberOfPages(WebCore::PrintContext *this, WebCore::LocalFrame *a2, const FloatSize *a3)
{
  return MEMORY[0x1E0DCF4B8](this, a2, a3);
}

uint64_t WebCore::PrintContext::computePageRects(WebCore::PrintContext *this, const FloatRect *a2, float a3, float a4, float a5, float *a6)
{
  return MEMORY[0x1E0DCF4C0](this, a2, a6, a3, a4, a5);
}

uint64_t WebCore::PrintContext::computedPageSize()
{
  return MEMORY[0x1E0DCF4C8]();
}

uint64_t WebCore::PrintContext::isPageBoxVisible(WebCore::PrintContext *this, WebCore::LocalFrame *a2)
{
  return MEMORY[0x1E0DCF4D0](this, a2);
}

uint64_t WebCore::PrintContext::computedPageMargin()
{
  return MEMORY[0x1E0DCF4D8]();
}

uint64_t WebCore::PrintContext::pageNumberForElement()
{
  return MEMORY[0x1E0DCF4E0]();
}

uint64_t WebCore::PrintContext::pageSizeAndMarginsInPixels(WebCore::PrintContext *this, WebCore::LocalFrame *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  return MEMORY[0x1E0DCF4E8](this, a2);
}

uint64_t WebCore::PrintContext::computeAutomaticScaleFactor(WebCore::PrintContext *this, const FloatSize *a2)
{
  return MEMORY[0x1E0DCF4F0](this, a2);
}

uint64_t WebCore::PrintContext::spoolAllPagesWithBoundaries(WebCore::PrintContext *this, WebCore::LocalFrame *a2, WebCore::GraphicsContext *a3, const FloatSize *a4)
{
  return MEMORY[0x1E0DCF4F8](this, a2, a3, a4);
}

uint64_t WebCore::PrintContext::begin(WebCore::PrintContext *this, float a2, float a3)
{
  return MEMORY[0x1E0DCF508](this, a2, a3);
}

uint64_t WebCore::PrintContext::spoolPage(WebCore::PrintContext *this, WebCore::GraphicsContext *a2, float a3)
{
  return MEMORY[0x1E0DCF510](this, a2, a3);
}

uint64_t WebCore::PrintContext::spoolRect(WebCore::PrintContext *this, WebCore::GraphicsContext *a2, const IntRect *a3)
{
  return MEMORY[0x1E0DCF518](this, a2, a3);
}

uint64_t WebCore::PrintContext::PrintContext(WebCore::PrintContext *this, WebCore::LocalFrame *a2)
{
  return MEMORY[0x1E0DCF520](this, a2);
}

uint64_t WebCore::PushDatabase::insertRecord()
{
  return MEMORY[0x1E0DCF530]();
}

uint64_t WebCore::PushDatabase::getRecordByTopic()
{
  return MEMORY[0x1E0DCF538]();
}

uint64_t WebCore::PushDatabase::updatePublicToken()
{
  return MEMORY[0x1E0DCF540]();
}

uint64_t WebCore::PushDatabase::incrementSilentPushCount()
{
  return MEMORY[0x1E0DCF548]();
}

uint64_t WebCore::PushDatabase::removeRecordByIdentifier()
{
  return MEMORY[0x1E0DCF550]();
}

uint64_t WebCore::PushDatabase::setPushesEnabledForOrigin()
{
  return MEMORY[0x1E0DCF558]();
}

uint64_t WebCore::PushDatabase::removeRecordsBySubscriptionSet()
{
  return MEMORY[0x1E0DCF560]();
}

uint64_t WebCore::PushDatabase::getRecordBySubscriptionSetAndScope()
{
  return MEMORY[0x1E0DCF568]();
}

uint64_t WebCore::PushDatabase::removeRecordsBySubscriptionSetAndSecurityOrigin()
{
  return MEMORY[0x1E0DCF570]();
}

uint64_t WebCore::PushDatabase::create()
{
  return MEMORY[0x1E0DCF578]();
}

uint64_t WebCore::PushDatabase::getTopics()
{
  return MEMORY[0x1E0DCF580]();
}

void WebCore::PushDatabase::~PushDatabase(WebCore::PushDatabase *this)
{
  MEMORY[0x1E0DCF588](this);
}

uint64_t WebCore::RenderObject::paintingRootRect(WebCore::RenderObject *this, WebCore::LayoutRect *a2)
{
  return MEMORY[0x1E0DCF590](this, a2);
}

uint64_t WebCore::RenderObject::absoluteTextQuads()
{
  return MEMORY[0x1E0DCF598]();
}

uint64_t WebCore::RenderObject::absoluteTextRects()
{
  return MEMORY[0x1E0DCF5A0]();
}

uint64_t WebCore::RenderObject::absoluteBorderAndTextRects()
{
  return MEMORY[0x1E0DCF5A8]();
}

uint64_t WebCore::RenderObject::collectSelectionGeometries()
{
  return MEMORY[0x1E0DCF5B0]();
}

uint64_t WebCore::RenderObject::collectSelectionGeometriesWithoutUnionInteriorLines()
{
  return MEMORY[0x1E0DCF5B8]();
}

uint64_t WebCore::RenderWidget::setWidget()
{
  return MEMORY[0x1E0DCF5C0]();
}

uint64_t WebCore::SameSiteInfo::create()
{
  return MEMORY[0x1E0DCF5C8]();
}

uint64_t WebCore::ScriptBuffer::fromIPCData()
{
  return MEMORY[0x1E0DCF5D0]();
}

uint64_t WebCore::ScriptBuffer::ScriptBuffer(WebCore::ScriptBuffer *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DCF5D8](this, a2);
}

uint64_t WebCore::SettingsBase::setFixedFontFamily()
{
  return MEMORY[0x1E0DCF5E0]();
}

uint64_t WebCore::SettingsBase::setSerifFontFamily()
{
  return MEMORY[0x1E0DCF5E8]();
}

uint64_t WebCore::SettingsBase::setCursiveFontFamily()
{
  return MEMORY[0x1E0DCF5F0]();
}

uint64_t WebCore::SettingsBase::setFantasyFontFamily()
{
  return MEMORY[0x1E0DCF5F8]();
}

uint64_t WebCore::SettingsBase::setStandardFontFamily()
{
  return MEMORY[0x1E0DCF600]();
}

uint64_t WebCore::SettingsBase::setSansSerifFontFamily()
{
  return MEMORY[0x1E0DCF608]();
}

uint64_t WebCore::SettingsBase::setPictographFontFamily()
{
  return MEMORY[0x1E0DCF610]();
}

uint64_t WebCore::SettingsBase::setAllowedMediaCodecTypes(WebCore::SettingsBase *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DCF618](this, a2);
}

uint64_t WebCore::SettingsBase::setAllowedMediaAudioCodecIDs(WebCore::SettingsBase *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DCF620](this, a2);
}

uint64_t WebCore::SettingsBase::setAllowedMediaVideoCodecIDs(WebCore::SettingsBase *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DCF628](this, a2);
}

uint64_t WebCore::SettingsBase::setAllowedMediaContainerTypes(WebCore::SettingsBase *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DCF630](this, a2);
}

uint64_t WebCore::SettingsBase::setAllowedMediaCaptionFormatTypes(WebCore::SettingsBase *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DCF638](this, a2);
}

uint64_t WebCore::SettingsBase::setMediaContentTypesRequiringHardwareSupport(WebCore::SettingsBase *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DCF640](this, a2);
}

uint64_t WebCore::SharedBuffer::createWithContentsOfFile()
{
  return MEMORY[0x1E0DCF648]();
}

uint64_t WebCore::SharedBuffer::create()
{
  return MEMORY[0x1E0DCF650]();
}

uint64_t WebCore::SharedBuffer::SharedBuffer()
{
  return MEMORY[0x1E0DCF658]();
}

uint64_t WebCore::SharedBuffer::SharedBuffer(WebCore::SharedBuffer *this)
{
  return MEMORY[0x1E0DCF660](this);
}

uint64_t WebCore::SharedMemory::copyBuffer()
{
  return MEMORY[0x1E0DCF668]();
}

uint64_t WebCore::SharedMemory::createHandle()
{
  return MEMORY[0x1E0DCF670]();
}

uint64_t WebCore::SharedMemory::map()
{
  return MEMORY[0x1E0DCF678]();
}

uint64_t WebCore::SharedMemory::wrapMap()
{
  return MEMORY[0x1E0DCF680]();
}

uint64_t WebCore::SharedMemory::allocate(WebCore::SharedMemory *this)
{
  return MEMORY[0x1E0DCF688](this);
}

uint64_t WebCore::SharedMemory::copySpan()
{
  return MEMORY[0x1E0DCF690]();
}

void WebCore::SharedMemory::~SharedMemory(WebCore::SharedMemory *this)
{
  MEMORY[0x1E0DCF698](this);
}

uint64_t WebCore::TextIterator::advance(WebCore::TextIterator *this)
{
  return MEMORY[0x1E0DCF6A0](this);
}

uint64_t WebCore::TextIterator::TextIterator()
{
  return MEMORY[0x1E0DCF6A8]();
}

void WebCore::TextIterator::~TextIterator(WebCore::TextIterator *this)
{
  MEMORY[0x1E0DCF6B0](this);
}

uint64_t WebCore::UserActivity::UserActivity()
{
  return MEMORY[0x1E0DCF6B8]();
}

uint64_t WebCore::VideoDecoder::createLocalDecoder()
{
  return MEMORY[0x1E0DCF6C0]();
}

uint64_t WebCore::VideoDecoder::setCreatorCallback()
{
  return MEMORY[0x1E0DCF6C8]();
}

uint64_t WebCore::VideoDecoder::VideoDecoder(WebCore::VideoDecoder *this)
{
  return MEMORY[0x1E0DCF6D0](this);
}

void WebCore::VideoDecoder::~VideoDecoder(WebCore::VideoDecoder *this)
{
  MEMORY[0x1E0DCF6D8](this);
}

uint64_t WebCore::VideoEncoder::createLocalEncoder()
{
  return MEMORY[0x1E0DCF6E0]();
}

uint64_t WebCore::VideoEncoder::setCreatorCallback()
{
  return MEMORY[0x1E0DCF6E8]();
}

uint64_t WebCore::VideoFrameCV::setOwnershipIdentity()
{
  return MEMORY[0x1E0DCF6F0]();
}

uint64_t WebCore::VideoFrameCV::create()
{
  return MEMORY[0x1E0DCF6F8]();
}

uint64_t WebCore::commonVMSlow(WebCore *this)
{
  return MEMORY[0x1E0DCF700](this);
}

uint64_t WebCore::intersection()
{
  return MEMORY[0x1E0DCF708]();
}

uint64_t WebCore::AXObjectCache::rootObject(WebCore::AXObjectCache *this)
{
  return MEMORY[0x1E0DCF710](this);
}

uint64_t WebCore::AXObjectCache::getOrCreate()
{
  return MEMORY[0x1E0DCF718]();
}

uint64_t WebCore::AXObjectCache::focusedObjectForPage()
{
  return MEMORY[0x1E0DCF728]();
}

uint64_t WebCore::AXObjectCache::setForceInitialFrameCaching(WebCore::AXObjectCache *this)
{
  return MEMORY[0x1E0DCF740](this);
}

uint64_t WebCore::AXObjectCache::setEnhancedUserInterfaceAccessibility(WebCore::AXObjectCache *this)
{
  return MEMORY[0x1E0DCF748](this);
}

uint64_t WebCore::AXObjectCache::accessibilityEnhancedUserInterfaceEnabled(WebCore::AXObjectCache *this)
{
  return MEMORY[0x1E0DCF750](this);
}

uint64_t WebCore::AXObjectCache::announce(WebCore::AXObjectCache *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DCF758](this, a2);
}

uint64_t WebCore::CharacterData::setData(WebCore::CharacterData *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DCF7A0](this, a2);
}

uint64_t WebCore::ContainerNode::appendChild(WebCore::ContainerNode *this, Node *a2)
{
  return MEMORY[0x1E0DCF7A8](this, a2);
}

uint64_t WebCore::ContentFilter::blockedPageURL(WebCore::ContentFilter *this)
{
  return MEMORY[0x1E0DCF7E0](this);
}

uint64_t WebCore::ContentFilter::continueAfterDataReceived(WebCore::ContentFilter *this, const WebCore::SharedBuffer *a2)
{
  return MEMORY[0x1E0DCF7E8](this, a2);
}

uint64_t WebCore::ContentFilter::stopFilteringMainResource(WebCore::ContentFilter *this)
{
  return MEMORY[0x1E0DCF7F0](this);
}

uint64_t WebCore::ContentFilter::startFilteringMainResource(WebCore::ContentFilter *this, const WTF::URL *a2)
{
  return MEMORY[0x1E0DCF7F8](this, a2);
}

uint64_t WebCore::ContentFilter::continueAfterNotifyFinished(WebCore::ContentFilter *this, const WTF::URL *a2)
{
  return MEMORY[0x1E0DCF800](this, a2);
}

uint64_t WebCore::ContentFilter::continueAfterWillSendRequest()
{
  return MEMORY[0x1E0DCF808]();
}

uint64_t WebCore::ContentFilter::handleProvisionalLoadFailure()
{
  return MEMORY[0x1E0DCF810]();
}

uint64_t WebCore::ContentFilter::continueAfterResponseReceived()
{
  return MEMORY[0x1E0DCF818]();
}

uint64_t WebCore::ContentFilter::create()
{
  return MEMORY[0x1E0DCF820]();
}

void WebCore::ContentFilter::~ContentFilter(WebCore::ContentFilter *this)
{
  MEMORY[0x1E0DCF828](this);
}

uint64_t WebCore::DataDetection::isDataDetectorLink()
{
  return MEMORY[0x1E0DCF830]();
}

uint64_t WebCore::DataDetection::detectContentInFrame()
{
  return MEMORY[0x1E0DCF838]();
}

uint64_t WebCore::DataDetection::detectContentInRange()
{
  return MEMORY[0x1E0DCF840]();
}

uint64_t WebCore::DataDetection::extractReferenceDate(WebCore::DataDetection *this, NSDictionary *a2)
{
  return MEMORY[0x1E0DCF848](this, a2);
}

uint64_t WebCore::DataDetection::dataDetectorIdentifier()
{
  return MEMORY[0x1E0DCF850]();
}

uint64_t WebCore::DataDetection::requiresExtendedContext()
{
  return MEMORY[0x1E0DCF858]();
}

uint64_t WebCore::DataDetection::canBePresentedByDataDetectors(WebCore::DataDetection *this, const WTF::URL *a2)
{
  return MEMORY[0x1E0DCF860](this, a2);
}

uint64_t WebCore::DataDetection::removeDataDetectedLinksInDocument(WebCore::DataDetection *this, Document *a2)
{
  return MEMORY[0x1E0DCF868](this, a2);
}

uint64_t WebCore::DataDetection::findDataDetectionResultElementInImageOverlay(WebCore::DataDetection *this, const WebCore::FloatPoint *a2, const WebCore::HTMLElement *a3)
{
  return MEMORY[0x1E0DCF870](this, a2, a3);
}

uint64_t WebCore::FEColorMatrix::create()
{
  return MEMORY[0x1E0DCF878]();
}

uint64_t WebCore::FilterResults::FilterResults()
{
  return MEMORY[0x1E0DCF880]();
}

uint64_t WebCore::GraphicsLayer::setIsInWindow(WebCore::GraphicsLayer *this)
{
  return MEMORY[0x1E0DCF888](this);
}

uint64_t WebCore::GraphicsLayer::removeFromParent(WebCore::GraphicsLayer *this)
{
  return MEMORY[0x1E0DCF890](this);
}

uint64_t WebCore::GraphicsLayer::unparentAndClear()
{
  return MEMORY[0x1E0DCF898]();
}

uint64_t WebCore::GraphicsLayer::noteDeviceOrPageScaleFactorChangedIncludingDescendants(WebCore::GraphicsLayer *this)
{
  return MEMORY[0x1E0DCF8A0](this);
}

uint64_t WebCore::GraphicsLayer::create()
{
  return MEMORY[0x1E0DCF8A8]();
}

uint64_t WebCore::HTTPHeaderMap::set(WebCore::HTTPHeaderMap *this, const WTF::String *a2, const WTF::String *a3)
{
  return MEMORY[0x1E0DCF8B0](this, a2, a3);
}

uint64_t WebCore::HTTPHeaderMap::remove()
{
  return MEMORY[0x1E0DCF8B8]();
}

uint64_t WebCore::HTTPHeaderMap::HTTPHeaderMap()
{
  return MEMORY[0x1E0DCF8C0]();
}

uint64_t WebCore::HTTPHeaderMap::HTTPHeaderMap(WebCore::HTTPHeaderMap *this)
{
  return MEMORY[0x1E0DCF8C8](this);
}

uint64_t WebCore::HitTestResult::setToNonUserAgentShadowAncestor(WebCore::HitTestResult *this)
{
  return MEMORY[0x1E0DCF8D0](this);
}

uint64_t WebCore::HitTestResult::HitTestResult()
{
  return MEMORY[0x1E0DCF8D8]();
}

uint64_t WebCore::HitTestResult::HitTestResult(WebCore::HitTestResult *this, const WebCore::HitTestResult *a2)
{
  return MEMORY[0x1E0DCF8E0](this, a2);
}

void WebCore::HitTestResult::~HitTestResult(WebCore::HitTestResult *this)
{
  MEMORY[0x1E0DCF8E8](this);
}

uint64_t WebCore::IDBCursorInfo::IDBCursorInfo()
{
  return MEMORY[0x1E0DCF8F0]();
}

uint64_t WebCore::IDBResultData::IDBResultData()
{
  return MEMORY[0x1E0DCF8F8]();
}

uint64_t WebCore::IDBResultData::IDBResultData(WebCore::IDBResultData *this)
{
  return MEMORY[0x1E0DCF900](this);
}

uint64_t WebCore::IOSurfacePool::sharedPool(WebCore::IOSurfacePool *this)
{
  return MEMORY[0x1E0DCF908](this);
}

uint64_t WebCore::IOSurfacePool::setPoolSize(WebCore::IOSurfacePool *this)
{
  return MEMORY[0x1E0DCF910](this);
}

uint64_t WebCore::IOSurfacePool::discardAllSurfaces(WebCore::IOSurfacePool *this)
{
  return MEMORY[0x1E0DCF918](this);
}

uint64_t WebCore::IOSurfacePool::create(WebCore::IOSurfacePool *this)
{
  return MEMORY[0x1E0DCF920](this);
}

void WebCore::IOSurfacePool::~IOSurfacePool(WebCore::IOSurfacePool *this)
{
  MEMORY[0x1E0DCF928](this);
}

uint64_t WebCore::KeyboardEvent::create()
{
  return MEMORY[0x1E0DCF950]();
}

uint64_t WebCore::LinkHeaderSet::LinkHeaderSet(WebCore::LinkHeaderSet *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DCF958](this, a2);
}

uint64_t WebCore::MIMETypeCache::canDecodeType(WebCore::MIMETypeCache *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DCF960](this, a2);
}

uint64_t WebCore::MediaStrategy::addMockMediaSourceEngine(WebCore::MediaStrategy *this)
{
  return MEMORY[0x1E0DCF968](this);
}

uint64_t WebCore::MediaStrategy::MediaStrategy(WebCore::MediaStrategy *this)
{
  return MEMORY[0x1E0DCF970](this);
}

void WebCore::MediaStrategy::~MediaStrategy(WebCore::MediaStrategy *this)
{
  MEMORY[0x1E0DCF978](this);
}

uint64_t WebCore::NodeTraversal::nextAncestorSibling(WebCore::NodeTraversal *this, const Node *a2, const Node *a3)
{
  return MEMORY[0x1E0DCF998](this, a2, a3);
}

uint64_t WebCore::PathUtilities::pathWithShrinkWrappedRects()
{
  return MEMORY[0x1E0DCF9A8]();
}

uint64_t WebCore::PathUtilities::pathsWithShrinkWrappedRects()
{
  return MEMORY[0x1E0DCF9B8]();
}

uint64_t WebCore::PaymentMethod::PaymentMethod()
{
  return MEMORY[0x1E0DCF9C0]();
}

void WebCore::PaymentMethod::~PaymentMethod(WebCore::PaymentMethod *this)
{
  MEMORY[0x1E0DCF9C8](this);
}

uint64_t WebCore::QualifiedName::init(WebCore::QualifiedName *this)
{
  return MEMORY[0x1E0DCF9D8](this);
}

uint64_t WebCore::RenderElement::resetTextAutosizing(WebCore::RenderElement *this)
{
  return MEMORY[0x1E0DCF9E8](this);
}

uint64_t WebCore::ResourceError::fromIPCData()
{
  return MEMORY[0x1E0DCF9F0]();
}

uint64_t WebCore::ResourceError::ResourceError(WebCore::ResourceError *this, NSError *a2)
{
  return MEMORY[0x1E0DCF9F8](this, a2);
}

uint64_t WebCore::ResourceError::ResourceError(WebCore::ResourceError *this, __CFError *a2)
{
  return MEMORY[0x1E0DCFA00](this, a2);
}

uint64_t WebCore::ScrollingTree::removeAllNodes(WebCore::ScrollingTree *this)
{
  return MEMORY[0x1E0DCFA08](this);
}

uint64_t WebCore::ScrollingTree::commitTreeState()
{
  return MEMORY[0x1E0DCFA10]();
}

uint64_t WebCore::ScrollingTree::clearLatchedNode(WebCore::ScrollingTree *this)
{
  return MEMORY[0x1E0DCFA18](this);
}

uint64_t WebCore::ScrollingTree::viewSizeDidChange(WebCore::ScrollingTree *this)
{
  return MEMORY[0x1E0DCFA20](this);
}

uint64_t WebCore::ScrollingTree::scrollingTreeAsText()
{
  return MEMORY[0x1E0DCFA28]();
}

uint64_t WebCore::ScrollingTree::scrollPinningBehavior(WebCore::ScrollingTree *this)
{
  return MEMORY[0x1E0DCFA30](this);
}

uint64_t WebCore::ScrollingTree::viewWillEndLiveResize(WebCore::ScrollingTree *this)
{
  return MEMORY[0x1E0DCFA38](this);
}

uint64_t WebCore::ScrollingTree::willProcessWheelEvent(WebCore::ScrollingTree *this)
{
  return MEMORY[0x1E0DCFA40](this);
}

uint64_t WebCore::ScrollingTree::addPendingScrollUpdate()
{
  return MEMORY[0x1E0DCFA48]();
}

uint64_t WebCore::ScrollingTree::hasPendingScrollUpdates(WebCore::ScrollingTree *this)
{
  return MEMORY[0x1E0DCFA50](this);
}

uint64_t WebCore::ScrollingTree::viewWillStartLiveResize(WebCore::ScrollingTree *this)
{
  return MEMORY[0x1E0DCFA58](this);
}

uint64_t WebCore::ScrollingTree::takePendingScrollUpdates(WebCore::ScrollingTree *this)
{
  return MEMORY[0x1E0DCFA60](this);
}

uint64_t WebCore::ScrollingTree::eventTrackingTypeForPoint()
{
  return MEMORY[0x1E0DCFA68]();
}

uint64_t WebCore::ScrollingTree::frameIDForScrollingNodeID()
{
  return MEMORY[0x1E0DCFA70]();
}

uint64_t WebCore::ScrollingTree::scrollingTreeNodeDidScroll()
{
  return MEMORY[0x1E0DCFA78]();
}

uint64_t WebCore::ScrollingTree::determineWheelEventProcessing()
{
  return MEMORY[0x1E0DCFA80]();
}

uint64_t WebCore::ScrollingTree::applyLayerPositionsAfterCommit(WebCore::ScrollingTree *this)
{
  return MEMORY[0x1E0DCFA88](this);
}

uint64_t WebCore::ScrollingTree::willWheelEventStartSwipeGesture()
{
  return MEMORY[0x1E0DCFA90]();
}

uint64_t WebCore::ScrollingTree::clearNodesWithUserScrollInProgress(WebCore::ScrollingTree *this)
{
  return MEMORY[0x1E0DCFA98](this);
}

uint64_t WebCore::ScrollingTree::setClientAllowedMainFrameRubberBandableEdges()
{
  return MEMORY[0x1E0DCFAA0]();
}

uint64_t WebCore::ScrollingTree::mainFrameViewportChangedViaDelegatedScrolling(WebCore::ScrollingTree *this, const WebCore::FloatPoint *a2, const FloatRect *a3, double a4)
{
  return MEMORY[0x1E0DCFAA8](this, a2, a3, a4);
}

uint64_t WebCore::ScrollingTree::ScrollingTree(WebCore::ScrollingTree *this)
{
  return MEMORY[0x1E0DCFAB0](this);
}

void WebCore::ScrollingTree::~ScrollingTree(WebCore::ScrollingTree *this)
{
  MEMORY[0x1E0DCFAB8](this);
}

uint64_t WebCore::SleepDisabler::SleepDisabler()
{
  return MEMORY[0x1E0DCFAC0]();
}

void WebCore::SleepDisabler::~SleepDisabler(WebCore::SleepDisabler *this)
{
  MEMORY[0x1E0DCFAC8](this);
}

uint64_t WebCore::SourceGraphic::create()
{
  return MEMORY[0x1E0DCFAD0]();
}

uint64_t WebCore::TextIndicator::createWithRange()
{
  return MEMORY[0x1E0DCFAE0]();
}

uint64_t WebCore::TextIndicator::createWithSelectionInFrame()
{
  return MEMORY[0x1E0DCFAE8]();
}

uint64_t WebCore::TextIndicator::create(WebCore::TextIndicator *this, const TextIndicatorData *a2)
{
  return MEMORY[0x1E0DCFAF0](this, a2);
}

void WebCore::TextIndicator::~TextIndicator(WebCore::TextIndicator *this)
{
  MEMORY[0x1E0DCFAF8](this);
}

uint64_t WebCore::buildAuthData()
{
  return MEMORY[0x1E0DCFB00]();
}

uint64_t WebCore::cachedCGColor(WebCore *this, const Color *a2)
{
  return MEMORY[0x1E0DCFB08](this, a2);
}

uint64_t WebCore::createWrapper()
{
  return MEMORY[0x1E0DCFB10]();
}

uint64_t WebCore::documentOrder()
{
  return MEMORY[0x1E0DCFB20]();
}

uint64_t WebCore::enclosingList(WebCore *this, Node *a2)
{
  return MEMORY[0x1E0DCFB30](this, a2);
}

uint64_t WebCore::endOfSentence()
{
  return MEMORY[0x1E0DCFB48]();
}

uint64_t WebCore::findPlainText()
{
  return MEMORY[0x1E0DCFB50]();
}

uint64_t WebCore::getLogChannel(WebCore *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DCFB58](this, a2);
}

uint64_t WebCore::makePushTopic()
{
  return MEMORY[0x1E0DCFB68]();
}

uint64_t WebCore::releaseMemory()
{
  return MEMORY[0x1E0DCFB70]();
}

uint64_t WebCore::BasicShapePath::create()
{
  return MEMORY[0x1E0DCFB78]();
}

uint64_t WebCore::CachedResource::tryReplaceEncodedData(WebCore::CachedResource *this, WebCore::SharedBuffer *a2)
{
  return MEMORY[0x1E0DCFB80](this, a2);
}

uint64_t WebCore::ControlFactory::create(WebCore::ControlFactory *this)
{
  return MEMORY[0x1E0DCFB88](this);
}

uint64_t WebCore::CredentialBase::compare(WebCore::CredentialBase *this, const WebCore::Credential *a2, const WebCore::Credential *a3)
{
  return MEMORY[0x1E0DCFB90](this, a2, a3);
}

uint64_t WebCore::CredentialBase::CredentialBase()
{
  return MEMORY[0x1E0DCFB98]();
}

uint64_t WebCore::CredentialBase::CredentialBase(WebCore::CredentialBase *this)
{
  return MEMORY[0x1E0DCFBA0](this);
}

uint64_t WebCore::DOMCacheEngine::queryCacheMatch()
{
  return MEMORY[0x1E0DCFBA8]();
}

uint64_t WebCore::DOMCacheEngine::copyResponseBody()
{
  return MEMORY[0x1E0DCFBB0]();
}

uint64_t WebCore::DataURLDecoder::decode()
{
  return MEMORY[0x1E0DCFBB8]();
}

uint64_t WebCore::DocumentLoader::commitData(WebCore::DocumentLoader *this, const WebCore::SharedBuffer *a2)
{
  return MEMORY[0x1E0DCFBC0](this, a2);
}

uint64_t WebCore::DocumentLoader::setNavigationID(WebCore::DocumentLoader *this)
{
  return MEMORY[0x1E0DCFBD8](this);
}

uint64_t WebCore::DocumentLoader::addArchiveResource()
{
  return MEMORY[0x1E0DCFBE0]();
}

uint64_t WebCore::DocumentLoader::scheduleArchiveLoad()
{
  return MEMORY[0x1E0DCFBE8]();
}

uint64_t WebCore::DocumentLoader::setCustomHeaderFields()
{
  return MEMORY[0x1E0DCFBF8]();
}

uint64_t WebCore::DocumentLoader::cancelMainResourceLoad()
{
  return MEMORY[0x1E0DCFC08]();
}

uint64_t WebCore::DocumentLoader::applyPoliciesToSettings(WebCore::DocumentLoader *this)
{
  return MEMORY[0x1E0DCFC10](this);
}

uint64_t WebCore::DocumentLoader::loadApplicationManifest()
{
  return MEMORY[0x1E0DCFC18]();
}

uint64_t WebCore::DocumentLoader::didGetLoadDecisionForIcon()
{
  return MEMORY[0x1E0DCFC20]();
}

uint64_t WebCore::DocumentLoader::handleContentFilterDidBlock()
{
  return MEMORY[0x1E0DCFC28]();
}

uint64_t WebCore::DocumentLoader::setRedirectionAsSubstituteData()
{
  return MEMORY[0x1E0DCFC30]();
}

uint64_t WebCore::DocumentLoader::fromScriptExecutionContextIdentifier()
{
  return MEMORY[0x1E0DCFC38]();
}

uint64_t WebCore::DocumentLoader::setActiveContentRuleListActionPatterns()
{
  return MEMORY[0x1E0DCFC40]();
}

uint64_t WebCore::DocumentLoader::setControllingServiceWorkerRegistration()
{
  return MEMORY[0x1E0DCFC48]();
}

uint64_t WebCore::DocumentLoader::stopLoadingAfterXFrameOptionsOrContentSecurityPolicyDenied()
{
  return MEMORY[0x1E0DCFC50]();
}

uint64_t WebCore::DocumentLoader::DocumentLoader()
{
  return MEMORY[0x1E0DCFC60]();
}

uint64_t WebCore::DragController::dragExited()
{
  return MEMORY[0x1E0DCFC80]();
}

uint64_t WebCore::DragController::dragEnteredOrUpdated()
{
  return MEMORY[0x1E0DCFC88]();
}

uint64_t WebCore::DragController::performDragOperation()
{
  return MEMORY[0x1E0DCFC90]();
}

uint64_t WebCore::DragController::finalizeDroppedImagePlaceholder()
{
  return MEMORY[0x1E0DCFC98]();
}

uint64_t WebCore::DragController::insertDroppedImagePlaceholdersAtCaret()
{
  return MEMORY[0x1E0DCFCA0]();
}

uint64_t WebCore::DragController::dragEnded(WebCore::DragController *this)
{
  return MEMORY[0x1E0DCFCA8](this);
}

uint64_t WebCore::FEGaussianBlur::create()
{
  return MEMORY[0x1E0DCFCB0]();
}

uint64_t WebCore::FileIconLoader::iconLoaded()
{
  return MEMORY[0x1E0DCFCB8]();
}

uint64_t WebCore::FrameSelection::setSelection()
{
  return MEMORY[0x1E0DCFCC0]();
}

uint64_t WebCore::FrameSelection::revealSelection()
{
  return MEMORY[0x1E0DCFCD0]();
}

uint64_t WebCore::FrameSelection::selectionBounds()
{
  return MEMORY[0x1E0DCFCD8]();
}

uint64_t WebCore::FrameSelection::setSelectedRange()
{
  return MEMORY[0x1E0DCFCE0]();
}

uint64_t WebCore::FrameSelection::updateAppearance(WebCore::FrameSelection *this)
{
  return MEMORY[0x1E0DCFCE8](this);
}

uint64_t WebCore::FrameSelection::absoluteCaretBounds(WebCore::FrameSelection *this, BOOL *a2)
{
  return MEMORY[0x1E0DCFCF0](this, a2);
}

uint64_t WebCore::FrameSelection::setSelectionFromNone(WebCore::FrameSelection *this)
{
  return MEMORY[0x1E0DCFCF8](this);
}

uint64_t WebCore::FrameSelection::setPrefersNonBlinkingCursor(WebCore::FrameSelection *this)
{
  return MEMORY[0x1E0DCFD08](this);
}

uint64_t WebCore::FrameSelection::clear(WebCore::FrameSelection *this)
{
  return MEMORY[0x1E0DCFD38](this);
}

uint64_t WebCore::FrameSelection::selectAll(WebCore::FrameSelection *this)
{
  return MEMORY[0x1E0DCFD58](this);
}

uint64_t WebCore::IDBRequestData::IDBRequestData()
{
  return MEMORY[0x1E0DCFD78]();
}

void WebCore::IDBTransaction::~IDBTransaction(WebCore::IDBTransaction *this)
{
  MEMORY[0x1E0DCFD80](this);
}

void WebCore::IDBTransaction::operator delete(void *a1)
{
  MEMORY[0x1E0DCFD88](a1);
}

uint64_t WebCore::IOSApplication::isEvernote(WebCore::IOSApplication *this)
{
  return MEMORY[0x1E0DCFD90](this);
}

uint64_t WebCore::IOSApplication::isHimalaya(WebCore::IOSApplication *this)
{
  return MEMORY[0x1E0DCFD98](this);
}

uint64_t WebCore::IOSApplication::isJWLibrary(WebCore::IOSApplication *this)
{
  return MEMORY[0x1E0DCFDA0](this);
}

uint64_t WebCore::IOSApplication::isCardiogram(WebCore::IOSApplication *this)
{
  return MEMORY[0x1E0DCFDA8](this);
}

uint64_t WebCore::IOSApplication::isDoubleDown(WebCore::IOSApplication *this)
{
  return MEMORY[0x1E0DCFDB0](this);
}

uint64_t WebCore::IOSApplication::isEventbrite(WebCore::IOSApplication *this)
{
  return MEMORY[0x1E0DCFDB8](this);
}

uint64_t WebCore::IOSApplication::isPocketCity(WebCore::IOSApplication *this)
{
  return MEMORY[0x1E0DCFDC8](this);
}

uint64_t WebCore::IOSApplication::isCrunchyroll(WebCore::IOSApplication *this)
{
  return MEMORY[0x1E0DCFDD8](this);
}

uint64_t WebCore::IOSApplication::isMiniBrowser(WebCore::IOSApplication *this)
{
  return MEMORY[0x1E0DCFDE0](this);
}

uint64_t WebCore::IOSApplication::isMobileSafari(WebCore::IOSApplication *this)
{
  return MEMORY[0x1E0DCFDE8](this);
}

uint64_t WebCore::IOSApplication::isFIFACompanion(WebCore::IOSApplication *this)
{
  return MEMORY[0x1E0DCFDF0](this);
}

uint64_t WebCore::IOSApplication::isWebBookmarksD(WebCore::IOSApplication *this)
{
  return MEMORY[0x1E0DCFDF8](this);
}

uint64_t WebCore::IOSApplication::isDataActivation(WebCore::IOSApplication *this)
{
  return MEMORY[0x1E0DCFE00](this);
}

uint64_t WebCore::IOSApplication::isESPNFantasySports(WebCore::IOSApplication *this)
{
  return MEMORY[0x1E0DCFE10](this);
}

uint64_t WebCore::IOSApplication::isEssentialSkeleton(WebCore::IOSApplication *this)
{
  return MEMORY[0x1E0DCFE18](this);
}

uint64_t WebCore::IOSApplication::isSafariViewService(WebCore::IOSApplication *this)
{
  return MEMORY[0x1E0DCFE20](this);
}

uint64_t WebCore::IOSApplication::isIMDb(WebCore::IOSApplication *this)
{
  return MEMORY[0x1E0DCFE30](this);
}

uint64_t WebCore::IOSApplication::isNews(WebCore::IOSApplication *this)
{
  return MEMORY[0x1E0DCFE38](this);
}

uint64_t WebCore::IOSApplication::isNike(WebCore::IOSApplication *this)
{
  return MEMORY[0x1E0DCFE40](this);
}

uint64_t WebCore::IOSApplication::isGmail(WebCore::IOSApplication *this)
{
  return MEMORY[0x1E0DCFE48](this);
}

uint64_t WebCore::IOSApplication::isLutron(WebCore::IOSApplication *this)
{
  return MEMORY[0x1E0DCFE50](this);
}

uint64_t WebCore::IOSApplication::isNoggin(WebCore::IOSApplication *this)
{
  return MEMORY[0x1E0DCFE58](this);
}

uint64_t WebCore::IOSApplication::isStocks(WebCore::IOSApplication *this)
{
  return MEMORY[0x1E0DCFE60](this);
}

uint64_t WebCore::IOSApplication::isFirefox(WebCore::IOSApplication *this)
{
  return MEMORY[0x1E0DCFE68](this);
}

uint64_t WebCore::IOSApplication::isHoYoLAB(WebCore::IOSApplication *this)
{
  return MEMORY[0x1E0DCFE70](this);
}

uint64_t WebCore::IOSApplication::isOKCupid(WebCore::IOSApplication *this)
{
  return MEMORY[0x1E0DCFE78](this);
}

uint64_t WebCore::IOSApplication::isPaperIO(WebCore::IOSApplication *this)
{
  return MEMORY[0x1E0DCFE80](this);
}

uint64_t WebCore::JSNotification::toWrapped(WebCore::JSNotification *this, JSC::VM *a2, JSValue a3)
{
  return MEMORY[0x1E0DCFE98](this, a2, a3.super.isa);
}

void WebCore::LoaderStrategy::~LoaderStrategy(WebCore::LoaderStrategy *this)
{
  MEMORY[0x1E0DCFEA0](this);
}

uint64_t WebCore::LocalDOMWindow::registerObserver(WebCore::LocalDOMWindow *this, WebCore::LocalDOMWindowObserver *a2)
{
  return MEMORY[0x1E0DCFEA8](this, a2);
}

uint64_t WebCore::LocalDOMWindow::unregisterObserver(WebCore::LocalDOMWindow *this, WebCore::LocalDOMWindowObserver *a2)
{
  return MEMORY[0x1E0DCFEB0](this, a2);
}

uint64_t WebCore::LocalDOMWindow::postMessageFromRemoteFrame()
{
  return MEMORY[0x1E0DCFEB8]();
}

uint64_t WebCore::LocalFrameView::forceLayout(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1E0DCFED0](this);
}

uint64_t WebCore::LocalFrameView::setNodeToDraw(WebCore::LocalFrameView *this, Node *a2)
{
  return MEMORY[0x1E0DCFEE8](this, a2);
}

uint64_t WebCore::LocalFrameView::setTransparent(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1E0DCFEF8](this);
}

uint64_t WebCore::LocalFrameView::setPaintBehavior()
{
  return MEMORY[0x1E0DCFF00]();
}

uint64_t WebCore::LocalFrameView::addScrollableArea(WebCore::LocalFrameView *this, WebCore::ScrollableArea *a2)
{
  return MEMORY[0x1E0DCFF08](this, a2);
}

uint64_t WebCore::LocalFrameView::setScrollPosition()
{
  return MEMORY[0x1E0DCFF10]();
}

uint64_t WebCore::LocalFrameView::setScrollVelocity()
{
  return MEMORY[0x1E0DCFF18]();
}

uint64_t WebCore::LocalFrameView::setTracksRepaints(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1E0DCFF20](this);
}

uint64_t WebCore::LocalFrameView::willEndLiveResize(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1E0DCFF28](this);
}

uint64_t WebCore::LocalFrameView::setViewExposedRect()
{
  return MEMORY[0x1E0DCFF30]();
}

uint64_t WebCore::LocalFrameView::willStartLiveResize(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1E0DCFF40](this);
}

uint64_t WebCore::LocalFrameView::enterCompositingMode(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1E0DCFF48](this);
}

uint64_t WebCore::LocalFrameView::removeScrollableArea(WebCore::LocalFrameView *this, WebCore::ScrollableArea *a2)
{
  return MEMORY[0x1E0DCFF50](this, a2);
}

uint64_t WebCore::LocalFrameView::resetTrackedRepaints(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1E0DCFF58](this);
}

uint64_t WebCore::LocalFrameView::setCanHaveScrollbars(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1E0DCFF60](this);
}

uint64_t WebCore::LocalFrameView::setBaseBackgroundColor(WebCore::LocalFrameView *this, const Color *a2)
{
  return MEMORY[0x1E0DCFF70](this, a2);
}

uint64_t WebCore::LocalFrameView::paintContentsForSnapshot()
{
  return MEMORY[0x1E0DCFF88]();
}

uint64_t WebCore::LocalFrameView::setScrollPinningBehavior()
{
  return MEMORY[0x1E0DCFF98]();
}

uint64_t WebCore::LocalFrameView::expandedLayoutViewportSize()
{
  return MEMORY[0x1E0DCFFB0]();
}

uint64_t WebCore::LocalFrameView::setCustomSizeForResizeEvent(WebCore::LocalFrameView *this, IntSize a2)
{
  return ((uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DCFFC0])(this, a2);
}

uint64_t WebCore::LocalFrameView::updateBackgroundRecursively()
{
  return MEMORY[0x1E0DCFFC8]();
}

uint64_t WebCore::LocalFrameView::enableFixedWidthAutoSizeMode(WebCore::LocalFrameView *this, uint64_t a2, const IntSize *a3)
{
  return MEMORY[0x1E0DCFFD0](this, a2, a3);
}

uint64_t WebCore::LocalFrameView::layoutOrVisualViewportChanged(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1E0DCFFD8](this);
}

uint64_t WebCore::LocalFrameView::setAutoSizeFixedMinimumHeight(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1E0DCFFE0](this);
}

uint64_t WebCore::LocalFrameView::setLayoutViewportOverrideRect()
{
  return MEMORY[0x1E0DCFFE8]();
}

uint64_t WebCore::LocalFrameView::setVisualViewportOverrideRect()
{
  return MEMORY[0x1E0DCFFF8]();
}

uint64_t WebCore::LocalFrameView::enableSizeToContentAutoSizeMode(WebCore::LocalFrameView *this, uint64_t a2, const IntSize *a3)
{
  return MEMORY[0x1E0DD0008](this, a2, a3);
}

uint64_t WebCore::LocalFrameView::setSizeForCSSLargeViewportUnits(WebCore::LocalFrameView *this, FloatSize a2)
{
  return MEMORY[0x1E0DD0010](this, *(__n128 *)&a2.m_width, *(__n128 *)&a2.m_height);
}

uint64_t WebCore::LocalFrameView::setSizeForCSSSmallViewportUnits(WebCore::LocalFrameView *this, FloatSize a2)
{
  return MEMORY[0x1E0DD0018](this, *(__n128 *)&a2.m_width, *(__n128 *)&a2.m_height);
}

uint64_t WebCore::LocalFrameView::setVisualUpdatesAllowedByClient(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1E0DD0020](this);
}

uint64_t WebCore::LocalFrameView::computeUpdatedLayoutViewportRect()
{
  return MEMORY[0x1E0DD0028]();
}

uint64_t WebCore::LocalFrameView::recalculateScrollbarOverlayStyle(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1E0DD0030](this);
}

uint64_t WebCore::LocalFrameView::setCustomFixedPositionLayoutRect(WebCore::LocalFrameView *this, const IntRect *a2)
{
  return MEMORY[0x1E0DD0038](this, a2);
}

uint64_t WebCore::LocalFrameView::setSizeForCSSDefaultViewportUnits(WebCore::LocalFrameView *this, FloatSize a2)
{
  return MEMORY[0x1E0DD0040](this, *(__n128 *)&a2.m_width, *(__n128 *)&a2.m_height);
}

uint64_t WebCore::LocalFrameView::updateLayoutAndStyleIfNeededRecursive()
{
  return MEMORY[0x1E0DD0048]();
}

uint64_t WebCore::LocalFrameView::setOverrideSizeForCSSLargeViewportUnits()
{
  return MEMORY[0x1E0DD0058]();
}

uint64_t WebCore::LocalFrameView::setOverrideSizeForCSSSmallViewportUnits()
{
  return MEMORY[0x1E0DD0060]();
}

uint64_t WebCore::LocalFrameView::setOverrideSizeForCSSDefaultViewportUnits()
{
  return MEMORY[0x1E0DD0068]();
}

uint64_t WebCore::LocalFrameView::setNeedsLayoutAfterViewConfigurationChange(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1E0DD0070](this);
}

uint64_t WebCore::LocalFrameView::addChild(WebCore::LocalFrameView *this, WebCore::Widget *a2)
{
  return MEMORY[0x1E0DD0088](this, a2);
}

uint64_t WebCore::PaymentContact::PaymentContact()
{
  return MEMORY[0x1E0DD0090]();
}

void WebCore::PaymentContact::~PaymentContact(WebCore::PaymentContact *this)
{
  MEMORY[0x1E0DD0098](this);
}

uint64_t WebCore::PluginDocument::pluginWidget(WebCore::PluginDocument *this)
{
  return MEMORY[0x1E0DD00A0](this);
}

uint64_t WebCore::ProcessWarming::prewarmGlobally(WebCore::ProcessWarming *this)
{
  return MEMORY[0x1E0DD00A8](this);
}

uint64_t WebCore::ProcessWarming::prewarmWithInformation()
{
  return MEMORY[0x1E0DD00B0]();
}

uint64_t WebCore::ProcessWarming::collectPrewarmInformation(WebCore::ProcessWarming *this)
{
  return MEMORY[0x1E0DD00B8](this);
}

uint64_t WebCore::RTCDataChannel::handlerFromIdentifier()
{
  return MEMORY[0x1E0DD00C0]();
}

uint64_t WebCore::RenderThemeIOS::iconForAttachment(WebCore::RenderThemeIOS *this, const WTF::String *a2, const WTF::String *a3, const WTF::String *a4)
{
  return MEMORY[0x1E0DD00C8](this, a2, a3, a4);
}

uint64_t WebCore::RenderThemeIOS::setFocusRingColor(WebCore::RenderThemeIOS *this, const Color *a2)
{
  return MEMORY[0x1E0DD00D0](this, a2);
}

uint64_t WebCore::RenderThemeIOS::systemFocusRingColor(WebCore::RenderThemeIOS *this)
{
  return MEMORY[0x1E0DD00D8](this);
}

uint64_t WebCore::RenderThemeIOS::setInsertionPointColor(WebCore::RenderThemeIOS *this, const Color *a2)
{
  return MEMORY[0x1E0DD00E0](this, a2);
}

uint64_t WebCore::RenderThemeIOS::cssValueToSystemColorMap(WebCore::RenderThemeIOS *this)
{
  return MEMORY[0x1E0DD00E8](this);
}

uint64_t WebCore::RenderThemeIOS::setCSSValueToSystemColorMap()
{
  return MEMORY[0x1E0DD00F0]();
}

uint64_t WebCore::ReportingScope::generateTestReport()
{
  return MEMORY[0x1E0DD00F8]();
}

uint64_t WebCore::ReportingScope::notifyReportObservers()
{
  return MEMORY[0x1E0DD0100]();
}

uint64_t WebCore::ReportingScope::parseReportingEndpointsFromHeader(WebCore::ReportingScope *this, const WTF::String *a2, const WTF::URL *a3)
{
  return MEMORY[0x1E0DD0108](this, a2, a3);
}

uint64_t WebCore::ResourceLoader::cancelledError(WebCore::ResourceLoader *this)
{
  return MEMORY[0x1E0DD0128](this);
}

uint64_t WebCore::ResourceLoader::didBlockAuthenticationChallenge(WebCore::ResourceLoader *this)
{
  return MEMORY[0x1E0DD0130](this);
}

uint64_t WebCore::ResourceLoader::start(WebCore::ResourceLoader *this)
{
  return MEMORY[0x1E0DD0138](this);
}

uint64_t WebCore::ResourceLoader::cancel()
{
  return MEMORY[0x1E0DD0140]();
}

uint64_t WebCore::SQLiteDatabase::lastChanges(WebCore::SQLiteDatabase *this)
{
  return MEMORY[0x1E0DD0148](this);
}

uint64_t WebCore::SQLiteDatabase::lastErrorMsg(WebCore::SQLiteDatabase *this)
{
  return MEMORY[0x1E0DD0158](this);
}

uint64_t WebCore::SQLiteDatabase::releaseMemory(WebCore::SQLiteDatabase *this)
{
  return MEMORY[0x1E0DD0160](this);
}

uint64_t WebCore::SQLiteDatabase::useFastMalloc(WebCore::SQLiteDatabase *this)
{
  return MEMORY[0x1E0DD0168](this);
}

uint64_t WebCore::SQLiteDatabase::clearAllTables(WebCore::SQLiteDatabase *this)
{
  return MEMORY[0x1E0DD0170](this);
}

uint64_t WebCore::SQLiteDatabase::executeCommand()
{
  return MEMORY[0x1E0DD0178]();
}

uint64_t WebCore::SQLiteDatabase::prepareStatement()
{
  return MEMORY[0x1E0DD0180]();
}

uint64_t WebCore::SQLiteDatabase::executeCommandSlow()
{
  return MEMORY[0x1E0DD0188]();
}

uint64_t WebCore::SQLiteDatabase::prepareHeapStatement()
{
  return MEMORY[0x1E0DD0190]();
}

uint64_t WebCore::SQLiteDatabase::prepareStatementSlow()
{
  return MEMORY[0x1E0DD0198]();
}

uint64_t WebCore::SQLiteDatabase::runIncrementalVacuumCommand(WebCore::SQLiteDatabase *this)
{
  return MEMORY[0x1E0DD01A0](this);
}

uint64_t WebCore::SQLiteDatabase::turnOnIncrementalAutoVacuum(WebCore::SQLiteDatabase *this)
{
  return MEMORY[0x1E0DD01A8](this);
}

uint64_t WebCore::SQLiteDatabase::open()
{
  return MEMORY[0x1E0DD01B0]();
}

uint64_t WebCore::SQLiteDatabase::close(WebCore::SQLiteDatabase *this)
{
  return MEMORY[0x1E0DD01B8](this);
}

uint64_t WebCore::SQLiteDatabase::tableSQL()
{
  return MEMORY[0x1E0DD01C0]();
}

uint64_t WebCore::SQLiteDatabase::interrupt()
{
  return MEMORY[0x1E0DD01C8]();
}

uint64_t WebCore::SQLiteDatabase::lastError(WebCore::SQLiteDatabase *this)
{
  return MEMORY[0x1E0DD01D0](this);
}

uint64_t WebCore::SQLiteDatabase::SQLiteDatabase(WebCore::SQLiteDatabase *this)
{
  return MEMORY[0x1E0DD01D8](this);
}

void WebCore::SQLiteDatabase::~SQLiteDatabase(WebCore::SQLiteDatabase *this)
{
  MEMORY[0x1E0DD01E0](this);
}

uint64_t WebCore::SWServerWorker::skipWaiting(WebCore::SWServerWorker *this)
{
  return MEMORY[0x1E0DD01E8](this);
}

uint64_t WebCore::SWServerWorker::whenActivated()
{
  return MEMORY[0x1E0DD01F0]();
}

uint64_t WebCore::SWServerWorker::whenTerminated()
{
  return MEMORY[0x1E0DD01F8]();
}

uint64_t WebCore::SWServerWorker::contextConnection(WebCore::SWServerWorker *this)
{
  return MEMORY[0x1E0DD0200](this);
}

uint64_t WebCore::SWServerWorker::existingWorkerForIdentifier()
{
  return MEMORY[0x1E0DD0208]();
}

uint64_t WebCore::SWServerWorker::terminate()
{
  return MEMORY[0x1E0DD0210]();
}

void WebCore::SWServerWorker::~SWServerWorker(WebCore::SWServerWorker *this)
{
  MEMORY[0x1E0DD0218](this);
}

uint64_t WebCore::ScrollableArea::clearSnapOffsets(WebCore::ScrollableArea *this)
{
  return MEMORY[0x1E0DD0220](this);
}

uint64_t WebCore::ScrollableArea::scrollbarStyleChanged()
{
  return MEMORY[0x1E0DD0228]();
}

uint64_t WebCore::ScrollableArea::setScrollSnapOffsetInfo()
{
  return MEMORY[0x1E0DD0230]();
}

uint64_t WebCore::ScrollableArea::scrollToPositionWithoutAnimation()
{
  return MEMORY[0x1E0DD0238]();
}

uint64_t WebCore::ScrollableArea::ScrollableArea(WebCore::ScrollableArea *this)
{
  return MEMORY[0x1E0DD0240](this);
}

void WebCore::ScrollableArea::~ScrollableArea(WebCore::ScrollableArea *this)
{
  MEMORY[0x1E0DD0248](this);
}

uint64_t WebCore::ScrollbarTheme::theme(WebCore::ScrollbarTheme *this)
{
  return MEMORY[0x1E0DD0250](this);
}

uint64_t WebCore::SecurityOrigin::createOpaque(WebCore::SecurityOrigin *this)
{
  return MEMORY[0x1E0DD0258](this);
}

uint64_t WebCore::SecurityOrigin::opaqueOrigin(WebCore::SecurityOrigin *this)
{
  return MEMORY[0x1E0DD0260](this);
}

uint64_t WebCore::SecurityOrigin::createFromString(WebCore::SecurityOrigin *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD0268](this, a2);
}

uint64_t WebCore::SecurityOrigin::isLocalhostAddress()
{
  return MEMORY[0x1E0DD0270]();
}

uint64_t WebCore::SecurityOrigin::isLocalHostOrLoopbackIPAddress()
{
  return MEMORY[0x1E0DD0278]();
}

uint64_t WebCore::SecurityOrigin::create()
{
  return MEMORY[0x1E0DD0280]();
}

uint64_t WebCore::SecurityOrigin::create(WebCore::SecurityOrigin *this, const WTF::URL *a2)
{
  return MEMORY[0x1E0DD0288](this, a2);
}

uint64_t WebCore::SecurityPolicy::generateReferrerHeader()
{
  return MEMORY[0x1E0DD0298]();
}

uint64_t WebCore::SecurityPolicy::resetOriginAccessAllowlists(WebCore::SecurityPolicy *this)
{
  return MEMORY[0x1E0DD02A0](this);
}

uint64_t WebCore::SecurityPolicy::addOriginAccessAllowlistEntry(WebCore::SecurityPolicy *this, const WebCore::SecurityOrigin *a2, const WTF::String *a3, const WTF::String *a4)
{
  return MEMORY[0x1E0DD02A8](this, a2, a3, a4);
}

uint64_t WebCore::SecurityPolicy::removeOriginAccessAllowlistEntry(WebCore::SecurityPolicy *this, const WebCore::SecurityOrigin *a2, const WTF::String *a3, const WTF::String *a4)
{
  return MEMORY[0x1E0DD02B0](this, a2, a3, a4);
}

uint64_t WebCore::ShapeDetection::FaceDetectorImpl::FaceDetectorImpl()
{
  return MEMORY[0x1E0DD02B8]();
}

uint64_t WebCore::ShapeDetection::TextDetectorImpl::TextDetectorImpl(WebCore::ShapeDetection::TextDetectorImpl *this)
{
  return MEMORY[0x1E0DD02C0](this);
}

uint64_t WebCore::ShapeDetection::BarcodeDetectorImpl::getSupportedFormats()
{
  return MEMORY[0x1E0DD02C8]();
}

uint64_t WebCore::ShapeDetection::BarcodeDetectorImpl::BarcodeDetectorImpl()
{
  return MEMORY[0x1E0DD02D0]();
}

uint64_t WebCore::TestReportBody::create()
{
  return MEMORY[0x1E0DD02E8]();
}

uint64_t WebCore::TextExtraction::extractItem()
{
  return MEMORY[0x1E0DD02F0]();
}

uint64_t WebCore::TileController::setTilesOpaque(WebCore::TileController *this)
{
  return MEMORY[0x1E0DD02F8](this);
}

uint64_t WebCore::TileController::containerLayers(WebCore::TileController *this)
{
  return MEMORY[0x1E0DD0300](this);
}

uint64_t WebCore::TileController::setNeedsDisplay(WebCore::TileController *this)
{
  return MEMORY[0x1E0DD0308](this);
}

uint64_t WebCore::TileController::setContentsScale(WebCore::TileController *this, float a2)
{
  return MEMORY[0x1E0DD0310](this, a2);
}

uint64_t WebCore::TileController::setAcceleratesDrawing(WebCore::TileController *this)
{
  return MEMORY[0x1E0DD0318](this);
}

uint64_t WebCore::TileController::setNeedsDisplayInRect(WebCore::TileController *this, const IntRect *a2)
{
  return MEMORY[0x1E0DD0320](this, a2);
}

uint64_t WebCore::TileController::setTileDebugBorderColor(WebCore::TileController *this, Color a2)
{
  return MEMORY[0x1E0DD0328](this, a2.m_colorAndFlags);
}

uint64_t WebCore::TileController::setTileDebugBorderWidth(WebCore::TileController *this, float a2)
{
  return MEMORY[0x1E0DD0330](this, a2);
}

uint64_t WebCore::TileController::tileGridContainerLayerName(WebCore::TileController *this)
{
  return MEMORY[0x1E0DD0338](this);
}

uint64_t WebCore::TileController::tileCacheLayerBoundsChanged(WebCore::TileController *this)
{
  return MEMORY[0x1E0DD0340](this);
}

uint64_t WebCore::TileController::setWantsDeepColorBackingStore(WebCore::TileController *this)
{
  return MEMORY[0x1E0DD0348](this);
}

uint64_t WebCore::TileController::TileController()
{
  return MEMORY[0x1E0DD0350]();
}

uint64_t WebCore::UserStyleSheet::UserStyleSheet()
{
  return MEMORY[0x1E0DD0358]();
}

uint64_t WebCore::WebRTCProvider::webRTCAvailable(WebCore::WebRTCProvider *this)
{
  return MEMORY[0x1E0DD0360](this);
}

uint64_t WebCore::WebSocketFrame::WebSocketFrame()
{
  return MEMORY[0x1E0DD0388]();
}

uint64_t WebCore::characterCount()
{
  return MEMORY[0x1E0DD0390]();
}

uint64_t WebCore::copyTimingData()
{
  return MEMORY[0x1E0DD0398]();
}

uint64_t WebCore::endOfParagraph()
{
  return MEMORY[0x1E0DD03A0]();
}

uint64_t WebCore::foldQuoteMarks(WebCore *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD03A8](this, a2);
}

uint64_t WebCore::keyForKeyEvent(WebCore *this, WebEvent *a2)
{
  return MEMORY[0x1E0DD03B0](this, a2);
}

uint64_t WebCore::roundedIntRect(WebCore *this, const FloatRect *a2)
{
  return MEMORY[0x1E0DD03B8](this, a2);
}

uint64_t WebCore::setSystemHasAC(WebCore *this)
{
  return MEMORY[0x1E0DD03C0](this);
}

uint64_t WebCore::stopResolveDNS(WebCore *this)
{
  return MEMORY[0x1E0DD03C8](this);
}

uint64_t WebCore::viewController(WebCore *this, UIView *a2)
{
  return MEMORY[0x1E0DD03D0](this, a2);
}

uint64_t WebCore::ActiveDOMObject::suspendIfNeeded(WebCore::ActiveDOMObject *this)
{
  return MEMORY[0x1E0DD03D8](this);
}

uint64_t WebCore::ActiveDOMObject::ActiveDOMObject(WebCore::ActiveDOMObject *this, Document *a2)
{
  return MEMORY[0x1E0DD03E0](this, a2);
}

void WebCore::ActiveDOMObject::~ActiveDOMObject(WebCore::ActiveDOMObject *this)
{
  MEMORY[0x1E0DD03E8](this);
}

uint64_t WebCore::AffineTransform::scale(WebCore::AffineTransform *this, double a2)
{
  return MEMORY[0x1E0DD03F0](this, a2);
}

uint64_t WebCore::AffineTransform::rotate(WebCore::AffineTransform *this, double a2)
{
  return MEMORY[0x1E0DD03F8](this, a2);
}

uint64_t WebCore::AffineTransform::translate(WebCore::AffineTransform *this, const FloatSize *a2)
{
  return MEMORY[0x1E0DD0400](this, a2);
}

uint64_t WebCore::AffineTransform::translate(WebCore::AffineTransform *this, double a2, double a3)
{
  return MEMORY[0x1E0DD0408](this, a2, a3);
}

uint64_t WebCore::AffineTransform::AffineTransform(WebCore::AffineTransform *this, const CGAffineTransform *a2)
{
  return MEMORY[0x1E0DD0410](this, a2);
}

uint64_t WebCore::ArchiveResource::create()
{
  return MEMORY[0x1E0DD0418]();
}

uint64_t WebCore::AsyncFileStream::openForRead(WebCore::AsyncFileStream *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD0420](this, a2);
}

uint64_t WebCore::AsyncFileStream::read(WebCore::AsyncFileStream *this, void *a2)
{
  return MEMORY[0x1E0DD0428](this, a2);
}

uint64_t WebCore::AsyncFileStream::close(WebCore::AsyncFileStream *this)
{
  return MEMORY[0x1E0DD0430](this);
}

uint64_t WebCore::AsyncFileStream::getSize()
{
  return MEMORY[0x1E0DD0438]();
}

uint64_t WebCore::AsyncFileStream::AsyncFileStream(WebCore::AsyncFileStream *this, WebCore::FileStreamClient *a2)
{
  return MEMORY[0x1E0DD0440](this, a2);
}

void WebCore::AsyncFileStream::~AsyncFileStream(WebCore::AsyncFileStream *this)
{
  MEMORY[0x1E0DD0448](this);
}

uint64_t WebCore::BasicShapeInset::create()
{
  return MEMORY[0x1E0DD0450]();
}

uint64_t WebCore::CertificateInfo::certificateChainFromSecTrust(WebCore::CertificateInfo *this, __SecTrust *a2)
{
  return MEMORY[0x1E0DD0470](this, a2);
}

uint64_t WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert()
{
  return MEMORY[0x1E0DD0478]();
}

uint64_t WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert()
{
  return MEMORY[0x1E0DD0480]();
}

uint64_t WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert()
{
  return MEMORY[0x1E0DD0488]();
}

uint64_t WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert()
{
  return MEMORY[0x1E0DD0490]();
}

uint64_t WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert()
{
  return MEMORY[0x1E0DD0498]();
}

uint64_t WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert()
{
  return MEMORY[0x1E0DD04A0]();
}

uint64_t WebCore::DOMWrapperWorld::clearWrappers(WebCore::DOMWrapperWorld *this)
{
  return MEMORY[0x1E0DD04A8](this);
}

void WebCore::DOMWrapperWorld::~DOMWrapperWorld(WebCore::DOMWrapperWorld *this)
{
  MEMORY[0x1E0DD04B0](this);
}

uint64_t WebCore::DatabaseManager::setIsAvailable(WebCore::DatabaseManager *this)
{
  return MEMORY[0x1E0DD04C0](this);
}

uint64_t WebCore::DatabaseManager::singleton(WebCore::DatabaseManager *this)
{
  return MEMORY[0x1E0DD04E0](this);
}

uint64_t WebCore::DatabaseTracker::trackerWithDatabasePath(WebCore::DatabaseTracker *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD0500](this, a2);
}

uint64_t WebCore::DatabaseTracker::deleteAllDatabasesImmediately(WebCore::DatabaseTracker *this)
{
  return MEMORY[0x1E0DD0518](this);
}

uint64_t WebCore::DatabaseTracker::setQuota(WebCore::DatabaseTracker *this, const WebCore::SecurityOriginData *a2)
{
  return MEMORY[0x1E0DD0548](this, a2);
}

uint64_t WebCore::DatabaseTracker::singleton(WebCore::DatabaseTracker *this)
{
  return MEMORY[0x1E0DD0550](this);
}

uint64_t WebCore::DeferredPromise::callFunction()
{
  return MEMORY[0x1E0DD0558]();
}

uint64_t WebCore::DeferredPromise::reject()
{
  return MEMORY[0x1E0DD0560]();
}

uint64_t WebCore::FocusController::setFocusedFrame()
{
  return MEMORY[0x1E0DD0570]();
}

uint64_t WebCore::FocusController::setInitialFocus()
{
  return MEMORY[0x1E0DD0578]();
}

uint64_t WebCore::FocusController::setFocusedElement()
{
  return MEMORY[0x1E0DD0580]();
}

uint64_t WebCore::FocusController::nextFocusableElement(WebCore::FocusController *this, Node *a2)
{
  return MEMORY[0x1E0DD0588](this, a2);
}

uint64_t WebCore::FocusController::relinquishFocusToChrome()
{
  return MEMORY[0x1E0DD0590]();
}

uint64_t WebCore::FocusController::previousFocusableElement(WebCore::FocusController *this, Node *a2)
{
  return MEMORY[0x1E0DD0598](this, a2);
}

uint64_t WebCore::GamepadProvider::setSharedProvider(WebCore::GamepadProvider *this, WebCore::GamepadProvider *a2)
{
  return MEMORY[0x1E0DD05A8](this, a2);
}

uint64_t WebCore::GamepadProvider::singleton(WebCore::GamepadProvider *this)
{
  return MEMORY[0x1E0DD05B0](this);
}

uint64_t WebCore::GraphicsContext::drawImageBuffer()
{
  return MEMORY[0x1E0DD05B8]();
}

{
  return MEMORY[0x1E0DD05C0]();
}

uint64_t WebCore::GraphicsContext::drawNativeImage()
{
  return MEMORY[0x1E0DD05C8]();
}

uint64_t WebCore::GraphicsContext::drawConsumingImageBuffer()
{
  return MEMORY[0x1E0DD05D0]();
}

uint64_t WebCore::GraphicsContext::drawImage()
{
  return MEMORY[0x1E0DD05D8]();
}

{
  return MEMORY[0x1E0DD05E0]();
}

uint64_t WebCore::GraphicsLayerCA::layerDidDisplay(WebCore::GraphicsLayerCA *this, WebCore::PlatformCALayer *a2)
{
  return MEMORY[0x1E0DD05E8](this, a2);
}

uint64_t WebCore::GraphicsLayerCA::setContentsToAsyncDisplayDelegate()
{
  return MEMORY[0x1E0DD05F0]();
}

uint64_t WebCore::GraphicsLayerCA::GraphicsLayerCA()
{
  return MEMORY[0x1E0DD05F8]();
}

void WebCore::GraphicsLayerCA::~GraphicsLayerCA(WebCore::GraphicsLayerCA *this)
{
  MEMORY[0x1E0DD0600](this);
}

uint64_t WebCore::HTTPHeaderField::create()
{
  return MEMORY[0x1E0DD0658]();
}

uint64_t WebCore::IDBDatabaseInfo::IDBDatabaseInfo()
{
  return MEMORY[0x1E0DD0660]();
}

void WebCore::IDBDatabaseInfo::operator delete(void *a1)
{
  MEMORY[0x1E0DD0668](a1);
}

uint64_t WebCore::IDBDatabaseInfo::operator new(WebCore::IDBDatabaseInfo *this)
{
  return MEMORY[0x1E0DD0670](this);
}

void WebCore::IDBGetAllResult::operator delete(void *a1)
{
  MEMORY[0x1E0DD0678](a1);
}

uint64_t WebCore::IDBGetAllResult::operator new(WebCore::IDBGetAllResult *this)
{
  return MEMORY[0x1E0DD0680](this);
}

uint64_t WebCore::MIMETypeFromUTI(WebCore *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD06A0](this, a2);
}

void WebCore::OffscreenCanvas::~OffscreenCanvas(WebCore::OffscreenCanvas *this)
{
  MEMORY[0x1E0DD06A8](this);
}

void WebCore::OffscreenCanvas::operator delete(void *a1)
{
  MEMORY[0x1E0DD06B0](a1);
}

uint64_t WebCore::PlatformCALayer::setMaskLayer()
{
  return MEMORY[0x1E0DD06B8]();
}

uint64_t WebCore::PlatformCALayer::drawLayerContents()
{
  return MEMORY[0x1E0DD06C0]();
}

uint64_t WebCore::PlatformCALayer::currentTimeToMediaTime()
{
  return MEMORY[0x1E0DD06C8]();
}

uint64_t WebCore::PlatformCALayer::PlatformCALayer()
{
  return MEMORY[0x1E0DD06D0]();
}

void WebCore::PlatformCALayer::~PlatformCALayer(WebCore::PlatformCALayer *this)
{
  MEMORY[0x1E0DD06D8](this);
}

uint64_t WebCore::ProcessIdentity::ProcessIdentity()
{
  return MEMORY[0x1E0DD06E0]();
}

{
  return MEMORY[0x1E0DD06E8]();
}

uint64_t WebCore::ProcessIdentity::operator=()
{
  return MEMORY[0x1E0DD06F0]();
}

uint64_t WebCore::ProgressBarPart::create(WebCore::ProgressBarPart *this, double a2, const WTF::Seconds *a3)
{
  return MEMORY[0x1E0DD06F8](this, a3, a2);
}

uint64_t WebCore::ProtectionSpace::ProtectionSpace(WebCore::ProtectionSpace *this, NSURLProtectionSpace *a2)
{
  return MEMORY[0x1E0DD0700](this, a2);
}

uint64_t WebCore::ProtectionSpace::ProtectionSpace()
{
  return MEMORY[0x1E0DD0708]();
}

uint64_t WebCore::ResourceRequest::fromResourceRequestData()
{
  return MEMORY[0x1E0DD0720]();
}

uint64_t WebCore::ResourceRequest::setHTTPPipeliningEnabled(WebCore::ResourceRequest *this)
{
  return MEMORY[0x1E0DD0728](this);
}

uint64_t WebCore::ResourceRequest::updateFromDelegatePreservingOldProperties(WebCore::ResourceRequest *this, const WebCore::ResourceRequest *a2)
{
  return MEMORY[0x1E0DD0730](this, a2);
}

uint64_t WebCore::ResourceRequest::ResourceRequest(WebCore::ResourceRequest *this, NSURLRequest *a2)
{
  return MEMORY[0x1E0DD0738](this, a2);
}

uint64_t WebCore::RunLoopObserver::invalidate(WebCore::RunLoopObserver *this)
{
  return MEMORY[0x1E0DD0740](this);
}

uint64_t WebCore::RunLoopObserver::schedule()
{
  return MEMORY[0x1E0DD0748]();
}

void WebCore::RunLoopObserver::~RunLoopObserver(WebCore::RunLoopObserver *this)
{
  MEMORY[0x1E0DD0750](this);
}

uint64_t WebCore::SQLiteStatement::bindDouble(WebCore::SQLiteStatement *this, double a2)
{
  return MEMORY[0x1E0DD0758](this, a2);
}

uint64_t WebCore::SQLiteStatement::columnText(WebCore::SQLiteStatement *this)
{
  return MEMORY[0x1E0DD0760](this);
}

uint64_t WebCore::SQLiteStatement::columnDouble(WebCore::SQLiteStatement *this)
{
  return MEMORY[0x1E0DD0768](this);
}

uint64_t WebCore::SQLiteStatement::columnBlobAsString(WebCore::SQLiteStatement *this)
{
  return MEMORY[0x1E0DD0778](this);
}

uint64_t WebCore::SQLiteStatement::step(WebCore::SQLiteStatement *this)
{
  return MEMORY[0x1E0DD0788](this);
}

uint64_t WebCore::SQLiteStatement::reset(WebCore::SQLiteStatement *this)
{
  return MEMORY[0x1E0DD0790](this);
}

uint64_t WebCore::SQLiteStatement::bindInt(WebCore::SQLiteStatement *this)
{
  return MEMORY[0x1E0DD0798](this);
}

uint64_t WebCore::SQLiteStatement::bindBlob(WebCore::SQLiteStatement *this, uint64_t a2, const WTF::String *a3)
{
  return MEMORY[0x1E0DD07A0](this, a2, a3);
}

uint64_t WebCore::SQLiteStatement::bindText()
{
  return MEMORY[0x1E0DD07A8]();
}

uint64_t WebCore::SQLiteStatement::columnInt(WebCore::SQLiteStatement *this)
{
  return MEMORY[0x1E0DD07B0](this);
}

void WebCore::SQLiteStatement::~SQLiteStatement(WebCore::SQLiteStatement *this)
{
  MEMORY[0x1E0DD07B8](this);
}

uint64_t WebCore::SecurityContext::contentSecurityPolicy(WebCore::SecurityContext *this)
{
  return MEMORY[0x1E0DD07D8](this);
}

uint64_t WebCore::ShareableBitmap::createImage(WebCore::ShareableBitmap *this)
{
  return MEMORY[0x1E0DD07E0](this);
}

uint64_t WebCore::ShareableBitmap::makeCGImage()
{
  return MEMORY[0x1E0DD07E8]();
}

uint64_t WebCore::ShareableBitmap::mutableSpan(WebCore::ShareableBitmap *this)
{
  return MEMORY[0x1E0DD07F0](this);
}

uint64_t WebCore::ShareableBitmap::createReadOnly()
{
  return MEMORY[0x1E0DD07F8]();
}

uint64_t WebCore::ShareableBitmap::makeCGImageCopy(WebCore::ShareableBitmap *this)
{
  return MEMORY[0x1E0DD0800](this);
}

uint64_t WebCore::ShareableBitmap::createFromImageDraw()
{
  return MEMORY[0x1E0DD0808]();
}

{
  return MEMORY[0x1E0DD0810]();
}

uint64_t WebCore::ShareableBitmap::createPlatformImage()
{
  return MEMORY[0x1E0DD0818]();
}

uint64_t WebCore::ShareableBitmap::setOwnershipOfMemory()
{
  return MEMORY[0x1E0DD0820]();
}

uint64_t WebCore::ShareableBitmap::createFromImagePixels()
{
  return MEMORY[0x1E0DD0828]();
}

uint64_t WebCore::ShareableBitmap::createGraphicsContext(WebCore::ShareableBitmap *this)
{
  return MEMORY[0x1E0DD0830](this);
}

uint64_t WebCore::ShareableBitmap::paint(WebCore::ShareableBitmap *this, WebCore::GraphicsContext *a2, const IntPoint *a3, const IntRect *a4)
{
  return MEMORY[0x1E0DD0838](this, a2, a3, a4);
}

uint64_t WebCore::ShareableBitmap::paint(WebCore::ShareableBitmap *this, WebCore::GraphicsContext *a2, float a3, const IntPoint *a4, const IntRect *a5)
{
  return MEMORY[0x1E0DD0840](this, a2, a4, a5, a3);
}

uint64_t WebCore::ShareableBitmap::create()
{
  return MEMORY[0x1E0DD0848]();
}

{
  return MEMORY[0x1E0DD0850]();
}

uint64_t WebCore::SliderTrackPart::create()
{
  return MEMORY[0x1E0DD0858]();
}

uint64_t WebCore::SpotLightSource::create()
{
  return MEMORY[0x1E0DD0860]();
}

uint64_t WebCore::UTIFromMIMEType(WebCore *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD0868](this, a2);
}

uint64_t WebCore::VisiblePosition::VisiblePosition()
{
  return MEMORY[0x1E0DD0870]();
}

uint64_t WebCore::WebLockRegistry::setSharedRegistry()
{
  return MEMORY[0x1E0DD0878]();
}

uint64_t WebCore::blendSourceOver(WebCore *this, const Color *a2, const Color *a3)
{
  return MEMORY[0x1E0DD0898](this, a2, a3);
}

uint64_t WebCore::cocoaColorOrNil(WebCore *this, const Color *a2)
{
  return MEMORY[0x1E0DD08A0](this, a2);
}

uint64_t WebCore::codeForKeyEvent(WebCore *this, WebEvent *a2)
{
  return MEMORY[0x1E0DD08A8](this, a2);
}

uint64_t WebCore::createLiveRange()
{
  return MEMORY[0x1E0DD08B0]();
}

{
  return MEMORY[0x1E0DD08B8]();
}

uint64_t WebCore::hasAnyPlainText()
{
  return MEMORY[0x1E0DD08C0]();
}

uint64_t WebCore::localizedString(WebCore *this, const __CFString *a2)
{
  return MEMORY[0x1E0DD08D0](this, a2);
}

uint64_t WebCore::makeSimpleRange()
{
  return MEMORY[0x1E0DD08E0]();
}

{
  return MEMORY[0x1E0DD08E8]();
}

{
  return MEMORY[0x1E0DD08F8]();
}

uint64_t WebCore::makeSimpleRange(WebCore *this, const Range *a2)
{
  return MEMORY[0x1E0DD08F0](this, a2);
}

uint64_t WebCore::startOfDocument(WebCore *this, const Node *a2)
{
  return MEMORY[0x1E0DD0908](this, a2);
}

uint64_t WebCore::startOfSentence()
{
  return MEMORY[0x1E0DD0918]();
}

uint64_t WebCore::toDecimalNumber(WebCore *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD0920](this, a2);
}

uint64_t WebCore::unwrapCryptoKey()
{
  return MEMORY[0x1E0DD0928]();
}

uint64_t WebCore::AttributedString::rangesAreSafe()
{
  return MEMORY[0x1E0DD0930]();
}

uint64_t WebCore::AttributedString::fromNSAttributedString()
{
  return MEMORY[0x1E0DD0938]();
}

uint64_t WebCore::AttributedString::AttributedString()
{
  return MEMORY[0x1E0DD0940]();
}

{
  return MEMORY[0x1E0DD0948]();
}

{
  return MEMORY[0x1E0DD0950]();
}

uint64_t WebCore::AttributedString::AttributedString(WebCore::AttributedString *this)
{
  return MEMORY[0x1E0DD0958](this);
}

void WebCore::AttributedString::~AttributedString(WebCore::AttributedString *this)
{
  MEMORY[0x1E0DD0960](this);
}

uint64_t WebCore::AttributedString::operator=()
{
  return MEMORY[0x1E0DD0968]();
}

{
  return MEMORY[0x1E0DD0970]();
}

uint64_t WebCore::AudioDestination::hardwareSampleRate(WebCore::AudioDestination *this)
{
  return MEMORY[0x1E0DD0978](this);
}

uint64_t WebCore::AudioDestination::create()
{
  return MEMORY[0x1E0DD0980]();
}

uint64_t WebCore::AutofillElements::computeAutofillElements()
{
  return MEMORY[0x1E0DD0988]();
}

uint64_t WebCore::AutofillElements::autofill()
{
  return MEMORY[0x1E0DD0990]();
}

uint64_t WebCore::BackForwardCache::setMaxSize(WebCore::BackForwardCache *this)
{
  return MEMORY[0x1E0DD0998](this);
}

uint64_t WebCore::BackForwardCache::suspendPage()
{
  return MEMORY[0x1E0DD09A0]();
}

uint64_t WebCore::BackForwardCache::addIfCacheable()
{
  return MEMORY[0x1E0DD09A8]();
}

uint64_t WebCore::BackForwardCache::pruneToSizeNow()
{
  return MEMORY[0x1E0DD09B0]();
}

uint64_t WebCore::BackForwardCache::clearEntriesForOrigins()
{
  return MEMORY[0x1E0DD09B8]();
}

uint64_t WebCore::BackForwardCache::remove(WebCore::BackForwardCache *this, WebCore::HistoryItem *a2)
{
  return MEMORY[0x1E0DD09C0](this, a2);
}

uint64_t WebCore::BackForwardCache::singleton(WebCore::BackForwardCache *this)
{
  return MEMORY[0x1E0DD09C8](this);
}

uint64_t WebCore::BasicShapeCircle::create()
{
  return MEMORY[0x1E0DD09D0]();
}

uint64_t WebCore::BlobRegistryImpl::registerBlobURL()
{
  return MEMORY[0x1E0DD09D8]();
}

uint64_t WebCore::BlobRegistryImpl::unregisterBlobURL()
{
  return MEMORY[0x1E0DD09E0]();
}

uint64_t WebCore::BlobRegistryImpl::registerBlobURLHandle()
{
  return MEMORY[0x1E0DD09E8]();
}

uint64_t WebCore::BlobRegistryImpl::setPartitioningEnabled(WebCore::BlobRegistryImpl *this)
{
  return MEMORY[0x1E0DD09F0](this);
}

uint64_t WebCore::BlobRegistryImpl::registerInternalBlobURL()
{
  return MEMORY[0x1E0DD09F8]();
}

uint64_t WebCore::BlobRegistryImpl::unregisterBlobURLHandle()
{
  return MEMORY[0x1E0DD0A00]();
}

uint64_t WebCore::BlobRegistryImpl::registerInternalFileBlobURL()
{
  return MEMORY[0x1E0DD0A08]();
}

uint64_t WebCore::BlobRegistryImpl::registerInternalBlobURLForSlice(WebCore::BlobRegistryImpl *this, const WTF::URL *a2, const WTF::URL *a3, uint64_t a4, uint64_t a5, const WTF::String *a6)
{
  return MEMORY[0x1E0DD0A10](this, a2, a3, a4, a5, a6);
}

uint64_t WebCore::BlobRegistryImpl::writeBlobsToTemporaryFilesForIndexedDB()
{
  return MEMORY[0x1E0DD0A18]();
}

uint64_t WebCore::BlobRegistryImpl::registerInternalBlobURLOptionallyFileBacked()
{
  return MEMORY[0x1E0DD0A20]();
}

uint64_t WebCore::BlobRegistryImpl::blobSize(WebCore::BlobRegistryImpl *this, const WTF::URL *a2)
{
  return MEMORY[0x1E0DD0A28](this, a2);
}

uint64_t WebCore::BlobRegistryImpl::blobType(WebCore::BlobRegistryImpl *this, const WTF::URL *a2)
{
  return MEMORY[0x1E0DD0A30](this, a2);
}

void WebCore::BlobRegistryImpl::~BlobRegistryImpl(WebCore::BlobRegistryImpl *this)
{
  MEMORY[0x1E0DD0A38](this);
}

uint64_t WebCore::BroadcastChannel::dispatchMessageTo()
{
  return MEMORY[0x1E0DD0A40]();
}

uint64_t WebCore::CocoaApplication::isIBooks(WebCore::CocoaApplication *this)
{
  return MEMORY[0x1E0DD0A48](this);
}

void WebCore::DatabaseProvider::~DatabaseProvider(WebCore::DatabaseProvider *this)
{
  MEMORY[0x1E0DD0A50](this);
}

uint64_t WebCore::DecomposedGlyphs::create()
{
  return MEMORY[0x1E0DD0A58]();
}

uint64_t WebCore::DictionaryLookup::rangeForSelection()
{
  return MEMORY[0x1E0DD0A60]();
}

uint64_t WebCore::DictionaryLookup::rangeAtHitTestResult(WebCore::DictionaryLookup *this, const WebCore::HitTestResult *a2)
{
  return MEMORY[0x1E0DD0A68](this, a2);
}

uint64_t WebCore::DictionaryLookup::stringForPDFSelection(WebCore::DictionaryLookup *this, PDFSelection *a2)
{
  return MEMORY[0x1E0DD0A70](this, a2);
}

uint64_t WebCore::DictionaryLookup::showPopup()
{
  return MEMORY[0x1E0DD0A78]();
}

uint64_t WebCore::EventListenerMap::EventListenerMap(WebCore::EventListenerMap *this)
{
  return MEMORY[0x1E0DD0A88](this);
}

uint64_t WebCore::FEConvolveMatrix::create()
{
  return MEMORY[0x1E0DD0A90]();
}

uint64_t WebCore::FilterOperations::FilterOperations()
{
  return MEMORY[0x1E0DD0AB0]();
}

uint64_t WebCore::FloatRoundedRect::FloatRoundedRect(WebCore::FloatRoundedRect *this, const FloatRect *a2, const Radii *a3)
{
  return MEMORY[0x1E0DD0AB8](this, a2, a3);
}

uint64_t WebCore::FloatRoundedRect::FloatRoundedRect(WebCore::FloatRoundedRect *this, const FloatRect *a2, const FloatSize *a3, const FloatSize *a4, const FloatSize *a5, const FloatSize *a6)
{
  return MEMORY[0x1E0DD0AC0](this, a2, a3, a4, a5, a6);
}

void WebCore::FontCascadeFonts::~FontCascadeFonts(WebCore::FontCascadeFonts *this)
{
  MEMORY[0x1E0DD0AD0](this);
}

uint64_t WebCore::FontPlatformData::fromIPCData()
{
  return MEMORY[0x1E0DD0AD8]();
}

uint64_t WebCore::FontPlatformData::create()
{
  return MEMORY[0x1E0DD0AE0]();
}

void WebCore::FontPlatformData::~FontPlatformData(WebCore::FontPlatformData *this)
{
  MEMORY[0x1E0DD0AE8](this);
}

uint64_t WebCore::FrameLoadRequest::requester(WebCore::FrameLoadRequest *this)
{
  return MEMORY[0x1E0DD0AF0](this);
}

uint64_t WebCore::FrameLoadRequest::FrameLoadRequest()
{
  return MEMORY[0x1E0DD0B00]();
}

{
  return MEMORY[0x1E0DD0B08]();
}

void WebCore::FrameLoadRequest::~FrameLoadRequest(WebCore::FrameLoadRequest *this)
{
  MEMORY[0x1E0DD0B10](this);
}

uint64_t WebCore::FrameRateMonitor::update(WebCore::FrameRateMonitor *this)
{
  return MEMORY[0x1E0DD0B18](this);
}

uint64_t WebCore::HTMLImageElement::setAllowsAnimation()
{
  return MEMORY[0x1E0DD0B30]();
}

uint64_t WebCore::HTMLInputElement::setAutoFilled(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1E0DD0B68](this);
}

uint64_t WebCore::HTMLInputElement::setShowAutoFillButton()
{
  return MEMORY[0x1E0DD0B90]();
}

uint64_t WebCore::HTMLInputElement::setAutoFilledAndObscured(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1E0DD0B98](this);
}

uint64_t WebCore::HTMLInputElement::setAutoFilledAndViewable(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1E0DD0BA0](this);
}

uint64_t WebCore::HTMLInputElement::files(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1E0DD0BA8](this);
}

uint64_t WebCore::HTMLInputElement::setFiles()
{
  return MEMORY[0x1E0DD0BC8]();
}

uint64_t WebCore::HTMLInputElement::setValue()
{
  return MEMORY[0x1E0DD0BD0]();
}

uint64_t WebCore::HTMLMediaElement::naturalSize(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1E0DD0BF8](this);
}

uint64_t WebCore::HTMLMediaElement::clearMediaCache()
{
  return MEMORY[0x1E0DD0C18]();
}

uint64_t WebCore::HTMLMediaElement::addEventListener()
{
  return MEMORY[0x1E0DD0C20]();
}

uint64_t WebCore::HTMLMediaElement::willExitFullscreen(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1E0DD0C30](this);
}

uint64_t WebCore::HTMLMediaElement::mediaCacheDirectory(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1E0DD0C38](this);
}

uint64_t WebCore::HTMLMediaElement::originsInMediaCache(WebCore::HTMLMediaElement *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD0C40](this, a2);
}

uint64_t WebCore::HTMLMediaElement::removeEventListener()
{
  return MEMORY[0x1E0DD0C48]();
}

uint64_t WebCore::HTMLMediaElement::layerHostingContextID(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1E0DD0C50](this);
}

uint64_t WebCore::HTMLMediaElement::setMediaCacheDirectory(WebCore::HTMLMediaElement *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD0C58](this, a2);
}

uint64_t WebCore::HTMLMediaElement::requestHostingContextID()
{
  return MEMORY[0x1E0DD0C60]();
}

uint64_t WebCore::HTMLMediaElement::clearMediaCacheForOrigins()
{
  return MEMORY[0x1E0DD0C68]();
}

uint64_t WebCore::HTMLMediaElement::prepareForVideoFullscreenStandby(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1E0DD0C88](this);
}

uint64_t WebCore::HTMLVideoElement::nativeImageForCurrentTime(WebCore::HTMLVideoElement *this)
{
  return MEMORY[0x1E0DD0D40](this);
}

uint64_t WebCore::HTMLVideoElement::setVideoFullscreenStandby(WebCore::HTMLVideoElement *this)
{
  return MEMORY[0x1E0DD0D48](this);
}

uint64_t WebCore::HTMLVideoElement::didExitFullscreenOrPictureInPicture(WebCore::HTMLVideoElement *this)
{
  return MEMORY[0x1E0DD0D58](this);
}

uint64_t WebCore::HTMLVideoElement::didEnterFullscreenOrPictureInPicture(WebCore::HTMLVideoElement *this, const FloatSize *a2)
{
  return MEMORY[0x1E0DD0D60](this, a2);
}

uint64_t WebCore::HTTPHeaderValues::applicationJSONContentType(WebCore::HTTPHeaderValues *this)
{
  return MEMORY[0x1E0DD0D68](this);
}

uint64_t WebCore::HTTPHeaderValues::maxAge0(WebCore::HTTPHeaderValues *this)
{
  return MEMORY[0x1E0DD0D70](this);
}

uint64_t WebCore::InspectorOverlay::drawFlexOverlay(WebCore::InspectorOverlay *this, WebCore::GraphicsContext *a2, const FlexHighlightOverlay *a3)
{
  return MEMORY[0x1E0DD0D78](this, a2, a3);
}

uint64_t WebCore::InspectorOverlay::drawGridOverlay(WebCore::InspectorOverlay *this, WebCore::GraphicsContext *a2, const GridHighlightOverlay *a3)
{
  return MEMORY[0x1E0DD0D80](this, a2, a3);
}

uint64_t WebCore::LegacyWebArchive::createFromSelection(WebCore::LegacyWebArchive *this, WebCore::LocalFrame *a2)
{
  return MEMORY[0x1E0DD0D98](this, a2);
}

uint64_t WebCore::LegacyWebArchive::rawDataRepresentation(WebCore::LegacyWebArchive *this)
{
  return MEMORY[0x1E0DD0DA0](this);
}

uint64_t WebCore::LegacyWebArchive::create()
{
  return MEMORY[0x1E0DD0DA8]();
}

{
  return MEMORY[0x1E0DD0DB0]();
}

{
  return MEMORY[0x1E0DD0DC0]();
}

{
  return MEMORY[0x1E0DD0DC8]();
}

uint64_t WebCore::MIMETypeRegistry::pdfMIMETypes(WebCore::MIMETypeRegistry *this)
{
  return MEMORY[0x1E0DD0DD8](this);
}

uint64_t WebCore::MIMETypeRegistry::usdMIMETypes(WebCore::MIMETypeRegistry *this)
{
  return MEMORY[0x1E0DD0DE0](this);
}

uint64_t WebCore::MIMETypeRegistry::isPDFMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD0DE8](this, a2);
}

uint64_t WebCore::MIMETypeRegistry::isUSDMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD0DF0](this, a2);
}

uint64_t WebCore::MIMETypeRegistry::isXMLMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD0DF8](this, a2);
}

uint64_t WebCore::MIMETypeRegistry::canShowMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD0E08](this, a2);
}

uint64_t WebCore::MIMETypeRegistry::allowedMIMETypes()
{
  return MEMORY[0x1E0DD0E10]();
}

uint64_t WebCore::MIMETypeRegistry::isWebArchiveMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD0E18](this, a2);
}

uint64_t WebCore::MIMETypeRegistry::mimeTypeForExtension()
{
  return MEMORY[0x1E0DD0E20]();
}

uint64_t WebCore::MIMETypeRegistry::isSupportedJSONMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD0E28](this, a2);
}

uint64_t WebCore::MIMETypeRegistry::isSupportedImageMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD0E40](this, a2);
}

uint64_t WebCore::MIMETypeRegistry::isSupportedMediaMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD0E48](this, a2);
}

uint64_t WebCore::MIMETypeRegistry::isSupportedModelMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD0E50](this, a2);
}

uint64_t WebCore::MIMETypeRegistry::isSupportedNonImageMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD0E68](this, a2);
}

uint64_t WebCore::MIMETypeRegistry::preferredExtensionForMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD0E70](this, a2);
}

uint64_t WebCore::MIMETypeRegistry::appendFileExtensionIfNecessary(WebCore::MIMETypeRegistry *this, const WTF::String *a2, const WTF::String *a3)
{
  return MEMORY[0x1E0DD0E78](this, a2, a3);
}

uint64_t WebCore::NavigationAction::NavigationAction()
{
  return MEMORY[0x1E0DD0E88]();
}

void WebCore::NavigationAction::~NavigationAction(WebCore::NavigationAction *this)
{
  MEMORY[0x1E0DD0E90](this);
}

uint64_t WebCore::NavigatorGamepad::setGamepadsRecentlyAccessedThreshold()
{
  return MEMORY[0x1E0DD0E98]();
}

uint64_t WebCore::NetworkSendQueue::clear(WebCore::NetworkSendQueue *this)
{
  return MEMORY[0x1E0DD0EA0](this);
}

uint64_t WebCore::NetworkSendQueue::enqueue()
{
  return MEMORY[0x1E0DD0EA8]();
}

{
  return MEMORY[0x1E0DD0EB8]();
}

uint64_t WebCore::NetworkSendQueue::enqueue(WebCore::NetworkSendQueue *this, const JSC::ArrayBuffer *a2)
{
  return MEMORY[0x1E0DD0EB0](this, a2);
}

uint64_t WebCore::NetworkSendQueue::NetworkSendQueue()
{
  return MEMORY[0x1E0DD0EC0]();
}

void WebCore::NetworkSendQueue::~NetworkSendQueue(WebCore::NetworkSendQueue *this)
{
  MEMORY[0x1E0DD0EC8](this);
}

uint64_t WebCore::NotificationData::fromDictionary(WebCore::NotificationData *this, NSDictionary *a2)
{
  return MEMORY[0x1E0DD0ED0](this, a2);
}

uint64_t WebCore::PointLightSource::create()
{
  return MEMORY[0x1E0DD0ED8]();
}

uint64_t WebCore::PreviewConverter::supportsMIMEType(WebCore::PreviewConverter *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD0EE0](this, a2);
}

uint64_t WebCore::RayPathOperation::create()
{
  return MEMORY[0x1E0DD0EE8]();
}

uint64_t WebCore::ResourceResponse::disableLazyInitialization(WebCore::ResourceResponse *this)
{
  return MEMORY[0x1E0DD0EF0](this);
}

uint64_t WebCore::SQLiteFileSystem::databaseFileSize(WebCore::SQLiteFileSystem *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD0EF8](this, a2);
}

uint64_t WebCore::SQLiteFileSystem::moveDatabaseFile(WebCore::SQLiteFileSystem *this, const WTF::String *a2, const WTF::String *a3)
{
  return MEMORY[0x1E0DD0F00](this, a2, a3);
}

uint64_t WebCore::SQLiteFileSystem::deleteDatabaseFile(WebCore::SQLiteFileSystem *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD0F08](this, a2);
}

uint64_t WebCore::SQLiteFileSystem::computeHashForFileName()
{
  return MEMORY[0x1E0DD0F10]();
}

uint64_t WebCore::SWContextManager::removeFetch()
{
  return MEMORY[0x1E0DD0F18]();
}

uint64_t WebCore::SWContextManager::firePushEvent()
{
  return MEMORY[0x1E0DD0F20]();
}

uint64_t WebCore::SWContextManager::setConnection()
{
  return MEMORY[0x1E0DD0F28]();
}

uint64_t WebCore::SWContextManager::setInspectable(WebCore::SWContextManager *this)
{
  return MEMORY[0x1E0DD0F30](this);
}

uint64_t WebCore::SWContextManager::terminateWorker()
{
  return MEMORY[0x1E0DD0F38]();
}

uint64_t WebCore::SWContextManager::updateWorkerState()
{
  return MEMORY[0x1E0DD0F40]();
}

uint64_t WebCore::SWContextManager::fireUpdateFoundEvent()
{
  return MEMORY[0x1E0DD0F48]();
}

uint64_t WebCore::SWContextManager::fireNotificationEvent()
{
  return MEMORY[0x1E0DD0F50]();
}

uint64_t WebCore::SWContextManager::stopAllServiceWorkers(WebCore::SWContextManager *this)
{
  return MEMORY[0x1E0DD0F58](this);
}

uint64_t WebCore::SWContextManager::updateRegistrationState()
{
  return MEMORY[0x1E0DD0F60]();
}

uint64_t WebCore::SWContextManager::fireBackgroundFetchEvent()
{
  return MEMORY[0x1E0DD0F68]();
}

uint64_t WebCore::SWContextManager::fireBackgroundFetchClickEvent()
{
  return MEMORY[0x1E0DD0F70]();
}

uint64_t WebCore::SWContextManager::setRegistrationLastUpdateTime()
{
  return MEMORY[0x1E0DD0F78]();
}

uint64_t WebCore::SWContextManager::setRegistrationUpdateViaCache()
{
  return MEMORY[0x1E0DD0F80]();
}

uint64_t WebCore::SWContextManager::registerServiceWorkerThreadForInstall()
{
  return MEMORY[0x1E0DD0F88]();
}

uint64_t WebCore::SWContextManager::singleton(WebCore::SWContextManager *this)
{
  return MEMORY[0x1E0DD0F90](this);
}

uint64_t WebCore::ScriptController::createWorld()
{
  return MEMORY[0x1E0DD0F98]();
}

uint64_t WebCore::ScriptController::jsWindowProxy(WebCore::ScriptController *this, WebCore::DOMWrapperWorld *a2)
{
  return MEMORY[0x1E0DD0FA0](this, a2);
}

uint64_t WebCore::ScriptController::executeAsynchronousUserAgentScriptInWorld()
{
  return MEMORY[0x1E0DD0FC8]();
}

uint64_t WebCore::ServiceWorkerJob::validateServiceWorkerResponse()
{
  return MEMORY[0x1E0DD0FD8]();
}

uint64_t WebCore::SpeechRecognizer::prepareForDestruction(WebCore::SpeechRecognizer *this)
{
  return MEMORY[0x1E0DD0FE0](this);
}

uint64_t WebCore::SpeechRecognizer::stop(WebCore::SpeechRecognizer *this)
{
  return MEMORY[0x1E0DD0FE8](this);
}

uint64_t WebCore::SpeechRecognizer::abort()
{
  return MEMORY[0x1E0DD0FF0]();
}

uint64_t WebCore::SpeechRecognizer::start()
{
  return MEMORY[0x1E0DD0FF8]();
}

uint64_t WebCore::SpeechRecognizer::SpeechRecognizer()
{
  return MEMORY[0x1E0DD1000]();
}

uint64_t WebCore::StorageUtilities::writeOriginToFile(WebCore::StorageUtilities *this, const WTF::String *a2, const WebCore::ClientOrigin *a3)
{
  return MEMORY[0x1E0DD1008](this, a2, a3);
}

uint64_t WebCore::StorageUtilities::readOriginFromFile(WebCore::StorageUtilities *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD1010](this, a2);
}

uint64_t WebCore::StorageUtilities::encodeSecurityOriginForFileName()
{
  return MEMORY[0x1E0DD1018]();
}

uint64_t WebCore::ThreadGlobalData::initializeEventNames(WebCore::ThreadGlobalData *this)
{
  return MEMORY[0x1E0DD1020](this);
}

uint64_t WebCore::TrackPrivateBase::removeClient(WebCore::TrackPrivateBase *this)
{
  return MEMORY[0x1E0DD1028](this);
}

uint64_t WebCore::TrackPrivateBase::notifyClients()
{
  return MEMORY[0x1E0DD1030]();
}

uint64_t WebCore::TrackPrivateBase::notifyMainThreadClient()
{
  return MEMORY[0x1E0DD1038]();
}

uint64_t WebCore::TrackPrivateBase::addClient()
{
  return MEMORY[0x1E0DD1040]();
}

void WebCore::UserGestureToken::~UserGestureToken(WebCore::UserGestureToken *this)
{
  MEMORY[0x1E0DD1048](this);
}

uint64_t WebCore::UserMediaRequest::deny()
{
  return MEMORY[0x1E0DD1050]();
}

uint64_t WebCore::UserMediaRequest::allow()
{
  return MEMORY[0x1E0DD1058]();
}

uint64_t WebCore::ValidationBubble::setAnchorRect(WebCore::ValidationBubble *this, const IntRect *a2, UIViewController *a3)
{
  return MEMORY[0x1E0DD1060](this, a2, a3);
}

uint64_t WebCore::ValidationBubble::show(WebCore::ValidationBubble *this)
{
  return MEMORY[0x1E0DD1068](this);
}

uint64_t WebCore::ValidationBubble::ValidationBubble()
{
  return MEMORY[0x1E0DD1070]();
}

void WebCore::ValidationBubble::~ValidationBubble(WebCore::ValidationBubble *this)
{
  MEMORY[0x1E0DD1078](this);
}

uint64_t WebCore::VisibleSelection::adjustPositionForEnd()
{
  return MEMORY[0x1E0DD1080]();
}

uint64_t WebCore::VisibleSelection::adjustPositionForStart()
{
  return MEMORY[0x1E0DD1088]();
}

uint64_t WebCore::VisibleSelection::selectionFromContentsOfNode(WebCore::VisibleSelection *this, Node *a2)
{
  return MEMORY[0x1E0DD1090](this, a2);
}

uint64_t WebCore::VisibleSelection::VisibleSelection()
{
  return MEMORY[0x1E0DD1098]();
}

{
  return MEMORY[0x1E0DD10A0]();
}

uint64_t WebCore::VisibleSelection::VisibleSelection(WebCore::VisibleSelection *this)
{
  return MEMORY[0x1E0DD10B0](this);
}

uint64_t WebCore::VisitedLinkStore::invalidateStylesForLink(WebCore::VisitedLinkStore *this)
{
  return MEMORY[0x1E0DD10B8](this);
}

uint64_t WebCore::VisitedLinkStore::invalidateStylesForAllLinks(WebCore::VisitedLinkStore *this)
{
  return MEMORY[0x1E0DD10C0](this);
}

uint64_t WebCore::VisitedLinkStore::VisitedLinkStore(WebCore::VisitedLinkStore *this)
{
  return MEMORY[0x1E0DD10C8](this);
}

void WebCore::VisitedLinkStore::~VisitedLinkStore(WebCore::VisitedLinkStore *this)
{
  MEMORY[0x1E0DD10D0](this);
}

uint64_t WebCore::attributedString()
{
  return MEMORY[0x1E0DD10D8]();
}

uint64_t WebCore::createTextStream(WebCore *this, const WebCore::RenderView *a2)
{
  return MEMORY[0x1E0DD10E0](this, a2);
}

uint64_t WebCore::enclosingIntRect(WebCore *this, const CGRect *a2)
{
  return MEMORY[0x1E0DD10E8](this, a2);
}

uint64_t WebCore::enclosingIntRect(WebCore *this, const WebCore::LayoutRect *a2)
{
  return MEMORY[0x1E0DD10F0](this, a2);
}

uint64_t WebCore::enclosingIntRect(WebCore *this, const FloatRect *a2)
{
  return MEMORY[0x1E0DD10F8](this, a2);
}

uint64_t WebCore::findIntersection(WebCore *this, const WebCore::FloatPoint *a2, const WebCore::FloatPoint *a3, const WebCore::FloatPoint *a4, const WebCore::FloatPoint *a5, WebCore::FloatPoint *a6)
{
  return MEMORY[0x1E0DD1100](this, a2, a3, a4, a5, a6);
}

uint64_t WebCore::screenColorSpace(WebCore *this, WebCore::Widget *a2)
{
  return MEMORY[0x1E0DD1118](this, a2);
}

uint64_t WebCore::startOfParagraph()
{
  return MEMORY[0x1E0DD1120]();
}

uint64_t WebCore::systemHasBattery(WebCore *this)
{
  return MEMORY[0x1E0DD1128](this);
}

uint64_t WebCore::toCAFillModeType()
{
  return MEMORY[0x1E0DD1130]();
}

uint64_t WebCore::AcceleratedEffect::apply()
{
  return MEMORY[0x1E0DD1138]();
}

uint64_t WebCore::AcceleratedEffect::create()
{
  return MEMORY[0x1E0DD1140]();
}

uint64_t WebCore::AcceleratedEffect::Keyframe::Keyframe()
{
  return MEMORY[0x1E0DD1148]();
}

uint64_t WebCore::BasicShapeEllipse::create()
{
  return MEMORY[0x1E0DD1150]();
}

uint64_t WebCore::BasicShapePolygon::create()
{
  return MEMORY[0x1E0DD1158]();
}

uint64_t WebCore::ContentExtensions::parseRuleList(WebCore::ContentExtensions *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD1160](this, a2);
}

uint64_t WebCore::ContentExtensions::URLFilterParser::addPattern()
{
  return MEMORY[0x1E0DD1168]();
}

uint64_t WebCore::ContentExtensions::URLFilterParser::URLFilterParser()
{
  return MEMORY[0x1E0DD1170]();
}

void WebCore::ContentExtensions::URLFilterParser::~URLFilterParser(WebCore::ContentExtensions::URLFilterParser *this)
{
  MEMORY[0x1E0DD1178](this);
}

uint64_t WebCore::ContentExtensions::compileRuleList()
{
  return MEMORY[0x1E0DD1180]();
}

uint64_t WebCore::ContentExtensions::CombinedURLFilters::CombinedURLFilters(WebCore::ContentExtensions::CombinedURLFilters *this)
{
  return MEMORY[0x1E0DD1188](this);
}

void WebCore::ContentExtensions::CombinedURLFilters::~CombinedURLFilters(WebCore::ContentExtensions::CombinedURLFilters *this)
{
  MEMORY[0x1E0DD1190](this);
}

uint64_t WebCore::ContentExtensions::ContentExtensionRule::ContentExtensionRule()
{
  return MEMORY[0x1E0DD1198]();
}

uint64_t WebCore::ContentExtensions::applyResultsToRequest()
{
  return MEMORY[0x1E0DD11A0]();
}

void WebCore::ContentExtensions::CompiledContentExtension::~CompiledContentExtension(WebCore::ContentExtensions::CompiledContentExtension *this)
{
  MEMORY[0x1E0DD11A8](this);
}

uint64_t WebCore::ContentExtensions::ContentExtensionsBackend::shouldBeMadeSecure(WebCore::ContentExtensions::ContentExtensionsBackend *this, const WTF::URL *a2)
{
  return MEMORY[0x1E0DD11B0](this, a2);
}

uint64_t WebCore::ContentExtensions::ContentExtensionsBackend::addContentExtension()
{
  return MEMORY[0x1E0DD11B8]();
}

uint64_t WebCore::ContentExtensions::ContentExtensionsBackend::removeContentExtension(WebCore::ContentExtensions::ContentExtensionsBackend *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD11C0](this, a2);
}

uint64_t WebCore::ContentExtensions::ContentExtensionsBackend::removeAllContentExtensions(WebCore::ContentExtensions::ContentExtensionsBackend *this)
{
  return MEMORY[0x1E0DD11C8](this);
}

uint64_t WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForPingLoad(WebCore::ContentExtensions::ContentExtensionsBackend *this, const WTF::URL *a2, const WTF::URL *a3, const WTF::URL *a4)
{
  return MEMORY[0x1E0DD11D0](this, a2, a3, a4);
}

uint64_t WebCore::CredentialStorage::clearCredentials(WebCore::CredentialStorage *this)
{
  return MEMORY[0x1E0DD11D8](this);
}

uint64_t WebCore::CredentialStorage::removeCredentialsWithOrigin(WebCore::CredentialStorage *this, const WebCore::SecurityOriginData *a2)
{
  return MEMORY[0x1E0DD11E8](this, a2);
}

uint64_t WebCore::CredentialStorage::get(WebCore::CredentialStorage *this, const WTF::String *a2, const WTF::URL *a3)
{
  return MEMORY[0x1E0DD11F0](this, a2, a3);
}

uint64_t WebCore::CredentialStorage::get(WebCore::CredentialStorage *this, const WTF::String *a2, const WebCore::ProtectionSpace *a3)
{
  return MEMORY[0x1E0DD11F8](this, a2, a3);
}

uint64_t WebCore::CredentialStorage::set(WebCore::CredentialStorage *this, const WTF::String *a2, const WebCore::Credential *a3, const WTF::URL *a4)
{
  return MEMORY[0x1E0DD1200](this, a2, a3, a4);
}

uint64_t WebCore::CredentialStorage::set(WebCore::CredentialStorage *this, const WTF::String *a2, const WebCore::Credential *a3, const WebCore::ProtectionSpace *a4, const WTF::URL *a5)
{
  return MEMORY[0x1E0DD1208](this, a2, a3, a4, a5);
}

uint64_t WebCore::CredentialStorage::remove(WebCore::CredentialStorage *this, const WTF::String *a2, const WebCore::ProtectionSpace *a3)
{
  return MEMORY[0x1E0DD1210](this, a2, a3);
}

uint64_t WebCore::DebugPageOverlays::settingsChanged()
{
  return MEMORY[0x1E0DD1238]();
}

uint64_t WebCore::FEDiffuseLighting::create()
{
  return MEMORY[0x1E0DD1240]();
}

uint64_t WebCore::FEDisplacementMap::create()
{
  return MEMORY[0x1E0DD1248]();
}

uint64_t WebCore::FullscreenManager::cancelFullscreen(WebCore::FullscreenManager *this)
{
  return MEMORY[0x1E0DD1250](this);
}

uint64_t WebCore::FullscreenManager::didExitFullscreen(WebCore::FullscreenManager *this)
{
  return MEMORY[0x1E0DD1258](this);
}

uint64_t WebCore::FullscreenManager::didEnterFullscreen(WebCore::FullscreenManager *this)
{
  return MEMORY[0x1E0DD1260](this);
}

uint64_t WebCore::FullscreenManager::willExitFullscreen(WebCore::FullscreenManager *this)
{
  return MEMORY[0x1E0DD1268](this);
}

uint64_t WebCore::FullscreenManager::willEnterFullscreen()
{
  return MEMORY[0x1E0DD1270]();
}

uint64_t WebCore::FullscreenManager::setAnimatingFullscreen(WebCore::FullscreenManager *this)
{
  return MEMORY[0x1E0DD1278](this);
}

uint64_t WebCore::FullscreenManager::requestFullscreenForElement()
{
  return MEMORY[0x1E0DD1280]();
}

uint64_t WebCore::GraphicsContextCG::clip(WebCore::GraphicsContextCG *this, const FloatRect *a2)
{
  return MEMORY[0x1E0DD1288](this, a2);
}

uint64_t WebCore::GraphicsContextCG::scale(WebCore::GraphicsContextCG *this, const FloatSize *a2)
{
  return MEMORY[0x1E0DD1290](this, a2);
}

uint64_t WebCore::GraphicsContextCG::translate(WebCore::GraphicsContextCG *this, float a2, float a3)
{
  return MEMORY[0x1E0DD1298](this, a2, a3);
}

uint64_t WebCore::GraphicsContextCG::GraphicsContextCG()
{
  return MEMORY[0x1E0DD12A0]();
}

void WebCore::GraphicsContextCG::~GraphicsContextCG(WebCore::GraphicsContextCG *this)
{
  MEMORY[0x1E0DD12A8](this);
}

uint64_t WebCore::GraphicsContextGL::paintToCanvas()
{
  return MEMORY[0x1E0DD12B0]();
}

uint64_t WebCore::GraphicsContextGL::forceContextLost(WebCore::GraphicsContextGL *this)
{
  return MEMORY[0x1E0DD12B8](this);
}

uint64_t WebCore::GraphicsContextGL::computeBytesPerGroup(WebCore::GraphicsContextGL *this)
{
  return MEMORY[0x1E0DD12C0](this);
}

uint64_t WebCore::GraphicsContextGL::Client::Client(WebCore::GraphicsContextGL::Client *this)
{
  return MEMORY[0x1E0DD12C8](this);
}

void WebCore::GraphicsContextGL::Client::~Client(WebCore::GraphicsContextGL::Client *this)
{
  MEMORY[0x1E0DD12D0](this);
}

uint64_t WebCore::GraphicsContextGL::GraphicsContextGL()
{
  return MEMORY[0x1E0DD12D8]();
}

void WebCore::GraphicsContextGL::~GraphicsContextGL(WebCore::GraphicsContextGL *this)
{
  MEMORY[0x1E0DD12E0](this);
}

uint64_t WebCore::HTMLSelectElement::optionSelectedByUser(WebCore::HTMLSelectElement *this)
{
  return MEMORY[0x1E0DD1350](this);
}

uint64_t WebCore::HighlightRegistry::setHighlightVisibility()
{
  return MEMORY[0x1E0DD1390]();
}

uint64_t WebCore::HighlightRegistry::addAnnotationHighlightWithRange()
{
  return MEMORY[0x1E0DD1398]();
}

uint64_t WebCore::HistoryController::setCurrentItem()
{
  return MEMORY[0x1E0DD13A0]();
}

uint64_t WebCore::HistoryController::saveDocumentAndScrollState(WebCore::HistoryController *this)
{
  return MEMORY[0x1E0DD13B0](this);
}

uint64_t WebCore::HistoryController::restoreScrollPositionAndViewState(WebCore::HistoryController *this)
{
  return MEMORY[0x1E0DD13B8](this);
}

uint64_t WebCore::HistoryController::saveScrollPositionAndViewStateToItem(WebCore::HistoryController *this, WebCore::HistoryItem *a2)
{
  return MEMORY[0x1E0DD13C0](this, a2);
}

uint64_t WebCore::KeyframeValueList::insert()
{
  return MEMORY[0x1E0DD13D0]();
}

uint64_t WebCore::LibWebRTCProvider::setRTCLogging()
{
  return MEMORY[0x1E0DD13D8]();
}

uint64_t WebCore::LibWebRTCProvider::setLoggingLevel()
{
  return MEMORY[0x1E0DD13E0]();
}

uint64_t WebCore::LibWebRTCProvider::hasWebRTCThreads(WebCore::LibWebRTCProvider *this)
{
  return MEMORY[0x1E0DD13E8](this);
}

uint64_t WebCore::LibWebRTCProvider::createPeerConnection()
{
  return MEMORY[0x1E0DD13F0]();
}

uint64_t WebCore::LibWebRTCProvider::callOnWebRTCNetworkThread()
{
  return MEMORY[0x1E0DD13F8]();
}

uint64_t WebCore::LibWebRTCProvider::enableEnumeratingAllNetworkInterfaces(WebCore::LibWebRTCProvider *this)
{
  return MEMORY[0x1E0DD1400](this);
}

uint64_t WebCore::LibWebRTCProvider::enableEnumeratingVisibleNetworkInterfaces(WebCore::LibWebRTCProvider *this)
{
  return MEMORY[0x1E0DD1408](this);
}

uint64_t WebCore::LibWebRTCProvider::LibWebRTCProvider(WebCore::LibWebRTCProvider *this)
{
  return MEMORY[0x1E0DD1410](this);
}

void WebCore::LibWebRTCProvider::~LibWebRTCProvider(WebCore::LibWebRTCProvider *this)
{
  MEMORY[0x1E0DD1418](this);
}

uint64_t WebCore::LinkIconCollector::iconsOfTypes()
{
  return MEMORY[0x1E0DD1420]();
}

uint64_t WebCore::NowPlayingManager::removeClient()
{
  return MEMORY[0x1E0DD1438]();
}

uint64_t WebCore::NowPlayingManager::setNowPlayingInfo()
{
  return MEMORY[0x1E0DD1440]();
}

uint64_t WebCore::NowPlayingManager::setSupportsSeeking(WebCore::NowPlayingManager *this)
{
  return MEMORY[0x1E0DD1448](this);
}

uint64_t WebCore::NowPlayingManager::setSupportedRemoteCommands()
{
  return MEMORY[0x1E0DD1450]();
}

uint64_t WebCore::NowPlayingManager::addClient()
{
  return MEMORY[0x1E0DD1458]();
}

uint64_t WebCore::NowPlayingManager::NowPlayingManager(WebCore::NowPlayingManager *this)
{
  return MEMORY[0x1E0DD1460](this);
}

{
  return MEMORY[0x1E0DD1468](this);
}

void WebCore::NowPlayingManager::~NowPlayingManager(WebCore::NowPlayingManager *this)
{
  MEMORY[0x1E0DD1470](this);
}

uint64_t WebCore::PageConfiguration::PageConfiguration()
{
  return MEMORY[0x1E0DD1478]();
}

void WebCore::PageConfiguration::~PageConfiguration(WebCore::PageConfiguration *this)
{
  MEMORY[0x1E0DD1480](this);
}

uint64_t WebCore::PlatformCAFilters::setFiltersOnLayer()
{
  return MEMORY[0x1E0DD1498]();
}

uint64_t WebCore::PlatformCAFilters::filterValueForOperation(WebCore::PlatformCAFilters *this, const WebCore::FilterOperation *a2)
{
  return MEMORY[0x1E0DD14A0](this, a2);
}

uint64_t WebCore::PlatformCAFilters::setBlendingFiltersOnLayer()
{
  return MEMORY[0x1E0DD14A8]();
}

uint64_t WebCore::PublicSuffixStore::addPublicSuffix()
{
  return MEMORY[0x1E0DD14B0]();
}

uint64_t WebCore::PublicSuffixStore::enablePublicSuffixCache(WebCore::PublicSuffixStore *this)
{
  return MEMORY[0x1E0DD14B8](this);
}

uint64_t WebCore::PublicSuffixStore::singleton(WebCore::PublicSuffixStore *this)
{
  return MEMORY[0x1E0DD14C0](this);
}

uint64_t WebCore::ResourceErrorBase::setType()
{
  return MEMORY[0x1E0DD14C8]();
}

uint64_t WebCore::SQLiteTransaction::begin(WebCore::SQLiteTransaction *this)
{
  return MEMORY[0x1E0DD14D0](this);
}

uint64_t WebCore::SQLiteTransaction::commit(WebCore::SQLiteTransaction *this)
{
  return MEMORY[0x1E0DD14D8](this);
}

uint64_t WebCore::SQLiteTransaction::rollback(WebCore::SQLiteTransaction *this)
{
  return MEMORY[0x1E0DD14E0](this);
}

uint64_t WebCore::SQLiteTransaction::SQLiteTransaction(WebCore::SQLiteTransaction *this, WebCore::SQLiteDatabase *a2)
{
  return MEMORY[0x1E0DD14E8](this, a2);
}

void WebCore::SQLiteTransaction::~SQLiteTransaction(WebCore::SQLiteTransaction *this)
{
  MEMORY[0x1E0DD14F0](this);
}

uint64_t WebCore::SelectionGeometry::setQuad(WebCore::SelectionGeometry *this, const FloatQuad *a2)
{
  return MEMORY[0x1E0DD14F8](this, a2);
}

uint64_t WebCore::SelectionGeometry::setRect(WebCore::SelectionGeometry *this, const IntRect *a2)
{
  return MEMORY[0x1E0DD1500](this, a2);
}

uint64_t WebCore::SelectionGeometry::SelectionGeometry()
{
  return MEMORY[0x1E0DD1508]();
}

uint64_t WebCore::ShareableResource::createHandle(WebCore::ShareableResource *this)
{
  return MEMORY[0x1E0DD1510](this);
}

uint64_t WebCore::ShareableResource::create()
{
  return MEMORY[0x1E0DD1518]();
}

void WebCore::ShareableResource::~ShareableResource(WebCore::ShareableResource *this)
{
  MEMORY[0x1E0DD1520](this);
}

uint64_t WebCore::SubresourceLoader::create()
{
  return MEMORY[0x1E0DD1528]();
}

uint64_t WebCore::WorkerGlobalScope::fileSystemStorageConnection(WebCore::WorkerGlobalScope *this)
{
  return MEMORY[0x1E0DD1540](this);
}

uint64_t WebCore::cachedSystemHasAC(WebCore *this)
{
  return MEMORY[0x1E0DD1548](this);
}

uint64_t WebCore::certificatesMatch(WebCore *this, __SecTrust *a2, __SecTrust *a3)
{
  return MEMORY[0x1E0DD1550](this, a2, a3);
}

uint64_t WebCore::computeCurrentAge()
{
  return MEMORY[0x1E0DD1558]();
}

uint64_t WebCore::euclidianDistance(WebCore *this, const WebCore::FloatPoint *a2, const WebCore::FloatPoint *a3)
{
  return MEMORY[0x1E0DD1560](this, a2, a3);
}

uint64_t WebCore::makeBoundaryPoint()
{
  return MEMORY[0x1E0DD1570]();
}

{
  return MEMORY[0x1E0DD1578]();
}

uint64_t WebCore::sRGBColorSpaceRef(WebCore *this)
{
  return MEMORY[0x1E0DD1580](this);
}

uint64_t WebCore::screenScaleFactor(WebCore *this, UIScreen *a2)
{
  return MEMORY[0x1E0DD1588](this, a2);
}

uint64_t WebCore::snapshotFrameRect()
{
  return MEMORY[0x1E0DD1598]();
}

uint64_t WebCore::snapshotSelection()
{
  return MEMORY[0x1E0DD15A0]();
}

uint64_t WebCore::ApplePayButtonPart::create()
{
  return MEMORY[0x1E0DD15A8]();
}

uint64_t WebCore::DOMWindowExtension::DOMWindowExtension(WebCore::DOMWindowExtension *this, WebCore::LocalDOMWindow *a2, WebCore::DOMWrapperWorld *a3)
{
  return MEMORY[0x1E0DD15B8](this, a2, a3);
}

void WebCore::DOMWindowExtension::~DOMWindowExtension(WebCore::DOMWindowExtension *this)
{
  MEMORY[0x1E0DD15C0](this);
}

uint64_t WebCore::DistantLightSource::create(WebCore::DistantLightSource *this, float a2, float a3)
{
  return MEMORY[0x1E0DD15C8](this, a2, a3);
}

uint64_t WebCore::EventRegionContext::unite()
{
  return MEMORY[0x1E0DD15D8]();
}

uint64_t WebCore::EventRegionContext::EventRegionContext(WebCore::EventRegionContext *this, WebCore::EventRegion *a2)
{
  return MEMORY[0x1E0DD15E0](this, a2);
}

void WebCore::EventRegionContext::~EventRegionContext(WebCore::EventRegionContext *this)
{
  MEMORY[0x1E0DD15E8](this);
}

uint64_t WebCore::FESpecularLighting::create()
{
  return MEMORY[0x1E0DD15F0]();
}

uint64_t WebCore::IDBObjectStoreInfo::IDBObjectStoreInfo(WebCore::IDBObjectStoreInfo *this)
{
  return MEMORY[0x1E0DD1620](this);
}

uint64_t WebCore::IDBObjectStoreInfo::IDBObjectStoreInfo()
{
  return MEMORY[0x1E0DD1628]();
}

uint64_t WebCore::IDBOpenRequestData::IDBOpenRequestData()
{
  return MEMORY[0x1E0DD1630]();
}

uint64_t WebCore::ImageAnalysisQueue::enqueueAllImagesIfNeeded(WebCore::ImageAnalysisQueue *this, Document *a2, const WTF::String *a3, const WTF::String *a4)
{
  return MEMORY[0x1E0DD1638](this, a2, a3, a4);
}

uint64_t WebCore::ImageAnalysisQueue::clearDidBecomeEmptyCallback(WebCore::ImageAnalysisQueue *this)
{
  return MEMORY[0x1E0DD1640](this);
}

uint64_t WebCore::ImageBufferBackend::getPixelBuffer(WebCore::ImageBufferBackend *this, const IntRect *a2, const unsigned __int8 *a3, WebCore::PixelBuffer *a4)
{
  return MEMORY[0x1E0DD1648](this, a2, a3, a4);
}

uint64_t WebCore::ImageBufferBackend::putPixelBuffer()
{
  return MEMORY[0x1E0DD1650]();
}

uint64_t WebCore::ImageBufferBackend::calculateMemoryCost(WebCore::ImageBufferBackend *this, const IntSize *a2)
{
  return MEMORY[0x1E0DD1658](this, a2);
}

uint64_t WebCore::ImageBufferBackend::calculateBaseTransform()
{
  return MEMORY[0x1E0DD1660]();
}

uint64_t WebCore::ImageBufferBackend::ImageBufferBackend()
{
  return MEMORY[0x1E0DD1668]();
}

void WebCore::ImageBufferBackend::~ImageBufferBackend(WebCore::ImageBufferBackend *this)
{
  MEMORY[0x1E0DD1670](this);
}

uint64_t WebCore::InspectorPageAgent::frameId()
{
  return MEMORY[0x1E0DD1678]();
}

uint64_t WebCore::MediaSessionHelper::removeClient()
{
  return MEMORY[0x1E0DD1680]();
}

uint64_t WebCore::MediaSessionHelper::sharedHelper(WebCore::MediaSessionHelper *this)
{
  return MEMORY[0x1E0DD1688](this);
}

uint64_t WebCore::MediaSessionHelper::setSharedHelper()
{
  return MEMORY[0x1E0DD1690]();
}

uint64_t WebCore::MediaSessionHelper::resetSharedHelper(WebCore::MediaSessionHelper *this)
{
  return MEMORY[0x1E0DD1698](this);
}

uint64_t WebCore::MediaSessionHelper::activeAudioRouteDidChange()
{
  return MEMORY[0x1E0DD16A0]();
}

uint64_t WebCore::MediaSessionHelper::activeVideoRouteDidChange()
{
  return MEMORY[0x1E0DD16A8]();
}

uint64_t WebCore::MediaSessionHelper::applicationDidBecomeActive(WebCore::MediaSessionHelper *this)
{
  return MEMORY[0x1E0DD16B0](this);
}

uint64_t WebCore::MediaSessionHelper::stopMonitoringWirelessRoutes(WebCore::MediaSessionHelper *this)
{
  return MEMORY[0x1E0DD16B8](this);
}

uint64_t WebCore::MediaSessionHelper::applicationDidEnterBackground()
{
  return MEMORY[0x1E0DD16C0]();
}

uint64_t WebCore::MediaSessionHelper::applicationWillBecomeInactive(WebCore::MediaSessionHelper *this)
{
  return MEMORY[0x1E0DD16C8](this);
}

uint64_t WebCore::MediaSessionHelper::startMonitoringWirelessRoutes(WebCore::MediaSessionHelper *this)
{
  return MEMORY[0x1E0DD16D0](this);
}

uint64_t WebCore::MediaSessionHelper::applicationWillEnterForeground()
{
  return MEMORY[0x1E0DD16D8]();
}

uint64_t WebCore::MediaSessionHelper::externalOutputDeviceAvailableDidChange()
{
  return MEMORY[0x1E0DD16E0]();
}

uint64_t WebCore::MediaSessionHelper::isPlayingToAutomotiveHeadUnitDidChange()
{
  return MEMORY[0x1E0DD16E8]();
}

uint64_t WebCore::MediaSessionHelper::activeAudioRouteSupportsSpatialPlaybackDidChange()
{
  return MEMORY[0x1E0DD16F0]();
}

uint64_t WebCore::MediaSessionHelper::addClient()
{
  return MEMORY[0x1E0DD16F8]();
}

uint64_t WebCore::MediaSourcePrivate::bufferedChanged()
{
  return MEMORY[0x1E0DD1700]();
}

uint64_t WebCore::MediaSourcePrivate::durationChanged(WebCore::MediaSourcePrivate *this, const WTF::MediaTime *a2)
{
  return MEMORY[0x1E0DD1708](this, a2);
}

uint64_t WebCore::MediaSourcePrivate::MediaSourcePrivate()
{
  return MEMORY[0x1E0DD1710]();
}

void WebCore::MediaSourcePrivate::~MediaSourcePrivate(WebCore::MediaSourcePrivate *this)
{
  MEMORY[0x1E0DD1718](this);
}

void WebCore::MediaStreamPrivate::~MediaStreamPrivate(WebCore::MediaStreamPrivate *this)
{
  MEMORY[0x1E0DD1720](this);
}

uint64_t WebCore::MessagePortChannel::processForPort()
{
  return MEMORY[0x1E0DD1728]();
}

void WebCore::MessagePortChannel::~MessagePortChannel(WebCore::MessagePortChannel *this)
{
  MEMORY[0x1E0DD1730](this);
}

uint64_t WebCore::NativeImageBackend::NativeImageBackend(WebCore::NativeImageBackend *this)
{
  return MEMORY[0x1E0DD1738](this);
}

void WebCore::NativeImageBackend::~NativeImageBackend(WebCore::NativeImageBackend *this)
{
  MEMORY[0x1E0DD1740](this);
}

uint64_t WebCore::NetworkLoadMetrics::emptyMetrics(WebCore::NetworkLoadMetrics *this)
{
  return MEMORY[0x1E0DD1748](this);
}

uint64_t WebCore::NetworkLoadMetrics::NetworkLoadMetrics()
{
  return MEMORY[0x1E0DD1750]();
}

uint64_t WebCore::NetworkLoadMetrics::NetworkLoadMetrics(WebCore::NetworkLoadMetrics *this)
{
  return MEMORY[0x1E0DD1758](this);
}

uint64_t WebCore::ParsedContentRange::ParsedContentRange(WebCore::ParsedContentRange *this)
{
  return MEMORY[0x1E0DD1760](this);
}

uint64_t WebCore::PaymentCoordinator::validateMerchant()
{
  return MEMORY[0x1E0DD1768]();
}

uint64_t WebCore::PaymentCoordinator::didAuthorizePayment()
{
  return MEMORY[0x1E0DD1770]();
}

uint64_t WebCore::PaymentCoordinator::didChangeCouponCode()
{
  return MEMORY[0x1E0DD1778]();
}

uint64_t WebCore::PaymentCoordinator::didSelectPaymentMethod(WebCore::PaymentCoordinator *this, const WebCore::PaymentMethod *a2)
{
  return MEMORY[0x1E0DD1780](this, a2);
}

uint64_t WebCore::PaymentCoordinator::didCancelPaymentSession()
{
  return MEMORY[0x1E0DD1788]();
}

uint64_t WebCore::PaymentCoordinator::didSelectShippingMethod()
{
  return MEMORY[0x1E0DD1790]();
}

uint64_t WebCore::PaymentCoordinator::didSelectShippingContact(WebCore::PaymentCoordinator *this, const WebCore::PaymentContact *a2)
{
  return MEMORY[0x1E0DD1798](this, a2);
}

uint64_t WebCore::PerformanceLogging::memoryUsageStatistics()
{
  return MEMORY[0x1E0DD17A0]();
}

uint64_t WebCore::PerformanceLogging::javaScriptObjectCounts(WebCore::PerformanceLogging *this)
{
  return MEMORY[0x1E0DD17A8](this);
}

uint64_t WebCore::PlatformPasteboard::setBufferForType(WebCore::PlatformPasteboard *this, WebCore::SharedBuffer *a2, const WTF::String *a3)
{
  return MEMORY[0x1E0DD17B0](this, a2, a3);
}

uint64_t WebCore::PlatformPasteboard::setStringForType(WebCore::PlatformPasteboard *this, const WTF::String *a2, const WTF::String *a3)
{
  return MEMORY[0x1E0DD17B8](this, a2, a3);
}

uint64_t WebCore::PlatformPasteboard::performAsDataOwner()
{
  return MEMORY[0x1E0DD17C0]();
}

uint64_t WebCore::PlatformPasteboard::allPasteboardItemInfo(WebCore::PlatformPasteboard *this)
{
  return MEMORY[0x1E0DD17C8](this);
}

uint64_t WebCore::PlatformPasteboard::informationForItemAtIndex(WebCore::PlatformPasteboard *this)
{
  return MEMORY[0x1E0DD17D0](this);
}

uint64_t WebCore::PlatformPasteboard::urlStringSuitableForLoading(WebCore::PlatformPasteboard *this, WTF::String *a2)
{
  return MEMORY[0x1E0DD17D8](this, a2);
}

uint64_t WebCore::PlatformPasteboard::updateSupportedTypeIdentifiers()
{
  return MEMORY[0x1E0DD17E0]();
}

uint64_t WebCore::PlatformPasteboard::containsURLStringSuitableForLoading(WebCore::PlatformPasteboard *this)
{
  return MEMORY[0x1E0DD17E8](this);
}

uint64_t WebCore::PlatformPasteboard::url(WebCore::PlatformPasteboard *this)
{
  return MEMORY[0x1E0DD17F0](this);
}

uint64_t WebCore::PlatformPasteboard::color(WebCore::PlatformPasteboard *this)
{
  return MEMORY[0x1E0DD17F8](this);
}

uint64_t WebCore::PlatformPasteboard::write(WebCore::PlatformPasteboard *this, const WTF::String *a2, const WTF::String *a3)
{
  return MEMORY[0x1E0DD1800](this, a2, a3);
}

uint64_t WebCore::PlatformPasteboard::write()
{
  return MEMORY[0x1E0DD1808]();
}

{
  return MEMORY[0x1E0DD1810]();
}

{
  return MEMORY[0x1E0DD1818]();
}

{
  return MEMORY[0x1E0DD1820]();
}

uint64_t WebCore::PlatformPasteboard::setURL()
{
  return MEMORY[0x1E0DD1828]();
}

uint64_t WebCore::PlatformPasteboard::addTypes()
{
  return MEMORY[0x1E0DD1830]();
}

uint64_t WebCore::PlatformPasteboard::setColor(WebCore::PlatformPasteboard *this, const Color *a2)
{
  return MEMORY[0x1E0DD1838](this, a2);
}

uint64_t WebCore::PlatformPasteboard::setTypes()
{
  return MEMORY[0x1E0DD1840]();
}

uint64_t WebCore::PlatformPasteboard::PlatformPasteboard(WebCore::PlatformPasteboard *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD1848](this, a2);
}

uint64_t WebCore::PlatformTimeRanges::timeFudgeFactor(WebCore::PlatformTimeRanges *this)
{
  return MEMORY[0x1E0DD1850](this);
}

uint64_t WebCore::PlatformTimeRanges::PlatformTimeRanges()
{
  return MEMORY[0x1E0DD1858]();
}

uint64_t WebCore::PlatformTimeRanges::PlatformTimeRanges(WebCore::PlatformTimeRanges *this)
{
  return MEMORY[0x1E0DD1860](this);
}

void WebCore::PluginInfoProvider::~PluginInfoProvider(WebCore::PluginInfoProvider *this)
{
  MEMORY[0x1E0DD1868](this);
}

uint64_t WebCore::SWClientConnection::clearPendingJobs(WebCore::SWClientConnection *this)
{
  return MEMORY[0x1E0DD1870](this);
}

uint64_t WebCore::SWClientConnection::updateWorkerState()
{
  return MEMORY[0x1E0DD1878]();
}

uint64_t WebCore::SWClientConnection::jobRejectedInServer()
{
  return MEMORY[0x1E0DD1880]();
}

uint64_t WebCore::SWClientConnection::fireUpdateFoundEvent()
{
  return MEMORY[0x1E0DD1888]();
}

uint64_t WebCore::SWClientConnection::updateRegistrationState()
{
  return MEMORY[0x1E0DD1890]();
}

uint64_t WebCore::SWClientConnection::startScriptFetchForServer()
{
  return MEMORY[0x1E0DD1898]();
}

uint64_t WebCore::SWClientConnection::registerServiceWorkerClients(WebCore::SWClientConnection *this)
{
  return MEMORY[0x1E0DD18A0](this);
}

uint64_t WebCore::SWClientConnection::setRegistrationLastUpdateTime()
{
  return MEMORY[0x1E0DD18A8]();
}

uint64_t WebCore::SWClientConnection::setRegistrationUpdateViaCache()
{
  return MEMORY[0x1E0DD18B0]();
}

uint64_t WebCore::SWClientConnection::notifyClientsOfControllerChange()
{
  return MEMORY[0x1E0DD18B8]();
}

uint64_t WebCore::SWClientConnection::registrationJobResolvedInServer()
{
  return MEMORY[0x1E0DD18C0]();
}

uint64_t WebCore::SWClientConnection::postMessageToServiceWorkerClient()
{
  return MEMORY[0x1E0DD18C8]();
}

uint64_t WebCore::SWClientConnection::updateBackgroundFetchRegistration()
{
  return MEMORY[0x1E0DD18D0]();
}

uint64_t WebCore::SWClientConnection::SWClientConnection(WebCore::SWClientConnection *this)
{
  return MEMORY[0x1E0DD18D8](this);
}

void WebCore::SWClientConnection::~SWClientConnection(WebCore::SWClientConnection *this)
{
  MEMORY[0x1E0DD18E0](this);
}

uint64_t WebCore::ScrollingStateNode::setLayer()
{
  return MEMORY[0x1E0DD18E8]();
}

uint64_t WebCore::ScrollingStateTree::attachDeserializedNodes(WebCore::ScrollingStateTree *this)
{
  return MEMORY[0x1E0DD18F0](this);
}

uint64_t WebCore::ScrollingStateTree::createAfterReconstruction()
{
  return MEMORY[0x1E0DD18F8]();
}

uint64_t WebCore::ScrollingStateTree::commit()
{
  return MEMORY[0x1E0DD1900]();
}

uint64_t WebCore::ScrollingStateTree::ScrollingStateTree()
{
  return MEMORY[0x1E0DD1908]();
}

uint64_t WebCore::ScrollingStateTree::ScrollingStateTree(WebCore::ScrollingStateTree *this, WebCore::AsyncScrollingCoordinator *a2)
{
  return MEMORY[0x1E0DD1910](this, a2);
}

void WebCore::ScrollingStateTree::~ScrollingStateTree(WebCore::ScrollingStateTree *this)
{
  MEMORY[0x1E0DD1918](this);
}

uint64_t WebCore::SecurityOriginData::fromDatabaseIdentifier()
{
  return MEMORY[0x1E0DD1920]();
}

uint64_t WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness(WebCore::SecurityOriginData *this, const WTF::URL *a2)
{
  return MEMORY[0x1E0DD1928](this, a2);
}

uint64_t WebCore::SecurityOriginData::fromURL(WebCore::SecurityOriginData *this, const WTF::URL *a2)
{
  return MEMORY[0x1E0DD1930](this, a2);
}

uint64_t WebCore::SecurityOriginData::fromFrame(WebCore::SecurityOriginData *this, WebCore::LocalFrame *a2)
{
  return MEMORY[0x1E0DD1938](this, a2);
}

uint64_t WebCore::SharedMemoryHandle::SharedMemoryHandle()
{
  return MEMORY[0x1E0DD1940]();
}

void WebCore::StyleSheetContents::~StyleSheetContents(WebCore::StyleSheetContents *this)
{
  MEMORY[0x1E0DD1948](this);
}

uint64_t WebCore::SystemSoundManager::setSystemSoundDelegate()
{
  return MEMORY[0x1E0DD1950]();
}

uint64_t WebCore::SystemSoundManager::singleton(WebCore::SystemSoundManager *this)
{
  return MEMORY[0x1E0DD1958](this);
}

uint64_t WebCore::WebAudioBufferList::setSampleCount(WebCore::WebAudioBufferList *this)
{
  return MEMORY[0x1E0DD1960](this);
}

uint64_t WebCore::WebAudioBufferList::zeroFlatBuffer(WebCore::WebAudioBufferList *this)
{
  return MEMORY[0x1E0DD1968](this);
}

uint64_t WebCore::WebAudioBufferList::isSupportedDescription()
{
  return MEMORY[0x1E0DD1970]();
}

uint64_t WebCore::WebAudioBufferList::WebAudioBufferList()
{
  return MEMORY[0x1E0DD1978]();
}

{
  return MEMORY[0x1E0DD1980]();
}

uint64_t WebCore::WebRTCVideoDecoder::createFromLocalDecoder(WebCore::WebRTCVideoDecoder *this, void *a2)
{
  return MEMORY[0x1E0DD1988](this, a2);
}

uint64_t WebCore::WorkerScriptLoader::validateWorkerResponse()
{
  return MEMORY[0x1E0DD19B8]();
}

uint64_t WebCore::WorkerScriptLoader::ServiceWorkerDataManager::setData()
{
  return MEMORY[0x1E0DD19C0]();
}

void WebCore::WorkerScriptLoader::ServiceWorkerDataManager::~ServiceWorkerDataManager(WebCore::WorkerScriptLoader::ServiceWorkerDataManager *this)
{
  MEMORY[0x1E0DD19C8](this);
}

uint64_t WebCore::WorkerScriptLoader::serviceWorkerDataManagerFromIdentifier()
{
  return MEMORY[0x1E0DD19D0]();
}

uint64_t WebCore::buildUserEntityMap()
{
  return MEMORY[0x1E0DD19D8]();
}

uint64_t WebCore::makeNSArrayElement(WebCore *this, const IntRect *a2)
{
  return MEMORY[0x1E0DD19F0](this, a2);
}

uint64_t WebCore::osNameForUserAgent(WebCore *this)
{
  return MEMORY[0x1E0DD1A00](this);
}

uint64_t WebCore::overrideScreenSize(WebCore *this)
{
  return MEMORY[0x1E0DD1A08](this);
}

uint64_t WebCore::platformStrategies(WebCore *this)
{
  return MEMORY[0x1E0DD1A10](this);
}

uint64_t WebCore::provideUserMediaTo()
{
  return MEMORY[0x1E0DD1A18]();
}

uint64_t WebCore::setViewportFeature()
{
  return MEMORY[0x1E0DD1A20]();
}

uint64_t WebCore::AccessibilityObject::computedLabel(WebCore::AccessibilityObject *this)
{
  return MEMORY[0x1E0DD1A28](this);
}

uint64_t WebCore::AccessibilityObject::isARIAControl()
{
  return MEMORY[0x1E0DD1A30]();
}

uint64_t WebCore::AccessibilityObject::ariaRoleToWebCoreRole(WebCore::AccessibilityObject *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD1A38](this, a2);
}

uint64_t WebCore::AppHighlightStorage::storeAppHighlight()
{
  return MEMORY[0x1E0DD1A40]();
}

uint64_t WebCore::AppHighlightStorage::restoreAndScrollToAppHighlight()
{
  return MEMORY[0x1E0DD1A48]();
}

uint64_t WebCore::CoreAudioSharedUnit::unit(WebCore::CoreAudioSharedUnit *this)
{
  return MEMORY[0x1E0DD1A50](this);
}

uint64_t WebCore::DOMTimerHoldingTank::removeAll(WebCore::DOMTimerHoldingTank *this)
{
  return MEMORY[0x1E0DD1A58](this);
}

void WebCore::DetachedImageBitmap::~DetachedImageBitmap(WebCore::DetachedImageBitmap *this)
{
  MEMORY[0x1E0DD1A68](this);
}

uint64_t WebCore::FEComponentTransfer::create()
{
  return MEMORY[0x1E0DD1A70]();
}

uint64_t WebCore::ImageDecoderAVFObjC::clearFrameBufferCache(WebCore::ImageDecoderAVFObjC *this)
{
  return MEMORY[0x1E0DD1AB8](this);
}

uint64_t WebCore::ImageDecoderAVFObjC::setExpectedContentSize(WebCore::ImageDecoderAVFObjC *this)
{
  return MEMORY[0x1E0DD1AC0](this);
}

uint64_t WebCore::ImageDecoderAVFObjC::createFrameImageAtIndex()
{
  return MEMORY[0x1E0DD1AC8]();
}

uint64_t WebCore::ImageDecoderAVFObjC::setEncodedDataStatusChangeCallback()
{
  return MEMORY[0x1E0DD1AD0]();
}

uint64_t WebCore::ImageDecoderAVFObjC::create()
{
  return MEMORY[0x1E0DD1AD8]();
}

uint64_t WebCore::ImageDecoderAVFObjC::setData()
{
  return MEMORY[0x1E0DD1AE0]();
}

uint64_t WebCore::InspectorController::setIndicating(WebCore::InspectorController *this)
{
  return MEMORY[0x1E0DD1AF0](this);
}

uint64_t WebCore::InspectorController::connectFrontend()
{
  return MEMORY[0x1E0DD1AF8]();
}

uint64_t WebCore::InspectorController::ensurePageAgent(WebCore::InspectorController *this)
{
  return MEMORY[0x1E0DD1B00](this);
}

uint64_t WebCore::InspectorController::disconnectFrontend()
{
  return MEMORY[0x1E0DD1B08]();
}

uint64_t WebCore::InspectorController::disconnectAllFrontends(WebCore::InspectorController *this)
{
  return MEMORY[0x1E0DD1B10](this);
}

uint64_t WebCore::InspectorController::evaluateForTestInFrontend(WebCore::InspectorController *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD1B18](this, a2);
}

uint64_t WebCore::InspectorController::setInspectorFrontendClient()
{
  return MEMORY[0x1E0DD1B20]();
}

uint64_t WebCore::InspectorController::dispatchMessageFromFrontend(WebCore::InspectorController *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD1B28](this, a2);
}

uint64_t WebCore::InspectorController::show(WebCore::InspectorController *this)
{
  return MEMORY[0x1E0DD1B30](this);
}

uint64_t WebCore::LayerRepresentation::retainPlatformLayer(WebCore::LayerRepresentation *this, void *a2)
{
  return MEMORY[0x1E0DD1B40](this, a2);
}

uint64_t WebCore::LayerRepresentation::releasePlatformLayer(WebCore::LayerRepresentation *this, void *a2)
{
  return MEMORY[0x1E0DD1B48](this, a2);
}

uint64_t WebCore::LayerRepresentation::makePlatformLayerTyped(WebCore::LayerRepresentation *this, void *a2)
{
  return MEMORY[0x1E0DD1B50](this, a2);
}

uint64_t WebCore::LayerRepresentation::makePlatformLayerTypeless(WebCore::LayerRepresentation *this, CALayer *a2)
{
  return MEMORY[0x1E0DD1B58](this, a2);
}

void WebCore::ModelPlayerProvider::~ModelPlayerProvider(WebCore::ModelPlayerProvider *this)
{
  MEMORY[0x1E0DD1B60](this);
}

uint64_t WebCore::NotificationPayload::fromDictionary(WebCore::NotificationPayload *this, NSDictionary *a2)
{
  return MEMORY[0x1E0DD1B68](this, a2);
}

uint64_t WebCore::NotificationPayload::parseJSON(WebCore::NotificationPayload *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD1B70](this, a2);
}

uint64_t WebCore::PaymentSessionError::PaymentSessionError()
{
  return MEMORY[0x1E0DD1B78]();
}

uint64_t WebCore::PlatformCAAnimation::isValidKeyPath()
{
  return MEMORY[0x1E0DD1B80]();
}

uint64_t WebCore::PowerSourceNotifier::PowerSourceNotifier()
{
  return MEMORY[0x1E0DD1B88]();
}

void WebCore::PowerSourceNotifier::~PowerSourceNotifier(WebCore::PowerSourceNotifier *this)
{
  MEMORY[0x1E0DD1B90](this);
}

uint64_t WebCore::ProcessCapabilities::setAVIFDecodingEnabled(WebCore::ProcessCapabilities *this)
{
  return MEMORY[0x1E0DD1B98](this);
}

uint64_t WebCore::ProcessCapabilities::setHEICDecodingEnabled(WebCore::ProcessCapabilities *this)
{
  return MEMORY[0x1E0DD1BA0](this);
}

uint64_t WebCore::ProcessCapabilities::setCanUseAcceleratedBuffers(WebCore::ProcessCapabilities *this)
{
  return MEMORY[0x1E0DD1BA8](this);
}

uint64_t WebCore::ProcessCapabilities::setHardwareAcceleratedDecodingDisabled(WebCore::ProcessCapabilities *this)
{
  return MEMORY[0x1E0DD1BB0](this);
}

uint64_t WebCore::ProtectionSpaceBase::compare(WebCore::ProtectionSpaceBase *this, const WebCore::ProtectionSpace *a2, const WebCore::ProtectionSpace *a3)
{
  return MEMORY[0x1E0DD1BB8](this, a2, a3);
}

uint64_t WebCore::RealtimeMediaSource::addObserver(WebCore::RealtimeMediaSource *this, WebCore::RealtimeMediaSourceObserver *a2)
{
  return MEMORY[0x1E0DD1BC0](this, a2);
}

uint64_t WebCore::RealtimeMediaSource::removeObserver(WebCore::RealtimeMediaSource *this, WebCore::RealtimeMediaSourceObserver *a2)
{
  return MEMORY[0x1E0DD1BC8](this, a2);
}

uint64_t WebCore::RealtimeMediaSource::forEachObserver()
{
  return MEMORY[0x1E0DD1BD0]();
}

uint64_t WebCore::RealtimeMediaSource::setPersistentId(WebCore::RealtimeMediaSource *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD1BD8](this, a2);
}

uint64_t WebCore::RealtimeMediaSource::setIntrinsicSize(WebCore::RealtimeMediaSource *this, const IntSize *a2)
{
  return MEMORY[0x1E0DD1BE0](this, a2);
}

uint64_t WebCore::RealtimeMediaSource::notifyMutedChange(WebCore::RealtimeMediaSource *this)
{
  return MEMORY[0x1E0DD1BE8](this);
}

uint64_t WebCore::RealtimeMediaSource::videoFrameAvailable()
{
  return MEMORY[0x1E0DD1BF0]();
}

uint64_t WebCore::RealtimeMediaSource::addVideoFrameObserver()
{
  return MEMORY[0x1E0DD1BF8]();
}

{
  return MEMORY[0x1E0DD1C00]();
}

uint64_t WebCore::RealtimeMediaSource::audioSamplesAvailable()
{
  return MEMORY[0x1E0DD1C08]();
}

uint64_t WebCore::RealtimeMediaSource::addAudioSampleObserver()
{
  return MEMORY[0x1E0DD1C10]();
}

uint64_t WebCore::RealtimeMediaSource::removeVideoFrameObserver()
{
  return MEMORY[0x1E0DD1C18]();
}

uint64_t WebCore::RealtimeMediaSource::removeAudioSampleObserver()
{
  return MEMORY[0x1E0DD1C20]();
}

uint64_t WebCore::RealtimeMediaSource::extractVideoPresetConstraints()
{
  return MEMORY[0x1E0DD1C28]();
}

uint64_t WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers()
{
  return MEMORY[0x1E0DD1C30]();
}

uint64_t WebCore::RealtimeMediaSource::end(WebCore::RealtimeMediaSource *this, WebCore::RealtimeMediaSourceObserver *a2)
{
  return MEMORY[0x1E0DD1C38](this, a2);
}

uint64_t WebCore::RealtimeMediaSource::stop(WebCore::RealtimeMediaSource *this)
{
  return MEMORY[0x1E0DD1C40](this);
}

uint64_t WebCore::RealtimeMediaSource::start(WebCore::RealtimeMediaSource *this)
{
  return MEMORY[0x1E0DD1C48](this);
}

uint64_t WebCore::RealtimeMediaSource::RealtimeMediaSource()
{
  return MEMORY[0x1E0DD1C50]();
}

void WebCore::RealtimeMediaSource::~RealtimeMediaSource(WebCore::RealtimeMediaSource *this)
{
  MEMORY[0x1E0DD1C58](this);
}

uint64_t WebCore::RequestedScrollData::computeDestinationPosition()
{
  return MEMORY[0x1E0DD1C60]();
}

uint64_t WebCore::ResourceRequestBase::setHTTPBody()
{
  return MEMORY[0x1E0DD1C68]();
}

uint64_t WebCore::ResourceRequestBase::setPriority()
{
  return MEMORY[0x1E0DD1C70]();
}

uint64_t WebCore::ResourceRequestBase::clearPurpose(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1E0DD1C78](this);
}

uint64_t WebCore::ResourceRequestBase::setIsTopSite(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1E0DD1C80](this);
}

uint64_t WebCore::ResourceRequestBase::partitionName(WebCore::ResourceRequestBase *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD1C88](this, a2);
}

uint64_t WebCore::ResourceRequestBase::setHTTPMethod(WebCore::ResourceRequestBase *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD1C90](this, a2);
}

uint64_t WebCore::ResourceRequestBase::setIsSameSite(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1E0DD1C98](this);
}

uint64_t WebCore::ResourceRequestBase::setCachePolicy()
{
  return MEMORY[0x1E0DD1CA0]();
}

uint64_t WebCore::ResourceRequestBase::clearHTTPOrigin(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1E0DD1CA8](this);
}

uint64_t WebCore::ResourceRequestBase::setHTTPReferrer(WebCore::ResourceRequestBase *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD1CB0](this, a2);
}

uint64_t WebCore::ResourceRequestBase::setHTTPUserAgent(WebCore::ResourceRequestBase *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD1CB8](this, a2);
}

uint64_t WebCore::ResourceRequestBase::clearHTTPReferrer(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1E0DD1CC0](this);
}

uint64_t WebCore::ResourceRequestBase::makeUnconditional(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1E0DD1CC8](this);
}

uint64_t WebCore::ResourceRequestBase::removeCredentials(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1E0DD1CD0](this);
}

uint64_t WebCore::ResourceRequestBase::setAsIsolatedCopy(WebCore::ResourceRequestBase *this, const WebCore::ResourceRequest *a2)
{
  return MEMORY[0x1E0DD1CD8](this, a2);
}

uint64_t WebCore::ResourceRequestBase::setCachePartition(WebCore::ResourceRequestBase *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD1CE0](this, a2);
}

uint64_t WebCore::ResourceRequestBase::setIsAppInitiated(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1E0DD1CE8](this);
}

uint64_t WebCore::ResourceRequestBase::addHTTPHeaderField()
{
  return MEMORY[0x1E0DD1CF0]();
}

uint64_t WebCore::ResourceRequestBase::setHTTPHeaderField()
{
  return MEMORY[0x1E0DD1CF8]();
}

uint64_t WebCore::ResourceRequestBase::setHTTPHeaderFields()
{
  return MEMORY[0x1E0DD1D00]();
}

uint64_t WebCore::ResourceRequestBase::clearHTTPAuthorization(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1E0DD1D08](this);
}

uint64_t WebCore::ResourceRequestBase::defaultTimeoutInterval(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1E0DD1D10](this);
}

uint64_t WebCore::ResourceRequestBase::setFirstPartyForCookies(WebCore::ResourceRequestBase *this, const WTF::URL *a2)
{
  return MEMORY[0x1E0DD1D18](this, a2);
}

uint64_t WebCore::ResourceRequestBase::setDefaultTimeoutInterval(WebCore::ResourceRequestBase *this, double a2)
{
  return MEMORY[0x1E0DD1D28](this, a2);
}

uint64_t WebCore::ResourceRequestBase::setExistingHTTPReferrerToOriginString(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1E0DD1D30](this);
}

uint64_t WebCore::SharedBufferBuilder::initialize()
{
  return MEMORY[0x1E0DD1D40]();
}

uint64_t WebCore::SharedBufferBuilder::ensureBuffer(WebCore::SharedBufferBuilder *this)
{
  return MEMORY[0x1E0DD1D48](this);
}

uint64_t WebCore::SharedBufferBuilder::takeAsContiguous(WebCore::SharedBufferBuilder *this)
{
  return MEMORY[0x1E0DD1D50](this);
}

uint64_t WebCore::SharedBufferBuilder::take(WebCore::SharedBufferBuilder *this)
{
  return MEMORY[0x1E0DD1D58](this);
}

uint64_t WebCore::SharedBufferBuilder::SharedBufferBuilder()
{
  return MEMORY[0x1E0DD1D60]();
}

uint64_t WebCore::SourceBufferPrivate::setClient()
{
  return MEMORY[0x1E0DD1D68]();
}

uint64_t WebCore::SourceBufferPrivate::SourceBufferPrivate()
{
  return MEMORY[0x1E0DD1D70]();
}

void WebCore::SourceBufferPrivate::~SourceBufferPrivate(WebCore::SourceBufferPrivate *this)
{
  MEMORY[0x1E0DD1D78](this);
}

uint64_t WebCore::TextResourceDecoder::flush(WebCore::TextResourceDecoder *this)
{
  return MEMORY[0x1E0DD1D88](this);
}

uint64_t WebCore::TextResourceDecoder::create(WebCore::TextResourceDecoder *this, const WTF::String *a2, const PAL::TextEncoding *a3)
{
  return MEMORY[0x1E0DD1D90](this, a2, a3);
}

uint64_t WebCore::TextResourceDecoder::decode()
{
  return MEMORY[0x1E0DD1D98]();
}

void WebCore::TextResourceDecoder::~TextResourceDecoder(WebCore::TextResourceDecoder *this)
{
  MEMORY[0x1E0DD1DA0](this);
}

uint64_t WebCore::TransformOperations::TransformOperations()
{
  return MEMORY[0x1E0DD1DA8]();
}

void WebCore::URLKeepingBlobAlive::~URLKeepingBlobAlive(WebCore::URLKeepingBlobAlive *this)
{
  MEMORY[0x1E0DD1DB0](this);
}

uint64_t WebCore::UserContentProvider::invalidateInjectedStyleSheetCacheInAllFramesInAllPages(WebCore::UserContentProvider *this)
{
  return MEMORY[0x1E0DD1DB8](this);
}

uint64_t WebCore::UserContentProvider::invalidateAllRegisteredUserMessageHandlerInvalidationClients(WebCore::UserContentProvider *this)
{
  return MEMORY[0x1E0DD1DC0](this);
}

uint64_t WebCore::UserContentProvider::UserContentProvider(WebCore::UserContentProvider *this)
{
  return MEMORY[0x1E0DD1DC8](this);
}

void WebCore::UserContentProvider::~UserContentProvider(WebCore::UserContentProvider *this)
{
  MEMORY[0x1E0DD1DD0](this);
}

uint64_t WebCore::VP9TestingOverrides::setVP9DecoderDisabled()
{
  return MEMORY[0x1E0DD1DD8]();
}

uint64_t WebCore::VP9TestingOverrides::setVP9ScreenSizeAndScale()
{
  return MEMORY[0x1E0DD1DE0]();
}

uint64_t WebCore::VP9TestingOverrides::setHardwareDecoderDisabled()
{
  return MEMORY[0x1E0DD1DE8]();
}

uint64_t WebCore::VP9TestingOverrides::resetOverridesToDefaultValues(WebCore::VP9TestingOverrides *this)
{
  return MEMORY[0x1E0DD1DF0](this);
}

uint64_t WebCore::VP9TestingOverrides::setConfigurationChangedCallback()
{
  return MEMORY[0x1E0DD1DF8]();
}

uint64_t WebCore::VP9TestingOverrides::singleton(WebCore::VP9TestingOverrides *this)
{
  return MEMORY[0x1E0DD1E00](this);
}

void WebCore::WebTransportSession::~WebTransportSession(WebCore::WebTransportSession *this)
{
  MEMORY[0x1E0DD1E08](this);
}

uint64_t WebCore::allowableImageTypes(WebCore *this)
{
  return MEMORY[0x1E0DD1E10](this);
}

uint64_t WebCore::availableScreenSize(WebCore *this)
{
  return MEMORY[0x1E0DD1E18](this);
}

uint64_t WebCore::buildAttestationMap()
{
  return MEMORY[0x1E0DD1E20]();
}

uint64_t WebCore::buildClientDataJson()
{
  return MEMORY[0x1E0DD1E28]();
}

uint64_t WebCore::colorFromCocoaColor(WebCore *this, UIColor *a2)
{
  return MEMORY[0x1E0DD1E30](this, a2);
}

uint64_t WebCore::contentSizeCategory(WebCore *this)
{
  return MEMORY[0x1E0DD1E38](this);
}

uint64_t WebCore::copyLocalizedString(WebCore *this, const __CFString *a2)
{
  return MEMORY[0x1E0DD1E40](this, a2);
}

uint64_t WebCore::createAV1VTBDecoder()
{
  return MEMORY[0x1E0DD1E48]();
}

uint64_t WebCore::createCVPixelBuffer(WebCore *this, __IOSurface *a2)
{
  return MEMORY[0x1E0DD1E50](this, a2);
}

uint64_t WebCore::createInternalError()
{
  return MEMORY[0x1E0DD1E58]();
}

uint64_t WebCore::logMemoryStatistics()
{
  return MEMORY[0x1E0DD1E60]();
}

uint64_t WebCore::penPointerEventType(WebCore *this)
{
  return MEMORY[0x1E0DD1E68](this);
}

uint64_t WebCore::provideNotification()
{
  return MEMORY[0x1E0DD1E70]();
}

uint64_t WebCore::serializationForCSS(WebCore *this, const Color *a2)
{
  return MEMORY[0x1E0DD1E78](this, a2);
}

uint64_t WebCore::setScreenProperties()
{
  return MEMORY[0x1E0DD1E80]();
}

uint64_t WebCore::setSystemHasBattery(WebCore *this)
{
  return MEMORY[0x1E0DD1E88](this);
}

uint64_t WebCore::sleepDisablerClient(WebCore *this)
{
  return MEMORY[0x1E0DD1E90](this);
}

uint64_t WebCore::toAutofillFieldName(WebCore *this, const AtomString *a2)
{
  return MEMORY[0x1E0DD1E98](this, a2);
}

uint64_t WebCore::AVAssetMIMETypeCache::addSupportedTypes()
{
  return MEMORY[0x1E0DD1EA8]();
}

uint64_t WebCore::AVAssetMIMETypeCache::singleton(WebCore::AVAssetMIMETypeCache *this)
{
  return MEMORY[0x1E0DD1EB0](this);
}

uint64_t WebCore::ApplePaySetupFeature::supportsFeature()
{
  return MEMORY[0x1E0DD1EB8]();
}

uint64_t WebCore::ApplePaySetupFeature::ApplePaySetupFeature()
{
  return MEMORY[0x1E0DD1EC0]();
}

uint64_t WebCore::ByteArrayPixelBuffer::create()
{
  return MEMORY[0x1E0DD1EC8]();
}

uint64_t WebCore::CanvasActivityRecord::recordWrittenOrMeasuredText(WebCore::CanvasActivityRecord *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD1ED0](this, a2);
}

void WebCore::CaptureDeviceManager::~CaptureDeviceManager(WebCore::CaptureDeviceManager *this)
{
  MEMORY[0x1E0DD1ED8](this);
}

uint64_t WebCore::FontAttributeChanges::FontAttributeChanges()
{
  return MEMORY[0x1E0DD1EE8]();
}

uint64_t WebCore::GraphicsContextState::GraphicsContextState()
{
  return MEMORY[0x1E0DD1EF0]();
}

uint64_t WebCore::ImageBufferAllocator::ImageBufferAllocator(WebCore::ImageBufferAllocator *this)
{
  return MEMORY[0x1E0DD1F10](this);
}

{
  return MEMORY[0x1E0DD1F18](this);
}

void WebCore::ImageBufferCGBackend::~ImageBufferCGBackend(WebCore::ImageBufferCGBackend *this)
{
  MEMORY[0x1E0DD1F20](this);
}

uint64_t WebCore::LegacySchemeRegistry::isBuiltinScheme(WebCore::LegacySchemeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD1F28](this, a2);
}

uint64_t WebCore::LegacySchemeRegistry::registerURLSchemeAsLocal(WebCore::LegacySchemeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD1F30](this, a2);
}

uint64_t WebCore::LegacySchemeRegistry::registerURLSchemeAsSecure(WebCore::LegacySchemeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD1F38](this, a2);
}

uint64_t WebCore::LegacySchemeRegistry::registerURLSchemeAsNoAccess(WebCore::LegacySchemeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD1F40](this, a2);
}

uint64_t WebCore::LegacySchemeRegistry::shouldTreatURLSchemeAsLocal()
{
  return MEMORY[0x1E0DD1F48]();
}

uint64_t WebCore::LegacySchemeRegistry::registerURLSchemeAsCORSEnabled(WebCore::LegacySchemeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD1F50](this, a2);
}

uint64_t WebCore::LegacySchemeRegistry::registerURLSchemeAsEmptyDocument(WebCore::LegacySchemeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD1F58](this, a2);
}

uint64_t WebCore::LegacySchemeRegistry::registerURLSchemeAsDisplayIsolated(WebCore::LegacySchemeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD1F60](this, a2);
}

uint64_t WebCore::LegacySchemeRegistry::shouldLoadURLSchemeAsEmptyDocument()
{
  return MEMORY[0x1E0DD1F68]();
}

uint64_t WebCore::LegacySchemeRegistry::registerURLSchemeAsCachePartitioned(WebCore::LegacySchemeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD1F70](this, a2);
}

uint64_t WebCore::LegacySchemeRegistry::allURLSchemesRegisteredAsCORSEnabled(WebCore::LegacySchemeRegistry *this)
{
  return MEMORY[0x1E0DD1F78](this);
}

uint64_t WebCore::LegacySchemeRegistry::registerAsCanDisplayOnlyIfCanRequest(WebCore::LegacySchemeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD1F80](this, a2);
}

uint64_t WebCore::LegacySchemeRegistry::registerURLSchemeAsAlwaysRevalidated(WebCore::LegacySchemeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD1F88](this, a2);
}

uint64_t WebCore::LegacySchemeRegistry::setDomainRelaxationForbiddenForURLScheme(WebCore::LegacySchemeRegistry *this, uint64_t a2, const WTF::String *a3)
{
  return MEMORY[0x1E0DD1F90](this, a2, a3);
}

uint64_t WebCore::LegacySchemeRegistry::registerURLSchemeAsHandledBySchemeHandler(WebCore::LegacySchemeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD1F98](this, a2);
}

uint64_t WebCore::LegacySchemeRegistry::registerURLSchemeAsBypassingContentSecurityPolicy(WebCore::LegacySchemeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD1FA0](this, a2);
}

uint64_t WebCore::LocalWebLockRegistry::releaseLock()
{
  return MEMORY[0x1E0DD1FB0]();
}

uint64_t WebCore::LocalWebLockRegistry::requestLock()
{
  return MEMORY[0x1E0DD1FB8]();
}

uint64_t WebCore::LocalWebLockRegistry::abortLockRequest()
{
  return MEMORY[0x1E0DD1FC0]();
}

uint64_t WebCore::LocalWebLockRegistry::clientIsGoingAway()
{
  return MEMORY[0x1E0DD1FC8]();
}

uint64_t WebCore::LocalWebLockRegistry::clientsAreGoingAway()
{
  return MEMORY[0x1E0DD1FD0]();
}

uint64_t WebCore::LocalWebLockRegistry::snapshot()
{
  return MEMORY[0x1E0DD1FD8]();
}

uint64_t WebCore::LocalWebLockRegistry::LocalWebLockRegistry(WebCore::LocalWebLockRegistry *this)
{
  return MEMORY[0x1E0DD1FE0](this);
}

uint64_t WebCore::LowPowerModeNotifier::LowPowerModeNotifier()
{
  return MEMORY[0x1E0DD1FE8]();
}

void WebCore::LowPowerModeNotifier::~LowPowerModeNotifier(WebCore::LowPowerModeNotifier *this)
{
  MEMORY[0x1E0DD1FF0](this);
}

uint64_t WebCore::MediaRecorderPrivate::selectTracks(WebCore::MediaRecorderPrivate *this, WebCore::MediaStreamPrivate *a2)
{
  return MEMORY[0x1E0DD1FF8](this, a2);
}

uint64_t WebCore::NetworkStateNotifier::addListener()
{
  return MEMORY[0x1E0DD2000]();
}

uint64_t WebCore::NetworkStateNotifier::onLine(WebCore::NetworkStateNotifier *this)
{
  return MEMORY[0x1E0DD2008](this);
}

uint64_t WebCore::NetworkStateNotifier::singleton(WebCore::NetworkStateNotifier *this)
{
  return MEMORY[0x1E0DD2010](this);
}

uint64_t WebCore::PasteboardCustomData::fromSharedBuffer(WebCore::PasteboardCustomData *this, const WebCore::SharedBuffer *a2)
{
  return MEMORY[0x1E0DD2018](this, a2);
}

uint64_t WebCore::PasteboardCustomData::Entry::Entry()
{
  return MEMORY[0x1E0DD2020]();
}

{
  return MEMORY[0x1E0DD2028]();
}

uint64_t WebCore::PasteboardCustomData::cocoaType(WebCore::PasteboardCustomData *this)
{
  return MEMORY[0x1E0DD2030](this);
}

uint64_t WebCore::PasteboardCustomData::PasteboardCustomData()
{
  return MEMORY[0x1E0DD2038]();
}

{
  return MEMORY[0x1E0DD2040]();
}

void WebCore::PasteboardCustomData::~PasteboardCustomData(WebCore::PasteboardCustomData *this)
{
  MEMORY[0x1E0DD2048](this);
}

void WebCore::PasteboardWriterData::WebContent::~WebContent(WebCore::PasteboardWriterData::WebContent *this)
{
  MEMORY[0x1E0DD2050](this);
}

uint64_t WebCore::PasteboardWriterData::PasteboardWriterData(WebCore::PasteboardWriterData *this)
{
  return MEMORY[0x1E0DD2058](this);
}

void WebCore::PasteboardWriterData::~PasteboardWriterData(WebCore::PasteboardWriterData *this)
{
  MEMORY[0x1E0DD2060](this);
}

uint64_t WebCore::PermissionController::setSharedController()
{
  return MEMORY[0x1E0DD2068]();
}

uint64_t WebCore::PlatformCALayerCocoa::filtersCanBeComposited()
{
  return MEMORY[0x1E0DD2070]();
}

uint64_t WebCore::PlatformCALayerCocoa::layerTypeForPlatformLayer(WebCore::PlatformCALayerCocoa *this, CALayer *a2)
{
  return MEMORY[0x1E0DD2078](this, a2);
}

uint64_t WebCore::ROMMRGBColorSpaceRef(WebCore *this)
{
  return MEMORY[0x1E0DD2088](this);
}

uint64_t WebCore::ReadableStreamSource::ReadableStreamSource(WebCore::ReadableStreamSource *this)
{
  return MEMORY[0x1E0DD2090](this);
}

void WebCore::ReadableStreamSource::~ReadableStreamSource(WebCore::ReadableStreamSource *this)
{
  MEMORY[0x1E0DD2098](this);
}

uint64_t WebCore::ResourceLoadObserver::sharedIfExists(WebCore::ResourceLoadObserver *this)
{
  return MEMORY[0x1E0DD20B8](this);
}

uint64_t WebCore::ResourceLoadObserver::shared(WebCore::ResourceLoadObserver *this)
{
  return MEMORY[0x1E0DD20C0](this);
}

uint64_t WebCore::ResourceLoadObserver::setShared(WebCore::ResourceLoadObserver *this, WebCore::ResourceLoadObserver *a2)
{
  return MEMORY[0x1E0DD20C8](this, a2);
}

uint64_t WebCore::ResourceResponseBase::dataURLResponse()
{
  return MEMORY[0x1E0DD20D0]();
}

uint64_t WebCore::ResourceResponseBase::setHTTPStatusCode(WebCore::ResourceResponseBase *this)
{
  return MEMORY[0x1E0DD20D8](this);
}

uint64_t WebCore::ResourceResponseBase::setHTTPStatusText()
{
  return MEMORY[0x1E0DD20E0]();
}

uint64_t WebCore::ResourceResponseBase::setHTTPHeaderField()
{
  return MEMORY[0x1E0DD20E8]();
}

uint64_t WebCore::ResourceResponseBase::setTextEncodingName()
{
  return MEMORY[0x1E0DD20F0]();
}

uint64_t WebCore::ResourceResponseBase::sanitizeHTTPHeaderFields()
{
  return MEMORY[0x1E0DD20F8]();
}

uint64_t WebCore::ResourceResponseBase::setExpectedContentLength(WebCore::ResourceResponseBase *this)
{
  return MEMORY[0x1E0DD2100](this);
}

uint64_t WebCore::ResourceResponseBase::sanitizeSuggestedFilename(WebCore::ResourceResponseBase *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD2108](this, a2);
}

uint64_t WebCore::ResourceResponseBase::syntheticRedirectResponse(WebCore::ResourceResponseBase *this, const WTF::URL *a2, const WTF::URL *a3)
{
  return MEMORY[0x1E0DD2110](this, a2, a3);
}

uint64_t WebCore::ResourceResponseBase::setURL(WebCore::ResourceResponseBase *this, const WTF::URL *a2)
{
  return MEMORY[0x1E0DD2118](this, a2);
}

uint64_t WebCore::ResourceResponseBase::setType()
{
  return MEMORY[0x1E0DD2120]();
}

uint64_t WebCore::ResourceResponseBase::ResourceResponseBase()
{
  return MEMORY[0x1E0DD2128]();
}

uint64_t WebCore::ResourceResponseBase::ResourceResponseBase(WebCore::ResourceResponseBase *this, const WTF::URL *a2, const WTF::String *a3, uint64_t a4, const WTF::String *a5)
{
  return MEMORY[0x1E0DD2130](this, a2, a3, a4, a5);
}

uint64_t WebCore::ResourceResponseBase::ResourceResponseBase(WebCore::ResourceResponseBase *this)
{
  return MEMORY[0x1E0DD2138](this);
}

uint64_t WebCore::SWServerRegistration::scheduleSoftUpdate()
{
  return MEMORY[0x1E0DD2140]();
}

uint64_t WebCore::SWServerRegistration::enableNavigationPreload(WebCore::SWServerRegistration *this)
{
  return MEMORY[0x1E0DD2148](this);
}

uint64_t WebCore::SWServerRegistration::disableNavigationPreload(WebCore::SWServerRegistration *this)
{
  return MEMORY[0x1E0DD2150](this);
}

uint64_t WebCore::SWServerRegistration::setNavigationPreloadHeaderValue()
{
  return MEMORY[0x1E0DD2158]();
}

void WebCore::SWServerRegistration::~SWServerRegistration(WebCore::SWServerRegistration *this)
{
  MEMORY[0x1E0DD2160](this);
}

uint64_t WebCore::ScrollingCoordinator::uniqueScrollingNodeID(WebCore::ScrollingCoordinator *this)
{
  return MEMORY[0x1E0DD2168](this);
}

uint64_t WebCore::ServiceWorkerJobData::ServiceWorkerJobData()
{
  return MEMORY[0x1E0DD2170]();
}

uint64_t WebCore::SharedVideoFrameInfo::writePixelBuffer(WebCore::SharedVideoFrameInfo *this, __CVBuffer *a2, unsigned __int8 *a3)
{
  return MEMORY[0x1E0DD2178](this, a2, a3);
}

uint64_t WebCore::SharedVideoFrameInfo::fromCVPixelBuffer(WebCore::SharedVideoFrameInfo *this, __CVBuffer *a2)
{
  return MEMORY[0x1E0DD2180](this, a2);
}

uint64_t WebCore::SharedVideoFrameInfo::fromVideoFrameBuffer()
{
  return MEMORY[0x1E0DD2188]();
}

uint64_t WebCore::SharedVideoFrameInfo::writeVideoFrameBuffer()
{
  return MEMORY[0x1E0DD2190]();
}

uint64_t WebCore::SharedVideoFrameInfo::createPixelBufferFromMemory(WebCore::SharedVideoFrameInfo *this, const unsigned __int8 *a2, __CVPixelBufferPool *a3)
{
  return MEMORY[0x1E0DD2198](this, a2, a3);
}

uint64_t WebCore::SharedVideoFrameInfo::decode()
{
  return MEMORY[0x1E0DD21A0]();
}

uint64_t WebCore::SharedWorkerProvider::setSharedProvider()
{
  return MEMORY[0x1E0DD21A8]();
}

uint64_t WebCore::TransformationMatrix::scale(WebCore::TransformationMatrix *this, double a2)
{
  return MEMORY[0x1E0DD21B0](this, a2);
}

uint64_t WebCore::TransformationMatrix::translate(WebCore::TransformationMatrix *this, double a2, double a3)
{
  return MEMORY[0x1E0DD21B8](this, a2, a3);
}

uint64_t WebCore::TransformationMatrix::TransformationMatrix(WebCore::TransformationMatrix *this, const CATransform3D *a2)
{
  return MEMORY[0x1E0DD21C0](this, a2);
}

uint64_t WebCore::UserGestureIndicator::currentUserGesture(WebCore::UserGestureIndicator *this)
{
  return MEMORY[0x1E0DD21C8](this);
}

uint64_t WebCore::UserGestureIndicator::processingUserGesture(WebCore::UserGestureIndicator *this, const Document *a2)
{
  return MEMORY[0x1E0DD21D0](this, a2);
}

uint64_t WebCore::UserGestureIndicator::UserGestureIndicator()
{
  return MEMORY[0x1E0DD21D8]();
}

void WebCore::UserGestureIndicator::~UserGestureIndicator(WebCore::UserGestureIndicator *this)
{
  MEMORY[0x1E0DD21E0](this);
}

uint64_t WebCore::endOfEditableContent()
{
  return MEMORY[0x1E0DD21F0]();
}

uint64_t WebCore::findClosestPlainText()
{
  return MEMORY[0x1E0DD21F8]();
}

uint64_t WebCore::httpHeaderNameString()
{
  return MEMORY[0x1E0DD2200]();
}

uint64_t WebCore::isInAuxiliaryProcess(WebCore *this)
{
  return MEMORY[0x1E0DD2208](this);
}

uint64_t WebCore::isSupportedImageType(WebCore *this, const WTF::String *a2)
{
  return MEMORY[0x1E0DD2210](this, a2);
}

uint64_t WebCore::localizedDeviceModel(WebCore *this)
{
  return MEMORY[0x1E0DD2218](this);
}

