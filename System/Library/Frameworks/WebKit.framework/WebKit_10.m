uint64_t WebKit::NetworkTaskCocoa::applyCookiePolicyForThirdPartyCloaking(WebCore::ResourceRequest const&)::$_0::$_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  WTF::URL::URL(a1, (uint64_t *)a2);
  WTF::URL::URL(v4 + 40, (uint64_t *)(a2 + 40));
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  if (*(_BYTE *)(a2 + 88))
  {
    v5 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a1 + 80) = v5;
    *(_BYTE *)(a1 + 88) = 1;
  }
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 96) = v6;
  *(_BYTE *)(a1 + 128) = 0;
  if (*(_BYTE *)(a2 + 128))
  {
    v8 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a2 + 120) = 0;
    *(_QWORD *)(a1 + 120) = v8;
    *(_BYTE *)(a1 + 128) = 1;
  }
  v9 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = v9;
  objc_moveWeak((id *)(a1 + 144), (id *)(a2 + 144));
  v10 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a1 + 152) = v10;
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  return a1;
}

void sub_196FF4A24(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl **v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v5, a2);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v4, v7);
  v9 = *v3;
  *v3 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *v2;
  *v2 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  _Unwind_Resume(a1);
}

WTF::StringImpl *WTF::BlockPtr<NSArray<NSHTTPCookie *> * ()(NSArray<NSHTTPCookie *> *)>::fromCallable<WebKit::NetworkTaskCocoa::applyCookiePolicyForThirdPartyCloaking(WebCore::ResourceRequest const&)::$_0>(WebKit::NetworkTaskCocoa::applyCookiePolicyForThirdPartyCloaking(WebCore::ResourceRequest const&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;

  v3 = *(WTF::StringImpl **)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  objc_destroyWeak((id *)(a1 + 176));
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 152, v4);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 112, v5);
  v7 = *(WTF::StringImpl **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  result = *(WTF::StringImpl **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::BlockPtr<NSArray<NSHTTPCookie *> * ()(NSArray<NSHTTPCookie *> *)>::fromCallable<WebKit::NetworkTaskCocoa::applyCookiePolicyForThirdPartyCloaking(WebCore::ResourceRequest const&)::$_0>(WebKit::NetworkTaskCocoa::applyCookiePolicyForThirdPartyCloaking(WebCore::ResourceRequest const&)::$_0)::{lambda(void *,NSArray<NSHTTPCookie *> *)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  id WeakRetained;
  void *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  const WTF::String *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  const WTF::StringImpl *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  NSObject *v19;
  uint64_t v20;
  const char *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint8x16_t v25;
  WTF::StringImpl *v26;
  uint64_t result;
  uint64_t v28;
  _DWORD *v29;
  BOOL v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t j;
  NSObject *v37;
  uint64_t v38;
  uint16x8_t v39;
  int16x8_t *v40;
  uint64_t v41;
  uint16x8_t v42;
  unint64_t v43;
  WTF::StringImpl *v44[2];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  WTF::StringImpl *v48;
  _BYTE v49[12];
  WTF::StringImpl *v50[16];
  uint8_t buf[4];
  uint64_t v52;
  int v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 176));
  if (!WeakRetained)
    return (uint64_t)a2;
  v7 = WeakRetained;
  if (!objc_msgSend(a2, "count"))
  {
LABEL_51:
    CFRelease(v7);
    return (uint64_t)a2;
  }
  v8 = objc_msgSend((id)objc_msgSend(v7, "_resolvedCNAMEChain"), "lastObject");
  if (!v8)
  {
    v48 = 0;
LABEL_12:
    if (*(_BYTE *)(a1 + 160))
      WTF::String::operator=(&v48, (WTF::StringImpl *)(a1 + 152));
    goto LABEL_14;
  }
  MEMORY[0x19AEABCC8](v50);
  WebKit::NetworkTaskCocoa::lastCNAMEDomain(&v48, v50);
  v9 = v50[0];
  v50[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  if (!v48 || !*((_DWORD *)v48 + 1) || MEMORY[0x19AEABBCC]())
    goto LABEL_12;
LABEL_14:
  if (v48 && *((_DWORD *)v48 + 1) && !MEMORY[0x19AEABBCC]())
  {
    v12 = WTF::URL::host((WTF::URL *)(a1 + 72));
    if ((WebCore::RegistrableDomain::matches(&v48, v12, v13) & 1) == 0
      && (!*(_BYTE *)(a1 + 120) || (WTF::equal(v48, *(const WTF::StringImpl **)(a1 + 112), v14) & 1) == 0))
    {
      v15 = WebKit::cookiesByCappingExpiry(a2);
      a2 = v15;
      if (*(_BYTE *)(a1 + 192))
      {
        v46 = 0u;
        v47 = 0u;
        *(_OWORD *)v44 = 0u;
        v45 = 0u;
        v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", v44, v50, 16);
        if (v16)
        {
          v17 = *(_QWORD *)v45;
          do
          {
            for (i = 0; i != v16; ++i)
            {
              if (*(_QWORD *)v45 != v17)
                objc_enumerationMutation(a2);
              v19 = qword_1ECE71140;
              if (os_log_type_enabled((os_log_t)qword_1ECE71140, OS_LOG_TYPE_INFO))
              {
                v20 = objc_msgSend(*((id *)v44[1] + i), "name");
                *(_DWORD *)buf = 138543362;
                v52 = v20;
                _os_log_impl(&dword_196BCC000, v19, OS_LOG_TYPE_INFO, "Capped the expiry of third-party CNAME cloaked cookie named %{public}@.", buf, 0xCu);
              }
            }
            v16 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", v44, v50, 16);
          }
          while (v16);
        }
      }
    }
    goto LABEL_47;
  }
  if (!*(_BYTE *)(a1 + 148))
    goto LABEL_47;
  MEMORY[0x19AEABCC8](v50, objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v7, "_incompleteTaskMetrics"), "transactionMetrics"), "lastObject"), "remoteAddress"));
  WebCore::IPAddress::fromString((WebCore::IPAddress *)v50, v10);
  v11 = v50[0];
  v50[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v8);
    else
      *(_DWORD *)v11 -= 2;
  }
  if (!v54)
    goto LABEL_47;
  v21 = (const char *)*(unsigned __int8 *)(a1 + 148);
  if (!*(_BYTE *)(a1 + 148))
  {
    __break(1u);
    goto LABEL_83;
  }
  v22 = WebCore::IPAddress::matchingNetMaskLength((WebCore::IPAddress *)buf, (const WebCore::IPAddress *)(a1 + 128));
  if (v53 == 1)
    v23 = 16;
  else
    v23 = 64;
  if (v22 >= v23)
    goto LABEL_47;
  v24 = WTF::URL::host((WTF::URL *)(a1 + 32));
  v2 = v24;
  v3 = v8;
  v21 = "accounts.google.com";
  if ((char *)v24 == "accounts.google.com" || v8 != 19)
  {
    if ((char *)v24 != "accounts.google.com" || v8 != 19)
      goto LABEL_55;
LABEL_47:
    v26 = v48;
    v48 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v26 -= 2;
    }
    goto LABEL_51;
  }
  if ((v8 & 0xFF00000000) == 0)
  {
LABEL_83:
    if (*(_WORD *)v2 == 97)
    {
      v39 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v2 + 2), (int16x8_t)xmmword_1978CF110);
      v39.i16[0] = vminvq_u16(v39);
      if (v39.i32[0])
      {
        v40 = (int16x8_t *)(v2 + 6);
        v41 = 3u;
        while (1)
        {
          v42 = (uint16x8_t)vceqq_s16(*v40, (int16x8_t)vmovl_u8(*(uint8x8_t *)&v21[v41]));
          v42.i16[0] = vminvq_u16(v42);
          if (!v42.i32[0])
            break;
          v43 = v41 - 1;
          v41 += 8;
          ++v40;
          if (v43 > 9)
            goto LABEL_47;
        }
      }
    }
    goto LABEL_55;
  }
  if (*(_BYTE *)v24 == 97)
  {
    v25 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v24 + 3), (int8x16_t)xmmword_1978CF100), vceqq_s8(*(int8x16_t *)(v24 + 1), (int8x16_t)xmmword_1978CF0F0));
    v25.i8[0] = vminvq_u8(v25);
    if (v25.i32[0])
      goto LABEL_47;
  }
LABEL_55:
  v28 = *(_QWORD *)(a1 + 184);
  if (v28)
  {
    if ((WTF::StringImpl::startsWith() & 1) != 0)
      goto LABEL_59;
    v28 = *(_QWORD *)(a1 + 184);
  }
  if ((MEMORY[0x19AEABBCC](v28, "youtube.com", 11) & 1) == 0)
  {
LABEL_71:
    v33 = WebKit::cookiesByCappingExpiry(a2);
    a2 = v33;
    if (*(_BYTE *)(a1 + 192))
    {
      v46 = 0u;
      v47 = 0u;
      *(_OWORD *)v44 = 0u;
      v45 = 0u;
      v34 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", v44, v50, 16);
      if (v34)
      {
        v35 = *(_QWORD *)v45;
        do
        {
          for (j = 0; j != v34; ++j)
          {
            if (*(_QWORD *)v45 != v35)
              objc_enumerationMutation(a2);
            v37 = qword_1ECE71140;
            if (os_log_type_enabled((os_log_t)qword_1ECE71140, OS_LOG_TYPE_INFO))
            {
              v38 = objc_msgSend(*((id *)v44[1] + j), "name");
              *(_DWORD *)v49 = 138543362;
              *(_QWORD *)&v49[4] = v38;
              _os_log_impl(&dword_196BCC000, v37, OS_LOG_TYPE_INFO, "Capped the expiry of third-party IP address cookie named %{public}@.", v49, 0xCu);
            }
          }
          v34 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", v44, v50, 16);
        }
        while (v34);
      }
    }
    goto LABEL_47;
  }
LABEL_59:
  v29 = *(_DWORD **)(a1 + 184);
  if (v29)
    *v29 += 2;
  *(_QWORD *)v49 = v29;
  v50[0] = (WTF::StringImpl *)"consent.";
  v50[1] = (WTF::StringImpl *)9;
  result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)v50, (uint64_t *)v49, v44);
  if (v44[0])
  {
    v30 = WTF::operator==((unsigned __int8 *)v2, v3, *((unsigned __int8 **)v44[0] + 1), *((unsigned int *)v44[0] + 1) | ((unint64_t)((*((_DWORD *)v44[0] + 4) >> 2) & 1) << 32));
    v31 = v44[0];
    v44[0] = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v31 -= 2;
    }
    v32 = *(WTF::StringImpl **)v49;
    *(_QWORD *)v49 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v32 -= 2;
    }
    if (v30)
      goto LABEL_47;
    goto LABEL_71;
  }
  __break(0xC471u);
  return result;
}

void sub_196FF5138(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20,uint64_t a21,uint64_t a22,WTF::StringImpl *a23)
{
  const void *v23;

  if (a20)
  {
    if (*(_DWORD *)a20 == 2)
      WTF::StringImpl::destroy(a20, a2);
    else
      *(_DWORD *)a20 -= 2;
  }
  CFRelease(v23);
  _Unwind_Resume(a1);
}

void *WebKit::cookiesByCappingExpiry(void *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(a1, "count"));
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v9;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(a1);
        objc_msgSend(v2, "addObject:", WebCore::NetworkStorageSession::capExpiryOfPersistentCookie());
        ++v6;
      }
      while (v4 != v6);
      v4 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v4);
  }
  return v2;
}

uint64_t WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::SecurityOriginData>,WTF::DefaultHash<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  WebCore::SecurityOriginData *v5;
  int i;
  char v7;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::SecurityOriginData>,WTF::DefaultHash<WebCore::SecurityOriginData>>::hash<WebCore::SecurityOriginData>(a2) & v3;
  v5 = (WebCore::SecurityOriginData *)(v2 + 32 * v4);
  if ((WebCore::SecurityOriginData::isNull(v5) & 1) != 0)
    return 0;
  for (i = 1; ; ++i)
  {
    WebCore::SecurityOriginData::isHashTableDeletedValue(v5);
    if ((v7 & 1) == 0 && (WebCore::operator==() & 1) != 0)
      break;
    v4 = ((_DWORD)v4 + i) & v3;
    v5 = (WebCore::SecurityOriginData *)(v2 + 32 * v4);
    if (WebCore::SecurityOriginData::isNull(v5))
      return 0;
  }
  return 1;
}

uint64_t WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::SecurityOriginData>,WTF::DefaultHash<WebCore::SecurityOriginData>>::hash<WebCore::SecurityOriginData>(uint64_t a1)
{
  int v2;
  __int16 v3;
  char v4;

  v2 = -1640531527;
  v3 = 0;
  v4 = 0;
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v2, a1);
  return WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v2);
}

WebKit::SessionSet *WTF::RefCounted<WebKit::SessionSet>::deref(WebKit::SessionSet *result, void *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebKit::SessionSet::~SessionSet(result, a2);
    return (WebKit::SessionSet *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void WebKit::SessionSet::~SessionSet(WebKit::SessionSet *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  const void *v13;
  WTF::StringImpl *v14;
  uint64_t v15;

  v3 = *((_QWORD *)this + 15);
  if (v3)
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 14);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  v5 = *((_QWORD *)this + 13);
  if (v5)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v5, a2);
  v6 = (const void *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v6)
    CFRelease(v6);
  v7 = (const void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v7)
    CFRelease(v7);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 10, a2);
  v9 = *((_QWORD *)this + 9);
  if (v9)
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v9, v8);
  v10 = *((_QWORD *)this + 8);
  if (v10)
    WTF::fastFree((WTF *)(v10 - 16), v8);
  v11 = *((_QWORD *)this + 7);
  if (v11)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v11, v8);
  v12 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v12)
    CFRelease(v12);
  v13 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v13)
    CFRelease(v13);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 4, v8);
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v14)
    std::default_delete<WebKit::IsolatedSession>::operator()[abi:sn180100]((uint64_t)this + 24, v14);
  v15 = *((_QWORD *)this + 2);
  if (v15)
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v15, v14);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v14);
}

uint64_t WTF::StringHasher::computeHashAndMaskTop8Bits<char16_t,WTF::StringHasher::DefaultConverter>(uint64_t a1, unint64_t a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;

  v2 = WTF::SuperFastHash::computeHashImpl<char16_t,WTF::StringHasher::DefaultConverter>(a1, a2);
  v3 = (v2 ^ (8 * v2)) + ((v2 ^ (8 * v2)) >> 5);
  v4 = (v3 ^ (4 * v3)) + ((v3 ^ (4 * v3)) >> 15);
  v5 = (v4 ^ (v4 << 10)) & 0xFFFFFF;
  if (v5)
    return v5;
  else
    return 0x800000;
}

uint64_t WTF::SuperFastHash::computeHashImpl<unsigned char,WTF::StringHasher::DefaultConverter>(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  int v7;

  result = 2654435769;
  if (a2 >= 2)
  {
    v4 = 0;
    do
    {
      v5 = (*(unsigned __int8 *)(a1 + v4 + 1) << 11) ^ (((_DWORD)result + *(unsigned __int8 *)(a1 + v4)) << 16) ^ (result + *(unsigned __int8 *)(a1 + v4));
      result = v5 + (v5 >> 11);
      v6 = v4 + 3;
      v4 += 2;
    }
    while (v6 < a2);
  }
  if ((a2 & 1) != 0)
  {
    v7 = result + *(unsigned __int8 *)(a2 + a1 - 1);
    return (v7 ^ (v7 << 11)) + ((v7 ^ (v7 << 11)) >> 17);
  }
  return result;
}

uint64_t WTF::SuperFastHash::computeHashImpl<char16_t,WTF::StringHasher::DefaultConverter>(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  int v7;

  result = 2654435769;
  if (a2 >= 2)
  {
    v4 = 0;
    do
    {
      v5 = (*(unsigned __int16 *)(a1 + 2 * v4 + 2) << 11) ^ (((_DWORD)result + *(unsigned __int16 *)(a1 + 2 * v4)) << 16) ^ (result + *(unsigned __int16 *)(a1 + 2 * v4));
      result = v5 + (v5 >> 11);
      v6 = v4 + 3;
      v4 += 2;
    }
    while (v6 < a2);
  }
  if ((a2 & 1) != 0)
  {
    v7 = result + *(unsigned __int16 *)(a1 + 2 * a2 - 2);
    return (v7 ^ (v7 << 11)) + ((v7 ^ (v7 << 11)) >> 17);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkDataTaskCocoa::willPerformHTTPRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest)> &&)::$_0,void,WebCore::ResourceRequest>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WebCore::ResourceResponseBase *v3;
  const void *v4;
  void *v5;
  unsigned __int8 *v6;
  uint64_t v7;

  *a1 = off_1E34B5E78;
  v3 = (WebCore::ResourceResponseBase *)(a1 + 5);
  v4 = (const void *)a1[35];
  a1[35] = 0;
  if (v4)
    CFRelease(v4);
  WebCore::ResourceResponseBase::~ResourceResponseBase(v3, a2);
  v6 = (unsigned __int8 *)a1[3];
  a1[3] = 0;
  if (v6)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v6, v5);
  v7 = a1[1];
  a1[1] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkDataTaskCocoa::willPerformHTTPRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest)> &&)::$_0,void,WebCore::ResourceRequest>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WebCore::ResourceResponseBase *v3;
  const void *v4;
  void *v5;
  unsigned __int8 *v6;
  uint64_t v7;

  *a1 = off_1E34B5E78;
  v3 = (WebCore::ResourceResponseBase *)(a1 + 5);
  v4 = (const void *)a1[35];
  a1[35] = 0;
  if (v4)
    CFRelease(v4);
  WebCore::ResourceResponseBase::~ResourceResponseBase(v3, a2);
  v6 = (unsigned __int8 *)a1[3];
  a1[3] = 0;
  if (v6)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v6, v5);
  v7 = a1[1];
  a1[1] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return WTF::fastFree((WTF *)a1, v5);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkDataTaskCocoa::willPerformHTTPRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest)> &&)::$_0,void,WebCore::ResourceRequest>::call(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  CFTypeRef v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void (***v10)(_QWORD, uint64_t, uint64_t, _QWORD *);
  uint64_t v11;
  WTF::ThreadSafeWeakPtrControlBlock *v12;
  WTF::ThreadSafeWeakPtrControlBlock *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  CFTypeRef v18;
  _QWORD v19[24];
  CFTypeRef cf;
  uint64_t v21;

  v3 = a1[3];
  if (v3
    && (v6 = a1[2],
        WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::NetworkDataTaskCocoa>((uint64_t)&v21, v3, a1[4]), (v8 = v21) != 0))
  {
    v9 = *(_QWORD *)(v6 + 24);
    if (v9 && (v10 = *(void (****)(_QWORD, uint64_t, uint64_t, _QWORD *))(v9 + 8)) != 0)
    {
      v11 = a1[1];
      a1[1] = 0;
      v12 = (WTF::ThreadSafeWeakPtrControlBlock *)a1[3];
      if (v12)
        v13 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v12);
      else
        v13 = 0;
      v14 = a1[4];
      v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
      *v15 = &off_1E34B5EA0;
      v15[1] = v11;
      v15[2] = v6;
      v15[3] = v13;
      v15[4] = v14;
      v19[0] = v15;
      (**v10)(v10, (uint64_t)(a1 + 5), a2, v19);
      v16 = v19[0];
      v19[0] = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    }
    else
    {
      WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v19);
      v17 = a1[1];
      a1[1] = 0;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v17 + 16))(v17, v19);
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      v18 = cf;
      cf = 0;
      if (v18)
        CFRelease(v18);
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v19);
    }
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v8 + 8));
  }
  else
  {
    WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v19);
    v4 = a1[1];
    a1[1] = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v19);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = cf;
    cf = 0;
    if (v5)
      CFRelease(v5);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v19);
  }
}

void sub_196FF58D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,CFTypeRef cf)
{
  uint64_t v33;
  uint64_t v34;
  CFTypeRef v36;

  (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v36 = cf;
  cf = 0;
  if (v36)
    CFRelease(v36);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a9);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v34 + 8));
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkDataTaskCocoa::willPerformHTTPRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest)> &&)::$_0::operator()(WebCore::ResourceRequest)::{lambda(WebCore::ResourceRequest)#1},void,WebCore::ResourceRequest>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;

  *a1 = &off_1E34B5EA0;
  v3 = (unsigned __int8 *)a1[3];
  a1[3] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkDataTaskCocoa::willPerformHTTPRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest)> &&)::$_0::operator()(WebCore::ResourceRequest)::{lambda(WebCore::ResourceRequest)#1},void,WebCore::ResourceRequest>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34B5EA0;
  v3 = (unsigned __int8 *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkDataTaskCocoa::willPerformHTTPRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest)> &&)::$_0::operator()(WebCore::ResourceRequest)::{lambda(WebCore::ResourceRequest)#1},void,WebCore::ResourceRequest>::call(_QWORD *a1, CFTypeRef *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  CFTypeRef v7;
  uint64_t v8;
  uint64_t v9;
  CFTypeRef v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  CFTypeRef *v14;
  _BYTE v15[192];
  CFTypeRef cf;
  uint64_t v17;

  v4 = a1[3];
  if (v4
    && (v14 = a2,
        v8 = a1[2],
        WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::NetworkDataTaskCocoa>((uint64_t)&v17, v4, a1[4]), (v13 = v17) != 0))
  {
    v9 = *(_QWORD *)(v8 + 16);
    if (v9 && *(_QWORD *)(v9 + 8))
    {
      if ((WebCore::ResourceRequestBase::isNull((WebCore::ResourceRequestBase *)v14) & 1) == 0)
        WebKit::NetworkDataTask::restrictRequestReferrerToOriginIfNeeded(v8, (WebCore::ResourceRequest *)v14);
      WebCore::ResourceRequestBase::operator=(v8 + 328, (uint64_t)v14);
      v10 = v14[24];
      if (v10)
        CFRetain(v14[24]);
      v11 = *(const void **)(v8 + 520);
      *(_QWORD *)(v8 + 520) = v10;
      if (v11)
        CFRelease(v11);
      v12 = a1[1];
      a1[1] = 0;
      (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v12 + 16))(v12, v14);
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      v5 = v13;
      goto LABEL_6;
    }
    v5 = v17;
  }
  else
  {
    v5 = 0;
  }
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v15);
  v6 = a1[1];
  a1[1] = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 16))(v6, v15);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = cf;
  cf = 0;
  if (v7)
    CFRelease(v7);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v15);
  if (v5)
LABEL_6:
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v5 + 8));
}

void sub_196FF5B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,CFTypeRef cf)
{
  uint64_t v35;

  (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(a9 + 8));
  _Unwind_Resume(a1);
}

__int16 *std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,WebCore::HTTPHeaderMap::CommonHeader const*,WebCore::HTTPHeaderMap::CommonHeader const*,WebCore::HTTPHeaderMap::CommonHeader*,0>(__int16 *a1, __int16 *a2, _WORD *a3)
{
  __int16 *v4;
  __int16 *v5;
  WTF::StringImpl *v6;
  __int16 v7;
  WTF::StringImpl **v8;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    v6 = (WTF::StringImpl *)(v4 + 4);
    v7 = *v4;
    v4 += 8;
    v8 = (WTF::StringImpl **)(a3 + 4);
    *a3 = v7;
    a3 += 8;
    WTF::String::operator=(v8, v6);
  }
  while (v4 != v5);
  return v5;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<WebCore::HTTPHeaderMap::UncommonHeader const*,WebCore::HTTPHeaderMap::UncommonHeader const*,WebCore::HTTPHeaderMap::UncommonHeader*>(uint64_t a1, uint64_t a2, uint64_t a3, WTF::StringImpl **a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    WTF::String::operator=(a4, (WTF::StringImpl *)v5);
    WTF::String::operator=(a4 + 1, (WTF::StringImpl *)(v5 + 8));
    a4 += 2;
    v5 += 16;
  }
  while (v5 != v6);
  return v6;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkDataTaskCocoa::setH2PingCallback(WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&)::$_1,void,WTF::Function<std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&> &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)a1[1];
  *a1 = &off_1E34B5EC8;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkDataTaskCocoa::setH2PingCallback(WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&)::$_1,void,WTF::Function<std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&> &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34B5EC8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkDataTaskCocoa::setH2PingCallback(WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&)::$_1,void,WTF::Function<std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&> &>::call(uint64_t a1, _QWORD *a2)
{
  WTF::StringImpl *v3;
  CFTypeRef v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  CFTypeRef v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  CFTypeRef v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  CFTypeRef cf;
  char v20;
  _BYTE v21[80];
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  WebCore::createInternalError();
  std::experimental::fundamentals_v3::unexpected<WebCore::ResourceError>::unexpected<WebCore::ResourceError>((uint64_t)&v16, (uint64_t *)&v12);
  std::__variant_detail::__alt<1ul,WebCore::ResourceError>::__alt[abi:sn180100]<WebCore::ResourceError>((uint64_t)v21, (uint64_t *)&v16);
  v22 = 1;
  (*(void (**)(_QWORD, _BYTE *))(*(_QWORD *)*a2 + 16))(*a2, v21);
  if (v22 != -1)
    ((void (*)(char *, _BYTE *))off_1E34B5C58[v22])(&v20, v21);
  v22 = -1;
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
  v5 = v18;
  v18 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = v17;
  v17 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = v16;
  v16 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v3);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v15;
  v15 = 0;
  if (v8)
    CFRelease(v8);
  v9 = v14;
  v14 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v3);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v13;
  v13 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v3);
    else
      *(_DWORD *)v10 -= 2;
  }
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_196FF5F4C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, CFTypeRef a18, uint64_t a19, WTF::StringImpl *a20,WTF::StringImpl *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF::StringImpl *a26,uint64_t a27,CFTypeRef cf)
{
  uint64_t v28;
  uint64_t v30;

  v30 = *(unsigned int *)(v28 - 32);
  if ((_DWORD)v30 != -1)
    ((void (*)(uint64_t, uint64_t))off_1E34B5C58[v30])(v28 - 113, v28 - 112);
  *(_DWORD *)(v28 - 32) = -1;
  if (cf)
    CFRelease(cf);
  if (a26)
  {
    if (*(_DWORD *)a26 == 2)
      WTF::StringImpl::destroy(a26, a2);
    else
      *(_DWORD *)a26 -= 2;
  }
  if (a21)
  {
    if (*(_DWORD *)a21 == 2)
      WTF::StringImpl::destroy(a21, a2);
    else
      *(_DWORD *)a21 -= 2;
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2)
      WTF::StringImpl::destroy(a20, a2);
    else
      *(_DWORD *)a20 -= 2;
  }
  if (a18)
    CFRelease(a18);
  if (a16)
  {
    if (*(_DWORD *)a16 == 2)
      WTF::StringImpl::destroy(a16, a2);
    else
      *(_DWORD *)a16 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>,void,std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34B5EF0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>,void,std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34B5EF0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>,void,std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_196FF6158(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t *WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>::~CompletionHandlerWithFinalizer(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  if (*a1)
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1[1] + 16))(a1[1], a1);
  v2 = a1[1];
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *a1;
  *a1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_196FF61E0(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1[1];
  v1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(exception_object);
}

unsigned int **WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int *v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v6 = v2;
      WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::setBackupExclusionPeriodForTesting(PAL::SessionID,WTF::Seconds,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B5F18;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::setBackupExclusionPeriodForTesting(PAL::SessionID,WTF::Seconds,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B5F18;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

void sub_196FF63C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_196FF64A4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_196FF65A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

unsigned int **WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned long long>>,unsigned long long>(unsigned int **result, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int *v10;
  unsigned int v11;

  if (!a2)
  {
LABEL_9:
    v10 = 0;
    goto LABEL_10;
  }
  v3 = *(_DWORD *)(a2 - 8);
  v4 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  v8 = *(_QWORD *)(a2 + 16 * v7);
  if (v8 != a3)
  {
    v9 = 1;
    while (v8)
    {
      v7 = ((_DWORD)v7 + v9) & v3;
      v8 = *(_QWORD *)(a2 + 16 * v7);
      ++v9;
      if (v8 == a3)
        goto LABEL_6;
    }
    goto LABEL_9;
  }
LABEL_6:
  v10 = *(unsigned int **)(a2 + 16 * v7 + 8);
  if (v10)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
LABEL_10:
  *result = v10;
  return result;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  if (result)
  {
    v3 = result;
    v4 = *(_DWORD *)(result - 8);
    v5 = WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::hash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2) & v4;
    v6 = *(_QWORD *)(v3 + 16 * v5);
    if (v6 == a2)
    {
      return *(_QWORD *)(v3 + 16 * v5 + 8);
    }
    else
    {
      v7 = 1;
      while (v6)
      {
        v5 = ((_DWORD)v5 + v7) & v4;
        v6 = *(_QWORD *)(v3 + 16 * v5);
        ++v7;
        if (v6 == a2)
          return *(_QWORD *)(v3 + 16 * v5 + 8);
      }
      return 0;
    }
  }
  return result;
}

uint64_t WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::hash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
  v2 = 9 * ((v1 + ~(v1 << 13)) ^ ((v1 + ~(v1 << 13)) >> 8));
  v3 = (v2 ^ (v2 >> 15)) + ~((v2 ^ (v2 >> 15)) << 27);
  return (v3 >> 31) ^ v3;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(uint64_t *a1, unsigned int a2, WTF::ASCIICaseInsensitiveHash **a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::ASCIICaseInsensitiveHash **v13;
  const WTF::StringImpl *v14;
  uint64_t v15;
  _QWORD *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  _QWORD *v27;
  WTF::StringImpl *v28;
  WTF::ASCIICaseInsensitiveHash *v29;
  uint64_t v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t result;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF::ASCIICaseInsensitiveHash **)(v5 + 16 * v11);
      if (*v13 != (WTF::ASCIICaseInsensitiveHash *)-1)
      {
        if (WTF::equal(*v13, 0, v10))
        {
          v15 = v5 + 16 * v11;
          v17 = *(WTF::StringImpl **)(v15 + 8);
          v16 = (_QWORD *)(v15 + 8);
          v9 = v17;
          *v16 = 0;
          if (v17)
            std::default_delete<WebKit::IsolatedSession>::operator()[abi:sn180100]((uint64_t)v16, v9);
          v18 = *v13;
          *v13 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, v9);
            else
              *(_DWORD *)v18 -= 2;
          }
        }
        else
        {
          v19 = *a1;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v21 = WTF::ASCIICaseInsensitiveHash::hash(*v13, v14);
          v22 = 0;
          do
          {
            v23 = v21 & v20;
            v24 = WTF::equal(*(WTF **)(v19 + 16 * v23), 0, v10);
            v21 = ++v22 + v23;
          }
          while (!v24);
          v25 = v19 + 16 * v23;
          v27 = (_QWORD *)(v25 + 8);
          v26 = *(WTF::StringImpl **)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (v26)
            std::default_delete<WebKit::IsolatedSession>::operator()[abi:sn180100]((uint64_t)v27, v26);
          v28 = *(WTF::StringImpl **)v25;
          *(_QWORD *)v25 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
              WTF::StringImpl::destroy(v28, v26);
            else
              *(_DWORD *)v28 -= 2;
          }
          v29 = *v13;
          *v13 = 0;
          *(_QWORD *)v25 = v29;
          v30 = v5 + 16 * v11;
          v32 = *(_QWORD *)(v30 + 8);
          v31 = (WTF::StringImpl **)(v30 + 8);
          *v31 = 0;
          *v27 = v32;
          v9 = *v31;
          *v31 = 0;
          if (v9)
            std::default_delete<WebKit::IsolatedSession>::operator()[abi:sn180100]((uint64_t)v31, v9);
          v33 = *v13;
          *v13 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy(v33, v9);
            else
              *(_DWORD *)v33 -= 2;
          }
          if (v13 == a3)
            v12 = v25;
        }
      }
      ++v11;
    }
    while (v11 != v6);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v12;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  _QWORD v5[2];

  if (!a1)
    return 0;
  v3 = a1 + 16 * *(unsigned int *)(a1 - 4);
  if (*(_DWORD *)(a1 - 12))
  {
    v5[0] = a1;
    v5[1] = v3;
    WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v5, a2, a3);
    return v5[0];
  }
  return v3;
}

WTF::StringImpl *WTF::hashTraitsDeleteBucket<WTF::HashTraits<WebCore::RegistrableDomain>,WebCore::RegistrableDomain>(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  *a1 = (WTF::StringImpl *)-1;
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(uint64_t result, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  WTF **v6;
  const WTF::StringImpl *v7;
  const WTF::StringImpl *v8;
  int v9;

  if (result)
  {
    v3 = result;
    v4 = *(_DWORD *)(result - 8);
    v5 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2) & v4;
    v6 = (WTF **)(v3 + 16 * v5);
    if ((WTF::equal(*v6, 0, v7) & 1) != 0)
    {
      return 0;
    }
    else
    {
      v9 = 1;
      while (*v6 == (WTF *)-1 || (WTF::equalIgnoringASCIICase(*v6, *a2, v8) & 1) == 0)
      {
        v5 = (v5 + v9) & v4;
        v6 = (WTF **)(v3 + 16 * v5);
        ++v9;
        if (WTF::equal(*v6, 0, v8))
          return 0;
      }
      return 1;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebKit::WebPageNetworkParameters,WTF::KeyValuePair<WebKit::WebPageNetworkParameters,WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebPageNetworkParameters,WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebKit::WebPageNetworkParameters>,WTF::HashMap<WebKit::WebPageNetworkParameters,WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebKit::WebPageNetworkParameters>,WTF::HashTraits<WebKit::WebPageNetworkParameters>,WTF::HashTraits<WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebPageNetworkParameters>>::expand(uint64_t *a1, WTF **a2)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  void *v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF **v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  int v21;
  WTF::StringImpl *v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  WTF::StringImpl *v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  WTF::StringImpl *v38;
  uint64_t result;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    v5 = *(_DWORD *)(v3 - 12);
    if (v4)
    {
      v6 = v4 << (6 * v5 >= (2 * v4));
      goto LABEL_6;
    }
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v6 = 8;
LABEL_6:
  v7 = WTF::fastMalloc((WTF *)(16 * v6 + 16));
  v10 = v7;
  v11 = v7 + 16;
  if (v6)
    bzero((void *)(v7 + 16), 16 * v6);
  *a1 = v11;
  *(_DWORD *)(v10 + 12) = v6;
  *(_DWORD *)(*a1 - 8) = v6 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = (WTF **)(v3 + 16 * v12);
      if (*v14 != (WTF *)-1)
      {
        if (WTF::equal(*v14, 0, v9))
        {
          v15 = v3 + 16 * v12;
          v16 = *(unsigned int **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            do
            {
              v17 = __ldaxr(v16);
              v18 = v17 - 1;
            }
            while (__stlxr(v18, v16));
            if (!v18)
            {
              atomic_store(1u, v16);
              WTF::fastFree((WTF *)v16, v8);
            }
          }
          v19 = *v14;
          *v14 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v19 -= 2;
          }
        }
        else
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = *v14;
          if (*v14)
          {
            v23 = *((_DWORD *)v22 + 4);
            if (v23 >= 0x100)
              LODWORD(v22) = v23 >> 8;
            else
              LODWORD(v22) = WTF::StringImpl::hashSlowCase(v22);
          }
          v24 = 0;
          do
          {
            v25 = v22 & v21;
            v26 = WTF::equal(*(WTF **)(v20 + 16 * v25), 0, v9);
            LODWORD(v22) = ++v24 + v25;
          }
          while (!v26);
          v27 = v20 + 16 * v25;
          v28 = *(unsigned int **)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          if (v28)
          {
            do
            {
              v29 = __ldaxr(v28);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, v28));
            if (!v30)
            {
              atomic_store(1u, v28);
              WTF::fastFree((WTF *)v28, v8);
            }
          }
          v31 = *(WTF::StringImpl **)v27;
          *(_QWORD *)v27 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v31 -= 2;
          }
          v32 = *v14;
          *v14 = 0;
          *(_QWORD *)v27 = v32;
          v33 = v3 + 16 * v12;
          v34 = *(_QWORD *)(v33 + 8);
          *(_QWORD *)(v33 + 8) = 0;
          *(_QWORD *)(v27 + 8) = v34;
          v35 = *(unsigned int **)(v33 + 8);
          *(_QWORD *)(v33 + 8) = 0;
          if (v35)
          {
            do
            {
              v36 = __ldaxr(v35);
              v37 = v36 - 1;
            }
            while (__stlxr(v37, v35));
            if (!v37)
            {
              atomic_store(1u, v35);
              WTF::fastFree((WTF *)v35, v8);
            }
          }
          v38 = *v14;
          *v14 = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 2)
              WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v38 -= 2;
          }
          if (v14 == a2)
            v13 = v27;
        }
      }
      ++v12;
    }
    while (v12 != v4);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v3)
      return result;
  }
  WTF::fastFree((WTF *)(v3 - 16), v8);
  return v13;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  WebKit::SessionSet *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  WebKit::SessionSet *v27;
  uint64_t v28;
  uint64_t v29;
  WebKit::SessionSet *v30;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = (uint64_t *)(v17 + 16 * v24);
          v27 = (WebKit::SessionSet *)v26[1];
          v26[1] = 0;
          if (v27)
            WTF::RefCounted<WebKit::SessionSet>::deref(v27, v10);
          *v26 = *v13;
          v28 = v6 + 16 * v11;
          v29 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          v26[1] = v29;
          v30 = *(WebKit::SessionSet **)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v30)
            WTF::RefCounted<WebKit::SessionSet>::deref(v30, v10);
          if (v13 == a3)
            v12 = v26;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(WebKit::SessionSet **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
            WTF::RefCounted<WebKit::SessionSet>::deref(v16, v10);
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  WTF::StringImpl *v14;
  _QWORD *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v12 = v7;
    v13 = (_QWORD *)v6;
    do
    {
      if (*v13 != -1)
      {
        if (*v13)
        {
          v15 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::lookupForReinsert(a1, v13);
          v16 = (WTF::StringImpl *)v15[1];
          v15[1] = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, v10);
            else
              *(_DWORD *)v16 -= 2;
          }
          *v15 = *v13;
          v17 = v13[1];
          v13[1] = 0;
          v15[1] = v17;
          v18 = (WTF::StringImpl *)v13[1];
          v13[1] = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, v10);
            else
              *(_DWORD *)v18 -= 2;
          }
          if (v13 == a3)
            v11 = v15;
        }
        else
        {
          v14 = (WTF::StringImpl *)v13[1];
          v13[1] = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v10);
            else
              *(_DWORD *)v14 -= 2;
          }
        }
      }
      v13 += 2;
      --v12;
    }
    while (v12);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

IPC::Encoder *WebKit::NetworkSessionCocoa::BlobDataTaskClient::didReceiveResponse(uint64_t a1, WebCore::ResourceResponseBase *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  os_unfair_lock_s *v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *result;
  WTF *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18[2];
  IPC::Encoder *v19;

  v5 = *(os_unfair_lock_s **)(a1 + 24);
  if (v5)
  {
    v8 = *a5;
    *a5 = 0;
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v9 = &off_1E34B60E0;
    v9[1] = v8;
    v10 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v11 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v11 = 304;
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v11 + 528) = v11 + 16;
    *(_QWORD *)(v11 + 536) = v11 + 16;
    *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v11 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
    v19 = (IPC::Encoder *)v11;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v11, (uint64_t *)(a1 + 40));
    IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode((IPC::Encoder *)v11, a2);
    v18[0] = (uint64_t)v9;
    v18[1] = v10;
    IPC::Connection::sendMessageWithAsyncReply(v5, &v19, v18, 0, 0);
    v13 = v18[0];
    v18[0] = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    result = v19;
    v19 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v12);
      return (IPC::Encoder *)WTF::fastFree(v15, v16);
    }
  }
  else
  {
    v17 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, 2);
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  return result;
}

void sub_196FF7488(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NetworkSessionCocoa::BlobDataTaskClient::didReceiveData(uint64_t this, const WebCore::SharedBuffer *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  if (*(_QWORD *)(this + 24))
  {
    v2 = this;
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v3 = off_1E34B6108;
    v3[1] = v2;
    v4 = (uint64_t)v3;
    WebCore::FragmentedSharedBuffer::forEachSegment();
    this = v4;
    if (v4)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  return this;
}

void sub_196FF7540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

WebKit::NetworkSessionCocoa::BlobDataTaskClient *WebKit::NetworkSessionCocoa::BlobDataTaskClient::didCompleteWithError(WebKit::NetworkSessionCocoa::BlobDataTaskClient *this, const WebCore::ResourceError *a2, const WebCore::NetworkLoadMetrics *a3)
{
  WebKit::NetworkSessionCocoa::BlobDataTaskClient *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebKit::NetworkSessionCocoa::BlobDataTaskClient *v9;
  _QWORD v10[2];

  result = (WebKit::NetworkSessionCocoa::BlobDataTaskClient *)*((_QWORD *)this + 3);
  if (result)
  {
    v10[0] = (char *)this + 40;
    v10[1] = a2;
    result = (WebKit::NetworkSessionCocoa::BlobDataTaskClient *)IPC::Connection::send<Messages::NetworkProcessProxy::DataTaskDidCompleteWithError>((uint64_t)result, (uint64_t)v10, 0, 0, 0);
    v5 = *((_QWORD *)this + 4);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v7 = *((_QWORD *)this + 5);
        v8 = *(_QWORD *)(v6 + 968);
        result = (WebKit::NetworkSessionCocoa::BlobDataTaskClient *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v8, v7);
        if (v8)
        {
          v9 = (WebKit::NetworkSessionCocoa::BlobDataTaskClient *)(v8 + 16 * *(unsigned int *)(v8 - 4));
          if (v9 == result)
            return result;
        }
        else
        {
          if (!result)
            return result;
          v9 = 0;
        }
        if (v9 != result)
          return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove((uint64_t *)(v6 + 968), (uint64_t)result);
      }
    }
  }
  return result;
}

uint64_t WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate()
{
  uint64_t result;

  if (!WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
    return WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  result = 142;
  __break(0xC471u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::PrivateRelayed<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::DataTaskDidReceiveResponse,WebKit::NetworkSessionCocoa::BlobDataTaskClient::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::NegotiatedLegacyTLS,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::{lambda(BOOL)#1}>(WebKit::NetworkSessionCocoa::BlobDataTaskClient::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::NegotiatedLegacyTLS,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::{lambda(BOOL)#1} &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::NetworkSessionCocoa::BlobDataTaskClient::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::NegotiatedLegacyTLS,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::{lambda(BOOL)#1})#1},void,WebKit::NetworkSessionCocoa::BlobDataTaskClient::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::NegotiatedLegacyTLS,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::{lambda(BOOL)#1}>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34B60E0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PrivateRelayed<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::DataTaskDidReceiveResponse,WebKit::NetworkSessionCocoa::BlobDataTaskClient::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::NegotiatedLegacyTLS,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::{lambda(BOOL)#1}>(WebKit::NetworkSessionCocoa::BlobDataTaskClient::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::NegotiatedLegacyTLS,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::{lambda(BOOL)#1} &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::NetworkSessionCocoa::BlobDataTaskClient::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::NegotiatedLegacyTLS,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::{lambda(BOOL)#1})#1},void,WebKit::NetworkSessionCocoa::BlobDataTaskClient::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::NegotiatedLegacyTLS,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::{lambda(BOOL)#1}>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34B60E0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PrivateRelayed<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::DataTaskDidReceiveResponse,WebKit::NetworkSessionCocoa::BlobDataTaskClient::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::NegotiatedLegacyTLS,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::{lambda(BOOL)#1}>(WebKit::NetworkSessionCocoa::BlobDataTaskClient::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::NegotiatedLegacyTLS,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::{lambda(BOOL)#1} &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::NetworkSessionCocoa::BlobDataTaskClient::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::NegotiatedLegacyTLS,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::{lambda(BOOL)#1})#1},void,WebKit::NetworkSessionCocoa::BlobDataTaskClient::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::NegotiatedLegacyTLS,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::{lambda(BOOL)#1}>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  unsigned __int16 v3;
  uint64_t v5;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::NetworkProcessProxy::DataTaskDidReceiveResponse,WebKit::NetworkSessionCocoa::BlobDataTaskClient::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::NegotiatedLegacyTLS,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::{lambda(BOOL)#1}>(v2);
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::NetworkProcessProxy::DataTaskDidReceiveResponse,WebKit::NetworkSessionCocoa::BlobDataTaskClient::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::NegotiatedLegacyTLS,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::{lambda(BOOL)#1}>(v2);
  v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2);
  if (v3 < 0x100u)
    return IPC::Connection::cancelReply<Messages::NetworkProcessProxy::DataTaskDidReceiveResponse,WebKit::NetworkSessionCocoa::BlobDataTaskClient::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::NegotiatedLegacyTLS,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::{lambda(BOOL)#1}>(v2);
  v5 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 2 * (v3 == 0));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

void sub_196FF775C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t IPC::Connection::cancelReply<Messages::NetworkProcessProxy::DataTaskDidReceiveResponse,WebKit::NetworkSessionCocoa::BlobDataTaskClient::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::NegotiatedLegacyTLS,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::{lambda(BOOL)#1}>(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, 2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_196FF77B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN6WebKit19NetworkSessionCocoa18BlobDataTaskClient14didReceiveDataERKN7WebCore12SharedBufferEEUlT_E_vJNSt3__14spanIKhLm18446744073709551615EEEEE4callESE_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a3;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 24);
  v6[0] = v3 + 40;
  v6[1] = v7;
  return IPC::Connection::send<Messages::NetworkProcessProxy::DataTaskDidReceiveData>(v4, (uint64_t)v6, 0, 0, 0);
}

uint64_t IPC::Connection::send<Messages::NetworkProcessProxy::DataTaskDidReceiveData>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 303;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v10, *(uint64_t **)a2);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v10, **(const void ***)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

void sub_196FF78EC(_Unwind_Exception *a1, void *a2)
{
  IPC::Encoder *v2;
  WTF *v4;
  void *v5;

  IPC::Encoder::~Encoder(v2, a2);
  WTF::fastFree(v4, v5);
  _Unwind_Resume(a1);
}

uint64_t IPC::Connection::send<Messages::NetworkProcessProxy::DataTaskDidCompleteWithError>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 302;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v10, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::ResourceError,void>::encode((IPC::Encoder *)v10, *(WebCore::ResourceError **)(a2 + 8));
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

void sub_196FF79CC(_Unwind_Exception *a1, void *a2)
{
  IPC::Encoder *v2;
  WTF *v4;
  void *v5;

  IPC::Encoder::~Encoder(v2, a2);
  WTF::fastFree(v4, v5);
  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (uint64_t *)(v4 + 16 * i);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v14 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          v17 = v13 & ((v16 >> 31) ^ v16);
          v18 = 1;
          do
          {
            v19 = v17;
            v20 = *(_QWORD *)(v12 + 16 * v17);
            v17 = (v17 + v18++) & v13;
          }
          while (v20);
          v21 = v12 + 16 * v19;
          std::unique_ptr<WebKit::NetworkSessionCocoa::BlobDataTaskClient>::reset[abi:sn180100]((WebKit::NetworkSessionCocoa::BlobDataTaskClient **)(v21 + 8), 0);
          *(_QWORD *)v21 = *v10;
          v22 = v4 + 16 * i;
          v23 = *(_QWORD *)(v22 + 8);
          v22 += 8;
          *(_QWORD *)v22 = 0;
          *(_QWORD *)(v21 + 8) = v23;
          std::unique_ptr<WebKit::NetworkSessionCocoa::BlobDataTaskClient>::reset[abi:sn180100]((WebKit::NetworkSessionCocoa::BlobDataTaskClient **)v22, 0);
        }
        else
        {
          std::unique_ptr<WebKit::NetworkSessionCocoa::BlobDataTaskClient>::reset[abi:sn180100]((WebKit::NetworkSessionCocoa::BlobDataTaskClient **)(v4 + 16 * i + 8), 0);
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  const void *v30;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = (uint64_t *)(v17 + 16 * v24);
          v27 = (const void *)v26[1];
          v26[1] = 0;
          if (v27)
            CFRelease(v27);
          *v26 = *v13;
          v28 = v6 + 16 * v11;
          v29 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          v26[1] = v29;
          v30 = *(const void **)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v30)
            CFRelease(v30);
          if (v13 == a3)
            v12 = v26;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(const void **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
            CFRelease(v16);
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, _QWORD *a2)
{
  const void *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  v3 = (const void *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (v3)
    CFRelease(v3);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v8 >> 1, 0);
  }
}

WebKit::NetworkSessionCocoa::BlobDataTaskClient *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, uint64_t a2)
{
  WebKit::NetworkSessionCocoa::BlobDataTaskClient *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)a2 = -1;
  result = std::unique_ptr<WebKit::NetworkSessionCocoa::BlobDataTaskClient>::reset[abi:sn180100]((WebKit::NetworkSessionCocoa::BlobDataTaskClient **)(a2 + 8), 0);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (WebKit::NetworkSessionCocoa::BlobDataTaskClient *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v8 >> 1);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    v6 = v2 & ((v5 >> 31) ^ v5);
    v7 = *(_QWORD *)(result + 16 * v6);
    if (v7 == a2)
    {
LABEL_6:
      result += 16 * v6;
    }
    else
    {
      v8 = 1;
      while (v7)
      {
        v6 = ((_DWORD)v6 + v8) & v2;
        v7 = *(_QWORD *)(result + 16 * v6);
        ++v8;
        if (v7 == a2)
          goto LABEL_6;
      }
      result += 16 * *(unsigned int *)(result - 4);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>>::expand(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t result;
  void *v7;
  uint64_t i;
  WebKit::SessionSet **v9;
  WebKit::SessionSet *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  WebKit::SessionSet **v20;
  WebKit::SessionSet *v21;
  WebKit::SessionSet *v22;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  result = WTF::fastZeroedMalloc((WTF *)(8 * v5 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v9 = (WebKit::SessionSet **)(v2 + 8 * i);
      v10 = *v9;
      if (*v9 != (WebKit::SessionSet *)-1)
      {
        if (v10)
        {
          v11 = *a1;
          if (*a1)
            v12 = *(_DWORD *)(v11 - 8);
          else
            v12 = 0;
          v13 = ((unint64_t)v10 + ~((_QWORD)v10 << 32)) ^ (((unint64_t)v10 + ~((_QWORD)v10 << 32)) >> 22);
          v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
          v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
          v16 = v12 & ((v15 >> 31) ^ v15);
          v17 = 1;
          do
          {
            v18 = v16;
            v19 = *(_QWORD *)(v11 + 8 * v16);
            v16 = (v16 + v17++) & v12;
          }
          while (v19);
          v20 = (WebKit::SessionSet **)(v11 + 8 * v18);
          *v20 = 0;
          v21 = *v9;
          *v9 = 0;
          *v20 = v21;
          v22 = *v9;
          *v9 = 0;
          if (v22)
            WTF::RefCounted<WebKit::SessionSet>::deref(v22, v7);
        }
        else
        {
          *v9 = 0;
        }
      }
    }
  }
  else if (!v2)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v2 - 16), v7);
}

uint64_t WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SecurityOriginData&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;

  v3 = WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__copy_constructor(*(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12), v3);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

uint64_t *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *a1, int8x16_t *a2, int a3, uint64_t a4, int8x16_t *a5, int a6, uint64_t a7, uint64_t a8, int8x16_t *a9, int a10)
{
  char *v13;
  char *v14;
  __int128 v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  char *v19;
  char *v20;
  char *v21;
  __int16 v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int16 v34;
  uint64_t *result;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  char *v45;
  char *v46;
  char *v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;
  int8x16x2_t v51;
  int8x16x2_t v52;
  int8x16x2_t v53;
  int8x16x2_t v54;
  int8x16x2_t v55;
  int8x16x2_t v56;
  int8x16x2_t v57;
  int8x16x2_t v58;
  int8x16x2_t v59;

  v13 = &a1[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v14 = &a1[2 * (a3 & 0xFFFFFFC0)];
    v15 = 0uLL;
    do
    {
      v51.val[0] = *a2;
      v16 = a2[1];
      v54.val[0] = a2[2];
      v17 = a2[3];
      a2 += 4;
      v18 = v17;
      v54.val[1] = 0uLL;
      v57.val[0] = v16;
      v51.val[1] = 0uLL;
      v19 = a1;
      vst2q_s8(v19, v51);
      v19 += 32;
      v57.val[1] = 0uLL;
      vst2q_s8(v19, v57);
      v20 = a1 + 64;
      vst2q_s8(v20, v54);
      v21 = a1 + 96;
      vst2q_s8(v21, *(int8x16x2_t *)(&v15 - 1));
      a1 += 128;
    }
    while (a1 != v14);
    a1 = v14;
  }
  while (a1 != v13)
  {
    v22 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)a1 = v22;
    a1 += 2;
  }
  v49 = a4;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v49, v13);
  v23 = v49;
  if (v49)
    v23 = *(unsigned int *)(v49 + 4);
  v24 = &v13[2 * v23];
  v25 = &v24[2 * a6];
  if ((a6 & 0xFFFFFFC0) != 0)
  {
    v26 = &v24[2 * (a6 & 0xFFFFFFC0)];
    v27 = 0uLL;
    do
    {
      v52.val[0] = *a5;
      v28 = a5[1];
      v55.val[0] = a5[2];
      v29 = a5[3];
      a5 += 4;
      v30 = v29;
      v55.val[1] = 0uLL;
      v58.val[0] = v28;
      v52.val[1] = 0uLL;
      v31 = v24;
      vst2q_s8(v31, v52);
      v31 += 32;
      v58.val[1] = 0uLL;
      vst2q_s8(v31, v58);
      v32 = v24 + 64;
      vst2q_s8(v32, v55);
      v33 = v24 + 96;
      vst2q_s8(v33, *(int8x16x2_t *)(&v27 - 1));
      v24 += 128;
    }
    while (v24 != v26);
    v24 = v26;
  }
  while (v24 != v25)
  {
    v34 = a5->u8[0];
    a5 = (int8x16_t *)((char *)a5 + 1);
    *(_WORD *)v24 = v34;
    v24 += 2;
  }
  v50 = a7;
  result = WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v50, v25);
  v37 = v50;
  if (v50)
    v37 = *(unsigned int *)(v50 + 4);
  v38 = &v25[2 * v37];
  v39 = &v38[2 * a10];
  if ((a10 & 0xFFFFFFC0) != 0)
  {
    v40 = &v38[2 * (a10 & 0xFFFFFFC0)];
    v41 = 0uLL;
    do
    {
      v53.val[0] = *a9;
      v42 = a9[1];
      v56.val[0] = a9[2];
      v43 = a9[3];
      a9 += 4;
      v44 = v43;
      v56.val[1] = 0uLL;
      v59.val[0] = v42;
      v53.val[1] = 0uLL;
      v45 = v38;
      vst2q_s8(v45, v53);
      v45 += 32;
      v59.val[1] = 0uLL;
      vst2q_s8(v45, v59);
      v46 = v38 + 64;
      vst2q_s8(v46, v56);
      v47 = v38 + 96;
      vst2q_s8(v47, *(int8x16x2_t *)(&v41 - 1));
      v38 += 128;
    }
    while (v38 != v40);
    v38 = v40;
  }
  while (v38 != v39)
  {
    v48 = a9->u8[0];
    a9 = (int8x16_t *)((char *)a9 + 1);
    *(_WORD *)v38 = v48;
    v38 += 2;
  }
  return result;
}

WTF *WTF::Vector<WTF::RetainPtr<NSObject  {objcproto18OS_nw_proxy_config}*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(WTF *result, void *a2)
{
  WTF *v2;
  uint64_t v3;
  const void **v4;
  uint64_t v5;
  const void *v6;

  if (*((_DWORD *)result + 2))
  {
    v2 = result;
    v3 = *((unsigned int *)result + 3);
    if ((_DWORD)v3)
    {
      v4 = *(const void ***)result;
      v5 = 8 * v3;
      do
      {
        v6 = *v4;
        *v4 = 0;
        if (v6)
          CFRelease(v6);
        ++v4;
        v5 -= 8;
      }
      while (v5);
      *((_DWORD *)v2 + 3) = 0;
    }
    result = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      return (WTF *)WTF::fastFree(result, a2);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkSessionCocoa::clearProxyConfigData(void)::$_0,void,WebKit::SessionWrapper &>::call(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 8);
  if (result)
    return (void *)objc_msgSend(**(id **)(a1 + 8), "addObject:", objc_msgSend(result, "_networkContext"));
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkSessionCocoa::setProxyConfigData(WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,void,WebKit::SessionWrapper &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  const void **v4;
  uint64_t v6;
  WebKit::NetworkSessionCocoa *v7;
  uint64_t v8;
  NSURLSessionConfiguration *v9;
  WKNetworkSessionDelegate *v10;
  const void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v4 = (const void **)(a2 + 8);
  result = *(_QWORD *)(a2 + 8);
  if (result)
  {
    v6 = *(_QWORD *)(a2 + 16);
    if (v6)
    {
      v7 = *(WebKit::NetworkSessionCocoa **)(a1 + 8);
      v8 = *(unsigned __int8 *)(v6 + 24);
      v9 = (NSURLSessionConfiguration *)objc_msgSend((id)result, "configuration");
      WebKit::NetworkSessionCocoa::applyProxyConfigurationToSessionConfiguration(v7, v9);
      objc_msgSend(*(id *)(a2 + 8), "invalidateAndCancel");
      objc_msgSend(*(id *)(a2 + 16), "sessionInvalidated");
      v10 = -[WKNetworkSessionDelegate initWithNetworkSession:wrapper:withCredentials:]([WKNetworkSessionDelegate alloc], "initWithNetworkSession:wrapper:withCredentials:", v7, a2, v8);
      v11 = *(const void **)(a2 + 16);
      *(_QWORD *)(a2 + 16) = v10;
      if (v11)
      {
        CFRelease(v11);
        v10 = *(WKNetworkSessionDelegate **)(a2 + 16);
      }
      WTF::RetainPtr<NSURLSession>::operator=(v4, (CFTypeRef)objc_msgSend(MEMORY[0x1E0C92C98], "sessionWithConfiguration:delegate:delegateQueue:", v9, v10, objc_msgSend(MEMORY[0x1E0CB3828], "mainQueue")));
      v13 = *(_QWORD *)(a2 + 24);
      if (v13)
      {
        *(_QWORD *)(a2 + 24) = 0;
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v13, v12);
      }
      v14 = *(_QWORD *)(a2 + 32);
      if (v14)
      {
        *(_QWORD *)(a2 + 32) = 0;
        WTF::fastFree((WTF *)(v14 - 16), v12);
      }
      result = *(_QWORD *)(a2 + 40);
      if (result)
      {
        *(_QWORD *)(a2 + 40) = 0;
        return WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(result, v12);
      }
    }
    else
    {
      result = 1348;
      __break(0xC471u);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkSessionCocoa::setProxyConfigData(WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_1,void,WebKit::SessionWrapper &>::call(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 8);
  if (result)
    return (void *)objc_msgSend(**(id **)(a1 + 8), "addObject:", objc_msgSend(result, "_networkContext"));
  return result;
}

void WebKit::RemoteGraphicsContextGLProxy::didReceiveMessage(WebKit::RemoteGraphicsContextGLProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  int v7;
  unint64_t v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  _BYTE *v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int *v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  BOOL v25;
  unsigned int *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  int v31;
  WTF::StringImpl *v32;
  int v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  char v65;
  char v66;
  _BYTE v67[4];
  int v68;
  char v69;
  _BYTE v70[4];
  int v71;
  char v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  char v76;
  char v77;

  v7 = *((unsigned __int16 *)a3 + 25);
  if (v7 == 879)
  {
    v15 = *((_QWORD *)a3 + 1);
    v16 = *(_QWORD *)a3;
    v17 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
    if (v15 >= v17 && v15 - v17 > 3)
    {
      v19 = (unsigned int *)(v16 + v17);
      *((_QWORD *)a3 + 2) = v19 + 1;
      if (v16)
      {
        v20 = (((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v16;
        v21 = v15 >= v20 && v15 - v20 > 3;
        if (v21
          && ((v22 = *v19,
               *((_QWORD *)a3 + 2) = (((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4,
               v23 = *(unsigned int *)(((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFFFCLL),
               v24 = (((((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v16,
               v15 >= v24)
            ? (v25 = v15 - v24 > 3)
            : (v25 = 0),
              v25))
        {
          v26 = (unsigned int *)(v16 + v24);
          v27 = *v26;
          *((_QWORD *)a3 + 2) = v26 + 1;
          IPC::Decoder::decode<WTF::String>((uint64_t *)a3, &v73);
          if ((_BYTE)v74)
          {
            v60 = __PAIR64__(v23, v22);
            LODWORD(v61) = v27;
            v62 = v73;
            LOBYTE(v63) = 1;
            if (!*((_QWORD *)this + 12)
              || (v29 = *((_QWORD *)this + 5)) == 0
              || ((*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v29 + 24))(v29, v22, v23, v27, &v62), (_BYTE)v63))
            {
              v30 = v62;
              v62 = 0;
              if (v30)
              {
                if (*(_DWORD *)v30 == 2)
                  WTF::StringImpl::destroy(v30, v28);
                else
                  *(_DWORD *)v30 -= 2;
              }
            }
            return;
          }
        }
        else
        {
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v36 = *((_QWORD *)a3 + 3);
          if (v36)
          {
            if (v15)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
              v37 = *(_QWORD *)a3;
              v38 = *((_QWORD *)a3 + 1);
              v39 = *((_QWORD *)a3 + 3);
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              if (v39)
              {
                if (v38)
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 16))(v39, v37);
              }
            }
          }
        }
LABEL_60:
        v44 = *(_QWORD *)a3;
        v45 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v46 = *((_QWORD *)a3 + 3);
        if (v46 && v45)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v46 + 16))(v46, v44);
        return;
      }
      v40 = v15;
      v41 = 0;
    }
    else
    {
      v40 = 0;
      v41 = 0;
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v42 = *((_QWORD *)a3 + 3);
      if (v42)
      {
        if (v15)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 16))(v42);
          v41 = *(_QWORD *)a3;
          v40 = *((_QWORD *)a3 + 1);
        }
        else
        {
          v40 = 0;
          v41 = 0;
        }
      }
    }
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    v43 = *((_QWORD *)a3 + 3);
    if (v43 && v40)
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v43 + 16))(v43, v41, v40);
    goto LABEL_60;
  }
  if (v7 != 878)
  {
    if (v7 != 877)
      return;
    IPC::Decoder::decode<IPC::Semaphore>(a3, v67);
    if (!v69)
    {
      LOBYTE(v60) = 0;
      v66 = 0;
LABEL_50:
      if (v66
        || (v47 = *(_QWORD *)a3,
            v48 = *((_QWORD *)a3 + 1),
            *(_QWORD *)a3 = 0,
            *((_QWORD *)a3 + 1) = 0,
            (v49 = *((_QWORD *)a3 + 3)) != 0)
        && v48
        && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v49 + 16))(v49, v47), v66))
      {
        WebKit::RemoteGraphicsContextGLProxy::wasCreated(this, (uint64_t)&v60, (uint64_t)&v61, (uint64_t)&v62);
        if (v66)
        {
          std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v62, v35);
          IPC::Semaphore::destroy((IPC::Semaphore *)&v61);
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v61);
          IPC::Semaphore::destroy((IPC::Semaphore *)&v60);
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v60);
        }
      }
      return;
    }
    IPC::Decoder::decode<IPC::Semaphore>(a3, v70);
    if (!v72)
    {
      LOBYTE(v60) = 0;
      v66 = 0;
LABEL_48:
      if (v69)
      {
        IPC::Semaphore::destroy((IPC::Semaphore *)v67);
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v67);
      }
      goto LABEL_50;
    }
    v8 = *((_QWORD *)a3 + 1);
    v9 = *(WTF::StringImpl **)a3;
    v10 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
    if (v8 > v10)
    {
      v11 = (char *)v9 + v10;
      *((_QWORD *)a3 + 2) = v11 + 1;
      if (!v9)
      {
        v50 = v8;
        v51 = 0;
LABEL_70:
        v8 = 0;
        v9 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v53 = *((_QWORD *)a3 + 3);
        if (v53)
        {
          if (v50)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v53 + 16))(v53, v51, v50);
            v9 = *(WTF::StringImpl **)a3;
            v8 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v8 = 0;
            v9 = 0;
          }
        }
        goto LABEL_71;
      }
      v12 = *v11;
      if (v12 >= 2)
      {
LABEL_71:
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v54 = *((_QWORD *)a3 + 3);
        if (v54 && v8)
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v54 + 16))(v54, v9);
        goto LABEL_76;
      }
      if (*v11)
      {
        IPC::ArgumentCoder<WebKit::RemoteGraphicsContextGLInitializationState,void>::decode((uint64_t *)a3, (uint64_t)&v60);
        if (!(_BYTE)v63)
        {
          v13 = *(WTF::StringImpl **)a3;
          v55 = *((_QWORD *)a3 + 1);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v56 = *((_QWORD *)a3 + 3);
          if (!v56
            || !v55
            || ((*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v56 + 16))(v56, v13), !(_BYTE)v63))
          {
            std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v60, v13);
LABEL_76:
            v57 = *(_QWORD *)a3;
            v58 = *((_QWORD *)a3 + 1);
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v59 = *((_QWORD *)a3 + 3);
            if (v59 && v58)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v59 + 16))(v59, v57);
            LOBYTE(v60) = 0;
            v66 = 0;
LABEL_46:
            if (v72)
            {
              IPC::Semaphore::destroy((IPC::Semaphore *)v70);
              WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v70);
            }
            goto LABEL_48;
          }
        }
        v14 = (WTF::StringImpl *)v60;
        v3 = v61;
        v60 = 0;
        v61 = 0;
        v73 = v14;
        v74 = v3;
        v4 = v62;
        v75 = v62;
        v76 = 1;
        v77 = 1;
        std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v60, v13);
      }
      else
      {
        LOBYTE(v60) = 0;
        LOBYTE(v63) = 0;
        LOBYTE(v73) = 0;
        v76 = 0;
        v77 = 1;
        std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v60, v9);
      }
      if (v69 && v72)
      {
        WTF::MachSendRight::MachSendRight();
        v31 = v68;
        v68 = 0;
        HIDWORD(v60) = v31;
        WTF::MachSendRight::MachSendRight();
        v33 = v71;
        v71 = 0;
        HIDWORD(v61) = v33;
        LOBYTE(v62) = 0;
        v65 = 0;
        if (v12)
        {
          v34 = v73;
          v73 = 0;
          v74 = 0;
          v62 = v34;
          v63 = v3;
          v64 = v4;
          v65 = 1;
        }
        v66 = 1;
        std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v73, v32);
        goto LABEL_46;
      }
      __break(1u);
    }
    v50 = 0;
    v51 = 0;
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    v52 = *((_QWORD *)a3 + 3);
    if (v52)
    {
      if (v8)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v52 + 16))(v52);
        v51 = *(_QWORD *)a3;
        v50 = *((_QWORD *)a3 + 1);
      }
      else
      {
        v50 = 0;
        v51 = 0;
      }
    }
    goto LABEL_70;
  }
  if (*((_QWORD *)this + 12))
  {
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
  }
}

unsigned __int8 ***WebKit::RemotePipelineLayout::didReceiveStreamMessage(unsigned __int8 ***this, uint64_t **a2, IPC::Decoder *a3)
{
  unsigned __int8 ***v3;
  int v4;
  unsigned __int8 ***v5;
  WTF::StringImpl *v7;
  unsigned __int8 **v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t *v13;
  WTF::StringImpl *v14;
  char v15;

  v3 = this;
  v4 = *((unsigned __int16 *)a3 + 25);
  if (v4 == 1235)
  {
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a2 + 4);
    IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)&v14);
    if (v15)
    {
      v8 = v3[2];
      v9 = (WTF::StringImpl *)v8[3];
      v10 = v14;
      v14 = 0;
      v8[3] = (unsigned __int8 *)v10;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v7);
        else
          *(_DWORD *)v9 -= 2;
      }
      (*((void (**)(unsigned __int8 **, unsigned __int8 **))*v8 + 2))(v8, v8 + 3);
      if (v15)
      {
        v12 = v14;
        v14 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v11);
          else
            *(_DWORD *)v12 -= 2;
        }
      }
    }
    v5 = (unsigned __int8 ***)&v13;
  }
  else
  {
    if (v4 != 1234)
      return this;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v14, a2 + 4);
    WebKit::WebGPU::ObjectHeap::removeObject((uint64_t)v3[3][1], (uint64_t)v3[5]);
    v5 = (unsigned __int8 ***)&v14;
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v5);
}

unsigned __int8 ***WebKit::RemotePresentationContext::didReceiveStreamMessage(unsigned __int8 ***this, uint64_t **a2, IPC::Decoder *a3)
{
  uint64_t v4;
  void *v5;
  WTF *v6;
  uint64_t **v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  __int16 v16;
  WTF *v17;
  uint64_t v18;
  __int16 v19;
  char v20;
  char v21;
  uint64_t *v22;
  __int16 v23;
  WTF *v24;
  uint64_t v25;
  __int16 v26;
  char v27;
  char v28;

  v4 = (uint64_t)this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x4D4:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v14, a2 + 4);
      IPC::ArgumentCoder<WebKit::WebGPU::CanvasConfiguration,void>::decode((uint64_t *)a3, (uint64_t)&v22);
      if (v28)
        goto LABEL_3;
      v10 = *(_QWORD *)a3;
      v11 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v12 = *((_QWORD *)a3 + 3);
      if (v12)
      {
        if (v11)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v10);
          if (v28)
          {
LABEL_3:
            v15 = v22;
            v16 = v23;
            v17 = v24;
            v18 = v25;
            v19 = v26;
            v20 = v27;
            v21 = 1;
            WebKit::RemotePresentationContext::configure(v4, (uint64_t)&v15);
            if (v21)
            {
              v6 = v17;
              if (v17)
              {
                v17 = 0;
                LODWORD(v18) = 0;
                WTF::fastFree(v6, v5);
              }
            }
LABEL_6:
            v7 = &v14;
            return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v7);
          }
          v13 = *(_QWORD *)a3;
          v11 = *((_QWORD *)a3 + 1);
          v12 = *((_QWORD *)a3 + 3);
LABEL_16:
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          if (v12 && v11)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v13);
          goto LABEL_6;
        }
      }
      else
      {
        v11 = 0;
      }
      v13 = 0;
      goto LABEL_16;
    case 0x4D5:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v22, a2 + 4);
      v8 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v9)
        WebKit::RemotePresentationContext::getCurrentTexture(v4, v8);
      goto LABEL_11;
    case 0x4D6:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v22, a2 + 4);
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 16) + 32))(*(_QWORD *)(v4 + 16), 0);
      goto LABEL_11;
    case 0x4D7:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v22, a2 + 4);
      (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 16) + 24))(*(_QWORD *)(v4 + 16));
LABEL_11:
      v7 = &v22;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v7);
    default:
      return this;
  }
}

unsigned __int8 ***WebKit::RemoteQuerySet::didReceiveStreamMessage(unsigned __int8 ***this, uint64_t **a2, IPC::Decoder *a3)
{
  unsigned __int8 ***v3;
  int v4;
  WTF::StringImpl *v6;
  unsigned __int8 **v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  unsigned __int8 ***v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t *v13;
  WTF::StringImpl *v14;
  char v15;

  v3 = this;
  v4 = *((unsigned __int16 *)a3 + 25);
  if (v4 == 1242)
  {
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a2 + 4);
    IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)&v14);
    if (v15)
    {
      v7 = v3[2];
      v8 = (WTF::StringImpl *)v7[3];
      v9 = v14;
      v14 = 0;
      v7[3] = (unsigned __int8 *)v9;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v6);
        else
          *(_DWORD *)v8 -= 2;
      }
      (*((void (**)(unsigned __int8 **, unsigned __int8 **))*v7 + 3))(v7, v7 + 3);
      if (v15)
      {
        v12 = v14;
        v14 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v11);
          else
            *(_DWORD *)v12 -= 2;
        }
      }
    }
    v10 = (unsigned __int8 ***)&v13;
  }
  else
  {
    if (v4 == 1241)
    {
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v14, a2 + 4);
      WebKit::WebGPU::ObjectHeap::removeObject((uint64_t)v3[3][1], (uint64_t)v3[5]);
    }
    else
    {
      if (v4 != 1240)
        return this;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v14, a2 + 4);
      (*((void (**)(unsigned __int8 **))*v3[2] + 2))(v3[2]);
    }
    v10 = (unsigned __int8 ***)&v14;
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v10);
}

unsigned __int8 ***WebKit::RemoteQueue::didReceiveStreamMessage(unsigned __int8 ***this, uint64_t **a2, IPC::Decoder *a3)
{
  unsigned __int8 **v3;
  uint64_t *v4;
  unsigned __int8 ***v5;
  void *v6;
  unsigned __int8 **v7;
  WTF::StringImpl *v8;
  char v9;
  WTF::StringImpl *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t **v13;
  WTF::StringImpl *v14;
  unsigned __int8 **v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int8 ***v24;
  WTF::StringImpl *v25;
  unsigned __int8 **v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t *v29;
  char v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  char v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 **v59;
  WTF::StringImpl *v60;
  unsigned __int8 **v61;
  int v62;
  unsigned __int8 **v63;
  int v64;
  uint64_t *v65;
  int v66;
  char v67[8];
  uint64_t *v68;
  int v69;
  __int128 v70;
  uint64_t v71;
  char v72[8];
  int v73;
  int v74;
  char v75;
  uint64_t *v76[2];
  char v77;
  char v78;
  char v79;
  uint64_t *v80[2];
  int v81;
  char v82;
  char v83;
  char v84;
  uint64_t *v85;
  unsigned __int8 **v86;
  char v87[8];
  char v88;
  int v89;
  char v90;
  char v91;
  __int16 v92;
  char v93;
  __int128 v94;
  uint64_t v95;
  char v96;

  v4 = (uint64_t *)a3;
  v5 = this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x4DB:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v76, a2 + 4);
      IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyExternalImage,void>::decode(v4, v80);
      if (v84
        || (v33 = *v4, v34 = v4[1], *v4 = 0, v4[1] = 0, (v35 = v4[3]) != 0)
        && v34
        && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 16))(v35, v33), v84))
      {
        IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyTextureTagged,void>::decode(v4, (uint64_t)&v85);
        if (v93
          || (v36 = *v4, v37 = v4[1], *v4 = 0, v4[1] = 0, (v38 = v4[3]) != 0)
          && v37
          && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 16))(v38, v36), v93))
        {
          IPC::Decoder::decode<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>>(v4, &v94);
          if (v96)
          {
            if (!v84 || !v93)
              goto LABEL_126;
            LOBYTE(v60) = 0;
            LOBYTE(v63) = 0;
            if (v82)
            {
              v62 = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,(std::__variant_detail::_Trait)1>>((uint64_t)&v60, (uint64_t)v80);
              LOBYTE(v63) = 1;
            }
            LOBYTE(v64) = v83;
            v65 = v85;
            v66 = (int)v86;
            v67[0] = 0;
            LOBYTE(v70) = 0;
            if (v90)
            {
              v69 = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,(std::__variant_detail::_Trait)1>>((uint64_t)v67, (uint64_t)v87);
              LOBYTE(v70) = 1;
            }
            BYTE8(v70) = v91;
            *(_WORD *)((char *)&v70 + 9) = v92;
            LOBYTE(v71) = 0;
            v73 = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>,(std::__variant_detail::_Trait)1>>((uint64_t)&v71, (uint64_t)&v94);
            LOBYTE(v74) = 1;
            if (v96 && (_DWORD)v95 != -1)
              ((void (*)(unsigned __int8 ***, __int128 *))off_1E34B62D0[v95])(&v59, &v94);
          }
          else
          {
            LOBYTE(v60) = 0;
            LOBYTE(v74) = 0;
          }
          if (v93 && v90 && v89 != -1)
            ((void (*)(__int128 *, char *))off_1E34B62C0[v89])(&v94, v87);
        }
        else
        {
          LOBYTE(v60) = 0;
          LOBYTE(v74) = 0;
        }
        if (v84 && v82 && v81 != -1)
          ((void (*)(uint64_t **, uint64_t **))off_1E34B6308[v81])(&v85, v80);
      }
      else
      {
        LOBYTE(v60) = 0;
        LOBYTE(v74) = 0;
      }
      if ((_BYTE)v74
        || (v39 = *v4, v40 = v4[1], *v4 = 0, v4[1] = 0, (v41 = v4[3]) != 0)
        && v40
        && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v41 + 16))(v41, v39), (_BYTE)v74))
      {
        WebKit::RemoteQueue::copyExternalImageToTexture((uint64_t)v5, (uint64_t)&v60, (uint64_t)&v65, (uint64_t)&v71);
        if ((_BYTE)v74)
        {
          if (v73 != -1)
            ((void (*)(uint64_t **, uint64_t *))off_1E34B62D0[v73])(&v85, &v71);
          v73 = -1;
          if ((_BYTE)v70)
          {
            if (v69 != -1)
              ((void (*)(uint64_t **, char *))off_1E34B62C0[v69])(&v85, v67);
            v69 = -1;
          }
          if ((_BYTE)v63)
          {
            if (v62 != -1)
              ((void (*)(uint64_t **, WTF::StringImpl **))off_1E34B6308[v62])(&v85, &v60);
          }
        }
      }
      v13 = v76;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v13);
    case 0x4DC:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v60, a2 + 4);
      WebKit::WebGPU::ObjectHeap::removeObject((uint64_t)v5[3][1], (uint64_t)v5[5]);
      v13 = (uint64_t **)&v60;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v13);
    case 0x4DD:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v80, a2 + 4);
      v7 = (unsigned __int8 **)v80[0];
      v8 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v4);
      if (v9)
      {
        v10 = v8;
        v60 = v8;
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v7);
        v11 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
        *v11 = (uint64_t)off_1E34B6280;
        v11[1] = (uint64_t)v10;
        v61 = 0;
        v11[2] = (uint64_t)v7;
        v85 = v11;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v61);
        WebKit::RemoteQueue::onSubmittedWorkDone((uint64_t)v5, (uint64_t *)&v85);
        v12 = v85;
        v85 = 0;
        if (v12)
          (*(void (**)(uint64_t *))(*v12 + 8))(v12);
      }
      v13 = v80;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v13);
    case 0x4DE:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v85, a2 + 4);
      IPC::Decoder::decode<std::tuple<WTF::String>>(v4, (uint64_t)&v60);
      if ((_BYTE)v61)
      {
        v15 = v5[2];
        v16 = (WTF::StringImpl *)v15[2];
        v17 = v60;
        v60 = 0;
        v15[2] = (unsigned __int8 *)v17;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v14);
          else
            *(_DWORD *)v16 -= 2;
        }
        (*((void (**)(unsigned __int8 **, unsigned __int8 **))*v15 + 9))(v15, v15 + 2);
        if ((_BYTE)v61)
        {
          v28 = v60;
          v60 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
              WTF::StringImpl::destroy(v28, v27);
            else
              *(_DWORD *)v28 -= 2;
          }
        }
      }
      goto LABEL_78;
    case 0x4DF:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v85, a2 + 4);
      IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)&v60, v4);
      if ((_BYTE)v62)
      {
        WebKit::RemoteQueue::submit((WTF *)v5, (uint64_t)&v60);
        if (v60)
          WTF::fastFree(v60, v6);
      }
LABEL_78:
      v13 = &v85;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v13);
    case 0x4E0:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v94, a2 + 4);
      v3 = (unsigned __int8 **)v94;
      v18 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v4);
      if (!v19)
        goto LABEL_97;
      v20 = v4[1];
      v21 = *v4;
      v22 = ((v4[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v4;
      if (v20 < v22 || v20 - v22 <= 7)
      {
        v42 = 0;
        v43 = 0;
        *v4 = 0;
        v4[1] = 0;
        v44 = v4[3];
        if (v44)
        {
          if (v20)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v44 + 16))(v44, v21, v20);
            v43 = *v4;
            v42 = v4[1];
          }
          else
          {
            v42 = 0;
            v43 = 0;
          }
        }
        goto LABEL_96;
      }
      v24 = (unsigned __int8 ***)(v21 + v22);
      v4[2] = (uint64_t)(v24 + 1);
      if (!v21)
      {
        v42 = v20;
        v43 = 0;
LABEL_96:
        *v4 = 0;
        v4[1] = 0;
        v45 = v4[3];
        if (v45 && v42)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v45 + 16))(v45, v43);
        goto LABEL_97;
      }
      v25 = (WTF::StringImpl *)v18;
      v26 = *v24;
      IPC::Decoder::decode<std::optional<WebCore::SharedMemoryHandle>>(v4, (uint64_t)&v85);
      if (v88)
      {
        v60 = v25;
        v61 = v26;
        LOBYTE(v62) = 0;
        LOBYTE(v64) = 0;
        if (v87[0])
        {
          WTF::MachSendRight::MachSendRight();
          v63 = v86;
          LOBYTE(v64) = 1;
          LOBYTE(v65) = 1;
          if (v88 && v87[0])
            WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v85);
        }
        else
        {
          LOBYTE(v65) = 1;
        }
        goto LABEL_80;
      }
LABEL_97:
      LOBYTE(v60) = 0;
      LOBYTE(v65) = 0;
      v46 = *v4;
      v47 = v4[1];
      *v4 = 0;
      v4[1] = 0;
      v48 = v4[3];
      if (!v48)
        goto LABEL_98;
      if (!v47)
        goto LABEL_98;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v48 + 16))(v48, v46);
      if (!(_BYTE)v65)
        goto LABEL_98;
LABEL_80:
      v29 = (uint64_t *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v4);
      if (v30)
      {
        v4 = v29;
        v85 = v29;
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v3);
        v31 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
        *v31 = (uint64_t)off_1E34B62A8;
        v31[1] = (uint64_t)v4;
        v86 = 0;
        v31[2] = (uint64_t)v3;
        v80[0] = v31;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v86);
        if (!(_BYTE)v65)
          goto LABEL_126;
        WebKit::RemoteQueue::writeBuffer((uint64_t)v5, (uint64_t)v60, (uint64_t)v61, (uint64_t)&v62, (uint64_t *)v80);
        v32 = v80[0];
        v80[0] = 0;
        if (v32)
          (*(void (**)(uint64_t *))(*v32 + 8))(v32);
      }
      if ((_BYTE)v65 && (_BYTE)v64)
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v62);
LABEL_98:
      v13 = (uint64_t **)&v94;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v13);
    case 0x4E1:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v59, a2 + 4);
      v3 = v59;
      IPC::Decoder::decode<WebKit::WebGPU::ImageCopyTexture>(v4, (uint64_t)&v85);
      if (!v93)
      {
        LOBYTE(v60) = 0;
        v75 = 0;
        goto LABEL_111;
      }
      IPC::Decoder::decode<std::optional<WebCore::SharedMemoryHandle>>(v4, (uint64_t)v76);
      if (!v78)
      {
        LOBYTE(v60) = 0;
        v75 = 0;
        goto LABEL_107;
      }
      IPC::ArgumentCoder<WebKit::WebGPU::ImageDataLayout,void>::decode(v4, (uint64_t)&v94);
      if (!v96)
      {
        v49 = *v4;
        v50 = v4[1];
        *v4 = 0;
        v4[1] = 0;
        v51 = v4[3];
        if (v51 && v50)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v51 + 16))(v51, v49);
        goto LABEL_103;
      }
      IPC::Decoder::decode<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>>(v4, v80);
      if (!v82)
      {
LABEL_103:
        LOBYTE(v60) = 0;
        v75 = 0;
        goto LABEL_104;
      }
      if (!v93 || !v78)
        goto LABEL_126;
      std::__tuple_leaf<1ul,WebKit::WebGPU::ImageCopyTexture,false>::__tuple_leaf[abi:sn180100]<WebKit::WebGPU::ImageCopyTexture,void>((uint64_t)&v60, (uint64_t *)&v85);
      v67[0] = 0;
      LOBYTE(v69) = 0;
      if (v77)
      {
        WTF::MachSendRight::MachSendRight();
        v68 = v76[1];
        LOBYTE(v69) = 1;
      }
      v70 = v94;
      v71 = v95;
      v72[0] = 0;
      v74 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>,(std::__variant_detail::_Trait)1>>((uint64_t)v72, (uint64_t)v80);
      v75 = 1;
      if (v82 && v81 != -1)
        ((void (*)(char *, uint64_t **))off_1E34B62D0[v81])(&v79, v80);
LABEL_104:
      if (v78 && v77)
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v76);
LABEL_107:
      if (v93 && v90 && v89 != -1)
        ((void (*)(uint64_t **, char *))off_1E34B62C0[v89])(v80, v87);
LABEL_111:
      if (v75)
        goto LABEL_112;
      while (2)
      {
        v56 = *v4;
        v57 = v4[1];
        *v4 = 0;
        v4[1] = 0;
        v58 = v4[3];
        if (!v58)
          goto LABEL_124;
        if (!v57)
          goto LABEL_124;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v58 + 16))(v58, v56);
        if (!v75)
          goto LABEL_124;
LABEL_112:
        v52 = (uint64_t *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v4);
        if (!v53)
          goto LABEL_116;
        v4 = v52;
        v85 = v52;
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v3);
        v54 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
        *v54 = (uint64_t)off_1E34B62F0;
        v54[1] = (uint64_t)v4;
        v86 = 0;
        v54[2] = (uint64_t)v3;
        v80[0] = v54;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v86);
        if (!v75)
        {
LABEL_126:
          __break(1u);
          continue;
        }
        break;
      }
      WebKit::RemoteQueue::writeTexture((uint64_t)v5, (uint64_t)&v60, (uint64_t)v67, (uint64_t *)&v70, (uint64_t)v72, (uint64_t *)v80);
      v55 = v80[0];
      v80[0] = 0;
      if (v55)
        (*(void (**)(uint64_t *))(*v55 + 8))(v55);
LABEL_116:
      if (v75)
      {
        if (v74 != -1)
          ((void (*)(uint64_t **, char *))off_1E34B62D0[v74])(&v85, v72);
        v74 = -1;
        if ((_BYTE)v69)
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v67);
        if ((_BYTE)v65 && v64 != -1)
          ((void (*)(uint64_t **, int *))off_1E34B62C0[v64])(&v85, &v62);
      }
LABEL_124:
      v13 = (uint64_t **)&v59;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v13);
    default:
      return this;
  }
}

unsigned __int8 ***WebKit::RemoteRenderBundleEncoder::didReceiveStreamMessage(unsigned __int8 ***this, uint64_t **a2, IPC::Decoder *a3)
{
  uint64_t v4;
  unint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _QWORD *v9;
  void (*v10)(_QWORD *, _BYTE *);
  _BYTE *v11;
  void *v12;
  WTF *v13;
  WTF::StringImpl *v14;
  _QWORD *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  unsigned __int8 ***v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  _BYTE v30[40];
  uint64_t v31;
  char v32;
  WTF::StringImpl *v33;
  char v34;

  v4 = (uint64_t)this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x4E4:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v30, a2 + 4);
      WebKit::WebGPU::ObjectHeap::removeObject(*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8), *(_QWORD *)(v4 + 40));
      goto LABEL_36;
    case 0x4E5:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v33, a2 + 4);
      IPC::Decoder::decode<std::tuple<unsigned int,std::optional<unsigned int>,std::optional<unsigned int>,std::optional<unsigned int>>>((uint64_t)v30, (uint64_t *)a3);
      if (v30[28])
        (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v4 + 16) + 40))(*(_QWORD *)(v4 + 16), *(unsigned int *)v30, *(_QWORD *)&v30[4], *(_QWORD *)&v30[12], *(_QWORD *)&v30[20]);
      goto LABEL_51;
    case 0x4E6:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v33, a2 + 4);
      IPC::Decoder::decode<std::tuple<unsigned int,std::optional<unsigned int>,std::optional<unsigned int>,std::optional<int>,std::optional<unsigned int>>>((uint64_t)v30, (uint64_t *)a3);
      if (v30[36])
        (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v4 + 16) + 48))(*(_QWORD *)(v4 + 16), *(unsigned int *)v30, *(_QWORD *)&v30[4], *(_QWORD *)&v30[12], *(_QWORD *)&v30[20], *(_QWORD *)&v30[28]);
      goto LABEL_51;
    case 0x4E7:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v33, a2 + 4);
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>>((uint64_t *)a3, v30);
      if (v30[16])
        WebKit::RemoteRenderBundleEncoder::drawIndexedIndirect(v4, *(uint64_t *)v30, *(uint64_t *)&v30[8]);
      goto LABEL_51;
    case 0x4E8:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v33, a2 + 4);
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>>((uint64_t *)a3, v30);
      if (v30[16])
        WebKit::RemoteRenderBundleEncoder::drawIndirect(v4, *(uint64_t *)v30, *(uint64_t *)&v30[8]);
      goto LABEL_51;
    case 0x4E9:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v29, a2 + 4);
      IPC::ArgumentCoder<WebCore::ApplePayAMSUIRequest,void>::decode((uint64_t *)a3, (uint64_t)&v33);
      if (v34)
      {
        v5 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
        if ((_BYTE)v6)
        {
          *(_QWORD *)v30 = v33;
          *(_QWORD *)&v30[8] = v5;
          v30[16] = 1;
          WebKit::RemoteRenderBundleEncoder::finish(v4, (WTF::StringImpl **)v30, v5);
          if (v30[16])
          {
            v8 = *(WTF::StringImpl **)v30;
            *(_QWORD *)v30 = 0;
            if (v8)
            {
              if (*(_DWORD *)v8 == 2)
                WTF::StringImpl::destroy(v8, v7);
              else
                *(_DWORD *)v8 -= 2;
            }
          }
          goto LABEL_56;
        }
        if (v33)
        {
          if (*(_DWORD *)v33 == 2)
            WTF::StringImpl::destroy(v33, v6);
          else
            *(_DWORD *)v33 -= 2;
        }
      }
      else
      {
        v26 = *(_QWORD *)a3;
        v27 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v28 = *((_QWORD *)a3 + 3);
        if (v28 && v27)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v26);
        v30[0] = 0;
      }
      v23 = *(_QWORD *)a3;
      v24 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v25 = *((_QWORD *)a3 + 3);
      if (v25 && v24)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v23);
LABEL_56:
      v20 = (unsigned __int8 ***)&v29;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v20);
    case 0x4EA:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v33, a2 + 4);
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)v30);
      if (!v30[8])
        goto LABEL_51;
      v9 = *(_QWORD **)(v4 + 16);
      v10 = *(void (**)(_QWORD *, _BYTE *))(*v9 + 104);
      goto LABEL_22;
    case 0x4EB:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v30, a2 + 4);
      (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 16) + 96))(*(_QWORD *)(v4 + 16));
      goto LABEL_36;
    case 0x4EC:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v33, a2 + 4);
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)v30);
      if (!v30[8])
        goto LABEL_51;
      v9 = *(_QWORD **)(v4 + 16);
      v10 = *(void (**)(_QWORD *, _BYTE *))(*v9 + 88);
LABEL_22:
      v11 = v30;
      goto LABEL_46;
    case 0x4ED:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v33, a2 + 4);
      IPC::Decoder::decode<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>((uint64_t *)a3, v30);
      if ((_BYTE)v31)
      {
        WebKit::RemoteRenderBundleEncoder::setBindGroup(v4, *(unsigned int *)v30, *(uint64_t *)&v30[8], (uint64_t)&v30[16]);
        if ((_BYTE)v31)
        {
          if (v30[32])
          {
            v13 = *(WTF **)&v30[16];
            if (*(_QWORD *)&v30[16])
            {
              *(_QWORD *)&v30[16] = 0;
              *(_DWORD *)&v30[24] = 0;
              WTF::fastFree(v13, v12);
            }
          }
        }
      }
      goto LABEL_51;
    case 0x4EE:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v33, a2 + 4);
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::WebGPU::IndexFormat,std::optional<unsigned long long>,std::optional<unsigned long long>>>((uint64_t)v30, (uint64_t *)a3);
      if (v32)
        WebKit::RemoteRenderBundleEncoder::setIndexBuffer(v4, *(uint64_t *)v30, v30[8], *(uint64_t *)&v30[16], *(uint64_t *)&v30[24], *(uint64_t *)&v30[32], v31);
      goto LABEL_51;
    case 0x4EF:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v33, a2 + 4);
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)v30);
      if (!v30[8])
        goto LABEL_51;
      v15 = *(_QWORD **)(v4 + 16);
      v16 = (WTF::StringImpl *)v15[2];
      v17 = *(_QWORD *)v30;
      *(_QWORD *)v30 = 0;
      v15[2] = v17;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v14);
        else
          *(_DWORD *)v16 -= 2;
      }
      v10 = *(void (**)(_QWORD *, _BYTE *))(*v15 + 120);
      v9 = v15;
      v11 = v15 + 2;
LABEL_46:
      v10(v9, v11);
      if (v30[8])
      {
        v22 = *(WTF::StringImpl **)v30;
        *(_QWORD *)v30 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v21);
          else
            *(_DWORD *)v22 -= 2;
        }
      }
      goto LABEL_51;
    case 0x4F0:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v30, a2 + 4);
      v18 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v19)
        WebKit::RemoteRenderBundleEncoder::setPipeline(v4, v18);
LABEL_36:
      v20 = (unsigned __int8 ***)v30;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v20);
    case 0x4F1:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v33, a2 + 4);
      IPC::Decoder::decode<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<unsigned long long>,std::optional<unsigned long long>>>((uint64_t)v30, (uint64_t *)a3);
      if (v32)
        WebKit::RemoteRenderBundleEncoder::setVertexBuffer(v4, *(unsigned int *)v30, *(uint64_t *)&v30[8], *(uint64_t *)&v30[16], *(uint64_t *)&v30[24], *(uint64_t *)&v30[32], v31);
      goto LABEL_51;
    case 0x4F2:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v33, a2 + 4);
      IPC::Decoder::decode<std::tuple<unsigned int,std::optional<unsigned long long>,std::optional<unsigned long long>>>((uint64_t)v30, (uint64_t *)a3);
      if ((_BYTE)v31)
        (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v4 + 16) + 32))(*(_QWORD *)(v4 + 16), *(unsigned int *)v30, 0, *(_QWORD *)&v30[8], *(_QWORD *)&v30[16], *(_QWORD *)&v30[24], *(_QWORD *)&v30[32]);
LABEL_51:
      v20 = (unsigned __int8 ***)&v33;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v20);
    default:
      return this;
  }
}

unsigned __int8 ***WebKit::RemoteRenderBundle::didReceiveStreamMessage(unsigned __int8 ***this, uint64_t **a2, IPC::Decoder *a3)
{
  unsigned __int8 ***v3;
  int v4;
  unsigned __int8 ***v5;
  WTF::StringImpl *v7;
  unsigned __int8 **v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t *v13;
  WTF::StringImpl *v14;
  char v15;

  v3 = this;
  v4 = *((unsigned __int16 *)a3 + 25);
  if (v4 == 1268)
  {
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a2 + 4);
    IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)&v14);
    if (v15)
    {
      v8 = v3[2];
      v9 = (WTF::StringImpl *)v8[2];
      v10 = v14;
      v14 = 0;
      v8[2] = (unsigned __int8 *)v10;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v7);
        else
          *(_DWORD *)v9 -= 2;
      }
      (*((void (**)(unsigned __int8 **, unsigned __int8 **))*v8 + 2))(v8, v8 + 2);
      if (v15)
      {
        v12 = v14;
        v14 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v11);
          else
            *(_DWORD *)v12 -= 2;
        }
      }
    }
    v5 = (unsigned __int8 ***)&v13;
  }
  else
  {
    if (v4 != 1267)
      return this;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v14, a2 + 4);
    WebKit::WebGPU::ObjectHeap::removeObject((uint64_t)v3[3][1], (uint64_t)v3[5]);
    v5 = (unsigned __int8 ***)&v14;
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v5);
}

unsigned __int8 ***WebKit::RemoteRenderPassEncoder::didReceiveStreamMessage(unsigned __int8 ***this, uint64_t **a2, IPC::Decoder *a3)
{
  uint64_t v4;
  void (*v5)(void);
  unint64_t v6;
  char v7;
  _QWORD *v8;
  void (*v9)(_QWORD *, _BYTE *);
  void *v10;
  WTF *v11;
  _BYTE *v12;
  WTF::StringImpl *v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int32 *v25;
  unint64_t v26;
  unint64_t v28;
  unsigned __int32 *v30;
  unint64_t v31;
  unsigned __int32 *v33;
  unint64_t v34;
  float *v36;
  unint64_t v37;
  float v39;
  float v40;
  uint64_t **v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  _BYTE v59[40];
  uint64_t v60;
  char v61;
  uint64_t *v62[4];
  int v63;
  char v64;
  char v65;

  v4 = (uint64_t)this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x4F5:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v59, a2 + 4);
      if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3) & 0xFF00000000) == 0)
        goto LABEL_83;
      v5 = *(void (**)(void))(**(_QWORD **)(v4 + 16) + 144);
      goto LABEL_82;
    case 0x4F6:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v59, a2 + 4);
      WebKit::WebGPU::ObjectHeap::removeObject(*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8), *(_QWORD *)(v4 + 40));
      goto LABEL_83;
    case 0x4F7:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v62, a2 + 4);
      IPC::Decoder::decode<std::tuple<unsigned int,std::optional<unsigned int>,std::optional<unsigned int>,std::optional<unsigned int>>>((uint64_t)v59, (uint64_t *)a3);
      if (v59[28])
        (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v4 + 16) + 40))(*(_QWORD *)(v4 + 16), *(unsigned int *)v59, *(_QWORD *)&v59[4], *(_QWORD *)&v59[12], *(_QWORD *)&v59[20]);
      goto LABEL_96;
    case 0x4F8:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v62, a2 + 4);
      IPC::Decoder::decode<std::tuple<unsigned int,std::optional<unsigned int>,std::optional<unsigned int>,std::optional<int>,std::optional<unsigned int>>>((uint64_t)v59, (uint64_t *)a3);
      if (v59[36])
        (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v4 + 16) + 48))(*(_QWORD *)(v4 + 16), *(unsigned int *)v59, *(_QWORD *)&v59[4], *(_QWORD *)&v59[12], *(_QWORD *)&v59[20], *(_QWORD *)&v59[28]);
      goto LABEL_96;
    case 0x4F9:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v62, a2 + 4);
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>>((uint64_t *)a3, v59);
      if (v59[16])
        WebKit::RemoteRenderBundleEncoder::drawIndexedIndirect(v4, *(uint64_t *)v59, *(uint64_t *)&v59[8]);
      goto LABEL_96;
    case 0x4FA:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v62, a2 + 4);
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>>((uint64_t *)a3, v59);
      if (v59[16])
        WebKit::RemoteRenderBundleEncoder::drawIndirect(v4, *(uint64_t *)v59, *(uint64_t *)&v59[8]);
      goto LABEL_96;
    case 0x4FB:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v59, a2 + 4);
      v5 = *(void (**)(void))(**(_QWORD **)(v4 + 16) + 168);
      goto LABEL_82;
    case 0x4FC:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v59, a2 + 4);
      v5 = *(void (**)(void))(**(_QWORD **)(v4 + 16) + 152);
      goto LABEL_82;
    case 0x4FD:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v62, a2 + 4);
      IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)v59, (uint64_t *)a3);
      if (v59[16])
      {
        WebKit::RemoteRenderPassEncoder::executeBundles((WTF *)v4, (uint64_t)v59);
        v11 = *(WTF **)v59;
        if (*(_QWORD *)v59)
          goto LABEL_86;
      }
      goto LABEL_96;
    case 0x4FE:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v62, a2 + 4);
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)v59);
      if (!v59[8])
        goto LABEL_96;
      v8 = *(_QWORD **)(v4 + 16);
      v9 = *(void (**)(_QWORD *, _BYTE *))(*v8 + 104);
      goto LABEL_19;
    case 0x4FF:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v59, a2 + 4);
      v5 = *(void (**)(void))(**(_QWORD **)(v4 + 16) + 96);
      goto LABEL_82;
    case 0x500:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v62, a2 + 4);
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)v59);
      if (!v59[8])
        goto LABEL_96;
      v8 = *(_QWORD **)(v4 + 16);
      v9 = *(void (**)(_QWORD *, _BYTE *))(*v8 + 88);
LABEL_19:
      v12 = v59;
      goto LABEL_91;
    case 0x501:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v62, a2 + 4);
      IPC::Decoder::decode<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>((uint64_t *)a3, v59);
      if (!(_BYTE)v60)
        goto LABEL_96;
      WebKit::RemoteRenderBundleEncoder::setBindGroup(v4, *(unsigned int *)v59, *(uint64_t *)&v59[8], (uint64_t)&v59[16]);
      if (!(_BYTE)v60)
        goto LABEL_96;
      if (!v59[32])
        goto LABEL_96;
      v11 = *(WTF **)&v59[16];
      if (!*(_QWORD *)&v59[16])
        goto LABEL_96;
      *(_QWORD *)&v59[16] = 0;
      *(_DWORD *)&v59[24] = 0;
LABEL_86:
      WTF::fastFree(v11, v10);
      goto LABEL_96;
    case 0x502:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v58, a2 + 4);
      IPC::Decoder::decode<std::variant<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>>((uint64_t *)a3, v59);
      LOBYTE(v62[0]) = 0;
      if ((_BYTE)v60)
      {
        v63 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,(std::__variant_detail::_Trait)1>>((uint64_t)v62, (uint64_t)v59);
        v64 = 1;
        if (!(_BYTE)v60)
          goto LABEL_72;
        if (*(_DWORD *)&v59[32] == -1)
          goto LABEL_72;
        ((void (*)(char *, _BYTE *))off_1E34B6318[*(unsigned int *)&v59[32]])(&v65, v59);
        if (v64)
          goto LABEL_72;
      }
      else
      {
        v64 = 0;
      }
      v48 = *(_QWORD *)a3;
      v49 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v50 = *((_QWORD *)a3 + 3);
      if (!v50)
        goto LABEL_77;
      if (!v49)
        goto LABEL_77;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 16))(v50, v48);
      if (!v64)
        goto LABEL_77;
LABEL_72:
      v59[0] = 0;
      *(_DWORD *)&v59[32] = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,(std::__variant_detail::_Trait)1>>((uint64_t)v59, (uint64_t)v62);
      WebKit::RemoteRenderPassEncoder::setBlendConstant(v4, (uint64_t)v59);
      if (*(_DWORD *)&v59[32] != -1)
        ((void (*)(char *, _BYTE *))off_1E34B6318[*(unsigned int *)&v59[32]])(&v65, v59);
      if (v64 && v63 != -1)
        ((void (*)(_BYTE *, uint64_t **))off_1E34B6318[v63])(v59, v62);
LABEL_77:
      v41 = &v58;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v41);
    case 0x503:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v62, a2 + 4);
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::WebGPU::IndexFormat,std::optional<unsigned long long>,std::optional<unsigned long long>>>((uint64_t)v59, (uint64_t *)a3);
      if (v61)
        WebKit::RemoteRenderBundleEncoder::setIndexBuffer(v4, *(uint64_t *)v59, v59[8], *(uint64_t *)&v59[16], *(uint64_t *)&v59[24], *(uint64_t *)&v59[32], v60);
      goto LABEL_96;
    case 0x504:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v62, a2 + 4);
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)v59);
      if (!v59[8])
        goto LABEL_96;
      v14 = *(_QWORD **)(v4 + 16);
      v15 = (WTF::StringImpl *)v14[2];
      v16 = *(_QWORD *)v59;
      *(_QWORD *)v59 = 0;
      v14[2] = v16;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v13);
        else
          *(_DWORD *)v15 -= 2;
      }
      v9 = *(void (**)(_QWORD *, _BYTE *))(*v14 + 176);
      v8 = v14;
      v12 = v14 + 2;
LABEL_91:
      v9(v8, v12);
      if (v59[8])
      {
        v43 = *(WTF::StringImpl **)v59;
        *(_QWORD *)v59 = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 2)
            WTF::StringImpl::destroy(v43, v42);
          else
            *(_DWORD *)v43 -= 2;
        }
      }
LABEL_96:
      v41 = v62;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v41);
    case 0x505:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v59, a2 + 4);
      v6 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v7)
        WebKit::RemoteRenderBundleEncoder::setPipeline(v4, v6);
      goto LABEL_83;
    case 0x506:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v62, a2 + 4);
      IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>((uint64_t *)a3, v59);
      if (v59[16])
        (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v4 + 16) + 120))(*(_QWORD *)(v4 + 16), *(unsigned int *)v59, *(unsigned int *)&v59[4], *(unsigned int *)&v59[8], *(unsigned int *)&v59[12]);
      goto LABEL_96;
    case 0x507:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v59, a2 + 4);
      if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3) & 0xFF00000000) == 0)
        goto LABEL_83;
      v5 = *(void (**)(void))(**(_QWORD **)(v4 + 16) + 136);
LABEL_82:
      v5();
      goto LABEL_83;
    case 0x508:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v62, a2 + 4);
      IPC::Decoder::decode<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<unsigned long long>,std::optional<unsigned long long>>>((uint64_t)v59, (uint64_t *)a3);
      if (v61)
        WebKit::RemoteRenderBundleEncoder::setVertexBuffer(v4, *(unsigned int *)v59, *(uint64_t *)&v59[8], *(uint64_t *)&v59[16], *(uint64_t *)&v59[24], *(uint64_t *)&v59[32], v60);
      goto LABEL_96;
    case 0x509:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v59, a2 + 4);
      v21 = *((_QWORD *)a3 + 1);
      v22 = *(_QWORD *)a3;
      v23 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v21 < v23 || v21 - v23 <= 3)
      {
        v51 = 0;
        v52 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v53 = *((_QWORD *)a3 + 3);
        if (v53)
        {
          if (v21)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v53 + 16))(v53);
            v52 = *(_QWORD *)a3;
            v51 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v51 = 0;
            v52 = 0;
          }
        }
        goto LABEL_108;
      }
      v25 = (unsigned __int32 *)(v22 + v23);
      *((_QWORD *)a3 + 2) = v25 + 1;
      if (!v22)
      {
        v51 = v21;
        v52 = 0;
LABEL_108:
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v54 = *((_QWORD *)a3 + 3);
        if (v54 && v51)
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v54 + 16))(v54, v52, v51);
        goto LABEL_99;
      }
      v26 = (((unint64_t)v25 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v22;
      if (v21 >= v26 && v21 - v26 > 3)
      {
        v17.n128_u32[0] = *v25;
        *((_QWORD *)a3 + 2) = (((unint64_t)v25 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
        v18.n128_u32[0] = *(_DWORD *)(((unint64_t)v25 + 7) & 0xFFFFFFFFFFFFFFFCLL);
        v28 = (((((unint64_t)v25 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v22;
        if (v21 >= v28 && v21 - v28 > 3)
        {
          v30 = (unsigned __int32 *)(v22 + v28);
          *((_QWORD *)a3 + 2) = v30 + 1;
          v19.n128_u32[0] = *v30;
          v31 = (((unint64_t)v30 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v22;
          if (v21 >= v31 && v21 - v31 > 3)
          {
            v33 = (unsigned __int32 *)(v22 + v31);
            *((_QWORD *)a3 + 2) = v33 + 1;
            v20.n128_u32[0] = *v33;
            v34 = (((unint64_t)v33 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v22;
            if (v21 >= v34 && v21 - v34 > 3)
            {
              v36 = (float *)(v22 + v34);
              *((_QWORD *)a3 + 2) = v36 + 1;
              v37 = (((unint64_t)v36 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v22;
              if (v21 >= v37 && v21 - v37 > 3)
              {
                v39 = *v36;
                v40 = *(float *)(((unint64_t)v36 + 7) & 0xFFFFFFFFFFFFFFFCLL);
                *((_QWORD *)a3 + 2) = (((unint64_t)v36 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
                (*(void (**)(_QWORD, __n128, __n128, __n128, __n128, float, float))(**(_QWORD **)(v4 + 16)
                                                                                             + 112))(*(_QWORD *)(v4 + 16), v17, v18, v19, v20, v39, v40);
                goto LABEL_83;
              }
            }
          }
        }
      }
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v44 = *((_QWORD *)a3 + 3);
      if (v44)
      {
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v44 + 16))(v44);
          v55 = *(_QWORD *)a3;
          v56 = *((_QWORD *)a3 + 1);
          v57 = *((_QWORD *)a3 + 3);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          if (v57)
          {
            if (v56)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v57 + 16))(v57, v55);
          }
        }
      }
LABEL_99:
      v45 = *(_QWORD *)a3;
      v46 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v47 = *((_QWORD *)a3 + 3);
      if (v47 && v46)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v47 + 16))(v47, v45);
LABEL_83:
      v41 = (uint64_t **)v59;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v41);
    case 0x50A:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v62, a2 + 4);
      IPC::Decoder::decode<std::tuple<unsigned int,std::optional<unsigned long long>,std::optional<unsigned long long>>>((uint64_t)v59, (uint64_t *)a3);
      if ((_BYTE)v60)
        (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v4 + 16) + 32))(*(_QWORD *)(v4 + 16), *(unsigned int *)v59, 0, *(_QWORD *)&v59[8], *(_QWORD *)&v59[16], *(_QWORD *)&v59[24], *(_QWORD *)&v59[32]);
      goto LABEL_96;
    default:
      return this;
  }
}

unint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  _QWORD v8[2];
  char v9;

  result = IPC::Decoder::decode<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (uint64_t)v8);
  if (v9)
  {
    *(_QWORD *)a1 = v8[0];
    *(_QWORD *)(a1 + 8) = v8[1];
    *(_BYTE *)(a1 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages11RemoteQueue19OnSubmittedWorkDoneEN6WebKit11RemoteQueueES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B6280;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages11RemoteQueue19OnSubmittedWorkDoneEN6WebKit11RemoteQueueES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B6280;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages11RemoteQueue19OnSubmittedWorkDoneEN6WebKit11RemoteQueueES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3110;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages11RemoteQueue11WriteBufferEN6WebKit11RemoteQueueES8_FvNS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEyONSt3__18optionalIN7WebCore18SharedMemoryHandleEEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B62A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages11RemoteQueue11WriteBufferEN6WebKit11RemoteQueueES8_FvNS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEyONSt3__18optionalIN7WebCore18SharedMemoryHandleEEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B62A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages11RemoteQueue11WriteBufferEN6WebKit11RemoteQueueES8_FvNS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEyONSt3__18optionalIN7WebCore18SharedMemoryHandleEEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3111;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages11RemoteQueue12WriteTextureEN6WebKit11RemoteQueueES8_FvRKNS7_6WebGPU16ImageCopyTextureEONSt3__18optionalIN7WebCore18SharedMemoryHandleEEERKNS9_15ImageDataLayoutERKNSD_7variantIJNS_6VectorIjLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS9_12Extent3DDictEEEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B62F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages11RemoteQueue12WriteTextureEN6WebKit11RemoteQueueES8_FvRKNS7_6WebGPU16ImageCopyTextureEONSt3__18optionalIN7WebCore18SharedMemoryHandleEEERKNS9_15ImageDataLayoutERKNSD_7variantIJNS_6VectorIjLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS9_12Extent3DDictEEEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B62F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages11RemoteQueue12WriteTextureEN6WebKit11RemoteQueueES8_FvRKNS7_6WebGPU16ImageCopyTextureEONSt3__18optionalIN7WebCore18SharedMemoryHandleEEERKNS9_15ImageDataLayoutERKNSD_7variantIJNS_6VectorIjLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS9_12Extent3DDictEEEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3112;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

_QWORD *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::WebGPU::IndexFormat,std::optional<unsigned long long>,std::optional<unsigned long long>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  unsigned __int16 v7;
  char v8;
  _QWORD *result;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  __int128 v14;
  char v15;
  __int128 v16;
  char v17;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v5
    && (v6 = v4, v7 = IPC::Decoder::decode<WebCore::TextManipulationControllerExclusionRule::Type>(a2), v7 > 0xFFu)
    && (v8 = v7, IPC::Decoder::decode<std::optional<unsigned long long>>(a2, (uint64_t)&v14), v15)
    && (result = IPC::Decoder::decode<std::optional<unsigned long long>>(a2, (uint64_t)&v16), v17))
  {
    if (v15)
    {
      *(_QWORD *)a1 = v6;
      *(_BYTE *)(a1 + 8) = v8;
      v10 = v16;
      *(_OWORD *)(a1 + 16) = v14;
      *(_OWORD *)(a1 + 32) = v10;
      *(_BYTE *)(a1 + 48) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 48) = 0;
    v11 = *a2;
    v12 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (_QWORD *)a2[3];
    if (result)
      v13 = v12 == 0;
    else
      v13 = 1;
    if (!v13)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v11);
  }
  return result;
}

_QWORD *IPC::Decoder::decode<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<unsigned long long>,std::optional<unsigned long long>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int *v8;
  int v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  _QWORD *result;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  char v21;
  __int128 v22;
  char v23;

  v4 = a2[1];
  v5 = *a2;
  v6 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v4 < v6 || v4 - v6 <= 3)
  {
    v15 = 0;
    v14 = 0;
    *a2 = 0;
    a2[1] = 0;
    v17 = a2[3];
    if (v17)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v17 + 16))(v17, v5, v4);
        v14 = *a2;
        v15 = a2[1];
      }
      else
      {
        v15 = 0;
        v14 = 0;
      }
    }
LABEL_13:
    *a2 = 0;
    a2[1] = 0;
    result = (_QWORD *)a2[3];
    if (!result)
      goto LABEL_14;
LABEL_19:
    if (v15)
      (*(void (**)(_QWORD *, uint64_t))(*result + 16))(result, v14);
    goto LABEL_14;
  }
  v8 = (int *)(v5 + v6);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v15 = v4;
    v14 = 0;
    goto LABEL_13;
  }
  v9 = *v8;
  v10 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v11)
  {
    v12 = v10;
    IPC::Decoder::decode<std::optional<unsigned long long>>(a2, (uint64_t)&v20);
    if (v21)
    {
      result = IPC::Decoder::decode<std::optional<unsigned long long>>(a2, (uint64_t)&v22);
      if (v23)
      {
        if (v21)
        {
          *(_DWORD *)a1 = v9;
          *(_QWORD *)(a1 + 8) = v12;
          v16 = v22;
          *(_OWORD *)(a1 + 16) = v20;
          *(_OWORD *)(a1 + 32) = v16;
          *(_BYTE *)(a1 + 48) = 1;
          return result;
        }
        __break(1u);
        goto LABEL_19;
      }
    }
  }
LABEL_14:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 48) = 0;
  v18 = *a2;
  v19 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (_QWORD *)a2[3];
  if (result)
  {
    if (v19)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v18);
  }
  return result;
}

_QWORD *IPC::Decoder::decode<std::tuple<unsigned int,std::optional<unsigned long long>,std::optional<unsigned long long>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int *v8;
  int v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  char v17;
  __int128 v18;
  char v19;

  v4 = a2[1];
  v5 = *a2;
  v6 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v4 < v6 || v4 - v6 <= 3)
  {
    v12 = 0;
    v11 = 0;
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v5, v4);
        v11 = *a2;
        v12 = a2[1];
      }
      else
      {
        v12 = 0;
        v11 = 0;
      }
    }
LABEL_12:
    *a2 = 0;
    a2[1] = 0;
    result = (_QWORD *)a2[3];
    if (!result)
      goto LABEL_13;
LABEL_18:
    if (v12)
      (*(void (**)(_QWORD *, uint64_t))(*result + 16))(result, v11);
    goto LABEL_13;
  }
  v8 = (int *)(v5 + v6);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v12 = v4;
    v11 = 0;
    goto LABEL_12;
  }
  v9 = *v8;
  IPC::Decoder::decode<std::optional<unsigned long long>>(a2, (uint64_t)&v16);
  if (v17)
  {
    result = IPC::Decoder::decode<std::optional<unsigned long long>>(a2, (uint64_t)&v18);
    if (v19)
    {
      if (v17)
      {
        *(_DWORD *)a1 = v9;
        *(_OWORD *)(a1 + 8) = v16;
        *(_OWORD *)(a1 + 24) = v18;
        *(_BYTE *)(a1 + 40) = 1;
        return result;
      }
      __break(1u);
      goto LABEL_18;
    }
  }
LABEL_13:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 40) = 0;
  v14 = *a2;
  v15 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (_QWORD *)a2[3];
  if (result)
  {
    if (v15)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v14);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<unsigned int,std::optional<unsigned int>,std::optional<unsigned int>,std::optional<unsigned int>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int *v8;
  int v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t result;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = a2[1];
  v5 = *a2;
  v6 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v4 < v6 || v4 - v6 <= 3)
  {
    v18 = 0;
    v19 = 0;
    *a2 = 0;
    a2[1] = 0;
    v20 = a2[3];
    if (v20)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v20 + 16))(v20, v5, v4);
        v19 = *a2;
        v18 = a2[1];
      }
      else
      {
        v18 = 0;
        v19 = 0;
      }
    }
    goto LABEL_12;
  }
  v8 = (int *)(v5 + v6);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v18 = v4;
    v19 = 0;
LABEL_12:
    *a2 = 0;
    a2[1] = 0;
    v21 = a2[3];
    if (v21 && v18)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v19);
    goto LABEL_13;
  }
  v9 = *v8;
  v10 = IPC::Decoder::decode<std::optional<unsigned int>>(a2);
  if (v11)
  {
    v12 = v10;
    v13 = IPC::Decoder::decode<std::optional<unsigned int>>(a2);
    if (v14)
    {
      v15 = v13;
      result = IPC::Decoder::decode<std::optional<unsigned int>>(a2);
      if (v17)
      {
        *(_DWORD *)a1 = v9;
        *(_QWORD *)(a1 + 4) = v12;
        *(_QWORD *)(a1 + 12) = v15;
        *(_QWORD *)(a1 + 20) = result;
        *(_BYTE *)(a1 + 28) = 1;
        return result;
      }
    }
  }
LABEL_13:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 28) = 0;
  v22 = *a2;
  v23 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v23)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v22);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<unsigned int,std::optional<unsigned int>,std::optional<unsigned int>,std::optional<int>,std::optional<unsigned int>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int *v8;
  int v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t result;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = a2[1];
  v5 = *a2;
  v6 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v4 < v6 || v4 - v6 <= 3)
  {
    v21 = 0;
    v22 = 0;
    *a2 = 0;
    a2[1] = 0;
    v23 = a2[3];
    if (v23)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v23 + 16))(v23, v5, v4);
        v22 = *a2;
        v21 = a2[1];
      }
      else
      {
        v21 = 0;
        v22 = 0;
      }
    }
    goto LABEL_13;
  }
  v8 = (int *)(v5 + v6);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v21 = v4;
    v22 = 0;
LABEL_13:
    *a2 = 0;
    a2[1] = 0;
    v24 = a2[3];
    if (v24 && v21)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, v22);
    goto LABEL_14;
  }
  v9 = *v8;
  v10 = IPC::Decoder::decode<std::optional<unsigned int>>(a2);
  if (v11)
  {
    v12 = v10;
    v13 = IPC::Decoder::decode<std::optional<unsigned int>>(a2);
    if (v14)
    {
      v15 = v13;
      v16 = IPC::Decoder::decode<std::optional<int>>(a2);
      if (v17)
      {
        v18 = v16;
        result = IPC::Decoder::decode<std::optional<unsigned int>>(a2);
        if (v20)
        {
          *(_DWORD *)a1 = v9;
          *(_QWORD *)(a1 + 4) = v12;
          *(_QWORD *)(a1 + 12) = v15;
          *(_QWORD *)(a1 + 20) = v18;
          *(_QWORD *)(a1 + 28) = result;
          *(_BYTE *)(a1 + 36) = 1;
          return result;
        }
      }
    }
  }
LABEL_14:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 36) = 0;
  v25 = *a2;
  v26 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v26)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v25);
  }
  return result;
}

void sub_196FFB890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  CFTypeRef a65;
  CFTypeRef cf;
  unsigned __int8 **v66;
  uint64_t v67;
  WTF::StringImpl *v69;
  CFTypeRef v70;
  CFTypeRef v71;

  (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  _Block_release(0);
  v70 = cf;
  cf = 0;
  if (v70)
    CFRelease(v70);
  v71 = a65;
  a65 = 0;
  if (v71)
    CFRelease(v71);
  WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)&a13, v69);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v66);
  _Unwind_Resume(a1);
}

void sub_196FFBC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,CFTypeRef a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  CFTypeRef cf;
  unsigned __int8 **v67;
  const void *v68;
  CFTypeRef v70;
  WTF::StringImpl *v71;
  CFTypeRef v72;

  _Block_release(v68);
  v70 = a33;
  a33 = 0;
  if (v70)
    CFRelease(v70);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a9);
  v72 = cf;
  cf = 0;
  if (v72)
    CFRelease(v72);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&a37, v71);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v67);
  _Unwind_Resume(a1);
}

void sub_196FFBF8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,CFTypeRef cf)
{
  unsigned __int8 **v43;
  uint64_t v44;
  WTF::StringImpl *v46;
  CFTypeRef v47;

  (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  _Block_release(0);
  v47 = cf;
  cf = 0;
  if (v47)
    CFRelease(v47);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&a13, v46);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v43);
  _Unwind_Resume(a1);
}

void sub_196FFC20C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_196FFC498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, CFTypeRef cf)
{
  unsigned __int8 **v19;

  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v19);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NetworkConnectionToWebProcess::paymentCoordinator(WebKit::NetworkConnectionToWebProcess *this)
{
  uint64_t v1;
  uint64_t v3;

  v1 = *((_QWORD *)this + 31);
  if (!v1)
  {
    v1 = WTF::fastMalloc((WTF *)0x58);
    WebKit::WebPaymentCoordinatorProxy::WebPaymentCoordinatorProxy(v1, (uint64_t)this);
    v3 = *((_QWORD *)this + 31);
    *((_QWORD *)this + 31) = v1;
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      return *((_QWORD *)this + 31);
    }
  }
  return v1;
}

void sub_196FFC5D4(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NetworkConnectionToWebProcess::paymentCoordinatorConnection(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t WebKit::NetworkConnectionToWebProcess::paymentCoordinatorPresentingViewController()
{
  return 0;
}

IPC::Encoder *WebKit::NetworkConnectionToWebProcess::getPaymentCoordinatorEmbeddingUserAgent(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  os_unfair_lock_s *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14[2];
  IPC::Encoder *v15;

  v13 = a2;
  v3 = *(os_unfair_lock_s **)(*(_QWORD *)(a1 + 72) + 32);
  v4 = *a3;
  *a3 = 0;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = &off_1E34B66C0;
  v5[1] = v4;
  v6 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 317;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v15 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v7, &v13);
  v14[0] = (uint64_t)v5;
  v14[1] = v6;
  IPC::Connection::sendMessageWithAsyncReply(v3, &v15, v14, 0, 0);
  v9 = v14[0];
  v14[0] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  result = v15;
  v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

void sub_196FFC6E4(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  IPC::Encoder *v3;
  WTF *v5;
  void *v6;

  IPC::Encoder::~Encoder(v3, a2);
  WTF::fastFree(v5, v6);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

void sub_196FFC71C()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x196FFC704);
  JUMPOUT(0x196FFC714);
}

uint64_t WebKit::NetworkConnectionToWebProcess::paymentCoordinatorBoundInterfaceIdentifier(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  v2 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v1 + 208), &v4);
  if (v2)
    return v2 + 888;
  else
    return MEMORY[0x1E0CBF738];
}

uint64_t WebKit::NetworkConnectionToWebProcess::paymentCoordinatorCTDataConnectionServiceType(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  v2 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v1 + 208), &v4);
  if (v2)
    return v2 + 952;
  else
    return MEMORY[0x1E0CBF738];
}

uint64_t WebKit::NetworkConnectionToWebProcess::paymentCoordinatorSourceApplicationBundleIdentifier(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  v2 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v1 + 208), &v4);
  if (v2)
    return v2 + 896;
  else
    return MEMORY[0x1E0CBF738];
}

uint64_t WebKit::NetworkConnectionToWebProcess::paymentCoordinatorSourceApplicationSecondaryIdentifier(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  v2 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v1 + 208), &v4);
  if (v2)
    return v2 + 904;
  else
    return MEMORY[0x1E0CBF738];
}

uint64_t WebKit::NetworkConnectionToWebProcess::paymentCoordinatorAuthorizationPresenter@<X0>(WebKit::WebPaymentCoordinatorProxy *a1@<X1>, PKPaymentRequest *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  uint64_t result;

  v7 = WTF::fastMalloc((WTF *)0x28);
  result = WebKit::PaymentAuthorizationController::PaymentAuthorizationController(v7, (uint64_t)a1 + 24, (uint64_t)a2);
  *a3 = v7;
  return result;
}

void sub_196FFC870(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NetworkProcess::clearServiceWorkerEntitlementOverride(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  WebKit::disableServiceWorkerEntitlementTestingOverride = 0;
  v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void sub_196FFC8D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NetworkRTCTCPSocketCocoa::createClientTCPSocket@<X0>(uint64_t a1@<X0>, WebKit::NetworkRTCProvider *a2@<X1>, std::string *a3@<X2>, unsigned int a4@<W3>, const WTF::String *a5@<X4>, BOOL a6@<W5>, int a7@<W6>, WebCore::RegistrableDomain *a8@<X7>, uint64_t *a9@<X8>, uint64_t *a10)
{
  uint64_t v18;
  uint64_t result;

  v18 = WTF::fastMalloc((WTF *)0x38);
  result = WebKit::NetworkRTCTCPSocketCocoa::NetworkRTCTCPSocketCocoa(v18, a1, a2, a3, a4, a5, a6, a7, a8, a10);
  *a9 = v18;
  return result;
}

void sub_196FFC988(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NetworkRTCTCPSocketCocoa::NetworkRTCTCPSocketCocoa(uint64_t a1, uint64_t a2, WebKit::NetworkRTCProvider *a3, std::string *this, unsigned int a5, const WTF::String *a6, BOOL a7, int a8, WebCore::RegistrableDomain *a9, uint64_t *a10)
{
  uint64_t v17;
  unsigned __int8 ***v18;
  std::string::size_type size;
  std::string::size_type v20;
  rtc::IPAddress *v21;
  std::string *v22;
  WTF::String *v23;
  const char *v24;
  void *v25;
  std::string::size_type v26;
  const void *v27;
  WTF *v28;
  WTF::StringImpl *v29;
  NSObject *v30;
  NSObject *v31;
  uint64_t v32;
  void *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  std::string::size_type v38;
  unsigned int *v39;
  unsigned int v40;
  __int128 v41;
  std::string::size_type v42;
  unsigned __int8 **v43;
  _QWORD *v44;
  uint64_t v45;
  void *v46;
  unsigned __int8 **v47;
  unsigned __int8 *v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  int v54;
  uint64_t v55;
  WTF *v56;
  std::string::size_type v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  NSObject *v61;
  uint64_t v62;
  uint64_t v63;
  std::string::size_type v64;
  _QWORD *v65;
  unsigned __int8 **v66;
  unsigned __int8 *v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  int v73;
  uint64_t v74;
  WTF *v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  std::string v80;
  unsigned __int8 **v81[3];
  __int16 v82;
  char v83;
  WTF::StringImpl *v84;
  std::string v85;
  WTF *v86;

  *(_QWORD *)(a1 + 8) = 0;
  v79 = (uint64_t *)(a1 + 8);
  *(_QWORD *)a1 = off_1E34B6338;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a3;
  v17 = *a10;
  *a10 = 0;
  *(_QWORD *)(a1 + 32) = v17;
  v18 = (unsigned __int8 ***)(a1 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = (a5 & 4) != 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v85, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
  else
    v85 = *this;
  size = HIBYTE(v85.__r_.__value_.__r.__words[2]);
  LOBYTE(v20) = *((_BYTE *)&v85.__r_.__value_.__s + 23);
  if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v85.__r_.__value_.__l.__size_;
  if (!size)
  {
    v21 = (rtc::IPAddress *)rtc::SocketAddress::ipaddr((rtc::SocketAddress *)this);
    rtc::IPAddress::ToString(v21);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v85.__r_.__value_.__l.__data_);
    v85 = v80;
    v20 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
  }
  if ((v20 & 0x80u) == 0)
    v22 = &v85;
  else
    v22 = (std::string *)v85.__r_.__value_.__r.__words[0];
  v23 = (WTF::String *)rtc::SocketAddress::port((rtc::SocketAddress *)this);
  WTF::String::number(v23);
  WTF::String::utf8();
  if (v86)
    v24 = (char *)v86 + 16;
  else
    v24 = 0;
  WebKit::createNWConnection((WebKit *)&v80, a3, (const char *)v22, v24, (a5 >> 1) & 1, a6, a7, a8, a9);
  v26 = v80.__r_.__value_.__r.__words[0];
  v80.__r_.__value_.__r.__words[0] = 0;
  v27 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v26;
  if (v27)
    CFRelease(v27);
  v28 = v86;
  v86 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 1)
      WTF::fastFree(v28, v25);
    else
      --*(_DWORD *)v28;
  }
  v29 = v84;
  v84 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v25);
    else
      *(_DWORD *)v29 -= 2;
  }
  v30 = *(NSObject **)(a1 + 40);
  if (qword_1ECE72170 != -1)
    dispatch_once(&qword_1ECE72170, &__block_literal_global_99);
  nw_connection_set_queue(v30, (dispatch_queue_t)qword_1ECE72168);
  v31 = *(NSObject **)(a1 + 40);
  v32 = *(_QWORD *)(a1 + 8);
  if (v32)
    goto LABEL_82;
  v32 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v32 = 1;
  *(_QWORD *)(v32 + 8) = a1;
  v34 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v32;
  if (!v34)
    goto LABEL_82;
  do
  {
    v35 = __ldaxr(v34);
    v36 = v35 - 1;
  }
  while (__stlxr(v36, v34));
  if (!v36)
  {
    atomic_store(1u, v34);
    WTF::fastFree((WTF *)v34, v33);
  }
  v32 = *v79;
  if (*v79)
  {
LABEL_82:
    do
      v37 = __ldaxr((unsigned int *)v32);
    while (__stlxr(v37 + 1, (unsigned int *)v32));
  }
  v38 = *(_QWORD *)(a1 + 16);
  v80.__r_.__value_.__r.__words[0] = v32;
  v80.__r_.__value_.__l.__size_ = v38;
  v39 = (unsigned int *)((char *)a3 + 24);
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 + 1, v39));
  v80.__r_.__value_.__r.__words[2] = (std::string::size_type)a3;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v81, *v18);
  v41 = *(_OWORD *)&v80.__r_.__value_.__l.__data_;
  v42 = v80.__r_.__value_.__r.__words[2];
  v43 = v81[0];
  v80.__r_.__value_.__r.__words[0] = 0;
  v80.__r_.__value_.__r.__words[2] = 0;
  v81[0] = 0;
  v44 = malloc_type_malloc(0x40uLL, 0x10E0040A1B3119EuLL);
  v45 = MEMORY[0x1E0C809A0];
  *v44 = MEMORY[0x1E0C809A0];
  v44[1] = 50331650;
  v44[2] = WTF::BlockPtr<void ()(nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCTCPSocketCocoa::NetworkRTCTCPSocketCocoa(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,int,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&)::$_0>(WebKit::NetworkRTCTCPSocketCocoa::NetworkRTCTCPSocketCocoa(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,int,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&)::$_0)::{lambda(void *,nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)#1}::__invoke;
  v44[3] = &WTF::BlockPtr<void ()(nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCTCPSocketCocoa::NetworkRTCTCPSocketCocoa(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,int,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&)::$_0>(WebKit::NetworkRTCTCPSocketCocoa::NetworkRTCTCPSocketCocoa(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,int,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&)::$_0)::descriptor;
  *((_OWORD *)v44 + 2) = v41;
  v44[6] = v42;
  v44[7] = v43;
  nw_connection_set_state_changed_handler(v31, v44);
  _Block_release(v44);
  v47 = v81[0];
  v81[0] = 0;
  if (v47)
  {
    v48 = *v47;
    if (__ldaxr(*v47))
    {
      __clrex();
    }
    else if (!__stxr(1u, v48))
    {
      goto LABEL_42;
    }
    MEMORY[0x19AEABB3C](v48);
LABEL_42:
    v50 = *((_QWORD *)v48 + 1);
    v51 = v50 - 1;
    *((_QWORD *)v48 + 1) = v50 - 1;
    if (v50 == 1)
    {
      v77 = *((_QWORD *)v48 + 2);
      v52 = *((_QWORD *)v48 + 3);
      *((_QWORD *)v48 + 3) = 0;
      v53 = v77 == 0;
    }
    else
    {
      v52 = 0;
      v53 = 0;
    }
    v54 = __ldxr(v48);
    if (v54 == 1)
    {
      if (!__stlxr(0, v48))
      {
        if (v51)
          goto LABEL_52;
LABEL_50:
        v55 = WTF::fastMalloc((WTF *)0x20);
        *(_QWORD *)v55 = off_1E34ACA48;
        *(_QWORD *)(v55 + 8) = v48;
        *(_QWORD *)(v55 + 16) = v52;
        *(_BYTE *)(v55 + 24) = v53;
        v86 = (WTF *)v55;
        WTF::ensureOnMainRunLoop();
        v56 = v86;
        v86 = 0;
        if (v56)
          (*(void (**)(WTF *))(*(_QWORD *)v56 + 8))(v56);
        goto LABEL_52;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v48);
    if (v51)
      goto LABEL_52;
    goto LABEL_50;
  }
LABEL_52:
  v57 = v80.__r_.__value_.__r.__words[2];
  v80.__r_.__value_.__r.__words[2] = 0;
  if (v57)
    WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v57 + 24));
  v58 = (unsigned int *)v80.__r_.__value_.__r.__words[0];
  v80.__r_.__value_.__r.__words[0] = 0;
  if (v58)
  {
    do
    {
      v59 = __ldaxr(v58);
      v60 = v59 - 1;
    }
    while (__stlxr(v60, v58));
    if (!v60)
    {
      atomic_store(1u, v58);
      WTF::fastFree((WTF *)v58, v46);
    }
  }
  v61 = *(NSObject **)(a1 + 40);
  if (v61)
    CFRetain(*(CFTypeRef *)(a1 + 40));
  v80.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 16);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v80.__r_.__value_.__l.__size_, *(unsigned __int8 ***)(a1 + 32));
  v62 = rtc::SocketAddress::ipaddr((rtc::SocketAddress *)this);
  v80.__r_.__value_.__r.__words[2] = (std::string::size_type)&off_1E34B67B0;
  LODWORD(v81[0]) = *(_DWORD *)(v62 + 8);
  *(_OWORD *)((char *)v81 + 4) = *(_OWORD *)(v62 + 12);
  v82 = rtc::SocketAddress::port((rtc::SocketAddress *)this);
  v83 = *(_BYTE *)(a1 + 48);
  v63 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v63 = off_1E34B66E8;
  *(_QWORD *)(v63 + 8) = v80.__r_.__value_.__r.__words[0];
  v64 = v80.__r_.__value_.__l.__size_;
  v80.__r_.__value_.__l.__size_ = 0;
  *(_QWORD *)(v63 + 16) = v64;
  *(_QWORD *)(v63 + 24) = &off_1E34B67B0;
  *(_DWORD *)(v63 + 32) = v81[0];
  *(_OWORD *)(v63 + 36) = *(_OWORD *)((char *)v81 + 4);
  *(_WORD *)(v63 + 56) = v82;
  *(_BYTE *)(v63 + 58) = v83;
  v65 = malloc_type_malloc(0x40uLL, 0x10F0040BD7ED619uLL);
  *v65 = v45;
  v65[1] = 50331650;
  v65[2] = WTF::BlockPtr<void ()(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)>::fromCallable<WebKit::processIncomingData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}>(WebKit::processIncomingData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1})::{lambda(void *,NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}::__invoke;
  v65[3] = &WTF::BlockPtr<void ()(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)>::fromCallable<WebKit::processIncomingData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}>(WebKit::processIncomingData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1})::descriptor;
  v65[4] = v61;
  v65[5] = v63;
  v65[6] = 0;
  v65[7] = 0;
  nw_connection_receive(v61, 1u, 0xFFFFFFFF, v65);
  _Block_release(v65);
  v66 = (unsigned __int8 **)v80.__r_.__value_.__l.__size_;
  v80.__r_.__value_.__l.__size_ = 0;
  if (v66)
  {
    v67 = *v66;
    if (__ldaxr(*v66))
    {
      __clrex();
    }
    else if (!__stxr(1u, v67))
    {
      goto LABEL_65;
    }
    MEMORY[0x19AEABB3C](v67);
LABEL_65:
    v69 = *((_QWORD *)v67 + 1);
    v70 = v69 - 1;
    *((_QWORD *)v67 + 1) = v69 - 1;
    if (v69 == 1)
    {
      v78 = *((_QWORD *)v67 + 2);
      v71 = *((_QWORD *)v67 + 3);
      *((_QWORD *)v67 + 3) = 0;
      v72 = v78 == 0;
    }
    else
    {
      v71 = 0;
      v72 = 0;
    }
    v73 = __ldxr(v67);
    if (v73 == 1)
    {
      if (!__stlxr(0, v67))
      {
        if (v70)
          goto LABEL_75;
LABEL_73:
        v74 = WTF::fastMalloc((WTF *)0x20);
        *(_QWORD *)v74 = off_1E34ACA48;
        *(_QWORD *)(v74 + 8) = v67;
        *(_QWORD *)(v74 + 16) = v71;
        *(_BYTE *)(v74 + 24) = v72;
        v86 = (WTF *)v74;
        WTF::ensureOnMainRunLoop();
        v75 = v86;
        v86 = 0;
        if (v75)
          (*(void (**)(WTF *))(*(_QWORD *)v75 + 8))(v75);
        goto LABEL_75;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v67);
    if (v70)
      goto LABEL_75;
    goto LABEL_73;
  }
LABEL_75:
  nw_connection_start(*(nw_connection_t *)(a1 + 40));
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
  return a1;
}

void sub_196FFCFD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,WTF *a25)
{
  if (a25)
    (*(void (**)(WTF *))(*(_QWORD *)a25 + 8))(a25);
  _Unwind_Resume(exception_object);
}

void WebKit::createNWConnection(WebKit *this, WebKit::NetworkRTCProvider *a2, const char *hostname, const char *port, int a5, const WTF::String *a6, BOOL a7, int a8, const WebCore::RegistrableDomain *a9)
{
  NSObject *host;
  nw_parameters_configure_protocol_block_t *v15;
  nw_parameters_t secure_tcp;
  NSObject *v17;
  uint64_t v18;
  _BYTE *v19;
  __int128 v20;
  const WebCore::RegistrableDomain *v21;
  _OWORD v22[2];
  int v23;

  host = nw_endpoint_create_host(hostname, port);
  v15 = (nw_parameters_configure_protocol_block_t *)MEMORY[0x1E0CCED18];
  if (!a5)
    v15 = (nw_parameters_configure_protocol_block_t *)MEMORY[0x1E0CCED20];
  secure_tcp = nw_parameters_create_secure_tcp(*v15, &__block_literal_global_10);
  v17 = secure_tcp;
  v18 = *((_QWORD *)a2 + 24);
  if (v18)
    v19 = (_BYTE *)(v18 + 16);
  else
    v19 = 0;
  v20 = *(_OWORD *)((char *)a2 + 168);
  v22[0] = *(_OWORD *)((char *)a2 + 152);
  v22[1] = v20;
  v23 = *((_DWORD *)a2 + 46);
  WebKit::setNWParametersApplicationIdentifiers((uint64_t)secure_tcp, v19, (uint64_t)v22, (uint64_t)a6);
  WebKit::isKnownTracker(a9, v21);
  WebKit::setNWParametersTrackerOptions((uint64_t)v17, a8);
  *(_QWORD *)this = nw_connection_create(host, v17);
  if (v17)
    CFRelease(v17);
  if (host)
    CFRelease(host);
}

void sub_196FFD614(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::NetworkRTCTCPSocketCocoa::~NetworkRTCTCPSocketCocoa(WebKit::NetworkRTCTCPSocketCocoa *this)
{
  const void *v2;
  void *v3;

  v2 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    CFRelease(v2);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)this + 4);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v3);
}

{
  WTF *v1;
  void *v2;

  WebKit::NetworkRTCTCPSocketCocoa::~NetworkRTCTCPSocketCocoa(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::NetworkRTCTCPSocketCocoa::close(WebKit::NetworkRTCTCPSocketCocoa *this)
{
  NSObject *v2;
  uint64_t result;
  uint64_t v4;

  v2 = *((_QWORD *)this + 5);
  if (v2)
    nw_connection_cancel(v2);
  WebKit::NetworkRTCProvider::takeSocket(*((uint64_t **)this + 3), *((_QWORD *)this + 2), &v4);
  result = v4;
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return result;
}

void WebKit::NetworkRTCTCPSocketCocoa::setOption(WebKit::NetworkRTCTCPSocketCocoa *this, int a2, int a3)
{
  NSObject *v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (a2 == 5)
  {
    if (a3 <= 33)
    {
      if (!a3 || a3 == 8)
        goto LABEL_9;
    }
    else if (a3 == 34 || a3 == 36 || a3 == 46)
    {
LABEL_9:
      nw_connection_reset_traffic_class();
      return;
    }
    v4 = qword_1ECE71B18;
    if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_ERROR))
    {
      v5[0] = 67109120;
      v5[1] = a3;
      _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "NetworkRTCTCPSocketCocoa has an unexpected DSCP value %d", (uint8_t *)v5, 8u);
    }
  }
}

WTF *WebKit::NetworkRTCTCPSocketCocoa::sendTo(uint64_t a1, const void *a2, size_t a3)
{
  void *v6;
  _BYTE *v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  WTF::FastMalloc *v14;
  _BYTE *v15;
  WTF *result;
  unint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  unint64_t v20;
  WTF::FastMalloc *v21;
  uint64_t v22;
  NSObject *v23;
  const void *v24;
  NSObject *v25;
  WTF *v26;
  _QWORD *v27;
  WTF *v28;
  unsigned __int8 **v29;
  unsigned __int8 *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 **v39;
  unsigned __int8 *v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 **v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t destructor;
  WTF *v57;
  _QWORD v58[14];
  uint64_t v59;

  if (a3 >= 0xFFFF)
  {
LABEL_22:
    result = 0;
    v55 = 0;
    return result;
  }
  if (!*(_BYTE *)(a1 + 48))
  {
    v17 = a3 + 2;
    v18 = (_BYTE *)WTF::fastMalloc((WTF *)(a3 + 2));
    LODWORD(v55) = v17;
    v54 = v18;
    *v18 = BYTE1(a3);
    v18[1] = a3;
    HIDWORD(v55) = 2;
    if (!a3)
    {
      LODWORD(v17) = 2;
      goto LABEL_40;
    }
    if (v17 <= v55)
    {
      v22 = 2;
    }
    else
    {
      v19 = v55 + ((unint64_t)v55 >> 2);
      if (v19 >= 0x10)
        v20 = v19 + 1;
      else
        v20 = 16;
      if (v20 <= v17)
        v21 = (WTF::FastMalloc *)(a3 + 2);
      else
        v21 = (WTF::FastMalloc *)v20;
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)&v54, v21);
      v22 = HIDWORD(v55);
      if (v17 < HIDWORD(v55))
      {
        __break(0xC471u);
        goto LABEL_79;
      }
    }
    memcpy(&v54[v22], a2, a3);
    goto LABEL_40;
  }
  WebCore::WebRTC::getSTUNOrTURNMessageLengths();
  if (LOBYTE(v58[0]))
  {
    v54 = 0;
    v55 = 0;
    if ((unint64_t)v57 >= a3)
    {
      if (!v57)
      {
        v7 = 0;
        if (a3)
          goto LABEL_8;
        goto LABEL_38;
      }
      if (!((unint64_t)v57 >> 32))
      {
        v7 = (_BYTE *)WTF::fastMalloc(v57);
        LODWORD(v55) = (_DWORD)v57;
        v54 = v7;
        if (a3)
        {
LABEL_8:
          memcpy(v7, a2, a3);
          HIDWORD(v55) = a3;
          v8 = a3;
LABEL_9:
          v9 = -1;
          while (++v9 < (unint64_t)v57 - a3)
          {
            v10 = v8;
            if (v8 == (_DWORD)v55)
            {
              v11 = v8 + 1;
              v12 = v10 + (v10 >> 2);
              if (v12 >= 0x10)
                v13 = v12 + 1;
              else
                v13 = 16;
              if (v13 <= v11)
                v14 = (WTF::FastMalloc *)(v10 + 1);
              else
                v14 = (WTF::FastMalloc *)v13;
              WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)&v54, v14);
              v15 = &v54[HIDWORD(v55)];
            }
            else
            {
              v15 = &v54[v8];
            }
            *v15 = 0;
            v8 = ++HIDWORD(v55);
            if (!LOBYTE(v58[0]))
            {
              __break(1u);
              goto LABEL_22;
            }
          }
          LODWORD(v17) = HIDWORD(v55);
          if (!HIDWORD(v55))
            goto LABEL_72;
LABEL_40:
          v23 = *(NSObject **)(a1 + 40);
          v24 = v54;
          v54 = 0;
          v55 = 0;
          WTF::fastFree(0, v6);
          destructor = MEMORY[0x1E0C809B0];
          v57 = (WTF *)3221225472;
          v58[0] = ___ZN6WebKitL14dataFromVectorEON3WTF6VectorIhLm0ENS0_15CrashOnOverflowELm16ENS0_10FastMallocEEE_block_invoke;
          v58[1] = &__block_descriptor_40_e5_v8__0l;
          v58[2] = v24;
          v25 = dispatch_data_create(v24, v17, MEMORY[0x1E0C80D38], &destructor);
          v51 = *(_QWORD *)(a1 + 16);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, *(unsigned __int8 ***)(a1 + 32));
          rtc::PacketOptions::PacketOptions();
          v26 = (WTF *)v52;
          v52 = 0;
          destructor = v51;
          v57 = v26;
          rtc::PacketOptions::PacketOptions();
          v27 = malloc_type_malloc(0xA0uLL, 0x10F004088D86E53uLL);
          *v27 = MEMORY[0x1E0C809A0];
          v27[1] = 50331650;
          v27[2] = WTF::BlockPtr<void ()(NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCTCPSocketCocoa::sendTo(std::span<unsigned char const,18446744073709551615ul>,rtc::SocketAddress const&,rtc::PacketOptions const&)::$_0>(WebKit::NetworkRTCTCPSocketCocoa::sendTo(std::span<unsigned char const,18446744073709551615ul>,rtc::SocketAddress const&,rtc::PacketOptions const&)::$_0)::{lambda(void *,NSObject  {objcproto11OS_nw_error}*)#1}::__invoke;
          v27[3] = &WTF::BlockPtr<void ()(NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCTCPSocketCocoa::sendTo(std::span<unsigned char const,18446744073709551615ul>,rtc::SocketAddress const&,rtc::PacketOptions const&)::$_0>(WebKit::NetworkRTCTCPSocketCocoa::sendTo(std::span<unsigned char const,18446744073709551615ul>,rtc::SocketAddress const&,rtc::PacketOptions const&)::$_0)::descriptor;
          v28 = v57;
          v27[4] = destructor;
          v27[5] = v28;
          v57 = 0;
          rtc::PacketOptions::PacketOptions();
          rtc::PacketOptions::~PacketOptions((rtc::PacketOptions *)v58);
          v29 = (unsigned __int8 **)v57;
          v57 = 0;
          if (!v29)
            goto LABEL_55;
          v30 = *v29;
          if (__ldaxr(*v29))
          {
            __clrex();
          }
          else if (!__stxr(1u, v30))
          {
            goto LABEL_45;
          }
          MEMORY[0x19AEABB3C](v30);
LABEL_45:
          v32 = *((_QWORD *)v30 + 1);
          v33 = v32 - 1;
          *((_QWORD *)v30 + 1) = v32 - 1;
          if (v32 == 1)
          {
            v49 = *((_QWORD *)v30 + 2);
            v34 = *((_QWORD *)v30 + 3);
            *((_QWORD *)v30 + 3) = 0;
            v35 = v49 == 0;
          }
          else
          {
            v34 = 0;
            v35 = 0;
          }
          v36 = __ldxr(v30);
          if (v36 == 1)
          {
            if (!__stlxr(0, v30))
            {
              if (v33)
                goto LABEL_55;
LABEL_53:
              v37 = WTF::fastMalloc((WTF *)0x20);
              *(_QWORD *)v37 = off_1E34ACA48;
              *(_QWORD *)(v37 + 8) = v30;
              *(_QWORD *)(v37 + 16) = v34;
              *(_BYTE *)(v37 + 24) = v35;
              v59 = v37;
              WTF::ensureOnMainRunLoop();
              v38 = v59;
              v59 = 0;
              if (v38)
                (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
LABEL_55:
              nw_connection_send(v23, v25, (nw_content_context_t)*MEMORY[0x1E0CCECE8], 1, v27);
              _Block_release(v27);
              rtc::PacketOptions::~PacketOptions((rtc::PacketOptions *)&v53);
              v39 = v52;
              v52 = 0;
              if (!v39)
                goto LABEL_70;
              v40 = *v39;
              if (__ldaxr(*v39))
              {
                __clrex();
              }
              else if (!__stxr(1u, v40))
              {
                goto LABEL_60;
              }
              MEMORY[0x19AEABB3C](v40);
LABEL_60:
              v42 = *((_QWORD *)v40 + 1);
              v43 = v42 - 1;
              *((_QWORD *)v40 + 1) = v42 - 1;
              if (v42 == 1)
              {
                v50 = *((_QWORD *)v40 + 2);
                v44 = *((_QWORD *)v40 + 3);
                *((_QWORD *)v40 + 3) = 0;
                v45 = v50 == 0;
              }
              else
              {
                v44 = 0;
                v45 = 0;
              }
              v46 = __ldxr(v40);
              if (v46 == 1)
              {
                if (!__stlxr(0, v40))
                {
                  if (!v43)
                  {
LABEL_68:
                    v47 = WTF::fastMalloc((WTF *)0x20);
                    *(_QWORD *)v47 = off_1E34ACA48;
                    *(_QWORD *)(v47 + 8) = v40;
                    *(_QWORD *)(v47 + 16) = v44;
                    *(_BYTE *)(v47 + 24) = v45;
                    destructor = v47;
                    WTF::ensureOnMainRunLoop();
                    v48 = destructor;
                    destructor = 0;
                    if (v48)
                      (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
                  }
LABEL_70:
                  if (v25)
                    CFRelease(v25);
                  goto LABEL_72;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v40);
              if (!v43)
                goto LABEL_68;
              goto LABEL_70;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v30);
          if (v33)
            goto LABEL_55;
          goto LABEL_53;
        }
LABEL_38:
        v8 = 0;
        goto LABEL_9;
      }
      __break(0xC471u);
LABEL_79:
      JUMPOUT(0x196FFDD38);
    }
  }
  else
  {
    v54 = 0;
    v55 = 0;
  }
LABEL_72:
  result = (WTF *)v54;
  if (v54)
  {
    v54 = 0;
    LODWORD(v55) = 0;
    return (WTF *)WTF::fastFree(result, v6);
  }
  return result;
}

void sub_196FFDD44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF *a26,int a27,uint64_t a28,uint64_t a29)
{
  _Unwind_Resume(exception_object);
}

void WebKit::NetworkRTCTCPSocketCocoa::getInterfaceName(WebKit::NetworkRTCProvider *a1, WTF::URL *a2, const WTF::String *a3, BOOL a4, int a5, const WebCore::RegistrableDomain *a6, uint64_t *a7)
{
  int v14;
  int v15;
  __int16 v16;
  unsigned __int16 v17;
  uint64_t v18;
  const char *v19;
  const char *v20;
  void *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  _QWORD *v25;
  NSObject *v26;
  _QWORD *v27;
  WTF::StringImpl *v28;
  WTF *v29;
  WTF::StringImpl *v30;
  WTF *v31;
  nw_connection_t connection;

  v14 = WTF::URL::protocolIs();
  v15 = WTF::URL::port(a2);
  if (v14)
    v16 = 443;
  else
    v16 = 80;
  if ((v15 & 0xFF0000) != 0)
    v17 = v15;
  else
    v17 = v16;
  WTF::URL::host(a2);
  if ((v18 & 0xFF00000000) != 0)
    WTF::String::String();
  else
    WTF::String::String();
  WTF::String::utf8();
  if (v31)
    v19 = (char *)v31 + 16;
  else
    v19 = 0;
  WTF::String::number((WTF::String *)v17);
  WTF::String::utf8();
  if (v29)
    v20 = (char *)v29 + 16;
  else
    v20 = 0;
  WebKit::createNWConnection((WebKit *)&connection, a1, v19, v20, v14, a3, a4, a5, a6);
  if (v29)
  {
    if (*(_DWORD *)v29 == 1)
      WTF::fastFree(v29, v21);
    else
      --*(_DWORD *)v29;
  }
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v21);
    else
      *(_DWORD *)v28 -= 2;
  }
  if (v31)
  {
    if (*(_DWORD *)v31 == 1)
      WTF::fastFree(v31, v21);
    else
      --*(_DWORD *)v31;
  }
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v21);
    else
      *(_DWORD *)v30 -= 2;
  }
  v22 = *a7;
  *a7 = 0;
  v23 = (unsigned int *)((char *)a1 + 24);
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 + 1, v23));
  v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v25 = &off_1E34B6738;
  v25[1] = v22;
  v25[2] = a1;
  v26 = connection;
  if (qword_1ECE72170 != -1)
    dispatch_once(&qword_1ECE72170, &__block_literal_global_99);
  nw_connection_set_queue(v26, (dispatch_queue_t)qword_1ECE72168);
  if (v26)
    CFRetain(v26);
  v27 = malloc_type_malloc(0x30uLL, 0x10E004095F28C21uLL);
  *v27 = MEMORY[0x1E0C809A0];
  v27[1] = 50331650;
  v27[2] = WTF::BlockPtr<void ()(nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCTCPSocketCocoa::getInterfaceName(WebKit::NetworkRTCProvider &,WTF::URL const&,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(WTF::String&&)> &&)::$_0>(WebKit::NetworkRTCTCPSocketCocoa::getInterfaceName(WebKit::NetworkRTCProvider &,WTF::URL const&,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(WTF::String&&)> &&)::$_0)::{lambda(void *,nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)#1}::__invoke;
  v27[3] = &WTF::BlockPtr<void ()(nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCTCPSocketCocoa::getInterfaceName(WebKit::NetworkRTCProvider &,WTF::URL const&,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(WTF::String&&)> &&)::$_0>(WebKit::NetworkRTCTCPSocketCocoa::getInterfaceName(WebKit::NetworkRTCProvider &,WTF::URL const&,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(WTF::String&&)> &&)::$_0)::descriptor;
  v27[4] = v25;
  v27[5] = v26;
  nw_connection_set_state_changed_handler(v26, v27);
  _Block_release(v27);
  nw_connection_start(v26);
  if (v26)
    CFRelease(v26);
}

void sub_196FFE3D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF *a11, WTF::StringImpl *a12, WTF *a13, CFTypeRef cf)
{
  uint64_t v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NetworkRTCUDPSocketCocoaConnections::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, NSObject *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, char a6@<W5>, char a7@<W6>, WebKit *a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v18;
  uint64_t result;

  v18 = WTF::fastMalloc((WTF *)0xC0);
  result = WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(v18, a1, a2, a3, a4, a5, a6, a7, a8);
  *a9 = v18;
  return result;
}

void sub_196FFE590(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::NetworkRTCUDPSocketCocoa::~NetworkRTCUDPSocketCocoa(WebKit::NetworkRTCUDPSocketCocoa *this, void *a2)
{
  unsigned __int8 **v2;

  v2 = (unsigned __int8 **)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkRTCUDPSocketCocoaConnections,(WTF::DestructionThread)0>(*v2, a2);
}

{
  unsigned __int8 **v3;

  v3 = (unsigned __int8 **)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkRTCUDPSocketCocoaConnections,(WTF::DestructionThread)0>(*v3, a2);
  WTF::fastFree(this, a2);
}

uint64_t WebKit::NetworkRTCUDPSocketCocoa::close(WebKit::NetworkRTCUDPSocketCocoa *this)
{
  uint64_t v2;
  unsigned __int8 *v3;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  int v12;
  const void *v13;
  int v14;
  uint64_t result;
  uint64_t v16;

  v2 = *((_QWORD *)this + 3);
  v3 = (unsigned __int8 *)(v2 + 168);
  if (__ldaxr((unsigned __int8 *)(v2 + 168)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](v2 + 168);
LABEL_5:
  *(_BYTE *)(v2 + 169) = 1;
  v6 = WTF::HashTable<rtc::SocketAddress,WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashMap<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashTraits<rtc::SocketAddress>,WTF::HashTraits<std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<rtc::SocketAddress>>::begin(*(_QWORD *)(v2 + 176));
  v7 = v5;
  v8 = *(_QWORD *)(v2 + 176);
  if (v8)
    v9 = v8 + 88 * *(unsigned int *)(v8 - 4);
  else
    v9 = 0;
  if (v9 != v6)
  {
    do
    {
      v10 = *(NSObject **)(v6 + 72);
      *(_BYTE *)(*(_QWORD *)(v6 + 80) + 4) = 1;
      nw_connection_cancel(v10);
      while (1)
      {
        v6 += 88;
        if ((void *)v6 == v7)
          break;
        v11 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<rtc::SocketAddress>,false>::isEmptyValue<rtc::SocketAddress>();
        if (*(_DWORD *)(v6 + 60) == 0x80000000)
          v12 = 1;
        else
          v12 = v11;
        if (v12 != 1)
          goto LABEL_17;
      }
      v6 = (uint64_t)v7;
LABEL_17:
      ;
    }
    while (v6 != v9);
    v8 = *(_QWORD *)(v2 + 176);
  }
  if (v8)
  {
    *(_QWORD *)(v2 + 176) = 0;
    WTF::HashTable<rtc::SocketAddress,WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashMap<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashTraits<rtc::SocketAddress>,WTF::HashTraits<std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<rtc::SocketAddress>>::deallocateTable(v8, v5);
  }
  nw_listener_cancel(*(nw_listener_t *)(v2 + 160));
  v13 = *(const void **)(v2 + 160);
  *(_QWORD *)(v2 + 160) = 0;
  if (v13)
    CFRelease(v13);
  v14 = __ldxr(v3);
  if (v14 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, v3))
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 168));
  WebKit::NetworkRTCProvider::takeSocket(*((uint64_t **)this + 1), *((_QWORD *)this + 2), &v16);
  result = v16;
  if (v16)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  return result;
}

void sub_196FFE780(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

void WebKit::NetworkRTCUDPSocketCocoa::setOption(WebKit::NetworkRTCUDPSocketCocoa *this, int a2, int a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  NSObject *v17;
  _DWORD v18[2];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a2 != 5)
    return;
  v3 = a3;
  v4 = *((_QWORD *)this + 3);
  if (a3 > 33)
  {
    if (a3 != 34 && a3 != 36)
    {
      if (a3 == 46)
      {
        v5 = 768;
        v3 = 32;
        goto LABEL_12;
      }
      goto LABEL_35;
    }
    v5 = 512;
    v3 = 188;
LABEL_12:
    *(_DWORD *)(v4 + 184) = v5 | v3;
    *(_BYTE *)(v4 + 188) = 1;
    v6 = (unsigned __int8 *)(v4 + 168);
    if (__ldaxr((unsigned __int8 *)(v4 + 168)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v6))
    {
      goto LABEL_16;
    }
    MEMORY[0x19AEABB3C](v4 + 168);
LABEL_16:
    v8 = WTF::HashTable<rtc::SocketAddress,WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashMap<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashTraits<rtc::SocketAddress>,WTF::HashTraits<std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<rtc::SocketAddress>>::begin(*(_QWORD *)(v4 + 176));
    v9 = v8;
    v11 = v10;
    v12 = *(_QWORD *)(v4 + 176);
    if (v12)
      v13 = v12 + 88 * *(unsigned int *)(v12 - 4);
    else
      v13 = 0;
    if (v13 != v8)
    {
      do
      {
        if (!*(_BYTE *)(v4 + 188))
          __break(1u);
        nw_connection_reset_traffic_class();
        while (1)
        {
          v9 += 88;
          if (v9 == v11)
            break;
          v14 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<rtc::SocketAddress>,false>::isEmptyValue<rtc::SocketAddress>();
          if (*(_DWORD *)(v9 + 60) == 0x80000000)
            v15 = 1;
          else
            v15 = v14;
          if (v15 != 1)
            goto LABEL_29;
        }
        v9 = v11;
LABEL_29:
        ;
      }
      while (v9 != v13);
    }
    v16 = __ldxr(v6);
    if (v16 == 1)
    {
      if (!__stlxr(0, v6))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v4 + 168));
    return;
  }
  if (!a3)
  {
    v5 = 0;
    goto LABEL_12;
  }
  if (a3 == 8)
  {
    v5 = 0;
    v3 = 100;
    goto LABEL_12;
  }
LABEL_35:
  v17 = qword_1ECE71B18;
  if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_ERROR))
  {
    v18[0] = 67109120;
    v18[1] = v3;
    _os_log_error_impl(&dword_196BCC000, v17, OS_LOG_TYPE_ERROR, "NetworkRTCUDPSocketCocoaConnections has an unexpected DSCP value %d", (uint8_t *)v18, 8u);
  }
}

void sub_196FFE9DC(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

void WebKit::NetworkRTCUDPSocketCocoa::sendTo(uint64_t a1, const void *a2, size_t a3, rtc::SocketAddress *a4)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  rtc::SocketAddress *v11;
  int i;
  unsigned int v13;
  uint64_t v14;
  NSObject *secure_udp;
  rtc::IPAddress *v16;
  rtc::IPAddress *v17;
  void (*v18)(NSObject *, _QWORD);
  NSObject *host_with_numeric_port;
  nw_ip_version_t v20;
  rtc::IPAddress *v21;
  rtc::IPAddress *v22;
  std::string *v23;
  WTF::String *v24;
  const char *v25;
  void *v26;
  NSObject *host;
  WTF::StringImpl *v28;
  NSObject *v29;
  unsigned int *v30;
  void *v31;
  const void *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  NSObject *v42;
  int v43;
  NSObject *v44;
  unsigned __int8 **v45;
  _QWORD *v46;
  std::string::size_type size;
  unsigned __int8 **v48;
  unsigned __int8 *v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  int v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  unsigned __int8 **v58;
  unsigned __int8 *v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  int v65;
  uint64_t v66;
  std::string::size_type v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  unsigned __int8 *v71;
  WTF *v74;
  WTF *v75;
  unsigned __int8 **v76;
  uint64_t v77;
  std::string __p[5];
  WTF::StringImpl *v79;

  v5 = *(_QWORD *)(a1 + 24);
  rtc::SocketAddress::SocketAddress((rtc::SocketAddress *)__p);
  if ((rtc::SocketAddress::operator==() & 1) != 0)
  {
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    return;
  }
  v6 = *((_DWORD *)a4 + 15);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (v6 != 0x80000000)
  {
    v7 = __ldaxr((unsigned __int8 *)(v5 + 168));
    v71 = (unsigned __int8 *)(v5 + 168);
    if (v7)
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)(v5 + 168)))
    {
      goto LABEL_11;
    }
    MEMORY[0x19AEABB3C](v71);
LABEL_11:
    v8 = *(_QWORD *)(v5 + 176);
    v70 = (uint64_t *)(v5 + 176);
    if (v8
      || (WTF::HashTable<rtc::SocketAddress,WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashMap<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashTraits<rtc::SocketAddress>,WTF::HashTraits<std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<rtc::SocketAddress>>::expand((uint64_t *)(v5 + 176), 0), (v8 = *v70) != 0))
    {
      v9 = *(_DWORD *)(v8 - 8);
    }
    else
    {
      v9 = 0;
    }
    v10 = rtc::SocketAddress::Hash(a4);
    v11 = 0;
    for (i = 1; ; ++i)
    {
      v13 = v10 & v9;
      v14 = v8 + 88 * (v10 & v9);
      if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<rtc::SocketAddress>,false>::isEmptyValue<rtc::SocketAddress>() & 1) != 0)
        break;
      if ((WTF::DefaultHash<rtc::SocketAddress>::equal((rtc::SocketAddress *)(v8 + 88 * v13), a4) & 1) != 0)
        goto LABEL_72;
      if (*(_DWORD *)(v14 + 60) == 0x80000000)
        v11 = (rtc::SocketAddress *)(v8 + 88 * v13);
      v10 = i + v13;
    }
    if (v11)
    {
      rtc::SocketAddress::SocketAddress(v11);
      *((_QWORD *)v11 + 9) = 0;
      *((_QWORD *)v11 + 10) = 0;
      --*(_DWORD *)(*v70 - 16);
      v14 = (uint64_t)v11;
    }
    rtc::SocketAddress::operator=();
    secure_udp = nw_parameters_create_secure_udp((nw_parameters_configure_protocol_block_t)*MEMORY[0x1E0CCED20], (nw_parameters_configure_protocol_block_t)*MEMORY[0x1E0CCED18]);
    v16 = (rtc::IPAddress *)rtc::SocketAddress::ipaddr((rtc::SocketAddress *)(v5 + 88));
    rtc::IPAddress::ToString(v16);
    v17 = (rtc::IPAddress *)rtc::SocketAddress::ipaddr((rtc::SocketAddress *)(v5 + 88));
    if (rtc::IPAddress::IsNil(v17))
      std::string::operator=(__p, (const std::string *)(v5 + 88));
    if (nw_parameters_allow_sharing_port_with_listenerPtr())
    {
      v18 = (void (*)(NSObject *, _QWORD))nw_parameters_allow_sharing_port_with_listenerPtr();
      v18(secure_udp, *(_QWORD *)(v5 + 160));
      rtc::SocketAddress::port((rtc::SocketAddress *)(v5 + 88));
    }
    host_with_numeric_port = nw_endpoint_create_host_with_numeric_port();
    nw_parameters_set_local_endpoint(secure_udp, host_with_numeric_port);
    if (host_with_numeric_port)
      CFRelease(host_with_numeric_port);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if (*((_DWORD *)a4 + 8) == 2)
      v20 = nw_ip_version_4;
    else
      v20 = nw_ip_version_6;
    WebKit::NetworkRTCUDPSocketCocoaConnections::configureParameters(v5, secure_udp, v20);
    if (*(_BYTE *)(v5 + 188))
      nw_parameters_set_traffic_class();
    v21 = (rtc::IPAddress *)rtc::SocketAddress::ipaddr(a4);
    rtc::IPAddress::ToString(v21);
    v22 = (rtc::IPAddress *)rtc::SocketAddress::ipaddr(a4);
    if (rtc::IPAddress::IsNil(v22))
      std::string::operator=(__p, (const std::string *)a4);
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = __p;
    else
      v23 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    v24 = (WTF::String *)rtc::SocketAddress::port(a4);
    WTF::String::number(v24);
    WTF::String::utf8();
    if (v74)
      v25 = (char *)v74 + 16;
    else
      v25 = 0;
    host = nw_endpoint_create_host((const char *)v23, v25);
    if (v74)
    {
      if (*(_DWORD *)v74 == 1)
        WTF::fastFree(v74, v26);
      else
        --*(_DWORD *)v74;
    }
    v28 = v79;
    v79 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v26);
      else
        *(_DWORD *)v28 -= 2;
    }
    v29 = nw_connection_create(host, secure_udp);
    v30 = (unsigned int *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v30 = 1;
    WebKit::NetworkRTCUDPSocketCocoaConnections::setupNWConnection(v5, v29, v30, a4);
    if (host)
      CFRelease(host);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if (secure_udp)
      CFRelease(secure_udp);
    v32 = *(const void **)(v14 + 72);
    *(_QWORD *)(v14 + 72) = v29;
    if (v32)
      CFRelease(v32);
    v33 = *(unsigned int **)(v14 + 80);
    *(_QWORD *)(v14 + 80) = v30;
    if (v33)
    {
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (!v35)
      {
        atomic_store(1u, v33);
        WTF::fastFree((WTF *)v33, v31);
      }
    }
    v36 = *v70;
    if (*v70)
      v37 = *(_DWORD *)(v36 - 12) + 1;
    else
      v37 = 1;
    *(_DWORD *)(v36 - 12) = v37;
    v38 = *v70;
    if (*v70)
      v39 = *(_DWORD *)(v38 - 12);
    else
      v39 = 0;
    v40 = (*(_DWORD *)(v38 - 16) + v39);
    v41 = *(unsigned int *)(v38 - 4);
    if (v41 > 0x400)
    {
      if (v41 > 2 * v40)
      {
LABEL_72:
        v42 = *(NSObject **)(v14 + 72);
        v43 = __ldxr(v71);
        if (v43 == 1)
        {
          if (!__stlxr(0, v71))
          {
LABEL_77:
            v44 = dispatch_data_create(a2, a3, 0, 0);
            v75 = *(WTF **)(v5 + 8);
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v76, *(unsigned __int8 ***)(v5 + 16));
            rtc::PacketOptions::PacketOptions();
            v45 = v76;
            v76 = 0;
            __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v75;
            __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)v45;
            rtc::PacketOptions::PacketOptions();
            v46 = malloc_type_malloc(0xA0uLL, 0x10F004088D86E53uLL);
            *v46 = MEMORY[0x1E0C809A0];
            v46[1] = 50331650;
            v46[2] = WTF::BlockPtr<void ()(NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCUDPSocketCocoaConnections::sendTo(std::span<unsigned char const,18446744073709551615ul>,rtc::SocketAddress const&,rtc::PacketOptions const&)::$_0>(WebKit::NetworkRTCUDPSocketCocoaConnections::sendTo(std::span<unsigned char const,18446744073709551615ul>,rtc::SocketAddress const&,rtc::PacketOptions const&)::$_0)::{lambda(void *,NSObject  {objcproto11OS_nw_error}*)#1}::__invoke;
            v46[3] = &WTF::BlockPtr<void ()(NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCUDPSocketCocoaConnections::sendTo(std::span<unsigned char const,18446744073709551615ul>,rtc::SocketAddress const&,rtc::PacketOptions const&)::$_0>(WebKit::NetworkRTCUDPSocketCocoaConnections::sendTo(std::span<unsigned char const,18446744073709551615ul>,rtc::SocketAddress const&,rtc::PacketOptions const&)::$_0)::descriptor;
            size = __p[0].__r_.__value_.__l.__size_;
            v46[4] = __p[0].__r_.__value_.__r.__words[0];
            v46[5] = size;
            __p[0].__r_.__value_.__l.__size_ = 0;
            rtc::PacketOptions::PacketOptions();
            rtc::PacketOptions::~PacketOptions((rtc::PacketOptions *)&__p[0].__r_.__value_.__r.__words[2]);
            v48 = (unsigned __int8 **)__p[0].__r_.__value_.__l.__size_;
            __p[0].__r_.__value_.__l.__size_ = 0;
            if (!v48)
              goto LABEL_92;
            v49 = *v48;
            if (__ldaxr(*v48))
            {
              __clrex();
            }
            else if (!__stxr(1u, v49))
            {
              goto LABEL_82;
            }
            MEMORY[0x19AEABB3C](v49);
LABEL_82:
            v51 = *((_QWORD *)v49 + 1);
            v52 = v51 - 1;
            *((_QWORD *)v49 + 1) = v51 - 1;
            if (v51 == 1)
            {
              v68 = *((_QWORD *)v49 + 2);
              v53 = *((_QWORD *)v49 + 3);
              *((_QWORD *)v49 + 3) = 0;
              v54 = v68 == 0;
            }
            else
            {
              v53 = 0;
              v54 = 0;
            }
            v55 = __ldxr(v49);
            if (v55 == 1)
            {
              if (!__stlxr(0, v49))
              {
                if (v52)
                  goto LABEL_92;
LABEL_90:
                v56 = WTF::fastMalloc((WTF *)0x20);
                *(_QWORD *)v56 = off_1E34ACA48;
                *(_QWORD *)(v56 + 8) = v49;
                *(_QWORD *)(v56 + 16) = v53;
                *(_BYTE *)(v56 + 24) = v54;
                v79 = (WTF::StringImpl *)v56;
                WTF::ensureOnMainRunLoop();
                v57 = v79;
                v79 = 0;
                if (v57)
                  (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v57 + 8))(v57);
LABEL_92:
                nw_connection_send(v42, v44, (nw_content_context_t)*MEMORY[0x1E0CCECE8], 1, v46);
                _Block_release(v46);
                rtc::PacketOptions::~PacketOptions((rtc::PacketOptions *)&v77);
                v58 = v76;
                v76 = 0;
                if (!v58)
                  goto LABEL_107;
                v59 = *v58;
                if (__ldaxr(*v58))
                {
                  __clrex();
                }
                else if (!__stxr(1u, v59))
                {
                  goto LABEL_97;
                }
                MEMORY[0x19AEABB3C](v59);
LABEL_97:
                v61 = *((_QWORD *)v59 + 1);
                v62 = v61 - 1;
                *((_QWORD *)v59 + 1) = v61 - 1;
                if (v61 == 1)
                {
                  v69 = *((_QWORD *)v59 + 2);
                  v63 = *((_QWORD *)v59 + 3);
                  *((_QWORD *)v59 + 3) = 0;
                  v64 = v69 == 0;
                }
                else
                {
                  v63 = 0;
                  v64 = 0;
                }
                v65 = __ldxr(v59);
                if (v65 == 1)
                {
                  if (!__stlxr(0, v59))
                  {
                    if (!v62)
                    {
LABEL_105:
                      v66 = WTF::fastMalloc((WTF *)0x20);
                      *(_QWORD *)v66 = off_1E34ACA48;
                      *(_QWORD *)(v66 + 8) = v59;
                      *(_QWORD *)(v66 + 16) = v63;
                      *(_BYTE *)(v66 + 24) = v64;
                      __p[0].__r_.__value_.__r.__words[0] = v66;
                      WTF::ensureOnMainRunLoop();
                      v67 = __p[0].__r_.__value_.__r.__words[0];
                      __p[0].__r_.__value_.__r.__words[0] = 0;
                      if (v67)
                        (*(void (**)(std::string::size_type))(*(_QWORD *)v67 + 8))(v67);
                    }
LABEL_107:
                    if (v44)
                      CFRelease(v44);
                    return;
                  }
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow((WTF::Lock *)v59);
                if (!v62)
                  goto LABEL_105;
                goto LABEL_107;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v49);
            if (v52)
              goto LABEL_92;
            goto LABEL_90;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v71);
        goto LABEL_77;
      }
    }
    else if (3 * v41 > 4 * v40)
    {
      goto LABEL_72;
    }
    v14 = WTF::HashTable<rtc::SocketAddress,WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashMap<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashTraits<rtc::SocketAddress>,WTF::HashTraits<std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<rtc::SocketAddress>>::expand(v70, v14);
    goto LABEL_72;
  }
}

void sub_196FFF128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::Lock *a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (__p)
    (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(uint64_t a1, uint64_t a2, uint64_t a3, nw_listener_t a4, uint64_t *a5, uint64_t *a6, char a7, char a8, WebKit *a9)
{
  uint64_t v17;
  uint64_t v18;
  const WebCore::RegistrableDomain *v19;
  uint64_t v20;
  const char *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  NSObject *secure_udp;
  rtc::IPAddress *v26;
  ifaddrs *v27;
  ifaddrs *v28;
  sockaddr *ifa_addr;
  char does_interface_index_support_nat64;
  rtc::IPAddress *v31;
  NSObject *host_with_numeric_port;
  const char *hostname;
  nw_ip_version_t v34;
  const void *v35;
  NSObject *v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::ThreadSafeWeakPtrControlBlock *v39;
  uint64_t v40;
  WTF::ThreadSafeWeakPtrControlBlock *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  void *v45;
  unsigned __int8 *v46;
  uint64_t v47;
  unsigned __int8 **v48;
  unsigned __int8 *v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  int v55;
  uint64_t v56;
  std::string::size_type v57;
  NSObject *v58;
  WTF::ThreadSafeWeakPtrControlBlock *v59;
  int v61;
  _QWORD *v62;
  uint64_t v64;
  void (**__p)(rtc::IPAddress *__hidden);
  _BYTE v66[24];
  WTF::ThreadSafeWeakPtrControlBlock *v67;
  uint64_t v68;
  std::string v69;
  ifaddrs *v70;

  v17 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v17 = 0;
  *(_OWORD *)(v17 + 8) = xmmword_1978CE9C0;
  *(_QWORD *)(v17 + 24) = a1;
  *(_QWORD *)a1 = v17;
  *(_QWORD *)(a1 + 8) = a2;
  v18 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 16) = v18;
  *(_BYTE *)(a1 + 24) = a7;
  *(_BYTE *)(a1 + 25) = WebKit::isKnownTracker(a9, v19);
  *(_BYTE *)(a1 + 26) = a8;
  v20 = *(_QWORD *)(a3 + 192);
  if (v20)
    v21 = (const char *)(v20 + 16);
  else
    v21 = 0;
  WTF::CString::CString((WTF::CString *)(a1 + 32), v21);
  v22 = *(_OWORD *)(a3 + 152);
  v23 = *(_OWORD *)(a3 + 168);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a3 + 184);
  *(_OWORD *)(a1 + 56) = v23;
  *(_OWORD *)(a1 + 40) = v22;
  v24 = *a6;
  *a6 = 0;
  *(_QWORD *)(a1 + 80) = v24;
  rtc::SocketAddress::SocketAddress((rtc::SocketAddress *)(a1 + 88));
  *(_QWORD *)(a1 + 160) = 0;
  *(_WORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 188) = 0;
  secure_udp = nw_parameters_create_secure_udp((nw_parameters_configure_protocol_block_t)*MEMORY[0x1E0CCED20], (nw_parameters_configure_protocol_block_t)*MEMORY[0x1E0CCED18]);
  v26 = (rtc::IPAddress *)rtc::SocketAddress::ipaddr((rtc::SocketAddress *)a4);
  if (rtc::IPAddress::IsNil(v26))
  {
    if (SHIBYTE(a4[2].isa) < 0)
      std::string::__init_copy_ctor_external(&v69, (const std::string::value_type *)a4->isa, (std::string::size_type)a4[1].isa);
    else
      v69 = *(std::string *)&a4->isa;
  }
  else
  {
    if (*(_DWORD *)(rtc::SocketAddress::ipaddr((rtc::SocketAddress *)a4) + 8) != 2)
      goto LABEL_18;
    v70 = 0;
    if (getifaddrs(&v70))
      goto LABEL_9;
    v27 = v70;
    if (!v70)
      goto LABEL_18;
    v28 = v70;
    while (1)
    {
      ifa_addr = v28->ifa_addr;
      if (ifa_addr->sa_family == 2)
      {
        __p = &off_1E34B67B0;
        *(_DWORD *)v66 = 2;
        *(_QWORD *)&v66[4] = 0;
        *(_QWORD *)&v66[12] = 0;
        *(_DWORD *)&v66[4] = *(_DWORD *)&ifa_addr->sa_data[2];
        if (!rtc::IPAddress::operator!=())
          break;
      }
      v28 = v28->ifa_next;
      if (!v28)
      {
        MEMORY[0x19AEB936C](v27, 0x10B0C40815C8216);
        goto LABEL_18;
      }
    }
    if_nametoindex(v28->ifa_name);
    does_interface_index_support_nat64 = nw_nat64_does_interface_index_support_nat64();
    MEMORY[0x19AEB936C](v27, 0x10B0C40815C8216);
    if ((does_interface_index_support_nat64 & 1) != 0)
    {
LABEL_9:
      std::string::basic_string[abi:sn180100]<0>(&v69.__r_.__value_.__l.__data_, "0.0.0.0");
    }
    else
    {
LABEL_18:
      v31 = (rtc::IPAddress *)rtc::SocketAddress::ipaddr((rtc::SocketAddress *)a4);
      rtc::IPAddress::ToString(v31);
    }
  }
  host_with_numeric_port = nw_endpoint_create_host_with_numeric_port();
  hostname = nw_endpoint_get_hostname(host_with_numeric_port);
  if (!hostname)
  {
    __break(1u);
LABEL_70:
    dispatch_once(&qword_1ECE72180, &__block_literal_global_104);
    goto LABEL_32;
  }
  strlen(hostname);
  nw_endpoint_get_port(host_with_numeric_port);
  rtc::SocketAddress::SocketAddress();
  rtc::SocketAddress::operator=();
  if ((v66[15] & 0x80000000) != 0)
    operator delete(__p);
  nw_parameters_set_local_endpoint(secure_udp, host_with_numeric_port);
  if (host_with_numeric_port)
    CFRelease(host_with_numeric_port);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
  if (LODWORD(a4[4].isa) == 2)
    v34 = nw_ip_version_4;
  else
    v34 = nw_ip_version_6;
  WebKit::NetworkRTCUDPSocketCocoaConnections::configureParameters(a1, secure_udp, v34);
  a4 = nw_listener_create(secure_udp);
  v35 = *(const void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = a4;
  if (v35)
  {
    CFRelease(v35);
    a4 = *(nw_listener_t *)(a1 + 160);
  }
  if (qword_1ECE72180 != -1)
    goto LABEL_70;
LABEL_32:
  nw_listener_set_queue(a4, (dispatch_queue_t)qword_1ECE72178);
  v36 = *(NSObject **)(a1 + 160);
  if (v36)
    CFRetain(v36);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)v66, *(unsigned __int8 ***)(a1 + 16));
  v37 = (unsigned int *)(a3 + 24);
  do
    v38 = __ldaxr(v37);
  while (__stlxr(v38 + 1, v37));
  v39 = *(WTF::ThreadSafeWeakPtrControlBlock **)a1;
  v40 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)&v66[8] = a3;
  *(_QWORD *)&v66[16] = v40;
  if (v39)
  {
    v41 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v39);
    a3 = *(_QWORD *)&v66[8];
    v40 = *(_QWORD *)&v66[16];
  }
  else
  {
    v41 = 0;
  }
  v42 = *(_QWORD *)v66;
  *(_QWORD *)v66 = 0;
  *(_QWORD *)&v66[8] = 0;
  v67 = 0;
  v68 = 0;
  v43 = malloc_type_malloc(0x50uLL, 0x10E0040F052829FuLL);
  v44 = MEMORY[0x1E0C809A0];
  *v43 = MEMORY[0x1E0C809A0];
  v43[1] = 50331650;
  v43[2] = WTF::BlockPtr<void ()(nw_listener_state_t,NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_0>(WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_0)::{lambda(void *,nw_listener_state_t,NSObject  {objcproto11OS_nw_error}*)#1}::__invoke;
  v43[3] = &WTF::BlockPtr<void ()(nw_listener_state_t,NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_0>(WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_0)::descriptor;
  v43[4] = v36;
  v43[5] = v42;
  v43[6] = a3;
  v43[7] = v40;
  v43[8] = v41;
  v43[9] = a1;
  nw_listener_set_state_changed_handler(v36, v43);
  _Block_release(v43);
  v46 = (unsigned __int8 *)v67;
  v67 = 0;
  if (v46)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v46, v45);
  v47 = *(_QWORD *)&v66[8];
  *(_QWORD *)&v66[8] = 0;
  if (v47)
    WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v47 + 24));
  v48 = *(unsigned __int8 ***)v66;
  *(_QWORD *)v66 = 0;
  if (v48)
  {
    v49 = *v48;
    if (__ldaxr(*v48))
    {
      __clrex();
    }
    else if (!__stxr(1u, v49))
    {
      goto LABEL_47;
    }
    MEMORY[0x19AEABB3C](v49);
LABEL_47:
    v51 = *((_QWORD *)v49 + 1);
    v52 = v51 - 1;
    *((_QWORD *)v49 + 1) = v51 - 1;
    if (v51 == 1)
    {
      v64 = *((_QWORD *)v49 + 2);
      v53 = *((_QWORD *)v49 + 3);
      *((_QWORD *)v49 + 3) = 0;
      v54 = v64 == 0;
    }
    else
    {
      v53 = 0;
      v54 = 0;
    }
    v55 = __ldxr(v49);
    if (v55 == 1)
    {
      if (!__stlxr(0, v49))
      {
        if (v52)
          goto LABEL_57;
LABEL_55:
        v56 = WTF::fastMalloc((WTF *)0x20);
        *(_QWORD *)v56 = off_1E34ACA48;
        *(_QWORD *)(v56 + 8) = v49;
        *(_QWORD *)(v56 + 16) = v53;
        *(_BYTE *)(v56 + 24) = v54;
        v69.__r_.__value_.__r.__words[0] = v56;
        WTF::ensureOnMainRunLoop();
        v57 = v69.__r_.__value_.__r.__words[0];
        v69.__r_.__value_.__r.__words[0] = 0;
        if (v57)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v57 + 8))(v57);
        goto LABEL_57;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v49);
    if (v52)
      goto LABEL_57;
    goto LABEL_55;
  }
LABEL_57:
  v58 = *(NSObject **)(a1 + 160);
  v59 = *(WTF::ThreadSafeWeakPtrControlBlock **)a1;
  if (__ldaxr(*(unsigned __int8 **)a1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v59))
  {
    goto LABEL_61;
  }
  MEMORY[0x19AEABB3C](v59);
LABEL_61:
  ++*((_QWORD *)v59 + 1);
  v61 = __ldxr((unsigned __int8 *)v59);
  if (v61 != 1)
  {
    __clrex();
    goto LABEL_65;
  }
  if (__stlxr(0, (unsigned __int8 *)v59))
LABEL_65:
    WTF::Lock::unlockSlow(v59);
  v62 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  *v62 = v44;
  v62[1] = 50331650;
  v62[2] = WTF::BlockPtr<void ()(NSObject  {objcproto16OS_nw_connection}*)>::fromCallable<WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_1>(WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_1)::{lambda(void *,NSObject  {objcproto16OS_nw_connection}*)#1}::__invoke;
  v62[3] = &WTF::BlockPtr<void ()(NSObject  {objcproto16OS_nw_connection}*)>::fromCallable<WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_1>(WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_1)::descriptor;
  v62[4] = a1;
  nw_listener_set_new_connection_handler(v58, v62);
  _Block_release(v62);
  nw_listener_start(*(nw_listener_t *)(a1 + 160));
  if (secure_udp)
    CFRelease(secure_udp);
  return a1;
}

void sub_196FFFC44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF **a9, void **a10, unsigned __int8 ***a11, CFTypeRef cf, uint64_t a13, uint64_t a14, uint64_t a15, WTF::ThreadSafeWeakPtrControlBlock *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  const void *v27;
  uint64_t v28;
  void *v30;
  uint64_t v31;
  const void *v32;
  WTF::StringImpl *v33;
  WTF *v34;

  MEMORY[0x19AEB936C](v28, 0x10B0C40815C8216);
  if (v27)
    CFRelease(v27);
  v31 = *(_QWORD *)(v26 + 176);
  if (v31)
    WTF::HashTable<rtc::SocketAddress,WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashMap<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashTraits<rtc::SocketAddress>,WTF::HashTraits<std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<rtc::SocketAddress>>::deallocateTable(v31, v30);
  v32 = *(const void **)(v26 + 160);
  *(_QWORD *)(v26 + 160) = 0;
  if (v32)
    CFRelease(v32);
  if (*(char *)(v26 + 111) < 0)
    operator delete(*a10);
  v33 = *(WTF::StringImpl **)(v26 + 80);
  *(_QWORD *)(v26 + 80) = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v30);
    else
      *(_DWORD *)v33 -= 2;
  }
  v34 = *a9;
  *a9 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 1)
      WTF::fastFree(v34, v30);
    else
      --*(_DWORD *)v34;
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a11);
  _Unwind_Resume(a1);
}

void WebKit::NetworkRTCUDPSocketCocoaConnections::configureParameters(uint64_t a1, nw_parameters_t parameters, nw_ip_version_t a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  _BYTE *v9;
  __int128 v10;
  _OWORD v11[2];
  int v12;

  v6 = nw_parameters_copy_default_protocol_stack(parameters);
  v7 = nw_protocol_stack_copy_internet_protocol(v6);
  nw_ip_options_set_version(v7, a3);
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
    v9 = (_BYTE *)(v8 + 16);
  else
    v9 = 0;
  v10 = *(_OWORD *)(a1 + 56);
  v11[0] = *(_OWORD *)(a1 + 40);
  v11[1] = v10;
  v12 = *(_DWORD *)(a1 + 72);
  WebKit::setNWParametersApplicationIdentifiers((uint64_t)parameters, v9, (uint64_t)v11, a1 + 80);
  WebKit::setNWParametersTrackerOptions((uint64_t)parameters, *(unsigned __int8 *)(a1 + 26));
  nw_parameters_set_reuse_local_address(parameters, 1);
  if (v7)
    CFRelease(v7);
  if (v6)
    CFRelease(v6);
}

void sub_197000180(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Connection::send<Messages::LibWebRTCNetwork::SignalAddressReady>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 128;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v10, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::RTC::Network::SocketAddress,void>::encode((IPC::Encoder *)v10, *(__int16 **)(a2 + 8));
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

void sub_197000274(_Unwind_Exception *a1, void *a2)
{
  IPC::Encoder *v2;
  WTF *v4;
  void *v5;

  IPC::Encoder::~Encoder(v2, a2);
  WTF::fastFree(v4, v5);
  _Unwind_Resume(a1);
}

void *nw_parameters_allow_sharing_port_with_listenerPtr(void)
{
  void *result;
  void *v1;

  if (byte_1ECE72162 == 1)
    return (void *)qword_1ECE72188;
  if (byte_1ECE72163 == 1)
  {
    v1 = (void *)qword_1ECE72190;
  }
  else
  {
    v1 = dlopen("/usr/lib/libnetwork.dylib", 2);
    qword_1ECE72190 = (uint64_t)v1;
    byte_1ECE72163 = 1;
  }
  result = dlsym(v1, "nw_parameters_allow_sharing_port_with_listener");
  qword_1ECE72188 = (uint64_t)result;
  byte_1ECE72162 = 1;
  return result;
}

void WebKit::NetworkRTCUDPSocketCocoaConnections::setupNWConnection(uint64_t a1, nw_connection_t connection, unsigned int *a3, rtc::SocketAddress *a4)
{
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  _QWORD *v15;
  unsigned __int8 **v16;
  unsigned __int8 *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 **v28[2];
  int v29;
  __int128 v30;
  __int16 v31;
  uint64_t v32;

  if (qword_1ECE72180 != -1)
    dispatch_once(&qword_1ECE72180, &__block_literal_global_104);
  nw_connection_set_queue(connection, (dispatch_queue_t)qword_1ECE72178);
  do
    v8 = __ldaxr(a3);
  while (__stlxr(v8 + 1, a3));
  v9 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  v10 = MEMORY[0x1E0C809A0];
  *v9 = MEMORY[0x1E0C809A0];
  v9[1] = 50331650;
  v9[2] = WTF::BlockPtr<void ()(nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCUDPSocketCocoaConnections::setupNWConnection(NSObject {objcproto16OS_nw_connection}*,WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker &,rtc::SocketAddress const&)::$_0>(WebKit::NetworkRTCUDPSocketCocoaConnections::setupNWConnection(NSObject {objcproto16OS_nw_connection}*,WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker &,rtc::SocketAddress const&)::$_0)::{lambda(void *,nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)#1}::__invoke;
  v9[3] = &WTF::BlockPtr<void ()(nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCUDPSocketCocoaConnections::setupNWConnection(NSObject {objcproto16OS_nw_connection}*,WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker &,rtc::SocketAddress const&)::$_0>(WebKit::NetworkRTCUDPSocketCocoaConnections::setupNWConnection(NSObject {objcproto16OS_nw_connection}*,WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker &,rtc::SocketAddress const&)::$_0)::descriptor;
  v9[4] = a3;
  nw_connection_set_state_changed_handler(connection, v9);
  _Block_release(v9);
  if (connection)
    CFRetain(connection);
  do
    v11 = __ldaxr(a3);
  while (__stlxr(v11 + 1, a3));
  v27 = *(_QWORD *)(a1 + 8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v28, *(unsigned __int8 ***)(a1 + 16));
  v12 = rtc::SocketAddress::ipaddr(a4);
  v28[1] = (unsigned __int8 **)&off_1E34B67B0;
  v29 = *(_DWORD *)(v12 + 8);
  v30 = *(_OWORD *)(v12 + 12);
  v31 = rtc::SocketAddress::port(a4);
  v13 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v13 = off_1E34B6788;
  *(_QWORD *)(v13 + 8) = v27;
  v14 = v28[0];
  v28[0] = 0;
  *(_QWORD *)(v13 + 16) = v14;
  *(_QWORD *)(v13 + 24) = &off_1E34B67B0;
  *(_DWORD *)(v13 + 32) = v29;
  *(_OWORD *)(v13 + 36) = v30;
  *(_WORD *)(v13 + 56) = v31;
  v15 = malloc_type_malloc(0x40uLL, 0x10E0040B878C05FuLL);
  *v15 = v10;
  v15[1] = 50331650;
  v15[2] = WTF::BlockPtr<void ()(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)>::fromCallable<WebKit::processUDPData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Ref<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>>,int,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}>(WebKit::processUDPData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Ref<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>>,int,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1})::{lambda(void *,NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}::__invoke;
  v15[3] = &WTF::BlockPtr<void ()(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)>::fromCallable<WebKit::processUDPData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Ref<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>>,int,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}>(WebKit::processUDPData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Ref<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>>,int,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1})::descriptor;
  v15[4] = connection;
  v15[5] = v13;
  *((_DWORD *)v15 + 12) = 0;
  v15[7] = a3;
  nw_connection_receive(connection, 1u, 0xFFFFFFFF, v15);
  _Block_release(v15);
  v16 = v28[0];
  v28[0] = 0;
  if (v16)
  {
    v17 = *v16;
    if (__ldaxr(*v16))
    {
      __clrex();
    }
    else if (!__stxr(1u, v17))
    {
      goto LABEL_13;
    }
    MEMORY[0x19AEABB3C](v17);
LABEL_13:
    v19 = *((_QWORD *)v17 + 1);
    v20 = v19 - 1;
    *((_QWORD *)v17 + 1) = v19 - 1;
    if (v19 == 1)
    {
      v26 = *((_QWORD *)v17 + 2);
      v21 = *((_QWORD *)v17 + 3);
      *((_QWORD *)v17 + 3) = 0;
      v22 = v26 == 0;
    }
    else
    {
      v21 = 0;
      v22 = 0;
    }
    v23 = __ldxr(v17);
    if (v23 == 1)
    {
      if (!__stlxr(0, v17))
      {
        if (v20)
          goto LABEL_23;
        goto LABEL_21;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v17);
    if (v20)
      goto LABEL_23;
LABEL_21:
    v24 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v24 = off_1E34ACA48;
    *(_QWORD *)(v24 + 8) = v17;
    *(_QWORD *)(v24 + 16) = v21;
    *(_BYTE *)(v24 + 24) = v22;
    v32 = v24;
    WTF::ensureOnMainRunLoop();
    v25 = v32;
    v32 = 0;
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  }
LABEL_23:
  nw_connection_start(connection);
}

void sub_1970005EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::NetworkRTCTCPSocketCocoa::type(WebKit::NetworkRTCTCPSocketCocoa *this)
{
  return 1;
}

uint64_t WebKit::NetworkRTCTCPSocketCocoa::identifier(WebKit::NetworkRTCTCPSocketCocoa *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t WebKit::NetworkRTCUDPSocketCocoa::type(WebKit::NetworkRTCUDPSocketCocoa *this)
{
  return 0;
}

uint64_t WebKit::NetworkRTCUDPSocketCocoa::identifier(WebKit::NetworkRTCUDPSocketCocoa *this)
{
  return *((_QWORD *)this + 2);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;
  size_t v9;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_11;
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  v9 = __sz + 1;
  if (v5 <= (std::string *)__s && (char *)v5 + v9 > __s)
  {
    __break(1u);
LABEL_11:
    abort();
  }
  memmove(v5, __s, v9);
}

void ___ZN6WebKitL18createNWConnectionERNS_18NetworkRTCProviderEPKcS3_bRKN3WTF6StringEbbRKN7WebCore17RegistrableDomainE_block_invoke(int a1, nw_protocol_options_t options)
{
  nw_tcp_options_set_no_delay(options, 1);
}

dispatch_queue_t ___ZN6WebKitL14tcpSocketQueueEv_block_invoke()
{
  dispatch_queue_t result;

  result = dispatch_queue_create("WebRTC TCP socket queue", MEMORY[0x1E0C80D50]);
  qword_1ECE72168 = (uint64_t)result;
  return result;
}

unsigned int *WTF::BlockPtr<void ()(nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCTCPSocketCocoa::NetworkRTCTCPSocketCocoa(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,int,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&)::$_0>(WebKit::NetworkRTCTCPSocketCocoa::NetworkRTCTCPSocketCocoa(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,int,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  unsigned int *result;
  unsigned int v5;
  unsigned int v6;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 56));
  v3 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 24));
  result = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    do
    {
      v5 = __ldaxr(result);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, result));
    if (!v6)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v2);
    }
  }
  return result;
}

char *WTF::BlockPtr<void ()(nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCTCPSocketCocoa::NetworkRTCTCPSocketCocoa(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,int,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&)::$_0>(WebKit::NetworkRTCTCPSocketCocoa::NetworkRTCTCPSocketCocoa(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,int,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&)::$_0)::{lambda(void *,nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)#1}::__invoke(char *result, int a2)
{
  char *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  unsigned __int8 **v13;
  unsigned __int8 *v14;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  uint64_t *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  uint64_t *v36;
  uint64_t v37;
  char v38;
  uint64_t *v39[2];
  uint64_t (*v40)(char, uint64_t *, uint64_t *);
  uint64_t (*v41)(_QWORD *);

  v2 = result;
  if (a2 == 4)
  {
    v16 = *((_QWORD *)result + 6);
    v17 = (unsigned int *)(v16 + 24);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
    v19 = *((_QWORD *)result + 5);
    v20 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
    *v20 = (uint64_t)&off_1E34B6470;
    v20[1] = v16;
    v20[2] = v19;
    v21 = *(_QWORD *)(v16 + 112);
    v39[0] = v20;
    v40 = absl::internal_any_invocable::LocalManagerNontrivial<WTF::Function<void ()(void)>>;
    v41 = absl::internal_any_invocable::LocalInvoker<false,void,WTF::Function<void ()(void)> &&>;
    webrtc::TaskQueueBase::PostTask(v21, (uint64_t)v39, (uint64_t)&v35);
    v40(1, (uint64_t *)v39, (uint64_t *)v39);
    v22 = *((_QWORD *)v2 + 7);
    LODWORD(v35) = -1;
    v39[0] = (uint64_t *)(v2 + 40);
    v39[1] = (uint64_t *)&v35;
    return IPC::Connection::send<Messages::LibWebRTCNetwork::SignalClose>(v22, (uint64_t)v39, 0, 0, 0);
  }
  if (a2 != 3)
    return result;
  v3 = *((_QWORD *)result + 6);
  v4 = (unsigned int *)*((_QWORD *)result + 4);
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  v35 = (WTF *)v4;
  v6 = (uint64_t *)(result + 56);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v36, (uint64_t **)result + 7);
  v8 = *((_QWORD *)v2 + 5);
  v7 = (uint64_t *)(v2 + 40);
  v37 = v8;
  v9 = (uint64_t *)WTF::fastMalloc((WTF *)0x20);
  *v9 = (uint64_t)off_1E34B6448;
  v9[1] = (uint64_t)v35;
  v10 = v36;
  v35 = 0;
  v36 = 0;
  v9[2] = (uint64_t)v10;
  v9[3] = v37;
  v11 = *(_QWORD *)(v3 + 112);
  v39[0] = v9;
  v40 = absl::internal_any_invocable::LocalManagerNontrivial<WTF::Function<void ()(void)>>;
  v41 = absl::internal_any_invocable::LocalInvoker<false,void,WTF::Function<void ()(void)> &&>;
  webrtc::TaskQueueBase::PostTask(v11, (uint64_t)v39, (uint64_t)&v38);
  v40(1, (uint64_t *)v39, (uint64_t *)v39);
  v13 = (unsigned __int8 **)v36;
  v36 = 0;
  if (!v13)
    goto LABEL_23;
  v14 = *v13;
  if (__ldaxr(*v13))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEABB3C](v14);
LABEL_13:
  v23 = *((_QWORD *)v14 + 1);
  v24 = v23 - 1;
  *((_QWORD *)v14 + 1) = v23 - 1;
  if (v23 == 1)
  {
    v34 = *((_QWORD *)v14 + 2);
    v25 = *((_QWORD *)v14 + 3);
    *((_QWORD *)v14 + 3) = 0;
    v26 = v34 == 0;
  }
  else
  {
    v25 = 0;
    v26 = 0;
  }
  v27 = __ldxr(v14);
  if (v27 != 1)
  {
    __clrex();
LABEL_20:
    WTF::Lock::unlockSlow((WTF::Lock *)v14);
    if (!v24)
      goto LABEL_21;
    goto LABEL_23;
  }
  if (__stlxr(0, v14))
    goto LABEL_20;
  if (!v24)
  {
LABEL_21:
    v28 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v28 = off_1E34ACA48;
    *(_QWORD *)(v28 + 8) = v14;
    *(_QWORD *)(v28 + 16) = v25;
    *(_BYTE *)(v28 + 24) = v26;
    v39[0] = (uint64_t *)v28;
    WTF::ensureOnMainRunLoop();
    v29 = v39[0];
    v39[0] = 0;
    if (v29)
      (*(void (**)(uint64_t *))(*v29 + 8))(v29);
  }
LABEL_23:
  v30 = (unsigned int *)v35;
  v35 = 0;
  if (v30)
  {
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
    {
      atomic_store(1u, v30);
      WTF::fastFree((WTF *)v30, v12);
    }
  }
  v33 = *v6;
  v39[0] = v7;
  return (char *)IPC::Connection::send<Messages::LibWebRTCNetwork::SignalConnect>(v33, v39, 0, 0, 0);
}

void sub_197000CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Connection::send<Messages::LibWebRTCNetwork::SignalConnect>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 130;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v10, *a2);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

void sub_197000ED4(_Unwind_Exception *a1, void *a2)
{
  IPC::Encoder *v2;
  WTF *v4;
  void *v5;

  IPC::Encoder::~Encoder(v2, a2);
  WTF::fastFree(v4, v5);
  _Unwind_Resume(a1);
}

char *IPC::Connection::send<Messages::LibWebRTCNetwork::SignalClose>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  char *v16;
  _DWORD *v17;
  void *v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  char *result;
  unint64_t v24;
  size_t v25;
  void *v26;
  IPC::Encoder *v27;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 129;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v27 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v10, *(uint64_t **)a2);
  v11 = **(_DWORD **)(a2 + 8);
  v12 = *(_QWORD *)(v10 + 544);
  v13 = (v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v14 = v13 + 4;
  v15 = *(_QWORD *)(v10 + 552);
  if (v15 < v13 + 4)
  {
    v24 = (2 * v15 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v25 = v24;
      v24 *= 2;
    }
    while (v25 < v14);
    result = (char *)mmap(0, v25, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v16 = result;
    memcpy(result, *(const void **)(v10 + 528), *(_QWORD *)(v10 + 544));
    v26 = *(void **)(v10 + 528);
    if (v26 != (void *)(v10 + 16))
      munmap(v26, *(_QWORD *)(v10 + 552));
    *(_QWORD *)(v10 + 528) = v16;
    *(_QWORD *)(v10 + 552) = v25;
    v12 = *(_QWORD *)(v10 + 544);
  }
  else
  {
    v16 = *(char **)(v10 + 528);
  }
  bzero(&v16[v12], v13 - v12);
  *(_QWORD *)(v10 + 544) = v14;
  v17 = (_DWORD *)(*(_QWORD *)(v10 + 528) + v13);
  *(_QWORD *)(v10 + 536) = v17 + 1;
  *v17 = v11;
  v19 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v27, a4, a5);
  v20 = v27;
  v27 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v18);
    WTF::fastFree(v21, v22);
  }
  return (char *)v19;
}

void sub_197001084(_Unwind_Exception *a1, void *a2)
{
  IPC::Encoder *v2;
  WTF *v4;
  void *v5;

  IPC::Encoder::~Encoder(v2, a2);
  WTF::fastFree(v4, v5);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkRTCTCPSocketCocoa::NetworkRTCTCPSocketCocoa(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,int,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&)::$_0::operator() const(nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1)
{
  void *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)a1 = off_1E34B6448;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  v3 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, v2);
    }
  }
  return a1;
}

{
  void *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)a1 = off_1E34B6448;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  v3 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, v2);
    }
  }
  return WTF::fastFree((WTF *)a1, v2);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkRTCTCPSocketCocoa::NetworkRTCTCPSocketCocoa(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,int,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&)::$_0::operator() const(nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)::{lambda(void)#1},void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  nw_path_t v4;
  NSObject *v5;
  const char *name;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  IPC::Encoder *v15;

  v1 = a1[1];
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v4 = nw_connection_copy_current_path(*(nw_connection_t *)(v2 + 40));
      v5 = nw_path_copy_interface();
      name = nw_interface_get_name(v5);
      if (name)
      {
        v7 = a1[2];
        strlen(name);
        WTF::String::fromUTF8();
        v8 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v8 = 133;
        *(_QWORD *)(v8 + 8) = 0;
        *(_QWORD *)(v8 + 528) = v8 + 16;
        *(_QWORD *)(v8 + 536) = v8 + 16;
        *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v8 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
        v15 = (IPC::Encoder *)v8;
        IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v8, a1 + 3);
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, (uint64_t *)&v14);
        IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v15, 0, 0);
        v10 = v15;
        v15 = 0;
        if (v10)
        {
          IPC::Encoder::~Encoder(v10, v9);
          WTF::fastFree(v11, v12);
        }
        v13 = v14;
        v14 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
          {
            WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v9);
            if (!v5)
            {
LABEL_11:
              if (v4)
                CFRelease(v4);
              return;
            }
LABEL_10:
            CFRelease(v5);
            goto LABEL_11;
          }
          *(_DWORD *)v13 -= 2;
        }
      }
      if (!v5)
        goto LABEL_11;
      goto LABEL_10;
    }
  }
}

void sub_19700129C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  const void *v9;
  const void *v10;
  IPC::Encoder *v11;
  WTF *v13;
  void *v14;
  WTF::StringImpl *v15;

  IPC::Encoder::~Encoder(v11, a2);
  WTF::fastFree(v13, v14);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v15);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (v10)
    CFRelease(v10);
  if (v9)
    CFRelease(v9);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkRTCTCPSocketCocoa::NetworkRTCTCPSocketCocoa(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,int,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&)::$_0::operator() const(nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)::{lambda(void)#2},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34B6470;
  a1[1] = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 24));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkRTCTCPSocketCocoa::NetworkRTCTCPSocketCocoa(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,int,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&)::$_0::operator() const(nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)::{lambda(void)#2},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34B6470;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 24));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkRTCTCPSocketCocoa::NetworkRTCTCPSocketCocoa(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,int,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&)::$_0::operator() const(nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)::{lambda(void)#2},void>::call(uint64_t a1)
{
  return WebKit::NetworkRTCProvider::closeSocket(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

void WTF::BlockPtr<void ()(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)>::fromCallable<WebKit::processIncomingData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}>(WebKit::processIncomingData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  WTF *v3;
  uint64_t v4;
  const void *v5;

  v3 = *(WTF **)(a1 + 48);
  if (v3)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v5)
    CFRelease(v5);
}

void WTF::BlockPtr<void ()(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)>::fromCallable<WebKit::processIncomingData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}>(WebKit::processIncomingData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1})::{lambda(void *,NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}::__invoke(uint64_t a1, NSObject *a2, nw_content_context_t context, int a4, NSObject *a5)
{
  WTF **v10;
  _QWORD *v11;
  void *v12;
  WTF *v13;
  NSObject *v14;
  int error_code;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD v21[4];

  v21[3] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v10 = (WTF **)(a1 + 48);
    v11 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
    *v11 = MEMORY[0x1E0C809A0];
    v11[1] = 50331650;
    v11[2] = WTF::BlockPtr<BOOL ()(NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)>::fromCallable<WebKit::processIncomingData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}::operator()(NSObject  {objcproto16OS_dispatch_data}*,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &,BOOL,NSObject {objcproto21OS_nw_content_context})::{lambda(NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)#1}>(WebKit::processIncomingData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}::operator()(NSObject  {objcproto16OS_dispatch_data}*,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &,BOOL,NSObject {objcproto21OS_nw_content_context})::{lambda(NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)#1})::{lambda(void *,NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)#1}::__invoke;
    v11[3] = &WTF::BlockPtr<BOOL ()(NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)>::fromCallable<WebKit::processIncomingData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}::operator()(NSObject  {objcproto16OS_dispatch_data}*,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &,BOOL,NSObject {objcproto21OS_nw_content_context})::{lambda(NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)#1}>(WebKit::processIncomingData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}::operator()(NSObject  {objcproto16OS_dispatch_data}*,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &,BOOL,NSObject {objcproto21OS_nw_content_context})::{lambda(NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)#1})::descriptor;
    v11[4] = v10;
    dispatch_data_apply(a2, v11);
    _Block_release(v11);
    (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(v21, *(_QWORD *)(a1 + 40), a1 + 48);
    v13 = *v10;
    if (*v10)
    {
      *(_QWORD *)(a1 + 48) = 0;
      *(_DWORD *)(a1 + 56) = 0;
      WTF::fastFree(v13, v12);
    }
    *(_QWORD *)(a1 + 48) = v21[0];
    *(_QWORD *)(a1 + 56) = v21[1];
  }
  if (!context || !a4 || !nw_content_context_get_is_final(context))
  {
    if (a5)
    {
      v14 = qword_1ECE71B18;
      if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_ERROR))
      {
        error_code = nw_error_get_error_code(a5);
        LODWORD(v21[0]) = 67109120;
        HIDWORD(v21[0]) = error_code;
        _os_log_error_impl(&dword_196BCC000, v14, OS_LOG_TYPE_ERROR, "NetworkRTCTCPSocketCocoa processIncomingData failed with error %d", (uint8_t *)v21, 8u);
      }
    }
    else
    {
      v16 = *(NSObject **)(a1 + 32);
      v17 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 40) = 0;
      v18 = *(_QWORD *)(a1 + 48);
      v19 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 56) = 0;
      v20 = malloc_type_malloc(0x40uLL, 0x10F0040BD7ED619uLL);
      *v20 = MEMORY[0x1E0C809A0];
      v20[1] = 50331650;
      v20[2] = WTF::BlockPtr<void ()(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)>::fromCallable<WebKit::processIncomingData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}>(WebKit::processIncomingData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1})::{lambda(void *,NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}::__invoke;
      v20[3] = &WTF::BlockPtr<void ()(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)>::fromCallable<WebKit::processIncomingData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}>(WebKit::processIncomingData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1})::descriptor;
      v20[4] = v16;
      v20[5] = v17;
      v20[6] = v18;
      v20[7] = v19;
      nw_connection_receive(v16, 1u, 0xFFFFFFFF, v20);
      _Block_release(v20);
    }
  }
}

void sub_197001608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  const void *v10;

  _Block_release(v10);
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtr<BOOL ()(NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)>::fromCallable<WebKit::processIncomingData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}::operator()(NSObject  {objcproto16OS_dispatch_data}*,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &,BOOL,NSObject {objcproto21OS_nw_content_context})::{lambda(NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)#1}>(WebKit::processIncomingData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}::operator()(NSObject  {objcproto16OS_dispatch_data}*,WTF::Function<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> ()(WTF::FastMalloc&&)> &,BOOL,NSObject {objcproto21OS_nw_content_context})::{lambda(NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)#1})::{lambda(void *,NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)#1}::__invoke(uint64_t result, int a2, int a3, void *__src, size_t __n)
{
  uint64_t v7;
  WTF::FastMalloc *v8;
  size_t v9;
  WTF::FastMalloc *v10;
  unint64_t v11;
  unint64_t v12;
  WTF::FastMalloc *v13;

  if (!__n)
    return 1;
  v7 = *(_QWORD *)(result + 32);
  v9 = *(unsigned int *)(v7 + 8);
  v8 = (WTF::FastMalloc *)*(unsigned int *)(v7 + 12);
  v10 = (WTF::FastMalloc *)((char *)v8 + __n);
  if ((unint64_t)v8 + __n > v9)
  {
    v11 = v9 + (v9 >> 2);
    if (v11 >= 0x10)
      v12 = v11 + 1;
    else
      v12 = 16;
    if (v12 <= (unint64_t)v10)
      v13 = v10;
    else
      v13 = (WTF::FastMalloc *)v12;
    result = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(*(WTF::ASCIILiteral **)(result + 32), v13);
    v8 = (WTF::FastMalloc *)*(unsigned int *)(v7 + 12);
  }
  if (v10 >= v8)
  {
    memcpy((char *)v8 + *(_QWORD *)v7, __src, __n);
    *(_DWORD *)(v7 + 12) = (_DWORD)v10;
    return 1;
  }
  __break(0xC471u);
  return result;
}

void rtc::IPAddress::~IPAddress(rtc::IPAddress *this)
{
  JUMPOUT(0x19AEB936CLL);
}

uint64_t ___ZN6WebKitL14dataFromVectorEON3WTF6VectorIhLm0ENS0_15CrashOnOverflowELm16ENS0_10FastMallocEEE_block_invoke(uint64_t a1, void *a2)
{
  return WTF::fastFree(*(WTF **)(a1 + 32), a2);
}

unsigned __int8 ***WTF::BlockPtr<void ()(NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCTCPSocketCocoa::sendTo(std::span<unsigned char const,18446744073709551615ul>,rtc::SocketAddress const&,rtc::PacketOptions const&)::$_0>(WebKit::NetworkRTCTCPSocketCocoa::sendTo(std::span<unsigned char const,18446744073709551615ul>,rtc::SocketAddress const&,rtc::PacketOptions const&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  rtc::PacketOptions::~PacketOptions((rtc::PacketOptions *)(a1 + 48));
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 40));
}

uint64_t WTF::BlockPtr<void ()(NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCTCPSocketCocoa::sendTo(std::span<unsigned char const,18446744073709551615ul>,rtc::SocketAddress const&,rtc::PacketOptions const&)::$_0>(WebKit::NetworkRTCTCPSocketCocoa::sendTo(std::span<unsigned char const,18446744073709551615ul>,rtc::SocketAddress const&,rtc::PacketOptions const&)::$_0)::{lambda(void *,NSObject  {objcproto11OS_nw_error}*)#1}::__invoke(rtc *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[3];

  v1 = *((_QWORD *)a1 + 5);
  v2 = *((_QWORD *)a1 + 7);
  v4[0] = (char *)a1 + 32;
  v4[1] = v2;
  v4[2] = rtc::TimeMillis(a1);
  return IPC::Connection::send<Messages::LibWebRTCNetwork::SignalSentPacket>(v1, (uint64_t)v4, 0, 0, 0);
}

uint64_t IPC::Connection::send<Messages::LibWebRTCNetwork::SignalSentPacket>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 132;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,long long,long long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,long long,long long>,0ul,1ul,2ul>((IPC::Encoder *)v10, a2);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

void sub_197001860(_Unwind_Exception *a1, void *a2)
{
  IPC::Encoder *v2;
  WTF *v4;
  void *v5;

  IPC::Encoder::~Encoder(v2, a2);
  WTF::fastFree(v4, v5);
  _Unwind_Resume(a1);
}

char *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,long long,long long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,long long,long long>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *result;

  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a1, *(uint64_t **)a2);
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v5;
  return result;
}

uint64_t WTF::BlockPtr<void ()(nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCTCPSocketCocoa::getInterfaceName(WebKit::NetworkRTCProvider &,WTF::URL const&,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(WTF::String&&)> &&)::$_0>(WebKit::NetworkRTCTCPSocketCocoa::getInterfaceName(WebKit::NetworkRTCProvider &,WTF::URL const&,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(WTF::String&&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  const void *v2;
  uint64_t result;

  v2 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    CFRelease(v2);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WTF::BlockPtr<void ()(nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCTCPSocketCocoa::getInterfaceName(WebKit::NetworkRTCProvider &,WTF::URL const&,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(WTF::String&&)> &&)::$_0>(WebKit::NetworkRTCTCPSocketCocoa::getInterfaceName(WebKit::NetworkRTCProvider &,WTF::URL const&,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(WTF::String&&)> &&)::$_0)::{lambda(void *,nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)#1}::__invoke(uint64_t a1, unsigned int a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  NSObject *v5;
  nw_path_t v6;
  NSObject *v7;
  const char *name;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  const void *v13;
  WTF::StringImpl *v14;

  if (a2 <= 5)
  {
    if (((1 << a2) & 0x1B) != 0)
    {
      if (!*(_QWORD *)(a1 + 40))
        return;
      v14 = 0;
      (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v14);
      v4 = v14;
      v14 = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, v3);
        else
          *(_DWORD *)v4 -= 2;
      }
      nw_connection_cancel(*(nw_connection_t *)(a1 + 40));
    }
    else
    {
      if (a2 == 2)
      {
        v5 = *(NSObject **)(a1 + 40);
        if (!v5)
          return;
        v6 = nw_connection_copy_current_path(v5);
        v7 = nw_path_copy_interface();
        name = nw_interface_get_name(v7);
        if (name)
        {
          strlen(name);
          WTF::String::fromUTF8();
        }
        else
        {
          v14 = 0;
        }
        (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v14);
        v12 = v14;
        v14 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v11);
          else
            *(_DWORD *)v12 -= 2;
        }
        nw_connection_cancel(*(nw_connection_t *)(a1 + 40));
        v13 = *(const void **)(a1 + 40);
        *(_QWORD *)(a1 + 40) = 0;
        if (v13)
          CFRelease(v13);
        if (v7)
          CFRelease(v7);
        goto LABEL_18;
      }
      if (!*(_QWORD *)(a1 + 40))
        return;
      v14 = 0;
      (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &v14);
      v10 = v14;
      v14 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v9);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
    v6 = *(nw_path_t *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
LABEL_18:
    if (v6)
      CFRelease(v6);
  }
}

void sub_197001AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;
  const void *v11;

  if (v11)
    CFRelease(v11);
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

dispatch_queue_t ___ZN6WebKitL14udpSocketQueueEv_block_invoke()
{
  dispatch_queue_t result;

  result = dispatch_queue_create("WebRTC UDP socket queue", MEMORY[0x1E0C80D50]);
  qword_1ECE72178 = (uint64_t)result;
  return result;
}

void WTF::BlockPtr<void ()(nw_listener_state_t,NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_0>(WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  const void *v5;

  v3 = *(unsigned __int8 **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  v4 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 24));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 40));
  v5 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v5)
    CFRelease(v5);
}

void WTF::BlockPtr<void ()(nw_listener_state_t,NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_0>(WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_0)::{lambda(void *,nw_listener_state_t,NSObject  {objcproto11OS_nw_error}*)#1}::__invoke(uint64_t a1, int a2, NSObject *a3)
{
  uint64_t v4;
  WTF::ThreadSafeWeakPtrControlBlock *v5;
  WTF::ThreadSafeWeakPtrControlBlock *v6;
  uint64_t v7;
  uint16_t port;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  const void *v13;
  NSObject *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int error_code;
  int v24;
  __int128 buf;
  uint64_t (*v26)(char, uint64_t *, uint64_t *);
  uint64_t (*v27)(_QWORD *);
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  switch(a2)
  {
    case 4:
      v11 = qword_1ECE71B18;
      if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_DEFAULT))
      {
        v12 = *(_QWORD *)(a1 + 56);
        LODWORD(buf) = 134217984;
        *(_QWORD *)((char *)&buf + 4) = v12;
        _os_log_impl(&dword_196BCC000, v11, OS_LOG_TYPE_DEFAULT, "NetworkRTCUDPSocketCocoaConnections cancelled listener %llu", (uint8_t *)&buf, 0xCu);
      }
      v13 = *(const void **)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;
      if (v13)
        CFRelease(v13);
      break;
    case 3:
      v15 = qword_1ECE71B18;
      if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_ERROR))
      {
        if (a3)
          error_code = nw_error_get_error_code(a3);
        else
          error_code = 0;
        LODWORD(buf) = 67109120;
        DWORD1(buf) = error_code;
        _os_log_error_impl(&dword_196BCC000, v15, OS_LOG_TYPE_ERROR, "NetworkRTCUDPSocketCocoaConnections failed with error %d", (uint8_t *)&buf, 8u);
      }
      v16 = *(_QWORD *)(a1 + 48);
      v17 = (unsigned int *)(v16 + 24);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 + 1, v17));
      v19 = *(_QWORD *)(a1 + 56);
      v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v20 = &off_1E34B6580;
      v20[1] = v16;
      v20[2] = v19;
      v21 = *(_QWORD *)(v16 + 112);
      *(_QWORD *)&buf = v20;
      v26 = absl::internal_any_invocable::LocalManagerNontrivial<WTF::Function<void ()(void)>>;
      v27 = absl::internal_any_invocable::LocalInvoker<false,void,WTF::Function<void ()(void)> &&>;
      webrtc::TaskQueueBase::PostTask(v21, (uint64_t)&buf, (uint64_t)&v24);
      v26(1, (uint64_t *)&buf, (uint64_t *)&buf);
      v22 = *(_QWORD *)(a1 + 40);
      v24 = -1;
      *(_QWORD *)&buf = a1 + 56;
      *((_QWORD *)&buf + 1) = &v24;
      IPC::Connection::send<Messages::LibWebRTCNetwork::SignalClose>(v22, (uint64_t)&buf, 0, 0, 0);
      break;
    case 2:
      v4 = *(_QWORD *)(a1 + 48);
      v5 = *(WTF::ThreadSafeWeakPtrControlBlock **)(a1 + 64);
      if (v5)
        v6 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v5);
      else
        v6 = 0;
      v7 = *(_QWORD *)(a1 + 72);
      port = nw_listener_get_port(*(nw_listener_t *)(a1 + 32));
      v9 = WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v9 = &off_1E34B6558;
      *(_QWORD *)(v9 + 8) = v6;
      *(_QWORD *)(v9 + 16) = v7;
      *(_WORD *)(v9 + 24) = port;
      v10 = *(_QWORD *)(v4 + 112);
      *(_QWORD *)&buf = v9;
      v26 = absl::internal_any_invocable::LocalManagerNontrivial<WTF::Function<void ()(void)>>;
      v27 = absl::internal_any_invocable::LocalInvoker<false,void,WTF::Function<void ()(void)> &&>;
      webrtc::TaskQueueBase::PostTask(v10, (uint64_t)&buf, (uint64_t)&v24);
      v26(1, (uint64_t *)&buf, (uint64_t *)&buf);
      break;
  }
}

void sub_197001E48(_Unwind_Exception *exception_object)
{
  unsigned int *v1;
  uint64_t v2;

  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_0::operator()(nw_listener_state_t,NSObject  {objcproto11OS_nw_error}*)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)a1[1];
  *a1 = &off_1E34B6558;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_0::operator()(nw_listener_state_t,NSObject  {objcproto11OS_nw_error}*)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34B6558;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_0::operator()(nw_listener_state_t,NSObject  {objcproto11OS_nw_error}*)::{lambda(void)#1},void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  uint64_t v5;
  void *v6;
  WTF *v7;
  uint64_t v8;
  WTF *v9;
  int v10;
  _QWORD v11[2];

  v1 = *((_QWORD *)result + 1);
  if (!v1)
    return result;
  v2 = *((_QWORD *)result + 2);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_6;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEABB3C](v1);
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  v4 = __ldxr((unsigned __int8 *)v1);
  if (v4 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v1))
    {
      if (!v2)
        return result;
      goto LABEL_15;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  if (!v2)
    return result;
LABEL_15:
  rtc::SocketAddress::SetPort((rtc::SocketAddress *)(v2 + 88));
  v5 = *(_QWORD *)(v2 + 16);
  WebKit::RTC::Network::SocketAddress::SocketAddress((WebKit::RTC::Network::SocketAddress *)&v8, (const rtc::SocketAddress *)(v2 + 88));
  v11[0] = v2 + 8;
  v11[1] = &v8;
  IPC::Connection::send<Messages::LibWebRTCNetwork::SignalAddressReady>(v5, (uint64_t)v11, 0, 0, 0);
  v7 = v9;
  if (v9)
  {
    v9 = 0;
    v10 = 0;
    WTF::fastFree(v7, v6);
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkRTCUDPSocketCocoaConnections,(WTF::DestructionThread)0>(*(unsigned __int8 **)v2, v6);
}

void sub_197001FFC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11)
{
  unsigned __int8 **v11;

  if (a10)
    WTF::fastFree(a10, a2);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkRTCUDPSocketCocoaConnections,(WTF::DestructionThread)0>(*v11, a2);
  _Unwind_Resume(a1);
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkRTCUDPSocketCocoaConnections,(WTF::DestructionThread)0>(unsigned __int8 *this, void *a2)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  const void *v10;
  WTF::StringImpl *v11;
  WTF *v12;
  void *v13;
  uint64_t v14;

  v2 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEABB3C](this);
LABEL_5:
  v4 = *((_QWORD *)v2 + 1);
  v5 = v4 - 1;
  *((_QWORD *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    v14 = *((_QWORD *)v2 + 2);
    v6 = *((_QWORD *)v2 + 3);
    *((_QWORD *)v2 + 3) = 0;
    v7 = v14 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = __ldxr(v2);
  if (v8 != 1)
  {
    __clrex();
LABEL_12:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v5)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, v2))
    goto LABEL_12;
  if (v5)
    return this;
LABEL_13:
  if (v6)
  {
    v9 = *(_QWORD *)(v6 + 176);
    if (v9)
      WTF::HashTable<rtc::SocketAddress,WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashMap<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashTraits<rtc::SocketAddress>,WTF::HashTraits<std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<rtc::SocketAddress>>::deallocateTable(v9, a2);
    v10 = *(const void **)(v6 + 160);
    *(_QWORD *)(v6 + 160) = 0;
    if (v10)
      CFRelease(v10);
    if (*(char *)(v6 + 111) < 0)
      operator delete(*(void **)(v6 + 88));
    v11 = *(WTF::StringImpl **)(v6 + 80);
    *(_QWORD *)(v6 + 80) = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = *(WTF **)(v6 + 32);
    *(_QWORD *)(v6 + 32) = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, a2);
      else
        --*(_DWORD *)v12;
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(v6 + 16));
    this = (unsigned __int8 *)WTF::fastFree((WTF *)v6, v13);
  }
  if (!v7)
    return (unsigned __int8 *)WTF::fastFree((WTF *)v2, a2);
  return this;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_0::operator()(nw_listener_state_t,NSObject  {objcproto11OS_nw_error}*)::{lambda(void)#2},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34B6580;
  a1[1] = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 24));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_0::operator()(nw_listener_state_t,NSObject  {objcproto11OS_nw_error}*)::{lambda(void)#2},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34B6580;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 24));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_0::operator()(nw_listener_state_t,NSObject  {objcproto11OS_nw_error}*)::{lambda(void)#2},void>::call(uint64_t a1)
{
  return WebKit::NetworkRTCProvider::closeSocket(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

unsigned __int8 *WTF::BlockPtr<void ()(NSObject  {objcproto16OS_nw_connection}*)>::fromCallable<WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_1>(WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_1)::{lambda(void const*)#1}::__invoke(unsigned __int8 *result, void *a2)
{
  unsigned __int8 **v2;

  v2 = (unsigned __int8 **)*((_QWORD *)result + 4);
  *((_QWORD *)result + 4) = 0;
  if (v2)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkRTCUDPSocketCocoaConnections,(WTF::DestructionThread)0>(*v2, a2);
  return result;
}

void WTF::BlockPtr<void ()(NSObject  {objcproto16OS_nw_connection}*)>::fromCallable<WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_1>(WebKit::NetworkRTCUDPSocketCocoaConnections::NetworkRTCUDPSocketCocoaConnections(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WTF::String &&,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_1)::{lambda(void *,NSObject  {objcproto16OS_nw_connection}*)#1}::__invoke(uint64_t a1, nw_connection_t connection)
{
  unsigned __int8 *v4;
  NSObject *v6;
  char *hostname;
  void *v8;
  char *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  rtc::SocketAddress *v17;
  uint64_t v18;
  rtc::SocketAddress *v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  uint64_t *v32;
  nw_connection_t v33;
  WTF *v34;
  void *__p[2];
  char v36;

  v4 = (unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 168);
  if (__ldaxr(v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](v4);
LABEL_5:
  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 169))
    goto LABEL_42;
  v6 = nw_connection_copy_endpoint(connection);
  if (nw_endpoint_get_type(v6) == nw_endpoint_type_address)
  {
    hostname = nw_endpoint_copy_address_string(v6);
    v9 = hostname;
    if (hostname)
    {
      strlen(hostname);
      nw_endpoint_get_port(v6);
      rtc::SocketAddress::SocketAddress();
      free(v9);
      goto LABEL_11;
    }
  }
  else
  {
    hostname = (char *)nw_endpoint_get_hostname(v6);
    if (hostname)
    {
      strlen(hostname);
      nw_endpoint_get_port(v6);
      rtc::SocketAddress::SocketAddress();
LABEL_11:
      if (v6)
        CFRelease(v6);
      v10 = (unsigned int *)WTF::fastMalloc((WTF *)8);
      *(_QWORD *)v10 = 1;
      WebKit::NetworkRTCUDPSocketCocoaConnections::setupNWConnection(*(_QWORD *)(a1 + 32), connection, v10, (rtc::SocketAddress *)__p);
      v11 = *(_QWORD *)(a1 + 32);
      if (*(_BYTE *)(v11 + 188))
      {
        nw_connection_reset_traffic_class();
        v11 = *(_QWORD *)(a1 + 32);
      }
      v33 = connection;
      v34 = (WTF *)v10;
      v14 = *(_QWORD *)(v11 + 176);
      v12 = (uint64_t *)(v11 + 176);
      v13 = v14;
      if (v14
        || (WTF::HashTable<rtc::SocketAddress,WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashMap<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashTraits<rtc::SocketAddress>,WTF::HashTraits<std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<rtc::SocketAddress>>::expand(v12, 0), (v13 = *v12) != 0))
      {
        v15 = *(_DWORD *)(v13 - 8);
      }
      else
      {
        v15 = 0;
      }
      v16 = v15 & rtc::SocketAddress::Hash((rtc::SocketAddress *)__p);
      v17 = (rtc::SocketAddress *)(v13 + 88 * v16);
      if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<rtc::SocketAddress>,false>::isEmptyValue<rtc::SocketAddress>() & 1) != 0)
      {
        v18 = v13 + 88 * v16;
      }
      else
      {
        v32 = v12;
        v19 = 0;
        v20 = 1;
        do
        {
          if (WTF::DefaultHash<rtc::SocketAddress>::equal(v17, (rtc::SocketAddress *)__p))
          {
            std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>::operator=[abi:sn180100]<NSObject  {objcproto16OS_nw_connection}*,WTF::Ref<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>,(void *)0>(v13 + 88 * v16 + 72, (uint64_t)&v33);
            goto LABEL_37;
          }
          v21 = *((_DWORD *)v17 + 15);
          v16 = ((_DWORD)v16 + v20) & v15;
          v18 = v13 + 88 * v16;
          v22 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<rtc::SocketAddress>,false>::isEmptyValue<rtc::SocketAddress>();
          if (v21 == 0x80000000)
            v19 = v17;
          ++v20;
          v17 = (rtc::SocketAddress *)(v13 + 88 * v16);
        }
        while (!v22);
        v12 = v32;
        if (v19)
        {
          rtc::SocketAddress::SocketAddress(v19);
          *((_QWORD *)v19 + 9) = 0;
          *((_QWORD *)v19 + 10) = 0;
          --*(_DWORD *)(*v32 - 16);
          v18 = (uint64_t)v19;
        }
      }
      rtc::SocketAddress::operator=();
      std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>::operator=[abi:sn180100]<NSObject  {objcproto16OS_nw_connection}*,WTF::Ref<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>,(void *)0>(v18 + 72, (uint64_t)&v33);
      v23 = *v12;
      if (*v12)
        v24 = *(_DWORD *)(v23 - 12) + 1;
      else
        v24 = 1;
      *(_DWORD *)(v23 - 12) = v24;
      v25 = *v12;
      if (*v12)
        v26 = *(_DWORD *)(v25 - 12);
      else
        v26 = 0;
      v27 = (*(_DWORD *)(v25 - 16) + v26);
      v28 = *(unsigned int *)(v25 - 4);
      if (v28 > 0x400)
      {
        if (v28 > 2 * v27)
          goto LABEL_37;
      }
      else if (3 * v28 > 4 * v27)
      {
LABEL_37:
        hostname = (char *)v34;
        v34 = 0;
        if (!hostname)
          goto LABEL_40;
        do
        {
          v29 = __ldaxr((unsigned int *)hostname);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, (unsigned int *)hostname));
        if (v30)
          goto LABEL_40;
        goto LABEL_52;
      }
      WTF::HashTable<rtc::SocketAddress,WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashMap<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashTraits<rtc::SocketAddress>,WTF::HashTraits<std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<rtc::SocketAddress>>::expand(v12, v18);
      goto LABEL_37;
    }
  }
  __break(1u);
LABEL_52:
  atomic_store(1u, (unsigned int *)hostname);
  WTF::fastFree((WTF *)hostname, v8);
LABEL_40:
  if (v36 < 0)
    operator delete(__p[0]);
LABEL_42:
  v31 = __ldxr(v4);
  if (v31 == 1)
  {
    if (!__stlxr(0, v4))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
}

void sub_19700253C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::Lock *a11, uint64_t a12, WTF *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  unsigned __int8 *v19;
  int v21;

  if (a19 < 0)
    operator delete(__p);
  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
LABEL_8:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v19);
  goto LABEL_8;
}

uint64_t std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>::operator=[abi:sn180100]<NSObject  {objcproto16OS_nw_connection}*,WTF::Ref<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>,(void *)0>(uint64_t a1, uint64_t a2)
{
  CFTypeRef v4;
  const void *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v4 = *(CFTypeRef *)a2;
  if (*(_QWORD *)a2)
    CFRetain(*(CFTypeRef *)a2);
  v5 = *(const void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    CFRelease(v5);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v7 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, (void *)a2);
    }
  }
  return a1;
}

uint64_t WTF::HashTable<rtc::SocketAddress,WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashMap<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashTraits<rtc::SocketAddress>,WTF::HashTraits<std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<rtc::SocketAddress>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  const void *v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  void *v28;
  uint64_t v29;
  unsigned int *v30;
  _QWORD *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  const void *v35;
  uint64_t v36;
  const void **v37;
  uint64_t v38;
  const void *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  const void *v43;
  uint64_t result;
  uint64_t v47;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  v6 = WTF::fastMalloc((WTF *)(88 * v5 + 16));
  v8 = v6;
  v9 = v6 + 16;
  if (v5)
  {
    v10 = v5;
    v11 = (_QWORD *)(v6 + 88);
    do
    {
      rtc::SocketAddress::SocketAddress((rtc::SocketAddress *)(v11 - 9));
      *v11 = 0;
      v11[1] = 0;
      v11 += 11;
      --v10;
    }
    while (v10);
  }
  *a1 = v9;
  *(_DWORD *)(v8 + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    v12 = 0;
    v13 = 0;
    v14 = v3;
    do
    {
      v15 = v2 + 88 * v12;
      if (*(_DWORD *)(v15 + 60) != 0x80000000)
      {
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<rtc::SocketAddress>,false>::isEmptyValue<rtc::SocketAddress>())
        {
          v16 = v2 + 88 * v12;
          v17 = *(unsigned int **)(v16 + 80);
          *(_QWORD *)(v16 + 80) = 0;
          if (v17)
          {
            do
            {
              v18 = __ldaxr(v17);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, v17));
            if (!v19)
            {
              atomic_store(1u, v17);
              WTF::fastFree((WTF *)v17, v7);
            }
          }
          v20 = *(const void **)(v16 + 72);
          *(_QWORD *)(v16 + 72) = 0;
          if (v20)
            CFRelease(v20);
          if (*(char *)(v15 + 23) < 0)
            operator delete(*(void **)v15);
        }
        else
        {
          v47 = v13;
          v21 = *a1;
          if (*a1)
            v22 = *(_DWORD *)(v21 - 8);
          else
            v22 = 0;
          v23 = v22 & rtc::SocketAddress::Hash((rtc::SocketAddress *)(v2 + 88 * v12));
          v24 = 1;
          do
          {
            v25 = v23;
            v26 = v21 + 88 * v23;
            v27 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<rtc::SocketAddress>,false>::isEmptyValue<rtc::SocketAddress>();
            v23 = (v25 + v24++) & v22;
          }
          while (!v27);
          v29 = v21 + 88 * v25;
          v32 = *(unsigned int **)(v29 + 80);
          v31 = (_QWORD *)(v29 + 80);
          v30 = v32;
          *v31 = 0;
          if (v32)
          {
            do
            {
              v33 = __ldaxr(v30);
              v34 = v33 - 1;
            }
            while (__stlxr(v34, v30));
            if (!v34)
            {
              atomic_store(1u, v30);
              WTF::fastFree((WTF *)v30, v28);
            }
          }
          v35 = (const void *)*(v31 - 1);
          *(v31 - 1) = 0;
          if (v35)
            CFRelease(v35);
          if (*(char *)(v26 + 23) < 0)
            operator delete(*(void **)v26);
          rtc::SocketAddress::SocketAddress((rtc::SocketAddress *)v26, (const rtc::SocketAddress *)(v2 + 88 * v12));
          v36 = v2 + 88 * v12;
          v38 = *(_QWORD *)(v36 + 72);
          v37 = (const void **)(v36 + 72);
          *v37 = 0;
          *(v31 - 1) = v38;
          v39 = v37[1];
          v37[1] = 0;
          *v31 = v39;
          v40 = (unsigned int *)v37[1];
          v37[1] = 0;
          v13 = v47;
          if (v40)
          {
            do
            {
              v41 = __ldaxr(v40);
              v42 = v41 - 1;
            }
            while (__stlxr(v42, v40));
            if (!v42)
            {
              atomic_store(1u, v40);
              WTF::fastFree((WTF *)v40, v7);
            }
          }
          v43 = *v37;
          *v37 = 0;
          if (v43)
            CFRelease(v43);
          if (*(char *)(v15 + 23) < 0)
            operator delete(*(void **)v15);
          if (v15 == a2)
            v13 = v26;
        }
      }
      ++v12;
    }
    while (v12 != v14);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v2)
      return result;
  }
  WTF::fastFree((WTF *)(v2 - 16), v7);
  return v13;
}

uint64_t WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<rtc::SocketAddress>,false>::isEmptyValue<rtc::SocketAddress>()
{
  uint64_t v0;
  void *__p;
  char v3;

  rtc::SocketAddress::SocketAddress((rtc::SocketAddress *)&__p);
  v0 = rtc::SocketAddress::operator==();
  if (v3 < 0)
    operator delete(__p);
  return v0;
}

void sub_1970029B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::DefaultHash<rtc::SocketAddress>::equal(rtc::SocketAddress *a1, rtc::SocketAddress *a2)
{
  uint64_t result;

  if ((rtc::SocketAddress::operator==() & 1) != 0)
    return 1;
  result = rtc::SocketAddress::IsNil(a1);
  if ((_DWORD)result)
  {
    result = rtc::SocketAddress::IsNil(a2);
    if ((_DWORD)result)
      return *((_DWORD *)a1 + 15) == *((_DWORD *)a2 + 15);
  }
  return result;
}

uint64_t WTF::HashTable<rtc::SocketAddress,WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashMap<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashTraits<rtc::SocketAddress>,WTF::HashTraits<std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<rtc::SocketAddress>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  const void *v10;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = a1 + 88 * i;
      if (*(_DWORD *)(v5 + 60) != 0x80000000)
      {
        v6 = a1 + 88 * i;
        v7 = *(unsigned int **)(v6 + 80);
        *(_QWORD *)(v6 + 80) = 0;
        if (v7)
        {
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
          {
            atomic_store(1u, v7);
            WTF::fastFree((WTF *)v7, a2);
          }
        }
        v10 = *(const void **)(v6 + 72);
        *(_QWORD *)(v6 + 72) = 0;
        if (v10)
          CFRelease(v10);
        if (*(char *)(v5 + 23) < 0)
          operator delete(*(void **)v5);
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

unsigned int *WTF::BlockPtr<void ()(nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCUDPSocketCocoaConnections::setupNWConnection(NSObject {objcproto16OS_nw_connection}*,WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker &,rtc::SocketAddress const&)::$_0>(WebKit::NetworkRTCUDPSocketCocoaConnections::setupNWConnection(NSObject {objcproto16OS_nw_connection}*,WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker &,rtc::SocketAddress const&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void WTF::BlockPtr<void ()(nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCUDPSocketCocoaConnections::setupNWConnection(NSObject {objcproto16OS_nw_connection}*,WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker &,rtc::SocketAddress const&)::$_0>(WebKit::NetworkRTCUDPSocketCocoaConnections::setupNWConnection(NSObject {objcproto16OS_nw_connection}*,WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker &,rtc::SocketAddress const&)::$_0)::{lambda(void *,nw_connection_state_t,NSObject  {objcproto11OS_nw_error}*)#1}::__invoke(uint64_t a1, int a2, NSObject *a3)
{
  NSObject *v5;
  int error_code;
  _DWORD v7[2];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a2 == 4)
  {
    v5 = qword_1ECE71B18;
    if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_ERROR))
    {
      if (a3)
        error_code = nw_error_get_error_code(a3);
      else
        error_code = 0;
      v7[0] = 67109120;
      v7[1] = error_code;
      _os_log_error_impl(&dword_196BCC000, v5, OS_LOG_TYPE_ERROR, "NetworkRTCUDPSocketCocoaConnections connection failed with error %d", (uint8_t *)v7, 8u);
    }
  }
  else if ((a2 & 0xFFFFFFFE) != 4)
  {
    return;
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 4) = 1;
}

void WTF::BlockPtr<void ()(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)>::fromCallable<WebKit::processUDPData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Ref<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>>,int,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}>(WebKit::processUDPData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Ref<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>>,int,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1})::{lambda(void const*)#1}::__invoke(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  const void *v7;

  v3 = (unsigned int *)a1[7];
  a1[7] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = a1[5];
  a1[5] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (const void *)a1[4];
  a1[4] = 0;
  if (v7)
    CFRelease(v7);
}

void WTF::BlockPtr<void ()(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)>::fromCallable<WebKit::processUDPData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Ref<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>>,int,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}>(WebKit::processUDPData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Ref<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>>,int,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1})::{lambda(void *,NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}::__invoke(uint64_t a1, NSObject *a2, nw_content_context_t context, uint64_t a4, NSObject *a5)
{
  _QWORD *v9;
  int v10;
  int error_code;
  NSObject *v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  uint64_t v16;
  _QWORD *v17;
  _DWORD v18[2];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v9 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
    *v9 = MEMORY[0x1E0C809A0];
    v9[1] = 50331650;
    v9[2] = WTF::BlockPtr<BOOL ()(NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)>::fromCallable<WebKit::processUDPData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Ref<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>>,int,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}::operator()(NSObject  {objcproto16OS_dispatch_data}*,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&,BOOL,NSObject {objcproto21OS_nw_content_context}*)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)#1}>(WebKit::processUDPData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Ref<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>>,int,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}::operator()(NSObject  {objcproto16OS_dispatch_data}*,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&,BOOL,NSObject {objcproto21OS_nw_content_context}*)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)#1})::{lambda(void *,NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)#1}::__invoke;
    v9[3] = &WTF::BlockPtr<BOOL ()(NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)>::fromCallable<WebKit::processUDPData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Ref<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>>,int,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}::operator()(NSObject  {objcproto16OS_dispatch_data}*,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&,BOOL,NSObject {objcproto21OS_nw_content_context}*)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)#1}>(WebKit::processUDPData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Ref<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>>,int,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}::operator()(NSObject  {objcproto16OS_dispatch_data}*,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&,BOOL,NSObject {objcproto21OS_nw_content_context}*)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)#1})::descriptor;
    v9[4] = a1 + 40;
    dispatch_data_apply(a2, v9);
    _Block_release(v9);
  }
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 56) + 4) && !nw_content_context_get_is_final(context))
  {
    if (a5)
    {
      v10 = *(_DWORD *)(a1 + 48);
      if (v10 != nw_error_get_error_code(a5))
      {
        error_code = nw_error_get_error_code(a5);
        *(_DWORD *)(a1 + 48) = error_code;
        v12 = qword_1ECE71B18;
        if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_ERROR))
        {
          v18[0] = 67109120;
          v18[1] = error_code;
          _os_log_error_impl(&dword_196BCC000, v12, OS_LOG_TYPE_ERROR, "NetworkRTCUDPSocketCocoaConnections failed processing UDP data with error %d", (uint8_t *)v18, 8u);
        }
      }
    }
    v13 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = 0;
    v14 = *(_DWORD *)(a1 + 48);
    v15 = *(NSObject **)(a1 + 32);
    v16 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    v17 = malloc_type_malloc(0x40uLL, 0x10E0040B878C05FuLL);
    *v17 = MEMORY[0x1E0C809A0];
    v17[1] = 50331650;
    v17[2] = WTF::BlockPtr<void ()(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)>::fromCallable<WebKit::processUDPData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Ref<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>>,int,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}>(WebKit::processUDPData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Ref<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>>,int,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1})::{lambda(void *,NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}::__invoke;
    v17[3] = &WTF::BlockPtr<void ()(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)>::fromCallable<WebKit::processUDPData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Ref<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>>,int,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}>(WebKit::processUDPData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Ref<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>>,int,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1})::descriptor;
    v17[4] = v15;
    v17[5] = v16;
    *((_DWORD *)v17 + 12) = v14;
    v17[7] = v13;
    nw_connection_receive(v15, 1u, 0xFFFFFFFF, v17);
    _Block_release(v17);
  }
}

void sub_197002E68(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  v2 = v1;
  _Block_release(v2);
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtr<BOOL ()(NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)>::fromCallable<WebKit::processUDPData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Ref<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>>,int,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}::operator()(NSObject  {objcproto16OS_dispatch_data}*,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&,BOOL,NSObject {objcproto21OS_nw_content_context}*)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)#1}>(WebKit::processUDPData(WTF::RetainPtr<NSObject {objcproto16OS_nw_connection}*> &&,WTF::Ref<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections>>,int,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,NSObject {objcproto21OS_nw_content_context}*,BOOL,NSObject {objcproto11OS_nw_error}*)#1}::operator()(NSObject  {objcproto16OS_dispatch_data}*,WTF::Function<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&,BOOL,NSObject {objcproto21OS_nw_content_context}*)::{lambda(NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)#1})::{lambda(void *,NSObject  {objcproto16OS_dispatch_data}*,unsigned long,void const*,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  (*(void (**)(_QWORD, uint64_t, uint64_t))(***(_QWORD ***)(a1 + 32) + 16))(**(_QWORD **)(a1 + 32), a4, a5);
  return 1;
}

unsigned __int8 ***WTF::BlockPtr<void ()(NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCUDPSocketCocoaConnections::sendTo(std::span<unsigned char const,18446744073709551615ul>,rtc::SocketAddress const&,rtc::PacketOptions const&)::$_0>(WebKit::NetworkRTCUDPSocketCocoaConnections::sendTo(std::span<unsigned char const,18446744073709551615ul>,rtc::SocketAddress const&,rtc::PacketOptions const&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  rtc::PacketOptions::~PacketOptions((rtc::PacketOptions *)(a1 + 48));
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 40));
}

uint64_t WTF::BlockPtr<void ()(NSObject  {objcproto11OS_nw_error}*)>::fromCallable<WebKit::NetworkRTCUDPSocketCocoaConnections::sendTo(std::span<unsigned char const,18446744073709551615ul>,rtc::SocketAddress const&,rtc::PacketOptions const&)::$_0>(WebKit::NetworkRTCUDPSocketCocoaConnections::sendTo(std::span<unsigned char const,18446744073709551615ul>,rtc::SocketAddress const&,rtc::PacketOptions const&)::$_0)::{lambda(void *,NSObject  {objcproto11OS_nw_error}*)#1}::__invoke(_BOOL8 a1, NSObject *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v9;
  _QWORD v10[4];

  v2 = a1;
  v10[3] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v9 = qword_1ECE71B18;
    a1 = os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_ERROR);
    if (a1)
    {
      LODWORD(v10[0]) = 67109120;
      HIDWORD(v10[0]) = nw_error_get_error_code(a2);
      _os_log_error_impl(&dword_196BCC000, v9, OS_LOG_TYPE_ERROR, "NetworkRTCUDPSocketCocoaConnections::sendTo failed with error %d", (uint8_t *)v10, 8u);
    }
  }
  v3 = v2 + 32;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = *(_QWORD *)(v2 + 56);
  v6 = rtc::TimeMillis((rtc *)a1);
  v10[0] = v3;
  v10[1] = v5;
  v10[2] = v6;
  return IPC::Connection::send<Messages::LibWebRTCNetwork::SignalSentPacket>(v4, (uint64_t)v10, 0, 0, 0);
}

void sub_1970031CC(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__optional_destruct_base<std::tuple<WebKit::AuthenticationChallengeDisposition,WebCore::Credential>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_197003298(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<std::tuple<WebKit::AuthenticationChallengeDisposition,WebCore::Credential>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(a1 + 40))
  {
    v3 = *(const void **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (v3)
      CFRelease(v3);
    v4 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::GetPaymentCoordinatorEmbeddingUserAgent,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34B66C0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::GetPaymentCoordinatorEmbeddingUserAgent,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34B66C0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::GetPaymentCoordinatorEmbeddingUserAgent,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  WTF::RefCountedBase *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  char v6;

  v2 = (WTF::RefCountedBase *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::NetworkProcessProxy::GetPaymentCoordinatorEmbeddingUserAgent,WTF::CompletionHandler<void ()(WTF::String const&)>>((WTF::RefCountedBase *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v5);
  if (!v6)
    return IPC::Connection::cancelReply<Messages::NetworkProcessProxy::GetPaymentCoordinatorEmbeddingUserAgent,WTF::CompletionHandler<void ()(WTF::String const&)>>(v2);
  result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(v2, (uint64_t)&v5);
  if (v6)
  {
    result = v5;
    v5 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_19700364C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::NetworkProcessProxy::GetPaymentCoordinatorEmbeddingUserAgent,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::RefCountedBase *a1)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *result;
  WTF::StringImpl *v3;

  v3 = 0;
  WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(a1, (uint64_t)&v3);
  result = v3;
  v3 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v1);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1970036D4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkRTCTCPSocketCocoa::NetworkRTCTCPSocketCocoa(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,int,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&)::$_1,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::FastMalloc&&>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B66E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkRTCTCPSocketCocoa::NetworkRTCTCPSocketCocoa(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,int,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&)::$_1,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::FastMalloc&&>::~CallableWrapper(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B66E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkRTCTCPSocketCocoa::NetworkRTCTCPSocketCocoa(WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::NetworkRTCProvider &,rtc::SocketAddress const&,int,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&)::$_1,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::FastMalloc&&>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;

  v1 = a1 + 8;
  v2 = a1 + 16;
  v3 = a1 + 24;
  v4 = a1 + 56;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v5 = off_1E34B6710;
  v5[1] = v2;
  v5[2] = v1;
  v5[3] = v3;
  v5[4] = v4;
  v7 = v5;
  WebCore::WebRTC::extractMessages();
  result = (uint64_t)v7;
  if (v7)
    return (*(uint64_t (**)(_QWORD *))(*v7 + 8))(v7);
  return result;
}

void sub_19700380C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24NetworkRTCTCPSocketCocoaC1ENS_23ObjectIdentifierGenericIN7WebCore29LibWebRTCSocketIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERNS2_18NetworkRTCProviderERKN3rtc13SocketAddressEiRKNS_6StringEbbRKNS5_17RegistrableDomainEONS_3RefIN3IPC10ConnectionENS_12RawPtrTraitsISO_EENS_21DefaultRefDerefTraitsISO_EEEEEN3__1clEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEUlT_E_vJNSt3__14spanIKhLm18446744073709551615EEEEE4callES16_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  rtc *v6;
  uint64_t v7;
  _BYTE v9[20];
  _QWORD v10[3];
  __int16 v11;
  uint64_t v12;
  _QWORD v13[2];

  v3 = a1;
  v13[0] = a2;
  v13[1] = a3;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = **(_QWORD **)(a1 + 8);
  v6 = (rtc *)WebKit::RTC::Network::IPAddress::IPAddress((WebKit::RTC::Network::IPAddress *)v9, *(const rtc::IPAddress **)(a1 + 24));
  LOWORD(v3) = **(_WORD **)(v3 + 32);
  v7 = rtc::TimeMicros(v6);
  v10[0] = v4;
  v10[1] = v13;
  v10[2] = v9;
  v11 = v3;
  v12 = v7;
  return IPC::Connection::send<Messages::LibWebRTCNetwork::SignalReadPacket>(v5, (uint64_t)v10, 0, 0, 0);
}

uint64_t IPC::Connection::send<Messages::LibWebRTCNetwork::SignalReadPacket>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 131;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,std::span<unsigned char const,18446744073709551615ul> const&,WebKit::RTC::Network::IPAddress const&,unsigned short,long long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,std::span<unsigned char const,18446744073709551615ul> const&,WebKit::RTC::Network::IPAddress const&,unsigned short,long long>,0ul,1ul,2ul,3ul,4ul>(v10, a2);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

void sub_197003974(_Unwind_Exception *a1, void *a2)
{
  IPC::Encoder *v2;
  WTF *v4;
  void *v5;

  IPC::Encoder::~Encoder(v2, a2);
  WTF::fastFree(v4, v5);
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,std::span<unsigned char const,18446744073709551615ul> const&,WebKit::RTC::Network::IPAddress const&,unsigned short,long long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,std::span<unsigned char const,18446744073709551615ul> const&,WebKit::RTC::Network::IPAddress const&,unsigned short,long long>,0ul,1ul,2ul,3ul,4ul>(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  _WORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  char *v16;
  _QWORD *v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  void *v21;
  unint64_t v22;
  size_t v23;
  char *v24;
  void *v25;

  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, **(const void ***)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
  IPC::ArgumentCoder<WebKit::RTC::Network::IPAddress,void>::encode((IPC::Encoder *)a1, *(int **)(a2 + 16));
  v4 = *(_WORD *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 544);
  v6 = (v5 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v7 = v6 + 2;
  v8 = *(_QWORD *)(a1 + 552);
  if (v8 < v6 + 2)
  {
    v18 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v19 = v18;
      v18 *= 2;
    }
    while (v19 < v7);
    v20 = (char *)mmap(0, v19, 3, 4098, -1, 0);
    if (v20 == (char *)-1)
      goto LABEL_18;
    v9 = v20;
    memcpy(v20, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v21 = *(void **)(a1 + 528);
    if (v21 != (void *)(a1 + 16))
      munmap(v21, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v9;
    *(_QWORD *)(a1 + 552) = v19;
    v5 = *(_QWORD *)(a1 + 544);
  }
  else
  {
    v9 = *(char **)(a1 + 528);
  }
  bzero(&v9[v5], v6 - v5);
  *(_QWORD *)(a1 + 544) = v7;
  v10 = (_WORD *)(*(_QWORD *)(a1 + 528) + v6);
  *(_QWORD *)(a1 + 536) = v10 + 1;
  *v10 = v4;
  v11 = *(_QWORD *)(a2 + 32);
  v12 = *(_QWORD *)(a1 + 544);
  v13 = (v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = v13 + 8;
  v15 = *(_QWORD *)(a1 + 552);
  if (v15 >= v13 + 8)
  {
    v16 = *(char **)(a1 + 528);
    goto LABEL_5;
  }
  v22 = (2 * v15 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v23 = v22;
    v22 *= 2;
  }
  while (v23 < v14);
  v24 = (char *)mmap(0, v23, 3, 4098, -1, 0);
  if (v24 == (char *)-1)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x197003B74);
  }
  v16 = v24;
  memcpy(v24, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
  v25 = *(void **)(a1 + 528);
  if (v25 != (void *)(a1 + 16))
    munmap(v25, *(_QWORD *)(a1 + 552));
  *(_QWORD *)(a1 + 528) = v16;
  *(_QWORD *)(a1 + 552) = v23;
  v12 = *(_QWORD *)(a1 + 544);
LABEL_5:
  bzero(&v16[v12], v13 - v12);
  *(_QWORD *)(a1 + 544) = v14;
  v17 = (_QWORD *)(*(_QWORD *)(a1 + 528) + v13);
  *(_QWORD *)(a1 + 536) = v17 + 1;
  *v17 = v11;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkRTCTCPSocketCocoa::getInterfaceName(WebKit::NetworkRTCProvider &,WTF::URL const&,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(WTF::String&&)> &&)::$_1,void,WTF::String&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34B6738;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 24));
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkRTCTCPSocketCocoa::getInterfaceName(WebKit::NetworkRTCProvider &,WTF::URL const&,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(WTF::String&&)> &&)::$_1,void,WTF::String&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34B6738;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 24));
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkRTCTCPSocketCocoa::getInterfaceName(WebKit::NetworkRTCProvider &,WTF::URL const&,WTF::String const&,BOOL,BOOL,WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(WTF::String&&)> &&)::$_1,void,WTF::String&>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  WTF::StringImpl *v7;
  char v8;
  _QWORD v9[2];
  uint64_t (*v10)(char, uint64_t *, uint64_t *);
  uint64_t (*v11)(_QWORD *);

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  v6 = v1;
  WTF::String::isolatedCopy();
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v3 = &off_1E34B6760;
  v3[1] = v6;
  v3[2] = v7;
  v4 = *(_QWORD *)(v2 + 112);
  v9[0] = v3;
  v10 = absl::internal_any_invocable::LocalManagerNontrivial<WTF::Function<void ()(void)>>;
  v11 = absl::internal_any_invocable::LocalInvoker<false,void,WTF::Function<void ()(void)> &&>;
  webrtc::TaskQueueBase::PostTask(v4, (uint64_t)v9, (uint64_t)&v8);
  v10(1, v9, v9);
  return 0;
}

void sub_197003D10(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit24NetworkRTCTCPSocketCocoa16getInterfaceNameERNS2_18NetworkRTCProviderERKNS_3URLERKNS_6StringEbbRKN7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvOS9_EEEEN3__1clIS9_EEDaOT_EUlvE_vJEED1Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *a1 = &off_1E34B6760;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24NetworkRTCTCPSocketCocoa16getInterfaceNameERNS2_18NetworkRTCProviderERKNS_3URLERKNS_6StringEbbRKN7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvOS9_EEEEN3__1clIS9_EEDaOT_EUlvE_vJEED0Ev(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34B6760;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24NetworkRTCTCPSocketCocoa16getInterfaceNameERNS2_18NetworkRTCProviderERKNS_3URLERKNS_6StringEbbRKN7WebCore17RegistrableDomainEONS_17CompletionHandlerIFvOS9_EEEEN3__1clIS9_EEDaOT_EUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, a1 + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_197003E70(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<rtc::SocketAddress,WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashMap<rtc::SocketAddress,std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>,WTF::DefaultHash<rtc::SocketAddress>,WTF::HashTraits<rtc::SocketAddress>,WTF::HashTraits<std::pair<WTF::RetainPtr<NSObject  {objcproto16OS_nw_connection}*>,WTF::RefPtr<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker,WTF::RawPtrTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>,WTF::DefaultRefDerefTraits<WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<rtc::SocketAddress>>::begin(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;

  v1 = a1;
  if (!a1)
    return a1;
  v2 = *(_DWORD *)(a1 - 4);
  v3 = a1 + 88 * v2;
  if (!*(_DWORD *)(a1 - 12))
  {
    a1 += 88 * v2;
    return a1;
  }
  if (v2)
  {
    v4 = 88 * v2;
    while ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<rtc::SocketAddress>,false>::isEmptyValue<rtc::SocketAddress>() & 1) != 0
         || *(_DWORD *)(v1 + 60) == 0x80000000)
    {
      v1 += 88;
      v4 -= 88;
      if (!v4)
        return v3;
    }
  }
  return v1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkRTCUDPSocketCocoaConnections::setupNWConnection(NSObject  {objcproto16OS_nw_connection}*,WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker &,rtc::SocketAddress const&)::$_1,void,std::span<unsigned char const,18446744073709551615ul>>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B6788;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkRTCUDPSocketCocoaConnections::setupNWConnection(NSObject  {objcproto16OS_nw_connection}*,WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker &,rtc::SocketAddress const&)::$_1,void,std::span<unsigned char const,18446744073709551615ul>>::~CallableWrapper(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B6788;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkRTCUDPSocketCocoaConnections::setupNWConnection(NSObject  {objcproto16OS_nw_connection}*,WebKit::NetworkRTCUDPSocketCocoaConnections::ConnectionStateTracker &,rtc::SocketAddress const&)::$_1,void,std::span<unsigned char const,18446744073709551615ul>>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  rtc *v6;
  uint64_t v7;
  _BYTE v9[20];
  _QWORD v10[3];
  __int16 v11;
  uint64_t v12;
  _QWORD v13[2];

  v3 = a1;
  v4 = a1 + 8;
  v13[0] = a2;
  v13[1] = a3;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = (rtc *)WebKit::RTC::Network::IPAddress::IPAddress((WebKit::RTC::Network::IPAddress *)v9, (const rtc::IPAddress *)(a1 + 24));
  LOWORD(v3) = *(_WORD *)(v3 + 56);
  v7 = rtc::TimeMicros(v6);
  v10[0] = v4;
  v10[1] = v13;
  v10[2] = v9;
  v11 = v3;
  v12 = v7;
  return IPC::Connection::send<Messages::LibWebRTCNetwork::SignalReadPacket>(v5, (uint64_t)v10, 0, 0, 0);
}

unsigned __int8 ***WebKit::RemoteRenderPipeline::didReceiveStreamMessage(unsigned __int8 ***this, uint64_t **a2, IPC::Decoder *a3)
{
  unsigned __int8 ***v4;
  int v5;
  unsigned __int8 ***v6;
  WTF::StringImpl *v7;
  unsigned __int8 **v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  char v16;

  v4 = this;
  v5 = *((unsigned __int16 *)a3 + 25);
  if (v5 == 1293)
  {
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a2 + 4);
    IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)&v14);
    if ((_BYTE)v15)
    {
      v8 = v4[2];
      v9 = (WTF::StringImpl *)v8[2];
      v10 = v14;
      v14 = 0;
      v8[2] = (unsigned __int8 *)v10;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v7);
        else
          *(_DWORD *)v9 -= 2;
      }
      (*((void (**)(unsigned __int8 **, unsigned __int8 **))*v8 + 3))(v8, v8 + 2);
      if ((_BYTE)v15)
      {
        v12 = v14;
        v14 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v11);
          else
            *(_DWORD *)v12 -= 2;
        }
      }
    }
    goto LABEL_17;
  }
  if (v5 == 1292)
  {
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a2 + 4);
    IPC::Decoder::decode<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3, (uint64_t)&v14);
    if (v16)
      WebKit::RemoteComputePipeline::getBindGroupLayout((uint64_t)v4, v14, v15);
LABEL_17:
    v6 = (unsigned __int8 ***)&v13;
    return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v6);
  }
  if (v5 != 1291)
    return this;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v14, a2 + 4);
  WebKit::WebGPU::ObjectHeap::removeObject((uint64_t)v4[3][1], (uint64_t)v4[5]);
  v6 = (unsigned __int8 ***)&v14;
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v6);
}

unsigned __int8 ***WebKit::RemoteSampler::didReceiveStreamMessage(unsigned __int8 ***this, uint64_t **a2, IPC::Decoder *a3)
{
  unsigned __int8 ***v3;
  int v4;
  unsigned __int8 ***v5;
  WTF::StringImpl *v7;
  unsigned __int8 **v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t *v13;
  WTF::StringImpl *v14;
  char v15;

  v3 = this;
  v4 = *((unsigned __int16 *)a3 + 25);
  if (v4 == 1338)
  {
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a2 + 4);
    IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)&v14);
    if (v15)
    {
      v8 = v3[2];
      v9 = (WTF::StringImpl *)v8[2];
      v10 = v14;
      v14 = 0;
      v8[2] = (unsigned __int8 *)v10;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v7);
        else
          *(_DWORD *)v9 -= 2;
      }
      (*((void (**)(unsigned __int8 **, unsigned __int8 **))*v8 + 2))(v8, v8 + 2);
      if (v15)
      {
        v12 = v14;
        v14 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v11);
          else
            *(_DWORD *)v12 -= 2;
        }
      }
    }
    v5 = (unsigned __int8 ***)&v13;
  }
  else
  {
    if (v4 != 1337)
      return this;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v14, a2 + 4);
    WebKit::WebGPU::ObjectHeap::removeObject((uint64_t)v3[3][1], (uint64_t)v3[5]);
    v5 = (unsigned __int8 ***)&v14;
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v5);
}

unsigned __int8 ***WebKit::RemoteShaderModule::didReceiveStreamMessage(unsigned __int8 ***this, uint64_t **a2, IPC::Decoder *a3)
{
  unsigned __int8 ***v4;
  int v5;
  unsigned __int8 **v6;
  WTF::StringImpl *v7;
  char v8;
  WTF::StringImpl *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t **v12;
  WTF::StringImpl *v13;
  unsigned __int8 **v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  unsigned __int8 **v19;
  WTF::StringImpl *v20;
  unsigned __int8 **v21;
  uint64_t *v22;

  v4 = this;
  v5 = *((unsigned __int16 *)a3 + 25);
  switch(v5)
  {
    case 1350:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v22, a2 + 4);
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)&v20);
      if ((_BYTE)v21)
      {
        v14 = v4[2];
        v15 = (WTF::StringImpl *)v14[3];
        v16 = v20;
        v20 = 0;
        v14[3] = (unsigned __int8 *)v16;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v13);
          else
            *(_DWORD *)v15 -= 2;
        }
        (*((void (**)(unsigned __int8 **, unsigned __int8 **))*v14 + 3))(v14, v14 + 3);
        if ((_BYTE)v21)
        {
          v18 = v20;
          v20 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, v17);
            else
              *(_DWORD *)v18 -= 2;
          }
        }
      }
      v12 = &v22;
      break;
    case 1349:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v20, a2 + 4);
      WebKit::WebGPU::ObjectHeap::removeObject((uint64_t)v4[3][1], (uint64_t)v4[5]);
      v12 = (uint64_t **)&v20;
      break;
    case 1348:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v19, a2 + 4);
      v6 = v19;
      v7 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v8)
      {
        v9 = v7;
        v20 = v7;
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v6);
        v10 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
        *v10 = (uint64_t)off_1E34B67D0;
        v10[1] = (uint64_t)v9;
        v21 = 0;
        v22 = v10;
        v10[2] = (uint64_t)v6;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v21);
        WebKit::RemoteShaderModule::compilationInfo((uint64_t)v4, (uint64_t *)&v22);
        v11 = v22;
        v22 = 0;
        if (v11)
          (*(void (**)(uint64_t *))(*v11 + 8))(v11);
      }
      v12 = (uint64_t **)&v19;
      break;
    default:
      return this;
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v12);
}

unsigned __int8 ***WebKit::RemoteTextDetector::didReceiveStreamMessage(unsigned __int8 ***this, uint64_t **a2, IPC::Decoder *a3)
{
  uint64_t v4;
  unsigned __int8 **v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14[2];
  unsigned __int8 **v15;
  _QWORD *v16;

  if (*((_WORD *)a3 + 25) == 1382)
  {
    v4 = (uint64_t)this;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v14, a2 + 4);
    v5 = (unsigned __int8 **)v14[0];
    v6 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
    if (v7)
    {
      v8 = v6;
      v9 = (uint64_t *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v10)
      {
        v11 = v9;
        v14[1] = v9;
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v5);
        v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v12 = off_1E34B67F8;
        v12[1] = v11;
        v15 = 0;
        v16 = v12;
        v12[2] = v5;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v15);
        WebKit::RemoteTextDetector::detect(v4, v8, (uint64_t *)&v16);
        v13 = (uint64_t)v16;
        v16 = 0;
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      }
    }
    return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v14);
  }
  return this;
}

unsigned __int8 ***WebKit::RemoteTexture::didReceiveStreamMessage(unsigned __int8 ***this, uint64_t **a2, IPC::Decoder *a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  _QWORD *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unsigned __int8 ***v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  char v19;
  BOOL v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  WTF::StringImpl *v40;
  _OWORD v41[2];
  char v42;
  unint64_t v43;
  char v44;
  _BYTE v45[29];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t)this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x569:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v39, a2 + 4);
      v5 = *((_QWORD *)a3 + 1);
      v6 = *(_QWORD *)a3;
      v7 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
      if (v5 <= v7)
      {
        v25 = 0;
        v26 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v27 = *((_QWORD *)a3 + 3);
        if (v27)
        {
          if (v5)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
            v26 = *(_QWORD *)a3;
            v25 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v25 = 0;
            v26 = 0;
          }
        }
      }
      else
      {
        v8 = (_BYTE *)(v6 + v7);
        *((_QWORD *)a3 + 2) = v8 + 1;
        if (v6)
        {
          v9 = *v8;
          if (v9 < 2)
          {
            if (*v8)
            {
              IPC::ArgumentCoder<WebKit::WebGPU::TextureViewDescriptor,void>::decode((uint64_t *)a3, (uint64_t)&v40);
              if (!v42)
              {
                v30 = *(_QWORD *)a3;
                v31 = *((_QWORD *)a3 + 1);
                *(_QWORD *)a3 = 0;
                *((_QWORD *)a3 + 1) = 0;
                v32 = *((_QWORD *)a3 + 3);
                if (!v32
                  || !v31
                  || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 16))(v32, v30), !v42))
                {
LABEL_52:
                  v33 = *(_QWORD *)a3;
                  v34 = *((_QWORD *)a3 + 1);
                  *(_QWORD *)a3 = 0;
                  *((_QWORD *)a3 + 1) = 0;
                  v35 = *((_QWORD *)a3 + 3);
                  if (v35 && v34)
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 16))(v35, v33);
                  LOBYTE(v40) = 0;
                  v44 = 0;
                  goto LABEL_54;
                }
              }
              v10 = v40;
              *(_OWORD *)v45 = v41[0];
              *(_OWORD *)&v45[13] = *(_OWORD *)((char *)v41 + 13);
            }
            else
            {
              v10 = 0;
            }
            v16 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
            LOBYTE(v40) = 0;
            v18 = v17;
            if ((_BYTE)v17)
            {
              v42 = 0;
              if (v9)
              {
                v40 = v10;
                v41[0] = *(_OWORD *)v45;
                *(_OWORD *)((char *)v41 + 13) = *(_OWORD *)&v45[13];
                v42 = 1;
                v10 = 0;
              }
              v43 = v16;
              v19 = 1;
            }
            else
            {
              v19 = 0;
            }
            v44 = v19;
            if (v9)
              v20 = v10 == 0;
            else
              v20 = 1;
            if (!v20)
            {
              if (*(_DWORD *)v10 == 2)
              {
                WTF::StringImpl::destroy(v10, v17);
                if (v18)
                {
LABEL_28:
                  if (v44)
                  {
                    WebKit::RemoteTexture::createView(v4, (uint64_t)&v40, v43);
                    if (v44)
                    {
                      if (v42)
                      {
                        v22 = v40;
                        v40 = 0;
                        if (v22)
                        {
                          if (*(_DWORD *)v22 == 2)
                            WTF::StringImpl::destroy(v22, v21);
                          else
                            *(_DWORD *)v22 -= 2;
                        }
                      }
                    }
                  }
                  v15 = (unsigned __int8 ***)&v39;
                  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v15);
                }
LABEL_54:
                v36 = *(_QWORD *)a3;
                v37 = *((_QWORD *)a3 + 1);
                *(_QWORD *)a3 = 0;
                *((_QWORD *)a3 + 1) = 0;
                v38 = *((_QWORD *)a3 + 3);
                if (v38 && v37)
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 16))(v38, v36);
                goto LABEL_28;
              }
              *(_DWORD *)v10 -= 2;
            }
            if ((_BYTE)v17)
              goto LABEL_28;
            goto LABEL_54;
          }
LABEL_48:
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v29 = *((_QWORD *)a3 + 3);
          if (v29 && v5)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, v6);
          goto LABEL_52;
        }
        v25 = v5;
        v26 = 0;
      }
      v5 = 0;
      v6 = 0;
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v28 = *((_QWORD *)a3 + 3);
      if (v28)
      {
        if (v25)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v28 + 16))(v28, v26, v25);
          v6 = *(_QWORD *)a3;
          v5 = *((_QWORD *)a3 + 1);
        }
        else
        {
          v5 = 0;
          v6 = 0;
        }
      }
      goto LABEL_48;
    case 0x56A:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v40, a2 + 4);
      (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 16) + 24))(*(_QWORD *)(v4 + 16));
      goto LABEL_14;
    case 0x56B:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v40, a2 + 4);
      WebKit::WebGPU::ObjectHeap::removeObject(*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8), *(_QWORD *)(v4 + 40));
LABEL_14:
      v15 = (unsigned __int8 ***)&v40;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v15);
    case 0x56C:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v45, a2 + 4);
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)&v40);
      if (LOBYTE(v41[0]))
      {
        v12 = *(_QWORD **)(v4 + 16);
        v13 = (WTF::StringImpl *)v12[3];
        v14 = v40;
        v40 = 0;
        v12[3] = v14;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v11);
          else
            *(_DWORD *)v13 -= 2;
        }
        (*(void (**)(_QWORD *, _QWORD *))(*v12 + 32))(v12, v12 + 3);
        if (LOBYTE(v41[0]))
        {
          v24 = v40;
          v40 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v23);
            else
              *(_DWORD *)v24 -= 2;
          }
        }
      }
      v15 = (unsigned __int8 ***)v45;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v15);
    default:
      return this;
  }
}

unsigned __int8 ***WebKit::RemoteTextureView::didReceiveStreamMessage(unsigned __int8 ***this, uint64_t **a2, IPC::Decoder *a3)
{
  unsigned __int8 ***v3;
  int v4;
  unsigned __int8 ***v5;
  WTF::StringImpl *v7;
  unsigned __int8 **v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t *v13;
  WTF::StringImpl *v14;
  char v15;

  v3 = this;
  v4 = *((unsigned __int16 *)a3 + 25);
  if (v4 == 1384)
  {
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a2 + 4);
    IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)&v14);
    if (v15)
    {
      v8 = v3[2];
      v9 = (WTF::StringImpl *)v8[3];
      v10 = v14;
      v14 = 0;
      v8[3] = (unsigned __int8 *)v10;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v7);
        else
          *(_DWORD *)v9 -= 2;
      }
      (*((void (**)(unsigned __int8 **, unsigned __int8 **))*v8 + 2))(v8, v8 + 3);
      if (v15)
      {
        v12 = v14;
        v14 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v11);
          else
            *(_DWORD *)v12 -= 2;
        }
      }
    }
    v5 = (unsigned __int8 ***)&v13;
  }
  else
  {
    if (v4 != 1383)
      return this;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v14, a2 + 4);
    WebKit::WebGPU::ObjectHeap::removeObject((uint64_t)v3[3][1], (uint64_t)v3[5]);
    v5 = (unsigned __int8 ***)&v14;
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v5);
}

void WebKit::RemoteVideoFrameObjectHeap::didReceiveMessage(WebKit::RemoteVideoFrameObjectHeap *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  WebKit *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  char v25;

  switch(*((_WORD *)a3 + 25))
  {
    case 0x571:
      IPC::Decoder::decode<IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3, &v20);
      if (!(_BYTE)v21)
        goto LABEL_24;
      v5 = *((_QWORD *)a3 + 1);
      v6 = *(_QWORD *)a3;
      v7 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
      if (v5 <= v7)
      {
        v15 = 0;
        v16 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v17 = *((_QWORD *)a3 + 3);
        if (v17)
        {
          if (v5)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
            v16 = *(_QWORD *)a3;
            v15 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v15 = 0;
            v16 = 0;
          }
        }
      }
      else
      {
        v8 = (unsigned __int8 *)(v6 + v7);
        *((_QWORD *)a3 + 2) = v8 + 1;
        if (v6)
        {
          v9 = *v8;
          if (v9 < 2)
          {
            v23 = v20;
            LOBYTE(v24) = v9 != 0;
            v25 = 1;
            WebKit::RemoteVideoFrameObjectHeap::getVideoFrameBuffer(this, &v23, v9 != 0);
            return;
          }
LABEL_23:
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v19 = *((_QWORD *)a3 + 3);
          if (v19 && v5)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v6);
LABEL_24:
          v14 = *(_QWORD *)a3;
          v12 = *((_QWORD *)a3 + 1);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v13 = *((_QWORD *)a3 + 3);
          if (v13)
            goto LABEL_26;
          return;
        }
        v15 = v5;
        v16 = 0;
      }
      v5 = 0;
      v6 = 0;
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v18 = *((_QWORD *)a3 + 3);
      if (v18)
      {
        if (v15)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v18 + 16))(v18, v16, v15);
          v6 = *(_QWORD *)a3;
          v5 = *((_QWORD *)a3 + 1);
        }
        else
        {
          v5 = 0;
          v6 = 0;
        }
      }
      goto LABEL_23;
    case 0x572:
      v10 = (WebKit *)IPC::ArgumentCoder<IPC::ObjectIdentifierWriteReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::decode((uint64_t *)a3, (uint64_t)&v23);
      if (v25)
      {
        v20 = v23;
        v21 = v24;
        v22 = 1;
        WebKit::remoteVideoFrameObjectHeapQueue(v10);
        IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::remove((uint64_t)this + 32, &v20);
        return;
      }
      v11 = *(_QWORD *)a3;
      v12 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v13 = *((_QWORD *)a3 + 3);
      if (!v13)
      {
        v12 = 0;
LABEL_18:
        v14 = 0;
        goto LABEL_19;
      }
      if (!v12)
        goto LABEL_18;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v11);
      v14 = *(_QWORD *)a3;
      v12 = *((_QWORD *)a3 + 1);
      v13 = *((_QWORD *)a3 + 3);
LABEL_19:
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      if (v13)
      {
LABEL_26:
        if (v12)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v14);
      }
      return;
    case 0x573:
      IPC::Decoder::decode<std::tuple<WebCore::SharedMemoryHandle>>(a3, (uint64_t)&v23);
      if ((_BYTE)v24)
      {
        WebKit::SharedVideoFrameReader::setSharedMemory((uint64_t)this + 80);
        if ((_BYTE)v24)
          goto LABEL_13;
      }
      return;
    case 0x574:
      IPC::Decoder::decode<std::tuple<IPC::Semaphore>>(a3, (uint64_t)&v23);
      if (BYTE8(v23))
      {
        std::optional<IPC::Semaphore>::operator=[abi:sn180100]<IPC::Semaphore,void>((WebKit::RemoteVideoFrameObjectHeap *)((char *)this + 96), (IPC::Semaphore *)&v23);
        if (BYTE8(v23))
        {
          IPC::Semaphore::destroy((IPC::Semaphore *)&v23);
LABEL_13:
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v23);
        }
      }
      return;
    default:
      return;
  }
}

IPC::Encoder *WebKit::RemoteVideoFrameObjectHeap::didReceiveSyncMessage(WebKit *a1, unsigned __int8 **a2, uint64_t a3, uint64_t *a4)
{
  int v8;
  _BOOL8 v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  IPC::Encoder *result;
  WTF *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  IPC::Encoder *v27[2];
  char v28;
  _QWORD *v29;
  IPC::Encoder *v30[2];
  char v31;
  uint64_t v32;
  int v33;
  char v34;

  v8 = *(unsigned __int16 *)(a3 + 50);
  if (v8 != 3644)
  {
    if (v8 != 3645)
      return 0;
    IPC::Decoder::decode<IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3, v30);
    v9 = v31 != 0;
    if (v31)
    {
      *(_OWORD *)v27 = *(_OWORD *)v30;
      v28 = 1;
      v10 = *a4;
      *a4 = 0;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(a2);
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v11 = off_1E34B6820;
      v11[1] = v10;
      v30[0] = 0;
      v30[1] = 0;
      v11[2] = a2;
      v29 = v11;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v30[1]);
      v13 = v30[0];
      v30[0] = 0;
      if (v13)
      {
        IPC::Encoder::~Encoder(v13, v12);
        WTF::fastFree(v14, v15);
      }
      WebKit::RemoteVideoFrameObjectHeap::pixelBuffer(a1, (__int128 *)v27, (uint64_t *)&v29);
      v16 = (uint64_t)v29;
      v29 = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    }
    else
    {
      v24 = *(_QWORD *)a3;
      v25 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v26 = *(_QWORD *)(a3 + 24);
      if (v26 && v25)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, v24);
    }
    return (IPC::Encoder *)v9;
  }
  IPC::Decoder::decode<std::tuple<WebKit::SharedVideoFrame>>((uint64_t *)a3, (uint64_t)v30);
  v9 = v34 != 0;
  if (!v34)
    return (IPC::Encoder *)v9;
  v17 = *a4;
  *a4 = 0;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(a2);
  v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v18 = off_1E34B6868;
  v18[1] = v17;
  v27[0] = 0;
  v27[1] = 0;
  v18[2] = a2;
  v29 = v18;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v27[1]);
  result = v27[0];
  v27[0] = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    result = (IPC::Encoder *)WTF::fastFree(v21, v22);
  }
  if (v34)
  {
    WebKit::RemoteVideoFrameObjectHeap::convertFrameBuffer((uint64_t)a1, (uint64_t)v30, (uint64_t *)&v29);
    v23 = (uint64_t)v29;
    v29 = 0;
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    if (v34 && v33 != -1)
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEENS8_13MachSendRightEN7WebCore7IntSizeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v33])(v27, &v32);
    return (IPC::Encoder *)v9;
  }
  __break(1u);
  return result;
}

void WebKit::RemoteVideoFrameObjectHeapProxyProcessor::didReceiveMessage(unsigned __int8 **this, IPC::Connection *a2, IPC::Decoder *a3)
{
  unsigned __int8 **v5;
  void *v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[8];
  int v16;
  int v17;
  char v18;
  char v19;
  _BYTE v20[16];
  int v21;
  char v22;
  char v23;
  char v24;

  v5 = this + 2;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this + 2);
  switch(*((_WORD *)a3 + 25))
  {
    case 0x56D:
      IPC::Decoder::decode<std::optional<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>>>(&v14, (uint64_t *)a3);
      v20[0] = 0;
      if (!v18)
      {
        v23 = 0;
LABEL_43:
        v6 = *(void **)a3;
        v12 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v13 = *((_QWORD *)a3 + 3);
        if (!v13)
          goto LABEL_39;
        if (!v12)
          goto LABEL_39;
        (*(void (**)(uint64_t, void *))(*(_QWORD *)v13 + 16))(v13, v6);
        if (!v23)
          goto LABEL_39;
        goto LABEL_30;
      }
      v22 = 0;
      if (!(_BYTE)v17)
      {
        v23 = 1;
        goto LABEL_30;
      }
      v21 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,(std::__variant_detail::_Trait)1>>((uint64_t)v20, (uint64_t)&v14);
      v22 = 1;
      v23 = 1;
      if (v18)
      {
        if ((_BYTE)v17)
        {
          if (v16 != -1)
          {
            ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEENS8_13MachSendRightEN7WebCore7IntSizeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v16])(&v24, &v14);
            if (!v23)
              goto LABEL_43;
          }
        }
      }
LABEL_30:
      WebKit::RemoteVideoFrameObjectHeapProxyProcessor::newConvertedVideoFrameBuffer((uint64_t)this, (uint64_t)v20);
      if (v23 && v22 && v21 != -1)
        ((void (*)(uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEENS8_13MachSendRightEN7WebCore7IntSizeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v21])(&v14, v20);
      goto LABEL_39;
    case 0x56E:
      v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v8
        || (v9 = v7,
            IPC::Decoder::decode<std::optional<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>>>(v20, (uint64_t *)a3), !v23))
      {
        LOBYTE(v14) = 0;
        v19 = 0;
LABEL_25:
        v6 = *(void **)a3;
        v10 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v11 = *((_QWORD *)a3 + 3);
        if (!v11)
          goto LABEL_39;
        if (!v10)
          goto LABEL_39;
        (*(void (**)(uint64_t, void *))(*(_QWORD *)v11 + 16))(v11, v6);
        if (!v19)
          goto LABEL_39;
        goto LABEL_35;
      }
      v14 = v9;
      v15[0] = 0;
      v18 = 0;
      if (!v22)
      {
        v19 = 1;
        goto LABEL_35;
      }
      v17 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,(std::__variant_detail::_Trait)1>>((uint64_t)v15, (uint64_t)v20);
      v18 = 1;
      v19 = 1;
      if (v23)
      {
        if (v22)
        {
          if (v21 != -1)
          {
            ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEENS8_13MachSendRightEN7WebCore7IntSizeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v21])(&v24, v20);
            if (!v19)
              goto LABEL_25;
          }
        }
      }
LABEL_35:
      WebKit::RemoteVideoFrameObjectHeapProxyProcessor::newVideoFrameBuffer((uint64_t)this, v14, (uint64_t)v15);
      if (v19 && v18 && v17 != -1)
        ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEENS8_13MachSendRightEN7WebCore7IntSizeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v17])(v20, v15);
LABEL_39:
      if (this)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*v5, v6);
      return;
    case 0x56F:
      IPC::Decoder::decode<std::tuple<WebCore::SharedMemoryHandle>>(a3, (uint64_t)&v14);
      if ((_BYTE)v16)
      {
        WebKit::SharedVideoFrameReader::setSharedMemory((uint64_t)(this + 9));
        if ((_BYTE)v16)
          goto LABEL_23;
      }
      goto LABEL_39;
    case 0x570:
      IPC::Decoder::decode<std::tuple<IPC::Semaphore>>(a3, (uint64_t)&v14);
      if (v15[0])
      {
        std::optional<IPC::Semaphore>::operator=[abi:sn180100]<IPC::Semaphore,void>((IPC::Semaphore *)(this + 11), (IPC::Semaphore *)&v14);
        if (v15[0])
        {
          IPC::Semaphore::destroy((IPC::Semaphore *)&v14);
LABEL_23:
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v14);
        }
      }
      goto LABEL_39;
    default:
      goto LABEL_39;
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages18RemoteShaderModule15CompilationInfoEN6WebKit18RemoteShaderModuleES8_FvONS_17CompletionHandlerIFvONS_6VectorINS7_6WebGPU18CompilationMessageELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B67D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages18RemoteShaderModule15CompilationInfoEN6WebKit18RemoteShaderModuleES8_FvONS_17CompletionHandlerIFvONS_6VectorINS7_6WebGPU18CompilationMessageELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B67D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages18RemoteShaderModule15CompilationInfoEN6WebKit18RemoteShaderModuleES8_FvONS_17CompletionHandlerIFvONS_6VectorINS7_6WebGPU18CompilationMessageELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EE4callESG_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  unint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  char *result;
  WTF *v18;
  void *v19;
  unint64_t v20;
  size_t v21;
  void *v22;
  IPC::Encoder *v23;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3117;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v23 = (IPC::Encoder *)v5;
  v6 = *(unsigned int *)(a2 + 12);
  v7 = *(_QWORD *)(v5 + 544);
  v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = v8 + 8;
  v10 = *(_QWORD *)(v5 + 552);
  if (v10 < v8 + 8)
  {
    v20 = (2 * v10 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v21 = v20;
      v20 *= 2;
    }
    while (v21 < v9);
    result = (char *)mmap(0, v21, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v11 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v22 = *(void **)(v5 + 528);
    if (v22 != (void *)(v5 + 16))
      munmap(v22, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v11;
    *(_QWORD *)(v5 + 552) = v21;
    v7 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v11 = *(char **)(v5 + 528);
  }
  bzero(&v11[v7], v8 - v7);
  *(_QWORD *)(v5 + 544) = v9;
  v12 = (_QWORD *)(*(_QWORD *)(v5 + 528) + v8);
  *(_QWORD *)(v5 + 536) = v12 + 1;
  *v12 = v6;
  v13 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v13)
  {
    v14 = *(_QWORD *)a2;
    v15 = 48 * v13;
    do
    {
      IPC::ArgumentCoder<WebKit::WebGPU::CompilationMessage,void>::encode((IPC::Encoder *)v5, v14);
      v14 += 48;
      v15 -= 48;
    }
    while (v15);
  }
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v23, 0, 0);
  result = (char *)v23;
  v23 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v16);
    return (char *)WTF::fastFree(v18, v19);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages18RemoteTextDetector6DetectEN6WebKit18RemoteTextDetectorES8_FvNS_23ObjectIdentifierGenericIN7WebCore31RenderingResourceIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONS_6VectorINSA_14ShapeDetection12DetectedTextELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B67F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages18RemoteTextDetector6DetectEN6WebKit18RemoteTextDetectorES8_FvNS_23ObjectIdentifierGenericIN7WebCore31RenderingResourceIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONS_6VectorINSA_14ShapeDetection12DetectedTextELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B67F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages18RemoteTextDetector6DetectEN6WebKit18RemoteTextDetectorES8_FvNS_23ObjectIdentifierGenericIN7WebCore31RenderingResourceIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONS_6VectorINSA_14ShapeDetection12DetectedTextELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  IPC::Encoder *v14;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3124;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v14 = (IPC::Encoder *)v5;
  v6 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = v6;
  v7 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)a2;
    v9 = 40 * v7;
    do
    {
      IPC::ArgumentCoder<WebCore::ShapeDetection::DetectedText,void>::encode((IPC::Encoder *)v5, v8);
      v8 += 40;
      v9 -= 40;
    }
    while (v9);
  }
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v14, 0, 0);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26RemoteVideoFrameObjectHeap11PixelBufferEN6WebKit26RemoteVideoFrameObjectHeapES8_FvONS2_29ObjectIdentifierReadReferenceINS_23ObjectIdentifierGenericINS7_30RemoteVideoFrameIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvNS_9RetainPtrIP10__CVBufferEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B6820;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26RemoteVideoFrameObjectHeap11PixelBufferEN6WebKit26RemoteVideoFrameObjectHeapES8_FvONS2_29ObjectIdentifierReadReferenceINS_23ObjectIdentifierGenericINS7_30RemoteVideoFrameIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvNS_9RetainPtrIP10__CVBufferEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B6820;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26RemoteVideoFrameObjectHeap11PixelBufferEN6WebKit26RemoteVideoFrameObjectHeapES8_FvONS2_29ObjectIdentifierReadReferenceINS_23ObjectIdentifierGenericINS7_30RemoteVideoFrameIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvNS_9RetainPtrIP10__CVBufferEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, CFTypeRef *a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<__CVBuffer *,void>::encode(*(_QWORD *)(a1 + 8), *a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

void IPC::Decoder::decode<std::tuple<WebKit::SharedVideoFrame>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<WebKit::SharedVideoFrame>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 48))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<std::tuple<WebKit::SharedVideoFrame>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  __int128 v4;
  int v5;
  _BYTE v6[16];
  int v7;
  unsigned __int8 v8;
  char v9;

  IPC::Decoder::decode<WebKit::SharedVideoFrame>(a1, (uint64_t)&v4);
  if (v8)
  {
    *(_OWORD *)a2 = v4;
    *(_DWORD *)(a2 + 16) = v5;
    *(_BYTE *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 40) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,(std::__variant_detail::_Trait)1>>(a2 + 24, (uint64_t)v6);
    v3 = v8;
    *(_BYTE *)(a2 + 48) = 1;
    if (v3)
    {
      if (v7 != -1)
        ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEENS8_13MachSendRightEN7WebCore7IntSizeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v7])(&v9, v6);
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26RemoteVideoFrameObjectHeap18ConvertFrameBufferEN6WebKit26RemoteVideoFrameObjectHeapES8_FvONS7_16SharedVideoFrameEONS_17CompletionHandlerIFvN7WebCore21DestinationColorSpaceEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B6868;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26RemoteVideoFrameObjectHeap18ConvertFrameBufferEN6WebKit26RemoteVideoFrameObjectHeapES8_FvONS7_16SharedVideoFrameEONS_17CompletionHandlerIFvN7WebCore21DestinationColorSpaceEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B6868;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26RemoteVideoFrameObjectHeap18ConvertFrameBufferEN6WebKit26RemoteVideoFrameObjectHeapES8_FvONS7_16SharedVideoFrameEONS_17CompletionHandlerIFvN7WebCore21DestinationColorSpaceEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, CFTypeRef *a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(*(IPC::Encoder **)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

_BYTE *IPC::Decoder::decode<std::optional<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>>>(_BYTE *result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[16];
  int v20;
  unsigned __int8 v21;
  char v22;

  v3 = (uint64_t)result;
  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v12 = 0;
    v13 = 0;
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
        v13 = *a2;
        v12 = a2[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
    }
    goto LABEL_12;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v12 = v6;
    v13 = 0;
LABEL_12:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v15 = a2[3];
    if (v15)
    {
      if (v12)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13, v12);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_13;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_13:
    *a2 = 0;
    a2[1] = 0;
    v16 = a2[3];
    if (v16 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v5);
    *(_BYTE *)v3 = 0;
    goto LABEL_15;
  }
  if (!v9)
  {
    *result = 0;
    result[24] = 0;
    result[32] = 1;
    return result;
  }
  IPC::Decoder::decode<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>>(a2, (uint64_t)v19);
  v10 = v21;
  *(_BYTE *)v3 = 0;
  if (v10)
  {
    *(_DWORD *)(v3 + 16) = -1;
    result = (_BYTE *)std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,(std::__variant_detail::_Trait)1>>(v3, (uint64_t)v19);
    *(_BYTE *)(v3 + 24) = 1;
    v11 = v21;
    *(_BYTE *)(v3 + 32) = 1;
    if (!v11)
      return result;
    if (v20 == -1)
      return result;
    result = (_BYTE *)((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEENS8_13MachSendRightEN7WebCore7IntSizeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_0[v20])(&v22, v19);
    if (*(_BYTE *)(v3 + 32))
      return result;
    goto LABEL_16;
  }
LABEL_15:
  *(_BYTE *)(v3 + 32) = 0;
LABEL_16:
  v17 = *a2;
  v18 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (_BYTE *)a2[3];
  if (result)
  {
    if (v18)
      return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)result + 16))(result, v17);
  }
  return result;
}

void WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant(WebKit::ExtensionCapabilityGrant *this)
{
  WTF::StringImpl *v2;
  const void *v3;
  WTF::StringImpl *v4;
  CFTypeRef cf;

  cf = 0;
  WebKit::ExtensionCapabilityGrant::setPlatformGrant((uint64_t)this, (uint64_t *)&cf);
  if (cf)
    CFRelease(cf);
  v3 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

void sub_1970058C4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  uint64_t v10;
  const void *v12;
  WTF::StringImpl *v13;

  if (cf)
    CFRelease(cf);
  v12 = *(const void **)(v10 + 8);
  *(_QWORD *)(v10 + 8) = 0;
  if (v12)
    CFRelease(v12);
  v13 = *(WTF::StringImpl **)v10;
  *(_QWORD *)v10 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::ExtensionCapabilityGrant::setPlatformGrant(uint64_t a1, uint64_t *a2)
{
  void *v3;
  uint64_t v4;
  const void *v5;
  NSObject *v6;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  v4 = *a2;
  *a2 = 0;
  v5 = *(const void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    CFRelease(v5);
  if (objc_msgSend(v3, "isValid")
    && (objc_msgSend(v3, "invalidate") & 1) == 0
    && (v6 = qword_1ECE71618, os_log_type_enabled((os_log_t)qword_1ECE71618, OS_LOG_TYPE_ERROR)))
  {
    v7 = 138543362;
    v8 = v3;
    _os_log_error_impl(&dword_196BCC000, v6, OS_LOG_TYPE_ERROR, "Invalidating grant %{public}@ failed", (uint8_t *)&v7, 0xCu);
    if (!v3)
      return;
  }
  else if (!v3)
  {
    return;
  }
  CFRelease(v3);
}

void sub_1970059F8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::ExtensionCapabilityGrant::invalidate(WebKit::ExtensionCapabilityGrant *this)
{
  CFTypeRef cf;

  cf = 0;
  WebKit::ExtensionCapabilityGrant::setPlatformGrant((uint64_t)this, (uint64_t *)&cf);
  if (cf)
    CFRelease(cf);
}

void sub_197005A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::MediaCapability::MediaCapability(uint64_t a1, uint64_t *a2)
{
  const void **v3;
  WTF::URL *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  id v9;
  uint64_t v10;
  const void *v11;
  const void *v12;
  const void *v13;
  uint64_t result;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (const void **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E34B6890;
  *(_BYTE *)(a1 + 24) = 0;
  v4 = (WTF::URL *)(a1 + 32);
  WTF::URL::URL(a1 + 32, a2);
  WTF::URL::protocolHostAndPort(v4);
  MEMORY[0x19AEABB0C](&v16, &v15, 0);
  v6 = WTF::URL::operator NSURL *();
  v7 = v16;
  v16 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v15;
  v15 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::destroy(v8, v5);
      if (v6)
        goto LABEL_9;
LABEL_15:
      result = 40;
      __break(0xC471u);
      return result;
    }
    *(_DWORD *)v8 -= 2;
  }
  if (!v6)
    goto LABEL_15;
LABEL_9:
  v9 = objc_alloc(MEMORY[0x1E0C926E0]);
  v10 = objc_msgSend(v9, "initWithWebPageURL:", v6, v15, v16);
  *(_QWORD *)(a1 + 72) = v10;
  v11 = (const void *)objc_msgSend(MEMORY[0x1E0C926F0], "mediaPlaybackAndCaptureWithEnvironment:", v10);
  v12 = v11;
  if (v11)
    CFRetain(v11);
  v13 = *v3;
  *v3 = v12;
  if (v13)
    CFRelease(v13);
  return a1;
}

void sub_197005BAC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  _QWORD *v10;
  unsigned int **v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v14;
  const void *v15;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  v14 = *v12;
  *v12 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v11, a2);
  v15 = (const void *)v10[1];
  *v10 = off_1E34AB458;
  v10[1] = 0;
  if (v15)
    CFRelease(v15);
  _Unwind_Resume(a1);
}

uint64_t *WebKit::MediaCapability::environmentIdentifier@<X0>(id *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *result;
  WTF::String *string;
  const char *v5;
  _DWORD *v6;

  result = (uint64_t *)objc_msgSend(this[9], "createXPCRepresentation");
  if (result)
  {
    string = (WTF::String *)xpc_dictionary_get_string(result, "identifier");
    return WTF::String::fromUTF8(a2, string, v5);
  }
  else
  {
    v6 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v6 += 2;
    *a2 = (uint64_t)v6;
  }
  return result;
}

uint64_t WTF::String::fromUTF8(WTF::String *this, const char *a2)
{
  if (this)
    strlen((const char *)this);
  return WTF::String::fromUTF8();
}

uint64_t WebKit::MediaPlaybackTargetContextSerialized::MediaPlaybackTargetContextSerialized(uint64_t a1, unsigned __int8 *a2)
{
  int v4;
  unsigned __int8 v5;
  WTF::StringImpl **v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  void *v9;
  CFTypeRef v10;
  void *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *v21;
  CFTypeRef cf;

  *(_BYTE *)(a1 + 8) = 2;
  *(_QWORD *)a1 = off_1E34AE7F0;
  (*(void (**)(unsigned __int8 *))(*(_QWORD *)a2 + 16))(a2);
  *(_BYTE *)(a1 + 24) = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a2 + 24))(a2);
  *(_BYTE *)(a1 + 25) = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a2 + 32))(a2);
  v4 = a2[8];
  if (v4 == 2)
  {
    v5 = a2[26];
    *(_QWORD *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 26) = v5;
    *(_BYTE *)(a1 + 27) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 27) = a2[27];
    WTF::String::operator=((WTF::StringImpl **)(a1 + 32), (WTF::StringImpl *)(a2 + 32));
    if (a2[8] == 2)
    {
      WTF::String::operator=((WTF::StringImpl **)(a1 + 40), (WTF::StringImpl *)(a2 + 40));
      return a1;
    }
LABEL_26:
    __break(0xC471u);
    JUMPOUT(0x197005F6CLL);
  }
  *(_QWORD *)(a1 + 32) = 0;
  v6 = (WTF::StringImpl **)(a1 + 32);
  *(_BYTE *)(a1 + 26) = v4;
  *(_BYTE *)(a1 + 27) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v7 = (WTF::StringImpl **)(a1 + 40);
  if (v4 == 1)
  {
    *(_BYTE *)(a1 + 27) = a2[24];
    return a1;
  }
  if (!v4)
  {
    v8 = objc_opt_new();
    if (a2[8])
      goto LABEL_26;
    v9 = (void *)v8;
    WebCore::MediaPlaybackTargetContextCocoa::outputContext((WebCore::MediaPlaybackTargetContextCocoa *)a2);
    objc_msgSend((id)cf, "encodeWithCoder:", v9);
    v10 = cf;
    cf = 0;
    if (v10)
      CFRelease(v10);
    v11 = (void *)objc_msgSend(v9, "accumulatedDictionary");
    MEMORY[0x19AEABCC8](&cf, objc_msgSend(v11, "objectForKey:", CFSTR("AVOutputContextSerializationKeyContextID")));
    v13 = (WTF::StringImpl *)cf;
    cf = 0;
    v14 = *v6;
    *v6 = v13;
    if (v14)
    {
      v15 = *(_DWORD *)v14 - 2;
      if (*(_DWORD *)v14 != 2)
        goto LABEL_13;
      WTF::StringImpl::destroy(v14, v12);
      v14 = (WTF::StringImpl *)cf;
      cf = 0;
      if (!v14)
        goto LABEL_14;
      v15 = *(_DWORD *)v14 - 2;
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v16);
      else
LABEL_13:
        *(_DWORD *)v14 = v15;
    }
LABEL_14:
    MEMORY[0x19AEABCC8](&cf, objc_msgSend(v11, "objectForKey:", CFSTR("AVOutputContextSerializationKeyContextType")));
    v18 = (WTF::StringImpl *)cf;
    cf = 0;
    v19 = *v7;
    *v7 = v18;
    if (!v19)
      goto LABEL_19;
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::destroy(v19, v17);
      v19 = (WTF::StringImpl *)cf;
      cf = 0;
      if (!v19)
        goto LABEL_19;
      v20 = *(_DWORD *)v19 - 2;
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::destroy(v19, v21);
        if (!v9)
          return a1;
        goto LABEL_20;
      }
    }
    *(_DWORD *)v19 = v20;
LABEL_19:
    if (!v9)
      return a1;
LABEL_20:
    CFRelease(v9);
  }
  return a1;
}

void sub_197005F90(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  WTF::StringImpl **v10;
  WTF::StringImpl **v11;
  WTF::StringImpl **v12;
  const void *v13;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  if (v13)
    CFRelease(v13);
  v15 = *v12;
  *v12 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = *v11;
  *v11 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = *v10;
  *v10 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::MediaPlaybackTargetContextSerialized::platformContext(WebKit::MediaPlaybackTargetContextSerialized *this@<X0>, uint64_t a2@<X8>)
{
  char v4;
  _DWORD *v5;
  void *v6;
  const __CFString *v7;
  const __CFString *v8;
  WKKeyedCoder *v9;
  CFTypeRef cf;

  if (*((_BYTE *)this + 26) == 1)
  {
    v4 = *((_BYTE *)this + 27);
    v5 = (_DWORD *)*((_QWORD *)this + 2);
    if (v5)
      *v5 += 2;
    *(_BYTE *)(a2 + 8) = 1;
    *(_QWORD *)a2 = off_1E34B6A50;
    *(_QWORD *)(a2 + 16) = v5;
    *(_BYTE *)(a2 + 24) = v4;
    *(_DWORD *)(a2 + 32) = 1;
  }
  else
  {
    v6 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 2);
    if (*((_QWORD *)this + 4))
      v7 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v7 = &stru_1E351F1B8;
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v7, CFSTR("AVOutputContextSerializationKeyContextID"));
    if (*((_QWORD *)this + 5))
      v8 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v8 = &stru_1E351F1B8;
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v8, CFSTR("AVOutputContextSerializationKeyContextType"));
    v9 = -[WKKeyedCoder initWithDictionary:]([WKKeyedCoder alloc], "initWithDictionary:", v6);
    cf = (CFTypeRef)objc_msgSend(objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E0DCDFE0])()), "initWithCoder:", v9);
    WebCore::MediaPlaybackTargetContextCocoa::MediaPlaybackTargetContextCocoa();
    if (cf)
      CFRelease(cf);
    *(_DWORD *)(a2 + 32) = 0;
    if (v9)
      CFRelease(v9);
  }
}

void sub_197006194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  const void *v10;

  if (cf)
    CFRelease(cf);
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void WebCore::MediaPlaybackTargetContextMock::~MediaPlaybackTargetContextMock(WebCore::MediaPlaybackTargetContextMock *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
}

{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WTF::fastFree(this, a2);
}

void WebKit::PaymentAuthorizationPresenter::completeMerchantValidation(uint64_t a1, const void **a2)
{
  void *v3;
  const void *v4;

  v3 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v4 = *a2;
  if (v4)
    CFRetain(v4);
  objc_msgSend(v3, "completeMerchantValidation:error:", v4, 0);
  if (v4)
    CFRelease(v4);
}

void sub_197006268(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PaymentAuthorizationPresenter::completePaymentMethodSelection(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  BOOL v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;
  CFTypeRef v14;
  const WebCore::ApplePayRecurringPaymentRequest *v15;
  CFTypeRef v16;
  CFTypeRef v17;
  CFTypeRef v18;
  const __CFString *i;
  const WebCore::ApplePayDeferredPaymentRequest *v20;
  CFTypeRef v21;
  CFTypeRef cf;

  if (*(_BYTE *)(a2 + 656))
  {
    v4 = (_QWORD *)(a2 + 80);
    v5 = *(_DWORD *)(a2 + 92);
    if (v5
      && ((v6 = *v4 + 80 * v5, v7 = *(unsigned __int8 *)(v6 - 7), v8 = *(unsigned __int8 *)(v6 - 8), v7)
        ? (v9 = v8 == 0)
        : (v9 = 0),
          v9))
    {
      v13 = objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E0DCE288])());
      if (!*(_BYTE *)(a2 + 656))
        goto LABEL_38;
      v11 = v13;
      v12 = WebCore::platformDisbursementSummaryItems();
    }
    else
    {
      v10 = objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E0DCE288])());
      if (!*(_BYTE *)(a2 + 656))
        goto LABEL_38;
      v11 = v10;
      v12 = WebCore::platformSummaryItems();
    }
    v4 = (_QWORD *)objc_msgSend(v11, "initWithPaymentSummaryItems:", v12);
    if (!*(_BYTE *)(a2 + 656))
      goto LABEL_38;
    WebKit::toNSErrors(&cf, a2 + 616);
    v14 = cf;
    objc_msgSend(v4, "setErrors:", cf);
    if (v14)
      CFRelease(v14);
    if (!*(_BYTE *)(a2 + 656))
      goto LABEL_38;
    objc_msgSend(v4, "setAvailableShippingMethods:", WebKit::toPKShippingMethods(a2 + 632));
    if (!*(_BYTE *)(a2 + 656))
      goto LABEL_38;
    if (*(_BYTE *)(a2 + 296))
    {
      WebKit::platformRecurringPaymentRequest((WebKit *)(a2 + 96), v15, &cf);
      objc_msgSend(v4, "setRecurringPaymentRequest:", cf);
      v16 = cf;
      cf = 0;
      if (v16)
        CFRelease(v16);
      if (!*(_BYTE *)(a2 + 656))
        goto LABEL_38;
    }
    if (*(_BYTE *)(a2 + 416))
    {
      WebKit::platformAutomaticReloadPaymentRequest((WebKit *)(a2 + 304), v15, &cf);
      objc_msgSend(v4, "setAutomaticReloadPaymentRequest:", cf);
      v17 = cf;
      cf = 0;
      if (v17)
        CFRelease(v17);
      if (!*(_BYTE *)(a2 + 656))
        goto LABEL_38;
    }
    if (*(_BYTE *)(a2 + 440))
    {
      WTF::createNSArray<WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RetainPtr<PKPaymentTokenContext> (&)(WebCore::ApplePayPaymentTokenContext const&)>((uint64_t *)(a2 + 424), (void (*)(CFTypeRef *__return_ptr, uint64_t))WebKit::platformPaymentTokenContext, (uint64_t *)&cf);
      v18 = cf;
      objc_msgSend(v4, "setMultiTokenContexts:", cf);
      if (v18)
        CFRelease(v18);
      if (!*(_BYTE *)(a2 + 656))
        goto LABEL_38;
    }
    if (!*(_QWORD *)(a2 + 648))
      goto LABEL_39;
    for (i = (const __CFString *)WTF::StringImpl::operator NSString *(); ; i = &stru_1E351F1B8)
    {
      objc_msgSend(v4, "setInstallmentGroupIdentifier:", i);
      objc_msgSend((id)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1), "completePaymentMethodSelection:", v4);
      if (*(_BYTE *)(a2 + 656))
        break;
LABEL_38:
      __break(1u);
LABEL_39:
      ;
    }
    if (*(_BYTE *)(a2 + 576))
    {
      WebKit::platformDeferredPaymentRequest((WebKit *)(a2 + 448), v20, &cf);
      objc_msgSend(v4, "setDeferredPaymentRequest:", cf);
      v21 = cf;
      cf = 0;
      if (v21)
        CFRelease(v21);
    }
    if (v4)
      CFRelease(v4);
  }
  else
  {
    objc_msgSend((id)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1), "completePaymentMethodSelection:", 0);
  }
}

void sub_197006500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  const void *v10;

  if (cf)
    CFRelease(cf);
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void WebKit::toNSErrors(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  WTF::StringImpl *v11;
  const __CFString *v12;
  PAL *PassKitCore_PKContactFieldPhoneNumber;
  WTF::StringImpl *v14;
  int v16;
  PAL *v17;
  PAL *v18;
  uint64_t PassKitCore_PKContactFieldEmailAddress;
  WTF::StringImpl *v20;
  const __CFString *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t PassKitCore_PKDisbursementErrorDomain;
  uint64_t PassKitCore_PKContactFieldPostalAddress;
  PAL *v28;
  uint64_t v29;

  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a2 + 12));
  v5 = *(unsigned int *)(a2 + 12);
  if (!(_DWORD)v5)
  {
LABEL_70:
    *a1 = v4;
    return;
  }
  v6 = *(uint64_t **)a2;
  v7 = *MEMORY[0x1E0CB2D50];
  v8 = 8 * v5;
  while (1)
  {
    v9 = *v6;
    v10 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v11 = *(WTF::StringImpl **)(v9 + 16);
    if (v11)
    {
      *(_DWORD *)v11 += 2;
      v12 = (const __CFString *)WTF::StringImpl::operator NSString *();
    }
    else
    {
      v12 = &stru_1E351F1B8;
    }
    PassKitCore_PKContactFieldPhoneNumber = (PAL *)objc_msgSend(v10, "setObject:forKey:", v12, v7);
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        PassKitCore_PKContactFieldPhoneNumber = (PAL *)WTF::StringImpl::destroy(v11, v14);
      else
        *(_DWORD *)v11 -= 2;
    }
    if (*(unsigned __int16 *)(v9 + 24) < 0x100u || *(_WORD *)(v9 + 24) != 0)
    {
      if (*(unsigned __int16 *)(v9 + 13) >= 0x100u)
      {
        switch(*(_WORD *)(v9 + 13))
        {
          case 0u:
            PassKitCore_PKContactFieldPhoneNumber = (PAL *)PAL::get_PassKitCore_PKContactFieldPhoneNumber(PassKitCore_PKContactFieldPhoneNumber);
            goto LABEL_39;
          case 1u:
            PassKitCore_PKContactFieldPhoneNumber = (PAL *)PAL::get_PassKitCore_PKContactFieldEmailAddress(PassKitCore_PKContactFieldPhoneNumber);
            goto LABEL_39;
          case 2u:
            PassKitCore_PKContactFieldPhoneNumber = (PAL *)PAL::get_PassKitCore_PKContactFieldName(PassKitCore_PKContactFieldPhoneNumber);
            goto LABEL_39;
          case 3u:
            PassKitCore_PKContactFieldPhoneNumber = (PAL *)PAL::get_PassKitCore_PKContactFieldPhoneticName(PassKitCore_PKContactFieldPhoneNumber);
            goto LABEL_39;
          case 4u:
            PassKitCore_PKContactFieldPhoneNumber = (PAL *)PAL::get_PassKitCore_PKContactFieldPostalAddress(PassKitCore_PKContactFieldPhoneNumber);
LABEL_39:
            PassKitCore_PKContactFieldPostalAddress = (uint64_t)PassKitCore_PKContactFieldPhoneNumber;
            goto LABEL_40;
          case 5u:
            PassKitCore_PKContactFieldPostalAddress = PAL::get_PassKitCore_PKContactFieldPostalAddress(PassKitCore_PKContactFieldPhoneNumber);
            PassKitCore_PKContactFieldPhoneNumber = (PAL *)_MergedGlobals_30[0]();
            goto LABEL_46;
          case 6u:
            PassKitCore_PKContactFieldPostalAddress = PAL::get_PassKitCore_PKContactFieldPostalAddress(PassKitCore_PKContactFieldPhoneNumber);
            PassKitCore_PKContactFieldPhoneNumber = (PAL *)off_1ECE6C520[0]();
            goto LABEL_46;
          case 7u:
            PassKitCore_PKContactFieldPostalAddress = PAL::get_PassKitCore_PKContactFieldPostalAddress(PassKitCore_PKContactFieldPhoneNumber);
            PassKitCore_PKContactFieldPhoneNumber = (PAL *)off_1ECE6C528[0]();
            goto LABEL_46;
          case 8u:
            PassKitCore_PKContactFieldPostalAddress = PAL::get_PassKitCore_PKContactFieldPostalAddress(PassKitCore_PKContactFieldPhoneNumber);
            PassKitCore_PKContactFieldPhoneNumber = (PAL *)off_1ECE6C530[0]();
            goto LABEL_46;
          case 9u:
            PassKitCore_PKContactFieldPostalAddress = PAL::get_PassKitCore_PKContactFieldPostalAddress(PassKitCore_PKContactFieldPhoneNumber);
            PassKitCore_PKContactFieldPhoneNumber = (PAL *)off_1ECE6C538[0]();
            goto LABEL_46;
          case 0xAu:
            PassKitCore_PKContactFieldPostalAddress = PAL::get_PassKitCore_PKContactFieldPostalAddress(PassKitCore_PKContactFieldPhoneNumber);
            PassKitCore_PKContactFieldPhoneNumber = (PAL *)off_1ECE6C540[0]();
            goto LABEL_46;
          case 0xBu:
            PassKitCore_PKContactFieldPostalAddress = PAL::get_PassKitCore_PKContactFieldPostalAddress(PassKitCore_PKContactFieldPhoneNumber);
            PassKitCore_PKContactFieldPhoneNumber = (PAL *)off_1ECE6C548[0]();
            goto LABEL_46;
          case 0xCu:
            PassKitCore_PKContactFieldPostalAddress = PAL::get_PassKitCore_PKContactFieldPostalAddress(PassKitCore_PKContactFieldPhoneNumber);
            PassKitCore_PKContactFieldPhoneNumber = (PAL *)off_1ECE6C550();
LABEL_46:
            v28 = PassKitCore_PKContactFieldPhoneNumber;
            break;
          default:
            PassKitCore_PKContactFieldPostalAddress = 0;
LABEL_40:
            v28 = 0;
            break;
        }
        PassKitCore_PKContactFieldPhoneNumber = (PAL *)objc_msgSend(v10, "setObject:forKey:", PassKitCore_PKContactFieldPostalAddress, PAL::get_PassKitCore_PKPaymentErrorContactFieldUserInfoKey(PassKitCore_PKContactFieldPhoneNumber));
        if (v28)
          PassKitCore_PKContactFieldPhoneNumber = (PAL *)objc_msgSend(v10, "setObject:forKey:", v28, PAL::get_PassKitCore_PKPaymentErrorPostalAddressUserInfoKey(PassKitCore_PKContactFieldPhoneNumber));
      }
      goto LABEL_49;
    }
    v16 = *(unsigned __int8 *)(v9 + 12);
    if (v16 != 6)
      break;
    v24 = objc_msgSend((id)((uint64_t (*)(PAL *))*MEMORY[0x1E0DCE0C8])(PassKitCore_PKContactFieldPhoneNumber), "disbursementCardUnsupportedError");
LABEL_57:
    v23 = v24;
LABEL_58:
    if (v10)
      CFRelease(v10);
    if (v23)
      objc_msgSend(v4, "addObject:", v23);
    ++v6;
    v8 -= 8;
    if (!v8)
      goto LABEL_70;
  }
  if (v16 != 7)
  {
    v25 = (void *)MEMORY[0x1E0CB35C8];
    PassKitCore_PKDisbursementErrorDomain = PAL::get_PassKitCore_PKDisbursementErrorDomain(PassKitCore_PKContactFieldPhoneNumber);
LABEL_51:
    v29 = -1;
LABEL_56:
    v24 = objc_msgSend(v25, "errorWithDomain:code:userInfo:", PassKitCore_PKDisbursementErrorDomain, v29, v10);
    goto LABEL_57;
  }
  if (*(unsigned __int16 *)(v9 + 13) < 0x100u)
  {
LABEL_49:
    v25 = (void *)MEMORY[0x1E0CB35C8];
    PassKitCore_PKDisbursementErrorDomain = PAL::get_PassKitCore_PKPaymentErrorDomain(PassKitCore_PKContactFieldPhoneNumber);
    switch(*(_BYTE *)(v9 + 12))
    {
      case 1:
        v29 = 1;
        break;
      case 2:
        v29 = 2;
        break;
      case 3:
        v29 = 3;
        break;
      case 4:
        v29 = 4;
        break;
      case 5:
        v29 = 5;
        break;
      default:
        goto LABEL_51;
    }
    goto LABEL_56;
  }
  v17 = (PAL *)((uint64_t (*)(PAL *))*MEMORY[0x1E0DCE0C8])(PassKitCore_PKContactFieldPhoneNumber);
  if (*(unsigned __int16 *)(v9 + 13) > 0xFFu)
  {
    v18 = v17;
    switch(*(_WORD *)(v9 + 13))
    {
      case 0u:
        PassKitCore_PKContactFieldEmailAddress = PAL::get_PassKitCore_PKContactFieldPhoneNumber(v17);
        goto LABEL_22;
      case 1u:
        PassKitCore_PKContactFieldEmailAddress = PAL::get_PassKitCore_PKContactFieldEmailAddress(v17);
        goto LABEL_22;
      case 2u:
        PassKitCore_PKContactFieldEmailAddress = PAL::get_PassKitCore_PKContactFieldName(v17);
        goto LABEL_22;
      case 3u:
        PassKitCore_PKContactFieldEmailAddress = PAL::get_PassKitCore_PKContactFieldPhoneticName(v17);
        goto LABEL_22;
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
        PassKitCore_PKContactFieldEmailAddress = PAL::get_PassKitCore_PKContactFieldPostalAddress(v17);
LABEL_22:
        v2 = PassKitCore_PKContactFieldEmailAddress;
        break;
      default:
        break;
    }
    v20 = *(WTF::StringImpl **)(v9 + 16);
    if (v20)
    {
      *(_DWORD *)v20 += 2;
      v21 = (const __CFString *)WTF::StringImpl::operator NSString *();
    }
    else
    {
      v21 = &stru_1E351F1B8;
    }
    v23 = -[PAL disbursementContactInvalidErrorWithContactField:localizedDescription:](v18, "disbursementContactInvalidErrorWithContactField:localizedDescription:", v2, v21);
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v22);
      else
        *(_DWORD *)v20 -= 2;
    }
    goto LABEL_58;
  }
  std::__throw_bad_optional_access[abi:sn180100]();
  __break(1u);
}

void sub_197006978(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PaymentAuthorizationPresenter::completePaymentSession(uint64_t a1, __int16 *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  __int128 v7;
  __int128 v8;
  id v9;
  const __CFString *v10;
  const __CFString *v11;
  void *v12;
  const __CFString *v13;
  uint64_t v14;
  const __CFString *v15;
  const void *v16;
  void *v17;
  const void *v18;
  WTF::StringImpl *v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  char v23;
  const void *v24;

  v4 = *a2;
  if (v4 > 7)
    v5 = 1;
  else
    v5 = qword_1978CF1B8[v4];
  WebKit::toNSErrors(&v24, (uint64_t)(a2 + 4));
  LOBYTE(v21) = 0;
  v23 = 0;
  if (*((_BYTE *)a2 + 56))
  {
    v7 = *(_OWORD *)(a2 + 12);
    *(_OWORD *)(a2 + 12) = 0u;
    v8 = *(_OWORD *)(a2 + 20);
    *(_OWORD *)(a2 + 20) = 0u;
    v21 = v7;
    v22 = v8;
    v23 = 1;
    v9 = objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E0DCE0D0])());
    if ((_QWORD)v21)
      v10 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v10 = &stru_1E351F1B8;
    if (*((_QWORD *)&v21 + 1))
      v11 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v11 = &stru_1E351F1B8;
    v12 = (void *)MEMORY[0x1E0C99E98];
    if ((_QWORD)v22)
      v13 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v13 = &stru_1E351F1B8;
    v14 = objc_msgSend(v12, "URLWithString:", v13);
    if (*((_QWORD *)&v22 + 1))
      v15 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v15 = &stru_1E351F1B8;
    v16 = (const void *)objc_msgSend(v9, "initWithOrderTypeIdentifier:orderIdentifier:webServiceURL:authenticationToken:", v10, v11, v14, v15);
    v17 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    v18 = v24;
    objc_msgSend(v17, "completePaymentSession:errors:orderDetails:", v5, v24, v16);
    if (v16)
      CFRelease(v16);
    std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v21, v19);
  }
  else
  {
    std::__optional_destruct_base<WebCore::ApplePayPaymentOrderDetails,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v21, v6);
    v20 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    v18 = v24;
    objc_msgSend(v20, "completePaymentSession:errors:", v5, v24, (_QWORD)v21);
  }
  if (v18)
    CFRelease(v18);
}

void sub_197006BEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WebKit::PaymentAuthorizationPresenter::completeShippingContactSelection(uint64_t a1, uint64_t a2)
{
  int v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  CFTypeRef v9;
  const WebCore::ApplePayRecurringPaymentRequest *v10;
  CFTypeRef v11;
  CFTypeRef v12;
  CFTypeRef v13;
  CFTypeRef v14;
  CFTypeRef cf;

  if (!*(_BYTE *)(a2 + 648))
  {
    objc_msgSend((id)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1), "completeShippingContactSelection:", 0);
    return;
  }
  v4 = *(unsigned __int8 *)(a2 + 608);
  v5 = objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E0DCE2D0])());
  if (!v4)
  {
    if (*(_BYTE *)(a2 + 648))
    {
      v6 = WebCore::platformSummaryItems();
      goto LABEL_8;
    }
LABEL_31:
    __break(1u);
    return;
  }
  if (!*(_BYTE *)(a2 + 648))
    goto LABEL_31;
  v6 = WebCore::platformDisbursementSummaryItems();
LABEL_8:
  v7 = objc_msgSend(v5, "initWithPaymentSummaryItems:", v6);
  if (!*(_BYTE *)(a2 + 648))
    goto LABEL_31;
  v8 = (void *)v7;
  WebKit::toNSErrors(&cf, a2 + 616);
  v9 = cf;
  objc_msgSend(v8, "setErrors:", cf);
  if (v9)
    CFRelease(v9);
  if (!*(_BYTE *)(a2 + 648))
    goto LABEL_31;
  objc_msgSend(v8, "setAvailableShippingMethods:", WebKit::toPKShippingMethods(a2 + 632));
  if (!*(_BYTE *)(a2 + 648))
    goto LABEL_31;
  if (*(_BYTE *)(a2 + 296))
  {
    WebKit::platformRecurringPaymentRequest((WebKit *)(a2 + 96), v10, &cf);
    objc_msgSend(v8, "setRecurringPaymentRequest:", cf);
    v11 = cf;
    cf = 0;
    if (v11)
      CFRelease(v11);
    if (!*(_BYTE *)(a2 + 648))
      goto LABEL_31;
  }
  if (*(_BYTE *)(a2 + 416))
  {
    WebKit::platformAutomaticReloadPaymentRequest((WebKit *)(a2 + 304), v10, &cf);
    objc_msgSend(v8, "setAutomaticReloadPaymentRequest:", cf);
    v12 = cf;
    cf = 0;
    if (v12)
      CFRelease(v12);
    if (!*(_BYTE *)(a2 + 648))
      goto LABEL_31;
  }
  if (*(_BYTE *)(a2 + 440))
  {
    WTF::createNSArray<WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RetainPtr<PKPaymentTokenContext> (&)(WebCore::ApplePayPaymentTokenContext const&)>((uint64_t *)(a2 + 424), (void (*)(CFTypeRef *__return_ptr, uint64_t))WebKit::platformPaymentTokenContext, (uint64_t *)&cf);
    v13 = cf;
    objc_msgSend(v8, "setMultiTokenContexts:", cf);
    if (v13)
      CFRelease(v13);
    if (!*(_BYTE *)(a2 + 648))
      goto LABEL_31;
  }
  if (*(_BYTE *)(a2 + 576))
  {
    WebKit::platformDeferredPaymentRequest((WebKit *)(a2 + 448), v10, &cf);
    objc_msgSend(v8, "setDeferredPaymentRequest:", cf);
    v14 = cf;
    cf = 0;
    if (v14)
      CFRelease(v14);
  }
  objc_msgSend((id)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1), "completeShippingContactSelection:", v8);
  if (v8)
    CFRelease(v8);
}

void sub_197006E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  const void *v10;

  if (cf)
    CFRelease(cf);
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void WebKit::PaymentAuthorizationPresenter::completeShippingMethodSelection(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  void *v6;
  const WebCore::ApplePayRecurringPaymentRequest *v7;
  CFTypeRef v8;
  CFTypeRef v9;
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef cf;

  if (*(_BYTE *)(a2 + 632))
  {
    v4 = objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E0DCE2C8])());
    if (!*(_BYTE *)(a2 + 632))
      goto LABEL_24;
    v5 = (void *)objc_msgSend(v4, "initWithPaymentSummaryItems:", WebCore::platformSummaryItems());
    if (!*(_BYTE *)(a2 + 632))
      goto LABEL_24;
    v6 = v5;
    objc_msgSend(v5, "setAvailableShippingMethods:", WebKit::toPKShippingMethods(a2 + 616));
    if (!*(_BYTE *)(a2 + 632))
      goto LABEL_24;
    if (*(_BYTE *)(a2 + 296))
    {
      WebKit::platformRecurringPaymentRequest((WebKit *)(a2 + 96), v7, &cf);
      objc_msgSend(v6, "setRecurringPaymentRequest:", cf);
      v8 = cf;
      cf = 0;
      if (v8)
        CFRelease(v8);
      if (!*(_BYTE *)(a2 + 632))
        goto LABEL_24;
    }
    if (*(_BYTE *)(a2 + 416))
    {
      WebKit::platformAutomaticReloadPaymentRequest((WebKit *)(a2 + 304), v7, &cf);
      objc_msgSend(v6, "setAutomaticReloadPaymentRequest:", cf);
      v9 = cf;
      cf = 0;
      if (v9)
        CFRelease(v9);
      if (!*(_BYTE *)(a2 + 632))
        goto LABEL_24;
    }
    if (!*(_BYTE *)(a2 + 440))
      goto LABEL_27;
    WTF::createNSArray<WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RetainPtr<PKPaymentTokenContext> (&)(WebCore::ApplePayPaymentTokenContext const&)>((uint64_t *)(a2 + 424), (void (*)(CFTypeRef *__return_ptr, uint64_t))WebKit::platformPaymentTokenContext, (uint64_t *)&cf);
    v10 = cf;
    objc_msgSend(v6, "setMultiTokenContexts:", cf);
    if (v10)
      CFRelease(v10);
    if (*(_BYTE *)(a2 + 632))
    {
LABEL_27:
      if (*(_BYTE *)(a2 + 576))
      {
        WebKit::platformDeferredPaymentRequest((WebKit *)(a2 + 448), v7, &cf);
        objc_msgSend(v6, "setDeferredPaymentRequest:", cf);
        v11 = cf;
        cf = 0;
        if (v11)
          CFRelease(v11);
      }
      objc_msgSend((id)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1), "completeShippingMethodSelection:", v6);
      if (v6)
        CFRelease(v6);
    }
    else
    {
LABEL_24:
      __break(1u);
    }
  }
  else
  {
    objc_msgSend((id)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1), "completeShippingMethodSelection:", 0);
  }
}

void sub_197007068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  const void *v10;

  if (cf)
    CFRelease(cf);
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void WebKit::PaymentAuthorizationPresenter::completeCouponCodeChange(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  void *v6;
  CFTypeRef v7;
  const WebCore::ApplePayRecurringPaymentRequest *v8;
  CFTypeRef v9;
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef v12;
  CFTypeRef cf;

  if (*(_BYTE *)(a2 + 648))
  {
    v4 = objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E0DCE238])());
    if (!*(_BYTE *)(a2 + 648))
      goto LABEL_27;
    v5 = objc_msgSend(v4, "initWithPaymentSummaryItems:", WebCore::platformSummaryItems());
    if (!*(_BYTE *)(a2 + 648))
      goto LABEL_27;
    v6 = (void *)v5;
    WebKit::toNSErrors(&cf, a2 + 616);
    v7 = cf;
    objc_msgSend(v6, "setErrors:", cf);
    if (v7)
      CFRelease(v7);
    if (!*(_BYTE *)(a2 + 648))
      goto LABEL_27;
    objc_msgSend(v6, "setAvailableShippingMethods:", WebKit::toPKShippingMethods(a2 + 632));
    if (!*(_BYTE *)(a2 + 648))
      goto LABEL_27;
    if (*(_BYTE *)(a2 + 296))
    {
      WebKit::platformRecurringPaymentRequest((WebKit *)(a2 + 96), v8, &cf);
      objc_msgSend(v6, "setRecurringPaymentRequest:", cf);
      v9 = cf;
      cf = 0;
      if (v9)
        CFRelease(v9);
      if (!*(_BYTE *)(a2 + 648))
        goto LABEL_27;
    }
    if (*(_BYTE *)(a2 + 416))
    {
      WebKit::platformAutomaticReloadPaymentRequest((WebKit *)(a2 + 304), v8, &cf);
      objc_msgSend(v6, "setAutomaticReloadPaymentRequest:", cf);
      v10 = cf;
      cf = 0;
      if (v10)
        CFRelease(v10);
      if (!*(_BYTE *)(a2 + 648))
        goto LABEL_27;
    }
    if (!*(_BYTE *)(a2 + 440))
      goto LABEL_30;
    WTF::createNSArray<WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RetainPtr<PKPaymentTokenContext> (&)(WebCore::ApplePayPaymentTokenContext const&)>((uint64_t *)(a2 + 424), (void (*)(CFTypeRef *__return_ptr, uint64_t))WebKit::platformPaymentTokenContext, (uint64_t *)&cf);
    v11 = cf;
    objc_msgSend(v6, "setMultiTokenContexts:", cf);
    if (v11)
      CFRelease(v11);
    if (*(_BYTE *)(a2 + 648))
    {
LABEL_30:
      if (*(_BYTE *)(a2 + 576))
      {
        WebKit::platformDeferredPaymentRequest((WebKit *)(a2 + 448), v8, &cf);
        objc_msgSend(v6, "setDeferredPaymentRequest:", cf);
        v12 = cf;
        cf = 0;
        if (v12)
          CFRelease(v12);
      }
      objc_msgSend((id)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1), "completeCouponCodeChange:", v6);
      if (v6)
        CFRelease(v6);
    }
    else
    {
LABEL_27:
      __break(1u);
    }
  }
  else
  {
    objc_msgSend((id)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1), "completeCouponCodeChange:", 0);
  }
}

void sub_1970072BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  const void *v10;

  if (cf)
    CFRelease(cf);
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PaymentAuthorizationViewController::PaymentAuthorizationViewController(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WKPaymentAuthorizationViewControllerDelegate *v5;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)a1 = off_1E34B68B8;
  *(_QWORD *)(a1 + 24) = objc_msgSend(objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E0DCE2C0])()), "initWithPaymentRequest:", a3);
  v5 = -[WKPaymentAuthorizationViewControllerDelegate initWithRequest:presenter:]([WKPaymentAuthorizationViewControllerDelegate alloc], "initWithRequest:presenter:", a3, a1);
  *(_QWORD *)(a1 + 32) = v5;
  objc_msgSend(*(id *)(a1 + 24), "setDelegate:", v5);
  objc_msgSend(*(id *)(a1 + 24), "setPrivateDelegate:", *(_QWORD *)(a1 + 32));
  return a1;
}

void sub_197007484(_Unwind_Exception *a1, void *a2)
{
  unsigned int **v2;
  uint64_t v3;
  const void *v5;
  const void *v6;

  v5 = *(const void **)(v3 + 32);
  *(_QWORD *)(v3 + 32) = 0;
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(v3 + 24);
  *(_QWORD *)(v3 + 24) = 0;
  if (v6)
    CFRelease(v6);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PaymentAuthorizationViewController::platformDelegate(WebKit::PaymentAuthorizationViewController *this)
{
  return *((_QWORD *)this + 4);
}

void WebKit::PaymentAuthorizationViewController::dismiss(id *this)
{
  id v2;
  id v3;

  objc_msgSend((id)objc_msgSend(this[3], "presentingViewController"), "dismissViewControllerAnimated:completion:", 1, 0);
  objc_msgSend(this[3], "setDelegate:", 0);
  objc_msgSend(this[3], "setPrivateDelegate:", 0);
  v2 = this[3];
  this[3] = 0;
  if (v2)
    CFRelease(v2);
  objc_msgSend(this[4], "invalidate");
  v3 = this[4];
  this[4] = 0;
  if (v3)
    CFRelease(v3);
}

uint64_t WebKit::PaymentAuthorizationViewController::present(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a2 && (v4 = *(_QWORD *)(a1 + 24)) != 0)
  {
    objc_msgSend(a2, "presentViewController:animated:completion:", v4, 1, 0);
    v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, 1);
  }
  else
  {
    v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

void sub_1970075C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_19700765C(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_19700777C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_19700786C(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  _Block_release(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_197007954(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  _Block_release(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_197007A88(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_197007BC8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_197007D08(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_19700808C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11)
{
  WebCore::Payment::~Payment((WebCore::Payment *)&a11);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

void sub_197008154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  if (a9)
    CFRelease(a9);
  _Unwind_Resume(exception_object);
}

void sub_19700820C(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970082B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1970083D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11)
{
  WebCore::PaymentMethod::~PaymentMethod((WebCore::PaymentMethod *)&a11);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

void sub_1970084D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11)
{
  WebCore::PaymentContact::~PaymentContact((WebCore::PaymentContact *)&a11);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

void sub_1970087C8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, WTF::StringImpl *a13, WTF::StringImpl *a14, WTF::StringImpl *a15, WTF::StringImpl *a16)
{
  if (a16)
  {
    if (*(_DWORD *)a16 == 2)
      WTF::StringImpl::destroy(a16, a2);
    else
      *(_DWORD *)a16 -= 2;
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, a2);
    else
      *(_DWORD *)a15 -= 2;
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, a2);
    else
      *(_DWORD *)a14 -= 2;
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_197008A14(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_197008B10(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebKit33LinkDecorationFilteringController14observeUpdatesEON3WTF8FunctionIFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E34B6B30;
  v2[1] = v1;
  v4 = v2;
  WebKit::LinkDecorationFilteringController::updateStrings(v1, (uint64_t *)&v4);
  result = (uint64_t)v4;
  v4 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_197008D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void WebKit::requestLinkDecorationFilteringData(char *a1)
{
  uint64_t v2;
  int v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[2];

  if (!PAL::WebPrivacyLibrary((PAL *)1))
    goto LABEL_14;
  if ((byte_1EE3415E9 & 1) != 0)
  {
    if (_MergedGlobals_16)
      goto LABEL_4;
LABEL_14:
    v12[0] = 0;
    v12[1] = 0;
    v10 = *(_QWORD *)a1;
    *(_QWORD *)a1 = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v10 + 16))(v10, v12);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, v11);
    return;
  }
  v9 = objc_msgSend((id)((uint64_t (*)(void))*MEMORY[0x1E0DCDF70])(), "instancesRespondToSelector:", sel_requestAllowedLinkFilteringData_completionHandler_);
  _MergedGlobals_16 = v9;
  byte_1EE3415E9 = 1;
  if (!v9)
    goto LABEL_14;
LABEL_4:
  if ((byte_1EE3415EA & 1) != 0)
  {
    v2 = dword_1EE3416AC;
    if (dword_1EE3416AC == dword_1EE3416A8)
    {
      a1 = WTF::Vector<WTF::CompletionHandler<void ()(WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(dword_1EE3416AC + 1, a1);
      v3 = dword_1EE3416AC;
      v4 = (uint64_t *)(qword_1EE3416A0 + 8 * dword_1EE3416AC);
      goto LABEL_10;
    }
    v5 = (uint64_t *)qword_1EE3416A0;
    v3 = dword_1EE3416AC;
  }
  else
  {
    v2 = 0;
    v3 = 0;
    v5 = &qword_1EE3416B0;
    qword_1EE3416A0 = (uint64_t)&qword_1EE3416B0;
    *(_QWORD *)&dword_1EE3416A8 = 1;
    byte_1EE3415EA = 1;
  }
  v4 = &v5[v2];
LABEL_10:
  v6 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  *v4 = v6;
  dword_1EE3416AC = v3 + 1;
  if ((v3 + 1) <= 1)
  {
    v7 = (void *)objc_msgSend(objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E0DCE130])()), "init");
    v8 = objc_msgSend(v7, "setAfterUpdates:", 0);
    objc_msgSend((id)objc_msgSend((id)((uint64_t (*)(uint64_t))*MEMORY[0x1E0DCDF70])(v8), "sharedInstance"), "requestAllowedLinkFilteringData:completionHandler:", v7, &__block_literal_global_11);
    if (v7)
      CFRelease(v7);
  }
}

void sub_197008F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  void *v12;

  v10 = v9;
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v12);
  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebKit34StorageAccessPromptQuirkController14observeUpdatesEON3WTF8FunctionIFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E34B6B80;
  v2[1] = v1;
  v4 = v2;
  WebKit::StorageAccessPromptQuirkController::updateQuirks(v1, (uint64_t *)&v4);
  result = (uint64_t)v4;
  v4 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_197008FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void WebKit::StorageAccessPromptQuirkController::updateQuirks(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t (**v5)(uint64_t);
  uint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  _QWORD v14[5];
  uint64_t v15;

  v4 = PAL::WebPrivacyLibrary((PAL *)1);
  if (v4)
  {
    v5 = (uint64_t (**)(uint64_t))MEMORY[0x1E0DCDF70];
    v4 = objc_msgSend((id)((uint64_t (*)(void))*MEMORY[0x1E0DCDF70])(), "instancesRespondToSelector:", sel_requestStorageAccessPromptQuirksData_completionHandler_);
    if ((v4 & 1) != 0)
    {
      if ((byte_1EE3415EB & 1) != 0)
      {
        v6 = dword_1EE3416C4;
        if (dword_1EE3416C4 == dword_1EE3416C0)
        {
          a2 = (uint64_t *)WTF::Vector<WTF::CompletionHandler<void ()(void)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&qword_1EE3416B8, dword_1EE3416C4 + 1, (unint64_t)a2);
          v7 = dword_1EE3416C4;
          v8 = (uint64_t *)(qword_1EE3416B8 + 8 * dword_1EE3416C4);
          goto LABEL_10;
        }
        v10 = (uint64_t *)qword_1EE3416B8;
        v7 = dword_1EE3416C4;
      }
      else
      {
        v6 = 0;
        v7 = 0;
        v10 = &qword_1EE3416C8;
        qword_1EE3416B8 = (uint64_t)&qword_1EE3416C8;
        *(_QWORD *)&dword_1EE3416C0 = 1;
        byte_1EE3415EB = 1;
      }
      v8 = &v10[v6];
LABEL_10:
      v11 = *a2;
      *a2 = 0;
      *v8 = v11;
      dword_1EE3416C4 = v7 + 1;
      if ((v7 + 1) <= 1)
      {
        v12 = (void *)objc_msgSend(objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E0DCE130])()), "init");
        v13 = (void *)objc_msgSend((id)(*v5)(objc_msgSend(v12, "setAfterUpdates:", 0)), "sharedInstance");
        v14[0] = MEMORY[0x1E0C809B0];
        v14[1] = 3221225472;
        v14[2] = ___ZN6WebKit34StorageAccessPromptQuirkController12updateQuirksEON3WTF17CompletionHandlerIFvvEEE_block_invoke;
        v14[3] = &__block_descriptor_40_e53_v24__0__WPStorageAccessPromptQuirksData_8__NSError_16l;
        v14[4] = a1;
        objc_msgSend(v13, "requestStorageAccessPromptQuirksData:completionHandler:", v12, v14);
        if (v12)
          CFRelease(v12);
      }
      return;
    }
  }
  WTF::RunLoop::main((WTF::RunLoop *)v4);
  WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v15, a2);
  WTF::RunLoop::dispatch();
  v9 = v15;
  v15 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

void sub_1970091A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  const void *v14;

  if (v14)
    CFRelease(v14);
  _Unwind_Resume(exception_object);
}

void WebKit::StorageAccessPromptQuirkController::setCachedQuirks(unsigned int *a1, _DWORD *a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF *v10;
  uint64_t v11;
  unint64_t v12;
  NSObject *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = a1 + 2;
  v5 = a1[5];
  if ((_DWORD)v5)
  {
    v6 = 32 * v5;
    v7 = *(_QWORD *)v4 + 16;
    do
    {
      WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v7, a2);
      v8 = *(_QWORD *)(v7 - 8);
      if (v8)
        WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v8, a2);
      v9 = *(WTF::StringImpl **)(v7 - 16);
      *(_QWORD *)(v7 - 16) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      v7 += 32;
      v6 -= 32;
    }
    while (v6);
  }
  v10 = *(WTF **)v4;
  if (*(_QWORD *)v4)
  {
    *((_QWORD *)a1 + 1) = 0;
    a1[4] = 0;
    WTF::fastFree(v10, a2);
  }
  v11 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a1 + 1) = v11;
  LODWORD(v11) = a2[2];
  a2[2] = 0;
  a1[4] = v11;
  v12 = a2[3];
  a2[3] = 0;
  a1[5] = v12;
  WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v4, v12);
  v13 = qword_1ECE71758;
  if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_DEFAULT))
  {
    v14 = a1[5];
    v15 = 134217984;
    v16 = v14;
    _os_log_impl(&dword_196BCC000, v13, OS_LOG_TYPE_DEFAULT, "StorageAccessPromptQuirkController::setCachedQuirks: Loaded %lu storage access prompt(s) quirks from WebPrivacy.", (uint8_t *)&v15, 0xCu);
  }
}

uint64_t WebKit::StorageAccessPromptQuirkController::setCachedQuirksForTesting(uint64_t a1, _DWORD *a2)
{
  _QWORD *v3;
  uint64_t result;
  _QWORD *v5;

  *(_BYTE *)(a1 + 40) = 1;
  WebKit::StorageAccessPromptQuirkController::setCachedQuirks((unsigned int *)a1, a2);
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E34B6BD0;
  v5 = v3;
  WTF::WeakHashSet<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t *)(a1 + 24), &v5);
  result = (uint64_t)v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1970093AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::WeakHashSet<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(uint64_t *a1, _QWORD *a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;

  WTF::map<0ul,WTF::CrashOnOverflow,16ul,WTF::WeakHashSet<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WebKit::StorageAccessPromptQuirkObserver&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1},WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>((_QWORD **)a1, &v8);
  if (v9)
  {
    v5 = v8;
    v6 = 8 * v9;
    do
    {
      if (*v5)
      {
        if (*(_QWORD *)(*v5 + 8))
        {
          v10 = *v5;
          if (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(a1, &v10))(*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *(_QWORD *)(*v5 + 8));
        }
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  return WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v4);
}

void sub_19700946C(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

_BYTE *WebKit::StorageAccessPromptQuirkController::initialize(_BYTE *this)
{
  uint64_t v1;
  _QWORD *v2;
  _BYTE *v3;

  if (!this[40])
  {
    v1 = (uint64_t)this;
    v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v2 = off_1E34B6BF8;
    v2[1] = v1;
    v3 = v2;
    WebKit::StorageAccessPromptQuirkController::updateQuirks(v1, (uint64_t *)&v3);
    this = v3;
    v3 = 0;
    if (this)
      this = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)this + 8))(this);
    *(_BYTE *)(v1 + 40) = 1;
  }
  return this;
}

void sub_1970094F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN6WebKit34StorageAccessPromptQuirkController12updateQuirksEON3WTF17CompletionHandlerIFvvEEE_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  unsigned int *v3;
  NSObject *v4;
  uint64_t (**v5)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  WTF::StringImpl *v28;
  void *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  WTF::StringImpl *v36;
  void *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v50;
  id obj;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67[5];
  __int128 v68;
  _OWORD v69[3];
  uint8_t v70[128];
  uint8_t buf[8];
  WTF::StringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned int **)(a1 + 32);
  v64 = 0;
  v65 = 0;
  if (!a3)
  {
    obj = (id)objc_msgSend(a2, "quirks");
    v5 = (uint64_t (**)(void))MEMORY[0x1E0DCE178];
    if (objc_msgSend((id)((uint64_t (*)(void))*MEMORY[0x1E0DCE178])(), "instancesRespondToSelector:", sel_quirkDomains))v6 = objc_msgSend((id)(*v5)(), "instancesRespondToSelector:", sel_triggerPages);
    else
      v6 = 0;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v60, v70, 16);
    if (!v7)
    {
LABEL_63:
      WebKit::StorageAccessPromptQuirkController::setCachedQuirks(v3, &v64);
      goto LABEL_64;
    }
    v8 = *(_QWORD *)v61;
LABEL_9:
    v9 = 0;
    v50 = v7;
    while (1)
    {
      if (*(_QWORD *)v61 != v8)
        objc_enumerationMutation(obj);
      v10 = *(void **)(*((_QWORD *)&v60 + 1) + 8 * v9);
      if ((_DWORD)v6)
      {
        MEMORY[0x19AEABCC8](&v55, objc_msgSend(*(id *)(*((_QWORD *)&v60 + 1) + 8 * v9), "name"));
        WebKit::quirkDomainsDictToMap(&v54, (void *)objc_msgSend(v10, "quirkDomains"));
        v11 = (void *)objc_msgSend(v10, "triggerPages");
        v12 = v6;
        v52 = 0;
        v53 = 0;
        v68 = 0u;
        memset(v69, 0, sizeof(v69));
        v14 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v68, buf, 16);
        if (v14)
        {
          v15 = **(_QWORD **)&v69[0];
          do
          {
            for (i = 0; i != v14; ++i)
            {
              if (**(_QWORD **)&v69[0] != v15)
                objc_enumerationMutation(v11);
              v17 = *(void **)(*((_QWORD *)&v68 + 1) + 8 * i);
              if ((objc_msgSend(v17, "isEqualToString:", CFSTR("*")) & 1) == 0)
              {
                MEMORY[0x19AEABCC8](&v66, v17);
                MEMORY[0x19AEABB0C](v67, &v66, 0);
                if (HIDWORD(v53) == (_DWORD)v53)
                {
                  WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::URL>((uint64_t)&v52, (unint64_t)v67);
                }
                else
                {
                  WTF::URL::URL(v52 + 40 * HIDWORD(v53), (uint64_t *)v67);
                  ++HIDWORD(v53);
                }
                v19 = v67[0];
                v67[0] = 0;
                if (v19)
                {
                  if (*(_DWORD *)v19 == 2)
                    WTF::StringImpl::destroy(v19, v18);
                  else
                    *(_DWORD *)v19 -= 2;
                }
                v20 = v66;
                v66 = 0;
                if (v20)
                {
                  if (*(_DWORD *)v20 == 2)
                    WTF::StringImpl::destroy(v20, v18);
                  else
                    *(_DWORD *)v20 -= 2;
                }
              }
            }
            v14 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v68, buf, 16);
          }
          while (v14);
        }
        v22 = v54;
        v21 = v55;
        v54 = 0;
        v55 = 0;
        v56 = v21;
        v57 = v22;
        v58 = v52;
        v23 = v53;
        v52 = 0;
        v53 = 0;
        v59 = v23;
        if (HIDWORD(v65) == (_DWORD)v65)
        {
          WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::OrganizationStorageAccessPromptQuirk>((uint64_t)&v64, (unint64_t)&v56);
        }
        else
        {
          v24 = v64 + 32 * HIDWORD(v65);
          v56 = 0;
          *(_QWORD *)v24 = v21;
          *(_QWORD *)(v24 + 8) = 0;
          v25 = v57;
          v57 = 0;
          *(_QWORD *)(v24 + 16) = 0;
          *(_QWORD *)(v24 + 24) = 0;
          *(_QWORD *)(v24 + 8) = v25;
          v26 = v58;
          v58 = 0;
          *(_QWORD *)(v24 + 16) = v26;
          LODWORD(v26) = v59;
          LODWORD(v59) = 0;
          *(_DWORD *)(v24 + 24) = v26;
          LODWORD(v26) = HIDWORD(v59);
          HIDWORD(v59) = 0;
          *(_DWORD *)(v24 + 28) = v26;
          ++HIDWORD(v65);
        }
        WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58, v13);
        v6 = v12;
        if (v57)
          WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v57, v27);
        v28 = v56;
        v56 = 0;
        v7 = v50;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v27);
          else
            *(_DWORD *)v28 -= 2;
        }
        WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v52, v27);
        if (v54)
          WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v54, v37);
        v38 = v55;
        v55 = 0;
        if (!v38)
          goto LABEL_58;
      }
      else
      {
        MEMORY[0x19AEABCC8](v67, objc_msgSend(*(id *)(*((_QWORD *)&v60 + 1) + 8 * v9), "name"));
        WebKit::quirkDomainsDictToMap((uint64_t *)&v56, (void *)objc_msgSend(v10, "domainPairings"));
        v30 = v67[0];
        v67[0] = 0;
        v31 = v56;
        v56 = 0;
        *(_QWORD *)buf = v30;
        v72 = v31;
        v68 = 0uLL;
        v73 = 0;
        v74 = 0;
        if (HIDWORD(v65) == (_DWORD)v65)
        {
          WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::OrganizationStorageAccessPromptQuirk>((uint64_t)&v64, (unint64_t)buf);
        }
        else
        {
          v32 = v64 + 32 * HIDWORD(v65);
          *(_QWORD *)buf = 0;
          *(_QWORD *)v32 = v30;
          *(_QWORD *)(v32 + 8) = 0;
          v33 = (uint64_t)v72;
          v72 = 0;
          *(_QWORD *)(v32 + 16) = 0;
          *(_QWORD *)(v32 + 24) = 0;
          *(_QWORD *)(v32 + 8) = v33;
          v34 = v73;
          v73 = 0;
          *(_QWORD *)(v32 + 16) = v34;
          LODWORD(v34) = v74;
          LODWORD(v74) = 0;
          *(_DWORD *)(v32 + 24) = v34;
          LODWORD(v34) = HIDWORD(v74);
          HIDWORD(v74) = 0;
          *(_DWORD *)(v32 + 28) = v34;
          ++HIDWORD(v65);
        }
        WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v73, v29);
        if (v72)
          WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable((uint64_t)v72, v35);
        v36 = *(WTF::StringImpl **)buf;
        *(_QWORD *)buf = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
            WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v35);
          else
            *(_DWORD *)v36 -= 2;
        }
        WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v68, v35);
        if (v56)
          WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable((uint64_t)v56, v37);
        v38 = v67[0];
        v67[0] = 0;
        if (!v38)
          goto LABEL_58;
      }
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v37);
      else
        *(_DWORD *)v38 -= 2;
LABEL_58:
      if (++v9 == v7)
      {
        v39 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v60, v70, 16);
        v7 = v39;
        if (!v39)
          goto LABEL_63;
        goto LABEL_9;
      }
    }
  }
  v4 = qword_1ECE71758;
  if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "Failed to request storage access quirks from WebPrivacy.", buf, 2u);
  }
LABEL_64:
  *(_QWORD *)&v68 = v69;
  *((_QWORD *)&v68 + 1) = 1;
  WTF::VectorBuffer<WTF::CompletionHandler<void ()(void)>,1ul,WTF::FastMalloc>::VectorBuffer((uint64_t)buf, (uint64_t)&qword_1EE3416B8);
  if (dword_1EE3416C4)
  {
    v40 = (uint64_t *)qword_1EE3416B8;
    v41 = 8 * dword_1EE3416C4;
    do
    {
      v42 = *v40;
      *v40 = 0;
      if (v42)
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
      ++v40;
      v41 -= 8;
    }
    while (v41);
  }
  WTF::VectorBuffer<WTF::CompletionHandler<void ()(void)>,1ul,WTF::FastMalloc>::adopt((uint64_t)&qword_1EE3416B8, &v68);
  WTF::Vector<WTF::CompletionHandler<void ()(void)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v68, v43);
  if (HIDWORD(v72))
  {
    v45 = *(WTF::StringImpl **)buf;
    v46 = 8 * HIDWORD(v72);
    do
    {
      v47 = *(_QWORD *)v45;
      *(_QWORD *)v45 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 16))(v47);
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
      v45 = (WTF::StringImpl *)((char *)v45 + 8);
      v46 -= 8;
    }
    while (v46);
  }
  WTF::Vector<WTF::CompletionHandler<void ()(void)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v44);
  return WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v64, v48);
}

void sub_197009B30(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,WTF::StringImpl *a33,WTF::StringImpl *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a31, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::quirkDomainsDictToMap(uint64_t *a1, void *a2)
{
  void *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  id obj;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[128];
  _BYTE v42[128];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  v3 = (void *)objc_msgSend(a2, "allKeys");
  v39 = 0u;
  v40 = 0u;
  v38 = 0u;
  v37 = 0u;
  result = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v37, v42, 16);
  v5 = result;
  if (result)
  {
    v6 = *(_QWORD *)v38;
    obj = v3;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v38 != v6)
          objc_enumerationMutation(obj);
        v8 = *(_QWORD *)(*((_QWORD *)&v37 + 1) + 8 * v7);
        v35 = 0;
        v36 = 0;
        v31 = 0u;
        v32 = 0u;
        v33 = 0u;
        v34 = 0u;
        v9 = (void *)objc_msgSend(a2, "objectForKey:", v8);
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v31, v41, 16);
        if (v10)
        {
          v11 = *(_QWORD *)v32;
          do
          {
            v12 = 0;
            do
            {
              if (*(_QWORD *)v32 != v11)
                objc_enumerationMutation(v9);
              MEMORY[0x19AEABCC8](&v29, *(_QWORD *)(*((_QWORD *)&v31 + 1) + 8 * v12));
              v14 = v29;
              if (v29 && *((_DWORD *)v29 + 1))
              {
                v29 = 0;
              }
              else
              {
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v14 = v28;
              }
              v30 = v14;
              LODWORD(v15) = HIDWORD(v36);
              if (HIDWORD(v36) == (_DWORD)v36)
              {
                v18 = (uint64_t *)WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v35, HIDWORD(v36) + 1, (unint64_t)&v30);
                v15 = HIDWORD(v36);
                v19 = v35;
                v20 = *v18;
                *v18 = 0;
                *(_QWORD *)(v19 + 8 * v15) = v20;
              }
              else
              {
                v30 = 0;
                *(_QWORD *)(v35 + 8 * HIDWORD(v36)) = v14;
              }
              HIDWORD(v36) = v15 + 1;
              v16 = v30;
              v30 = 0;
              if (v16)
              {
                if (*(_DWORD *)v16 == 2)
                  WTF::StringImpl::destroy(v16, v13);
                else
                  *(_DWORD *)v16 -= 2;
              }
              v17 = v29;
              v29 = 0;
              if (v17)
              {
                if (*(_DWORD *)v17 == 2)
                  WTF::StringImpl::destroy(v17, v13);
                else
                  *(_DWORD *)v17 -= 2;
              }
              ++v12;
            }
            while (v10 != v12);
            v21 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v31, v41, 16);
            v10 = v21;
          }
          while (v21);
        }
        MEMORY[0x19AEABCC8](&v29, v8);
        v22 = v29;
        if (v29 && *((_DWORD *)v29 + 1))
        {
          v29 = 0;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v22 = v28;
        }
        v30 = v22;
        WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, &v30, &v35, (uint64_t)&v28);
        v24 = v30;
        v30 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v23);
          else
            *(_DWORD *)v24 -= 2;
        }
        v25 = v29;
        v29 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v23);
          else
            *(_DWORD *)v25 -= 2;
        }
        WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, v23);
        ++v7;
      }
      while (v7 != v5);
      result = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v42, 16);
      v5 = result;
    }
    while (result);
  }
  return result;
}

void sub_197009FF0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (*a11)
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(*a11, a2);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN6WebKit43StorageAccessUserAgentStringQuirkController14observeUpdatesEON3WTF8FunctionIFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E34B6C48;
  v2[1] = v1;
  v4 = v2;
  WebKit::StorageAccessUserAgentStringQuirkController::updateQuirks(v1, (uint64_t *)&v4);
  result = (uint64_t)v4;
  v4 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19700A0FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void WebKit::StorageAccessUserAgentStringQuirkController::updateQuirks(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t (**v5)(uint64_t);
  uint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  _QWORD v14[5];
  uint64_t v15;

  v4 = PAL::WebPrivacyLibrary((PAL *)1);
  if (v4)
  {
    v5 = (uint64_t (**)(uint64_t))MEMORY[0x1E0DCDF70];
    v4 = objc_msgSend((id)((uint64_t (*)(void))*MEMORY[0x1E0DCDF70])(), "instancesRespondToSelector:", sel_requestStorageAccessUserAgentStringQuirksData_completionHandler_);
    if ((v4 & 1) != 0)
    {
      if ((byte_1EE3415EC & 1) != 0)
      {
        v6 = dword_1EE3416DC;
        if (dword_1EE3416DC == dword_1EE3416D8)
        {
          a2 = (uint64_t *)WTF::Vector<WTF::CompletionHandler<void ()(void)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&qword_1EE3416D0, dword_1EE3416DC + 1, (unint64_t)a2);
          v7 = dword_1EE3416DC;
          v8 = (uint64_t *)(qword_1EE3416D0 + 8 * dword_1EE3416DC);
          goto LABEL_10;
        }
        v10 = (uint64_t *)qword_1EE3416D0;
        v7 = dword_1EE3416DC;
      }
      else
      {
        v6 = 0;
        v7 = 0;
        v10 = &qword_1EE3416E0;
        qword_1EE3416D0 = (uint64_t)&qword_1EE3416E0;
        *(_QWORD *)&dword_1EE3416D8 = 1;
        byte_1EE3415EC = 1;
      }
      v8 = &v10[v6];
LABEL_10:
      v11 = *a2;
      *a2 = 0;
      *v8 = v11;
      dword_1EE3416DC = v7 + 1;
      if ((v7 + 1) <= 1)
      {
        v12 = (void *)objc_msgSend(objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E0DCE130])()), "init");
        v13 = (void *)objc_msgSend((id)(*v5)(objc_msgSend(v12, "setAfterUpdates:", 0)), "sharedInstance");
        v14[0] = MEMORY[0x1E0C809B0];
        v14[1] = 3221225472;
        v14[2] = ___ZN6WebKit43StorageAccessUserAgentStringQuirkController12updateQuirksEON3WTF17CompletionHandlerIFvvEEE_block_invoke;
        v14[3] = &__block_descriptor_40_e62_v24__0__WPStorageAccessUserAgentStringQuirksData_8__NSError_16l;
        v14[4] = a1;
        objc_msgSend(v13, "requestStorageAccessUserAgentStringQuirksData:completionHandler:", v12, v14);
        if (v12)
          CFRelease(v12);
      }
      return;
    }
  }
  WTF::RunLoop::main((WTF::RunLoop *)v4);
  WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v15, a2);
  WTF::RunLoop::dispatch();
  v9 = v15;
  v15 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

void sub_19700A2DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  const void *v14;

  if (v14)
    CFRelease(v14);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::StorageAccessUserAgentStringQuirkController::setCachedQuirksForTesting(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;

  v3 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v4 = *(WTF::StringImpl ***)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  if (v4)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = off_1E34B6C98;
  v7 = v5;
  WTF::WeakHashSet<WebKit::StorageAccessUserAgentStringQuirkObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t *)(a1 + 16), &v7);
  result = (uint64_t)v7;
  v7 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_BYTE *)(a1 + 32) = 1;
  return result;
}

void sub_19700A39C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::WeakHashSet<WebKit::StorageAccessUserAgentStringQuirkObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(uint64_t *a1, _QWORD *a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;

  WTF::map<0ul,WTF::CrashOnOverflow,16ul,WTF::WeakHashSet<WebKit::StorageAccessUserAgentStringQuirkObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WebKit::StorageAccessUserAgentStringQuirkObserver&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1},WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>((_QWORD **)a1, &v8);
  if (v9)
  {
    v5 = v8;
    v6 = 8 * v9;
    do
    {
      if (*v5)
      {
        if (*(_QWORD *)(*v5 + 8))
        {
          v10 = *v5;
          if (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(a1, &v10))(*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *(_QWORD *)(*v5 + 8));
        }
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  return WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v4);
}

void sub_19700A45C(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

_BYTE *WebKit::StorageAccessUserAgentStringQuirkController::initialize(_BYTE *this)
{
  uint64_t v1;
  _QWORD *v2;
  _BYTE *v3;

  if (!this[32])
  {
    v1 = (uint64_t)this;
    v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v2 = off_1E34B6CC0;
    v2[1] = v1;
    v3 = v2;
    WebKit::StorageAccessUserAgentStringQuirkController::updateQuirks(v1, (uint64_t *)&v3);
    this = v3;
    v3 = 0;
    if (this)
      this = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)this + 8))(this);
    *(_BYTE *)(v1 + 32) = 1;
  }
  return this;
}

void sub_19700A4E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_19700A984(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,WTF::StringImpl **a30)
{
  if (a30)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(a30, a2);
  _Unwind_Resume(exception_object);
}

WebKit::RestrictedOpenerDomainsController *WebKit::RestrictedOpenerDomainsController::RestrictedOpenerDomainsController(WebKit::RestrictedOpenerDomainsController *this)
{
  __uint64_t v2;
  void *v3;
  const void *v4;
  _QWORD v6[5];

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v2 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW_APPROX);
  WebKit::RestrictedOpenerDomainsController::scheduleNextUpdate(this, v2);
  WebKit::RestrictedOpenerDomainsController::update(this);
  v3 = (void *)objc_opt_new();
  v4 = *(const void **)this;
  *(_QWORD *)this = v3;
  if (v4)
  {
    CFRelease(v4);
    v3 = *(void **)this;
  }
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___ZN6WebKit33RestrictedOpenerDomainsControllerC2Ev_block_invoke;
  v6[3] = &__block_descriptor_40_e5_v8__0l;
  v6[4] = this;
  objc_msgSend(v3, "listenForRestrictedOpenerDomainsChanges:", v6);
  return this;
}

void sub_19700AAF0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl **v4;
  const void *v5;

  v4 = *(WTF::StringImpl ***)(v2 + 8);
  if (v4)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  v5 = *(const void **)v2;
  *(_QWORD *)v2 = 0;
  if (v5)
    CFRelease(v5);
  _Unwind_Resume(exception_object);
}

double WebKit::RestrictedOpenerDomainsController::scheduleNextUpdate(WebKit::RestrictedOpenerDomainsController *this, uint64_t a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  double result;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  WebKit::RestrictedOpenerDomainsController *v12;

  v2 = &_MergedGlobals_106;
  v3 = &_MergedGlobals_106;
  {
    v4 = WebKit::RestrictedOpenerDomainsController::scheduleNextUpdate(unsigned long long)::random;
    v5 = WebKit::RestrictedOpenerDomainsController::scheduleNextUpdate(unsigned long long)::random ^ (WebKit::RestrictedOpenerDomainsController::scheduleNextUpdate(unsigned long long)::random << 23);
    v6 = v5 >> 17;
  }
  else
  {
    v11 = a2;
    v12 = this;
    v9 = WTF::cryptographicallyRandomNumber<unsigned int>();
    a2 = v11;
    this = v12;
    if (v9 <= 1)
      v10 = 1;
    else
      v10 = v9;
    v2 = &_MergedGlobals_106;
    v3 = &_MergedGlobals_106;
    v5 = v10 ^ (v10 << 23);
    v6 = v5 >> 17;
    v4 = ((v10 >> 26) | (v10 << 23)) ^ (v5 >> 17);
  }
  *((_QWORD *)v2 + 186) = v4;
  v7 = v5 ^ v6 ^ (v4 >> 26) ^ v4;
  *((_QWORD *)v3 + 187) = v7;
  result = (double)((v7 + v4) & 0x1FFFFFFFFFFFFFLL) * 1.11022302e-16 * 7.2e12;
  *((_QWORD *)this + 2) = a2 + 86400000000000 + (uint64_t)result;
  return result;
}

void WebKit::RestrictedOpenerDomainsController::update(WebKit::RestrictedOpenerDomainsController *this)
{
  uint64_t (**v2)(uint64_t);
  void *v3;
  void *v4;
  _QWORD v5[5];

  if (PAL::WebPrivacyLibrary((PAL *)1))
  {
    v2 = (uint64_t (**)(uint64_t))MEMORY[0x1E0DCDF70];
    if (objc_msgSend((id)((uint64_t (*)(void))*MEMORY[0x1E0DCDF70])(), "instancesRespondToSelector:", sel_requestRestrictedOpenerDomains_completionHandler_))
    {
      v3 = (void *)objc_msgSend(objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E0DCE130])()), "init");
      v4 = (void *)objc_msgSend((id)(*v2)(objc_msgSend(v3, "setAfterUpdates:", 0)), "sharedInstance");
      v5[0] = MEMORY[0x1E0C809B0];
      v5[1] = 3221225472;
      v5[2] = ___ZN6WebKit33RestrictedOpenerDomainsController6updateEv_block_invoke;
      v5[3] = &__block_descriptor_40_e29_v24__0__NSArray_8__NSError_16l;
      v5[4] = this;
      objc_msgSend(v4, "requestRestrictedOpenerDomains:completionHandler:", v3, v5);
      if (v3)
        CFRelease(v3);
    }
  }
}

void sub_19700ACC8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void ___ZN6WebKit33RestrictedOpenerDomainsControllerC2Ev_block_invoke(uint64_t a1)
{
  WebKit::RestrictedOpenerDomainsController::update(*(WebKit::RestrictedOpenerDomainsController **)(a1 + 32));
}

void ___ZN6WebKit33RestrictedOpenerDomainsController6updateEv_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v3;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  double v10;
  double v11;
  double v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  const WTF::StringImpl *v21;
  char v22;
  WTF::StringImpl **v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  const WTF::StringImpl *v27;
  const WTF::StringImpl *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  WTF::StringImpl *v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl **v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  id obj;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  WTF::StringImpl **Table;
  uint8_t buf[16];
  _BYTE v53[128];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v3 = qword_1ECE71758;
    if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_196BCC000, v3, OS_LOG_TYPE_ERROR, "Failed to request restricted opener domains from WebPrivacy", buf, 2u);
    }
    return;
  }
  v5 = *(_QWORD *)(a1 + 32);
  Table = 0;
  v6 = objc_msgSend(a2, "count");
  v7 = (v6 - 1) | ((v6 - 1) >> 1) | (((v6 - 1) | ((v6 - 1) >> 1)) >> 2);
  v8 = v7 | (v7 >> 4) | ((v7 | (v7 >> 4)) >> 8);
  v9 = (v8 | HIWORD(v8)) + 1;
  if (v9 > 0x400)
  {
    if (v9 > 2 * (unint64_t)v6)
      goto LABEL_10;
  }
  else if (3 * v9 > 4 * (unint64_t)v6)
  {
LABEL_8:
    v10 = (double)v6;
    v11 = (double)v9;
    v12 = 0.604166667;
    goto LABEL_11;
  }
  LODWORD(v9) = 2 * v9;
  if (v9 <= 0x400)
    goto LABEL_8;
LABEL_10:
  v10 = (double)v6;
  v11 = (double)v9;
  v12 = 0.416666667;
LABEL_11:
  if (v11 * v12 <= v10)
    LODWORD(v9) = 2 * v9;
  if (v9 <= 8)
    v13 = 8;
  else
    v13 = v9;
  v42 = v5;
  Table = (WTF::StringImpl **)WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::allocateTable(v13);
  *((_DWORD *)Table - 1) = v13;
  *((_DWORD *)Table - 2) = v13 - 1;
  *((_DWORD *)Table - 4) = 0;
  *((_DWORD *)Table - 3) = 0;
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v15 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v47, v53, 16);
  if (v15)
  {
    obj = a2;
    v44 = *(_QWORD *)v48;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v48 != v44)
          objc_enumerationMutation(obj);
        v17 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * v16);
        MEMORY[0x19AEABCC8](&v45, objc_msgSend(v17, "domain"));
        v19 = v45;
        if (v45 && *((_DWORD *)v45 + 1))
        {
          v46 = v45;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v19 = *(WTF::StringImpl **)buf;
          v33 = v45;
          v45 = 0;
          v46 = *(WTF::StringImpl **)buf;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
            {
              WTF::StringImpl::destroy(v33, v18);
              v19 = v46;
              if (!v46)
                goto LABEL_54;
              goto LABEL_24;
            }
            *(_DWORD *)v33 -= 2;
          }
          if (!v19)
            goto LABEL_54;
        }
LABEL_24:
        if (*((_DWORD *)v19 + 1) && (MEMORY[0x19AEABBCC]() & 1) == 0)
        {
          v20 = objc_msgSend(v17, "openerType");
          if (v20 == 1)
            v22 = 1;
          else
            v22 = 2 * (v20 == 2);
          v23 = Table;
          if (Table
            || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand((uint64_t *)&Table, 0), (v23 = Table) != 0))
          {
            v24 = *((_DWORD *)v23 - 2);
          }
          else
          {
            v24 = 0;
          }
          v25 = WTF::ASCIICaseInsensitiveHash::hash(v46, v21) & v24;
          v26 = (uint64_t)&v23[2 * v25];
          if ((WTF::equal(*(WTF **)v26, 0, v27) & 1) != 0)
          {
LABEL_39:
            WTF::String::operator=((WTF::StringImpl **)v26, (WTF::StringImpl *)&v46);
            *(_BYTE *)(v26 + 8) = v22;
            if (Table)
              v32 = *((_DWORD *)Table - 3) + 1;
            else
              v32 = 1;
            *((_DWORD *)Table - 3) = v32;
            if (Table)
              v34 = *((_DWORD *)Table - 3);
            else
              v34 = 0;
            v35 = (*((_DWORD *)Table - 4) + v34);
            v36 = *((unsigned int *)Table - 1);
            if (v36 <= 0x400)
            {
              if (3 * v36 > 4 * v35)
                goto LABEL_54;
LABEL_52:
              WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand((uint64_t *)&Table, v26);
              goto LABEL_54;
            }
            if (v36 <= 2 * v35)
              goto LABEL_52;
          }
          else
          {
            v29 = 0;
            v30 = 1;
            while (1)
            {
              v31 = v26;
              if (*(_QWORD *)v26 != -1)
              {
                v31 = v29;
                if ((WTF::equalIgnoringASCIICase(*(WTF **)v26, v46, v28) & 1) != 0)
                  break;
              }
              v25 = (v25 + v30) & v24;
              v26 = (uint64_t)&v23[2 * v25];
              ++v30;
              v29 = v31;
              if (WTF::equal(*(WTF **)v26, 0, v28))
              {
                if (v31)
                {
                  *(_QWORD *)v31 = 0;
                  *(_BYTE *)(v31 + 8) = 0;
                  --*((_DWORD *)Table - 4);
                  v26 = v31;
                }
                goto LABEL_39;
              }
            }
          }
        }
LABEL_54:
        v37 = v46;
        v46 = 0;
        if (v37)
        {
          if (*(_DWORD *)v37 == 2)
            WTF::StringImpl::destroy(v37, v18);
          else
            *(_DWORD *)v37 -= 2;
        }
        ++v16;
      }
      while (v16 != v15);
      v38 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v47, v53, 16);
      v15 = v38;
    }
    while (v38);
  }
  v39 = Table;
  Table = 0;
  v40 = *(WTF::StringImpl ***)(v42 + 8);
  *(_QWORD *)(v42 + 8) = v39;
  if (v40)
  {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v40, v14);
    if (Table)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(Table, v41);
  }
}

void sub_19700B11C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,WTF::StringImpl **a24)
{
  if (a24)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(a24, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::RestrictedOpenerDomainsController::lookup(WebKit::RestrictedOpenerDomainsController *this, WTF::ASCIICaseInsensitiveHash **a2)
{
  __uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW_APPROX);
  if (v4 > *((_QWORD *)this + 2))
  {
    WebKit::RestrictedOpenerDomainsController::scheduleNextUpdate(this, v4);
    WebKit::RestrictedOpenerDomainsController::update(this);
  }
  v5 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)this + 1, a2);
  v6 = *((_QWORD *)this + 1);
  if (v6)
    v6 += 16 * *(unsigned int *)(v6 - 4);
  if (v6 == v5)
    return 0;
  else
    return *(unsigned __int8 *)(v5 + 8);
}

void WebKit::configureForAdvancedPrivacyProtections(WebKit *this, NSURLSession *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void (*v7)(uint64_t, void *);
  int v8;
  void *v9;
  char v10;
  char **v11;
  char *v12;

  if ((byte_1EE3415EE & 1) != 0)
  {
    if (!byte_1EE3415ED)
      return;
  }
  else
  {
    v8 = objc_msgSend(MEMORY[0x1E0C92C98], "instancesRespondToSelector:", sel__networkContext);
    byte_1EE3415ED = v8;
    byte_1EE3415EE = 1;
    if (!v8)
      return;
  }
  v3 = -[WebKit _networkContext](this, "_networkContext");
  if (v3)
  {
    v4 = v3;
    v5 = atomic_load(&qword_1EE341640);
    if (v5 != -1)
    {
      v12 = &v10;
      v11 = &v12;
      std::__call_once(&qword_1EE341640, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::TrackerAddressLookupInfo::populateIfNeeded(void)::{lambda(void)#1} &&>>);
    }
    v6 = atomic_load(&qword_1EE341658);
    if (v6 != -1)
    {
      v12 = &v10;
      v11 = &v12;
      std::__call_once(&qword_1EE341658, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::TrackerDomainLookupInfo::populateIfNeeded(void)::{lambda(void)#1} &&>>);
    }
    if (byte_1EE3415F1 == 1)
    {
      v7 = (void (*)(uint64_t, void *))off_1EE341670;
      if (off_1EE341670)
LABEL_10:
        v7(v4, &__block_literal_global_187);
    }
    else
    {
      if (byte_1EE3415F2 == 1)
      {
        v9 = (void *)qword_1EE341678;
      }
      else
      {
        v9 = dlopen("/usr/lib/libnetwork.dylib", 2);
        qword_1EE341678 = (uint64_t)v9;
        byte_1EE3415F2 = 1;
      }
      v7 = (void (*)(uint64_t, void *))dlsym(v9, "nw_context_set_tracker_lookup_callback");
      off_1EE341670 = v7;
      byte_1EE3415F1 = 1;
      if (v7)
        goto LABEL_10;
    }
  }
}

uint64_t ___ZN6WebKit38configureForAdvancedPrivacyProtectionsEP12NSURLSession_block_invoke(int a1, nw_endpoint_t endpoint, const char **a3, _QWORD *a4, _BYTE *a5)
{
  sockaddr *address;
  void *v8;
  int sa_family;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  WebCore::IPAddress *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t result;
  const char *hostname;
  WTF::StringImpl *v25;
  const WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  char v31;
  WTF *v32;
  char v33;
  uint64_t v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  WTF *v42;
  int v43;
  unsigned int v44;
  int v45;
  _BYTE *v46;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51[2];
  int v52;
  char v53;
  WTF::StringImpl *v54;
  uint64_t v55[2];

  if (nw_endpoint_get_type(endpoint) == nw_endpoint_type_address)
  {
    address = (sockaddr *)nw_endpoint_get_address(endpoint);
    sa_family = address->sa_family;
    if (sa_family == 30)
    {
      *(sockaddr *)v51 = *(sockaddr *)&address->sa_data[6];
      v52 = 2;
      v53 = 1;
      WebKit::TrackerAddressLookupInfo::version6List((WebKit::TrackerAddressLookupInfo *)address, v8);
      v10 = &qword_1EE341690;
    }
    else
    {
      if (sa_family != 2)
        goto LABEL_31;
      LODWORD(v51[0]) = *(_DWORD *)&address->sa_data[2];
      v52 = 1;
      v53 = 1;
      WebKit::TrackerAddressLookupInfo::version4List((WebKit::TrackerAddressLookupInfo *)address, v8);
      v10 = &qword_1EE341680;
    }
    v11 = *((unsigned int *)v10 + 3);
    if ((_DWORD)v11)
    {
      v12 = *v10;
      if (WebCore::IPAddress::compare((uint64_t)v51, *v10) == 1)
      {
        v13 = 0;
        v14 = 0;
      }
      else
      {
        v14 = v11 - 1;
        if (WebCore::IPAddress::compare((uint64_t)v51, v12 + 48 * (v11 - 1)) == 3)
        {
          v13 = v11 - 1;
        }
        else
        {
          if (v14 >= 2)
          {
            v15 = v14 >> 1;
            if (v15 < v11)
            {
              v16 = (char *)&loc_19700B4C8
                  + *((int *)qword_19700B9B8 + WebCore::IPAddress::compare((uint64_t)v51, v12 + 48 * v15));
              __asm { BR              X9 }
            }
            __break(0xC471u);
            JUMPOUT(0x19700B8D8);
          }
          v13 = 0;
        }
      }
      if (v14 >= v11)
      {
        __break(0xC471u);
        JUMPOUT(0x19700B8E0);
      }
      if (WebCore::IPAddress::matchingNetMaskLength((WebCore::IPAddress *)(v12 + 48 * v14), (const WebCore::IPAddress *)v51) >= *(_DWORD *)(v12 + 48 * v14 + 20))
      {
        if (v14 >= *((unsigned int *)v10 + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x19700B8E8);
        }
LABEL_23:
        if (*v10)
        {
          v18 = *v10 + 48 * v14;
          v19 = *(_QWORD *)(v18 + 24);
          if (v19)
            v20 = v19 + 16;
          else
            v20 = 0;
          *a4 = v20;
          v21 = *(_QWORD *)(v18 + 32);
          if (v21)
            v22 = (const char *)(v21 + 16);
          else
            v22 = 0;
          *a3 = v22;
          *a5 = *(_BYTE *)(v18 + 40);
        }
        goto LABEL_31;
      }
      if (v14 != v13)
      {
        if (v13 >= *((unsigned int *)v10 + 3))
        {
LABEL_91:
          __break(0xC471u);
          JUMPOUT(0x19700B56CLL);
        }
        v17 = (WebCore::IPAddress *)(*v10 + 48 * v13);
        if (WebCore::IPAddress::matchingNetMaskLength(v17, (const WebCore::IPAddress *)v51) >= *((_DWORD *)v17 + 5))
        {
          v14 = v13;
          if (v13 >= *((unsigned int *)v10 + 3))
            goto LABEL_91;
          goto LABEL_23;
        }
      }
    }
  }
LABEL_31:
  result = nw_endpoint_get_type(endpoint);
  if ((_DWORD)result != 2)
    return result;
  hostname = nw_endpoint_get_hostname(endpoint);
  WTF::String::String((WTF::String *)&v49, hostname);
  v55[0] = (uint64_t)"http://";
  v55[1] = 8;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>(v55, (uint64_t *)&v49, &v50);
  if (!v50)
  {
    __break(0xC471u);
    JUMPOUT(0x19700B8D0);
  }
  MEMORY[0x19AEABB0C](v51, &v50, 0);
  WebCore::RegistrableDomain::RegistrableDomain(&v54, (const WTF::URL *)v51);
  v27 = v51[0];
  v51[0] = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v25);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = v50;
  v50 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v25);
    else
      *(_DWORD *)v28 -= 2;
  }
  v29 = v49;
  v49 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v25);
    else
      *(_DWORD *)v29 -= 2;
  }
  v30 = v54;
  if (v54)
    *(_DWORD *)v54 += 2;
  v31 = byte_1EE341668;
  if ((byte_1EE341668 & 1) == 0)
  {
    qword_1EE3416E8 = 0;
    *(_QWORD *)&dword_1EE3416F0 = 0;
    qword_1EE3416F8 = 0;
    v31 = 1;
    byte_1EE341668 = 1;
  }
  if ((unint64_t)v30 + 1 < 2)
    goto LABEL_50;
  if ((v31 & 1) == 0)
  {
    v32 = 0;
    v33 = 0;
    qword_1EE3416E8 = 0;
    *(_QWORD *)&dword_1EE3416F0 = 0;
    qword_1EE3416F8 = 0;
    byte_1EE341668 = 1;
    goto LABEL_51;
  }
  v34 = qword_1EE3416E8;
  if (!qword_1EE3416E8)
  {
LABEL_50:
    v32 = 0;
    v33 = 0;
    goto LABEL_51;
  }
  v35 = dword_1EE3416F0;
  v36 = qword_1EE3416F8;
  v37 = *((_DWORD *)v30 + 4);
  v46 = a5;
  if (v37 >= 0x100)
  {
    v38 = v37 >> 8;
  }
  else
  {
    v38 = WTF::StringImpl::hashSlowCase(v30);
    v34 = qword_1EE3416E8;
  }
  v39 = v35 - 1;
  v40 = (v38 ^ v36) & (v35 - 1);
  v41 = v34 + 24 * v40;
  v42 = *(WTF **)v41;
  if (*(_QWORD *)v41)
  {
    v43 = -1;
    while (1)
    {
      v44 = *((_DWORD *)v42 + 4);
      if (v44 >= 0x100)
        v45 = v44 >> 8;
      else
        v45 = WTF::StringImpl::hashSlowCase(v42);
      if (++v43 > ((v40 + v35 - ((v45 ^ v36) & v39)) & v39))
      {
LABEL_81:
        v32 = 0;
        v33 = 0;
        a5 = v46;
        goto LABEL_51;
      }
      if (v45 == v38 && (WTF::equal(*(WTF **)v41, v30, v26) & 1) != 0)
        break;
      v40 = (v40 + 1) & v39;
      v41 = qword_1EE3416E8 + 24 * v40;
      v42 = *(WTF **)v41;
      if (!*(_QWORD *)v41)
        goto LABEL_81;
    }
    v32 = *(WTF **)(v41 + 8);
    if (v32)
      ++*(_DWORD *)v32;
    v33 = *(_BYTE *)(v41 + 16);
    a5 = v46;
LABEL_51:
    if (!v30)
      goto LABEL_54;
    goto LABEL_52;
  }
  v33 = 0;
  v32 = 0;
  a5 = v46;
LABEL_52:
  if (*(_DWORD *)v30 == 2)
  {
    WTF::StringImpl::destroy(v30, v25);
    if (!v32)
      goto LABEL_62;
LABEL_57:
    if (*((_QWORD *)v32 + 1))
    {
      *a4 = (char *)v32 + 16;
      *a3 = hostname;
      *a5 = v33;
    }
    if (*(_DWORD *)v32 == 1)
      WTF::fastFree(v32, v25);
    else
      --*(_DWORD *)v32;
    goto LABEL_62;
  }
  *(_DWORD *)v30 -= 2;
LABEL_54:
  if (v32)
    goto LABEL_57;
LABEL_62:
  result = (uint64_t)v54;
  v54 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v25);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19700B8F4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20)
{
  WTF::StringImpl *v20;

  if (*(_DWORD *)v20 == 2)
    WTF::StringImpl::destroy(v20, a2);
  else
    *(_DWORD *)v20 -= 2;
  if (a20)
  {
    if (*(_DWORD *)a20 == 2)
      WTF::StringImpl::destroy(a20, a2);
    else
      *(_DWORD *)a20 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PaymentAuthorizationController::PaymentAuthorizationController(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WKPaymentAuthorizationControllerDelegate *v5;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)a1 = off_1E34B6A18;
  *(_QWORD *)(a1 + 24) = objc_msgSend(objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E0DCE230])()), "initWithPaymentRequest:", a3);
  v5 = -[WKPaymentAuthorizationControllerDelegate initWithRequest:presenter:]([WKPaymentAuthorizationControllerDelegate alloc], "initWithRequest:presenter:", a3, a1);
  *(_QWORD *)(a1 + 32) = v5;
  objc_msgSend(*(id *)(a1 + 24), "setDelegate:", v5);
  objc_msgSend(*(id *)(a1 + 24), "setPrivateDelegate:", *(_QWORD *)(a1 + 32));
  return a1;
}

void sub_19700BB5C(_Unwind_Exception *a1, void *a2)
{
  unsigned int **v2;
  uint64_t v3;
  const void *v5;
  const void *v6;

  v5 = *(const void **)(v3 + 32);
  *(_QWORD *)(v3 + 32) = 0;
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(v3 + 24);
  *(_QWORD *)(v3 + 24) = 0;
  if (v6)
    CFRelease(v6);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PaymentAuthorizationController::platformDelegate(WebKit::PaymentAuthorizationController *this)
{
  return *((_QWORD *)this + 4);
}

void WebKit::PaymentAuthorizationController::dismiss(id *this)
{
  id v2;
  id v3;

  objc_msgSend(this[3], "dismissWithCompletion:", 0);
  objc_msgSend(this[3], "setDelegate:", 0);
  objc_msgSend(this[3], "setPrivateDelegate:", 0);
  v2 = this[3];
  this[3] = 0;
  if (v2)
    CFRelease(v2);
  objc_msgSend(this[4], "invalidate");
  v3 = this[4];
  this[4] = 0;
  if (v3)
    CFRelease(v3);
}

void WebKit::PaymentAuthorizationController::present(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  void *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = *(void **)(a1 + 24);
  v4 = *a3;
  *a3 = 0;
  if (v3)
  {
    v5 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
    *v5 = MEMORY[0x1E0C809A0];
    v5[1] = 50331650;
    v5[2] = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::PaymentAuthorizationController::present(UIViewController *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::PaymentAuthorizationController::present(UIViewController *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke;
    v5[3] = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::PaymentAuthorizationController::present(UIViewController *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::PaymentAuthorizationController::present(UIViewController *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::descriptor;
    v5[4] = v4;
    objc_msgSend(v3, "presentWithCompletion:", v5);
    _Block_release(v5);
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
}

void sub_19700BCD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::MediaCapability::~MediaCapability(WebKit::MediaCapability *this, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  const void *v5;

  v3 = (const void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, a2);
  v5 = (const void *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E34AB458;
  *((_QWORD *)this + 1) = 0;
  if (v5)
    CFRelease(v5);
}

{
  const void *v3;
  WTF::StringImpl *v4;
  const void *v5;

  v3 = (const void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, a2);
  v5 = (const void *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E34AB458;
  *((_QWORD *)this + 1) = 0;
  if (v5)
    CFRelease(v5);
  JUMPOUT(0x19AEB936CLL);
}

void WebKit::PaymentAuthorizationViewController::~PaymentAuthorizationViewController(WebKit::PaymentAuthorizationViewController *this, void *a2)
{
  const void *v3;
  const void *v4;

  v3 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    CFRelease(v4);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  const void *v3;
  const void *v4;
  void *v5;

  v3 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    CFRelease(v4);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
  WTF::fastFree(this, v5);
}

void WebKit::PaymentAuthorizationController::~PaymentAuthorizationController(WebKit::PaymentAuthorizationController *this, void *a2)
{
  const void *v3;
  const void *v4;

  v3 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    CFRelease(v4);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  const void *v3;
  const void *v4;
  void *v5;

  v3 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    CFRelease(v4);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
  WTF::fastFree(this, v5);
}

uint64_t WebCore::MediaPlaybackTargetContextMock::deviceName@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 16);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

BOOL WebCore::MediaPlaybackTargetContextMock::hasActiveRoute(WebCore::MediaPlaybackTargetContextMock *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 2);
  return v1 && *(_DWORD *)(v1 + 4) != 0;
}

BOOL WebCore::MediaPlaybackTargetContextMock::supportsRemoteVideoPlayback(WebCore::MediaPlaybackTargetContextMock *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 2);
  return v1 && *(_DWORD *)(v1 + 4) != 0;
}

uint64_t initCNPostalAddressStreetKey(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (byte_1EE3415EF == 1)
  {
    v0 = (void *)qword_1EE341600;
  }
  else
  {
    v0 = (void *)___ZL15ContactsLibraryv_block_invoke();
    qword_1EE341600 = (uint64_t)v0;
    byte_1EE3415EF = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "CNPostalAddressStreetKey");
  if (!v1)
  {
    __break(0xC471u);
    JUMPOUT(0x19700C034);
  }
  result = *v1;
  qword_1EE3415F8 = result;
  _MergedGlobals_30[0] = CNPostalAddressStreetKeyFunction;
  return result;
}

uint64_t CNPostalAddressStreetKeyFunction(void)
{
  return qword_1EE3415F8;
}

uint64_t ___ZL15ContactsLibraryv_block_invoke()
{
  uint64_t result;

  result = (uint64_t)dlopen("/System/Library/Frameworks/Contacts.framework/Contacts", 2);
  if (!result)
  {
    result = 53;
    __break(0xC471u);
  }
  return result;
}

uint64_t initCNPostalAddressSubLocalityKey(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (byte_1EE3415EF == 1)
  {
    v0 = (void *)qword_1EE341600;
  }
  else
  {
    v0 = (void *)___ZL15ContactsLibraryv_block_invoke();
    qword_1EE341600 = (uint64_t)v0;
    byte_1EE3415EF = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "CNPostalAddressSubLocalityKey");
  if (!v1)
  {
    __break(0xC471u);
    JUMPOUT(0x19700C114);
  }
  result = *v1;
  qword_1EE341608 = result;
  off_1ECE6C520[0] = CNPostalAddressSubLocalityKeyFunction;
  return result;
}

uint64_t CNPostalAddressSubLocalityKeyFunction(void)
{
  return qword_1EE341608;
}

uint64_t initCNPostalAddressCityKey(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (byte_1EE3415EF == 1)
  {
    v0 = (void *)qword_1EE341600;
  }
  else
  {
    v0 = (void *)___ZL15ContactsLibraryv_block_invoke();
    qword_1EE341600 = (uint64_t)v0;
    byte_1EE3415EF = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "CNPostalAddressCityKey");
  if (!v1)
  {
    __break(0xC471u);
    JUMPOUT(0x19700C1B0);
  }
  result = *v1;
  qword_1EE341610 = result;
  off_1ECE6C528[0] = CNPostalAddressCityKeyFunction;
  return result;
}

uint64_t CNPostalAddressCityKeyFunction(void)
{
  return qword_1EE341610;
}

uint64_t initCNPostalAddressPostalCodeKey(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (byte_1EE3415EF == 1)
  {
    v0 = (void *)qword_1EE341600;
  }
  else
  {
    v0 = (void *)___ZL15ContactsLibraryv_block_invoke();
    qword_1EE341600 = (uint64_t)v0;
    byte_1EE3415EF = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "CNPostalAddressPostalCodeKey");
  if (!v1)
  {
    __break(0xC471u);
    JUMPOUT(0x19700C24CLL);
  }
  result = *v1;
  qword_1EE341618 = result;
  off_1ECE6C530[0] = CNPostalAddressPostalCodeKeyFunction;
  return result;
}

uint64_t CNPostalAddressPostalCodeKeyFunction(void)
{
  return qword_1EE341618;
}

uint64_t initCNPostalAddressSubAdministrativeAreaKey(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (byte_1EE3415EF == 1)
  {
    v0 = (void *)qword_1EE341600;
  }
  else
  {
    v0 = (void *)___ZL15ContactsLibraryv_block_invoke();
    qword_1EE341600 = (uint64_t)v0;
    byte_1EE3415EF = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "CNPostalAddressSubAdministrativeAreaKey");
  if (!v1)
  {
    __break(0xC471u);
    JUMPOUT(0x19700C2E8);
  }
  result = *v1;
  qword_1EE341620 = result;
  off_1ECE6C538[0] = CNPostalAddressSubAdministrativeAreaKeyFunction;
  return result;
}

uint64_t CNPostalAddressSubAdministrativeAreaKeyFunction(void)
{
  return qword_1EE341620;
}

uint64_t initCNPostalAddressStateKey(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (byte_1EE3415EF == 1)
  {
    v0 = (void *)qword_1EE341600;
  }
  else
  {
    v0 = (void *)___ZL15ContactsLibraryv_block_invoke();
    qword_1EE341600 = (uint64_t)v0;
    byte_1EE3415EF = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "CNPostalAddressStateKey");
  if (!v1)
  {
    __break(0xC471u);
    JUMPOUT(0x19700C384);
  }
  result = *v1;
  qword_1EE341628 = result;
  off_1ECE6C540[0] = CNPostalAddressStateKeyFunction;
  return result;
}

uint64_t CNPostalAddressStateKeyFunction(void)
{
  return qword_1EE341628;
}

uint64_t initCNPostalAddressCountryKey(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (byte_1EE3415EF == 1)
  {
    v0 = (void *)qword_1EE341600;
  }
  else
  {
    v0 = (void *)___ZL15ContactsLibraryv_block_invoke();
    qword_1EE341600 = (uint64_t)v0;
    byte_1EE3415EF = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "CNPostalAddressCountryKey");
  if (!v1)
  {
    __break(0xC471u);
    JUMPOUT(0x19700C420);
  }
  result = *v1;
  qword_1EE341630 = result;
  off_1ECE6C548[0] = CNPostalAddressCountryKeyFunction;
  return result;
}

uint64_t CNPostalAddressCountryKeyFunction(void)
{
  return qword_1EE341630;
}

uint64_t initCNPostalAddressISOCountryCodeKey(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (byte_1EE3415EF == 1)
  {
    v0 = (void *)qword_1EE341600;
  }
  else
  {
    v0 = (void *)___ZL15ContactsLibraryv_block_invoke();
    qword_1EE341600 = (uint64_t)v0;
    byte_1EE3415EF = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "CNPostalAddressISOCountryCodeKey");
  if (!v1)
  {
    __break(0xC471u);
    JUMPOUT(0x19700C4BCLL);
  }
  result = *v1;
  qword_1EE341638 = result;
  off_1ECE6C550 = CNPostalAddressISOCountryCodeKeyFunction;
  return result;
}

uint64_t CNPostalAddressISOCountryCodeKeyFunction(void)
{
  return qword_1EE341638;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::TrackerAddressLookupInfo::populateIfNeeded(void)::{lambda(void)#1} &&>>()
{
  void *v0;
  uint64_t v1;

  if (PAL::WebPrivacyLibrary((PAL *)1))
  {
    v0 = (void *)objc_msgSend(objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E0DCE130])()), "init");
    v1 = objc_msgSend(v0, "setAfterUpdates:", 1);
    objc_msgSend((id)objc_msgSend((id)((uint64_t (*)(uint64_t))*MEMORY[0x1E0DCDF70])(v1), "sharedInstance"), "requestTrackerNetworkAddresses:completionHandler:", v0, &__block_literal_global_265);
    if (v0)
      CFRelease(v0);
  }
}

void sub_19700C568(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void ___ZZN6WebKit24TrackerAddressLookupInfo16populateIfNeededEvENKUlvE_clEv_block_invoke(WebKit::TrackerAddressLookupInfo *a1, void *a2, uint64_t a3)
{
  NSObject *v3;
  unsigned int *v5;
  void *v6;
  WebKit::TrackerAddressLookupInfo *v7;
  void *v8;
  __int128 v9;
  WebKit::TrackerAddressLookupInfo *v10;
  uint64_t v11;
  WebKit::TrackerAddressLookupInfo *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  int v17;
  int v18;
  NSObject *v19;
  uint64_t v20;
  __int128 v21;
  WTF *v22;
  WTF *v23;
  uint64_t v24;
  __int128 v25;
  WTF *v26;
  WTF *v27;
  WTF *v28;
  WTF *v29;
  unsigned int *v30;
  void *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint8_t buf[16];
  uint64_t v38;
  WTF *v39;
  WTF *v40;
  char v41;
  _BYTE v42[128];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    WebKit::TrackerAddressLookupInfo::version4List(a1, a2);
    v5 = WTF::Vector<WebKit::TrackerAddressLookupInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&qword_1EE341680, 0);
    WebKit::TrackerAddressLookupInfo::version6List((WebKit::TrackerAddressLookupInfo *)v5, v6);
    WTF::Vector<WebKit::TrackerAddressLookupInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&qword_1EE341690, 0);
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v7 = (WebKit::TrackerAddressLookupInfo *)objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v33, v42, 16);
    v10 = v7;
    if (!v7)
      goto LABEL_29;
    v11 = *(_QWORD *)v34;
    *(_QWORD *)&v9 = 138412290;
    v32 = v9;
    while (1)
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v34 != v11)
          objc_enumerationMutation(a2);
        v13 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * (_QWORD)v12);
        v14 = objc_msgSend(v13, "version", v32);
        if (v14 == 6)
        {
          WebKit::TrackerAddressLookupInfo::version6List((WebKit::TrackerAddressLookupInfo *)6, v15);
          WebKit::TrackerAddressLookupInfo::TrackerAddressLookupInfo((uint64_t)buf, v13);
          v18 = HIDWORD(qword_1EE341698);
          if (HIDWORD(qword_1EE341698) == (_DWORD)qword_1EE341698)
          {
            WTF::Vector<WebKit::TrackerAddressLookupInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::TrackerAddressLookupInfo>((unsigned int *)&qword_1EE341690, (unint64_t)buf);
          }
          else
          {
            v24 = qword_1EE341690 + 48 * HIDWORD(qword_1EE341698);
            v25 = *(_OWORD *)buf;
            *(_QWORD *)(v24 + 16) = v38;
            *(_OWORD *)v24 = v25;
            v26 = v39;
            v39 = 0;
            *(_QWORD *)(v24 + 24) = v26;
            v27 = v40;
            v40 = 0;
            *(_QWORD *)(v24 + 32) = v27;
            *(_BYTE *)(v24 + 40) = v41;
            HIDWORD(qword_1EE341698) = v18 + 1;
          }
          goto LABEL_19;
        }
        if (v14 == 4)
        {
          WebKit::TrackerAddressLookupInfo::version4List((WebKit::TrackerAddressLookupInfo *)4, v15);
          WebKit::TrackerAddressLookupInfo::TrackerAddressLookupInfo((uint64_t)buf, v13);
          v17 = HIDWORD(qword_1EE341688);
          if (HIDWORD(qword_1EE341688) == (_DWORD)qword_1EE341688)
          {
            WTF::Vector<WebKit::TrackerAddressLookupInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::TrackerAddressLookupInfo>((unsigned int *)&qword_1EE341680, (unint64_t)buf);
          }
          else
          {
            v20 = qword_1EE341680 + 48 * HIDWORD(qword_1EE341688);
            v21 = *(_OWORD *)buf;
            *(_QWORD *)(v20 + 16) = v38;
            *(_OWORD *)v20 = v21;
            v22 = v39;
            v39 = 0;
            *(_QWORD *)(v20 + 24) = v22;
            v23 = v40;
            v40 = 0;
            *(_QWORD *)(v20 + 32) = v23;
            *(_BYTE *)(v20 + 40) = v41;
            HIDWORD(qword_1EE341688) = v17 + 1;
          }
LABEL_19:
          v28 = v40;
          v40 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 1)
              WTF::fastFree(v28, v16);
            else
              --*(_DWORD *)v28;
          }
          v29 = v39;
          v39 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 1)
              WTF::fastFree(v29, v16);
            else
              --*(_DWORD *)v29;
          }
          goto LABEL_27;
        }
        v19 = qword_1ECE71758;
        if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = v32;
          *(_QWORD *)&buf[4] = v13;
          _os_log_error_impl(&dword_196BCC000, v19, OS_LOG_TYPE_ERROR, "Skipped invalid tracking IP address: %@", buf, 0xCu);
        }
LABEL_27:
        v12 = (WebKit::TrackerAddressLookupInfo *)((char *)v12 + 1);
      }
      while (v10 != v12);
      v7 = (WebKit::TrackerAddressLookupInfo *)objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v33, v42, 16);
      v10 = v7;
      if (!v7)
      {
LABEL_29:
        WebKit::TrackerAddressLookupInfo::version4List(v7, v8);
        v30 = WTF::Vector<WebKit::TrackerAddressLookupInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&qword_1EE341680, HIDWORD(qword_1EE341688));
        WebKit::TrackerAddressLookupInfo::version6List((WebKit::TrackerAddressLookupInfo *)v30, v31);
        WTF::Vector<WebKit::TrackerAddressLookupInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&qword_1EE341690, HIDWORD(qword_1EE341698));
        return;
      }
    }
  }
  v3 = qword_1ECE71758;
  if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_196BCC000, v3, OS_LOG_TYPE_ERROR, "Failed to request tracking IP addresses from WebPrivacy", buf, 2u);
  }
}

void sub_19700C8B0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF *a22,WTF *a23)
{
  if (a23)
  {
    if (*(_DWORD *)a23 == 1)
      WTF::fastFree(a23, a2);
    else
      --*(_DWORD *)a23;
  }
  if (a22)
  {
    if (*(_DWORD *)a22 == 1)
      WTF::fastFree(a22, a2);
    else
      --*(_DWORD *)a22;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::TrackerAddressLookupInfo::version4List(WebKit::TrackerAddressLookupInfo *this, void *a2)
{
  uint64_t result;
  _QWORD v3[2];

  if ((byte_1EE341648 & 1) == 0)
  {
    v3[0] = 0;
    qword_1EE341680 = 0;
    v3[1] = 0;
    qword_1EE341688 = 0;
    result = WTF::Vector<WebKit::TrackerAddressLookupInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3, a2);
    byte_1EE341648 = 1;
  }
  return result;
}

uint64_t WebKit::TrackerAddressLookupInfo::version6List(WebKit::TrackerAddressLookupInfo *this, void *a2)
{
  uint64_t result;
  _QWORD v3[2];

  if ((byte_1EE341650 & 1) == 0)
  {
    v3[0] = 0;
    qword_1EE341690 = 0;
    v3[1] = 0;
    qword_1EE341698 = 0;
    result = WTF::Vector<WebKit::TrackerAddressLookupInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3, a2);
    byte_1EE341650 = 1;
  }
  return result;
}

uint64_t WTF::Vector<WebKit::TrackerAddressLookupInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebKit::TrackerAddressLookupInfo>::destruct(*(WTF **)a1, (WTF *)(*(_QWORD *)a1 + 48 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF *WTF::VectorDestructor<true,WebKit::TrackerAddressLookupInfo>::destruct(WTF *result, WTF *a2)
{
  WTF **v3;
  WTF *v4;

  if (result != a2)
  {
    v3 = (WTF **)result;
    do
    {
      v4 = v3[4];
      v3[4] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 1)
          WTF::fastFree(v4, a2);
        else
          --*(_DWORD *)v4;
      }
      result = v3[3];
      v3[3] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          result = (WTF *)WTF::fastFree(result, a2);
        else
          --*(_DWORD *)result;
      }
      v3 += 6;
    }
    while (v3 != (WTF **)a2);
  }
  return result;
}

unsigned int *WTF::Vector<WebKit::TrackerAddressLookupInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t this)
{
  uint64_t v3;
  unint64_t v4;
  WTF *v5;
  WTF *v6;

  if (result[2] > this)
  {
    v3 = (uint64_t)result;
    v4 = result[3];
    if (v4 > this)
    {
      result = (unsigned int *)WTF::VectorDestructor<true,WebKit::TrackerAddressLookupInfo>::destruct((WTF *)(*(_QWORD *)result + 48 * this), (WTF *)(*(_QWORD *)result + 48 * v4));
      *(_DWORD *)(v3 + 12) = this;
      LODWORD(v4) = this;
    }
    v5 = *(WTF **)v3;
    if (this)
    {
      if (this >= 0x5555556)
      {
        __break(0xC471u);
        JUMPOUT(0x19700CB7CLL);
      }
      v6 = (WTF *)(48 * this);
      result = (unsigned int *)WTF::fastMalloc(v6);
      *(_DWORD *)(v3 + 8) = (v6 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)v3 = result;
      if (result != (unsigned int *)v5)
        result = (unsigned int *)WTF::VectorMover<false,WebKit::TrackerAddressLookupInfo>::move(v5, (WTF *)((char *)v5 + 48 * v4), (uint64_t)result);
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return (unsigned int *)WTF::fastFree(v5, (void *)this);
    }
  }
  return result;
}

WTF *WTF::VectorMover<false,WebKit::TrackerAddressLookupInfo>::move(WTF *result, WTF *a2, uint64_t a3)
{
  WTF *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(_OWORD *)v5;
      *(_QWORD *)(a3 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a3 = v6;
      v7 = *((_QWORD *)v5 + 3);
      *((_QWORD *)v5 + 3) = 0;
      *(_QWORD *)(a3 + 24) = v7;
      v8 = *((_QWORD *)v5 + 4);
      *((_QWORD *)v5 + 4) = 0;
      *(_QWORD *)(a3 + 32) = v8;
      *(_BYTE *)(a3 + 40) = *((_BYTE *)v5 + 40);
      v9 = (WTF *)*((_QWORD *)v5 + 4);
      *((_QWORD *)v5 + 4) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
          WTF::fastFree(v9, a2);
        else
          --*(_DWORD *)v9;
      }
      result = (WTF *)*((_QWORD *)v5 + 3);
      *((_QWORD *)v5 + 3) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          result = (WTF *)WTF::fastFree(result, a2);
        else
          --*(_DWORD *)result;
      }
      v5 = (WTF *)((char *)v5 + 48);
      a3 += 48;
    }
    while (v5 != a2);
  }
  return result;
}

__n128 WTF::Vector<WebKit::TrackerAddressLookupInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::TrackerAddressLookupInfo>(unsigned int *a1, unint64_t a2)
{
  __n128 *v3;
  uint64_t v4;
  unint64_t v5;
  __n128 result;
  unint64_t v7;
  unint64_t v8;

  v3 = (__n128 *)WTF::Vector<WebKit::TrackerAddressLookupInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  v4 = *(_QWORD *)a1 + 48 * a1[3];
  v5 = v3[1].n128_u64[0];
  result = *v3;
  *(__n128 *)v4 = *v3;
  *(_QWORD *)(v4 + 16) = v5;
  v7 = v3[1].n128_u64[1];
  v3[1].n128_u64[1] = 0;
  *(_QWORD *)(v4 + 24) = v7;
  v8 = v3[2].n128_u64[0];
  v3[2].n128_u64[0] = 0;
  *(_QWORD *)(v4 + 32) = v8;
  *(_BYTE *)(v4 + 40) = v3[2].n128_u8[8];
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<WebKit::TrackerAddressLookupInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 48 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::TrackerAddressLookupInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF *)a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::TrackerAddressLookupInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF *)a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

WTF *WTF::Vector<WebKit::TrackerAddressLookupInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF *result, unint64_t a2)
{
  WTF *v2;
  WTF *v3;
  WTF *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = (WTF *)(*(_QWORD *)result + 48 * *((unsigned int *)result + 3));
      v5 = 48 * a2;
      v6 = WTF::fastMalloc((WTF *)(48 * a2));
      *((_DWORD *)v2 + 2) = (v5 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)v2 = v6;
      result = WTF::VectorMover<false,WebKit::TrackerAddressLookupInfo>::move(v3, v4, v6);
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *((_DWORD *)v2 + 2) = 0;
        }
        return (WTF *)WTF::fastFree(v3, v7);
      }
    }
  }
  return result;
}

uint64_t WebKit::TrackerAddressLookupInfo::TrackerAddressLookupInfo(uint64_t a1, void *a2)
{
  WTF **v2;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  void *v10;
  _Unwind_Exception *v11;
  WTF *v12;
  uint64_t v13;
  int v14;

  v5 = objc_msgSend(a2, "address");
  v6 = *(unsigned __int8 *)(v5 + 1);
  if (v6 == 30)
  {
    v7 = *(_DWORD *)(v5 + 8);
    v13 = *(_QWORD *)(v5 + 12);
    v14 = *(_DWORD *)(v5 + 20);
    v8 = 2;
  }
  else
  {
    if (v6 != 2)
    {
      v11 = (_Unwind_Exception *)std::__throw_bad_optional_access[abi:sn180100]();
      v12 = *v2;
      *v2 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 1)
          WTF::fastFree(v12, v10);
        else
          --*(_DWORD *)v12;
      }
      _Unwind_Resume(v11);
    }
    v7 = *(_DWORD *)(v5 + 4);
    v8 = 1;
  }
  *(_DWORD *)a1 = v7;
  *(_QWORD *)(a1 + 4) = v13;
  *(_DWORD *)(a1 + 12) = v14;
  *(_DWORD *)(a1 + 16) = v8;
  *(_DWORD *)(a1 + 20) = objc_msgSend(a2, "netMaskLength");
  WTF::CString::CString((WTF::CString *)(a1 + 24), (const char *)objc_msgSend((id)objc_msgSend(a2, "owner"), "UTF8String"));
  WTF::CString::CString((WTF::CString *)(a1 + 32), (const char *)objc_msgSend((id)objc_msgSend(a2, "host"), "UTF8String"));
  *(_BYTE *)(a1 + 40) = 1;
  return a1;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::TrackerDomainLookupInfo::populateIfNeeded(void)::{lambda(void)#1} &&>>()
{
  void *v0;
  uint64_t v1;
  int v2;

  if (PAL::WebPrivacyLibrary((PAL *)1))
  {
    if ((byte_1EE341660 & 1) != 0)
    {
      if (!byte_1EE3415F0)
        return;
    }
    else
    {
      v2 = objc_msgSend((id)((uint64_t (*)(void))*MEMORY[0x1E0DCDF70])(), "instancesRespondToSelector:", sel_requestTrackerDomainNamesData_completionHandler_);
      byte_1EE3415F0 = v2;
      byte_1EE341660 = 1;
      if (!v2)
        return;
    }
    v0 = (void *)objc_msgSend(objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E0DCE130])()), "init");
    v1 = objc_msgSend(v0, "setAfterUpdates:", 1);
    objc_msgSend((id)objc_msgSend((id)((uint64_t (*)(uint64_t))*MEMORY[0x1E0DCDF70])(v1), "sharedInstance"), "requestTrackerDomainNamesData:completionHandler:", v0, &__block_literal_global_266);
    if (v0)
      CFRelease(v0);
  }
}

void sub_19700D00C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void ___ZZN6WebKit23TrackerDomainLookupInfo16populateIfNeededEvENKUlvE_clEv_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  unsigned int v9;
  WTF *v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  WTF::StringImpl **v17;
  WTF::StringImpl *v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  WTF::StringImpl **v26;
  WTF::StringImpl *v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  char *v32;
  WTF *v33;
  WTF::StringImpl *v34;
  int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF *v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  WTF *v53;
  uint64_t v54;
  WTF *v55;
  WTF *v56;
  WTF *v57;
  WTF *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF *v62;
  WTF *v63;
  unsigned int i;
  unsigned int v65;
  WTF::StringImpl **v66;
  WTF::StringImpl *v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  WTF *v71;
  WTF::StringImpl *v72;
  WTF *v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  WTF *v80;
  WTF *v81;
  char v82;
  WTF::StringImpl *v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint8_t buf[8];
  WTF *v89;
  char v90;
  _BYTE v91[128];
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v3 = qword_1ECE71758;
    if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_196BCC000, v3, OS_LOG_TYPE_ERROR, "Failed to request tracking domains from WebPrivacy", buf, 2u);
    }
    return;
  }
  v4 = a2;
  v86 = 0u;
  v87 = 0u;
  v84 = 0u;
  v85 = 0u;
  v77 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v84, v91, 16);
  if (!v77)
    return;
  v76 = *(_QWORD *)v85;
  v78 = v4;
  do
  {
    v79 = 0;
    do
    {
      if (*(_QWORD *)v85 != v76)
        objc_enumerationMutation(v4);
      v5 = *(void **)(*((_QWORD *)&v84 + 1) + 8 * v79);
      if ((byte_1EE341668 & 1) == 0)
      {
        qword_1EE3416E8 = 0;
        *(_QWORD *)&dword_1EE3416F0 = 0;
        qword_1EE3416F8 = 0;
        byte_1EE341668 = 1;
      }
      WTF::String::String((WTF::String *)&v83, (const char *)objc_msgSend((id)objc_msgSend(v5, "host", v76), "UTF8String"));
      WTF::CString::CString((WTF::CString *)&v81, (const char *)objc_msgSend((id)objc_msgSend(v5, "owner"), "UTF8String"));
      v82 = objc_msgSend(v5, "canBlock");
      v8 = dword_1EE3416F0;
      if (10 * (unint64_t)dword_1EE3416F4 >= 9 * (unint64_t)dword_1EE3416F0
        || dword_1EE3416F0 <= (2 * dword_1EE3416F4) && BYTE4(qword_1EE3416F8))
      {
        if (dword_1EE3416F0)
          v9 = 2 * dword_1EE3416F0;
        else
          v9 = 8;
        v10 = (WTF *)qword_1EE3416E8;
        v11 = (void *)WTF::fastMalloc((WTF *)(24 * v9));
        v12 = (uint64_t)v11;
        if (v9)
          bzero(v11, 24 * v9);
        qword_1EE3416E8 = v12;
        dword_1EE3416F0 = v9;
        v13 = (~(v12 << 32) + v12) ^ ((unint64_t)(~(v12 << 32) + v12) >> 22);
        v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
        v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
        LODWORD(qword_1EE3416F8) = (v15 >> 31) ^ v15;
        BYTE4(qword_1EE3416F8) = 0;
        if ((_DWORD)v8)
        {
          v16 = 0;
          v80 = v10;
          do
          {
            v17 = (WTF::StringImpl **)((char *)v10 + 24 * v16);
            v18 = *v17;
            if (*v17)
            {
              v19 = dword_1EE3416F0;
              v20 = qword_1EE3416F8;
              v21 = *((_DWORD *)v18 + 4);
              if (v21 >= 0x100)
                v22 = v21 >> 8;
              else
                v22 = WTF::StringImpl::hashSlowCase(v18);
              v23 = v8;
              v24 = v19 - 1;
              v25 = (v22 ^ v20) & (v19 - 1);
              v26 = (WTF::StringImpl **)(qword_1EE3416E8 + 24 * v25);
              v27 = *v26;
              if (*v26)
              {
                v28 = 0;
                do
                {
                  v29 = *((_DWORD *)v27 + 4);
                  if (v29 >= 0x100)
                    v30 = v29 >> 8;
                  else
                    v30 = WTF::StringImpl::hashSlowCase(v27);
                  v31 = (v25 + v19 - ((v30 ^ v20) & v24)) & v24;
                  if (v28 > v31)
                  {
                    std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WebKit::TrackerDomainLookupInfo>>((uint64_t)v17, (uint64_t)v26);
                    v28 = v31;
                  }
                  v25 = (v25 + 1) & v24;
                  ++v28;
                  v26 = (WTF::StringImpl **)(qword_1EE3416E8 + 24 * v25);
                  v27 = *v26;
                }
                while (*v26);
              }
              WTF::GenericHashTraits<WTF::KeyValuePair<WTF::String,WebKit::TrackerDomainLookupInfo>>::assignToEmpty<WTF::KeyValuePair<WTF::String,WebKit::TrackerDomainLookupInfo>,WTF::KeyValuePair<WTF::String,WebKit::TrackerDomainLookupInfo>>((uint64_t)v26, (uint64_t)v17);
              v8 = v23;
              v10 = v80;
            }
            v32 = (char *)v10 + 24 * v16;
            v33 = (WTF *)*((_QWORD *)v32 + 1);
            *((_QWORD *)v32 + 1) = 0;
            if (v33)
            {
              if (*(_DWORD *)v33 == 1)
                WTF::fastFree(v33, v6);
              else
                --*(_DWORD *)v33;
            }
            v34 = *v17;
            *v17 = 0;
            if (v34)
            {
              if (*(_DWORD *)v34 == 2)
                WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v6);
              else
                *(_DWORD *)v34 -= 2;
            }
            ++v16;
          }
          while (v16 != v8);
LABEL_45:
          WTF::fastFree(v10, v6);
          LODWORD(v8) = dword_1EE3416F0;
        }
        else
        {
          if (v10)
            goto LABEL_45;
          LODWORD(v8) = 8;
        }
        v4 = v78;
      }
      v35 = qword_1EE3416F8;
      v36 = *((_DWORD *)v83 + 4);
      if (v36 >= 0x100)
      {
        v37 = v36 >> 8;
      }
      else
      {
        v37 = WTF::StringImpl::hashSlowCase(v83);
        v4 = v78;
      }
      v38 = v8 - 1;
      v39 = (v37 ^ v35) & (v8 - 1);
      v40 = qword_1EE3416E8;
      v41 = qword_1EE3416E8 + 24 * v39;
      v42 = *(WTF **)v41;
      if (*(_QWORD *)v41)
      {
        v43 = 0;
        while (1)
        {
          v44 = *((_DWORD *)v42 + 4);
          v45 = v44 >= 0x100 ? v44 >> 8 : WTF::StringImpl::hashSlowCase(v42);
          v46 = (v39 + v8 - ((v45 ^ v35) & v38)) & v38;
          if (v43 > v46)
            break;
          if (v45 == v37 && (WTF::equal(*(WTF **)v41, v83, v7) & 1) != 0)
          {
            v57 = v81;
            v81 = 0;
            v58 = *(WTF **)(v41 + 8);
            *(_QWORD *)(v41 + 8) = v57;
            v4 = v78;
            if (v58)
            {
              if (*(_DWORD *)v58 == 1)
                WTF::fastFree(v58, v6);
              else
                --*(_DWORD *)v58;
            }
            *(_BYTE *)(v41 + 16) = v82;
            goto LABEL_110;
          }
          v40 = qword_1EE3416E8;
          v39 = ((_DWORD)v39 + 1) & v38;
          ++v43;
          v41 = qword_1EE3416E8 + 24 * v39;
          v42 = *(WTF **)v41;
          if (!*(_QWORD *)v41)
          {
            if (v43 >= 0x80)
              BYTE4(qword_1EE3416F8) = 1;
            v4 = v78;
            goto LABEL_62;
          }
        }
        if (v43 >= 0x80)
          BYTE4(qword_1EE3416F8) = 1;
        v49 = *(WTF **)v41;
        *(_QWORD *)v41 = 0;
        *(_QWORD *)buf = v49;
        v50 = v40 + 24 * v39;
        v52 = *(WTF **)(v50 + 8);
        v51 = v50 + 8;
        *(_QWORD *)v51 = 0;
        v89 = v52;
        v90 = *(_BYTE *)(v51 + 8);
        v53 = *(WTF **)v51;
        *(_QWORD *)v51 = 0;
        v4 = v78;
        if (v53)
        {
          if (*(_DWORD *)v53 == 1)
            WTF::fastFree(v53, v6);
          else
            --*(_DWORD *)v53;
        }
        v59 = *(WTF::StringImpl **)v41;
        *(_QWORD *)v41 = 0;
        if (v59)
        {
          if (*(_DWORD *)v59 == 2)
            WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v6);
          else
            *(_DWORD *)v59 -= 2;
        }
        *(_QWORD *)v41 = 0;
        *(_QWORD *)(v41 + 8) = 0;
        *(_QWORD *)(v41 + 16) = 0;
        v60 = v83;
        v83 = 0;
        v61 = *(WTF::StringImpl **)v41;
        *(_QWORD *)v41 = v60;
        if (v61)
        {
          if (*(_DWORD *)v61 == 2)
            WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v6);
          else
            *(_DWORD *)v61 -= 2;
        }
        v62 = v81;
        v81 = 0;
        v63 = *(WTF **)v51;
        *(_QWORD *)v51 = v62;
        if (v63)
        {
          if (*(_DWORD *)v63 == 1)
            WTF::fastFree(v63, v6);
          else
            --*(_DWORD *)v63;
        }
        *(_BYTE *)(v51 + 8) = v82;
        for (i = v39 + 1; ; i = v65 + 1)
        {
          v65 = i & v38;
          v66 = (WTF::StringImpl **)(qword_1EE3416E8 + 24 * (i & v38));
          v67 = *v66;
          if (!*v66)
            break;
          v68 = *((_DWORD *)v67 + 4);
          if (v68 >= 0x100)
            v69 = v68 >> 8;
          else
            v69 = WTF::StringImpl::hashSlowCase(v67);
          ++v46;
          v70 = (v65 + v8 - ((v69 ^ v35) & v38)) & v38;
          if (v46 > v70)
          {
            std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WebKit::TrackerDomainLookupInfo>>((uint64_t)buf, (uint64_t)v66);
            v46 = v70;
          }
        }
        WTF::GenericHashTraits<WTF::KeyValuePair<WTF::String,WebKit::TrackerDomainLookupInfo>>::assignToEmpty<WTF::KeyValuePair<WTF::String,WebKit::TrackerDomainLookupInfo>,WTF::KeyValuePair<WTF::String,WebKit::TrackerDomainLookupInfo>>(qword_1EE3416E8 + 24 * v65, (uint64_t)buf);
        v71 = v89;
        v89 = 0;
        if (v71)
        {
          if (*(_DWORD *)v71 == 1)
            WTF::fastFree(v71, v6);
          else
            --*(_DWORD *)v71;
        }
        v72 = *(WTF::StringImpl **)buf;
        *(_QWORD *)buf = 0;
        if (v72)
        {
          if (*(_DWORD *)v72 == 2)
            WTF::StringImpl::destroy(v72, (WTF::StringImpl *)v6);
          else
            *(_DWORD *)v72 -= 2;
        }
      }
      else
      {
LABEL_62:
        v47 = v83;
        v83 = 0;
        v48 = *(WTF::StringImpl **)v41;
        *(_QWORD *)v41 = v47;
        if (v48)
        {
          if (*(_DWORD *)v48 == 2)
            WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v6);
          else
            *(_DWORD *)v48 -= 2;
        }
        v54 = v40 + 24 * v39;
        v55 = v81;
        v81 = 0;
        v56 = *(WTF **)(v54 + 8);
        *(_QWORD *)(v54 + 8) = v55;
        if (v56)
        {
          if (*(_DWORD *)v56 == 1)
            WTF::fastFree(v56, v6);
          else
            --*(_DWORD *)v56;
        }
        *(_BYTE *)(v40 + 24 * v39 + 16) = v82;
      }
      ++dword_1EE3416F4;
LABEL_110:
      v73 = v81;
      v81 = 0;
      if (v73)
      {
        if (*(_DWORD *)v73 == 1)
          WTF::fastFree(v73, v6);
        else
          --*(_DWORD *)v73;
      }
      v74 = v83;
      v83 = 0;
      if (v74)
      {
        if (*(_DWORD *)v74 == 2)
          WTF::StringImpl::destroy(v74, (WTF::StringImpl *)v6);
        else
          *(_DWORD *)v74 -= 2;
      }
      ++v79;
    }
    while (v79 != v77);
    v75 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v84, v91, 16);
    v77 = v75;
  }
  while (v75);
}

void sub_19700D7A8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF::StringImpl *a25,WTF *a26)
{
  if (a26)
  {
    if (*(_DWORD *)a26 == 1)
      WTF::fastFree(a26, a2);
    else
      --*(_DWORD *)a26;
  }
  if (a25)
  {
    if (*(_DWORD *)a25 == 2)
      WTF::StringImpl::destroy(a25, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a25 -= 2;
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 1)
      WTF::fastFree(a14, a2);
    else
      --*(_DWORD *)a14;
  }
  if (a16)
  {
    if (*(_DWORD *)a16 == 2)
      WTF::StringImpl::destroy(a16, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a16 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF *WTF::GenericHashTraits<WTF::KeyValuePair<WTF::String,WebKit::TrackerDomainLookupInfo>>::assignToEmpty<WTF::KeyValuePair<WTF::String,WebKit::TrackerDomainLookupInfo>,WTF::KeyValuePair<WTF::String,WebKit::TrackerDomainLookupInfo>>(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  WTF *result;

  WTF::String::operator=((WTF::StringImpl **)a1, (WTF::StringImpl *)a2);
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  result = *(WTF **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, v4);
    else
      --*(_DWORD *)result;
  }
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

WTF *std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WebKit::TrackerDomainLookupInfo>>(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  char v6;
  void *v7;
  uint64_t v8;
  WTF *v9;
  WTF::StringImpl *v10;
  WTF *result;

  v4 = *(WTF::StringImpl **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(_BYTE *)(a1 + 16);
  WTF::String::operator=((WTF::StringImpl **)a1, (WTF::StringImpl *)a2);
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v9 = *(WTF **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
      WTF::fastFree(v9, v7);
    else
      --*(_DWORD *)v9;
  }
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v10 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v4;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v7);
    else
      *(_DWORD *)v10 -= 2;
  }
  result = *(WTF **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v5;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, v7);
    else
      --*(_DWORD *)result;
  }
  *(_BYTE *)(a2 + 16) = v6;
  return result;
}

void sub_19700D988(_Unwind_Exception *exception_object, void *a2)
{
  WTF::StringImpl *v2;
  WTF *v3;

  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::IPAddress::compare(uint64_t a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  _BOOL4 v6;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v12;
  unsigned int v13;

  v2 = *(_DWORD *)(a1 + 16);
  if (v2 == 2)
  {
    if (*(_DWORD *)(a2 + 16) == 2)
    {
      v9 = bswap64(*(_QWORD *)a1);
      v10 = bswap64(*(_QWORD *)a2);
      if (v9 == v10 && (v9 = bswap64(*(_QWORD *)(a1 + 8)), v10 = bswap64(*(_QWORD *)(a2 + 8)), v9 == v10))
      {
        v8 = 0;
      }
      else if (v9 < v10)
      {
        v8 = -1;
      }
      else
      {
        v8 = 1;
      }
      goto LABEL_16;
    }
    return 0;
  }
  if (v2 != 1 || *(_DWORD *)(a2 + 16) != 1)
    return 0;
  v3 = bswap32(*(_DWORD *)a1);
  v4 = bswap32(*(_DWORD *)a2);
  v5 = v3 >= v4;
  v6 = v3 > v4;
  v7 = !v5;
  v8 = v6 - v7;
LABEL_16:
  v12 = v8 == 0;
  if (v8 < 0)
    v13 = 1;
  else
    v13 = 3;
  if (v12)
    return 2;
  else
    return v13;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::PaymentAuthorizationController::present(UIViewController *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::PaymentAuthorizationController::present(UIViewController *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::PaymentAuthorizationController::present(UIViewController *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::PaymentAuthorizationController::present(UIViewController *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_19700DAE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZ72__WKPaymentAuthorizationDelegate_Protected___didRequestMerchantSession__EUb_E3__0vJEED1Ev(_QWORD *a1)
{
  const void *v2;
  const void *v3;

  *a1 = &off_1E34B6B08;
  v2 = (const void *)a1[3];
  a1[3] = 0;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(v3);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ72__WKPaymentAuthorizationDelegate_Protected___didRequestMerchantSession__EUb_E3__0vJEED0Ev(WTF *this, void *a2)
{
  const void *v3;
  const void *v4;

  *(_QWORD *)this = &off_1E34B6B08;
  v3 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(v4);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZ72__WKPaymentAuthorizationDelegate_Protected___didRequestMerchantSession__EUb_E3__0vJEE4callEv(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7[5];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return (WTF::StringImpl *)(*(uint64_t (**)(void))(*(_QWORD *)(v1 + 56) + 16))();
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return (WTF::StringImpl *)(*(uint64_t (**)(void))(*(_QWORD *)(v1 + 56) + 16))();
  v4 = *(_QWORD *)(v3 + 16);
  MEMORY[0x19AEABB18](v7, *(_QWORD *)(a1 + 24));
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v4 + 64))(v4, v3, v7);
  result = v7[0];
  v7[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19700DC38(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::RefCounted<WebKit::LinkDecorationFilteringDataObserver>::deref(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = result;
  if (*(_DWORD *)result == 1)
  {
    v3 = *(_QWORD *)(result + 16);
    *(_QWORD *)(v2 + 16) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v2 + 8), a2);
    return WTF::fastFree((WTF *)v2, v4);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit33LinkDecorationFilteringController14observeUpdatesEONS_8FunctionIFvvEEEEUb0_E3__1vJEE4callEv(uint64_t a1)
{
  uint64_t v1;
  _QWORD *result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int **v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(a1 + 8);
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v3 = result;
  *result = off_1E34B6B58;
  v6 = *(_QWORD *)(v1 + 24);
  v5 = (uint64_t *)(v1 + 24);
  v4 = v6;
  v21 = 0;
  v22 = 0;
  if (v6 && (v7 = *(unsigned int *)(v4 - 12), (_DWORD)v7))
  {
    if (v7 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v8 = WTF::fastMalloc((WTF *)(8 * v7));
    LODWORD(v22) = v7;
    v21 = v8;
  }
  else
  {
    v8 = 0;
  }
  v9 = (unsigned int *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)v5);
  v11 = v9;
  v12 = v10;
  if (*v5)
    v13 = *v5 + 8 * *(unsigned int *)(*v5 - 4);
  else
    v13 = 0;
  if ((unsigned int *)v13 != v9)
  {
    v14 = 0;
    do
    {
      v10 = *(unsigned int **)(*(_QWORD *)v11 + 8);
      if (v10)
      {
        v15 = (unsigned int **)(v10 + 2);
        WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v10 + 2, (uint64_t)v10);
        v16 = *v15;
        if (*v15)
        {
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 + 1, v16));
          v14 = HIDWORD(v22);
          v8 = v21;
        }
      }
      else
      {
        v16 = 0;
      }
      v18 = v14 + 1;
      *(_QWORD *)(v8 + 8 * v14) = v16;
      HIDWORD(v22) = v14 + 1;
      while (1)
      {
        v11 += 2;
        if (v11 == v12)
          break;
        if ((unint64_t)(*(_QWORD *)v11 + 1) > 1)
          goto LABEL_21;
      }
      v11 = v12;
LABEL_21:
      ++v14;
    }
    while (v11 != (unsigned int *)v13);
    if (v18)
    {
      v19 = v21;
      v20 = 8 * v18;
      do
      {
        if (*(_QWORD *)v19 && *(_QWORD *)(*(_QWORD *)v19 + 8))
        {
          v23 = *(_QWORD *)v19;
          if (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(v5, &v23))(*(void (**)(_QWORD *, _QWORD))(*v3 + 16))(v3, *(_QWORD *)(*(_QWORD *)v19 + 8));
        }
        v19 += 8;
        v20 -= 8;
      }
      while (v20);
    }
  }
  WTF::Vector<WTF::WeakPtr<WebKit::LinkDecorationFilteringDataObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v10);
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 8))(v3);
}

void sub_19700DE8C(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  WTF::Vector<WTF::WeakPtr<WebKit::LinkDecorationFilteringDataObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int i;
  uint64_t v9;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = ~(*a2 << 32) + *a2;
    v5 = 9
       * (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) ^ (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    for (i = 1; ; ++i)
    {
      v9 = *(_QWORD *)(v2 + 8 * v7);
      if (!v9)
        break;
      if (v9 != -1 && v9 == *a2)
        return 1;
      v7 = (v7 + i) & v3;
    }
  }
  return 0;
}

uint64_t WTF::Vector<WTF::WeakPtr<WebKit::LinkDecorationFilteringDataObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int **v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(unsigned int ***)a1;
    v5 = *(_QWORD *)a1 + 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v6);
          WTF::fastFree((WTF *)v6, a2);
        }
      }
      ++v4;
    }
    while (v4 != (unsigned int **)v5);
  }
  v9 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v9, a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit33LinkDecorationFilteringController14observeUpdatesEONS_8FunctionIFvvEEEEUb0_ENK3__1clEvEUlRT_E_vJRNS2_35LinkDecorationFilteringDataObserverEEE4callESD_(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 16))(*(_QWORD *)(a2 + 16));
}

unint64_t WTF::Vector<WTF::CompletionHandler<void ()(void)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 8 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::CompletionHandler<void ()(void)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::CompletionHandler<void ()(void)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WTF::CompletionHandler<void ()(void)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int v2;
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int **v8;
  unsigned int *v9;

  if (result[2] >= a2)
    return result;
  v2 = a2;
  v3 = result;
  v4 = *(WTF **)result;
  v5 = result[3];
  if (a2 >= 2)
  {
    if (a2 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
    v6 = result;
    v3[2] = v2;
    *(_QWORD *)v3 = result;
    if (!(_DWORD)v5)
      goto LABEL_11;
    goto LABEL_7;
  }
  v6 = result + 4;
  *(_QWORD *)result = result + 4;
  result[2] = 1;
  if ((_DWORD)v5)
  {
LABEL_7:
    v7 = 8 * v5;
    v8 = (unsigned int **)v4;
    do
    {
      v9 = *v8;
      *v8 = 0;
      *(_QWORD *)v6 = v9;
      result = *v8;
      *v8 = 0;
      if (result)
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      v6 += 2;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
LABEL_11:
  if (v3 + 4 != (unsigned int *)v4 && v4)
  {
    if (*(WTF **)v3 == v4)
    {
      *(_QWORD *)v3 = 0;
      v3[2] = 0;
    }
    return (unsigned int *)WTF::fastFree(v4, (void *)a2);
  }
  return result;
}

char *WTF::Vector<WTF::CompletionHandler<void ()(WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unint64_t a1, char *a2)
{
  char *v2;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2;
  if (qword_1EE3416A0 <= (unint64_t)a2
    && qword_1EE3416A0 + 8 * (unint64_t)dword_1EE3416AC > (unint64_t)a2)
  {
    v6 = &a2[-qword_1EE3416A0];
    v7 = dword_1EE3416A8 + ((unint64_t)dword_1EE3416A8 >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a1)
      a1 = v8;
    WTF::Vector<WTF::CompletionHandler<void ()(WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return &v6[qword_1EE3416A0];
  }
  else
  {
    v4 = dword_1EE3416A8 + ((unint64_t)dword_1EE3416A8 >> 2);
    if (v4 >= 0x10)
      v5 = v4 + 1;
    else
      v5 = 16;
    if (v5 > a1)
      a1 = v5;
    WTF::Vector<WTF::CompletionHandler<void ()(WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v2;
}

unint64_t WTF::Vector<WTF::CompletionHandler<void ()(WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unint64_t result, void *a2)
{
  int v2;
  WTF *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;

  if (dword_1EE3416A8 >= result)
    return result;
  v2 = result;
  v3 = (WTF *)qword_1EE3416A0;
  v4 = dword_1EE3416AC;
  if (result >= 2)
  {
    if (result >> 29)
    {
      __break(0xC471u);
      return result;
    }
    result = WTF::fastMalloc((WTF *)(8 * result));
    v5 = (uint64_t *)result;
    dword_1EE3416A8 = v2;
    qword_1EE3416A0 = result;
    if (!(_DWORD)v4)
      goto LABEL_11;
    goto LABEL_7;
  }
  v5 = &qword_1EE3416B0;
  qword_1EE3416A0 = (uint64_t)&qword_1EE3416B0;
  dword_1EE3416A8 = 1;
  if (dword_1EE3416AC)
  {
LABEL_7:
    v6 = 8 * v4;
    v7 = (unint64_t *)v3;
    do
    {
      v8 = *v7;
      *v7 = 0;
      *v5 = v8;
      result = *v7;
      *v7 = 0;
      if (result)
        result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
      ++v5;
      ++v7;
      v6 -= 8;
    }
    while (v6);
  }
LABEL_11:
  if (v3 != (WTF *)&qword_1EE3416B0 && v3)
  {
    if ((WTF *)qword_1EE3416A0 == v3)
    {
      qword_1EE3416A0 = 0;
      dword_1EE3416A8 = 0;
    }
    return WTF::fastFree(v3, a2);
  }
  return result;
}

char *WTF::map<0ul,WTF::CrashOnOverflow,16ul,WTF::WeakHashSet<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WebKit::StorageAccessPromptQuirkObserver&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1},WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>@<X0>(_QWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  return WTF::Mapper<WTF::WeakHashSet<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WebKit::StorageAccessPromptQuirkObserver&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1},WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits> &,void>::map((uint64_t)a2, a1);
}

void sub_19700E350(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

char *WTF::Mapper<WTF::WeakHashSet<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WebKit::StorageAccessPromptQuirkObserver&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1},WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits> &,void>::map(uint64_t a1, _QWORD **a2)
{
  uint64_t v4;
  uint64_t v5;
  char *result;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;

  if (*a2)
  {
    v4 = *((unsigned int *)*a2 - 3);
    if ((_DWORD)v4)
    {
      if (v4 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x19700E468);
      }
      v5 = WTF::fastMalloc((WTF *)(8 * v4));
      *(_DWORD *)(a1 + 8) = v4;
      *(_QWORD *)a1 = v5;
    }
  }
  result = (char *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a2);
  v7 = result;
  v9 = v8;
  if (*a2)
    v10 = (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)];
  else
    v10 = 0;
  if ((char *)v10 != result)
  {
    do
    {
      v11 = *(_QWORD *)(*(_QWORD *)v7 + 8);
      if (v11)
      {
        result = (char *)WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v11 + 8), *(_QWORD *)(*(_QWORD *)v7 + 8));
        v12 = *(unsigned int **)(v11 + 8);
        if (v12)
        {
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 + 1, v12));
        }
      }
      else
      {
        v12 = 0;
      }
      v14 = *(unsigned int *)(a1 + 12);
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v14) = v12;
      *(_DWORD *)(a1 + 12) = v14 + 1;
      while (1)
      {
        v7 += 8;
        if (v7 == v9)
          break;
        if ((unint64_t)(*(_QWORD *)v7 + 1) > 1)
          goto LABEL_19;
      }
      v7 = v9;
LABEL_19:
      ;
    }
    while (v7 != (char *)v10);
  }
  return result;
}

unsigned int *WTF::VectorDestructor<true,WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::destruct(unsigned int *result, void *a2)
{
  unsigned int **v3;
  unsigned int v4;
  unsigned int v5;

  if (result != a2)
  {
    v3 = (unsigned int **)result;
    do
    {
      result = *v3;
      *v3 = 0;
      if (result)
      {
        do
        {
          v4 = __ldaxr(result);
          v5 = v4 - 1;
        }
        while (__stlxr(v5, result));
        if (!v5)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
        }
      }
      ++v3;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit34StorageAccessPromptQuirkController14observeUpdatesEONS_8FunctionIFvvEEEEUb1_E3__3vJEE4callEv(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;

  v1 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 24);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E34B6BA8;
  v4 = v2;
  WTF::WeakHashSet<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v1, &v4);
  result = (uint64_t)v4;
  v4 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19700E548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit34StorageAccessPromptQuirkController14observeUpdatesEONS_8FunctionIFvvEEEEUb1_ENK3__3clEvEUlRT_E_vJRNS2_32StorageAccessPromptQuirkObserverEEE4callESD_(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 16))(*(_QWORD *)(a2 + 16));
}

uint64_t WTF::Detail::CallableWrapper<WebKit::StorageAccessPromptQuirkController::setCachedQuirksForTesting(WTF::Vector<WebCore::OrganizationStorageAccessPromptQuirk,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebKit::StorageAccessPromptQuirkObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 16))(*(_QWORD *)(a2 + 16));
}

uint64_t WTF::Detail::CallableWrapper<WebKit::StorageAccessPromptQuirkController::initialize(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;

  v1 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 24);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E34B6C20;
  v4 = v2;
  WTF::WeakHashSet<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v1, &v4);
  result = (uint64_t)v4;
  v4 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19700E608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit34StorageAccessPromptQuirkController10initializeEvENK3__0clEvEUlRT_E_vJRNS2_32StorageAccessPromptQuirkObserverEEE4callES9_(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 16))(*(_QWORD *)(a2 + 16));
}

char *WTF::map<0ul,WTF::CrashOnOverflow,16ul,WTF::WeakHashSet<WebKit::StorageAccessUserAgentStringQuirkObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WebKit::StorageAccessUserAgentStringQuirkObserver&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1},WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>>@<X0>(_QWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  return WTF::Mapper<WTF::WeakHashSet<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WebKit::StorageAccessPromptQuirkObserver&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1},WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits> &,void>::map((uint64_t)a2, a1);
}

void sub_19700E674(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit43StorageAccessUserAgentStringQuirkController14observeUpdatesEONS_8FunctionIFvvEEEEUb2_E3__6vJEE4callEv(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;

  v1 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 16);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E34B6C70;
  v4 = v2;
  WTF::WeakHashSet<WebKit::StorageAccessUserAgentStringQuirkObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v1, &v4);
  result = (uint64_t)v4;
  v4 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19700E6F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit43StorageAccessUserAgentStringQuirkController14observeUpdatesEONS_8FunctionIFvvEEEEUb2_ENK3__6clEvEUlRT_E_vJRNS2_41StorageAccessUserAgentStringQuirkObserverEEE4callESD_(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 16))(*(_QWORD *)(a2 + 16));
}

uint64_t WTF::Detail::CallableWrapper<WebKit::StorageAccessUserAgentStringQuirkController::setCachedQuirksForTesting(WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> &&)::$_0,void,WebKit::StorageAccessUserAgentStringQuirkObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 16))(*(_QWORD *)(a2 + 16));
}

uint64_t WTF::Detail::CallableWrapper<WebKit::StorageAccessUserAgentStringQuirkController::initialize(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;

  v1 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 16);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E34B6CE8;
  v4 = v2;
  WTF::WeakHashSet<WebKit::StorageAccessUserAgentStringQuirkObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v1, &v4);
  result = (uint64_t)v4;
  v4 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19700E7B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit43StorageAccessUserAgentStringQuirkController10initializeEvENK3__0clEvEUlRT_E_vJRNS2_41StorageAccessUserAgentStringQuirkObserverEEE4callES9_(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 16))(*(_QWORD *)(a2 + 16));
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::allocateTable(unsigned int a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE *v5;

  v2 = WTF::fastMalloc((WTF *)(16 * a1 + 16));
  result = v2 + 16;
  if (a1)
  {
    v4 = a1;
    v5 = (_BYTE *)(v2 + 24);
    do
    {
      *((_QWORD *)v5 - 1) = 0;
      *v5 = 0;
      v5 += 16;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t Table;
  WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::ASCIICaseInsensitiveHash *v18;
  WTF::StringImpl *v19;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  Table = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::allocateTable(a2);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v12 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = v6;
    do
    {
      if (*(_QWORD *)v14 != -1)
      {
        if (WTF::equal(*(WTF **)v14, 0, v11))
        {
          v15 = *(WTF::StringImpl **)v14;
          *(_QWORD *)v14 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v10);
            else
              *(_DWORD *)v15 -= 2;
          }
        }
        else
        {
          v16 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::lookupForReinsert(a1, (WTF::ASCIICaseInsensitiveHash **)v14);
          v17 = *(WTF::StringImpl **)v16;
          *(_QWORD *)v16 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, v10);
            else
              *(_DWORD *)v17 -= 2;
          }
          v18 = *(WTF::ASCIICaseInsensitiveHash **)v14;
          *(_QWORD *)v14 = 0;
          *(_QWORD *)v16 = v18;
          *(_BYTE *)(v16 + 8) = *(_BYTE *)(v14 + 8);
          v19 = *(WTF::StringImpl **)v14;
          *(_QWORD *)v14 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, v10);
            else
              *(_DWORD *)v19 -= 2;
          }
          if (v14 == a3)
            v12 = v16;
        }
      }
      v14 += 16;
      --v13;
    }
    while (v13);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::lookupForReinsert(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  const WTF::StringImpl *v5;
  int v6;
  uint64_t v7;
  int v8;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2);
  v6 = 0;
  do
  {
    v7 = v4 & v3;
    v8 = WTF::equal(*(WTF **)(v2 + 16 * v7), 0, v5);
    v4 = ++v6 + v7;
  }
  while (!v8);
  return v2 + 16 * v7;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v2;
  int v5;
  unsigned int v6;
  WTF **v7;
  const WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  int v10;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v6 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2) & v5;
  v7 = (WTF **)(v2 + 16 * v6);
  if ((WTF::equal(*v7, 0, v8) & 1) != 0)
  {
LABEL_7:
    if (*a1)
      return *a1 + 16 * *(unsigned int *)(*a1 - 4);
    else
      return 0;
  }
  else
  {
    v10 = 1;
    while (*v7 == (WTF *)-1 || (WTF::equalIgnoringASCIICase(*v7, *a2, v9) & 1) == 0)
    {
      v6 = (v6 + v10) & v5;
      v7 = (WTF **)(v2 + 16 * v6);
      ++v10;
      if (WTF::equal(*v7, 0, v9))
        goto LABEL_7;
    }
  }
  return (uint64_t)v7;
}

_DWORD *WebKit::RemoteWebLockRegistry::didReceiveMessage(_DWORD *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  _DWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  unsigned __int8 v9;
  char v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v3 = this;
  v13 = *MEMORY[0x1E0C80C00];
  ++this[2];
  v4 = *((unsigned __int16 *)a3 + 25);
  if (v4 == 1420)
  {
    this = (_DWORD *)IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::UUID>>>((uint64_t *)a3, &v5);
    if (v9)
    {
      v11 = v7;
      v12 = v8;
      this = WebKit::RemoteWebLockRegistry::didStealLock((uint64_t)v3, v5, v6, (uint64_t *)&v11);
    }
  }
  else if (v4 == 1419)
  {
    this = IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::UUID>,BOOL>>((uint64_t *)a3, &v5);
    if (v10)
    {
      v11 = v7;
      v12 = v8;
      this = WebKit::RemoteWebLockRegistry::didCompleteLockRequest((uint64_t)v3, v5, v6, (uint64_t *)&v11, v9);
    }
  }
  if (v3[2] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return this;
}

_DWORD *`non-virtual thunk to'WebKit::RemoteWebLockRegistry::didReceiveMessage(WebKit::RemoteWebLockRegistry *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  return WebKit::RemoteWebLockRegistry::didReceiveMessage((_DWORD *)this - 4, a2, a3);
}

WebKit::ServiceWorkerDownloadTask *WebKit::ServiceWorkerDownloadTask::didReceiveMessage(WebKit::ServiceWorkerDownloadTask *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  WebKit::ServiceWorkerDownloadTask *v3;
  WTF::StringImpl *v4;
  void *v5;
  WebKit::ServiceWorkerDownloadTask *v6;
  char v7;
  char v8;
  char v9;

  v3 = this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x58F:
      IPC::Decoder::decode<std::tuple<WebCore::ResourceError>>((uint64_t *)a3, &v6);
      if (v9)
        WebKit::ServiceWorkerDownloadTask::didFail((uint64_t)v3, (uint64_t *)&v6);
      this = (WebKit::ServiceWorkerDownloadTask *)std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v6, v4);
      break;
    case 0x590:
      this = (WebKit::ServiceWorkerDownloadTask *)WebKit::ServiceWorkerDownloadTask::didFinish(this, (int *)a2);
      break;
    case 0x591:
      IPC::Decoder::decode<std::tuple<IPC::SharedBufferReference,unsigned long long>>((uint64_t *)a3, &v6);
      if (v8)
        WebKit::ServiceWorkerDownloadTask::didReceiveData(v3, (const IPC::SharedBufferReference *)&v6);
      this = (WebKit::ServiceWorkerDownloadTask *)std::__optional_destruct_base<std::tuple<IPC::SharedBufferReference,unsigned long long>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v6, v5);
      break;
    case 0x592:
      this = IPC::Decoder::decode<std::tuple<IPC::FormDataReference>>((uint64_t *)a3, (uint64_t)&v6);
      if (v7)
      {
        this = (WebKit::ServiceWorkerDownloadTask *)WebKit::ServiceWorkerDownloadTask::didReceiveFormData((uint64_t)v3);
        if (v7)
        {
          this = v6;
          v6 = 0;
          if (this)
            this = (WebKit::ServiceWorkerDownloadTask *)WTF::RefCounted<WebCore::FormData>::deref(this);
        }
      }
      break;
    default:
      return this;
  }
  return this;
}

WebKit::ServiceWorkerDownloadTask *`non-virtual thunk to'WebKit::ServiceWorkerDownloadTask::didReceiveMessage(WebKit::ServiceWorkerDownloadTask *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  return WebKit::ServiceWorkerDownloadTask::didReceiveMessage((WebKit::ServiceWorkerDownloadTask *)((char *)this - 560), a2, a3);
}

_DWORD *WebKit::WebBroadcastChannelRegistry::didReceiveMessage(_DWORD *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  _DWORD *v3;
  int v4;

  v3 = this;
  v4 = this[2];
  this[2] = v4 + 1;
  if (*((_WORD *)a3 + 25) == 1545)
  {
    this = (_DWORD *)IPC::handleMessageAsync<Messages::WebBroadcastChannelRegistry::PostMessageToRemote,WebKit::WebBroadcastChannelRegistry,WebKit::WebBroadcastChannelRegistry,void ()(WebCore::ClientOrigin const&,WTF::String const&,WebCore::MessageWithMessagePorts &&,WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, _BYTE *, uint64_t *, uint64_t *, _QWORD **))WebKit::WebBroadcastChannelRegistry::postMessageToRemote, 0);
    v4 = v3[2] - 1;
  }
  if (!v4)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  v3[2] = v4;
  return this;
}

uint64_t IPC::handleMessageAsync<Messages::WebBroadcastChannelRegistry::PostMessageToRemote,WebKit::WebBroadcastChannelRegistry,WebKit::WebBroadcastChannelRegistry,void ()(WebCore::ClientOrigin const&,WTF::String const&,WebCore::MessageWithMessagePorts &&,WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, _BYTE *, uint64_t *, uint64_t *, _QWORD **), uint64_t a5)
{
  void *v10;
  unint64_t v11;
  _QWORD *v12;
  unsigned __int8 **v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v17;
  unsigned __int8 **v18;
  _QWORD *v19;
  _BYTE v20[64];
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<std::tuple<WebCore::ClientOrigin,WTF::String,WebCore::MessageWithMessagePorts>>(a2, v20);
  if (v23)
  {
    v11 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if ((_BYTE)v10)
    {
      v17 = v11;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v18, a1);
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v12 = off_1E34B6D20;
      v12[1] = v17;
      v13 = v18;
      v18 = 0;
      v19 = v12;
      v12[2] = v13;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v18);
      if (!v23)
        __break(1u);
      v14 = (_QWORD *)(a3 + (a5 >> 1));
      if ((a5 & 1) != 0)
        a4 = *(void (**)(_QWORD *, _BYTE *, uint64_t *, uint64_t *, _QWORD **))(*v14 + a4);
      a4(v14, v20, &v21, &v22, &v19);
      v15 = v19;
      v19 = 0;
      if (v15)
        (*(void (**)(_QWORD *))(*v15 + 8))(v15);
    }
  }
  return std::__optional_destruct_base<std::tuple<WebCore::ClientOrigin,WTF::String,WebCore::MessageWithMessagePorts>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v20, v10);
}

void WebKit::WebLockRegistryProxy::didReceiveMessage(WebKit::WebLockRegistryProxy *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  uint64_t *v3;
  WTF::StringImpl *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 v16;
  WTF::StringImpl *v17;
  char v18;
  char v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  BOOL v26;
  unsigned int v27;
  BOOL v28;
  char v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  char v50;
  WTF::StringImpl *v51;
  char v52;
  _BYTE v53[24];
  int v54;
  _BYTE v55[24];
  int v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  WTF::StringImpl *v60;
  char v61;
  BOOL v62;
  BOOL v63;
  char v64;
  __int128 v65;
  __int128 v66;
  _BYTE v67[32];
  char v68;
  __int128 v69;
  __int128 v70;
  char v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v3 = (uint64_t *)a3;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x71F:
      IPC::Decoder::decode<std::tuple<WebCore::ClientOrigin,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::UUID>,WTF::String>>((uint64_t)v53, (uint64_t *)a3);
      if (!v64)
        goto LABEL_15;
      v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3);
      if (!(_BYTE)v6)
        goto LABEL_15;
      *(_QWORD *)&v65 = v7;
      v3 = (uint64_t *)&v65 + 1;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v65 + 1, a2);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v8 = off_1E34B6D48;
      v8[1] = v65;
      v9 = *((_QWORD *)&v65 + 1);
      *((_QWORD *)&v65 + 1) = 0;
      v8[2] = v9;
      *(_QWORD *)&v69 = v8;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v65 + 1);
      if (!v64)
        goto LABEL_62;
      v65 = v58;
      v66 = v59;
      WebKit::WebLockRegistryProxy::abortLockRequest((uint64_t)this, (uint64_t)v53, v57, *((uint64_t *)&v57 + 1), (uint64_t)&v65, (uint64_t)&v60, (uint64_t *)&v69);
      v10 = v69;
      *(_QWORD *)&v69 = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      goto LABEL_15;
    case 0x720:
      IPC::Decoder::decode<WebCore::ClientOrigin>((uint64_t *)a3, &v65);
      if (v68)
      {
        IPC::Decoder::decode<WebCore::ProcessQualified<WTF::UUID>>(v3, (uint64_t)&v69);
        v19 = v71;
        if (v71)
        {
          if (!v68)
            goto LABEL_62;
          v53[0] = 0;
          v54 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v53, (uint64_t)&v65);
          v55[0] = 0;
          v56 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v55, (uint64_t)v67);
          v57 = v69;
          v58 = v70;
          v19 = 1;
        }
        else
        {
          v53[0] = 0;
        }
        LOBYTE(v59) = v19;
      }
      else
      {
        v53[0] = 0;
        LOBYTE(v59) = 0;
      }
      std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v65);
      if ((_BYTE)v59
        || (v35 = *v3, v36 = v3[1], *v3 = 0, v3[1] = 0, (v37 = v3[3]) != 0)
        && v36
        && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v35), (_BYTE)v59))
      {
        v65 = v57;
        v66 = v58;
        WebKit::WebLockRegistryProxy::clientIsGoingAway(this, (uint64_t)v53, (uint64_t)&v65);
        if ((_BYTE)v59)
        {
          if (v56 != -1)
            ((void (*)(__int128 *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_2[v56])(&v65, v55);
          v56 = -1;
          if (v54 != -1)
            ((void (*)(__int128 *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_2[v54])(&v65, v53);
        }
      }
      return;
    case 0x721:
      IPC::Decoder::decode<std::tuple<WebCore::ClientOrigin,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::UUID>,WTF::String>>((uint64_t)v53, (uint64_t *)a3);
      if (v64)
      {
        v65 = v58;
        v66 = v59;
        WebKit::WebLockRegistryProxy::releaseLock((uint64_t)this, (uint64_t)v53, v57, *((uint64_t *)&v57 + 1), (uint64_t)&v65);
      }
LABEL_15:
      std::__optional_destruct_base<std::tuple<WebCore::ClientOrigin,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::UUID>,WTF::String>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v53, v6);
      return;
    case 0x722:
      IPC::Decoder::decode<WebCore::ClientOrigin>((uint64_t *)a3, &v65);
      if (!v68
        || (IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(v3, (uint64_t)&v49), !v50)|| (IPC::Decoder::decode<WebCore::ProcessQualified<WTF::UUID>>(v3, (uint64_t)&v69), !v71)|| (IPC::Decoder::decode<WTF::String>(v3, &v51), !v52))
      {
        v53[0] = 0;
        v64 = 0;
        goto LABEL_27;
      }
      v16 = IPC::Decoder::decode<WebCore::GraphicsContext::RequiresClipToRect>(v3);
      if (v16 <= 0xFFu)
        goto LABEL_21;
      v22 = v3[1];
      v17 = (WTF::StringImpl *)*v3;
      v23 = v3[2] - *v3;
      if (v22 <= v23)
      {
        v38 = 0;
        v39 = 0;
        *v3 = 0;
        v3[1] = 0;
        v40 = v3[3];
        if (v40)
        {
          if (v22)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v40 + 16))(v40);
            v39 = *v3;
            v38 = v3[1];
          }
          else
          {
            v38 = 0;
            v39 = 0;
          }
        }
        goto LABEL_72;
      }
      v24 = (unsigned __int8 *)v17 + v23;
      v3[2] = (uint64_t)(v24 + 1);
      if (!v17)
      {
        v38 = v22;
        v39 = 0;
LABEL_72:
        v22 = 0;
        v17 = 0;
        *v3 = 0;
        v3[1] = 0;
        v41 = v3[3];
        if (v41)
        {
          if (v38)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v41 + 16))(v41, v39, v38);
            v17 = (WTF::StringImpl *)*v3;
            v22 = v3[1];
          }
          else
          {
            v22 = 0;
            v17 = 0;
          }
        }
        goto LABEL_73;
      }
      v25 = *v24;
      if (v25 >= 2)
      {
LABEL_73:
        *v3 = 0;
        v3[1] = 0;
        v42 = v3[3];
        if (v42 && v22)
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v42 + 16))(v42, v17);
        goto LABEL_21;
      }
      v26 = v25 != 0;
      if (v22 <= v24 + 1 - (unsigned __int8 *)v17)
      {
        v43 = 0;
        v44 = 0;
        *v3 = 0;
        v3[1] = 0;
        v45 = v3[3];
        if (v45)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v45 + 16))(v45);
          v43 = 0;
          v17 = (WTF::StringImpl *)*v3;
          v47 = v3[1];
          v48 = v3[3];
          *v3 = 0;
          v3[1] = 0;
          v44 = 0;
          if (v48)
          {
            if (v47)
            {
              (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v48 + 16))(v48, v17);
              v44 = *v3;
              v43 = v3[1];
            }
          }
        }
        goto LABEL_77;
      }
      v3[2] = (uint64_t)(v24 + 2);
      v27 = v24[1];
      if (v27 >= 2)
      {
        v43 = v22;
        v44 = (uint64_t)v17;
LABEL_77:
        *v3 = 0;
        v3[1] = 0;
        v46 = v3[3];
        if (v46 && v43)
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v46 + 16))(v46, v44, v43);
LABEL_21:
        v18 = 0;
        v53[0] = 0;
        goto LABEL_57;
      }
      v28 = v27 != 0;
      if (!v68 || !v50 || !v71 || !v52)
      {
LABEL_62:
        __break(1u);
        goto LABEL_63;
      }
      v29 = v16;
      v53[0] = 0;
      v54 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v53, (uint64_t)&v65);
      v55[0] = 0;
      v56 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v55, (uint64_t)v67);
      v57 = v49;
      v58 = v69;
      v59 = v70;
      v30 = v51;
      v51 = 0;
      v60 = v30;
      v61 = v29;
      v62 = v26;
      v18 = 1;
      v63 = v28;
LABEL_57:
      v64 = v18;
      if (v52)
      {
        v31 = v51;
        v51 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, v17);
          else
            *(_DWORD *)v31 -= 2;
        }
      }
LABEL_27:
      std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v65);
      if (v64)
        goto LABEL_28;
LABEL_63:
      v32 = *v3;
      v33 = v3[1];
      *v3 = 0;
      v3[1] = 0;
      v34 = v3[3];
      if (!v34)
        return;
      if (!v33)
        return;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v32);
      if (!v64)
        return;
LABEL_28:
      v65 = v58;
      v66 = v59;
      WebKit::WebLockRegistryProxy::requestLock((uint64_t)this, (uint64_t)v53, v57, *((uint64_t *)&v57 + 1), &v65, (uint64_t)&v60);
      if (v64)
      {
        v21 = v60;
        v60 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, v20);
          else
            *(_DWORD *)v21 -= 2;
        }
        if (v56 != -1)
          ((void (*)(__int128 *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_2[v56])(&v65, v55);
        v56 = -1;
        if (v54 != -1)
          ((void (*)(__int128 *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_2[v54])(&v65, v53);
      }
      return;
    case 0x723:
      IPC::Decoder::decode<std::tuple<WebCore::ClientOrigin>>((uint64_t *)a3, v53);
      if (!(_BYTE)v57)
        goto LABEL_12;
      v11 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3);
      if (!v12)
        goto LABEL_12;
      *(_QWORD *)&v65 = v11;
      v3 = (uint64_t *)&v65 + 1;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v65 + 1, a2);
      v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v13 = off_1E34B6D70;
      v13[1] = v65;
      v14 = *((_QWORD *)&v65 + 1);
      *((_QWORD *)&v65 + 1) = 0;
      v13[2] = v14;
      *(_QWORD *)&v69 = v13;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v65 + 1);
      if (!(_BYTE)v57)
        goto LABEL_62;
      WebKit::WebLockRegistryProxy::snapshot((uint64_t)this, (uint64_t)v53, (uint64_t *)&v69);
      v15 = v69;
      *(_QWORD *)&v69 = 0;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
LABEL_12:
      std::__optional_destruct_base<std::tuple<WebCore::ClientOrigin>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v53);
      return;
    default:
      return;
  }
}

unsigned int *WebKit::WebPermissionController::didReceiveMessage(unsigned int *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;

  v3 = this;
  v4 = this + 2;
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  if (*((_WORD *)a3 + 25) == 2537)
    this = (unsigned int *)IPC::handleMessage<Messages::WebPermissionController::permissionChanged,WebKit::WebPermissionController,WebKit::WebPermissionController,void ()(WebCore::PermissionName,WebCore::SecurityOriginData const&)>((uint64_t)a2, (uint64_t *)a3, (uint64_t)this, (uint64_t (*)(_QWORD *, _QWORD, _BYTE *))0x28, 1);
  if (v3)
  {
    do
    {
      v6 = __ldaxr(v4);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v4));
    if (!v7)
    {
      atomic_store(1u, v3 + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return this;
}

uint64_t IPC::handleMessage<Messages::WebPermissionController::permissionChanged,WebKit::WebPermissionController,WebKit::WebPermissionController,void ()(WebCore::PermissionName,WebCore::SecurityOriginData const&)>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD *, _QWORD, _BYTE *), uint64_t a5)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  _BYTE v11[8];
  _BYTE v12[24];
  int v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  result = IPC::Decoder::decode<std::tuple<WebCore::PermissionName,WebCore::SecurityOriginData>>(a2, v11);
  if (v14)
  {
    v9 = (_QWORD *)(a3 + (a5 >> 1));
    if ((a5 & 1) != 0)
      a4 = *(uint64_t (**)(_QWORD *, _QWORD, _BYTE *))(*v9 + a4);
    result = a4(v9, v11[0], v12);
    if (v14)
    {
      if (v13 != -1)
        return ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_2[v13])(&v10, v12);
    }
  }
  return result;
}

unsigned int *`non-virtual thunk to'WebKit::WebPermissionController::didReceiveMessage(WebKit::WebPermissionController *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  return WebKit::WebPermissionController::didReceiveMessage((unsigned int *)this - 4, a2, a3);
}

unint64_t WebKit::WebPermissionControllerProxy::didReceiveMessage(unint64_t this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  char v10;
  unint64_t v11;
  unsigned __int8 *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD *v21;
  unsigned __int8 **v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  char v26;
  _BYTE v27[24];
  int v28;
  _BYTE v29[24];
  int v30;
  _BYTE v31[8];
  __int128 v32;
  unsigned __int8 v33;
  char v34;
  unint64_t v35;
  unsigned __int8 **v36[3];
  uint64_t v37;
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (*((_WORD *)a3 + 25) != 2536)
    return this;
  v3 = (uint64_t *)a3;
  v5 = this;
  IPC::Decoder::decode<WebCore::ClientOrigin>((uint64_t *)a3, &v35);
  if (!v38)
  {
LABEL_12:
    v27[0] = 0;
    v34 = 0;
    goto LABEL_19;
  }
  v6 = IPC::Decoder::decode<WebCore::PermissionName>(v3);
  if (!*v3)
  {
    v14 = v3[1];
    *v3 = 0;
    v3[1] = 0;
    v15 = v3[3];
    if (v15 && v14)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 16))(v15, 0);
    goto LABEL_12;
  }
  v9 = v6;
  if ((unsigned __int16)v6 <= 0xFFu)
    goto LABEL_30;
  v6 = (uint64_t)IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v3, &v25);
  v10 = v26;
  if (!v26)
    goto LABEL_17;
  v8 = v3[1];
  v7 = *v3;
  v11 = v3[2] - *v3;
  if (v8 <= v11)
  {
    v16 = 0;
    v17 = 0;
    *v3 = 0;
    v3[1] = 0;
    v18 = v3[3];
    if (v18)
    {
      if (v8)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
        v17 = *v3;
        v16 = v3[1];
      }
      else
      {
        v16 = 0;
        v17 = 0;
      }
    }
    goto LABEL_14;
  }
  v12 = (unsigned __int8 *)(v7 + v11);
  v3[2] = (uint64_t)(v12 + 1);
  if (!v7)
  {
    v16 = v8;
    v17 = 0;
LABEL_14:
    v8 = 0;
    v7 = 0;
    *v3 = 0;
    v3[1] = 0;
    v19 = v3[3];
    if (v19)
    {
      if (v16)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v17, v16);
        v7 = *v3;
        v8 = v3[1];
      }
      else
      {
        v8 = 0;
        v7 = 0;
      }
    }
LABEL_15:
    *v3 = 0;
    v3[1] = 0;
    v6 = v3[3];
    if (v6)
      goto LABEL_31;
    goto LABEL_16;
  }
  v13 = *v12;
  if (v13 >= 4)
    goto LABEL_15;
  if (!v38)
    goto LABEL_30;
  v27[0] = 0;
  v28 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v27, (uint64_t)&v35);
  v29[0] = 0;
  v30 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v29, (uint64_t)&v37);
  v31[0] = v9;
  v32 = v25;
  v33 = v13;
  v10 = 1;
  while (1)
  {
    v34 = v10;
LABEL_19:
    std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v35);
    if (!v34)
    {
      v23 = *v3;
      v24 = v3[1];
      *v3 = 0;
      v3[1] = 0;
      this = v3[3];
      if (!this)
        return this;
      if (!v24)
        return this;
      this = (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)this + 16))(this, v23);
      if (!v34)
        return this;
    }
    this = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3);
    if (!v20)
      goto LABEL_24;
    v35 = this;
    v3 = (uint64_t *)v36;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v36, a2);
    v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v21 = off_1E34B6D98;
    v21[1] = v35;
    v22 = v36[0];
    v36[0] = 0;
    v21[2] = v22;
    *(_QWORD *)&v25 = v21;
    v6 = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v36);
    if (v34)
    {
      WebKit::WebPermissionControllerProxy::query(v5, (const WebCore::ClientOrigin *)v27, v31, v32, SBYTE8(v32), v33, (uint64_t *)&v25);
      this = v25;
      *(_QWORD *)&v25 = 0;
      if (this)
        this = (*(uint64_t (**)(unint64_t))(*(_QWORD *)this + 8))(this);
LABEL_24:
      if (v34)
      {
        if (v30 != -1)
          this = ((uint64_t (*)(unint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_2[v30])(&v35, v29);
        v30 = -1;
        if (v28 != -1)
          return ((uint64_t (*)(unint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_2[v28])(&v35, v27);
      }
      return this;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    if (v8)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v7);
LABEL_16:
    v10 = 0;
LABEL_17:
    v27[0] = 0;
  }
}

_QWORD *WebKit::WebScreenOrientationManager::didReceiveMessage(_QWORD *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v3;

  if (*((_WORD *)a3 + 25) == 2773)
  {
    v3 = (uint64_t)this;
    this = (_QWORD *)IPC::Decoder::decode<std::tuple<WebCore::ScreenOrientationType>>((uint64_t *)a3);
    if ((unsigned __int16)this >= 0x100u)
      return WebKit::WebScreenOrientationManager::orientationDidChange(v3, this);
  }
  return this;
}

_QWORD *`non-virtual thunk to'WebKit::WebScreenOrientationManager::didReceiveMessage(WebKit::WebScreenOrientationManager *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  return WebKit::WebScreenOrientationManager::didReceiveMessage((_QWORD *)this - 4, a2, a3);
}

WebKit::WebScreenOrientationManagerProxy *WebKit::WebScreenOrientationManagerProxy::didReceiveMessage(WebKit::WebScreenOrientationManagerProxy *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  WebKit::WebScreenOrientationManagerProxy *v3;
  int v4;
  unsigned __int16 v7;
  unsigned __int8 v8;
  char v9;
  WebKit::WebScreenOrientationManagerProxy *v10;
  unsigned __int8 **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 **v15;
  WebKit::WebScreenOrientationManagerProxy *v16;

  v3 = this;
  v4 = *((unsigned __int16 *)a3 + 25);
  switch(v4)
  {
    case 2772:
      return (WebKit::WebScreenOrientationManagerProxy *)WebKit::WebScreenOrientationManagerProxy::unlock((uint64_t)this);
    case 2771:
      this = (WebKit::WebScreenOrientationManagerProxy *)IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if ((unsigned __int16)this >= 0x100u)
        *((_BYTE *)v3 + 40) = this != 0;
      break;
    case 2770:
      v7 = IPC::Decoder::decode<WebCore::ScreenOrientationLockType>((uint64_t *)a3);
      if (v7 <= 0xFFu)
      {
        v12 = *(_QWORD *)a3;
        v13 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        this = (WebKit::WebScreenOrientationManagerProxy *)*((_QWORD *)a3 + 3);
        if (this && v13)
          return (WebKit::WebScreenOrientationManagerProxy *)(*(uint64_t (**)(WebKit::WebScreenOrientationManagerProxy *, uint64_t))(*(_QWORD *)this + 16))(this, v12);
      }
      else
      {
        v8 = v7;
        this = (WebKit::WebScreenOrientationManagerProxy *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
        if (v9)
        {
          v14 = (uint64_t)this;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v15, a2);
          v10 = (WebKit::WebScreenOrientationManagerProxy *)WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v10 = off_1E34B6DC0;
          *((_QWORD *)v10 + 1) = v14;
          v11 = v15;
          v15 = 0;
          v16 = v10;
          *((_QWORD *)v10 + 2) = v11;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v15);
          WebKit::WebScreenOrientationManagerProxy::lock(v3, v8, (uint64_t *)&v16);
          this = v16;
          v16 = 0;
          if (this)
            return (WebKit::WebScreenOrientationManagerProxy *)(*(uint64_t (**)(WebKit::WebScreenOrientationManagerProxy *))(*(_QWORD *)this + 8))(this);
        }
      }
      break;
  }
  return this;
}

BOOL WebKit::WebScreenOrientationManagerProxy::didReceiveSyncMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  int v4;
  IPC::Encoder *v6;
  _QWORD *v7;
  unsigned __int8 **v8;
  uint64_t v9;
  IPC::Encoder *v11;
  unsigned __int8 **v12[2];
  _QWORD *v13;

  v4 = *(unsigned __int16 *)(a3 + 50);
  if (v4 == 3735)
  {
    v6 = *a4;
    *a4 = 0;
    v11 = v6;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v12, a2);
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v7 = off_1E34B6DE8;
    v7[1] = v11;
    v8 = v12[0];
    v12[0] = 0;
    v7[2] = v8;
    v13 = v7;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v12);
    WebKit::WebScreenOrientationManagerProxy::currentOrientation(a1, (uint64_t *)&v13);
    v9 = (uint64_t)v13;
    v13 = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  return v4 == 3735;
}

_QWORD *IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::UUID>,BOOL>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::UUID>,BOOL>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[64])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::UUID>,BOOL>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  _BYTE v5[24];

  result = (_QWORD *)IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)v5);
  if (v5[16])
    return IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::UUID>,BOOL>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)v5, a2);
  *a2 = 0;
  a2[64] = 0;
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::UUID>,BOOL>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  _QWORD *result;
  __int128 v7[2];
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  result = (_QWORD *)IPC::Decoder::decode<WebCore::ProcessQualified<WTF::UUID>>(a1, (uint64_t)v7);
  if (v8)
    return IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::UUID>,BOOL>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::UUID>>(a1, a2, v7, (uint64_t)a3);
  *a3 = 0;
  a3[64] = 0;
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::UUID>,BOOL>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::UUID>>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  BOOL v11;
  __int128 v12;
  __int128 v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = result[1];
  v7 = *result;
  v8 = result[2] - *result;
  if (v6 <= v8)
  {
LABEL_9:
    v15 = 0;
    v16 = 0;
    *result = 0;
    result[1] = 0;
    v17 = result[3];
    if (v17)
    {
      v20 = result;
      v23 = a4;
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
        result = v20;
        a4 = v23;
        v16 = *v20;
        v15 = v20[1];
      }
      else
      {
        v15 = 0;
        v16 = 0;
      }
    }
    goto LABEL_10;
  }
  v9 = (unsigned __int8 *)(v7 + v8);
  result[2] = v9 + 1;
  if (!v7)
  {
    v15 = v6;
    v16 = 0;
LABEL_10:
    v6 = 0;
    v7 = 0;
    *result = 0;
    result[1] = 0;
    v18 = result[3];
    if (v18)
    {
      v19 = result;
      v22 = a4;
      if (v15)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v18 + 16))(v18, v16, v15);
        result = v19;
        a4 = v22;
        v7 = *v19;
        v6 = v19[1];
      }
      else
      {
        v6 = 0;
        v7 = 0;
      }
    }
    goto LABEL_11;
  }
  v10 = *v9;
  if (v10 < 2)
  {
    v11 = v10 != 0;
    if (*(_BYTE *)(a2 + 16) && *((_BYTE *)a3 + 32))
    {
      v12 = *a3;
      v13 = a3[1];
      *(_OWORD *)a4 = *(_OWORD *)a2;
      *(_OWORD *)(a4 + 16) = v12;
      *(_OWORD *)(a4 + 32) = v13;
      *(_BYTE *)(a4 + 48) = v11;
      v14 = 1;
      goto LABEL_7;
    }
    __break(1u);
    goto LABEL_9;
  }
LABEL_11:
  *result = 0;
  result[1] = 0;
  result = (_QWORD *)result[3];
  if (result && v6)
  {
    v21 = a4;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v7);
    a4 = v21;
  }
  v14 = 0;
  *(_BYTE *)a4 = 0;
LABEL_7:
  *(_BYTE *)(a4 + 64) = v14;
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::UUID>>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::UUID>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[48])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::UUID>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  _BYTE v5[24];

  result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)v5);
  if (v5[16])
    return IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::UUID>>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)v5, (uint64_t)a2);
  *a2 = 0;
  a2[48] = 0;
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::UUID>>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result;
  char v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[2];
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::UUID>>(a1, (uint64_t)v9);
  v6 = v10;
  if (v10)
  {
    if (!*(_BYTE *)(a2 + 16))
      __break(1u);
    v7 = v9[0];
    v8 = v9[1];
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(_OWORD *)(a3 + 16) = v7;
    *(_OWORD *)(a3 + 32) = v8;
    v6 = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 48) = v6;
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::ResourceError>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::ResourceError>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[80])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ResourceError>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *v3;
  uint64_t v5[10];
  char v6;

  IPC::Decoder::decode<WebCore::ResourceError>(a1, (uint64_t)v5);
  if (v6)
  {
    std::make_optional[abi:sn180100]<std::tuple<WebCore::ResourceError>,WebCore::ResourceError>(v5, (uint64_t)a2);
  }
  else
  {
    *a2 = 0;
    a2[80] = 0;
  }
  return std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5, v3);
}

void std::make_optional[abi:sn180100]<std::tuple<WebCore::ResourceError>,WebCore::ResourceError>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  *a1 = 0;
  *(_QWORD *)a2 = v4;
  WTF::URL::URL(a2 + 8, a1 + 1);
  v5 = a1[6];
  a1[6] = 0;
  *(_QWORD *)(a2 + 48) = v5;
  *(_DWORD *)(a2 + 56) = *((_DWORD *)a1 + 14);
  *(_WORD *)(a2 + 60) = *((_WORD *)a1 + 30);
  v6 = a1[8];
  a1[8] = 0;
  *(_QWORD *)(a2 + 64) = v6;
  *(_BYTE *)(a2 + 72) = *((_BYTE *)a1 + 72);
  *(_BYTE *)(a2 + 80) = 1;
}

uint64_t std::__optional_destruct_base<std::tuple<IPC::SharedBufferReference,unsigned long long>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;

  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(unsigned int **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v3)
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
    v4 = *(unsigned int **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v4)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  }
  return a1;
}

WTF::RefCountedBase *IPC::Decoder::decode<std::tuple<IPC::FormDataReference>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::RefCountedBase *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  char v9;

  result = IPC::Decoder::decode<IPC::FormDataReference>(a1, &v8);
  if (v9)
  {
    *(_QWORD *)a2 = v8;
    *(_BYTE *)(a2 + 8) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::RefCountedBase *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::RefCountedBase *)(*(uint64_t (**)(WTF::RefCountedBase *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages27WebBroadcastChannelRegistry19PostMessageToRemoteEN6WebKit27WebBroadcastChannelRegistryES8_FvRKN7WebCore12ClientOriginERKNS_6StringEONS9_23MessageWithMessagePortsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B6D20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages27WebBroadcastChannelRegistry19PostMessageToRemoteEN6WebKit27WebBroadcastChannelRegistryES8_FvRKN7WebCore12ClientOriginERKNS_6StringEONS9_23MessageWithMessagePortsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B6D20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages27WebBroadcastChannelRegistry19PostMessageToRemoteEN6WebKit27WebBroadcastChannelRegistryES8_FvRKN7WebCore12ClientOriginERKNS_6StringEONS9_23MessageWithMessagePortsEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3156;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::ClientOrigin,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::UUID>,WTF::String>>(uint64_t a1, uint64_t *a2)
{
  char v4;
  __int128 v5;
  __int128 v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  uint64_t v12;
  char v13;
  _BYTE v14[32];
  uint64_t v15;
  char v16;
  _OWORD v17[2];
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebCore::ClientOrigin>(a2, v14);
  if (v16
    && (IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a2, (uint64_t)&v10), v11)&& (IPC::Decoder::decode<WebCore::ProcessQualified<WTF::UUID>>(a2, (uint64_t)v17), v18))
  {
    IPC::Decoder::decode<WTF::String>(a2, &v12);
    v4 = v13;
    if (v13)
    {
      if (!v16 || !v11 || !v18)
        __break(1u);
      *(_BYTE *)a1 = 0;
      *(_DWORD *)(a1 + 24) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(a1, (uint64_t)v14);
      *(_BYTE *)(a1 + 32) = 0;
      *(_DWORD *)(a1 + 56) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(a1 + 32, (uint64_t)&v15);
      v5 = v17[0];
      v6 = v17[1];
      *(_OWORD *)(a1 + 64) = v10;
      *(_OWORD *)(a1 + 80) = v5;
      *(_OWORD *)(a1 + 96) = v6;
      *(_QWORD *)(a1 + 112) = v12;
      v4 = 1;
    }
    else
    {
      *(_BYTE *)a1 = 0;
    }
    *(_BYTE *)(a1 + 128) = v4;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 128) = 0;
  }
  result = std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v14);
  if (!*(_BYTE *)(a1 + 128))
  {
    v8 = *a2;
    v9 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
    {
      if (v9)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v8);
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::ClientOrigin,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::UUID>,WTF::String>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  char v8;

  if (*(_BYTE *)(a1 + 128))
  {
    v3 = *(WTF::StringImpl **)(a1 + 112);
    *(_QWORD *)(a1 + 112) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(unsigned int *)(a1 + 56);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_2[v4])(&v7, a1 + 32);
    *(_DWORD *)(a1 + 56) = -1;
    v5 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_2[v5])(&v8, a1);
    *(_DWORD *)(a1 + 24) = -1;
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20WebLockRegistryProxy16AbortLockRequestEN6WebKit20WebLockRegistryProxyES8_FvON7WebCore12ClientOriginENS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_21WebLockIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEENSC_INS_4UUIDEEEONS_6StringEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B6D48;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20WebLockRegistryProxy16AbortLockRequestEN6WebKit20WebLockRegistryProxyES8_FvON7WebCore12ClientOriginENS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_21WebLockIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEENSC_INS_4UUIDEEEONS_6StringEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B6D48;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20WebLockRegistryProxy16AbortLockRequestEN6WebKit20WebLockRegistryProxyES8_FvON7WebCore12ClientOriginENS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_21WebLockIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEENSC_INS_4UUIDEEEONS_6StringEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3268;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20WebLockRegistryProxy8SnapshotEN6WebKit20WebLockRegistryProxyES8_FvON7WebCore12ClientOriginEONS_17CompletionHandlerIFvONS9_22WebLockManagerSnapshotEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B6D70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20WebLockRegistryProxy8SnapshotEN6WebKit20WebLockRegistryProxyES8_FvON7WebCore12ClientOriginEONS_17CompletionHandlerIFvONS9_22WebLockManagerSnapshotEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B6D70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20WebLockRegistryProxy8SnapshotEN6WebKit20WebLockRegistryProxyES8_FvON7WebCore12ClientOriginEONS_17CompletionHandlerIFvONS9_22WebLockManagerSnapshotEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EE4callESE_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3269;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::VectorArgumentCoder<false,WebCore::WebLockManagerSnapshot::Info,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::WebLockManagerSnapshot::Info,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v5, a2);
  IPC::VectorArgumentCoder<false,WebCore::WebLockManagerSnapshot::Info,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::WebLockManagerSnapshot::Info,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v5, a2 + 16);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::PermissionName,WebCore::SecurityOriginData>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::PermissionName,WebCore::SecurityOriginData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[40])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::PermissionName,WebCore::SecurityOriginData>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  __int16 v5;

  result = IPC::Decoder::decode<WebCore::PermissionName>(a1);
  v5 = result;
  if ((unsigned __int16)result > 0xFFu)
    return IPC::ArgumentCoder<std::tuple<WebCore::PermissionName,WebCore::SecurityOriginData>,void>::decode<IPC::Decoder,WebCore::PermissionName>(a1, &v5, (uint64_t)a2);
  *a2 = 0;
  a2[40] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::PermissionName,WebCore::SecurityOriginData>,void>::decode<IPC::Decoder,WebCore::PermissionName>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  char v6;
  _BYTE v7[24];
  int v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  result = IPC::Decoder::decode<WebCore::SecurityOriginData>(a1, v7);
  if (v9)
  {
    if (!a2[1])
      __break(1u);
    *(_BYTE *)a3 = *a2;
    *(_BYTE *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 32) = -1;
    result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(a3 + 8, (uint64_t)v7);
    *(_BYTE *)(a3 + 40) = 1;
    if (v9)
    {
      if (v8 != -1)
        return ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_2[v8])(&v6, v7);
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 40) = 0;
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages28WebPermissionControllerProxy5QueryEN6WebKit28WebPermissionControllerProxyES8_FvRKN7WebCore12ClientOriginERKNS9_20PermissionDescriptorENSt3__18optionalINS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENS9_21PermissionQuerySourceEONS_17CompletionHandlerIFvNSH_INS9_15PermissionStateEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B6D98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages28WebPermissionControllerProxy5QueryEN6WebKit28WebPermissionControllerProxyES8_FvRKN7WebCore12ClientOriginERKNS9_20PermissionDescriptorENSt3__18optionalINS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENS9_21PermissionQuerySourceEONS_17CompletionHandlerIFvNSH_INS9_15PermissionStateEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B6D98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages28WebPermissionControllerProxy5QueryEN6WebKit28WebPermissionControllerProxyES8_FvRKN7WebCore12ClientOriginERKNS9_20PermissionDescriptorENSt3__18optionalINS_23ObjectIdentifierGenericINS7_26WebPageProxyIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENS9_21PermissionQuerySourceEONS_17CompletionHandlerIFvNSH_INS9_15PermissionStateEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EE4callESR_(uint64_t a1, __int16 a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  size_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  _BYTE *v18;
  void *v19;
  IPC::Encoder *result;
  WTF *v21;
  void *v22;
  unint64_t v23;
  size_t v24;
  char *v25;
  void *v26;
  unint64_t v27;
  size_t v28;
  char *v29;
  void *v30;
  IPC::Encoder *v31;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3445;
  *(_QWORD *)(v5 + 8) = v4;
  v6 = (void *)(v5 + 16);
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v31 = (IPC::Encoder *)v5;
  v7 = *(_QWORD *)(v5 + 544);
  v8 = v7 + 1;
  v9 = *(_QWORD *)(v5 + 552);
  if (v9 < v7 + 1)
  {
    v23 = (2 * v9 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v24 = v23;
      v23 *= 2;
    }
    while (v24 < v8);
    v25 = (char *)mmap(0, v24, 3, 4098, -1, 0);
    if (v25 == (char *)-1)
      goto LABEL_23;
    v10 = v25;
    memcpy(v25, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v26 = *(void **)(v5 + 528);
    if (v26 != v6)
      munmap(v26, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v10;
    *(_QWORD *)(v5 + 552) = v24;
    v11 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v10 = *(char **)(v5 + 528);
    v11 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v10[v11], v7 - v11);
  *(_QWORD *)(v5 + 544) = v8;
  v12 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v7);
  *(_QWORD *)(v5 + 536) = v12 + 1;
  if ((a2 & 0xFF00) != 0)
  {
    *v12 = 1;
    v13 = *(_QWORD *)(v5 + 544);
    v14 = v13 + 1;
    v15 = *(_QWORD *)(v5 + 552);
    if (v15 >= v13 + 1)
    {
      v16 = *(char **)(v5 + 528);
      v17 = *(_QWORD *)(v5 + 544);
LABEL_6:
      bzero(&v16[v17], v13 - v17);
      *(_QWORD *)(v5 + 544) = v14;
      v18 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v13);
      *(_QWORD *)(v5 + 536) = v18 + 1;
      *v18 = a2;
      goto LABEL_8;
    }
    v27 = (2 * v15 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v28 = v27;
      v27 *= 2;
    }
    while (v28 < v14);
    v29 = (char *)mmap(0, v28, 3, 4098, -1, 0);
    if (v29 != (char *)-1)
    {
      v16 = v29;
      memcpy(v29, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
      v30 = *(void **)(v5 + 528);
      if (v30 != v6)
        munmap(v30, *(_QWORD *)(v5 + 552));
      *(_QWORD *)(v5 + 528) = v16;
      *(_QWORD *)(v5 + 552) = v28;
      v17 = *(_QWORD *)(v5 + 544);
      goto LABEL_6;
    }
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x197010CF4);
  }
  *v12 = 0;
LABEL_8:
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v31, 0, 0);
  result = v31;
  v31 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v21, v22);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::ScreenOrientationType>>(uint64_t *a1)
{
  unsigned int v2;
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  v2 = (unsigned __int16)IPC::Decoder::decode<WebKit::AuthenticationChallengeDisposition>(a1);
  v3 = 256;
  if (v2 <= 0xFF)
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7)
    {
      v8 = v2;
      if (v6)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v5);
        v3 = 0;
        v2 = v8;
      }
      else
      {
        v3 = 0;
      }
    }
    else
    {
      v3 = 0;
    }
  }
  if (v2 <= 0x100)
    LOBYTE(v2) = 0;
  return v3 | v2;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages32WebScreenOrientationManagerProxy4LockEN6WebKit32WebScreenOrientationManagerProxyES8_FvN7WebCore25ScreenOrientationLockTypeEONS_17CompletionHandlerIFvONSt3__18optionalINS9_9ExceptionEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B6DC0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages32WebScreenOrientationManagerProxy4LockEN6WebKit32WebScreenOrientationManagerProxyES8_FvN7WebCore25ScreenOrientationLockTypeEONS_17CompletionHandlerIFvONSt3__18optionalINS9_9ExceptionEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B6DC0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages32WebScreenOrientationManagerProxy4LockEN6WebKit32WebScreenOrientationManagerProxyES8_FvN7WebCore25ScreenOrientationLockTypeEONS_17CompletionHandlerIFvONSt3__18optionalINS9_9ExceptionEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EE4callESG_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  void *v13;
  char *result;
  WTF *v15;
  void *v16;
  unint64_t v17;
  size_t v18;
  void *v19;
  IPC::Encoder *v20;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3501;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v20 = (IPC::Encoder *)v5;
  v6 = *(unsigned __int8 *)(a2 + 16);
  v7 = *(_QWORD *)(v5 + 544);
  v8 = v7 + 1;
  v9 = *(_QWORD *)(v5 + 552);
  if (v9 < v7 + 1)
  {
    v17 = (2 * v9 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v18 = v17;
      v17 *= 2;
    }
    while (v18 < v8);
    result = (char *)mmap(0, v18, 3, 4098, -1, 0);
    if (result == (char *)-1)
      goto LABEL_17;
    v10 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v19 = *(void **)(v5 + 528);
    if (v19 != (void *)(v5 + 16))
      munmap(v19, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v10;
    *(_QWORD *)(v5 + 552) = v18;
    v11 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v10 = *(char **)(v5 + 528);
    v11 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v10[v11], v7 - v11);
  *(_QWORD *)(v5 + 544) = v8;
  v12 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v7);
  *(_QWORD *)(v5 + 536) = v12 + 1;
  if (v6)
  {
    *v12 = 1;
    if (*(_BYTE *)(a2 + 16))
    {
      IPC::ArgumentCoder<WebCore::Exception,void>::encode((IPC::Encoder *)v5, (char *)a2);
      goto LABEL_7;
    }
    result = (char *)std::__throw_bad_optional_access[abi:sn180100]();
LABEL_17:
    __break(0xC471u);
    return result;
  }
  *v12 = 0;
LABEL_7:
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v20, 0, 0);
  result = (char *)v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
    return (char *)WTF::fastFree(v15, v16);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages32WebScreenOrientationManagerProxy18CurrentOrientationEN6WebKit32WebScreenOrientationManagerProxyES8_FvONS_17CompletionHandlerIFvN7WebCore21ScreenOrientationTypeEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B6DE8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages32WebScreenOrientationManagerProxy18CurrentOrientationEN6WebKit32WebScreenOrientationManagerProxyES8_FvONS_17CompletionHandlerIFvN7WebCore21ScreenOrientationTypeEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSB_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B6DE8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages32WebScreenOrientationManagerProxy18CurrentOrientationEN6WebKit32WebScreenOrientationManagerProxyES8_FvONS_17CompletionHandlerIFvN7WebCore21ScreenOrientationTypeEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSB_EE4callESB_(uint64_t a1, char a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  char *result;
  unint64_t v13;
  size_t v14;
  void *v15;

  v4 = (uint64_t *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 >= v6 + 1)
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
LABEL_3:
    bzero(&v9[v10], v6 - v10);
    *(_QWORD *)(v5 + 544) = v7;
    v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
    *(_QWORD *)(v5 + 536) = v11 + 1;
    *v11 = a2;
    return (char *)IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), v4, 0, 0);
  }
  v13 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v14 = v13;
    v13 *= 2;
  }
  while (v14 < v7);
  result = (char *)mmap(0, v14, 3, 4098, -1, 0);
  if (result != (char *)-1)
  {
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v15 = *(void **)(v5 + 528);
    if (v15 != (void *)(v5 + 16))
      munmap(v15, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v14;
    v10 = *(_QWORD *)(v5 + 544);
    goto LABEL_3;
  }
  __break(0xC471u);
  return result;
}

void WebKit::WebSharedWorkerContextManagerConnection::didReceiveMessage(WTF::StringImpl **this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  WTF::StringImpl *v4;
  char v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  char v10;
  char v11;
  const WebKit::WebPreferencesStore *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[168];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  switch(*((_WORD *)a3 + 25))
  {
    case 0xAD6:
      WebKit::WebSharedWorkerContextManagerConnection::close((WebKit::WebSharedWorkerContextManagerConnection *)this);
      return;
    case 0xAD7:
      IPC::Decoder::decode<std::tuple<WebCore::ClientOrigin,WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::WorkerOptions,WebCore::WorkerFetchResult,WebCore::WorkerInitializationData>>((uint64_t *)a3, &v14);
      if (v20[144])
        WebKit::WebSharedWorkerContextManagerConnection::launchSharedWorker((uint64_t)this, (uint64_t)&v14, v17, (uint64_t)&v18, (uint64_t)&v19, (uint64_t)v20);
      std::__optional_destruct_base<std::tuple<WebCore::ClientOrigin,WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::WorkerOptions,WebCore::WorkerFetchResult,WebCore::WorkerInitializationData>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v14, v4);
      return;
    case 0xAD8:
      IPC::handleMessageAsync<Messages::WebSharedWorkerContextManagerConnection::PostConnectEvent,WebKit::WebSharedWorkerContextManagerConnection,WebCore::SharedWorkerContextManager::Connection,void ()(WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier> &&,WTF::String &&,WTF::CompletionHandler<void ()(BOOL)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, MEMORY[0x1E0DD3BD0], 0);
      return;
    case 0xAD9:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v5)
        WebCore::SharedWorkerContextManager::Connection::resumeSharedWorker();
      return;
    case 0xADA:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)&v14);
      if (!v15)
        return;
      v7 = v14;
      v14 = 0;
      v8 = this[9];
      this[9] = v7;
      if (!v8)
        return;
      v9 = *(_DWORD *)v8 - 2;
      if (*(_DWORD *)v8 != 2)
        goto LABEL_12;
      WTF::StringImpl::destroy(v8, v6);
      if (v15)
      {
        v8 = v14;
        v14 = 0;
        if (v8)
        {
          v9 = *(_DWORD *)v8 - 2;
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v13);
          else
LABEL_12:
            *(_DWORD *)v8 = v9;
        }
      }
      return;
    case 0xADB:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v10)
        WebCore::SharedWorkerContextManager::Connection::suspendSharedWorker();
      return;
    case 0xADC:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v11)
        WebCore::SharedWorkerContextManager::Connection::terminateSharedWorker();
      return;
    case 0xADD:
      IPC::Decoder::decode<std::tuple<WebKit::WebPreferencesStore>>((uint64_t *)a3, (uint64_t)&v14);
      if (v16)
      {
        WebKit::WebPage::updatePreferencesGenerated((WebKit::WebPage *)&v14, v12);
        std::optional<WebKit::WebPreferencesStore>::operator=[abi:sn180100]<WebKit::WebPreferencesStore const&,void>((uint64_t)(this + 11), (uint64_t *)&v14);
      }
      std::__optional_destruct_base<WebKit::WebPreferencesStore,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v14);
      return;
    default:
      return;
  }
}

WTF::StringImpl *IPC::handleMessageAsync<Messages::WebSharedWorkerContextManagerConnection::PostConnectEvent,WebKit::WebSharedWorkerContextManagerConnection,WebCore::SharedWorkerContextManager::Connection,void ()(WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier> &&,WTF::String &&,WTF::CompletionHandler<void ()(BOOL)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, unint64_t, _OWORD *, WTF::StringImpl **, WTF::StringImpl **), uint64_t a5)
{
  unint64_t v10;
  char v11;
  unint64_t v12;
  WTF::StringImpl *result;
  unint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  _OWORD v22[2];
  WTF::StringImpl *v23;
  char v24;
  _OWORD v25[2];
  char v26;
  WTF::StringImpl *v27;
  char v28;

  v10 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v11
    && (v12 = v10,
        IPC::Decoder::decode<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>>(a2, (uint64_t)v25),
        v26)
    && (result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a2, &v27), v28))
  {
    if (v26)
    {
      v22[0] = v25[0];
      v22[1] = v25[1];
      v23 = v27;
      v24 = 1;
      v14 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
      if (!(_BYTE)v15)
        goto LABEL_11;
      *(_QWORD *)&v25[0] = v14;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)v25 + 1, a1);
      v16 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v16 = off_1E34B6E20;
      *((_QWORD *)v16 + 1) = *(_QWORD *)&v25[0];
      v17 = *((_QWORD *)&v25[0] + 1);
      *((_QWORD *)&v25[0] + 1) = 0;
      *((_QWORD *)v16 + 2) = v17;
      v27 = v16;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v25 + 1);
      v18 = (_QWORD *)(a3 + (a5 >> 1));
      if ((a5 & 1) != 0)
        a4 = *(void (**)(_QWORD *, unint64_t, _OWORD *, WTF::StringImpl **, WTF::StringImpl **))(*v18 + a4);
      a4(v18, v12, v22, &v23, &v27);
      result = v27;
      v27 = 0;
      if (result)
        result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
      if (v24)
      {
LABEL_11:
        result = v23;
        v23 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v19 = *a2;
    v20 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
      v21 = v20 == 0;
    else
      v21 = 1;
    if (!v21)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v19);
  }
  return result;
}

void `non-virtual thunk to'WebKit::WebSharedWorkerContextManagerConnection::didReceiveMessage(WTF::StringImpl **this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  WebKit::WebSharedWorkerContextManagerConnection::didReceiveMessage(this - 2, a2, a3);
}

_DWORD *WebKit::WebSharedWorkerObjectConnection::didReceiveMessage(_DWORD *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  _DWORD *v3;
  int v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  char v7;

  v3 = this;
  ++this[2];
  v4 = *((unsigned __int16 *)a3 + 25);
  switch(v4)
  {
    case 2784:
      this = (_DWORD *)IPC::handleMessage<Messages::WebSharedWorkerObjectConnection::PostErrorToWorkerObject,WebKit::WebSharedWorkerObjectConnection,WebCore::SharedWorkerObjectConnection,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&,int,int,WTF::String const&,BOOL)>((uint64_t)a2, (uint64_t *)a3, (uint64_t)this, MEMORY[0x1E0DD3FF8], 0);
      break;
    case 2783:
      IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ResourceError>>((uint64_t *)a3, &v6);
      if (v7)
        WebCore::SharedWorkerObjectConnection::notifyWorkerObjectOfLoadCompletion();
      this = (_DWORD *)std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ResourceError>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v6, v5);
      break;
    case 2782:
      this = IPC::handleMessageAsync<Messages::WebSharedWorkerObjectConnection::FetchScriptInClient,WebKit::WebSharedWorkerObjectConnection,WebCore::SharedWorkerObjectConnection,void ()(WTF::URL &&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::WorkerOptions &&,WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&,WebCore::WorkerInitializationData &&)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, MEMORY[0x1E0DD3FF0], 0);
      break;
  }
  if (v3[2] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return this;
}

WTF::StringImpl *IPC::handleMessageAsync<Messages::WebSharedWorkerObjectConnection::FetchScriptInClient,WebKit::WebSharedWorkerObjectConnection,WebCore::SharedWorkerObjectConnection,void ()(WTF::URL &&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::WorkerOptions &&,WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&,WebCore::WorkerInitializationData &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, WTF::StringImpl **, _QWORD, _QWORD, __int16 *, _QWORD *), uint64_t a5)
{
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  WTF::StringImpl *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int16 v28;
  WTF::StringImpl *v29;
  char v30;
  WTF::StringImpl *v31;
  _OWORD v32[2];
  char v33;
  __int128 v34;
  char v35;
  _QWORD v36[2];
  char v37;

  IPC::Decoder::decode<WTF::URL>(a2, &v31);
  if (!v33)
    goto LABEL_30;
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a2, (uint64_t)&v34);
  if (v35)
  {
    result = IPC::Decoder::decode<WebCore::WorkerOptions>((uint64_t)v36, a2);
    if (v37)
    {
      if (!v33 || !v35)
      {
        __break(1u);
        return result;
      }
      v12 = v31;
      v31 = 0;
      v24 = v12;
      v25 = v32[0];
      v26 = v32[1];
      LODWORD(v32[0]) &= ~1u;
      v27 = v34;
      v28 = v36[0];
      v29 = (WTF::StringImpl *)v36[1];
      v13 = 1;
    }
    else
    {
      v13 = 0;
      LOBYTE(v24) = 0;
    }
    v30 = v13;
  }
  else
  {
    v13 = 0;
    LOBYTE(v24) = 0;
    v30 = 0;
  }
  if (v33)
  {
    v14 = v31;
    v31 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::destroy(v14, v10);
        if (v13)
          goto LABEL_15;
        goto LABEL_30;
      }
      *(_DWORD *)v14 -= 2;
    }
  }
  if (v13)
  {
LABEL_15:
    v15 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (!(_BYTE)v16)
      goto LABEL_21;
    v31 = v15;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)v32, a1);
    v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v17 = off_1E34B6E48;
    v17[1] = v31;
    v18 = *(_QWORD *)&v32[0];
    *(_QWORD *)&v32[0] = 0;
    v17[2] = v18;
    v36[0] = v17;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v32);
    v19 = (_QWORD *)(a3 + (a5 >> 1));
    if ((a5 & 1) != 0)
      a4 = *(void (**)(_QWORD *, WTF::StringImpl **, _QWORD, _QWORD, __int16 *, _QWORD *))(*v19 + a4);
    a4(v19, &v24, v27, *((_QWORD *)&v27 + 1), &v28, v36);
    result = (WTF::StringImpl *)v36[0];
    v36[0] = 0;
    if (result)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    if (v30)
    {
LABEL_21:
      v20 = v29;
      v29 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v16);
        else
          *(_DWORD *)v20 -= 2;
      }
      result = v24;
      v24 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
        else
          *(_DWORD *)result -= 2;
      }
    }
    return result;
  }
LABEL_30:
  v21 = *a2;
  v22 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (WTF::StringImpl *)a2[3];
  if (result)
    v23 = v22 == 0;
  else
    v23 = 1;
  if (!v23)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v21);
  return result;
}

uint64_t IPC::handleMessage<Messages::WebSharedWorkerObjectConnection::PostErrorToWorkerObject,WebKit::WebSharedWorkerObjectConnection,WebCore::SharedWorkerObjectConnection,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&,int,int,WTF::String const&,BOOL)>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD *, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD), uint64_t a5)
{
  WTF::StringImpl *v8;
  _BYTE v10[56];

  IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,int,int,WTF::String,BOOL>>(a2, v10);
  if (v10[48])
    IPC::callMemberFunction<WebKit::WebSharedWorkerObjectConnection,WebCore::SharedWorkerObjectConnection,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&,int,int,WTF::String const&,BOOL),std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,int,int,WTF::String,BOOL>>(a3, a4, a5, (uint64_t)v10);
  return std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,int,int,WTF::String,BOOL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v10, v8);
}

_DWORD *`non-virtual thunk to'WebKit::WebSharedWorkerObjectConnection::didReceiveMessage(WebKit::WebSharedWorkerObjectConnection *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  return WebKit::WebSharedWorkerObjectConnection::didReceiveMessage((_DWORD *)this - 8, a2, a3);
}

_QWORD *WebKit::WebSharedWorkerServerConnection::didReceiveMessage(_QWORD *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  _QWORD *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF *v6[14];
  unint64_t v7;
  uint64_t v8;
  _BYTE v9[32];
  _BYTE v10[24];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0xAE1:
      IPC::Decoder::decode<std::tuple<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,WebCore::WorkerOptions>>((uint64_t *)a3, v6);
      if (v10[16])
        WebKit::WebSharedWorkerServerConnection::requestSharedWorker(v3, v6, v7, v8, (uint64_t)v9, (uint64_t)v10);
      return (_QWORD *)std::__optional_destruct_base<std::tuple<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,WebCore::WorkerOptions>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v4);
    case 0xAE2:
      IPC::Decoder::decode<std::tuple<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t *)a3, v6);
      if (v9[0])
        WebKit::WebSharedWorkerServerConnection::resumeForBackForwardCache(v3, (uint64_t)v6, v7, v8);
      goto LABEL_11;
    case 0xAE3:
      IPC::Decoder::decode<std::tuple<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t *)a3, v6);
      if (v9[0])
        WebKit::WebSharedWorkerServerConnection::sharedWorkerObjectIsGoingAway(v3, (uint64_t)v6, v7, v8);
      goto LABEL_11;
    case 0xAE4:
      IPC::Decoder::decode<std::tuple<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t *)a3, v6);
      if (v9[0])
        WebKit::WebSharedWorkerServerConnection::suspendForBackForwardCache(v3, (uint64_t)v6, v7, v8);
LABEL_11:
      this = (_QWORD *)std::__optional_destruct_base<std::tuple<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v5);
      break;
    default:
      return this;
  }
  return this;
}

_QWORD *`non-virtual thunk to'WebKit::WebSharedWorkerServerConnection::didReceiveMessage(WebKit::WebSharedWorkerServerConnection *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  return WebKit::WebSharedWorkerServerConnection::didReceiveMessage((_QWORD *)this - 1, a2, a3);
}

void WebKit::WebSharedWorkerServerToContextConnection::didReceiveMessage(WebKit::WebSharedWorkerServerToContextConnection *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  int v4;
  unint64_t v5;
  char v6;

  v4 = *((unsigned __int16 *)a3 + 25);
  if (v4 == 2790)
  {
    v5 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
    if (v6)
      WebKit::WebSharedWorkerServerToContextConnection::sharedWorkerTerminated((uint64_t)this, v5);
  }
  else if (v4 == 2789)
  {
    IPC::handleMessage<Messages::WebSharedWorkerServerToContextConnection::PostErrorToWorkerObject,WebKit::WebSharedWorkerServerToContextConnection,WebKit::WebSharedWorkerServerToContextConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,int,int,WTF::String const&,BOOL)>((uint64_t)a2, (uint64_t *)a3, (uint64_t)this, (uint64_t (*)(_QWORD *, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))WebKit::WebSharedWorkerServerToContextConnection::postErrorToWorkerObject, 0);
  }
}

uint64_t IPC::handleMessage<Messages::WebSharedWorkerServerToContextConnection::PostErrorToWorkerObject,WebKit::WebSharedWorkerServerToContextConnection,WebKit::WebSharedWorkerServerToContextConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,int,int,WTF::String const&,BOOL)>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD *, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD), uint64_t a5)
{
  WTF::StringImpl *v8;
  _BYTE v10[48];

  IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,int,int,WTF::String,BOOL>>(a2, v10);
  if (v10[40])
    IPC::callMemberFunction<WebKit::WebSharedWorkerServerToContextConnection,WebKit::WebSharedWorkerServerToContextConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,int,int,WTF::String const&,BOOL),std::tuple<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,int,int,WTF::String,BOOL>>(a3, a4, a5, (uint64_t)v10);
  return std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,int,int,WTF::String,BOOL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v10, v8);
}

void `non-virtual thunk to'WebKit::WebSharedWorkerServerToContextConnection::didReceiveMessage(WebKit::WebSharedWorkerServerToContextConnection *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  WebKit::WebSharedWorkerServerToContextConnection::didReceiveMessage((WebKit::WebSharedWorkerServerToContextConnection *)((char *)this - 8), a2, a3);
}

unsigned int *WebKit::WebTransportSession::didReceiveMessage(unsigned int *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  char v6;
  char v7;
  uint64_t v8;
  const void *v9;
  JSC::ArrayBuffer *v10;
  char v11;

  v3 = (uint64_t)this;
  v4 = this + 12;
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  switch(*((_WORD *)a3 + 25))
  {
    case 0xAEF:
      this = (unsigned int *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v6)
        this = (unsigned int *)WebKit::WebTransportSession::receiveBidirectionalStream(v3);
      break;
    case 0xAF0:
      this = (unsigned int *)IPC::Decoder::decode<std::tuple<std::span<unsigned char const,18446744073709551615ul>>>((uint64_t *)a3, (uint64_t)&v8);
      if ((_BYTE)v10)
        this = (unsigned int *)WebKit::WebTransportSession::receiveDatagram(v3, v8, (uint64_t)v9);
      break;
    case 0xAF1:
      this = (unsigned int *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v7)
        this = (unsigned int *)WebKit::WebTransportSession::receiveIncomingUnidirectionalStream(v3);
      break;
    case 0xAF2:
      this = (unsigned int *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>,BOOL>>((uint64_t *)a3, &v8);
      if (v11)
        this = (unsigned int *)WebKit::WebTransportSession::streamReceiveBytes(v3, v8, v9, v10);
      break;
    default:
      break;
  }
  if (v3)
    return WTF::ThreadSafeRefCounted<WebKit::WebTransportSession,(WTF::DestructionThread)2>::deref(v4);
  return this;
}

unsigned int *`non-virtual thunk to'WebKit::WebTransportSession::didReceiveMessage(WebKit::WebTransportSession *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  return WebKit::WebTransportSession::didReceiveMessage((unsigned int *)this - 6, a2, a3);
}

_QWORD *WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>::Ref(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v6;

  v4 = *(_QWORD *)(a2 + 16);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](v4);
LABEL_5:
  ++*(_QWORD *)(v4 + 8);
  v6 = __ldxr((unsigned __int8 *)v4);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_10:
  *a1 = a2;
  return a1;
}

_BYTE *IPC::handleMessage<Messages::GPUConnectionToWebProcess::CreateRenderingBackend,WebKit::GPUConnectionToWebProcess,WebKit::GPUConnectionToWebProcess,void ()(WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::StreamServerConnectionHandle &&)>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE v5[32];

  IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::StreamServerConnectionHandle>>(&v4, a1);
  if (v5[24])
    WebKit::GPUConnectionToWebProcess::createRenderingBackend(a2, v4, (WTF::MachSendRight *)v5);
  return std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::StreamServerConnectionHandle>,false>::~__optional_destruct_base[abi:sn180100](&v4);
}

uint64_t IPC::handleMessageSynchronous<Messages::GPUConnectionToWebProcess::EnsureAudioSession,WebKit::GPUConnectionToWebProcess,WebKit::GPUConnectionToWebProcess,void ()(WTF::CompletionHandler<void ()(WebKit::RemoteAudioSessionConfiguration const&)> &&)>(unsigned __int8 **a1, uint64_t a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _QWORD **), uint64_t a6)
{
  IPC::Encoder *v9;
  _QWORD *v10;
  unsigned __int8 **v11;
  _QWORD *v12;
  _QWORD *v13;
  IPC::Encoder *v15;
  unsigned __int8 **v16[2];
  _QWORD *v17;

  v9 = *a3;
  *a3 = 0;
  v15 = v9;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v16, a1);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = off_1E34B6E70;
  v10[1] = v15;
  v11 = v16[0];
  v16[0] = 0;
  v10[2] = v11;
  v17 = v10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v16);
  v12 = (_QWORD *)(a4 + (a6 >> 1));
  if ((a6 & 1) != 0)
    a5 = *(void (**)(_QWORD *, _QWORD **))(*v12 + a5);
  a5(v12, &v17);
  v13 = v17;
  v17 = 0;
  if (v13)
    (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  return 1;
}

uint64_t WebKit::GPUProcessConnection::didReceiveSyncMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>::Ref(&v12, a1);
  v9 = IPC::MessageReceiverMap::dispatchSyncMessage((unsigned int **)(a1 + 32), a2, a3, a4);
  v10 = v12;
  v12 = 0;
  if (v10)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v10 + 16), v8);
  return v9;
}

unsigned __int8 ***IPC::handleMessageAsync<Messages::GPUProcess::CreateGPUConnectionToWebProcess,WebKit::GPUProcess,WebKit::GPUProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,IPC::ConnectionHandle &&,WebKit::GPUProcessConnectionParameters &&,WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  char v7;
  _QWORD *v8;
  unsigned __int8 **v9;
  unsigned __int8 ***result;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  _QWORD *v14;
  uint64_t v15[2];
  uint64_t v16;
  char v17;

  IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,IPC::ConnectionHandle,WebKit::GPUProcessConnectionParameters>>(v15, a2);
  if (!v17)
    return (unsigned __int8 ***)std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,IPC::ConnectionHandle,WebKit::GPUProcessConnectionParameters>,false>::~__optional_destruct_base[abi:sn180100](v15);
  v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (!v7)
    return (unsigned __int8 ***)std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,IPC::ConnectionHandle,WebKit::GPUProcessConnectionParameters>,false>::~__optional_destruct_base[abi:sn180100](v15);
  v12 = v6;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a1);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E34B6E98;
  v8[1] = v12;
  v9 = v13;
  v13 = 0;
  v14 = v8;
  v8[2] = v9;
  result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
  if (v17)
  {
    WebKit::GPUProcess::createGPUConnectionToWebProcess(a3, v15[0], v15[1], (WTF::MachSendRight *)&v16, (uint64_t)&v16 + 4, (uint64_t *)&v14);
    v11 = (uint64_t)v14;
    v14 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    return (unsigned __int8 ***)std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,IPC::ConnectionHandle,WebKit::GPUProcessConnectionParameters>,false>::~__optional_destruct_base[abi:sn180100](v15);
  }
  __break(1u);
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::ClientOrigin,WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::WorkerOptions,WebCore::WorkerFetchResult,WebCore::WorkerInitializationData>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin,WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::WorkerOptions,WebCore::WorkerFetchResult,WebCore::WorkerInitializationData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[432])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin,WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::WorkerOptions,WebCore::WorkerFetchResult,WebCore::WorkerInitializationData>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE v5[72];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebCore::ClientOrigin>(a1, v5);
  if (v5[64])
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin,WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::WorkerOptions,WebCore::WorkerFetchResult,WebCore::WorkerInitializationData>,void>::decode<IPC::Decoder,WebCore::ClientOrigin>(a1, (uint64_t)v5, a2);
  }
  else
  {
    *a2 = 0;
    a2[432] = 0;
  }
  return std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5);
}

void IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin,WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::WorkerOptions,WebCore::WorkerFetchResult,WebCore::WorkerInitializationData>,void>::decode<IPC::Decoder,WebCore::ClientOrigin>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  _QWORD v7[2];

  v7[0] = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v7[1] = v6;
  if ((_BYTE)v6)
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin,WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::WorkerOptions,WebCore::WorkerFetchResult,WebCore::WorkerInitializationData>,void>::decode<IPC::Decoder,WebCore::ClientOrigin,WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1, a2, (uint64_t)v7, (uint64_t)a3);
  }
  else
  {
    *a3 = 0;
    a3[432] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin,WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::WorkerOptions,WebCore::WorkerFetchResult,WebCore::WorkerInitializationData>,void>::decode<IPC::Decoder,WebCore::ClientOrigin,WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int16 v19;
  WTF::StringImpl *v20;
  char v21;
  uint64_t v22;
  uint64_t v23[5];
  __int128 v24;
  uint64_t v25;
  int v26;
  char v27;
  __int16 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31[5];
  uint64_t v32;
  int v33;
  __int16 v34;
  uint64_t v35;
  char v36;
  char v37;
  __int128 v38;
  uint64_t v39[5];
  __int16 v40;
  char v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int16 v45;
  uint64_t v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebCore::WorkerOptions>((uint64_t)&v19, a1);
  if (v21)
  {
    IPC::Decoder::decode<WebCore::WorkerFetchResult>(a1, (uint64_t)&v22);
    if (v37)
    {
      IPC::Decoder::decode<WebCore::WorkerInitializationData>(a1, (uint64_t)&v38);
      v10 = v47;
      if (v47)
      {
        if (!*(_BYTE *)(a2 + 64) || !*(_BYTE *)(a3 + 8) || !v37)
          __break(1u);
        *(_BYTE *)a4 = 0;
        *(_DWORD *)(a4 + 24) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(a4, a2);
        *(_BYTE *)(a4 + 32) = 0;
        *(_DWORD *)(a4 + 56) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(a4 + 32, a2 + 32);
        *(_QWORD *)(a4 + 64) = *(_QWORD *)a3;
        *(_WORD *)(a4 + 72) = v19;
        v11 = v20;
        v20 = 0;
        v12 = v22;
        v22 = 0;
        *(_QWORD *)(a4 + 80) = v11;
        *(_QWORD *)(a4 + 88) = v12;
        WTF::URL::URL(a4 + 96, v23);
        v13 = v24;
        v24 = 0u;
        *(_OWORD *)(a4 + 136) = v13;
        *(_QWORD *)(a4 + 152) = v25;
        v14 = v29;
        v29 = 0u;
        v15 = v30;
        v30 = 0u;
        v25 = 0;
        *(_DWORD *)(a4 + 160) = v26;
        *(_BYTE *)(a4 + 164) = v27;
        *(_WORD *)(a4 + 168) = v28;
        *(_OWORD *)(a4 + 176) = v14;
        *(_OWORD *)(a4 + 192) = v15;
        WTF::URL::URL(a4 + 208, v31);
        *(_QWORD *)(a4 + 248) = v32;
        *(_DWORD *)(a4 + 256) = v33;
        *(_WORD *)(a4 + 260) = v34;
        v16 = v35;
        v32 = 0;
        v35 = 0;
        *(_QWORD *)(a4 + 264) = v16;
        *(_BYTE *)(a4 + 272) = v36;
        *(_BYTE *)(a4 + 288) = 0;
        *(_BYTE *)(a4 + 352) = 0;
        if (v41)
        {
          *(_OWORD *)(a4 + 288) = v38;
          WTF::URL::URL(a4 + 304, v39);
          *(_WORD *)(a4 + 344) = v40;
          *(_BYTE *)(a4 + 352) = 1;
        }
        v17 = v43;
        *(_OWORD *)(a4 + 368) = v42;
        *(_OWORD *)(a4 + 384) = v17;
        *(_OWORD *)(a4 + 400) = v44;
        *(_WORD *)(a4 + 416) = v45;
        v18 = v46;
        v46 = 0;
        v10 = 1;
        *(_QWORD *)(a4 + 424) = v18;
      }
      else
      {
        *(_BYTE *)a4 = 0;
      }
      *(_BYTE *)(a4 + 432) = v10;
      std::__optional_destruct_base<WebCore::WorkerInitializationData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v38, v9);
      if (v37)
        WebCore::WorkerFetchResult::~WorkerFetchResult((WebCore::WorkerFetchResult *)&v22, v8);
    }
    else
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 432) = 0;
    }
    if (v21 && v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v8);
      else
        *(_DWORD *)v20 -= 2;
    }
  }
  else
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 432) = 0;
  }
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::WorkerOptions>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::WorkerOptions,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 16))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void IPC::Decoder::decode<WebCore::WorkerFetchResult>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebCore::WorkerFetchResult,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 192))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::WorkerInitializationData>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::WorkerInitializationData,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 144))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::WorkerInitializationData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  if (*(_BYTE *)(a1 + 144))
  {
    v3 = *(WTF::StringImpl **)(a1 + 136);
    *(_QWORD *)(a1 + 136) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::~__optional_destruct_base[abi:sn180100](a1, a2);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::ClientOrigin,WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::WorkerOptions,WebCore::WorkerFetchResult,WebCore::WorkerInitializationData>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  char v11;

  if (*(_BYTE *)(a1 + 432))
  {
    v3 = *(WTF::StringImpl **)(a1 + 424);
    *(_QWORD *)(a1 + 424) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::~__optional_destruct_base[abi:sn180100](a1 + 288, a2);
    WebCore::WorkerFetchResult::~WorkerFetchResult((WebCore::WorkerFetchResult *)(a1 + 88), v4);
    v6 = *(WTF::StringImpl **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = *(unsigned int *)(a1 + 56);
    if ((_DWORD)v7 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v7])(&v10, a1 + 32);
    *(_DWORD *)(a1 + 56) = -1;
    v8 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v8 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v8])(&v11, a1);
    *(_DWORD *)(a1 + 24) = -1;
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages39WebSharedWorkerContextManagerConnection16PostConnectEventEN6WebKit39WebSharedWorkerContextManagerConnectionEN7WebCore26SharedWorkerContextManager10ConnectionEFvNS_23ObjectIdentifierGenericINS9_26SharedWorkerIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONSt3__14pairINS9_21MessagePortIdentifierESJ_EEONS_6StringEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B6E20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages39WebSharedWorkerContextManagerConnection16PostConnectEventEN6WebKit39WebSharedWorkerContextManagerConnectionEN7WebCore26SharedWorkerContextManager10ConnectionEFvNS_23ObjectIdentifierGenericINS9_26SharedWorkerIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONSt3__14pairINS9_21MessagePortIdentifierESJ_EEONS_6StringEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B6E20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages39WebSharedWorkerContextManagerConnection16PostConnectEventEN6WebKit39WebSharedWorkerContextManagerConnectionEN7WebCore26SharedWorkerContextManager10ConnectionEFvNS_23ObjectIdentifierGenericINS9_26SharedWorkerIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONSt3__14pairINS9_21MessagePortIdentifierESJ_EEONS_6StringEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3502;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages31WebSharedWorkerObjectConnection19FetchScriptInClientEN6WebKit31WebSharedWorkerObjectConnectionEN7WebCore28SharedWorkerObjectConnectionEFvONS_3URLENS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_32SharedWorkerObjectIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS9_13WorkerOptionsEONS_17CompletionHandlerIFvONS9_17WorkerFetchResultEONS9_24WorkerInitializationDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_SQ_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B6E48;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages31WebSharedWorkerObjectConnection19FetchScriptInClientEN6WebKit31WebSharedWorkerObjectConnectionEN7WebCore28SharedWorkerObjectConnectionEFvONS_3URLENS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_32SharedWorkerObjectIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS9_13WorkerOptionsEONS_17CompletionHandlerIFvONS9_17WorkerFetchResultEONS9_24WorkerInitializationDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_SQ_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B6E48;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages31WebSharedWorkerObjectConnection19FetchScriptInClientEN6WebKit31WebSharedWorkerObjectConnectionEN7WebCore28SharedWorkerObjectConnectionEFvONS_3URLENS9_16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_32SharedWorkerObjectIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS9_13WorkerOptionsEONS_17CompletionHandlerIFvONS9_17WorkerFetchResultEONS9_24WorkerInitializationDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_SQ_EE4callESO_SQ_(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 3503;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WebCore::WorkerFetchResult,void>::encode((IPC::Encoder *)v7, a2);
  IPC::ArgumentCoder<WebCore::WorkerInitializationData,void>::encode((IPC::Encoder *)v7, a3);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ResourceError>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ResourceError>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[96])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ResourceError>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  _BYTE v5[24];

  result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)v5);
  if (v5[16])
    return IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ResourceError>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)v5, a2);
  *a2 = 0;
  a2[96] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ResourceError>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  WTF::StringImpl *v5;
  uint64_t v7[10];
  char v8;

  IPC::Decoder::decode<WebCore::ResourceError>(a1, (uint64_t)v7);
  if (v8)
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ResourceError>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ResourceError>(a2, v7, (uint64_t)a3);
  }
  else
  {
    *a3 = 0;
    a3[96] = 0;
  }
  return std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v5);
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ResourceError>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ResourceError>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 16) && *((_BYTE *)a2 + 80))
  {
    *(_OWORD *)a3 = *(_OWORD *)a1;
    v5 = *a2;
    *a2 = 0;
    *(_QWORD *)(a3 + 16) = v5;
    WTF::URL::URL(a3 + 24, a2 + 1);
    v6 = a2[6];
    a2[6] = 0;
    *(_QWORD *)(a3 + 64) = v6;
    *(_DWORD *)(a3 + 72) = *((_DWORD *)a2 + 14);
    *(_WORD *)(a3 + 76) = *((_WORD *)a2 + 30);
    v7 = a2[8];
    a2[8] = 0;
    *(_QWORD *)(a3 + 80) = v7;
    *(_BYTE *)(a3 + 88) = *((_BYTE *)a2 + 72);
    *(_BYTE *)(a3 + 96) = 1;
  }
  else
  {
    __break(1u);
  }
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ResourceError>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (*(_BYTE *)(a1 + 96))
  {
    v3 = *(const void **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = 0;
    if (v3)
      CFRelease(v3);
    v4 = *(WTF::StringImpl **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,int,int,WTF::String,BOOL>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,int,int,WTF::String,BOOL>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[48])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::callMemberFunction<WebKit::WebSharedWorkerObjectConnection,WebCore::SharedWorkerObjectConnection,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String const&,int,int,WTF::String const&,BOOL),std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,int,int,WTF::String,BOOL>>(uint64_t a1, uint64_t (*a2)(_QWORD *, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD), uint64_t a3, uint64_t a4)
{
  uint64_t (*v4)(_QWORD *, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD);
  _QWORD *v5;

  v4 = a2;
  v5 = (_QWORD *)(a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(*v5 + a2);
  return v4(v5, *(_QWORD *)a4, *(_QWORD *)(a4 + 8), a4 + 16, *(unsigned int *)(a4 + 24), *(unsigned int *)(a4 + 28), a4 + 32, *(unsigned __int8 *)(a4 + 40));
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,int,int,WTF::String,BOOL>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  _BYTE v5[24];

  result = (WTF::StringImpl *)IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)v5);
  if (v5[16])
    return IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,int,int,WTF::String,BOOL>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)v5, (uint64_t)a2);
  *a2 = 0;
  a2[48] = 0;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,int,int,WTF::String,BOOL>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *result;
  unint64_t v7;
  WTF::StringImpl *v8;
  unint64_t v9;
  int *v11;
  unint64_t v12;
  int v14;
  int v15;
  unint64_t v16;
  unsigned __int8 *v17;
  unsigned int v18;
  BOOL v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  char v31;
  WTF::StringImpl *v32;
  unsigned __int8 v33;

  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v30);
  if (!v31)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 48) = 0;
    return result;
  }
  v7 = a1[1];
  v8 = (WTF::StringImpl *)*a1;
  v9 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v7 < v9 || v7 - v9 <= 3)
    goto LABEL_22;
  v11 = (int *)((char *)v8 + v9);
  a1[2] = (uint64_t)(v11 + 1);
  if (!v8)
  {
    v21 = v7;
    v22 = 0;
LABEL_23:
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result && v21)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t, uint64_t))(*(_QWORD *)result
                                                                                                 + 16))(result, v22, v21);
    goto LABEL_27;
  }
  v12 = (((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL) - (_QWORD)v8;
  if (v7 < v12 || v7 - v12 <= 3)
  {
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
    {
      if (v7)
      {
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)result + 16))(result);
        v8 = (WTF::StringImpl *)*a1;
        v29 = a1[1];
        result = (WTF::StringImpl *)a1[3];
        *a1 = 0;
        a1[1] = 0;
        if (result)
        {
          if (v29)
            result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result + 16))(result, v8);
        }
      }
    }
    goto LABEL_27;
  }
  v14 = *v11;
  v15 = *(_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  a1[2] = (((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v32);
  if (!v33)
  {
LABEL_27:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 48) = 0;
    goto LABEL_28;
  }
  v7 = a1[1];
  v8 = (WTF::StringImpl *)*a1;
  v16 = a1[2] - *a1;
  if (v7 <= v16)
  {
    v24 = 0;
    v25 = 0;
    *a1 = 0;
    a1[1] = 0;
    v26 = a1[3];
    if (v26)
    {
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
        v25 = *a1;
        v24 = a1[1];
      }
      else
      {
        v24 = 0;
        v25 = 0;
      }
    }
    goto LABEL_35;
  }
  v17 = (unsigned __int8 *)v8 + v16;
  a1[2] = (uint64_t)(v17 + 1);
  if (!v8)
  {
    v24 = v7;
    v25 = 0;
LABEL_35:
    v7 = 0;
    v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    v27 = a1[3];
    if (v27)
    {
      if (v24)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, v25, v24);
        v8 = (WTF::StringImpl *)*a1;
        v7 = a1[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
    }
    goto LABEL_36;
  }
  v18 = *v17;
  if (v18 >= 2)
  {
LABEL_36:
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result && v7)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result
                                                                                                  + 16))(result, v8);
    *(_BYTE *)a3 = 0;
    v28 = v33;
    *(_BYTE *)(a3 + 48) = 0;
    if (v28)
    {
      result = v32;
      v32 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        else
          *(_DWORD *)result -= 2;
      }
    }
    goto LABEL_28;
  }
  v19 = v18 != 0;
  if (!*(_BYTE *)(a2 + 16) || !v31)
  {
    __break(1u);
LABEL_22:
    v21 = 0;
    v22 = 0;
    *a1 = 0;
    a1[1] = 0;
    v23 = a1[3];
    if (v23)
    {
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
        v22 = *a1;
        v21 = a1[1];
      }
      else
      {
        v21 = 0;
        v22 = 0;
      }
    }
    goto LABEL_23;
  }
  *(_OWORD *)a3 = *(_OWORD *)a2;
  v20 = v30;
  v30 = 0;
  *(_QWORD *)(a3 + 16) = v20;
  *(_DWORD *)(a3 + 24) = v14;
  *(_DWORD *)(a3 + 28) = v15;
  *(_QWORD *)(a3 + 32) = v32;
  *(_BYTE *)(a3 + 40) = v19;
  *(_BYTE *)(a3 + 48) = 1;
LABEL_28:
  if (v31)
  {
    result = v30;
    v30 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,int,int,WTF::String,BOOL>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 48))
  {
    v3 = *(WTF::StringImpl **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,WebCore::WorkerOptions>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,WebCore::WorkerOptions>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[176])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,WebCore::WorkerOptions>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *v4;
  _BYTE v6[120];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebCore::SharedWorkerKey>(a1, (uint64_t)v6);
  if (v6[112])
  {
    IPC::ArgumentCoder<std::tuple<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,WebCore::WorkerOptions>,void>::decode<IPC::Decoder,WebCore::SharedWorkerKey>(a1, (uint64_t)v6, a2);
  }
  else
  {
    *a2 = 0;
    a2[176] = 0;
  }
  return std::__optional_destruct_base<WebCore::SharedWorkerKey,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v4);
}

uint64_t IPC::Decoder::decode<WebCore::SharedWorkerKey>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::SharedWorkerKey,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 112))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,WebCore::WorkerOptions>,void>::decode<IPC::Decoder,WebCore::SharedWorkerKey>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unint64_t result;
  _BYTE v7[24];

  result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)v7);
  if (v7[16])
    return IPC::ArgumentCoder<std::tuple<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,WebCore::WorkerOptions>,void>::decode<IPC::Decoder,WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, a2, (uint64_t)v7, a3);
  *a3 = 0;
  a3[176] = 0;
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,WebCore::WorkerOptions>,void>::decode<IPC::Decoder,WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  unint64_t result;
  __int128 v9[2];
  char v10;

  result = IPC::Decoder::decode<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>>(a1, (uint64_t)v9);
  if (v10)
    return IPC::ArgumentCoder<std::tuple<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,WebCore::WorkerOptions>,void>::decode<IPC::Decoder,WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>>(a1, a2, a3, v9, (uint64_t)a4);
  *a4 = 0;
  a4[176] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,WebCore::WorkerOptions>,void>::decode<IPC::Decoder,WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result;
  char v10;
  __int128 v11;
  __int128 v12;
  __int16 v13;
  uint64_t v14;
  char v15;

  result = (uint64_t)IPC::Decoder::decode<WebCore::WorkerOptions>((uint64_t)&v13, a1);
  v10 = v15;
  if (!v15)
  {
    *(_BYTE *)a5 = 0;
    goto LABEL_7;
  }
  if (*(_BYTE *)(a2 + 112) && *(_BYTE *)(a3 + 16) && *((_BYTE *)a4 + 32))
  {
    result = std::__tuple_leaf<0ul,WebCore::SharedWorkerKey,false>::__tuple_leaf[abi:sn180100]<WebCore::SharedWorkerKey,void>(a5, a2);
    v11 = *a4;
    v12 = a4[1];
    *(_OWORD *)(a5 + 112) = *(_OWORD *)a3;
    *(_OWORD *)(a5 + 128) = v11;
    *(_OWORD *)(a5 + 144) = v12;
    *(_WORD *)(a5 + 160) = v13;
    *(_QWORD *)(a5 + 168) = v14;
    v10 = 1;
LABEL_7:
    *(_BYTE *)(a5 + 176) = v10;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t std::__tuple_leaf<0ul,WebCore::SharedWorkerKey,false>::__tuple_leaf[abi:sn180100]<WebCore::SharedWorkerKey,void>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  *(_BYTE *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(a1 + 32, a2 + 32);
  WTF::URL::URL(a1 + 64, (uint64_t *)(a2 + 64));
  v4 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a1 + 104) = v4;
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::SharedWorkerKey,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  char v9;

  if (*(_BYTE *)(a1 + 112))
  {
    v3 = *(WTF::StringImpl **)(a1 + 104);
    *(_QWORD *)(a1 + 104) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(unsigned int *)(a1 + 56);
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v5])(&v8, a1 + 32);
    *(_DWORD *)(a1 + 56) = -1;
    v6 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v6 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v6])(&v9, a1);
    *(_DWORD *)(a1 + 24) = -1;
  }
  return a1;
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,WebCore::WorkerOptions>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  char v10;

  if (*(_BYTE *)(a1 + 176))
  {
    v3 = *(WTF::StringImpl **)(a1 + 168);
    *(_QWORD *)(a1 + 168) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 104);
    *(_QWORD *)(a1 + 104) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = *(unsigned int *)(a1 + 56);
    if ((_DWORD)v6 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v6])(&v9, a1 + 32);
    *(_DWORD *)(a1 + 56) = -1;
    v7 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v7 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v7])(&v10, a1);
    *(_DWORD *)(a1 + 24) = -1;
  }
  return a1;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[128])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *v4;
  _BYTE v6[120];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebCore::SharedWorkerKey>(a1, (uint64_t)v6);
  if (v6[112])
  {
    IPC::ArgumentCoder<std::tuple<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::decode<IPC::Decoder,WebCore::SharedWorkerKey>(a1, (uint64_t)v6, (uint64_t)a2);
  }
  else
  {
    *a2 = 0;
    a2[128] = 0;
  }
  return std::__optional_destruct_base<WebCore::SharedWorkerKey,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v4);
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::decode<IPC::Decoder,WebCore::SharedWorkerKey>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result;
  char v6;
  __int128 v7;
  char v8;

  result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)&v7);
  v6 = v8;
  if (!v8)
  {
    *(_BYTE *)a3 = 0;
    goto LABEL_5;
  }
  if (*(_BYTE *)(a2 + 112))
  {
    result = std::__tuple_leaf<0ul,WebCore::SharedWorkerKey,false>::__tuple_leaf[abi:sn180100]<WebCore::SharedWorkerKey,void>(a3, a2);
    *(_OWORD *)(a3 + 112) = v7;
    v6 = 1;
LABEL_5:
    *(_BYTE *)(a3 + 128) = v6;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  char v9;

  if (*(_BYTE *)(a1 + 128))
  {
    v3 = *(WTF::StringImpl **)(a1 + 104);
    *(_QWORD *)(a1 + 104) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(unsigned int *)(a1 + 56);
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v5])(&v8, a1 + 32);
    *(_DWORD *)(a1 + 56) = -1;
    v6 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v6 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_3[v6])(&v9, a1);
    *(_DWORD *)(a1 + 24) = -1;
  }
  return a1;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,int,int,WTF::String,BOOL>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,int,int,WTF::String,BOOL>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[40])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::callMemberFunction<WebKit::WebSharedWorkerServerToContextConnection,WebKit::WebSharedWorkerServerToContextConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,int,int,WTF::String const&,BOOL),std::tuple<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,int,int,WTF::String,BOOL>>(uint64_t a1, uint64_t (*a2)(_QWORD *, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD), uint64_t a3, uint64_t a4)
{
  uint64_t (*v4)(_QWORD *, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD);
  _QWORD *v5;

  v4 = a2;
  v5 = (_QWORD *)(a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(*v5 + a2);
  return v4(v5, *(_QWORD *)a4, a4 + 8, *(unsigned int *)(a4 + 16), *(unsigned int *)(a4 + 20), a4 + 24, *(unsigned __int8 *)(a4 + 32));
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,int,int,WTF::String,BOOL>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6[2];

  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6[0] = (uint64_t)result;
  v6[1] = v5;
  if ((_BYTE)v5)
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,int,int,WTF::String,BOOL>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1, v6, (uint64_t)a2);
  *a2 = 0;
  a2[40] = 0;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,int,int,WTF::String,BOOL>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *result;
  unint64_t v7;
  WTF::StringImpl *v8;
  unint64_t v9;
  int *v11;
  unint64_t v12;
  int v14;
  int v15;
  unint64_t v16;
  unsigned __int8 *v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  char v32;
  WTF::StringImpl *v33;
  unsigned __int8 v34;

  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v31);
  if (!v32)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 40) = 0;
    return result;
  }
  v7 = a1[1];
  v8 = (WTF::StringImpl *)*a1;
  v9 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v7 < v9 || v7 - v9 <= 3)
    goto LABEL_22;
  v11 = (int *)((char *)v8 + v9);
  a1[2] = (uint64_t)(v11 + 1);
  if (!v8)
  {
    v22 = v7;
    v23 = 0;
LABEL_23:
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result && v22)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t, uint64_t))(*(_QWORD *)result
                                                                                                 + 16))(result, v23, v22);
    goto LABEL_27;
  }
  v12 = (((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL) - (_QWORD)v8;
  if (v7 < v12 || v7 - v12 <= 3)
  {
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
    {
      if (v7)
      {
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)result + 16))(result);
        v8 = (WTF::StringImpl *)*a1;
        v30 = a1[1];
        result = (WTF::StringImpl *)a1[3];
        *a1 = 0;
        a1[1] = 0;
        if (result)
        {
          if (v30)
            result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result + 16))(result, v8);
        }
      }
    }
    goto LABEL_27;
  }
  v14 = *v11;
  v15 = *(_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  a1[2] = (((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v33);
  if (!v34)
  {
LABEL_27:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 40) = 0;
    goto LABEL_28;
  }
  v7 = a1[1];
  v8 = (WTF::StringImpl *)*a1;
  v16 = a1[2] - *a1;
  if (v7 <= v16)
  {
    v25 = 0;
    v26 = 0;
    *a1 = 0;
    a1[1] = 0;
    v27 = a1[3];
    if (v27)
    {
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
        v26 = *a1;
        v25 = a1[1];
      }
      else
      {
        v25 = 0;
        v26 = 0;
      }
    }
    goto LABEL_35;
  }
  v17 = (unsigned __int8 *)v8 + v16;
  a1[2] = (uint64_t)(v17 + 1);
  if (!v8)
  {
    v25 = v7;
    v26 = 0;
LABEL_35:
    v7 = 0;
    v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    v28 = a1[3];
    if (v28)
    {
      if (v25)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v26, v25);
        v8 = (WTF::StringImpl *)*a1;
        v7 = a1[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
    }
    goto LABEL_36;
  }
  v18 = *v17;
  if (v18 >= 2)
  {
LABEL_36:
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result && v7)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result
                                                                                                  + 16))(result, v8);
    *(_BYTE *)a3 = 0;
    v29 = v34;
    *(_BYTE *)(a3 + 40) = 0;
    if (v29)
    {
      result = v33;
      v33 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        else
          *(_DWORD *)result -= 2;
      }
    }
    goto LABEL_28;
  }
  v19 = v18 != 0;
  if (!*((_BYTE *)a2 + 8) || !v32)
  {
    __break(1u);
LABEL_22:
    v22 = 0;
    v23 = 0;
    *a1 = 0;
    a1[1] = 0;
    v24 = a1[3];
    if (v24)
    {
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
        v23 = *a1;
        v22 = a1[1];
      }
      else
      {
        v22 = 0;
        v23 = 0;
      }
    }
    goto LABEL_23;
  }
  v20 = *a2;
  v21 = v31;
  v31 = 0;
  *(_QWORD *)a3 = v20;
  *(_QWORD *)(a3 + 8) = v21;
  *(_DWORD *)(a3 + 16) = v14;
  *(_DWORD *)(a3 + 20) = v15;
  *(_QWORD *)(a3 + 24) = v33;
  *(_BYTE *)(a3 + 32) = v19;
  *(_BYTE *)(a3 + 40) = 1;
LABEL_28:
  if (v32)
  {
    result = v31;
    v31 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,int,int,WTF::String,BOOL>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 40))
  {
    v3 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

unsigned int *WTF::ThreadSafeRefCounted<WebKit::WebTransportSession,(WTF::DestructionThread)2>::deref(unsigned int *result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int *v5;

  v1 = result;
  do
  {
    v2 = __ldaxr(result);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, result));
  if (!v3)
  {
    atomic_store(1u, result);
    v4 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v4 = off_1E34B6F80;
    *((_QWORD *)v4 + 1) = v1;
    v5 = v4;
    WTF::ensureOnMainRunLoop();
    result = v5;
    if (v5)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebKit::WebTransportSession,(WTF::DestructionThread)2>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 8) - 48) + 8))(*(_QWORD *)(a1 + 8) - 48);
}

void IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::StreamServerConnectionHandle>>(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::StreamServerConnectionHandle>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[32])
  {
    v4 = *a2;
    v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v6 = a2[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::StreamServerConnectionHandle>,void>::decode<IPC::Decoder>(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD v5[2];

  v5[0] = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  v5[1] = v4;
  if ((_BYTE)v4)
  {
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::StreamServerConnectionHandle>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1, (IPC::Decoder *)a2, (uint64_t)v5);
  }
  else
  {
    *a1 = 0;
    a1[32] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::StreamServerConnectionHandle>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(_BYTE *a1, IPC::Decoder *a2, uint64_t a3)
{
  _BYTE v5[32];

  IPC::Decoder::decode<IPC::StreamServerConnectionHandle>(v5, a2);
  if (!v5[24])
  {
    *a1 = 0;
    a1[32] = 0;
    goto LABEL_4;
  }
  if (*(_BYTE *)(a3 + 8))
  {
    std::make_optional[abi:sn180100]<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::StreamServerConnectionHandle>,WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::StreamServerConnectionHandle>((uint64_t)a1, *(_QWORD *)a3, (uint64_t)v5);
LABEL_4:
    std::__optional_destruct_base<IPC::StreamServerConnectionHandle,false>::~__optional_destruct_base[abi:sn180100](v5);
    return;
  }
  __break(1u);
}

uint64_t std::make_optional[abi:sn180100]<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::StreamServerConnectionHandle>,WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::StreamServerConnectionHandle>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  WTF::MachSendRight::MachSendRight();
  result = WTF::MachSendRight::MachSendRight();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a3 + 16);
  *(_BYTE *)(a1 + 32) = 1;
  return result;
}

_BYTE *std::__optional_destruct_base<IPC::StreamServerConnectionHandle,false>::~__optional_destruct_base[abi:sn180100](_BYTE *a1)
{
  if (a1[24])
  {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a1 + 8));
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)a1);
  }
  return a1;
}

_BYTE *std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::StreamServerConnectionHandle>,false>::~__optional_destruct_base[abi:sn180100](_BYTE *a1)
{
  if (a1[32])
  {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a1 + 16));
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a1 + 8));
  }
  return a1;
}

uint64_t IPC::Decoder::decode<WebCore::NowPlayingInfo>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::NowPlayingInfo,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 112))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::NowPlayingInfo,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  if (*(_BYTE *)(a1 + 112))
  {
    std::__optional_destruct_base<WebCore::NowPlayingInfoArtwork,false>::~__optional_destruct_base[abi:sn180100](a1 + 32, a2);
    v4 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v3);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v3);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v3);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  return a1;
}

unint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t *a1)
{
  unint64_t result;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,void>::decode(a1);
  if (!v3)
  {
    result = 0;
    v5 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
    {
      if (!v4)
        return 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(a1[3], v5);
      v8 = *a1;
      v7 = a1[1];
      v9 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      result = 0;
      if (v9 && v7)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v8);
        return 0;
      }
    }
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WTF::String,WTFLogChannelState,WTFLogLevel>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::String,WTFLogChannelState,WTFLogLevel>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WTF::String,WTFLogChannelState,WTFLogLevel>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;

  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v6);
  if (v7)
  {
    result = (WTF::StringImpl *)IPC::ArgumentCoder<std::tuple<WTF::String,WTFLogChannelState,WTFLogLevel>,void>::decode<IPC::Decoder,WTF::String>(a1, (uint64_t *)&v6, a2);
    if (v7)
    {
      result = v6;
      v6 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[16] = 0;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::String,WTFLogChannelState,WTFLogLevel>,void>::decode<IPC::Decoder,WTF::String>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;
  __int16 v7;

  result = IPC::Decoder::decode<WebCore::NotificationDirection>(a1);
  v7 = result;
  if ((unsigned __int16)result > 0xFFu)
    return IPC::ArgumentCoder<std::tuple<WTF::String,WTFLogChannelState,WTFLogLevel>,void>::decode<IPC::Decoder,WTF::String,WTFLogChannelState>(a1, a2, &v7, a3);
  *a3 = 0;
  a3[16] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::String,WTFLogChannelState,WTFLogLevel>,void>::decode<IPC::Decoder,WTF::String,WTFLogChannelState>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t result;
  char v8;
  uint64_t v9;

  result = IPC::Decoder::decode<WebCore::MediaPlayerReadyState>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v8 = 0;
    *a4 = 0;
LABEL_6:
    a4[16] = v8;
    return result;
  }
  if (*((_BYTE *)a2 + 8) && a3[1])
  {
    v9 = *a2;
    *a2 = 0;
    *(_QWORD *)a4 = v9;
    a4[8] = *a3;
    a4[9] = result;
    v8 = 1;
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages25GPUConnectionToWebProcess18EnsureAudioSessionEN6WebKit25GPUConnectionToWebProcessES8_FvONS_17CompletionHandlerIFvRKNS7_31RemoteAudioSessionConfigurationEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSC_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B6E70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

void IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,IPC::ConnectionHandle,WebKit::GPUProcessConnectionParameters>>(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,IPC::ConnectionHandle,WebKit::GPUProcessConnectionParameters>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[72])
  {
    v4 = *a2;
    v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v6 = a2[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,IPC::ConnectionHandle,WebKit::GPUProcessConnectionParameters>,void>::decode<IPC::Decoder>(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD v5[2];

  v5[0] = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  v5[1] = v4;
  if ((_BYTE)v4)
  {
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,IPC::ConnectionHandle,WebKit::GPUProcessConnectionParameters>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1, a2, (uint64_t)v5);
  }
  else
  {
    *a1 = 0;
    a1[72] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,IPC::ConnectionHandle,WebKit::GPUProcessConnectionParameters>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(_BYTE *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD v7[2];

  v7[0] = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  v7[1] = v6;
  if ((_BYTE)v6)
  {
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,IPC::ConnectionHandle,WebKit::GPUProcessConnectionParameters>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID>(a1, (IPC::Decoder *)a2, a3, (uint64_t)v7);
  }
  else
  {
    *a1 = 0;
    a1[72] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,IPC::ConnectionHandle,WebKit::GPUProcessConnectionParameters>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID>(_BYTE *a1, IPC::Decoder *a2, uint64_t a3, uint64_t a4)
{
  _BYTE v8[4];
  char v9;

  IPC::Decoder::decode<IPC::ConnectionHandle>(a2, v8);
  if (v9)
  {
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,IPC::ConnectionHandle,WebKit::GPUProcessConnectionParameters>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,IPC::ConnectionHandle>(a1, a2, a3, a4, (uint64_t)v8);
    if (v9)
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v8);
  }
  else
  {
    *a1 = 0;
    a1[72] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,IPC::ConnectionHandle,WebKit::GPUProcessConnectionParameters>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,IPC::ConnectionHandle>(_BYTE *a1, IPC::Decoder *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BYTE v9[52];
  char v10;

  IPC::Decoder::decode<WebKit::GPUProcessConnectionParameters>((uint64_t)v9, a2);
  if (v10)
  {
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,IPC::ConnectionHandle,WebKit::GPUProcessConnectionParameters>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,IPC::ConnectionHandle,WebKit::GPUProcessConnectionParameters>((uint64_t)a1, *(_QWORD *)a3, *(_BYTE *)(a3 + 8), *(_QWORD *)a4, *(_BYTE *)(a4 + 8), a5, (uint64_t)v9);
    if (v10)
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v9);
  }
  else
  {
    *a1 = 0;
    a1[72] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,IPC::ConnectionHandle,WebKit::GPUProcessConnectionParameters>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,IPC::ConnectionHandle,WebKit::GPUProcessConnectionParameters>(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  if (a3 && a5 && *(_BYTE *)(a6 + 4) && *(_BYTE *)(a7 + 52))
    std::make_optional[abi:sn180100]<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,IPC::ConnectionHandle,WebKit::GPUProcessConnectionParameters>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,IPC::ConnectionHandle,WebKit::GPUProcessConnectionParameters>(a1, a2, a4, a6, a7);
  else
    __break(1u);
}

__n128 std::make_optional[abi:sn180100]<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,IPC::ConnectionHandle,WebKit::GPUProcessConnectionParameters>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,IPC::ConnectionHandle,WebKit::GPUProcessConnectionParameters>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  WTF::MachSendRight::MachSendRight();
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)(a1 + 20), (const WTF::MachSendRight *)a5);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a5 + 4);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a5 + 20);
  result = *(__n128 *)(a5 + 36);
  *(__n128 *)(a1 + 56) = result;
  *(_BYTE *)(a1 + 72) = 1;
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10GPUProcess31CreateGPUConnectionToWebProcessEN6WebKit10GPUProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEN3PAL9SessionIDEONS2_16ConnectionHandleEONS7_30GPUProcessConnectionParametersEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B6E98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10GPUProcess31CreateGPUConnectionToWebProcessEN6WebKit10GPUProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEN3PAL9SessionIDEONS2_16ConnectionHandleEONS7_30GPUProcessConnectionParametersEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B6E98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10GPUProcess31CreateGPUConnectionToWebProcessEN6WebKit10GPUProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEN3PAL9SessionIDEONS2_16ConnectionHandleEONS7_30GPUProcessConnectionParametersEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  return IPC::handleMessageAsync<Messages::GPUProcess::CreateGPUConnectionToWebProcess,WebKit::GPUProcess,WebKit::GPUProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,IPC::ConnectionHandle &&,WebKit::GPUProcessConnectionParameters &&,WTF::CompletionHandler<void ()(void)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::GPUProcess *,void ()(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,IPC::ConnectionHandle &&,WebKit::GPUProcessConnectionParameters &&,WTF::CompletionHandler<void ()(void)> &&) WebKit::GPUProcess::*)::{lambda(Messages::GPUProcess::CreateGPUConnectionToWebProcess &&)#1}::operator()<>((uint64_t *)(a1 + 8));
}

IPC::Encoder *IPC::handleMessageAsync<Messages::GPUProcess::CreateGPUConnectionToWebProcess,WebKit::GPUProcess,WebKit::GPUProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,IPC::ConnectionHandle &&,WebKit::GPUProcessConnectionParameters &&,WTF::CompletionHandler<void ()(void)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::GPUProcess *,void ()(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,IPC::ConnectionHandle &&,WebKit::GPUProcessConnectionParameters &&,WTF::CompletionHandler<void ()(void)> &&) WebKit::GPUProcess::*)::{lambda(Messages::GPUProcess::CreateGPUConnectionToWebProcess &&)#1}::operator()<>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *a1;
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2833;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(a1[1], (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

_BYTE *std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,IPC::ConnectionHandle,WebKit::GPUProcessConnectionParameters>,false>::~__optional_destruct_base[abi:sn180100](_BYTE *a1)
{
  if (a1[72])
  {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a1 + 20));
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a1 + 16));
  }
  return a1;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::ArgumentCoder<std::tuple<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  void *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  result = IPC::Decoder::decode<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)&v8);
  v6 = v10;
  if (v10)
  {
    *(_QWORD *)a3 = v8;
    v7 = v9;
    v8 = 0;
    v9 = 0;
    *(_QWORD *)(a3 + 8) = v7;
    result = WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v5);
    v6 = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 16) = v6;
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10GPUProcess16PrepareToSuspendEN6WebKit10GPUProcessES8_FvbNS_13MonotonicTimeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B6EC0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10GPUProcess16PrepareToSuspendEN6WebKit10GPUProcessES8_FvbNS_13MonotonicTimeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B6EC0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10GPUProcess16PrepareToSuspendEN6WebKit10GPUProcessES8_FvbNS_13MonotonicTimeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2834;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::GPUProcessSessionParameters,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(a1 + 32))
  {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(a1 + 24));
    v3 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, v2);
      else
        *(_DWORD *)v3 -= 2;
    }
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(a1 + 8));
    v5 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<std::tuple<PAL::SessionID,WebKit::GPUProcessSessionParameters>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(a1 + 40))
  {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(a1 + 32));
    v3 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, v2);
      else
        *(_DWORD *)v3 -= 2;
    }
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(a1 + 16));
    v5 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10GPUProcess19UpdateCaptureAccessEN6WebKit10GPUProcessES8_FvbbbNS_23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B6EE8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10GPUProcess19UpdateCaptureAccessEN6WebKit10GPUProcessES8_FvbbbNS_23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B6EE8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10GPUProcess19UpdateCaptureAccessEN6WebKit10GPUProcessES8_FvbbbNS_23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2836;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::MockMediaDevice>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::MockMediaDevice>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[96])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::MockMediaDevice>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *v3;
  __int128 v5[6];
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebCore::MockMediaDevice>(a1, (uint64_t)v5);
  if (v6)
  {
    IPC::ArgumentCoder<std::tuple<WebCore::MockMediaDevice>,void>::decode<IPC::Decoder,WebCore::MockMediaDevice>(v5, (uint64_t)a2);
  }
  else
  {
    *a2 = 0;
    a2[96] = 0;
  }
  return std::__optional_destruct_base<WebCore::MockMediaDevice,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5, v3);
}

void IPC::Decoder::decode<WebCore::MockMediaDevice>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebCore::MockMediaDevice,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 96))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::MockMediaDevice>,void>::decode<IPC::Decoder,WebCore::MockMediaDevice>@<X0>(__int128 *a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v3;
  uint64_t result;

  if (*((_BYTE *)a1 + 96))
  {
    v3 = *a1;
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    *(_OWORD *)a2 = v3;
    *(_BYTE *)(a2 + 16) = *((_BYTE *)a1 + 16);
    *(_BYTE *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 88) = -1;
    result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::MockMicrophoneProperties,WebCore::MockSpeakerProperties,WebCore::MockCameraProperties,WebCore::MockDisplayProperties>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::MockMicrophoneProperties,WebCore::MockSpeakerProperties,WebCore::MockCameraProperties,WebCore::MockDisplayProperties>,(std::__variant_detail::_Trait)1>>(a2 + 24, (uint64_t)a1 + 24);
    *(_BYTE *)(a2 + 96) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::MockMediaDevice,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  char v7;

  if (*(_BYTE *)(a1 + 96))
  {
    v3 = *(unsigned int *)(a1 + 88);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_1E34B6F00[v3])(&v7, a1 + 24);
    *(_DWORD *)(a1 + 88) = -1;
    v4 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t IPC::Decoder::decode<std::tuple<BOOL,BOOL>>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<std::tuple<BOOL,BOOL>,void>::decode<IPC::Decoder>(a1);
  if ((result & 0xFF0000) == 0)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<BOOL,BOOL>,void>::decode<IPC::Decoder>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  __int16 v15;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v10 = 0;
    v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11)
    {
      v14 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
        a1 = v14;
        v5 = *v14;
        v10 = v14[1];
      }
      else
      {
        v10 = 0;
        v5 = 0;
      }
    }
    goto LABEL_7;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  LOBYTE(v5) = (_BYTE)v4 + 1;
  a1[2] = v4 + 1;
  if (!v2)
  {
    v10 = v1;
    v5 = 0;
LABEL_7:
    v1 = 0;
    v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12)
    {
      v13 = a1;
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v5, v10);
        a1 = v13;
        v2 = *v13;
        v1 = v13[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
      }
    }
    goto LABEL_8;
  }
  v6 = *v4;
  if (v6 < 2)
  {
    v15 = (v6 != 0) | 0x100;
    LODWORD(v7) = IPC::ArgumentCoder<std::tuple<BOOL,BOOL>,void>::decode<IPC::Decoder,BOOL>(a1, (unsigned __int8 *)&v15);
    LOBYTE(v5) = BYTE1(v7);
    v8 = BYTE2(v7);
    return (v8 << 16) | (v5 << 8) | v7;
  }
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  v7 = a1[3];
  if (v7)
  {
    if (v1)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v2);
    v8 = 0;
    LOBYTE(v7) = 0;
  }
  else
  {
    v8 = 0;
  }
  return (v8 << 16) | (v5 << 8) | v7;
}

uint64_t IPC::ArgumentCoder<std::tuple<BOOL,BOOL>,void>::decode<IPC::Decoder,BOOL>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  v3 = a1[1];
  v4 = *a1;
  v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    v12 = 0;
    v13 = 0;
    *a1 = 0;
    a1[1] = 0;
    v14 = a1[3];
    if (v14)
    {
      v16 = a1;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
        a1 = v16;
        v13 = *v16;
        v12 = v16[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
    }
    goto LABEL_8;
  }
  v6 = (unsigned __int8 *)(v4 + v5);
  LOBYTE(v7) = (_BYTE)v6 + 1;
  a1[2] = v6 + 1;
  if (!v4)
  {
    v12 = v3;
    v13 = 0;
LABEL_8:
    v3 = 0;
    v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7)
    {
      v15 = a1;
      if (v12)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v7 + 16))(v7, v13, v12);
        a1 = v15;
        v4 = *v15;
        v3 = v15[1];
      }
      else
      {
        v3 = 0;
        v4 = 0;
      }
    }
LABEL_9:
    *a1 = 0;
    a1[1] = 0;
    a1 = (_QWORD *)a1[3];
    if (!a1)
    {
LABEL_10:
      v9 = 0;
      v10 = 0;
      return (v7 << 8) | (v10 << 16) | v9;
    }
LABEL_12:
    if (v3)
      (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v4);
    goto LABEL_10;
  }
  v8 = *v6;
  if (v8 >= 2)
    goto LABEL_9;
  LOBYTE(v7) = a2[1];
  if (!(_BYTE)v7)
  {
    __break(1u);
    goto LABEL_12;
  }
  LOBYTE(v7) = v8 != 0;
  v9 = *a2;
  v10 = 1;
  return (v7 << 8) | (v10 << 16) | v9;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10GPUProcess32RequestBitmapImageForCurrentTimeEN6WebKit10GPUProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS9_INSA_25MediaPlayerIdentifierTypeESD_yEEONS_17CompletionHandlerIFvONSt3__18optionalINSA_21ShareableBitmapHandleEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B6F30;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10GPUProcess32RequestBitmapImageForCurrentTimeEN6WebKit10GPUProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS9_INSA_25MediaPlayerIdentifierTypeESD_yEEONS_17CompletionHandlerIFvONSt3__18optionalINSA_21ShareableBitmapHandleEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B6F30;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10GPUProcess32RequestBitmapImageForCurrentTimeEN6WebKit10GPUProcessES8_FvNS_23ObjectIdentifierGenericIN7WebCore21ProcessIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS9_INSA_25MediaPlayerIdentifierTypeESD_yEEONS_17CompletionHandlerIFvONSt3__18optionalINSA_21ShareableBitmapHandleEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2835;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::optional<WebCore::ShareableBitmapHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::ShareableBitmapHandle>>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10GPUProcess35WebProcessConnectionCountForTestingEN6WebKit10GPUProcessES8_FvONS_17CompletionHandlerIFvyEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B6F58;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10GPUProcess35WebProcessConnectionCountForTestingEN6WebKit10GPUProcessES8_FvONS_17CompletionHandlerIFvyEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B6F58;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10GPUProcess35WebProcessConnectionCountForTestingEN6WebKit10GPUProcessES8_FvONS_17CompletionHandlerIFvyEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEE4callEy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2837;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

WebKit *API::WebArchive::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, WebKit **a4@<X8>)
{
  WebKit *v8;
  WebKit *result;

  v8 = (WebKit *)API::Object::newObject(0x30uLL, 30);
  result = API::WebArchive::WebArchive(v8, a1, a2, a3);
  *a4 = v8;
  return result;
}

void sub_197014EF8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

API::WebArchive *API::WebArchive::create@<X0>(API::WebArchive *this@<X0>, API::WebArchive **a2@<X8>)
{
  API::WebArchive *v5;
  API::WebArchive *result;

  v5 = (API::WebArchive *)API::Object::newObject(0x30uLL, 30);
  result = API::WebArchive::WebArchive(v5, this);
  *a2 = v5;
  return result;
}

void sub_197014F50(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double API::WebArchive::create@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  WebKit *v3;
  double result;
  _DWORD *v5;

  v2 = (_QWORD *)API::Object::newObject(0x30uLL, 30);
  v3 = (WebKit *)WebCore::LegacyWebArchive::create();
  *v2 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(v3);
  *v2 = &off_1E34B6FA8;
  if (v5)
  {
    ++v5[2];
    v2[2] = v5;
    v2[3] = 0;
    v2[4] = 0;
    v2[5] = 0;
    *a1 = v2;
    if (v5[2] == 1)
      (*(void (**)())(*(_QWORD *)v5 + 8))();
    else
      --v5[2];
  }
  else
  {
    result = 0.0;
    *((_OWORD *)v2 + 1) = 0u;
    *((_OWORD *)v2 + 2) = 0u;
    *a1 = v2;
  }
  return result;
}

void sub_197015020(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

WebKit *API::WebArchive::WebArchive(WebKit *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _DWORD *v26;
  void *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(a1);
  *(_QWORD *)a1 = &off_1E34B6FA8;
  *((_QWORD *)a1 + 2) = 0;
  if (a2)
    CFRetain(*(CFTypeRef *)(a2 + 8));
  *((_QWORD *)a1 + 3) = a2;
  v8 = *a3;
  if (*a3)
    CFRetain(*(CFTypeRef *)(v8 + 8));
  *((_QWORD *)a1 + 4) = v8;
  v9 = *a4;
  if (*a4)
  {
    CFRetain(*(CFTypeRef *)(v9 + 8));
    v8 = *((_QWORD *)a1 + 4);
  }
  *((_QWORD *)a1 + 5) = v9;
  v10 = *(_DWORD **)(*((_QWORD *)a1 + 3) + 16);
  v11 = *(unsigned int *)(v8 + 28);
  v32 = 0;
  v33 = 0;
  if ((_DWORD)v11)
  {
    if (v11 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x19701530CLL);
    }
    v12 = 0;
    LODWORD(v33) = v11;
    v32 = WTF::fastMalloc((WTF *)(8 * v11));
    do
    {
      v13 = *((_QWORD *)a1 + 4);
      if (v12 >= *(unsigned int *)(v13 + 28))
        goto LABEL_34;
      v14 = *(_QWORD *)(*(_QWORD *)(v13 + 16) + 8 * v12);
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
      if (v12 >= *(unsigned int *)(v13 + 28))
      {
        __break(0xC471u);
        JUMPOUT(0x1970152F4);
      }
      v15 = *(_QWORD *)(*(_QWORD *)(v13 + 16) + 8 * v12);
      CFRetain(*(CFTypeRef *)(v15 + 8));
      v16 = *(_QWORD *)(v15 + 16);
      ++*(_DWORD *)(v16 + 8);
      CFRelease(*(CFTypeRef *)(v15 + 8));
      v17 = HIDWORD(v33) + 1;
      *(_QWORD *)(v32 + 8 * HIDWORD(v33)) = v16;
      HIDWORD(v33) = v17;
      ++v12;
    }
    while (v11 != v12);
    v9 = *((_QWORD *)a1 + 5);
  }
  v18 = *(unsigned int *)(v9 + 28);
  v30 = 0;
  v31 = 0;
  if ((_DWORD)v18)
  {
    if (v18 >> 29)
    {
LABEL_34:
      __break(0xC471u);
      JUMPOUT(0x1970152ECLL);
    }
    v19 = WTF::fastMalloc((WTF *)(8 * v18));
    v20 = 0;
    LODWORD(v31) = v18;
    v30 = v19;
    do
    {
      v21 = *((_QWORD *)a1 + 5);
      if (v20 >= *(unsigned int *)(v21 + 28))
      {
        __break(0xC471u);
        JUMPOUT(0x1970152FCLL);
      }
      v22 = *(_QWORD *)(*(_QWORD *)(v21 + 16) + 8 * v20);
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
      if (v20 >= *(unsigned int *)(v21 + 28))
      {
        __break(0xC471u);
        JUMPOUT(0x197015304);
      }
      v23 = *(_QWORD *)(*(_QWORD *)(v21 + 16) + 8 * v20);
      CFRetain(*(CFTypeRef *)(v23 + 8));
      v24 = *(_QWORD *)(v23 + 16);
      ++*(_DWORD *)(v24 + 8);
      CFRelease(*(CFTypeRef *)(v23 + 8));
      *(_QWORD *)(v19 + 8 * v20) = v24;
      HIDWORD(v31) = ++v20;
    }
    while (v18 != v20);
  }
  ++v10[2];
  WebCore::LegacyWebArchive::create();
  v26 = (_DWORD *)*((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v29;
  if (v26)
  {
    if (v26[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
    else
      --v26[2];
  }
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  WTF::Vector<WTF::RefPtr<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, v25);
  WTF::Vector<WTF::RefPtr<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v27);
  return a1;
}

void sub_197015318(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, WTF *a13)
{
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;

  WTF::Vector<WTF::RefPtr<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, a2);
  v15 = v13[5];
  v13[5] = 0;
  if (v15)
    CFRelease(*(CFTypeRef *)(v15 + 8));
  v16 = v13[4];
  v13[4] = 0;
  if (v16)
    CFRelease(*(CFTypeRef *)(v16 + 8));
  v17 = v13[3];
  v13[3] = 0;
  if (v17)
    CFRelease(*(CFTypeRef *)(v17 + 8));
  v18 = (_DWORD *)v13[2];
  v13[2] = 0;
  if (v18)
  {
    if (v18[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
    else
      --v18[2];
  }
  _Unwind_Resume(a1);
}

API::WebArchive *API::WebArchive::WebArchive(API::WebArchive *this, API::Data *a2)
{
  void *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  unsigned int *v7;
  unsigned int *v9;
  _DWORD *v10;

  *(_QWORD *)this = off_1E34CC2A8;
  WebKit::InitializeWebKit2(this);
  *(_QWORD *)this = &off_1E34B6FA8;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  WebCore::SharedBuffer::create<std::span<unsigned char const,18446744073709551615ul>>((uint64_t *)&v9);
  WebCore::LegacyWebArchive::create();
  v4 = v10;
  v10 = 0;
  v5 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v4;
  if (v5)
  {
    if (v5[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
      v6 = v10;
      v10 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
    }
    else
    {
      --v5[2];
      v10 = 0;
    }
  }
  v7 = v9;
  v9 = 0;
  if (v7)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v7, v3);
  return this;
}

void sub_197015508(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int *a11)
{
  _QWORD *v11;
  _DWORD **v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;

  if (a11)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a11, a2);
  v14 = v11[5];
  v11[5] = 0;
  if (v14)
    CFRelease(*(CFTypeRef *)(v14 + 8));
  v15 = v11[4];
  v11[4] = 0;
  if (v15)
    CFRelease(*(CFTypeRef *)(v15 + 8));
  v16 = v11[3];
  v11[3] = 0;
  if (v16)
    CFRelease(*(CFTypeRef *)(v16 + 8));
  v17 = *v12;
  *v12 = 0;
  if (v17)
  {
    if (v17[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
    else
      --v17[2];
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebCore::SharedBuffer::create<std::span<unsigned char const,18446744073709551615ul>>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  void *v3;
  unsigned int *result;
  unsigned int *v5;

  WebCore::FragmentedSharedBuffer::create();
  v2 = WTF::fastMalloc((WTF *)0x38);
  MEMORY[0x19AEAD8A0](v2, &v5);
  *a1 = v2;
  result = v5;
  v5 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v3);
  return result;
}

void sub_1970155F4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  WTF *v10;
  void *v12;

  WTF::fastFree(v10, a2);
  if (a10)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a10, v12);
  _Unwind_Resume(a1);
}

void API::WebArchive::~WebArchive(API::WebArchive *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;

  *(_QWORD *)this = &off_1E34B6FA8;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  v5 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
}

{
  API::WebArchive::~WebArchive(this);
  JUMPOUT(0x19AEB936CLL);
}

WebKit *API::WebArchive::mainResource(API::WebArchive *this)
{
  WebKit *v1;
  uint64_t v3;
  uint64_t v4;

  v1 = (WebKit *)*((_QWORD *)this + 3);
  if (!v1)
  {
    v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 16);
    if (v3)
      ++*(_DWORD *)(v3 + 8);
    v1 = (WebKit *)API::Object::newObject(0x18uLL, 31);
    *(_QWORD *)v1 = off_1E34CC2A8;
    WebKit::InitializeWebKit2(v1);
    *(_QWORD *)v1 = &off_1E34B6FD0;
    *((_QWORD *)v1 + 2) = v3;
    v4 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v1;
    if (v4)
    {
      CFRelease(*(CFTypeRef *)(v4 + 8));
      return (WebKit *)*((_QWORD *)this + 3);
    }
  }
  return v1;
}

void sub_197015770(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1)
  {
    if (v1[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
    else
      --v1[2];
  }
  _Unwind_Resume(exception_object);
}

uint64_t API::WebArchive::subresources(API::WebArchive *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebKit *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = *((_QWORD *)this + 4);
  if (!result)
  {
    v3 = *((_QWORD *)this + 2);
    v15 = 0;
    v16 = 0;
    v4 = *(unsigned int *)(v3 + 36);
    if ((_DWORD)v4)
    {
      if (v4 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v5 = WTF::fastMalloc((WTF *)(8 * v4));
      LODWORD(v16) = v4;
      v15 = v5;
      v6 = *(unsigned int *)(v3 + 36);
      if ((_DWORD)v6)
      {
        v7 = 0;
        v8 = *(_QWORD *)(v3 + 24);
        v9 = 8 * v6;
        do
        {
          v10 = *(_QWORD *)(v8 + 8 * v7);
          ++*(_DWORD *)(v10 + 8);
          v11 = (WebKit *)API::Object::newObject(0x18uLL, 31);
          *(_QWORD *)v11 = off_1E34CC2A8;
          WebKit::InitializeWebKit2(v11);
          *(_QWORD *)v11 = &off_1E34B6FD0;
          *((_QWORD *)v11 + 2) = v10;
          *(_QWORD *)(v5 + 8 * v7++) = v11;
          v9 -= 8;
        }
        while (v9);
        v5 = v15;
        LODWORD(v4) = v16;
      }
      else
      {
        LODWORD(v6) = HIDWORD(v16);
      }
    }
    else
    {
      LODWORD(v6) = 0;
      v5 = 0;
    }
    v12 = API::Object::newObject(0x20uLL, 1);
    *(_QWORD *)v12 = off_1E34CC2A8;
    WebKit::InitializeWebKit2((WebKit *)v12);
    *(_QWORD *)v12 = &off_1E34CC2F8;
    v15 = 0;
    v16 = 0;
    *(_QWORD *)(v12 + 16) = v5;
    *(_DWORD *)(v12 + 24) = v4;
    *(_DWORD *)(v12 + 28) = v6;
    v14 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v12;
    if (v14)
      CFRelease(*(CFTypeRef *)(v14 + 8));
    WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v13);
    return *((_QWORD *)this + 4);
  }
  return result;
}

void sub_1970158F4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t API::WebArchive::subframeArchives(API::WebArchive *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  WebKit *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = *((_QWORD *)this + 5);
  if (!result)
  {
    v3 = *((_QWORD *)this + 2);
    v15 = 0;
    v16 = 0;
    v4 = *(unsigned int *)(v3 + 52);
    if ((_DWORD)v4)
    {
      if (v4 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v5 = WTF::fastMalloc((WTF *)(8 * v4));
      LODWORD(v16) = v4;
      v15 = v5;
      v6 = *(unsigned int *)(v3 + 52);
      if ((_DWORD)v6)
      {
        v7 = 0;
        v8 = *(_QWORD *)(v3 + 40);
        v9 = 8 * v6;
        do
        {
          v10 = *(_DWORD **)(v8 + 8 * v7);
          ++v10[2];
          v11 = (WebKit *)API::Object::newObject(0x30uLL, 30);
          *(_QWORD *)v11 = off_1E34CC2A8;
          WebKit::InitializeWebKit2(v11);
          *(_QWORD *)v11 = &off_1E34B6FA8;
          ++v10[2];
          *((_QWORD *)v11 + 2) = v10;
          *((_QWORD *)v11 + 3) = 0;
          *((_QWORD *)v11 + 4) = 0;
          *((_QWORD *)v11 + 5) = 0;
          if (v10[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
          else
            --v10[2];
          *(_QWORD *)(v5 + 8 * v7++) = v11;
          v9 -= 8;
        }
        while (v9);
        v5 = v15;
        LODWORD(v4) = v16;
      }
      else
      {
        LODWORD(v6) = HIDWORD(v16);
      }
    }
    else
    {
      LODWORD(v6) = 0;
      v5 = 0;
    }
    v12 = API::Object::newObject(0x20uLL, 1);
    *(_QWORD *)v12 = off_1E34CC2A8;
    WebKit::InitializeWebKit2((WebKit *)v12);
    *(_QWORD *)v12 = &off_1E34CC2F8;
    v15 = 0;
    v16 = 0;
    *(_QWORD *)(v12 + 16) = v5;
    *(_DWORD *)(v12 + 24) = v4;
    *(_DWORD *)(v12 + 28) = v6;
    v14 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v12;
    if (v14)
      CFRelease(*(CFTypeRef *)(v14 + 8));
    WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v13);
    return *((_QWORD *)this + 5);
  }
  return result;
}

void sub_197015ABC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

void API::WebArchive::data(WebCore::LegacyWebArchive **this@<X0>, WebKit **a2@<X8>)
{
  const UInt8 *BytePtr;
  CFIndex Length;
  WebKit *v5;
  CFTypeRef cf;

  WebCore::LegacyWebArchive::rawDataRepresentation(this[2]);
  CFRetain(cf);
  BytePtr = CFDataGetBytePtr((CFDataRef)cf);
  Length = CFDataGetLength((CFDataRef)cf);
  if (Length < 0)
  {
    __break(0xC471u);
  }
  else
  {
    v5 = (WebKit *)API::Object::newObject(0x30uLL, 8);
    *(_QWORD *)v5 = off_1E34CC2A8;
    WebKit::InitializeWebKit2(v5);
    *(_QWORD *)v5 = &off_1E34AE750;
    *((_QWORD *)v5 + 2) = BytePtr;
    *((_QWORD *)v5 + 3) = Length;
    *((_QWORD *)v5 + 4) = API::releaseWebArchiveData;
    *((_QWORD *)v5 + 5) = cf;
    *a2 = v5;
    if (cf)
      CFRelease(cf);
  }
}

void sub_197015BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void API::releaseWebArchiveData(API *this, CFTypeRef cf, const void *a3)
{
  CFRelease(cf);
}

API::WebArchiveResource *API::WebArchiveResource::create@<X0>(API::WebArchiveResource *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::String *a3@<X2>, const WTF::String *a4@<X3>, API::WebArchiveResource **a5@<X8>)
{
  API::WebArchiveResource *v11;
  API::WebArchiveResource *result;

  v11 = (API::WebArchiveResource *)API::Object::newObject(0x18uLL, 31);
  result = API::WebArchiveResource::WebArchiveResource(v11, this, a2, a3, a4);
  *a5 = v11;
  return result;
}

void sub_197015C4C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

API::WebArchiveResource *API::WebArchiveResource::WebArchiveResource(API::WebArchiveResource *this, API::Data *a2, WTF::StringImpl **a3, const WTF::String *a4, const WTF::String *a5)
{
  uint64_t v8;
  WTF::StringImpl *v9;
  CFTypeRef v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unsigned int *v14;
  unsigned int *v15;
  _BYTE v17[138];
  char v18;
  CFTypeRef cf;
  char v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  __int128 v23;
  unsigned int *v24;
  unsigned int *v25;

  *(_QWORD *)this = off_1E34CC2A8;
  WebKit::InitializeWebKit2(this);
  *(_QWORD *)this = &off_1E34B6FD0;
  v23 = *((_OWORD *)a2 + 1);
  WebCore::SharedBuffer::create<std::span<unsigned char const,18446744073709551615ul>>((uint64_t *)&v24);
  v8 = (uint64_t)v24;
  v24 = 0;
  v25 = (unsigned int *)v8;
  WTF::URL::URL((uint64_t)&v22, a3);
  v21 = 0;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v17);
  cf = 0;
  v20 = 0;
  v18 = v18 & 0xF1 | 4;
  WebCore::ArchiveResource::create();
  v10 = cf;
  cf = 0;
  if (v10)
    CFRelease(v10);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v17, v9);
  v12 = v21;
  v21 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v22;
  v22 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v25;
  v25 = 0;
  if (v14)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v14, v11);
  v15 = v24;
  v24 = 0;
  if (v15)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v15, v11);
  return this;
}

void sub_197015DF0(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,CFTypeRef cf)
{
  uint64_t v41;
  CFTypeRef v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  unsigned int *v47;
  unsigned int *v48;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  v43 = cf;
  cf = 0;
  if (v43)
    CFRelease(v43);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&a11, a2);
  v45 = *(WTF::StringImpl **)(v41 - 144);
  *(_QWORD *)(v41 - 144) = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, v44);
    else
      *(_DWORD *)v45 -= 2;
  }
  v46 = *(WTF::StringImpl **)(v41 - 136);
  *(_QWORD *)(v41 - 136) = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, v44);
    else
      *(_DWORD *)v46 -= 2;
  }
  v47 = *(unsigned int **)(v41 - 72);
  *(_QWORD *)(v41 - 72) = 0;
  if (v47)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v47, v44);
  v48 = *(unsigned int **)(v41 - 80);
  *(_QWORD *)(v41 - 80) = 0;
  if (v48)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v48, v44);
  _Unwind_Resume(a1);
}

void API::WebArchiveResource::~WebArchiveResource(API::WebArchiveResource *this)
{
  _DWORD *v2;

  *(_QWORD *)this = &off_1E34B6FD0;
  v2 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
}

{
  _DWORD *v2;

  *(_QWORD *)this = &off_1E34B6FD0;
  v2 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  JUMPOUT(0x19AEB936CLL);
}

void API::WebArchiveResource::data(API::WebArchiveResource *this@<X0>, void *a2@<X1>, WebKit **a3@<X8>)
{
  unsigned int *v4;
  unsigned int v5;
  void *v6;
  const UInt8 *BytePtr;
  CFIndex Length;
  WebKit *v9;
  WebCore::SharedBuffer *v10;
  CFTypeRef cf;

  v4 = *(unsigned int **)(*((_QWORD *)this + 2) + 312);
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  }
  WebCore::FragmentedSharedBuffer::makeContiguous((WebCore::FragmentedSharedBuffer *)v4);
  WebCore::SharedBuffer::createCFData(v10);
  if (v10)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v10, v6);
  CFRetain(cf);
  BytePtr = CFDataGetBytePtr((CFDataRef)cf);
  Length = CFDataGetLength((CFDataRef)cf);
  if (Length < 0)
  {
    __break(0xC471u);
  }
  else
  {
    v9 = (WebKit *)API::Object::newObject(0x30uLL, 8);
    *(_QWORD *)v9 = off_1E34CC2A8;
    WebKit::InitializeWebKit2(v9);
    *(_QWORD *)v9 = &off_1E34AE750;
    *((_QWORD *)v9 + 2) = BytePtr;
    *((_QWORD *)v9 + 3) = Length;
    *((_QWORD *)v9 + 4) = API::releaseWebArchiveResourceData;
    *((_QWORD *)v9 + 5) = cf;
    *a3 = v9;
    if (cf)
      CFRelease(cf);
  }
}

void sub_197016078(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int *a9, CFTypeRef cf)
{
  if (a9)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a9, a2);
  _Unwind_Resume(exception_object);
}

void API::releaseWebArchiveResourceData(API *this, CFTypeRef cf, const void *a3)
{
  CFRelease(cf);
}

CFTypeRef WebKit::DocumentEditingContext::toLegacyPlatformContext(uint64_t a1, char a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  void *cf;

  v4 = objc_alloc_init(MEMORY[0x1E0CEABF0]);
  if ((a2 & 2) != 0)
  {
    WebCore::AttributedString::nsAttributedString((WebCore::AttributedString *)a1);
    objc_msgSend(v4, "setContextBefore:", cf);
    if (cf)
      CFRelease(cf);
    WebCore::AttributedString::nsAttributedString((WebCore::AttributedString *)(a1 + 40));
    objc_msgSend(v4, "setSelectedText:", 0);
    WebCore::AttributedString::nsAttributedString((WebCore::AttributedString *)(a1 + 80));
    objc_msgSend(v4, "setContextAfter:", 0);
    WebCore::AttributedString::nsAttributedString((WebCore::AttributedString *)(a1 + 120));
    objc_msgSend(v4, "setMarkedText:", 0);
  }
  else
  {
    if ((a2 & 1) == 0)
      goto LABEL_10;
    WebCore::AttributedString::nsAttributedString((WebCore::AttributedString *)a1);
    objc_msgSend(v4, "setContextBefore:", objc_msgSend(cf, "string"));
    if (cf)
      CFRelease(cf);
    WebCore::AttributedString::nsAttributedString((WebCore::AttributedString *)(a1 + 40));
    objc_msgSend(v4, "setSelectedText:", objc_msgSend(0, "string"));
    WebCore::AttributedString::nsAttributedString((WebCore::AttributedString *)(a1 + 80));
    objc_msgSend(v4, "setContextAfter:", objc_msgSend(0, "string"));
    WebCore::AttributedString::nsAttributedString((WebCore::AttributedString *)(a1 + 120));
    objc_msgSend(v4, "setMarkedText:", objc_msgSend(0, "string"));
  }
  cf = 0;
LABEL_10:
  objc_msgSend(v4, "setSelectedRangeInMarkedText:", *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 208));
  v5 = *(unsigned int *)(a1 + 228);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)(a1 + 216);
    v7 = v6 + 32 * v5;
    do
    {
      WebCore::FloatRect::operator CGRect();
      objc_msgSend(v4, "addTextRect:forCharacterRange:", *(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24));
      v6 += 32;
    }
    while (v6 != v7);
  }
  WebCore::AttributedString::nsAttributedString((WebCore::AttributedString *)(a1 + 160));
  objc_msgSend(v4, "setAnnotatedText:", cf);
  if (cf)
    CFRelease(cf);
  if (a2 < 0)
  {
    v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a1 + 244));
    v9 = *(unsigned int *)(a1 + 244);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD **)(a1 + 232);
      v11 = &v10[2 * v9];
      do
      {
        v12 = objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithRange:", *v10, v10[1]);
        if (v12)
          objc_msgSend(v8, "addObject:", v12);
        v10 += 2;
      }
      while (v10 != v11);
    }
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(v4, "setAutocorrectedRanges:", v8);
    if (v8)
      CFRelease(v8);
  }
  return (id)CFMakeCollectable(v4);
}

void sub_197016358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

CFTypeRef WebKit::DocumentEditingContext::toPlatformContext(uint64_t a1, char a2)
{
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  void *cf;
  void *v26;
  void *v27;
  void *v28;
  CFTypeRef v29;

  if ((a2 & 2) != 0)
  {
    v5 = objc_alloc(MEMORY[0x1E0C92710]);
    WebCore::AttributedString::nsAttributedString((WebCore::AttributedString *)(a1 + 40));
    WebCore::AttributedString::nsAttributedString((WebCore::AttributedString *)a1);
    WebCore::AttributedString::nsAttributedString((WebCore::AttributedString *)(a1 + 80));
    WebCore::AttributedString::nsAttributedString((WebCore::AttributedString *)(a1 + 120));
    v6 = objc_msgSend(v5, "initWithAttributedSelectedText:contextBefore:contextAfter:markedText:selectedRangeInMarkedText:", v28, v27, v26, cf, *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 208));
  }
  else
  {
    if ((a2 & 1) == 0)
    {
      v4 = 0;
      goto LABEL_14;
    }
    v7 = objc_alloc(MEMORY[0x1E0C92710]);
    WebCore::AttributedString::nsAttributedString((WebCore::AttributedString *)(a1 + 40));
    v8 = objc_msgSend(v28, "string");
    WebCore::AttributedString::nsAttributedString((WebCore::AttributedString *)a1);
    v9 = objc_msgSend(v27, "string");
    WebCore::AttributedString::nsAttributedString((WebCore::AttributedString *)(a1 + 80));
    v10 = objc_msgSend(v26, "string");
    WebCore::AttributedString::nsAttributedString((WebCore::AttributedString *)(a1 + 120));
    v6 = objc_msgSend(v7, "initWithSelectedText:contextBefore:contextAfter:markedText:selectedRangeInMarkedText:", v8, v9, v10, objc_msgSend(cf, "string"), *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 208));
  }
  v4 = (void *)v6;
  v11 = cf;
  cf = 0;
  if (v11)
    CFRelease(v11);
  v12 = v26;
  v26 = 0;
  if (v12)
    CFRelease(v12);
  v13 = v27;
  v27 = 0;
  if (v13)
    CFRelease(v13);
  v14 = v28;
  v28 = 0;
  if (v14)
    CFRelease(v14);
LABEL_14:
  v15 = *(unsigned int *)(a1 + 228);
  if ((_DWORD)v15)
  {
    v16 = *(_QWORD *)(a1 + 216);
    v17 = v16 + 32 * v15;
    do
    {
      WebCore::FloatRect::operator CGRect();
      objc_msgSend(v4, "addTextRect:forCharacterRange:", *(_QWORD *)(v16 + 16), *(_QWORD *)(v16 + 24));
      v16 += 32;
    }
    while (v16 != v17);
  }
  WebCore::AttributedString::nsAttributedString((WebCore::AttributedString *)(a1 + 160));
  objc_msgSend(v4, "setAnnotatedText:", v28);
  v18 = v28;
  v29 = 0;
  if (v18)
    CFRelease(v18);
  if (a2 < 0)
  {
    v19 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a1 + 244));
    v20 = *(unsigned int *)(a1 + 244);
    if ((_DWORD)v20)
    {
      v21 = *(_QWORD **)(a1 + 232);
      v22 = &v21[2 * v20];
      do
      {
        v23 = objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithRange:", *v21, v21[1], cf, v26, v27, v29);
        if (v23)
          objc_msgSend(v19, "addObject:", v23);
        v21 += 2;
      }
      while (v21 != v22);
    }
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(v4, "setAutocorrectedRanges:", v19);
    if (v19)
      CFRelease(v19);
  }
  return (id)CFMakeCollectable(v4);
}

void sub_19701664C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef a9, CFTypeRef cf, CFTypeRef a11, CFTypeRef a12)
{
  if (cf)
    CFRelease(cf);
  if (a11)
    CFRelease(a11);
  if (a12)
    CFRelease(a12);
  _Unwind_Resume(exception_object);
}

_QWORD *WebKit::RemoteObjectInvocation::RemoteObjectInvocation(_QWORD *result, _DWORD **a2, uint64_t *a3, uint64_t *a4)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  if (*a2)
    *v4 += 2;
  *result = v4;
  v5 = *a3;
  *a3 = 0;
  result[1] = v5;
  v6 = *a4;
  *a4 = 0;
  result[2] = v6;
  return result;
}

void WebKit::RemoteObjectRegistry::~RemoteObjectRegistry(WebKit::RemoteObjectRegistry *this, void *a2)
{
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = off_1E34B6FF8;
  v3 = *((_QWORD *)this + 3);
  if (v3)
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v3, a2);
  objc_destroyWeak((id *)this + 2);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v4);
}

uint64_t *WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::HashTableTraits>::add<std::unique_ptr<WebKit::ProcessThrottlerActivity>>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, WebKit::ProcessThrottlerActivity **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  WebKit::ProcessThrottlerActivity *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v23 = 0;
        else
          v23 = *(unsigned int *)(v8 - 4);
        v28 = 0;
        v29 = v8 + 16 * v23;
        goto LABEL_29;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  v20 = *a3;
  *a3 = 0;
  result = (uint64_t *)std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)v16 + 1, v20);
  v21 = *v6;
  if (*v6)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v24 = *v6;
  if (*v6)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
    {
LABEL_22:
      result = (uint64_t *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v6, v16);
      v16 = result;
      v24 = *v6;
      if (*v6)
        v27 = *(unsigned int *)(v24 - 4);
      else
        v27 = 0;
    }
  }
  else if (3 * v27 <= 4 * v26)
  {
    goto LABEL_22;
  }
  v29 = v24 + 16 * v27;
  v28 = 1;
LABEL_29:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v29;
  *(_BYTE *)(a4 + 16) = v28;
  return result;
}

uint64_t WebKit::RemoteObjectRegistry::invokeMethod(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(objc_loadWeak((id *)(a1 + 16)), "_invokeMethod:", a2);
}

uint64_t WebKit::RemoteObjectRegistry::callReplyBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = (uint64_t *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v7, a2);
  if (v7)
  {
    v9 = v7 + 16 * *(unsigned int *)(v7 - 4);
    if (v9 == v8)
      return objc_msgSend(objc_loadWeak((id *)(a1 + 16)), "_callReplyWithID:blockInvocation:", a2, a3);
  }
  else
  {
    if (!v8)
      return objc_msgSend(objc_loadWeak((id *)(a1 + 16)), "_callReplyWithID:blockInvocation:", a2, a3);
    v9 = 0;
  }
  if (v9 != v8)
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::remove(v6, v8);
  return objc_msgSend(objc_loadWeak((id *)(a1 + 16)), "_callReplyWithID:blockInvocation:", a2, a3);
}

uint64_t WebKit::RemoteObjectRegistry::releaseUnusedReplyBlock(WebKit::RemoteObjectRegistry *this, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (uint64_t *)((char *)this + 24);
  v5 = *((_QWORD *)this + 3);
  v6 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v5, a2);
  if (v5)
  {
    v7 = v5 + 16 * *(unsigned int *)(v5 - 4);
    if (v7 == v6)
      return objc_msgSend(objc_loadWeak((id *)this + 2), "_releaseReplyWithID:", a2);
  }
  else
  {
    if (!v6)
      return objc_msgSend(objc_loadWeak((id *)this + 2), "_releaseReplyWithID:", a2);
    v7 = 0;
  }
  if (v7 != v6)
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::remove(v4, v6);
  return objc_msgSend(objc_loadWeak((id *)this + 2), "_releaseReplyWithID:", a2);
}

BOOL WebKit::methodSignaturesAreCompatible(WebKit *this, NSString *a2, NSString *a3)
{
  NSUInteger v5;
  NSUInteger v6;
  uint64_t v7;
  NSUInteger v8;
  int v9;
  int v10;
  int v11;
  int v12;
  _BOOL8 result;

  if (!-[NSString isEqualToString:](a2, "isEqualToString:", this))
    return 1;
  v5 = -[NSString length](a2, "length");
  if (v5 != -[WebKit length](this, "length"))
    return 0;
  v6 = -[NSString length](a2, "length");
  if (!v6)
    return 1;
  v7 = 0;
  v8 = v6 - 1;
  do
  {
    v9 = -[NSString characterAtIndex:](a2, "characterAtIndex:", v7);
    if (v9 == 66)
      v10 = 99;
    else
      v10 = v9;
    v11 = -[WebKit characterAtIndex:](this, "characterAtIndex:", v7);
    if (v11 == 66)
      v12 = 99;
    else
      v12 = v11;
    result = v10 == v12;
  }
  while (v10 == v12 && v8 != v7++);
  return result;
}

void encodeToObjectStream(objc_object *a1, objc_object *a2)
{
  Class isa;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  Class v8;
  uint64_t v9;
  uint64_t v10;
  WebKit *v11;
  Dictionary *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  WebKit *v19;
  WTF::StringImpl *v20;
  WebKit *v21;
  WKRemoteObjectEncoder v22;

  isa = a1[2].isa;
  if (!isa)
  {
    API::Array::create(&v21);
    v11 = v21;
    a1[2].isa = v21;
    v12 = (Dictionary *)a1[1].isa;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v19 = v11;
    v20 = v22.super.super.isa;
    WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>((uint64_t *)v12 + 2, &v20, (uint64_t *)&v19, (uint64_t)&v22);
    v14 = (uint64_t)v19;
    v19 = 0;
    if (v14)
      CFRelease(*(CFTypeRef *)(v14 + 8));
    v15 = v20;
    v20 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v13);
      else
        *(_DWORD *)v15 -= 2;
    }
    isa = a1[2].isa;
  }
  v4 = (_QWORD *)((char *)isa + 16);
  v5 = *((unsigned int *)isa + 7);
  if ((_DWORD)v5 == *((_DWORD *)isa + 6))
  {
    v16 = v5 + (v5 >> 2);
    if (v16 >= 0x10)
      v17 = v16 + 1;
    else
      v17 = 16;
    if (v17 <= v5 + 1)
      v18 = v5 + 1;
    else
      v18 = v17;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v4, v18);
    v7 = *((unsigned int *)isa + 7);
    v6 = (_QWORD *)(*((_QWORD *)isa + 2) + 8 * v7);
  }
  else
  {
    v6 = (_QWORD *)(*v4 + 8 * v5);
    LODWORD(v7) = *((_DWORD *)isa + 7);
  }
  *v6 = 0;
  *((_DWORD *)isa + 7) = v7 + 1;
  createEncodedObject(&v22, a1);
  v8 = a1[2].isa;
  if (*((_DWORD *)v8 + 7) <= v5)
  {
    __break(0xC471u);
  }
  else
  {
    v9 = *((_QWORD *)v8 + 2);
    v10 = *(_QWORD *)(v9 + 8 * v5);
    *(_QWORD *)(v9 + 8 * v5) = v22.super.super.isa;
    if (v10)
      CFRelease(*(CFTypeRef *)(v10 + 8));
  }
}

void sub_1970171FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(exception_object);
}

void sub_197017320(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_197017450(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_197017578(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970176AC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970177DC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_197017914(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_197017A44(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_197017B64(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef *API::Dictionary::get<API::Array>(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  WTF *v3;
  CFTypeRef *v4;
  CFTypeRef *v5;

  v3 = WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 16), a2, a3);
  if (!v3)
    return 0;
  v4 = (CFTypeRef *)v3;
  CFRetain(*((CFTypeRef *)v3 + 1));
  if ((*((unsigned int (**)(CFTypeRef *))*v4 + 2))(v4) == 1)
    v5 = v4;
  else
    v5 = 0;
  CFRelease(v4[1]);
  return v5;
}

void sub_197017BF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_197017FB8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    WTF::fastFree((WTF *)(a10 - 16), a2);
  _Unwind_Resume(exception_object);
}

CFTypeRef decodeObjectFromObjectStream(WKRemoteObjectDecoder *a1, _QWORD *a2)
{
  uint64_t objectStream;
  unint64_t objectStreamPosition;
  uint64_t v6;
  CFTypeRef *v7;
  CFTypeRef v8;

  objectStream = (uint64_t)a1->_objectStream;
  if (!objectStream)
    return 0;
  objectStreamPosition = a1->_objectStreamPosition;
  if (objectStreamPosition == *(_DWORD *)(objectStream + 28))
    return 0;
  a1->_objectStreamPosition = objectStreamPosition + 1;
  v6 = API::Array::at<API::Dictionary>(objectStream, objectStreamPosition);
  v7 = (CFTypeRef *)v6;
  if (v6)
    CFRetain(*(CFTypeRef *)(v6 + 8));
  v8 = decodeObject(a1, v7, a2);
  if (v7)
    CFRelease(v7[1]);
  return v8;
}

void sub_1970180A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(exception_object);
}

void sub_1970181D0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970182E8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef *API::Dictionary::get<API::Boolean>(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  WTF *v3;
  CFTypeRef *v4;
  CFTypeRef *v5;

  v3 = WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 16), a2, a3);
  if (!v3)
    return 0;
  v4 = (CFTypeRef *)v3;
  CFRetain(*((CFTypeRef *)v3 + 1));
  if ((*((unsigned int (**)(CFTypeRef *))*v4 + 2))(v4) == 32)
    v5 = v4;
  else
    v5 = 0;
  CFRelease(v4[1]);
  return v5;
}

void sub_197018374(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_197018458(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef *API::Dictionary::get<API::UInt64>(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  WTF *v3;
  CFTypeRef *v4;
  CFTypeRef *v5;

  v3 = WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 16), a2, a3);
  if (!v3)
    return 0;
  v4 = (CFTypeRef *)v3;
  CFRetain(*((CFTypeRef *)v3 + 1));
  if ((*((unsigned int (**)(CFTypeRef *))*v4 + 2))(v4) == 34)
    v5 = v4;
  else
    v5 = 0;
  CFRelease(v4[1]);
  return v5;
}

void sub_1970184E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1970185C8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970186C4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970187D4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef *API::Dictionary::get<API::Double>(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  WTF *v3;
  CFTypeRef *v4;
  CFTypeRef *v5;

  v3 = WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 16), a2, a3);
  if (!v3)
    return 0;
  v4 = (CFTypeRef *)v3;
  CFRetain(*((CFTypeRef *)v3 + 1));
  if ((*((unsigned int (**)(CFTypeRef *))*v4 + 2))(v4) == 33)
    v5 = v4;
  else
    v5 = 0;
  CFRelease(v4[1]);
  return v5;
}

void sub_197018860(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_19701894C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_197018AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  WTF::StringImpl *v12;

  CFRelease(*(CFTypeRef *)(v10 + 8));
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v12);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_197018CFC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  char v22;

  if ((v22 & 1) == 0)
    CFRelease(*(CFTypeRef *)(v21 + 8));
  if (a21)
    WTF::fastFree((WTF *)(a21 - 16), a2);
  _Unwind_Resume(exception_object);
}

CFTypeRef decodeObject(WKRemoteObjectDecoder *a1, const void *a2, _QWORD *a3)
{
  const void *currentDictionary;
  const void *allowedClasses;
  CFTypeRef result;

  if (!a2)
    return 0;
  currentDictionary = a1->_currentDictionary;
  a1->_currentDictionary = a2;
  if (*a3 && *(_DWORD *)(*a3 - 12))
  {
    allowedClasses = a1->_allowedClasses;
    a1->_allowedClasses = a3;
    result = decodeObject(a1);
    a1->_allowedClasses = allowedClasses;
  }
  else
  {
    result = decodeObject(a1);
  }
  a1->_currentDictionary = currentDictionary;
  return result;
}

void sub_197018E00(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v1 + v2) = v3;
  _Unwind_Resume(a1);
}

void sub_197018EE0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t API::ObjectImpl<(API::Object::Type)30>::type()
{
  return 30;
}

uint64_t API::ObjectImpl<(API::Object::Type)31>::type()
{
  return 31;
}

void WebKit::RemoteObjectRegistry::backgroundActivity(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebKit::ProcessThrottlerActivity **v4;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WebKit::ProcessThrottlerActivity **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WebKit::ProcessThrottlerActivity *)-1)
        std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](v4, 0);
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WebKit::ProcessThrottlerActivity *std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](WebKit::ProcessThrottlerActivity **a1, WebKit::ProcessThrottlerActivity *a2)
{
  WebKit::ProcessThrottlerActivity *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::ProcessThrottlerActivity::~ProcessThrottlerActivity(result, a2);
    return (WebKit::ProcessThrottlerActivity *)WTF::fastFree(v4, v5);
  }
  return result;
}

void encodeError(WKRemoteObjectEncoder *a1, NSError *a2)
{
  NSError *v2;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  CFTypeID v12;
  CFDataRef v13;
  id v14;
  CFTypeID v15;
  const void *v16;
  NSError *v17;
  WKRemoteObjectEncoder *v18;
  void *cf;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _QWORD v24[18];

  v2 = a2;
  v24[16] = *MEMORY[0x1E0C80C00];
  if (-[NSDictionary objectForKeyedSubscript:](-[NSError userInfo](a2, "userInfo"), "objectForKeyedSubscript:", CFSTR("_WKRecoveryAttempterErrorKey")))
  {
    cf = (void *)-[NSDictionary mutableCopy](-[NSError userInfo](v2, "userInfo"), "mutableCopy");
    objc_msgSend(cf, "removeObjectForKey:", CFSTR("_WKRecoveryAttempterErrorKey"));
  }
  else
  {
    cf = 0;
  }
  if (-[NSDictionary objectForKeyedSubscript:](-[NSError userInfo](v2, "userInfo"), "objectForKeyedSubscript:", CFSTR("NSErrorClientCertificateChainKey")))
  {
    v4 = cf;
    if (!cf)
      v4 = (void *)-[NSDictionary mutableCopy](-[NSError userInfo](v2, "userInfo"), "mutableCopy");
    cf = v4;
    objc_msgSend(v4, "removeObjectForKey:", CFSTR("NSErrorClientCertificateChainKey"));
  }
  v5 = -[NSDictionary objectForKeyedSubscript:](-[NSError userInfo](v2, "userInfo"), "objectForKeyedSubscript:", CFSTR("NSErrorPeerCertificateChainKey"));
  if (v5)
  {
    if (!cf)
      cf = (void *)-[NSDictionary mutableCopy](-[NSError userInfo](v2, "userInfo"), "mutableCopy");
    v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v5, "count"));
    v17 = v2;
    v18 = a1;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    if (v7)
    {
      v8 = *(_QWORD *)v21;
      v9 = *MEMORY[0x1E0C99778];
      do
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v21 != v8)
            objc_enumerationMutation(v5);
          v11 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * i);
          v12 = CFGetTypeID(v11);
          if (v12 != SecCertificateGetTypeID())
            objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", v9, CFSTR("Error encoding invalid certificate in chain"));
          v13 = SecCertificateCopyData((SecCertificateRef)v11);
          objc_msgSend(v6, "addObject:", v13);
          if (v13)
            CFRelease(v13);
        }
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
      }
      while (v7);
    }
    objc_msgSend(cf, "setObject:forKeyedSubscript:", v6, CFSTR("NSErrorPeerCertificateChainKey"));
    v2 = v17;
    a1 = v18;
    if (v6)
      CFRelease(v6);
  }
  v14 = -[NSDictionary objectForKeyedSubscript:](-[NSError userInfo](v2, "userInfo"), "objectForKeyedSubscript:", CFSTR("NSURLErrorFailingURLPeerTrustErrorKey"));
  if (v14)
  {
    if (!cf)
      cf = (void *)-[NSDictionary mutableCopy](-[NSError userInfo](v2, "userInfo"), "mutableCopy");
    v15 = CFGetTypeID(v14);
    if (v15 != SecTrustGetTypeID())
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("Error encoding invalid SecTrustRef"));
    v24[0] = 0;
    v16 = (const void *)SecTrustSerialize();
    if (v24[0])
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("Error serializing SecTrustRef: %@"), v24[0]);
    objc_msgSend(cf, "setObject:forKeyedSubscript:", v16, CFSTR("NSURLErrorFailingURLPeerTrustErrorKey"));
    if (v16)
      CFRelease(v16);
  }
  if (cf)
  {
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", -[NSError domain](v2, "domain"), -[NSError code](v2, "code"), cf), "encodeWithCoder:", a1);
    CFRelease(cf);
  }
  else
  {
    -[NSError encodeWithCoder:](v2, "encodeWithCoder:", a1);
  }
}

void sub_19701934C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  const void *v12;

  if (v12)
    CFRelease(v12);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::ScopeExit<encodeObject(WKRemoteObjectEncoder *,objc_object *)::$_0>::~ScopeExit(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;

  if (*(_BYTE *)(a1 + 16))
  {
    v2 = (uint64_t *)(*(_QWORD *)a1 + 32);
    v3 = *v2;
    if (*v2)
    {
      v4 = *(_QWORD *)(a1 + 8);
      v5 = *(_DWORD *)(v3 - 8);
      v6 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
      v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
      v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
      v9 = v5 & ((v8 >> 31) ^ v8);
      v10 = *(_QWORD *)(v3 + 8 * v9);
      if (v10 != v4)
      {
        v11 = 1;
        while (v10)
        {
          v9 = ((_DWORD)v9 + v11) & v5;
          v10 = *(_QWORD *)(v3 + 8 * v9);
          ++v11;
          if (v10 == v4)
            goto LABEL_9;
        }
        v9 = *(unsigned int *)(v3 - 4);
      }
LABEL_9:
      if (v9 != *(_DWORD *)(v3 - 4))
      {
        *(_QWORD *)(v3 + 8 * v9) = -1;
        ++*(_DWORD *)(*v2 - 16);
        v12 = *v2;
        v13 = *v2 ? *(_DWORD *)(v12 - 12) - 1 : -1;
        *(_DWORD *)(v12 - 12) = v13;
        v14 = *v2;
        if (*v2)
        {
          v15 = 6 * *(_DWORD *)(v14 - 12);
          v16 = *(_DWORD *)(v14 - 4);
          if (v15 < v16 && v16 >= 9)
            WTF::HashTable<NSObject *,NSObject *,WTF::IdentityExtractor,WTF::DefaultHash<NSObject *>,WTF::HashTraits<NSObject *>,WTF::HashTraits<NSObject *>>::rehash(v2, v16 >> 1);
        }
      }
    }
  }
  return a1;
}

uint64_t API::Array::at<API::Dictionary>(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (*(unsigned int *)(a1 + 28) <= a2)
    goto LABEL_8;
  result = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2);
  if (!result)
    return result;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 16))(result) != 9)
    return 0;
  if (*(unsigned int *)(a1 + 28) <= a2)
  {
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x197019550);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2);
}

CFTypeRef decodeObject(WKRemoteObjectDecoder *a1)
{
  const void *currentDictionary;
  const WTF::StringImpl *v3;
  CFTypeRef *v4;
  WTF::StringImpl *v5;
  CFTypeRef *v6;
  WTF::StringImpl *isa;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  const char *v10;
  objc_class *v11;
  uint64_t *allowedClasses;
  Class v13;
  CFTypeRef v14;
  void *v15;
  CFTypeRef v16;
  Class v17;
  CFTypeRef v18;
  CFTypeRef result;
  const char *v20;
  Class v21;
  void *v22;
  char v23;
  void *v24;
  WTF *v25;
  WKRemoteObjectDecoder cf;

  currentDictionary = a1->_currentDictionary;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4 = API::Dictionary::get<API::String>((uint64_t)currentDictionary, &cf.super.super.isa, v3);
  v6 = v4;
  if (v4)
    CFRetain(v4[1]);
  isa = cf.super.super.isa;
  cf.super.super.isa = 0;
  if (isa)
  {
    if (*(_DWORD *)isa == 2)
      WTF::StringImpl::destroy(isa, v5);
    else
      *(_DWORD *)isa -= 2;
  }
  if (!v6)
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0CB2C88], CFSTR("Class name missing"));
  WTF::String::isolatedCopy();
  WTF::String::utf8();
  v9 = cf.super.super.isa;
  cf.super.super.isa = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  if (v25)
    v10 = (char *)v25 + 16;
  else
    v10 = 0;
  v11 = objc_lookUpClass(v10);
  if (!v11)
  {
    if (v25)
      v20 = (char *)v25 + 16;
    else
      v20 = 0;
    result = (CFTypeRef)crashWithClassName(v20);
    goto LABEL_51;
  }
  allowedClasses = (uint64_t *)a1->_allowedClasses;
  if (allowedClasses
    && (WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<void const*>,WTF::DefaultHash<void const*>>,void const*>(*allowedClasses, (uint64_t)v11) & 1) == 0)
  {
    alwaysAllowedClasses((uint64_t *)&cf);
    v21 = cf.super.super.isa;
    v23 = WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<void const*>,WTF::DefaultHash<void const*>>,void const*>((uint64_t)cf.super.super.isa, (uint64_t)v11);
    if (v21)
      WTF::fastFree((Class)((char *)v21 - 16), v22);
    if ((v23 & 1) == 0)
    {
      result = (CFTypeRef)crashWithClassName(v11);
LABEL_51:
      __break(1u);
      return result;
    }
  }
  if ((objc_class *)objc_opt_class() != v11
    && (objc_class *)objc_opt_class() != v11
    && (-[WKRemoteObjectDecoder validateClassSupportsSecureCoding:](a1, "validateClassSupportsSecureCoding:", v11) & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0CB2C88], CFSTR("Object of class \"%@\" does not support NSSecureCoding."), v11);
  }
  if (v11 == (objc_class *)objc_opt_class() || v11 == (objc_class *)objc_opt_class())
  {
    v18 = decodeInvocation(a1);
  }
  else
  {
    if (v11 == (objc_class *)objc_opt_class())
    {
      decodeString(&cf, (uint64_t)a1);
      v13 = cf.super.super.isa;
      cf.super.super.isa = 0;
      v14 = (id)CFMakeCollectable(v13);
      goto LABEL_25;
    }
    if (v11 == (objc_class *)objc_opt_class())
    {
      decodeError(&cf, (objc_class *)a1);
      v18 = (id)CFMakeCollectable(cf.super.super.isa);
    }
    else
    {
      if (v11 == (objc_class *)objc_opt_class())
      {
        v24 = (void *)MEMORY[0x1E0CB37A0];
        decodeString(&cf, (uint64_t)a1);
        v14 = (CFTypeRef)objc_msgSend(v24, "stringWithString:", cf.super.super.isa);
LABEL_25:
        v16 = v14;
        v17 = cf.super.super.isa;
        cf.super.super.isa = 0;
        if (v17)
          CFRelease(v17);
        goto LABEL_31;
      }
      decodeObjCObject(&cf, (objc_class *)a1, v11);
      v18 = (id)CFMakeCollectable(cf.super.super.isa);
    }
  }
  v16 = v18;
LABEL_31:
  if (v25)
  {
    if (*(_DWORD *)v25 == 1)
      WTF::fastFree(v25, v15);
    else
      --*(_DWORD *)v25;
  }
  if (v6)
    CFRelease(v6[1]);
  return v16;
}

void sub_1970198B0()
{
  objc_end_catch();
  JUMPOUT(0x197019930);
}

void sub_1970198D4(int a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 != 2)
      JUMPOUT(0x197019948);
    WTF::StringImpl::destroy(a12, a2);
  }
  JUMPOUT(0x19701994CLL);
}

void sub_1970198F8()
{
  JUMPOUT(0x19701994CLL);
}

void sub_197019900(int a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  JUMPOUT(0x197019958);
}

CFTypeRef *API::Dictionary::get<API::String>(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  WTF *v3;
  CFTypeRef *v4;
  CFTypeRef *v5;

  v3 = WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 16), a2, a3);
  if (!v3)
    return 0;
  v4 = (CFTypeRef *)v3;
  CFRetain(*((CFTypeRef *)v3 + 1));
  if ((*((unsigned int (**)(CFTypeRef *))*v4 + 2))(v4) == 21)
    v5 = v4;
  else
    v5 = 0;
  CFRelease(v4[1]);
  return v5;
}

void sub_1970199C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t crashWithClassName(const char *__src)
{
  WKRemoteObjectDecoder *v1;
  char __dst[8];
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  strncpy(__dst, __src, 0x30uLL);
  v1 = (WKRemoteObjectDecoder *)WTFCrashWithInfoImpl(813, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/Shared/API/Cocoa/WKRemoteObjectCoder.mm", "void crashWithClassName(const char *)", 106, *(unint64_t *)__dst, v4, v5, v6, v7, v8);
  return decodeInvocation(v1);
}

void *decodeInvocation(WKRemoteObjectDecoder *a1)
{
  _BOOL4 v2;
  NSString *v3;
  const char *v4;
  void *v5;
  WebKit *v6;
  NSString *v7;
  NSString *v8;
  void *m_ptr;
  SEL replyToSelector;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  const char *Name;
  const char *v16;

  v16 = 0;
  v2 = -[WKRemoteObjectDecoder decodeBoolForKey:](a1, "decodeBoolForKey:", CFSTR("isReplyBlock"));
  if (v2)
  {
    replyToSelector = a1->_replyToSelector;
    if (!replyToSelector)
    {
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0CB2C88], CFSTR("%@: Received unknown reply block"), a1);
      replyToSelector = a1->_replyToSelector;
    }
    v12 = objc_msgSend(a1->_interface.m_ptr, "_invocationForReplyBlockOfSelector:", replyToSelector);
    if (v12)
    {
      v5 = (void *)v12;
      v4 = 0;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0CB2C88], CFSTR("Reply block for selector \"%s\" is not defined in the local interface"), sel_getName(a1->_replyToSelector));
      v4 = 0;
      v5 = 0;
    }
  }
  else
  {
    v3 = (NSString *)-[WKRemoteObjectDecoder decodeObjectOfClass:forKey:](a1, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("selector"));
    if (!v3)
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0CB2C88], CFSTR("Invocation had no selector"));
    v4 = NSSelectorFromString(v3);
    v16 = v4;
    v5 = (void *)objc_msgSend(a1->_interface.m_ptr, "_invocationForSelector:", v4);
    if (!v5)
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0CB2C88], CFSTR("Selector \"%@\" is not defined in the local interface"), v3);
  }
  v6 = (WebKit *)-[WKRemoteObjectDecoder decodeObjectOfClass:forKey:](a1, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("typeString"));
  if (!v6)
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0CB2C88], CFSTR("Invocation had no type signature"));
  v7 = (NSString *)objc_msgSend((id)objc_msgSend(v5, "methodSignature"), "_typeString");
  if (!WebKit::methodSignaturesAreCompatible(v6, v7, v8))
  {
    v13 = (void *)MEMORY[0x1E0C99DA0];
    v14 = *MEMORY[0x1E0CB2C88];
    if (v4)
      Name = sel_getName(v4);
    else
      Name = "(no selector)";
    objc_msgSend(v13, "raise:format:", v14, CFSTR("Local and remote method signatures are not compatible for method \"%s\""), Name);
  }
  m_ptr = a1->_interface.m_ptr;
  if (v2)
  {
    decodeInvocationArguments((uint64_t)a1, v5, objc_msgSend(m_ptr, "_allowedArgumentClassesForReplyBlockOfSelector:", a1->_replyToSelector), 1uLL);
  }
  else
  {
    decodeInvocationArguments((uint64_t)a1, v5, objc_msgSend(m_ptr, "_allowedArgumentClassesForSelector:", v4), 2uLL);
    objc_msgSend(v5, "setArgument:atIndex:", &v16, 1);
  }
  return v5;
}

void decodeString(WKRemoteObjectDecoder *a1, uint64_t a2)
{
  uint64_t v2;
  const WTF::StringImpl *v3;
  CFTypeRef *v4;
  WTF::StringImpl *v5;
  CFTypeRef *v6;
  WTF::StringImpl *v7;
  unsigned int *v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  WTF::StringImpl *v11[2];

  v2 = *(_QWORD *)(a2 + 24);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4 = API::Dictionary::get<API::String>(v2, v11, v3);
  v6 = v4;
  if (v4)
    CFRetain(v4[1]);
  v7 = v11[0];
  v11[0] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  if (!v6)
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0CB2C88], CFSTR("String missing"), v11[0]);
  v8 = (unsigned int *)v6[2];
  if (v8)
  {
    v9 = (WTF::StringImpl *)*((_QWORD *)v8 + 1);
    v10 = v8[1] | ((unint64_t)((v8[4] >> 2) & 1) << 32);
  }
  else
  {
    v9 = 0;
    v10 = 0x100000000;
  }
  v11[0] = v9;
  v11[1] = (WTF::StringImpl *)v10;
  WTF::StringView::createNSString((WTF::StringView *)v11);
  CFRelease(v6[1]);
}

void sub_197019DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  uint64_t v9;

  CFRelease(*(CFTypeRef *)(v9 + 8));
  _Unwind_Resume(a1);
}

void decodeError(WKRemoteObjectDecoder *a1, objc_class *a2)
{
  unint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  const void *v12;
  CFTypeID v13;
  void *v14;
  objc_class *v15;
  SecCertificateRef v16;
  const void *v17;
  CFTypeID v18;
  void *v19;
  objc_class *v20;
  uint64_t v21;
  const void *v22;
  objc_class *v23;
  Class isa;
  void *cf;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  WKRemoteObjectDecoder v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = 0x1E0CB3000uLL;
  v5 = (void *)objc_opt_class();
  decodeObjCObject(&v30, a2, v5);
  isa = v30.super.super.isa;
  v6 = (void *)objc_msgSend((id)-[objc_class userInfo](v30.super.super.isa, "userInfo"), "objectForKeyedSubscript:", CFSTR("NSErrorPeerCertificateChainKey"));
  if (v6)
  {
    cf = (void *)objc_msgSend((id)-[objc_class userInfo](isa, "userInfo"), "mutableCopy");
    v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v6, "count"));
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v26, &v30, 16);
    if (v8)
    {
      v9 = *(_QWORD *)v27;
      v10 = *MEMORY[0x1E0CB2C88];
      do
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_QWORD *)v27 != v9)
            objc_enumerationMutation(v6);
          v12 = *(const void **)(*((_QWORD *)&v26 + 1) + 8 * i);
          v13 = CFGetTypeID(v12);
          if (v13 != CFDataGetTypeID())
          {
            v14 = (void *)MEMORY[0x1E0C99DA0];
            v15 = (objc_class *)objc_opt_class();
            objc_msgSend(v14, "raise:format:", v10, CFSTR("Error decoding certificate from object that is not data %@"), NSStringFromClass(v15));
          }
          v16 = SecCertificateCreateWithData(0, (CFDataRef)v12);
          if (!v16)
            objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", v10, CFSTR("Error decoding nvalid certificate in chain"));
          objc_msgSend(v7, "addObject:", v16);
          if (v16)
            CFRelease(v16);
        }
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v26, &v30, 16);
      }
      while (v8);
    }
    objc_msgSend(cf, "setObject:forKeyedSubscript:", v7, CFSTR("NSErrorPeerCertificateChainKey"));
    v4 = 0x1E0CB3000;
    if (v7)
      CFRelease(v7);
  }
  else
  {
    cf = 0;
  }
  v17 = (const void *)objc_msgSend((id)-[objc_class userInfo](isa, "userInfo"), "objectForKeyedSubscript:", CFSTR("NSURLErrorFailingURLPeerTrustErrorKey"));
  if (v17)
  {
    if (!cf)
      cf = (void *)objc_msgSend((id)-[objc_class userInfo](isa, "userInfo"), "mutableCopy");
    v18 = CFGetTypeID(v17);
    if (v18 != CFDataGetTypeID())
    {
      v19 = (void *)MEMORY[0x1E0C99DA0];
      v20 = (objc_class *)objc_opt_class();
      objc_msgSend(v19, "raise:format:", *MEMORY[0x1E0CB2C88], CFSTR("Invalid SecTrustRef data %@"), NSStringFromClass(v20));
    }
    v30.super.super.isa = 0;
    v21 = SecTrustDeserialize();
    v22 = (const void *)v21;
    if (v30.super.super.isa || !v21)
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0CB2C88], CFSTR("Invalid SecTrustRef %@"), v30.super.super.isa);
    objc_msgSend(cf, "setObject:forKeyedSubscript:", v22, CFSTR("NSURLErrorFailingURLPeerTrustErrorKey"));
    if (v22)
      CFRelease(v22);
  }
  if (cf)
  {
    v23 = (objc_class *)objc_msgSend(*(id *)(v4 + 1480), "errorWithDomain:code:userInfo:", -[objc_class domain](isa, "domain"), -[objc_class code](isa, "code"), cf);
    a1->super.super.isa = v23;
    if (v23)
      CFRetain(v23);
    CFRelease(cf);
    if (isa)
      CFRelease(isa);
  }
  else
  {
    a1->super.super.isa = isa;
  }
}

void sub_19701A160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef a11, CFTypeRef cf)
{
  const void *v12;

  if (v12)
    CFRelease(v12);
  if (cf)
    CFRelease(cf);
  if (a11)
    CFRelease(a11);
  _Unwind_Resume(exception_object);
}

objc_class *decodeObjCObject(WKRemoteObjectDecoder *a1, objc_class *a2, void *a3)
{
  void *v6;
  objc_class *v7;
  objc_class *result;

  v6 = (void *)objc_msgSend(a3, "allocWithZone:", -[objc_class zone](a2, "zone"));
  if (!v6)
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0CB2C88], CFSTR("Class \"%@\" returned nil from +alloc while being decoded"), NSStringFromClass((Class)a3));
  v7 = (objc_class *)objc_msgSend(v6, "initWithCoder:", a2);
  a1->super.super.isa = v7;
  if (!v7)
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0CB2C88], CFSTR("Object of class \"%@\" returned nil from -initWithCoder: while being decoded"), NSStringFromClass((Class)a3));
  a1->super.super.isa = 0;
  result = (objc_class *)-[objc_class awakeAfterUsingCoder:](v7, "awakeAfterUsingCoder:", a2);
  a1->super.super.isa = result;
  if (!result)
    return (objc_class *)objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0CB2C88], CFSTR("Object of class \"%@\" returned nil from -awakeAfterUsingCoder: while being decoded"), NSStringFromClass((Class)a3));
  return result;
}

void sub_19701A320(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = 0;
  _Unwind_Resume(a1);
}

WTF *WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int i;
  uint64_t v9;
  WTF *result;

  v3 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v3 - 8);
  v6 = *((_DWORD *)*a2 + 4);
  if (v6 >= 0x100)
    v7 = v6 >> 8;
  else
    v7 = WTF::StringImpl::hashSlowCase(*a2);
  for (i = 0; ; v7 = i + v9)
  {
    v9 = v7 & v5;
    result = *(WTF **)(v3 + 16 * v9);
    if (!result)
      break;
    if (result != (WTF *)-1 && (WTF::equal(result, *a2, a3) & 1) != 0)
      return *(WTF **)(v3 + 16 * v9 + 8);
    ++i;
  }
  return result;
}

uint64_t crashWithClassName(objc_class *a1)
{
  const char *v1;

  v1 = -[NSString UTF8String](NSStringFromClass(a1), "UTF8String");
  crashWithClassName(v1);
  return alwaysAllowedClasses();
}

uint64_t *alwaysAllowedClasses(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  double v7;
  double v8;
  double v9;
  unsigned int v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[23];

  v1 = result;
  v24[22] = *MEMORY[0x1E0C80C00];
  if ((_MergedGlobals_44 & 1) != 0)
  {
    v2 = qword_1EE341708;
  }
  else
  {
    v24[0] = objc_opt_class();
    v24[1] = objc_opt_class();
    v24[2] = objc_opt_class();
    v24[3] = objc_opt_class();
    v24[4] = objc_opt_class();
    v24[5] = objc_opt_class();
    v24[6] = objc_opt_class();
    v24[7] = objc_opt_class();
    v24[8] = objc_opt_class();
    v24[9] = objc_opt_class();
    v24[10] = objc_opt_class();
    v24[11] = objc_opt_class();
    v24[12] = objc_opt_class();
    v24[13] = objc_opt_class();
    v24[14] = objc_opt_class();
    v24[15] = objc_opt_class();
    v24[16] = objc_opt_class();
    v24[17] = objc_opt_class();
    v24[18] = objc_opt_class();
    v24[19] = objc_opt_class();
    v24[20] = objc_opt_class();
    v24[21] = (uint64_t)NSClassFromString(CFSTR("NSDecimalNumberPlaceholder"));
    result = WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::HashSet(&v23, v24, 22);
    v2 = v23;
    qword_1EE341708 = v23;
    _MergedGlobals_44 = 1;
  }
  *v1 = 0;
  if (!v2)
    return result;
  v3 = *(unsigned int *)(v2 - 12);
  if (!(_DWORD)v3)
    return result;
  v4 = (v3 - 1) | ((v3 - 1) >> 1) | ((((_DWORD)v3 - 1) | ((v3 - 1) >> 1)) >> 2);
  v5 = v4 | (v4 >> 4) | ((v4 | (v4 >> 4)) >> 8);
  v6 = (v5 | HIWORD(v5)) + 1;
  if (v6 > 0x400)
  {
    if (v6 > 2 * v3)
      goto LABEL_10;
  }
  else if (3 * v6 > 4 * v3)
  {
LABEL_8:
    v7 = (double)v3;
    v8 = (double)v6;
    v9 = 0.604166667;
    goto LABEL_11;
  }
  LODWORD(v6) = 2 * v6;
  if (v6 <= 0x400)
    goto LABEL_8;
LABEL_10:
  v7 = (double)v3;
  v8 = (double)v6;
  v9 = 0.416666667;
LABEL_11:
  if (v8 * v9 <= v7)
    LODWORD(v6) = 2 * v6;
  if (v6 <= 8)
    v10 = 8;
  else
    v10 = v6;
  v11 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(8 * v10 + 16));
  v12 = v11 + 4;
  *v1 = (uint64_t)(v11 + 4);
  v11[2] = v10 - 1;
  v11[3] = v10;
  *v11 = 0;
  v11[1] = v3;
  result = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin((_QWORD **)&qword_1EE341708);
  v14 = qword_1EE341708;
  if (qword_1EE341708)
    v14 = qword_1EE341708 + 8 * *(unsigned int *)(qword_1EE341708 - 4);
  if ((uint64_t *)v14 != result)
  {
    v15 = v11[2];
    do
    {
      v16 = ~(*result << 32) + *result;
      v17 = (v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13);
      v18 = (9 * (v17 ^ (v17 >> 8))) ^ ((9 * (v17 ^ (v17 >> 8))) >> 15);
      v19 = v15 & (((v18 + ~(v18 << 27)) >> 31) ^ (v18 + ~((_DWORD)v18 << 27)));
      v20 = 1;
      do
      {
        v21 = v19;
        v22 = *(_QWORD *)&v12[2 * v19];
        v19 = (v19 + v20++) & v15;
      }
      while (v22);
      *(_QWORD *)&v12[2 * v21] = *result;
      while (++result != v13)
      {
        if ((unint64_t)(*result + 1) > 1)
          goto LABEL_27;
      }
      result = v13;
LABEL_27:
      ;
    }
    while (result != (uint64_t *)v14);
  }
  return result;
}

const char *decodeInvocationArguments(uint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  void *v8;
  const char *result;
  const char *v10;
  uint64_t v11;
  unint64_t i;
  const char *v13;
  int v14;
  uint64_t v15;
  void *v16;
  __int16 v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  char v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  int v32;
  int v33;
  void *v34;
  int v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45[2];

  v45[1] = *MEMORY[0x1E0C80C00];
  v8 = (void *)objc_msgSend(a2, "methodSignature");
  result = (const char *)objc_msgSend(v8, "numberOfArguments");
  v10 = &result[-a4];
  if ((unint64_t)result > a4)
  {
    v11 = 0;
    for (i = 0; v10 != (const char *)i; ++i)
    {
      result = (const char *)objc_msgSend(v8, "getArgumentTypeAtIndex:", a4 + i);
      v13 = result;
      v14 = *result;
      if (v14 > 80)
      {
        if (v14 <= 98)
        {
          if (v14 == 81)
          {
            v42 = 0;
            v44 = objc_opt_class();
            WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::HashSet(v45, &v44, 1);
            v23 = objc_msgSend((id)decodeObjectFromObjectStream(a1, v45), "unsignedLongLongValue");
            if (v45[0])
              WTF::fastFree((WTF *)(v45[0] - 16), v37);
LABEL_53:
            v42 = v23;
            result = (const char *)objc_msgSend(a2, "setArgument:atIndex:", &v42, a4 + i);
          }
          else if (v14 == 83)
          {
            LOWORD(v44) = 0;
            v45[0] = objc_opt_class();
            WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::HashSet(&v42, v45, 1);
            v17 = objc_msgSend((id)decodeObjectFromObjectStream(a1, &v42), "unsignedShortValue");
            if (v42)
              WTF::fastFree((WTF *)(v42 - 16), v16);
LABEL_15:
            LOWORD(v44) = v17;
            result = (const char *)objc_msgSend(a2, "setArgument:atIndex:", &v44, a4 + i);
          }
          else
          {
LABEL_29:
            result = (const char *)objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("Unsupported invocation argument type '%s' for argument %zu"), v13, a4 + i);
          }
        }
        else
        {
          switch(*result)
          {
            case 'c':
              LOBYTE(v44) = 0;
              v45[0] = objc_opt_class();
              WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::HashSet(&v42, v45, 1);
              v27 = objc_msgSend((id)decodeObjectFromObjectStream(a1, &v42), "charValue");
              if (v42)
                WTF::fastFree((WTF *)(v42 - 16), v26);
LABEL_59:
              LOBYTE(v44) = v27;
              result = (const char *)objc_msgSend(a2, "setArgument:atIndex:", &v44, a4 + i);
              break;
            case 'd':
              v42 = 0;
              v44 = objc_opt_class();
              WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::HashSet(v45, &v44, 1);
              objc_msgSend((id)decodeObjectFromObjectStream(a1, v45), "doubleValue");
              v30 = v29;
              if (v45[0])
                WTF::fastFree((WTF *)(v45[0] - 16), v28);
              v42 = v30;
              result = (const char *)objc_msgSend(a2, "setArgument:atIndex:", &v42, a4 + i);
              break;
            case 'e':
            case 'g':
            case 'h':
            case 'j':
            case 'k':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'r':
              goto LABEL_29;
            case 'f':
              LODWORD(v44) = 0;
              v45[0] = objc_opt_class();
              WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::HashSet(&v42, v45, 1);
              objc_msgSend((id)decodeObjectFromObjectStream(a1, &v42), "floatValue");
              v33 = v32;
              if (v42)
                WTF::fastFree((WTF *)(v42 - 16), v31);
              LODWORD(v44) = v33;
              result = (const char *)objc_msgSend(a2, "setArgument:atIndex:", &v44, a4 + i);
              break;
            case 'i':
              LODWORD(v44) = 0;
              v45[0] = objc_opt_class();
              WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::HashSet(&v42, v45, 1);
              v35 = objc_msgSend((id)decodeObjectFromObjectStream(a1, &v42), "intValue");
              if (v42)
                WTF::fastFree((WTF *)(v42 - 16), v34);
LABEL_47:
              LODWORD(v44) = v35;
              result = (const char *)objc_msgSend(a2, "setArgument:atIndex:", &v44, a4 + i);
              break;
            case 'l':
              v42 = 0;
              v44 = objc_opt_class();
              WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::HashSet(v45, &v44, 1);
              v23 = objc_msgSend((id)decodeObjectFromObjectStream(a1, v45), "longValue");
              if (v45[0])
                WTF::fastFree((WTF *)(v45[0] - 16), v24);
              goto LABEL_53;
            case 'q':
              v42 = 0;
              v44 = objc_opt_class();
              WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::HashSet(v45, &v44, 1);
              v23 = objc_msgSend((id)decodeObjectFromObjectStream(a1, v45), "longLongValue");
              if (v45[0])
                WTF::fastFree((WTF *)(v45[0] - 16), v25);
              goto LABEL_53;
            case 's':
              LOWORD(v44) = 0;
              v45[0] = objc_opt_class();
              WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::HashSet(&v42, v45, 1);
              v17 = objc_msgSend((id)decodeObjectFromObjectStream(a1, &v42), "shortValue");
              if (v42)
                WTF::fastFree((WTF *)(v42 - 16), v36);
              goto LABEL_15;
            default:
              if (v14 != 123)
                goto LABEL_29;
              if (!strcmp(result, "{_NSRange=QQ}"))
              {
                v42 = 0;
                v43 = 0;
                v44 = objc_opt_class();
                WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::HashSet(v45, &v44, 1);
                v42 = objc_msgSend((id)decodeObjectFromObjectStream(a1, v45), "rangeValue");
                v43 = v41;
                if (v45[0])
                  WTF::fastFree((WTF *)(v45[0] - 16), v41);
              }
              else
              {
                if (strcmp(v13, "{CGSize=dd}"))
                  goto LABEL_29;
                v44 = objc_opt_class();
                WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::HashSet(v45, &v44, 1);
                objc_msgSend((id)decodeObjectFromObjectStream(a1, v45), "doubleValue");
                v42 = v19;
                if (v45[0])
                  WTF::fastFree((WTF *)(v45[0] - 16), v18);
                v44 = objc_opt_class();
                WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::HashSet(v45, &v44, 1);
                objc_msgSend((id)decodeObjectFromObjectStream(a1, v45), "doubleValue");
                v43 = v21;
                if (v45[0])
                  WTF::fastFree((WTF *)(v45[0] - 16), v20);
              }
              result = (const char *)objc_msgSend(a2, "setArgument:atIndex:", &v42, a4 + i);
              break;
          }
        }
      }
      else
      {
        switch(*result)
        {
          case '@':
            if (i >= *(unsigned int *)(a3 + 12))
            {
              __break(0xC471u);
              return result;
            }
            v15 = *(_QWORD *)a3 + v11;
            v42 = 0;
            v42 = decodeObjectFromObjectStream(a1, v15);
            result = (const char *)objc_msgSend(a2, "setArgument:atIndex:", &v42, a4 + i);
            break;
          case 'A':
          case 'D':
          case 'E':
          case 'F':
          case 'G':
          case 'H':
            goto LABEL_29;
          case 'B':
            LOBYTE(v44) = 0;
            v45[0] = objc_opt_class();
            WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::HashSet(&v42, v45, 1);
            v27 = objc_msgSend((id)decodeObjectFromObjectStream(a1, &v42), "BOOLValue");
            if (v42)
              WTF::fastFree((WTF *)(v42 - 16), v39);
            goto LABEL_59;
          case 'C':
            LOBYTE(v44) = 0;
            v45[0] = objc_opt_class();
            WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::HashSet(&v42, v45, 1);
            v27 = objc_msgSend((id)decodeObjectFromObjectStream(a1, &v42), "unsignedCharValue");
            if (v42)
              WTF::fastFree((WTF *)(v42 - 16), v38);
            goto LABEL_59;
          case 'I':
            LODWORD(v44) = 0;
            v45[0] = objc_opt_class();
            WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::HashSet(&v42, v45, 1);
            v35 = objc_msgSend((id)decodeObjectFromObjectStream(a1, &v42), "unsignedIntValue");
            if (v42)
              WTF::fastFree((WTF *)(v42 - 16), v40);
            goto LABEL_47;
          default:
            if (v14 != 76)
              goto LABEL_29;
            v42 = 0;
            v44 = objc_opt_class();
            WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::HashSet(v45, &v44, 1);
            v23 = objc_msgSend((id)decodeObjectFromObjectStream(a1, v45), "unsignedLongValue");
            if (v45[0])
              WTF::fastFree((WTF *)(v45[0] - 16), v22);
            goto LABEL_53;
        }
      }
      v11 += 8;
    }
  }
  return result;
}

void sub_19701AF3C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15)
    WTF::fastFree((WTF *)(a15 - 16), a2);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 16 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = v15 + 16 * v22;
          std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(v24 + 8), 0);
          v25 = *v13;
          v26 = v6 + 16 * v11;
          v27 = *(_QWORD *)(v26 + 8);
          v26 += 8;
          *(_QWORD *)v26 = 0;
          *(_QWORD *)v24 = v25;
          *(_QWORD *)(v24 + 8) = v27;
          std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)v26, 0);
          if (v13 == a3)
            v12 = v24;
        }
        else
        {
          std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(v6 + 16 * v11 + 8), 0);
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

IPC::Encoder *WTF::switchOn<std::variant<std::reference_wrapper<WebKit::WebProcessProxy>,std::reference_wrapper<WebKit::WebPage>>,void WebKit::RemoteObjectRegistry::send<Messages::RemoteObjectRegistry::InvokeMethod>(Messages::RemoteObjectRegistry::InvokeMethod &&)::{lambda(Messages::RemoteObjectRegistry::InvokeMethod)#1}>(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t ***v4;
  uint64_t *v5;
  __int128 v6;
  __int128 *v7;

  v6 = *a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
  {
    v4 = (uint64_t ***)std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<void WebKit::RemoteObjectRegistry::send<Messages::RemoteObjectRegistry::InvokeMethod>(Messages::RemoteObjectRegistry::InvokeMethod &&)::{lambda(Messages::RemoteObjectRegistry::InvokeMethod)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<WebKit::WebProcessProxy>,std::__variant_detail::__base<WebKit::WebPage>> &&>(v4, v5);
  }
  else
  {
    v7 = &v6;
    return (IPC::Encoder *)((uint64_t (*)(__int128 **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN6WebKit20RemoteObjectRegistry4sendIN8Messages20RemoteObjectRegistry12InvokeMethodEEEvOT_EUlSE_E_JEEEEEJNS0_6__implIJNS_17reference_wrapperINS8_15WebProcessProxyEEENSK_INS8_7WebPageEEEEEEEEEDcSF_DpOT0____fmatrix[v2])(&v7, a1);
  }
}

IPC::Encoder *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<void WebKit::RemoteObjectRegistry::send<Messages::RemoteObjectRegistry::InvokeMethod>(Messages::RemoteObjectRegistry::InvokeMethod &&)::{lambda(Messages::RemoteObjectRegistry::InvokeMethod)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<WebKit::WebProcessProxy>,std::__variant_detail::__base<WebKit::WebPage>> &&>(uint64_t ***a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  uint64_t v11;
  char v12;
  IPC::Encoder *v13;

  v2 = *a2;
  v3 = **a1;
  v4 = (*(uint64_t (**)(uint64_t *))(*(*a1)[1] + 64))((*a1)[1]);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 1232;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v13 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebKit::RemoteObjectInvocation,void>::encode((IPC::Encoder *)v5, *v3);
  LOBYTE(v11) = 0;
  v12 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(v2, &v13, 0, (uint64_t)&v11, 1);
  if (v12)
  {
    v7 = v11;
    v11 = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

void sub_19701B318(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<void WebKit::RemoteObjectRegistry::send<Messages::RemoteObjectRegistry::InvokeMethod>(Messages::RemoteObjectRegistry::InvokeMethod &&)::{lambda(Messages::RemoteObjectRegistry::InvokeMethod)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<WebKit::WebProcessProxy>,std::__variant_detail::__base<WebKit::WebPage>> &&>(uint64_t ***a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v2 = *a2;
  v3 = **a1;
  v4 = (*(uint64_t (**)(uint64_t *))(*(*a1)[1] + 64))((*a1)[1]);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 1232;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebKit::RemoteObjectInvocation,void>::encode((IPC::Encoder *)v5, *v3);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v2 + 32) + 32))(v2 + 32, &v10, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void sub_19701B418(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WTF::switchOn<std::variant<std::reference_wrapper<WebKit::WebProcessProxy>,std::reference_wrapper<WebKit::WebPage>>,void WebKit::RemoteObjectRegistry::send<Messages::RemoteObjectRegistry::CallReplyBlock>(Messages::RemoteObjectRegistry::CallReplyBlock &&)::{lambda(Messages::RemoteObjectRegistry::CallReplyBlock)#1}>(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t ***v4;
  uint64_t *v5;
  __int128 v6;
  __int128 *v7;

  v6 = *a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
  {
    v4 = (uint64_t ***)std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<void WebKit::RemoteObjectRegistry::send<Messages::RemoteObjectRegistry::CallReplyBlock>(Messages::RemoteObjectRegistry::CallReplyBlock &&)::{lambda(Messages::RemoteObjectRegistry::CallReplyBlock)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<WebKit::WebProcessProxy>,std::__variant_detail::__base<WebKit::WebPage>> &&>(v4, v5);
  }
  else
  {
    v7 = &v6;
    return (IPC::Encoder *)((uint64_t (*)(__int128 **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN6WebKit20RemoteObjectRegistry4sendIN8Messages20RemoteObjectRegistry14CallReplyBlockEEEvOT_EUlSE_E_JEEEEEJNS0_6__implIJNS_17reference_wrapperINS8_15WebProcessProxyEEENSK_INS8_7WebPageEEEEEEEEEDcSF_DpOT0____fmatrix[v2])(&v7, a1);
  }
}

IPC::Encoder *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<void WebKit::RemoteObjectRegistry::send<Messages::RemoteObjectRegistry::CallReplyBlock>(Messages::RemoteObjectRegistry::CallReplyBlock &&)::{lambda(Messages::RemoteObjectRegistry::CallReplyBlock)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<WebKit::WebProcessProxy>,std::__variant_detail::__base<WebKit::WebPage>> &&>(uint64_t ***a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  uint64_t v12;
  char v13;
  IPC::Encoder *v14;

  v2 = *a2;
  v3 = **a1;
  v4 = (*(uint64_t (**)(uint64_t *))(*(*a1)[1] + 64))((*a1)[1]);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 1231;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v14 = (IPC::Encoder *)v5;
  v6 = *v3;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = v6;
  IPC::ArgumentCoder<WebKit::UserData,void>::encode((IPC::Encoder *)v5, (uint64_t *)v3[1]);
  LOBYTE(v12) = 0;
  v13 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(v2, &v14, 0, (uint64_t)&v12, 1);
  if (v13)
  {
    v8 = v12;
    v12 = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

void sub_19701B584(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<void WebKit::RemoteObjectRegistry::send<Messages::RemoteObjectRegistry::CallReplyBlock>(Messages::RemoteObjectRegistry::CallReplyBlock &&)::{lambda(Messages::RemoteObjectRegistry::CallReplyBlock)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<WebKit::WebProcessProxy>,std::__variant_detail::__base<WebKit::WebPage>> &&>(uint64_t ***a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v2 = *a2;
  v3 = **a1;
  v4 = (*(uint64_t (**)(uint64_t *))(*(*a1)[1] + 64))((*a1)[1]);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 1231;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v11 = (IPC::Encoder *)v5;
  v6 = *v3;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = v6;
  IPC::ArgumentCoder<WebKit::UserData,void>::encode((IPC::Encoder *)v5, (uint64_t *)v3[1]);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v2 + 32) + 32))(v2 + 32, &v11, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

void sub_19701B69C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WTF::switchOn<std::variant<std::reference_wrapper<WebKit::WebProcessProxy>,std::reference_wrapper<WebKit::WebPage>>,void WebKit::RemoteObjectRegistry::send<Messages::RemoteObjectRegistry::ReleaseUnusedReplyBlock>(Messages::RemoteObjectRegistry::ReleaseUnusedReplyBlock &&)::{lambda(Messages::RemoteObjectRegistry::ReleaseUnusedReplyBlock)#1}>(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t ***v4;
  uint64_t *v5;
  __int128 v6;
  __int128 *v7;

  v6 = *a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
  {
    v4 = (uint64_t ***)std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<void WebKit::RemoteObjectRegistry::send<Messages::RemoteObjectRegistry::ReleaseUnusedReplyBlock>(Messages::RemoteObjectRegistry::ReleaseUnusedReplyBlock &&)::{lambda(Messages::RemoteObjectRegistry::ReleaseUnusedReplyBlock)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<WebKit::WebProcessProxy>,std::__variant_detail::__base<WebKit::WebPage>> &&>(v4, v5);
  }
  else
  {
    v7 = &v6;
    return (IPC::Encoder *)((uint64_t (*)(__int128 **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN6WebKit20RemoteObjectRegistry4sendIN8Messages20RemoteObjectRegistry23ReleaseUnusedReplyBlockEEEvOT_EUlSE_E_JEEEEEJNS0_6__implIJNS_17reference_wrapperINS8_15WebProcessProxyEEENSK_INS8_7WebPageEEEEEEEEEDcSF_DpOT0____fmatrix[v2])(&v7, a1);
  }
}

IPC::Encoder *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<void WebKit::RemoteObjectRegistry::send<Messages::RemoteObjectRegistry::ReleaseUnusedReplyBlock>(Messages::RemoteObjectRegistry::ReleaseUnusedReplyBlock &&)::{lambda(Messages::RemoteObjectRegistry::ReleaseUnusedReplyBlock)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<WebKit::WebProcessProxy>,std::__variant_detail::__base<WebKit::WebPage>> &&>(uint64_t ***a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  uint64_t v12;
  char v13;
  IPC::Encoder *v14;

  v2 = *a2;
  v3 = **a1;
  v4 = (*(uint64_t (**)(uint64_t *))(*(*a1)[1] + 64))((*a1)[1]);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 1233;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v14 = (IPC::Encoder *)v5;
  v6 = *v3;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = v6;
  LOBYTE(v12) = 0;
  v13 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(v2, &v14, 0, (uint64_t)&v12, 1);
  if (v13)
  {
    v8 = v12;
    v12 = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

void sub_19701B7FC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<void WebKit::RemoteObjectRegistry::send<Messages::RemoteObjectRegistry::ReleaseUnusedReplyBlock>(Messages::RemoteObjectRegistry::ReleaseUnusedReplyBlock &&)::{lambda(Messages::RemoteObjectRegistry::ReleaseUnusedReplyBlock)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::reference_wrapper<WebKit::WebProcessProxy>,std::__variant_detail::__base<WebKit::WebPage>> &&>(uint64_t ***a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v2 = *a2;
  v3 = **a1;
  v4 = (*(uint64_t (**)(uint64_t *))(*(*a1)[1] + 64))((*a1)[1]);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 1233;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v11 = (IPC::Encoder *)v5;
  v6 = *v3;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = v6;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v2 + 32) + 32))(v2 + 32, &v11, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

void sub_19701B900(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

WebKit::ProcessThrottlerActivity *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::remove(uint64_t *a1, uint64_t a2)
{
  WebKit::ProcessThrottlerActivity *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)a2 = -1;
  result = std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a2 + 8), 0);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (WebKit::ProcessThrottlerActivity *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::ProcessThrottlerActivity>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::ProcessThrottlerActivity>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

unint64_t IPC::handleMessageAsync<Messages::GPUProcessProxy::StatusBarWasTapped,WebKit::GPUProcessProxy,WebKit::GPUProcessProxy,void ()(WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, _QWORD **), uint64_t a5)
{
  unint64_t result;
  char v10;
  _QWORD *v11;
  unsigned __int8 **v12;
  _QWORD *v13;
  unint64_t v14;
  unsigned __int8 **v15;
  _QWORD *v16;

  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v10)
  {
    v14 = result;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v15, a1);
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v11 = off_1E34B7080;
    v11[1] = v14;
    v12 = v15;
    v15 = 0;
    v16 = v11;
    v11[2] = v12;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v15);
    v13 = (_QWORD *)(a3 + (a5 >> 1));
    if ((a5 & 1) != 0)
      a4 = *(void (**)(_QWORD *, _QWORD **))(*v13 + a4);
    a4(v13, &v16);
    result = (unint64_t)v16;
    v16 = 0;
    if (result)
      return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void `non-virtual thunk to'WebKit::GPUProcessProxy::didReceiveMessage(WebKit::GPUProcessProxy *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  WebKit::GPUProcessProxy::didReceiveMessage((WebKit::GPUProcessProxy *)((char *)this - 32), a2, a3);
}

void WebKit::LibWebRTCCodecs::didReceiveMessage(WebKit::LibWebRTCCodecs *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  unint64_t v5;
  char v6;
  char *v7;
  unint64_t v8;
  char v9;
  void *v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  char *v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  char *v23;
  unint64_t v24;
  char v25;
  void *v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  CFTypeRef v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  unsigned int v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  __int128 v57;
  CFTypeRef cf[2];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  char v67;
  __int128 v68;
  char v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  char v79;

  switch(*((_WORD *)a3 + 25))
  {
    case 'z':
      v5 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v6)
        goto LABEL_43;
      v7 = (char *)v5;
      v8 = IPC::Decoder::decode<long long>((uint64_t *)a3);
      if (!v9)
        goto LABEL_43;
      v10 = (void *)v8;
      v11 = IPC::Decoder::decode<long long>((uint64_t *)a3);
      if (!v12)
        goto LABEL_43;
      v13 = v11;
      IPC::Decoder::decode<WebKit::RemoteVideoFrameProxyProperties>((uint64_t *)a3, (uint64_t)&v70);
      if (!BYTE8(v73))
        goto LABEL_43;
      *(_OWORD *)cf = v70;
      v56 = v7;
      *(_QWORD *)&v57 = v10;
      *((_QWORD *)&v57 + 1) = v13;
      v59 = v71;
      v60 = v72;
      *(_QWORD *)&v61 = v73;
      BYTE8(v61) = 1;
      WebKit::LibWebRTCCodecs::completedDecoding((uint64_t)this, (uint64_t)v7, v10, v13, (uint64_t)cf);
      return;
    case '{':
      v21 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v22)
        goto LABEL_43;
      v23 = (char *)v21;
      v24 = IPC::Decoder::decode<long long>((uint64_t *)a3);
      if (!v25)
        goto LABEL_43;
      v26 = (void *)v24;
      v27 = IPC::Decoder::decode<long long>((uint64_t *)a3);
      if (!v28)
        goto LABEL_43;
      v29 = v27;
      IPC::Decoder::decode<WTF::RetainPtr<__CVBuffer *>>(a3, (uint64_t)&v70);
      if (!BYTE8(v70))
        goto LABEL_43;
      v56 = v23;
      *(_QWORD *)&v57 = v26;
      *((_QWORD *)&v57 + 1) = v29;
      cf[0] = (CFTypeRef)v70;
      LOBYTE(cf[1]) = 1;
      WebKit::LibWebRTCCodecs::completedDecodingCV((uint64_t)this, (uint64_t)v23, v26, v29, (uint64_t *)cf);
      if (LOBYTE(cf[1]))
      {
        v30 = cf[0];
        cf[0] = 0;
        if (v30)
          CFRelease(v30);
      }
      return;
    case '|':
      v16 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v17)
        goto LABEL_43;
      v18 = (char *)v16;
      IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>((uint64_t *)a3, (uint64_t)&v68);
      if (!v69)
        goto LABEL_43;
      IPC::ArgumentCoder<webrtc::WebKitEncodedFrameInfo,void>::decode((uint64_t *)a3, (uint64_t)&v70);
      if (!v79)
        goto LABEL_35;
      goto LABEL_12;
    case '}':
      v19 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v20)
        WebKit::LibWebRTCCodecs::failedDecoding((uint64_t)this, v19);
      return;
    case '~':
      v14 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v15)
        WebKit::LibWebRTCCodecs::flushDecoderCompleted((uint64_t)this, v14);
      return;
    case '\x7F':
      v31 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v32)
        goto LABEL_43;
      v18 = (char *)v31;
      IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>((uint64_t *)a3, (uint64_t)&v56);
      if (!BYTE8(v57))
        goto LABEL_43;
      v33 = *((_QWORD *)a3 + 1);
      v34 = *(_QWORD *)a3;
      v35 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
      if (v33 <= v35)
      {
        v45 = 0;
        v46 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v47 = *((_QWORD *)a3 + 3);
        if (v47)
        {
          if (v33)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v47 + 16))(v47);
            v46 = *(_QWORD *)a3;
            v45 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v45 = 0;
            v46 = 0;
          }
        }
        goto LABEL_40;
      }
      v36 = (unsigned __int8 *)(v34 + v35);
      *((_QWORD *)a3 + 2) = v36 + 1;
      if (!v34)
      {
        v45 = v33;
        v46 = 0;
LABEL_40:
        v33 = 0;
        v34 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v48 = *((_QWORD *)a3 + 3);
        if (v48)
        {
          if (v45)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v48 + 16))(v48, v46, v45);
            v34 = *(_QWORD *)a3;
            v33 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v33 = 0;
            v34 = 0;
          }
        }
        goto LABEL_41;
      }
      v37 = *v36;
      if (v37 >= 2)
      {
LABEL_41:
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v49 = *((_QWORD *)a3 + 3);
        if (v49 && v33)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v49 + 16))(v49, v34);
LABEL_42:
        v50 = *(_QWORD *)a3;
        v51 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v52 = *((_QWORD *)a3 + 3);
        if (v52 && v51)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v52 + 16))(v52, v50);
        goto LABEL_43;
      }
      if (!v37)
      {
        v40 = 0;
        v41 = 0;
        goto LABEL_33;
      }
      v38 = IPC::Decoder::decode<WebCore::PlatformVideoColorSpace>((uint64_t *)a3);
      if (!v39)
        goto LABEL_42;
      if (BYTE8(v57))
      {
        v40 = v38;
        v41 = 1;
LABEL_33:
        WebKit::LibWebRTCCodecs::setEncodingConfiguration((uint64_t)this, (uint64_t)v18, v56, (WTF *)v57, v40, v41);
        return;
      }
      while (1)
      {
        __break(1u);
LABEL_35:
        v42 = *(_QWORD *)a3;
        v43 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v44 = *((_QWORD *)a3 + 3);
        if (!v44)
          break;
        if (!v43)
          break;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 16))(v44, v42);
        if (!v79)
          break;
LABEL_12:
        if (v69)
        {
          v57 = v68;
          v63 = v75;
          v64 = v76;
          v65 = v77;
          v59 = v71;
          v60 = v72;
          v61 = v73;
          v62 = v74;
          v56 = v18;
          v66 = v78;
          *(_OWORD *)cf = v70;
          v67 = 1;
          WebKit::LibWebRTCCodecs::completedEncoding((uint64_t)this, (uint64_t)v18, v68, *((uint64_t *)&v68 + 1), (uint64_t)cf);
          return;
        }
      }
LABEL_43:
      v53 = *(_QWORD *)a3;
      v54 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v55 = *((_QWORD *)a3 + 3);
      if (v55)
      {
        if (v54)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v55 + 16))(v55, v53);
      }
      return;
    default:
      return;
  }
}

void WebKit::LibWebRTCCodecsProxy::didReceiveMessage(WebKit::LibWebRTCCodecsProxy *this, unsigned __int8 **a2, WTF::StringImpl **a3)
{
  unsigned __int8 v3;
  WTF *v4;
  BOOL v5;
  BOOL v6;
  WTF::StringImpl **v7;
  unint64_t v10;
  char v11;
  unsigned __int16 v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  char v23;
  WTF *v24;
  int v25;
  unint64_t v26;
  char v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  __int16 *v32;
  unint64_t v33;
  __int16 *v35;
  __int16 v36;
  __int16 v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  __int16 *v47;
  unint64_t v48;
  __int16 v50;
  __int16 v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  WTF *v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  int v64;
  unint64_t v65;
  WTF::StringImpl *v66;
  unint64_t v67;
  unsigned __int8 *v68;
  unsigned int v69;
  BOOL v70;
  unint64_t v71;
  char v72;
  unint64_t v73;
  char v74;
  WTF *v75;
  unsigned __int16 v76;
  char v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  unsigned __int8 *v80;
  unsigned int v81;
  BOOL v82;
  unsigned int v83;
  BOOL v84;
  unsigned int v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  int v90;
  unint64_t v91;
  char v92;
  uint64_t v93;
  WTF *v94;
  char v95;
  WTF::StringImpl *v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  unint64_t v99;
  char v100;
  WTF *v101;
  unint64_t v102;
  char v103;
  unint64_t v104;
  unsigned __int16 *v106;
  unint64_t v107;
  void *v109;
  char *v110;
  unint64_t v111;
  char *v113;
  unint64_t v114;
  char *v116;
  unint64_t v117;
  char *v119;
  unint64_t v120;
  unint64_t v122;
  char v123;
  unint64_t v124;
  unsigned int *v126;
  unint64_t v127;
  void *v129;
  unint64_t v130;
  char v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  uint64_t v137;
  WTF::StringImpl *v138;
  uint64_t v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  WTF::StringImpl *v167;
  WTF::StringImpl *v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  void *v173;
  uint64_t v174;
  WTF::StringImpl *v175;
  uint64_t v176;
  WTF::StringImpl *v177;
  WTF::StringImpl *v178;
  WTF::StringImpl *v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  WTF::StringImpl *v185;
  WTF::StringImpl *v186;
  WTF::StringImpl *v187;
  WTF::StringImpl *v188;
  WTF::StringImpl *v189;
  WTF::StringImpl *v190;
  WTF::StringImpl *v191;
  char v192;
  uint64_t v193;
  WTF::StringImpl *v194;
  uint64_t v195;
  WTF::StringImpl *v196;
  WTF::StringImpl *v197;
  WTF::StringImpl *v198;
  WTF::StringImpl *v199;
  WTF::StringImpl *v200;
  WTF::StringImpl *v201;
  WTF::StringImpl *v202;
  WTF::StringImpl *v203;
  WTF::StringImpl *v204;
  WTF::StringImpl *v205;
  WTF::StringImpl *v206;
  WTF::StringImpl *v207;
  WTF *v208;
  __int128 v209;
  WTF::StringImpl *v210;
  WTF::StringImpl *v211;
  BOOL v212;
  BOOL v213;
  unsigned __int8 v214;
  int v215;
  uint64_t v216;
  __int128 v217;
  BOOL v218;
  unsigned __int8 v219;
  WTF::StringImpl *v220[2];
  int v221;
  _BYTE v222[16];
  int v223;
  char v224;
  __int128 v225;
  unsigned __int8 v226;

  v7 = a3;
  switch(*((_WORD *)a3 + 25))
  {
    case 'k':
      v10 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v11
        || (v4 = (WTF *)v10, v12 = IPC::Decoder::decode<WebKit::VideoCodecType>(v7), v12 <= 0xFFu)
        || (v3 = v12, IPC::Decoder::decode<WTF::String>((uint64_t *)v7, v220), !LOBYTE(v220[1])))
      {
        v20 = 0;
        LOBYTE(v208) = 0;
        LOBYTE(v211) = 0;
LABEL_139:
        v132 = *v7;
        v133 = v7[1];
        *v7 = 0;
        v7[1] = 0;
        v134 = v7[3];
        if (v134 && v133)
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)v134 + 16))(v134, v132);
        goto LABEL_140;
      }
      v13 = (unint64_t)v7[1];
      v14 = *v7;
      v15 = v7[2] - *v7;
      if (v13 <= v15)
      {
        v177 = 0;
        v178 = 0;
        *v7 = 0;
        v7[1] = 0;
        v179 = v7[3];
        if (v179)
        {
          if (v13)
          {
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v179 + 16))(v179);
            v178 = *v7;
            v177 = v7[1];
          }
          else
          {
            v177 = 0;
            v178 = 0;
          }
        }
        goto LABEL_212;
      }
      v16 = (unsigned __int8 *)v14 + v15;
      v7[2] = (WTF::StringImpl *)(v16 + 1);
      if (!v14)
      {
        v177 = (WTF::StringImpl *)v13;
        v178 = 0;
LABEL_212:
        v13 = 0;
        v14 = 0;
        *v7 = 0;
        v7[1] = 0;
        v180 = v7[3];
        if (v180)
        {
          if (v177)
          {
            (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)v180 + 16))(v180, v178, v177);
            v14 = *v7;
            v13 = (unint64_t)v7[1];
          }
          else
          {
            v13 = 0;
            v14 = 0;
          }
        }
        goto LABEL_213;
      }
      v17 = *v16;
      if (v17 >= 2)
      {
LABEL_213:
        *v7 = 0;
        v7[1] = 0;
        v181 = v7[3];
        if (v181 && v13)
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)v181 + 16))(v181, v14);
        goto LABEL_218;
      }
      v5 = v17 != 0;
      if (v13 <= v16 + 1 - (unsigned __int8 *)v14)
      {
        v182 = 0;
        v183 = 0;
        *v7 = 0;
        v7[1] = 0;
        v184 = v7[3];
        if (v184)
        {
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v184 + 16))(v184);
          v182 = 0;
          v14 = *v7;
          v206 = v7[1];
          v207 = v7[3];
          *v7 = 0;
          v7[1] = 0;
          v183 = 0;
          if (v207)
          {
            if (v206)
            {
              (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)v207 + 16))(v207, v14);
              v183 = *v7;
              v182 = v7[1];
            }
          }
        }
      }
      else
      {
        v7[2] = (WTF::StringImpl *)(v16 + 2);
        v18 = v16[1];
        if (v18 < 2)
        {
          v19 = 0;
          v6 = v18 != 0;
          v208 = v4;
          LOBYTE(v209) = v3;
          v4 = v220[0];
          v220[0] = 0;
          *((_QWORD *)&v209 + 1) = v4;
          LOBYTE(v210) = v17 != 0;
          BYTE1(v210) = v18 != 0;
          v20 = 1;
          goto LABEL_11;
        }
        v182 = (WTF::StringImpl *)v13;
        v183 = v14;
      }
      *v7 = 0;
      v7[1] = 0;
      v185 = v7[3];
      if (v185 && v182)
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)v185 + 16))(v185, v183, v182);
LABEL_218:
      v20 = 0;
      LOBYTE(v208) = 0;
      v19 = 1;
LABEL_11:
      LOBYTE(v211) = v20;
      if (LOBYTE(v220[1]))
      {
        v21 = v220[0];
        v220[0] = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, v14);
          else
            *(_DWORD *)v21 -= 2;
        }
      }
      if (v19)
        goto LABEL_139;
LABEL_140:
      if (v20)
      {
        v135 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)v7);
        if ((_BYTE)v136)
        {
          v220[0] = v135;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v220[1], a2);
          v137 = WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v137 = off_1E34B70A8;
          *(WTF::StringImpl **)(v137 + 8) = v220[0];
          v138 = v220[1];
          v220[1] = 0;
          *(_QWORD *)(v137 + 16) = v138;
          *(_QWORD *)&v225 = v137;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v220[1]);
          WebKit::LibWebRTCCodecsProxy::createDecoder((uint64_t)this, v208, v3, (uint64_t *)&v209 + 1, v5, v6, (uint64_t *)&v225);
          v139 = v225;
          *(_QWORD *)&v225 = 0;
          if (v139)
            (*(void (**)(uint64_t))(*(_QWORD *)v139 + 8))(v139);
          if (!(_BYTE)v211)
            return;
          v4 = (WTF *)*((_QWORD *)&v209 + 1);
        }
        *((_QWORD *)&v209 + 1) = 0;
        if (v4)
        {
          if (*(_DWORD *)v4 == 2)
          {
            v149 = v4;
            goto LABEL_163;
          }
          *(_DWORD *)v4 -= 2;
        }
      }
      return;
    case 'l':
      v73 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v74)
        goto LABEL_186;
      v75 = (WTF *)v73;
      v76 = IPC::Decoder::decode<WebKit::VideoCodecType>(v7);
      if (v76 < 0x100u)
        goto LABEL_186;
      v77 = v76;
      IPC::Decoder::decode<WTF::String>((uint64_t *)v7, &v225);
      if (!BYTE8(v225))
        goto LABEL_186;
      IPC::Decoder::decode<WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)v7, (uint64_t)v220);
      if (!(_BYTE)v221)
      {
        v90 = 0;
        LOBYTE(v208) = 0;
        LOBYTE(v215) = 0;
        goto LABEL_195;
      }
      v65 = (unint64_t)v7[1];
      v78 = *v7;
      v79 = v7[2] - *v7;
      if (v65 <= v79)
        goto LABEL_237;
      v80 = (unsigned __int8 *)v78 + v79;
      v7[2] = (WTF::StringImpl *)(v80 + 1);
      if (!v78)
      {
        v196 = (WTF::StringImpl *)v65;
        v197 = 0;
        goto LABEL_238;
      }
      v81 = *v80;
      if (v81 >= 2)
        goto LABEL_239;
      v82 = v81 != 0;
      if (v65 <= v80 + 1 - (unsigned __int8 *)v78)
        goto LABEL_190;
      v7[2] = (WTF::StringImpl *)(v80 + 2);
      v83 = v80[1];
      if (v83 >= 2)
      {
        v86 = (WTF::StringImpl *)v65;
        v87 = v78;
      }
      else
      {
        v84 = v83 != 0;
        if (v65 <= v80 + 2 - (unsigned __int8 *)v78)
        {
LABEL_190:
          v86 = 0;
          v87 = 0;
          *v7 = 0;
          v7[1] = 0;
          v169 = v7[3];
          if (v169)
          {
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v169 + 16))(v169);
            v86 = 0;
            v78 = *v7;
            v204 = v7[1];
            v205 = v7[3];
            *v7 = 0;
            v7[1] = 0;
            v87 = 0;
            if (v205)
            {
              if (v204)
              {
                (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)v205 + 16))(v205, v78);
                v87 = *v7;
                v86 = v7[1];
              }
            }
          }
        }
        else
        {
          v7[2] = (WTF::StringImpl *)(v80 + 3);
          v85 = v80[2];
          v86 = (WTF::StringImpl *)v65;
          v87 = v78;
          if (v85 < 3)
          {
            if (!BYTE8(v225))
              goto LABEL_236;
            v208 = v75;
            LOBYTE(v209) = v77;
            v88 = v225;
            *(_QWORD *)&v225 = 0;
            *((_QWORD *)&v209 + 1) = v88;
            v210 = v220[0];
            v89 = v220[1];
            v220[0] = 0;
            v220[1] = 0;
            v211 = v89;
            v212 = v82;
            v213 = v84;
            v90 = 1;
            v214 = v85;
            while (1)
            {
              LOBYTE(v215) = v90;
              if ((_BYTE)v221)
                WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v220, v78);
LABEL_195:
              if (BYTE8(v225))
              {
                v171 = (WTF::StringImpl *)v225;
                *(_QWORD *)&v225 = 0;
                if (v171)
                {
                  if (*(_DWORD *)v171 == 2)
                    WTF::StringImpl::destroy(v171, v78);
                  else
                    *(_DWORD *)v171 -= 2;
                }
              }
              if (!v90)
                goto LABEL_186;
              v172 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)v7);
              if (!(_BYTE)v173)
                goto LABEL_206;
              v220[0] = v172;
              v7 = &v220[1];
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v220[1], a2);
              v174 = WTF::fastMalloc((WTF *)0x18);
              *(_QWORD *)v174 = off_1E34B70D0;
              *(WTF::StringImpl **)(v174 + 8) = v220[0];
              v175 = v220[1];
              v220[1] = 0;
              *(_QWORD *)(v174 + 16) = v175;
              *(_QWORD *)&v225 = v174;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v220[1]);
              if ((_BYTE)v215)
              {
                WebKit::LibWebRTCCodecsProxy::createEncoder(this, v208, v209, (_QWORD *)&v209 + 1, (uint64_t *)&v210, v212, v213, v214, (uint64_t *)&v225);
                v176 = v225;
                *(_QWORD *)&v225 = 0;
                if (v176)
                  (*(void (**)(uint64_t))(*(_QWORD *)v176 + 8))(v176);
                if (!(_BYTE)v215)
                  return;
LABEL_206:
                WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v210, v173);
                v149 = (WTF::StringImpl *)*((_QWORD *)&v209 + 1);
                *((_QWORD *)&v209 + 1) = 0;
                if (v149)
                {
                  if (*(_DWORD *)v149 == 2)
LABEL_163:
                    WTF::StringImpl::destroy(v149, v136);
                  else
                    *(_DWORD *)v149 -= 2;
                }
                return;
              }
LABEL_236:
              __break(1u);
LABEL_237:
              v196 = 0;
              v197 = 0;
              *v7 = 0;
              v7[1] = 0;
              v198 = v7[3];
              if (v198)
              {
                if (v65)
                {
                  (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v198 + 16))(v198);
                  v197 = *v7;
                  v196 = v7[1];
                }
                else
                {
                  v196 = 0;
                  v197 = 0;
                }
              }
LABEL_238:
              v65 = 0;
              v78 = 0;
              *v7 = 0;
              v7[1] = 0;
              v199 = v7[3];
              if (v199)
              {
                if (v196)
                {
                  (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)v199
                                                                                                  + 16))(v199, v197, v196);
                  v78 = *v7;
                  v65 = (unint64_t)v7[1];
                }
                else
                {
                  v65 = 0;
                  v78 = 0;
                }
              }
LABEL_239:
              *v7 = 0;
              v7[1] = 0;
              v200 = v7[3];
              if (v200 && v65)
                (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)v200 + 16))(v200, v78);
LABEL_192:
              v90 = 0;
              LOBYTE(v208) = 0;
            }
          }
        }
      }
      *v7 = 0;
      v7[1] = 0;
      v170 = v7[3];
      if (v170 && v86)
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)v170 + 16))(v170, v87, v86);
      goto LABEL_192;
    case 'm':
      v52 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v53)
        goto LABEL_186;
      v54 = v52;
      v55 = IPC::Decoder::decode<long long>((uint64_t *)v7);
      if (!v56)
        goto LABEL_186;
      v57 = v55;
      IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>((uint64_t *)v7, (uint64_t)&v208);
      if (!BYTE8(v209))
        goto LABEL_186;
      WebKit::LibWebRTCCodecsProxy::decodeFrame((uint64_t)this, v54, v57, (uint64_t)v208, v209);
      return;
    case 'n':
      v58 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v59
        || (v60 = (WTF *)v58, IPC::Decoder::decode<WebKit::SharedVideoFrame>((uint64_t *)v7, (uint64_t)v220), !v224))
      {
        LOBYTE(v208) = 0;
        v219 = 0;
        goto LABEL_154;
      }
      v61 = IPC::Decoder::decode<long long>((uint64_t *)v7);
      if (!v62)
      {
        v64 = 0;
        LOBYTE(v208) = 0;
        v219 = 0;
        goto LABEL_225;
      }
      v63 = v61;
      IPC::Decoder::decode<std::optional<unsigned long long>>((uint64_t *)v7, (uint64_t)&v225);
      v64 = v226;
      if (!v226)
        goto LABEL_223;
      v65 = (unint64_t)v7[1];
      v66 = *v7;
      v67 = v7[2] - *v7;
      if (v65 <= v67)
      {
        v186 = 0;
        v187 = 0;
        *v7 = 0;
        v7[1] = 0;
        v188 = v7[3];
        if (v188)
        {
          if (v65)
          {
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v188 + 16))(v188);
            v187 = *v7;
            v186 = v7[1];
          }
          else
          {
            v186 = 0;
            v187 = 0;
          }
        }
      }
      else
      {
        v68 = (unsigned __int8 *)v66 + v67;
        v7[2] = (WTF::StringImpl *)(v68 + 1);
        if (v66)
        {
          v69 = *v68;
          if (v69 < 2)
          {
            if (!v224)
              goto LABEL_236;
            v70 = v69 != 0;
            v208 = v60;
            v209 = *(_OWORD *)v220;
            LODWORD(v210) = v221;
            LOBYTE(v211) = 0;
            v215 = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,(std::__variant_detail::_Trait)1>>((uint64_t)&v211, (uint64_t)v222);
            v216 = v63;
            v217 = v225;
            v218 = v70;
            v64 = 1;
            goto LABEL_224;
          }
LABEL_221:
          *v7 = 0;
          v7[1] = 0;
          v190 = v7[3];
          if (v190 && v65)
            (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)v190 + 16))(v190, v66);
          v64 = 0;
LABEL_223:
          LOBYTE(v208) = 0;
LABEL_224:
          v219 = v64;
LABEL_225:
          if (v224 && v223 != -1)
          {
            ((void (*)(__int128 *, _BYTE *))off_1E34B70E8[v223])(&v225, v222);
            v64 = v219;
          }
          if (v64)
            goto LABEL_229;
LABEL_154:
          v143 = *v7;
          v144 = v7[1];
          *v7 = 0;
          v7[1] = 0;
          v145 = v7[3];
          if (!v145)
            return;
          if (!v144)
            return;
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)v145 + 16))(v145, v143);
          if (!v219)
            return;
LABEL_229:
          v191 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)v7);
          if (v192)
          {
            v220[0] = v191;
            v7 = &v220[1];
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v220[1], a2);
            v193 = WTF::fastMalloc((WTF *)0x18);
            *(_QWORD *)v193 = off_1E34B7118;
            *(WTF::StringImpl **)(v193 + 8) = v220[0];
            v194 = v220[1];
            v220[1] = 0;
            *(_QWORD *)(v193 + 16) = v194;
            *(_QWORD *)&v225 = v193;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v220[1]);
            if (!v219)
              goto LABEL_236;
            WebKit::LibWebRTCCodecsProxy::encodeFrame(this, v208, (uint64_t)&v209, v216, v217, *((uint64_t *)&v217 + 1), v218, (uint64_t *)&v225);
            v195 = v225;
            *(_QWORD *)&v225 = 0;
            if (v195)
              (*(void (**)(uint64_t))(*(_QWORD *)v195 + 8))(v195);
          }
          if (v219 && v215 != -1)
            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34B70E8[v215])(v220, &v211);
          return;
        }
        v186 = (WTF::StringImpl *)v65;
        v187 = 0;
      }
      v65 = 0;
      v66 = 0;
      *v7 = 0;
      v7[1] = 0;
      v189 = v7[3];
      if (v189)
      {
        if (v186)
        {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)v189 + 16))(v189, v187, v186);
          v66 = *v7;
          v65 = (unint64_t)v7[1];
        }
        else
        {
          v65 = 0;
          v66 = 0;
        }
      }
      goto LABEL_221;
    case 'o':
      v38 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v39)
        WebKit::LibWebRTCCodecsProxy::flushDecoder((uint64_t)this, v38);
      return;
    case 'p':
      v91 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v92)
      {
        v93 = v91;
        v94 = (WTF *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)v7);
        if (v95)
        {
          v208 = v94;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v209, a2);
          v96 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v96 = off_1E34B7140;
          *((_QWORD *)v96 + 1) = v208;
          v97 = v209;
          *(_QWORD *)&v209 = 0;
          *((_QWORD *)v96 + 2) = v97;
          v220[0] = v96;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v209);
          WebKit::LibWebRTCCodecsProxy::flushEncoder((uint64_t)this, v93, (uint64_t *)v220);
          v98 = v220[0];
          v220[0] = 0;
          if (v98)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v98 + 8))(v98);
        }
      }
      return;
    case 'q':
      v102 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v103)
        goto LABEL_178;
      v28 = v7[1];
      v29 = *v7;
      v104 = (((unint64_t)v7[2] + 1) & 0xFFFFFFFFFFFFFFFELL) - (_QWORD)*v7;
      if ((unint64_t)v28 < v104 || (unint64_t)v28 - v104 <= 1)
        goto LABEL_176;
      v106 = (unsigned __int16 *)((char *)v29 + v104);
      v7[2] = (WTF::StringImpl *)(v106 + 1);
      if (!v29)
        goto LABEL_274;
      v107 = (((unint64_t)v106 + 3) & 0xFFFFFFFFFFFFFFFELL) - (_QWORD)v29;
      if ((unint64_t)v28 < v107 || (unint64_t)v28 - v107 <= 1)
        goto LABEL_171;
      v109 = (void *)*v106;
      v110 = (char *)v29 + v107;
      v7[2] = (WTF::StringImpl *)(v110 + 2);
      v111 = ((unint64_t)(v110 + 5) & 0xFFFFFFFFFFFFFFFCLL) - (_QWORD)v29;
      if ((unint64_t)v28 < v111 || (unint64_t)v28 - v111 <= 3)
        goto LABEL_171;
      v113 = (char *)v29 + v111;
      v7[2] = (WTF::StringImpl *)(v113 + 4);
      v114 = ((unint64_t)(v113 + 7) & 0xFFFFFFFFFFFFFFFCLL) - (_QWORD)v29;
      if ((unint64_t)v28 < v114 || (unint64_t)v28 - v114 <= 3)
        goto LABEL_171;
      v116 = (char *)v29 + v114;
      v7[2] = (WTF::StringImpl *)(v116 + 4);
      v117 = ((unint64_t)(v116 + 7) & 0xFFFFFFFFFFFFFFFCLL) - (_QWORD)v29;
      if ((unint64_t)v28 < v117 || (unint64_t)v28 - v117 <= 3)
        goto LABEL_171;
      v119 = (char *)v29 + v117;
      v7[2] = (WTF::StringImpl *)(v119 + 4);
      v120 = ((unint64_t)(v119 + 7) & 0xFFFFFFFFFFFFFFFCLL) - (_QWORD)v29;
      if ((unint64_t)v28 < v120 || (unint64_t)v28 - v120 <= 3)
        goto LABEL_171;
      v7[2] = (WTF::StringImpl *)(((unint64_t)(v119 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
      WebKit::LibWebRTCCodecsProxy::initializeEncoder((uint64_t)this, v102, v109);
      return;
    case 'r':
      v71 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v72)
        WebKit::LibWebRTCCodecsProxy::releaseDecoder((uint64_t)this, v71);
      return;
    case 's':
      v130 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v131)
        WebKit::LibWebRTCCodecsProxy::releaseEncoder((uint64_t)this, v130);
      return;
    case 't':
      v40 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v41)
        goto LABEL_186;
      v42 = v40;
      IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>((uint64_t *)v7, (uint64_t)&v208);
      if (!BYTE8(v209))
        goto LABEL_186;
      v43 = v7[1];
      v44 = *v7;
      v45 = (((unint64_t)v7[2] + 1) & 0xFFFFFFFFFFFFFFFELL) - (_QWORD)*v7;
      if ((unint64_t)v43 >= v45 && (unint64_t)v43 - v45 > 1)
      {
        v47 = (__int16 *)((char *)v44 + v45);
        v7[2] = (WTF::StringImpl *)(v47 + 1);
        if (v44)
        {
          v48 = (((unint64_t)v47 + 3) & 0xFFFFFFFFFFFFFFFELL) - (_QWORD)v44;
          if ((unint64_t)v43 >= v48 && (unint64_t)v43 - v48 > 1)
          {
            v50 = *v47;
            v51 = *(_WORD *)(((unint64_t)v47 + 3) & 0xFFFFFFFFFFFFFFFELL);
            v7[2] = (WTF::StringImpl *)((((unint64_t)v47 + 3) & 0xFFFFFFFFFFFFFFFELL) + 2);
            WebKit::LibWebRTCCodecsProxy::setDecoderFormatDescription((uint64_t)this, v42, (uint64_t)v208, v209, v50, v51);
            return;
          }
          *v7 = 0;
          v7[1] = 0;
          v165 = v7[3];
          if (v165)
          {
            if (v43)
            {
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v165 + 16))(v165);
              v201 = *v7;
              v202 = v7[1];
              v203 = v7[3];
              *v7 = 0;
              v7[1] = 0;
              if (v203)
              {
                if (v202)
                  (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)v203 + 16))(v203, v201);
              }
            }
          }
LABEL_186:
          v166 = *v7;
          v167 = v7[1];
          *v7 = 0;
          v7[1] = 0;
          v168 = v7[3];
          if (v168 && v167)
            (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)v168 + 16))(v168, v166);
          return;
        }
        v161 = v43;
        v162 = 0;
      }
      else
      {
        v161 = 0;
        v162 = 0;
        *v7 = 0;
        v7[1] = 0;
        v163 = v7[3];
        if (v163)
        {
          if (v43)
          {
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v163 + 16))(v163);
            v162 = *v7;
            v161 = v7[1];
          }
          else
          {
            v161 = 0;
            v162 = 0;
          }
        }
      }
      *v7 = 0;
      v7[1] = 0;
      v164 = v7[3];
      if (v164 && v161)
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)v164 + 16))(v164, v162, v161);
      goto LABEL_186;
    case 'u':
      v122 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v123)
        goto LABEL_178;
      v28 = v7[1];
      v29 = *v7;
      v124 = (((unint64_t)v7[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (_QWORD)*v7;
      if ((unint64_t)v28 < v124 || (unint64_t)v28 - v124 <= 3)
        goto LABEL_176;
      v126 = (unsigned int *)((char *)v29 + v124);
      v7[2] = (WTF::StringImpl *)(v126 + 1);
      if (!v29)
        goto LABEL_274;
      v127 = (((unint64_t)v126 + 7) & 0xFFFFFFFFFFFFFFFCLL) - (_QWORD)v29;
      if ((unint64_t)v28 < v127 || (unint64_t)v28 - v127 <= 3)
        goto LABEL_171;
      v129 = (void *)*v126;
      v7[2] = (WTF::StringImpl *)((((unint64_t)v126 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
      WebKit::LibWebRTCCodecsProxy::setEncodeRates((uint64_t)this, v122, v129);
      return;
    case 'v':
      v26 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v27)
        goto LABEL_178;
      v28 = v7[1];
      v29 = *v7;
      v30 = (((unint64_t)v7[2] + 1) & 0xFFFFFFFFFFFFFFFELL) - (_QWORD)*v7;
      if ((unint64_t)v28 >= v30 && (unint64_t)v28 - v30 > 1)
      {
        v32 = (__int16 *)((char *)v29 + v30);
        v7[2] = (WTF::StringImpl *)(v32 + 1);
        if (v29)
        {
          v33 = (((unint64_t)v32 + 3) & 0xFFFFFFFFFFFFFFFELL) - (_QWORD)v29;
          if ((unint64_t)v28 >= v33 && (unint64_t)v28 - v33 > 1)
          {
            v35 = (__int16 *)(((unint64_t)v32 + 3) & 0xFFFFFFFFFFFFFFFELL);
            v36 = *v35;
            v37 = *v32;
            v7[2] = (WTF::StringImpl *)(v35 + 1);
            WebKit::LibWebRTCCodecsProxy::setFrameSize((uint64_t)this, v26, v37, v36);
            return;
          }
LABEL_171:
          *v7 = 0;
          v7[1] = 0;
          v150 = v7[3];
          if (v150)
          {
            if (v28)
            {
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v150 + 16))(v150);
              v151 = *v7;
              v152 = v7[1];
              v153 = v7[3];
              *v7 = 0;
              v7[1] = 0;
              if (v153)
              {
                if (v152)
                  (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)v153 + 16))(v153, v151);
              }
            }
          }
LABEL_178:
          v158 = *v7;
          v159 = v7[1];
          *v7 = 0;
          v7[1] = 0;
          v160 = v7[3];
          if (v160 && v159)
            (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)v160 + 16))(v160, v158);
          return;
        }
LABEL_274:
        v154 = v28;
        v155 = v29;
      }
      else
      {
LABEL_176:
        v154 = 0;
        v155 = 0;
        *v7 = 0;
        v7[1] = 0;
        v156 = v7[3];
        if (v156)
        {
          if (v28)
          {
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v156 + 16))(v156);
            v155 = *v7;
            v154 = v7[1];
          }
          else
          {
            v154 = 0;
            v155 = 0;
          }
        }
      }
      *v7 = 0;
      v7[1] = 0;
      v157 = v7[3];
      if (v157 && v154)
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)v157 + 16))(v157, v155, v154);
      goto LABEL_178;
    case 'w':
      if ((unsigned __int16)IPC::Decoder::decode<WebCore::MediaPlayerReadyState>((uint64_t *)a3) <= 0xFFu)
        goto LABEL_178;
      WebCore::LibWebRTCProvider::setRTCLogging();
      return;
    case 'x':
      v99 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v100
        && (v101 = (WTF *)v99,
            IPC::Decoder::decode<WebCore::SharedMemoryHandle>((IPC::Decoder *)v7, (uint64_t)v220),
            (_BYTE)v221))
      {
        v208 = v101;
        WTF::MachSendRight::MachSendRight();
        *((WTF::StringImpl **)&v209 + 1) = v220[1];
        LOBYTE(v210) = 1;
        if ((_BYTE)v221)
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v220);
      }
      else
      {
        LOBYTE(v208) = 0;
        LOBYTE(v210) = 0;
        v146 = *v7;
        v147 = v7[1];
        *v7 = 0;
        v7[1] = 0;
        v148 = v7[3];
        if (!v148)
          return;
        if (!v147)
          return;
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)v148 + 16))(v148, v146);
        if (!(_BYTE)v210)
          return;
      }
      WebKit::LibWebRTCCodecsProxy::setSharedVideoFrameMemory((uint64_t)this, (uint64_t)v208);
      goto LABEL_89;
    case 'y':
      v22 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v23 && (v24 = (WTF *)v22, IPC::Decoder::decode<IPC::Semaphore>((IPC::Decoder *)v7, v220), LOBYTE(v220[1])))
      {
        v208 = v24;
        WTF::MachSendRight::MachSendRight();
        v25 = HIDWORD(v220[0]);
        HIDWORD(v220[0]) = 0;
        DWORD1(v209) = v25;
        BYTE8(v209) = 1;
        if (LOBYTE(v220[1]))
        {
          IPC::Semaphore::destroy((IPC::Semaphore *)v220);
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v220);
        }
      }
      else
      {
        LOBYTE(v208) = 0;
        BYTE8(v209) = 0;
        v140 = *v7;
        v141 = v7[1];
        *v7 = 0;
        v7[1] = 0;
        v142 = v7[3];
        if (!v142)
          return;
        if (!v141)
          return;
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)v142 + 16))(v142, v140);
        if (!BYTE8(v209))
          return;
      }
      WebKit::LibWebRTCCodecsProxy::setSharedVideoFrameSemaphore((uint64_t)this, (uint64_t)v208, (IPC::Semaphore *)&v209);
      if (BYTE8(v209))
      {
        IPC::Semaphore::destroy((IPC::Semaphore *)&v209);
LABEL_89:
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v209);
      }
      return;
    default:
      return;
  }
}

_QWORD *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[24])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[2];

  result = (_QWORD *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6[0] = result;
  v6[1] = v5;
  if ((_BYTE)v5)
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1, (uint64_t)v6, a2);
  *a2 = 0;
  a2[24] = 0;
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8[2];

  result = (_QWORD *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v8[0] = (uint64_t)result;
  v8[1] = v7;
  if ((_BYTE)v7)
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1, a2, v8, (uint64_t)a3);
  *a3 = 0;
  a3[24] = 0;
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int *v8;
  int v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v4 = result[1];
  v5 = *result;
  v6 = ((result[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *result;
  if (v4 < v6 || v4 - v6 <= 3)
  {
LABEL_12:
    v12 = 0;
    v13 = 0;
    *result = 0;
    result[1] = 0;
    v14 = result[3];
    if (v14)
    {
      v15 = result;
      v17 = a4;
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v14 + 16))(v14, v5, v4);
        result = v15;
        a4 = v17;
        v13 = *v15;
        v12 = v15[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
    }
    goto LABEL_13;
  }
  v8 = (int *)(v5 + v6);
  result[2] = v8 + 1;
  if (v5)
  {
    v5 = *(unsigned __int8 *)(a2 + 8);
    if (*(_BYTE *)(a2 + 8))
    {
      v5 = *((unsigned __int8 *)a3 + 8);
      if (*((_BYTE *)a3 + 8))
      {
        v9 = *v8;
        v10 = *a3;
        *(_QWORD *)a4 = *(_QWORD *)a2;
        *(_QWORD *)(a4 + 8) = v10;
        *(_DWORD *)(a4 + 16) = v9;
        v11 = 1;
        goto LABEL_10;
      }
    }
    __break(1u);
    goto LABEL_12;
  }
  v12 = v4;
  v13 = 0;
LABEL_13:
  *result = 0;
  result[1] = 0;
  result = (_QWORD *)result[3];
  if (result && v12)
  {
    v16 = a4;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v13);
    a4 = v16;
  }
  v11 = 0;
  *(_BYTE *)a4 = 0;
LABEL_10:
  *(_BYTE *)(a4 + 24) = v11;
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages15GPUProcessProxy18StatusBarWasTappedEN6WebKit15GPUProcessProxyES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B7080;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages15GPUProcessProxy18StatusBarWasTappedEN6WebKit15GPUProcessProxyES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B7080;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages15GPUProcessProxy18StatusBarWasTappedEN6WebKit15GPUProcessProxyES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2832;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::VideoCodecType>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v7 = 0;
    v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9)
    {
      v18 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v9 + 16))(v9, v2, v1);
        a1 = v18;
        v8 = *v18;
        v7 = v18[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
    }
    goto LABEL_6;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    v7 = v1;
    v8 = 0;
LABEL_6:
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10 && v7)
    {
      v17 = a1;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v8);
      a1 = v17;
    }
    goto LABEL_7;
  }
  v5 = *v4;
  if (v5 >= 4)
  {
LABEL_7:
    v5 = 0;
    v6 = 0;
    goto LABEL_8;
  }
  v6 = 1;
LABEL_8:
  v11 = v5 | (v6 << 8);
  if (v11 <= 0xFF)
  {
    v13 = *a1;
    v14 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v15 = a1[3];
    if (v15)
    {
      if (v14)
      {
        v16 = v11;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13);
        return v16;
      }
    }
  }
  return v11;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20LibWebRTCCodecsProxy13CreateDecoderEN6WebKit20LibWebRTCCodecsProxyES8_FvNS_23ObjectIdentifierGenericINS7_26VideoDecoderIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS7_14VideoCodecTypeERKNS_6StringEbbONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B70A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20LibWebRTCCodecsProxy13CreateDecoderEN6WebKit20LibWebRTCCodecsProxyES8_FvNS_23ObjectIdentifierGenericINS7_26VideoDecoderIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS7_14VideoCodecTypeERKNS_6StringEbbONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B70A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20LibWebRTCCodecsProxy13CreateDecoderEN6WebKit20LibWebRTCCodecsProxyES8_FvNS_23ObjectIdentifierGenericINS7_26VideoDecoderIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS7_14VideoCodecTypeERKNS_6StringEbbONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2842;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20LibWebRTCCodecsProxy13CreateEncoderEN6WebKit20LibWebRTCCodecsProxyES8_FvNS_23ObjectIdentifierGenericINS7_26VideoEncoderIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS7_14VideoCodecTypeERKNS_6StringERKNS_6VectorINSt3__14pairISF_SF_EELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEbbN7WebCore27VideoEncoderScalabilityModeEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B70D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20LibWebRTCCodecsProxy13CreateEncoderEN6WebKit20LibWebRTCCodecsProxyES8_FvNS_23ObjectIdentifierGenericINS7_26VideoEncoderIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS7_14VideoCodecTypeERKNS_6StringERKNS_6VectorINSt3__14pairISF_SF_EELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEbbN7WebCore27VideoEncoderScalabilityModeEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B70D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20LibWebRTCCodecsProxy13CreateEncoderEN6WebKit20LibWebRTCCodecsProxyES8_FvNS_23ObjectIdentifierGenericINS7_26VideoEncoderIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS7_14VideoCodecTypeERKNS_6StringERKNS_6VectorINSt3__14pairISF_SF_EELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEbbN7WebCore27VideoEncoderScalabilityModeEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2843;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20LibWebRTCCodecsProxy11EncodeFrameEN6WebKit20LibWebRTCCodecsProxyES8_FvNS_23ObjectIdentifierGenericINS7_26VideoEncoderIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS7_16SharedVideoFrameExNSt3__18optionalIyEEbONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B7118;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20LibWebRTCCodecsProxy11EncodeFrameEN6WebKit20LibWebRTCCodecsProxyES8_FvNS_23ObjectIdentifierGenericINS7_26VideoEncoderIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS7_16SharedVideoFrameExNSt3__18optionalIyEEbONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B7118;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20LibWebRTCCodecsProxy11EncodeFrameEN6WebKit20LibWebRTCCodecsProxyES8_FvNS_23ObjectIdentifierGenericINS7_26VideoEncoderIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS7_16SharedVideoFrameExNSt3__18optionalIyEEbONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2844;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20LibWebRTCCodecsProxy12FlushEncoderEN6WebKit20LibWebRTCCodecsProxyES8_FvNS_23ObjectIdentifierGenericINS7_26VideoEncoderIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B7140;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20LibWebRTCCodecsProxy12FlushEncoderEN6WebKit20LibWebRTCCodecsProxyES8_FvNS_23ObjectIdentifierGenericINS7_26VideoEncoderIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B7140;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages20LibWebRTCCodecsProxy12FlushEncoderEN6WebKit20LibWebRTCCodecsProxyES8_FvNS_23ObjectIdentifierGenericINS7_26VideoEncoderIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2845;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

void sub_19701DEB0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t URLFromString(const WTF::String *a1)
{
  if (a1 && *((_DWORD *)a1 + 1))
    return objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", WTF::StringImpl::operator NSString *());
  else
    return 0;
}

void sub_19701DF80(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_19701E008(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_19701E0A0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

void sub_19701E124(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_19701E1B4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

void sub_19701E240(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

void sub_19701E2CC(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

void sub_19701E358(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

void sub_19701E3E4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

void sub_19701E470(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

void sub_19701E5F8(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void sub_19701E81C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_19701EA6C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_19701EB9C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>::~pair(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    CFRelease(v3);
  return a1;
}

void sub_19701EF68(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WTF::HashMap<unsigned long long,PendingReply,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<PendingReply>,WTF::HashTableTraits>::add<PendingReply>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  char v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  const void *v21;
  uint64_t v22;
  const void *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,PendingReply>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,PendingReply>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,PendingReply,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<PendingReply>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = *a3 + ~(*a3 << 32);
  v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  v15 = v10 & (((v14 + ~(v14 << 27)) >> 31) ^ ((_DWORD)v14 + ~((_DWORD)v14 << 27)));
  v16 = (uint64_t *)(v8 + 32 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v26 = 0;
        else
          v26 = *(unsigned int *)(v8 - 4);
        v31 = 0;
        v32 = v8 + 32 * v26;
        goto LABEL_33;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = ((_DWORD)v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 32 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *(_OWORD *)v18 = 0u;
      *((_OWORD *)v18 + 1) = 0u;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v16 = v18;
    }
  }
  v20 = *a4;
  *a4 = 0;
  v21 = (const void *)v16[1];
  *v16 = v11;
  v16[1] = v20;
  if (v21)
    CFRelease(v21);
  v16[2] = a4[1];
  v22 = a4[2];
  a4[2] = 0;
  v23 = (const void *)v16[3];
  v16[3] = v22;
  if (v23)
    CFRelease(v23);
  v24 = *a2;
  if (*a2)
    v25 = *(_DWORD *)(v24 - 12) + 1;
  else
    v25 = 1;
  *(_DWORD *)(v24 - 12) = v25;
  v27 = *a2;
  if (*a2)
    v28 = *(_DWORD *)(v27 - 12);
  else
    v28 = 0;
  v29 = (*(_DWORD *)(v27 - 16) + v28);
  v30 = *(unsigned int *)(v27 - 4);
  if (v30 > 0x400)
  {
    if (v30 <= 2 * v29)
    {
LABEL_26:
      v16 = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,PendingReply>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,PendingReply>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,PendingReply,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<PendingReply>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(a2, v16);
      v27 = *a2;
      if (*a2)
        v30 = *(unsigned int *)(v27 - 4);
      else
        v30 = 0;
    }
  }
  else if (3 * v30 <= 4 * v29)
  {
    goto LABEL_26;
  }
  v32 = v27 + 32 * v30;
  v31 = 1;
LABEL_33:
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v32;
  *(_BYTE *)(a1 + 16) = v31;
}

void PendingReply::~PendingReply(PendingReply *this)
{
  const void *v2;
  const void *v3;

  v2 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)this;
  *(_QWORD *)this = 0;
  if (v3)
    CFRelease(v3);
}

void sub_19701F548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  uint64_t v12;
  const void *v13;
  const void *v14;
  const void *v15;
  unsigned int *v16;
  uint64_t v17;

  if (cf)
    CFRelease(cf);
  if (v16)
    WTF::ThreadSafeRefCounted<-[_WKRemoteObjectRegistry _invokeMethod:]::ReplyBlockCallChecker,(WTF::DestructionThread)2>::deref(v16);
  if (v15)
    CFRelease(v15);
  if (v14)
    CFRelease(v14);
  CFRelease(v13);
  std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>::~pair(v17 - 96);
  if (v12)
    CFRelease(*(CFTypeRef *)(v12 + 8));
  _Unwind_Resume(a1);
}

uint64_t replyBlockSignature(Protocol *a1, objc_selector *a2, uint64_t a3)
{
  uint64_t MethodTypeEncoding;
  void *v5;

  MethodTypeEncoding = _protocol_getMethodTypeEncoding();
  if ((MethodTypeEncoding || (MethodTypeEncoding = _protocol_getMethodTypeEncoding()) != 0)
    && (v5 = (void *)objc_msgSend(MEMORY[0x1E0C99DD8], "signatureWithObjCTypes:", MethodTypeEncoding)) != 0)
  {
    return objc_msgSend((id)objc_msgSend(v5, "_signatureForBlockAtArgumentIndex:", a3), "_typeString");
  }
  else
  {
    return 0;
  }
}

void sub_19701F76C(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_19701F860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e8_32c54_ZTSKZ41___WKRemoteObjectRegistry__invokeMethod__E3__1(_QWORD *a1, _QWORD *a2)
{
  const void *v4;
  CFTypeRef result;
  unsigned int *v6;
  unsigned int v7;

  v4 = (const void *)a2[4];
  a1[4] = v4;
  if (v4)
    CFRetain(v4);
  result = (CFTypeRef)a2[5];
  a1[5] = result;
  if (result)
    result = CFRetain(result);
  v6 = (unsigned int *)a2[7];
  a1[6] = a2[6];
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  a1[7] = v6;
  return result;
}

void sub_19701F8F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

void sub_19701F97C(_Unwind_Exception *exception_object)
{
  const void **v1;
  const void *v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c54_ZTSKZ41___WKRemoteObjectRegistry__invokeMethod__E3__1(_QWORD *a1)
{
  unsigned int *v2;
  const void *v3;
  const void *v4;

  v2 = (unsigned int *)a1[7];
  a1[7] = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<-[_WKRemoteObjectRegistry _invokeMethod:]::ReplyBlockCallChecker,(WTF::DestructionThread)2>::deref(v2);
  v3 = (const void *)a1[5];
  a1[5] = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[4];
  a1[4] = 0;
  if (v4)
    CFRelease(v4);
}

void sub_19701FBC0(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v2;
  const void *v3;

  if (v3)
    CFRelease(v3);
  if (v2)
    CFRelease(v2);
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

CFStringRef WKStringCopyCFString(const __CFAllocator *a1, void *a2)
{
  const UInt8 *v3;
  CFIndex v4;
  CFStringRef v5;
  WTF::StringImpl *v6;
  CFStringRef v7;
  WTF::StringImpl *v9;

  if (a2)
    objc_msgSend(a2, "_apiObject");
  WTF::String::isolatedCopy();
  if (!v9)
  {
    v3 = 0;
    v4 = 0;
    goto LABEL_5;
  }
  v3 = (const UInt8 *)*((_QWORD *)v9 + 1);
  v4 = *((unsigned int *)v9 + 1);
  if ((*((_BYTE *)v9 + 16) & 4) != 0)
  {
LABEL_5:
    v5 = CFStringCreateWithBytes(a1, v3, v4, 0x201u, 1u);
    goto LABEL_6;
  }
  v5 = CFStringCreateWithCharacters(a1, (const UniChar *)v3, v4);
LABEL_6:
  v7 = v5;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v6);
    else
      *(_DWORD *)v9 -= 2;
  }
  return v7;
}

void sub_19701FE6C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

id WKURLCreateWithCFURL(id a1)
{
  id v1;
  const __CFURL *v2;
  Class Class;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;
  WebKit *v8;

  v1 = a1;
  if (a1)
  {
    Class = object_getClass(a1);
    if (qword_1ECE721B0 != -1)
      dispatch_once(&qword_1ECE721B0, &__block_literal_global_261);
    if (Class == (Class)qword_1ECE721B8)
    {
      return *(id *)(objc_msgSend((id)CFRetain(v1), "_apiObject") + 8);
    }
    else
    {
      WTF::bytesAsString((WTF *)v1, v2);
      if (v7)
      {
        API::URL::create((API::URL *)&v7, &v8);
        if (v8)
          v1 = (id)*((_QWORD *)v8 + 1);
        else
          v1 = 0;
        v5 = v7;
        v7 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, v4);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return v1;
}

void sub_19701FF84(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

CFURLRef WKURLCopyCFURL(uint64_t a1, void *a2)
{
  uint64_t v2;
  const UInt8 *v3;
  CFIndex v4;
  void *v5;
  CFURLRef v6;
  WTF *v8;

  if (a2)
    v2 = objc_msgSend(a2, "_apiObject");
  else
    v2 = 0;
  if (!*(_QWORD *)(v2 + 16))
    return 0;
  WTF::String::utf8();
  if (v8)
  {
    v3 = (const UInt8 *)v8 + 16;
    v4 = *((_QWORD *)v8 + 1);
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v6 = CFURLCreateAbsoluteURLWithBytes(0, v3, v4, 0x8000100u, 0, 1u);
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::fastFree(v8, v5);
    else
      --*(_DWORD *)v8;
  }
  return v6;
}

void sub_197020064(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 1)
      WTF::fastFree(a10, a2);
    else
      --*(_DWORD *)a10;
  }
  _Unwind_Resume(exception_object);
}

void MethodInfo::~MethodInfo(MethodInfo *this, void *a2)
{
  const void *v3;
  void *v4;
  const void *v5;

  v3 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    CFRelease(v3);
  WTF::Vector<WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 24, a2);
  v5 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    CFRelease(v5);
  WTF::Vector<WTF::HashSet<void const*,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this, v4);
}

uint64_t _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS4_7HashSetIPKvNS4_11DefaultHashIS8_EENS4_10HashTraitsIS8_EENS4_15HashTableTraitsEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaRT_ENKUlSK_E_clISE_EESI_SK_EUlS8_S8_E_PS8_Lb0EEEvT1_SQ_T0_NS_15iterator_traitsISQ_E15difference_typeEb(uint64_t result, objc_class **a2, uint64_t a3, char a4)
{
  objc_class **v6;
  objc_class **v7;
  objc_class **v8;
  objc_class **v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  objc_class **v13;
  objc_class *v14;
  uint64_t v15;
  objc_class *v16;
  objc_class **v17;
  objc_class **v18;
  objc_class **v19;
  objc_class *v20;
  objc_class *v21;
  objc_class **v22;
  objc_class **v23;
  objc_class **v24;
  objc_class **v25;
  objc_class *v26;
  objc_class **v27;
  objc_class *v28;
  objc_class *v29;
  objc_class **v30;
  BOOL v31;
  objc_class *v32;
  objc_class **v33;
  objc_class *v34;
  objc_class **v35;
  objc_class *v36;
  objc_class *v37;
  objc_class **v38;
  objc_class *v39;
  objc_class *v40;
  objc_class **v41;
  objc_class *v42;
  objc_class **v43;
  objc_class **v44;
  objc_class *v45;
  objc_class *v46;
  objc_class *v47;
  objc_class *v48;
  objc_class *v49;
  objc_class *v50;
  objc_class **v51;
  BOOL v53;
  uint64_t v54;
  objc_class **v55;
  objc_class *v56;
  objc_class *v57;
  objc_class *v58;
  uint64_t v59;
  objc_class **v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  objc_class **v64;
  objc_class **v65;
  objc_class *v66;
  objc_class **v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  objc_class *v72;
  objc_class **v73;
  objc_class **v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  objc_class **v79;
  objc_class *v80;
  objc_class **v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  objc_class *v86;
  objc_class **v87;
  uint64_t v88;
  int64_t v89;
  int64_t v91;

  v6 = (objc_class **)result;
LABEL_2:
  v7 = a2 - 1;
  v8 = a2 - 2;
  v9 = v6;
  while (2)
  {
    v6 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*(a2 - 1), *v6);
        if ((_DWORD)result)
        {
          v42 = *v6;
          *v6 = *(a2 - 1);
          *(a2 - 1) = v42;
        }
        return result;
      case 3:
        return _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS4_7HashSetIPKvNS4_11DefaultHashIS8_EENS4_10HashTraitsIS8_EENS4_15HashTableTraitsEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaRT_ENKUlSK_E_clISE_EESI_SK_EUlS8_S8_E_PS8_EEjT1_SQ_SQ_T0_(v6, v6 + 1, v7);
      case 4:
        return _ZNSt3__17__sort4B8sn180100INS_17_ClassicAlgPolicyERZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS4_7HashSetIPKvNS4_11DefaultHashIS8_EENS4_10HashTraitsIS8_EENS4_15HashTableTraitsEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaRT_ENKUlSK_E_clISE_EESI_SK_EUlS8_S8_E_PS8_EEvT1_SQ_SQ_SQ_T0_(v6, v6 + 1, v6 + 2, v7);
      case 5:
        v43 = v6 + 2;
        v44 = v6 + 3;
        _ZNSt3__17__sort4B8sn180100INS_17_ClassicAlgPolicyERZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS4_7HashSetIPKvNS4_11DefaultHashIS8_EENS4_10HashTraitsIS8_EENS4_15HashTableTraitsEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaRT_ENKUlSK_E_clISE_EESI_SK_EUlS8_S8_E_PS8_EEvT1_SQ_SQ_SQ_T0_(v6, v6 + 1, v6 + 2, v6 + 3);
        result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*(a2 - 1), v6[3]);
        if ((_DWORD)result)
        {
          v45 = *v44;
          *v44 = *(a2 - 1);
          *(a2 - 1) = v45;
          result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*v44, *v43);
          if ((_DWORD)result)
          {
            v46 = *v43;
            v47 = *v44;
            *v43 = *v44;
            *v44 = v46;
            result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(v47, v6[1]);
            if ((_DWORD)result)
            {
              v49 = v6[1];
              v48 = v6[2];
              v50 = *v6;
              v6[1] = v48;
              v6[2] = v49;
              result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(v48, v50);
              if ((_DWORD)result)
                *(int8x16_t *)v6 = vextq_s8(*(int8x16_t *)v6, *(int8x16_t *)v6, 8uLL);
            }
          }
        }
        return result;
      default:
        if (v10 <= 191)
        {
          v51 = v6 + 1;
          v53 = v6 == a2 || v51 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v53)
            {
              v54 = 0;
              v55 = v6;
              do
              {
                v57 = *v55;
                v56 = v55[1];
                v55 = v51;
                result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(v56, v57);
                if ((_DWORD)result)
                {
                  v58 = *v51;
                  v59 = v54;
                  while (1)
                  {
                    *(objc_class **)((char *)v6 + v59 + 8) = *(objc_class **)((char *)v6 + v59);
                    if (!v59)
                      break;
                    result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(v58, *(objc_class **)((char *)v6 + v59 - 8));
                    v59 -= 8;
                    if ((result & 1) == 0)
                    {
                      v60 = (objc_class **)((char *)v6 + v59 + 8);
                      goto LABEL_86;
                    }
                  }
                  v60 = v6;
LABEL_86:
                  *v60 = v58;
                }
                v51 = v55 + 1;
                v54 += 8;
              }
              while (v55 + 1 != a2);
            }
          }
          else if (!v53)
          {
            v83 = 0;
            v84 = 1;
            while (1)
            {
              v85 = v84;
              result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*v51, v6[v83]);
              if ((_DWORD)result)
                break;
LABEL_128:
              v84 = v85 + 1;
              v51 = &v6[v85 + 1];
              v83 = v85;
              if (v51 == a2)
                return result;
            }
            v86 = *v51;
            while (1)
            {
              v87 = &v6[v83];
              v87[1] = *v87;
              if (v83 == -1)
                break;
              --v83;
              result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(v86, *(v87 - 1));
              if ((result & 1) == 0)
              {
                v6[v83 + 1] = v86;
                goto LABEL_128;
              }
            }
LABEL_130:
            __break(1u);
          }
          return result;
        }
        if (!a3)
        {
          if (v6 != a2)
          {
            v61 = (unint64_t)(v11 - 2) >> 1;
            v91 = v61;
            do
            {
              v62 = v61;
              if (v91 >= v61)
              {
                v63 = (2 * v61) | 1;
                v64 = &v6[v63];
                if (2 * v61 + 2 < v11
                  && _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*v64, v64[1]))
                {
                  ++v64;
                  v63 = 2 * v62 + 2;
                }
                v65 = &v6[v62];
                result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*v64, *v65);
                if ((result & 1) == 0)
                {
                  v89 = v62;
                  v66 = *v65;
                  do
                  {
                    v67 = v64;
                    *v65 = *v64;
                    if (v91 < v63)
                      break;
                    v68 = (2 * v63) | 1;
                    v64 = &v6[v68];
                    v69 = 2 * v63 + 2;
                    if (v69 < v11
                      && _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*v64, v64[1]))
                    {
                      ++v64;
                      v68 = v69;
                    }
                    result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*v64, v66);
                    v65 = v67;
                    v63 = v68;
                  }
                  while (!(_DWORD)result);
                  *v67 = v66;
                  v62 = v89;
                }
              }
              v61 = v62 - 1;
            }
            while (v62);
            v70 = (unint64_t)v10 >> 3;
            do
            {
              v71 = 0;
              v72 = *v6;
              v73 = v6;
              do
              {
                v74 = &v73[v71 + 1];
                v75 = (2 * v71) | 1;
                v76 = 2 * v71 + 2;
                if (v76 < v70)
                {
                  result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*v74, v73[v71 + 2]);
                  if ((_DWORD)result)
                  {
                    ++v74;
                    v75 = v76;
                  }
                }
                *v73 = *v74;
                v73 = v74;
                v71 = v75;
              }
              while (v75 <= (uint64_t)((unint64_t)(v70 - 2) >> 1));
              if (v74 == --a2)
              {
                *v74 = v72;
              }
              else
              {
                *v74 = *a2;
                *a2 = v72;
                v77 = (char *)v74 - (char *)v6 + 8;
                if (v77 >= 9)
                {
                  v78 = (((unint64_t)v77 >> 3) - 2) >> 1;
                  v79 = &v6[v78];
                  result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*v79, *v74);
                  if ((_DWORD)result)
                  {
                    v80 = *v74;
                    do
                    {
                      v81 = v79;
                      *v74 = *v79;
                      if (!v78)
                        break;
                      v78 = (v78 - 1) >> 1;
                      v79 = &v6[v78];
                      result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*v79, v80);
                      v74 = v81;
                    }
                    while ((result & 1) != 0);
                    *v81 = v80;
                  }
                }
              }
            }
            while (v70-- > 2);
          }
          return result;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &v6[(unint64_t)v11 >> 1];
        if ((unint64_t)v10 < 0x401)
        {
          result = _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS4_7HashSetIPKvNS4_11DefaultHashIS8_EENS4_10HashTraitsIS8_EENS4_15HashTableTraitsEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaRT_ENKUlSK_E_clISE_EESI_SK_EUlS8_S8_E_PS8_EEjT1_SQ_SQ_T0_(v13, v6, v7);
        }
        else
        {
          _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS4_7HashSetIPKvNS4_11DefaultHashIS8_EENS4_10HashTraitsIS8_EENS4_15HashTableTraitsEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaRT_ENKUlSK_E_clISE_EESI_SK_EUlS8_S8_E_PS8_EEjT1_SQ_SQ_T0_(v6, v13, v7);
          _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS4_7HashSetIPKvNS4_11DefaultHashIS8_EENS4_10HashTraitsIS8_EENS4_15HashTableTraitsEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaRT_ENKUlSK_E_clISE_EESI_SK_EUlS8_S8_E_PS8_EEjT1_SQ_SQ_T0_(v6 + 1, v13 - 1, v8);
          _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS4_7HashSetIPKvNS4_11DefaultHashIS8_EENS4_10HashTraitsIS8_EENS4_15HashTableTraitsEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaRT_ENKUlSK_E_clISE_EESI_SK_EUlS8_S8_E_PS8_EEjT1_SQ_SQ_T0_(v6 + 2, &v6[v12 + 1], a2 - 3);
          result = _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS4_7HashSetIPKvNS4_11DefaultHashIS8_EENS4_10HashTraitsIS8_EENS4_15HashTableTraitsEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaRT_ENKUlSK_E_clISE_EESI_SK_EUlS8_S8_E_PS8_EEjT1_SQ_SQ_T0_(v13 - 1, v13, &v6[v12 + 1]);
          v14 = *v6;
          *v6 = *v13;
          *v13 = v14;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*(v6 - 1), *v6);
          if ((result & 1) == 0)
          {
            v32 = *v6;
            result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*v6, *v7);
            v33 = v6 + 1;
            if ((result & 1) != 0)
            {
              do
              {
                if (v33 == a2)
                  goto LABEL_130;
                v34 = *v33++;
                result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(v32, v34);
              }
              while ((result & 1) == 0);
              v9 = v33 - 1;
            }
            else
            {
              do
              {
                v9 = v33;
                if (v33 >= a2)
                  break;
                ++v33;
                result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(v32, *v9);
              }
              while ((result & 1) == 0);
            }
            v35 = a2;
            if (v9 < a2)
            {
              v35 = a2;
              while (v35 != v6)
              {
                v36 = *--v35;
                result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(v32, v36);
                if ((result & 1) == 0)
                  goto LABEL_55;
              }
              goto LABEL_130;
            }
LABEL_55:
            if (v9 < v35)
            {
              v37 = *v9;
              *v9 = *v35;
              v38 = v9 + 1;
              *v35 = v37;
              while (v38 != a2)
              {
                v39 = *v38++;
                result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(v32, v39);
                if ((_DWORD)result)
                {
                  v9 = v38 - 1;
                  while (v35 != v6)
                  {
                    v40 = *--v35;
                    result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(v32, v40);
                    if ((result & 1) == 0)
                      goto LABEL_55;
                  }
                  goto LABEL_130;
                }
              }
              goto LABEL_130;
            }
            v41 = v9 - 1;
            if (v9 - 1 != v6)
              *v6 = *v41;
            a4 = 0;
            *v41 = v32;
            continue;
          }
        }
        v15 = 0;
        v16 = *v6;
        do
        {
          v17 = &v6[v15 + 1];
          if (v17 == a2)
            goto LABEL_130;
          result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*v17, v16);
          ++v15;
        }
        while ((result & 1) != 0);
        v18 = &v6[v15];
        v19 = a2;
        if (v15 != 1)
        {
          while (v19 != v6)
          {
            v20 = *--v19;
            result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(v20, v16);
            if ((_DWORD)result)
              goto LABEL_21;
          }
          goto LABEL_130;
        }
        v19 = a2;
        do
        {
          if (v18 >= v19)
            break;
          v21 = *--v19;
          result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(v21, v16);
        }
        while ((result & 1) == 0);
LABEL_21:
        if (v18 >= v19)
        {
          v30 = v18 - 1;
        }
        else
        {
          v88 = a3;
          v22 = v8;
          v23 = v7;
          v24 = &v6[v15];
          v25 = v19;
          do
          {
            v26 = *v24;
            *v24 = *v25;
            *v25 = v26;
            v27 = v24 + 1;
            do
            {
              if (v27 == a2)
                goto LABEL_130;
              v28 = *v27++;
              result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(v28, v16);
            }
            while ((result & 1) != 0);
            v24 = v27 - 1;
            do
            {
              if (v25 == v6)
                goto LABEL_130;
              v29 = *--v25;
              result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(v29, v16);
            }
            while (!(_DWORD)result);
          }
          while (v24 < v25);
          v30 = v27 - 2;
          v7 = v23;
          v8 = v22;
          a3 = v88;
        }
        if (v30 != v6)
          *v6 = *v30;
        *v30 = v16;
        if (v18 < v19)
        {
LABEL_37:
          result = _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS4_7HashSetIPKvNS4_11DefaultHashIS8_EENS4_10HashTraitsIS8_EENS4_15HashTableTraitsEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaRT_ENKUlSK_E_clISE_EESI_SK_EUlS8_S8_E_PS8_Lb0EEEvT1_SQ_T0_NS_15iterator_traitsISQ_E15difference_typeEb(v6, v30, a3, a4 & 1);
          a4 = 0;
          v9 = v30 + 1;
          continue;
        }
        v31 = _ZNSt3__127__insertion_sort_incompleteB8sn180100INS_17_ClassicAlgPolicyERZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS4_7HashSetIPKvNS4_11DefaultHashIS8_EENS4_10HashTraitsIS8_EENS4_15HashTableTraitsEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaRT_ENKUlSK_E_clISE_EESI_SK_EUlS8_S8_E_PS8_EEbT1_SQ_T0_(v6, v30);
        v9 = v30 + 1;
        result = _ZNSt3__127__insertion_sort_incompleteB8sn180100INS_17_ClassicAlgPolicyERZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS4_7HashSetIPKvNS4_11DefaultHashIS8_EENS4_10HashTraitsIS8_EENS4_15HashTableTraitsEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaRT_ENKUlSK_E_clISE_EESI_SK_EUlS8_S8_E_PS8_EEbT1_SQ_T0_(v30 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v31)
            continue;
          goto LABEL_37;
        }
        a2 = v30;
        if (!v31)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(objc_class *a1, objc_class *a2)
{
  const char *Name;
  const char *v4;
  void *v5;
  uint64_t v6;
  WTF *v7;
  WTF *v8;
  WTF *v10;
  WTF *v11;

  Name = class_getName(a1);
  WTF::CString::CString((WTF::CString *)&v11, Name);
  v4 = class_getName(a2);
  WTF::CString::CString((WTF::CString *)&v10, v4);
  v6 = WTF::operator<();
  v7 = v10;
  v10 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
      WTF::fastFree(v7, v5);
    else
      --*(_DWORD *)v7;
  }
  v8 = v11;
  v11 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::fastFree(v8, v5);
    else
      --*(_DWORD *)v8;
  }
  return v6;
}

void sub_197020914(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, WTF *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 1)
      WTF::fastFree(a9, a2);
    else
      --*(_DWORD *)a9;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 1)
      WTF::fastFree(a10, a2);
    else
      --*(_DWORD *)a10;
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS4_7HashSetIPKvNS4_11DefaultHashIS8_EENS4_10HashTraitsIS8_EENS4_15HashTableTraitsEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaRT_ENKUlSK_E_clISE_EESI_SK_EUlS8_S8_E_PS8_EEjT1_SQ_SQ_T0_(objc_class **a1, objc_class **a2, objc_class **a3)
{
  char v6;
  uint64_t result;
  objc_class *v8;
  objc_class *v9;
  objc_class *v10;
  objc_class *v11;

  v6 = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*a2, *a1);
  result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*a3, *a2);
  if ((v6 & 1) != 0)
  {
    v8 = *a1;
    if ((_DWORD)result)
    {
      *a1 = *a3;
      *a3 = v8;
    }
    else
    {
      *a1 = *a2;
      *a2 = v8;
      result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*a3, v8);
      if ((_DWORD)result)
      {
        v11 = *a2;
        *a2 = *a3;
        *a3 = v11;
      }
    }
  }
  else if ((_DWORD)result)
  {
    v9 = *a2;
    *a2 = *a3;
    *a3 = v9;
    result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*a2, *a1);
    if ((_DWORD)result)
    {
      v10 = *a1;
      *a1 = *a2;
      *a2 = v10;
    }
  }
  return result;
}

BOOL _ZNSt3__127__insertion_sort_incompleteB8sn180100INS_17_ClassicAlgPolicyERZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS4_7HashSetIPKvNS4_11DefaultHashIS8_EENS4_10HashTraitsIS8_EENS4_15HashTableTraitsEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaRT_ENKUlSK_E_clISE_EESI_SK_EUlS8_S8_E_PS8_EEbT1_SQ_T0_(objc_class **a1, objc_class **a2)
{
  uint64_t v4;
  _BOOL8 result;
  objc_class *v6;
  objc_class **v7;
  objc_class **v8;
  uint64_t v9;
  int v10;
  objc_class *v11;
  uint64_t v12;
  objc_class **v13;
  objc_class **v14;
  objc_class **v15;
  objc_class **v16;
  objc_class *v17;
  objc_class *v18;
  objc_class *v19;
  objc_class *v20;
  objc_class *v21;
  objc_class *v22;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (_ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*(a2 - 1), *a1))
      {
        v6 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v6;
      }
      return 1;
    case 3:
      _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS4_7HashSetIPKvNS4_11DefaultHashIS8_EENS4_10HashTraitsIS8_EENS4_15HashTableTraitsEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaRT_ENKUlSK_E_clISE_EESI_SK_EUlS8_S8_E_PS8_EEjT1_SQ_SQ_T0_(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      _ZNSt3__17__sort4B8sn180100INS_17_ClassicAlgPolicyERZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS4_7HashSetIPKvNS4_11DefaultHashIS8_EENS4_10HashTraitsIS8_EENS4_15HashTableTraitsEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaRT_ENKUlSK_E_clISE_EESI_SK_EUlS8_S8_E_PS8_EEvT1_SQ_SQ_SQ_T0_(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v15 = a1 + 2;
      v16 = a1 + 3;
      _ZNSt3__17__sort4B8sn180100INS_17_ClassicAlgPolicyERZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS4_7HashSetIPKvNS4_11DefaultHashIS8_EENS4_10HashTraitsIS8_EENS4_15HashTableTraitsEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaRT_ENKUlSK_E_clISE_EESI_SK_EUlS8_S8_E_PS8_EEvT1_SQ_SQ_SQ_T0_(a1, a1 + 1, a1 + 2, a1 + 3);
      if (_ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*(a2 - 1), a1[3]))
      {
        v17 = *v16;
        *v16 = *(a2 - 1);
        *(a2 - 1) = v17;
        if (_ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*v16, *v15))
        {
          v18 = *v15;
          v19 = *v16;
          *v15 = *v16;
          *v16 = v18;
          if (_ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(v19, a1[1]))
          {
            v21 = a1[1];
            v20 = a1[2];
            v22 = *a1;
            a1[1] = v20;
            a1[2] = v21;
            if (_ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(v20, v22))*(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
          }
        }
      }
      return 1;
    default:
      v7 = a1 + 2;
      _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS4_7HashSetIPKvNS4_11DefaultHashIS8_EENS4_10HashTraitsIS8_EENS4_15HashTableTraitsEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaRT_ENKUlSK_E_clISE_EESI_SK_EUlS8_S8_E_PS8_EEjT1_SQ_SQ_T0_(a1, a1 + 1, a1 + 2);
      v8 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    if (_ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*v8, *v7))
    {
      v11 = *v8;
      v12 = v9;
      while (1)
      {
        v13 = (objc_class **)((char *)a1 + v12);
        *(objc_class **)((char *)a1 + v12 + 24) = *(objc_class **)((char *)a1 + v12 + 16);
        if (v12 == -16)
          break;
        v12 -= 8;
        if ((_ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(v11, v13[1]) & 1) == 0)
        {
          v14 = (objc_class **)((char *)a1 + v12 + 24);
          goto LABEL_13;
        }
      }
      v14 = a1;
LABEL_13:
      *v14 = v11;
      if (++v10 == 8)
        return v8 + 1 == a2;
    }
    v7 = v8;
    v9 += 8;
    if (++v8 == a2)
      return 1;
  }
}

uint64_t _ZNSt3__17__sort4B8sn180100INS_17_ClassicAlgPolicyERZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS4_7HashSetIPKvNS4_11DefaultHashIS8_EENS4_10HashTraitsIS8_EENS4_15HashTableTraitsEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaRT_ENKUlSK_E_clISE_EESI_SK_EUlS8_S8_E_PS8_EEvT1_SQ_SQ_SQ_T0_(objc_class **a1, objc_class **a2, objc_class **a3, objc_class **a4)
{
  uint64_t result;
  objc_class *v9;
  objc_class *v10;
  objc_class *v11;

  _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS4_7HashSetIPKvNS4_11DefaultHashIS8_EENS4_10HashTraitsIS8_EENS4_15HashTableTraitsEEELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaRT_ENKUlSK_E_clISE_EESI_SK_EUlS8_S8_E_PS8_EEjT1_SQ_SQ_T0_(a1, a2, a3);
  result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*a4, *a3);
  if ((_DWORD)result)
  {
    v9 = *a3;
    *a3 = *a4;
    *a4 = v9;
    result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*a3, *a2);
    if ((_DWORD)result)
    {
      v10 = *a2;
      *a2 = *a3;
      *a3 = v10;
      result = _ZZZZ44___WKRemoteObjectInterface_debugDescription_ENK3__0clIN3WTF6VectorINS1_7HashSetIPKvNS1_11DefaultHashIS5_EENS1_10HashTraitsIS5_EENS1_15HashTableTraitsEEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEEEDaRT_ENKUlSH_E_clISB_EESF_SH_ENKUlS5_S5_E_clES5_S5_(*a2, *a1);
      if ((_DWORD)result)
      {
        v11 = *a1;
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

void PendingReply::PendingReply(PendingReply *this, CFTypeRef cf, objc_selector *a3, objc_object *a4)
{
  *(_QWORD *)this = cf;
  if (cf)
    CFRetain(cf);
  *((_QWORD *)this + 1) = a3;
  *((_QWORD *)this + 2) = -[objc_object copy](a4, "copy");
}

void sub_197020D10(_Unwind_Exception *exception_object)
{
  const void **v1;
  const void *v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZL12wkNSURLClassv_block_invoke()
{
  uint64_t result;

  result = objc_opt_class();
  qword_1ECE721B8 = result;
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  const void *v12;
  _QWORD *v13;
  const void *v14;
  const void **v15;
  const void *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  const void *v19;
  uint64_t v20;

  v4 = *(WTF::StringImpl **)a2;
  if (a1)
    v5 = *(_DWORD *)(a1 - 8);
  else
    v5 = 0;
  v6 = *((_DWORD *)v4 + 4);
  if (v6 >= 0x100)
    v7 = v6 >> 8;
  else
    v7 = WTF::StringImpl::hashSlowCase(v4);
  v8 = 0;
  do
  {
    v9 = v7 & v5;
    v10 = (WTF::StringImpl **)(a1 + 24 * (v7 & v5));
    v7 = ++v8 + (v7 & v5);
  }
  while (*v10);
  v11 = a1 + 24 * v9;
  v14 = *(const void **)(v11 + 16);
  v13 = (_QWORD *)(v11 + 16);
  v12 = v14;
  v15 = (const void **)(v13 - 1);
  *v13 = 0;
  if (v14)
    CFRelease(v12);
  v16 = *v15;
  *v15 = 0;
  if (v16)
    CFRelease(v16);
  v17 = *v10;
  *v10 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  *v10 = v18;
  v19 = (const void *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  *v15 = v19;
  v20 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  *v13 = v20;
  return v10;
}

uint64_t *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,PendingReply>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,PendingReply>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,PendingReply,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<PendingReply>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,PendingReply>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,PendingReply>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,PendingReply,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<PendingReply>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,PendingReply>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,PendingReply>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,PendingReply,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<PendingReply>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  const void *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t *v27;
  const void *v28;
  const void *v29;
  uint64_t v30;
  const void **v31;
  __int128 v32;
  const void *v33;
  const void *v34;
  const void *v35;
  uint64_t *result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 32 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v4 + 32 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          v23 = v19 & ((v22 >> 31) ^ v22);
          v24 = 1;
          do
          {
            v25 = v23;
            v26 = *(_QWORD *)(v18 + 32 * v23);
            v23 = (v23 + v24++) & v19;
          }
          while (v26);
          v27 = (uint64_t *)(v18 + 32 * v25);
          v28 = (const void *)v27[3];
          v27[3] = 0;
          if (v28)
            CFRelease(v28);
          v29 = (const void *)v27[1];
          v27[1] = 0;
          if (v29)
            CFRelease(v29);
          *v27 = *v13;
          v30 = v4 + 32 * v11;
          v32 = *(_OWORD *)(v30 + 8);
          v31 = (const void **)(v30 + 8);
          *v31 = 0;
          *(_OWORD *)(v27 + 1) = v32;
          v33 = v31[2];
          v31[2] = 0;
          v27[3] = (uint64_t)v33;
          v34 = v31[2];
          v31[2] = 0;
          if (v34)
            CFRelease(v34);
          v35 = *v31;
          *v31 = 0;
          if (v35)
            CFRelease(v35);
          if (v13 == a3)
            v12 = v27;
        }
        else
        {
          v15 = v4 + 32 * v11;
          v16 = *(const void **)(v15 + 24);
          *(_QWORD *)(v15 + 24) = 0;
          if (v16)
            CFRelease(v16);
          v17 = *(const void **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v17)
            CFRelease(v17);
        }
      }
      ++v11;
    }
    while (v11 != v5);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

_QWORD *WTF::HashMap<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(_QWORD *a1, uint64_t a2, WTF::StringImpl **a3)
{
  WTF **v4;
  _QWORD v6[2];

  v4 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>>,WTF::String>(a2, a3, (const WTF::StringImpl *)a3);
  if (v4)
    return std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>::pair[abi:sn180100]<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>,(void *)0>(a1, (uint64_t)(v4 + 1));
  v6[0] = 0;
  v6[1] = 0;
  *a1 = 0;
  a1[1] = 0;
  return (_QWORD *)std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>::~pair((uint64_t)v6);
}

WTF **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>>,WTF::String>(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  unsigned int v5;
  unsigned int v6;
  int v7;
  int i;
  int v9;
  WTF **v10;
  WTF *v11;

  if (a1)
  {
    v5 = *(_DWORD *)(a1 - 8);
    v6 = *((_DWORD *)*a2 + 4);
    if (v6 >= 0x100)
      v7 = v6 >> 8;
    else
      v7 = WTF::StringImpl::hashSlowCase(*a2);
    for (i = 0; ; v7 = i + v9)
    {
      v9 = v7 & v5;
      v10 = (WTF **)(a1 + 24 * (v7 & v5));
      v11 = *v10;
      if (!*v10)
        break;
      if (v11 != (WTF *)-1 && (WTF::equal(v11, *a2, a3) & 1) != 0)
        return v10;
      ++i;
    }
  }
  return 0;
}

_QWORD *std::pair<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>>::pair[abi:sn180100]<WTF::RetainPtr<objc_object *>,WTF::RetainPtr<_WKRemoteObjectInterface>,(void *)0>(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  const void *v5;

  v4 = *(const void **)a2;
  *a1 = *(_QWORD *)a2;
  if (v4)
    CFRetain(v4);
  v5 = *(const void **)(a2 + 8);
  a1[1] = v5;
  if (v5)
    CFRetain(v5);
  return a1;
}

void sub_1970211DC(_Unwind_Exception *exception_object)
{
  const void **v1;
  const void *v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

void sub_197021274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_197021334(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,PendingReply>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,PendingReply>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,PendingReply,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<PendingReply>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::find<WTF::IdentityHashTranslator<WTF::HashMap<unsigned long long,PendingReply,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<PendingReply>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned long long>>,unsigned long long>(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    v6 = v2 & ((v5 >> 31) ^ v5);
    v7 = *(_QWORD *)(result + 32 * v6);
    if (v7 == a2)
    {
LABEL_6:
      result += 32 * v6;
    }
    else
    {
      v8 = 1;
      while (v7)
      {
        v6 = ((_DWORD)v6 + v8) & v2;
        v7 = *(_QWORD *)(result + 32 * v6);
        ++v8;
        if (v7 == a2)
          goto LABEL_6;
      }
      result += 32 * *(unsigned int *)(result - 4);
    }
  }
  return result;
}

void WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,PendingReply>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,PendingReply>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,PendingReply,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<PendingReply>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::remove(uint64_t *a1, _QWORD *a2)
{
  const void *v4;
  const void *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  *a2 = -1;
  v4 = (const void *)a2[3];
  a2[3] = 0;
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a2[1];
  a2[1] = 0;
  if (v5)
    CFRelease(v5);
  ++*(_DWORD *)(*a1 - 16);
  v6 = *a1;
  if (*a1)
    v7 = *(_DWORD *)(v6 - 12) - 1;
  else
    v7 = -1;
  *(_DWORD *)(v6 - 12) = v7;
  v8 = *a1;
  if (*a1)
  {
    v9 = 6 * *(_DWORD *)(v8 - 12);
    v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
      WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,PendingReply>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,PendingReply>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,PendingReply,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<PendingReply>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v10 >> 1, 0);
  }
}

void WebKit::RemoteAudioDestinationManager::didReceiveMessage(WebKit::RemoteAudioDestinationManager *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  unint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  _QWORD *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  double v29;
  unint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  unsigned int *v34;
  unint64_t v35;
  unsigned int v37;
  unsigned int v38;
  unint64_t v39;
  BOOL v40;
  unsigned int *v41;
  unsigned int v42;
  unint64_t v43;
  BOOL v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  WTF::StringImpl *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  WTF::StringImpl *v68;
  __int128 v69;
  _BYTE v70[4];
  int v71;
  _QWORD v72[2];
  char v73;
  WTF::StringImpl *v74;
  unsigned __int8 v75;
  _BYTE v76[4];
  int v77;
  unsigned __int8 v78;
  _QWORD *v79;
  __int128 v80;
  char v81;

  switch(*((_WORD *)a3 + 25))
  {
    case 0x2A6:
      v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v7)
      {
        v8 = v6;
        IPC::Decoder::decode<WebKit::ConsumerSharedCARingBufferHandle>(a3, (uint64_t)&v79);
        if (v81)
        {
          v65 = v8;
          WTF::MachSendRight::MachSendRight();
          v69 = v80;
          v70[0] = 1;
          if (v81)
            WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v79);
LABEL_6:
          WebKit::RemoteAudioDestinationManager::audioSamplesStorageChanged((uint64_t)this, v65);
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v68);
          return;
        }
      }
      LOBYTE(v65) = 0;
      v70[0] = 0;
      v52 = *(_QWORD *)a3;
      v53 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v54 = *((_QWORD *)a3 + 3);
      if (v54)
      {
        if (v53)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v54 + 16))(v54, v52);
          if (v70[0])
            goto LABEL_6;
        }
      }
      return;
    case 0x2A7:
      v26 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v27)
      {
        LOBYTE(v65) = 0;
        v73 = 0;
        goto LABEL_60;
      }
      v28 = v26;
      IPC::Decoder::decode<WTF::String>((uint64_t *)a3, &v74);
      if (!v75)
      {
        LOBYTE(v65) = 0;
        v73 = 0;
        goto LABEL_72;
      }
      v30 = *((_QWORD *)a3 + 1);
      v31 = *(WTF::StringImpl **)a3;
      v32 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v30 < v32 || v30 - v32 <= 3)
      {
        v49 = 0;
        v48 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v61 = *((_QWORD *)a3 + 3);
        if (v61)
        {
          if (v30)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v61 + 16))(v61);
            v48 = *(_QWORD *)a3;
            v49 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v49 = 0;
            v48 = 0;
          }
        }
LABEL_65:
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v47 = *((_QWORD *)a3 + 3);
        if (!v47)
          goto LABEL_66;
LABEL_80:
        if (v49)
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v47 + 16))(v47, v48, v49);
        goto LABEL_66;
      }
      v34 = (unsigned int *)((char *)v31 + v32);
      *((_QWORD *)a3 + 2) = v34 + 1;
      if (!v31)
      {
        v49 = v30;
        v48 = 0;
        goto LABEL_65;
      }
      v35 = (((unint64_t)v34 + 7) & 0xFFFFFFFFFFFFFFFCLL) - (_QWORD)v31;
      if (v30 < v35 || v30 - v35 <= 3)
        goto LABEL_54;
      v37 = *v34;
      *((_QWORD *)a3 + 2) = (((unint64_t)v34 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
      v38 = *(_DWORD *)(((unint64_t)v34 + 7) & 0xFFFFFFFFFFFFFFFCLL);
      v39 = (((((unint64_t)v34 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - (_QWORD)v31;
      v40 = v30 >= v39 && v30 - v39 > 3;
      if (!v40
        || ((v41 = (unsigned int *)((char *)v31 + v39),
             *((_QWORD *)a3 + 2) = v41 + 1,
             v42 = *v41,
             v43 = (((unint64_t)v41 + 7) & 0xFFFFFFFFFFFFFFFCLL) - (_QWORD)v31,
             v30 >= v43)
          ? (v44 = v30 - v43 > 3)
          : (v44 = 0),
            !v44))
      {
LABEL_54:
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v55 = *((_QWORD *)a3 + 3);
        if (v55)
        {
          if (v30)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v55 + 16))(v55);
            v31 = *(WTF::StringImpl **)a3;
            v56 = *((_QWORD *)a3 + 1);
            v57 = *((_QWORD *)a3 + 3);
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            if (v57)
            {
              if (v56)
                (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v57 + 16))(v57, v31);
            }
          }
        }
        goto LABEL_66;
      }
      v45 = (unsigned int *)((char *)v31 + v43);
      v46 = *v45;
      *((_QWORD *)a3 + 2) = v45 + 1;
      IPC::Decoder::decode<IPC::Semaphore>(a3, v76);
      if (!v78)
      {
LABEL_66:
        LOBYTE(v65) = 0;
        v73 = 0;
        goto LABEL_67;
      }
      IPC::Decoder::decode<WebCore::SharedMemoryHandle>(a3, (uint64_t)&v79);
      if (BYTE8(v80))
      {
        v49 = v75;
        if (!v75 || (v49 = v78) == 0)
        {
          __break(1u);
          goto LABEL_80;
        }
        v50 = v74;
        v74 = 0;
        v65 = v28;
        v68 = v50;
        *(_QWORD *)&v69 = __PAIR64__(v38, v37);
        *((_QWORD *)&v69 + 1) = __PAIR64__(v46, v42);
        WTF::MachSendRight::MachSendRight();
        v51 = v77;
        v77 = 0;
        v71 = v51;
        WTF::MachSendRight::MachSendRight();
        v72[1] = v80;
        v73 = 1;
        if (BYTE8(v80))
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v79);
      }
      else
      {
        LOBYTE(v65) = 0;
        v73 = 0;
      }
      if (v78)
      {
        IPC::Semaphore::destroy((IPC::Semaphore *)v76);
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v76);
      }
LABEL_67:
      if (v75)
      {
        v62 = v74;
        v74 = 0;
        if (v62)
        {
          if (*(_DWORD *)v62 == 2)
            WTF::StringImpl::destroy(v62, v31);
          else
            *(_DWORD *)v62 -= 2;
        }
      }
LABEL_72:
      if (v73)
        goto LABEL_73;
LABEL_60:
      v58 = *(_QWORD *)a3;
      v59 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v60 = *((_QWORD *)a3 + 3);
      if (!v60)
        return;
      if (!v59)
        return;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v60 + 16))(v60, v58);
      if (!v73)
        return;
LABEL_73:
      LODWORD(v29) = DWORD2(v69);
      WebKit::RemoteAudioDestinationManager::createAudioDestination(this, v65, v29, *((float *)&v69 + 3), (uint64_t)&v68, v69, SDWORD1(v69), (uint64_t)v70);
      if (v73)
      {
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v72);
        IPC::Semaphore::destroy((IPC::Semaphore *)v70);
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v70);
        v64 = v68;
        v68 = 0;
        if (v64)
        {
          if (*(_DWORD *)v64 == 2)
            WTF::StringImpl::destroy(v64, v63);
          else
            *(_DWORD *)v64 -= 2;
        }
      }
      return;
    case 0x2A8:
      v16 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v17)
        WebKit::RemoteAudioDestinationManager::deleteAudioDestination((uint64_t *)this, v16);
      return;
    case 0x2A9:
      v18 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v19)
      {
        v20 = v18;
        v21 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
        if (v22)
        {
          v67 = v21;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v68, a2);
          v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v23 = off_1E34B7200;
          v23[1] = v67;
          v24 = v68;
          v68 = 0;
          v23[2] = v24;
          v79 = v23;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v68);
          WebKit::RemoteAudioDestinationManager::startAudioDestination((uint64_t *)this, v20, (uint64_t *)&v79);
          goto LABEL_15;
        }
      }
      return;
    case 0x2AA:
      v9 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v10)
      {
        v11 = v9;
        v12 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
        if (v13)
        {
          v66 = v12;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v68, a2);
          v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v14 = off_1E34B7228;
          v14[1] = v66;
          v15 = v68;
          v68 = 0;
          v14[2] = v15;
          v79 = v14;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v68);
          WebKit::RemoteAudioDestinationManager::stopAudioDestination((uint64_t *)this, v11, (uint64_t *)&v79);
LABEL_15:
          v25 = (uint64_t)v79;
          v79 = 0;
          if (v25)
            (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
        }
      }
      return;
    default:
      return;
  }
}

unsigned __int8 *WebKit::RemoteAudioHardwareListener::didReceiveMessage(WebKit::RemoteAudioHardwareListener *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  unsigned __int8 **v5;
  unsigned __int8 *result;
  void *v7;
  int v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  char v12;

  v5 = (unsigned __int8 **)((char *)this + 72);
  result = (unsigned __int8 *)WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)this + 9);
  v8 = *((unsigned __int16 *)a3 + 25);
  if (v8 == 683)
  {
    v9 = 1;
    v10 = 2;
    goto LABEL_6;
  }
  if (v8 == 685)
  {
    result = (unsigned __int8 *)IPC::Decoder::decode<std::tuple<unsigned long,unsigned long>>((uint64_t *)a3, (uint64_t)&v11);
    if (v12)
    {
      *(_OWORD *)((char *)this + 24) = v11;
      result = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
    }
LABEL_9:
    if (!this)
      return result;
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>(*v5, v7);
  }
  if (v8 != 684)
    goto LABEL_9;
  v9 = 2;
  v10 = 3;
LABEL_6:
  *((_DWORD *)this + 4) = v9;
  (*(void (**)(void))(**((_QWORD **)this + 1) + 8 * v10))();
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>(*v5, v7);
}

unsigned __int8 *`non-virtual thunk to'WebKit::RemoteAudioHardwareListener::didReceiveMessage(WebKit::RemoteAudioHardwareListener *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  return WebKit::RemoteAudioHardwareListener::didReceiveMessage((WebKit::RemoteAudioHardwareListener *)((char *)this - 56), a2, a3);
}

WebKit::RemoteAudioSession *WebKit::RemoteAudioSession::didReceiveMessage(WebKit::RemoteAudioSession *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v3;
  int v4;
  WTF::StringImpl *v5;
  _BYTE v6[80];

  v3 = (uint64_t)this;
  v4 = *((unsigned __int16 *)a3 + 25);
  switch(v4)
  {
    case 700:
      return (WebKit::RemoteAudioSession *)WebKit::RemoteAudioSession::beginInterruptionRemote(this);
    case 702:
      this = (WebKit::RemoteAudioSession *)IPC::Decoder::decode<std::tuple<WebCore::AudioSession::MayResume>>((uint64_t *)a3);
      if ((unsigned __int16)this >= 0x100u)
        return (WebKit::RemoteAudioSession *)WebKit::RemoteAudioSession::endInterruptionRemote(v3);
      break;
    case 701:
      IPC::Decoder::decode<std::tuple<WebKit::RemoteAudioSessionConfiguration>>((uint64_t *)a3, (uint64_t)v6);
      if (v6[72])
        WebKit::RemoteAudioSession::configurationChanged(v3, (uint64_t)v6);
      return (WebKit::RemoteAudioSession *)std::__optional_destruct_base<WebKit::RemoteAudioSessionConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v5);
  }
  return this;
}

WebKit::RemoteAudioSession *`non-virtual thunk to'WebKit::RemoteAudioSession::didReceiveMessage(WebKit::RemoteAudioSession *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  return WebKit::RemoteAudioSession::didReceiveMessage((WebKit::RemoteAudioSession *)((char *)this - 72), a2, a3);
}

uint64_t WebKit::RemoteAudioSessionProxy::didReceiveMessage(uint64_t this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v4;
  int v5;
  unsigned __int16 v6;
  WebCore::AudioSession *v7;
  uint64_t v8;
  char v9;
  WebKit::RemoteAudioSessionProxyManager *v10;
  WebKit::RemoteAudioSessionProxyManager *v11;
  WTF::StringImpl *v12;
  WebKit::RemoteAudioSessionProxyManager *v13;
  WTF::StringImpl *v14;
  char v15;

  v4 = this;
  v5 = *((unsigned __int16 *)a3 + 25);
  switch(*((_WORD *)a3 + 25))
  {
    case 0x2B5:
      this = IPC::Decoder::decode<std::tuple<WebCore::AudioSessionCategory,WebCore::AudioSessionMode,WebCore::RouteSharingPolicy>>((uint64_t *)a3);
      if (BYTE3(this))
        this = (uint64_t)WebKit::RemoteAudioSessionProxy::setCategory((WebKit::RemoteAudioSessionProxy *)v4, this, BYTE1(this), BYTE2(this));
      break;
    case 0x2B6:
      this = IPC::Decoder::decode<std::tuple<std::optional<BOOL>>>((uint64_t *)a3);
      if ((this & 0xFF0000) != 0)
      {
        v6 = this;
        *(_BYTE *)(v4 + 58) = 1;
        v7 = (WebCore::AudioSession *)WebKit::RemoteAudioSessionProxy::audioSessionManager((WebKit::RemoteAudioSessionProxy *)v4);
        v8 = WebCore::AudioSession::sharedSession(v7);
        this = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 144))(v8, v6);
      }
      break;
    case 0x2B7:
      this = IPC::Decoder::decode<std::tuple<double>>((uint64_t *)a3);
      if (v9)
      {
        *(_QWORD *)(v4 + 48) = this;
        v10 = (WebKit::RemoteAudioSessionProxyManager *)WebKit::RemoteAudioSessionProxy::audioSessionManager((WebKit::RemoteAudioSessionProxy *)v4);
        this = (uint64_t)WebKit::RemoteAudioSessionProxyManager::updatePreferredBufferSizeForProcess(v10);
      }
      break;
    case 0x2BA:
      this = WebKit::RemoteAudioSessionProxy::allowTestOnlyIPC((WebKit::RemoteAudioSessionProxy *)this);
      if ((this & 1) == 0)
      {
        v5 = *((unsigned __int16 *)a3 + 25);
        goto LABEL_11;
      }
      this = (uint64_t)WebKit::RemoteAudioSessionProxy::triggerBeginInterruptionForTesting((WebKit::RemoteAudioSessionProxy *)v4);
      break;
    default:
LABEL_11:
      if (v5 == 699)
      {
        this = WebKit::RemoteAudioSessionProxy::allowTestOnlyIPC((WebKit::RemoteAudioSessionProxy *)v4);
        if ((_DWORD)this)
          return (uint64_t)WebKit::RemoteAudioSessionProxy::triggerEndInterruptionForTesting((WebKit::RemoteAudioSessionProxy *)v4);
        v5 = *((unsigned __int16 *)a3 + 25);
      }
      switch(v5)
      {
        case 691:
          this = WebKit::RemoteAudioSessionProxy::beginInterruptionRemote((WebKit::RemoteAudioSessionProxy *)v4);
          break;
        case 692:
          this = IPC::Decoder::decode<std::tuple<WebCore::AudioSession::MayResume>>((uint64_t *)a3);
          if ((unsigned __int16)this >= 0x100u)
            this = WebKit::RemoteAudioSessionProxy::endInterruptionRemote((WebKit::RemoteAudioSessionProxy *)v4, this != 0);
          break;
        case 696:
          this = (uint64_t)IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)&v14);
          if (v15)
          {
            WTF::String::operator=((WTF::StringImpl **)(v4 + 40), (WTF::StringImpl *)&v14);
            v11 = (WebKit::RemoteAudioSessionProxyManager *)WebKit::RemoteAudioSessionProxy::audioSessionManager((WebKit::RemoteAudioSessionProxy *)v4);
            this = (uint64_t)WebKit::RemoteAudioSessionProxyManager::updateSpatialExperience(v11);
            if (v15)
            {
              this = (uint64_t)v14;
              v14 = 0;
              if (this)
              {
                if (*(_DWORD *)this == 2)
                  this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v12);
                else
                  *(_DWORD *)this -= 2;
              }
            }
          }
          break;
        case 697:
          this = IPC::Decoder::decode<std::tuple<WebCore::HTTPCookieAcceptPolicy>>((uint64_t *)a3);
          if ((unsigned __int16)this >= 0x100u)
          {
            *(_BYTE *)(v4 + 35) = this;
            v13 = (WebKit::RemoteAudioSessionProxyManager *)WebKit::RemoteAudioSessionProxy::audioSessionManager((WebKit::RemoteAudioSessionProxy *)v4);
            this = (uint64_t)WebKit::RemoteAudioSessionProxyManager::updateSpatialExperience(v13);
          }
          break;
        default:
          return this;
      }
      break;
  }
  return this;
}

BOOL WebKit::RemoteAudioSessionProxy::didReceiveSyncMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  return *(_WORD *)(a3 + 50) == 3535
      && IPC::handleMessageSynchronous<Messages::RemoteAudioSessionProxy::TryToSetActive,WebKit::RemoteAudioSessionProxy,WebKit::RemoteAudioSessionProxy,void ()(BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, BOOL, _QWORD **))WebKit::RemoteAudioSessionProxy::tryToSetActive, 0);
}

BOOL IPC::handleMessageSynchronous<Messages::RemoteAudioSessionProxy::TryToSetActive,WebKit::RemoteAudioSessionProxy,WebKit::RemoteAudioSessionProxy,void ()(BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, BOOL, _QWORD **), uint64_t a6)
{
  unsigned __int16 v11;
  unsigned int v12;
  char v13;
  IPC::Encoder *v14;
  _QWORD *v15;
  unsigned __int8 **v16;
  _QWORD *v17;
  _QWORD *v18;
  IPC::Encoder *v20;
  unsigned __int8 **v21[2];
  _QWORD *v22;

  v11 = IPC::Decoder::decode<std::tuple<BOOL>>(a2);
  v12 = v11;
  if (v11 >= 0x100u)
  {
    v13 = v11;
    v14 = *a3;
    *a3 = 0;
    v20 = v14;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v21, a1);
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v15 = off_1E34B7250;
    v15[1] = v20;
    v16 = v21[0];
    v21[0] = 0;
    v15[2] = v16;
    v22 = v15;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v21);
    v17 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, BOOL, _QWORD **))(*v17 + a5);
    a5(v17, v13 != 0, &v22);
    v18 = v22;
    v22 = 0;
    if (v18)
      (*(void (**)(_QWORD *))(*v18 + 8))(v18);
  }
  return v12 > 0xFF;
}

void WebKit::RemoteAudioSourceProviderManager::didReceiveMessage(WebKit::RemoteAudioSourceProviderManager *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  int v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[24];
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  int v39;
  char v40;
  char v41[8];
  __int128 v42;
  char v43;
  char v44[8];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  int v49;
  char v50;

  v5 = *((unsigned __int16 *)a3 + 25);
  if (v5 == 703)
  {
    v11 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
    if (!v12)
    {
LABEL_39:
      v26 = *(_QWORD *)a3;
      v27 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v28 = *((_QWORD *)a3 + 3);
      if (v28 && v27)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v26);
      return;
    }
    v10 = *((_QWORD *)a3 + 1);
    v13 = *(_QWORD *)a3;
    v14 = ((*((_QWORD *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a3;
    if (v10 >= v14 && v10 - v14 > 7)
    {
      v16 = v13 + v14;
      *((_QWORD *)a3 + 2) = v16 + 8;
      if (v13)
      {
        v17 = ((v16 + 15) & 0xFFFFFFFFFFFFFFF8) - v13;
        if (v10 >= v17 && v10 - v17 > 7)
        {
          *((_QWORD *)a3 + 2) = ((v16 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
          WebKit::RemoteAudioSourceProviderManager::audioSamplesAvailable((uint64_t)this, v11);
          return;
        }
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v25 = *((_QWORD *)a3 + 3);
        if (v25)
        {
          if (v10)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
            v29 = *(_QWORD *)a3;
            v30 = *((_QWORD *)a3 + 1);
            v31 = *((_QWORD *)a3 + 3);
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            if (v31)
            {
              if (v30)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 16))(v31, v29);
            }
          }
        }
        goto LABEL_39;
      }
      v22 = v10;
      v23 = 0;
      goto LABEL_35;
    }
    v22 = 0;
    v23 = 0;
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    v9 = *((_QWORD *)a3 + 3);
    if (!v9)
    {
LABEL_35:
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v24 = *((_QWORD *)a3 + 3);
      if (v24 && v22)
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v24 + 16))(v24, v23, v22);
      goto LABEL_39;
    }
LABEL_44:
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
      v23 = *(_QWORD *)a3;
      v22 = *((_QWORD *)a3 + 1);
    }
    else
    {
      v22 = 0;
      v23 = 0;
    }
    goto LABEL_35;
  }
  if (v5 != 704)
    return;
  v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
  if (v7)
  {
    v8 = v6;
    IPC::Decoder::decode<WebKit::ConsumerSharedCARingBufferHandle>(a3, (uint64_t)v41);
    if (!v43)
    {
      LOBYTE(v32) = 0;
      v40 = 0;
      goto LABEL_26;
    }
    IPC::Decoder::decode<WebCore::CAAudioStreamDescription>((uint64_t *)a3, (uint64_t)v44);
    if (!v50)
    {
      LOBYTE(v32) = 0;
      v40 = 0;
LABEL_24:
      if (v43)
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v41);
LABEL_26:
      if (v40)
      {
LABEL_27:
        WebKit::RemoteAudioSourceProviderManager::audioStorageChanged((uint64_t)this, v32, (uint64_t)v33, (uint64_t)&v34);
        if (v40)
        {
          WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)&v34);
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v33);
        }
        return;
      }
      goto LABEL_30;
    }
    if (v43)
    {
      v32 = v8;
      WTF::MachSendRight::MachSendRight();
      *(_OWORD *)&v33[8] = v42;
      v34 = MEMORY[0x1E0DD8FD8] + 16;
      v36 = v46;
      v37 = v47;
      v38 = v48;
      v39 = v49;
      v35 = v45;
      v40 = 1;
      if (v50)
        WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)v44);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_44;
  }
  LOBYTE(v32) = 0;
  v40 = 0;
LABEL_30:
  v19 = *(_QWORD *)a3;
  v20 = *((_QWORD *)a3 + 1);
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v21 = *((_QWORD *)a3 + 3);
  if (v21)
  {
    if (v20)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v19);
      if (v40)
        goto LABEL_27;
    }
  }
}

unsigned int **WebKit::RemoteImageBuffer::didReceiveStreamMessage(unsigned int **this, uint64_t **a2, IPC::Decoder *a3)
{
  unsigned int **v5;
  unsigned __int8 ***v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  _DWORD *v20;
  char v21;
  char v22;
  unsigned int **v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  char v29;
  uint64_t v30;
  __int16 v31;
  CFTypeRef v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  CFTypeRef v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  unsigned int **v51;
  unsigned int *v52;
  unsigned int v53;
  uint64_t v54;
  CFTypeRef v55;
  CFTypeRef v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  CFTypeRef cf;
  CFTypeRef v62[2];
  unsigned int *v63;

  v5 = this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x449:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v62, a2 + 4);
      WebKit::RemoteImageBuffer::convertToLuminanceMask((WebKit::RemoteImageBuffer *)v5);
      goto LABEL_3;
    case 0x44A:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v62, a2 + 4);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5[3] + 24))(v5[3]);
LABEL_3:
      v6 = (unsigned __int8 ***)v62;
      return (unsigned int **)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v6);
    case 0x44B:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v60, a2 + 4);
      IPC::ArgumentCoder<WebCore::PixelBuffer,void>::decode((uint64_t *)a3, v62);
      if (LOBYTE(v62[1]))
      {
        v7 = IPC::Decoder::decode<WebCore::IntSize>((unint64_t *)a3);
        if (!v8)
        {
LABEL_40:
          if (v62[0])
          {
            if (*((_DWORD *)v62[0] + 2) == 1)
              (*(void (**)(void))(*(_QWORD *)v62[0] + 8))();
            else
              --*((_DWORD *)v62[0] + 2);
          }
          goto LABEL_43;
        }
        v9 = v7;
        v10 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)a3);
        if (v11)
        {
          v12 = v10;
          v13 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)a3);
          if (v14)
          {
            v15 = *((_QWORD *)a3 + 1);
            v16 = *(_QWORD *)a3;
            v17 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
            if (v15 <= v17)
            {
              v41 = 0;
              v42 = 0;
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              v43 = *((_QWORD *)a3 + 3);
              if (v43)
              {
                if (v15)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43);
                  v42 = *(_QWORD *)a3;
                  v41 = *((_QWORD *)a3 + 1);
                }
                else
                {
                  v41 = 0;
                  v42 = 0;
                }
              }
            }
            else
            {
              v18 = (unsigned __int8 *)(v16 + v17);
              *((_QWORD *)a3 + 2) = v18 + 1;
              if (v16)
              {
                v19 = *v18;
                if (v19 < 2)
                {
                  WebKit::RemoteImageBuffer::putPixelBuffer((uint64_t)v5, v62, v9, v12, v13, v19);
                  v20 = v62[0];
                  v62[0] = 0;
                  if (v20)
                  {
                    if (v20[2] == 1)
                      (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
                    else
                      --v20[2];
                  }
                  goto LABEL_12;
                }
                goto LABEL_39;
              }
              v41 = v15;
              v42 = 0;
            }
            v15 = 0;
            v16 = 0;
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v44 = *((_QWORD *)a3 + 3);
            if (!v44)
            {
LABEL_39:
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              v45 = *((_QWORD *)a3 + 3);
              if (v45 && v15)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v45 + 16))(v45, v16);
              goto LABEL_40;
            }
            if (!v41)
            {
              v15 = 0;
              v16 = 0;
              goto LABEL_39;
            }
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v44 + 16))(v44, v42, v41);
          }
        }
        v16 = *(_QWORD *)a3;
        v15 = *((_QWORD *)a3 + 1);
        goto LABEL_39;
      }
      v38 = *(_QWORD *)a3;
      v39 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v40 = *((_QWORD *)a3 + 3);
      if (v40 && v39)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 16))(v40, v38);
LABEL_43:
      v46 = *(_QWORD *)a3;
      v47 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v48 = *((_QWORD *)a3 + 3);
      if (v48 && v47)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v48 + 16))(v48, v46);
LABEL_12:
      v6 = (unsigned __int8 ***)&v60;
      return (unsigned int **)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v6);
    case 0x44C:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v60, a2 + 4);
      IPC::Decoder::decode<std::tuple<WebCore::DestinationColorSpace>>((uint64_t *)a3, (uint64_t)v62);
      if (LOBYTE(v62[1]))
      {
        WebKit::RemoteImageBuffer::transformToColorSpace((uint64_t)v5);
        if (LOBYTE(v62[1]))
        {
          v55 = v62[0];
          v62[0] = 0;
          if (v55)
            CFRelease(v55);
        }
      }
      goto LABEL_12;
    default:
      switch(*((_WORD *)a3 + 25))
      {
        case 0xE1F:
          return (unsigned int **)IPC::handleMessageSynchronous<Messages::RemoteImageBuffer::FilteredNativeImage,WebKit::RemoteImageBuffer,WebKit::RemoteImageBuffer,void ()(WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&)>((uint64_t)a2, (uint64_t *)a3, (uint64_t)this);
        case 0xE20:
          this = (unsigned int **)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v50 = v49;
          if (v49)
          {
            v51 = this;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v62, a2 + 4);
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v62);
            v62[0] = v51;
            LOBYTE(v62[1]) = v50;
            v52 = (unsigned int *)(a2 + 1);
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 + 1, v52));
            v54 = WTF::fastMalloc((WTF *)0x20);
            *(_QWORD *)v54 = off_1E34B7318;
            *(_OWORD *)(v54 + 8) = *(_OWORD *)v62;
            v63 = 0;
            *(_QWORD *)(v54 + 24) = a2;
            v60 = (uint64_t *)v54;
            WebKit::RemoteImageBuffer::flushContextSync((uint64_t)v5, (uint64_t *)&v60);
            v37 = v60;
            v60 = 0;
            if (v37)
              goto LABEL_29;
            return WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(&v63);
          }
          return this;
        case 0xE21:
          this = (unsigned int **)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v22 = v21;
          if (!v21)
            return this;
          v23 = this;
          IPC::Decoder::decode<WebCore::PixelBufferFormat>((uint64_t *)a3, (uint64_t)v62);
          if (!(_BYTE)v63)
            goto LABEL_66;
          v24 = IPC::Decoder::decode<WebCore::IntSize>((unint64_t *)a3);
          if (v25)
          {
            v26 = v24;
            v27 = IPC::Decoder::decode<WebCore::IntSize>((unint64_t *)a3);
            v28 = v63;
            if (v29)
            {
              if (!(_BYTE)v63)
              {
                __break(1u);
                return (unsigned int **)IPC::handleMessageSynchronous<Messages::RemoteImageBuffer::GetPixelBufferWithNewMemory,WebKit::RemoteImageBuffer,WebKit::RemoteImageBuffer,void ()(WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize,WTF::CompletionHandler<void ()(void)> &&)>((uint64_t)a2, (uint64_t *)a3, (uint64_t)v5);
              }
              v30 = v27;
              v31 = (__int16)v62[0];
              v32 = v62[1];
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v62, a2 + 4);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v62);
              v62[0] = v23;
              LOBYTE(v62[1]) = v22;
              v33 = (unsigned int *)(a2 + 1);
              do
                v34 = __ldaxr(v33);
              while (__stlxr(v34 + 1, v33));
              v35 = WTF::fastMalloc((WTF *)0x20);
              *(_QWORD *)v35 = off_1E34B7278;
              *(_OWORD *)(v35 + 8) = *(_OWORD *)v62;
              v63 = 0;
              *(_QWORD *)(v35 + 24) = a2;
              v59 = (uint64_t *)v35;
              LOWORD(v60) = v31;
              cf = v32;
              WebKit::RemoteImageBuffer::getPixelBuffer((uint64_t)v5, (uint64_t)&v60, v26, v30, (uint64_t *)&v59);
              v36 = cf;
              cf = 0;
              if (v36)
                CFRelease(v36);
              v37 = v59;
              v59 = 0;
              if (v37)
LABEL_29:
                (*(void (**)(uint64_t *))(*v37 + 8))(v37);
              return WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(&v63);
            }
          }
          else
          {
            v28 = v63;
          }
          if (v28)
          {
            v56 = v62[1];
            v62[1] = 0;
            if (v56)
              CFRelease(v56);
          }
LABEL_66:
          v57 = *(_QWORD *)a3;
          v58 = *((_QWORD *)a3 + 1);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          this = (unsigned int **)*((_QWORD *)a3 + 3);
          if (this && v58)
            this = (unsigned int **)(*((uint64_t (**)(unsigned int **, uint64_t))*this + 2))(this, v57);
          break;
        case 0xE22:
          return (unsigned int **)IPC::handleMessageSynchronous<Messages::RemoteImageBuffer::GetPixelBufferWithNewMemory,WebKit::RemoteImageBuffer,WebKit::RemoteImageBuffer,void ()(WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize,WTF::CompletionHandler<void ()(void)> &&)>((uint64_t)a2, (uint64_t *)a3, (uint64_t)v5);
        case 0xE23:
          return IPC::handleMessageSynchronous<Messages::RemoteImageBuffer::GetShareableBitmap,WebKit::RemoteImageBuffer,WebKit::RemoteImageBuffer,void ()(WebCore::PreserveResolution,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&)>((uint64_t)a2, (uint64_t *)a3, this);
        default:
          return this;
      }
      return this;
  }
}

WTF::MachSendRight *IPC::handleMessageSynchronous<Messages::RemoteImageBuffer::GetPixelBufferWithNewMemory,WebKit::RemoteImageBuffer,WebKit::RemoteImageBuffer,void ()(WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize,WTF::CompletionHandler<void ()(void)> &&)>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  WTF::MachSendRight *result;
  char v7;
  char v8;
  WTF::MachSendRight *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  unsigned int *v15;
  uint64_t v16;
  _BYTE v17[48];
  char v18;

  result = (WTF::MachSendRight *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  v8 = v7;
  if (v7)
  {
    v9 = result;
    IPC::Decoder::decode<std::tuple<WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize>>(v17, (IPC::Decoder *)a2);
    if (v18)
    {
      result = (WTF::MachSendRight *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v14, (uint64_t **)(a1 + 32));
      if (!v18
        || (result = (WTF::MachSendRight *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v14),
            !v18))
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)&v14 = v9;
      BYTE8(v14) = v8;
      v10 = (unsigned int *)(a1 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v12 = off_1E34B72A0;
      *(_OWORD *)(v12 + 8) = v14;
      v15 = 0;
      v16 = v12;
      *(_QWORD *)(v12 + 24) = a1;
      IPC::callMemberFunction<WebKit::RemoteImageBuffer,WebKit::RemoteImageBuffer,void ()(WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize,WTF::CompletionHandler<void ()(void)> &&),std::tuple<WebCore::SharedMemoryHandle,WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat,WebCore::IntPoint>,WTF::CompletionHandler>(a3, (uint64_t)v17, (uint64_t)&v16);
      v13 = v16;
      v16 = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(&v15);
    }
    return std::__optional_destruct_base<std::tuple<WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize>,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v17);
  }
  return result;
}

unsigned int **IPC::handleMessageSynchronous<Messages::RemoteImageBuffer::GetShareableBitmap,WebKit::RemoteImageBuffer,WebKit::RemoteImageBuffer,void ()(WebCore::PreserveResolution,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&)>(uint64_t a1, uint64_t *a2, _BYTE *a3)
{
  unsigned int **result;
  char v7;
  char v8;
  unsigned int **v9;
  char v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  unsigned int *v16;
  uint64_t v17;

  result = (unsigned int **)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  v8 = v7;
  if (v7)
  {
    v9 = result;
    result = (unsigned int **)IPC::Decoder::decode<std::tuple<WebCore::PreserveResolution>>(a2);
    if ((unsigned __int16)result >= 0x100u)
    {
      v10 = (char)result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v15, (uint64_t **)(a1 + 32));
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v15);
      *(_QWORD *)&v15 = v9;
      BYTE8(v15) = v8;
      v11 = (unsigned int *)(a1 + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
      v13 = WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v13 = off_1E34B72C8;
      *(_OWORD *)(v13 + 8) = v15;
      v16 = 0;
      v17 = v13;
      *(_QWORD *)(v13 + 24) = a1;
      WebKit::RemoteImageBuffer::getShareableBitmap(a3, v10 != 0, &v17);
      v14 = v17;
      v17 = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      return WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(&v16);
    }
  }
  return result;
}

uint64_t *IPC::handleMessageSynchronous<Messages::RemoteImageBuffer::FilteredNativeImage,WebKit::RemoteImageBuffer,WebKit::RemoteImageBuffer,void ()(WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&)>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *result;
  char v7;
  char v8;
  uint64_t *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  __int128 v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;

  result = (uint64_t *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  v8 = v7;
  if (v7)
  {
    v9 = result;
    result = IPC::Decoder::decode<std::tuple<WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>>>(a2, (uint64_t)&v20);
    if (v21)
    {
      result = (uint64_t *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v17, (uint64_t **)(a1 + 32));
      if (v21
        && (result = (uint64_t *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v17),
            v21))
      {
        *(_QWORD *)&v17 = v9;
        BYTE8(v17) = v8;
        v10 = (unsigned int *)(a1 + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 + 1, v10));
        v12 = WTF::fastMalloc((WTF *)0x20);
        *(_QWORD *)v12 = off_1E34B72F0;
        *(_OWORD *)(v12 + 8) = v17;
        v18 = 0;
        v19 = v12;
        *(_QWORD *)(v12 + 24) = a1;
        v13 = v20;
        v20 = 0;
        v22 = v13;
        WebKit::RemoteImageBuffer::filteredNativeImage(a3, &v22, &v19);
        WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref(&v22, v14);
        v15 = v19;
        v19 = 0;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        result = (uint64_t *)WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(&v18);
        if (v21)
          return WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref(&v20, v16);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

void IPC::handleMessage<Messages::RemoteImageBufferProxy::DidCreateBackend,WebKit::RemoteImageBufferProxy,WebKit::RemoteImageBufferProxy,void ()(std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>)>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD *, unsigned int *), uint64_t a5)
{
  BOOL v8;
  _BYTE v9[64];
  int v10;
  char v11;
  char v12;
  char v13;

  IPC::Decoder::decode<std::tuple<std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>>>(a2, v9);
  if (v12)
  {
    IPC::callMemberFunction<WebKit::RemoteImageBufferProxy,WebKit::RemoteImageBufferProxy,void ()(std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>),std::tuple<std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>>>(a3, a4, a5, (uint64_t)v9);
    if (v12)
      v8 = v11 == 0;
    else
      v8 = 1;
    if (!v8 && v10 != -1)
      __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v10]((int)&v13, (WTF::MachSendRight *)v9);
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteAudioDestinationManager21StartAudioDestinationEN6WebKit29RemoteAudioDestinationManagerES8_FvNS_23ObjectIdentifierGenericINS7_36RemoteAudioDestinationIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B7200;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteAudioDestinationManager21StartAudioDestinationEN6WebKit29RemoteAudioDestinationManagerES8_FvNS_23ObjectIdentifierGenericINS7_36RemoteAudioDestinationIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B7200;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteAudioDestinationManager21StartAudioDestinationEN6WebKit29RemoteAudioDestinationManagerES8_FvNS_23ObjectIdentifierGenericINS7_36RemoteAudioDestinationIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3066;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteAudioDestinationManager20StopAudioDestinationEN6WebKit29RemoteAudioDestinationManagerES8_FvNS_23ObjectIdentifierGenericINS7_36RemoteAudioDestinationIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B7228;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteAudioDestinationManager20StopAudioDestinationEN6WebKit29RemoteAudioDestinationManagerES8_FvNS_23ObjectIdentifierGenericINS7_36RemoteAudioDestinationIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B7228;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteAudioDestinationManager20StopAudioDestinationEN6WebKit29RemoteAudioDestinationManagerES8_FvNS_23ObjectIdentifierGenericINS7_36RemoteAudioDestinationIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3067;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>(unsigned __int8 *this, void *a2)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  WebKit::RemoteAudioHardwareListener *v6;
  BOOL v7;
  int v8;
  WTF *v9;
  void *v10;
  uint64_t v11;

  v2 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEABB3C](this);
LABEL_5:
  v4 = *((_QWORD *)v2 + 1);
  v5 = v4 - 1;
  *((_QWORD *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    v11 = *((_QWORD *)v2 + 2);
    v6 = (WebKit::RemoteAudioHardwareListener *)*((_QWORD *)v2 + 3);
    *((_QWORD *)v2 + 3) = 0;
    v7 = v11 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = __ldxr(v2);
  if (v8 != 1)
  {
    __clrex();
LABEL_12:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v5)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, v2))
    goto LABEL_12;
  if (v5)
    return this;
LABEL_13:
  if (v6)
  {
    WebKit::RemoteAudioHardwareListener::~RemoteAudioHardwareListener(v6, a2);
    this = (unsigned __int8 *)WTF::fastFree(v9, v10);
  }
  if (!v7)
    return (unsigned __int8 *)WTF::fastFree((WTF *)v2, a2);
  return this;
}

_QWORD *IPC::Decoder::decode<std::tuple<unsigned long,unsigned long>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<unsigned long,unsigned long>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<unsigned long,unsigned long>,void>::decode<IPC::Decoder>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v2 = result[1];
  v3 = *result;
  v4 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *result;
  if (v2 < v4 || v2 - v4 <= 7)
  {
    v13 = 0;
    v14 = 0;
    *result = 0;
    result[1] = 0;
    v15 = result[3];
    if (v15)
    {
      v20 = result;
      v22 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
        result = v20;
        a2 = v22;
        v14 = *v20;
        v13 = v20[1];
      }
      else
      {
        v13 = 0;
        v14 = 0;
      }
    }
    goto LABEL_15;
  }
  v6 = (uint64_t *)(v3 + v4);
  result[2] = v6 + 1;
  if (!v3)
  {
    v13 = v2;
    v14 = 0;
LABEL_15:
    *result = 0;
    result[1] = 0;
    result = (_QWORD *)result[3];
    if (!result || !v13)
      goto LABEL_19;
    v21 = a2;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, unint64_t))(*result + 16))(result, v14, v13);
LABEL_26:
    a2 = v21;
LABEL_19:
    v12 = 0;
    *(_BYTE *)a2 = 0;
    goto LABEL_13;
  }
  v7 = (((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8) - v3;
  if (v2 < v7 || v2 - v7 <= 7)
  {
    *result = 0;
    result[1] = 0;
    v16 = result[3];
    if (!v16)
      goto LABEL_19;
    if (!v2)
      goto LABEL_19;
    v17 = result;
    v21 = a2;
    (*(void (**)(_QWORD))(*(_QWORD *)v16 + 16))(result[3]);
    a2 = v21;
    v18 = *v17;
    v19 = v17[1];
    result = (_QWORD *)v17[3];
    *v17 = 0;
    v17[1] = 0;
    if (!result || !v19)
      goto LABEL_19;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v18);
    goto LABEL_26;
  }
  v9 = *v6;
  v10 = (uint64_t *)(v3 + v7);
  v11 = *v10;
  result[2] = v10 + 1;
  *(_QWORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v11;
  v12 = 1;
LABEL_13:
  *(_BYTE *)(a2 + 16) = v12;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebKit::RemoteAudioSessionConfiguration>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v3;
  char v4;
  uint64_t v6;
  __int128 v7;
  _OWORD v8[2];
  uint64_t v9;
  char v10;
  char v11;

  IPC::Decoder::decode<WebKit::RemoteAudioSessionConfiguration>(a1, (uint64_t)&v6);
  v4 = v11;
  if (v11)
  {
    *(_QWORD *)a2 = v6;
    *(_OWORD *)(a2 + 8) = v7;
    *(_OWORD *)(a2 + 24) = v8[0];
    *(_OWORD *)(a2 + 34) = *(_OWORD *)((char *)v8 + 10);
    *(_QWORD *)(a2 + 56) = v9;
    *(_BYTE *)(a2 + 64) = v10;
    v4 = 1;
    v6 = 0;
    v9 = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 72) = v4;
  return std::__optional_destruct_base<WebKit::RemoteAudioSessionConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v6, v3);
}

uint64_t std::__optional_destruct_base<WebKit::RemoteAudioSessionConfiguration,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 72))
  {
    v3 = *(WTF::StringImpl **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::AudioSession::MayResume>>(uint64_t *a1)
{
  unsigned int v2;
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  v2 = (unsigned __int16)IPC::Decoder::decode<std::tuple<BOOL>>(a1);
  v3 = 256;
  if (v2 <= 0xFF)
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7)
    {
      v8 = v2;
      if (v6)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v5);
        v3 = 0;
        v2 = v8;
      }
      else
      {
        v3 = 0;
      }
    }
    else
    {
      v3 = 0;
    }
  }
  if (v2 <= 0x100)
    LOBYTE(v2) = 0;
  return v3 | v2;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::AudioSessionCategory,WebCore::AudioSessionMode,WebCore::RouteSharingPolicy>>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::AudioSessionCategory,WebCore::AudioSessionMode,WebCore::RouteSharingPolicy>,void>::decode<IPC::Decoder>(a1);
  if (!BYTE3(result))
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::AudioSessionCategory,WebCore::AudioSessionMode,WebCore::RouteSharingPolicy>,void>::decode<IPC::Decoder>(uint64_t *a1)
{
  unsigned __int16 v3;

  v3 = IPC::Decoder::decode<WebCore::CDMKeyStatus>(a1);
  if (v3 >= 0x100u)
    return IPC::ArgumentCoder<std::tuple<WebCore::AudioSessionCategory,WebCore::AudioSessionMode,WebCore::RouteSharingPolicy>,void>::decode<IPC::Decoder,WebCore::AudioSessionCategory>(a1, (unsigned __int8 *)&v3);
  else
    return 0;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::AudioSessionCategory,WebCore::AudioSessionMode,WebCore::RouteSharingPolicy>,void>::decode<IPC::Decoder,WebCore::AudioSessionCategory>(uint64_t *a1, unsigned __int8 *a2)
{
  unsigned __int16 v5;

  v5 = IPC::Decoder::decode<WebCore::NotificationDirection>(a1);
  if (v5 >= 0x100u)
    return IPC::ArgumentCoder<std::tuple<WebCore::AudioSessionCategory,WebCore::AudioSessionMode,WebCore::RouteSharingPolicy>,void>::decode<IPC::Decoder,WebCore::AudioSessionCategory,WebCore::AudioSessionMode>(a1, a2, (unsigned __int8 *)&v5);
  else
    return 0;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::AudioSessionCategory,WebCore::AudioSessionMode,WebCore::RouteSharingPolicy>,void>::decode<IPC::Decoder,WebCore::AudioSessionCategory,WebCore::AudioSessionMode>(uint64_t *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t result;
  int v6;
  int v7;
  int v8;

  result = IPC::Decoder::decode<WebKit::AuthenticationChallengeDisposition>(a1);
  if ((unsigned __int16)result < 0x100u)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    return v7 | v6 | v8;
  }
  if (a2[1] && a3[1])
  {
    v6 = *a2;
    v8 = (result << 16) | (*a3 << 8);
    v7 = 0x1000000;
    return v7 | v6 | v8;
  }
  __break(1u);
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<std::optional<BOOL>>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v2 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  if ((v2 & 0xFF0000) != 0)
    return (unsigned __int16)v2 | 0x10000u;
  v4 = *a1;
  v5 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v5)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v4);
    return 0;
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteAudioSessionProxy14TryToSetActiveEN6WebKit23RemoteAudioSessionProxyES8_FvbONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B7250;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteAudioSessionProxy14TryToSetActiveEN6WebKit23RemoteAudioSessionProxyES8_FvbONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B7250;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteAudioSessionProxy14TryToSetActiveEN6WebKit23RemoteAudioSessionProxyES8_FvbONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  char *result;
  unint64_t v13;
  size_t v14;
  void *v15;

  v4 = (uint64_t *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 >= v6 + 1)
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
LABEL_3:
    bzero(&v9[v10], v6 - v10);
    *(_QWORD *)(v5 + 544) = v7;
    v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
    *(_QWORD *)(v5 + 536) = v11 + 1;
    *v11 = a2;
    return (char *)IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), v4, 0, 0);
  }
  v13 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v14 = v13;
    v13 *= 2;
  }
  while (v14 < v7);
  result = (char *)mmap(0, v14, 3, 4098, -1, 0);
  if (result != (char *)-1)
  {
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v15 = *(void **)(v5 + 528);
    if (v15 != (void *)(v5 + 16))
      munmap(v15, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v14;
    v10 = *(_QWORD *)(v5 + 544);
    goto LABEL_3;
  }
  __break(0xC471u);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages17RemoteImageBuffer14GetPixelBufferEN6WebKit17RemoteImageBufferES8_FvN7WebCore17PixelBufferFormatENS9_8IntPointENS9_7IntSizeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B7278;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages17RemoteImageBuffer14GetPixelBufferEN6WebKit17RemoteImageBufferES8_FvN7WebCore17PixelBufferFormatENS9_8IntPointENS9_7IntSizeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B7278;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages17RemoteImageBuffer14GetPixelBufferEN6WebKit17RemoteImageBufferES8_FvN7WebCore17PixelBufferFormatENS9_8IntPointENS9_7IntSizeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  IPC::Encoder *result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  WTF *v19;
  void *v20;
  IPC::Encoder *v21;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v21, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v21);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_22;
  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v1 + 112))
  {
    v7 = *(_QWORD *)(v1 + 48);
    v6 = *(_QWORD *)(v1 + 56);
    v8 = *(_QWORD *)(v6 + 8);
    v5 = v7 - 1;
    if (v7 != 1)
    {
      v9 = v8 >= 0x100;
      v10 = v8 - 256;
      if (!v9)
        goto LABEL_22;
      v11 = *(_QWORD *)(v6 + 16);
      if (!v7)
      {
        v5 = v10;
LABEL_8:
        v12 = v11 + 256;
        v13 = (v11 + 257) & 0xFFFFFFFFFFFFFFFELL;
        if (v13 < v11 + 256)
          goto LABEL_23;
        goto LABEL_9;
      }
      if (v10 >= v5)
        goto LABEL_8;
LABEL_22:
      __break(1u);
LABEL_23:
      if (v5)
        return result;
      goto LABEL_16;
    }
    if (v8 <= 0xFF)
      goto LABEL_22;
    v11 = *(_QWORD *)(v6 + 16);
    v12 = v11 + 256;
    v13 = (v11 + 257) & 0xFFFFFFFFFFFFFFFELL;
    if (v13 >= v11 + 256)
    {
      v5 = 0;
LABEL_9:
      v14 = v13 - v12;
      if (v14 <= 0xFFFFFFFFFFFFFFFDLL && v14 + 2 <= v5)
      {
        v16 = v11 + 256;
        *(_WORD *)(v16 + v14) = 2823;
        if (v5)
          return result;
        *(_WORD *)(v16 + v14) = 2821;
      }
    }
  }
LABEL_16:
  v17 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v17 = 2823;
  *(_QWORD *)(v17 + 8) = v2;
  *(_QWORD *)(v17 + 528) = v17 + 16;
  *(_QWORD *)(v17 + 536) = v17 + 16;
  *(_OWORD *)(v17 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v17 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v17);
  v21 = (IPC::Encoder *)v17;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v1 + 32), (uint64_t *)&v21, 0, 0);
  result = v21;
  v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v18);
    return (IPC::Encoder *)WTF::fastFree(v19, v20);
  }
  return result;
}

uint64_t IPC::StreamServerConnectionBuffer::acquireAll(uint64_t this, uint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (this == 1)
  {
    if (v2 >= 0x100)
    {
      v5 = *(_QWORD *)(a2 + 16);
      return v5 + 256;
    }
  }
  else
  {
    v3 = v2 >= 0x100;
    v4 = v2 - 256;
    if (v3)
    {
      v5 = *(_QWORD *)(a2 + 16);
      if (!this || v4 >= this - 1)
        return v5 + 256;
    }
  }
  __break(1u);
  return this;
}

void IPC::Decoder::decode<std::tuple<WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize>>(_BYTE *a1, IPC::Decoder *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[48])
  {
    v4 = *(_QWORD *)a2;
    v5 = *((_QWORD *)a2 + 1);
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    v6 = *((_QWORD *)a2 + 3);
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::callMemberFunction<WebKit::RemoteImageBuffer,WebKit::RemoteImageBuffer,void ()(WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize,WTF::CompletionHandler<void ()(void)> &&),std::tuple<WebCore::SharedMemoryHandle,WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat,WebCore::IntPoint>,WTF::CompletionHandler>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[3];
  _QWORD v4[2];
  uint64_t v5;

  v5 = a1;
  v4[0] = WebKit::RemoteImageBuffer::getPixelBufferWithNewMemory;
  v4[1] = 0;
  v3[0] = &v5;
  v3[1] = v4;
  v3[2] = a3;
  IPC::callMemberFunction<WebKit::RemoteImageBuffer,WebKit::RemoteImageBuffer,void ()(WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize,WTF::CompletionHandler<void ()(void)> &&),std::tuple<WebCore::SharedMemoryHandle,WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat,WebCore::IntPoint>,WTF::CompletionHandler>(WebKit::RemoteImageBuffer *,void ()(WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize,WTF::CompletionHandler<void ()(void)> &&) WebKit::RemoteImageBuffer::*,std::tuple<WebCore::SharedMemoryHandle,WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat,WebCore::IntPoint> &&,WTF<WTF::CompletionHandler> &&)::{lambda(WebKit::RemoteImageBuffer &&)#1}::operator()<WebCore::SharedMemoryHandle,WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat,WebCore::IntPoint>((uint64_t)v3, a2, (__int16 *)(a2 + 16), (_QWORD *)(a2 + 32), (_QWORD *)(a2 + 40));
}

void IPC::ArgumentCoder<std::tuple<WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize>,void>::decode<IPC::Decoder>(_BYTE *a1, IPC::Decoder *a2)
{
  _BYTE v4[16];
  char v5;

  IPC::Decoder::decode<WebCore::SharedMemoryHandle>(a2, (uint64_t)v4);
  if (v5)
  {
    IPC::ArgumentCoder<std::tuple<WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize>,void>::decode<IPC::Decoder,WebCore::SharedMemoryHandle>(a1, (uint64_t *)a2, (uint64_t)v4);
    if (v5)
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v4);
  }
  else
  {
    *a1 = 0;
    a1[48] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize>,void>::decode<IPC::Decoder,WebCore::SharedMemoryHandle>(_BYTE *a1, uint64_t *a2, uint64_t a3)
{
  CFTypeRef v6;
  _BYTE v7[8];
  CFTypeRef cf;
  char v9;

  IPC::Decoder::decode<WebCore::PixelBufferFormat>(a2, (uint64_t)v7);
  if (v9)
  {
    IPC::ArgumentCoder<std::tuple<WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize>,void>::decode<IPC::Decoder,WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat>(a1, (unint64_t *)a2, a3, (uint64_t)v7);
    if (v9)
    {
      v6 = cf;
      cf = 0;
      if (v6)
        CFRelease(v6);
    }
  }
  else
  {
    *a1 = 0;
    a1[48] = 0;
  }
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize>,void>::decode<IPC::Decoder,WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat>(_BYTE *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  int v9;
  uint64_t v10;
  int v11;

  result = IPC::Decoder::decode<WebCore::IntSize>(a2);
  v10 = result;
  v11 = v9;
  if ((_BYTE)v9)
    return IPC::ArgumentCoder<std::tuple<WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize>,void>::decode<IPC::Decoder,WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint>(a1, a2, a3, a4, &v10);
  *a1 = 0;
  a1[48] = 0;
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize>,void>::decode<IPC::Decoder,WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint>(_BYTE *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  unint64_t result;
  int v10;
  unint64_t v11;
  int v12;

  result = IPC::Decoder::decode<WebCore::IntSize>(a2);
  v11 = result;
  v12 = v10;
  if ((_BYTE)v10)
    return IPC::ArgumentCoder<std::tuple<WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize>,void>::decode<IPC::Decoder,WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize>((uint64_t)a1, a3, a4, a5, &v11);
  *a1 = 0;
  a1[48] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize>,void>::decode<IPC::Decoder,WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, _QWORD *a5)
{
  if (*(_BYTE *)(a2 + 16) && *(_BYTE *)(a3 + 16) && *((_BYTE *)a4 + 8) && *((_BYTE *)a5 + 8))
    return std::make_optional[abi:sn180100]<std::tuple<WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize>,WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize>(a1, a2, a3, a4, a5);
  __break(1u);
  return a1;
}

uint64_t std::make_optional[abi:sn180100]<std::tuple<WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize>,WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  result = WTF::MachSendRight::MachSendRight();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_WORD *)(result + 16) = *(_WORD *)a3;
  v10 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  v11 = *a4;
  *(_QWORD *)(result + 24) = v10;
  *(_QWORD *)(result + 32) = v11;
  *(_QWORD *)(result + 40) = *a5;
  *(_BYTE *)(result + 48) = 1;
  return result;
}

void IPC::callMemberFunction<WebKit::RemoteImageBuffer,WebKit::RemoteImageBuffer,void ()(WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize,WTF::CompletionHandler<void ()(void)> &&),std::tuple<WebCore::SharedMemoryHandle,WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat,WebCore::IntPoint>,WTF::CompletionHandler>(WebKit::RemoteImageBuffer *,void ()(WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize,WTF::CompletionHandler<void ()(void)> &&) WebKit::RemoteImageBuffer::*,std::tuple<WebCore::SharedMemoryHandle,WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat,WebCore::IntPoint> &&,WTF<WTF::CompletionHandler> &&)::{lambda(WebKit::RemoteImageBuffer &&)#1}::operator()<WebCore::SharedMemoryHandle,WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat,WebCore::IntPoint>(uint64_t a1, uint64_t a2, __int16 *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v5;
  void (*v6)(_QWORD *, uint64_t, __int16 *, _QWORD, _QWORD, _QWORD);
  uint64_t v7;
  _QWORD *v8;
  const void *v9;
  CFTypeRef v10;
  __int16 v11;
  CFTypeRef cf;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(void (**)(_QWORD *, uint64_t, __int16 *, _QWORD, _QWORD, _QWORD))v5;
  v7 = *(_QWORD *)(v5 + 8);
  v8 = (_QWORD *)(**(_QWORD **)a1 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(void (**)(_QWORD *, uint64_t, __int16 *, _QWORD, _QWORD, _QWORD))(*v8 + v6);
  v11 = *a3;
  v9 = (const void *)*((_QWORD *)a3 + 1);
  *((_QWORD *)a3 + 1) = 0;
  cf = v9;
  v6(v8, a2, &v11, *a4, *a5, *(_QWORD *)(a1 + 16));
  v10 = cf;
  cf = 0;
  if (v10)
    CFRelease(v10);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages17RemoteImageBuffer27GetPixelBufferWithNewMemoryEN6WebKit17RemoteImageBufferES8_FvON7WebCore18SharedMemoryHandleENS9_17PixelBufferFormatENS9_8IntPointENS9_7IntSizeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B72A0;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages17RemoteImageBuffer27GetPixelBufferWithNewMemoryEN6WebKit17RemoteImageBufferES8_FvON7WebCore18SharedMemoryHandleENS9_17PixelBufferFormatENS9_8IntPointENS9_7IntSizeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B72A0;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

unsigned __int8 ***_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages17RemoteImageBuffer27GetPixelBufferWithNewMemoryEN6WebKit17RemoteImageBufferES8_FvON7WebCore18SharedMemoryHandleENS9_17PixelBufferFormatENS9_8IntPointENS9_7IntSizeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  return IPC::handleMessageSynchronous<Messages::RemoteImageBuffer::GetPixelBufferWithNewMemory,WebKit::RemoteImageBuffer,WebKit::RemoteImageBuffer,void ()(WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize,WTF::CompletionHandler<void ()(void)> &&)>(IPC::StreamServerConnection &,IPC::Decoder &,WebKit::RemoteImageBuffer *,void ()(WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize,WTF::CompletionHandler<void ()(void)> &&) WebKit::RemoteImageBuffer::*)::{lambda(Messages::RemoteImageBuffer::GetPixelBufferWithNewMemory &&)#1}::operator()<>(a1 + 8);
}

unsigned __int8 ***IPC::handleMessageSynchronous<Messages::RemoteImageBuffer::GetPixelBufferWithNewMemory,WebKit::RemoteImageBuffer,WebKit::RemoteImageBuffer,void ()(WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize,WTF::CompletionHandler<void ()(void)> &&)>(IPC::StreamServerConnection &,IPC::Decoder &,WebKit::RemoteImageBuffer *,void ()(WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize,WTF::CompletionHandler<void ()(void)> &&) WebKit::RemoteImageBuffer::*)::{lambda(Messages::RemoteImageBuffer::GetPixelBufferWithNewMemory &&)#1}::operator()<>(uint64_t a1)
{
  unsigned __int8 ***result;
  uint64_t *v3;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v3, (uint64_t **)(*(_QWORD *)(a1 + 16) + 32));
  result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v3);
  if (*(_BYTE *)(a1 + 8))
    return (unsigned __int8 ***)IPC::StreamServerConnection::sendSyncReply<Messages::RemoteImageBuffer::GetPixelBufferWithNewMemory>(*(_QWORD *)(a1 + 16), *(_QWORD *)a1);
  __break(1u);
  return result;
}

IPC::Encoder *IPC::StreamServerConnection::sendSyncReply<Messages::RemoteImageBuffer::GetPixelBufferWithNewMemory>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  IPC::Encoder *v14;

  if (*(_BYTE *)(a1 + 112))
  {
    result = (IPC::Encoder *)IPC::StreamServerConnectionBuffer::acquireAll(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    v10 = ((unint64_t)result + 1) & 0xFFFFFFFFFFFFFFFELL;
    v11 = v10 >= (unint64_t)result;
    v12 = v10 - (_QWORD)result;
    if (v11)
    {
      if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v12 + 2 <= v9)
      {
        *(_WORD *)((char *)result + v12) = 2823;
        if (v9)
          return result;
        *(_WORD *)((char *)result + v12) = 2821;
      }
    }
    else if (v9)
    {
      return result;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 2823;
  *(_QWORD *)(v4 + 8) = a2;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v14 = (IPC::Encoder *)v4;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 32), (uint64_t *)&v14, 0, 0);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

WTF::MachSendRight *std::__optional_destruct_base<std::tuple<WebCore::SharedMemoryHandle,WebCore::PixelBufferFormat,WebCore::IntPoint,WebCore::IntSize>,false>::~__optional_destruct_base[abi:sn180100](WTF::MachSendRight *this)
{
  const void *v2;

  if (*((_BYTE *)this + 48))
  {
    v2 = (const void *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v2)
      CFRelease(v2);
    WTF::MachSendRight::~MachSendRight(this);
  }
  return this;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::PreserveResolution>>(uint64_t *a1)
{
  unsigned int v2;
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  v2 = (unsigned __int16)IPC::Decoder::decode<WebKit::AllowsCellularAccess>(a1);
  v3 = 256;
  if (v2 <= 0xFF)
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7)
    {
      v8 = v2;
      if (v6)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v5);
        v3 = 0;
        v2 = v8;
      }
      else
      {
        v3 = 0;
      }
    }
    else
    {
      v3 = 0;
    }
  }
  if (v2 <= 0x100)
    LOBYTE(v2) = 0;
  return v3 | v2;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages17RemoteImageBuffer18GetShareableBitmapEN6WebKit17RemoteImageBufferES8_FvN7WebCore18PreserveResolutionEONS_17CompletionHandlerIFvONSt3__18optionalINS9_21ShareableBitmapHandleEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B72C8;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages17RemoteImageBuffer18GetShareableBitmapEN6WebKit17RemoteImageBufferES8_FvN7WebCore18PreserveResolutionEONS_17CompletionHandlerIFvONSt3__18optionalINS9_21ShareableBitmapHandleEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B72C8;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

unsigned __int8 ***_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages17RemoteImageBuffer18GetShareableBitmapEN6WebKit17RemoteImageBufferES8_FvN7WebCore18PreserveResolutionEONS_17CompletionHandlerIFvONSt3__18optionalINS9_21ShareableBitmapHandleEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EE4callESG_(uint64_t a1, unint64_t a2)
{
  return IPC::handleMessageSynchronous<Messages::RemoteImageBuffer::GetShareableBitmap,WebKit::RemoteImageBuffer,WebKit::RemoteImageBuffer,void ()(WebCore::PreserveResolution,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&)>(IPC::StreamServerConnection &,IPC::Decoder &,WebKit::RemoteImageBuffer *,void ()(WebCore::PreserveResolution,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&) WebKit::RemoteImageBuffer::*)::{lambda(Messages::RemoteImageBuffer::GetShareableBitmap &&)#1}::operator()<std::optional<WebCore::ShareableBitmapHandle>>(a1 + 8, a2);
}

unsigned __int8 ***IPC::handleMessageSynchronous<Messages::RemoteImageBuffer::GetShareableBitmap,WebKit::RemoteImageBuffer,WebKit::RemoteImageBuffer,void ()(WebCore::PreserveResolution,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&)>(IPC::StreamServerConnection &,IPC::Decoder &,WebKit::RemoteImageBuffer *,void ()(WebCore::PreserveResolution,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&) WebKit::RemoteImageBuffer::*)::{lambda(Messages::RemoteImageBuffer::GetShareableBitmap &&)#1}::operator()<std::optional<WebCore::ShareableBitmapHandle>>(uint64_t a1, unint64_t a2)
{
  unsigned __int8 ***result;
  uint64_t *v5;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v5, (uint64_t **)(*(_QWORD *)(a1 + 16) + 32));
  result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v5);
  if (*(_BYTE *)(a1 + 8))
    return (unsigned __int8 ***)IPC::StreamServerConnection::sendSyncReply<Messages::RemoteImageBuffer::GetShareableBitmap,std::optional<WebCore::ShareableBitmapHandle>>(*(_QWORD *)(a1 + 16), *(_QWORD *)a1, a2);
  __break(1u);
  return result;
}

IPC::Encoder *IPC::StreamServerConnection::sendSyncReply<Messages::RemoteImageBuffer::GetShareableBitmap,std::optional<WebCore::ShareableBitmapHandle>>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 2823;
  *(_QWORD *)(v6 + 8) = a2;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<std::optional<WebCore::ShareableBitmapHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::ShareableBitmapHandle>>((IPC::Encoder *)v6, a3);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 32), (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t *IPC::Decoder::decode<std::tuple<WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 8))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::tuple<WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  void *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  result = IPC::Decoder::decode<WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>>(a1, (uint64_t)&v7);
  v5 = v8;
  if (v8)
  {
    v6 = v7;
    v7 = 0;
    *(_QWORD *)a2 = v6;
    result = WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref(&v7, v4);
    v5 = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 8) = v5;
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages17RemoteImageBuffer19FilteredNativeImageEN6WebKit17RemoteImageBufferES8_FvNS_3RefIN7WebCore6FilterENS_12RawPtrTraitsISB_EENS_21DefaultRefDerefTraitsISB_EEEEONS_17CompletionHandlerIFvONSt3__18optionalINSA_21ShareableBitmapHandleEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B72F0;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages17RemoteImageBuffer19FilteredNativeImageEN6WebKit17RemoteImageBufferES8_FvNS_3RefIN7WebCore6FilterENS_12RawPtrTraitsISB_EENS_21DefaultRefDerefTraitsISB_EEEEONS_17CompletionHandlerIFvONSt3__18optionalINSA_21ShareableBitmapHandleEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B72F0;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages17RemoteImageBuffer19FilteredNativeImageEN6WebKit17RemoteImageBufferES8_FvNS_3RefIN7WebCore6FilterENS_12RawPtrTraitsISB_EENS_21DefaultRefDerefTraitsISB_EEEEONS_17CompletionHandlerIFvONSt3__18optionalINSA_21ShareableBitmapHandleEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, unint64_t a2)
{
  IPC::Encoder *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v11, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v11);
  if (*(_BYTE *)(a1 + 16))
  {
    v5 = *(_QWORD *)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 8);
    v7 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v7 = 2823;
    *(_QWORD *)(v7 + 8) = v6;
    *(_QWORD *)(v7 + 528) = v7 + 16;
    *(_QWORD *)(v7 + 536) = v7 + 16;
    *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v7 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
    v11 = (IPC::Encoder *)v7;
    IPC::ArgumentCoder<std::optional<WebCore::ShareableBitmapHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::ShareableBitmapHandle>>((IPC::Encoder *)v7, a2);
    IPC::Connection::sendMessageImpl(*(_QWORD *)(v5 + 32), (uint64_t *)&v11, 0, 0);
    result = v11;
    v11 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v8);
      return (IPC::Encoder *)WTF::fastFree(v9, v10);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages17RemoteImageBuffer16FlushContextSyncEN6WebKit17RemoteImageBufferES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B7318;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages17RemoteImageBuffer16FlushContextSyncEN6WebKit17RemoteImageBufferES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B7318;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages17RemoteImageBuffer16FlushContextSyncEN6WebKit17RemoteImageBufferES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  IPC::Encoder *result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  WTF *v19;
  void *v20;
  IPC::Encoder *v21;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v21, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v21);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_22;
  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v1 + 112))
  {
    v7 = *(_QWORD *)(v1 + 48);
    v6 = *(_QWORD *)(v1 + 56);
    v8 = *(_QWORD *)(v6 + 8);
    v5 = v7 - 1;
    if (v7 != 1)
    {
      v9 = v8 >= 0x100;
      v10 = v8 - 256;
      if (!v9)
        goto LABEL_22;
      v11 = *(_QWORD *)(v6 + 16);
      if (!v7)
      {
        v5 = v10;
LABEL_8:
        v12 = v11 + 256;
        v13 = (v11 + 257) & 0xFFFFFFFFFFFFFFFELL;
        if (v13 < v11 + 256)
          goto LABEL_23;
        goto LABEL_9;
      }
      if (v10 >= v5)
        goto LABEL_8;
LABEL_22:
      __break(1u);
LABEL_23:
      if (v5)
        return result;
      goto LABEL_16;
    }
    if (v8 <= 0xFF)
      goto LABEL_22;
    v11 = *(_QWORD *)(v6 + 16);
    v12 = v11 + 256;
    v13 = (v11 + 257) & 0xFFFFFFFFFFFFFFFELL;
    if (v13 >= v11 + 256)
    {
      v5 = 0;
LABEL_9:
      v14 = v13 - v12;
      if (v14 <= 0xFFFFFFFFFFFFFFFDLL && v14 + 2 <= v5)
      {
        v16 = v11 + 256;
        *(_WORD *)(v16 + v14) = 2823;
        if (v5)
          return result;
        *(_WORD *)(v16 + v14) = 2821;
      }
    }
  }
LABEL_16:
  v17 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v17 = 2823;
  *(_QWORD *)(v17 + 8) = v2;
  *(_QWORD *)(v17 + 528) = v17 + 16;
  *(_QWORD *)(v17 + 536) = v17 + 16;
  *(_OWORD *)(v17 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v17 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v17);
  v21 = (IPC::Encoder *)v17;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v1 + 32), (uint64_t *)&v21, 0, 0);
  result = v21;
  v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v18);
    return (IPC::Encoder *)WTF::fastFree(v19, v20);
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>>>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[80])
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

uint64_t IPC::callMemberFunction<WebKit::RemoteImageBufferProxy,WebKit::RemoteImageBufferProxy,void ()(std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>),std::tuple<std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>>>(uint64_t a1, uint64_t (*a2)(_QWORD *, unsigned int *), uint64_t a3, uint64_t a4)
{
  uint64_t (*v4)(_QWORD *, unsigned int *);
  _QWORD *v5;
  uint64_t result;
  unsigned int v7[16];
  int v8;
  char v9;
  char v10;

  v4 = a2;
  v5 = (_QWORD *)(a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, unsigned int *))(*v5 + a2);
  LOBYTE(v7[0]) = 0;
  v9 = 0;
  if (*(_BYTE *)(a4 + 72))
  {
    v8 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>>(v7, a4);
    v9 = 1;
  }
  result = v4(v5, v7);
  if (v9)
  {
    if (v8 != -1)
      return __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v8]((int)&v10, (WTF::MachSendRight *)v7);
  }
  return result;
}

void IPC::ArgumentCoder<std::tuple<std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL v3;
  _BYTE v4[64];
  int v5;
  char v6;
  char v7;
  char v8;

  IPC::Decoder::decode<std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>>(a1, (uint64_t)v4);
  if (v7)
  {
    IPC::ArgumentCoder<std::tuple<std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>>,void>::decode<IPC::Decoder,std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>>((uint64_t)v4, (uint64_t)a2);
    if (v7)
      v3 = v6 == 0;
    else
      v3 = 1;
    if (!v3 && v5 != -1)
      __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v5]((int)&v8, (WTF::MachSendRight *)v4);
  }
  else
  {
    *a2 = 0;
    a2[80] = 0;
  }
}

unsigned int *IPC::ArgumentCoder<std::tuple<std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>>,void>::decode<IPC::Decoder,std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  unsigned int *result;

  if (*(_BYTE *)(a1 + 80))
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 72) = 0;
    if (*(_BYTE *)(a1 + 72))
    {
      *(_DWORD *)(a2 + 64) = -1;
      result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>>((unsigned int *)a2, a1);
      *(_BYTE *)(a2 + 72) = 1;
    }
    *(_BYTE *)(a2 + 80) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WKCertificateInfoCreateWithServerTrust()
{
  return 0;
}

uint64_t WKCertificateInfoCreateWithCertficateChain()
{
  return 0;
}

uint64_t WKCertificateInfoGetCertificateChain()
{
  return 0;
}

uint64_t WKCertificateInfoGetServerTrust()
{
  return 0;
}

void *WKObjCTypeWrapperGetObject(void *result)
{
  void *v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    v2 = objc_msgSend(result, "_apiObject");
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2) == 8)
      return *(void **)(objc_msgSend(v1, "_apiObject") + 8);
    else
      return 0;
  }
  return result;
}

CFTypeRef WKURLRequestCreateWithNSURLRequest(void *a1)
{
  CFTypeRef v2;
  const void *v3;
  CFTypeRef v4;
  _BYTE v6[192];
  CFTypeRef cf;
  CFTypeRef *v8;

  if (objc_msgSend(a1, "HTTPBodyStream"))
    return 0;
  v3 = (const void *)objc_msgSend(a1, "copy");
  MEMORY[0x19AEAEC20](v6, v3);
  API::URLRequest::create((API::URLRequest *)v6, &v8);
  if (v8)
    v2 = v8[1];
  else
    v2 = 0;
  v8 = 0;
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v6);
  if (v3)
    CFRelease(v3);
  return v2;
}

void sub_197024650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,CFTypeRef cf)
{
  const void *v33;
  CFTypeRef v35;

  v35 = cf;
  cf = 0;
  if (v35)
    CFRelease(v35);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a9);
  if (v33)
    CFRelease(v33);
  _Unwind_Resume(a1);
}

uint64_t WKURLRequestCopyNSURLRequest(void *a1)
{
  if (a1)
    objc_msgSend(a1, "_apiObject");
  return objc_msgSend((id)WebCore::ResourceRequest::nsURLRequest(), "copy");
}

uint64_t WKURLResponseCreateWithNSURLResponse(void *a1)
{
  NSURLResponse *v1;
  WTF::StringImpl *v2;
  uint64_t v3;
  CFTypeRef v4;
  _BYTE v6[240];
  CFTypeRef cf;
  API::URLResponse *v8;

  v1 = (NSURLResponse *)objc_msgSend(a1, "copy");
  WebCore::ResourceResponse::ResourceResponse((WebCore::ResourceResponse *)v6, v1);
  API::URLResponse::create((API::URLResponse *)v6, &v8);
  if (v8)
    v3 = *((_QWORD *)v8 + 1);
  else
    v3 = 0;
  v8 = 0;
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v6, v2);
  if (v1)
    CFRelease(v1);
  return v3;
}

void sub_197024744(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,CFTypeRef cf)
{
  const void *v40;
  CFTypeRef v42;

  v42 = cf;
  cf = 0;
  if (v42)
    CFRelease(v42);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&a10, a2);
  if (v40)
    CFRelease(v40);
  _Unwind_Resume(a1);
}

uint64_t WKURLResponseCopyNSURLResponse(uint64_t a1)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  return objc_msgSend((id)WebCore::ResourceResponse::nsURLResponse((WebCore::ResourceResponse *)(a1 + 16)), "copy");
}

_QWORD *WebKit::PaymentSetupFeatures::PaymentSetupFeatures(_QWORD *a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", *(unsigned int *)(a2 + 12));
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = *(uint64_t **)a2;
    v7 = 8 * v5;
    do
    {
      v8 = *v6++;
      objc_msgSend(v4, "addObject:", *(_QWORD *)(v8 + 16));
      v7 -= 8;
    }
    while (v7);
  }
  *a1 = v4;
  if (v4)
    CFRetain(v4);
  return a1;
}

unint64_t WebKit::PaymentSetupFeatures::operator WTF::Vector<WTF::Ref<WebCore::ApplePaySetupFeature,WTF::RawPtrTraits<WebCore::ApplePaySetupFeature>,WTF::DefaultRefDerefTraits<WebCore::ApplePaySetupFeature>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  int v5;
  uint64_t v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  result = objc_msgSend(*a1, "count");
  v5 = result;
  if (result)
  {
    if (result >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v6 = WTF::fastMalloc((WTF *)(8 * result));
    *(_DWORD *)(a2 + 8) = v5;
    *(_QWORD *)a2 = v6;
  }
  else
  {
    v6 = 0;
  }
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v7 = *a1;
  result = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  v8 = result;
  if (result)
  {
    LODWORD(v9) = 0;
    v10 = *(_QWORD *)v18;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v18 != v10)
          objc_enumerationMutation(v7);
        if (WebCore::ApplePaySetupFeature::supportsFeature())
        {
          v12 = WTF::fastMalloc((WTF *)0x18);
          WebCore::ApplePaySetupFeature::ApplePaySetupFeature();
          v16 = (_DWORD *)v12;
          if ((_DWORD)v9 == *(_DWORD *)(a2 + 8))
          {
            v13 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v9 + 1, (unint64_t)&v16);
            v9 = *(unsigned int *)(a2 + 12);
            v6 = *(_QWORD *)a2;
            v14 = *v13;
            *v13 = 0;
            *(_QWORD *)(v6 + 8 * v9) = v14;
          }
          else
          {
            v16 = 0;
            *(_QWORD *)(v6 + 8 * v9) = v12;
          }
          LODWORD(v9) = v9 + 1;
          *(_DWORD *)(a2 + 12) = v9;
          v15 = v16;
          v16 = 0;
          if (v15)
          {
            if (v15[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
            else
              --v15[2];
          }
        }
        ++v11;
      }
      while (v8 != v11);
      result = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
      v8 = result;
    }
    while (result);
  }
  return result;
}

void sub_1970249EC(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  WTF::Vector<WTF::RefPtr<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::platformAutomaticReloadPaymentRequest@<X0>(WebKit *this@<X0>, const WebCore::ApplePayAutomaticReloadPaymentRequest *a2@<X1>, _QWORD *a3@<X8>)
{
  id v5;
  const __CFString *v6;
  uint64_t v7;
  void *v8;
  const __CFString *v9;
  void *v10;
  uint64_t result;

  v5 = objc_alloc((Class)((uint64_t (*)(WebKit *, const WebCore::ApplePayAutomaticReloadPaymentRequest *))*MEMORY[0x1E0DCE210])(this, a2));
  if (*(_QWORD *)this)
    v6 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v6 = &stru_1E351F1B8;
  v7 = WebCore::platformAutomaticReloadSummaryItem();
  v8 = (void *)MEMORY[0x1E0C99E98];
  if (*((_QWORD *)this + 12))
    v9 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v9 = &stru_1E351F1B8;
  v10 = (void *)objc_msgSend(v5, "initWithPaymentDescription:automaticReloadBilling:managementURL:", v6, v7, objc_msgSend(v8, "URLWithString:", v9));
  *a3 = v10;
  if (*((_QWORD *)this + 11))
    objc_msgSend(v10, "setBillingAgreement:", WTF::StringImpl::operator NSString *());
  result = *((_QWORD *)this + 13);
  if (result)
    return objc_msgSend(v10, "setTokenNotificationURL:", objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", WTF::StringImpl::operator NSString *()));
  return result;
}

void sub_197024B54(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  const void *v2;

  *v1 = 0;
  if (v2)
    CFRelease(v2);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::platformDeferredPaymentRequest@<X0>(WebKit *this@<X0>, const WebCore::ApplePayDeferredPaymentRequest *a2@<X1>, _QWORD *a3@<X8>)
{
  id v5;
  const __CFString *v6;
  uint64_t v7;
  void *v8;
  const __CFString *v9;
  void *v10;
  uint64_t v11;
  uint64_t result;

  v5 = objc_alloc((Class)((uint64_t (*)(WebKit *, const WebCore::ApplePayDeferredPaymentRequest *))*MEMORY[0x1E0DCE118])(this, a2));
  if (*((_QWORD *)this + 14))
    v6 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v6 = &stru_1E351F1B8;
  v7 = WebCore::platformDeferredSummaryItem();
  v8 = (void *)MEMORY[0x1E0C99E98];
  if (*((_QWORD *)this + 13))
    v9 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v9 = &stru_1E351F1B8;
  v10 = (void *)objc_msgSend(v5, "initWithPaymentDescription:deferredBilling:managementURL:", v6, v7, objc_msgSend(v8, "URLWithString:", v9));
  *a3 = v10;
  if (*(_QWORD *)this)
    objc_msgSend(v10, "setBillingAgreement:", WTF::StringImpl::operator NSString *());
  if (*((_QWORD *)this + 12))
  {
    v11 = objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneWithName:", WTF::StringImpl::operator NSString *());
    if (v11)
    {
      objc_msgSend(v10, "setFreeCancellationDate:", objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", *((double *)this + 11)));
      objc_msgSend(v10, "setFreeCancellationDateTimeZone:", v11);
    }
  }
  result = *((_QWORD *)this + 15);
  if (result)
    return objc_msgSend(v10, "setTokenNotificationURL:", objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", WTF::StringImpl::operator NSString *()));
  return result;
}

void sub_197024CD0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  const void *v2;

  *v1 = 0;
  if (v2)
    CFRelease(v2);
  _Unwind_Resume(exception_object);
}

void WebKit::platformDisbursementRequest(uint64_t a1@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  id v5;
  const __CFString *v6;
  const __CFString *v7;
  CFTypeRef v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  CFTypeRef v18;
  PAL *v19;
  PAL *v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t PassKitCore_PKContactFieldEmailAddress;
  void *v24;
  CFTypeRef cf;

  v5 = objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E0DCE0C8])());
  if (*(_QWORD *)(a1 + 16))
    v6 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v6 = &stru_1E351F1B8;
  if (*(_QWORD *)(a1 + 8))
    v7 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v7 = &stru_1E351F1B8;
  WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1 + 72, (uint64_t *)&cf);
  v8 = cf;
  v9 = *(unsigned __int8 *)(a1 + 88);
  v10 = *(unsigned __int8 *)(a1 + 89);
  v11 = *(unsigned __int8 *)(a1 + 90);
  v12 = *(unsigned __int8 *)(a1 + 91);
  v13 = *(unsigned __int8 *)(a1 + 92);
  v14 = WebCore::platformDisbursementSummaryItems();
  v15 = v9 | 2;
  if (!v10)
    v15 = v9;
  if (v11)
    v15 |= 4uLL;
  if (v12)
    v15 |= 8uLL;
  if (v13)
    v16 = v15 | 0x80;
  else
    v16 = v15;
  v17 = (void *)objc_msgSend(v5, "initWithMerchantIdentifier:currencyCode:regionCode:supportedNetworks:merchantCapabilities:summaryItems:", &stru_1E351F1B8, v6, v7, v8, v16, v14);
  v18 = cf;
  cf = 0;
  if (v18)
    CFRelease(v18);
  if (*(_BYTE *)(a2 + 16))
  {
    v19 = (PAL *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    if (!*(_BYTE *)(a2 + 16))
    {
      std::__throw_bad_optional_access[abi:sn180100]();
      __break(1u);
      return;
    }
    v20 = v19;
    v21 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v21)
    {
      v22 = *(_BYTE **)a2;
      do
      {
        switch(*v22)
        {
          case 0:
            PassKitCore_PKContactFieldEmailAddress = PAL::get_PassKitCore_PKContactFieldEmailAddress(v19);
            goto LABEL_26;
          case 1:
            PassKitCore_PKContactFieldEmailAddress = PAL::get_PassKitCore_PKContactFieldName(v19);
            goto LABEL_26;
          case 2:
            PassKitCore_PKContactFieldEmailAddress = PAL::get_PassKitCore_PKContactFieldPhoneticName(v19);
            goto LABEL_26;
          case 3:
            PassKitCore_PKContactFieldEmailAddress = PAL::get_PassKitCore_PKContactFieldPhoneNumber(v19);
            goto LABEL_26;
          case 4:
            PassKitCore_PKContactFieldEmailAddress = PAL::get_PassKitCore_PKContactFieldPostalAddress(v19);
LABEL_26:
            v19 = (PAL *)-[PAL addObject:](v20, "addObject:", PassKitCore_PKContactFieldEmailAddress);
            break;
          default:
            break;
        }
        ++v22;
        --v21;
      }
      while (v21);
    }
    v18 = (CFTypeRef)objc_msgSend(v17, "setRequiredRecipientContactFields:", -[PAL copy](v20, "copy"));
  }
  v24 = (void *)objc_msgSend(objc_alloc((Class)((uint64_t (*)(CFTypeRef))*MEMORY[0x1E0DCE1C8])(v18)), "initWithDisbursementRequest:", v17);
  *a3 = v24;
  objc_msgSend(v24, "setOriginatingURL:", WTF::URL::operator NSURL *());
  objc_msgSend(v24, "setAPIType:", 2);
  if (v17)
    CFRelease(v17);
}

void sub_197024F20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  const void *v12;

  if (v12)
    CFRelease(v12);
  _Unwind_Resume(exception_object);
}

void WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  const WTF::String *v5;
  uint64_t v6;
  void *v7;
  WTF *v8;
  uint64_t v9;
  const void *v10;
  CFTypeRef cf;

  v4 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a1 + 12));
  *a2 = v4;
  v6 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v6)
  {
    v7 = (void *)v4;
    v8 = *(WTF **)a1;
    v9 = 8 * v6;
    do
    {
      WTF::makeNSArrayElement(v8, v5);
      if (cf)
      {
        objc_msgSend(v7, "addObject:");
        v10 = cf;
        cf = 0;
        CFRelease(v10);
      }
      v8 = (WTF *)((char *)v8 + 8);
      v9 -= 8;
    }
    while (v9);
  }
}

void sub_197025008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  _QWORD *v10;
  const void *v11;

  if (cf)
    CFRelease(cf);
  *v10 = 0;
  if (v11)
    CFRelease(v11);
  _Unwind_Resume(exception_object);
}

WTF *WebKit::RemoteImageDecoderAVFManager::didReceiveMessage(WTF *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v3;
  _QWORD v4[2];
  IntSize v5;
  unsigned __int8 v6;
  char v7;

  if (*((_WORD *)a3 + 25) == 1101)
  {
    v3 = (uint64_t)this;
    this = (WTF *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long,WebCore::IntSize,BOOL>>((uint64_t *)a3, v4);
    if (v7)
      return WebKit::RemoteImageDecoderAVFManager::encodedDataStatusChanged(v3, v4, v4[1], &v5, v6);
  }
  return this;
}

WTF *`non-virtual thunk to'WebKit::RemoteImageDecoderAVFManager::didReceiveMessage(WebKit::RemoteImageDecoderAVFManager *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  return WebKit::RemoteImageDecoderAVFManager::didReceiveMessage((WebKit::RemoteImageDecoderAVFManager *)((char *)this - 8), a2, a3);
}

void WebKit::RemoteImageDecoderAVFProxy::didReceiveMessage(WebKit::RemoteImageDecoderAVFProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  int v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  char v8;

  v4 = *((unsigned __int16 *)a3 + 25);
  switch(v4)
  {
    case 1102:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>>((uint64_t *)a3, &v7);
      if (v8)
        WebKit::RemoteImageDecoderAVFProxy::clearFrameBufferCache((uint64_t)this, v7);
      break;
    case 1104:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,long long>>((uint64_t *)a3, (uint64_t)&v7);
      if (v8)
        WebKit::RemoteImageDecoderAVFProxy::setExpectedContentSize((uint64_t)this, v7);
      break;
    case 1103:
      v5 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v6)
        WebKit::RemoteImageDecoderAVFProxy::deleteDecoder(this, v5);
      break;
  }
}

uint64_t WebKit::RemoteImageDecoderAVFProxy::didReceiveSyncMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, uint64_t *a4)
{
  int v4;

  v4 = *(unsigned __int16 *)(a3 + 50);
  switch(v4)
  {
    case 3622:
      return IPC::handleMessageSynchronous<Messages::RemoteImageDecoderAVFProxy::SetData,WebKit::RemoteImageDecoderAVFProxy,WebKit::RemoteImageDecoderAVFProxy,void ()(WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::SharedBufferReference const&,BOOL,WTF::CompletionHandler<void ()(unsigned long,WebCore::IntSize const&,BOOL,std::optional<WTF::Vector<WebCore::ImageDecoderFrameInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, unint64_t, uint64_t *, BOOL, _QWORD **))WebKit::RemoteImageDecoderAVFProxy::setData, 0);
    case 3621:
      return IPC::handleMessageSynchronous<Messages::RemoteImageDecoderAVFProxy::CreateFrameImageAtIndex,WebKit::RemoteImageDecoderAVFProxy,WebKit::RemoteImageDecoderAVFProxy,void ()(WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&)>(a2, (uint64_t *)a3, (IPC::Encoder **)a4, a1, (void (*)(_QWORD *, _QWORD, _QWORD, _QWORD **))WebKit::RemoteImageDecoderAVFProxy::createFrameImageAtIndex, 0);
    case 3620:
      return IPC::handleMessageSynchronous<Messages::RemoteImageDecoderAVFProxy::CreateDecoder,WebKit::RemoteImageDecoderAVFProxy,WebKit::RemoteImageDecoderAVFProxy,void ()(IPC::SharedBufferReference const&,WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> &&)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, uint64_t *, WTF::StringImpl **, WTF::StringImpl **))WebKit::RemoteImageDecoderAVFProxy::createDecoder, 0);
  }
  return 0;
}

uint64_t IPC::handleMessageSynchronous<Messages::RemoteImageDecoderAVFProxy::CreateDecoder,WebKit::RemoteImageDecoderAVFProxy,WebKit::RemoteImageDecoderAVFProxy,void ()(IPC::SharedBufferReference const&,WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *, uint64_t *, WTF::StringImpl **, WTF::StringImpl **), uint64_t a6)
{
  void *v12;
  uint64_t result;
  __int128 v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  void *v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  uint64_t v30;
  __int128 v31;
  WTF::StringImpl *v32;
  char v33;
  _BYTE v34[24];
  char v35;
  WTF::StringImpl *v36;
  char v37;

  IPC::Decoder::decode<IPC::SharedBufferReference>(a2, (uint64_t)v34);
  if (v35 && (result = (uint64_t)IPC::Decoder::decode<WTF::String>(a2, &v36), v37))
  {
    if (v35)
    {
      v30 = *(_QWORD *)v34;
      v14 = *(_OWORD *)&v34[8];
      *(_OWORD *)&v34[8] = 0u;
      v31 = v14;
      v32 = v36;
      v33 = 1;
      std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v34, v12);
      v15 = *a3;
      *a3 = 0;
      *(_QWORD *)v34 = v15;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v34[8], a1);
      v16 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v16 = off_1E34B7398;
      *((_QWORD *)v16 + 1) = *(_QWORD *)v34;
      v17 = *(_QWORD *)&v34[8];
      *(_OWORD *)v34 = 0u;
      *((_QWORD *)v16 + 2) = v17;
      v36 = v16;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v34[8]);
      v19 = *(IPC::Encoder **)v34;
      *(_QWORD *)v34 = 0;
      if (v19)
      {
        IPC::Encoder::~Encoder(v19, v18);
        WTF::fastFree(v20, v21);
      }
      v22 = (_QWORD *)(a4 + (a6 >> 1));
      if ((a6 & 1) != 0)
        a5 = *(void (**)(_QWORD *, uint64_t *, WTF::StringImpl **, WTF::StringImpl **))(*v22 + a5);
      a5(v22, &v30, &v32, &v36);
      v24 = v36;
      v36 = 0;
      if (v24)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v24 + 8))(v24);
      if (v33)
      {
        v25 = v32;
        v32 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v23);
          else
            *(_DWORD *)v25 -= 2;
        }
        v28 = (unsigned int *)*((_QWORD *)&v31 + 1);
        *((_QWORD *)&v31 + 1) = 0;
        if (v28)
          WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v28);
        v29 = (unsigned int *)v31;
        *(_QWORD *)&v31 = 0;
        if (v29)
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v29, v23);
      }
      return 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v34, v12);
    v26 = *a2;
    v27 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
    {
      if (v27)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v26);
      return 0;
    }
  }
  return result;
}

uint64_t IPC::handleMessageSynchronous<Messages::RemoteImageDecoderAVFProxy::SetData,WebKit::RemoteImageDecoderAVFProxy,WebKit::RemoteImageDecoderAVFProxy,void ()(WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::SharedBufferReference const&,BOOL,WTF::CompletionHandler<void ()(unsigned long,WebCore::IntSize const&,BOOL,std::optional<WTF::Vector<WebCore::ImageDecoderFrameInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *, unint64_t, uint64_t *, BOOL, _QWORD **), uint64_t a6)
{
  unint64_t v12;
  char v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unsigned int v19;
  __int128 v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  IPC::Encoder *v25;
  WTF *v26;
  void *v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  unsigned int *v31;
  unsigned int *v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  __int128 v44;
  BOOL v45;
  char v46;
  _BYTE v47[24];
  char v48;

  v12 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v13)
  {
    v14 = v12;
    IPC::Decoder::decode<IPC::SharedBufferReference>(a2, (uint64_t)v47);
    if (!v48)
    {
LABEL_21:
      std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v47, v15);
      goto LABEL_22;
    }
    v16 = a2[1];
    v15 = (char *)*a2;
    v17 = a2[2] - *a2;
    if (v16 <= v17)
    {
      v34 = 0;
      v35 = 0;
      *a2 = 0;
      a2[1] = 0;
      v36 = a2[3];
      if (v36)
      {
        if (v16)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
          v35 = *a2;
          v34 = a2[1];
        }
        else
        {
          v34 = 0;
          v35 = 0;
        }
      }
    }
    else
    {
      v18 = &v15[v17];
      a2[2] = (uint64_t)(v18 + 1);
      if (v15)
      {
        v19 = *v18;
        if (v19 < 2)
        {
          v42 = v14;
          v43 = *(_QWORD *)v47;
          v20 = *(_OWORD *)&v47[8];
          *(_OWORD *)&v47[8] = 0u;
          v44 = v20;
          v45 = v19 != 0;
          v46 = 1;
          std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v47, v15);
          v21 = *a3;
          *a3 = 0;
          *(_QWORD *)v47 = v21;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v47[8], a1);
          v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v22 = off_1E34B73C0;
          v22[1] = *(_QWORD *)v47;
          v23 = *(_QWORD *)&v47[8];
          *(_OWORD *)v47 = 0u;
          v22[2] = v23;
          v41 = v22;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v47[8]);
          v25 = *(IPC::Encoder **)v47;
          *(_QWORD *)v47 = 0;
          if (v25)
          {
            IPC::Encoder::~Encoder(v25, v24);
            WTF::fastFree(v26, v27);
          }
          v28 = (_QWORD *)(a4 + (a6 >> 1));
          if ((a6 & 1) != 0)
            a5 = *(void (**)(_QWORD *, unint64_t, uint64_t *, BOOL, _QWORD **))(*v28 + a5);
          a5(v28, v42, &v43, v19 != 0, &v41);
          v30 = v41;
          v41 = 0;
          if (v30)
            (*(void (**)(_QWORD *))(*v30 + 8))(v30);
          if (v46)
          {
            v31 = (unsigned int *)*((_QWORD *)&v44 + 1);
            *((_QWORD *)&v44 + 1) = 0;
            if (v31)
              WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v31);
            v32 = (unsigned int *)v44;
            *(_QWORD *)&v44 = 0;
            if (v32)
              WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v32, v29);
          }
          return 1;
        }
        goto LABEL_20;
      }
      v34 = v16;
      v35 = 0;
    }
    v16 = 0;
    v15 = 0;
    *a2 = 0;
    a2[1] = 0;
    v37 = a2[3];
    if (v37)
    {
      if (v34)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v35, v34);
        v15 = (char *)*a2;
        v16 = a2[1];
      }
      else
      {
        v16 = 0;
        v15 = 0;
      }
    }
LABEL_20:
    *a2 = 0;
    a2[1] = 0;
    v38 = a2[3];
    if (v38 && v16)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v38 + 16))(v38, v15);
    goto LABEL_21;
  }
LABEL_22:
  v39 = *a2;
  v40 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v40)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v39);
    return 0;
  }
  return result;
}

BOOL IPC::handleMessageSynchronous<Messages::RemoteImageDecoderAVFProxy::CreateFrameImageAtIndex,WebKit::RemoteImageDecoderAVFProxy,WebKit::RemoteImageDecoderAVFProxy,void ()(WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _QWORD, _QWORD, _QWORD **), uint64_t a6)
{
  int v11;
  IPC::Encoder *v12;
  _QWORD *v13;
  unsigned __int8 **v14;
  _BOOL8 result;
  _QWORD *v16;
  _QWORD *v17;
  IPC::Encoder *v18;
  unsigned __int8 **v19;
  _QWORD *v20;
  _QWORD v21[2];
  unsigned __int8 v22;

  IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>>(a2, v21);
  v11 = v22;
  if (!v22)
    return v11 != 0;
  v12 = *a3;
  *a3 = 0;
  v18 = v12;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v19, a1);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = off_1E34B73E8;
  v13[1] = v18;
  v14 = v19;
  v19 = 0;
  v13[2] = v14;
  v20 = v13;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v19);
  result = 0;
  if (v22)
  {
    v16 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, _QWORD, _QWORD, _QWORD **))(*v16 + a5);
    a5(v16, v21[0], v21[1], &v20);
    v17 = v20;
    v20 = 0;
    if (v17)
      (*(void (**)(_QWORD *))(*v17 + 8))(v17);
    return v11 != 0;
  }
  __break(1u);
  return result;
}

void WebKit::RemoteMediaRecorderManager::didReceiveMessage(WebKit::RemoteMediaRecorderManager *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  int v4;
  unint64_t v5;
  char v6;

  v4 = *((unsigned __int16 *)a3 + 25);
  if (v4 == 1181)
  {
    v5 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
    if (v6)
      WebKit::RemoteMediaRecorderManager::releaseRecorder(this, v5);
  }
  else if (v4 == 1180)
  {
    IPC::handleMessageAsync<Messages::RemoteMediaRecorderManager::CreateRecorder,WebKit::RemoteMediaRecorderManager,WebKit::RemoteMediaRecorderManager,void ()(WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL,BOOL,WebCore::MediaRecorderPrivateOptions const&,WTF::CompletionHandler<void ()(std::optional<WebCore::ExceptionData> &&,WTF::String &&,unsigned int,unsigned int)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, unint64_t, BOOL, BOOL, WTF::StringImpl **, WTF::StringImpl **))WebKit::RemoteMediaRecorderManager::createRecorder, 0);
  }
}

WTF::StringImpl *IPC::handleMessageAsync<Messages::RemoteMediaRecorderManager::CreateRecorder,WebKit::RemoteMediaRecorderManager,WebKit::RemoteMediaRecorderManager,void ()(WTF::ObjectIdentifierGeneric<WebKit::MediaRecorderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL,BOOL,WebCore::MediaRecorderPrivateOptions const&,WTF::CompletionHandler<void ()(std::optional<WebCore::ExceptionData> &&,WTF::String &&,unsigned int,unsigned int)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, unint64_t, BOOL, BOOL, WTF::StringImpl **, WTF::StringImpl **), uint64_t a5)
{
  unint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  _QWORD *v23;
  WTF::StringImpl *result;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  unint64_t v41;
  BOOL v42;
  BOOL v43;
  WTF::StringImpl *v44;
  _BYTE v45[21];
  char v46;
  WTF::StringImpl *v47;
  _BYTE v48[21];
  char v49;

  v10 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v11)
  {
    v12 = a2[1];
    v13 = *a2;
    v14 = a2[2] - *a2;
    if (v12 <= v14)
    {
      v25 = 0;
      v26 = 0;
      *a2 = 0;
      a2[1] = 0;
      v27 = a2[3];
      if (v27)
      {
        if (v12)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
          v26 = *a2;
          v25 = a2[1];
        }
        else
        {
          v25 = 0;
          v26 = 0;
        }
      }
    }
    else
    {
      v15 = (unsigned __int8 *)(v13 + v14);
      a2[2] = (uint64_t)(v15 + 1);
      if (v13)
      {
        v16 = *v15;
        if (v16 < 2)
        {
          if (v12 <= (unint64_t)&v15[-v13 + 1])
          {
            v30 = 0;
            v31 = 0;
            *a2 = 0;
            a2[1] = 0;
            v32 = a2[3];
            if (v32)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
              v30 = 0;
              v37 = *a2;
              v38 = a2[1];
              v39 = a2[3];
              *a2 = 0;
              a2[1] = 0;
              v31 = 0;
              if (v39)
              {
                if (v38)
                {
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 16))(v39, v37);
                  v31 = *a2;
                  v30 = a2[1];
                }
              }
            }
          }
          else
          {
            a2[2] = (uint64_t)(v15 + 2);
            v17 = v15[1];
            if (v17 < 2)
            {
              v18 = v10;
              IPC::ArgumentCoder<WebCore::MediaRecorderPrivateOptions,void>::decode(a2, (uint64_t)&v47);
              if (v49)
              {
                v41 = v18;
                v42 = v16 != 0;
                v43 = v17 != 0;
                v44 = v47;
                *(_OWORD *)v45 = *(_OWORD *)v48;
                *(_QWORD *)&v45[13] = *(_QWORD *)&v48[13];
                v46 = 1;
                v19 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
                if (!(_BYTE)v20)
                  goto LABEL_14;
                v47 = (WTF::StringImpl *)v19;
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)v48, a1);
                v21 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
                *(_QWORD *)v21 = off_1E34B7410;
                *((_QWORD *)v21 + 1) = v47;
                v22 = *(_QWORD *)v48;
                *(_QWORD *)v48 = 0;
                *((_QWORD *)v21 + 2) = v22;
                v40 = v21;
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v48);
                v23 = (_QWORD *)(a3 + (a5 >> 1));
                if ((a5 & 1) != 0)
                  a4 = *(void (**)(_QWORD *, unint64_t, BOOL, BOOL, WTF::StringImpl **, WTF::StringImpl **))(*v23 + a4);
                a4(v23, v41, v16 != 0, v17 != 0, &v44, &v40);
                result = v40;
                v40 = 0;
                if (result)
                  result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
                if (v46)
                {
LABEL_14:
                  result = v44;
                  v44 = 0;
                  if (result)
                  {
                    if (*(_DWORD *)result == 2)
                      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v20);
                    else
                      *(_DWORD *)result -= 2;
                  }
                }
                return result;
              }
LABEL_22:
              v13 = *a2;
              v12 = a2[1];
              goto LABEL_23;
            }
            v30 = v12;
            v31 = v13;
          }
          *a2 = 0;
          a2[1] = 0;
          v33 = a2[3];
          if (v33 && v30)
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v33 + 16))(v33, v31, v30);
          goto LABEL_28;
        }
        goto LABEL_23;
      }
      v25 = v12;
      v26 = 0;
    }
    v12 = 0;
    v13 = 0;
    *a2 = 0;
    a2[1] = 0;
    v28 = a2[3];
    if (v28)
    {
      if (!v25)
      {
        v12 = 0;
        v13 = 0;
        goto LABEL_23;
      }
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v28 + 16))(v28, v26, v25);
      goto LABEL_22;
    }
LABEL_23:
    *a2 = 0;
    a2[1] = 0;
    v29 = a2[3];
    if (v29 && v12)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, v13);
  }
LABEL_28:
  v34 = *a2;
  v35 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (WTF::StringImpl *)a2[3];
  if (result)
    v36 = v35 == 0;
  else
    v36 = 1;
  if (!v36)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v34);
  return result;
}

void WebKit::RemoteMediaRecorder::didReceiveMessage(WebKit::RemoteMediaRecorder *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  _BYTE v7[16];
  int v8;
  char v9;
  char v10;
  char v11;

  switch(*((_WORD *)a3 + 25))
  {
    case 0x49E:
      IPC::Decoder::decode<std::tuple<WTF::MediaTime,unsigned long long>>((uint64_t *)a3, &v4);
      if (v7[0])
        WebKit::RemoteMediaRecorder::audioSamplesAvailable((uint64_t)this, v4, v5, v6);
      break;
    case 0x49F:
      IPC::Decoder::decode<std::tuple<WebKit::ConsumerSharedCARingBufferHandle,WebCore::CAAudioStreamDescription>>(a3, &v4);
      if (v10)
        WebKit::RemoteMediaRecorder::audioSamplesStorageChanged((uint64_t)this, (uint64_t)&v4, (uint64_t)v7);
      std::__optional_destruct_base<std::tuple<WebKit::ConsumerSharedCARingBufferHandle,WebCore::CAAudioStreamDescription>,false>::~__optional_destruct_base[abi:sn180100](&v4);
      break;
    case 0x4A0:
      IPC::handleMessageAsync<Messages::RemoteMediaRecorder::FetchData,WebKit::RemoteMediaRecorder,WebKit::RemoteMediaRecorder,void ()(WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>,double)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, _QWORD **))WebKit::RemoteMediaRecorder::fetchData, 0);
      break;
    case 0x4A1:
      IPC::handleMessageAsync<Messages::RemoteMediaRecorder::Pause,WebKit::RemoteMediaRecorder,WebKit::RemoteMediaRecorder,void ()(WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, _QWORD **))WebKit::RemoteMediaRecorder::pause, 0);
      break;
    case 0x4A2:
      IPC::handleMessageAsync<Messages::RemoteMediaRecorder::Resume,WebKit::RemoteMediaRecorder,WebKit::RemoteMediaRecorder,void ()(WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, _QWORD **))WebKit::RemoteMediaRecorder::resume, 0);
      break;
    case 0x4A3:
      IPC::Decoder::decode<std::tuple<WebCore::SharedMemoryHandle>>(a3, (uint64_t)&v4);
      if ((_BYTE)v6)
      {
        WebKit::SharedVideoFrameReader::setSharedMemory((uint64_t)this + 160);
        if ((_BYTE)v6)
          goto LABEL_16;
      }
      break;
    case 0x4A4:
      IPC::Decoder::decode<std::tuple<IPC::Semaphore>>(a3, (uint64_t)&v4);
      if ((_BYTE)v5)
      {
        std::optional<IPC::Semaphore>::operator=[abi:sn180100]<IPC::Semaphore,void>((WebKit::RemoteMediaRecorder *)((char *)this + 176), (IPC::Semaphore *)&v4);
        if ((_BYTE)v5)
        {
          IPC::Semaphore::destroy((IPC::Semaphore *)&v4);
LABEL_16:
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v4);
        }
      }
      break;
    case 0x4A5:
      IPC::handleMessageAsync<Messages::RemoteMediaRecorder::StopRecording,WebKit::RemoteMediaRecorder,WebKit::RemoteMediaRecorder,void ()(WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, _QWORD **))WebKit::RemoteMediaRecorder::stopRecording, 0);
      break;
    case 0x4A6:
      IPC::Decoder::decode<std::tuple<WebKit::SharedVideoFrame>>((uint64_t *)a3, (uint64_t)&v4);
      if (v9)
      {
        WebKit::RemoteMediaRecorder::videoFrameAvailable((uint64_t)this, (uint64_t)&v4);
        if (v9)
        {
          if (v8 != -1)
            ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEENS8_13MachSendRightEN7WebCore7IntSizeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_1[v8])(&v11, v7);
        }
      }
      break;
    default:
      return;
  }
}

unint64_t IPC::handleMessageAsync<Messages::RemoteMediaRecorder::FetchData,WebKit::RemoteMediaRecorder,WebKit::RemoteMediaRecorder,void ()(WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>,double)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, _QWORD **), uint64_t a5)
{
  unint64_t result;
  char v10;
  _QWORD *v11;
  unsigned __int8 **v12;
  _QWORD *v13;
  unint64_t v14;
  unsigned __int8 **v15;
  _QWORD *v16;

  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v10)
  {
    v14 = result;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v15, a1);
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v11 = off_1E34B7458;
    v11[1] = v14;
    v12 = v15;
    v15 = 0;
    v16 = v11;
    v11[2] = v12;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v15);
    v13 = (_QWORD *)(a3 + (a5 >> 1));
    if ((a5 & 1) != 0)
      a4 = *(void (**)(_QWORD *, _QWORD **))(*v13 + a4);
    a4(v13, &v16);
    result = (unint64_t)v16;
    v16 = 0;
    if (result)
      return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

unint64_t IPC::handleMessageAsync<Messages::RemoteMediaRecorder::StopRecording,WebKit::RemoteMediaRecorder,WebKit::RemoteMediaRecorder,void ()(WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, _QWORD **), uint64_t a5)
{
  unint64_t result;
  char v10;
  _QWORD *v11;
  unsigned __int8 **v12;
  _QWORD *v13;
  unint64_t v14;
  unsigned __int8 **v15;
  _QWORD *v16;

  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v10)
  {
    v14 = result;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v15, a1);
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v11 = off_1E34B7480;
    v11[1] = v14;
    v12 = v15;
    v15 = 0;
    v16 = v11;
    v11[2] = v12;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v15);
    v13 = (_QWORD *)(a3 + (a5 >> 1));
    if ((a5 & 1) != 0)
      a4 = *(void (**)(_QWORD *, _QWORD **))(*v13 + a4);
    a4(v13, &v16);
    result = (unint64_t)v16;
    v16 = 0;
    if (result)
      return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

unint64_t IPC::handleMessageAsync<Messages::RemoteMediaRecorder::Pause,WebKit::RemoteMediaRecorder,WebKit::RemoteMediaRecorder,void ()(WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, _QWORD **), uint64_t a5)
{
  unint64_t result;
  char v10;
  _QWORD *v11;
  unsigned __int8 **v12;
  _QWORD *v13;
  unint64_t v14;
  unsigned __int8 **v15;
  _QWORD *v16;

  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v10)
  {
    v14 = result;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v15, a1);
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v11 = off_1E34B74A8;
    v11[1] = v14;
    v12 = v15;
    v15 = 0;
    v16 = v11;
    v11[2] = v12;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v15);
    v13 = (_QWORD *)(a3 + (a5 >> 1));
    if ((a5 & 1) != 0)
      a4 = *(void (**)(_QWORD *, _QWORD **))(*v13 + a4);
    a4(v13, &v16);
    result = (unint64_t)v16;
    v16 = 0;
    if (result)
      return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

unint64_t IPC::handleMessageAsync<Messages::RemoteMediaRecorder::Resume,WebKit::RemoteMediaRecorder,WebKit::RemoteMediaRecorder,void ()(WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, _QWORD **), uint64_t a5)
{
  unint64_t result;
  char v10;
  _QWORD *v11;
  unsigned __int8 **v12;
  _QWORD *v13;
  unint64_t v14;
  unsigned __int8 **v15;
  _QWORD *v16;

  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v10)
  {
    v14 = result;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v15, a1);
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v11 = off_1E34B74D0;
    v11[1] = v14;
    v12 = v15;
    v15 = 0;
    v16 = v11;
    v11[2] = v12;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v15);
    v13 = (_QWORD *)(a3 + (a5 >> 1));
    if ((a5 & 1) != 0)
      a4 = *(void (**)(_QWORD *, _QWORD **))(*v13 + a4);
    a4(v13, &v16);
    result = (unint64_t)v16;
    v16 = 0;
    if (result)
      return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

WTF::StringImpl *WebKit::RemoteMediaSessionHelper::didReceiveMessage(WTF::StringImpl *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  __int128 v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  unsigned __int8 *v19;
  unint64_t v20;
  unsigned __int8 *v21;
  unint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (**v44)(WebKit::MediaPlaybackTargetContextSerialized *__hidden);
  char v45;
  WTF::StringImpl *v46;
  int v47;
  WTF::StringImpl *v48[2];
  char v49;
  _BYTE v50[16];
  WTF::StringImpl *v51;
  int v52;
  __int128 v53;
  char v54;

  v4 = (uint64_t)this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x4C0:
      v5 = *((_QWORD *)a3 + 1);
      v6 = *(_QWORD *)a3;
      v7 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
      if (v5 <= v7)
        goto LABEL_46;
      v8 = (unsigned __int8 *)(v6 + v7);
      *((_QWORD *)a3 + 2) = v8 + 1;
      if (!v6)
        goto LABEL_71;
      if (*v8 >= 2u)
        goto LABEL_48;
      return (WTF::StringImpl *)WebCore::MediaSessionHelper::activeAudioRouteDidChange();
    case 0x4C1:
      v5 = *((_QWORD *)a3 + 1);
      v6 = *(_QWORD *)a3;
      v20 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
      if (v5 <= v20)
        goto LABEL_46;
      v21 = (unsigned __int8 *)(v6 + v20);
      *((_QWORD *)a3 + 2) = v21 + 1;
      if (!v6)
        goto LABEL_71;
      if (*v21 >= 2u)
        goto LABEL_48;
      return (WTF::StringImpl *)WebCore::MediaSessionHelper::activeAudioRouteSupportsSpatialPlaybackDidChange();
    case 0x4C2:
      v9 = *((_QWORD *)a3 + 1);
      v10 = *(_QWORD *)a3;
      v11 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
      if (v9 <= v11)
      {
        v36 = 0;
        v37 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v38 = *((_QWORD *)a3 + 3);
        if (v38)
        {
          if (v9)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
            v37 = *(_QWORD *)a3;
            v36 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v36 = 0;
            v37 = 0;
          }
        }
      }
      else
      {
        v12 = (unsigned __int8 *)(v10 + v11);
        *((_QWORD *)a3 + 2) = v12 + 1;
        if (v10)
        {
          v13 = *v12;
          if (v13 < 2)
          {
            IPC::Decoder::decode<WebKit::MediaPlaybackTargetContextSerialized>((uint64_t *)a3, (uint64_t)v50);
            if (v54)
            {
              v45 = v50[8];
              v44 = off_1E34AE7F0;
              v46 = v51;
              v47 = v52;
              v15 = v53;
              v51 = 0;
              v53 = 0uLL;
              *(_OWORD *)v48 = v15;
              v49 = 1;
              std::__optional_destruct_base<WebKit::MediaPlaybackTargetContextSerialized,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v50, v14);
              this = (WTF::StringImpl *)WebKit::RemoteMediaSessionHelper::activeVideoRouteDidChange(v4, v13 != 0, (WebKit::MediaPlaybackTargetContextSerialized *)&v44);
              if (v49)
              {
                v17 = v48[1];
                v48[1] = 0;
                if (v17)
                {
                  if (*(_DWORD *)v17 == 2)
                    WTF::StringImpl::destroy(v17, v16);
                  else
                    *(_DWORD *)v17 -= 2;
                }
                v26 = v48[0];
                v48[0] = 0;
                if (v26)
                {
                  if (*(_DWORD *)v26 == 2)
                    WTF::StringImpl::destroy(v26, v16);
                  else
                    *(_DWORD *)v26 -= 2;
                }
                this = v46;
                v46 = 0;
                if (this)
                {
                  if (*(_DWORD *)this == 2)
                    return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v16);
                  else
                    *(_DWORD *)this -= 2;
                }
              }
              return this;
            }
            std::__optional_destruct_base<WebKit::MediaPlaybackTargetContextSerialized,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v50, v14);
LABEL_33:
            v24 = *(_QWORD *)a3;
            v25 = *((_QWORD *)a3 + 1);
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            this = (WTF::StringImpl *)*((_QWORD *)a3 + 3);
            if (this && v25)
              return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)this + 16))(this, v24);
            return this;
          }
LABEL_56:
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v40 = *((_QWORD *)a3 + 3);
          if (v40)
          {
            if (v9)
            {
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 16))(v40, v10);
              v41 = *((_QWORD *)a3 + 3);
              v42 = *(_QWORD *)a3;
              v43 = *((_QWORD *)a3 + 1);
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              if (v41)
              {
                if (v43)
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v41 + 16))(v41, v42);
              }
            }
          }
          goto LABEL_33;
        }
        v36 = v9;
        v37 = 0;
      }
      v9 = 0;
      v10 = 0;
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v39 = *((_QWORD *)a3 + 3);
      if (v39)
      {
        if (v36)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v39 + 16))(v39, v37, v36);
          v10 = *(_QWORD *)a3;
          v9 = *((_QWORD *)a3 + 1);
        }
        else
        {
          v9 = 0;
          v10 = 0;
        }
      }
      goto LABEL_56;
    case 0x4C3:
      return (WTF::StringImpl *)WebCore::MediaSessionHelper::applicationDidBecomeActive(this);
    case 0x4C4:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WebCore::MediaSessionHelperClient::SuspendedUnderLock>>(a3);
      if ((unsigned __int16)this >= 0x100u)
        return (WTF::StringImpl *)WebCore::MediaSessionHelper::applicationDidEnterBackground();
      return this;
    case 0x4C5:
      return (WTF::StringImpl *)WebCore::MediaSessionHelper::applicationWillBecomeInactive(this);
    case 0x4C6:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WebCore::MediaSessionHelperClient::SuspendedUnderLock>>(a3);
      if ((unsigned __int16)this >= 0x100u)
        return (WTF::StringImpl *)WebCore::MediaSessionHelper::applicationWillEnterForeground();
      return this;
    case 0x4C7:
      v5 = *((_QWORD *)a3 + 1);
      v6 = *(_QWORD *)a3;
      v18 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
      if (v5 <= v18)
        goto LABEL_46;
      v19 = (unsigned __int8 *)(v6 + v18);
      *((_QWORD *)a3 + 2) = v19 + 1;
      if (!v6)
        goto LABEL_71;
      if (*v19 >= 2u)
        goto LABEL_48;
      return (WTF::StringImpl *)WebCore::MediaSessionHelper::externalOutputDeviceAvailableDidChange();
    case 0x4C8:
      v5 = *((_QWORD *)a3 + 1);
      v6 = *(_QWORD *)a3;
      v22 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
      if (v5 <= v22)
      {
LABEL_46:
        v27 = 0;
        v28 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v29 = *((_QWORD *)a3 + 3);
        if (v29)
        {
          if (v5)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
            v28 = *(_QWORD *)a3;
            v27 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v27 = 0;
            v28 = 0;
          }
        }
        goto LABEL_47;
      }
      v23 = (unsigned __int8 *)(v6 + v22);
      *((_QWORD *)a3 + 2) = v23 + 1;
      if (!v6)
      {
LABEL_71:
        v27 = v5;
        v28 = v6;
LABEL_47:
        v5 = 0;
        v6 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v30 = *((_QWORD *)a3 + 3);
        if (v30)
        {
          if (v27)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v30 + 16))(v30, v28, v27);
            v6 = *(_QWORD *)a3;
            v5 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v5 = 0;
            v6 = 0;
          }
        }
        goto LABEL_48;
      }
      if (*v23 < 2u)
        return (WTF::StringImpl *)WebCore::MediaSessionHelper::isPlayingToAutomotiveHeadUnitDidChange();
LABEL_48:
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v31 = *((_QWORD *)a3 + 3);
      if (v31 && v5)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 16))(v31, v6);
      v32 = *(_QWORD *)a3;
      v33 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      this = (WTF::StringImpl *)*((_QWORD *)a3 + 3);
      if (this)
      {
        if (v33)
        {
          (*(void (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)this + 16))(this, v32);
          v34 = *(_QWORD *)a3;
          v35 = *((_QWORD *)a3 + 1);
          this = (WTF::StringImpl *)*((_QWORD *)a3 + 3);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          if (this)
          {
            if (v35)
              return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)this + 16))(this, v34);
          }
        }
      }
      return this;
    default:
      return this;
  }
}

WTF::StringImpl *`non-virtual thunk to'WebKit::RemoteMediaSessionHelper::didReceiveMessage(WebKit::RemoteMediaSessionHelper *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  return WebKit::RemoteMediaSessionHelper::didReceiveMessage((WebKit::RemoteMediaSessionHelper *)((char *)this - 56), a2, a3);
}

void WebKit::RemoteImageDecoderAVFProxy::~RemoteImageDecoderAVFProxy(WebKit::RemoteImageDecoderAVFProxy *this)
{
  WTF *v1;
  void *v2;

  WebKit::RemoteImageDecoderAVFProxy::~RemoteImageDecoderAVFProxy(this);
  WTF::fastFree(v1, v2);
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned __int8 *v11;

  *(_QWORD *)this = off_1E34B75D0;
  WTF::MachSendRight::~MachSendRight((WebKit::RemoteImageDecoderAVFProxy *)((char *)this + 40));
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)(v3 + 16 * i) != -1)
        {
          v6 = v3 + 16 * i;
          v7 = *(unsigned int **)(v6 + 8);
          *(_QWORD *)(v6 + 8) = 0;
          if (v7)
          {
            v8 = v7 + 2;
            do
            {
              v9 = __ldaxr(v8);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, v8));
            if (!v10)
            {
              atomic_store(1u, v7 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), v2);
  }
  v11 = (unsigned __int8 *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v11)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v11, v2);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v2);
}

void WebKit::RemoteMediaSessionHelper::~RemoteMediaSessionHelper(WebKit::RemoteMediaSessionHelper *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebKit::RemoteMediaSessionHelper::~RemoteMediaSessionHelper(this, a2);
  WTF::fastFree(v2, v3);
}

{
  unsigned __int8 *v3;
  void *v4;
  _DWORD *v5;
  uint64_t v6;

  v3 = (unsigned __int8 *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  *((_QWORD *)this + 7) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 8, a2);
  *(_QWORD *)this = off_1E34B7350;
  v5 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = *((_QWORD *)this + 2);
  if (v6)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v6, v4);
}

unsigned __int8 *WebKit::RemoteMediaSessionHelper::ref(unsigned __int8 **this)
{
  return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(this[1]);
}

unsigned __int8 *WebKit::RemoteMediaSessionHelper::deref(unsigned __int8 **this, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(this[1], a2);
}

uint64_t WebKit::RemoteMediaSessionHelper::controlBlock(WebKit::RemoteMediaSessionHelper *this)
{
  return *((_QWORD *)this + 1);
}

void `non-virtual thunk to'WebKit::RemoteMediaSessionHelper::~RemoteMediaSessionHelper(WebKit::RemoteMediaSessionHelper *this, void *a2)
{
  WebKit::RemoteMediaSessionHelper::~RemoteMediaSessionHelper((WebKit::RemoteMediaSessionHelper *)((char *)this - 56), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteMediaSessionHelper::~RemoteMediaSessionHelper((WebKit::RemoteMediaSessionHelper *)((char *)this - 56), a2);
  WTF::fastFree(v2, v3);
}

{
  WebKit::RemoteMediaSessionHelper::~RemoteMediaSessionHelper((WebKit::RemoteMediaSessionHelper *)((char *)this - 72), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteMediaSessionHelper::~RemoteMediaSessionHelper((WebKit::RemoteMediaSessionHelper *)((char *)this - 72), a2);
  WTF::fastFree(v2, v3);
}

unsigned __int8 *`non-virtual thunk to'WebKit::RemoteMediaSessionHelper::ref(unsigned __int8 **this)
{
  return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(this - 8));
}

unsigned __int8 *`non-virtual thunk to'WebKit::RemoteMediaSessionHelper::deref(unsigned __int8 **this, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(this - 8), a2);
}

uint64_t `non-virtual thunk to'WebKit::RemoteMediaSessionHelper::controlBlock(WebKit::RemoteMediaSessionHelper *this)
{
  return *((_QWORD *)this - 8);
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = *(unsigned int **)(a1 + 8 * i);
      if (v5 != (unsigned int *)-1)
      {
        *(_QWORD *)(a1 + 8 * i) = 0;
        if (v5)
        {
          do
          {
            v6 = __ldaxr(v5);
            v7 = v6 - 1;
          }
          while (__stlxr(v7, v5));
          if (!v7)
          {
            atomic_store(1u, v5);
            WTF::fastFree((WTF *)v5, a2);
          }
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

unint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long,WebCore::IntSize,BOOL>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long,WebCore::IntSize,BOOL>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[32])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long,WebCore::IntSize,BOOL>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  _QWORD v6[2];

  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6[0] = result;
  v6[1] = v5;
  if ((_BYTE)v5)
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long,WebCore::IntSize,BOOL>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((unint64_t *)a1, (uint64_t)v6, (uint64_t)a2);
  *a2 = 0;
  a2[32] = 0;
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long,WebCore::IntSize,BOOL>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v9;
  uint64_t v11;
  unint64_t result;
  char v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  unsigned int v18;
  char v19;
  unint64_t v20;
  void (*v21)(void);
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v5 = a1[1];
  v6 = *a1;
  v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    v14 = 0;
    v15 = 0;
    *a1 = 0;
    a1[1] = 0;
    v20 = a1[3];
    if (!v20)
      goto LABEL_23;
    if (v5)
    {
      v21 = *(void (**)(void))(*(_QWORD *)v20 + 16);
LABEL_21:
      v21();
      goto LABEL_22;
    }
LABEL_32:
    v14 = 0;
    v15 = 0;
LABEL_23:
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (!result)
    {
LABEL_24:
      v19 = 0;
      *(_BYTE *)a3 = 0;
      goto LABEL_13;
    }
LABEL_26:
    if (v14)
      result = (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v15);
    goto LABEL_24;
  }
  v9 = (uint64_t *)(v6 + v7);
  a1[2] = (unint64_t)(v9 + 1);
  if (!v6)
  {
    v14 = v5;
    v15 = 0;
    goto LABEL_23;
  }
  v11 = *v9;
  result = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a1);
  if (!v13)
  {
LABEL_22:
    v15 = *a1;
    v14 = a1[1];
    goto LABEL_23;
  }
  v14 = a1[1];
  v15 = *a1;
  v16 = a1[2] - *a1;
  if (v14 <= v16)
  {
    v22 = 0;
    *a1 = 0;
    a1[1] = 0;
    v23 = a1[3];
    if (v23)
    {
      if (v14)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v23 + 16))(v23);
        v22 = a1[1];
      }
      else
      {
        v22 = 0;
      }
    }
LABEL_18:
    v14 = 0;
    v15 = 0;
    *a1 = 0;
    a1[1] = 0;
    v24 = a1[3];
    if (!v24)
      goto LABEL_23;
    if (v22)
    {
      v21 = *(void (**)(void))(*(_QWORD *)v24 + 16);
      goto LABEL_21;
    }
    goto LABEL_32;
  }
  v17 = (unsigned __int8 *)(v15 + v16);
  a1[2] = (unint64_t)(v17 + 1);
  if (!v15)
  {
    v22 = v14;
    goto LABEL_18;
  }
  v18 = *v17;
  if (v18 >= 2)
    goto LABEL_23;
  if (!*(_BYTE *)(a2 + 8))
  {
    __break(1u);
    goto LABEL_26;
  }
  *(_QWORD *)a3 = *(_QWORD *)a2;
  *(_QWORD *)(a3 + 8) = v11;
  *(_QWORD *)(a3 + 16) = result;
  *(_BYTE *)(a3 + 24) = v18 != 0;
  v19 = 1;
LABEL_13:
  *(_BYTE *)(a3 + 32) = v19;
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,long long>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,long long>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,long long>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v5;
  unint64_t v6;
  char v7;
  char v8;

  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  if (v5 && (v6 = result, result = IPC::Decoder::decode<long long>(a1), v7))
  {
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = result;
    v8 = 1;
  }
  else
  {
    v8 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 16) = v8;
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26RemoteImageDecoderAVFProxy13CreateDecoderEN6WebKit26RemoteImageDecoderAVFProxyES8_FvRKNS2_21SharedBufferReferenceERKNS_6StringEONS_17CompletionHandlerIFvONSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore26ImageDecoderIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B7398;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26RemoteImageDecoderAVFProxy13CreateDecoderEN6WebKit26RemoteImageDecoderAVFProxyES8_FvRKNS2_21SharedBufferReferenceERKNS_6StringEONS_17CompletionHandlerIFvONSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore26ImageDecoderIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B7398;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26RemoteImageDecoderAVFProxy13CreateDecoderEN6WebKit26RemoteImageDecoderAVFProxyES8_FvRKNS2_21SharedBufferReferenceERKNS_6StringEONS_17CompletionHandlerIFvONSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore26ImageDecoderIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  char *result;
  unint64_t v14;
  size_t v15;
  void *v16;

  v4 = (uint64_t *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(unsigned __int8 *)(a2 + 8);
  v7 = *(_QWORD *)(v5 + 544);
  v8 = v7 + 1;
  v9 = *(_QWORD *)(v5 + 552);
  if (v9 < v7 + 1)
  {
    v14 = (2 * v9 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v15 = v14;
      v14 *= 2;
    }
    while (v15 < v8);
    result = (char *)mmap(0, v15, 3, 4098, -1, 0);
    if (result == (char *)-1)
      goto LABEL_15;
    v10 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v16 = *(void **)(v5 + 528);
    if (v16 != (void *)(v5 + 16))
      munmap(v16, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v10;
    *(_QWORD *)(v5 + 552) = v15;
    v11 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v10 = *(char **)(v5 + 528);
    v11 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v10[v11], v7 - v11);
  *(_QWORD *)(v5 + 544) = v8;
  v12 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v7);
  *(_QWORD *)(v5 + 536) = v12 + 1;
  if (!v6)
  {
    *v12 = 0;
    return (char *)IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), v4, 0, 0);
  }
  *v12 = 1;
  if (*(_BYTE *)(a2 + 8))
  {
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v5, (uint64_t *)a2);
    return (char *)IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), v4, 0, 0);
  }
  result = (char *)std::__throw_bad_optional_access[abi:sn180100]();
LABEL_15:
  __break(0xC471u);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26RemoteImageDecoderAVFProxy7SetDataEN6WebKit26RemoteImageDecoderAVFProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore26ImageDecoderIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEERKNS2_21SharedBufferReferenceEbONS_17CompletionHandlerIFvmRKNSA_7IntSizeEbONSt3__18optionalINS_6VectorINSA_21ImageDecoderFrameInfoELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJmSL_bSU_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B73C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26RemoteImageDecoderAVFProxy7SetDataEN6WebKit26RemoteImageDecoderAVFProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore26ImageDecoderIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEERKNS2_21SharedBufferReferenceEbONS_17CompletionHandlerIFvmRKNSA_7IntSizeEbONSt3__18optionalINS_6VectorINSA_21ImageDecoderFrameInfoELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJmSL_bSU_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B73C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26RemoteImageDecoderAVFProxy7SetDataEN6WebKit26RemoteImageDecoderAVFProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore26ImageDecoderIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEERKNS2_21SharedBufferReferenceEbONS_17CompletionHandlerIFvmRKNSA_7IntSizeEbONSt3__18optionalINS_6VectorINSA_21ImageDecoderFrameInfoELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJmSL_bSU_EE4callEmSL_bSU_(uint64_t a1, uint64_t a2, _DWORD *a3, char a4, uint64_t a5)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  size_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  _BYTE *v23;
  int v24;
  uint64_t v25;
  size_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  size_t v34;
  unint64_t v35;
  char *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v42;
  size_t v43;
  char *v44;
  void *v45;
  unint64_t v46;
  size_t v47;
  char *v48;
  void *v49;
  unint64_t v50;
  size_t v51;
  char *v52;
  void *v53;
  unint64_t v54;
  size_t v55;
  char *v56;
  void *v57;
  size_t v58;

  v10 = (uint64_t *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(v11 + 544);
  v13 = (v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = v13 + 8;
  v15 = *(_QWORD *)(v11 + 552);
  if (v15 < v13 + 8)
  {
    v42 = (2 * v15 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v43 = v42;
      v42 *= 2;
    }
    while (v43 < v14);
    v58 = v43;
    v44 = (char *)mmap(0, v43, 3, 4098, -1, 0);
    if (v44 == (char *)-1)
      goto LABEL_45;
    v16 = v44;
    memcpy(v44, *(const void **)(v11 + 528), *(_QWORD *)(v11 + 544));
    v45 = *(void **)(v11 + 528);
    if (v45 != (void *)(v11 + 16))
      munmap(v45, *(_QWORD *)(v11 + 552));
    *(_QWORD *)(v11 + 528) = v16;
    *(_QWORD *)(v11 + 552) = v58;
    v12 = *(_QWORD *)(v11 + 544);
  }
  else
  {
    v16 = *(char **)(v11 + 528);
  }
  bzero(&v16[v12], v13 - v12);
  *(_QWORD *)(v11 + 544) = v14;
  v17 = (_QWORD *)(*(_QWORD *)(v11 + 528) + v13);
  *(_QWORD *)(v11 + 536) = v17 + 1;
  *v17 = a2;
  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v11, a3);
  v18 = *(_QWORD *)(v11 + 544);
  v19 = v18 + 1;
  v20 = *(_QWORD *)(v11 + 552);
  if (v20 < v18 + 1)
  {
    v46 = (2 * v20 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v47 = v46;
      v46 *= 2;
    }
    while (v47 < v19);
    v48 = (char *)mmap(0, v47, 3, 4098, -1, 0);
    if (v48 == (char *)-1)
    {
      __break(0xC471u);
      JUMPOUT(0x197027138);
    }
    v21 = v48;
    memcpy(v48, *(const void **)(v11 + 528), *(_QWORD *)(v11 + 544));
    v49 = *(void **)(v11 + 528);
    if (v49 != (void *)(v11 + 16))
      munmap(v49, *(_QWORD *)(v11 + 552));
    *(_QWORD *)(v11 + 528) = v21;
    *(_QWORD *)(v11 + 552) = v47;
    v22 = *(_QWORD *)(v11 + 544);
  }
  else
  {
    v21 = *(char **)(v11 + 528);
    v22 = *(_QWORD *)(v11 + 544);
  }
  bzero(&v21[v22], v18 - v22);
  *(_QWORD *)(v11 + 544) = v19;
  v23 = (_BYTE *)(*(_QWORD *)(v11 + 528) + v18);
  *(_QWORD *)(v11 + 536) = v23 + 1;
  *v23 = a4;
  v24 = *(unsigned __int8 *)(a5 + 16);
  v25 = *(_QWORD *)(v11 + 544);
  v26 = v25 + 1;
  v27 = *(_QWORD *)(v11 + 552);
  if (v27 < v25 + 1)
  {
    v50 = (2 * v27 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v51 = v50;
      v50 *= 2;
    }
    while (v51 < v26);
    v52 = (char *)mmap(0, v51, 3, 4098, -1, 0);
    if (v52 == (char *)-1)
    {
      __break(0xC471u);
      JUMPOUT(0x197027140);
    }
    v28 = v52;
    memcpy(v52, *(const void **)(v11 + 528), *(_QWORD *)(v11 + 544));
    v53 = *(void **)(v11 + 528);
    if (v53 != (void *)(v11 + 16))
      munmap(v53, *(_QWORD *)(v11 + 552));
    *(_QWORD *)(v11 + 528) = v28;
    *(_QWORD *)(v11 + 552) = v51;
    v29 = *(_QWORD *)(v11 + 544);
  }
  else
  {
    v28 = *(char **)(v11 + 528);
    v29 = *(_QWORD *)(v11 + 544);
  }
  bzero(&v28[v29], v25 - v29);
  *(_QWORD *)(v11 + 544) = v26;
  v30 = (_BYTE *)(*(_QWORD *)(v11 + 528) + v25);
  *(_QWORD *)(v11 + 536) = v30 + 1;
  if (!v24)
  {
    *v30 = 0;
    return IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), v10, 0, 0);
  }
  *v30 = 1;
  if (!*(_BYTE *)(a5 + 16))
  {
    std::__throw_bad_optional_access[abi:sn180100]();
    goto LABEL_45;
  }
  v31 = *(unsigned int *)(a5 + 12);
  v32 = *(_QWORD *)(v11 + 544);
  v33 = (v32 + 7) & 0xFFFFFFFFFFFFFFF8;
  v34 = v33 + 8;
  v35 = *(_QWORD *)(v11 + 552);
  if (v35 < v33 + 8)
  {
    v54 = (2 * v35 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v55 = v54;
      v54 *= 2;
    }
    while (v55 < v34);
    v56 = (char *)mmap(0, v55, 3, 4098, -1, 0);
    if (v56 != (char *)-1)
    {
      v36 = v56;
      memcpy(v56, *(const void **)(v11 + 528), *(_QWORD *)(v11 + 544));
      v57 = *(void **)(v11 + 528);
      if (v57 != (void *)(v11 + 16))
        munmap(v57, *(_QWORD *)(v11 + 552));
      *(_QWORD *)(v11 + 528) = v36;
      *(_QWORD *)(v11 + 552) = v55;
      v32 = *(_QWORD *)(v11 + 544);
      goto LABEL_11;
    }
LABEL_45:
    __break(0xC471u);
    JUMPOUT(0x197027130);
  }
  v36 = *(char **)(v11 + 528);
LABEL_11:
  bzero(&v36[v32], v33 - v32);
  *(_QWORD *)(v11 + 544) = v34;
  v37 = (_QWORD *)(*(_QWORD *)(v11 + 528) + v33);
  *(_QWORD *)(v11 + 536) = v37 + 1;
  *v37 = v31;
  v38 = *(unsigned int *)(a5 + 12);
  if ((_DWORD)v38)
  {
    v39 = *(_QWORD *)a5;
    v40 = 16 * v38;
    do
    {
      IPC::ArgumentCoder<WebCore::ImageDecoderFrameInfo,void>::encode((IPC::Encoder *)v11, v39);
      v39 += 16;
      v40 -= 16;
    }
    while (v40);
  }
  return IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), v10, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26RemoteImageDecoderAVFProxy23CreateFrameImageAtIndexEN6WebKit26RemoteImageDecoderAVFProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore26ImageDecoderIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEmONS_17CompletionHandlerIFvONSt3__18optionalINSA_21ShareableBitmapHandleEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B73E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26RemoteImageDecoderAVFProxy23CreateFrameImageAtIndexEN6WebKit26RemoteImageDecoderAVFProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore26ImageDecoderIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEmONS_17CompletionHandlerIFvONSt3__18optionalINSA_21ShareableBitmapHandleEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B73E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages26RemoteImageDecoderAVFProxy23CreateFrameImageAtIndexEN6WebKit26RemoteImageDecoderAVFProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore26ImageDecoderIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEmONS_17CompletionHandlerIFvONSt3__18optionalINSA_21ShareableBitmapHandleEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<std::optional<WebCore::ShareableBitmapHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::ShareableBitmapHandle>>(*(IPC::Encoder **)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26RemoteMediaRecorderManager14CreateRecorderEN6WebKit26RemoteMediaRecorderManagerES8_FvNS_23ObjectIdentifierGenericINS7_27MediaRecorderIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEbbRKN7WebCore27MediaRecorderPrivateOptionsEONS_17CompletionHandlerIFvONSt3__18optionalINSE_13ExceptionDataEEEONS_6StringEjjEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_SP_jjEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B7410;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26RemoteMediaRecorderManager14CreateRecorderEN6WebKit26RemoteMediaRecorderManagerES8_FvNS_23ObjectIdentifierGenericINS7_27MediaRecorderIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEbbRKN7WebCore27MediaRecorderPrivateOptionsEONS_17CompletionHandlerIFvONSt3__18optionalINSE_13ExceptionDataEEEONS_6StringEjjEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_SP_jjEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B7410;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26RemoteMediaRecorderManager14CreateRecorderEN6WebKit26RemoteMediaRecorderManagerES8_FvNS_23ObjectIdentifierGenericINS7_27MediaRecorderIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEbbRKN7WebCore27MediaRecorderPrivateOptionsEONS_17CompletionHandlerIFvONSt3__18optionalINSE_13ExceptionDataEEEONS_6StringEjjEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_SP_jjEE4callESN_SP_jj(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  size_t v15;
  unint64_t v16;
  char *v17;
  _DWORD *v18;
  uint64_t v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  char *v23;
  _DWORD *v24;
  void *v25;
  IPC::Encoder *result;
  WTF *v27;
  void *v28;
  unint64_t v29;
  size_t v30;
  char *v31;
  void *v32;
  unint64_t v33;
  size_t v34;
  char *v35;
  void *v36;
  IPC::Encoder *v37;

  v10 = *(_QWORD *)(a1 + 8);
  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 3093;
  *(_QWORD *)(v11 + 8) = v10;
  v12 = (void *)(v11 + 16);
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v37 = (IPC::Encoder *)v11;
  IPC::ArgumentCoder<std::optional<WebCore::ExceptionData>,void>::encode<IPC::Encoder,std::optional<WebCore::ExceptionData>>(v11, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, a3);
  v13 = *(_QWORD *)(v11 + 544);
  v14 = (v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v15 = v14 + 4;
  v16 = *(_QWORD *)(v11 + 552);
  if (v16 < v14 + 4)
  {
    v29 = (2 * v16 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v30 = v29;
      v29 *= 2;
    }
    while (v30 < v15);
    v31 = (char *)mmap(0, v30, 3, 4098, -1, 0);
    if (v31 == (char *)-1)
      goto LABEL_20;
    v17 = v31;
    memcpy(v31, *(const void **)(v11 + 528), *(_QWORD *)(v11 + 544));
    v32 = *(void **)(v11 + 528);
    if (v32 != v12)
      munmap(v32, *(_QWORD *)(v11 + 552));
    *(_QWORD *)(v11 + 528) = v17;
    *(_QWORD *)(v11 + 552) = v30;
    v13 = *(_QWORD *)(v11 + 544);
  }
  else
  {
    v17 = *(char **)(v11 + 528);
  }
  bzero(&v17[v13], v14 - v13);
  *(_QWORD *)(v11 + 544) = v15;
  v18 = (_DWORD *)(*(_QWORD *)(v11 + 528) + v14);
  *(_QWORD *)(v11 + 536) = v18 + 1;
  *v18 = a4;
  v19 = *(_QWORD *)(v11 + 544);
  v20 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v21 = v20 + 4;
  v22 = *(_QWORD *)(v11 + 552);
  if (v22 >= v20 + 4)
  {
    v23 = *(char **)(v11 + 528);
    goto LABEL_5;
  }
  v33 = (2 * v22 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v34 = v33;
    v33 *= 2;
  }
  while (v34 < v21);
  v35 = (char *)mmap(0, v34, 3, 4098, -1, 0);
  if (v35 == (char *)-1)
  {
LABEL_20:
    __break(0xC471u);
    JUMPOUT(0x1970274B0);
  }
  v23 = v35;
  memcpy(v35, *(const void **)(v11 + 528), *(_QWORD *)(v11 + 544));
  v36 = *(void **)(v11 + 528);
  if (v36 != v12)
    munmap(v36, *(_QWORD *)(v11 + 552));
  *(_QWORD *)(v11 + 528) = v23;
  *(_QWORD *)(v11 + 552) = v34;
  v19 = *(_QWORD *)(v11 + 544);
LABEL_5:
  bzero(&v23[v19], v20 - v19);
  *(_QWORD *)(v11 + 544) = v21;
  v24 = (_DWORD *)(*(_QWORD *)(v11 + 528) + v20);
  *(_QWORD *)(v11 + 536) = v24 + 1;
  *v24 = a5;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v37, 0, 0);
  result = v37;
  v37 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v25);
    return (IPC::Encoder *)WTF::fastFree(v27, v28);
  }
  return result;
}

void IPC::ArgumentCoder<std::optional<WebCore::ExceptionData>,void>::encode<IPC::Encoder,std::optional<WebCore::ExceptionData>>(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  size_t v12;
  char *v13;
  void *v14;

  v4 = *(unsigned __int8 *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 544);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(a1 + 552);
  if (v7 < v5 + 1)
  {
    v11 = (2 * v7 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v12 = v11;
      v11 *= 2;
    }
    while (v12 < v6);
    v13 = (char *)mmap(0, v12, 3, 4098, -1, 0);
    if (v13 == (char *)-1)
      goto LABEL_14;
    v8 = v13;
    memcpy(v13, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v14 = *(void **)(a1 + 528);
    if (v14 != (void *)(a1 + 16))
      munmap(v14, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v8;
    *(_QWORD *)(a1 + 552) = v12;
    v9 = *(_QWORD *)(a1 + 544);
  }
  else
  {
    v8 = *(char **)(a1 + 528);
    v9 = *(_QWORD *)(a1 + 544);
  }
  bzero(&v8[v9], v5 - v9);
  *(_QWORD *)(a1 + 544) = v6;
  v10 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v5);
  *(_QWORD *)(a1 + 536) = v10 + 1;
  if (!v4)
  {
    *v10 = 0;
    return;
  }
  *v10 = 1;
  if (*(_BYTE *)(a2 + 16))
  {
    IPC::ArgumentCoder<WebCore::Exception,void>::encode((IPC::Encoder *)a1, (char *)a2);
    return;
  }
  std::__throw_bad_optional_access[abi:sn180100]();
LABEL_14:
  __break(0xC471u);
}

void IPC::Decoder::decode<std::tuple<WebKit::ConsumerSharedCARingBufferHandle,WebCore::CAAudioStreamDescription>>(IPC::Decoder *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<WebKit::ConsumerSharedCARingBufferHandle,WebCore::CAAudioStreamDescription>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[104])
  {
    v4 = *(_QWORD *)a1;
    v5 = *((_QWORD *)a1 + 1);
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    v6 = *((_QWORD *)a1 + 3);
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<std::tuple<WebKit::ConsumerSharedCARingBufferHandle,WebCore::CAAudioStreamDescription>,void>::decode<IPC::Decoder>(IPC::Decoder *a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE v4[24];
  char v5;

  IPC::Decoder::decode<WebKit::ConsumerSharedCARingBufferHandle>(a1, (uint64_t)v4);
  if (v5)
  {
    IPC::ArgumentCoder<std::tuple<WebKit::ConsumerSharedCARingBufferHandle,WebCore::CAAudioStreamDescription>,void>::decode<IPC::Decoder,WebKit::ConsumerSharedCARingBufferHandle>((uint64_t *)a1, (uint64_t)v4, a2);
    if (v5)
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v4);
  }
  else
  {
    *a2 = 0;
    a2[104] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WebKit::ConsumerSharedCARingBufferHandle,WebCore::CAAudioStreamDescription>,void>::decode<IPC::Decoder,WebKit::ConsumerSharedCARingBufferHandle>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  _BYTE v5[80];
  char v6;

  IPC::Decoder::decode<WebCore::CAAudioStreamDescription>(a1, (uint64_t)v5);
  if (v6)
  {
    IPC::ArgumentCoder<std::tuple<WebKit::ConsumerSharedCARingBufferHandle,WebCore::CAAudioStreamDescription>,void>::decode<IPC::Decoder,WebKit::ConsumerSharedCARingBufferHandle,WebCore::CAAudioStreamDescription>(a2, (uint64_t)v5, (uint64_t)a3);
    if (v6)
      WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)v5);
  }
  else
  {
    *a3 = 0;
    a3[104] = 0;
  }
}

uint64_t IPC::ArgumentCoder<std::tuple<WebKit::ConsumerSharedCARingBufferHandle,WebCore::CAAudioStreamDescription>,void>::decode<IPC::Decoder,WebKit::ConsumerSharedCARingBufferHandle,WebCore::CAAudioStreamDescription>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result;
  __int128 v6;
  __int128 v7;

  result = a3;
  if (*(_BYTE *)(a1 + 24) && *(_BYTE *)(a2 + 80))
  {
    result = WTF::MachSendRight::MachSendRight();
    *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(result + 24) = MEMORY[0x1E0DD8FD8] + 16;
    v6 = *(_OWORD *)(a2 + 24);
    v7 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(result + 64) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(result + 80) = v7;
    *(_DWORD *)(result + 96) = *(_DWORD *)(a2 + 72);
    *(_OWORD *)(result + 32) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(result + 48) = v6;
    *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_BYTE *std::__optional_destruct_base<std::tuple<WebKit::ConsumerSharedCARingBufferHandle,WebCore::CAAudioStreamDescription>,false>::~__optional_destruct_base[abi:sn180100](_BYTE *a1)
{
  if (a1[104])
  {
    WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)(a1 + 24));
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)a1);
  }
  return a1;
}

_QWORD *IPC::Decoder::decode<std::tuple<WTF::MediaTime,unsigned long long>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::MediaTime,unsigned long long>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[24])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WTF::MediaTime,unsigned long long>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  unint64_t v5;
  _BYTE v6[24];

  result = (_QWORD *)IPC::Decoder::decode<WTF::MediaTime>(a1, (uint64_t)v6);
  if (v6[16])
    return IPC::ArgumentCoder<std::tuple<WTF::MediaTime,unsigned long long>,void>::decode<IPC::Decoder,WTF::MediaTime>(a1, (uint64_t)v6, v5, (uint64_t)a2);
  *a2 = 0;
  a2[24] = 0;
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WTF::MediaTime,unsigned long long>,void>::decode<IPC::Decoder,WTF::MediaTime>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v4 = result[1];
  v5 = *result;
  v6 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *result;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    a3 = 0;
    a2 = 0;
    *result = 0;
    result[1] = 0;
    v11 = result[3];
    if (v11)
    {
      v12 = result;
      v14 = a4;
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v5, v4);
        result = v12;
        a4 = v14;
        a2 = *v12;
        a3 = v12[1];
      }
      else
      {
        a3 = 0;
        a2 = 0;
      }
    }
LABEL_11:
    *result = 0;
    result[1] = 0;
    result = (_QWORD *)result[3];
    if (!result)
    {
LABEL_12:
      v10 = 0;
      *(_BYTE *)a4 = 0;
      goto LABEL_9;
    }
LABEL_14:
    if (a3)
    {
      v13 = a4;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, a2);
      a4 = v13;
    }
    goto LABEL_12;
  }
  v8 = (uint64_t *)(v5 + v6);
  result[2] = v8 + 1;
  if (!v5)
  {
    a3 = v4;
    a2 = 0;
    goto LABEL_11;
  }
  if (!*(_BYTE *)(a2 + 16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v9 = *v8;
  *(_OWORD *)a4 = *(_OWORD *)a2;
  *(_QWORD *)(a4 + 16) = v9;
  v10 = 1;
LABEL_9:
  *(_BYTE *)(a4 + 24) = v10;
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19RemoteMediaRecorder9FetchDataEN6WebKit19RemoteMediaRecorderES8_FvONS_17CompletionHandlerIFvNSt3__14spanIKhLm18446744073709551615EEEdEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_dEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B7458;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19RemoteMediaRecorder9FetchDataEN6WebKit19RemoteMediaRecorderES8_FvONS_17CompletionHandlerIFvNSt3__14spanIKhLm18446744073709551615EEEdEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_dEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B7458;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19RemoteMediaRecorder9FetchDataEN6WebKit19RemoteMediaRecorderES8_FvONS_17CompletionHandlerIFvNSt3__14spanIKhLm18446744073709551615EEEdEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_dEE4callESD_d(uint64_t a1, const void *a2, size_t a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  IPC::Encoder *v14;

  v8 = *(_QWORD *)(a1 + 8);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 3094;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v14 = (IPC::Encoder *)v9;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v9, a2, a3);
  *(double *)IPC::Encoder::grow((IPC::Encoder *)v9, 8uLL, 8) = a4;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v14, 0, 0);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19RemoteMediaRecorder13StopRecordingEN6WebKit19RemoteMediaRecorderES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B7480;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19RemoteMediaRecorder13StopRecordingEN6WebKit19RemoteMediaRecorderES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B7480;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19RemoteMediaRecorder13StopRecordingEN6WebKit19RemoteMediaRecorderES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3097;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19RemoteMediaRecorder5PauseEN6WebKit19RemoteMediaRecorderES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B74A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19RemoteMediaRecorder5PauseEN6WebKit19RemoteMediaRecorderES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B74A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19RemoteMediaRecorder5PauseEN6WebKit19RemoteMediaRecorderES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3095;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19RemoteMediaRecorder6ResumeEN6WebKit19RemoteMediaRecorderES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B74D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19RemoteMediaRecorder6ResumeEN6WebKit19RemoteMediaRecorderES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B74D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages19RemoteMediaRecorder6ResumeEN6WebKit19RemoteMediaRecorderES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3096;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::MediaSessionHelperClient::SuspendedUnderLock>>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v10 = 0;
    v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12)
    {
      v23 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        a1 = v23;
        v11 = *v23;
        v10 = v23[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
    goto LABEL_10;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    v10 = v1;
    v11 = 0;
LABEL_10:
    v1 = 0;
    v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    v13 = a1[3];
    if (v13)
    {
      v22 = a1;
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v11, v10);
        a1 = v22;
        v2 = *v22;
        v1 = v22[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
      }
    }
    goto LABEL_11;
  }
  v5 = *v4;
  if (v5 < 2)
  {
    LODWORD(v6) = v5 != 0;
    v7 = 256;
    goto LABEL_5;
  }
LABEL_11:
  *a1 = 0;
  a1[1] = 0;
  v6 = a1[3];
  if (v6)
  {
    v21 = a1;
    if (v1)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v2);
    LODWORD(v6) = 0;
    v7 = 0;
    a1 = v21;
  }
  else
  {
    v7 = 0;
  }
LABEL_5:
  v8 = v7 | v6;
  LODWORD(v6) = 256;
  if (v8 <= 0xFF)
  {
    v14 = *a1;
    v15 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
    {
      v19 = v8;
      v20 = a1;
      if (v15)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v14);
        LODWORD(v6) = 0;
        v16 = *v20;
        v17 = v20[1];
        v18 = v20[3];
        *v20 = 0;
        v20[1] = 0;
        if (v18)
        {
          v8 = v19;
          if (v17)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v16);
            v8 = v19;
            LODWORD(v6) = 0;
          }
        }
        else
        {
          v8 = v19;
        }
      }
      else
      {
        LODWORD(v6) = 0;
      }
    }
  }
  if (v8 <= 0x100)
    LOBYTE(v8) = 0;
  return v6 | v8 & 1;
}

uint64_t WebKit::PaymentSetupConfiguration::platformConfiguration(WebKit::PaymentSetupConfiguration *this, uint64_t *a2)
{
  void *v4;
  uint64_t v5;
  const __CFString *v6;
  const __CFString *v7;
  const __CFString *v8;
  uint64_t result;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  const __CFString *v14;

  v4 = (void *)objc_msgSend(objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E0DCE190])()), "init");
  v5 = *a2;
  *(_QWORD *)this = v4;
  if (v5)
    v6 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v6 = &stru_1E351F1B8;
  objc_msgSend(v4, "setMerchantIdentifier:", v6);
  objc_msgSend(v4, "setOriginatingURL:", WTF::URL::operator NSURL *());
  if (a2[1])
    v7 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v7 = &stru_1E351F1B8;
  objc_msgSend(v4, "setReferrerIdentifier:", v7);
  if (a2[2])
    v8 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v8 = &stru_1E351F1B8;
  objc_msgSend(v4, "setSignature:", v8);
  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
  {
    v10 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", *((unsigned int *)a2 + 9));
    v11 = *((unsigned int *)a2 + 9);
    if ((_DWORD)v11)
    {
      v12 = (_QWORD *)a2[3];
      v13 = 8 * v11;
      do
      {
        if (*v12)
          v14 = (const __CFString *)WTF::StringImpl::operator NSString *();
        else
          v14 = &stru_1E351F1B8;
        objc_msgSend(v10, "addObject:", v14);
        ++v12;
        v13 -= 8;
      }
      while (v13);
    }
    return objc_msgSend(v4, "setSignedFields:", v10);
  }
  return result;
}

void sub_1970280BC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  const void *v2;

  *v1 = 0;
  if (v2)
    CFRelease(v2);
  _Unwind_Resume(exception_object);
}

void WebKit::platformPaymentTokenContext(WebKit *this@<X0>, _QWORD *a2@<X8>)
{
  const void *v5;
  const void *v6;
  const WTF::String *v7;
  id v8;
  const __CFString *v9;
  const __CFString *v10;
  const __CFString *v11;

  if (*((_QWORD *)this + 3))
  {
    v5 = (const void *)WTF::StringImpl::operator NSString *();
    v6 = v5;
    if (v5)
      CFRetain(v5);
  }
  else
  {
    v6 = 0;
  }
  v8 = objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E0DCE0E8])());
  if (*(_QWORD *)this)
    v9 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v9 = &stru_1E351F1B8;
  if (*((_QWORD *)this + 1))
    v10 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v10 = &stru_1E351F1B8;
  if (*((_QWORD *)this + 2))
    v11 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v11 = &stru_1E351F1B8;
  *a2 = objc_msgSend(v8, "initWithMerchantIdentifier:externalIdentifier:merchantName:merchantDomain:amount:", v9, v10, v11, v6, WebCore::toDecimalNumber((WebKit *)((char *)this + 32), v7));
  if (v6)
    CFRelease(v6);
}

void sub_1970281F0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WTF::createNSArray<WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RetainPtr<PKPaymentTokenContext> (&)(WebCore::ApplePayPaymentTokenContext const&)>(uint64_t *a1@<X0>, void (*a2)(CFTypeRef *__return_ptr, uint64_t)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  CFTypeRef v11;
  CFTypeRef cf;

  v6 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *((unsigned int *)a1 + 3));
  *a3 = v6;
  v7 = *((unsigned int *)a1 + 3);
  if ((_DWORD)v7)
  {
    v8 = (void *)v6;
    v9 = *a1;
    v10 = 40 * v7;
    do
    {
      a2(&cf, v9);
      if (cf)
      {
        objc_msgSend(v8, "addObject:");
        v11 = cf;
        cf = 0;
        if (v11)
          CFRelease(v11);
      }
      v9 += 40;
      v10 -= 40;
    }
    while (v10);
  }
}

void sub_1970282AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  _QWORD *v10;
  const void *v11;

  if (cf)
    CFRelease(cf);
  *v10 = 0;
  if (v11)
    CFRelease(v11);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::platformRecurringPaymentRequest@<X0>(WebKit *this@<X0>, const WebCore::ApplePayRecurringPaymentRequest *a2@<X1>, _QWORD *a3@<X8>)
{
  id v5;
  const __CFString *v6;
  uint64_t v7;
  void *v8;
  const __CFString *v9;
  void *v10;
  uint64_t result;

  v5 = objc_alloc((Class)((uint64_t (*)(WebKit *, const WebCore::ApplePayRecurringPaymentRequest *))*MEMORY[0x1E0DCE140])(this, a2));
  if (*(_QWORD *)this)
    v6 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v6 = &stru_1E351F1B8;
  v7 = WebCore::platformRecurringSummaryItem();
  v8 = (void *)MEMORY[0x1E0C99E98];
  if (*((_QWORD *)this + 23))
    v9 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v9 = &stru_1E351F1B8;
  v10 = (void *)objc_msgSend(v5, "initWithPaymentDescription:regularBilling:managementURL:", v6, v7, objc_msgSend(v8, "URLWithString:", v9));
  *a3 = v10;
  if (*((_BYTE *)this + 168))
    objc_msgSend(v10, "setTrialBilling:", WebCore::platformRecurringSummaryItem());
  if (*((_QWORD *)this + 22))
    objc_msgSend(v10, "setBillingAgreement:", WTF::StringImpl::operator NSString *());
  result = *((_QWORD *)this + 24);
  if (result)
    return objc_msgSend(v10, "setTokenNotificationURL:", objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", WTF::StringImpl::operator NSString *()));
  return result;
}

void sub_1970283FC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  const void *v2;

  *v1 = 0;
  if (v2)
    CFRelease(v2);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'WebKit::WebPaymentCoordinatorProxy::~WebPaymentCoordinatorProxy(WebKit::WebPaymentCoordinatorProxy *this)
{
  WebKit::WebPaymentCoordinatorProxy::~WebPaymentCoordinatorProxy((WebKit::WebPaymentCoordinatorProxy *)((char *)this - 16));
}

{
  WebKit::WebPaymentCoordinatorProxy::~WebPaymentCoordinatorProxy((WebKit::WebPaymentCoordinatorProxy *)((char *)this - 24));
}

{
  WTF *v1;
  void *v2;

  WebKit::WebPaymentCoordinatorProxy::~WebPaymentCoordinatorProxy((WebKit::WebPaymentCoordinatorProxy *)((char *)this - 16));
  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;

  WebKit::WebPaymentCoordinatorProxy::~WebPaymentCoordinatorProxy((WebKit::WebPaymentCoordinatorProxy *)((char *)this - 24));
  WTF::fastFree(v1, v2);
}

void WebKit::WebPaymentCoordinatorProxy::platformCanMakePaymentsWithActiveCard(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4)
{
  const __CFString *v7;
  const __CFString *v8;
  const __CFString *v9;
  uint64_t v10;
  _QWORD *v11;

  if (*a2)
    v7 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v7 = &stru_1E351F1B8;
  if (*a3)
    v8 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v8 = &stru_1E351F1B8;
  if (*(_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32), a1))
    v9 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v9 = &stru_1E351F1B8;
  v10 = *a4;
  *a4 = 0;
  v11 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  *v11 = MEMORY[0x1E0C809A0];
  v11[1] = 50331650;
  v11[2] = WTF::BlockPtr<void ()(BOOL,NSError *)>::fromCallable<WebKit::WebPaymentCoordinatorProxy::platformCanMakePaymentsWithActiveCard(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0>(WebKit::WebPaymentCoordinatorProxy::platformCanMakePaymentsWithActiveCard(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL,NSError *)#1}::__invoke;
  v11[3] = &WTF::BlockPtr<void ()(BOOL,NSError *)>::fromCallable<WebKit::WebPaymentCoordinatorProxy::platformCanMakePaymentsWithActiveCard(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0>(WebKit::WebPaymentCoordinatorProxy::platformCanMakePaymentsWithActiveCard(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0)::descriptor;
  v11[4] = v10;
  ((void (*)(const __CFString *, const __CFString *, const __CFString *, _QWORD *))*MEMORY[0x1E0DCE388])(v7, v8, v9, v11);
  _Block_release(v11);
}

void sub_197028578(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebPaymentCoordinatorProxy::platformOpenPaymentSetup(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4)
{
  void *v7;
  const __CFString *v8;
  const __CFString *v9;
  uint64_t v10;
  _QWORD *v11;

  v7 = (void *)objc_msgSend(objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E0DCDF98])()), "init");
  if (*a2)
    v8 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v8 = &stru_1E351F1B8;
  if (*a3)
    v9 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v9 = &stru_1E351F1B8;
  v10 = *a4;
  *a4 = 0;
  v11 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  *v11 = MEMORY[0x1E0C809A0];
  v11[1] = 50331650;
  v11[2] = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::WebPaymentCoordinatorProxy::platformOpenPaymentSetup(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0>(WebKit::WebPaymentCoordinatorProxy::platformOpenPaymentSetup(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke;
  v11[3] = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::WebPaymentCoordinatorProxy::platformOpenPaymentSetup(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0>(WebKit::WebPaymentCoordinatorProxy::platformOpenPaymentSetup(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0)::descriptor;
  v11[4] = v10;
  objc_msgSend(v7, "openPaymentSetupForMerchantIdentifier:domain:completion:", v8, v9, v11);
  _Block_release(v11);
  if (v7)
    CFRelease(v7);
}

void sub_1970286BC(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;
  const void *v3;

  v3 = v2;
  _Block_release(v3);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(a1);
}

CFTypeRef WebKit::toPKShippingMethods(uint64_t a1)
{
  CFTypeRef v2;
  void *v3;
  unsigned int v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (**v8)(void);
  const WTF::String *v9;
  void *v10;
  const __CFString *v11;
  uint64_t v12;
  void *v13;
  const __CFString *v14;
  const __CFString *v15;
  id v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  CFTypeRef v22;
  const void *v24;
  const void *v25;

  v2 = (CFTypeRef)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a1 + 12));
  v3 = (void *)v2;
  v4 = *(_DWORD *)(a1 + 12);
  if (v4)
  {
    v5 = 0;
    v6 = *(_QWORD *)a1 + 104 * v4;
    v7 = *(_QWORD *)a1 + 32;
    v8 = (uint64_t (**)(void))MEMORY[0x1E0DCE028];
    while (1)
    {
      v10 = (void *)(*v8)();
      if (*(_QWORD *)(v7 - 32))
        v11 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v11 = &stru_1E351F1B8;
      v12 = v7 - 16;
      v13 = (void *)objc_msgSend(v10, "summaryItemWithLabel:amount:", v11, WebCore::toDecimalNumber((WebCore *)(v7 - 16), v9));
      if (*(_QWORD *)(v7 - 8))
        v14 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v14 = &stru_1E351F1B8;
      objc_msgSend(v13, "setIdentifier:", v14);
      if (*(_QWORD *)(v7 - 24))
        v15 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v15 = &stru_1E351F1B8;
      v2 = (CFTypeRef)objc_msgSend(v13, "setDetail:", v15);
      if (*(_BYTE *)(v7 + 64))
      {
        v16 = objc_alloc((Class)((uint64_t (*)(CFTypeRef))*MEMORY[0x1E0DCE0C0])(v2));
        WebKit::toNSDateComponents(&v25, (unsigned int *)v7);
        v17 = v25;
        WebKit::toNSDateComponents(&v24, (unsigned int *)(v7 + 32));
        v18 = v24;
        v19 = (const void *)objc_msgSend(v16, "initWithStartDateComponents:endDateComponents:", v17, v24);
        if (v18)
          CFRelease(v18);
        if (v17)
          CFRelease(v17);
        v2 = (CFTypeRef)objc_msgSend(v13, "setDateComponentsRange:", v19);
        if (v19)
          CFRelease(v19);
      }
      if (*(_BYTE *)(v7 + 68))
        break;
      v20 = v5;
      if (v13)
        goto LABEL_24;
LABEL_25:
      v7 += 104;
      v5 = v20;
      if (v12 + 88 == v6)
        goto LABEL_31;
    }
    if (v13)
      v2 = CFRetain(v13);
    v20 = v13;
    if (v5)
    {
      CFRelease(v5);
      v20 = v13;
    }
    if (!v13)
      goto LABEL_25;
LABEL_24:
    v2 = (CFTypeRef)objc_msgSend(v3, "addObject:", v13);
    goto LABEL_25;
  }
  v20 = 0;
LABEL_31:
  v21 = (const void *)objc_msgSend(objc_alloc((Class)((uint64_t (*)(CFTypeRef))*MEMORY[0x1E0DCE050])(v2)), "initWithMethods:defaultMethod:", v3, v20);
  v22 = (id)CFMakeCollectable(v21);
  if (v3)
    CFRelease(v3);
  if (v20)
    CFRelease(v20);
  return v22;
}

void sub_197028948(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;

  if (v1)
    CFRelease(v1);
  if (v2)
    CFRelease(v2);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::toPKContactFields(PAL *PassKitCore_PKContactFieldPhoneNumber, _BYTE *a2)
{
  _QWORD *v3;
  int v4;
  WTF *v5;
  unsigned int v6;
  int v7;
  uint64_t PassKitCore_PKContactFieldPhoneticName;
  _QWORD *v9;
  id v10;
  WTF *v11;
  uint64_t result;
  void *v13;
  uint64_t PassKitCore_PKContactFieldPostalAddress;
  WTF *v15;
  uint64_t v16;

  v3 = PassKitCore_PKContactFieldPhoneNumber;
  v15 = 0;
  v16 = 0;
  if (*a2)
  {
    PassKitCore_PKContactFieldPostalAddress = PAL::get_PassKitCore_PKContactFieldPostalAddress(PassKitCore_PKContactFieldPhoneNumber);
    PassKitCore_PKContactFieldPhoneNumber = (PAL *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v15, 1uLL, (unint64_t)&PassKitCore_PKContactFieldPostalAddress);
    v4 = HIDWORD(v16);
    v5 = v15;
    *((_QWORD *)v15 + HIDWORD(v16)) = *(_QWORD *)PassKitCore_PKContactFieldPhoneNumber;
    v6 = v4 + 1;
    HIDWORD(v16) = v4 + 1;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  if (a2[1])
  {
    PassKitCore_PKContactFieldPhoneNumber = (PAL *)PAL::get_PassKitCore_PKContactFieldPhoneNumber(PassKitCore_PKContactFieldPhoneNumber);
    PassKitCore_PKContactFieldPostalAddress = (uint64_t)PassKitCore_PKContactFieldPhoneNumber;
    if (v6 == (_DWORD)v16)
    {
      PassKitCore_PKContactFieldPhoneNumber = (PAL *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v15, v6 + 1, (unint64_t)&PassKitCore_PKContactFieldPostalAddress);
      v7 = HIDWORD(v16);
      *((_QWORD *)v15 + HIDWORD(v16)) = *(_QWORD *)PassKitCore_PKContactFieldPhoneNumber;
    }
    else
    {
      *((_QWORD *)v5 + v6) = PassKitCore_PKContactFieldPhoneNumber;
      v7 = HIDWORD(v16);
    }
    v6 = v7 + 1;
    HIDWORD(v16) = v7 + 1;
  }
  if (a2[2])
  {
    PassKitCore_PKContactFieldPhoneNumber = (PAL *)PAL::get_PassKitCore_PKContactFieldEmailAddress(PassKitCore_PKContactFieldPhoneNumber);
    PassKitCore_PKContactFieldPostalAddress = (uint64_t)PassKitCore_PKContactFieldPhoneNumber;
    if (v6 == (_DWORD)v16)
    {
      PassKitCore_PKContactFieldPhoneNumber = (PAL *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v15, v6 + 1, (unint64_t)&PassKitCore_PKContactFieldPostalAddress);
      v6 = HIDWORD(v16);
      *((_QWORD *)v15 + HIDWORD(v16)) = *(_QWORD *)PassKitCore_PKContactFieldPhoneNumber;
    }
    else
    {
      *((_QWORD *)v15 + v6) = PassKitCore_PKContactFieldPhoneNumber;
    }
    HIDWORD(v16) = ++v6;
  }
  if (a2[3])
  {
    PassKitCore_PKContactFieldPhoneNumber = (PAL *)PAL::get_PassKitCore_PKContactFieldName(PassKitCore_PKContactFieldPhoneNumber);
    PassKitCore_PKContactFieldPostalAddress = (uint64_t)PassKitCore_PKContactFieldPhoneNumber;
    if (v6 == (_DWORD)v16)
    {
      PassKitCore_PKContactFieldPhoneNumber = (PAL *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v15, v6 + 1, (unint64_t)&PassKitCore_PKContactFieldPostalAddress);
      v6 = HIDWORD(v16);
      *((_QWORD *)v15 + HIDWORD(v16)) = *(_QWORD *)PassKitCore_PKContactFieldPhoneNumber;
    }
    else
    {
      *((_QWORD *)v15 + v6) = PassKitCore_PKContactFieldPhoneNumber;
    }
    HIDWORD(v16) = ++v6;
  }
  if (a2[4])
  {
    PassKitCore_PKContactFieldPhoneticName = PAL::get_PassKitCore_PKContactFieldPhoneticName(PassKitCore_PKContactFieldPhoneNumber);
    PassKitCore_PKContactFieldPostalAddress = PassKitCore_PKContactFieldPhoneticName;
    if (v6 == (_DWORD)v16)
    {
      v9 = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v15, v6 + 1, (unint64_t)&PassKitCore_PKContactFieldPostalAddress);
      v6 = HIDWORD(v16);
      *((_QWORD *)v15 + HIDWORD(v16)) = *v9;
    }
    else
    {
      *((_QWORD *)v15 + v6) = PassKitCore_PKContactFieldPhoneticName;
    }
    ++v6;
  }
  v10 = objc_alloc(MEMORY[0x1E0C99E60]);
  v11 = v15;
  result = objc_msgSend(v10, "initWithObjects:count:", v15, v6);
  *v3 = result;
  if (v11)
    return WTF::fastFree(v11, v13);
  return result;
}

void sub_197028BA4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11)
{
  if (a11)
    WTF::fastFree(a11, a2);
  _Unwind_Resume(exception_object);
}

void WebKit::WebPaymentCoordinatorProxy::getSetupFeatures(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  const void *v7;
  const void *v8;

  v4 = *a3;
  *a3 = 0;
  v5 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  *v5 = MEMORY[0x1E0C809A0];
  v5[1] = 50331650;
  v5[2] = WTF::BlockPtr<void ()(NSArray<PKPaymentSetupFeature *> *)>::fromCallable<WebKit::WebPaymentCoordinatorProxy::getSetupFeatures(WebKit::PaymentSetupConfiguration const&,WTF::CompletionHandler<void ()(WebKit::PaymentSetupFeatures &&)> &&)::$_0>(WebKit::WebPaymentCoordinatorProxy::getSetupFeatures(WebKit::PaymentSetupConfiguration const&,WTF::CompletionHandler<void ()(WebKit::PaymentSetupFeatures &&)> &&)::$_0)::{lambda(void *,NSArray<PKPaymentSetupFeature *> *)#1}::__invoke;
  v5[3] = &WTF::BlockPtr<void ()(NSArray<PKPaymentSetupFeature *> *)>::fromCallable<WebKit::WebPaymentCoordinatorProxy::getSetupFeatures(WebKit::PaymentSetupConfiguration const&,WTF::CompletionHandler<void ()(WebKit::PaymentSetupFeatures &&)> &&)::$_0>(WebKit::WebPaymentCoordinatorProxy::getSetupFeatures(WebKit::PaymentSetupConfiguration const&,WTF::CompletionHandler<void ()(WebKit::PaymentSetupFeatures &&)> &&)::$_0)::descriptor;
  v5[4] = v4;
  v6 = (void *)((uint64_t (*)(void))*MEMORY[0x1E0DCE128])();
  WebKit::PaymentSetupConfiguration::platformConfiguration((WebKit::PaymentSetupConfiguration *)&v8, a2);
  v7 = v8;
  objc_msgSend(v6, "paymentSetupFeaturesForConfiguration:completion:", v8, v5);
  if (v7)
    CFRelease(v7);
  _Block_release(v5);
}

void sub_197028C94(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_197028CC0()
{
  uint64_t v0;

  if (v0)
    (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  JUMPOUT(0x197028CB8);
}

void WebKit::WebPaymentCoordinatorProxy::beginApplePaySetup(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v8;
  void *v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  id *v16;
  uint64_t v17;
  const void *v18;

  v8 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 64))(*(_QWORD *)(a1 + 32), a1);
  if (v8)
  {
    v9 = (void *)v8;
    v10 = (void *)objc_msgSend(objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E0DCE0E0])()), "init");
    WebKit::PaymentSetupConfiguration::platformConfiguration((WebKit::PaymentSetupConfiguration *)&v18, a2);
    v11 = v18;
    objc_msgSend(v10, "setConfiguration:", v18);
    if (v11)
      CFRelease(v11);
    v12 = objc_msgSend(v10, "setPaymentSetupFeatures:", *a3);
    v13 = (void *)objc_msgSend(objc_alloc((Class)((uint64_t (*)(uint64_t))*MEMORY[0x1E0DCE1D8])(v12)), "initWithPaymentSetupRequest:", v10);
    v14 = *a4;
    *a4 = 0;
    if (v13)
    {
      v15 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
      *v15 = MEMORY[0x1E0C809A0];
      v15[1] = 50331650;
      v15[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::WebPaymentCoordinatorProxy::platformBeginApplePaySetup(WebKit::PaymentSetupConfiguration const&,WebKit::PaymentSetupFeatures const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::WebPaymentCoordinatorProxy::platformBeginApplePaySetup(WebKit::PaymentSetupConfiguration const&,WebKit::PaymentSetupFeatures const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *)#1}::__invoke;
      v15[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::WebPaymentCoordinatorProxy::platformBeginApplePaySetup(WebKit::PaymentSetupConfiguration const&,WebKit::PaymentSetupFeatures const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::WebPaymentCoordinatorProxy::platformBeginApplePaySetup(WebKit::PaymentSetupConfiguration const&,WebKit::PaymentSetupFeatures const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::descriptor;
      v15[4] = v14;
      v16 = (id *)(a1 + 80);
      objc_msgSend(objc_loadWeak(v16), "dismissViewControllerAnimated:completion:", 1, 0);
      objc_storeWeak(v16, 0);
      objc_msgSend(v9, "presentViewController:animated:completion:", v13, 1, v15);
      objc_storeWeak(v16, v13);
      _Block_release(v15);
      CFRelease(v13);
      if (!v10)
        return;
      goto LABEL_6;
    }
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 16))(v14, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    if (v10)
LABEL_6:
      CFRelease(v10);
  }
  else
  {
    v17 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 16))(v17, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
}

void sub_197028EDC(_Unwind_Exception *a1)
{
  const void *v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPaymentCoordinatorProxy::platformCanMakePayments(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  const void *v4;
  const void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;

  v3 = *(_QWORD *)(a1 + 72);
  v4 = (const void *)((uint64_t (*)(void))*MEMORY[0x1E0DCE230])();
  v5 = v4;
  if (v4)
    CFRetain(v4);
  v6 = *a2;
  *a2 = 0;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v7 = &off_1E34B7880;
  v7[1] = v5;
  v7[2] = v6;
  v9 = v7;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v3 + 32))(v3, &v9);
  result = (uint64_t)v9;
  v9 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_197029010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void WebKit::WebPaymentCoordinatorProxy::platformShowPaymentUI(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  _BYTE *v11;
  void *v12;
  CFTypeRef v13;
  const URL *v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  CFTypeRef v19;
  uint64_t v20;
  const __CFString *v21;
  const __CFString *v22;
  CFTypeRef v23;
  CFTypeRef v24;
  CFTypeRef v25;
  CFTypeRef v26;
  CFTypeRef v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  __CFString *v32;
  const void *v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  const __CFString *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  const __CFString *v42;
  uint64_t v43;
  _QWORD *v44;
  const __CFString *v45;
  uint64_t v46;
  _QWORD *v47;
  const __CFString *v48;
  const WebCore::ApplePayRecurringPaymentRequest *v49;
  CFTypeRef v50;
  void *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  CFTypeRef v55;
  CFTypeRef v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  char v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  int v66;
  int v67;
  int v68;
  __int16 PassKitCore_PKMerchantCategoryCodeNone;
  __int16 v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  _QWORD *v75;
  void *v76;
  CFTypeRef v77;
  WTF *v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  __int16 v93;
  char v94;
  __int16 v95;
  int v96;
  BOOL v97;
  int v98;
  BOOL v99;
  int v100;
  BOOL v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  __int16 v105;
  char v106;
  int v107;
  int v108;
  BOOL v109;
  int v110;
  BOOL v111;
  int v112;
  BOOL v113;
  int v114;
  unsigned int v115;
  uint64_t v116;
  int v117;
  WTF *v118;
  int v119;
  char v120;
  char v121;
  CFTypeRef cf;

  v11 = std::__optional_copy_base<WebCore::ApplePayDisbursementRequest,false>::__optional_copy_base[abi:sn180100](&v118, a5 + 848);
  if (v121)
  {
    WebKit::platformDisbursementRequest(a5, (uint64_t)&v118, &cf);
    v12 = (void *)cf;
    if (cf)
    {
      CFRetain(cf);
      v13 = cf;
      cf = 0;
      if (v13)
        CFRelease(v13);
    }
    goto LABEL_126;
  }
  v12 = (void *)objc_msgSend(objc_alloc((Class)((uint64_t (*)(_BYTE *))*MEMORY[0x1E0DCE020])(v11)), "init");
  objc_msgSend(v12, "setOriginatingURL:", WTF::URL::operator NSURL *());
  v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a4 + 12));
  v16 = *(unsigned int *)(a4 + 12);
  if ((_DWORD)v16)
  {
    v17 = *(WTF **)a4;
    v18 = 40 * v16;
    do
    {
      WTF::makeNSArrayElement(v17, v14);
      if (cf)
      {
        objc_msgSend(v15, "addObject:");
        v19 = cf;
        cf = 0;
        if (v19)
          CFRelease(v19);
      }
      v17 = (WTF *)((char *)v17 + 40);
      v18 -= 40;
    }
    while (v18);
  }
  objc_msgSend(v12, "setThumbnailURLs:", v15);
  if (v15)
    CFRelease(v15);
  if (*(_BYTE *)(a5 + 232))
    v20 = 2;
  else
    v20 = 1;
  objc_msgSend(v12, "setAPIType:", v20);
  if (*(_QWORD *)(a5 + 8))
    v21 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v21 = &stru_1E351F1B8;
  objc_msgSend(v12, "setCountryCode:", v21);
  if (*(_QWORD *)(a5 + 16))
    v22 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v22 = &stru_1E351F1B8;
  objc_msgSend(v12, "setCurrencyCode:", v22);
  WebCore::PaymentContact::pkContact((WebCore::PaymentContact *)(a5 + 32));
  objc_msgSend(v12, "setBillingContact:", cf);
  v23 = cf;
  cf = 0;
  if (v23)
    CFRelease(v23);
  WebCore::PaymentContact::pkContact((WebCore::PaymentContact *)(a5 + 56));
  objc_msgSend(v12, "setShippingContact:", cf);
  v24 = cf;
  cf = 0;
  if (v24)
    CFRelease(v24);
  WebKit::toPKContactFields((PAL *)&cf, (_BYTE *)(a5 + 24));
  v25 = cf;
  objc_msgSend(v12, "setRequiredBillingContactFields:", cf);
  if (v25)
    CFRelease(v25);
  WebKit::toPKContactFields((PAL *)&cf, (_BYTE *)(a5 + 48));
  v26 = cf;
  objc_msgSend(v12, "setRequiredShippingContactFields:", cf);
  if (v26)
    CFRelease(v26);
  WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a5 + 72, (uint64_t *)&cf);
  objc_msgSend(v12, "setSupportedNetworks:", cf);
  v27 = cf;
  cf = 0;
  if (v27)
    CFRelease(v27);
  v28 = *(unsigned __int8 *)(a5 + 88);
  if (*(_BYTE *)(a5 + 89))
    v28 |= 2uLL;
  if (*(_BYTE *)(a5 + 90))
    v28 |= 4uLL;
  if (*(_BYTE *)(a5 + 91))
    v28 |= 8uLL;
  if (*(_BYTE *)(a5 + 92))
    v29 = v28 | 0x80;
  else
    v29 = v28;
  objc_msgSend(v12, "setMerchantCapabilities:", v29);
  if (*(unsigned __int8 *)(a5 + 93) - 1 < 3)
    v30 = (*(_BYTE *)(a5 + 93) - 1) + 1;
  else
    v30 = 0;
  objc_msgSend(v12, "setShippingType:", v30);
  objc_msgSend(v12, "setAvailableShippingMethods:", WebKit::toPKShippingMethods(a5 + 96));
  objc_msgSend(v12, "setPaymentSummaryItems:", WebCore::platformSummaryItems());
  objc_msgSend(v12, "setExpectsMerchantSession:", 1);
  if (*(_QWORD *)(a5 + 208))
  {
    v31 = objc_alloc(MEMORY[0x1E0C99D50]);
    v32 = *(_QWORD *)(a5 + 208) ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1E351F1B8;
    v33 = (const void *)objc_msgSend(v31, "initWithBase64EncodedString:options:", v32, 0);
    objc_msgSend(v12, "setApplicationData:", v33);
    if (v33)
      CFRelease(v33);
  }
  if (*(_DWORD *)(a5 + 228))
  {
    v34 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E20]), "initWithCapacity:", *(unsigned int *)(a5 + 228));
    v35 = *(unsigned int *)(a5 + 228);
    if ((_DWORD)v35)
    {
      v36 = *(_QWORD **)(a5 + 216);
      v37 = 8 * v35;
      do
      {
        if (*v36)
          v38 = (const __CFString *)WTF::StringImpl::operator NSString *();
        else
          v38 = &stru_1E351F1B8;
        objc_msgSend(v34, "addObject:", v38);
        ++v36;
        v37 -= 8;
      }
      while (v37);
    }
  }
  else
  {
    v34 = 0;
  }
  objc_msgSend(v12, "setSupportedCountries:", v34);
  if (v34)
    CFRelease(v34);
  v39 = *(_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), a1);
  if (v39 && *(_DWORD *)(v39 + 4))
    objc_msgSend(v12, "setBoundInterfaceIdentifier:", WTF::StringImpl::operator NSString *());
  v40 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32), a1);
  v41 = (_QWORD *)v40;
  if (*(_QWORD *)v40 && *(_DWORD *)(*(_QWORD *)v40 + 4) && (objc_opt_respondsToSelector() & 1) != 0)
  {
    if (*v41)
      v42 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v42 = &stru_1E351F1B8;
    objc_msgSend(v12, "setSourceApplicationBundleIdentifier:", v42);
  }
  v43 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32), a1);
  v44 = (_QWORD *)v43;
  if (*(_QWORD *)v43 && *(_DWORD *)(*(_QWORD *)v43 + 4) && (objc_opt_respondsToSelector() & 1) != 0)
  {
    if (*v44)
      v45 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v45 = &stru_1E351F1B8;
    objc_msgSend(v12, "setSourceApplicationSecondaryIdentifier:", v45);
  }
  v46 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 72))(*(_QWORD *)(a1 + 32), a1);
  v47 = (_QWORD *)v46;
  if (*(_QWORD *)v46 && *(_DWORD *)(*(_QWORD *)v46 + 4) && (objc_opt_respondsToSelector() & 1) != 0)
  {
    if (*v47)
      v48 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v48 = &stru_1E351F1B8;
    objc_msgSend(v12, "setCTDataConnectionServiceType:", v48);
  }
  WebCore::PaymentInstallmentConfiguration::platformConfiguration((WebCore::PaymentInstallmentConfiguration *)(a5 + 240));
  if (cf)
  {
    objc_msgSend(v12, "setInstallmentConfiguration:");
    objc_msgSend(v12, "setRequestType:", 5);
    v50 = cf;
    cf = 0;
    if (v50)
      CFRelease(v50);
  }
  if (*(unsigned __int16 *)(a5 + 346) >= 0x100u)
    objc_msgSend(v12, "setSupportsCouponCode:", *(_WORD *)(a5 + 346) != 0);
  v51 = *(void **)(a5 + 352);
  if (v51)
    v51 = (void *)objc_msgSend(v12, "setCouponCode:", WTF::StringImpl::operator NSString *());
  if (*(_BYTE *)(a5 + 345))
  {
    if (*(_BYTE *)(a5 + 344) == 2)
      v52 = 2;
    else
      v52 = 1;
    v51 = (void *)objc_msgSend(v12, "setShippingContactEditingMode:", v52);
  }
  if (*(_BYTE *)(a5 + 881))
  {
    v53 = *(unsigned __int8 *)(a5 + 880);
    if (v53 == 2)
      v54 = 2;
    else
      v54 = v53 == 1;
    v51 = (void *)objc_msgSend(v12, "setApplePayLaterAvailability:", v54);
  }
  if (*(_BYTE *)(a5 + 560))
  {
    WebKit::platformRecurringPaymentRequest((WebKit *)(a5 + 360), v49, &cf);
    v55 = cf;
    v51 = (void *)objc_msgSend(v12, "setRecurringPaymentRequest:", cf);
    if (v55)
      CFRelease(v55);
  }
  if (*(_BYTE *)(a5 + 680))
  {
    WebKit::platformAutomaticReloadPaymentRequest((WebKit *)(a5 + 568), v49, &cf);
    objc_msgSend(v12, "setAutomaticReloadPaymentRequest:", cf);
    v51 = (void *)cf;
    cf = 0;
    if (v51)
      CFRelease(v51);
  }
  if (*(_BYTE *)(a5 + 704))
  {
    WTF::createNSArray<WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::RetainPtr<PKPaymentTokenContext> (&)(WebCore::ApplePayPaymentTokenContext const&)>((uint64_t *)(a5 + 688), (void (*)(CFTypeRef *__return_ptr, uint64_t))WebKit::platformPaymentTokenContext, (uint64_t *)&cf);
    v56 = cf;
    v51 = (void *)objc_msgSend(v12, "setMultiTokenContexts:", cf);
    if (v56)
      CFRelease(v56);
  }
  if (*(_BYTE *)(a5 + 840))
  {
    WebKit::platformDeferredPaymentRequest((WebKit *)(a5 + 712), v49, &cf);
    objc_msgSend(v12, "setDeferredPaymentRequest:", cf);
    v51 = (void *)cf;
    cf = 0;
    if (v51)
      CFRelease(v51);
  }
  v57 = *(_QWORD *)(a5 + 888);
  if (v57)
  {
    v58 = *(_QWORD *)(v57 + 8);
    v59 = *(unsigned int *)(v57 + 4);
    if (v58)
      v60 = v59 == 0;
    else
      v60 = 1;
    v61 = v60;
    if ((*(_BYTE *)(v57 + 16) & 4) == 0)
    {
      if ((v61 & 1) == 0)
      {
        v79 = 0;
        v80 = 2 * v59;
        while (1)
        {
          v81 = *(unsigned __int16 *)(v58 + v79);
          if ((v81 - 9) >= 5 && v81 != 32)
            break;
          --v59;
          v79 += 2;
          if (v80 == v79)
            goto LABEL_117;
        }
        if (v81 == 43 || v81 == 45)
        {
          if (v80 - 2 == v79)
            goto LABEL_117;
          --v59;
          v82 = v58 + v79;
          v85 = *(unsigned __int16 *)(v82 + 2);
          v83 = v82 + 2;
          v84 = v85;
        }
        else
        {
          v83 = v58 + v79;
          v84 = v81;
        }
        if ((v84 - 48) <= 9)
        {
          v93 = 0;
          v94 = 0;
          while (1)
          {
            v95 = v84 - 48;
            v96 = (__int16)(10 * v93);
            v97 = v96 != 10 * v93;
            if (v96 == 10 * v93)
              v93 *= 10;
            v98 = v93 + v95;
            v99 = v98 != (__int16)(v93 + v95);
            v100 = v93 - v95;
            v101 = v100 != (__int16)v100;
            if (v81 != 45)
            {
              LOWORD(v100) = v98;
              v101 = v99;
            }
            if (!v101)
              v93 = v100;
            if (v101 || v97)
              v94 = 1;
            if (!--v59)
              break;
            v102 = v83 + 2;
            v84 = *(unsigned __int16 *)(v83 + 2);
            if ((v84 - 48) <= 9)
            {
              v83 += 2;
              if ((v84 - 48) < 0xA)
                continue;
            }
            if (!v94)
            {
              v103 = 0;
              while (1)
              {
                v104 = *(unsigned __int16 *)(v102 + 2 * v103);
                if ((v104 - 9) >= 5 && v104 != 32)
                  break;
                if (v59 == ++v103)
                  goto LABEL_201;
              }
            }
            goto LABEL_117;
          }
          if (v94)
            goto LABEL_117;
LABEL_201:
          v64 = v93 & 0xFF00;
          v63 = v93;
          v62 = 0x10000;
          goto LABEL_118;
        }
      }
LABEL_117:
      v62 = 0;
      v63 = 0;
      v64 = 0;
LABEL_118:
      v65 = v63 | v62 | v64;
LABEL_122:
      PassKitCore_PKMerchantCategoryCodeNone = PAL::get_PassKitCore_PKMerchantCategoryCodeNone((PAL *)v51);
      if (v65 >= 0x10000)
        v70 = v65;
      else
        v70 = PassKitCore_PKMerchantCategoryCodeNone;
      objc_msgSend(v12, "setMerchantCategoryCode:", v70);
      goto LABEL_126;
    }
    if ((v61 & 1) != 0)
      goto LABEL_120;
    v86 = 0;
    while (1)
    {
      v87 = *(unsigned __int8 *)(v58 + v86);
      if ((v87 - 9) >= 5 && v87 != 32)
        break;
      if (v59 == ++v86)
        goto LABEL_120;
    }
    if (v87 == 43 || v87 == 45)
    {
      if (v59 - 1 == v86)
        goto LABEL_120;
      v88 = ~v86 + v59;
      v89 = v58 + v86;
      v92 = *(unsigned __int8 *)(v89 + 1);
      v90 = v89 + 1;
      v91 = v92;
    }
    else
    {
      v90 = v58 + v86;
      v88 = v59 - v86;
      v91 = v87;
    }
    if ((v91 - 48) <= 9)
    {
      v105 = 0;
      v106 = 0;
      while (1)
      {
        v107 = v91 - 48;
        v108 = (__int16)(10 * v105);
        v109 = v108 != 10 * v105;
        if (v108 == 10 * v105)
          v105 *= 10;
        v110 = v107 + v105;
        v111 = v110 != (__int16)(v107 + v105);
        v112 = v105 - v107;
        if (v87 == 45)
        {
          v113 = v112 != (__int16)v112;
        }
        else
        {
          LOWORD(v112) = v110;
          v113 = v111;
        }
        if (!v113)
          v105 = v112;
        if (v113 || v109)
          v106 = 1;
        if (!--v88)
          break;
        v114 = *(unsigned __int8 *)++v90;
        LOBYTE(v91) = v114;
        v115 = v114 - 48;
        if ((v114 - 48) > 9 || v115 >= 0xA)
        {
          if (!v106)
          {
            v116 = 0;
            while (1)
            {
              v117 = *(unsigned __int8 *)(v90 + v116);
              if ((v117 - 9) >= 5 && v117 != 32)
                break;
              if (v88 == ++v116)
                goto LABEL_203;
            }
          }
          goto LABEL_120;
        }
      }
      if (v106)
        goto LABEL_120;
LABEL_203:
      v68 = v105 & 0xFF00;
      v67 = v105;
      v66 = 0x10000;
      goto LABEL_121;
    }
LABEL_120:
    v66 = 0;
    v67 = 0;
    v68 = 0;
LABEL_121:
    v65 = v67 | v66 | v68;
    goto LABEL_122;
  }
LABEL_126:
  v71 = *(_QWORD *)(a1 + 32);
  if (v12)
    CFRetain(v12);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  v72 = *(unsigned int **)(a1 + 8);
  if (v72)
  {
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 + 1, v72));
  }
  v74 = *a6;
  *a6 = 0;
  v75 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v75 = &off_1E34B78D0;
  v75[1] = a2;
  v75[2] = v12;
  v75[3] = v72;
  v75[4] = v74;
  cf = v75;
  (*(void (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)v71 + 88))(v71, a2, &cf);
  v77 = cf;
  cf = 0;
  if (v77)
    (*(void (**)(CFTypeRef))(*(_QWORD *)v77 + 8))(v77);
  if (v121)
  {
    if (v120)
    {
      v78 = v118;
      if (v118)
      {
        v118 = 0;
        v119 = 0;
        WTF::fastFree(v78, v76);
      }
    }
  }
  if (v12)
    CFRelease(v12);
}

void sub_197029AF0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, char a13, int a14, __int16 a15, char a16, char a17, CFTypeRef cf)
{
  const void *v18;

  if (v18)
    CFRelease(v18);
  if ((_BYTE)a15 && a13)
  {
    if (a10)
      WTF::fastFree(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::fromAuthenticationChallengeDisposition(uint64_t result)
{
  if (result >= 4)
    return objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("Invalid AuthenticationChallengeDisposition (%ld)"), result);
  else
    return result;
}

uint64_t ___ZN6WebKit21AuthenticationManager20initializeConnectionEPN3IPC10ConnectionE_block_invoke(uint64_t a1, void *a2)
{
  id v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  __int128 v8;
  void *v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;

  WebKit::handleXPCExitMessage(a2);
  *(_QWORD *)&v12 = a2;
  if (a2)
    v4 = a2;
  v5 = *(unsigned int **)(a1 + 32);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  *((_QWORD *)&v12 + 1) = v5;
  v7 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v7 = &off_1E34B78F8;
  v8 = v12;
  v12 = 0uLL;
  *(_OWORD *)(v7 + 8) = v8;
  v13 = v7;
  WTF::callOnMainRunLoop();
  v10 = v13;
  v13 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return _ZZZN6WebKit21AuthenticationManager20initializeConnectionEPN3IPC10ConnectionEEUb_EN3__7D1Ev((uint64_t)&v12, v9);
}

void sub_197029DA0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _ZZZN6WebKit21AuthenticationManager20initializeConnectionEPN3IPC10ConnectionEEUb_EN3__7D1Ev((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t _ZZZN6WebKit21AuthenticationManager20initializeConnectionEPN3IPC10ConnectionEEUb_EN3__7D1Ev(uint64_t a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  if (*(_QWORD *)a1)

  return a1;
}

unsigned int *__destroy_helper_block_e8_32c99_ZTSN3WTF7WeakPtrIN6WebKit21AuthenticationManagerENS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS3_EEEE(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

_QWORD *WebCore::ApplePaySetupConfiguration::ApplePaySetupConfiguration(_QWORD *a1, uint64_t a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  *a1 = v3;
  v4 = *(_DWORD **)(a2 + 8);
  if (v4)
    *v4 += 2;
  a1[1] = v4;
  v5 = *(_DWORD **)(a2 + 16);
  if (v5)
    *v5 += 2;
  a1[2] = v5;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(a1 + 3), a2 + 24);
  return a1;
}

void sub_197029ED8(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v4 = v2[2];
  v2[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = v2[1];
  v2[1] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *v2;
  *v2 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::BlockPtr<void ()(BOOL,NSError *)>::fromCallable<WebKit::WebPaymentCoordinatorProxy::platformCanMakePaymentsWithActiveCard(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0>(WebKit::WebPaymentCoordinatorProxy::platformCanMakePaymentsWithActiveCard(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL,NSError *)>::fromCallable<WebKit::WebPaymentCoordinatorProxy::platformCanMakePaymentsWithActiveCard(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0>(WebKit::WebPaymentCoordinatorProxy::platformCanMakePaymentsWithActiveCard(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL,NSError *)#1}::__invoke(WTF::RunLoop *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  WTF::RunLoop::main(a1);
  v4 = *((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 4) = 0;
  v5 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v5 = &off_1E34B7780;
  *(_QWORD *)(v5 + 8) = v4;
  *(_BYTE *)(v5 + 16) = a2;
  v7 = v5;
  WTF::RunLoop::dispatch();
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

void sub_197029FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::platformCanMakePaymentsWithActiveCard(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0::operator()(BOOL,NSError *)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34B7780;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::platformCanMakePaymentsWithActiveCard(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0::operator()(BOOL,NSError *)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34B7780;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::platformCanMakePaymentsWithActiveCard(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0::operator()(BOOL,NSError *)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::WebPaymentCoordinatorProxy::platformOpenPaymentSetup(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0>(WebKit::WebPaymentCoordinatorProxy::platformOpenPaymentSetup(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::WebPaymentCoordinatorProxy::platformOpenPaymentSetup(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0>(WebKit::WebPaymentCoordinatorProxy::platformOpenPaymentSetup(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke(WTF::RunLoop *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  WTF::RunLoop::main(a1);
  v4 = *((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 4) = 0;
  v5 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v5 = &off_1E34B77C8;
  *(_QWORD *)(v5 + 8) = v4;
  *(_BYTE *)(v5 + 16) = a2;
  v7 = v5;
  WTF::RunLoop::dispatch();
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

void sub_19702A158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::platformOpenPaymentSetup(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34B77C8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::platformOpenPaymentSetup(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34B77C8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::platformOpenPaymentSetup(WTF::String const&,WTF::String const&,WTF::Function<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
}

uint64_t WebKit::toNSDateComponents(_QWORD *a1, unsigned int *a2)
{
  id v4;
  uint64_t result;

  v4 = objc_alloc_init(MEMORY[0x1E0C99D78]);
  *a1 = v4;
  result = objc_msgSend(v4, "setCalendar:", objc_msgSend(MEMORY[0x1E0C99D48], "calendarWithIdentifier:", *MEMORY[0x1E0C996C8]));
  if (*((_BYTE *)a2 + 4))
    result = objc_msgSend(v4, "setYear:", *a2);
  if (*((_BYTE *)a2 + 12))
    result = objc_msgSend(v4, "setMonth:", a2[2]);
  if (*((_BYTE *)a2 + 20))
    result = objc_msgSend(v4, "setDay:", a2[4]);
  if (*((_BYTE *)a2 + 28))
    return objc_msgSend(v4, "setHour:", a2[6]);
  return result;
}

void sub_19702A2D0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  const void *v2;

  *v1 = 0;
  if (v2)
    CFRelease(v2);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::BlockPtr<void ()(NSArray<PKPaymentSetupFeature *> *)>::fromCallable<WebKit::WebPaymentCoordinatorProxy::getSetupFeatures(WebKit::PaymentSetupConfiguration const&,WTF::CompletionHandler<void ()(WebKit::PaymentSetupFeatures &&)> &&)::$_0>(WebKit::WebPaymentCoordinatorProxy::getSetupFeatures(WebKit::PaymentSetupConfiguration const&,WTF::CompletionHandler<void ()(WebKit::PaymentSetupFeatures &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(NSArray<PKPaymentSetupFeature *> *)>::fromCallable<WebKit::WebPaymentCoordinatorProxy::getSetupFeatures(WebKit::PaymentSetupConfiguration const&,WTF::CompletionHandler<void ()(WebKit::PaymentSetupFeatures &&)> &&)::$_0>(WebKit::WebPaymentCoordinatorProxy::getSetupFeatures(WebKit::PaymentSetupConfiguration const&,WTF::CompletionHandler<void ()(WebKit::PaymentSetupFeatures &&)> &&)::$_0)::{lambda(void *,NSArray<PKPaymentSetupFeature *> *)#1}::__invoke(WTF::RunLoop *a1, const void *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;

  WTF::RunLoop::main(a1);
  v4 = *((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 4) = 0;
  if (a2)
    CFRetain(a2);
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v5 = &off_1E34B7810;
  v5[1] = v4;
  v5[2] = a2;
  v7 = v5;
  WTF::RunLoop::dispatch();
  result = (uint64_t)v7;
  if (v7)
    return (*(uint64_t (**)(_QWORD *))(*v7 + 8))(v7);
  return result;
}

void sub_19702A398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::getSetupFeatures(WebKit::PaymentSetupConfiguration const&,WTF::CompletionHandler<void ()(WebKit::PaymentSetupFeatures &&)> &&)::$_0::operator()(NSArray<PKPaymentSetupFeature *> *)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  const void *v2;
  uint64_t v3;

  *a1 = &off_1E34B7810;
  v2 = (const void *)a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::getSetupFeatures(WebKit::PaymentSetupConfiguration const&,WTF::CompletionHandler<void ()(WebKit::PaymentSetupFeatures &&)> &&)::$_0::operator()(NSArray<PKPaymentSetupFeature *> *)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  const void *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34B7810;
  v3 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::getSetupFeatures(WebKit::PaymentSetupConfiguration const&,WTF::CompletionHandler<void ()(WebKit::PaymentSetupFeatures &&)> &&)::$_0::operator()(NSArray<PKPaymentSetupFeature *> *)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  CFTypeRef v2;
  CFTypeRef cf;

  v1 = *(_QWORD *)(a1 + 8);
  cf = *(CFTypeRef *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v1 + 16))(v1, &cf);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  v2 = cf;
  cf = 0;
  if (v2)
    CFRelease(v2);
}

void sub_19702A4F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  uint64_t v10;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::WebPaymentCoordinatorProxy::platformBeginApplePaySetup(WebKit::PaymentSetupConfiguration const&,WebKit::PaymentSetupFeatures const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::WebPaymentCoordinatorProxy::platformBeginApplePaySetup(WebKit::PaymentSetupConfiguration const&,WebKit::PaymentSetupFeatures const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::WebPaymentCoordinatorProxy::platformBeginApplePaySetup(WebKit::PaymentSetupConfiguration const&,WebKit::PaymentSetupFeatures const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::WebPaymentCoordinatorProxy::platformBeginApplePaySetup(WebKit::PaymentSetupConfiguration const&,WebKit::PaymentSetupFeatures const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *)#1}::__invoke(WTF::RunLoop *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  _QWORD *v5;

  WTF::RunLoop::main(a1);
  v2 = *((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 4) = 0;
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = &off_1E34B7858;
  v3[1] = v2;
  v5 = v3;
  WTF::RunLoop::dispatch();
  result = (uint64_t)v5;
  if (v5)
    return (*(uint64_t (**)(_QWORD *))(*v5 + 8))(v5);
  return result;
}

void sub_19702A5C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::platformBeginApplePaySetup(WebKit::PaymentSetupConfiguration const&,WebKit::PaymentSetupFeatures const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34B7858;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::platformBeginApplePaySetup(WebKit::PaymentSetupConfiguration const&,WebKit::PaymentSetupFeatures const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34B7858;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::platformBeginApplePaySetup(WebKit::PaymentSetupConfiguration const&,WebKit::PaymentSetupFeatures const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_19702A6B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::platformCanMakePayments(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;

  *a1 = &off_1E34B7880;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (const void *)a1[1];
  a1[1] = 0;
  if (v3)
    CFRelease(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::platformCanMakePayments(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  const void *v4;

  *(_QWORD *)this = &off_1E34B7880;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    CFRelease(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::platformCanMakePayments(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  WTF::RunLoop::main((WTF::RunLoop *)a1);
  v2 = objc_msgSend(*(id *)(a1 + 8), "canMakePayments");
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v4 = &off_1E34B78A8;
  *(_BYTE *)(v4 + 8) = v2;
  *(_QWORD *)(v4 + 16) = v3;
  v6 = v4;
  WTF::RunLoop::dispatch();
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

void sub_19702A804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::platformCanMakePayments(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34B78A8;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::platformCanMakePayments(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34B78A8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::platformCanMakePayments(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void sub_19702A908(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::platformShowPaymentUI(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::ApplePaySessionPaymentRequest const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,WTF::String const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  const void *v7;

  *a1 = &off_1E34B78D0;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = (const void *)a1[2];
  a1[2] = 0;
  if (v7)
    CFRelease(v7);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::platformShowPaymentUI(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::ApplePaySessionPaymentRequest const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,WTF::String const&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  const void *v7;

  *(_QWORD *)this = &off_1E34B78D0;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
    CFRelease(v7);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPaymentCoordinatorProxy::platformShowPaymentUI(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::URL const&,WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::ApplePaySessionPaymentRequest const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,WTF::String const&>::call(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const __CFString *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a1[3];
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
  {
    v5 = (void *)a1[2];
    if (*a2)
      v6 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v6 = &stru_1E351F1B8;
    objc_msgSend(v5, "setUserAgent:", v6);
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(v4 + 32) + 80))(&v14, *(_QWORD *)(v4 + 32), v4, a1[2]);
    v7 = v14;
    v14 = 0;
    v8 = *(_QWORD *)(v4 + 64);
    *(_QWORD *)(v4 + 64) = v7;
    if (v8)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      v9 = v14;
      v14 = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      v7 = *(_QWORD *)(v4 + 64);
    }
    if (v7)
    {
      v10 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 32) + 64))(*(_QWORD *)(v4 + 32), v4);
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v7 + 24))(v7, v10, a1 + 4);
    }
    else
    {
      v13 = a1[4];
      a1[4] = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 16))(v13, 0);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    }
  }
  else
  {
    v12 = a1[4];
    a1[4] = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 16))(v12, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
}

void sub_19702AB84(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit21AuthenticationManager20initializeConnectionEPN3IPC10ConnectionEEUb_E3__7vJEED1Ev(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void *v6;

  *a1 = &off_1E34B78F8;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (void *)a1[1];
  if (v6)

  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit21AuthenticationManager20initializeConnectionEPN3IPC10ConnectionEEUb_E3__7vJEED0Ev(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void *v6;

  *(_QWORD *)this = &off_1E34B78F8;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (void *)*((_QWORD *)this + 1);
  if (v6)

  return WTF::fastFree(this, a2);
}

void _ZN3WTF6Detail15CallableWrapperIZZN6WebKit21AuthenticationManager20initializeConnectionEPN3IPC10ConnectionEEUb_E3__7vJEE4callEv(uint64_t a1)
{
  _ZZZN6WebKit21AuthenticationManager20initializeConnectionEPN3IPC10ConnectionEEUb_ENK3__7clEv((WTF *)(a1 + 8));
}

void _ZZZN6WebKit21AuthenticationManager20initializeConnectionEPN3IPC10ConnectionEEUb_ENK3__7clEv(WTF *a1)
{
  Class Class;
  uint64_t v3;
  uint64_t v4;
  const char *string;
  uint64_t uint64;
  uint64_t v8;
  xpc_object_t value;
  xpc_object_t v10;
  id v11;
  const void *v12;
  xpc_object_t array;
  void *v14;
  size_t count;
  void *v16;
  size_t v17;
  xpc_object_t v18;
  const UInt8 *bytes_ptr;
  size_t length;
  const __CFData *v21;
  SecCertificateRef v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  const void *v29;
  _BYTE v30[32];
  uint64_t v31;

  if ((WTF::isMainRunLoop(a1) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19702AE7CLL);
  }
  Class = object_getClass(*(id *)a1);
  if (Class != (Class)MEMORY[0x1E0C81310])
  {
    v3 = *((_QWORD *)a1 + 1);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (Class == (Class)MEMORY[0x1E0C812F8] && v4 != 0)
      {
        string = xpc_dictionary_get_string(*(xpc_object_t *)a1, "message-name");
        if (!strcmp(string, "client-certificate-credential"))
        {
          uint64 = xpc_dictionary_get_uint64(*(xpc_object_t *)a1, "challenge-id");
          if (uint64)
          {
            v8 = uint64;
            value = xpc_dictionary_get_value(*(xpc_object_t *)a1, "sec-key-proxy-endpoint");
            if (value)
            {
              v10 = value;
              if (object_getClass(value) == (Class)MEMORY[0x1E0C81308])
              {
                v11 = objc_alloc_init(MEMORY[0x1E0CB3B60]);
                objc_msgSend(v11, "_setEndpoint:", v10);
                v31 = 0;
                v12 = (const void *)objc_msgSend(MEMORY[0x1E0CD5C88], "createIdentityFromEndpoint:error:", v11, &v31);
                if (v12 && !v31)
                {
                  array = xpc_dictionary_get_array(*(xpc_object_t *)a1, "certificates");
                  v14 = array;
                  if (!array)
                  {
LABEL_32:
                    CFRelease(v12);
LABEL_33:
                    if (v11)
                      CFRelease(v11);
                    return;
                  }
                  count = xpc_array_get_count(array);
                  if (count)
                  {
                    v16 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", count);
                    v17 = 0;
                    while (1)
                    {
                      v18 = xpc_array_get_value(v14, v17);
                      bytes_ptr = (const UInt8 *)xpc_data_get_bytes_ptr(v18);
                      length = xpc_data_get_length(v18);
                      v21 = CFDataCreate(0, bytes_ptr, length);
                      v22 = SecCertificateCreateWithData(0, v21);
                      if (!v22)
                        break;
                      objc_msgSend(v16, "addObject:", v22);
                      CFRelease(v22);
                      if (v21)
                        CFRelease(v21);
                      if (count == ++v17)
                        goto LABEL_25;
                    }
                    if (v21)
                    {
                      v29 = v21;
LABEL_37:
                      CFRelease(v29);
                    }
                  }
                  else
                  {
                    v16 = 0;
LABEL_25:
                    v23 = xpc_dictionary_get_uint64(*(xpc_object_t *)a1, "persistence");
                    if (v23 <= 3)
                    {
                      v24 = *((_QWORD *)a1 + 1);
                      if (v24)
                      {
                        v25 = *(_QWORD *)(v24 + 8);
                        v26 = v25 ? v25 - 8 : 0;
                      }
                      else
                      {
                        v26 = 0;
                      }
                      v27 = objc_msgSend(objc_alloc(MEMORY[0x1E0C92C60]), "initWithIdentity:certificates:persistence:", v12, v16, v23);
                      MEMORY[0x19AEAC4CC](v30, v27);
                      WebKit::AuthenticationManager::completeAuthenticationChallenge(v26, v8, 0, (uint64_t)v30);
                      WebCore::Credential::~Credential((WebCore::Credential *)v30, v28);
                      if (v27)
                      {
                        v29 = (const void *)v27;
                        goto LABEL_37;
                      }
                    }
                  }
                }
                if (!v12)
                  goto LABEL_33;
                goto LABEL_32;
              }
            }
          }
        }
      }
    }
  }
}

void sub_19702AF40(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, ...)
{
  const void *v3;
  const void *v4;
  const void *v5;
  va_list va;

  va_start(va, a3);
  WebCore::Credential::~Credential((WebCore::Credential *)va, a2);
  if (v5)
    CFRelease(v5);
  CFRelease(v4);
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(a1);
}

void WebCore::Credential::~Credential(WebCore::Credential *this, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v3 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

uint64_t WebKit::RemoteMediaSessionHelperProxy::didReceiveMessage(uint64_t this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = this;
  v4 = *((unsigned __int16 *)a3 + 25);
  switch(v4)
  {
    case 1213:
      this = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((this & 0xFF00000000) != 0)
      {
        v5 = this;
        *(_DWORD *)(v3 + 56) = this;
        *(_BYTE *)(v3 + 60) = 1;
        v6 = WebCore::MediaSessionHelper::sharedHelper((WebCore::MediaSessionHelper *)this);
        return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 16))(v6, v5, 0);
      }
      break;
    case 1215:
      return (uint64_t)WebKit::RemoteMediaSessionHelperProxy::stopMonitoringWirelessRoutes((WebCore::MediaSessionHelper *)this);
    case 1214:
      return (uint64_t)WebKit::RemoteMediaSessionHelperProxy::startMonitoringWirelessRoutes((WebCore::MediaSessionHelper *)this);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebKit::RemoteMediaSessionHelperProxy::didReceiveMessage(WebKit::RemoteMediaSessionHelperProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  return WebKit::RemoteMediaSessionHelperProxy::didReceiveMessage((uint64_t)this - 16, a2, a3);
}

uint64_t WebKit::RemoteRenderingBackendProxy::didReceiveSyncMessage()
{
  return 0;
}

uint64_t WebKit::RemoteSampleBufferDisplayLayerManager::didReceiveMessage(unsigned __int8 **this, IPC::Connection *a2, IPC::Decoder *a3)
{
  unsigned __int8 **v6;
  int v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t result;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 **v42;
  _QWORD *v43;

  v6 = this + 2;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this + 2);
  v7 = *((unsigned __int16 *)a3 + 25);
  if (v7 == 1325)
  {
    v27 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
    if (v28)
    {
      result = WebKit::RemoteSampleBufferDisplayLayerManager::releaseLayer((uint64_t)this, v27);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v7 != 1324)
  {
    result = WebKit::RemoteSampleBufferDisplayLayerManager::dispatchMessage((WebKit::RemoteSampleBufferDisplayLayerManager *)this, a2, a3);
    goto LABEL_30;
  }
  v8 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
  if (!v9)
    goto LABEL_29;
  v10 = *((_QWORD *)a3 + 1);
  v11 = *(_QWORD *)a3;
  v12 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
  if (v10 <= v12)
    goto LABEL_19;
  v13 = (unsigned __int8 *)(v11 + v12);
  *((_QWORD *)a3 + 2) = v13 + 1;
  if (!v11)
  {
LABEL_42:
    v29 = v10;
    v30 = v11;
LABEL_20:
    v10 = 0;
    v11 = 0;
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    v32 = *((_QWORD *)a3 + 3);
    if (!v32)
      goto LABEL_24;
    if (!v29)
    {
      v10 = 0;
      v11 = 0;
      goto LABEL_24;
    }
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v32 + 16))(v32, v30, v29);
    goto LABEL_23;
  }
  v14 = *v13;
  if (v14 >= 2)
  {
LABEL_24:
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    v33 = *((_QWORD *)a3 + 3);
    if (v33 && v10)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, v11);
    goto LABEL_29;
  }
  v15 = v8;
  v16 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)a3);
  if (!v17)
  {
LABEL_23:
    v11 = *(_QWORD *)a3;
    v10 = *((_QWORD *)a3 + 1);
    goto LABEL_24;
  }
  v10 = *((_QWORD *)a3 + 1);
  v11 = *(_QWORD *)a3;
  v18 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
  if (v10 <= v18)
  {
LABEL_19:
    v29 = 0;
    v30 = 0;
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    v31 = *((_QWORD *)a3 + 3);
    if (v31)
    {
      if (v10)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
        v30 = *(_QWORD *)a3;
        v29 = *((_QWORD *)a3 + 1);
      }
      else
      {
        v29 = 0;
        v30 = 0;
      }
    }
    goto LABEL_20;
  }
  v19 = (unsigned __int8 *)(v11 + v18);
  *((_QWORD *)a3 + 2) = v19 + 1;
  if (!v11)
    goto LABEL_42;
  v20 = *v19;
  if (v20 >= 2)
    goto LABEL_24;
  if (v10 <= (unint64_t)&v19[-v11 + 1])
  {
    v34 = 0;
    v35 = 0;
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    v36 = *((_QWORD *)a3 + 3);
    if (v36)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
      v34 = 0;
      v39 = *(_QWORD *)a3;
      v40 = *((_QWORD *)a3 + 1);
      v41 = *((_QWORD *)a3 + 3);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v35 = 0;
      if (v41)
      {
        if (v40)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v41 + 16))(v41, v39);
          v35 = *(_QWORD *)a3;
          v34 = *((_QWORD *)a3 + 1);
        }
      }
    }
  }
  else
  {
    *((_QWORD *)a3 + 2) = v19 + 2;
    v21 = v19[1];
    if (v21 < 2)
    {
      v22 = v16;
      result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if ((_BYTE)v24)
      {
        v25 = result;
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a2);
        v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v26 = off_1E34B7998;
        v26[1] = v25;
        v42 = 0;
        v43 = v26;
        v26[2] = a2;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v42);
        WebKit::RemoteSampleBufferDisplayLayerManager::createLayer((uint64_t)this, v15, v14 != 0, v22, v20 != 0, v21 != 0, (uint64_t *)&v43);
        result = (uint64_t)v43;
        v43 = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
      goto LABEL_30;
    }
    v34 = v10;
    v35 = v11;
  }
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v37 = *((_QWORD *)a3 + 3);
  if (v37 && v34)
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v37 + 16))(v37, v35, v34);
LABEL_29:
  v24 = *(void **)a3;
  v38 = *((_QWORD *)a3 + 1);
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  result = *((_QWORD *)a3 + 3);
  if (result && v38)
    result = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)result + 16))(result, v24);
LABEL_30:
  if (this)
    return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*v6, v24);
  return result;
}

void WebKit::RemoteSampleBufferDisplayLayer::didReceiveMessage(WebCore::LocalSampleBufferDisplayLayer **this, IPC::Connection *a2, IPC::Decoder *a3)
{
  WTF::StringImpl *v4;
  WebCore::LocalSampleBufferDisplayLayer *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  char v11;
  uint64_t v12;
  int v13;
  char v14;
  char v15;

  switch(*((_WORD *)a3 + 25))
  {
    case 0x52E:
      WebCore::LocalSampleBufferDisplayLayer::clearVideoFrames(this[10]);
      return;
    case 0x52F:
      IPC::Decoder::decode<std::tuple<WebKit::SharedVideoFrame>>((uint64_t *)a3, (uint64_t)&v9);
      if (v14)
      {
        WebKit::RemoteSampleBufferDisplayLayer::enqueueVideoFrame((uint64_t)this, (uint64_t)&v9);
        if (v14)
        {
          if (v13 != -1)
            ((void (*)(char *, uint64_t *))off_1E34B79B0[v13])(&v15, &v12);
        }
      }
      return;
    case 0x530:
      WebCore::LocalSampleBufferDisplayLayer::flush(this[10]);
      return;
    case 0x531:
      WebCore::LocalSampleBufferDisplayLayer::flushAndRemoveImage(this[10]);
      return;
    case 0x532:
      *((_BYTE *)this[10] + 152) = 1;
      return;
    case 0x533:
      *((_BYTE *)this[10] + 152) = 0;
      return;
    case 0x534:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)&v9);
      if (!v10)
        return;
      v5 = this[10];
      v6 = v9;
      v9 = 0;
      v7 = (WTF::StringImpl *)*((_QWORD *)v5 + 20);
      *((_QWORD *)v5 + 20) = v6;
      if (!v7)
        return;
      if (*(_DWORD *)v7 == 2)
      {
        WTF::StringImpl::destroy(v7, v4);
        if (!v10)
          return;
      }
      else
      {
        *(_DWORD *)v7 -= 2;
      }
      v8 = v9;
      v9 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v4);
        else
          *(_DWORD *)v8 -= 2;
      }
      return;
    case 0x535:
      IPC::Decoder::decode<std::tuple<WebCore::SharedMemoryHandle>>(a3, (uint64_t)&v9);
      if (v11)
      {
        WebKit::SharedVideoFrameReader::setSharedMemory((uint64_t)(this + 12));
        if (v11)
          goto LABEL_21;
      }
      return;
    case 0x536:
      IPC::Decoder::decode<std::tuple<IPC::Semaphore>>(a3, (uint64_t)&v9);
      if (v10)
      {
        std::optional<IPC::Semaphore>::operator=[abi:sn180100]<IPC::Semaphore,void>((IPC::Semaphore *)(this + 14), (IPC::Semaphore *)&v9);
        if (v10)
        {
          IPC::Semaphore::destroy((IPC::Semaphore *)&v9);
LABEL_21:
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v9);
        }
      }
      return;
    case 0x537:
      if ((unsigned __int16)IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3) >= 0x100u)
        WebCore::LocalSampleBufferDisplayLayer::setShouldMaintainAspectRatio(this[10]);
      return;
    case 0x538:
      if ((IPC::Decoder::decode<std::tuple<BOOL,BOOL>>((uint64_t *)a3) & 0xFFFFFF) >= 0x10000)
        WebCore::LocalSampleBufferDisplayLayer::updateDisplayMode(this[10]);
      return;
    default:
      return;
  }
}

void `non-virtual thunk to'WebKit::RemoteSampleBufferDisplayLayer::didReceiveMessage(WebCore::LocalSampleBufferDisplayLayer **this, IPC::Connection *a2, IPC::Decoder *a3)
{
  WebKit::RemoteSampleBufferDisplayLayer::didReceiveMessage(this - 3, a2, a3);
}

unint64_t WebKit::RemoteSharedResourceCache::didReceiveMessage(unint64_t this, IPC::Connection *a2, IPC::Decoder *a3)
{
  unint64_t v3;
  char v4;
  unint64_t v5[3];

  if (*((_WORD *)a3 + 25) == 1351)
  {
    v3 = this;
    this = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
    if (v4)
    {
      v5[1] = 0;
      v5[2] = 0;
      v5[0] = this;
      return IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::remove(v3 + 24, v5);
    }
  }
  return this;
}

uint64_t WebKit::SampleBufferDisplayLayer::didReceiveMessage(uint64_t this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v3;

  if (*((_WORD *)a3 + 25) == 1421)
  {
    v3 = this;
    this = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
    if ((unsigned __int16)this >= 0x100u)
      return WebKit::SampleBufferDisplayLayer::setDidFail(v3, this != 0);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebKit::SampleBufferDisplayLayer::didReceiveMessage(WebKit::SampleBufferDisplayLayer *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  return WebKit::SampleBufferDisplayLayer::didReceiveMessage((uint64_t)this - 24, a2, a3);
}

void WebKit::ServiceWorkerFetchTask::didReceiveMessage(WebKit::ServiceWorkerFetchTask *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  void *v6;
  WTF::RefCountedBase *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::RefCountedBase *v10;
  char v11;
  unint64_t v12;
  char v13;
  char v14;
  char v15;
  unsigned __int8 v16;
  char v17;

  switch(*((_WORD *)a3 + 25))
  {
    case 0x593:
      IPC::Decoder::decode<std::tuple<WebCore::ResourceError>>((uint64_t *)a3, &v10);
      if (v14)
        WebKit::ServiceWorkerFetchTask::didFail(this, (const WebCore::ResourceError *)&v10);
      std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v10, v4);
      break;
    case 0x594:
      IPC::Decoder::decode<std::tuple<WebCore::NetworkLoadMetrics>>((uint64_t *)a3, (uint64_t)&v10);
      if (v15)
        WebKit::ServiceWorkerFetchTask::didFinish(this, (const WebCore::NetworkLoadMetrics *)&v10);
      std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v10, v5);
      break;
    case 0x595:
      WebKit::ServiceWorkerFetchTask::didNotHandle(this);
      break;
    case 0x596:
      IPC::Decoder::decode<std::tuple<IPC::SharedBufferReference,unsigned long long>>((uint64_t *)a3, &v10);
      if (v13)
        WebKit::ServiceWorkerFetchTask::didReceiveData((unsigned int *)this, (const IPC::SharedBufferReference *)&v10, v12);
      std::__optional_destruct_base<std::tuple<IPC::SharedBufferReference,unsigned long long>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v10, v6);
      break;
    case 0x597:
      IPC::Decoder::decode<std::tuple<IPC::FormDataReference>>((uint64_t *)a3, (uint64_t)&v10);
      if (v11)
      {
        v7 = v10;
        v10 = 0;
        if (v7)
          WTF::RefCounted<WebCore::FormData>::deref(v7);
      }
      break;
    case 0x598:
      IPC::Decoder::decode<std::tuple<WebCore::ResourceResponse>>((uint64_t *)a3, &v10);
      if (v16)
      {
        WebKit::ServiceWorkerFetchTask::cancelPreloadIfNecessary((uint64_t *)this);
        WebKit::ServiceWorkerFetchTask::processRedirectResponse(this, (uint64_t)&v10, 1);
      }
      std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)&v10, v8);
      break;
    case 0x599:
      IPC::Decoder::decode<std::tuple<WebCore::ResourceResponse,BOOL>>((uint64_t *)a3, &v10);
      if (v17)
        WebKit::ServiceWorkerFetchTask::didReceiveResponse(this, (uint64_t)&v10, v16);
      std::__optional_destruct_base<std::tuple<WebCore::ResourceResponse,BOOL>,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)&v10, v9);
      break;
    case 0x59A:
      WebKit::ServiceWorkerFetchTask::usePreload(this);
      break;
    case 0x59B:
      WebKit::ServiceWorkerFetchTask::workerClosed(this);
      break;
    default:
      return;
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteRenderingBackend38GetImageBufferResourceLimitsForTestingEN6WebKit22RemoteRenderingBackendES8_FvONS_17CompletionHandlerIFvN7WebCore25ImageBufferResourceLimitsEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B7920;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteRenderingBackend38GetImageBufferResourceLimitsForTestingEN6WebKit22RemoteRenderingBackendES8_FvONS_17CompletionHandlerIFvN7WebCore25ImageBufferResourceLimitsEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B7920;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteRenderingBackend38GetImageBufferResourceLimitsForTestingEN6WebKit22RemoteRenderingBackendES8_FvONS_17CompletionHandlerIFvN7WebCore25ImageBufferResourceLimitsEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EE4callESB_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3113;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebCore::ImageBufferResourceLimits,void>::encode((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

unsigned int *IPC::Decoder::decode<std::tuple<WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unsigned int *result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  char v30;
  uint64_t v31;
  _BYTE v32[24];
  __int16 v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;

  v4 = a2[1];
  v5 = *a2;
  v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    v18 = 0;
    v19 = 0;
    *a2 = 0;
    a2[1] = 0;
    v20 = a2[3];
    if (v20)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v20 + 16))(v20, v5, v4);
        v19 = *a2;
        v18 = a2[1];
      }
      else
      {
        v18 = 0;
        v19 = 0;
      }
    }
    goto LABEL_20;
  }
  v8 = (unint64_t *)(v5 + v6);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v18 = v4;
    v19 = 0;
LABEL_20:
    *a2 = 0;
    a2[1] = 0;
    v21 = a2[3];
    if (v21 && v18)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v19);
LABEL_31:
    v25 = *a2;
    v26 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (unsigned int *)a2[3];
    if (result)
    {
      if (v26)
      {
        (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)result + 16))(result, v25);
        v27 = *a2;
        v26 = a2[1];
        result = (unsigned int *)a2[3];
LABEL_34:
        *(_BYTE *)a1 = 0;
        *(_BYTE *)(a1 + 16) = 0;
        *a2 = 0;
        a2[1] = 0;
        if (result)
        {
          if (v26)
            return (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)result + 16))(result, v27);
        }
        return result;
      }
    }
    else
    {
      v26 = 0;
    }
    v27 = 0;
    goto LABEL_34;
  }
  v9 = *v8;
  v36 = 0;
  v37 = 0;
  if (v9 >= 0x6666)
  {
    while (1)
    {
      IPC::Decoder::decode<WebKit::ImageBufferSetPrepareBufferForDisplayInputData>((uint64_t)&v31, a2);
      if (!v35)
        goto LABEL_30;
      v22 = HIDWORD(v37);
      if (HIDWORD(v37) == (_DWORD)v37)
      {
        WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::ImageBufferSetPrepareBufferForDisplayInputData>((uint64_t)&v36, (unint64_t)&v31);
      }
      else
      {
        v23 = v36 + 40 * HIDWORD(v37);
        *(_QWORD *)v23 = v31;
        WebCore::Region::Region();
        v24 = v33;
        *(_BYTE *)(v23 + 34) = v34;
        *(_WORD *)(v23 + 32) = v24;
        HIDWORD(v37) = v22 + 1;
      }
      if (v35)
        WebCore::Region::~Region((WebCore::Region *)v32);
      if (!--v9)
      {
        WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v36, HIDWORD(v37));
LABEL_16:
        v14 = v36;
        v15 = v37;
        goto LABEL_17;
      }
    }
  }
  if (v9)
  {
    LODWORD(v37) = 40 * (int)v9 / 0x28u;
    v36 = WTF::fastMalloc((WTF *)(40 * v9));
    while (1)
    {
      IPC::Decoder::decode<WebKit::ImageBufferSetPrepareBufferForDisplayInputData>((uint64_t)&v31, a2);
      if (!v35)
        break;
      v11 = HIDWORD(v37);
      if (HIDWORD(v37) == (_DWORD)v37)
      {
        WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::ImageBufferSetPrepareBufferForDisplayInputData>((uint64_t)&v36, (unint64_t)&v31);
      }
      else
      {
        v12 = v36 + 40 * HIDWORD(v37);
        *(_QWORD *)v12 = v31;
        WebCore::Region::Region();
        v13 = v33;
        *(_BYTE *)(v12 + 34) = v34;
        *(_WORD *)(v12 + 32) = v13;
        HIDWORD(v37) = v11 + 1;
      }
      if (v35)
        WebCore::Region::~Region((WebCore::Region *)v32);
      if (!--v9)
        goto LABEL_16;
    }
LABEL_30:
    WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v36, v10);
    goto LABEL_31;
  }
  v14 = 0;
  v15 = 0;
LABEL_17:
  v28 = v15;
  v36 = 0;
  v37 = 0;
  v30 = 1;
  WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v36, a2);
  v29[0] = 0;
  v29[1] = 0;
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + 8) = v28;
  result = WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v29, v16);
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

uint64_t WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::ImageBufferSetPrepareBufferForDisplayInputData>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int16 v6;

  v3 = WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 40 * *(unsigned int *)(a1 + 12);
  *(_QWORD *)v4 = *(_QWORD *)v3;
  result = WebCore::Region::Region();
  v6 = *(_WORD *)(v3 + 32);
  *(_BYTE *)(v4 + 34) = *(_BYTE *)(v3 + 34);
  *(_WORD *)(v4 + 32) = v6;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x19702BEACLL);
    }
    v3 = *(WTF **)a1;
    v4 = *(_QWORD *)a1 + 40 * *(unsigned int *)(a1 + 12);
    v5 = 40 * a2;
    v6 = WTF::fastMalloc((WTF *)(40 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebKit::ImageBufferSetPrepareBufferForDisplayInputData>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
}

void WTF::VectorMover<false,WebKit::ImageBufferSetPrepareBufferForDisplayInputData>::move(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;

  if (a1 != a2)
  {
    v4 = a3 + 8;
    v5 = a1 + 8;
    do
    {
      *(_QWORD *)(v4 - 8) = *(_QWORD *)(v5 - 8);
      WebCore::Region::Region();
      v6 = *(_WORD *)(v5 + 24);
      *(_BYTE *)(v4 + 26) = *(_BYTE *)(v5 + 26);
      *(_WORD *)(v4 + 24) = v6;
      WebCore::Region::~Region((WebCore::Region *)v5);
      v4 += 40;
      v7 = v5 + 32;
      v5 += 40;
    }
    while (v7 != a2);
  }
}

void WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, unint64_t this)
{
  unint64_t v4;
  uint64_t v5;
  WebCore::Region *v6;
  uint64_t v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;

  if (*(unsigned int *)(a1 + 8) > this)
  {
    v4 = *(unsigned int *)(a1 + 12);
    if (v4 > this)
    {
      v5 = 40 * v4 - 40 * this;
      v6 = (WebCore::Region *)(*(_QWORD *)a1 + 40 * this + 8);
      do
      {
        WebCore::Region::~Region(v6);
        v6 = (WebCore::Region *)(v7 + 40);
        v5 -= 40;
      }
      while (v5);
      *(_DWORD *)(a1 + 12) = this;
      LODWORD(v4) = this;
    }
    v8 = *(WTF **)a1;
    if (this)
    {
      if (this >= 0x6666667)
      {
        __break(0xC471u);
        return;
      }
      v9 = (WTF *)(40 * this);
      v10 = WTF::fastMalloc(v9);
      *(_DWORD *)(a1 + 8) = (v9 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)a1 = v10;
      if ((WTF *)v10 != v8)
        WTF::VectorMover<false,WebKit::ImageBufferSetPrepareBufferForDisplayInputData>::move((uint64_t)v8, (uint64_t)v8 + 40 * v4, v10);
    }
    if (v8)
    {
      if (*(WTF **)a1 == v8)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v8, (void *)this);
    }
  }
}

WTF *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  WTF *v15;
  __int128 v16;
  int v17;
  __int128 *v18;
  WTF *result;
  int v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  unsigned int v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  WTF *v44;
  WTF *v45;
  __int128 v46;
  char v47;
  WTF *v48;
  uint64_t v49;

  v4 = IPC::ArgumentCoder<PAL::SessionID,void>::decode(a2);
  if (v5)
  {
    v6 = a2[1];
    v7 = *a2;
    v8 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
    if (v6 < v8 || v6 - v8 <= 7)
    {
      v34 = 0;
      v35 = 0;
      *a2 = 0;
      a2[1] = 0;
      v36 = a2[3];
      if (v36)
      {
        if (v6)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v36 + 16))(v36, v7, v6);
          v35 = *a2;
          v34 = a2[1];
        }
        else
        {
          v34 = 0;
          v35 = 0;
        }
      }
      goto LABEL_42;
    }
    v10 = (unint64_t *)(v7 + v8);
    a2[2] = (uint64_t)(v10 + 1);
    if (!v7)
    {
      v34 = v6;
      v35 = 0;
LABEL_42:
      *a2 = 0;
      a2[1] = 0;
      v37 = a2[3];
      if (v37 && v34)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v35);
      goto LABEL_31;
    }
    v11 = v4;
    v12 = *v10;
    v48 = 0;
    v49 = 0;
    if (v12 >= 0x10000)
    {
      while (1)
      {
        IPC::Decoder::decode<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::OptionSet<WebKit::BufferInSetType>>>((uint64_t)&v46, a2);
        if (!v47)
          goto LABEL_29;
        if (HIDWORD(v49) == (_DWORD)v49)
        {
          WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::OptionSet<WebKit::BufferInSetType>>>((uint64_t)&v48, (unint64_t)&v46);
        }
        else
        {
          *((_OWORD *)v48 + HIDWORD(v49)) = v46;
          ++HIDWORD(v49);
        }
        if (!--v12)
        {
          WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v48, HIDWORD(v49));
          result = v48;
          v20 = v49;
          v17 = HIDWORD(v49);
          goto LABEL_17;
        }
      }
    }
    if (v12)
    {
      LODWORD(v49) = v12;
      v48 = (WTF *)WTF::fastMalloc((WTF *)(16 * v12));
      while (1)
      {
        IPC::Decoder::decode<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::OptionSet<WebKit::BufferInSetType>>>((uint64_t)&v46, a2);
        if (!v47)
          break;
        v14 = HIDWORD(v49);
        if (HIDWORD(v49) == (_DWORD)v49)
        {
          v18 = (__int128 *)WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v48, HIDWORD(v49) + 1, (unint64_t)&v46);
          v14 = HIDWORD(v49);
          v15 = v48;
          v16 = *v18;
        }
        else
        {
          v15 = v48;
          v16 = v46;
        }
        *((_OWORD *)v15 + v14) = v16;
        v17 = ++HIDWORD(v49);
        if (!--v12)
        {
          result = v48;
          v20 = v49;
          goto LABEL_17;
        }
      }
LABEL_29:
      v26 = v48;
      if (v48)
      {
        v48 = 0;
        LODWORD(v49) = 0;
        WTF::fastFree(v26, v13);
      }
LABEL_31:
      v27 = *a2;
      v28 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v29 = a2[3];
      if (!v29 || !v28)
        goto LABEL_32;
      goto LABEL_51;
    }
    v17 = 0;
    v20 = 0;
    result = 0;
LABEL_17:
    v21 = a2[1];
    v22 = (char *)*a2;
    v23 = a2[2] - *a2;
    if (v21 <= v23)
    {
      v38 = 0;
      v39 = 0;
      *a2 = 0;
      a2[1] = 0;
      v40 = a2[3];
      if (v40)
      {
        v45 = result;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v40 + 16))(a2[3]);
          v39 = *a2;
          v38 = a2[1];
        }
        else
        {
          v38 = 0;
          v39 = 0;
        }
        result = v45;
      }
    }
    else
    {
      v24 = &v22[v23];
      a2[2] = (uint64_t)(v24 + 1);
      if (v22)
      {
        v25 = *v24;
        if (v25 < 2)
        {
          *(_QWORD *)a1 = v11;
          *(_QWORD *)(a1 + 8) = result;
          *(_DWORD *)(a1 + 16) = v20;
          *(_DWORD *)(a1 + 20) = v17;
          *(_BYTE *)(a1 + 24) = v25 != 0;
          *(_BYTE *)(a1 + 32) = 1;
          return result;
        }
        goto LABEL_47;
      }
      v38 = v21;
      v39 = 0;
    }
    v21 = 0;
    v22 = 0;
    *a2 = 0;
    a2[1] = 0;
    v41 = a2[3];
    if (v41)
    {
      v44 = result;
      if (v38)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v41 + 16))(a2[3], v39, v38);
        v22 = (char *)*a2;
        v21 = a2[1];
      }
      else
      {
        v21 = 0;
        v22 = 0;
      }
      result = v44;
    }
LABEL_47:
    *a2 = 0;
    a2[1] = 0;
    v42 = a2[3];
    if (v42 && v21)
    {
      v43 = result;
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v42 + 16))(a2[3], v22);
      result = v43;
    }
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 32) = 0;
    if (result)
      WTF::fastFree(result, v22);
    goto LABEL_33;
  }
  v27 = *a2;
  v32 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v29 = a2[3];
  if (v29)
    v33 = v32 == 0;
  else
    v33 = 1;
  if (v33)
    goto LABEL_32;
LABEL_51:
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, v27);
LABEL_32:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 32) = 0;
LABEL_33:
  v30 = *a2;
  v31 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (WTF *)a2[3];
  if (result)
  {
    if (v31)
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v30);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::OptionSet<WebKit::BufferInSetType>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  char v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v5)
  {
    v6 = a2[1];
    v7 = *a2;
    v8 = a2[2] - *a2;
    if (v6 <= v8)
    {
      v11 = 0;
      v12 = 0;
      *a2 = 0;
      a2[1] = 0;
      v13 = a2[3];
      if (v13)
      {
        if (v6)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
          v12 = *a2;
          v11 = a2[1];
        }
        else
        {
          v11 = 0;
          v12 = 0;
        }
      }
    }
    else
    {
      v9 = (unsigned __int8 *)(v7 + v8);
      a2[2] = (uint64_t)(v9 + 1);
      if (v7)
      {
        v10 = *v9;
        if (v10 < 8)
        {
          *(_QWORD *)a1 = result;
          *(_BYTE *)(a1 + 8) = v10;
          *(_BYTE *)(a1 + 16) = 1;
          return result;
        }
        goto LABEL_9;
      }
      v11 = v6;
      v12 = 0;
    }
    v6 = 0;
    v7 = 0;
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14)
    {
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v12, v11);
        v7 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v7 = 0;
      }
    }
LABEL_9:
    *a2 = 0;
    a2[1] = 0;
    v15 = a2[3];
    if (v15 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v7);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v16 = *a2;
  v17 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
    v18 = v17 == 0;
  else
    v18 = 1;
  if (!v18)
    return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v16);
  return result;
}

__n128 WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::OptionSet<WebKit::BufferInSetType>>>(uint64_t a1, unint64_t a2)
{
  __n128 *v3;
  __n128 result;

  v3 = (__n128 *)WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  result = *v3;
  *(__n128 *)(*(_QWORD *)a1 + 16 * (*(_DWORD *)(a1 + 12))++) = *v3;
  return result;
}

unint64_t WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v4 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v8 = a3 - v4;
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v8;
  }
  else
  {
    v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v5 >= 0x10)
      v6 = v5 + 1;
    else
      v6 = 16;
    if (v6 > a2)
      a2 = v6;
    WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  _OWORD *v6;
  void *v7;
  uint64_t v8;
  WTF *v9;
  __int128 v10;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 28))
  {
    v3 = result;
    v4 = *(WTF **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    if ((_DWORD)v5)
    {
      v8 = 16 * v5;
      v9 = v4;
      do
      {
        v10 = *(_OWORD *)v9;
        v9 = (WTF *)((char *)v9 + 16);
        *v6++ = v10;
        v8 -= 16;
      }
      while (v8);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  __int128 v8;

  if (*(unsigned int *)(result + 8) > a2)
  {
    v2 = a2;
    v3 = result;
    v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      *(_DWORD *)(result + 12) = a2;
      LODWORD(v4) = a2;
    }
    v5 = *(WTF **)result;
    if (a2)
    {
      if (a2 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      result = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v4 && (WTF *)result != v5)
      {
        v6 = 16 * v4;
        v7 = v5;
        do
        {
          v8 = *(_OWORD *)v7;
          v7 = (WTF *)((char *)v7 + 16);
          *(_OWORD *)result = v8;
          result += 16;
          v6 -= 16;
        }
        while (v6);
      }
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteRenderingBackend40GetRemoteBarcodeDetectorSupportedFormatsEN6WebKit22RemoteRenderingBackendES8_FvONS_17CompletionHandlerIFvONS_6VectorIN7WebCore14ShapeDetection13BarcodeFormatELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B7948;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteRenderingBackend40GetRemoteBarcodeDetectorSupportedFormatsEN6WebKit22RemoteRenderingBackendES8_FvONS_17CompletionHandlerIFvONS_6VectorIN7WebCore14ShapeDetection13BarcodeFormatELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B7948;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteRenderingBackend40GetRemoteBarcodeDetectorSupportedFormatsEN6WebKit22RemoteRenderingBackendES8_FvONS_17CompletionHandlerIFvONS_6VectorIN7WebCore14ShapeDetection13BarcodeFormatELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char v17;
  uint64_t v18;
  size_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  size_t v25;
  char *v26;
  void *v27;
  void *v28;
  IPC::Encoder *result;
  WTF *v30;
  void *v31;
  unint64_t v32;
  size_t v33;
  char *v34;
  void *v35;
  IPC::Encoder *v36;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3114;
  *(_QWORD *)(v5 + 8) = v4;
  v6 = (void *)(v5 + 16);
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v36 = (IPC::Encoder *)v5;
  v7 = *(unsigned int *)(a2 + 12);
  v8 = *(_QWORD *)(v5 + 544);
  v9 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = v9 + 8;
  v11 = *(_QWORD *)(v5 + 552);
  if (v11 < v9 + 8)
  {
    v32 = (2 * v11 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v33 = v32;
      v32 *= 2;
    }
    while (v33 < v10);
    v34 = (char *)mmap(0, v33, 3, 4098, -1, 0);
    if (v34 == (char *)-1)
    {
LABEL_24:
      __break(0xC471u);
      JUMPOUT(0x19702CA08);
    }
    v12 = v34;
    memcpy(v34, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v35 = *(void **)(v5 + 528);
    if (v35 != v6)
      munmap(v35, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v12;
    *(_QWORD *)(v5 + 552) = v33;
    v8 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v12 = *(char **)(v5 + 528);
  }
  bzero(&v12[v8], v9 - v8);
  *(_QWORD *)(v5 + 544) = v10;
  v13 = (_QWORD *)(*(_QWORD *)(v5 + 528) + v9);
  *(_QWORD *)(v5 + 536) = v13 + 1;
  *v13 = v7;
  v14 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v14)
  {
    v15 = *(char **)a2;
    v16 = (char *)(*(_QWORD *)a2 + v14);
    do
    {
      v17 = *v15;
      v18 = *(_QWORD *)(v5 + 544);
      v19 = v18 + 1;
      v20 = *(_QWORD *)(v5 + 552);
      if (v20 < v18 + 1)
      {
        v24 = (2 * v20 + 4095) & 0xFFFFFFFFFFFFF000;
        do
        {
          v25 = v24;
          v24 *= 2;
        }
        while (v25 < v19);
        v26 = (char *)mmap(0, v25, 3, 4098, -1, 0);
        if (v26 == (char *)-1)
          goto LABEL_24;
        v21 = v26;
        memcpy(v26, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
        v27 = *(void **)(v5 + 528);
        if (v27 != v6)
          munmap(v27, *(_QWORD *)(v5 + 552));
        *(_QWORD *)(v5 + 528) = v21;
        *(_QWORD *)(v5 + 552) = v25;
        v22 = *(_QWORD *)(v5 + 544);
      }
      else
      {
        v21 = *(char **)(v5 + 528);
        v22 = *(_QWORD *)(v5 + 544);
      }
      bzero(&v21[v22], v18 - v22);
      *(_QWORD *)(v5 + 544) = v19;
      v23 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v18);
      *(_QWORD *)(v5 + 536) = v23 + 1;
      *v23 = v17;
      ++v15;
    }
    while (v15 != v16);
  }
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v36, 0, 0);
  result = v36;
  v36 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v28);
    return (IPC::Encoder *)WTF::fastFree(v30, v31);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteRenderingBackend36PrepareImageBufferSetsForDisplaySyncEN6WebKit22RemoteRenderingBackendES8_FvNS_6VectorINS7_46ImageBufferSetPrepareBufferForDisplayInputDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONS9_INS7_29SwapBuffersDisplayRequirementELm0ESB_Lm16ESC_EEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B7970;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteRenderingBackend36PrepareImageBufferSetsForDisplaySyncEN6WebKit22RemoteRenderingBackendES8_FvNS_6VectorINS7_46ImageBufferSetPrepareBufferForDisplayInputDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONS9_INS7_29SwapBuffersDisplayRequirementELm0ESB_Lm16ESC_EEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B7970;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteRenderingBackend36PrepareImageBufferSetsForDisplaySyncEN6WebKit22RemoteRenderingBackendES8_FvNS_6VectorINS7_46ImageBufferSetPrepareBufferForDisplayInputDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONS9_INS7_29SwapBuffersDisplayRequirementELm0ESB_Lm16ESC_EEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  IPC::Encoder *v11;
  char *v12;
  unint64_t v13;
  IPC::Encoder *result;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char v28;
  uint64_t v29;
  size_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  _BYTE *v34;
  unint64_t v35;
  size_t v36;
  char *v37;
  void *v38;
  void *v39;
  WTF *v40;
  void *v41;
  unint64_t v42;
  size_t v43;
  char *v44;
  void *v45;
  IPC::Encoder *v46;
  unint64_t v47;
  unint64_t v48;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v46, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v46);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_8;
  v3 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v3 + 112))
  {
    v8 = *(_QWORD *)(v3 + 48);
    v6 = *(unint64_t **)(v3 + 56);
    v7 = v6[1];
    v9 = v8 - 1;
    if (v8 == 1)
    {
      if (v7 >= 0x100)
      {
        v9 = 0;
        v6 = (unint64_t *)v6[2];
LABEL_10:
        v11 = (IPC::Encoder *)(v6 + 32);
        v46 = v11;
        v47 = v9;
        v48 = 0;
        v12 = (char *)(((unint64_t)v6 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v13 = v12 - (char *)v11;
        if (v12 >= (char *)v11)
        {
          if (v13 <= 0xFFFFFFFFFFFFFFFDLL && v13 + 2 <= v9)
          {
            *(_WORD *)v12 = 2823;
            v48 = v13 + 2;
            result = (IPC::Encoder *)IPC::VectorArgumentCoder<false,WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(&v46, a2);
            if (v47)
              return result;
            *(_WORD *)((char *)v11 + v13) = 2821;
            goto LABEL_17;
          }
          v47 = 0;
        }
        result = (IPC::Encoder *)IPC::VectorArgumentCoder<false,WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(&v46, a2);
        if (v47)
          return result;
        goto LABEL_17;
      }
    }
    else
    {
      v10 = v7 >= 0x100;
      v7 -= 256;
      if (v10)
      {
        v6 = (unint64_t *)v6[2];
        if (!v8)
        {
LABEL_9:
          v9 = v7;
          goto LABEL_10;
        }
        if (v7 >= v9)
          goto LABEL_10;
      }
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
LABEL_17:
  v16 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v16 = 2823;
  *(_QWORD *)(v16 + 8) = v2;
  v17 = (void *)(v16 + 16);
  *(_QWORD *)(v16 + 528) = v16 + 16;
  *(_QWORD *)(v16 + 536) = v16 + 16;
  *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v16 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
  v46 = (IPC::Encoder *)v16;
  v18 = *(unsigned int *)(a2 + 12);
  v19 = *(_QWORD *)(v16 + 544);
  v20 = (v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = v20 + 8;
  v22 = *(_QWORD *)(v16 + 552);
  if (v22 < v20 + 8)
  {
    v42 = (2 * v22 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v43 = v42;
      v42 *= 2;
    }
    while (v43 < v21);
    v44 = (char *)mmap(0, v43, 3, 4098, -1, 0);
    if (v44 == (char *)-1)
    {
LABEL_45:
      __break(0xC471u);
      JUMPOUT(0x19702CDA4);
    }
    v23 = v44;
    memcpy(v44, *(const void **)(v16 + 528), *(_QWORD *)(v16 + 544));
    v45 = *(void **)(v16 + 528);
    if (v45 != v17)
      munmap(v45, *(_QWORD *)(v16 + 552));
    *(_QWORD *)(v16 + 528) = v23;
    *(_QWORD *)(v16 + 552) = v43;
    v19 = *(_QWORD *)(v16 + 544);
  }
  else
  {
    v23 = *(char **)(v16 + 528);
  }
  bzero(&v23[v19], v20 - v19);
  *(_QWORD *)(v16 + 544) = v21;
  v24 = (_QWORD *)(*(_QWORD *)(v16 + 528) + v20);
  *(_QWORD *)(v16 + 536) = v24 + 1;
  *v24 = v18;
  v25 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v25)
  {
    v26 = *(char **)a2;
    v27 = (char *)(*(_QWORD *)a2 + v25);
    do
    {
      v28 = *v26;
      v29 = *(_QWORD *)(v16 + 544);
      v30 = v29 + 1;
      v31 = *(_QWORD *)(v16 + 552);
      if (v31 < v29 + 1)
      {
        v35 = (2 * v31 + 4095) & 0xFFFFFFFFFFFFF000;
        do
        {
          v36 = v35;
          v35 *= 2;
        }
        while (v36 < v30);
        v37 = (char *)mmap(0, v36, 3, 4098, -1, 0);
        if (v37 == (char *)-1)
          goto LABEL_45;
        v32 = v37;
        memcpy(v37, *(const void **)(v16 + 528), *(_QWORD *)(v16 + 544));
        v38 = *(void **)(v16 + 528);
        if (v38 != v17)
          munmap(v38, *(_QWORD *)(v16 + 552));
        *(_QWORD *)(v16 + 528) = v32;
        *(_QWORD *)(v16 + 552) = v36;
        v33 = *(_QWORD *)(v16 + 544);
      }
      else
      {
        v32 = *(char **)(v16 + 528);
        v33 = *(_QWORD *)(v16 + 544);
      }
      bzero(&v32[v33], v29 - v33);
      *(_QWORD *)(v16 + 544) = v30;
      v34 = (_BYTE *)(*(_QWORD *)(v16 + 528) + v29);
      *(_QWORD *)(v16 + 536) = v34 + 1;
      *v34 = v28;
      ++v26;
    }
    while (v26 != v27);
  }
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v3 + 32), (uint64_t *)&v46, 0, 0);
  result = v46;
  v46 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v39);
    return (IPC::Encoder *)WTF::fastFree(v40, v41);
  }
  return result;
}

_BYTE *std::__optional_destruct_base<std::tuple<IPC::Semaphore,IPC::Semaphore>,false>::~__optional_destruct_base[abi:sn180100](_BYTE *a1)
{
  if (a1[16])
  {
    IPC::Semaphore::destroy((IPC::Semaphore *)(a1 + 8));
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a1 + 8));
    IPC::Semaphore::destroy((IPC::Semaphore *)a1);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)a1);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages37RemoteSampleBufferDisplayLayerManager11CreateLayerEN6WebKit37RemoteSampleBufferDisplayLayerManagerES8_FvNS_23ObjectIdentifierGenericINS7_38SampleBufferDisplayLayerIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEbN7WebCore7IntSizeEbbONS_17CompletionHandlerIFvNSt3__18optionalIjEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B7998;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages37RemoteSampleBufferDisplayLayerManager11CreateLayerEN6WebKit37RemoteSampleBufferDisplayLayerManagerES8_FvNS_23ObjectIdentifierGenericINS7_38SampleBufferDisplayLayerIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEbN7WebCore7IntSizeEbbONS_17CompletionHandlerIFvNSt3__18optionalIjEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B7998;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages37RemoteSampleBufferDisplayLayerManager11CreateLayerEN6WebKit37RemoteSampleBufferDisplayLayerManagerES8_FvNS_23ObjectIdentifierGenericINS7_38SampleBufferDisplayLayerIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEbN7WebCore7IntSizeEbbONS_17CompletionHandlerIFvNSt3__18optionalIjEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EE4callESJ_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *v10;

  v9 = a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 3115;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v10 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>((IPC::Encoder *)v4, (int *)&v9);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

WebCore::ResourceResponseBase *IPC::Decoder::decode<std::tuple<WebCore::ResourceResponse>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WebCore::ResourceResponseBase *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::ResourceResponse>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[256])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WebCore::ResourceResponseBase *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WebCore::ResourceResponseBase *)(*(uint64_t (**)(WebCore::ResourceResponseBase *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WebCore::ResourceResponseBase *IPC::ArgumentCoder<std::tuple<WebCore::ResourceResponse>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *v3;
  char v4;
  _BYTE v6[256];
  char v7;

  IPC::Decoder::decode<WebCore::ResourceResponse>(a1, v6);
  v4 = v7;
  if (v7)
  {
    std::__tuple_leaf<1ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)a2, (uint64_t)v6);
    v4 = 1;
  }
  else
  {
    *a2 = 0;
  }
  a2[256] = v4;
  return std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v6, v3);
}

WebCore::ResourceResponseBase *IPC::Decoder::decode<std::tuple<WebCore::ResourceResponse,BOOL>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WebCore::ResourceResponseBase *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::ResourceResponse,BOOL>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[264])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WebCore::ResourceResponseBase *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WebCore::ResourceResponseBase *)(*(uint64_t (**)(WebCore::ResourceResponseBase *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WebCore::ResourceResponseBase *IPC::ArgumentCoder<std::tuple<WebCore::ResourceResponse,BOOL>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *v4;
  _BYTE v6[264];

  IPC::Decoder::decode<WebCore::ResourceResponse>(a1, v6);
  if (v6[256])
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ResourceResponse,BOOL>,void>::decode<IPC::Decoder,WebCore::ResourceResponse>(a1, (uint64_t)v6, a2);
  }
  else
  {
    *a2 = 0;
    a2[264] = 0;
  }
  return std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v6, v4);
}

void IPC::ArgumentCoder<std::tuple<WebCore::ResourceResponse,BOOL>,void>::decode<IPC::Decoder,WebCore::ResourceResponse>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  BOOL v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;

  v5 = a1[1];
  v6 = *a1;
  v7 = a1[2] - *a1;
  if (v5 <= v7)
  {
    v12 = 0;
    v13 = 0;
    *a1 = 0;
    a1[1] = 0;
    v14 = a1[3];
    if (v14)
    {
      v17 = a1;
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
        a1 = v17;
        v13 = *v17;
        v12 = v17[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
    }
    goto LABEL_8;
  }
  v8 = (unsigned __int8 *)(v6 + v7);
  a1[2] = v8 + 1;
  if (!v6)
  {
    v12 = v5;
    v13 = 0;
LABEL_8:
    v5 = 0;
    v6 = 0;
    *a1 = 0;
    a1[1] = 0;
    v15 = a1[3];
    if (v15)
    {
      v16 = a1;
      if (v12)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v15 + 16))(v15, v13, v12);
        a1 = v16;
        v6 = *v16;
        v5 = v16[1];
      }
      else
      {
        v5 = 0;
        v6 = 0;
      }
    }
LABEL_9:
    *a1 = 0;
    a1[1] = 0;
    a1 = (_QWORD *)a1[3];
    if (!a1)
    {
LABEL_10:
      v11 = 0;
      *a3 = 0;
      goto LABEL_6;
    }
LABEL_12:
    if (v5)
      (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v6);
    goto LABEL_10;
  }
  v9 = *v8;
  if (v9 >= 2)
    goto LABEL_9;
  if (!*(_BYTE *)(a2 + 256))
  {
    __break(1u);
    goto LABEL_12;
  }
  v10 = v9 != 0;
  std::__tuple_leaf<1ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)a3, a2);
  a3[256] = v10;
  v11 = 1;
LABEL_6:
  a3[264] = v11;
}

WebCore::ResourceResponseBase *std::__optional_destruct_base<std::tuple<WebCore::ResourceResponse,BOOL>,false>::~__optional_destruct_base[abi:sn180100](WebCore::ResourceResponseBase *this, WTF::StringImpl *a2)
{
  const void *v3;

  if (*((_BYTE *)this + 264))
  {
    v3 = (const void *)*((_QWORD *)this + 30);
    *((_QWORD *)this + 30) = 0;
    if (v3)
      CFRelease(v3);
    WebCore::ResourceResponseBase::~ResourceResponseBase(this, a2);
  }
  return this;
}

void API::Object::deref(CFTypeRef *this)
{
  CFRelease(this[1]);
}

uint64_t API::Object::wrap(uint64_t this, API::Object *a2)
{
  if (this)
    return *(_QWORD *)(this + 8);
  return this;
}

void API::Object::toNSObject(API::Object *this@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  id v5;
  uint64_t v6;
  _QWORD **v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  API::Object *v16;
  WTF::StringImpl *v17;
  const __CFString *v18;
  uint64_t v19;
  uint64_t v20;
  API::Object **v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  const void *v24;
  const __CFString *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;

  v4 = (*(uint64_t (**)(API::Object *))(*(_QWORD *)this + 16))(this);
  if (v4 > 20)
  {
    switch(v4)
    {
      case ' ':
        v19 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithBool:", *((unsigned __int8 *)this + 16));
        goto LABEL_44;
      case '!':
        v19 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithDouble:", *((double *)this + 2));
        goto LABEL_44;
      case '"':
        v19 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithUnsignedLongLong:", *((_QWORD *)this + 2));
        goto LABEL_44;
      case '#':
        v19 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithLongLong:", *((_QWORD *)this + 2));
LABEL_44:
        *a2 = v19;
        return;
      default:
        if (v4 != 21)
          goto LABEL_40;
        WTF::String::isolatedCopy();
        if (v28)
        {
          v25 = (const __CFString *)WTF::StringImpl::operator NSString *();
          *a2 = v25;
          if (!v25)
            goto LABEL_37;
        }
        else
        {
          v25 = &stru_1E351F1B8;
          *a2 = &stru_1E351F1B8;
        }
        CFRetain(v25);
LABEL_37:
        v27 = v28;
        v28 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, v26);
          else
            *(_DWORD *)v27 -= 2;
        }
        break;
    }
  }
  else
  {
    switch(v4)
    {
      case 1:
        v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *((unsigned int *)this + 7));
        v20 = *((unsigned int *)this + 7);
        if ((_DWORD)v20)
        {
          v21 = (API::Object **)*((_QWORD *)this + 2);
          v22 = 8 * v20;
          do
          {
            if (*v21)
            {
              API::Object::toNSObject((uint64_t *)&v28, *v21);
              v23 = v28;
              if (v28)
              {
                objc_msgSend(v10, "addObject:", v28);
                CFRelease(v23);
              }
            }
            ++v21;
            v22 -= 8;
          }
          while (v22);
        }
LABEL_30:
        *a2 = v10;
        return;
      case 8:
        v24 = (const void *)*((_QWORD *)this + 1);
        *a2 = v24;
        if (v24)
          CFRetain(v24);
        break;
      case 9:
        v5 = objc_alloc(MEMORY[0x1E0C99E08]);
        v8 = *((_QWORD *)this + 2);
        v7 = (_QWORD **)((char *)this + 16);
        v6 = v8;
        if (v8)
          v9 = *(unsigned int *)(v6 - 12);
        else
          v9 = 0;
        v10 = (void *)objc_msgSend(v5, "initWithCapacity:", v9);
        v11 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v7);
        v12 = v11;
        v14 = v13;
        if (*v7)
          v15 = (uint64_t)&(*v7)[2 * *((unsigned int *)*v7 - 1)];
        else
          v15 = 0;
        if ((_QWORD *)v15 != v11)
        {
          do
          {
            v16 = (API::Object *)v12[1];
            if (v16)
            {
              API::Object::toNSObject((uint64_t *)&v28, v16);
              v17 = v28;
              if (v28)
              {
                if (*v12)
                  v18 = (const __CFString *)WTF::StringImpl::operator NSString *();
                else
                  v18 = &stru_1E351F1B8;
                objc_msgSend(v10, "setObject:forKey:", v17, v18);
                CFRelease(v17);
              }
            }
            while (1)
            {
              v12 += 2;
              if (v12 == v14)
                break;
              if ((unint64_t)(*v12 + 1) > 1)
                goto LABEL_19;
            }
            v12 = v14;
LABEL_19:
            ;
          }
          while (v12 != (_QWORD *)v15);
        }
        goto LABEL_30;
      default:
LABEL_40:
        *a2 = 0;
        break;
    }
  }
}

void sub_19702D4D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void API::Object::fromNSObject(void *a1@<X0>, uint64_t *a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  double v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  double *v14;
  double *v15;
  double v16;
  uint64_t v17;
  void *v18;
  WTF::StringImpl *v19;
  _QWORD v20[5];
  double *v21;
  double **v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t (*v25)(uint64_t, WTF::StringImpl *);
  void *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  CFTypeRef cf;
  WTF::StringImpl *v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    MEMORY[0x19AEABCC8](&v33, a1);
    API::String::create(&v33, (WebKit **)&v21);
    *a2 = (uint64_t)v21;
    v21 = 0;
    v5 = v33;
    v33 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      cf = a1;
      if (a1)
        CFRetain(a1);
      API::Data::createWithoutCopying((id *)&cf, (WebKit **)&v21);
      *a2 = (uint64_t)v21;
      v21 = 0;
      if (cf)
        CFRelease(cf);
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        objc_msgSend(a1, "doubleValue");
        API::Double::create(v6, &v21);
        *a2 = (uint64_t)v21;
        return;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v21 = 0;
        v22 = 0;
        v7 = objc_msgSend(a1, "count");
        if (v7)
        {
          if (v7 >> 29)
          {
            __break(0xC471u);
            return;
          }
          LODWORD(v22) = v7;
          v21 = (double *)WTF::fastMalloc((WTF *)(8 * v7));
        }
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        v8 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v28, v34, 16);
        if (v8)
        {
          v9 = *(_QWORD *)v29;
          do
          {
            v10 = 0;
            do
            {
              if (*(_QWORD *)v29 != v9)
                objc_enumerationMutation(a1);
              API::Object::fromNSObject(&v33, *(_QWORD *)(*((_QWORD *)&v28 + 1) + 8 * v10));
              v11 = v33;
              if (v33)
              {
                LODWORD(v12) = HIDWORD(v22);
                if (HIDWORD(v22) == (_DWORD)v22)
                {
                  v14 = (double *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v21, HIDWORD(v22) + 1, (unint64_t)&v33);
                  v12 = HIDWORD(v22);
                  v15 = v21;
                  v16 = *v14;
                  *v14 = 0.0;
                  v15[v12] = v16;
                }
                else
                {
                  v33 = 0;
                  *(_QWORD *)&v21[HIDWORD(v22)] = v11;
                }
                HIDWORD(v22) = v12 + 1;
                v13 = v33;
                v33 = 0;
                if (v13)
                  CFRelease(*((CFTypeRef *)v13 + 1));
              }
              ++v10;
            }
            while (v8 != v10);
            v17 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v28, v34, 16);
            v8 = v17;
          }
          while (v17);
        }
        API::Array::create((uint64_t *)&v21, a2);
        WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v18);
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v21 = 0;
          v22 = &v21;
          v23 = 0x3812000000;
          v24 = __Block_byref_object_copy__2;
          v25 = __Block_byref_object_dispose__2;
          v26 = &unk_197A0BBD2;
          v27 = 0;
          v20[0] = MEMORY[0x1E0C809B0];
          v20[1] = 3221225472;
          v20[2] = ___ZN3API6Object12fromNSObjectEPU25objcproto14NSSecureCoding8NSObject_block_invoke;
          v20[3] = &unk_1E34B79D8;
          v20[4] = &v21;
          objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:", v20);
          API::Dictionary::create((uint64_t *)v22 + 6, (WebKit **)a2);
          _Block_object_dispose(&v21, 8);
          if (v27)
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v27, v19);
        }
        else
        {
          *a2 = 0;
        }
      }
    }
  }
}

void sub_19702D8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,CFTypeRef cf,WTF::StringImpl *a31)
{
  WTF::StringImpl *v32;

  _Block_object_dispose(&a14, 8);
  if (a20)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(a20, v32);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(result + 48) = 0;
  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

uint64_t __Block_byref_object_dispose__2(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  if (result)
    return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(result, a2);
  return result;
}

void ___ZN3API6Object12fromNSObjectEPU25objcproto14NSSecureCoding8NSObject_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _BYTE v9[24];
  WTF::StringImpl *v10;
  uint64_t v11;

  API::Object::fromNSObject(&v11, a3);
  v5 = v11;
  if (v11)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      v11 = 0;
LABEL_9:
      CFRelease(*(CFTypeRef *)(v5 + 8));
      return;
    }
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    MEMORY[0x19AEABCC8](&v10, a2);
    WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::add<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>((uint64_t *)(v6 + 48), &v10, &v11, (uint64_t)v9);
    v8 = v10;
    v10 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    v5 = v11;
    v11 = 0;
    if (v5)
      goto LABEL_9;
  }
}

void sub_19702DA34(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14)
{
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  if (a14)
    CFRelease(*(CFTypeRef *)(a14 + 8));
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN6WebKit12ARKitLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/Frameworks/ARKit.framework/ARKit", 2);
  WebKit::ARKitLibrary(BOOL)::frameworkLibrary = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 33;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::initARQuickLookPreviewItem(WebKit *this)
{
  if (qword_1ECE721D8 != -1)
    dispatch_once(&qword_1ECE721D8, &__block_literal_global_13);
  return qword_1ECE721E0;
}

void WebKit::AuxiliaryProcess::didReceiveInvalidMessage(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v3;
  char **v4;
  char *v5;
  BOOL v6;
  size_t v7;
  size_t v8;
  size_t v9;
  unsigned __int16 v10;
  char *v11;
  unsigned __int16 v12;
  unsigned int v13;
  BOOL v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  _DWORD *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  unsigned __int16 v24;
  unsigned int v25;
  void *v26;
  unsigned int v27;
  unsigned int v28;
  WTF *v29;
  const char *v30;
  void *v31;
  WTF *v32;
  _DWORD *v33;

  if (a3 >= 0xE98)
    v3 = 3736;
  else
    v3 = a3;
  v4 = &(&IPC::Detail::messageDescriptions)[3 * v3];
  v5 = v4[1];
  v6 = v5 != 0;
  v7 = (size_t)(v5 - 1);
  if (v6)
    v8 = v7;
  else
    v8 = 0;
  v9 = v8 >> 31;
  if (v8 >> 31)
  {
LABEL_40:
    __break(0xC471u);
    goto LABEL_44;
  }
  v10 = a3;
  v11 = *v4;
  v12 = a3;
  do
  {
    LODWORD(v9) = v9 + 1;
    v13 = v12;
    v12 /= 0xAu;
  }
  while (v13 > 9);
  if ((v9 & 0x80000000) == 0)
  {
    v14 = __OFADD__((_DWORD)v9, 1);
    v15 = v9 + 1;
    if (!v14)
    {
      v14 = __OFADD__(v15, 3);
      v16 = v15 + 3;
      v17 = v14;
      if ((v8 & 0x80000000) == 0 && !v17)
      {
        v14 = __OFADD__((_DWORD)v8, v16);
        v18 = v8 + v16;
        if (!v14)
        {
          v19 = (v18 + 27);
          if (!__OFADD__(v18, 27))
          {
            if (v18 == -27)
            {
              v20 = (_DWORD *)MEMORY[0x1E0CBEF70];
              *MEMORY[0x1E0CBEF70] += 2;
LABEL_32:
              v33 = v20;
              WTF::String::utf8();
              if (v32)
                v29 = (WTF *)((char *)v32 + 16);
              else
                v29 = 0;
              WTFLogAlways();
              WTF::setCrashLogMessage(v29, v30);
              if (v32)
              {
                if (*(_DWORD *)v32 == 1)
                  WTF::fastFree(v32, v31);
                else
                  --*(_DWORD *)v32;
              }
              WTFCrashWithInfoImpl(119, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/Shared/Cocoa/AuxiliaryProcessCocoa.mm", "virtual void WebKit::AuxiliaryProcess::didReceiveInvalidMessage(IPC::Connection &, IPC::MessageName)");
              __break(1u);
              goto LABEL_40;
            }
            if ((v19 & 0x80000000) == 0)
            {
              WTF::tryFastCompactMalloc((WTF *)(v19 + 20));
              v20 = v33;
              if (v33)
              {
                *v33 = 2;
                v20[1] = v19;
                *((_QWORD *)v20 + 1) = v20 + 5;
                v20[4] = 4;
                qmemcpy(v20 + 5, "Received invalid message: '", 27);
                v21 = (char *)v20 + 47;
                if ((_DWORD)v8)
                {
                  if ((_DWORD)v8 == 1)
                    *v21 = *v11;
                  else
                    memcpy((char *)v20 + 47, v11, v8);
                }
                v22 = 0;
                v23 = &v21[v8];
                v23[2] = 40;
                *(_WORD *)v23 = 8231;
                v24 = v10;
                do
                {
                  v25 = v24;
                  *((_BYTE *)&v33 + v22-- + 6) = (v24 % 0xAu) | 0x30;
                  v24 /= 0xAu;
                }
                while (v25 > 9);
                v26 = v23 + 3;
                if (v22 + 8 <= 7)
                  memcpy(v26, (char *)&v33 + v22 + 7, -v22);
                v27 = 0;
                do
                {
                  ++v27;
                  v28 = v10;
                  v10 /= 0xAu;
                }
                while (v28 > 9);
                *((_BYTE *)v26 + v27) = 41;
                goto LABEL_32;
              }
            }
          }
        }
      }
    }
  }
  __break(0xC471u);
LABEL_44:
  JUMPOUT(0x19702DD80);
}

void sub_19702DDB0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::AuxiliaryProcess::preferenceDidUpdate(uint64_t a1, WTF::String *a2, WTF::String *a3, uint64_t a4)
{
  void *v4;
  id v9;
  const __CFString *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  const __CFString *v23;
  CFStringRef v24;
  WTF::String *v25;
  WTF::String *v26;
  uint64_t v27;
  void *v28;
  const __CFString *v29;
  CFStringRef v30;

  if (!*(_BYTE *)(a4 + 8))
  {
    v22 = 0;
LABEL_10:
    if (*(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
    {
      WTF::String::createCFString(a3);
      v23 = v30;
      WTF::String::createCFString(a2);
      CFPreferencesSetValue(v23, v22, v29, (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
      if (v29)
        CFRelease(v29);
    }
    else
    {
      WTF::String::createCFString(a3);
      CFPreferencesSetValue(v30, v22, (CFStringRef)*MEMORY[0x1E0C9B228], (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
    }
    v24 = v30;
    v30 = 0;
    if (v24)
      CFRelease(v24);
    (*(void (**)(uint64_t, WTF::String *, WTF::String *, const void *))(*(_QWORD *)a1 + 136))(a1, a2, a3, v22);
    return;
  }
  v9 = objc_alloc(MEMORY[0x1E0C99D50]);
  if (*(_BYTE *)(a4 + 8))
  {
    v4 = v9;
    v25 = a2;
    v26 = a3;
    v27 = a1;
    if (*(_QWORD *)a4)
    {
      v10 = (const __CFString *)WTF::StringImpl::operator NSString *();
      goto LABEL_5;
    }
  }
  else
  {
    __break(1u);
  }
  v10 = &stru_1E351F1B8;
LABEL_5:
  v11 = (const void *)objc_msgSend(v4, "initWithBase64EncodedString:options:", v10, 0);
  v28 = (void *)MEMORY[0x1E0C99E60];
  v12 = objc_opt_class();
  v13 = objc_opt_class();
  v14 = objc_opt_class();
  v15 = objc_opt_class();
  v16 = objc_opt_class();
  v17 = objc_opt_class();
  v18 = objc_opt_class();
  v19 = objc_opt_class();
  v20 = objc_opt_class();
  v30 = 0;
  v21 = objc_msgSend(MEMORY[0x1E0CB3710], "_strictlyUnarchivedObjectOfClasses:fromData:error:", objc_msgSend(v28, "setWithObjects:", v12, v13, v14, v15, v16, v17, v18, v19, v20, objc_opt_class(), 0), v11, &v30);
  a1 = v27;
  v22 = (const void *)v21;
  if (v11)
    CFRelease(v11);
  a2 = v25;
  a3 = v26;
  if (v22)
    goto LABEL_10;
}

void sub_19702E0AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;
  const void *v4;

  v3 = *(const void **)(v1 - 96);
  *(_QWORD *)(v1 - 96) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(v1 - 88);
  *(_QWORD *)(v1 - 88) = 0;
  if (v4)
    CFRelease(v4);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcess::preferencesDidUpdate(uint64_t result, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  WTF **v12;
  uint64_t v13;
  WTF **v14;
  uint64_t v15;
  WTF **v16;
  WTF **v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  WTF **v20;
  WTF::StringImpl *v21;

  v4 = result;
  v5 = *(_QWORD **)a2;
  if (*(_QWORD *)a2)
  {
    v6 = *((unsigned int *)v5 - 1);
    v7 = &v5[3 * v6];
    if (*((_DWORD *)v5 - 3))
    {
      v8 = *(_QWORD **)a2;
      if ((_DWORD)v6)
      {
        v9 = 24 * v6;
        v8 = *(_QWORD **)a2;
        while ((unint64_t)(*v8 + 1) <= 1)
        {
          v8 += 3;
          v9 -= 24;
          if (!v9)
          {
            v8 = v7;
            break;
          }
        }
      }
      if (v5)
        goto LABEL_9;
      goto LABEL_13;
    }
    v8 = &v5[3 * v6];
  }
  else
  {
    v8 = 0;
    LODWORD(v6) = 0;
  }
  v7 = &v5[3 * v6];
  if (v5)
  {
LABEL_9:
    v10 = &v5[3 * *((unsigned int *)v5 - 1)];
    goto LABEL_14;
  }
LABEL_13:
  v10 = 0;
LABEL_14:
  while (v8 != v10)
  {
    v21 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **, _QWORD *, _QWORD *))(*(_QWORD *)v4 + 64))(v4, &v21, v8, v8 + 1);
    result = (uint64_t)v21;
    v21 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      else
        *(_DWORD *)result -= 2;
    }
    v11 = v8 + 3;
    v8 = v7;
    if (v11 != v7)
    {
      v8 = v11;
      while ((unint64_t)(*v8 + 1) <= 1)
      {
        v8 += 3;
        if (v8 == v7)
        {
          v8 = v7;
          break;
        }
      }
    }
  }
  v12 = *(WTF ***)a3;
  if (!*(_QWORD *)a3)
  {
    v16 = 0;
    v13 = 0;
    goto LABEL_37;
  }
  v13 = *((unsigned int *)v12 - 1);
  v14 = &v12[4 * v13];
  if (!*((_DWORD *)v12 - 3))
  {
    v16 = &v12[4 * v13];
LABEL_37:
    v14 = &v12[4 * v13];
    if (v12)
      goto LABEL_38;
    goto LABEL_40;
  }
  if ((_DWORD)v13)
  {
    v15 = 32 * v13;
    while (1)
    {
      result = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>(v12, (uint64_t)a2, a3);
      if ((result & 1) == 0 && *v12 != (WTF *)-1)
        break;
      v12 += 4;
      v15 -= 32;
      if (!v15)
      {
        v12 = v14;
        break;
      }
    }
    v16 = v12;
    v12 = *(WTF ***)a3;
    if (!*(_QWORD *)a3)
      goto LABEL_40;
LABEL_38:
    v17 = &v12[4 * *((unsigned int *)v12 - 1)];
    goto LABEL_41;
  }
  v16 = *(WTF ***)a3;
  if (v12)
    goto LABEL_38;
LABEL_40:
  v17 = 0;
LABEL_41:
  while (v16 != v17)
  {
    result = (*(uint64_t (**)(uint64_t, WTF **, WTF **, WTF **))(*(_QWORD *)v4 + 64))(v4, v16, v16 + 1, v16 + 2);
    v20 = v16 + 4;
    v16 = v14;
    if (v20 != v14)
    {
      v16 = v20;
      while (1)
      {
        result = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>(v16, v18, v19);
        if ((result & 1) == 0 && *v16 != (WTF *)-1)
          break;
        v16 += 4;
        if (v16 == v14)
        {
          v16 = v14;
          break;
        }
      }
    }
  }
  return result;
}

void sub_19702E32C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::AuxiliaryProcess::handleAXPreferenceChange(WebKit::AuxiliaryProcess *this, WTF **a2, const WTF::String *a3, objc_object *a4)
{
  WTF::StringImpl *result;
  const WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  uint64_t (*v9)(void);
  WTF::StringImpl *v10;

  {
    result = (WTF::StringImpl *)libAccessibilityLibrary(void)::dylib;
    if (!libAccessibilityLibrary(void)::dylib)
      return result;
  }
  else
  {
    result = (WTF::StringImpl *)dlopen("/usr/lib/libAccessibility.dylib", 2);
    libAccessibilityLibrary(void)::dylib = (uint64_t)result;
    if (!result)
      return result;
  }
  MEMORY[0x19AEABCC8](&v10, *MEMORY[0x1E0DDDF40], a3, a4);
  v8 = WTF::equal(*a2, v10, v6);
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      if (!v8)
        return result;
      goto LABEL_9;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v8)
    return result;
LABEL_9:
  result = (WTF::StringImpl *)_AXSUpdateWebAccessibilitySettingsPtr();
  if (result)
  {
    v9 = (uint64_t (*)(void))_AXSUpdateWebAccessibilitySettingsPtr();
    return (WTF::StringImpl *)v9();
  }
  return result;
}

void sub_19702E428(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void *_AXSUpdateWebAccessibilitySettingsPtr(void)
{
  void *result;
  void *v1;

    return (void *)_AXSUpdateWebAccessibilitySettingsPtr(void)::ptr;
  {
    v1 = (void *)libAccessibilityLibrary(void)::dylib;
  }
  else
  {
    v1 = dlopen("/usr/lib/libAccessibility.dylib", 2);
    libAccessibilityLibrary(void)::dylib = (uint64_t)v1;
  }
  result = dlsym(v1, "_AXSUpdateWebAccessibilitySettings");
  _AXSUpdateWebAccessibilitySettingsPtr(void)::ptr = (uint64_t)result;
  return result;
}

uint64_t WebKit::AuxiliaryProcess::handlePreferenceChange(WebKit::AuxiliaryProcess *this, WTF **a2, const WTF::String *a3, objc_object *a4)
{
  WebKit::AuxiliaryProcess::handleAXPreferenceChange(this, a2, a3, a4);
  return (*(uint64_t (**)(WebKit::AuxiliaryProcess *, const WTF::String *))(*(_QWORD *)this + 144))(this, a3);
}

uint64_t WebKit::AuxiliaryProcess::isSystemWebKit(void)::$_0::operator()()
{
  objc_class *v0;
  const char *ImageName;
  void *v2;
  uint64_t v3;

  v0 = (objc_class *)objc_opt_class();
  ImageName = class_getImageName(v0);
  if (!ImageName)
    return 0;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", ImageName);
  v3 = objc_msgSend(v2, "hasPrefix:", WTF::FileSystemImpl::systemDirectoryPath((WTF::FileSystemImpl *)v2));
  if (v2)
    CFRelease(v2);
  return v3;
}

void sub_19702E590(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::codeSigningIdentifier(WebKit *this@<X0>, uint64_t a2@<X8>)
{
  CFStringRef v4;

  v4 = SecTaskCopySigningIdentifier(this, 0);
  MEMORY[0x19AEABCC8](a2, v4);
  if (v4)
    CFRelease(v4);
}

void sub_19702E5F0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::codeSigningIdentifierAndPlatformBinaryStatus(WebKit *this@<X0>, uint64_t a2@<X8>)
{
  const __CFAllocator *v4;
  __int128 v5;
  __SecTask *v6;
  uint32_t CodeSignStatus;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  WTF::StringImpl *v11;
  audit_token_t token;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v5 = *((_OWORD *)this + 1);
  *(_OWORD *)token.val = *(_OWORD *)this;
  *(_OWORD *)&token.val[4] = v5;
  v6 = SecTaskCreateWithAuditToken(v4, &token);
  CodeSignStatus = SecTaskGetCodeSignStatus(v6);
  WebKit::codeSigningIdentifier(v6, (uint64_t)&v11);
  v9 = v11;
  if (v11)
  {
    v10 = *(_DWORD *)v11;
    *(_DWORD *)v11 += 2;
    *(_QWORD *)a2 = v9;
    *(_BYTE *)(a2 + 8) = (CodeSignStatus & 0x4000000) != 0;
    v11 = 0;
    if (v10)
      *(_DWORD *)v9 = v10;
    else
      WTF::StringImpl::destroy(v9, v8);
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a2 + 8) = (CodeSignStatus & 0x4000000) != 0;
  }
  if (v6)
    CFRelease(v6);
}

void sub_19702E6BC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::codeSigningIdentifier@<X0>(WebKit *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  __int128 v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  int v7;
  _OWORD v8[2];
  WTF::StringImpl *v9;

  v4 = *((_OWORD *)this + 1);
  v8[0] = *(_OWORD *)this;
  v8[1] = v4;
  WebKit::codeSigningIdentifierAndPlatformBinaryStatus((WebKit *)v8, (uint64_t)&v9);
  result = v9;
  if (v9)
  {
    v7 = *(_DWORD *)v9;
    *(_DWORD *)v9 += 2;
    *a2 = result;
    if (v7)
      *(_DWORD *)result = v7;
    else
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

objc_class *WebKit::CompletionHandlerCallChecker::classImplementingDelegateMethod(WebKit::CompletionHandlerCallChecker *this)
{
  objc_class *v2;
  objc_method *InstanceMethod;
  objc_class *i;
  objc_class *Superclass;
  objc_class *v6;

  v2 = (objc_class *)*((_QWORD *)this + 1);
  InstanceMethod = class_getInstanceMethod(v2, *((SEL *)this + 2));
  for (i = v2; ; i = v6)
  {
    Superclass = class_getSuperclass(i);
    if (!Superclass)
      break;
    v6 = Superclass;
    if (class_getInstanceMethod(Superclass, *((SEL *)this + 2)) != InstanceMethod)
      break;
    v2 = v6;
  }
  return v2;
}

uint64_t *WebKit::appBoundDomainsForTesting(WebKit *this, const WTF::String *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (!MEMORY[0x19AEABBCC](*(_QWORD *)this, "inAppBrowserPrivacyTestIdentifier", 33))
    return 0;
    return &WebKit::appBoundDomainsForTesting(WTF::String const&)::domains;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(&v5, &v6);
  v4 = v5;
  WebKit::appBoundDomainsForTesting(WTF::String const&)::domains = (uint64_t)v6;
  v5 = 0;
  v6 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  return &WebKit::appBoundDomainsForTesting(WTF::String const&)::domains;
}

void sub_19702E868(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::hasProhibitedUsageStrings(WebKit *this)
{
  unsigned __int8 v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  void *v8;
  WTF::StringImpl *v9;
  WTF *v11;
  WTF::StringImpl *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = atomic_load(byte_1ECE721C5);
  if ((v1 & 1) == 0)
  {
    v2 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "infoDictionary");
    if (!v2)
    {
      __break(0xC471u);
      JUMPOUT(0x19702EA98);
    }
    v3 = (void *)v2;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v4 = objc_msgSend(&unk_1E356F690, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v4)
    {
      v5 = *(_QWORD *)v14;
      while (2)
      {
        for (i = 0; i != v4; ++i)
        {
          if (*(_QWORD *)v14 != v5)
            objc_enumerationMutation(&unk_1E356F690);
          v7 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * i);
          if (objc_msgSend(v3, "objectForKey:", v7))
          {
            MEMORY[0x19AEABCC8](&v12, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("[In-App Browser Privacy] %@ used prohibited usage string %@."), objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundleIdentifier"), v7));
            WTF::String::utf8();
            WTFLogAlways();
            if (v11)
            {
              if (*(_DWORD *)v11 == 1)
                WTF::fastFree(v11, v8);
              else
                --*(_DWORD *)v11;
            }
            byte_1ECE721C2 = 1;
            v9 = v12;
            v12 = 0;
            if (v9)
            {
              if (*(_DWORD *)v9 == 2)
                WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v8);
              else
                *(_DWORD *)v9 -= 2;
            }
            goto LABEL_20;
          }
        }
        v4 = objc_msgSend(&unk_1E356F690, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
        if (v4)
          continue;
        break;
      }
    }
LABEL_20:
    atomic_store(1u, byte_1ECE721C5);
  }
  return byte_1ECE721C2;
}

void sub_19702EAA0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, WTF::StringImpl *a12)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 1)
      WTF::fastFree(a11, a2);
    else
      --*(_DWORD *)a11;
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::AuxiliaryProcess::additionalStateForDiagnosticReport(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebKit::AuxiliaryProcess::shouldOverrideQuarantine(WebKit::AuxiliaryProcess *this)
{
  return 1;
}

void API::Data::createWithoutCopying(WTF::RetainPtr<NSData>)::$_0::__invoke(int a1, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t ___ZN6WebKitL26initARQuickLookPreviewItemEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN6WebKit12ARKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE721C8 != -1)
    dispatch_once(&qword_1ECE721C8, block);
  result = (uint64_t)objc_getClass("ARQuickLookPreviewItem");
  qword_1ECE721E0 = result;
  if (result)
  {
    WebKit::getARQuickLookPreviewItemClass[0] = WebKit::ARQuickLookPreviewItemFunction;
  }
  else
  {
    result = 35;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ARQuickLookPreviewItemFunction(WebKit *this)
{
  return qword_1ECE721E0;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::shouldThrowExceptionForDuplicateCompletionHandlerCall(void)::$_0 &&>>()
{
  uint64_t result;

  result = WTF::linkedOnOrAfterSDKWithBehavior();
  byte_1ECE721C4 = result;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::determineTrackingPreventionState(void)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *a1 = &off_1E34B7A58;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WebKit::PDFKitLibrary(WebKit *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN6WebKit13PDFKitLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v3 = 0;
  if (qword_1ECE721F8 != -1)
    dispatch_once(&qword_1ECE721F8, block);
  return _MergedGlobals_58;
}

uint64_t ___ZN6WebKit13PDFKitLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/Frameworks/PDFKit.framework/PDFKit", 2);
  _MergedGlobals_58 = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 33;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::initPDFAnnotationButtonWidget(WebKit *this)
{
  if (qword_1ECE72220 != -1)
    dispatch_once(&qword_1ECE72220, &__block_literal_global_82);
  return qword_1ECE72228;
}

uint64_t WebKit::initPDFAnnotationChoiceWidget(WebKit *this)
{
  if (qword_1ECE72230 != -1)
    dispatch_once(&qword_1ECE72230, &__block_literal_global_84);
  return qword_1ECE72238;
}

uint64_t WebKit::initPDFAnnotationLink(WebKit *this)
{
  if (qword_1ECE72240 != -1)
    dispatch_once(&qword_1ECE72240, &__block_literal_global_86);
  return qword_1ECE72248;
}

uint64_t WebKit::initPDFAnnotationPopup(WebKit *this)
{
  if (qword_1ECE72250 != -1)
    dispatch_once(&qword_1ECE72250, &__block_literal_global_88);
  return qword_1ECE72258;
}

uint64_t WebKit::initPDFAnnotationText(WebKit *this)
{
  if (qword_1ECE72260 != -1)
    dispatch_once(&qword_1ECE72260, &__block_literal_global_90);
  return qword_1ECE72268;
}

uint64_t WebKit::initPDFAnnotationTextWidget(WebKit *this)
{
  if (qword_1ECE72270 != -1)
    dispatch_once(&qword_1ECE72270, &__block_literal_global_92);
  return qword_1ECE72278;
}

uint64_t WebKit::initPDFDocument(WebKit *this)
{
  if (qword_1ECE72280 != -1)
    dispatch_once(&qword_1ECE72280, &__block_literal_global_94);
  return qword_1ECE72288;
}

uint64_t WebKit::initPDFSelection(WebKit *this)
{
  if (qword_1ECE72290 != -1)
    dispatch_once(&qword_1ECE72290, &__block_literal_global_98);
  return qword_1ECE72298;
}

double WebKit::get_PDFKit_kPDFDestinationUnspecifiedValue(WebKit *this)
{
  if (qword_1ECE72208 != -1)
    dispatch_once(&qword_1ECE72208, &__block_literal_global_14);
  return *(double *)&qword_1ECE72200;
}

uint64_t ___ZN6WebKit42get_PDFKit_kPDFDestinationUnspecifiedValueEv_block_invoke(WebKit *a1)
{
  void *v1;
  uint64_t result;

  v1 = (void *)WebKit::PDFKitLibrary(a1);
  result = (uint64_t)dlsym(v1, "kPDFDestinationUnspecifiedValue");
  if (result)
  {
    qword_1ECE72200 = *(_QWORD *)result;
  }
  else
  {
    result = 46;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::RevealItem::item(WebKit::RevealItem *this)
{
  uint64_t result;
  id v3;
  const __CFString *v4;
  const void *v5;

  result = *((_QWORD *)this + 3);
  if (!result)
  {
    v3 = objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E0DCDEF8])());
    if (*(_QWORD *)this)
      v4 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v4 = &stru_1E351F1B8;
    result = objc_msgSend(v3, "initWithText:selectedRange:", v4, *((_QWORD *)this + 1), *((_QWORD *)this + 2));
    v5 = (const void *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = result;
    if (v5)
    {
      CFRelease(v5);
      return *((_QWORD *)this + 3);
    }
  }
  return result;
}

BOOL WebKit::SandboxExtensionImpl::consume(WebKit::SandboxExtensionImpl *this)
{
  uint64_t v2;
  NSObject *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = sandbox_extension_consume();
  *((_QWORD *)this + 1) = v2;
  if (v2 == -1)
  {
    v4 = qword_1ECE71780;
    if (os_log_type_enabled((os_log_t)qword_1ECE71780, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_QWORD *)this;
      v6 = *__error();
      v7 = 136315394;
      v8 = v5;
      v9 = 1024;
      v10 = v6;
      _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "Could not create a sandbox extension for '%s', errno = %d", (uint8_t *)&v7, 0x12u);
    }
  }
  return v2 != -1;
}

_QWORD *WebKit::SandboxExtensionHandle::SandboxExtensionHandle(_QWORD *this)
{
  *this = 0;
  return this;
}

const char ***WebKit::SandboxExtensionHandle::operator=(const char ***a1, const char ***a2)
{
  const char **v3;

  v3 = *a2;
  *a2 = 0;
  std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](a1, v3);
  return a1;
}

void WebKit::SandboxExtension::createHandle(int a1@<W2>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v4;
  WebKit::SandboxExtensionImpl *v5;
  unint64_t v6;
  WTF::StringImpl *v7;
  WebKit::SandboxExtensionImpl **v8;

  WebKit::resolvePathForSandboxExtension((WTF::StringImpl **)&v8);
  v4 = (WTF::StringImpl *)v8;
  if (v8)
  {
    v5 = v8[1];
    v6 = *((unsigned int *)v8 + 1) | ((unint64_t)((*((_DWORD *)v8 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v5 = 0;
    v6 = 0x100000000;
  }
  WebKit::SandboxExtension::createHandleWithoutResolvingPath(v5, (WebKit::SandboxExtensionImpl *)v6, a1, a2);
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v7);
    else
      *(_DWORD *)v4 -= 2;
  }
}

void sub_19702F204(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::SandboxExtension::createReadOnlyHandlesForFiles@<X0>(uint64_t result@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char **v10;
  const char **v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  WTF *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  const char **v19;
  char v20;
  const char **v21;
  char v22;
  WTF *v23;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v4 = *((unsigned int *)a2 + 3);
  if (!(_DWORD)v4)
    return WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a3, *(unsigned int *)(a3 + 12));
  if (!(v4 >> 29))
  {
    v6 = WTF::fastMalloc((WTF *)(8 * v4));
    *(_DWORD *)(a3 + 8) = v4;
    *(_QWORD *)a3 = v6;
    v7 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v7)
    {
      v8 = *a2;
      v9 = 8 * v7;
      do
      {
        WebKit::SandboxExtension::createHandle(0, (uint64_t)&v21);
        if (v22)
        {
          v10 = v21;
          v21 = 0;
          v19 = v10;
          v20 = 1;
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v21);
          if (v20)
          {
            v11 = v19;
            v19 = 0;
            v21 = v11;
            v12 = *(unsigned int *)(a3 + 12);
            if ((_DWORD)v12 == *(_DWORD *)(a3 + 8))
            {
              v16 = (uint64_t *)WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v12 + 1, (unint64_t)&v21);
              v12 = *(unsigned int *)(a3 + 12);
              v17 = *(_QWORD *)a3;
              v18 = *v16;
              *v16 = 0;
              *(_QWORD *)(v17 + 8 * v12) = v18;
            }
            else
            {
              v13 = *(_QWORD *)a3;
              v21 = 0;
              *(_QWORD *)(v13 + 8 * v12) = v11;
            }
            *(_DWORD *)(a3 + 12) = v12 + 1;
            WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v21);
            if (v20)
              WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v19);
          }
        }
        else
        {
          WTF::String::utf8();
          WTFLogAlways();
          v15 = v23;
          v23 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 1)
              WTF::fastFree(v15, v14);
            else
              --*(_DWORD *)v15;
          }
        }
        v8 += 8;
        v9 -= 8;
      }
      while (v9);
    }
    return WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a3, *(unsigned int *)(a3 + 12));
  }
  __break(0xC471u);
  return result;
}

void sub_19702F3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, const char **a12, __int16 a13, char a14, char a15, int a16, const char **a17, uint64_t a18, WTF *a19)
{
  uint64_t v19;
  void *v21;

  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a17);
  if ((_BYTE)a13)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a12);
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v19, v21);
  _Unwind_Resume(a1);
}

void WebKit::SandboxExtension::createHandleForGenericExtension(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const char **v3;
  const char **v4;
  WTF *v5;
  void *v6;
  char v7;
  _BYTE v8[36];
  const char **v9;
  const char **v10;

  v10 = 0;
  v8[0] = 0;
  v8[32] = 0;
  WebKit::SandboxExtensionImpl::create(a1, 4, (uint64_t)v8, (uint64_t *)&v9);
  v3 = v9;
  v4 = v10;
  v10 = v9;
  if (v4)
  {
    WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v4);
    WTF::fastFree(v5, v6);
  }
  if (v3)
  {
    v10 = 0;
    *(_QWORD *)a2 = v3;
    v7 = 1;
  }
  else
  {
    WTFLogAlways();
    v7 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 8) = v7;
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v10);
}

void sub_19702F4F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(v1 - 40));
  _Unwind_Resume(a1);
}

void WebKit::SandboxExtension::createHandleForMachBootstrapExtension(const char ***a1@<X8>)
{
  const char **v3;
  const char **v4;
  char v5;

  WebKit::SandboxExtension::createHandleForGenericExtension((uint64_t)"com.apple.webkit.mach-bootstrap", (uint64_t)&v4);
  if (v5)
  {
    v3 = v4;
    v4 = 0;
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v4);
  }
  else
  {
    v3 = 0;
  }
  *a1 = v3;
}

void WebKit::SandboxExtension::createHandleForMachLookup(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  __int128 v4;
  const char **v5;
  const char **v6;
  WTF *v7;
  void *v8;
  char v9;
  _OWORD v10[2];
  int v11;
  const char **v12;
  const char **v13;

  v13 = 0;
  v4 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v4;
  v11 = *(_DWORD *)(a2 + 32);
  WebKit::SandboxExtensionImpl::create(a1, 2, (uint64_t)v10, (uint64_t *)&v12);
  v6 = v12;
  v5 = v13;
  v13 = v12;
  if (v5)
  {
    WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v5);
    WTF::fastFree(v7, v8);
  }
  if (v6)
  {
    v13 = 0;
    *(_QWORD *)a3 = v6;
    v9 = 1;
  }
  else
  {
    WTFLogAlways();
    v9 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 8) = v9;
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v13);
}

void sub_19702F608(_Unwind_Exception *a1)
{
  uint64_t v1;

  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(v1 - 40));
  _Unwind_Resume(a1);
}

void WebKit::SandboxExtension::createHandlesForMachLookup(uint64_t *a1@<X0>, unint64_t a2@<X1>, __int128 *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  const char **v17;
  const char **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  int v26;
  const char **v27;
  char v28;
  const char **v29;
  char v30;
  _OWORD v31[2];
  int v32;

  v8 = 0;
  LOBYTE(v26) = *((_BYTE *)a3 + 32);
  v24 = *a3;
  v25 = a3[1];
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  if (a2)
  {
    if (a2 >> 29)
    {
      __break(0xC471u);
      return;
    }
    v14 = WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(a5 + 8) = a2;
    *(_QWORD *)a5 = v14;
    v15 = &a1[2 * a2];
    do
    {
      v16 = *a1;
      v31[0] = v24;
      v31[1] = v25;
      v32 = v26;
      WebKit::SandboxExtension::createHandleForMachLookup(v16, (uint64_t)v31, (uint64_t)&v29);
      if (v30)
      {
        v17 = v29;
        v29 = 0;
        v27 = v17;
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v29);
        v28 = 1;
        v18 = v27;
        v27 = 0;
        *(_QWORD *)&v31[0] = v18;
        v19 = *(unsigned int *)(a5 + 12);
        if ((_DWORD)v19 == *(_DWORD *)(a5 + 8))
        {
          v21 = (uint64_t *)WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a5, v19 + 1, (unint64_t)v31);
          v19 = *(unsigned int *)(a5 + 12);
          v22 = *(_QWORD *)a5;
          v23 = *v21;
          *v21 = 0;
          *(_QWORD *)(v22 + 8 * v19) = v23;
        }
        else
        {
          v20 = *(_QWORD *)a5;
          *(_QWORD *)&v31[0] = 0;
          *(_QWORD *)(v20 + 8 * v19) = v18;
        }
        *(_DWORD *)(a5 + 12) = v19 + 1;
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)v31);
        if (v28)
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v27);
      }
      a1 += 2;
    }
    while (a1 != v15);
    v8 = *(unsigned int *)(a5 + 12);
  }
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a5, v8);
  if (a4 == 1)
  {
    WebKit::SandboxExtension::createHandleForMachBootstrapExtension((const char ***)v31);
    v9 = *(unsigned int *)(a5 + 12);
    if ((_DWORD)v9 == *(_DWORD *)(a5 + 8))
    {
      v12 = (uint64_t *)WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a5, v9 + 1, (unint64_t)v31);
      v9 = *(unsigned int *)(a5 + 12);
      v10 = *(_QWORD *)a5;
      v11 = *v12;
      *v12 = 0;
    }
    else
    {
      v10 = *(_QWORD *)a5;
      v11 = *(_QWORD *)&v31[0];
      *(_QWORD *)&v31[0] = 0;
    }
    *(_QWORD *)(v10 + 8 * v9) = v11;
    *(_DWORD *)(a5 + 12) = v9 + 1;
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)v31);
  }
}

void sub_19702F7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  void *v9;
  const char **v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v10 = va_arg(va1, const char **);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)va1);
  if ((_BYTE)v12)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)va);
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v7, v9);
  _Unwind_Resume(a1);
}

void WebKit::SandboxExtension::createHandleForReadByAuditToken(WebKit::SandboxExtensionImpl *a1@<X0>, WebKit::SandboxExtensionImpl *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X8>)
{
  char *v6;
  __int128 v7;
  void *v8;
  const char **v9;
  WTF *v10;
  void *v11;
  WTF *v12;
  WebKit::SandboxExtensionImpl *v13;
  char v14;
  NSObject *v15;
  char *v16;
  void *v17;
  WTF *v18;
  _OWORD v19[2];
  char v20;
  WTF *v21;
  WebKit::SandboxExtensionImpl *v22[3];
  _BYTE buf[24];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v22[1] = a1;
  v22[2] = a2;
  v22[0] = 0;
  WTF::StringView::utf8();
  if (v21)
    v6 = (char *)v21 + 16;
  else
    v6 = 0;
  v7 = a3[1];
  v19[0] = *a3;
  v19[1] = v7;
  v20 = 1;
  WebKit::SandboxExtensionImpl::create((uint64_t)v6, 5, (uint64_t)v19, (uint64_t *)buf);
  v9 = (const char **)v22[0];
  v22[0] = *(WebKit::SandboxExtensionImpl **)buf;
  if (v9)
  {
    WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v9);
    WTF::fastFree(v10, v11);
  }
  v12 = v21;
  v21 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
      WTF::fastFree(v12, v8);
    else
      --*(_DWORD *)v12;
  }
  v13 = v22[0];
  if (v22[0])
  {
    v22[0] = 0;
    *(_QWORD *)a4 = v13;
    v14 = 1;
  }
  else
  {
    v15 = qword_1ECE71780;
    if (os_log_type_enabled((os_log_t)qword_1ECE71780, OS_LOG_TYPE_ERROR))
    {
      WTF::StringView::utf8();
      if (v21)
        v16 = (char *)v21 + 16;
      else
        v16 = 0;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v16;
      _os_log_error_impl(&dword_196BCC000, v15, OS_LOG_TYPE_ERROR, "Could not create a sandbox extension for '%s'", buf, 0xCu);
      v18 = v21;
      v21 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 1)
          WTF::fastFree(v18, v17);
        else
          --*(_DWORD *)v18;
      }
    }
    v14 = 0;
    *(_BYTE *)a4 = 0;
  }
  *(_BYTE *)(a4 + 8) = v14;
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)v22);
}

void sub_19702F9C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, const char **a16)
{
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a16);
  _Unwind_Resume(a1);
}

BOOL WebKit::SandboxExtension::revoke(WebKit::SandboxExtension *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 2) - 1;
  *((_QWORD *)this + 2) = v1;
  if (v1)
    return 1;
  *(_QWORD *)(*((_QWORD *)this + 1) + 8) = 0;
  return sandbox_extension_release() == 0;
}

BOOL WebKit::SandboxExtension::consume(WebKit::SandboxExtension *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v1 + 1;
  return v1 || WebKit::SandboxExtensionImpl::consume(*((WebKit::SandboxExtensionImpl **)this + 1));
}

uint64_t ___ZN6WebKitL29initPDFAnnotationButtonWidgetEv_block_invoke(WebKit *a1)
{
  uint64_t result;

  WebKit::PDFKitLibrary(a1);
  result = (uint64_t)objc_getClass("PDFAnnotationButtonWidget");
  qword_1ECE72228 = result;
  if (result)
  {
    WebKit::getPDFAnnotationButtonWidgetClass[0] = WebKit::PDFAnnotationButtonWidgetFunction;
  }
  else
  {
    result = 37;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::PDFAnnotationButtonWidgetFunction(WebKit *this)
{
  return qword_1ECE72228;
}

uint64_t ___ZN6WebKitL29initPDFAnnotationChoiceWidgetEv_block_invoke(WebKit *a1)
{
  uint64_t result;

  WebKit::PDFKitLibrary(a1);
  result = (uint64_t)objc_getClass("PDFAnnotationChoiceWidget");
  qword_1ECE72238 = result;
  if (result)
  {
    WebKit::getPDFAnnotationChoiceWidgetClass[0] = WebKit::PDFAnnotationChoiceWidgetFunction;
  }
  else
  {
    result = 38;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::PDFAnnotationChoiceWidgetFunction(WebKit *this)
{
  return qword_1ECE72238;
}

uint64_t ___ZN6WebKitL21initPDFAnnotationLinkEv_block_invoke(WebKit *a1)
{
  uint64_t result;

  WebKit::PDFKitLibrary(a1);
  result = (uint64_t)objc_getClass("PDFAnnotationLink");
  qword_1ECE72248 = result;
  if (result)
  {
    WebKit::getPDFAnnotationLinkClass[0] = WebKit::PDFAnnotationLinkFunction;
  }
  else
  {
    result = 39;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::PDFAnnotationLinkFunction(WebKit *this)
{
  return qword_1ECE72248;
}

uint64_t ___ZN6WebKitL22initPDFAnnotationPopupEv_block_invoke(WebKit *a1)
{
  uint64_t result;

  WebKit::PDFKitLibrary(a1);
  result = (uint64_t)objc_getClass("PDFAnnotationPopup");
  qword_1ECE72258 = result;
  if (result)
  {
    WebKit::getPDFAnnotationPopupClass[0] = WebKit::PDFAnnotationPopupFunction;
  }
  else
  {
    result = 40;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::PDFAnnotationPopupFunction(WebKit *this)
{
  return qword_1ECE72258;
}

uint64_t ___ZN6WebKitL21initPDFAnnotationTextEv_block_invoke(WebKit *a1)
{
  uint64_t result;

  WebKit::PDFKitLibrary(a1);
  result = (uint64_t)objc_getClass("PDFAnnotationText");
  qword_1ECE72268 = result;
  if (result)
  {
    WebKit::getPDFAnnotationTextClass[0] = WebKit::PDFAnnotationTextFunction;
  }
  else
  {
    result = 41;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::PDFAnnotationTextFunction(WebKit *this)
{
  return qword_1ECE72268;
}

uint64_t ___ZN6WebKitL27initPDFAnnotationTextWidgetEv_block_invoke(WebKit *a1)
{
  uint64_t result;

  WebKit::PDFKitLibrary(a1);
  result = (uint64_t)objc_getClass("PDFAnnotationTextWidget");
  qword_1ECE72278 = result;
  if (result)
  {
    WebKit::getPDFAnnotationTextWidgetClass[0] = WebKit::PDFAnnotationTextWidgetFunction;
  }
  else
  {
    result = 42;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::PDFAnnotationTextWidgetFunction(WebKit *this)
{
  return qword_1ECE72278;
}

uint64_t ___ZN6WebKitL15initPDFDocumentEv_block_invoke(WebKit *a1)
{
  uint64_t result;

  WebKit::PDFKitLibrary(a1);
  result = (uint64_t)objc_getClass("PDFDocument");
  qword_1ECE72288 = result;
  if (result)
  {
    WebKit::getPDFDocumentClass = WebKit::PDFDocumentFunction;
  }
  else
  {
    result = 43;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::PDFDocumentFunction(WebKit *this)
{
  return qword_1ECE72288;
}

uint64_t ___ZN6WebKitL16initPDFSelectionEv_block_invoke(WebKit *a1)
{
  uint64_t result;

  WebKit::PDFKitLibrary(a1);
  result = (uint64_t)objc_getClass("PDFSelection");
  qword_1ECE72298 = result;
  if (result)
  {
    WebKit::getPDFSelectionClass = WebKit::PDFSelectionFunction;
  }
  else
  {
    result = 45;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::PDFSelectionFunction(WebKit *this)
{
  return qword_1ECE72298;
}

uint64_t WTF::Vector<char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, WTF *this)
{
  int v2;
  uint64_t v3;
  void *v4;
  size_t v5;
  void *v6;
  void *v7;

  if (*(unsigned int *)(result + 8) >= (unint64_t)this)
    return 1;
  v2 = (int)this;
  if (!((unint64_t)this >> 32))
  {
    v3 = result;
    v4 = *(void **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = (void *)WTF::fastMalloc(this);
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    memcpy(v6, v4, v5);
    if (v4)
    {
      if (*(void **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

unint64_t WTF::Vector<char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, WTF *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > (unint64_t)a2)
      a2 = (WTF *)v10;
    WTF::Vector<char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > (unint64_t)a2)
      a2 = (WTF *)v8;
    WTF::Vector<char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WTF::CString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,WTF::CString>::destruct(*(WTF **)a1, (void *)(*(_QWORD *)a1 + 8 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF *WTF::VectorDestructor<true,WTF::CString>::destruct(WTF *result, void *a2)
{
  WTF **v3;

  if (result != a2)
  {
    v3 = (WTF **)result;
    do
    {
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          result = (WTF *)WTF::fastFree(result, a2);
        else
          --*(_DWORD *)result;
      }
      ++v3;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WebKit::GPUConnectionToWebProcess::GPUConnectionToWebProcess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, WTF::MachSendRight *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t *v13;
  unsigned int *v14;
  unsigned int v15;
  WebKit::RemoteMediaPlayerManagerProxy *v16;
  WebCore::SecurityOrigin *v17;
  WTF::RunLoop *v18;
  _OWORD *v19;
  char v20;
  int v21;
  WTF::RunLoop *v22;
  WTF::RunLoop *v23;
  IPC::Connection *v24;
  uint64_t v25;
  WebCore *v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  __int128 v35;
  _BYTE v36[32];
  char v37;
  char v38;
  char v39;
  char v40;
  _BYTE *v41;
  uint64_t *v42;
  int v43;
  void *object;
  _BYTE v45[31];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v12 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v12 = 0;
  *(_OWORD *)(v12 + 8) = xmmword_1978CE9C0;
  *(_QWORD *)(v12 + 24) = a1;
  *(_QWORD *)(a1 + 24) = &unk_1E34B7D50;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)a1 = off_1E34B7D08;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v13 = (uint64_t *)(a1 + 48);
  v43 = WTF::MachSendRight::leakSendRight(a5);
  object = 0;
  IPC::Connection::createClientConnection((uint64_t)&v43, (mach_port_context_t *)(a1 + 48));
  if (object)
    os_release(object);
  IPC::MessageReceiverMap::MessageReceiverMap((_QWORD *)(a1 + 56));
  v14 = (unsigned int *)(a2 + 112);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  *(_QWORD *)(a1 + 72) = a2;
  *(_QWORD *)(a1 + 80) = a3;
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)(a1 + 88), (const WTF::MachSendRight *)a6);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v16 = (WebKit::RemoteMediaPlayerManagerProxy *)WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)(a1 + 120) = WebKit::RemoteMediaPlayerManagerProxy::RemoteMediaPlayerManagerProxy(v16, (WebKit::GPUConnectionToWebProcess *)a1);
  *(_QWORD *)(a1 + 128) = a4;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  WebKit::RemoteSampleBufferDisplayLayerManager::create((WebKit::RemoteSampleBufferDisplayLayerManager *)(a1 + 160), (WebKit::GPUConnectionToWebProcess *)a1);
  *(_QWORD *)(a1 + 168) = 0;
  WebCore::SecurityOrigin::createOpaque(v17);
  *(_WORD *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 186) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)v45, *(unsigned __int8 ***)(a1 + 48));
  WebKit::RemoteVideoFrameObjectHeap::create((uint64_t *)v45, (WebKit **)v36);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)v36;
  *(_QWORD *)v36 = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v45);
  WebKit::LibWebRTCCodecsProxy::create((WebKit::LibWebRTCCodecsProxy *)a1, (uint64_t **)v36);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)v36;
  v19 = (_OWORD *)(a1 + 208);
  v20 = *(_BYTE *)(a6 + 44);
  if (v20)
  {
    v35 = *(_OWORD *)(a6 + 28);
    *v19 = *(_OWORD *)(a6 + 12);
    *(_OWORD *)(a1 + 224) = v35;
    v20 = 1;
  }
  else
  {
    *(_BYTE *)v19 = 0;
  }
  *(_OWORD *)(a1 + 248) = 0u;
  *(_BYTE *)(a1 + 240) = v20;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_BYTE *)(a1 + 344) = 0;
  *(_BYTE *)(a1 + 345) = *(_BYTE *)(a6 + 10);
  *(_BYTE *)(a1 + 346) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  v21 = *(_DWORD *)(a6 + 4);
  *(_WORD *)(a1 + 364) = *(_WORD *)(a6 + 8);
  *(_DWORD *)(a1 + 360) = v21;
  v22 = (WTF::RunLoop *)WTF::RunLoop::main(v18);
  if ((WTF::RunLoop::isCurrent(v22) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x197030324);
  }
  v23 = (WTF::RunLoop *)IPC::Connection::setOnlySendMessagesAsDispatchWhenWaitingForSyncReplyWhenProcessingSuchAMessage(*v13, 1);
  v24 = (IPC::Connection *)*v13;
  v25 = WTF::RunLoop::current(v23);
  v26 = (WebCore *)IPC::Connection::open(v24, a1 + 24, v25);
  if (*(_BYTE *)(a6 + 49))
  {
    v27 = *(_BYTE *)(a6 + 48) != 0;
  }
  else
  {
    v27 = WebCore::vp9HardwareDecoderAvailable(v26);
    v36[0] = v27;
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a2 + 16) + 56))(a2 + 16);
    v26 = IPC::MessageSender::send<Messages::GPUProcessProxy::SetHasVP9HardwareDecoder>(a2 + 16, v36, v28);
  }
  if (*(_BYTE *)(a6 + 51))
  {
    v29 = *(_BYTE *)(a6 + 50) != 0;
  }
  else
  {
    v29 = WebCore::av1HardwareDecoderAvailable(v26);
    v36[0] = v29;
    v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a2 + 16) + 56))(a2 + 16);
    IPC::MessageSender::send<Messages::GPUProcessProxy::SetHasAV1HardwareDecoder>(a2 + 16, v36, v30);
  }
  v31 = *(_QWORD *)(a2 + 32);
  if (v31)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)v31);
  if (*(_QWORD *)(v31 + 352))
  {
    xpc_connection_get_audit_token();
    v32 = v36[0];
    *(_OWORD *)v45 = *(_OWORD *)&v36[1];
    *(_OWORD *)&v45[15] = *(_OWORD *)&v36[16];
    v33 = 1;
  }
  else
  {
    v32 = 0;
    v33 = 0;
  }
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref((unsigned __int8 **)v31);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v42, (uint64_t **)(a1 + 48));
  v36[0] = v32;
  *(_OWORD *)&v36[1] = *(_OWORD *)v45;
  *(_OWORD *)&v36[16] = *(_OWORD *)&v45[15];
  v37 = v33;
  v38 = v27;
  v39 = v29;
  v40 = 1;
  v41 = v36;
  IPC::Connection::send<Messages::GPUProcessConnection::DidInitialize>((uint64_t)v42, (uint64_t *)&v41);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v42);
  ++WebKit::GPUConnectionToWebProcess::gObjectCountForTesting;
  return a1;
}

void WebKit::GPUConnectionToWebProcess::~GPUConnectionToWebProcess(WebKit::GPUConnectionToWebProcess *this)
{
  WTF::RunLoop *v2;
  unsigned __int8 **v3;
  void *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  void *v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  void *v36;

  *(_QWORD *)this = off_1E34B7D08;
  *((_QWORD *)this + 3) = &unk_1E34B7D50;
  v2 = (WTF::RunLoop *)WTF::RunLoop::main(this);
  if ((WTF::RunLoop::isCurrent(v2) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x197030604);
  }
  IPC::Connection::invalidate(*((_QWORD *)this + 6));
  v3 = (unsigned __int8 **)*((_QWORD *)this + 20);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v3 + 2);
  WebKit::RemoteSampleBufferDisplayLayerManager::close((WebKit::RemoteSampleBufferDisplayLayerManager *)v3);
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(v3[2], v4);
  --WebKit::GPUConnectionToWebProcess::gObjectCountForTesting;
  v5 = *((_QWORD *)this + 44);
  if (v5)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v5, (WTF::StringImpl *)v4);
  v6 = (_DWORD *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[4];
  }
  v7 = *((_QWORD *)this + 41);
  if (v7)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v7, v4);
  v8 = *((_QWORD *)this + 40);
  if (v8)
    WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::LayerHostingContext>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::LayerHostingContext>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::LayerHostingContext>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::LayerHostingContext>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v8, v4);
  std::unique_ptr<WebKit::RemoteMediaEngineConfigurationFactoryProxy>::reset[abi:sn180100]((unsigned int ***)this + 39, 0);
  v9 = *((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  std::unique_ptr<WebKit::RemoteLegacyCDMFactoryProxy>::reset[abi:sn180100]((WebKit::RemoteLegacyCDMFactoryProxy **)this + 37, 0);
  v10 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  std::unique_ptr<WebKit::RemoteCDMFactoryProxy>::reset[abi:sn180100]((WebKit::RemoteCDMFactoryProxy **)this + 34, 0);
  v13 = *((_QWORD *)this + 33);
  if (v13)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v13, v12);
  v14 = *((_QWORD *)this + 32);
  if (v14)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v14, v12);
  v15 = *((_QWORD *)this + 31);
  if (v15)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v15, v12);
  IPC::ScopedActiveMessageReceiveQueue<WebKit::LibWebRTCCodecsProxy,WTF::RefPtr<WebKit::LibWebRTCCodecsProxy,WTF::RawPtrTraits<WebKit::LibWebRTCCodecsProxy>,WTF::DefaultRefDerefTraits<WebKit::LibWebRTCCodecsProxy>>>::~ScopedActiveMessageReceiveQueue((uint64_t *)this + 25);
  IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteVideoFrameObjectHeap,WTF::RefPtr<WebKit::RemoteVideoFrameObjectHeap,WTF::RawPtrTraits<WebKit::RemoteVideoFrameObjectHeap>,WTF::DefaultRefDerefTraits<WebKit::RemoteVideoFrameObjectHeap>>>::~ScopedActiveMessageReceiveQueue((uint64_t *)this + 24);
  v17 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v17)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v17, v16);
  v18 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v19)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v19 + 16), v16);
  v20 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v23)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v23 + 16), v16);
  v24 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v24)
    WTF::ThreadSafeRefCounted<WebKit::RemoteSharedResourceCache,(WTF::DestructionThread)0>::deref((unsigned int *)(v24 + 16));
  v25 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  WTF::MachSendRight::~MachSendRight((WebKit::GPUConnectionToWebProcess *)((char *)this + 88));
  v27 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v27)
  {
    v28 = v27 + 28;
    do
    {
      v29 = __ldaxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
    {
      atomic_store(1u, v27 + 28);
      (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 8))(v27);
    }
  }
  IPC::MessageReceiverMap::~MessageReceiverMap((WebKit::GPUConnectionToWebProcess *)((char *)this + 56), v26);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)this + 6);
  v32 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v32)
  {
    v33 = v32 + 2;
    do
    {
      v34 = __ldaxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
    {
      atomic_store(1u, v32 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v32 + 8))(v32);
    }
  }
  *((_QWORD *)this + 3) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 4, v31);
  WTF::WeakPtrFactory<WebCore::NowPlayingManagerClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v36);
}

{
  WTF *v1;
  void *v2;

  WebKit::GPUConnectionToWebProcess::~GPUConnectionToWebProcess(this);
  WTF::fastFree(v1, v2);
}

void `non-virtual thunk to'WebKit::GPUConnectionToWebProcess::~GPUConnectionToWebProcess(WebKit::GPUConnectionToWebProcess *this)
{
  WebKit::GPUConnectionToWebProcess::~GPUConnectionToWebProcess((WebKit::GPUConnectionToWebProcess *)((char *)this - 24));
}

{
  WTF *v1;
  void *v2;

  WebKit::GPUConnectionToWebProcess::~GPUConnectionToWebProcess((WebKit::GPUConnectionToWebProcess *)((char *)this - 24));
  WTF::fastFree(v1, v2);
}

WebKit::RemoteSharedResourceCache *WebKit::GPUConnectionToWebProcess::sharedResourceCache@<X0>(WebKit::GPUConnectionToWebProcess *this@<X0>, WebKit::RemoteSharedResourceCache **a2@<X8>)
{
  WebKit::RemoteSharedResourceCache *result;
  WebKit::RemoteSharedResourceCache *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  result = (WebKit::RemoteSharedResourceCache *)*((_QWORD *)this + 13);
  if (!result)
  {
    v5 = (WebKit::RemoteSharedResourceCache *)WTF::fastMalloc((WTF *)0x50);
    result = WebKit::RemoteSharedResourceCache::RemoteSharedResourceCache(v5, this);
    v6 = *((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = result;
    if (v6)
    {
      WTF::ThreadSafeRefCounted<WebKit::RemoteSharedResourceCache,(WTF::DestructionThread)0>::deref((unsigned int *)(v6 + 16));
      result = (WebKit::RemoteSharedResourceCache *)*((_QWORD *)this + 13);
    }
  }
  v7 = (unsigned int *)((char *)result + 16);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  *a2 = result;
  return result;
}

void WebKit::GPUConnectionToWebProcess::didClose(WebKit::GPUConnectionToWebProcess *this, IPC::Connection *a2)
{
  WebKit::UserMediaCaptureManagerProxy *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WebKit::RemoteCDMFactoryProxy *v10;
  unsigned __int8 **v11;
  void *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  WebKit::RemoteAudioSessionProxyManager *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;

  if (*((_QWORD *)this + 35))
  {
    v18 = (unsigned int *)*((_QWORD *)this + 9);
    v19 = v18 + 28;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 + 1, v19));
    v21 = (WebKit::RemoteAudioSessionProxyManager *)WebKit::GPUProcess::audioSessionManager((WebKit::GPUProcess *)v18);
    WebKit::RemoteAudioSessionProxyManager::removeProxy(v21, *((WebKit::RemoteAudioSessionProxy **)this + 35));
    if (v18)
    {
      do
      {
        v22 = __ldaxr(v19);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v19));
      if (!v23)
      {
        atomic_store(1u, v18 + 28);
        (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 8))(v18);
      }
    }
    v24 = *((_QWORD *)this + 35);
    *((_QWORD *)this + 35) = 0;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  }
  v3 = (WebKit::UserMediaCaptureManagerProxy *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v3)
  {
    WebKit::UserMediaCaptureManagerProxy::close(v3);
    (*(void (**)(WebKit::UserMediaCaptureManagerProxy *))(*(_QWORD *)v3 + 8))(v3);
  }
  v4 = *((_QWORD *)this + 24);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v4 + 16));
  WebKit::RemoteVideoFrameObjectHeap::close(v4);
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), v5);
  WebKit::RemoteMediaPlayerManagerProxy::clear(*((WebKit::RemoteMediaPlayerManagerProxy **)this + 15));
  v7 = *((_QWORD *)this + 31);
  if (v7)
  {
    *((_QWORD *)this + 31) = 0;
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v7, v6);
  }
  v8 = *((_QWORD *)this + 32);
  if (v8)
  {
    *((_QWORD *)this + 32) = 0;
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v8, v6);
  }
  v25 = 0;
  IPC::ScopedActiveMessageReceiveQueue<WebKit::LibWebRTCCodecsProxy,WTF::RefPtr<WebKit::LibWebRTCCodecsProxy,WTF::RawPtrTraits<WebKit::LibWebRTCCodecsProxy>,WTF::DefaultRefDerefTraits<WebKit::LibWebRTCCodecsProxy>>>::operator=((uint64_t *)this + 25, &v25);
  IPC::ScopedActiveMessageReceiveQueue<WebKit::LibWebRTCCodecsProxy,WTF::RefPtr<WebKit::LibWebRTCCodecsProxy,WTF::RawPtrTraits<WebKit::LibWebRTCCodecsProxy>,WTF::DefaultRefDerefTraits<WebKit::LibWebRTCCodecsProxy>>>::~ScopedActiveMessageReceiveQueue(&v25);
  v10 = (WebKit::RemoteCDMFactoryProxy *)*((_QWORD *)this + 34);
  if (v10)
    WebKit::RemoteCDMFactoryProxy::clear(v10, v9);
  v11 = (unsigned __int8 **)*((_QWORD *)this + 14);
  if (v11)
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v11 + 2);
    WebKit::RemoteMediaResourceManager::stopListeningForIPC((WebKit::RemoteMediaResourceManager *)v11);
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(v11[2], v12);
  }
  v13 = (unsigned int *)*((_QWORD *)this + 9);
  v14 = v13 + 28;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  WebKit::GPUProcess::removeGPUConnectionToWebProcess((WebKit::GPUProcess *)v13, this);
  if (v13)
  {
    do
    {
      v16 = __ldaxr(v14);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v14));
    if (!v17)
    {
      atomic_store(1u, v13 + 28);
      (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
    }
  }
}

uint64_t *IPC::ScopedActiveMessageReceiveQueue<WebKit::LibWebRTCCodecsProxy,WTF::RefPtr<WebKit::LibWebRTCCodecsProxy,WTF::RawPtrTraits<WebKit::LibWebRTCCodecsProxy>,WTF::DefaultRefDerefTraits<WebKit::LibWebRTCCodecsProxy>>>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a1 != a2)
  {
    if (*a1)
      IPC::ScopedActiveMessageReceiveQueue<WebKit::LibWebRTCCodecsProxy,WTF::RefPtr<WebKit::LibWebRTCCodecsProxy,WTF::RawPtrTraits<WebKit::LibWebRTCCodecsProxy>,WTF::DefaultRefDerefTraits<WebKit::LibWebRTCCodecsProxy>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::LibWebRTCCodecsProxy,WTF::RawPtrTraits<WebKit::LibWebRTCCodecsProxy>,WTF::DefaultRefDerefTraits<WebKit::LibWebRTCCodecsProxy>>>(a1);
    v4 = *a2;
    *a2 = 0;
    v5 = *a1;
    *a1 = v4;
    if (v5)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), a2);
  }
  return a1;
}

void WebKit::GPUProcess::removeGPUConnectionToWebProcess(WebKit::GPUProcess *this, WebKit::GPUConnectionToWebProcess *a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  _BYTE v7[12];
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *((_QWORD *)a2 + 10);
    *(_DWORD *)v7 = 134218240;
    *(_QWORD *)&v7[4] = this;
    v8 = 2048;
    v9 = v5;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - GPUProcess::removeGPUConnectionToWebProcess: processIdentifier=%llu", v7, 0x16u);
  }
  *(_QWORD *)v7 = *((_QWORD *)a2 + 10);
  v6 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)this + 15, v7);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::remove((unsigned __int8 *)this + 120, v6);
  WebKit::GPUProcess::tryExitIfUnusedAndUnderMemoryPressure(this);
}

void `non-virtual thunk to'WebKit::GPUConnectionToWebProcess::didClose(WebKit::GPUConnectionToWebProcess *this, IPC::Connection *a2)
{
  WebKit::GPUConnectionToWebProcess::didClose((WebKit::GPUConnectionToWebProcess *)((char *)this - 24), a2);
}

char *WebKit::GPUConnectionToWebProcess::createVisibilityPropagationContextForPage(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  NSObject *v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  unint64_t v18;
  char *v19;
  _DWORD *v20;
  void *v21;
  IPC::Encoder *v22;
  WTF *v23;
  void *v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int v33;
  id *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  char *result;
  WTF *v42;
  void *v43;
  unint64_t v44;
  size_t v45;
  void *v46;
  size_t v47;
  WebKit::LayerHostingContext *v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE buf[12];
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  int v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v49 = a3;
  v50 = a2;
  buf[0] = a4;
  buf[1] = 0;
  WebKit::LayerHostingContext::createForExternalHostingProcess(buf, (uint64_t *)&v48);
  v7 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
  {
    v8 = WebKit::LayerHostingContext::contextID((id *)v48);
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)&buf[4] = a2;
    v52 = 2048;
    v53 = a3;
    v54 = 1024;
    v55 = v8;
    _os_log_impl(&dword_196BCC000, v7, OS_LOG_TYPE_DEFAULT, "GPUConnectionToWebProcess::createVisibilityPropagationContextForPage: pageProxyID=%llu, webPageID=%llu, contextID=%u", buf, 0x1Cu);
  }
  v9 = *(_QWORD *)(a1 + 72);
  v10 = WebKit::LayerHostingContext::contextID((id *)v48);
  v12 = *(_QWORD *)(v9 + 16);
  v11 = v9 + 16;
  v13 = (*(uint64_t (**)(uint64_t))(v12 + 56))(v11);
  v14 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v14 = 56;
  *(_QWORD *)(v14 + 8) = v13;
  *(_QWORD *)(v14 + 528) = v14 + 16;
  *(_QWORD *)(v14 + 536) = v14 + 16;
  *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v14 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
  *(_QWORD *)buf = v14;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v14, &v50);
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v14, &v49);
  v15 = *(_QWORD *)(v14 + 544);
  v16 = (v15 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v17 = v16 + 4;
  v18 = *(_QWORD *)(v14 + 552);
  if (v18 < v16 + 4)
  {
    v44 = (2 * v18 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v45 = v44;
      v44 *= 2;
    }
    while (v45 < v17);
    v47 = v45;
    result = (char *)mmap(0, v45, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v19 = result;
    memcpy(result, *(const void **)(v14 + 528), *(_QWORD *)(v14 + 544));
    v46 = *(void **)(v14 + 528);
    if (v46 != (void *)(v14 + 16))
      munmap(v46, *(_QWORD *)(v14 + 552));
    *(_QWORD *)(v14 + 528) = v19;
    *(_QWORD *)(v14 + 552) = v47;
    v15 = *(_QWORD *)(v14 + 544);
  }
  else
  {
    v19 = *(char **)(v14 + 528);
  }
  bzero(&v19[v15], v16 - v15);
  *(_QWORD *)(v14 + 544) = v17;
  v20 = (_DWORD *)(*(_QWORD *)(v14 + 528) + v16);
  *(_QWORD *)(v14 + 536) = v20 + 1;
  *v20 = v10;
  (*(void (**)(uint64_t, _BYTE *, _QWORD))(*(_QWORD *)v11 + 32))(v11, buf, 0);
  v22 = *(IPC::Encoder **)buf;
  *(_QWORD *)buf = 0;
  if (v22)
  {
    IPC::Encoder::~Encoder(v22, v21);
    WTF::fastFree(v23, v24);
  }
  v25 = (uint64_t *)(a1 + 320);
  v26 = *(_QWORD *)(a1 + 320);
  if (v26
    || (WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::LayerHostingContext>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::LayerHostingContext>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::LayerHostingContext>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::LayerHostingContext>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand((uint64_t *)(a1 + 320)),
        (v26 = *v25) != 0))
  {
    v27 = *(_DWORD *)(v26 - 8);
  }
  else
  {
    v27 = 0;
  }
  v28 = WTF::PairHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::hash(a2, a3) & v27;
  v29 = (uint64_t *)(v26 + 24 * v28);
  v30 = *v29;
  v31 = v29[1];
  if (*(_OWORD *)v29 != 0)
  {
    v32 = 0;
    v33 = 1;
    while (v30 != a2 || v31 != a3)
    {
      if (v30 == -1)
        v32 = v29;
      v28 = (v28 + v33) & v27;
      v29 = (uint64_t *)(v26 + 24 * v28);
      v30 = *v29;
      v31 = v29[1];
      ++v33;
      if (*(_OWORD *)v29 == 0)
      {
        if (v32)
        {
          *v32 = 0;
          v32[1] = 0;
          v32[2] = 0;
          --*(_DWORD *)(*v25 - 16);
          v29 = v32;
        }
        goto LABEL_19;
      }
    }
    goto LABEL_28;
  }
LABEL_19:
  *v29 = a2;
  v29[1] = a3;
  v34 = (id *)v48;
  v48 = 0;
  std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100]((id **)v29 + 2, v34);
  v35 = *v25;
  if (*v25)
    v36 = *(_DWORD *)(v35 - 12) + 1;
  else
    v36 = 1;
  *(_DWORD *)(v35 - 12) = v36;
  v37 = *v25;
  if (*v25)
    v38 = *(_DWORD *)(v37 - 12);
  else
    v38 = 0;
  v39 = (*(_DWORD *)(v37 - 16) + v38);
  v40 = *(unsigned int *)(v37 - 4);
  if (v40 <= 0x400)
  {
    if (3 * v40 > 4 * v39)
      goto LABEL_28;
    goto LABEL_27;
  }
  if (v40 <= 2 * v39)
LABEL_27:
    WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::LayerHostingContext>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::LayerHostingContext>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::LayerHostingContext>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::LayerHostingContext>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(v25);
LABEL_28:
  result = (char *)v48;
  v48 = 0;
  if (result)
  {
    WebKit::LayerHostingContext::~LayerHostingContext((id *)result);
    return (char *)WTF::fastFree(v42, v43);
  }
  return result;
}

void WebKit::GPUConnectionToWebProcess::destroyVisibilityPropagationContextForPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  id **v10;
  id *v11;
  id *v12;
  int v14;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v6 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
  {
    v23 = 134218240;
    v24 = a2;
    v25 = 2048;
    v26 = a3;
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "GPUConnectionToWebProcess::destroyVisibilityPropagationContextForPage: pageProxyID=%llu, webPageID=%llu", (uint8_t *)&v23, 0x16u);
  }
  v7 = *(_QWORD *)(a1 + 320);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 - 8);
    v9 = WTF::PairHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::hash(a2, a3) & v8;
    v10 = (id **)(v7 + 24 * v9);
    v11 = *v10;
    v12 = v10[1];
    if (*v10 != (id *)a2 || v12 != (id *)a3)
    {
      v14 = 1;
      while ((unint64_t)v11 | (unint64_t)v12)
      {
        v9 = (v9 + v14) & v8;
        v10 = (id **)(v7 + 24 * v9);
        v11 = *v10;
        v12 = v10[1];
        ++v14;
        if (*v10 == (id *)a2 && v12 == (id *)a3)
          goto LABEL_17;
      }
      v10 = (id **)(v7 + 24 * *(unsigned int *)(v7 - 4));
    }
LABEL_17:
    if ((id **)(v7 + 24 * *(unsigned int *)(v7 - 4)) != v10)
    {
      v16 = (uint64_t *)(a1 + 320);
      *v10 = (id *)-1;
      std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100](v10 + 2, 0);
      ++*(_DWORD *)(*v16 - 16);
      v17 = *v16;
      v18 = *v16 ? *(_DWORD *)(v17 - 12) - 1 : -1;
      *(_DWORD *)(v17 - 12) = v18;
      v19 = *v16;
      if (*v16)
      {
        v20 = 6 * *(_DWORD *)(v19 - 12);
        v21 = *(_DWORD *)(v19 - 4);
        if (v20 < v21 && v21 >= 9)
          WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::LayerHostingContext>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::LayerHostingContext>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::LayerHostingContext>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::LayerHostingContext>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(v16, v21 >> 1);
      }
    }
  }
}

_BYTE *WebKit::GPUConnectionToWebProcess::configureLoggingChannel(int a1, WebCore *this, char a3, char a4)
{
  _BYTE *LogChannel;
  const WTF::String *v8;
  _BYTE *result;

  LogChannel = (_BYTE *)WebCore::getLogChannel(this, this);
  if (LogChannel)
  {
    *LogChannel = a3;
    LogChannel[16] = a4;
  }
  result = (_BYTE *)WebCore::getLogChannel(this, v8);
  if (result)
  {
    *result = a3;
    result[16] = a4;
  }
  return result;
}

unsigned __int8 **WebKit::GPUConnectionToWebProcess::didReceiveInvalidMessage(WebKit::GPUConnectionToWebProcess *a1, uint64_t a2, unsigned int a3)
{
  NSObject *v5;
  unsigned int v7;
  char *v8;
  uint64_t v9;
  int v10;
  char *v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = off_1ECE71C40;
  if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
  {
    if (a3 >= 0xE98)
      v7 = 3736;
    else
      v7 = a3;
    v8 = (&IPC::Detail::messageDescriptions)[3 * v7];
    v9 = *((_QWORD *)a1 + 10);
    v10 = 136446466;
    v11 = v8;
    v12 = 2048;
    v13 = v9;
    _os_log_fault_impl(&dword_196BCC000, v5, OS_LOG_TYPE_FAULT, "Received an invalid message '%{public}s' from WebContent process %llu, requesting for it to be terminated.", (uint8_t *)&v10, 0x16u);
  }
  return WebKit::GPUConnectionToWebProcess::terminateWebProcess(a1);
}

unsigned __int8 **WebKit::GPUConnectionToWebProcess::terminateWebProcess(WebKit::GPUConnectionToWebProcess *this)
{
  uint64_t v2;
  unsigned __int8 **v3;
  uint64_t *v5;

  v2 = *((_QWORD *)this + 9);
  v3 = *(unsigned __int8 ***)(v2 + 32);
  if (v3)
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(*(unsigned __int8 ***)(v2 + 32));
    v5 = (uint64_t *)((char *)this + 80);
    IPC::Connection::send<Messages::GPUProcessProxy::TerminateWebProcess>((uint64_t)v3, &v5, 0, 0, 0);
    return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v3);
  }
  else
  {
    v5 = (uint64_t *)((char *)this + 80);
    return (unsigned __int8 **)IPC::Connection::send<Messages::GPUProcessProxy::TerminateWebProcess>(0, &v5, 0, 0, 0);
  }
}

unsigned __int8 **`non-virtual thunk to'WebKit::GPUConnectionToWebProcess::didReceiveInvalidMessage(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return WebKit::GPUConnectionToWebProcess::didReceiveInvalidMessage((WebKit::GPUConnectionToWebProcess *)(a1 - 24), a2, a3);
}

uint64_t IPC::Connection::send<Messages::GPUProcessProxy::TerminateWebProcess>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 61;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v10, *a2);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

uint64_t WebKit::GPUConnectionToWebProcess::remoteMediaResourceManager(WebKit::GPUConnectionToWebProcess *this)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  IPC::Connection *v7;

  v1 = *((_QWORD *)this + 14);
  if (!v1)
  {
    v1 = WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)v1 = &off_1E34B0558;
    *(_QWORD *)(v1 + 8) = 0;
    v3 = WTF::fastMalloc((WTF *)0x20);
    *(_BYTE *)v3 = 0;
    *(_OWORD *)(v3 + 8) = xmmword_1978CE9C0;
    *(_QWORD *)(v3 + 24) = v1;
    *(_QWORD *)(v1 + 16) = v3;
    *(_QWORD *)v1 = off_1E34BA578;
    *(_BYTE *)(v1 + 24) = 0;
    *(_QWORD *)(v1 + 32) = 0;
    *(_QWORD *)(v1 + 40) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v7, (uint64_t **)this + 6);
    WebKit::RemoteMediaResourceManager::initializeConnection((WebKit::RemoteMediaResourceManager *)v1, (unsigned __int8 **)v7);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v7);
    v5 = *((_QWORD *)this + 14);
    *((_QWORD *)this + 14) = v1;
    if (v5)
    {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), v4);
      return *((_QWORD *)this + 14);
    }
  }
  return v1;
}

_QWORD *WebKit::GPUConnectionToWebProcess::mediaRecorderManager(WebKit::GPUConnectionToWebProcess *this)
{
  _QWORD *v1;
  WTF::ThreadSafeWeakPtrControlBlock *v3;
  uint64_t v4;

  v1 = (_QWORD *)*((_QWORD *)this + 21);
  if (!v1)
  {
    v1 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
    *v1 = off_1E34BBBF0;
    v1[1] = 0;
    v3 = (WTF::ThreadSafeWeakPtrControlBlock *)*((_QWORD *)this + 2);
    if (v3)
      v3 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v3);
    v1[2] = v3;
    v1[3] = this;
    v1[4] = 0;
    v4 = *((_QWORD *)this + 21);
    *((_QWORD *)this + 21) = v1;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      return (_QWORD *)*((_QWORD *)this + 21);
    }
  }
  return v1;
}

uint64_t WebKit::GPUConnectionToWebProcess::cdmFactoryProxy(WebKit::GPUConnectionToWebProcess *this)
{
  uint64_t result;
  uint64_t v3;
  WTF::ThreadSafeWeakPtrControlBlock *v4;

  result = *((_QWORD *)this + 34);
  if (!result)
  {
    v3 = WTF::fastMalloc((WTF *)0x48);
    *(_QWORD *)v3 = off_1E34B9B00;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = &unk_1E34B9B40;
    v4 = (WTF::ThreadSafeWeakPtrControlBlock *)*((_QWORD *)this + 2);
    if (v4)
      v4 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v4);
    *(_QWORD *)(v3 + 24) = v4;
    *(_QWORD *)(v3 + 32) = this;
    *(_OWORD *)(v3 + 40) = 0u;
    *(_OWORD *)(v3 + 56) = 0u;
    std::unique_ptr<WebKit::RemoteCDMFactoryProxy>::reset[abi:sn180100]((WebKit::RemoteCDMFactoryProxy **)this + 34, (WebKit::RemoteCDMFactoryProxy *)v3);
    return *((_QWORD *)this + 34);
  }
  return result;
}

WebKit::RemoteImageDecoderAVFProxy *WebKit::GPUConnectionToWebProcess::imageDecoderAVFProxy(WebKit::GPUConnectionToWebProcess *this)
{
  WebKit::RemoteImageDecoderAVFProxy *result;
  WebKit::RemoteImageDecoderAVFProxy *v3;
  uint64_t v4;

  result = (WebKit::RemoteImageDecoderAVFProxy *)*((_QWORD *)this + 38);
  if (!result)
  {
    v3 = (WebKit::RemoteImageDecoderAVFProxy *)WTF::fastMalloc((WTF *)0x30);
    result = WebKit::RemoteImageDecoderAVFProxy::RemoteImageDecoderAVFProxy(v3, this);
    v4 = *((_QWORD *)this + 38);
    *((_QWORD *)this + 38) = result;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      return (WebKit::RemoteImageDecoderAVFProxy *)*((_QWORD *)this + 38);
    }
  }
  return result;
}

unsigned int *WebKit::GPUConnectionToWebProcess::createRenderingBackend(uint64_t a1, uint64_t a2, WTF::MachSendRight *a3)
{
  IPC::StreamServerConnection *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *result;
  IPC::StreamServerConnection *v8;
  NSObject *v9;
  NSObject *v10;
  IPC::StreamServerConnection *v11;
  uint64_t v12;
  __int128 buf;
  uint64_t *v14;
  _BYTE v15[12];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v12 = a2;
  IPC::StreamServerConnection::tryCreate(a3, (uint64_t *)&v11);
  v4 = v11;
  if (v11)
  {
    v5 = (unsigned int *)((char *)v11 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    *(_QWORD *)&buf = v4;
    *((_QWORD *)&buf + 1) = a1;
    v14 = &v12;
    result = (unsigned int *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::HashTableTraits>::ensure<WebKit::GPUConnectionToWebProcess::createRenderingBackend(WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::StreamServerConnectionHandle &&)::$_0>((uint64_t)v15, (uint64_t *)(a1 + 248), &v12, (uint64_t)&buf);
    if ((_QWORD)buf)
      result = WTF::ThreadSafeRefCounted<IPC::StreamServerConnection,(WTF::DestructionThread)0>::deref((unsigned int *)(buf + 8));
    v8 = v11;
    if (!v16)
    {
      IPC::StreamServerConnection::invalidate((uint64_t **)v11);
      v9 = off_1ECE71C40;
      if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = "void WebKit::GPUConnectionToWebProcess::createRenderingBackend(RenderingBackendI"
                                        "dentifier, IPC::StreamServerConnection::Handle &&)";
        _os_log_fault_impl(&dword_196BCC000, v9, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/GPUConnectionToWebProcess.cpp 675: Invalid message dispatched %s", (uint8_t *)&buf, 0xCu);
      }
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&buf, (uint64_t **)(a1 + 48));
      *(_BYTE *)(buf + 98) = 1;
      result = (unsigned int *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&buf);
    }
    if (v8)
      return WTF::ThreadSafeRefCounted<IPC::StreamServerConnection,(WTF::DestructionThread)0>::deref((unsigned int *)v8 + 2);
  }
  else
  {
    v10 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v15 = 136315138;
      *(_QWORD *)&v15[4] = "void WebKit::GPUConnectionToWebProcess::createRenderingBackend(RenderingBackendIdentifier, IP"
                           "C::StreamServerConnection::Handle &&)";
      _os_log_fault_impl(&dword_196BCC000, v10, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/GPUConnectionToWebProcess.cpp 668: Invalid message dispatched %s", v15, 0xCu);
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v15, (uint64_t **)(a1 + 48));
    *(_BYTE *)(*(_QWORD *)v15 + 98) = 1;
    return (unsigned int *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v15);
  }
  return result;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::HashTableTraits>::ensure<WebKit::GPUConnectionToWebProcess::createRenderingBackend(WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::StreamServerConnectionHandle &&)::$_0>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  uint64_t result;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  result = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a3);
  v11 = result & v9;
  v12 = (_QWORD *)(v8 + 16 * (result & v9));
  v13 = *v12;
  v14 = *a3;
  if (*v12)
  {
    v23 = 0;
    v24 = 1;
    do
    {
      if (v13 == v14)
      {
        v25 = *a2;
        if (*a2)
          v26 = *(unsigned int *)(v25 - 4);
        else
          v26 = 0;
        v22 = 0;
        v21 = v25 + 16 * v26;
        goto LABEL_12;
      }
      if (v13 == -1)
        v23 = v12;
      v11 = (v11 + v24) & v9;
      v12 = (_QWORD *)(v8 + 16 * v11);
      v13 = *v12;
      ++v24;
    }
    while (*v12);
    if (v23)
    {
      *v23 = 0;
      v23[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v14 = *a3;
      v12 = v23;
    }
  }
  result = (uint64_t)WTF::HashMapEnsureTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::translate<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::GPUConnectionToWebProcess::createRenderingBackend(WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::StreamServerConnectionHandle &&)::$_0>(v12, v14, a4);
  v15 = *a2;
  if (*a2)
    v16 = *(_DWORD *)(v15 - 12) + 1;
  else
    v16 = 1;
  *(_DWORD *)(v15 - 12) = v16;
  v17 = *a2;
  if (*a2)
    v18 = *(_DWORD *)(v17 - 12);
  else
    v18 = 0;
  v19 = (*(_DWORD *)(v17 - 16) + v18);
  v20 = *(unsigned int *)(v17 - 4);
  if (v20 > 0x400)
  {
    if (v20 > 2 * v19)
      goto LABEL_11;
LABEL_24:
    result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(a2, (uint64_t)v12);
    v12 = (_QWORD *)result;
    v17 = *a2;
    if (*a2)
      v20 = *(unsigned int *)(v17 - 4);
    else
      v20 = 0;
    goto LABEL_11;
  }
  if (3 * v20 <= 4 * v19)
    goto LABEL_24;
LABEL_11:
  v21 = v17 + 16 * v20;
  v22 = 1;
LABEL_12:
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = v21;
  *(_BYTE *)(a1 + 16) = v22;
  return result;
}

void WebKit::GPUConnectionToWebProcess::releaseRenderingBackend(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;

  v12 = a2;
  v3 = (uint64_t *)(a1 + 248);
  v4 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 248), &v12);
  v5 = *(_QWORD *)(a1 + 248);
  if (v5)
  {
    v6 = v5 + 16 * *(unsigned int *)(v5 - 4);
    if (v6 == v4)
      goto LABEL_7;
  }
  else
  {
    if (!v4)
      goto LABEL_7;
    v6 = 0;
  }
  if (v6 != v4)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(v3, v4);
LABEL_7:
  v7 = *(unsigned int **)(a1 + 72);
  v8 = v7 + 28;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  WebKit::GPUProcess::tryExitIfUnusedAndUnderMemoryPressure((WebKit::GPUProcess *)v7);
  if (v7)
  {
    do
    {
      v10 = __ldaxr(v8);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v8));
    if (!v11)
    {
      atomic_store(1u, v7 + 28);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
}

void WebKit::GPUProcess::tryExitIfUnusedAndUnderMemoryPressure(WebKit::GPUProcess *this)
{
  uint64_t v2;
  int v3;

  v2 = WTF::MemoryPressureHandler::singleton(this);
  v3 = atomic_load((unsigned __int8 *)(v2 + 4));
  if (v3 == 2 || *(_BYTE *)(v2 + 7) != 0)
    WebKit::GPUProcess::tryExitIfUnused(this);
}

void WebKit::GPUConnectionToWebProcess::createGraphicsContextGL(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, WTF::MachSendRight *a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  NSObject *v42;
  NSObject *v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  unsigned int *v49;
  _BYTE buf[24];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v45 = a5;
  v46 = a3;
  v47 = a4;
  if (*(_BYTE *)(a1 + 345))
  {
    v42 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::GPUConnectionToWebProcess::createGraphicsContextGL(GraphicsContextGLIdentifier, "
                           "WebCore::GraphicsContextGLAttributes, RenderingBackendIdentifier, IPC::StreamServerConnection::Handle &&)";
      _os_log_fault_impl(&dword_196BCC000, v42, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/GPUConnectionToWebProcess.cpp 689: Invalid message dispatched %s", buf, 0xCu);
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)(a1 + 48));
    *(_BYTE *)(*(_QWORD *)buf + 98) = 1;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
  }
  else
  {
    v9 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 248), &v45);
    v10 = *(_QWORD *)(a1 + 248);
    if (v10)
      v10 += 16 * *(unsigned int *)(v10 - 4);
    if (v10 != v9)
    {
      v11 = *(_QWORD *)(v9 + 8);
      if (v11)
      {
        v12 = (unsigned int *)(v11 + 16);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 + 1, v12));
      }
      IPC::StreamServerConnection::tryCreate(a6, (uint64_t *)&v44);
      v14 = v44;
      if (!v44)
      {
        v43 = off_1ECE71C40;
        if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = "void WebKit::GPUConnectionToWebProcess::createGraphicsContextGL(GraphicsContextGLIdentifi"
                               "er, WebCore::GraphicsContextGLAttributes, RenderingBackendIdentifier, IPC::StreamServerCo"
                               "nnection::Handle &&)";
          _os_log_fault_impl(&dword_196BCC000, v43, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/GPUConnectionToWebProcess.cpp 701: Invalid message dispatched %s", buf, 0xCu);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)(a1 + 48));
        *(_BYTE *)(*(_QWORD *)buf + 98) = 1;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
        goto LABEL_38;
      }
      v15 = (uint64_t *)(a1 + 256);
      v44 = 0;
      v16 = *(_QWORD *)(a1 + 256);
      if (v16
        || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(a1 + 256)),
            (v16 = *v15) != 0))
      {
        v17 = *(_DWORD *)(v16 - 8);
      }
      else
      {
        v17 = 0;
      }
      v18 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
      v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
      v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
      v21 = v17 & ((v20 >> 31) ^ v20);
      v22 = (uint64_t *)(v16 + 16 * v21);
      v23 = *v22;
      if (*v22)
      {
        v24 = 0;
        v25 = 1;
        do
        {
          if (v23 == a2)
          {
            WTF::ThreadSafeRefCounted<IPC::StreamServerConnection,(WTF::DestructionThread)0>::deref(v14 + 2);
            goto LABEL_38;
          }
          if (v23 == -1)
            v24 = v22;
          v21 = (v21 + v25) & v17;
          v22 = (uint64_t *)(v16 + 16 * v21);
          v23 = *v22;
          ++v25;
        }
        while (*v22);
        if (v24)
        {
          *v24 = 0;
          v24[1] = 0;
          --*(_DWORD *)(*v15 - 16);
          v22 = v24;
        }
      }
      *v22 = a2;
      v26 = v22 + 1;
      v49 = v14;
      WebKit::RemoteGraphicsContextGL::create((_QWORD *)a1, &v46, a2, v11, (uint64_t *)&v49, (uint64_t *)buf);
      v27 = *(_QWORD *)buf;
      v48 = *(_QWORD *)buf;
      WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(&v49);
      if (v22 + 1 != &v48)
      {
        if (*v26)
        {
          IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>(v22 + 1);
          v28 = *v26;
          v29 = v48;
          v48 = 0;
          *v26 = v29;
          if (v28)
          {
            v30 = (unsigned int *)(v28 + 16);
            do
            {
              v31 = __ldaxr(v30);
              v32 = v31 - 1;
            }
            while (__stlxr(v32, v30));
            if (!v32)
            {
              atomic_store(1u, (unsigned int *)(v28 + 16));
              (*(void (**)(uint64_t))(*(_QWORD *)(v28 + 8) + 8))(v28 + 8);
            }
          }
        }
        else
        {
          v48 = 0;
          *v26 = v27;
        }
      }
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>::~ScopedActiveMessageReceiveQueue(&v48);
      v33 = *v15;
      if (*v15)
        v34 = *(_DWORD *)(v33 - 12) + 1;
      else
        v34 = 1;
      *(_DWORD *)(v33 - 12) = v34;
      v35 = *v15;
      if (*v15)
        v36 = *(_DWORD *)(v35 - 12);
      else
        v36 = 0;
      v37 = (*(_DWORD *)(v35 - 16) + v36);
      v38 = *(unsigned int *)(v35 - 4);
      if (v38 > 0x400)
      {
        if (v38 > 2 * v37)
          goto LABEL_38;
      }
      else if (3 * v38 > 4 * v37)
      {
LABEL_38:
        if (v44)
          WTF::ThreadSafeRefCounted<IPC::StreamServerConnection,(WTF::DestructionThread)0>::deref(v44 + 2);
        if (v11)
        {
          v39 = (unsigned int *)(v11 + 16);
          do
          {
            v40 = __ldaxr(v39);
            v41 = v40 - 1;
          }
          while (__stlxr(v41, v39));
          if (!v41)
          {
            atomic_store(1u, (unsigned int *)(v11 + 16));
            (*(void (**)(uint64_t))(*(_QWORD *)(v11 + 8) + 8))(v11 + 8);
          }
        }
        return;
      }
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(v15);
      goto LABEL_38;
    }
  }
}

void WebKit::GPUConnectionToWebProcess::releaseGraphicsContextGL(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  NSObject *v22;
  _BYTE v23[24];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 345))
  {
    v22 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v23 = 136315138;
      *(_QWORD *)&v23[4] = "void WebKit::GPUConnectionToWebProcess::releaseGraphicsContextGL(GraphicsContextGLIdentifier)";
      _os_log_fault_impl(&dword_196BCC000, v22, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/GPUConnectionToWebProcess.cpp 711: Invalid message dispatched %s", v23, 0xCu);
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v23, (uint64_t **)(a1 + 48));
    *(_BYTE *)(*(_QWORD *)v23 + 98) = 1;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v23);
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 256);
    if (!v3)
      goto LABEL_21;
    v4 = *(_DWORD *)(v3 - 8);
    v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(_QWORD *)(v3 + 16 * v8);
    if (v9 != a2)
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(_QWORD *)(v3 + 16 * v8);
        ++v10;
        if (v9 == a2)
          goto LABEL_9;
      }
      v8 = *(unsigned int *)(v3 - 4);
    }
LABEL_9:
    if (v8 != *(_DWORD *)(v3 - 4))
    {
      v11 = (uint64_t *)(a1 + 256);
      v12 = (_QWORD *)(v3 + 16 * v8);
      *v12 = -1;
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>::~ScopedActiveMessageReceiveQueue(v12 + 1);
      ++*(_DWORD *)(*v11 - 16);
      v13 = *v11;
      v14 = *v11 ? *(_DWORD *)(v13 - 12) - 1 : -1;
      *(_DWORD *)(v13 - 12) = v14;
      v3 = *v11;
      if (!*v11)
        goto LABEL_21;
      v15 = *(_DWORD *)(v3 - 4);
      if (6 * *(_DWORD *)(v3 - 12) < v15 && v15 >= 9)
      {
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash((uint64_t *)(a1 + 256), v15 >> 1);
        v3 = *v11;
        if (!*v11)
          goto LABEL_21;
      }
    }
    if (!*(_DWORD *)(v3 - 12))
    {
LABEL_21:
      v17 = *(unsigned int **)(a1 + 72);
      v18 = v17 + 28;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
      WebKit::GPUProcess::tryExitIfUnusedAndUnderMemoryPressure((WebKit::GPUProcess *)v17);
      if (v17)
      {
        do
        {
          v20 = __ldaxr(v18);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v18));
        if (!v21)
        {
          atomic_store(1u, v17 + 28);
          (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
        }
      }
    }
  }
}

unsigned __int8 *WebKit::GPUConnectionToWebProcess::performWithMediaPlayerOnMainThread(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unsigned __int8 *v11;

  WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>::Ref(&v9, a1);
  *(_QWORD *)&v10 = a2;
  *((_QWORD *)&v10 + 1) = a3;
  v5 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v5 = &off_1E34B8000;
  v6 = v9;
  v9 = 0;
  *(_QWORD *)(v5 + 8) = v6;
  *(_OWORD *)(v5 + 16) = v10;
  v11 = (unsigned __int8 *)v5;
  WTF::callOnMainRunLoopAndWait();
  result = v11;
  v11 = 0;
  if (result)
    result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
  v8 = v9;
  v9 = 0;
  if (v8)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v8 + 16));
  return result;
}

unsigned __int8 ***WebKit::GPUConnectionToWebProcess::createGPU(uint64_t a1, uint64_t a2, uint64_t a3, WTF::MachSendRight *a4)
{
  unsigned __int8 ***result;
  unsigned __int8 ***v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  unsigned int **v24;
  WebKit::RemoteGPU *v25;
  WebKit::RemoteGPU *v26;
  unsigned int *v27;
  WebKit::RemoteGPU *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  NSObject *v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  WebKit::RemoteGPU *v45;
  _BYTE buf[24];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v44 = a3;
  if (*(_BYTE *)(a1 + 361))
  {
    result = (unsigned __int8 ***)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 248), &v44);
    v8 = *(unsigned __int8 ****)(a1 + 248);
    if (v8)
      v8 += 2 * *((unsigned int *)v8 - 1);
    if (v8 != result)
    {
      v9 = (uint64_t)result[1];
      if (v9)
      {
        v10 = (unsigned int *)(v9 + 16);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 + 1, v10));
      }
      IPC::StreamServerConnection::tryCreate(a4, &v43);
      v12 = v43;
      if (!v43)
      {
        v42 = off_1ECE71C40;
        if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = "void WebKit::GPUConnectionToWebProcess::createGPU(WebGPUIdentifier, RenderingBackendIdent"
                               "ifier, IPC::StreamServerConnection::Handle &&)";
          _os_log_fault_impl(&dword_196BCC000, v42, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/GPUConnectionToWebProcess.cpp 761: Invalid message dispatched %s", buf, 0xCu);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)(a1 + 48));
        *(_BYTE *)(*(_QWORD *)buf + 98) = 1;
        result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
        goto LABEL_38;
      }
      v13 = (uint64_t *)(a1 + 264);
      v43 = 0;
      v14 = *(_QWORD *)(a1 + 264);
      if (v14
        || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(a1 + 264), 0), (v14 = *v13) != 0))
      {
        v15 = *(_DWORD *)(v14 - 8);
      }
      else
      {
        v15 = 0;
      }
      v16 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
      v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
      v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
      v19 = v15 & ((v18 >> 31) ^ v18);
      v20 = (uint64_t *)(v14 + 16 * v19);
      v21 = *v20;
      if (*v20)
      {
        v22 = 0;
        v23 = 1;
        do
        {
          if (v21 == a2)
          {
            result = (unsigned __int8 ***)WTF::ThreadSafeRefCounted<IPC::StreamServerConnection,(WTF::DestructionThread)0>::deref((unsigned int *)(v12 + 8));
            goto LABEL_38;
          }
          if (v21 == -1)
            v22 = v20;
          v19 = (v19 + v23) & v15;
          v20 = (uint64_t *)(v14 + 16 * v19);
          v21 = *v20;
          ++v23;
        }
        while (*v20);
        if (v22)
        {
          *v22 = 0;
          v22[1] = 0;
          --*(_DWORD *)(*v13 - 16);
          v20 = v22;
        }
      }
      *v20 = a2;
      v24 = (unsigned int **)(v20 + 1);
      *(_QWORD *)buf = v12;
      v25 = (WebKit::RemoteGPU *)WTF::fastMalloc((WTF *)0x58);
      v26 = (WebKit::RemoteGPU *)WebKit::RemoteGPU::RemoteGPU((uint64_t)v25, a2, a1, v9, (uint64_t *)buf);
      WebKit::RemoteGPU::initialize(v26);
      v45 = v25;
      WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)buf);
      if (v20 + 1 != (uint64_t *)&v45)
      {
        if (*v24)
        {
          IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>((WebKit::RemoteGPU **)v20 + 1);
          v27 = *v24;
          v28 = v45;
          v45 = 0;
          *v24 = (unsigned int *)v28;
          if (v27)
          {
            v29 = v27 + 2;
            do
            {
              v30 = __ldaxr(v29);
              v31 = v30 - 1;
            }
            while (__stlxr(v31, v29));
            if (!v31)
            {
              atomic_store(1u, v27 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 8))(v27);
            }
          }
        }
        else
        {
          v45 = 0;
          *v24 = (unsigned int *)v25;
        }
      }
      result = (unsigned __int8 ***)IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>::~ScopedActiveMessageReceiveQueue(&v45);
      v32 = *v13;
      if (*v13)
        v33 = *(_DWORD *)(v32 - 12) + 1;
      else
        v33 = 1;
      *(_DWORD *)(v32 - 12) = v33;
      v34 = *v13;
      if (*v13)
        v35 = *(_DWORD *)(v34 - 12);
      else
        v35 = 0;
      v36 = (*(_DWORD *)(v34 - 16) + v35);
      v37 = *(unsigned int *)(v34 - 4);
      if (v37 > 0x400)
      {
        if (v37 > 2 * v36)
          goto LABEL_38;
      }
      else if (3 * v37 > 4 * v36)
      {
LABEL_38:
        if (v43)
          result = (unsigned __int8 ***)WTF::ThreadSafeRefCounted<IPC::StreamServerConnection,(WTF::DestructionThread)0>::deref((unsigned int *)(v43 + 8));
        if (v9)
        {
          v38 = (unsigned int *)(v9 + 16);
          do
          {
            v39 = __ldaxr(v38);
            v40 = v39 - 1;
          }
          while (__stlxr(v40, v38));
          if (!v40)
          {
            atomic_store(1u, (unsigned int *)(v9 + 16));
            return (unsigned __int8 ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v9 + 8) + 8))(v9 + 8);
          }
        }
        return result;
      }
      result = (unsigned __int8 ***)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(a1 + 264), v20);
      goto LABEL_38;
    }
  }
  else
  {
    v41 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::GPUConnectionToWebProcess::createGPU(WebGPUIdentifier, RenderingBackendIdentifie"
                           "r, IPC::StreamServerConnection::Handle &&)";
      _os_log_fault_impl(&dword_196BCC000, v41, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/GPUConnectionToWebProcess.cpp 749: Invalid message dispatched %s", buf, 0xCu);
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)(a1 + 48));
    *(_BYTE *)(*(_QWORD *)buf + 98) = 1;
    return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
  }
  return result;
}

uint64_t WebKit::GPUConnectionToWebProcess::releaseGPU(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  v12 = a2;
  v3 = (uint64_t *)(a1 + 264);
  result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 264), &v12);
  v5 = *(_QWORD *)(a1 + 264);
  if (v5)
  {
    v6 = v5 + 16 * *(unsigned int *)(v5 - 4);
    if (v6 == result)
      goto LABEL_9;
  }
  else
  {
    if (!result)
      goto LABEL_10;
    v6 = 0;
  }
  if (v6 != result)
  {
    result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(v3, result);
    v5 = *v3;
  }
  if (v5)
  {
LABEL_9:
    if (*(_DWORD *)(v5 - 12))
      return result;
  }
LABEL_10:
  v7 = *(_QWORD *)(a1 + 72);
  v8 = (unsigned int *)(v7 + 112);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = &off_1E34B8028;
  v10[1] = v7;
  v11 = v10;
  WTF::ensureOnMainRunLoop();
  result = (uint64_t)v11;
  if (v11)
    return (*(uint64_t (**)(_QWORD *))(*v11 + 8))(v11);
  return result;
}

uint64_t WebKit::GPUConnectionToWebProcess::clearNowPlayingInfo(WebKit::GPUConnectionToWebProcess *this)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t result;
  unsigned int v5;
  unsigned int v6;

  *((_BYTE *)this + 344) = 0;
  v1 = (unsigned int *)*((_QWORD *)this + 9);
  v2 = v1 + 28;
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  WebKit::GPUProcess::nowPlayingManager((WebKit::GPUProcess *)v1);
  result = WebCore::NowPlayingManager::removeClient();
  if (v1)
  {
    do
    {
      v5 = __ldaxr(v2);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v2));
    if (!v6)
    {
      atomic_store(1u, v1 + 28);
      return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v1 + 8))(v1);
    }
  }
  return result;
}

uint64_t WebKit::GPUProcess::nowPlayingManager(WebKit::GPUProcess *this)
{
  uint64_t result;
  WebCore::NowPlayingManager *v3;
  uint64_t v4;

  result = *((_QWORD *)this + 32);
  if (!result)
  {
    v3 = (WebCore::NowPlayingManager *)WTF::fastMalloc((WTF *)0xB0);
    result = WebCore::NowPlayingManager::NowPlayingManager(v3);
    v4 = *((_QWORD *)this + 32);
    *((_QWORD *)this + 32) = result;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      return *((_QWORD *)this + 32);
    }
  }
  return result;
}

uint64_t WebKit::GPUConnectionToWebProcess::setNowPlayingInfo(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t result;
  unsigned int v6;
  unsigned int v7;

  *(_BYTE *)(a1 + 344) = 1;
  v2 = *(unsigned int **)(a1 + 72);
  v3 = v2 + 28;
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  WebKit::GPUProcess::nowPlayingManager((WebKit::GPUProcess *)v2);
  WebCore::NowPlayingManager::addClient();
  WebKit::GPUProcess::nowPlayingManager((WebKit::GPUProcess *)v2);
  WebCore::NowPlayingManager::setNowPlayingInfo();
  result = WebKit::GPUConnectionToWebProcess::updateSupportedRemoteCommands(a1);
  if (v2)
  {
    do
    {
      v6 = __ldaxr(v3);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v3));
    if (!v7)
    {
      atomic_store(1u, v2 + 28);
      return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return result;
}

uint64_t WebKit::GPUConnectionToWebProcess::updateSupportedRemoteCommands(uint64_t this)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  WebCore::NowPlayingManager *v4;
  unsigned int v5;
  unsigned int v6;

  if (*(_BYTE *)(this + 344))
  {
    if (*(_QWORD *)(this + 336))
    {
      v1 = *(unsigned int **)(this + 72);
      v2 = v1 + 28;
      do
        v3 = __ldaxr(v2);
      while (__stlxr(v3 + 1, v2));
      v4 = (WebCore::NowPlayingManager *)WebKit::GPUProcess::nowPlayingManager((WebKit::GPUProcess *)v1);
      WebCore::NowPlayingManager::setSupportsSeeking(v4);
      WebKit::GPUProcess::nowPlayingManager((WebKit::GPUProcess *)v1);
      this = WebCore::NowPlayingManager::setSupportedRemoteCommands();
      if (v1)
      {
        do
        {
          v5 = __ldaxr(v2);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v2));
        if (!v6)
        {
          atomic_store(1u, v1 + 28);
          return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v1 + 8))(v1);
        }
      }
    }
  }
  return this;
}

unsigned __int8 ***WebKit::GPUConnectionToWebProcess::didReceiveRemoteControlCommand(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  unsigned __int8 ***v10;
  uint64_t v11;
  _BYTE *v12;
  void *v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  unsigned __int8 ***result;
  unint64_t v18;
  size_t v19;
  void *v20;
  uint64_t *v21;
  IPC::Encoder *v22;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v21, (uint64_t **)(a1 + 48));
  v5 = v21;
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 54;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v22 = (IPC::Encoder *)v6;
  v7 = *(_QWORD *)(v6 + 544);
  v8 = v7 + 1;
  v9 = *(_QWORD *)(v6 + 552);
  if (v9 < v7 + 1)
  {
    v18 = (2 * v9 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v19 = v18;
      v18 *= 2;
    }
    while (v19 < v8);
    result = (unsigned __int8 ***)mmap(0, v19, 3, 4098, -1, 0);
    if (result == (unsigned __int8 ***)-1)
    {
      __break(0xC471u);
      return result;
    }
    v10 = result;
    memcpy(result, *(const void **)(v6 + 528), *(_QWORD *)(v6 + 544));
    v20 = *(void **)(v6 + 528);
    if (v20 != (void *)(v6 + 16))
      munmap(v20, *(_QWORD *)(v6 + 552));
    *(_QWORD *)(v6 + 528) = v10;
    *(_QWORD *)(v6 + 552) = v19;
    v11 = *(_QWORD *)(v6 + 544);
  }
  else
  {
    v10 = *(unsigned __int8 ****)(v6 + 528);
    v11 = *(_QWORD *)(v6 + 544);
  }
  bzero((char *)v10 + v11, v7 - v11);
  *(_QWORD *)(v6 + 544) = v8;
  v12 = (_BYTE *)(*(_QWORD *)(v6 + 528) + v7);
  *(_QWORD *)(v6 + 536) = v12 + 1;
  *v12 = a2;
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>((IPC::Encoder *)v6, (uint64_t *)a3);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>((IPC::Encoder *)v6, (char *)(a3 + 16));
  IPC::Connection::sendMessageImpl((uint64_t)v5, (uint64_t *)&v22, 0, 0);
  v14 = v22;
  v22 = 0;
  if (v14)
  {
    IPC::Encoder::~Encoder(v14, v13);
    WTF::fastFree(v15, v16);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v21);
}

WebKit::RemoteMediaSessionHelperProxy *WebKit::GPUConnectionToWebProcess::mediaSessionHelperProxy(WebKit::GPUConnectionToWebProcess *this)
{
  WebKit::RemoteMediaSessionHelperProxy *result;
  WebKit::RemoteMediaSessionHelperProxy *v3;
  uint64_t v4;

  result = (WebKit::RemoteMediaSessionHelperProxy *)*((_QWORD *)this + 36);
  if (!result)
  {
    v3 = (WebKit::RemoteMediaSessionHelperProxy *)WTF::fastMalloc((WTF *)0x40);
    result = WebKit::RemoteMediaSessionHelperProxy::RemoteMediaSessionHelperProxy(v3, this);
    v4 = *((_QWORD *)this + 36);
    *((_QWORD *)this + 36) = result;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      return (WebKit::RemoteMediaSessionHelperProxy *)*((_QWORD *)this + 36);
    }
  }
  return result;
}

uint64_t WebKit::GPUConnectionToWebProcess::legacyCdmFactoryProxy(WebKit::GPUConnectionToWebProcess *this)
{
  uint64_t result;
  WebKit::RemoteLegacyCDMFactoryProxy *v3;
  unsigned int *v4;
  unsigned int v5;

  result = *((_QWORD *)this + 37);
  if (!result)
  {
    v3 = (WebKit::RemoteLegacyCDMFactoryProxy *)WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)v3 = off_1E34B9CB8;
    *((_QWORD *)v3 + 1) = 0;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    if (v4)
    {
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
    }
    *((_QWORD *)v3 + 2) = v4;
    *((_QWORD *)v3 + 3) = 0;
    *((_QWORD *)v3 + 4) = 0;
    *((_QWORD *)v3 + 5) = 0;
    std::unique_ptr<WebKit::RemoteLegacyCDMFactoryProxy>::reset[abi:sn180100]((WebKit::RemoteLegacyCDMFactoryProxy **)this + 37, v3);
    return *((_QWORD *)this + 37);
  }
  return result;
}

uint64_t WebKit::GPUConnectionToWebProcess::createAudioHardwareListener(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  WebKit::RemoteAudioHardwareListenerProxy *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v3 = result;
  v22 = a2;
  v4 = (uint64_t *)(result + 328);
  v5 = *(_QWORD *)(result + 328);
  if (v5
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(result + 328), 0), (v5 = *v4) != 0))
  {
    v6 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v6 = 0;
  }
  v7 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = (_QWORD *)(v5 + 16 * v10);
  v12 = *v11;
  if (!*v11)
  {
LABEL_12:
    *v11 = a2;
    v15 = (WebKit::RemoteAudioHardwareListenerProxy *)WTF::fastMalloc((WTF *)0x28);
    WebKit::RemoteAudioHardwareListenerProxy::RemoteAudioHardwareListenerProxy(v15, v3, &v22);
    result = (uint64_t)std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>::reset[abi:sn180100]((WebKit::RemoteAudioHardwareListenerProxy **)v11 + 1, v15);
    v16 = *(_QWORD *)(v3 + 328);
    if (v16)
      v17 = *(_DWORD *)(v16 - 12) + 1;
    else
      v17 = 1;
    *(_DWORD *)(v16 - 12) = v17;
    v18 = *v4;
    if (*v4)
      v19 = *(_DWORD *)(v18 - 12);
    else
      v19 = 0;
    v20 = (*(_DWORD *)(v18 - 16) + v19);
    v21 = *(unsigned int *)(v18 - 4);
    if (v21 > 0x400)
    {
      if (v21 > 2 * v20)
        return result;
    }
    else if (3 * v21 > 4 * v20)
    {
      return result;
    }
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v4, v11);
  }
  v13 = 0;
  v14 = 1;
  while (v12 != a2)
  {
    if (v12 == -1)
      v13 = v11;
    v10 = (v10 + v14) & v6;
    v11 = (_QWORD *)(v5 + 16 * v10);
    v12 = *v11;
    ++v14;
    if (!*v11)
    {
      if (v13)
      {
        *v13 = 0;
        v13[1] = 0;
        --*(_DWORD *)(*v4 - 16);
        v11 = v13;
      }
      goto LABEL_12;
    }
  }
  return result;
}

WebKit::RemoteAudioHardwareListenerProxy *WebKit::GPUConnectionToWebProcess::releaseAudioHardwareListener(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  WebKit::RemoteAudioHardwareListenerProxy *result;
  uint64_t v5;
  WebKit::RemoteAudioHardwareListenerProxy *v6;
  uint64_t v7;

  v7 = a2;
  v3 = (uint64_t *)(a1 + 328);
  result = (WebKit::RemoteAudioHardwareListenerProxy *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 328), &v7);
  v5 = *(_QWORD *)(a1 + 328);
  if (v5)
  {
    v6 = (WebKit::RemoteAudioHardwareListenerProxy *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v6 = 0;
  }
  if (v6 != result)
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(v3, (uint64_t)result);
  return result;
}

_DWORD *WebKit::GPUConnectionToWebProcess::createRemoteCommandListener(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  WTF::ThreadSafeWeakPtrControlBlock *v5;
  _DWORD *result;

  v4 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)(v4 + 16) = 1;
  *(_QWORD *)v4 = off_1E34BA648;
  *(_QWORD *)(v4 + 8) = 0;
  v5 = *(WTF::ThreadSafeWeakPtrControlBlock **)(a1 + 16);
  if (v5)
    v5 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v5);
  *(_QWORD *)(v4 + 24) = v5;
  *(_QWORD *)(v4 + 32) = a1;
  *(_QWORD *)(v4 + 40) = a2;
  *(_QWORD *)(v4 + 48) = 0;
  *(_BYTE *)(v4 + 56) = 0;
  result = *(_DWORD **)(a1 + 336);
  *(_QWORD *)(a1 + 336) = v4;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
  return result;
}

unsigned __int8 ***WebKit::GPUConnectionToWebProcess::setMediaOverridesForTesting(uint64_t a1, _BYTE *a2)
{
  WebCore::VP9TestingOverrides *v2;
  WebCore::VP9TestingOverrides *v3;
  WebCore::SystemBatteryStatusTestingOverrides *v4;
  WebCore::SystemBatteryStatusTestingOverrides *HasAC;
  WebCore::VP9TestingOverrides *v8;
  WebCore::SystemBatteryStatusTestingOverrides *v9;
  WebCore::SystemBatteryStatusTestingOverrides *v10;
  NSObject *v11;
  _BYTE v12[24];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 364))
  {
    WebCore::VP9TestingOverrides::singleton((WebCore::VP9TestingOverrides *)a1);
    v2 = (WebCore::VP9TestingOverrides *)WebCore::VP9TestingOverrides::setHardwareDecoderDisabled();
    WebCore::VP9TestingOverrides::singleton(v2);
    v3 = (WebCore::VP9TestingOverrides *)WebCore::VP9TestingOverrides::setVP9DecoderDisabled();
    WebCore::VP9TestingOverrides::singleton(v3);
    v4 = (WebCore::SystemBatteryStatusTestingOverrides *)WebCore::VP9TestingOverrides::setVP9ScreenSizeAndScale();
    WebCore::SystemBatteryStatusTestingOverrides::singleton(v4);
    HasAC = (WebCore::SystemBatteryStatusTestingOverrides *)WebCore::SystemBatteryStatusTestingOverrides::setHasAC();
    WebCore::SystemBatteryStatusTestingOverrides::singleton(HasAC);
    return (unsigned __int8 ***)WebCore::SystemBatteryStatusTestingOverrides::setHasBattery();
  }
  else if (a2[1] || a2[3] || a2[5] || a2[7] || a2[32])
  {
    v11 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v12 = 136315138;
      *(_QWORD *)&v12[4] = "void WebKit::GPUConnectionToWebProcess::setMediaOverridesForTesting(MediaOverridesForTesting)";
      _os_log_fault_impl(&dword_196BCC000, v11, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/GPUConnectionToWebProcess.cpp 883: Invalid message dispatched %s", v12, 0xCu);
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v12, (uint64_t **)(a1 + 48));
    *(_BYTE *)(*(_QWORD *)v12 + 98) = 1;
    return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v12);
  }
  else
  {
    v8 = (WebCore::VP9TestingOverrides *)WebCore::VP9TestingOverrides::singleton((WebCore::VP9TestingOverrides *)a1);
    v9 = (WebCore::SystemBatteryStatusTestingOverrides *)WebCore::VP9TestingOverrides::resetOverridesToDefaultValues(v8);
    v10 = (WebCore::SystemBatteryStatusTestingOverrides *)WebCore::SystemBatteryStatusTestingOverrides::singleton(v9);
    return (unsigned __int8 ***)WebCore::SystemBatteryStatusTestingOverrides::resetOverridesToDefaultValues(v10);
  }
}

BOOL WebKit::GPUConnectionToWebProcess::dispatchMessage(WebKit::GPUConnectionToWebProcess *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  unsigned int v6;
  int v7;
  WebKit::RemoteImageDecoderAVFProxy *v8;
  _QWORD *v9;
  WTF::ThreadSafeWeakPtrControlBlock *v10;
  uint64_t v11;
  WebKit::UserMediaCaptureManagerProxy *v12;
  WTF::ThreadSafeWeakPtrControlBlock *v13;
  uint64_t v14;
  uint64_t v15;
  WebKit::RemoteCDMFactoryProxy *v16;
  WebKit::RemoteCDMFactoryProxy *v17;
  WebKit::RemoteCDMFactoryProxy *v18;
  WebKit::RemoteCDMFactoryProxy *v19;
  WebKit::RemoteLegacyCDMFactoryProxy *v20;
  WebKit::RemoteLegacyCDMFactoryProxy *v21;
  uint64_t v22;
  unsigned int **v23;
  unsigned int ***v24;
  uint64_t v25;
  WebKit::RemoteMediaRecorderManager *v26;
  WebKit::RemoteMediaRecorderManager *v27;
  unsigned __int8 **v28;
  void *v29;
  WebKit::RemoteMediaSessionHelperProxy *v30;
  WTF *v31;
  WebKit::RemoteSharedResourceCache *v33;
  WebKit::RemoteSharedResourceCache *v34;

  v6 = *((unsigned __int16 *)a3 + 25);
  if (v6 >= 0xE98)
    v6 = 3736;
  v7 = LOBYTE((&IPC::Detail::messageDescriptions)[3 * v6 + 2]);
  if (v7 <= 80)
  {
    switch(v7)
    {
      case '5':
        v9 = (_QWORD *)*((_QWORD *)this + 12);
        if (!v9)
        {
          v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
          v9[1] = 0;
          v9[2] = 0;
          *v9 = off_1E34B30F0;
          v10 = (WTF::ThreadSafeWeakPtrControlBlock *)*((_QWORD *)this + 2);
          if (v10)
            v10 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v10);
          v9[3] = v10;
          v9[4] = this;
          v11 = *((_QWORD *)this + 12);
          *((_QWORD *)this + 12) = v9;
          if (v11)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
            v9 = (_QWORD *)*((_QWORD *)this + 12);
          }
        }
        goto LABEL_20;
      case '7':
        v9 = (_QWORD *)*((_QWORD *)this + 18);
        if (!v9)
        {
          v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
          v9[1] = 0;
          v9[2] = 0;
          *v9 = off_1E34BBD40;
          v13 = (WTF::ThreadSafeWeakPtrControlBlock *)*((_QWORD *)this + 2);
          if (v13)
            v13 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v13);
          v9[3] = v13;
          v9[4] = this;
          v14 = *((_QWORD *)this + 18);
          *((_QWORD *)this + 18) = v9;
          if (v14)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
            v9 = (_QWORD *)*((_QWORD *)this + 18);
          }
        }
LABEL_20:
        (*(void (**)(_QWORD *, IPC::Connection *, IPC::Decoder *))(*v9 + 16))(v9, a2, a3);
        return 1;
      case '9':
        v15 = WebKit::GPUConnectionToWebProcess::audioSessionProxy(this);
        WebKit::RemoteAudioSessionProxy::didReceiveMessage(v15, a2, a3);
        return 1;
      case '?':
        v16 = (WebKit::RemoteCDMFactoryProxy *)WebKit::GPUConnectionToWebProcess::cdmFactoryProxy(this);
        WebKit::RemoteCDMFactoryProxy::didReceiveMessage(v16, a2, a3);
        return 1;
      case 'A':
        v17 = (WebKit::RemoteCDMFactoryProxy *)WebKit::GPUConnectionToWebProcess::cdmFactoryProxy(this);
        WebKit::RemoteCDMFactoryProxy::didReceiveCDMInstanceMessage(v17, (unsigned __int8 **)a2, a3);
        return 1;
      case 'C':
        v18 = (WebKit::RemoteCDMFactoryProxy *)WebKit::GPUConnectionToWebProcess::cdmFactoryProxy(this);
        WebKit::RemoteCDMFactoryProxy::didReceiveCDMInstanceSessionMessage(v18, (unsigned __int8 **)a2, a3);
        return 1;
      case 'D':
        v19 = (WebKit::RemoteCDMFactoryProxy *)WebKit::GPUConnectionToWebProcess::cdmFactoryProxy(this);
        WebKit::RemoteCDMFactoryProxy::didReceiveCDMMessage(v19, (unsigned __int8 **)a2, a3);
        return 1;
      default:
        return IPC::MessageReceiverMap::dispatchMessage((unsigned int **)this + 7, a2, a3);
    }
  }
  switch(v7)
  {
    case 'Q':
      return 1;
    case 'R':
    case 'S':
    case 'T':
    case 'U':
    case 'V':
    case 'W':
    case 'Y':
    case '\\':
    case 'd':
    case 'e':
    case 'f':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
      return IPC::MessageReceiverMap::dispatchMessage((unsigned int **)this + 7, a2, a3);
    case 'X':
      v8 = WebKit::GPUConnectionToWebProcess::imageDecoderAVFProxy(this);
      WebKit::RemoteImageDecoderAVFProxy::didReceiveMessage(v8, a2, a3);
      return 1;
    case 'Z':
      v20 = (WebKit::RemoteLegacyCDMFactoryProxy *)WebKit::GPUConnectionToWebProcess::legacyCdmFactoryProxy(this);
      WebKit::RemoteLegacyCDMFactoryProxy::didReceiveMessage(v20, a2, a3);
      return 1;
    case '[':
      v21 = (WebKit::RemoteLegacyCDMFactoryProxy *)WebKit::GPUConnectionToWebProcess::legacyCdmFactoryProxy(this);
      WebKit::RemoteLegacyCDMFactoryProxy::didReceiveCDMMessage(v21, a2, a3);
      return 1;
    case ']':
      v22 = WebKit::GPUConnectionToWebProcess::legacyCdmFactoryProxy(this);
      WebKit::RemoteLegacyCDMFactoryProxy::didReceiveCDMSessionMessage(v22, (uint64_t)a2, (uint64_t)a3);
      return 1;
    case '^':
      v23 = (unsigned int **)*((_QWORD *)this + 39);
      if (!v23)
      {
        v24 = (unsigned int ***)((char *)this + 312);
        v25 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v25 = off_1E34BA198;
        *(_QWORD *)(v25 + 8) = 0;
        std::unique_ptr<WebKit::RemoteMediaEngineConfigurationFactoryProxy>::reset[abi:sn180100](v24, (unsigned int **)v25);
        v23 = *v24;
      }
      WebKit::RemoteMediaEngineConfigurationFactoryProxy::didReceiveMessage((unsigned __int8 ***)v23, (unsigned __int8 **)a2, a3);
      return 1;
    case '_':
      WebKit::RemoteMediaPlayerManagerProxy::didReceiveMessage(*((WebKit::RemoteMediaPlayerManagerProxy **)this + 15), a2, a3);
      return 1;
      WebKit::RemoteMediaPlayerManagerProxy::didReceivePlayerMessage(*((WebKit::RemoteMediaPlayerManagerProxy **)this + 15), (unsigned __int8 **)a2, a3);
      return 1;
    case 'a':
      v26 = (WebKit::RemoteMediaRecorderManager *)WebKit::GPUConnectionToWebProcess::mediaRecorderManager(this);
      WebKit::RemoteMediaRecorderManager::didReceiveRemoteMediaRecorderMessage(v26, (unsigned __int8 **)a2, a3);
      return 1;
    case 'b':
      v27 = (WebKit::RemoteMediaRecorderManager *)WebKit::GPUConnectionToWebProcess::mediaRecorderManager(this);
      WebKit::RemoteMediaRecorderManager::didReceiveMessage(v27, (unsigned __int8 **)a2, a3);
      return 1;
    case 'c':
      v28 = (unsigned __int8 **)WebKit::GPUConnectionToWebProcess::remoteMediaResourceManager(this);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v28 + 2);
      WebKit::RemoteMediaResourceManager::didReceiveMessage((WebKit::RemoteMediaResourceManager *)v28, (unsigned __int8 **)a2, a3);
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(v28[2], v29);
      return 1;
    case 'g':
      v30 = WebKit::GPUConnectionToWebProcess::mediaSessionHelperProxy(this);
      WebKit::RemoteMediaSessionHelperProxy::didReceiveMessage((uint64_t)v30, a2, a3);
      return 1;
    case 'o':
      v31 = (WTF *)*((_QWORD *)this + 42);
      if (v31)
      {
        ++*((_DWORD *)v31 + 4);
        WebKit::RemoteRemoteCommandListenerProxy::didReceiveMessage(v31, a2, a3);
        if (*((_DWORD *)v31 + 4) == 1)
          (*(void (**)(WTF *))(*(_QWORD *)v31 + 8))(v31);
        else
          --*((_DWORD *)v31 + 4);
      }
      return 1;
    default:
      if (v7 == 123)
      {
        WebKit::GPUConnectionToWebProcess::sharedResourceCache(this, &v34);
        v33 = v34;
        WebKit::RemoteSharedResourceCache::didReceiveMessage((unint64_t)v34, a2, a3);
        if (v33)
          WTF::ThreadSafeRefCounted<WebKit::RemoteSharedResourceCache,(WTF::DestructionThread)0>::deref((unsigned int *)v33 + 4);
      }
      else
      {
        if (v7 != 145)
          return IPC::MessageReceiverMap::dispatchMessage((unsigned int **)this + 7, a2, a3);
        v12 = (WebKit::UserMediaCaptureManagerProxy *)WebKit::GPUConnectionToWebProcess::userMediaCaptureManagerProxy(this);
        WebKit::UserMediaCaptureManagerProxy::didReceiveMessage(v12, (unsigned __int8 **)a2, a3);
      }
      break;
  }
  return 1;
}

void WebKit::GPUConnectionToWebProcess::dispatchSyncMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v7;
  WebKit::RemoteImageDecoderAVFProxy *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7 = *(unsigned __int16 *)(a3 + 50);
  if (v7 >= 0xE98)
    v7 = 3736;
  switch(LOBYTE((&IPC::Detail::messageDescriptions)[3 * v7 + 2]))
  {
    case 'Q':
      return;
    case 'X':
      v8 = WebKit::GPUConnectionToWebProcess::imageDecoderAVFProxy((WebKit::GPUConnectionToWebProcess *)a1);
      WebKit::RemoteImageDecoderAVFProxy::didReceiveSyncMessage((uint64_t)v8, a2, a3, a4);
      break;
    case 'Z':
      v9 = WebKit::GPUConnectionToWebProcess::legacyCdmFactoryProxy((WebKit::GPUConnectionToWebProcess *)a1);
      WebKit::RemoteLegacyCDMFactoryProxy::didReceiveSyncMessage(v9, a2, a3, (IPC::Encoder **)a4);
      break;
    case '[':
      v10 = WebKit::GPUConnectionToWebProcess::legacyCdmFactoryProxy((WebKit::GPUConnectionToWebProcess *)a1);
      WebKit::RemoteLegacyCDMFactoryProxy::didReceiveSyncCDMMessage(v10, a2, a3, (WTF::StringImpl **)a4);
      break;
    case ']':
      v11 = WebKit::GPUConnectionToWebProcess::legacyCdmFactoryProxy((WebKit::GPUConnectionToWebProcess *)a1);
      WebKit::RemoteLegacyCDMFactoryProxy::didReceiveSyncCDMSessionMessage(v11, a2, a3, (IPC::Encoder **)a4);
      break;
    case '_':
      WebKit::RemoteMediaPlayerManagerProxy::didReceiveSyncMessage(*(_QWORD *)(a1 + 120), a2, a3, (IPC::Encoder **)a4);
      break;
      WebKit::RemoteMediaPlayerManagerProxy::didReceiveSyncPlayerMessage(*(_QWORD *)(a1 + 120), a2, a3, (IPC::Encoder **)a4);
      break;
    default:
      IPC::MessageReceiverMap::dispatchSyncMessage((unsigned int **)(a1 + 56), (uint64_t)a2, a3, (uint64_t)a4);
      break;
  }
}

uint64_t *WebKit::GPUConnectionToWebProcess::mediaCacheDirectory(WebKit::GPUConnectionToWebProcess *this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;

  v1 = *((_QWORD *)this + 9);
  v2 = (unsigned int *)(v1 + 112);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  v10 = *((_QWORD *)this + 16);
  v4 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(v1 + 192), &v10);
  v5 = *(_QWORD *)(v1 + 192);
  if (v5)
    v6 = (uint64_t *)(v5 + 24 * *(unsigned int *)(v5 - 4));
  else
    v6 = 0;
  do
  {
    v7 = __ldaxr(v2);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v2));
  if (!v8)
  {
    atomic_store(1u, (unsigned int *)(v1 + 112));
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  if (v6 == v4)
    return (uint64_t *)MEMORY[0x1E0CBF6F0];
  else
    return v4 + 1;
}

uint64_t *WebKit::GPUConnectionToWebProcess::mediaKeysStorageDirectory(WebKit::GPUConnectionToWebProcess *this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;

  v1 = *((_QWORD *)this + 9);
  v2 = (unsigned int *)(v1 + 112);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  v10 = *((_QWORD *)this + 16);
  v4 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(v1 + 192), &v10);
  v5 = *(_QWORD *)(v1 + 192);
  if (v5)
    v6 = (uint64_t *)(v5 + 24 * *(unsigned int *)(v5 - 4));
  else
    v6 = 0;
  do
  {
    v7 = __ldaxr(v2);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v2));
  if (!v8)
  {
    atomic_store(1u, (unsigned int *)(v1 + 112));
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  if (v6 == v4)
    return (uint64_t *)MEMORY[0x1E0CBF6F0];
  else
    return v4 + 2;
}

uint64_t WebKit::GPUConnectionToWebProcess::updateCaptureOrigin(WebKit::GPUConnectionToWebProcess *this, const WebCore::SecurityOriginData *a2)
{
  WTF::StringImpl *v3;
  uint64_t result;
  WTF *v5;

  WebCore::SecurityOriginData::securityOrigin(a2);
  result = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = v5;
  if (result)
  {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(result, v3);
    return 0;
  }
  return result;
}

void WebKit::GPUConnectionToWebProcess::updateSampleBufferDisplayLayerBoundsAndPosition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;

  v5 = *(_QWORD *)(a1 + 160);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v5 + 16));
  WebKit::RemoteSampleBufferDisplayLayerManager::updateSampleBufferDisplayLayerBoundsAndPosition(v5, a2, a3);
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), v6);
}

void WebKit::GPUProcess::GPUProcess(WebKit::GPUProcess *this)
{
  WebKit::AuxiliaryProcess *v1;
  uint64_t v2;
  NSObject *v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v1 = WebKit::AuxiliaryProcess::AuxiliaryProcess((WebKit::AuxiliaryProcess *)&qword_1ECE722A8);
  dword_1ECE72318 = 1;
  qword_1ECE722A8 = (uint64_t)off_1E34B7DA0;
  qword_1ECE722B8 = (uint64_t)&unk_1E34B7E68;
  qword_1ECE72320 = 0;
  WTF::MonotonicTime::now(v1);
  qword_1ECE72328 = v2;
  qword_1ECE72330 = 0;
  unk_1ECE72338 = 0;
  unk_1ECE7233F = 0;
  qword_1ECE72348 = 0;
  unk_1ECE72350 = 0;
  dword_1ECE72358 = 0;
  qword_1ECE72360 = 0;
  unk_1ECE72368 = 0;
  WebCore::Timer::Timer<WebKit::GPUProcess,WebKit::GPUProcess>();
  qword_1ECE723A8 = 0;
  unk_1ECE723B0 = 0;
  *(_DWORD *)((char *)&qword_1ECE723B8 + 7) = 0;
  qword_1ECE723B8 = 0;
  v3 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 134217984;
    v5 = &qword_1ECE722A8;
    _os_log_impl(&dword_196BCC000, v3, OS_LOG_TYPE_DEFAULT, "%p - GPUProcess::GPUProcess:", (uint8_t *)&v4, 0xCu);
  }
}

void WebKit::GPUProcess::tryExitIfUnused(WebKit::GPUProcess *this)
{
  WTF::MonotonicTime *v2;
  WTF::MonotonicTime *v3;
  WTF::MonotonicTime *v4;
  WTF::MonotonicTime *v5;
  uint64_t v6;
  WTF::MonotonicTime *v7;
  uint64_t v8;
  WebKit::RemoteAudioDestinationManager *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 **v15;
  void *v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  void *v28;
  WTF::MemoryPressureHandler *v29;
  double v30;
  NSObject *v31;
  unsigned __int8 **v32;
  NSObject *v33;
  __int16 v34[8];
  uint8_t buf[16];

  v2 = (WTF::MonotonicTime *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 15);
  v3 = v2;
  v5 = v4;
  v6 = *((_QWORD *)this + 15);
  if (v6)
    v7 = (WTF::MonotonicTime *)(v6 + 16 * *(unsigned int *)(v6 - 4));
  else
    v7 = 0;
  if (v7 == v2)
  {
LABEL_36:
    v29 = (WTF::MemoryPressureHandler *)WTF::MonotonicTime::now(v2);
    if (v30 - *((double *)this + 16) >= 5.0 || *(_BYTE *)(WTF::MemoryPressureHandler::singleton(v29) + 7))
    {
      if ((*((_QWORD *)this + 29) & 0xFFFFFFFFFFFFLL) != 0)
        WebCore::TimerBase::stopSlowCase((WebKit::GPUProcess *)((char *)this + 200));
      v31 = qword_1ECE71C68;
      if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
      {
        v34[0] = 0;
        _os_log_impl(&dword_196BCC000, v31, OS_LOG_TYPE_DEFAULT, "GPUProcess::tryExitIfUnused: GPUProcess is exiting because we are under memory pressure and the process is no longer useful.", (uint8_t *)v34, 2u);
      }
      v32 = (unsigned __int8 **)*((_QWORD *)this + 4);
      if (v32)
      {
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v32);
        IPC::Connection::send<Messages::GPUProcessProxy::ProcessIsReadyToExit>((uint64_t)v32);
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v32);
      }
      else
      {
        IPC::Connection::send<Messages::GPUProcessProxy::ProcessIsReadyToExit>(0);
      }
    }
    else
    {
      v33 = qword_1ECE71C68;
      if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_196BCC000, v33, OS_LOG_TYPE_DEFAULT, "GPUProcess::tryExitIfUnused: GPUProcess is idle and under memory pressure but it is not exiting because it has just launched", buf, 2u);
      }
      if ((*((_QWORD *)this + 29) & 0xFFFFFFFFFFFFLL) == 0
        || *(double *)((*((_QWORD *)this + 29) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
      {
        WebCore::TimerBase::start();
      }
    }
  }
  else
  {
    while (1)
    {
      v8 = *((_QWORD *)v3 + 1);
      if (atomic_load((unsigned int *)&WebKit::ScopedRenderingResourcesRequest::s_requests))
        break;
      if (*(_BYTE *)(v8 + 363))
        break;
      v10 = *(WebKit::RemoteAudioDestinationManager **)(v8 + 96);
      if (v10)
      {
        if (!WebKit::RemoteAudioDestinationManager::allowsExitUnderMemoryPressure(v10))
          break;
      }
      v11 = *(_QWORD *)(v8 + 136);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 16);
        if (v12)
        {
          if (*(_DWORD *)(v12 - 12))
            break;
        }
      }
      v13 = *(_QWORD *)(v8 + 144);
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 16);
        if (v14)
        {
          if (*(_DWORD *)(v14 - 12))
            break;
        }
      }
      v15 = *(unsigned __int8 ***)(v8 + 160);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v15 + 2);
      v17 = WebKit::RemoteSampleBufferDisplayLayerManager::allowsExitUnderMemoryPressure((WebKit::RemoteSampleBufferDisplayLayerManager *)v15);
      if (v15)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(v15[2], v16);
      if (!v17)
        break;
      v18 = *(_QWORD *)(v8 + 168);
      if (v18)
      {
        v19 = *(_QWORD *)(v18 + 32);
        if (v19)
        {
          if (*(_DWORD *)(v19 - 12))
            break;
        }
      }
      v20 = *(_QWORD *)(v8 + 304);
      if (v20)
      {
        v21 = *(_QWORD *)(v20 + 32);
        if (v21)
        {
          if (*(_DWORD *)(v21 - 12))
            break;
        }
      }
      v22 = *(_QWORD *)(v8 + 272);
      if (v22)
      {
        v23 = *(_QWORD *)(v22 + 48);
        if (v23)
        {
          if (*(_DWORD *)(v23 - 12))
            break;
        }
      }
      v24 = *(_QWORD *)(v8 + 296);
      if (v24)
      {
        v25 = *(_QWORD *)(v24 + 32);
        if (v25)
        {
          if (*(_DWORD *)(v25 - 12))
            break;
        }
      }
      v26 = *(_QWORD *)(v8 + 200);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v26 + 16));
      v27 = atomic_load((unsigned __int8 *)(v26 + 72));
      v2 = (WTF::MonotonicTime *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v26 + 16), v28);
      if ((v27 & 1) != 0)
        break;
      while (1)
      {
        v3 = (WTF::MonotonicTime *)((char *)v3 + 16);
        if (v3 == v5)
          break;
        if ((unint64_t)(*(_QWORD *)v3 + 1) > 1)
          goto LABEL_35;
      }
      v3 = v5;
LABEL_35:
      if (v3 == v7)
        goto LABEL_36;
    }
    if ((*((_QWORD *)this + 29) & 0xFFFFFFFFFFFFLL) != 0)
      WebCore::TimerBase::stopSlowCase((WebKit::GPUProcess *)((char *)this + 200));
  }
}

void WebKit::GPUProcess::~GPUProcess(WebKit::GPUProcess *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;

  *(_QWORD *)this = off_1E34B7DA0;
  *((_QWORD *)this + 2) = &unk_1E34B7E68;
  v3 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 25) = off_1E34B3740;
  v6 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  WebCore::TimerBase::~TimerBase((WebKit::GPUProcess *)((char *)this + 200));
  v8 = *((_QWORD *)this + 24);
  if (v8)
  {
    v9 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v9)
    {
      v10 = (WTF::StringImpl **)(v8 + 16);
      do
      {
        if (*(v10 - 2) != (WTF::StringImpl *)-1)
        {
          v11 = *v10;
          *v10 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v7);
            else
              *(_DWORD *)v11 -= 2;
          }
          v12 = *(v10 - 1);
          *(v10 - 1) = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v7);
            else
              *(_DWORD *)v12 -= 2;
          }
        }
        v10 += 3;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree((WTF *)(v8 - 16), v7);
  }
  v13 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 56))(v13);
  v14 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 56))(v14);
  v15 = *((_QWORD *)this + 20);
  if (v15)
    WTF::fastFree((WTF *)(v15 - 16), v7);
  v16 = *((_QWORD *)this + 15);
  if (v16)
  {
    v17 = *(unsigned int *)(v16 - 4);
    if ((_DWORD)v17)
    {
      v18 = (uint64_t *)(v16 + 8);
      do
      {
        if (*(v18 - 1) != -1)
        {
          v19 = *v18;
          *v18 = 0;
          if (v19)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v19 + 16));
        }
        v18 += 2;
        --v17;
      }
      while (v17);
    }
    WTF::fastFree((WTF *)(v16 - 16), v7);
  }
  WebKit::AuxiliaryProcess::~AuxiliaryProcess(this);
}

{
  WTF *v2;
  void *v3;

  WebKit::GPUProcess::~GPUProcess(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebKit::GPUProcess::~GPUProcess(WebKit::GPUProcess *this, WTF::StringImpl *a2)
{
  WebKit::GPUProcess::~GPUProcess((WebKit::GPUProcess *)((char *)this - 16), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::GPUProcess::~GPUProcess((WebKit::GPUProcess *)((char *)this - 16), a2);
  WTF::fastFree(v2, v3);
}

uint64_t *WebKit::GPUProcess::singleton(WebKit::GPUProcess *this)
{
  if ((_MergedGlobals_59 & 1) == 0)
  {
    WebKit::GPUProcess::GPUProcess(this);
    _MergedGlobals_59 = 1;
  }
  return &qword_1ECE722A8;
}

uint64_t *WebKit::GPUProcess::createGPUConnectionToWebProcess(uint64_t a1, uint64_t a2, uint64_t a3, WTF::MachSendRight *a4, uint64_t a5, uint64_t *a6)
{
  NSObject *v12;
  uint64_t v13;
  WebKit::GPUConnectionToWebProcess *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint8_t buf[4];
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v26 = a2;
  v12 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    v28 = a1;
    v29 = 2048;
    v30 = a2;
    _os_log_impl(&dword_196BCC000, v12, OS_LOG_TYPE_DEFAULT, "%p - GPUProcess::createGPUConnectionToWebProcess: processIdentifier=%llu", buf, 0x16u);
  }
  v13 = *a6;
  *a6 = 0;
  v24 = v13;
  v25 = 1;
  if ((*(_DWORD *)a4 - 1) <= 0xFFFFFFFD)
  {
    v14 = (WebKit::GPUConnectionToWebProcess *)WTF::fastMalloc((WTF *)0x170);
    v23 = WebKit::GPUConnectionToWebProcess::GPUConnectionToWebProcess((uint64_t)v14, a1, a2, a3, a4, a5);
    v15 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::GPUProcess::MediaCaptureAccess,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::GPUProcess::MediaCaptureAccess>,WTF::HashTableTraits>::take((uint64_t *)(a1 + 160), a2);
    *((_BYTE *)v14 + 184) |= v15 & 1;
    *((_BYTE *)v14 + 185) |= BYTE1(v15) & 1;
    *((_BYTE *)v14 + 186) |= BYTE2(v15) & 1;
    v16 = *(unsigned int *)(a1 + 176);
    v17 = WebKit::GPUConnectionToWebProcess::userMediaCaptureManagerProxy(v14);
    *(_DWORD *)(v17 + 56) = v16;
    v18 = *(unsigned int *)(v17 + 52);
    if ((_DWORD)v18)
    {
      v20 = *(uint64_t **)(v17 + 40);
      v21 = 8 * v18;
      do
      {
        v22 = *v20++;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, v16);
        v21 -= 8;
      }
      while (v21);
    }
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>((uint64_t)buf, (uint64_t *)(a1 + 120), &v26, &v23);
    if (v23)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v23 + 16));
  }
  return WTF::ScopeExit<WTF::CompletionHandler<void ()(void)>>::~ScopeExit(&v24);
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::GPUProcess::MediaCaptureAccess,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::GPUProcess::MediaCaptureAccess>,WTF::HashTableTraits>::take(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  if (*a1)
  {
    v5 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::GPUProcess::MediaCaptureAccess>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::GPUProcess::MediaCaptureAccess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::GPUProcess::MediaCaptureAccess,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::GPUProcess::MediaCaptureAccess>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::GPUProcess::MediaCaptureAccess,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::GPUProcess::MediaCaptureAccess>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(*a1, a2);
    v6 = *(unsigned int *)(v2 - 4);
    if (v5)
      v7 = v5;
    else
      v7 = v2 + 16 * v6;
    if (v2 + 16 * v6 == v7)
    {
      return 0;
    }
    else
    {
      v2 = *(unsigned __int16 *)(v7 + 8) | (*(unsigned __int8 *)(v7 + 10) << 16);
      WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::GPUProcess::MediaCaptureAccess,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::GPUProcess::MediaCaptureAccess>,WTF::HashTableTraits>::remove(a1, (_QWORD *)v7);
    }
  }
  return v2;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  int v9;
  uint64_t result;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  result = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a3);
  v11 = result & v9;
  v12 = (_QWORD *)(v8 + 16 * (result & v9));
  v13 = *v12;
  v14 = *a3;
  if (*v12)
  {
    v25 = 0;
    v26 = 1;
    do
    {
      if (v13 == v14)
      {
        v27 = *a2;
        if (*a2)
          v28 = *(unsigned int *)(v27 - 4);
        else
          v28 = 0;
        v24 = 0;
        v23 = v27 + 16 * v28;
        goto LABEL_14;
      }
      if (v13 == -1)
        v25 = v12;
      v11 = (v11 + v26) & v9;
      v12 = (_QWORD *)(v8 + 16 * v11);
      v13 = *v12;
      ++v26;
    }
    while (*v12);
    if (v25)
    {
      *v25 = 0;
      v25[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v14 = *a3;
      v12 = v25;
    }
  }
  *v12 = v14;
  v15 = *a4;
  *a4 = 0;
  v16 = v12[1];
  v12[1] = v15;
  if (v16)
    result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v16 + 16));
  v17 = *a2;
  if (*a2)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v19 = *a2;
  if (*a2)
    v20 = *(_DWORD *)(v19 - 12);
  else
    v20 = 0;
  v21 = (*(_DWORD *)(v19 - 16) + v20);
  v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 > 2 * v21)
      goto LABEL_13;
LABEL_26:
    result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a2, v12);
    v12 = (_QWORD *)result;
    v19 = *a2;
    if (*a2)
      v22 = *(unsigned int *)(v19 - 4);
    else
      v22 = 0;
    goto LABEL_13;
  }
  if (3 * v22 <= 4 * v21)
    goto LABEL_26;
LABEL_13:
  v23 = v19 + 16 * v22;
  v24 = 1;
LABEL_14:
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = v23;
  *(_BYTE *)(a1 + 16) = v24;
  return result;
}

BOOL WebKit::GPUProcess::shouldTerminate(WebKit::GPUProcess *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 15);
  return !v1 || *(_DWORD *)(v1 - 12) == 0;
}

IPC::Encoder *IPC::Connection::send<Messages::GPUProcessProxy::ProcessIsReadyToExit>(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  IPC::Encoder *result;
  WTF *v5;
  void *v6;
  IPC::Encoder *v7;

  v2 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v2 = 57;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 528) = v2 + 16;
  *(_QWORD *)(v2 + 536) = v2 + 16;
  *(_OWORD *)(v2 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v2 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v2);
  v7 = (IPC::Encoder *)v2;
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v7, 0, 0);
  result = v7;
  v7 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v3);
    return (IPC::Encoder *)WTF::fastFree(v5, v6);
  }
  return result;
}

uint64_t WebKit::GPUProcess::lowMemoryHandler(WebKit::GPUProcess *a1, int a2, int a3)
{
  NSObject *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 **v15;
  void *v16;
  _DWORD v18[2];
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v6 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
  {
    v18[0] = 67109376;
    v18[1] = a2;
    v19 = 1024;
    v20 = a3;
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "GPUProcess::lowMemoryHandler: critical=%d, synchronous=%d", (uint8_t *)v18, 0xEu);
  }
  WebKit::GPUProcess::tryExitIfUnused(a1);
  v7 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)a1 + 15);
  v8 = v7;
  v10 = v9;
  v11 = (_QWORD *)*((_QWORD *)a1 + 15);
  if (v11)
    v12 = &v11[2 * *((unsigned int *)v11 - 1)];
  else
    v12 = 0;
  if (v12 != v7)
  {
    do
    {
      v13 = v8[1];
      v14 = *(_QWORD *)(v13 + 104);
      if (v14)
        WebCore::IOSurfacePool::discardAllSurfaces(*(WebCore::IOSurfacePool **)(v14 + 56));
      v15 = *(unsigned __int8 ***)(v13 + 192);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v15 + 2);
      WebKit::RemoteVideoFrameObjectHeap::lowMemoryHandler((WebKit::RemoteVideoFrameObjectHeap *)v15);
      if (v15)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(v15[2], v16);
      while (1)
      {
        v8 += 2;
        if (v8 == v10)
          break;
        if ((unint64_t)(*v8 + 1) > 1)
          goto LABEL_15;
      }
      v8 = v10;
LABEL_15:
      ;
    }
    while (v8 != v12);
  }
  return WebCore::releaseGraphicsMemory();
}

uint64_t WebKit::GPUProcess::prepareToSuspend(WebKit::GPUProcess *a1, int a2, uint64_t *a3)
{
  NSObject *v6;
  uint64_t v7;
  int v9;
  WebKit::GPUProcess *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 134218240;
    v10 = a1;
    v11 = 1024;
    v12 = a2;
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "%p - GPUProcess::prepareToSuspend(), isSuspensionImminent: %d", (uint8_t *)&v9, 0x12u);
  }
  WebKit::GPUProcess::lowMemoryHandler(a1, 1, 1);
  v7 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

void WebKit::GPUProcess::processDidResume(WebKit::GPUProcess *this)
{
  NSObject *v2;
  int v3;
  WebKit::GPUProcess *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    v3 = 134217984;
    v4 = this;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - GPUProcess::processDidResume()", (uint8_t *)&v3, 0xCu);
  }
}

void WebKit::GPUProcess::updateSandboxAccess(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  const WebKit::SandboxExtensionHandle *v4;
  uint64_t v5;
  uint64_t v6;
  const char ***v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = qword_1ECE71B18;
  if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(unsigned int *)(a2 + 12);
    v9 = 134217984;
    v10 = v5;
    _os_log_impl(&dword_196BCC000, v3, OS_LOG_TYPE_DEFAULT, "GPUProcess::updateSandboxAccess: Adding %ld extensions", (uint8_t *)&v9, 0xCu);
  }
  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(const char ****)a2;
    v8 = 8 * v6;
    do
    {
      WebKit::SandboxExtension::consumePermanently(v7++, v4);
      v8 -= 8;
    }
    while (v8);
  }
}

_QWORD *WebKit::GPUProcess::setOrientationForMediaCapture(WebKit::GPUProcess *this, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  *((_DWORD *)this + 44) = a2;
  result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 15);
  v5 = (uint64_t)result;
  v7 = v6;
  v8 = *((_QWORD *)this + 15);
  if (v8)
    v9 = (_QWORD *)(v8 + 16 * *(unsigned int *)(v8 - 4));
  else
    v9 = 0;
  if (v9 != result)
  {
    do
    {
      result = (_QWORD *)WebKit::GPUConnectionToWebProcess::userMediaCaptureManagerProxy(*(WebKit::GPUConnectionToWebProcess **)(v5 + 8));
      *((_DWORD *)result + 14) = a2;
      v10 = *((unsigned int *)result + 13);
      if ((_DWORD)v10)
      {
        v11 = (uint64_t *)result[5];
        v12 = 8 * v10;
        do
        {
          v13 = *v11++;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, a2);
          v12 -= 8;
        }
        while (v12);
      }
      while (1)
      {
        v5 += 16;
        if (v5 == v7)
          break;
        if ((unint64_t)(*(_QWORD *)v5 + 1) > 1)
          goto LABEL_10;
      }
      v5 = v7;
LABEL_10:
      ;
    }
    while ((_QWORD *)v5 != v9);
  }
  return result;
}

unsigned __int8 *WebKit::GPUProcess::updateCaptureAccess(uint64_t *a1, int a2, int a3, int a4, uint64_t a5, uint64_t *a6)
{
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  _OWORD *v28;
  uint64_t v29;
  _OWORD *v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v12 = qword_1ECE71B18;
  if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v39) = 67109632;
    HIDWORD(v39) = a2;
    v40 = 1024;
    v41 = a3;
    v42 = 1024;
    v43 = a4;
    _os_log_impl(&dword_196BCC000, v12, OS_LOG_TYPE_DEFAULT, "GPUProcess::updateCaptureAccess: Entering (audio=%d, video=%d, display=%d)", (uint8_t *)&v39, 0x14u);
  }
  WebKit::GPUProcess::ensureAVCaptureServerConnection((WebKit::GPUProcess *)a1);
  v39 = a5;
  v13 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1 + 15, &v39);
  if (!v13)
  {
    v22 = a1[20];
    v21 = a1 + 20;
    v20 = v22;
    if (v22
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::GPUProcess::MediaCaptureAccess>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::GPUProcess::MediaCaptureAccess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::GPUProcess::MediaCaptureAccess,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::GPUProcess::MediaCaptureAccess>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v21, 0), (v20 = *v21) != 0))
    {
      v23 = *(_DWORD *)(v20 - 8);
    }
    else
    {
      v23 = 0;
    }
    v24 = (~(a5 << 32) + a5) ^ ((unint64_t)(~(a5 << 32) + a5) >> 22);
    v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
    v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
    v27 = v23 & ((v26 >> 31) ^ v26);
    v28 = (_OWORD *)(v20 + 16 * v27);
    v29 = *(_QWORD *)v28;
    if (*(_QWORD *)v28)
    {
      v30 = 0;
      v31 = 1;
      while (v29 != a5)
      {
        if (v29 == -1)
          v30 = v28;
        v27 = (v27 + v31) & v23;
        v28 = (_OWORD *)(v20 + 16 * v27);
        v29 = *(_QWORD *)v28;
        ++v31;
        if (!*(_QWORD *)v28)
        {
          if (v30)
          {
            *(_QWORD *)v30 = 0;
            *((_BYTE *)v30 + 10) = 0;
            *((_WORD *)v30 + 4) = 0;
            --*(_DWORD *)(*v21 - 16);
            v28 = v30;
          }
          goto LABEL_26;
        }
      }
      goto LABEL_35;
    }
LABEL_26:
    *(_QWORD *)v28 = a5;
    *((_BYTE *)v28 + 8) = a2;
    *((_BYTE *)v28 + 9) = a3;
    *((_BYTE *)v28 + 10) = a4;
    v32 = *v21;
    if (*v21)
      v33 = *(_DWORD *)(v32 - 12) + 1;
    else
      v33 = 1;
    *(_DWORD *)(v32 - 12) = v33;
    v34 = *v21;
    if (*v21)
      v35 = *(_DWORD *)(v34 - 12);
    else
      v35 = 0;
    v36 = (*(_DWORD *)(v34 - 16) + v35);
    v37 = *(unsigned int *)(v34 - 4);
    if (v37 > 0x400)
    {
      if (v37 > 2 * v36)
        goto LABEL_35;
    }
    else if (3 * v37 > 4 * v36)
    {
LABEL_35:
      *((_BYTE *)v28 + 8) |= a2;
      *((_BYTE *)v28 + 9) |= a3;
      *((_BYTE *)v28 + 10) |= a4;
      v38 = *a6;
      *a6 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
      return (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    }
    v28 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::GPUProcess::MediaCaptureAccess>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::GPUProcess::MediaCaptureAccess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::GPUProcess::MediaCaptureAccess,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::GPUProcess::MediaCaptureAccess>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v21, v28);
    goto LABEL_35;
  }
  v14 = v13;
  v15 = *(_QWORD *)(v13 + 16);
  if (__ldaxr((unsigned __int8 *)v15))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v15))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEABB3C](v15);
LABEL_8:
  ++*(_QWORD *)(v15 + 8);
  v17 = __ldxr((unsigned __int8 *)v15);
  if (v17 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v15))
      goto LABEL_13;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v15);
LABEL_13:
  *(_BYTE *)(v14 + 184) |= a2;
  *(_BYTE *)(v14 + 185) |= a3;
  *(_BYTE *)(v14 + 186) |= a4;
  v18 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v14 + 16));
}

unsigned __int8 *WebKit::GPUProcess::updateCaptureOrigin(uint64_t a1, const WebCore::SecurityOriginData *a2, uint64_t a3)
{
  unsigned __int8 *result;
  unsigned __int8 **v5;
  uint64_t v6;
  int v8;
  uint64_t v9;

  v9 = a3;
  result = (unsigned __int8 *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 120), &v9);
  if (result)
  {
    v5 = (unsigned __int8 **)result;
    v6 = *((_QWORD *)result + 2);
    if (__ldaxr((unsigned __int8 *)v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v6))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEABB3C](v6);
LABEL_6:
    ++*(_QWORD *)(v6 + 8);
    v8 = __ldxr((unsigned __int8 *)v6);
    if (v8 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v6))
        goto LABEL_11;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_11:
    WebKit::GPUConnectionToWebProcess::updateCaptureOrigin((WebKit::GPUConnectionToWebProcess *)v5, a2);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(v5[2]);
  }
  return result;
}

WTF::StringImpl *WebKit::GPUProcess::removeSession(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  WTF::StringImpl *result;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;

  v7 = a2;
  v3 = (uint64_t *)(a1 + 192);
  result = (WTF::StringImpl *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 192), &v7);
  v5 = *(_QWORD *)(a1 + 192);
  if (v5)
  {
    v6 = (WTF::StringImpl *)(v5 + 24 * *(unsigned int *)(v5 - 4));
    if (v6 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v6 = 0;
  }
  if (v6 != result)
    return WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::remove(v3, result);
  return result;
}

uint64_t WebKit::GPUProcess::webProcessConnectionCountForTesting(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = WebKit::GPUConnectionToWebProcess::gObjectCountForTesting;
  v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

WTF::MachSendRight *WebKit::GPUProcess::requestBitmapImageForCurrentTime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[72];
  uint64_t v12;

  v12 = a2;
  v7 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 120), &v12);
  v8 = *(_QWORD *)(a1 + 120);
  if (v8)
    v8 += 16 * *(unsigned int *)(v8 - 4);
  if (v8 == v7)
  {
    v11[0] = 0;
    v11[64] = 0;
  }
  else
  {
    WebKit::RemoteMediaPlayerManagerProxy::bitmapImageForCurrentTime(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 120), a3, v11);
  }
  v9 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 16))(v9, v11);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v11);
}

WebKit::RemoteSharedResourceCache *WebKit::RemoteSharedResourceCache::RemoteSharedResourceCache(WebKit::RemoteSharedResourceCache *this, WebKit::GPUConnectionToWebProcess *a2)
{
  WebCore::IOSurfacePool *v3;

  *((_DWORD *)this + 4) = 1;
  *(_QWORD *)this = off_1E34B7EB8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = &off_1E34B7F68;
  *((_WORD *)this + 16) = 0;
  *((_QWORD *)this + 5) = 0;
  v3 = (WebCore::IOSurfacePool *)WTF::MachSendRight::MachSendRight((WebKit::RemoteSharedResourceCache *)((char *)this + 48), (WebKit::GPUConnectionToWebProcess *)((char *)a2 + 88));
  WebCore::IOSurfacePool::create(v3);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  return this;
}

void WebKit::RemoteSharedResourceCache::~RemoteSharedResourceCache(unsigned int **this)
{
  void *v2;
  uint64_t v3;

  WTF::Ref<WebCore::IOSurfacePool,WTF::RawPtrTraits<WebCore::IOSurfacePool>,WTF::DefaultRefDerefTraits<WebCore::IOSurfacePool>>::~Ref(this + 7);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(this + 6));
  this[3] = (unsigned int *)&off_1E34B7F68;
  v3 = (uint64_t)this[5];
  if (v3)
    WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v3, v2);
  *this = (unsigned int *)&off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, v2);
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteSharedResourceCache::~RemoteSharedResourceCache(this);
  WTF::fastFree(v1, v2);
}

_QWORD *IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::~ThreadSafeObjectHeap(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = &off_1E34B7F68;
  v3 = a1[2];
  if (v3)
    WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v3, a2);
  return a1;
}

uint64_t WebKit::RemoteSharedResourceCache::addSerializedImageBuffer(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16[2];

  v16[0] = a2;
  v16[1] = 0;
  v3 = *a3;
  *a3 = 0;
  v15 = v3;
  result = IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::add(a1 + 24, v16, &v15);
  v6 = v15;
  v15 = 0;
  if (!v6)
    return result;
  v7 = *(_QWORD *)(v6 + 8);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEABB3C](v7);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 8);
  v10 = v9 - 1;
  *(_QWORD *)(v7 + 8) = v9 - 1;
  if (v9 == 1)
  {
    v14 = *(_QWORD *)(v7 + 16);
    v11 = *(_QWORD *)(v7 + 24);
    *(_QWORD *)(v7 + 24) = 0;
    v12 = v14 != 0;
  }
  else
  {
    v11 = 0;
    v12 = 1;
  }
  v13 = __ldxr((unsigned __int8 *)v7);
  if (v13 != 1)
  {
    __clrex();
LABEL_13:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v7);
    if (v10)
      return result;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v7))
    goto LABEL_13;
  if (v10)
    return result;
LABEL_14:
  if (v11)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (!v12)
    return WTF::fastFree((WTF *)v7, v5);
  return result;
}

uint64_t IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::add(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  unsigned __int8 *v6;
  uint64_t *v8;
  const void *v9;
  unsigned __int8 *v10;
  unsigned __int8 v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;

  v6 = (unsigned __int8 *)(a1 + 8);
  if (__ldaxr((unsigned __int8 *)(a1 + 8)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 8);
LABEL_5:
  v8 = (uint64_t *)(a1 + 16);
  v16 = a3;
  WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::HashTableTraits>::ensure<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::add(IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>)::{lambda(void)#1}>((uint64_t *)(a1 + 16), a2, &v16, (uint64_t)&v17);
  if (v18)
    goto LABEL_6;
  if (*(_BYTE *)(v17 + 32) && !*(_QWORD *)(v17 + 24))
  {
    v15 = *v8;
    if (!*v8 || (v15 += 56 * *(unsigned int *)(v15 - 4), v15 != v17))
    {
      if (v15 != v17)
        WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::remove((uint64_t *)(a1 + 16), v17);
    }
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v17 + 48))
  {
    std::optional<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::operator=[abi:sn180100]<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,void>((uint64_t *)(v17 + 40), a3);
LABEL_6:
    v10 = (unsigned __int8 *)(a1 + 9);
    v11 = atomic_load((unsigned __int8 *)(a1 + 9));
    if ((v11 & 1) != 0)
    {
      atomic_store(0, v10);
      WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v10, v9);
    }
LABEL_8:
    v12 = 1;
    goto LABEL_9;
  }
  v12 = 0;
LABEL_9:
  v13 = __ldxr(v6);
  if (v13 == 1)
  {
    if (!__stlxr(0, v6))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v12;
}

uint64_t IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::take@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, _QWORD *a3@<X8>, double a4@<D0>)
{
  unsigned __int8 *v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t result;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v21;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v29;
  double v30;
  int v31;

  v7 = (unsigned __int8 *)(a1 + 8);
  if (__ldaxr((unsigned __int8 *)(a1 + 8)))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEABB3C](a1 + 8);
    goto LABEL_5;
  }
  if (__stxr(1u, v7))
    goto LABEL_4;
LABEL_5:
  v9 = (uint64_t *)(a1 + 16);
  v29 = a2[2];
  v10 = a1 + 9;
  while (1)
  {
    v11 = *v9;
    if (!*v9)
      goto LABEL_27;
    v12 = *a2;
    v13 = a2[1];
    v14 = *(_DWORD *)(v11 - 8);
    LODWORD(v30) = -1640531527;
    WORD2(v30) = 0;
    BYTE6(v30) = 0;
    WTF::addArgs<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v30, v12, v13);
    result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v30);
    v16 = result & v14;
    v17 = v11 + 56 * (result & v14);
    v18 = *(_QWORD *)v17;
    v19 = *(_QWORD *)(v17 + 8);
    if (v12 == *(_QWORD *)v17 && v13 == v19)
    {
LABEL_18:
      v23 = *v9;
      if (!*v9)
        goto LABEL_23;
    }
    else
    {
      v21 = 1;
      while (v18 | v19)
      {
        v16 = (v16 + v21) & v14;
        v17 = v11 + 56 * v16;
        v18 = *(_QWORD *)v17;
        v19 = *(_QWORD *)(v17 + 8);
        ++v21;
        if (v12 == *(_QWORD *)v17 && v13 == v19)
          goto LABEL_18;
      }
      v23 = *v9;
      if (!*v9)
        goto LABEL_27;
      v17 = v23 + 56 * *(unsigned int *)(v23 - 4);
    }
    v23 += 56 * *(unsigned int *)(v23 - 4);
LABEL_23:
    if (v23 != v17)
    {
      if (*(_BYTE *)(v17 + 32) || (v24 = *(_QWORD *)(v17 + 16), v24 > v29))
      {
LABEL_28:
        result = WTF::GenericHashTraits<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::take<WebCore::ImageBuffer*>((uint64_t)a3, 0);
        goto LABEL_29;
      }
      if (v24 == v29)
        break;
    }
LABEL_27:
    v30 = a4;
    v31 = 2;
    if ((WTF::Condition::waitUntilUnchecked<WTF::Lock>(v10, v7, (WTF::TimeWithDynamicClockType *)&v30) & 1) == 0)
      goto LABEL_28;
  }
  if (!*(_BYTE *)(v17 + 48))
  {
    __break(1u);
    return result;
  }
  v26 = *(_QWORD *)(v17 + 40);
  *(_QWORD *)(v17 + 40) = 0;
  *a3 = v26;
  v27 = *v9;
  if (!*v9 || (v27 += 56 * *(unsigned int *)(v27 - 4), v27 != v17))
  {
    if (v27 != v17)
      result = (uint64_t)WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::remove(v9, v17);
  }
LABEL_29:
  v25 = __ldxr(v7);
  if (v25 == 1)
  {
    if (!__stlxr(0, v7))
      return result;
  }
  else
  {
    __clrex();
  }
  return WTF::Lock::unlockSlow((WTF::Lock *)v7);
}

uint64_t IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::remove(uint64_t a1, unint64_t *a2)
{
  unsigned __int8 *v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t result;
  void *v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  char v42;
  uint64_t v43;
  char v44;

  v4 = (unsigned __int8 *)(a1 + 8);
  if (__ldaxr((unsigned __int8 *)(a1 + 8)))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEABB3C](a1 + 8);
    goto LABEL_5;
  }
  if (__stxr(1u, v4))
    goto LABEL_4;
LABEL_5:
  v6 = a2[1];
  v7 = a2[2];
  v10 = *(_QWORD *)(a1 + 16);
  v8 = (uint64_t *)(a1 + 16);
  v9 = v10;
  v11 = *a2;
  if (v10
    || (WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::expand(v8, 0), (v9 = *v8) != 0))
  {
    v12 = *(_DWORD *)(v9 - 8);
  }
  else
  {
    v12 = 0;
  }
  LODWORD(v41) = -1640531527;
  WORD2(v41) = 0;
  BYTE6(v41) = 0;
  WTF::addArgs<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v41, v11, v6);
  result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v41);
  v15 = result & v12;
  v16 = v9 + 56 * (result & v12);
  v17 = *(_QWORD *)v16;
  v18 = *(_QWORD *)(v16 + 8);
  if (*(_OWORD *)v16 == 0)
  {
LABEL_17:
    *(_QWORD *)v16 = v11;
    *(_QWORD *)(v16 + 8) = v6;
    *(_QWORD *)&v41 = 0;
    *((_QWORD *)&v41 + 1) = v7;
    v21 = 1;
    v42 = 1;
    LOBYTE(v43) = 0;
    v44 = 0;
    *(_BYTE *)(v16 + 32) = 1;
    *(_OWORD *)(v16 + 16) = v41;
    std::__optional_storage_base<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,false>>(v16 + 40, (unsigned __int8 *)&v43);
    std::__optional_destruct_base<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,false>::~__optional_destruct_base[abi:sn180100](&v43, v22);
    v23 = *v8;
    if (*v8)
      v21 = *(_DWORD *)(v23 - 12) + 1;
    *(_DWORD *)(v23 - 12) = v21;
    v24 = *v8;
    if (*v8)
      v25 = *(_DWORD *)(v24 - 12);
    else
      v25 = 0;
    v26 = (*(_DWORD *)(v24 - 16) + v25);
    v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 > 2 * v26)
        goto LABEL_25;
    }
    else if (3 * v27 > 4 * v26)
    {
LABEL_25:
      v28 = 0;
      goto LABEL_26;
    }
    WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::expand(v8, (unint64_t *)v16);
    goto LABEL_25;
  }
  v19 = 0;
  v20 = 1;
  while (v11 != v17 || v6 != v18)
  {
    if (v17 == -1)
      v19 = v16;
    v15 = (v15 + v20) & v12;
    v16 = v9 + 56 * v15;
    v17 = *(_QWORD *)v16;
    v18 = *(_QWORD *)(v16 + 8);
    ++v20;
    if (*(_OWORD *)v16 == 0)
    {
      if (v19)
      {
        *(_QWORD *)(v19 + 48) = 0;
        *(_OWORD *)(v19 + 16) = 0u;
        *(_OWORD *)(v19 + 32) = 0u;
        *(_OWORD *)v19 = 0u;
        --*(_DWORD *)(*v8 - 16);
        v16 = v19;
      }
      goto LABEL_17;
    }
  }
  if (*(_BYTE *)(v16 + 32) || (v30 = *(_QWORD *)(v16 + 16), v30 > v7))
  {
    v28 = 0;
    v29 = 0;
    goto LABEL_30;
  }
  if (v30 != v7)
  {
    v28 = 0;
    *(_QWORD *)(v16 + 24) = v7;
    v29 = 1;
    *(_BYTE *)(v16 + 32) = 1;
    goto LABEL_30;
  }
  if (!*(_BYTE *)(v16 + 48))
  {
    __break(1u);
    return result;
  }
  v28 = *(_QWORD *)(v16 + 40);
  *(_QWORD *)(v16 + 40) = 0;
  v39 = *v8;
  if (!*v8 || (v39 += 56 * *(unsigned int *)(v39 - 4), v39 != v16))
  {
    if (v39 != v16)
      WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::remove(v8, v16);
  }
LABEL_26:
  v29 = 1;
LABEL_30:
  v31 = __ldxr(v4);
  if (v31 != 1)
  {
    __clrex();
    goto LABEL_34;
  }
  if (__stlxr(0, v4))
LABEL_34:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (!v28)
    return v29;
  v32 = *(_QWORD *)(v28 + 8);
  if (__ldaxr((unsigned __int8 *)v32))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v32))
  {
    goto LABEL_40;
  }
  MEMORY[0x19AEABB3C](v32);
LABEL_40:
  v34 = *(_QWORD *)(v32 + 8);
  v35 = v34 - 1;
  *(_QWORD *)(v32 + 8) = v34 - 1;
  if (v34 == 1)
  {
    v40 = *(_QWORD *)(v32 + 16);
    v36 = *(_QWORD *)(v32 + 24);
    *(_QWORD *)(v32 + 24) = 0;
    v37 = v40 != 0;
  }
  else
  {
    v36 = 0;
    v37 = 1;
  }
  v38 = __ldxr((unsigned __int8 *)v32);
  if (v38 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v32))
    {
      if (!v35)
        goto LABEL_48;
      return v29;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v32);
  if (!v35)
  {
LABEL_48:
    if (v36)
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
    if (!v37)
      WTF::fastFree((WTF *)v32, v14);
  }
  return v29;
}

uint64_t WebKit::RemoteBarcodeDetector::RemoteBarcodeDetector(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E34B7EF0;
  v11 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 16) = v11;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 8), a3);
  v12 = *(unsigned int **)(a3 + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  *(_QWORD *)(a1 + 24) = v12;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a4 + 24), a4);
  v14 = *(unsigned int **)(a4 + 24);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  *(_QWORD *)(a1 + 32) = v14;
  *(_QWORD *)(a1 + 40) = a5;
  *(_QWORD *)(a1 + 48) = a6;
  return a1;
}

void WebKit::RemoteBarcodeDetector::~RemoteBarcodeDetector(WebKit::RemoteBarcodeDetector *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  _DWORD *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  *(_QWORD *)this = off_1E34B7EF0;
  v3 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    do
    {
      v6 = __ldaxr(v3);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v3));
    if (!v7)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v4 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    do
    {
      v8 = __ldaxr(v4);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v4));
    if (!v9)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v5 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteBarcodeDetector::~RemoteBarcodeDetector(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebKit::RemoteBarcodeDetector::detect(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  _DWORD *v9;
  void *v10;
  uint64_t result;
  void *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  uint64_t v25[2];
  uint64_t v26;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v6 = (unsigned int *)(v5 + 16);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  WebKit::RemoteRenderingBackend::imageBuffer(v5, a2, &v26);
  if (v5)
  {
    do
    {
      v13 = __ldaxr(v6);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v6));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)(v5 + 16));
      (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 8) + 8))(v5 + 8);
    }
  }
  v8 = v26;
  if (!v26)
  {
    v25[0] = 0;
    v25[1] = 0;
    v15 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v15 + 16))(v15, v25);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    return WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v25, v16);
  }
  v9 = *(_DWORD **)(a1 + 16);
  ++v9[2];
  WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::Ref(v25, v8);
  (*(void (**)(_DWORD *, uint64_t *, uint64_t *))(*(_QWORD *)v9 + 16))(v9, v25, a3);
  result = (uint64_t)WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(v25, v10);
  if (v9[2] == 1)
    result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
  else
    --v9[2];
  v26 = 0;
  v17 = *(_QWORD *)(v8 + 8);
  if (__ldaxr((unsigned __int8 *)v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v17))
  {
    goto LABEL_16;
  }
  result = MEMORY[0x19AEABB3C](v17);
LABEL_16:
  v19 = *(_QWORD *)(v17 + 8);
  v20 = v19 - 1;
  *(_QWORD *)(v17 + 8) = v19 - 1;
  if (v19 == 1)
  {
    v24 = *(_QWORD *)(v17 + 16);
    v21 = *(_QWORD *)(v17 + 24);
    *(_QWORD *)(v17 + 24) = 0;
    v22 = v24 != 0;
  }
  else
  {
    v21 = 0;
    v22 = 1;
  }
  v23 = __ldxr((unsigned __int8 *)v17);
  if (v23 != 1)
  {
    __clrex();
LABEL_23:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v17);
    if (v20)
      return result;
    goto LABEL_24;
  }
  if (__stlxr(0, (unsigned __int8 *)v17))
    goto LABEL_23;
  if (v20)
    return result;
LABEL_24:
  if (v21)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  if (!v22)
    return WTF::fastFree((WTF *)v17, v12);
  return result;
}

uint64_t WebKit::RemoteFaceDetector::RemoteFaceDetector(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E34B7F18;
  v11 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 16) = v11;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 8), a3);
  v12 = *(unsigned int **)(a3 + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  *(_QWORD *)(a1 + 24) = v12;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a4 + 24), a4);
  v14 = *(unsigned int **)(a4 + 24);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  *(_QWORD *)(a1 + 32) = v14;
  *(_QWORD *)(a1 + 40) = a5;
  *(_QWORD *)(a1 + 48) = a6;
  return a1;
}

void WebKit::RemoteFaceDetector::~RemoteFaceDetector(WebKit::RemoteFaceDetector *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  _DWORD *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  *(_QWORD *)this = off_1E34B7F18;
  v3 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    do
    {
      v6 = __ldaxr(v3);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v3));
    if (!v7)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v4 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    do
    {
      v8 = __ldaxr(v4);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v4));
    if (!v9)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v5 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteFaceDetector::~RemoteFaceDetector(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebKit::RemoteFaceDetector::detect(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t result;
  void *v9;
  uint64_t v10;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  uint64_t v20[2];
  uint64_t v21;

  WebKit::RemoteRenderingBackend::imageBuffer(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), a2, &v21);
  v5 = v21;
  if (!v21)
  {
    v20[0] = 0;
    v20[1] = 0;
    v12 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v12 + 16))(v12, v20);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    return WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v20, v13);
  }
  v6 = *(_QWORD *)(a1 + 16);
  WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::Ref(v20, v21);
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v6 + 16))(v6, v20, a3);
  result = (uint64_t)WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(v20, v7);
  v21 = 0;
  v10 = *(_QWORD *)(v5 + 8);
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v10))
  {
    goto LABEL_7;
  }
  result = MEMORY[0x19AEABB3C](v10);
LABEL_7:
  v14 = *(_QWORD *)(v10 + 8);
  v15 = v14 - 1;
  *(_QWORD *)(v10 + 8) = v14 - 1;
  if (v14 == 1)
  {
    v19 = *(_QWORD *)(v10 + 16);
    v16 = *(_QWORD *)(v10 + 24);
    *(_QWORD *)(v10 + 24) = 0;
    v17 = v19 != 0;
  }
  else
  {
    v16 = 0;
    v17 = 1;
  }
  v18 = __ldxr((unsigned __int8 *)v10);
  if (v18 != 1)
  {
    __clrex();
LABEL_14:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v10);
    if (v15)
      return result;
    goto LABEL_15;
  }
  if (__stlxr(0, (unsigned __int8 *)v10))
    goto LABEL_14;
  if (v15)
    return result;
LABEL_15:
  if (v16)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (!v17)
    return WTF::fastFree((WTF *)v10, v9);
  return result;
}

uint64_t WebKit::RemoteTextDetector::RemoteTextDetector(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E34B7F40;
  v11 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 16) = v11;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 8), a3);
  v12 = *(unsigned int **)(a3 + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  *(_QWORD *)(a1 + 24) = v12;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a4 + 24), a4);
  v14 = *(unsigned int **)(a4 + 24);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  *(_QWORD *)(a1 + 32) = v14;
  *(_QWORD *)(a1 + 40) = a5;
  *(_QWORD *)(a1 + 48) = a6;
  return a1;
}

void WebKit::RemoteTextDetector::~RemoteTextDetector(WebKit::RemoteTextDetector *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  _DWORD *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  *(_QWORD *)this = off_1E34B7F40;
  v3 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    do
    {
      v6 = __ldaxr(v3);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v3));
    if (!v7)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v4 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    do
    {
      v8 = __ldaxr(v4);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v4));
    if (!v9)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v5 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteTextDetector::~RemoteTextDetector(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebKit::RemoteTextDetector::detect(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  _DWORD *v9;
  void *v10;
  uint64_t result;
  void *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  uint64_t v25[2];
  uint64_t v26;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v6 = (unsigned int *)(v5 + 16);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  WebKit::RemoteRenderingBackend::imageBuffer(v5, a2, &v26);
  if (v5)
  {
    do
    {
      v13 = __ldaxr(v6);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v6));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)(v5 + 16));
      (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 8) + 8))(v5 + 8);
    }
  }
  v8 = v26;
  if (!v26)
  {
    v25[0] = 0;
    v25[1] = 0;
    v15 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v15 + 16))(v15, v25);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    return WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v25, v16);
  }
  v9 = *(_DWORD **)(a1 + 16);
  ++v9[2];
  WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::Ref(v25, v8);
  (*(void (**)(_DWORD *, uint64_t *, uint64_t *))(*(_QWORD *)v9 + 16))(v9, v25, a3);
  result = (uint64_t)WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(v25, v10);
  if (v9[2] == 1)
    result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
  else
    --v9[2];
  v26 = 0;
  v17 = *(_QWORD *)(v8 + 8);
  if (__ldaxr((unsigned __int8 *)v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v17))
  {
    goto LABEL_16;
  }
  result = MEMORY[0x19AEABB3C](v17);
LABEL_16:
  v19 = *(_QWORD *)(v17 + 8);
  v20 = v19 - 1;
  *(_QWORD *)(v17 + 8) = v19 - 1;
  if (v19 == 1)
  {
    v24 = *(_QWORD *)(v17 + 16);
    v21 = *(_QWORD *)(v17 + 24);
    *(_QWORD *)(v17 + 24) = 0;
    v22 = v24 != 0;
  }
  else
  {
    v21 = 0;
    v22 = 1;
  }
  v23 = __ldxr((unsigned __int8 *)v17);
  if (v23 != 1)
  {
    __clrex();
LABEL_23:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v17);
    if (v20)
      return result;
    goto LABEL_24;
  }
  if (__stlxr(0, (unsigned __int8 *)v17))
    goto LABEL_23;
  if (v20)
    return result;
LABEL_24:
  if (v21)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  if (!v22)
    return WTF::fastFree((WTF *)v17, v12);
  return result;
}

void WebKit::ShapeDetection::ObjectHeap::~ObjectHeap(WebKit::ShapeDetection::ObjectHeap *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *((_QWORD *)this + 4);
  if (v3)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteTextDetector,WTF::RawPtrTraits<WebKit::RemoteTextDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextDetector>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteTextDetector,WTF::RawPtrTraits<WebKit::RemoteTextDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextDetector>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteTextDetector,WTF::RawPtrTraits<WebKit::RemoteTextDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextDetector>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteTextDetector,WTF::RawPtrTraits<WebKit::RemoteTextDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextDetector>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 3);
  if (v4)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteTextDetector,WTF::RawPtrTraits<WebKit::RemoteTextDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextDetector>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteTextDetector,WTF::RawPtrTraits<WebKit::RemoteTextDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextDetector>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteTextDetector,WTF::RawPtrTraits<WebKit::RemoteTextDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextDetector>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteTextDetector,WTF::RawPtrTraits<WebKit::RemoteTextDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextDetector>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 2);
  if (v5)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteTextDetector,WTF::RawPtrTraits<WebKit::RemoteTextDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextDetector>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteTextDetector,WTF::RawPtrTraits<WebKit::RemoteTextDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextDetector>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteTextDetector,WTF::RawPtrTraits<WebKit::RemoteTextDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextDetector>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteTextDetector,WTF::RawPtrTraits<WebKit::RemoteTextDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextDetector>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v5, a2);
  WTF::WeakPtrFactory<WebCore::NowPlayingManagerClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::HashTableTraits>::add<WebKit::RemoteBarcodeDetector&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v27 = 0;
        else
          v27 = *(unsigned int *)(v8 - 4);
        v32 = 0;
        v33 = v8 + 16 * v27;
        goto LABEL_36;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  v20 = (unsigned int *)(a3 + 8);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 + 1, v20));
  result = (uint64_t *)v16[1];
  v16[1] = a3;
  if (result)
  {
    v22 = (unsigned int *)(result + 1);
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, (unsigned int *)result + 2);
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
    }
  }
  v25 = *v6;
  if (*v6)
    v26 = *(_DWORD *)(v25 - 12) + 1;
  else
    v26 = 1;
  *(_DWORD *)(v25 - 12) = v26;
  v28 = *v6;
  if (*v6)
    v29 = *(_DWORD *)(v28 - 12);
  else
    v29 = 0;
  v30 = (*(_DWORD *)(v28 - 16) + v29);
  v31 = *(unsigned int *)(v28 - 4);
  if (v31 > 0x400)
  {
    if (v31 <= 2 * v30)
    {
LABEL_29:
      result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6, v16);
      v16 = result;
      v28 = *v6;
      if (*v6)
        v31 = *(unsigned int *)(v28 - 4);
      else
        v31 = 0;
    }
  }
  else if (3 * v31 <= 4 * v30)
  {
    goto LABEL_29;
  }
  v33 = v28 + 16 * v31;
  v32 = 1;
LABEL_36:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v33;
  *(_BYTE *)(a4 + 16) = v32;
  return result;
}

unsigned int *WebKit::ShapeDetection::ObjectHeap::removeObject(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int *result;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;

  v13 = a2;
  v3 = a1 + 2;
  v4 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1 + 2, &v13);
  v5 = a1[2];
  if (v5)
  {
    v6 = (_QWORD *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == v4)
      goto LABEL_8;
  }
  else
  {
    if (!v4)
      goto LABEL_8;
    v6 = 0;
  }
  if (v6 != v4)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(v3, v4);
LABEL_8:
  v7 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1 + 3, &v13);
  v8 = a1[3];
  if (v8)
  {
    v9 = (_QWORD *)(v8 + 16 * *(unsigned int *)(v8 - 4));
    if (v9 == v7)
      goto LABEL_15;
  }
  else
  {
    if (!v7)
      goto LABEL_15;
    v9 = 0;
  }
  if (v9 != v7)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(a1 + 3, v7);
LABEL_15:
  result = (unsigned int *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1 + 4, &v13);
  v11 = a1[4];
  if (v11)
  {
    v12 = (unsigned int *)(v11 + 16 * *(unsigned int *)(v11 - 4));
    if (v12 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v12 = 0;
  }
  if (v12 != result)
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(a1 + 4, result);
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WTF::StringImpl **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WTF::StringImpl *)-1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebKit::RemoteAudioHardwareListenerProxy **v4;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WebKit::RemoteAudioHardwareListenerProxy **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WebKit::RemoteAudioHardwareListenerProxy *)-1)
        std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>::reset[abi:sn180100](v4, 0);
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WebKit::RemoteAudioHardwareListenerProxy *std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>::reset[abi:sn180100](WebKit::RemoteAudioHardwareListenerProxy **a1, WebKit::RemoteAudioHardwareListenerProxy *a2)
{
  WebKit::RemoteAudioHardwareListenerProxy *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::RemoteAudioHardwareListenerProxy::~RemoteAudioHardwareListenerProxy(result, a2);
    return (WebKit::RemoteAudioHardwareListenerProxy *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::LayerHostingContext>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::LayerHostingContext>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::LayerHostingContext>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::LayerHostingContext>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  id **v4;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (id **)(a1 + 16);
    do
    {
      if (*(v4 - 2) != (id *)-1)
        std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100](v4, 0);
      v4 += 3;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

unsigned int ***std::unique_ptr<WebKit::RemoteMediaEngineConfigurationFactoryProxy>::reset[abi:sn180100](unsigned int ***result, unsigned int **a2)
{
  unsigned int **v2;
  void *v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    *v2 = (unsigned int *)&off_1E34B0558;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v2 + 1, a2);
    return (unsigned int ***)WTF::fastFree((WTF *)v2, v3);
  }
  return result;
}

WebKit::RemoteLegacyCDMFactoryProxy *std::unique_ptr<WebKit::RemoteLegacyCDMFactoryProxy>::reset[abi:sn180100](WebKit::RemoteLegacyCDMFactoryProxy **a1, WebKit::RemoteLegacyCDMFactoryProxy *a2)
{
  WebKit::RemoteLegacyCDMFactoryProxy *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::RemoteLegacyCDMFactoryProxy::~RemoteLegacyCDMFactoryProxy(result, a2);
    return (WebKit::RemoteLegacyCDMFactoryProxy *)WTF::fastFree(v4, v5);
  }
  return result;
}

WebKit::RemoteCDMFactoryProxy *std::unique_ptr<WebKit::RemoteCDMFactoryProxy>::reset[abi:sn180100](WebKit::RemoteCDMFactoryProxy **a1, WebKit::RemoteCDMFactoryProxy *a2)
{
  WebKit::RemoteCDMFactoryProxy *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::RemoteCDMFactoryProxy::~RemoteCDMFactoryProxy(result, a2);
    return (WebKit::RemoteCDMFactoryProxy *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebKit::RemoteGPU **v4;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WebKit::RemoteGPU **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WebKit::RemoteGPU *)-1)
        v4 = IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>::~ScopedActiveMessageReceiveQueue(v4);
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WebKit::RemoteGPU **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>::~ScopedActiveMessageReceiveQueue(WebKit::RemoteGPU **a1)
{
  WebKit::RemoteGPU *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>(a1);
    v2 = *a1;
    *a1 = 0;
    if (v2)
    {
      v3 = (unsigned int *)((char *)v2 + 8);
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, (unsigned int *)v2 + 2);
        (*(void (**)(WebKit::RemoteGPU *))(*(_QWORD *)v2 + 8))(v2);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

WebKit::RemoteGPU *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>(WebKit::RemoteGPU **a1)
{
  WebKit::RemoteGPU *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  WebKit::RemoteGPU::stopListeningForIPC(*a1);
  result = *a1;
  *a1 = 0;
  if (result)
  {
    v3 = (unsigned int *)((char *)result + 8);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)result + 2);
      return (WebKit::RemoteGPU *)(*(uint64_t (**)(WebKit::RemoteGPU *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -1)
        v4 = IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>::~ScopedActiveMessageReceiveQueue(v4);
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>::~ScopedActiveMessageReceiveQueue(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>(a1);
    v2 = *a1;
    *a1 = 0;
    if (v2)
    {
      v3 = (unsigned int *)(v2 + 16);
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, (unsigned int *)(v2 + 16));
        (*(void (**)(uint64_t))(*(_QWORD *)(v2 + 8) + 8))(v2 + 8);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

uint64_t IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  v6 = *a1;
  v1 = v6;
  *a1 = 0;
  WebKit::RemoteGraphicsContextGL::stopListeningForIPC(v1, &v6);
  result = v6;
  v6 = 0;
  if (result)
  {
    v3 = (unsigned int *)(result + 16);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)(result + 16));
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 8))(result + 8);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebKit::RemoteRenderingBackend **v4;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WebKit::RemoteRenderingBackend **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WebKit::RemoteRenderingBackend *)-1)
        v4 = IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>::~ScopedActiveMessageReceiveQueue(v4);
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WebKit::RemoteRenderingBackend *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>(WebKit::RemoteRenderingBackend **a1)
{
  WebKit::RemoteRenderingBackend *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  WebKit::RemoteRenderingBackend::stopListeningForIPC(*a1);
  result = *a1;
  *a1 = 0;
  if (result)
  {
    v3 = (unsigned int *)((char *)result + 16);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)result + 4);
      return (WebKit::RemoteRenderingBackend *)(*(uint64_t (**)(uint64_t))(*((_QWORD *)result + 1) + 8))((uint64_t)result + 8);
    }
  }
  return result;
}

unsigned int **WTF::WeakPtrFactory<WebCore::NowPlayingManagerClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(unsigned int **a1, void *a2)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  if (*a1)
  {
    *((_QWORD *)*a1 + 1) = 0;
    v4 = *a1;
    *a1 = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

uint64_t std::make_unique[abi:sn180100]<WebKit::UserMediaCaptureManagerProxy,WTF::UniqueRef<WebKit::GPUProxyForCapture>>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = WTF::fastMalloc((WTF *)0x50);
  v5 = *a1;
  *a1 = 0;
  v7 = v5;
  *a2 = WebKit::UserMediaCaptureManagerProxy::UserMediaCaptureManagerProxy(v4, &v7);
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

void std::default_delete<WebKit::GPUProxyForCapture>::operator()[abi:sn180100](int a1, WTF *this)
{
  unsigned __int8 *v3;

  if (this)
  {
    v3 = (unsigned __int8 *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v3)
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, this);
    WTF::fastFree(this, this);
  }
}

void WebKit::GPUProxyForCapture::~GPUProxyForCapture(WebKit::GPUProxyForCapture *this, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
}

{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  WTF::fastFree(this, a2);
}

void IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::~ThreadSafeObjectHeap(_QWORD *a1, void *a2)
{
  uint64_t v2;

  *a1 = &off_1E34B7F68;
  v2 = a1[2];
  if (v2)
    WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v2, a2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      if (*(v4 - 5) != -1)
        v4 = std::__optional_destruct_base<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,false>::~__optional_destruct_base[abi:sn180100](v4, a2);
      v4 += 7;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t *std::__optional_destruct_base<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  if (!*((_BYTE *)a1 + 8))
    return a1;
  v3 = *a1;
  *a1 = 0;
  if (!v3)
    return a1;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEABB3C](v4);
LABEL_7:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return a1;
      goto LABEL_15;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return a1;
LABEL_15:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return a1;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteTextDetector,WTF::RawPtrTraits<WebKit::RemoteTextDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextDetector>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteTextDetector,WTF::RawPtrTraits<WebKit::RemoteTextDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextDetector>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteTextDetector,WTF::RawPtrTraits<WebKit::RemoteTextDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextDetector>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteTextDetector,WTF::RawPtrTraits<WebKit::RemoteTextDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextDetector>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      if (*(_QWORD *)(a1 + 16 * i) != -1)
      {
        v5 = a1 + 16 * i;
        v6 = *(unsigned int **)(v5 + 8);
        *(_QWORD *)(v5 + 8) = 0;
        if (v6)
        {
          v7 = v6 + 2;
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
          {
            atomic_store(1u, v6 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
          }
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

unsigned int *WTF::ThreadSafeRefCounted<WebKit::RemoteSharedResourceCache,(WTF::DestructionThread)0>::deref(unsigned int *result)
{
  unsigned int v1;
  unsigned int v2;
  WTF *v3;
  void *v4;

  do
  {
    v1 = __ldaxr(result);
    v2 = v1 - 1;
  }
  while (__stlxr(v2, result));
  if (!v2)
  {
    atomic_store(1u, result);
    WebKit::RemoteSharedResourceCache::~RemoteSharedResourceCache((unsigned int **)result - 2);
    return (unsigned int *)WTF::fastFree(v3, v4);
  }
  return result;
}

uint64_t *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteVideoFrameObjectHeap,WTF::RefPtr<WebKit::RemoteVideoFrameObjectHeap,WTF::RawPtrTraits<WebKit::RemoteVideoFrameObjectHeap>,WTF::DefaultRefDerefTraits<WebKit::RemoteVideoFrameObjectHeap>>>::~ScopedActiveMessageReceiveQueue(uint64_t *a1)
{
  void *v2;
  uint64_t v3;

  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteVideoFrameObjectHeap,WTF::RefPtr<WebKit::RemoteVideoFrameObjectHeap,WTF::RawPtrTraits<WebKit::RemoteVideoFrameObjectHeap>,WTF::DefaultRefDerefTraits<WebKit::RemoteVideoFrameObjectHeap>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteVideoFrameObjectHeap,WTF::RawPtrTraits<WebKit::RemoteVideoFrameObjectHeap>,WTF::DefaultRefDerefTraits<WebKit::RemoteVideoFrameObjectHeap>>>(a1);
    v3 = *a1;
    *a1 = 0;
    if (v3)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), v2);
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

unsigned __int8 *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteVideoFrameObjectHeap,WTF::RefPtr<WebKit::RemoteVideoFrameObjectHeap,WTF::RawPtrTraits<WebKit::RemoteVideoFrameObjectHeap>,WTF::DefaultRefDerefTraits<WebKit::RemoteVideoFrameObjectHeap>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteVideoFrameObjectHeap,WTF::RawPtrTraits<WebKit::RemoteVideoFrameObjectHeap>,WTF::DefaultRefDerefTraits<WebKit::RemoteVideoFrameObjectHeap>>>(uint64_t *a1)
{
  uint64_t v1;
  unsigned __int8 *result;
  void *v3;

  v1 = *a1;
  *a1 = 0;
  result = (unsigned __int8 *)WebKit::RemoteVideoFrameObjectHeap::close(v1);
  if (v1)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v1 + 16), v3);
  return result;
}

uint64_t *IPC::ScopedActiveMessageReceiveQueue<WebKit::LibWebRTCCodecsProxy,WTF::RefPtr<WebKit::LibWebRTCCodecsProxy,WTF::RawPtrTraits<WebKit::LibWebRTCCodecsProxy>,WTF::DefaultRefDerefTraits<WebKit::LibWebRTCCodecsProxy>>>::~ScopedActiveMessageReceiveQueue(uint64_t *a1)
{
  void *v3;
  uint64_t v4;

  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::LibWebRTCCodecsProxy,WTF::RefPtr<WebKit::LibWebRTCCodecsProxy,WTF::RawPtrTraits<WebKit::LibWebRTCCodecsProxy>,WTF::DefaultRefDerefTraits<WebKit::LibWebRTCCodecsProxy>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::LibWebRTCCodecsProxy,WTF::RawPtrTraits<WebKit::LibWebRTCCodecsProxy>,WTF::DefaultRefDerefTraits<WebKit::LibWebRTCCodecsProxy>>>(a1);
    v4 = *a1;
    *a1 = 0;
    if (v4)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), v3);
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

unsigned __int8 *IPC::ScopedActiveMessageReceiveQueue<WebKit::LibWebRTCCodecsProxy,WTF::RefPtr<WebKit::LibWebRTCCodecsProxy,WTF::RawPtrTraits<WebKit::LibWebRTCCodecsProxy>,WTF::DefaultRefDerefTraits<WebKit::LibWebRTCCodecsProxy>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::LibWebRTCCodecsProxy,WTF::RawPtrTraits<WebKit::LibWebRTCCodecsProxy>,WTF::DefaultRefDerefTraits<WebKit::LibWebRTCCodecsProxy>>>(uint64_t *a1)
{
  uint64_t v1;
  unsigned __int8 *result;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *a1;
  v1 = v5;
  *a1 = 0;
  result = (unsigned __int8 *)WebKit::LibWebRTCCodecsProxy::stopListeningForIPC(v1, &v5);
  v4 = v5;
  v5 = 0;
  if (v4)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), v3);
  return result;
}

IPC::Encoder *IPC::MessageSender::send<Messages::GPUProcessProxy::SetHasAV1HardwareDecoder>(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 58;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v6, 1uLL, 1) = a3;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v11, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::LayerHostingContext>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::LayerHostingContext>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::LayerHostingContext>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::LayerHostingContext>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::LayerHostingContext>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::LayerHostingContext>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::LayerHostingContext>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::LayerHostingContext>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::LayerHostingContext>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::LayerHostingContext>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::LayerHostingContext>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::LayerHostingContext>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = v5;
    do
    {
      v11 = (uint64_t *)(v4 + 24 * v9);
      v12 = *v11;
      if (*v11 != -1)
      {
        v13 = v11[1];
        if (v12 | v13)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = WTF::PairHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::hash(v12, v13);
          v17 = 0;
          do
          {
            v18 = v16 & v15;
            v19 = (_OWORD *)(v14 + 24 * (v16 & v15));
            v16 = ++v17 + (v16 & v15);
          }
          while (*v19 != 0);
          v20 = v14 + 24 * v18;
          std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100]((id **)(v20 + 16), 0);
          *v19 = *(_OWORD *)v11;
          v21 = v4 + 24 * v9;
          v22 = *(_QWORD *)(v21 + 16);
          v21 += 16;
          *(_QWORD *)v21 = 0;
          *(_QWORD *)(v20 + 16) = v22;
          std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100]((id **)v21, 0);
        }
        else
        {
          std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100]((id **)(v4 + 24 * v9 + 16), 0);
        }
      }
      ++v9;
    }
    while (v9 != v10);
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

unint64_t WTF::PairHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::hash(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v2 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
  v3 = 9 * ((v2 + ~(v2 << 13)) ^ ((v2 + ~(v2 << 13)) >> 8));
  v4 = (v3 ^ (v3 >> 15)) + ~((v3 ^ (v3 >> 15)) << 27);
  v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  return (0xD7862706ELL
        * (unint64_t)(277951225 * ((v4 >> 31) ^ v4)
                           + 95187966 * ((v7 >> 31) ^ v7))) >> 4;
}

WTF::ThreadSafeWeakPtrControlBlock *WTF::makeUniqueRefWithoutFastMallocCheck<WebKit::GPUProxyForCapture,WebKit::GPUConnectionToWebProcess &>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  WTF::ThreadSafeWeakPtrControlBlock *result;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = off_1E34B7F88;
  result = *(WTF::ThreadSafeWeakPtrControlBlock **)(a1 + 16);
  if (result)
    result = WTF::ThreadSafeWeakPtrControlBlock::weakRef(result);
  v4[1] = result;
  v4[2] = a1;
  *a2 = v4;
  return result;
}

uint64_t WebKit::GPUProxyForCapture::connection(WebKit::GPUProxyForCapture *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(*((unsigned __int8 **)this + 1), *((_QWORD *)this + 2), &v4);
  v1 = v4;
  v2 = *(_QWORD *)(v4 + 48);
  v4 = 0;
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v1 + 16));
  return v2;
}

uint64_t WebKit::GPUProxyForCapture::willStartCapture(uint64_t a1, int a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;

  v2 = 0;
  switch(a2)
  {
    case 1:
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(*(unsigned __int8 **)(a1 + 8), *(_QWORD *)(a1 + 16), &v8);
      v3 = v8;
      v4 = v8[184];
      goto LABEL_4;
    case 3:
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(*(unsigned __int8 **)(a1 + 8), *(_QWORD *)(a1 + 16), &v8);
      v6 = v8;
      v2 = v8[185];
      v8 = 0;
      v7 = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v6 + 2));
      if ((_DWORD)v2)
      {
        WebCore::MediaSessionManageriOS::providePresentingApplicationPID((WebCore::MediaSessionManageriOS *)v7);
        v2 = 1;
      }
      break;
    case 4:
    case 5:
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(*(unsigned __int8 **)(a1 + 8), *(_QWORD *)(a1 + 16), &v8);
      v3 = v8;
      v4 = v8[186];
LABEL_4:
      v2 = v4 != 0;
      v8 = 0;
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v3 + 2));
      break;
    default:
      return v2;
  }
  return v2;
}

uint64_t WebKit::GPUProxyForCapture::logger(WebKit::GPUProxyForCapture *this)
{
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v14;

  v2 = (unsigned __int8 *)*((_QWORD *)this + 1);
  if (v2)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v2, *((_QWORD *)this + 2), &v14);
    v3 = v14;
  }
  else
  {
    v3 = 0;
    v14 = 0;
  }
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    v5 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v5 + 8) = 1;
    *(_QWORD *)v5 = off_1E34B8110;
    *(_BYTE *)(v5 + 12) = 1;
    *(_QWORD *)(v5 + 16) = v3;
    v6 = *(unsigned int **)(v3 + 40);
    *(_QWORD *)(v3 + 40) = v5;
    if (v6)
    {
      v7 = v6 + 2;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v6 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
      }
    }
    v4 = *(_QWORD *)(v3 + 40);
    v10 = *(_QWORD *)(v3 + 128);
    v11 = v10 >= 0 || v10 == -1;
    if (*(_QWORD *)(v4 + 16) == v3)
      *(_BYTE *)(v4 + 12) = v11;
  }
  v12 = v14;
  v14 = 0;
  if (v12)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v12 + 16));
  return v4;
}

BOOL WebKit::GPUProxyForCapture::setCaptureAttributionString(WebKit::GPUProxyForCapture *this)
{
  unsigned __int8 *v2;
  _BOOL8 v3;
  unsigned __int8 *v4;
  unsigned __int8 *v6;

  v2 = (unsigned __int8 *)*((_QWORD *)this + 1);
  if (v2)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v2, *((_QWORD *)this + 2), &v6);
    v2 = v6;
  }
  else
  {
    v6 = 0;
  }
  v3 = WebKit::GPUConnectionToWebProcess::setCaptureAttributionString((WebKit::GPUConnectionToWebProcess *)v2);
  v4 = v6;
  v6 = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v4 + 2));
  return v3;
}

uint64_t WebKit::GPUProxyForCapture::resourceOwner(WebKit::GPUProxyForCapture *this)
{
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = (unsigned __int8 *)*((_QWORD *)this + 1);
  if (!v2)
    return 88;
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v2, *((_QWORD *)this + 2), &v6);
  v5 = v6;
  v3 = v6 + 88;
  v6 = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v5 + 16));
  return v3;
}

void WebKit::GPUProxyForCapture::setTCCIdentity(WebKit::GPUProxyForCapture *this)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;

  v2 = (unsigned __int8 *)*((_QWORD *)this + 1);
  if (v2)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v2, *((_QWORD *)this + 2), &v4);
    v2 = v4;
  }
  else
  {
    v4 = 0;
  }
  WebKit::GPUConnectionToWebProcess::setTCCIdentity((WebKit::GPUConnectionToWebProcess *)v2);
  v3 = v4;
  v4 = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v3 + 2));
}

BOOL WebKit::GPUProxyForCapture::setCurrentMediaEnvironment(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  WebCore::RealtimeMediaSourceCenter *v6;
  uint64_t v7;
  _BOOL8 v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;

  v4 = *(unsigned __int8 **)(a1 + 8);
  if (v4)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v4, *(_QWORD *)(a1 + 16), &v12);
    v5 = v12;
  }
  else
  {
    v5 = 0;
    v12 = 0;
  }
  v14 = a2;
  v6 = (WebCore::RealtimeMediaSourceCenter *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((_DWORD **)(v5 + 352), &v14, &v13);
  v7 = v12;
  v12 = 0;
  if (v7)
    v6 = (WebCore::RealtimeMediaSourceCenter *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v7 + 16));
  if (v13)
    v8 = *((_DWORD *)v13 + 1) != 0;
  else
    v8 = 0;
  WebCore::RealtimeMediaSourceCenter::singleton(v6);
  WebCore::RealtimeMediaSourceCenter::setCurrentMediaEnvironment();
  v10 = v13;
  v13 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  return v8;
}

unsigned __int8 *WebKit::GPUProxyForCapture::startProducingData(unsigned __int8 *result, int a2)
{
  WebKit::GPUConnectionToWebProcess *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  WebKit::GPUConnectionToWebProcess *v11;
  WebKit::RemoteMediaSessionHelperProxy *v12;
  WebKit::GPUConnectionToWebProcess *v13;
  unsigned int v14;
  unsigned int v15;
  WebKit::GPUConnectionToWebProcess *v16;
  WebKit::GPUConnectionToWebProcess *v17;

  if (a2 == 3)
  {
    if (*((_QWORD *)result + 1))
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(*((unsigned __int8 **)result + 1), *((_QWORD *)result + 2), &v17);
      v11 = v17;
    }
    else
    {
      v11 = 0;
      v17 = 0;
    }
    v12 = WebKit::GPUConnectionToWebProcess::mediaSessionHelperProxy(v11);
    result = WebKit::RemoteMediaSessionHelperProxy::overridePresentingApplicationPIDIfNeeded(v12);
  }
  else
  {
    if (a2 != 1)
      return result;
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(*((unsigned __int8 **)result + 1), *((_QWORD *)result + 2), &v17);
    v2 = v17;
    v3 = *((_QWORD *)v17 + 9);
    v4 = (unsigned int *)(v3 + 112);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    result = (unsigned __int8 *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(v3 + 120));
    v6 = result;
    v8 = v7;
    v9 = *(_QWORD *)(v3 + 120);
    if (v9)
      v10 = (unsigned __int8 *)(v9 + 16 * *(unsigned int *)(v9 - 4));
    else
      v10 = 0;
    if (v10 == result)
      goto LABEL_29;
    do
    {
      v13 = (WebKit::GPUConnectionToWebProcess *)*((_QWORD *)v6 + 1);
      *((_BYTE *)v13 + 152) = v13 == v2;
      result = (unsigned __int8 *)*((_QWORD *)v13 + 18);
      if (result)
        result = WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManager::notifyLastToCaptureAudioChanged((WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManager *)result);
      while (1)
      {
        v6 += 16;
        if (v6 == v8)
          break;
        if ((unint64_t)(*(_QWORD *)v6 + 1) > 1)
          goto LABEL_18;
      }
      v6 = v8;
LABEL_18:
      ;
    }
    while (v6 != v10);
    if (v3)
    {
LABEL_29:
      do
      {
        v14 = __ldaxr(v4);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v4));
      if (!v15)
      {
        atomic_store(1u, (unsigned int *)(v3 + 112));
        result = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      }
    }
  }
  v16 = v17;
  v17 = 0;
  if (v16)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v16 + 2));
  return result;
}

uint64_t WebKit::GPUProxyForCapture::remoteVideoFrameObjectHeap(WebKit::GPUProxyForCapture *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(*((unsigned __int8 **)this + 1), *((_QWORD *)this + 2), &v4);
  v1 = v4;
  v2 = *(_QWORD *)(v4 + 192);
  v4 = 0;
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v1 + 16));
  return v2;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

WebKit::RemoteRenderingBackend **WTF::HashMapEnsureTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::translate<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::GPUConnectionToWebProcess::createRenderingBackend(WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::StreamServerConnectionHandle &&)::$_0>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  WebKit::RemoteRenderingBackend **v3;
  WebKit::RemoteRenderingBackend *v5;

  *a1 = a2;
  v3 = (WebKit::RemoteRenderingBackend **)(a1 + 1);
  WebKit::GPUConnectionToWebProcess::createRenderingBackend(WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::StreamServerConnectionHandle &&)::$_0::operator()(&v5, a3);
  IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>::operator=(v3, &v5);
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>::~ScopedActiveMessageReceiveQueue(&v5);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v13 = 0;
  if (v7)
  {
    v15 = v7;
    v16 = v6;
    do
    {
      if (*(_QWORD *)v16 != -1)
      {
        if (*(_QWORD *)v16)
        {
          v17 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::reinsert(*a1, (_QWORD *)v16);
          IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>::~ScopedActiveMessageReceiveQueue((WebKit::RemoteRenderingBackend **)(v16 + 8));
          if (v16 == a3)
            v13 = v17;
        }
        else
        {
          IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>::~ScopedActiveMessageReceiveQueue((WebKit::RemoteRenderingBackend **)(v16 + 8));
        }
      }
      v16 += 16;
      --v15;
    }
    while (v15);
    goto LABEL_16;
  }
  result = 0;
  if (v6)
  {
LABEL_16:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v13;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::reinsert(uint64_t a1, _QWORD *a2)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  if (a1)
    v3 = *(_DWORD *)(a1 - 8);
  else
    v3 = 0;
  v4 = (*a2 + ~(*a2 << 32)) ^ ((*a2 + ~(*a2 << 32)) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((unint64_t)(v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  v8 = 1;
  do
  {
    v9 = v7;
    v10 = *(_QWORD *)(a1 + 16 * v7);
    v7 = (v7 + v8++) & v3;
  }
  while (v10);
  v11 = a1 + 16 * v9;
  IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>::~ScopedActiveMessageReceiveQueue((WebKit::RemoteRenderingBackend **)(v11 + 8));
  *(_QWORD *)v11 = *a2;
  *(_QWORD *)(v11 + 8) = a2[1];
  a2[1] = 0;
  return v11;
}

unsigned int **WebKit::GPUConnectionToWebProcess::createRenderingBackend(WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::StreamServerConnectionHandle &&)::$_0::operator()(_QWORD *a1, uint64_t a2)
{
  WebKit::GPUConnectionToWebProcess *v3;
  uint64_t v4;
  unsigned int *v6;
  WebKit::RemoteRenderingBackend *v7;

  v3 = *(WebKit::GPUConnectionToWebProcess **)(a2 + 8);
  v4 = **(_QWORD **)(a2 + 16);
  v6 = *(unsigned int **)a2;
  *(_QWORD *)a2 = 0;
  WebKit::RemoteRenderingBackend::create(v3, v4, (uint64_t *)&v6, &v7);
  *a1 = v7;
  v7 = 0;
  return WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(&v6);
}

WebKit::RemoteRenderingBackend **WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, uint64_t a2)
{
  WebKit::RemoteRenderingBackend **result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)a2 = -1;
  result = IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>::~ScopedActiveMessageReceiveQueue((WebKit::RemoteRenderingBackend **)(a2 + 8));
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (WebKit::RemoteRenderingBackend **)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v3);
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 16 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = v5;
    do
    {
      v13 = (uint64_t *)(v4 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 16 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (uint64_t *)(v15 + 16 * v22);
          IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>::~ScopedActiveMessageReceiveQueue(v24 + 1);
          *v24 = *v13;
          v25 = (uint64_t *)(v4 + 16 * v11);
          v26 = v25[1];
          ++v25;
          v24[1] = v26;
          *v25 = 0;
          IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>::~ScopedActiveMessageReceiveQueue(v25);
        }
        else
        {
          IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGraphicsContextGL,WTF::RefPtr<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>>>::~ScopedActiveMessageReceiveQueue((uint64_t *)(v4 + 16 * v11 + 8));
        }
      }
      ++v11;
    }
    while (v11 != v12);
  }
  else if (!v4)
  {
    return;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::GPUConnectionToWebProcess::performWithMediaPlayerOnMainThread(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(WebCore::MediaPlayer &)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34B8000;
  a1[1] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 16));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::GPUConnectionToWebProcess::performWithMediaPlayerOnMainThread(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(WebCore::MediaPlayer &)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34B8000;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 16));
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::GPUConnectionToWebProcess::performWithMediaPlayerOnMainThread(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(WebCore::MediaPlayer &)> &&)::$_0,void>::call(uint64_t a1)
{
  unsigned __int8 *result;
  unsigned __int8 **v3;
  unsigned __int8 **v4;

  result = (unsigned __int8 *)WebKit::RemoteMediaPlayerManagerProxy::mediaPlayer(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 120), (_QWORD *)(a1 + 16), &v4);
  v3 = v4;
  if (v4)
  {
    (*(void (**)(_QWORD, unsigned __int8 **))(***(_QWORD ***)(a1 + 24) + 16))(**(_QWORD **)(a1 + 24), v4);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v3);
  }
  return result;
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;

  v1 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEABB3C](this);
LABEL_5:
  v3 = *((_QWORD *)v1 + 1);
  v4 = v3 - 1;
  *((_QWORD *)v1 + 1) = v3 - 1;
  if (v3 == 1)
  {
    v9 = *((_QWORD *)v1 + 2);
    v6 = *((_QWORD *)v1 + 3);
    *((_QWORD *)v1 + 3) = 0;
    v5 = v9 == 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = __ldxr(v1);
  if (v7 != 1)
  {
    __clrex();
LABEL_12:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (v4)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, v1))
    goto LABEL_12;
  if (v4)
    return this;
LABEL_13:
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v8 = off_1E34B8130;
  *(_QWORD *)(v8 + 8) = v1;
  *(_QWORD *)(v8 + 16) = v6;
  *(_BYTE *)(v8 + 24) = v5;
  v10 = (unsigned __int8 *)v8;
  WTF::ensureOnMainThread();
  this = v10;
  if (v10)
    return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v10 + 8))(v10);
  return this;
}

uint64_t WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  uint64_t result;
  WTF *v4;
  WTF *v5;
  void *v6;
  BOOL v7;

  v4 = *(WTF **)(a1 + 8);
  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    v5 = (WTF *)MEMORY[0x19AEAD054]();
    result = WTF::fastFree(v5, v6);
  }
  if (*(_BYTE *)(a1 + 24))
    v7 = v4 == 0;
  else
    v7 = 1;
  if (!v7)
    return WTF::fastFree(v4, a2);
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    v15 = v7;
    do
    {
      v16 = (uint64_t *)(v6 + 16 * v13);
      v17 = *v16;
      if (*v16 != -1)
      {
        if (v17)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = (v17 + ~(v17 << 32)) ^ ((unint64_t)(v17 + ~(v17 << 32)) >> 22);
          v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          v23 = v19 & ((v22 >> 31) ^ v22);
          v24 = 1;
          do
          {
            v25 = v23;
            v26 = *(_QWORD *)(v18 + 16 * v23);
            v23 = (v23 + v24++) & v19;
          }
          while (v26);
          v27 = v18 + 16 * v25;
          IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>::~ScopedActiveMessageReceiveQueue((WebKit::RemoteGPU **)(v27 + 8));
          *(_QWORD *)v27 = *v16;
          v28 = v6 + 16 * v13;
          v29 = *(_QWORD *)(v28 + 8);
          v28 += 8;
          *(_QWORD *)(v27 + 8) = v29;
          *(_QWORD *)v28 = 0;
          IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>::~ScopedActiveMessageReceiveQueue((WebKit::RemoteGPU **)v28);
          if (v16 == a3)
            v14 = v27;
        }
        else
        {
          IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>::~ScopedActiveMessageReceiveQueue((WebKit::RemoteGPU **)(v6 + 16 * v13 + 8));
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

WebKit::RemoteGPU **WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, uint64_t a2)
{
  WebKit::RemoteGPU **result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)a2 = -1;
  result = IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>::~ScopedActiveMessageReceiveQueue((WebKit::RemoteGPU **)(a2 + 8));
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (WebKit::RemoteGPU **)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteGPU,WTF::RefPtr<WebKit::RemoteGPU,WTF::RawPtrTraits<WebKit::RemoteGPU>,WTF::DefaultRefDerefTraits<WebKit::RemoteGPU>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::GPUConnectionToWebProcess::releaseGPU(WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E34B8028;
  a1[1] = 0;
  if (v2)
  {
    v3 = v2 + 28;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 28);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::GPUConnectionToWebProcess::releaseGPU(WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34B8028;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 28;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 28);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::GPUConnectionToWebProcess::releaseGPU(WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::call(uint64_t a1)
{
  WebKit::GPUProcess::tryExitIfUnusedAndUnderMemoryPressure(*(WebKit::GPUProcess **)(a1 + 8));
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 16 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = v15 + 16 * v22;
          std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>::reset[abi:sn180100]((WebKit::RemoteAudioHardwareListenerProxy **)(v24 + 8), 0);
          *(_QWORD *)v24 = *v13;
          v25 = v6 + 16 * v11;
          v26 = *(_QWORD *)(v25 + 8);
          v25 += 8;
          *(_QWORD *)v25 = 0;
          *(_QWORD *)(v24 + 8) = v26;
          std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>::reset[abi:sn180100]((WebKit::RemoteAudioHardwareListenerProxy **)v25, 0);
          if (v13 == a3)
            v12 = v24;
        }
        else
        {
          std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>::reset[abi:sn180100]((WebKit::RemoteAudioHardwareListenerProxy **)(v6 + 16 * v11 + 8), 0);
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

WebKit::RemoteAudioHardwareListenerProxy *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, uint64_t a2)
{
  WebKit::RemoteAudioHardwareListenerProxy *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)a2 = -1;
  result = std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>::reset[abi:sn180100]((WebKit::RemoteAudioHardwareListenerProxy **)(a2 + 8), 0);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (WebKit::RemoteAudioHardwareListenerProxy *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteAudioHardwareListenerProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::GPUProcess::*&)(void),WebKit::GPUProcess*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::GPUProcess::MediaCaptureAccess,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::GPUProcess::MediaCaptureAccess>,WTF::HashTableTraits>::remove(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;

  if (*result)
  {
    v2 = *result + 16 * *(unsigned int *)(*result - 4);
    if ((_QWORD *)v2 == a2)
      return result;
  }
  else
  {
    if (!a2)
      return result;
    v2 = 0;
  }
  if ((_QWORD *)v2 != a2)
  {
    *a2 = -1;
    ++*(_DWORD *)(*result - 16);
    v3 = *result;
    v4 = *result ? *(_DWORD *)(v3 - 12) - 1 : -1;
    *(_DWORD *)(v3 - 12) = v4;
    v5 = *result;
    if (*result)
    {
      v6 = 6 * *(_DWORD *)(v5 - 12);
      v7 = *(_DWORD *)(v5 - 4);
      if (v6 < v7 && v7 >= 9)
        return (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::GPUProcess::MediaCaptureAccess>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::GPUProcess::MediaCaptureAccess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::GPUProcess::MediaCaptureAccess,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::GPUProcess::MediaCaptureAccess>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(result, v7 >> 1, 0);
    }
  }
  return result;
}

_OWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::GPUProcess::MediaCaptureAccess>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::GPUProcess::MediaCaptureAccess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::GPUProcess::MediaCaptureAccess,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::GPUProcess::MediaCaptureAccess>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  _OWORD *v25;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = v9 + 24;
    do
    {
      *(_QWORD *)(v12 - 8) = 0;
      *(_BYTE *)(v12 + 2) = 0;
      *(_WORD *)v12 = 0;
      v12 += 16;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (_QWORD *)(v6 + 16 * v13);
      if ((unint64_t)(*v15 + 1) >= 2)
      {
        v16 = *a1;
        if (*a1)
          v17 = *(_DWORD *)(v16 - 8);
        else
          v17 = 0;
        v18 = (*v15 + ~(*v15 << 32)) ^ ((*v15 + ~(*v15 << 32)) >> 22);
        v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((unint64_t)(v18 + ~(v18 << 13)) >> 8));
        v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
        v21 = v17 & ((v20 >> 31) ^ v20);
        v22 = 1;
        do
        {
          v23 = v21;
          v24 = *(_QWORD *)(v16 + 16 * v21);
          v21 = (v21 + v22++) & v17;
        }
        while (v24);
        v25 = (_OWORD *)(v16 + 16 * v23);
        *v25 = *(_OWORD *)v15;
        if (v15 == a3)
          v14 = v25;
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::GPUProcess::MediaCaptureAccess>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::GPUProcess::MediaCaptureAccess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::GPUProcess::MediaCaptureAccess,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::GPUProcess::MediaCaptureAccess>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::GPUProcess::MediaCaptureAccess,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::GPUProcess::MediaCaptureAccess>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    v6 = v2 & ((v5 >> 31) ^ v5);
    v7 = *(_QWORD *)(result + 16 * v6);
    if (v7 == a2)
    {
LABEL_6:
      result += 16 * v6;
    }
    else
    {
      v8 = 1;
      while (v7)
      {
        v6 = ((_DWORD)v6 + v8) & v2;
        v7 = *(_QWORD *)(result + 16 * v6);
        ++v8;
        if (v7 == a2)
          goto LABEL_6;
      }
      return 0;
    }
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD *result;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (_QWORD *)v6;
    do
    {
      if (*v14 != -1)
      {
        if (*v14)
        {
          v16 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::reinsert(*a1, v14);
          v17 = v14[1];
          v14[1] = 0;
          if (v17)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v17 + 16));
          if (v14 == a3)
            v11 = v16;
        }
        else
        {
          v15 = v14[1];
          v14[1] = 0;
          if (v15)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v15 + 16));
        }
      }
      v14 += 2;
      --v13;
    }
    while (v13);
    goto LABEL_17;
  }
  result = 0;
  if (v6)
  {
LABEL_17:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::reinsert(uint64_t a1, _QWORD *a2)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  if (a1)
    v3 = *(_DWORD *)(a1 - 8);
  else
    v3 = 0;
  v4 = (*a2 + ~(*a2 << 32)) ^ ((*a2 + ~(*a2 << 32)) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((unint64_t)(v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  v8 = 1;
  do
  {
    v9 = v7;
    v10 = *(_QWORD *)(a1 + 16 * v7);
    v7 = (v7 + v8++) & v3;
  }
  while (v10);
  v11 = (_QWORD *)(a1 + 16 * v9);
  v12 = v11[1];
  v11[1] = 0;
  if (v12)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v12 + 16));
  *v11 = *a2;
  v13 = a2[1];
  a2[1] = 0;
  v11[1] = v13;
  return v11;
}

unsigned __int8 *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::remove(unsigned __int8 *result, _QWORD *a2)
{
  _QWORD *v2;

  if (*(_QWORD *)result)
  {
    v2 = (_QWORD *)(*(_QWORD *)result + 16 * *(unsigned int *)(*(_QWORD *)result - 4));
    if (v2 == a2)
      return result;
  }
  else
  {
    if (!a2)
      return result;
    v2 = 0;
  }
  if (v2 != a2)
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(result, a2);
  return result;
}

unsigned __int8 *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(unsigned __int8 *result, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  v2 = (uint64_t *)result;
  v3 = a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (v3)
    result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 16));
  ++*(_DWORD *)(*v2 - 16);
  v4 = *v2;
  if (*v2)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *v2;
  if (*v2)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (unsigned __int8 *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v2, v8 >> 1, 0);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::GPUProcess::initializeGPUProcess(WebKit::GPUProcessCreationParameters &&)::$_0,void,WTF::Critical,WTF::Synchronous>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34B8078;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::GPUProcess::initializeGPUProcess(WebKit::GPUProcessCreationParameters &&)::$_0,void,WTF::Critical,WTF::Synchronous>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34B8078;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::GPUProcess::initializeGPUProcess(WebKit::GPUProcessCreationParameters &&)::$_0,void,WTF::Critical,WTF::Synchronous>::call(uint64_t result, int a2, int a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v3 = *(_QWORD *)(result + 8);
  if (v3)
  {
    v4 = *(unsigned int **)(v3 + 8);
    if (v4)
    {
      v5 = v4 + 28;
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
      result = WebKit::GPUProcess::lowMemoryHandler((WebKit::GPUProcess *)v4, a2, a3);
      do
      {
        v7 = __ldaxr(v5);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v5));
      if (!v8)
      {
        atomic_store(1u, v4 + 28);
        return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::GPUProcess::initializeGPUProcess(WebKit::GPUProcessCreationParameters &&)::$_1,void,WTF::CompletionHandler<void ()(void)> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34B80A0;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::GPUProcess::initializeGPUProcess(WebKit::GPUProcessCreationParameters &&)::$_1,void,WTF::CompletionHandler<void ()(void)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34B80A0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::GPUProcess::initializeGPUProcess(WebKit::GPUProcessCreationParameters &&)::$_1,void,WTF::CompletionHandler<void ()(void)> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  os_unfair_lock_s *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v19[2];
  IPC::Encoder *v20;

  v2 = *a2;
  *a2 = 0;
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = (unsigned int *)(v4 + 112);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
      v7 = *(os_unfair_lock_s **)(v4 + 32);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E34B80C8;
      v9 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
      v10 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v10 = 60;
      *(_QWORD *)(v10 + 8) = 0;
      *(_QWORD *)(v10 + 528) = v10 + 16;
      *(_QWORD *)(v10 + 536) = v10 + 16;
      *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v10 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
      v19[1] = v9;
      v20 = (IPC::Encoder *)v10;
      v19[0] = (uint64_t)v8;
      IPC::Connection::sendMessageWithAsyncReply(v7, &v20, v19, 0, 0);
      v12 = v19[0];
      v19[0] = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      v13 = v20;
      v20 = 0;
      if (v13)
      {
        IPC::Encoder::~Encoder(v13, v11);
        WTF::fastFree(v14, v15);
      }
      do
      {
        v16 = __ldaxr(v5);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v5));
      if (!v17)
      {
        atomic_store(1u, (unsigned int *)(v4 + 112));
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      }
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

_OWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::GPUProcess::MediaCaptureAccess>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::GPUProcess::MediaCaptureAccess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::GPUProcess::MediaCaptureAccess,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::GPUProcess::MediaCaptureAccess>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::GPUProcess::MediaCaptureAccess>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::GPUProcess::MediaCaptureAccess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::GPUProcess::MediaCaptureAccess,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::GPUProcess::MediaCaptureAccess>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v4, a2);
}

uint64_t WTF::Vector<WebCore::MockMediaDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::MockMediaDevice>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 96 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::MockMediaDevice>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  if (result != a2)
  {
    v9 = v2;
    v10 = v3;
    v5 = result;
    do
    {
      v6 = *((unsigned int *)v5 + 22);
      if ((_DWORD)v6 != -1)
        ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore24MockMicrophonePropertiesENS6_21MockSpeakerPropertiesENS6_20MockCameraPropertiesENS6_21MockDisplayPropertiesEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v6])(&v8, (char *)v5 + 24);
      *((_DWORD *)v5 + 22) = -1;
      v7 = (WTF::StringImpl *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      result = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 = (WTF::StringImpl *)((char *)v5 + 96);
    }
    while (v5 != a2);
  }
  return result;
}

_QWORD *WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::reinsert(uint64_t a1, WTF::StringImpl *a2)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  _QWORD *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;

  if (a1)
    v3 = *(_DWORD *)(a1 - 8);
  else
    v3 = 0;
  v4 = (*(_QWORD *)a2 + ~(*(_QWORD *)a2 << 32)) ^ ((*(_QWORD *)a2 + ~(*(_QWORD *)a2 << 32)) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((unint64_t)(v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  v8 = 1;
  do
  {
    v9 = v7;
    v10 = (_QWORD *)(a1 + 24 * v7);
    v7 = (v7 + v8++) & v3;
  }
  while (*v10);
  v11 = a1 + 24 * v9;
  v14 = *(WTF::StringImpl **)(v11 + 16);
  v13 = (_QWORD *)(v11 + 16);
  v12 = v14;
  v15 = (WTF::StringImpl **)(v13 - 1);
  *v13 = 0;
  if (v14)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v16 = *v15;
  *v15 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *v10 = *(_QWORD *)a2;
  *((_QWORD *)a2 + 1) = 0;
  *v15 = v17;
  v18 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  *v13 = v18;
  return v10;
}

WTF::StringImpl *WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = WTF::KeyValuePairHashTraits<WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>>::customDeleteBucket(a2, a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (WTF::StringImpl *)WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WebKit::GPUProcess::GPUSession>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WebKit::GPUProcess::GPUSession,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

WTF::StringImpl *WTF::KeyValuePairHashTraits<WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WebKit::GPUProcess::GPUSession>>::customDeleteBucket(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;

  *a1 = -1;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (result)
  {
    result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(result, a2);
    v4 = *a1;
    if (!result)
    {
      if (v4)
        return v4 + 16 * *(unsigned int *)(v4 - 4);
      else
        return 0;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  if (result)
  {
    v3 = result;
    v4 = *(_DWORD *)(result - 8);
    v5 = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a2) & v4;
    v6 = *(_QWORD *)(v3 + 16 * v5);
    if (v6 == *a2)
    {
      return v3 + 16 * v5;
    }
    else
    {
      v7 = 1;
      while (v6)
      {
        v5 = ((_DWORD)v5 + v7) & v4;
        v6 = *(_QWORD *)(v3 + 16 * v5);
        ++v7;
        if (v6 == *a2)
          return v3 + 16 * v5;
      }
      return 0;
    }
  }
  return result;
}

unsigned int **WTF::Ref<WebCore::IOSurfacePool,WTF::RawPtrTraits<WebCore::IOSurfacePool>,WTF::DefaultRefDerefTraits<WebCore::IOSurfacePool>>::~Ref(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int *v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v6 = v2;
      WTF::ThreadSafeRefCounted<WebCore::IOSurfacePool,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v6);
    }
  }
  return a1;
}

uint64_t WTF::ThreadSafeRefCounted<WebCore::IOSurfacePool,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(uint64_t *a1)
{
  uint64_t result;
  WTF *v2;
  void *v3;

  result = *a1;
  if (result)
  {
    v2 = (WTF *)MEMORY[0x19AEADC0C]();
    return WTF::fastFree(v2, v3);
  }
  return result;
}

uint64_t WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::HashTableTraits>::ensure<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::add(IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>)::{lambda(void)#1}>@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  uint64_t result;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  char v31;
  uint64_t v32;
  char v33;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  LODWORD(v30) = -1640531527;
  WORD2(v30) = 0;
  BYTE6(v30) = 0;
  WTF::addArgs<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v30, *a2, a2[1]);
  result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v30);
  v11 = result & v9;
  v12 = v8 + 56 * (result & v9);
  v13 = *(_QWORD *)v12;
  v14 = *(_QWORD *)(v12 + 8);
  if (*(_OWORD *)v12 != 0)
  {
    v15 = 0;
    v16 = 1;
    do
    {
      if (*a2 == v13 && a2[1] == v14)
      {
        v26 = *a1;
        if (*a1)
          v27 = *(_DWORD *)(v26 - 4);
        else
          v27 = 0;
        v29 = 0;
        v28 = v26 + 56 * v27;
        goto LABEL_29;
      }
      if (v13 == -1)
        v15 = v12;
      v11 = (v11 + v16) & v9;
      v12 = v8 + 56 * v11;
      v13 = *(_QWORD *)v12;
      v14 = *(_QWORD *)(v12 + 8);
      ++v16;
    }
    while (*(_OWORD *)v12 != 0);
    if (v15)
    {
      *(_QWORD *)(v15 + 48) = 0;
      *(_OWORD *)(v15 + 16) = 0u;
      *(_OWORD *)(v15 + 32) = 0u;
      *(_OWORD *)v15 = 0u;
      --*(_DWORD *)(*a1 - 16);
      v12 = v15;
    }
  }
  *(_OWORD *)v12 = *(_OWORD *)a2;
  v17 = *a3;
  *(_QWORD *)&v30 = 0;
  BYTE8(v30) = 0;
  v31 = 0;
  v18 = *v17;
  *v17 = 0;
  v32 = v18;
  v19 = 1;
  v33 = 1;
  *(_BYTE *)(v12 + 32) = v31;
  *(_OWORD *)(v12 + 16) = v30;
  std::__optional_storage_base<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,false>>(v12 + 40, (unsigned __int8 *)&v32);
  result = (uint64_t)std::__optional_destruct_base<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,false>::~__optional_destruct_base[abi:sn180100](&v32, v20);
  v21 = *a1;
  if (*a1)
    v19 = *(_DWORD *)(v21 - 12) + 1;
  *(_DWORD *)(v21 - 12) = v19;
  v22 = *a1;
  if (*a1)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24)
    {
LABEL_20:
      result = (uint64_t)WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a1, (unint64_t *)v12);
      v12 = result;
      v22 = *a1;
      if (*a1)
        LODWORD(v25) = *(_DWORD *)(v22 - 4);
      else
        LODWORD(v25) = 0;
    }
  }
  else if (3 * v25 <= 4 * v24)
  {
    goto LABEL_20;
  }
  v28 = v22 + 56 * v25;
  v29 = 1;
LABEL_29:
  *(_QWORD *)a4 = v12;
  *(_QWORD *)(a4 + 8) = v28;
  *(_BYTE *)(a4 + 16) = v29;
  return result;
}

uint64_t *std::optional<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::operator=[abi:sn180100]<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,void>(uint64_t *a1, uint64_t *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v14;

  v3 = *((unsigned __int8 *)a1 + 8);
  v4 = *a2;
  *a2 = 0;
  if (!v3)
  {
    *a1 = v4;
    *((_BYTE *)a1 + 8) = 1;
    return a1;
  }
  v5 = *a1;
  *a1 = v4;
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (__ldaxr((unsigned __int8 *)v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v6))
    {
      goto LABEL_8;
    }
    MEMORY[0x19AEABB3C](v6);
LABEL_8:
    v8 = *(_QWORD *)(v6 + 8);
    v9 = v8 - 1;
    *(_QWORD *)(v6 + 8) = v8 - 1;
    if (v8 == 1)
    {
      v14 = *(_QWORD *)(v6 + 16);
      v10 = *(_QWORD *)(v6 + 24);
      *(_QWORD *)(v6 + 24) = 0;
      v11 = v14 != 0;
    }
    else
    {
      v10 = 0;
      v11 = 1;
    }
    v12 = __ldxr((unsigned __int8 *)v6);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v6))
      {
        if (v9)
          return a1;
        goto LABEL_16;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    if (v9)
      return a1;
LABEL_16:
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (!v11)
      WTF::fastFree((WTF *)v6, a2);
  }
  return a1;
}

_OWORD *WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::expand(uint64_t *a1, unint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v5, a2);
}

_OWORD *WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(uint64_t *a1, unsigned int a2, unint64_t *a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  void *v20;
  int v21;
  unsigned int v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  void *v26;
  uint64_t v27;
  __int128 v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *result;
  int v34;
  __int16 v35;
  char v36;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastMalloc((WTF *)(56 * a2 + 16));
  v10 = v8;
  v11 = v8 + 16;
  if (a2)
    bzero((void *)(v8 + 16), 56 * a2);
  *a1 = v11;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v12 = 0;
    v13 = 0;
    v14 = v6;
    do
    {
      v15 = (unint64_t *)(v5 + 56 * v12);
      v9 = *v15;
      if (*v15 != -1)
      {
        v16 = v15[1];
        if (v9 | v16)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v34 = -1640531527;
          v35 = 0;
          v36 = 0;
          WTF::addArgs<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v34, v9, v16);
          v19 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v34);
          v21 = 0;
          do
          {
            v22 = v19 & v18;
            v23 = (_OWORD *)(v17 + 56 * (v19 & v18));
            v19 = ++v21 + (v19 & v18);
          }
          while (*v23 != 0);
          v24 = v17 + 56 * v22;
          v25 = std::__optional_destruct_base<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t *)(v24 + 40), v20);
          *v23 = *(_OWORD *)v15;
          v27 = v5 + 56 * v12;
          v28 = *(_OWORD *)(v27 + 16);
          v29 = *(_BYTE *)(v27 + 32);
          *(_BYTE *)(v24 + 48) = 0;
          *(_BYTE *)(v24 + 32) = v29;
          *(_OWORD *)(v24 + 16) = v28;
          *(_BYTE *)(v24 + 40) = 0;
          if (*(_BYTE *)(v27 + 48))
          {
            v30 = v5 + 56 * v12;
            v31 = *(_QWORD *)(v30 + 40);
            *(_QWORD *)(v30 + 40) = 0;
            *v25 = v31;
            *(_BYTE *)(v24 + 48) = 1;
          }
          std::__optional_destruct_base<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t *)(v5 + 56 * v12 + 40), v26);
          if (v15 == a3)
            v13 = v23;
        }
        else
        {
          std::__optional_destruct_base<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t *)(v5 + 56 * v12 + 40), (void *)v9);
        }
      }
      ++v12;
    }
    while (v12 != v14);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), (void *)v9);
  return v13;
}

_DWORD *WTF::addArgs<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(_DWORD *result, unint64_t a2, unint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v3 = (a2 >> 5) & 0x7FFF800 ^ ((*result + (unsigned __int16)a2) << 16) ^ (*result + (unsigned __int16)a2);
  v4 = (a2 >> 37) & 0x7FFF800 ^ ((v3 + WORD2(a2) + (v3 >> 11)) << 16) ^ (v3 + WORD2(a2) + (v3 >> 11));
  v5 = (a3 >> 5) & 0x7FFF800 ^ ((v4 + (unsigned __int16)a3 + (v4 >> 11)) << 16) ^ (v4
                                                                                               + (unsigned __int16)a3
                                                                                               + (v4 >> 11));
  v6 = v5 + WORD2(a3) + (v5 >> 11);
  v7 = (a3 >> 37) & 0x7FFF800 ^ (v6 << 16);
  *result = (v7 ^ v6) + ((v7 ^ v6) >> 11);
  return result;
}

uint64_t std::__optional_storage_base<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,false>>(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  v2 = result;
  if (*(unsigned __int8 *)(result + 8) != a2[8])
  {
    if (!*(_BYTE *)(result + 8))
    {
      v10 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)result = v10;
      *(_BYTE *)(result + 8) = 1;
      return result;
    }
    v7 = *(_QWORD *)result;
    *(_QWORD *)result = 0;
    if (!v7)
      goto LABEL_39;
    v8 = *(_QWORD *)(v7 + 8);
    if (__ldaxr((unsigned __int8 *)v8))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v8))
    {
      goto LABEL_27;
    }
    result = MEMORY[0x19AEABB3C](v8);
LABEL_27:
    v16 = *(_QWORD *)(v8 + 8);
    v17 = v16 - 1;
    *(_QWORD *)(v8 + 8) = v16 - 1;
    if (v16 == 1)
    {
      v22 = *(_QWORD *)(v8 + 16);
      v18 = *(_QWORD *)(v8 + 24);
      *(_QWORD *)(v8 + 24) = 0;
      v19 = v22 != 0;
    }
    else
    {
      v18 = 0;
      v19 = 1;
    }
    v20 = __ldxr((unsigned __int8 *)v8);
    if (v20 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v8))
      {
        if (!v17)
          goto LABEL_35;
        goto LABEL_39;
      }
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if (!v17)
    {
LABEL_35:
      if (v18)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      if (!v19)
        result = WTF::fastFree((WTF *)v8, a2);
    }
LABEL_39:
    *(_BYTE *)(v2 + 8) = 0;
    return result;
  }
  if (!*(_BYTE *)(result + 8))
    return result;
  v3 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v4 = *(_QWORD *)result;
  *(_QWORD *)result = v3;
  if (!v4)
    return result;
  v5 = *(_QWORD *)(v4 + 8);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_13;
  }
  result = MEMORY[0x19AEABB3C](v5);
LABEL_13:
  v11 = *(_QWORD *)(v5 + 8);
  v12 = v11 - 1;
  *(_QWORD *)(v5 + 8) = v11 - 1;
  if (v11 == 1)
  {
    v21 = *(_QWORD *)(v5 + 16);
    v13 = *(_QWORD *)(v5 + 24);
    *(_QWORD *)(v5 + 24) = 0;
    v14 = v21 != 0;
  }
  else
  {
    v13 = 0;
    v14 = 1;
  }
  v15 = __ldxr((unsigned __int8 *)v5);
  if (v15 != 1)
  {
    __clrex();
LABEL_20:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v5);
    if (v12)
      return result;
    goto LABEL_21;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
    goto LABEL_20;
  if (v12)
    return result;
LABEL_21:
  if (v13)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (!v14)
    return WTF::fastFree((WTF *)v5, a2);
  return result;
}

uint64_t *WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::remove(uint64_t *a1, uint64_t a2)
{
  uint64_t *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *(_OWORD *)a2 = xmmword_1978CEF10;
  result = std::__optional_destruct_base<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t *)(a2 + 40), (void *)(a2 + 40));
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (uint64_t *)WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

uint64_t WTF::GenericHashTraits<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::take<WebCore::ImageBuffer*>(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  int v6;

  v3 = (_QWORD *)result;
  if (!a2)
    goto LABEL_11;
  v4 = *(_QWORD *)(a2 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
LABEL_5:
    result = MEMORY[0x19AEABB3C](v4);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v4))
    goto LABEL_5;
LABEL_6:
  ++*(_QWORD *)(v4 + 8);
  v6 = __ldxr((unsigned __int8 *)v4);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_11;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_11:
  *v3 = a2;
  return result;
}

uint64_t WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::ShapeDetection::DetectedBarcode>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 48 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::ShapeDetection::DetectedBarcode>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF *v4;

  if (result != a2)
  {
    v3 = result;
    do
    {
      v4 = (WTF *)*((_QWORD *)v3 + 4);
      if (v4)
      {
        *((_QWORD *)v3 + 4) = 0;
        *((_DWORD *)v3 + 10) = 0;
        WTF::fastFree(v4, a2);
      }
      result = (WTF::StringImpl *)*((_QWORD *)v3 + 2);
      *((_QWORD *)v3 + 2) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 = (WTF::StringImpl *)((char *)v3 + 48);
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = *(WTF **)a1;
  if ((_DWORD)v3)
  {
    v5 = 40 * v3;
    v6 = (uint64_t)v4 + 16;
    do
    {
      if (*(_BYTE *)(v6 + 16))
        v6 = WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v6, a2);
      v6 += 40;
      v5 -= 40;
    }
    while (v5);
    v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::ShapeDetection::DetectedText>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 40 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::ShapeDetection::DetectedText>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF *v4;

  if (result != a2)
  {
    v3 = result;
    do
    {
      v4 = (WTF *)*((_QWORD *)v3 + 3);
      if (v4)
      {
        *((_QWORD *)v3 + 3) = 0;
        *((_DWORD *)v3 + 8) = 0;
        WTF::fastFree(v4, a2);
      }
      result = (WTF::StringImpl *)*((_QWORD *)v3 + 2);
      *((_QWORD *)v3 + 2) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 = (WTF::StringImpl *)((char *)v3 + 40);
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t *v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
          v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
          v25 = v21 & ((v24 >> 31) ^ v24);
          v26 = 1;
          do
          {
            v27 = v25;
            v28 = *(_QWORD *)(v20 + 16 * v25);
            v25 = (v25 + v26++) & v21;
          }
          while (v28);
          v29 = (uint64_t *)(v20 + 16 * v27);
          v30 = (unsigned int *)v29[1];
          v29[1] = 0;
          if (v30)
          {
            v31 = v30 + 2;
            do
            {
              v32 = __ldaxr(v31);
              v33 = v32 - 1;
            }
            while (__stlxr(v33, v31));
            if (!v33)
            {
              atomic_store(1u, v30 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 8))(v30);
            }
          }
          *v29 = *v13;
          v34 = v6 + 16 * v11;
          v35 = *(_QWORD *)(v34 + 8);
          *(_QWORD *)(v34 + 8) = 0;
          v29[1] = v35;
          v36 = *(unsigned int **)(v34 + 8);
          *(_QWORD *)(v34 + 8) = 0;
          if (v36)
          {
            v37 = v36 + 2;
            do
            {
              v38 = __ldaxr(v37);
              v39 = v38 - 1;
            }
            while (__stlxr(v39, v37));
            if (!v39)
            {
              atomic_store(1u, v36 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v36 + 8))(v36);
            }
          }
          if (v13 == a3)
            v12 = v29;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(unsigned int **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            v17 = v16 + 2;
            do
            {
              v18 = __ldaxr(v17);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, v17));
            if (!v19)
            {
              atomic_store(1u, v16 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
            }
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

unsigned int *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, _QWORD *a2)
{
  unsigned int *result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;

  result = (unsigned int *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result)
  {
    v4 = result + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  ++*(_DWORD *)(*a1 - 16);
  v7 = *a1;
  if (*a1)
    v8 = *(_DWORD *)(v7 - 12) - 1;
  else
    v8 = -1;
  *(_DWORD *)(v7 - 12) = v8;
  v9 = *a1;
  if (*a1)
  {
    v10 = 6 * *(_DWORD *)(v9 - 12);
    v11 = *(_DWORD *)(v9 - 4);
    if (v10 < v11 && v11 >= 9)
      return (unsigned int *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v11 >> 1, 0);
  }
  return result;
}

void sub_197039C58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  char v10;

  if ((v10 & 1) == 0)
    CFRelease(MEMORY[8]);
  _Unwind_Resume(exception_object);
}

void sub_197039D1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_19703A06C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void initializeTargetIfNeeded(WKObject *a1)
{
  id v2;
  void *m_ptr;

  if (!a1->_hasInitializedTarget)
  {
    a1->_hasInitializedTarget = 1;
    v2 = -[WKObject _web_createTarget](a1, "_web_createTarget");
    m_ptr = a1->_target.m_ptr;
    a1->_target.m_ptr = v2;
    if (m_ptr)
      CFRelease(m_ptr);
  }
}

uint64_t WebKit::ImageBufferShareableAllocator::createImageBuffer@<X0>(uint64_t *a1@<X1>, CFTypeRef *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v9 = 0;
  v10 = 0;
  WebCore::ImageBuffer::create<WebKit::ImageBufferShareableBitmapBackend,WebCore::ImageBuffer>(a1, a2, 1, 0, (uint64_t)&v9, &v13, 1.0);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v10 + 4));
  result = v13;
  if (v13)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 128))(v13);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5) & 1) != 0)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v5 + 40))(&v12, v5);
      result = v12;
      if (v12)
      {
        WebCore::ShareableBitmap::createHandle();
        if (v11)
        {
          WebCore::SharedMemoryHandle::setOwnershipOfMemory();
          v7 = v13;
          v13 = 0;
        }
        else
        {
          v7 = 0;
        }
        *a3 = v7;
        std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&v9);
        result = v12;
        v12 = 0;
        if (result)
          result = WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(result, v6);
      }
      else
      {
        *a3 = 0;
      }
      v8 = v13;
      v13 = 0;
      if (v8)
        return (uint64_t)WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v8 + 8), v6);
    }
    else
    {
      result = 96;
      __break(0xC471u);
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void WebCore::ImageBuffer::create<WebKit::ImageBufferShareableBitmapBackend,WebCore::ImageBuffer>(uint64_t *a1@<X0>, CFTypeRef *a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X8>, float a7@<S0>)
{
  const WebCore::DestinationColorSpace *v11;
  WebCore::ImageBufferCGBackend *v12;
  CFTypeRef v13;
  WebCore::ImageBufferCGBackend *v14;
  const void *v15;
  CFTypeRef v16;
  WebCore::ImageBufferCGBackend *v17;
  uint64_t v18;
  float v19;
  CFTypeRef cf;
  __int16 v21;
  _BYTE v22[64];
  WebCore::ImageBufferCGBackend *v23;
  IntSize v24[2];
  const void *v25;
  uint64_t v26;
  float v27;
  CFTypeRef v28;
  __int16 v29;

  v26 = *a1;
  v27 = a7;
  v28 = *a2;
  if (v28)
    CFRetain(v28);
  LOBYTE(v29) = a3;
  HIBYTE(v29) = a4;
  WebCore::ImageBuffer::backendParameters();
  WebKit::ImageBufferShareableBitmapBackend::create((uint64_t)v24, a5, v11, (uint64_t *)&v23);
  if (v23)
  {
    WebCore::ImageBuffer::populateBackendInfo<WebKit::ImageBufferShareableBitmapBackend>(v24, (uint64_t)v22);
    v18 = v26;
    v19 = v27;
    cf = v28;
    if (v28)
      CFRetain(v28);
    v21 = v29;
    v12 = v23;
    v23 = 0;
    v17 = v12;
    WebCore::ImageBuffer::create<WebCore::ImageBuffer>((uint64_t)&v18, a6);
    if (v17)
      (*(void (**)(WebCore::ImageBufferCGBackend *))(*(_QWORD *)v17 + 8))(v17);
    v13 = cf;
    cf = 0;
    if (v13)
      CFRelease(v13);
    v14 = v23;
    v23 = 0;
    if (v14)
      std::default_delete<WebKit::ImageBufferShareableBitmapBackend>::operator()[abi:sn180100]((int)&v23, v14);
  }
  else
  {
    *a6 = 0;
  }
  v15 = v25;
  v25 = 0;
  if (v15)
    CFRelease(v15);
  v16 = v28;
  v28 = 0;
  if (v16)
    CFRelease(v16);
}

_DWORD *WebKit::ImageBufferShareableAllocator::createPixelBuffer@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  _DWORD *result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _DWORD *v8;

  result = WebKit::ShareablePixelBuffer::tryCreate(a1, a2, (uint64_t *)&v8);
  if (!v8)
  {
    *a3 = 0;
    return result;
  }
  WebCore::SharedMemory::createHandle();
  if (v7)
  {
    result = (_DWORD *)WebCore::SharedMemoryHandle::setOwnershipOfMemory();
    v5 = (uint64_t)v8;
    v8 = 0;
    *a3 = v5;
    if (!v7)
      return result;
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v6);
  }
  else
  {
    *a3 = 0;
  }
  result = v8;
  v8 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebKit::RemoteDisplayListRecorder::controlFactory(WebKit::RemoteDisplayListRecorder *this)
{
  uint64_t result;
  _DWORD *v3;
  uint64_t v4;

  result = *((_QWORD *)this + 7);
  if (!result)
  {
    WebCore::ControlFactory::create(0);
    v3 = (_DWORD *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v4;
    if (v3)
    {
      if (v3[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
      else
        --v3[2];
    }
    return *((_QWORD *)this + 7);
  }
  return result;
}

uint64_t WebKit::RemoteRenderingBackend::imageBuffer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  v13 = a2;
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 120), &v13);
  if (result)
  {
    v5 = (unsigned int *)result;
    v6 = (unsigned int *)(result + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::Ref(&v12, (uint64_t *)(result + 24));
    v8 = v12;
    v12 = 0;
    *a3 = v8;
    result = (uint64_t)WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(&v12, v9);
    do
    {
      v10 = __ldaxr(v6);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v6));
    if (!v11)
    {
      atomic_store(1u, v5 + 2);
      return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

unsigned __int8 **WebKit::RemoteDisplayListRecorder::sourceImage@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  void *v7;
  unsigned __int8 **result;
  uint64_t v9;
  int v10;
  _BYTE v11[40];
  uint64_t v12;
  char v13;

  WebKit::RemoteResourceCache::cachedNativeImage((uint64_t *)(*(_QWORD *)(a1 + 40) + 64), a2, &v12);
  v6 = v12;
  if (v12)
  {
    WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>::Ref(&v9, v12);
    v10 = 0;
    WebCore::SourceImage::SourceImage();
    std::__optional_destruct_base<WebCore::SourceImage,false>::__optional_destruct_base[abi:sn180100]<WebCore::SourceImage>((uint64_t)a3, (uint64_t)v11);
    WebCore::SourceImage::~SourceImage((WebCore::SourceImage *)v11);
    if (v10 != -1)
      ((void (*)(char *, uint64_t *))off_1E34B8300[v10])(&v13, &v9);
    return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v6 + 8), v7);
  }
  result = (unsigned __int8 **)WebKit::RemoteRenderingBackend::imageBuffer(*(_QWORD *)(a1 + 40), a2, &v12);
  v6 = v12;
  if (v12)
  {
    WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::Ref(&v9, v12);
    v10 = 1;
    WebCore::SourceImage::SourceImage();
    std::__optional_destruct_base<WebCore::SourceImage,false>::__optional_destruct_base[abi:sn180100]<WebCore::SourceImage>((uint64_t)a3, (uint64_t)v11);
    WebCore::SourceImage::~SourceImage((WebCore::SourceImage *)v11);
    if (v10 != -1)
      ((void (*)(char *, uint64_t *))off_1E34B8300[v10])(&v13, &v9);
    return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v6 + 8), v7);
  }
  *a3 = 0;
  a3[40] = 0;
  return result;
}

uint64_t *WebKit::RemoteResourceCache::cachedNativeImage@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v15;
  int v16;

  v4 = *result;
  if (!*result)
    goto LABEL_13;
  v5 = *(_DWORD *)(v4 - 8);
  v6 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v5 & ((v8 >> 31) ^ v8);
  v10 = (uint64_t *)(v4 + 24 * v9);
  v11 = *v10;
  if (*v10 != a2)
  {
    v16 = 1;
    while (v11)
    {
      v9 = (v9 + v16) & v5;
      v10 = (uint64_t *)(v4 + 24 * v9);
      v11 = *v10;
      ++v16;
      if (*v10 == a2)
        goto LABEL_3;
    }
    v10 = (uint64_t *)(v4 + 24 * *(unsigned int *)(v4 - 4));
  }
LABEL_3:
  if (v10 == (uint64_t *)(v4 + 24 * *(unsigned int *)(v4 - 4)) || *((_DWORD *)v10 + 4) != 2)
    goto LABEL_13;
  v12 = (_QWORD *)v10[1];
  if (!v12)
    goto LABEL_14;
  result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*v12 + 16))(v10[1]);
  if (!(_DWORD)result)
  {
LABEL_13:
    v12 = 0;
    goto LABEL_14;
  }
  v13 = v12[1];
  if (__ldaxr((unsigned __int8 *)v13))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v13))
  {
    goto LABEL_10;
  }
  result = (uint64_t *)MEMORY[0x19AEABB3C](v13);
LABEL_10:
  ++*(_QWORD *)(v13 + 8);
  v15 = __ldxr((unsigned __int8 *)v13);
  if (v15 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v13))
      goto LABEL_14;
  }
  else
  {
    __clrex();
  }
  result = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v13);
LABEL_14:
  *a3 = v12;
  return result;
}

void WebCore::SourceImage::~SourceImage(WebCore::SourceImage *this)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;

  if (*((_BYTE *)this + 32))
  {
    v2 = *((unsigned int *)this + 6);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, char *))off_1E34B8300[v2])(&v4, (char *)this + 16);
    *((_DWORD *)this + 6) = -1;
  }
  v3 = *((unsigned int *)this + 2);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, WebCore::SourceImage *))off_1E34B8300[v3])(&v5, this);
  *((_DWORD *)this + 2) = -1;
}

BOOL WebKit::RemoteDisplayListRecorder::setState(WebCore::DisplayList::SetState &&)::$_1::operator()(uint64_t *a1, WebCore::SourceBrush *this)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  _BOOL8 v6;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *a1;
  v4 = WebCore::SourceBrush::gradientIdentifier(this);
  if (!v5)
    return 1;
  WebKit::RemoteResourceCache::cachedGradient((uint64_t *)(*(_QWORD *)(v3 + 40) + 64), v4, &v20);
  v8 = v20;
  v6 = v20 != 0;
  if (!v20)
    return v6;
  WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>::Ref(&v19, v20);
  WebCore::SourceBrush::gradientSpaceTransform(this);
  WebCore::SourceBrush::setGradient();
  WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v19, v9);
  v20 = 0;
  v11 = *(_QWORD *)(v8 + 8);
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
LABEL_7:
    MEMORY[0x19AEABB3C](v11);
    goto LABEL_8;
  }
  if (__stxr(1u, (unsigned __int8 *)v11))
    goto LABEL_7;
LABEL_8:
  v13 = *(_QWORD *)(v11 + 8);
  v14 = v13 - 1;
  *(_QWORD *)(v11 + 8) = v13 - 1;
  if (v13 == 1)
  {
    v18 = *(_QWORD *)(v11 + 16);
    v15 = *(_QWORD *)(v11 + 24);
    *(_QWORD *)(v11 + 24) = 0;
    v16 = v18 != 0;
  }
  else
  {
    v15 = 0;
    v16 = 1;
  }
  v17 = __ldxr((unsigned __int8 *)v11);
  if (v17 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v11))
      goto LABEL_12;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v11);
LABEL_12:
  if (!v14)
  {
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    if (!v16)
      WTF::fastFree((WTF *)v11, v10);
  }
  return v6;
}

uint64_t WebKit::RemoteDisplayListRecorder::clearDropShadow(WebKit::RemoteDisplayListRecorder *this)
{
  WebCore::GraphicsContext *v1;
  char v3;

  v1 = (WebCore::GraphicsContext *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3));
  return WebCore::DisplayList::ClearDropShadow::apply((WebCore::DisplayList::ClearDropShadow *)&v3, v1);
}

uint64_t WebKit::RemoteDisplayListRecorder::clip(WebKit::RemoteDisplayListRecorder *this, const WebCore::FloatRect *a2)
{
  WebCore::GraphicsContext *v2;
  __int128 v4;

  v4 = *(_OWORD *)a2;
  v2 = (WebCore::GraphicsContext *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3));
  return WebCore::DisplayList::Clip::apply((WebCore::DisplayList::Clip *)&v4, v2);
}

uint64_t WebKit::RemoteDisplayListRecorder::clipOut(WebKit::RemoteDisplayListRecorder *this, const WebCore::FloatRect *a2)
{
  WebCore::GraphicsContext *v2;
  __int128 v4;

  v4 = *(_OWORD *)a2;
  v2 = (WebCore::GraphicsContext *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3));
  return WebCore::DisplayList::ClipOut::apply((WebCore::DisplayList::ClipOut *)&v4, v2);
}

uint64_t WebKit::RemoteDisplayListRecorder::clipToImageBuffer(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t result;
  WebCore::ImageBuffer *v7;
  WebCore::GraphicsContext *v8;
  void *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  WebCore::ImageBuffer *v20;

  result = WebKit::RemoteRenderingBackend::imageBuffer(*(_QWORD *)(a1 + 40), a2, (uint64_t *)&v20);
  v7 = v20;
  if (!v20)
    return result;
  v18 = a2;
  v19 = *a3;
  v8 = (WebCore::GraphicsContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
  result = WebCore::DisplayList::ClipToImageBuffer::apply((WebCore::DisplayList::ClipToImageBuffer *)&v18, v8, v7);
  v20 = 0;
  v10 = *((_QWORD *)v7 + 1);
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v10))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEABB3C](v10);
LABEL_6:
  v12 = *(_QWORD *)(v10 + 8);
  v13 = v12 - 1;
  *(_QWORD *)(v10 + 8) = v12 - 1;
  if (v12 == 1)
  {
    v17 = *(_QWORD *)(v10 + 16);
    v14 = *(_QWORD *)(v10 + 24);
    *(_QWORD *)(v10 + 24) = 0;
    v15 = v17 != 0;
  }
  else
  {
    v14 = 0;
    v15 = 1;
  }
  v16 = __ldxr((unsigned __int8 *)v10);
  if (v16 != 1)
  {
    __clrex();
LABEL_13:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v10);
    if (v13)
      return result;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v10))
    goto LABEL_13;
  if (v13)
    return result;
LABEL_14:
  if (v14)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (!v15)
    return WTF::fastFree((WTF *)v10, v9);
  return result;
}

uint64_t WebKit::RemoteDisplayListRecorder::clipOutToPath(WebKit::RemoteDisplayListRecorder *this, const WebCore::Path *a2)
{
  WebCore::GraphicsContext *v3;
  uint64_t result;
  char v5;
  _BYTE v6[8];
  uint64_t v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  WebCore::Path::Path((WebCore::Path *)v6, a2);
  v3 = (WebCore::GraphicsContext *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3));
  result = WebCore::DisplayList::ClipOutToPath::apply((WebCore::DisplayList::ClipOutToPath *)v6, v3);
  if (v8 != -1)
    return ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v8])(&v5, &v7);
  return result;
}

uint64_t WebKit::RemoteDisplayListRecorder::resetClip(WebKit::RemoteDisplayListRecorder *this)
{
  WebCore::GraphicsContext *v1;
  char v3;

  v1 = (WebCore::GraphicsContext *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3));
  return WebCore::DisplayList::ResetClip::apply((WebCore::DisplayList::ResetClip *)&v3, v1);
}

uint64_t WebKit::RemoteDisplayListRecorder::drawFilteredImageBufferInternal(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26[2];
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t *v30;
  unsigned int v31;

  if (a3)
  {
    result = WebKit::RemoteRenderingBackend::imageBuffer(*(_QWORD *)(a1 + 40), a2, v26);
    v8 = v26[0];
    if (!v26[0])
      return result;
  }
  else
  {
    v8 = 0;
  }
  (*(void (**)(uint64_t **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a5 + 96))(&v30, a5, 12);
  if (v31)
  {
    v19 = v30;
    v20 = 8 * v31;
    while (1)
    {
      v25 = v20;
      v21 = *v19;
      if (*(_BYTE *)(*v19 + 48) != 12)
        break;
      v22 = WebCore::SourceImage::imageIdentifier((WebCore::SourceImage *)(v21 + 64));
      WebKit::RemoteDisplayListRecorder::sourceImage(a1, v22, v26);
      if (!v29)
      {
        std::__optional_destruct_base<WebCore::SourceImage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v26);
        result = WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, v24);
        goto LABEL_5;
      }
      std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,(std::__variant_detail::_Trait)1>>(v21 + 64, (uint64_t)v26);
      std::__optional_storage_base<std::variant<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::variant<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,false>>(v21 + 80, (uint64_t)&v27);
      std::__optional_destruct_base<WebCore::SourceImage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v26);
      ++v19;
      v20 = v25 - 8;
      if (v25 == 8)
        goto LABEL_4;
    }
    result = 96;
    __break(0xC471u);
  }
  else
  {
LABEL_4:
    WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, v9);
    WebCore::DisplayList::DrawFilteredImageBuffer::DrawFilteredImageBuffer();
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
    WebCore::DisplayList::DrawFilteredImageBuffer::apply();
    result = (uint64_t)WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref(&v28, v10);
LABEL_5:
    if (v8)
    {
      v12 = *(_QWORD *)(v8 + 8);
      if (__ldaxr((unsigned __int8 *)v12))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v12))
      {
LABEL_9:
        v14 = *(_QWORD *)(v12 + 8);
        v15 = v14 - 1;
        *(_QWORD *)(v12 + 8) = v14 - 1;
        if (v14 == 1)
        {
          v23 = *(_QWORD *)(v12 + 16);
          v16 = *(_QWORD *)(v12 + 24);
          *(_QWORD *)(v12 + 24) = 0;
          v17 = v23 != 0;
        }
        else
        {
          v16 = 0;
          v17 = 1;
        }
        v18 = __ldxr((unsigned __int8 *)v12);
        if (v18 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v12))
            goto LABEL_13;
        }
        else
        {
          __clrex();
        }
        result = WTF::Lock::unlockSlow((WTF::Lock *)v12);
LABEL_13:
        if (!v15)
        {
          if (v16)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          if (!v17)
            return WTF::fastFree((WTF *)v12, v11);
        }
        return result;
      }
      result = MEMORY[0x19AEABB3C](v12);
      goto LABEL_9;
    }
  }
  return result;
}

void WebKit::RemoteDisplayListRecorder::drawFilteredImageBuffer(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  void *v11;
  int v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  WebCore::ImageBufferAllocator *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  WebCore::ImageBufferAllocator *v35;
  WebCore::ImageBufferAllocator *v36;
  uint64_t v37[3];
  uint64_t v38;

  v10 = *a5;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::ref(*(unsigned __int8 **)(*a5 + 8));
  v38 = v10;
  v12 = *(unsigned __int8 *)(v10 + 48);
  if (v12 == 1)
  {
    v38 = 0;
    v37[0] = 0;
    WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>::~Ref(v37, v11);
    WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref(&v38, v13);
    if (*(_BYTE *)(v10 + 40))
    {
      if (!*(_BYTE *)(*a5 + 40))
      {
        __break(1u);
        goto LABEL_49;
      }
      v15 = WebCore::DisplayList::ResourceHeap::get<WebCore::RenderingResource>(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 64), *(_QWORD *)(*a5 + 32));
      if (v15)
      {
        v16 = v15;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15))
        {
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::ref(*(unsigned __int8 **)(v16 + 8));
          if (*(_BYTE *)(v16 + 48) == 1)
          {
            WebCore::SVGFilter::mergeEffects();
            v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v17 = off_1E34B83B8;
            v17[1] = a1;
            v37[0] = (uint64_t)v17;
            WebCore::SVGFilter::ensureResults();
            v18 = v37[0];
            v37[0] = 0;
            if (v18)
              (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
            WebKit::RemoteDisplayListRecorder::drawFilteredImageBufferInternal(a1, a2, a3, a4, v16);
          }
          v19 = *(_QWORD *)(v16 + 8);
          if (__ldaxr((unsigned __int8 *)v19))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v19))
          {
LABEL_13:
            v21 = *(_QWORD *)(v19 + 8);
            v22 = v21 - 1;
            *(_QWORD *)(v19 + 8) = v21 - 1;
            if (v21 == 1)
            {
              v34 = *(_QWORD *)(v19 + 16);
              v23 = *(_QWORD *)(v19 + 24);
              *(_QWORD *)(v19 + 24) = 0;
              v24 = v34 != 0;
            }
            else
            {
              v23 = 0;
              v24 = 1;
            }
            v25 = __ldxr((unsigned __int8 *)v19);
            if (v25 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v19))
                goto LABEL_17;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v19);
LABEL_17:
            if (!v22)
            {
              if (v23)
                (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
              if (!v24)
                WTF::fastFree((WTF *)v19, v14);
            }
            goto LABEL_18;
          }
          MEMORY[0x19AEABB3C](v19);
          goto LABEL_13;
        }
      }
LABEL_18:
      a4 = *(_QWORD *)(v10 + 8);
      if (__ldaxr((unsigned __int8 *)a4))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)a4))
      {
LABEL_21:
        v27 = *(_QWORD *)(a4 + 8);
        a2 = v27 - 1;
        *(_QWORD *)(a4 + 8) = v27 - 1;
        if (v27 != 1)
        {
          v28 = 0;
          v29 = 1;
          goto LABEL_23;
        }
LABEL_49:
        v33 = *(_QWORD *)(a4 + 16);
        v28 = *(_QWORD *)(a4 + 24);
        *(_QWORD *)(a4 + 24) = 0;
        v29 = v33 != 0;
LABEL_23:
        v30 = __ldxr((unsigned __int8 *)a4);
        if (v30 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)a4))
            goto LABEL_25;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)a4);
LABEL_25:
        if (!a2)
        {
          if (v28)
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
          if (!v29)
            WTF::fastFree((WTF *)a4, v14);
        }
        return;
      }
      MEMORY[0x19AEABB3C](a4);
      goto LABEL_21;
    }
  }
  else
  {
    WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref(&v38, v11);
    v10 = 0;
  }
  std::make_unique[abi:sn180100]<WebKit::ImageBufferShareableAllocator,WebCore::ProcessIdentity const&>(&v35, (const WTF::MachSendRight *)(*(_QWORD *)(a1 + 48) + 48));
  v36 = v35;
  WebCore::FilterResults::FilterResults();
  v31 = v36;
  v36 = 0;
  if (v31)
    (*(void (**)(WebCore::ImageBufferAllocator *))(*(_QWORD *)v31 + 8))(v31);
  WebKit::RemoteDisplayListRecorder::drawFilteredImageBufferInternal(a1, a2, a3, a4, *a5);
  WebCore::FilterResults::~FilterResults((WebCore::FilterResults *)v37, v32);
  if (v12 == 1)
    goto LABEL_18;
}

void WebCore::FilterResults::~FilterResults(WebCore::FilterResults *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  WTF *v15;

  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      for (i = 0; i != v5; ++i)
      {
        v7 = v4 + 16 * i;
        v8 = *(WTF **)v7;
        if (*(_QWORD *)v7 != -1)
        {
          v9 = *(_QWORD *)(v7 + 8);
          if (v9)
          {
            v10 = *(unsigned int *)(v9 - 4);
            if ((_DWORD)v10)
            {
              v11 = *(uint64_t **)(v7 + 8);
              do
              {
                if (*v11 != -1)
                  v11 = WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>::~Ref(v11, a2);
                ++v11;
                --v10;
              }
              while (v10);
            }
            WTF::fastFree((WTF *)(v9 - 16), a2);
            v8 = *(WTF **)v7;
          }
          *(_QWORD *)v7 = 0;
          if (v8)
            WTF::RefCounted<WebCore::FilterImage>::deref(v8, a2);
        }
      }
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  v12 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v13 = *(unsigned int *)(v12 - 4);
    if ((_DWORD)v13)
    {
      v14 = *(uint64_t **)this;
      do
      {
        if (*v14 != -1)
        {
          v15 = (WTF *)v14[1];
          v14[1] = 0;
          if (v15)
            WTF::RefCounted<WebCore::FilterImage>::deref(v15, a2);
          WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>::~Ref(v14, a2);
        }
        v14 += 2;
        --v13;
      }
      while (v13);
    }
    WTF::fastFree((WTF *)(v12 - 16), a2);
  }
}

_DWORD *WebKit::RemoteDisplayListRecorder::drawDecomposedGlyphs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *result;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  uint64_t v17;

  result = (_DWORD *)WebCore::DisplayList::ResourceHeap::get<WebCore::Font>((uint64_t *)(*(_QWORD *)(a1 + 40) + 64), a2);
  if (result)
  {
    v6 = result;
    ++*result;
    v7 = WebCore::DisplayList::ResourceHeap::get<WebCore::RenderingResource>(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 64), a3);
    if (!v7)
      return WTF::RefCounted<WebCore::Font>::deref(v6);
    v8 = v7;
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7))
      return WTF::RefCounted<WebCore::Font>::deref(v6);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::ref(*(unsigned __int8 **)(v8 + 8));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
    WebCore::DisplayList::DrawDecomposedGlyphs::apply();
    v10 = *(_QWORD *)(v8 + 8);
    if (__ldaxr((unsigned __int8 *)v10))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v10))
    {
      goto LABEL_8;
    }
    MEMORY[0x19AEABB3C](v10);
LABEL_8:
    v12 = *(_QWORD *)(v10 + 8);
    v13 = v12 - 1;
    *(_QWORD *)(v10 + 8) = v12 - 1;
    if (v12 == 1)
    {
      v17 = *(_QWORD *)(v10 + 16);
      v14 = *(_QWORD *)(v10 + 24);
      *(_QWORD *)(v10 + 24) = 0;
      v15 = v17 != 0;
    }
    else
    {
      v14 = 0;
      v15 = 1;
    }
    v16 = __ldxr((unsigned __int8 *)v10);
    if (v16 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v10))
      {
        if (!v13)
          goto LABEL_16;
        return WTF::RefCounted<WebCore::Font>::deref(v6);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
    if (!v13)
    {
LABEL_16:
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      if (!v15)
        WTF::fastFree((WTF *)v10, v9);
    }
    return WTF::RefCounted<WebCore::Font>::deref(v6);
  }
  return result;
}

uint64_t WebKit::RemoteDisplayListRecorder::drawImageBuffer(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4, int a5)
{
  uint64_t result;
  WebCore::ImageBuffer *v11;
  __int128 v12;
  WebCore::GraphicsContext *v13;
  void *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int16 v26;
  char v27;
  WebCore::ImageBuffer *v28;

  result = WebKit::RemoteRenderingBackend::imageBuffer(*(_QWORD *)(a1 + 40), a2, (uint64_t *)&v28);
  v11 = v28;
  if (!v28)
    return result;
  v23 = a2;
  v12 = *a4;
  v24 = *a3;
  v25 = v12;
  v26 = a5;
  v27 = BYTE2(a5);
  v13 = (WebCore::GraphicsContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
  result = WebCore::DisplayList::DrawImageBuffer::apply((WebCore::DisplayList::DrawImageBuffer *)&v23, v13, v11);
  v28 = 0;
  v15 = *((_QWORD *)v11 + 1);
  if (__ldaxr((unsigned __int8 *)v15))
  {
    __clrex();
LABEL_4:
    result = MEMORY[0x19AEABB3C](v15);
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)v15))
    goto LABEL_4;
LABEL_5:
  v17 = *(_QWORD *)(v15 + 8);
  v18 = v17 - 1;
  *(_QWORD *)(v15 + 8) = v17 - 1;
  if (v17 == 1)
  {
    v22 = *(_QWORD *)(v15 + 16);
    v19 = *(_QWORD *)(v15 + 24);
    *(_QWORD *)(v15 + 24) = 0;
    v20 = v22 != 0;
  }
  else
  {
    v19 = 0;
    v20 = 1;
  }
  v21 = __ldxr((unsigned __int8 *)v15);
  if (v21 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v15))
      goto LABEL_9;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v15);
LABEL_9:
  if (!v18)
  {
    if (v19)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    if (!v20)
      return WTF::fastFree((WTF *)v15, v14);
  }
  return result;
}

uint64_t WebKit::RemoteDisplayListRecorder::drawNativeImage(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  result = (uint64_t)WebKit::RemoteResourceCache::cachedNativeImage((uint64_t *)(*(_QWORD *)(a1 + 40) + 64), a2, &v14);
  v4 = v14;
  if (!v14)
    return result;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
  result = WebCore::DisplayList::DrawNativeImage::apply();
  v14 = 0;
  v6 = *(_QWORD *)(v4 + 8);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_4:
    result = MEMORY[0x19AEABB3C](v6);
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_4;
LABEL_5:
  v8 = *(_QWORD *)(v6 + 8);
  v9 = v8 - 1;
  *(_QWORD *)(v6 + 8) = v8 - 1;
  if (v8 == 1)
  {
    v13 = *(_QWORD *)(v6 + 16);
    v10 = *(_QWORD *)(v6 + 24);
    *(_QWORD *)(v6 + 24) = 0;
    v11 = v13 != 0;
  }
  else
  {
    v10 = 0;
    v11 = 1;
  }
  v12 = __ldxr((unsigned __int8 *)v6);
  if (v12 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      goto LABEL_9;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_9:
  if (!v9)
  {
    if (v10)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (!v11)
      return WTF::fastFree((WTF *)v6, v5);
  }
  return result;
}

uint64_t *WebKit::RemoteDisplayListRecorder::drawSystemImage(uint64_t a1, WebCore::ARKitBadgeSystemImage **a2, __int128 *a3)
{
  WebCore::ARKitBadgeSystemImage *v5;
  BOOL v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *result;
  void *v11;
  _DWORD *v12;
  _DWORD *v13;
  WebCore::GraphicsContext *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  _DWORD *v18;

  v5 = *a2;
  if (*a2)
    v6 = *((_BYTE *)*a2 + 12) == 1;
  else
    v6 = 0;
  if (v6)
  {
    v8 = (uint64_t *)(*(_QWORD *)(a1 + 40) + 64);
    v9 = WebCore::ARKitBadgeSystemImage::imageIdentifier(*a2);
    result = WebKit::RemoteResourceCache::cachedNativeImage(v8, v9, &v15);
    if (!v15)
      return result;
    v17 = v15;
    WebCore::BitmapImage::create();
    v12 = v18;
    ++v18[2];
    v13 = (_DWORD *)*((_QWORD *)v5 + 2);
    *((_QWORD *)v5 + 2) = v12;
    if (v13)
    {
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        v12 = v18;
        v18 = 0;
        if (!v12)
        {
LABEL_15:
          WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>::~Ref(&v17, v11);
          v5 = *a2;
          goto LABEL_16;
        }
LABEL_12:
        if (v12[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
        else
          --v12[2];
        goto LABEL_15;
      }
      --v13[2];
    }
    v18 = 0;
    goto LABEL_12;
  }
LABEL_16:
  ++*((_DWORD *)v5 + 2);
  v15 = (uint64_t)v5;
  v16 = *a3;
  v14 = (WebCore::GraphicsContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
  WebCore::DisplayList::DrawSystemImage::apply((WebCore::DisplayList::DrawSystemImage *)&v15, v14);
  result = (uint64_t *)v15;
  v15 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
    else
      --*((_DWORD *)result + 2);
  }
  return result;
}

uint64_t WebKit::RemoteDisplayListRecorder::drawPattern(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  WebCore::GraphicsContext *v4;
  uint64_t v5;
  _BYTE v6[40];
  char v7;

  WebKit::RemoteDisplayListRecorder::sourceImage(a1, a2, v6);
  if (!v7)
    return std::__optional_destruct_base<WebCore::SourceImage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6);
  result = WebCore::DisplayList::DrawPattern::DrawPattern();
  if (v7)
  {
    v4 = (WebCore::GraphicsContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
    WebCore::DisplayList::DrawPattern::apply((WebCore::DisplayList::DrawPattern *)&v5, v4, (WebCore::SourceImage *)v6);
    return std::__optional_destruct_base<WebCore::SourceImage,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6);
  }
  __break(1u);
  return result;
}

uint64_t WebKit::RemoteDisplayListRecorder::beginTransparencyLayerWithCompositeMode(uint64_t a1, __int16 a2)
{
  WebCore::GraphicsContext *v2;
  __int16 v4;

  v4 = a2;
  v2 = (WebCore::GraphicsContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
  return WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode::apply((WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode *)&v4, v2);
}

uint64_t WebKit::RemoteDisplayListRecorder::drawLine(WebKit::RemoteDisplayListRecorder *this, const WebCore::FloatPoint *a2, const WebCore::FloatPoint *a3)
{
  WebCore::GraphicsContext *v3;
  __int128 v5;

  v5 = *(_OWORD *)a2;
  v3 = (WebCore::GraphicsContext *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3));
  return WebCore::DisplayList::DrawLine::apply((WebCore::DisplayList::DrawLine *)&v5, v3);
}

unsigned int *WebKit::RemoteDisplayListRecorder::drawDotsForDocumentMarker(uint64_t a1, __int128 *a2, Color *a3)
{
  WebCore::GraphicsContext *v4;
  unsigned int *result;
  void *v6;
  unsigned int v7;
  unsigned int v8;
  __int128 v9;
  char m_colorAndFlags;
  uint64_t v11;

  v9 = *a2;
  m_colorAndFlags = a3->m_colorAndFlags;
  WebCore::Color::Color((WebCore::Color *)&v11, a3 + 1);
  v4 = (WebCore::GraphicsContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
  result = (unsigned int *)WebCore::DisplayList::DrawDotsForDocumentMarker::apply((WebCore::DisplayList::DrawDotsForDocumentMarker *)&v9, v4);
  if ((v11 & 0x8000000000000) != 0)
  {
    result = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
    do
    {
      v7 = __ldaxr(result);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, result));
    if (!v8)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v6);
    }
  }
  return result;
}

uint64_t WebKit::RemoteDisplayListRecorder::drawEllipse(WebKit::RemoteDisplayListRecorder *this, const WebCore::FloatRect *a2)
{
  WebCore::GraphicsContext *v2;
  __int128 v4;

  v4 = *(_OWORD *)a2;
  v2 = (WebCore::GraphicsContext *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3));
  return WebCore::DisplayList::DrawEllipse::apply((WebCore::DisplayList::DrawEllipse *)&v4, v2);
}

uint64_t WebKit::RemoteDisplayListRecorder::drawPath(WebKit::RemoteDisplayListRecorder *this, const WebCore::Path *a2)
{
  WebCore::GraphicsContext *v3;
  uint64_t result;
  char v5;
  _BYTE v6[8];
  uint64_t v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  WebCore::Path::Path((WebCore::Path *)v6, a2);
  v3 = (WebCore::GraphicsContext *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3));
  result = WebCore::DisplayList::DrawPath::apply((WebCore::DisplayList::DrawPath *)v6, v3);
  if (v8 != -1)
    return ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v8])(&v5, &v7);
  return result;
}

unsigned int *WebKit::RemoteDisplayListRecorder::drawFocusRingPath(WebKit::RemoteDisplayListRecorder *this, const WebCore::Path *a2, float a3, const Color *a4)
{
  WebCore::GraphicsContext *v7;
  unsigned int *result;
  void *v9;
  unsigned int v10;
  unsigned int v11;
  char v12;
  _BYTE v13[8];
  uint64_t v14;
  int v15;
  float v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  WebCore::Path::Path((WebCore::Path *)v13, a2);
  v16 = a3;
  WebCore::Color::Color((WebCore::Color *)v17, a4);
  v7 = (WebCore::GraphicsContext *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3));
  result = (unsigned int *)WebCore::DisplayList::DrawFocusRingPath::apply((WebCore::DisplayList::DrawFocusRingPath *)v13, v7);
  if ((v17[0] & 0x8000000000000) != 0)
  {
    result = (unsigned int *)(v17[0] & 0xFFFFFFFFFFFFLL);
    do
    {
      v10 = __ldaxr(result);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, result));
    if (!v11)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v9);
    }
  }
  if (v15 != -1)
    return (unsigned int *)((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v15])(&v12, &v14);
  return result;
}

WTF *WebKit::RemoteDisplayListRecorder::drawFocusRingRects(uint64_t a1, uint64_t a2, const Color *a3, float a4, float a5)
{
  WebCore::GraphicsContext *v9;
  void *v10;
  WTF *result;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  WTF *v15;
  int v16;
  float v17;
  float v18;
  uint64_t v19;

  WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v15, a2);
  v17 = a4;
  v18 = a5;
  WebCore::Color::Color((WebCore::Color *)&v19, a3);
  v9 = (WebCore::GraphicsContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
  WebCore::DisplayList::DrawFocusRingRects::apply((WebCore::DisplayList::DrawFocusRingRects *)&v15, v9);
  if ((v19 & 0x8000000000000) != 0)
  {
    v12 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFLL);
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, v10);
    }
  }
  result = v15;
  if (v15)
  {
    v15 = 0;
    v16 = 0;
    return (WTF *)WTF::fastFree(result, v10);
  }
  return result;
}

uint64_t WebKit::RemoteDisplayListRecorder::fillRectWithGradientAndSpaceTransform(uint64_t a1, WebCore::DisplayList::FillRectWithGradientAndSpaceTransform *a2)
{
  WebCore::GraphicsContext *v3;

  v3 = (WebCore::GraphicsContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
  return WebCore::DisplayList::FillRectWithGradientAndSpaceTransform::apply(a2, v3);
}

unsigned int *WebKit::RemoteDisplayListRecorder::fillRectWithRoundedHole(WebKit::RemoteDisplayListRecorder *this, const WebCore::FloatRect *a2, const WebCore::FloatRoundedRect *a3, Color *a4)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  WebCore::GraphicsContext *v8;
  unsigned int *result;
  void *v10;
  unsigned int v11;
  unsigned int v12;
  _OWORD v13[4];
  uint64_t v14;

  v5 = *(_OWORD *)a3;
  v6 = *((_OWORD *)a3 + 1);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v5;
  v7 = *((_OWORD *)a3 + 2);
  v13[2] = v6;
  v13[3] = v7;
  WebCore::Color::Color((WebCore::Color *)&v14, a4);
  v8 = (WebCore::GraphicsContext *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3));
  result = (unsigned int *)WebCore::DisplayList::FillRectWithRoundedHole::apply((WebCore::DisplayList::FillRectWithRoundedHole *)v13, v8);
  if ((v14 & 0x8000000000000) != 0)
  {
    result = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
    do
    {
      v11 = __ldaxr(result);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, result));
    if (!v12)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v10);
    }
  }
  return result;
}

uint64_t WebKit::RemoteDisplayListRecorder::fillArc(WebKit::RemoteDisplayListRecorder *this, const PathArc *a2)
{
  WebCore::GraphicsContext *v2;
  PathArc v4;

  v4 = *a2;
  v2 = (WebCore::GraphicsContext *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3));
  return WebCore::DisplayList::FillArc::apply((WebCore::DisplayList::FillArc *)&v4, v2);
}

uint64_t WebKit::RemoteDisplayListRecorder::fillQuadCurve(WebKit::RemoteDisplayListRecorder *this, const PathDataQuadCurve *a2)
{
  WebCore::GraphicsContext *v2;
  PathDataQuadCurve v4;

  v4 = *a2;
  v2 = (WebCore::GraphicsContext *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3));
  return WebCore::DisplayList::FillQuadCurve::apply((WebCore::DisplayList::FillQuadCurve *)&v4, v2);
}

uint64_t WebKit::RemoteDisplayListRecorder::fillBezierCurve(WebKit::RemoteDisplayListRecorder *this, const PathDataBezierCurve *a2)
{
  __int128 v2;
  WebCore::GraphicsContext *v3;
  _OWORD v5[2];

  v2 = *(_OWORD *)&a2->controlPoint2.m_x;
  v5[0] = *(_OWORD *)&a2->start.m_x;
  v5[1] = v2;
  v3 = (WebCore::GraphicsContext *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3));
  return WebCore::DisplayList::FillBezierCurve::apply((WebCore::DisplayList::FillBezierCurve *)v5, v3);
}

uint64_t WebKit::RemoteDisplayListRecorder::fillEllipse(WebKit::RemoteDisplayListRecorder *this, const WebCore::FloatRect *a2)
{
  WebCore::GraphicsContext *v2;
  __int128 v4;

  v4 = *(_OWORD *)a2;
  v2 = (WebCore::GraphicsContext *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3));
  return WebCore::DisplayList::FillEllipse::apply((WebCore::DisplayList::FillEllipse *)&v4, v2);
}

uint64_t *WebKit::RemoteDisplayListRecorder::paintFrameForMedia(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 48);
  WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::Ref(&v11, (uint64_t *)(a1 + 24));
  v12 = *a3;
  v6 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v6 = off_1E34B83E0;
  v7 = v11;
  v11 = 0;
  *(_QWORD *)(v6 + 8) = v7;
  *(_OWORD *)(v6 + 16) = v12;
  v13 = v6;
  WebKit::GPUConnectionToWebProcess::performWithMediaPlayerOnMainThread(v5, a2, (uint64_t)&v13);
  v9 = v13;
  v13 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(&v11, v8);
}

uint64_t WebKit::RemoteDisplayListRecorder::sharedVideoFrameReader(WebKit::RemoteDisplayListRecorder *this)
{
  uint64_t result;
  WebKit::SharedVideoFrameReader **v3;
  uint64_t v4;
  const WTF::MachSendRight *v5;
  uint64_t v6;

  v3 = (WebKit::SharedVideoFrameReader **)((char *)this + 64);
  result = *((_QWORD *)this + 8);
  if (!result)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 48) + 192);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v4 + 16));
    v5 = (const WTF::MachSendRight *)(*(_QWORD *)(*((_QWORD *)this + 5) + 48) + 88);
    v6 = WTF::fastMalloc((WTF *)0x50);
    *(_QWORD *)v6 = v4;
    WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)(v6 + 8), v5);
    *(_BYTE *)(v6 + 12) = 1;
    *(_BYTE *)(v6 + 16) = 0;
    *(_BYTE *)(v6 + 24) = 0;
    *(_QWORD *)(v6 + 72) = 0;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    *(_DWORD *)(v6 + 64) = 0;
    std::unique_ptr<WebKit::SharedVideoFrameReader>::reset[abi:sn180100](v3, (WebKit::SharedVideoFrameReader *)v6);
    return *((_QWORD *)this + 8);
  }
  return result;
}

void WebKit::RemoteDisplayListRecorder::paintVideoFrame(WebKit::RemoteDisplayListRecorder *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;

  v8 = WebKit::RemoteDisplayListRecorder::sharedVideoFrameReader(a1);
  WebKit::SharedVideoFrameReader::read(v8, a2, &v14);
  v9 = v14;
  if (v14)
  {
    v10 = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 3) + 16))(*((_QWORD **)a1 + 3));
    (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(*(_QWORD *)v10 + 440))(v10, v9, a3, a4);
    v14 = 0;
    v11 = v9 + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
}

IPC::Semaphore *WebKit::RemoteDisplayListRecorder::setSharedVideoFrameSemaphore(WebKit::RemoteDisplayListRecorder *a1, IPC::Semaphore *a2)
{
  uint64_t v3;

  v3 = WebKit::RemoteDisplayListRecorder::sharedVideoFrameReader(a1);
  return std::optional<IPC::Semaphore>::operator=[abi:sn180100]<IPC::Semaphore,void>((IPC::Semaphore *)(v3 + 16), a2);
}

BOOL WebKit::RemoteDisplayListRecorder::setSharedVideoFrameMemory(WebKit::RemoteDisplayListRecorder *a1)
{
  uint64_t v1;

  v1 = WebKit::RemoteDisplayListRecorder::sharedVideoFrameReader(a1);
  return WebKit::SharedVideoFrameReader::setSharedMemory(v1);
}

uint64_t WebKit::RemoteDisplayListRecorder::strokeEllipse(WebKit::RemoteDisplayListRecorder *this, const WebCore::FloatRect *a2)
{
  WebCore::GraphicsContext *v2;
  __int128 v4;

  v4 = *(_OWORD *)a2;
  v2 = (WebCore::GraphicsContext *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3));
  return WebCore::DisplayList::StrokeEllipse::apply((WebCore::DisplayList::StrokeEllipse *)&v4, v2);
}

uint64_t WebKit::RemoteDisplayListRecorder::clearRect(WebKit::RemoteDisplayListRecorder *this, const WebCore::FloatRect *a2)
{
  WebCore::GraphicsContext *v2;
  __int128 v4;

  v4 = *(_OWORD *)a2;
  v2 = (WebCore::GraphicsContext *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3));
  return WebCore::DisplayList::ClearRect::apply((WebCore::DisplayList::ClearRect *)&v4, v2);
}

_DWORD *WebKit::RemoteDisplayListRecorder::drawControlPart(WebKit::RemoteDisplayListRecorder *a1)
{
  WebCore::ControlFactory *v2;
  WebCore::GraphicsContext *v3;
  void *v4;
  _DWORD *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;

  WebCore::DisplayList::DrawControlPart::DrawControlPart();
  v2 = (WebCore::ControlFactory *)WebKit::RemoteDisplayListRecorder::controlFactory(a1);
  v3 = (WebCore::GraphicsContext *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 3) + 16))(*((_QWORD **)a1 + 3));
  WebCore::DisplayList::DrawControlPart::apply((WebCore::DisplayList::DrawControlPart *)&v12, v3, v2);
  if ((v14 & 0x8000000000000) != 0)
  {
    v6 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, v4);
    }
  }
  if ((v13 & 0x8000000000000) != 0)
  {
    v9 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v4);
    }
  }
  result = v12;
  v12 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebKit::RemoteDisplayListRecorder::applyStrokePattern(WebKit::RemoteDisplayListRecorder *this)
{
  WebCore::GraphicsContext *v1;
  char v3;

  v1 = (WebCore::GraphicsContext *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3));
  return WebCore::DisplayList::ApplyStrokePattern::apply((WebCore::DisplayList::ApplyStrokePattern *)&v3, v1);
}

uint64_t WebKit::RemoteDisplayListRecorder::applyFillPattern(WebKit::RemoteDisplayListRecorder *this)
{
  WebCore::GraphicsContext *v1;
  char v3;

  v1 = (WebCore::GraphicsContext *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3));
  return WebCore::DisplayList::ApplyFillPattern::apply((WebCore::DisplayList::ApplyFillPattern *)&v3, v1);
}

uint64_t WebKit::RemoteDisplayListRecorder::applyDeviceScaleFactor(WebKit::RemoteDisplayListRecorder *this, float a2)
{
  WebCore::GraphicsContext *v2;
  float v4;

  v4 = a2;
  v2 = (WebCore::GraphicsContext *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3));
  return WebCore::DisplayList::ApplyDeviceScaleFactor::apply((WebCore::DisplayList::ApplyDeviceScaleFactor *)&v4, v2);
}

void *WebKit::remoteGraphicsContextGLStreamWorkQueue(WebKit *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&WebKit::remoteGraphicsContextGLStreamWorkQueue(void)::onceKey);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&WebKit::remoteGraphicsContextGLStreamWorkQueue(void)::onceKey, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::remoteGraphicsContextGLStreamWorkQueue(void)::$_0 &&>>);
  }
  return &WebKit::remoteGraphicsContextGLStreamWorkQueue(void)::instance;
}

uint64_t WebKit::RemoteGraphicsContextGL::RemoteGraphicsContextGL(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  WTF::ThreadSafeWeakPtrControlBlock *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  v10 = WebCore::GraphicsContextGL::Client::Client((WebCore::GraphicsContextGL::Client *)a1);
  *(_DWORD *)(v10 + 16) = 1;
  *(_QWORD *)v10 = off_1E34B81D0;
  *(_QWORD *)(v10 + 8) = &unk_1E34B8218;
  v11 = (WTF::ThreadSafeWeakPtrControlBlock *)a2[2];
  if (v11)
    v11 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v11);
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = a2;
  WebKit::remoteGraphicsContextGLStreamWorkQueue(v11);
  do
    v12 = __ldaxr(dword_1EE341C18);
  while (__stlxr(v12 + 1, dword_1EE341C18));
  *(_QWORD *)(a1 + 40) = &WebKit::remoteGraphicsContextGLStreamWorkQueue(void)::instance;
  v13 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 48) = v13;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = a3;
  v14 = (unsigned int *)(a4 + 16);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  *(_QWORD *)(a1 + 72) = a4;
  WebKit::GPUConnectionToWebProcess::sharedResourceCache((WebKit::GPUConnectionToWebProcess *)a2, (WebKit::RemoteSharedResourceCache **)(a1 + 80));
  v16 = a2[24];
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v16 + 16));
  *(_QWORD *)(a1 + 88) = v16;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v16 + 16));
  *(_QWORD *)(a1 + 96) = v16;
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)(a1 + 104), (const WTF::MachSendRight *)(a2 + 11));
  *(_BYTE *)(a1 + 108) = 1;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = 0;
  *(_WORD *)(a1 + 176) = 257;
  do
    v17 = __ldaxr((unsigned int *)&WebKit::ScopedRenderingResourcesRequest::s_requests);
  while (__stlxr(v17 + 1, (unsigned int *)&WebKit::ScopedRenderingResourcesRequest::s_requests));
  do
    v18 = __ldaxr((unsigned int *)&WebKit::ScopedWebGLRenderingResourcesRequest::s_requests);
  while (__stlxr(v18 + 1, (unsigned int *)&WebKit::ScopedWebGLRenderingResourcesRequest::s_requests));
  *(_QWORD *)(a1 + 184) = a2[10];
  *(_QWORD *)(a1 + 192) = 0;
  return a1;
}

void WebKit::RemoteGraphicsContextGL::~RemoteGraphicsContextGL(WebKit::RemoteGraphicsContextGL *this, void *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  WTF *v18;
  void *v19;

  *(_QWORD *)this = off_1E34B81D0;
  *((_QWORD *)this + 1) = &unk_1E34B8218;
  v3 = *((_QWORD *)this + 24);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  WebKit::ScopedWebGLRenderingResourcesRequest::~ScopedWebGLRenderingResourcesRequest((WebKit::RemoteGraphicsContextGL *)((char *)this + 176));
  WebKit::SharedVideoFrameReader::~SharedVideoFrameReader((WebKit::RemoteGraphicsContextGL *)((char *)this + 96));
  v5 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), v4);
  v6 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v6)
    WTF::ThreadSafeRefCounted<WebKit::RemoteSharedResourceCache,(WTF::DestructionThread)0>::deref((unsigned int *)(v6 + 16));
  v7 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v7)
  {
    v15 = (unsigned int *)(v7 + 16);
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, (unsigned int *)(v7 + 16));
      (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 8) + 8))(v7 + 8);
    }
  }
  v8 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
    else
      --v8[2];
  }
  v9 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      IPC::StreamServerConnection::~StreamServerConnection((IPC::StreamServerConnection *)v9);
      WTF::fastFree(v18, v19);
    }
  }
  v13 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v13)
    WTF::ThreadSafeRefCounted<IPC::StreamConnectionWorkQueue,(WTF::DestructionThread)0>::deref((unsigned int *)(v13 + 8), v4);
  v14 = (unsigned __int8 *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v14)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v14, v4);
  WebCore::GraphicsContextGL::Client::~Client(this);
}

uint64_t WebKit::RemoteGraphicsContextGL::initialize(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 40);
  v10 = *a2;
  v11 = *((_WORD *)a2 + 4);
  v4 = (unsigned int *)(a1 + 16);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = WTF::fastMalloc((WTF *)0x20);
  v7 = v10;
  *(_QWORD *)v6 = &off_1E34B8408;
  *(_QWORD *)(v6 + 8) = v7;
  *(_WORD *)(v6 + 16) = v11;
  *(_QWORD *)(v6 + 24) = a1;
  v9 = v6;
  IPC::StreamConnectionWorkQueue::dispatch(v3, &v9);
  result = v9;
  v9 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::stopListeningForIPC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = &off_1E34B8430;
  v4[1] = v3;
  v6 = v4;
  IPC::StreamConnectionWorkQueue::dispatch(v2, (uint64_t *)&v6);
  result = (uint64_t)v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::forceContextLost(WebKit::RemoteGraphicsContextGL *this)
{
  char v2;

  v2 = 0;
  return IPC::Connection::send<Messages::RemoteGraphicsContextGLProxy::WasLost>(*(_QWORD *)(*((_QWORD *)this + 6) + 32), (uint64_t)&v2, *((_QWORD *)this + 8), 0, 0);
}

IPC::Encoder *WebKit::RemoteGraphicsContextGL::addDebugMessage(WebKit::RemoteGraphicsContextGL *this, int a2, int a3, int a4, const WTF::String *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  size_t v15;
  unint64_t v16;
  char *v17;
  _DWORD *v18;
  uint64_t v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  char *v23;
  _DWORD *v24;
  uint64_t v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  char *v29;
  _DWORD *v30;
  void *v31;
  IPC::Encoder *result;
  WTF *v33;
  void *v34;
  unint64_t v35;
  size_t v36;
  char *v37;
  void *v38;
  unint64_t v39;
  size_t v40;
  char *v41;
  void *v42;
  unint64_t v43;
  size_t v44;
  char *v45;
  void *v46;
  size_t v47;
  IPC::Encoder *v48;

  v9 = *(_QWORD *)(*((_QWORD *)this + 6) + 32);
  v10 = *((_QWORD *)this + 8);
  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 879;
  *(_QWORD *)(v11 + 8) = v10;
  v12 = (void *)(v11 + 16);
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v48 = (IPC::Encoder *)v11;
  v13 = *(_QWORD *)(v11 + 544);
  v14 = (v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v15 = v14 + 4;
  v16 = *(_QWORD *)(v11 + 552);
  if (v16 < v14 + 4)
  {
    v35 = (2 * v16 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v36 = v35;
      v35 *= 2;
    }
    while (v36 < v15);
    v47 = v36;
    v37 = (char *)mmap(0, v36, 3, 4098, -1, 0);
    if (v37 == (char *)-1)
      goto LABEL_30;
    v17 = v37;
    memcpy(v37, *(const void **)(v11 + 528), *(_QWORD *)(v11 + 544));
    v38 = *(void **)(v11 + 528);
    if (v38 != v12)
      munmap(v38, *(_QWORD *)(v11 + 552));
    *(_QWORD *)(v11 + 528) = v17;
    *(_QWORD *)(v11 + 552) = v47;
    v13 = *(_QWORD *)(v11 + 544);
  }
  else
  {
    v17 = *(char **)(v11 + 528);
  }
  bzero(&v17[v13], v14 - v13);
  *(_QWORD *)(v11 + 544) = v15;
  v18 = (_DWORD *)(*(_QWORD *)(v11 + 528) + v14);
  *(_QWORD *)(v11 + 536) = v18 + 1;
  *v18 = a2;
  v19 = *(_QWORD *)(v11 + 544);
  v20 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v21 = v20 + 4;
  v22 = *(_QWORD *)(v11 + 552);
  if (v22 < v20 + 4)
  {
    v39 = (2 * v22 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v40 = v39;
      v39 *= 2;
    }
    while (v40 < v21);
    v41 = (char *)mmap(0, v40, 3, 4098, -1, 0);
    if (v41 == (char *)-1)
    {
      __break(0xC471u);
      JUMPOUT(0x19703D0E4);
    }
    v23 = v41;
    memcpy(v41, *(const void **)(v11 + 528), *(_QWORD *)(v11 + 544));
    v42 = *(void **)(v11 + 528);
    if (v42 != v12)
      munmap(v42, *(_QWORD *)(v11 + 552));
    *(_QWORD *)(v11 + 528) = v23;
    *(_QWORD *)(v11 + 552) = v40;
    v19 = *(_QWORD *)(v11 + 544);
  }
  else
  {
    v23 = *(char **)(v11 + 528);
  }
  bzero(&v23[v19], v20 - v19);
  *(_QWORD *)(v11 + 544) = v21;
  v24 = (_DWORD *)(*(_QWORD *)(v11 + 528) + v20);
  *(_QWORD *)(v11 + 536) = v24 + 1;
  *v24 = a3;
  v25 = *(_QWORD *)(v11 + 544);
  v26 = (v25 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v27 = v26 + 4;
  v28 = *(_QWORD *)(v11 + 552);
  if (v28 >= v26 + 4)
  {
    v29 = *(char **)(v11 + 528);
    goto LABEL_7;
  }
  v43 = (2 * v28 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v44 = v43;
    v43 *= 2;
  }
  while (v44 < v27);
  v45 = (char *)mmap(0, v44, 3, 4098, -1, 0);
  if (v45 == (char *)-1)
  {
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x19703D0DCLL);
  }
  v29 = v45;
  memcpy(v45, *(const void **)(v11 + 528), *(_QWORD *)(v11 + 544));
  v46 = *(void **)(v11 + 528);
  if (v46 != v12)
    munmap(v46, *(_QWORD *)(v11 + 552));
  *(_QWORD *)(v11 + 528) = v29;
  *(_QWORD *)(v11 + 552) = v44;
  v25 = *(_QWORD *)(v11 + 544);
LABEL_7:
  bzero(&v29[v25], v26 - v25);
  *(_QWORD *)(v11 + 544) = v27;
  v30 = (_DWORD *)(*(_QWORD *)(v11 + 528) + v26);
  *(_QWORD *)(v11 + 536) = v30 + 1;
  *v30 = a4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, (uint64_t *)a5);
  IPC::Connection::sendMessageImpl(v9, (uint64_t *)&v48, 0, 0);
  result = v48;
  v48 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v31);
    return (IPC::Encoder *)WTF::fastFree(v33, v34);
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::reshape(WebKit::RemoteGraphicsContextGL *this, int a2, int a3)
{
  char v4;

  if (a2 && a3)
    return WebCore::GraphicsContextGLANGLE::reshape(*((WebCore::GraphicsContextGLANGLE **)this + 7));
  v4 = 0;
  return IPC::Connection::send<Messages::RemoteGraphicsContextGLProxy::WasLost>(*(_QWORD *)(*((_QWORD *)this + 6) + 32), (uint64_t)&v4, *((_QWORD *)this + 8), 0, 0);
}

uint64_t WebKit::RemoteGraphicsContextGL::getErrors(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 Errors;
  uint64_t v4;

  Errors = WebCore::GraphicsContextGLANGLE::getErrors(*(WebCore::GraphicsContextGLANGLE **)(a1 + 56));
  v4 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, Errors);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t WebKit::RemoteGraphicsContextGL::drawSurfaceBufferToImageBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;

  v13 = a3;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E34B8458;
  v8[1] = a1;
  v8[2] = &v13;
  v12 = v8;
  (*(void (**)(uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v7 + 2320))(v7, a2, &v12);
  v9 = v12;
  v12 = 0;
  if (v9)
    (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  v10 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
}

uint64_t WebKit::RemoteGraphicsContextGL::surfaceBufferToVideoFrame(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v16;
  _OWORD v17[3];
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[3];
  uint64_t v21;
  char v22;

  LOBYTE(v20[0]) = 0;
  v22 = 0;
  WebCore::GraphicsContextGLCocoa::surfaceBufferToVideoFrame();
  if (v19)
  {
    v5 = *(_QWORD *)(a1 + 88);
    v16 = (unsigned int *)v19;
    v19 = 0;
    WebKit::RemoteVideoFrameObjectHeap::add(v5, (uint64_t *)&v16, (uint64_t)v17);
    v20[0] = v17[0];
    v20[1] = v17[1];
    v20[2] = v17[2];
    v21 = v18;
    v22 = 1;
    v6 = v16;
    v16 = 0;
    if (v6)
    {
      v7 = v6 + 2;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v6 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
      }
    }
    v10 = (unsigned int *)v19;
    v19 = 0;
    if (v10)
    {
      v11 = v10 + 2;
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v10 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
      }
    }
  }
  v14 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v14 + 16))(v14, v20);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
}

BOOL WebKit::RemoteGraphicsContextGL::webXREnabled(WebKit::RemoteGraphicsContextGL *this)
{
  unsigned __int8 *v2;
  _BOOL8 v3;
  uint64_t v5;
  uint64_t v6;

  v2 = (unsigned __int8 *)*((_QWORD *)this + 3);
  if (!v2)
    return 0;
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v2, *((_QWORD *)this + 4), &v6);
  v5 = v6;
  if (!v6)
    return 0;
  v3 = *(_BYTE *)(v6 + 362) != 0;
  v6 = 0;
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v5 + 16));
  return v3;
}

uint64_t WebKit::RemoteGraphicsContextGL::simulateEventForTesting(uint64_t a1, int a2)
{
  WTF::ThreadSafeWeakPtrControlBlock *v3;
  WTF::ThreadSafeWeakPtrControlBlock *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;

  if (a2 != 1)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 2272))(*(_QWORD *)(a1 + 56));
  v3 = *(WTF::ThreadSafeWeakPtrControlBlock **)(a1 + 24);
  if (v3)
    v4 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v3);
  else
    v4 = 0;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = &off_1E34B84A8;
  v7[1] = v4;
  v7[2] = v5;
  v7[3] = v6;
  v9 = v7;
  WTF::callOnMainRunLoop();
  result = (uint64_t)v9;
  if (v9)
    return (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::getBufferSubDataInline(int a1, int a2, int a3, WTF *this, uint64_t *a5)
{
  uint64_t v6;
  void *v9;
  void *v10;
  int BufferSubDataWithStatus;
  WTF *v12;
  WTF *v13;
  uint64_t v14;
  void *v15;
  WTF *v16;

  if ((unint64_t)this - 65537 > 0xFFFFFFFFFFFEFFFFLL)
  {
    WTF::tryFastMalloc(this);
    WTF::fastFree(0, v9);
    WTF::fastFree(0, v10);
    if (v16)
    {
      BufferSubDataWithStatus = WebCore::GraphicsContextGLANGLE::getBufferSubDataWithStatus();
      if (BufferSubDataWithStatus)
        v12 = this;
      else
        v12 = 0;
      if (BufferSubDataWithStatus)
        v13 = v16;
      else
        v13 = 0;
    }
    else
    {
      WebCore::GraphicsContextGLANGLE::addError();
      v12 = 0;
      v13 = 0;
    }
    v14 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, WTF *, WTF *))(*(_QWORD *)v14 + 16))(v14, v13, v12);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return WTF::fastFree(v16, v15);
  }
  else
  {
    WebCore::GraphicsContextGLANGLE::addError();
    v6 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 16))(v6, 0, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

unsigned int *WebKit::RemoteGraphicsContextGL::getBufferSubDataSharedMemory(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v7;
  unsigned int *result;
  uint64_t BufferSubDataWithStatus;
  uint64_t v11;
  uint64_t v12;

  if (a4 < 0x6400001)
  {
    WebCore::SharedMemoryHandle::setOwnershipOfMemory();
    WebCore::SharedMemory::map();
    if (v12 && *(_QWORD *)(v12 + 8) >= a4)
    {
      BufferSubDataWithStatus = WebCore::GraphicsContextGLANGLE::getBufferSubDataWithStatus();
    }
    else
    {
      WebCore::GraphicsContextGLANGLE::addError();
      BufferSubDataWithStatus = 0;
    }
    v11 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, BufferSubDataWithStatus);
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    result = (unsigned int *)v12;
    if (v12)
      return WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref((unsigned int *)v12);
  }
  else
  {
    v7 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 16))(v7, 0);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::readPixelsInline(int a1, int a2, unint64_t a3, WebCore::GraphicsContextGL *this, unsigned int a5, uint64_t a6, uint64_t *a7)
{
  int v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v21;
  uint64_t PixelsWithStatus;
  unsigned int v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  WTF *v28;

  v8 = a3;
  v9 = HIDWORD(a3);
  v10 = WebCore::GraphicsContextGL::computeBytesPerGroup(this);
  if (v8 >= 0)
    v11 = v8;
  else
    v11 = -v8;
  if ((v9 & 0x80000000) == 0)
    v12 = v9;
  else
    v12 = -(int)v9;
  v13 = v11 * (unint64_t)v12;
  if ((v13 & 0xFFFFFFFF00000000) != 0
    || (v14 = v13 * (unint64_t)v10, (v14 & 0xFFFFFFFF00000000) != 0)
    || !v10)
  {
    v19 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v19 + 16))(v19, 0, 0, 0, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  if ((v14 - 1) >> 16)
  {
    if ((_DWORD)v14)
    {
LABEL_15:
      WebCore::GraphicsContextGLANGLE::addError();
      PixelsWithStatus = 0;
      v23 = 0;
      v16 = 0;
LABEL_18:
      WTF::fastFree(v16, v21);
      WTF::fastFree(0, v24);
      v15 = 0;
      v16 = 0;
      goto LABEL_19;
    }
    v16 = 0;
    v15 = 0;
  }
  else
  {
    v15 = v14;
    WTF::tryFastMalloc((WTF *)v14);
    v16 = v28;
    WTF::fastFree(0, v17);
    WTF::fastFree(0, v18);
    if (!v28)
      goto LABEL_15;
  }
  PixelsWithStatus = WebCore::GraphicsContextGLANGLE::readPixelsWithStatus();
  v23 = v21;
  if (!(_BYTE)v21)
    goto LABEL_18;
LABEL_19:
  v25 = v23;
  v26 = *a7;
  *a7 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, WTF *, uint64_t))(*(_QWORD *)v26 + 16))(v26, PixelsWithStatus, v25, v16, v15);
  (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  return WTF::fastFree(v16, v27);
}

uint64_t WebKit::RemoteGraphicsContextGL::readPixelsSharedMemory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t PixelsWithStatus;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v14;

  WebCore::SharedMemoryHandle::setOwnershipOfMemory();
  WebCore::SharedMemory::map();
  if (v14)
  {
    PixelsWithStatus = WebCore::GraphicsContextGLANGLE::readPixelsWithStatus();
    v11 = v10;
  }
  else
  {
    WebCore::GraphicsContextGLANGLE::addError();
    v11 = 0;
    PixelsWithStatus = 0;
  }
  if (v14)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v14);
  v12 = *a8;
  *a8 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, PixelsWithStatus, v11);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
}

uint64_t WebKit::RemoteGraphicsContextGL::multiDrawArraysANGLE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  WTF *v5;
  uint64_t result;
  WTF *v7;
  int v8;
  int v9;
  WTF *v10;
  int v11;
  int v12;

  WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>((uint64_t)&v10, *(int **)(a3 + 8), *(_QWORD *)a3);
  WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>((uint64_t)&v7, *(int **)(a3 + 16), *(_QWORD *)a3);
  if (v9 == v12)
  {
    WebCore::GraphicsContextGLANGLE::multiDrawArraysANGLE();
    v5 = v7;
    if (v7)
    {
      v7 = 0;
      v8 = 0;
      WTF::fastFree(v5, v4);
    }
    result = (uint64_t)v10;
    if (v10)
    {
      v10 = 0;
      v11 = 0;
      return WTF::fastFree((WTF *)result, v4);
    }
  }
  else
  {
    result = 44;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::multiDrawArraysInstancedANGLE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  WTF *v6;
  WTF *v7;
  uint64_t result;
  WTF *v9;
  int v10;
  int v11;
  WTF *v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;

  WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>((uint64_t)&v15, *(int **)(a3 + 8), *(_QWORD *)a3);
  WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>((uint64_t)&v12, *(int **)(a3 + 16), *(_QWORD *)a3);
  WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>((uint64_t)&v9, *(int **)(a3 + 24), *(_QWORD *)a3);
  if (v14 == v17 && v11 == v17)
  {
    WebCore::GraphicsContextGLANGLE::multiDrawArraysInstancedANGLE();
    v6 = v9;
    if (v9)
    {
      v9 = 0;
      v10 = 0;
      WTF::fastFree(v6, v5);
    }
    v7 = v12;
    if (v12)
    {
      v12 = 0;
      v13 = 0;
      WTF::fastFree(v7, v5);
    }
    result = v15;
    if (v15)
    {
      v15 = 0;
      v16 = 0;
      return WTF::fastFree((WTF *)result, v5);
    }
  }
  else
  {
    result = 44;
    __break(0xC471u);
  }
  return result;
}

WTF *WebKit::RemoteGraphicsContextGL::multiDrawElementsANGLE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  WTF *result;
  WTF *v5;
  int v6;

  WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>((uint64_t)&v5, *(int **)(a3 + 8), *(_QWORD *)a3);
  WebCore::GraphicsContextGLANGLE::multiDrawElementsANGLE();
  result = v5;
  if (v5)
  {
    v5 = 0;
    v6 = 0;
    return (WTF *)WTF::fastFree(result, v3);
  }
  return result;
}

WTF *WebKit::RemoteGraphicsContextGL::multiDrawElementsInstancedANGLE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  WTF *v5;
  WTF *result;
  WTF *v7;
  int v8;
  WTF *v9;
  int v10;

  WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>((uint64_t)&v9, *(int **)(a3 + 8), *(_QWORD *)a3);
  WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>((uint64_t)&v7, *(int **)(a3 + 24), *(_QWORD *)a3);
  WebCore::GraphicsContextGLANGLE::multiDrawElementsInstancedANGLE();
  v5 = v7;
  if (v7)
  {
    v7 = 0;
    v8 = 0;
    WTF::fastFree(v5, v4);
  }
  result = v9;
  if (v9)
  {
    v9 = 0;
    v10 = 0;
    return (WTF *)WTF::fastFree(result, v4);
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::multiDrawArraysInstancedBaseInstanceANGLE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;
  uint64_t result;
  WTF *v9;
  int v10;
  int v11;
  WTF *v12;
  int v13;
  int v14;
  WTF *v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;

  WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>((uint64_t)&v18, *(int **)(a3 + 8), *(_QWORD *)a3);
  WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>((uint64_t)&v15, *(int **)(a3 + 16), *(_QWORD *)a3);
  WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>((uint64_t)&v12, *(int **)(a3 + 24), *(_QWORD *)a3);
  WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>((uint64_t)&v9, *(int **)(a3 + 32), *(_QWORD *)a3);
  if (v17 == v20 && v14 == v20 && v11 == v20)
  {
    WebCore::GraphicsContextGLANGLE::multiDrawArraysInstancedBaseInstanceANGLE();
    v5 = v9;
    if (v9)
    {
      v9 = 0;
      v10 = 0;
      WTF::fastFree(v5, v4);
    }
    v6 = v12;
    if (v12)
    {
      v12 = 0;
      v13 = 0;
      WTF::fastFree(v6, v4);
    }
    v7 = v15;
    if (v15)
    {
      v15 = 0;
      v16 = 0;
      WTF::fastFree(v7, v4);
    }
    result = v18;
    if (v18)
    {
      v18 = 0;
      v19 = 0;
      return WTF::fastFree((WTF *)result, v4);
    }
  }
  else
  {
    result = 44;
    __break(0xC471u);
  }
  return result;
}

WTF *WebKit::RemoteGraphicsContextGL::multiDrawElementsInstancedBaseVertexBaseInstanceANGLE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;
  WTF *result;
  WTF *v9;
  int v10;
  WTF *v11;
  int v12;
  WTF *v13;
  int v14;
  WTF *v15;
  int v16;

  WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>((uint64_t)&v15, *(int **)(a3 + 8), *(_QWORD *)a3);
  WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>((uint64_t)&v13, *(int **)(a3 + 24), *(_QWORD *)a3);
  WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>((uint64_t)&v11, *(int **)(a3 + 32), *(_QWORD *)a3);
  WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>((uint64_t)&v9, *(int **)(a3 + 40), *(_QWORD *)a3);
  WebCore::GraphicsContextGLANGLE::multiDrawElementsInstancedBaseVertexBaseInstanceANGLE();
  v5 = v9;
  if (v9)
  {
    v9 = 0;
    v10 = 0;
    WTF::fastFree(v5, v4);
  }
  v6 = v11;
  if (v11)
  {
    v11 = 0;
    v12 = 0;
    WTF::fastFree(v6, v4);
  }
  v7 = v13;
  if (v13)
  {
    v13 = 0;
    v14 = 0;
    WTF::fastFree(v7, v4);
  }
  result = v15;
  if (v15)
  {
    v15 = 0;
    v16 = 0;
    return (WTF *)WTF::fastFree(result, v4);
  }
  return result;
}

uint64_t WebKit::RemoteImageBuffer::create(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v25;

  v6 = WTF::fastMalloc((WTF *)0x28);
  v8 = v6;
  v9 = *a2;
  *a2 = 0;
  v25 = v9;
  *(_DWORD *)(v6 + 8) = 1;
  *(_QWORD *)v6 = off_1E34B8240;
  v10 = (unsigned int *)(a3 + 16);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v12 = v25;
  v25 = 0;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = v12;
  *(_BYTE *)(v6 + 32) = 1;
  do
    v13 = __ldaxr((unsigned int *)&WebKit::ScopedRenderingResourcesRequest::s_requests);
  while (__stlxr(v13 + 1, (unsigned int *)&WebKit::ScopedRenderingResourcesRequest::s_requests));
  v14 = *(_QWORD *)(v6 + 24);
  v15 = *(unsigned __int8 *)(v14 + 41);
  v16 = *(unsigned __int8 *)(v14 + 48);
  if (v15 == 1)
  {
    v17 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 56);
    if (v16)
    {
      v18 = (unint64_t *)(v17 + 64);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
    }
    do
      v20 = __ldaxr(&WebKit::globalImageBufferForCanvasCount);
    while (__stlxr(v20 + 1, &WebKit::globalImageBufferForCanvasCount));
    v21 = (unint64_t *)(v17 + 72);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
  }
  if (v16)
  {
    do
      v23 = __ldaxr(&WebKit::globalAcceleratedImageBufferCount);
    while (__stlxr(v23 + 1, &WebKit::globalAcceleratedImageBufferCount));
  }
  *a1 = v6;
  WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(&v25, v7);
  return IPC::StreamServerConnection::startReceivingMessages(*(_QWORD *)(*(_QWORD *)(v8 + 16) + 40), v8, 0x53u, *(_QWORD *)(*(_QWORD *)(v8 + 24) + 120));
}

void WebKit::RemoteImageBuffer::~RemoteImageBuffer(WebKit::RemoteImageBuffer *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  WTF::RunLoop *v14;
  void *v15;
  WTF::RunLoop *v16;
  unsigned int v17;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;

  *(_QWORD *)this = off_1E34B8240;
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *((_QWORD *)this + 3);
    v4 = *(unsigned __int8 *)(v3 + 41);
    v5 = *(unsigned __int8 *)(v3 + 48);
    if (v4 == 1)
    {
      v6 = *(_QWORD *)(v2 + 56);
      if (v5)
      {
        v7 = (unint64_t *)(v6 + 64);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
      }
      do
        v9 = __ldaxr(&WebKit::globalImageBufferForCanvasCount);
      while (__stlxr(v9 - 1, &WebKit::globalImageBufferForCanvasCount));
      v10 = (unint64_t *)(v6 + 72);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
    }
    if (v5)
    {
      do
        v12 = __ldaxr(&WebKit::globalAcceleratedImageBufferCount);
      while (__stlxr(v12 - 1, &WebKit::globalAcceleratedImageBufferCount));
    }
  }
  v13 = (char *)this + 24;
  v14 = (WTF::RunLoop *)WebCore::ImageBuffer::volatilityState(*((WebCore::ImageBuffer **)this + 3));
  if ((_DWORD)v14 != 1)
  {
    v14 = *(WTF::RunLoop **)v13;
    if (*(_QWORD *)(*(_QWORD *)v13 + 112))
    {
      v14 = (WTF::RunLoop *)(*(uint64_t (**)(WTF::RunLoop *))(*(_QWORD *)v14 + 16))(v14);
      if (*((_DWORD *)v14 + 91))
      {
        v16 = v14;
        do
          v14 = (WTF::RunLoop *)(*(uint64_t (**)(WTF::RunLoop *, uint64_t))(*(_QWORD *)v16 + 104))(v16, 1);
        while (*((_DWORD *)v16 + 91));
      }
    }
  }
  if (*((_BYTE *)this + 32))
  {
    do
      v17 = __ldaxr((unsigned int *)&WebKit::ScopedRenderingResourcesRequest::s_requests);
    while (__stlxr(v17 - 1, (unsigned int *)&WebKit::ScopedRenderingResourcesRequest::s_requests));
    if (!atomic_load((unsigned int *)&WebKit::ScopedRenderingResourcesRequest::s_requests))
      WebKit::ScopedRenderingResourcesRequest::scheduleFreeRenderingResources(v14);
  }
  WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref((uint64_t *)this + 3, v15);
  v19 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v19)
  {
    v20 = (unsigned int *)(v19 + 16);
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, (unsigned int *)(v19 + 16));
      (*(void (**)(uint64_t))(*(_QWORD *)(v19 + 8) + 8))(v19 + 8);
    }
  }
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteImageBuffer::~RemoteImageBuffer(this);
  WTF::fastFree(v1, v2);
}

_QWORD *WebKit::RemoteImageBuffer::stopListeningForIPC(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  v1 = this[2];
  this[2] = 0;
  if (v1)
  {
    v2 = this[3];
    v3 = *(unsigned __int8 *)(v2 + 41);
    v4 = *(unsigned __int8 *)(v2 + 48);
    if (v3 == 1)
    {
      v5 = *(_QWORD *)(v1 + 56);
      if (v4)
      {
        v6 = (unint64_t *)(v5 + 64);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
      }
      do
        v8 = __ldaxr(&WebKit::globalImageBufferForCanvasCount);
      while (__stlxr(v8 - 1, &WebKit::globalImageBufferForCanvasCount));
      v9 = (unint64_t *)(v5 + 72);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
    }
    if (v4)
    {
      do
        v11 = __ldaxr(&WebKit::globalAcceleratedImageBufferCount);
      while (__stlxr(v11 - 1, &WebKit::globalAcceleratedImageBufferCount));
    }
    this = IPC::StreamServerConnection::stopReceivingMessages(*(_QWORD *)(v1 + 40), 0x53u, *(_QWORD *)(this[3] + 120));
    v12 = (unsigned int *)(v1 + 16);
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)(v1 + 16));
      return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 8) + 8))(v1 + 8);
    }
  }
  return this;
}

unsigned int *WebKit::RemoteImageBuffer::getPixelBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v12;
  uint64_t v13;
  size_t v14;
  size_t v15;
  _DWORD *v16;
  uint64_t v17;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(v6 + 104);
  if (v7)
  {
    do
      v12 = __ldaxr((unsigned int *)v7);
    while (__stlxr(v12 + 1, (unsigned int *)v7));
    if ((WebCore::PixelBuffer::supportedPixelFormat() & 1) != 0)
    {
      v22[0] = a3;
      v22[1] = a4;
      v13 = *(_QWORD *)(a1 + 24);
      WebCore::ImageBufferAllocator::ImageBufferAllocator((WebCore::ImageBufferAllocator *)&v20);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v13 + 88))(&v21, v13, a2, v22, &v20);
      v14 = *(_QWORD *)(v7 + 8);
      if (v21)
      {
        v15 = *(_QWORD *)(v21 + 48);
        if (v15 > v14)
        {
          WebKit::RemoteRenderingBackend::terminateWebProcess(*(_QWORD *)(a1 + 16), (uint64_t)"Shmem for return of getPixelBuffer is too small");
          v19 = (_DWORD *)v21;
          v21 = 0;
          if (v19)
          {
            if (v19[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
            else
              --v19[2];
          }
          return WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref((unsigned int *)v7);
        }
        memcpy(*(void **)(v7 + 16), *(const void **)(v21 + 40), v15);
      }
      else
      {
        bzero(*(void **)(v7 + 16), v14);
      }
      v16 = (_DWORD *)v21;
      v21 = 0;
      if (v16)
      {
        if (v16[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
        else
          --v16[2];
      }
      v17 = *a5;
      *a5 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    }
    else
    {
      WebKit::RemoteRenderingBackend::terminateWebProcess(*(_QWORD *)(a1 + 16), (uint64_t)"Pixel format not supported");
    }
    return WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref((unsigned int *)v7);
  }
  return (unsigned int *)WebKit::RemoteRenderingBackend::terminateWebProcess(v6, (uint64_t)"No shared memory for getPixelBufferForImageBuffer");
}

unsigned __int8 **WebKit::RemoteRenderingBackend::terminateWebProcess(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = off_1ECE71C40;
  if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 80);
    v7 = 134218242;
    v8 = v6;
    v9 = 2082;
    v10 = a2;
    _os_log_fault_impl(&dword_196BCC000, v4, OS_LOG_TYPE_FAULT, "Requesting termination of web process %llu for reason: %{public}s", (uint8_t *)&v7, 0x16u);
  }
  return WebKit::GPUConnectionToWebProcess::terminateWebProcess(*(WebKit::GPUConnectionToWebProcess **)(a1 + 48));
}

unsigned int *WebKit::RemoteImageBuffer::getPixelBufferWithNewMemory(uint64_t a1, uint64_t a2, __int16 *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int *v15;
  const void *v16;
  CFTypeRef v17;
  unsigned int *result;
  __int16 v19;
  CFTypeRef cf;
  unsigned int *v21;

  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(unsigned int **)(v11 + 104);
  *(_QWORD *)(v11 + 104) = 0;
  if (v12)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v12);
  WebCore::SharedMemory::map();
  v13 = v21;
  v14 = *(_QWORD *)(a1 + 16);
  if (v21)
  {
    v21 = 0;
    v15 = *(unsigned int **)(v14 + 104);
    *(_QWORD *)(v14 + 104) = v13;
    if (v15)
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v15);
    v19 = *a3;
    v16 = (const void *)*((_QWORD *)a3 + 1);
    *((_QWORD *)a3 + 1) = 0;
    cf = v16;
    WebKit::RemoteImageBuffer::getPixelBuffer(a1, (uint64_t)&v19, a4, a5, a6);
    v17 = cf;
    cf = 0;
    if (v17)
      CFRelease(v17);
  }
  else
  {
    WebKit::RemoteRenderingBackend::terminateWebProcess(v14, (uint64_t)"Shared memory could not be mapped.");
  }
  result = v21;
  v21 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(result);
  return result;
}

uint64_t WebKit::RemoteImageBuffer::putPixelBuffer(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD v7[2];
  uint64_t v8;

  v8 = a5;
  v7[0] = a3;
  v7[1] = a4;
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 24) + 96))(*(_QWORD *)(a1 + 24), *a2, v7, &v8, a6);
}

WTF::MachSendRight *WebKit::RemoteImageBuffer::getShareableBitmap(_BYTE *a1, char a2, uint64_t *a3)
{
  uint64_t v4;
  _BYTE *v6[2];
  _BYTE v7[79];
  char v8;

  v8 = a2;
  v6[0] = a1;
  v6[1] = &v8;
  WebKit::RemoteImageBuffer::getShareableBitmap(WebCore::PreserveResolution,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&)::$_0::operator()(v7, v6);
  v4 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v4 + 16))(v4, v7);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v7);
}

WebCore::ShareableBitmap *WebKit::RemoteImageBuffer::getShareableBitmap(WebCore::PreserveResolution,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&)::$_0::operator()(_BYTE *a1, _BYTE **a2)
{
  uint64_t v4;
  WebCore::ShareableBitmap *result;
  const FloatSize *v6;
  const FloatSize *v7;
  FloatSize v8;
  FloatSize v9;
  uint64_t v11;
  const void *v12;
  CFTypeRef v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD v18[2];
  _QWORD v19[2];
  uint64_t v20;
  WebCore::ShareableBitmap *v21;
  CFTypeRef cf;
  char v23;
  char v24;
  const void *v25;
  char v26;
  WebCore::ShareableBitmap *v27;
  WebCore::ShareableBitmap *v28;

  v4 = (uint64_t)*a2;
  result = (WebCore::ShareableBitmap *)WebCore::ImageBuffer::backendSize(*((WebCore::ImageBuffer **)*a2 + 3));
  v6 = *(const FloatSize **)(v4 + 24);
  v8 = v6[2];
  v7 = v6 + 2;
  v9 = v8;
  if (!*a2[1])
  {
    WebCore::IntSize::IntSize((WebCore::IntSize *)&v21, v7);
    result = v21;
  }
  v28 = result;
  if ((int)result < 1 || SHIDWORD(result) <= 0)
    goto LABEL_8;
  v11 = *(_QWORD *)(v4 + 24);
  v12 = *(const void **)(v11 + 32);
  if (v12)
    CFRetain(*(CFTypeRef *)(v11 + 32));
  v25 = v12;
  v26 = 1;
  MEMORY[0x19AEB3600](&v21, &v28, &v25, 0);
  WebCore::ShareableBitmap::create();
  if (v23)
  {
    v13 = cf;
    cf = 0;
    if (v13)
      CFRelease(v13);
  }
  if (v26)
  {
    v14 = v25;
    v25 = 0;
    if (v14)
      CFRelease(v14);
  }
  result = v27;
  if (!v27)
  {
LABEL_8:
    *a1 = 0;
    a1[64] = 0;
    return result;
  }
  WebCore::ShareableBitmap::createHandle();
  result = (WebCore::ShareableBitmap *)WebCore::ProcessIdentity::operator BOOL();
  if ((_DWORD)result)
  {
    if (!v24)
    {
      __break(1u);
      return result;
    }
    WebCore::SharedMemoryHandle::setOwnershipOfMemory();
  }
  WebCore::ShareableBitmap::createGraphicsContext(v27);
  if (v20)
  {
    v15 = *(_QWORD *)(v4 + 24);
    v19[0] = 0;
    v19[1] = vcvt_f32_s32((int32x2_t)v28);
    v18[0] = 0;
    v18[1] = v9;
    (*(void (**)(uint64_t, uint64_t, _QWORD *, _QWORD *, uint64_t))(*(_QWORD *)v20 + 384))(v20, v15, v19, v18, 4385);
    *a1 = 0;
    a1[64] = 0;
    if (v24)
    {
      WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)a1, (uint64_t)&v21);
      a1[64] = 1;
    }
  }
  else
  {
    *a1 = 0;
    a1[64] = 0;
  }
  v16 = v20;
  v20 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&v21);
  result = v27;
  v27 = 0;
  if (result)
    return (WebCore::ShareableBitmap *)WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)result, v17);
  return result;
}

WTF::MachSendRight *WebKit::RemoteImageBuffer::filteredNativeImage(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v5;
  const void *v6;
  void *v7;
  CFTypeRef v8;
  const void *v9;
  WTF::MachSendRight *result;
  uint64_t v11;
  WebCore::ShareableBitmap *v12;
  WebCore::NativeImage *v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  char v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  char v23[8];
  CFTypeRef cf;
  char v25;
  char v26;
  const void *v27;
  char v28;
  WebCore::ShareableBitmap *v29;
  uint64_t v30;
  WebCore::NativeImage *v31;

  (*(void (**)(WebCore::NativeImage **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 64))(&v31, *(_QWORD *)(a1 + 24), *a2);
  if (!v31)
  {
    LOBYTE(v15) = 0;
    v18 = 0;
LABEL_26:
    v14 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v14 + 16))(v14, &v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&v15);
  }
  v30 = WebCore::NativeImage::size(v31);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(const void **)(v5 + 32);
  if (v6)
    CFRetain(*(CFTypeRef *)(v5 + 32));
  v27 = v6;
  v28 = 1;
  MEMORY[0x19AEB3600](v23, &v30, &v27, 0);
  WebCore::ShareableBitmap::create();
  if (v25)
  {
    v8 = cf;
    cf = 0;
    if (v8)
      CFRelease(v8);
  }
  if (v28)
  {
    v9 = v27;
    v27 = 0;
    if (v9)
      CFRelease(v9);
  }
  if (!v29)
  {
    LOBYTE(v15) = 0;
    v18 = 0;
LABEL_24:
    v13 = v31;
    v31 = 0;
    if (v13)
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::deref((unsigned __int8 **)v13 + 1, v7);
    goto LABEL_26;
  }
  WebCore::ShareableBitmap::createHandle();
  result = (WTF::MachSendRight *)WebCore::ProcessIdentity::operator BOOL();
  if (!(_DWORD)result)
  {
LABEL_14:
    WebCore::ShareableBitmap::createGraphicsContext(v29);
    if (v22)
    {
      v15 = 0;
      v16 = (float)(int)v30;
      v17 = (float)SHIDWORD(v30);
      v19 = 0;
      v20 = (float)(int)v30;
      v21 = (float)SHIDWORD(v30);
      WebCore::GraphicsContext::drawNativeImage();
      v18 = 0;
      if (v26)
      {
        WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)&v15, (uint64_t)v23);
        v18 = 1;
      }
    }
    else
    {
      LOBYTE(v15) = 0;
      v18 = 0;
    }
    v11 = v22;
    v22 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v23);
    v12 = v29;
    v29 = 0;
    if (v12)
      WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v12, v7);
    goto LABEL_24;
  }
  if (v26)
  {
    WebCore::SharedMemoryHandle::setOwnershipOfMemory();
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

uint64_t WebKit::RemoteImageBuffer::convertToLuminanceMask(WebKit::RemoteImageBuffer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 72))(*((_QWORD *)this + 3));
}

uint64_t WebKit::RemoteImageBuffer::transformToColorSpace(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 80))(*(_QWORD *)(a1 + 24));
}

uint64_t WebKit::RemoteImageBuffer::flushContextSync(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24));
  v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t WebKit::RemoteImageBufferSet::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  v8 = WTF::fastMalloc((WTF *)0x78);
  v9 = WebKit::RemoteImageBufferSet::RemoteImageBufferSet(v8, a1, a2, a3);
  *a4 = v9;
  return IPC::StreamServerConnection::startReceivingMessages(*(_QWORD *)(*(_QWORD *)(v9 + 32) + 40), v8, 0x55u, *(_QWORD *)(v8 + 16));
}

uint64_t WebKit::RemoteImageBufferSet::RemoteImageBufferSet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v5;
  unsigned int v6;
  const void *v7;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E34B8268;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a3;
  v5 = (unsigned int *)(a4 + 16);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  *(_QWORD *)(a1 + 32) = a4;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 84) = 1065353216;
  v7 = *(const void **)WebCore::DestinationColorSpace::SRGB((WebCore::DestinationColorSpace *)a1);
  *(_QWORD *)(a1 + 88) = v7;
  if (v7)
    CFRetain(v7);
  *(_WORD *)(a1 + 97) = 0;
  *(_BYTE *)(a1 + 100) = 0;
  *(_BYTE *)(a1 + 116) = 0;
  return a1;
}

void WebKit::RemoteImageBufferSet::updateConfiguration(uint64_t a1, _QWORD *a2, char a3, CFTypeRef *a4, char a5, float a6)
{
  CFTypeRef v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  *(_QWORD *)(a1 + 72) = *a2;
  *(_BYTE *)(a1 + 80) = a3;
  *(float *)(a1 + 84) = a6;
  v8 = *a4;
  if (*a4)
    CFRetain(*a4);
  v9 = *(const void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v8;
  if (v9)
    CFRelease(v9);
  *(_BYTE *)(a1 + 96) = a5;
  v10 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (!v10)
  {
    v18 = 0;
    goto LABEL_16;
  }
  v11 = *(_QWORD *)(v10 + 8);
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
LABEL_8:
    MEMORY[0x19AEABB3C](v11);
    goto LABEL_9;
  }
  if (__stxr(1u, (unsigned __int8 *)v11))
    goto LABEL_8;
LABEL_9:
  v13 = *(_QWORD *)(v11 + 8);
  v14 = v13 - 1;
  *(_QWORD *)(v11 + 8) = v13 - 1;
  if (v13 == 1)
  {
    v35 = *(_QWORD *)(v11 + 16);
    v15 = *(_QWORD *)(v11 + 24);
    *(_QWORD *)(v11 + 24) = 0;
    v16 = v35 != 0;
  }
  else
  {
    v15 = 0;
    v16 = 1;
  }
  v17 = __ldxr((unsigned __int8 *)v11);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_39;
  }
  if (__stlxr(0, (unsigned __int8 *)v11))
LABEL_39:
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
  if (!v14)
  {
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    if (!v16)
      WTF::fastFree((WTF *)v11, a2);
  }
  v18 = *(_QWORD *)(a1 + 56);
  if (v18)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::ref(*(unsigned __int8 **)(v18 + 8));
LABEL_16:
  v19 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v18;
  if (!v19)
    goto LABEL_26;
  v20 = *(_QWORD *)(v19 + 8);
  if (__ldaxr((unsigned __int8 *)v20))
  {
    __clrex();
LABEL_19:
    MEMORY[0x19AEABB3C](v20);
    goto LABEL_20;
  }
  if (__stxr(1u, (unsigned __int8 *)v20))
    goto LABEL_19;
LABEL_20:
  v22 = *(_QWORD *)(v20 + 8);
  v23 = v22 - 1;
  *(_QWORD *)(v20 + 8) = v22 - 1;
  if (v22 == 1)
  {
    v36 = *(_QWORD *)(v20 + 16);
    v24 = *(_QWORD *)(v20 + 24);
    *(_QWORD *)(v20 + 24) = 0;
    v25 = v36 != 0;
  }
  else
  {
    v24 = 0;
    v25 = 1;
  }
  v26 = __ldxr((unsigned __int8 *)v20);
  if (v26 != 1)
  {
    __clrex();
    goto LABEL_41;
  }
  if (__stlxr(0, (unsigned __int8 *)v20))
LABEL_41:
    WTF::Lock::unlockSlow((WTF::Lock *)v20);
  if (!v23)
  {
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    if (!v25)
      WTF::fastFree((WTF *)v20, a2);
  }
  v18 = *(_QWORD *)(a1 + 48);
LABEL_26:
  if (v18)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::ref(*(unsigned __int8 **)(v18 + 8));
  v27 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v18;
  if (v27)
  {
    v28 = *(_QWORD *)(v27 + 8);
    if (__ldaxr((unsigned __int8 *)v28))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v28))
    {
LABEL_32:
      v30 = *(_QWORD *)(v28 + 8);
      v31 = v30 - 1;
      *(_QWORD *)(v28 + 8) = v30 - 1;
      if (v30 == 1)
      {
        v37 = *(_QWORD *)(v28 + 16);
        v32 = *(_QWORD *)(v28 + 24);
        *(_QWORD *)(v28 + 24) = 0;
        v33 = v37 != 0;
      }
      else
      {
        v32 = 0;
        v33 = 1;
      }
      v34 = __ldxr((unsigned __int8 *)v28);
      if (v34 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v28))
          goto LABEL_36;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_36:
      if (!v31)
      {
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        if (!v33)
          WTF::fastFree((WTF *)v28, a2);
      }
      return;
    }
    MEMORY[0x19AEABB3C](v28);
    goto LABEL_32;
  }
}

uint64_t *WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::operator=(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  v3 = *a1;
  *a1 = 0;
  if (!v3)
    return a1;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEABB3C](v4);
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)v4))
    goto LABEL_4;
LABEL_5:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_9;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_9:
  if (!v7)
  {
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (!v9)
      WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

IPC::Encoder *WebKit::RemoteImageBufferSet::endPrepareForDisplay(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  IPC::Encoder *result;
  WTF *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  IPC::Encoder *v48[8];
  int v49;
  char v50;
  unsigned int v51[16];
  int v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;

  if (*(_BYTE *)(a1 + 98))
  {
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)v51 = *(_QWORD *)(a1 + 24);
    v5 = (uint64_t *)(v4 + 112);
    v6 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(v4 + 112), v51);
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::take(v5, v6, v48);
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>::~ScopedActiveMessageReceiveQueue((unsigned int **)v48);
    *(_BYTE *)(a1 + 98) = 0;
  }
  v7 = *(_QWORD *)(a1 + 40);
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
    v7 = *(_QWORD *)(a1 + 40);
  }
  LOBYTE(v51[0]) = 0;
  v53 = 0;
  v54 = 2;
  LOBYTE(v55) = 0;
  LOBYTE(v56) = 0;
  LOBYTE(v57) = 0;
  LOBYTE(v58) = 0;
  LOBYTE(v59) = 0;
  LOBYTE(v60) = 0;
  if (v7)
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 128))(v7);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19703F3C4);
    }
    (*(void (**)(IPC::Encoder **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v8 + 24))(v48, v8, 1);
    std::__optional_storage_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,false>>(v51, (uint64_t)v48);
    if (v50 && v49 != -1)
      off_1E34B8330[v49]((int)&v61, (WTF::MachSendRight *)v48);
    v9 = *(_QWORD *)(a1 + 40);
    if (v9)
    {
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::ref(*(unsigned __int8 **)(v9 + 8));
      v10 = 0;
      v11 = *(_QWORD *)(v9 + 120);
      v12 = 1;
      goto LABEL_12;
    }
  }
  else
  {
    v9 = 0;
  }
  v12 = 0;
  v11 = 0;
  v10 = 1;
LABEL_12:
  v13 = *(_QWORD *)(a1 + 48);
  if (v13)
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::ref(*(unsigned __int8 **)(v13 + 8));
    v14 = *(_QWORD *)(v13 + 120);
    v15 = 1;
  }
  else
  {
    v15 = 0;
    v14 = 0;
  }
  v16 = *(_QWORD *)(a1 + 56);
  if (!v16)
  {
    v55 = v11;
    v56 = v12;
    v57 = v14;
    v58 = v15;
    v59 = 0;
    v60 = 0;
    goto LABEL_23;
  }
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::ref(*(unsigned __int8 **)(v16 + 8));
  v17 = *(_QWORD *)(v16 + 120);
  v55 = v11;
  v56 = v12;
  v57 = v14;
  v58 = v15;
  v59 = v17;
  v60 = 1;
  v18 = *(_QWORD *)(v16 + 8);
  LODWORD(v17) = __ldaxr((unsigned __int8 *)v18);
  if ((_DWORD)v17)
  {
    __clrex();
LABEL_17:
    MEMORY[0x19AEABB3C](v18);
    goto LABEL_18;
  }
  if (__stxr(1u, (unsigned __int8 *)v18))
    goto LABEL_17;
LABEL_18:
  v19 = *(_QWORD *)(v18 + 8);
  v20 = v19 - 1;
  *(_QWORD *)(v18 + 8) = v19 - 1;
  if (v19 == 1)
  {
    v45 = *(_QWORD *)(v18 + 16);
    v21 = *(_QWORD *)(v18 + 24);
    *(_QWORD *)(v18 + 24) = 0;
    v22 = v45 != 0;
  }
  else
  {
    v21 = 0;
    v22 = 1;
  }
  v23 = __ldxr((unsigned __int8 *)v18);
  if (v23 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v18))
      goto LABEL_22;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v18);
LABEL_22:
  if (!v20)
  {
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    if (!v22)
      WTF::fastFree((WTF *)v18, a2);
  }
LABEL_23:
  if (!v13)
    goto LABEL_32;
  v24 = *(_QWORD *)(v13 + 8);
  if (__ldaxr((unsigned __int8 *)v24))
  {
    __clrex();
LABEL_26:
    MEMORY[0x19AEABB3C](v24);
    goto LABEL_27;
  }
  if (__stxr(1u, (unsigned __int8 *)v24))
    goto LABEL_26;
LABEL_27:
  v26 = *(_QWORD *)(v24 + 8);
  v27 = v26 - 1;
  *(_QWORD *)(v24 + 8) = v26 - 1;
  if (v26 == 1)
  {
    v46 = *(_QWORD *)(v24 + 16);
    v28 = *(_QWORD *)(v24 + 24);
    *(_QWORD *)(v24 + 24) = 0;
    v29 = v46 != 0;
  }
  else
  {
    v28 = 0;
    v29 = 1;
  }
  v30 = __ldxr((unsigned __int8 *)v24);
  if (v30 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v24))
      goto LABEL_31;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_31:
  if (!v27)
  {
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    if (!v29)
      WTF::fastFree((WTF *)v24, a2);
  }
LABEL_32:
  if ((v10 & 1) != 0)
    goto LABEL_41;
  v31 = *(_QWORD *)(v9 + 8);
  if (__ldaxr((unsigned __int8 *)v31))
  {
    __clrex();
LABEL_35:
    MEMORY[0x19AEABB3C](v31);
    goto LABEL_36;
  }
  if (__stxr(1u, (unsigned __int8 *)v31))
    goto LABEL_35;
LABEL_36:
  v33 = *(_QWORD *)(v31 + 8);
  v34 = v33 - 1;
  *(_QWORD *)(v31 + 8) = v33 - 1;
  if (v33 == 1)
  {
    v47 = *(_QWORD *)(v31 + 16);
    v35 = *(_QWORD *)(v31 + 24);
    *(_QWORD *)(v31 + 24) = 0;
    v36 = v47 != 0;
  }
  else
  {
    v35 = 0;
    v36 = 1;
  }
  v37 = __ldxr((unsigned __int8 *)v31);
  if (v37 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v31))
      goto LABEL_40;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v31);
LABEL_40:
  if (!v34)
  {
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    if (!v36)
      WTF::fastFree((WTF *)v31, a2);
  }
LABEL_41:
  v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40) + 32);
  v39 = *(_QWORD *)(a1 + 16);
  v40 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v40 = 1094;
  *(_QWORD *)(v40 + 8) = v39;
  *(_QWORD *)(v40 + 528) = v40 + 16;
  *(_QWORD *)(v40 + 536) = v40 + 16;
  *(_OWORD *)(v40 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v40 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v40);
  v48[0] = (IPC::Encoder *)v40;
  IPC::ArgumentCoder<WebKit::ImageBufferSetPrepareBufferForDisplayOutputData,void>::encode((IPC::Encoder *)v40, (unint64_t)v51);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v40, 8uLL, 8) = a2;
  IPC::Connection::sendMessageImpl(v38, (uint64_t *)v48, 0, 0);
  result = v48[0];
  v48[0] = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v41);
    result = (IPC::Encoder *)WTF::fastFree(v43, v44);
  }
  if (v53)
  {
    if (v52 != -1)
      return (IPC::Encoder *)off_1E34B8330[v52]((int)v48, (WTF::MachSendRight *)v51);
  }
  return result;
}

void WebKit::RemoteImageBufferSet::ensureBufferForDisplay(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  WebCore::ImageBuffer **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  char v16;
  BOOL v17;
  WebCore::ImageBuffer *v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  WebCore::ImageBuffer *v30;
  uint64_t v31;
  int v32;
  float v33;
  char v34;
  uint64_t v35;
  void *v36;
  IntPoint m_location;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  int v45;
  IntPoint v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  int v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float v59;
  uint64_t v60;
  float v61;
  unint64_t v62;
  unsigned int *v63;
  int v64;
  _BYTE v65[4];
  IntRect v66;
  uint64_t v67;
  _QWORD v68[2];

  v6 = (WebCore::ImageBuffer **)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  if (v7)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::ref(*(unsigned __int8 **)(v7 + 8));
  v8 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v7;
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (__ldaxr((unsigned __int8 *)v9))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v9))
    {
LABEL_7:
      v11 = *(_QWORD *)(v9 + 8);
      v12 = v11 - 1;
      *(_QWORD *)(v9 + 8) = v11 - 1;
      if (v11 == 1)
      {
        v55 = *(_QWORD *)(v9 + 16);
        v13 = *(_QWORD *)(v9 + 24);
        *(_QWORD *)(v9 + 24) = 0;
        v14 = v55 != 0;
      }
      else
      {
        v13 = 0;
        v14 = 1;
      }
      v15 = __ldxr((unsigned __int8 *)v9);
      if (v15 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v9))
          goto LABEL_11;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v9);
LABEL_11:
      if (!v12)
      {
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        if (!v14)
          WTF::fastFree((WTF *)v9, a2);
      }
      goto LABEL_12;
    }
    MEMORY[0x19AEABB3C](v9);
    goto LABEL_7;
  }
LABEL_12:
  if (*v6 && WebCore::ImageBuffer::setNonVolatile(*v6) == 1)
  {
    v59 = ceilf(*(float *)(a1 + 72));
    if (v59 >= 2147500000.0)
    {
      v60 = 0x7FFFFFFFLL;
    }
    else if (v59 <= -2147500000.0)
    {
      v60 = 0x80000000;
    }
    else
    {
      v60 = (int)v59;
    }
    v61 = ceilf(*(float *)(a1 + 76));
    if (v61 >= 2147500000.0)
    {
      v62 = 0x7FFFFFFF00000000;
    }
    else if (v61 <= -2147500000.0)
    {
      v62 = 0x8000000000000000;
    }
    else
    {
      v62 = (unint64_t)(int)v61 << 32;
    }
    v66.m_location = 0;
    v66.m_size = (IntSize)(v62 | v60);
    WebCore::Region::Region((WebCore::Region *)&v67, &v66);
    WebCore::Region::operator=();
    WebCore::Region::~Region((WebCore::Region *)&v67);
    v16 = 1;
  }
  else
  {
    v16 = 0;
  }
  if (*v6)
    v17 = a2[32] == 0;
  else
    v17 = 1;
  if ((v17 || WebKit::isSmallLayerBacking((uint64_t)*v6 + 16)) && *(_BYTE *)(a1 + 116))
    *(_BYTE *)(a1 + 116) = 0;
  v18 = *(WebCore::ImageBuffer **)(a1 + 48);
  if (!v18 || WebCore::ImageBuffer::isInUse(v18))
  {
    std::swap[abi:sn180100]<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>((uint64_t *)(a1 + 48), (uint64_t *)(a1 + 56));
    v30 = *(WebCore::ImageBuffer **)(a1 + 48);
    if (v30 && WebCore::ImageBuffer::isInUse(v30))
      WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::operator=((uint64_t *)(a1 + 48), v54);
    if (*(_BYTE *)(a1 + 116))
      *(_BYTE *)(a1 + 116) = 0;
  }
  if (*v6)
    v19 = v16;
  else
    v19 = 1;
  if ((v19 & 1) == 0 && a2[33])
  {
    *a3 = 2;
  }
  else
  {
    *a3 = v16 ^ 1;
    std::swap[abi:sn180100]<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>((uint64_t *)v6, (uint64_t *)(a1 + 48));
    if (!*v6)
      goto LABEL_61;
    if (WebCore::ImageBuffer::setNonVolatile(*v6) == 1 && *(_BYTE *)(a1 + 116))
      *(_BYTE *)(a1 + 116) = 0;
  }
  if (*v6)
    goto LABEL_30;
LABEL_61:
  v67 = 0;
  v68[0] = 0;
  v31 = *(_QWORD *)(a1 + 32);
  v32 = *(unsigned __int8 *)(a1 + 80);
  v33 = *(float *)(a1 + 84);
  v34 = *(_BYTE *)(a1 + 96);
  v63 = 0;
  v64 = 0;
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)v65, (const WTF::MachSendRight *)((char *)v68 + 4));
  v35 = WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  WebKit::RemoteRenderingBackend::allocateImageBuffer((uint64_t *)&v66.m_location, v31, (uint64_t *)(a1 + 72), v32, 3, (const void **)(a1 + 88), v34, &v63, v33, v35);
  m_location = v66.m_location;
  v66.m_location = 0;
  v38 = *(_QWORD *)(a1 + 40);
  *(IntPoint *)(a1 + 40) = m_location;
  if (v38)
  {
    v39 = *(_QWORD *)(v38 + 8);
    if (__ldaxr((unsigned __int8 *)v39))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v39))
    {
LABEL_65:
      v41 = *(_QWORD *)(v39 + 8);
      v42 = v41 - 1;
      *(_QWORD *)(v39 + 8) = v41 - 1;
      if (v41 == 1)
      {
        v57 = *(_QWORD *)(v39 + 16);
        v43 = *(_QWORD *)(v39 + 24);
        *(_QWORD *)(v39 + 24) = 0;
        v44 = v57 != 0;
      }
      else
      {
        v43 = 0;
        v44 = 1;
      }
      v45 = __ldxr((unsigned __int8 *)v39);
      if (v45 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v39))
          goto LABEL_69;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v39);
LABEL_69:
      if (!v42)
      {
        if (v43)
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
        if (!v44)
          WTF::fastFree((WTF *)v39, v36);
      }
      v46 = v66.m_location;
      v66.m_location = 0;
      if (!*(_QWORD *)&v46)
        goto LABEL_79;
      v47 = *(_QWORD *)(*(_QWORD *)&v46 + 8);
      if (__ldaxr((unsigned __int8 *)v47))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v47))
      {
LABEL_74:
        v49 = *(_QWORD *)(v47 + 8);
        v50 = v49 - 1;
        *(_QWORD *)(v47 + 8) = v49 - 1;
        if (v49 == 1)
        {
          v58 = *(_QWORD *)(v47 + 16);
          v51 = *(_QWORD *)(v47 + 24);
          *(_QWORD *)(v47 + 24) = 0;
          v52 = v58 != 0;
        }
        else
        {
          v51 = 0;
          v52 = 1;
        }
        v53 = __ldxr((unsigned __int8 *)v47);
        if (v53 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v47))
            goto LABEL_78;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v47);
LABEL_78:
        if (!v50)
        {
          if (v51)
            (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
          if (!v52)
            WTF::fastFree((WTF *)v47, v36);
        }
        goto LABEL_79;
      }
      MEMORY[0x19AEABB3C](v47);
      goto LABEL_74;
    }
    MEMORY[0x19AEABB3C](v39);
    goto LABEL_65;
  }
LABEL_79:
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v65);
  *(_BYTE *)(a1 + 97) = 1;
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)v68 + 4));
LABEL_30:
  if (*a3 == 2)
    return;
  v20 = *(uint64_t **)(a1 + 32);
  v21 = *(_QWORD *)(a1 + 40);
  if (v21)
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::ref(*(unsigned __int8 **)(v21 + 8));
    WebKit::RemoteRenderingBackend::createDisplayListRecorder(v20, v21, *(_QWORD *)(a1 + 24));
    v23 = *(_QWORD *)(v21 + 8);
    if (__ldaxr((unsigned __int8 *)v23))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v23))
    {
LABEL_35:
      v25 = *(_QWORD *)(v23 + 8);
      v26 = v25 - 1;
      *(_QWORD *)(v23 + 8) = v25 - 1;
      if (v25 == 1)
      {
        v56 = *(_QWORD *)(v23 + 16);
        v27 = *(_QWORD *)(v23 + 24);
        *(_QWORD *)(v23 + 24) = 0;
        v28 = v56 != 0;
      }
      else
      {
        v27 = 0;
        v28 = 1;
      }
      v29 = __ldxr((unsigned __int8 *)v23);
      if (v29 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v23))
          goto LABEL_39;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v23);
LABEL_39:
      if (!v26)
      {
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        if (!v28)
          WTF::fastFree((WTF *)v23, v22);
      }
      goto LABEL_40;
    }
    MEMORY[0x19AEABB3C](v23);
    goto LABEL_35;
  }
  WebKit::RemoteRenderingBackend::createDisplayListRecorder(*(uint64_t **)(a1 + 32), 0, *(_QWORD *)(a1 + 24));
LABEL_40:
  *(_BYTE *)(a1 + 98) = 1;
}

uint64_t *std::swap[abi:sn180100]<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>(uint64_t *result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *result;
  *result = 0;
  v4 = *a2;
  *a2 = 0;
  v5 = *result;
  *result = v4;
  if (!v5)
    goto LABEL_18;
  v6 = *(_QWORD *)(v5 + 8);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_6;
  }
  result = (uint64_t *)MEMORY[0x19AEABB3C](v6);
LABEL_6:
  v8 = *(_QWORD *)(v6 + 8);
  v9 = v8 - 1;
  *(_QWORD *)(v6 + 8) = v8 - 1;
  if (v8 == 1)
  {
    v21 = *(_QWORD *)(v6 + 16);
    v10 = *(_QWORD *)(v6 + 24);
    *(_QWORD *)(v6 + 24) = 0;
    v11 = v21 != 0;
  }
  else
  {
    v10 = 0;
    v11 = 1;
  }
  v12 = __ldxr((unsigned __int8 *)v6);
  if (v12 != 1)
  {
    __clrex();
LABEL_13:
    result = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
    if (v9)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v6))
    goto LABEL_13;
  if (v9)
    goto LABEL_18;
LABEL_14:
  if (v10)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (!v11)
    result = (uint64_t *)WTF::fastFree((WTF *)v6, a2);
LABEL_18:
  v13 = *a2;
  *a2 = v3;
  if (!v13)
    return result;
  v14 = *(_QWORD *)(v13 + 8);
  if (__ldaxr((unsigned __int8 *)v14))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v14))
  {
    goto LABEL_23;
  }
  result = (uint64_t *)MEMORY[0x19AEABB3C](v14);
LABEL_23:
  v16 = *(_QWORD *)(v14 + 8);
  v17 = v16 - 1;
  *(_QWORD *)(v14 + 8) = v16 - 1;
  if (v16 == 1)
  {
    v22 = *(_QWORD *)(v14 + 16);
    v18 = *(_QWORD *)(v14 + 24);
    *(_QWORD *)(v14 + 24) = 0;
    v19 = v22 != 0;
  }
  else
  {
    v18 = 0;
    v19 = 1;
  }
  v20 = __ldxr((unsigned __int8 *)v14);
  if (v20 != 1)
  {
    __clrex();
LABEL_30:
    result = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v14);
    if (v17)
      return result;
    goto LABEL_31;
  }
  if (__stlxr(0, (unsigned __int8 *)v14))
    goto LABEL_30;
  if (v17)
    return result;
LABEL_31:
  if (v18)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (!v19)
    return (uint64_t *)WTF::fastFree((WTF *)v14, a2);
  return result;
}

void WebKit::RemoteRenderingBackend::allocateImageBuffer(uint64_t *a1, uint64_t a2, uint64_t *a3, int a4, int a5, const void **a6, char a7, unsigned int **a8, float a9, uint64_t a10)
{
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  const void *v24;
  const WebCore::DestinationColorSpace *v25;
  uint64_t v26;
  const WebCore::DestinationColorSpace *v27;
  CFTypeRef v28;
  WebCore::ImageBufferIOSurfaceBackend *v29;
  WebCore::ImageBufferIOSurfaceBackend *v30;
  WebCore::ImageBufferCGBackend *v31;
  CFTypeRef v32;
  CFTypeRef v33;
  const void *v34;
  _BOOL4 isSmallLayerBacking;
  const void *v36;
  CFTypeRef v37;
  WebCore::ImageBufferIOSurfaceBackend *v38;
  WebCore::ImageBufferIOSurfaceBackend *v39;
  WebCore::ImageBufferIOSurfaceBackend *v40;
  bmalloc::api *v41;
  void *v42;
  CFTypeRef v43;
  CFTypeRef v44;
  const void *v45;
  CFTypeRef v46;
  WebCore::ImageBufferIOSurfaceBackend *v47;
  WebCore::ImageBufferIOSurfaceBackend *v48;
  WebCore::IOSurface **v49;
  bmalloc::api *v50;
  void *v51;
  CFTypeRef v52;
  CFTypeRef v53;
  uint64_t v54;
  uint64_t v55;
  WebCore::ImageBufferIOSurfaceBackend *v56;
  uint64_t v57;
  float v58;
  CFTypeRef v59;
  __int16 v60;
  uint64_t v61;
  float v62;
  const void *v63;
  char v64;
  char v65;
  uint64_t v66;
  WebCore::ImageBufferIOSurfaceBackend *v67;
  IntSize v68[2];
  CFTypeRef cf;
  uint64_t v70;
  float v71;
  CFTypeRef v72;
  __int16 v73;

  if (a5 == 1)
  {
    v19 = atomic_load((unint64_t *)(*(_QWORD *)(a2 + 56) + 72));
    if (v19 >> 4 > 0xC34 || (v20 = atomic_load(&WebKit::globalImageBufferForCanvasCount), v20 >> 6 > 0xC34))
    {
      v21 = 0;
      goto LABEL_26;
    }
  }
  *a8 = *(unsigned int **)(*(_QWORD *)(a2 + 56) + 56);
  WebCore::ProcessIdentity::operator=();
  if (!a4 || a5 == 1 && (v22 = atomic_load((unint64_t *)(*(_QWORD *)(a2 + 56) + 64)), v22 >> 3 >= 0x271))
  {
    *a1 = 0;
    v55 = a10;
LABEL_10:
    v24 = *a6;
    v70 = *a3;
    v71 = a9;
    v72 = v24;
    if (v24)
      CFRetain(v24);
    LOBYTE(v73) = a7;
    HIBYTE(v73) = a5;
    WebCore::ImageBuffer::backendParameters();
    WebKit::ImageBufferShareableBitmapBackend::create((uint64_t)v68, (uint64_t)a8, v25, (uint64_t *)&v67);
    if (v67)
    {
      LOBYTE(v61) = 0;
      WebCore::ImageBufferBackend::calculateBaseTransform();
      v66 = WebKit::ImageBufferShareableBitmapBackend::calculateMemoryCost(v68, v26, v27);
      v57 = v70;
      v58 = v71;
      v28 = v72;
      v59 = v72;
      if (v72)
        CFRetain(v72);
      v60 = v73;
      v29 = v67;
      v67 = 0;
      v56 = v29;
      WebCore::ImageBuffer::create<WebCore::ImageBuffer,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> &>(&v54, (uint64_t)&v57);
      v30 = v56;
      v56 = 0;
      if (v30)
        (*(void (**)(WebCore::ImageBufferIOSurfaceBackend *))(*(_QWORD *)v30 + 8))(v30);
      if (v28)
        CFRelease(v28);
      v31 = v67;
      v67 = 0;
      if (v31)
        std::default_delete<WebKit::ImageBufferShareableBitmapBackend>::operator()[abi:sn180100]((int)&v67, v31);
    }
    else
    {
      v54 = 0;
    }
    v32 = cf;
    cf = 0;
    if (v32)
      CFRelease(v32);
    v33 = v72;
    v72 = 0;
    if (v33)
      CFRelease(v33);
    v21 = v54;
    goto LABEL_26;
  }
  v23 = atomic_load(&WebKit::globalAcceleratedImageBufferCount);
  *a1 = 0;
  v55 = a10;
  if (v23 >> 4 > 0x270)
    goto LABEL_10;
  v61 = *a3;
  v62 = a9;
  v34 = *a6;
  v63 = v34;
  if (v34)
  {
    CFRetain(v34);
    v64 = a7;
    v65 = a5;
    isSmallLayerBacking = WebKit::isSmallLayerBacking((uint64_t)&v61);
    CFRelease(v34);
    if (!isSmallLayerBacking)
      goto LABEL_29;
LABEL_49:
    v45 = *a6;
    v70 = *a3;
    v71 = a9;
    v72 = v45;
    if (v45)
      CFRetain(v45);
    LOBYTE(v73) = a7;
    HIBYTE(v73) = a5;
    WebCore::ImageBuffer::backendParameters();
    WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::create((uint64_t)v68, a8, &v67);
    if (v67)
    {
      LOBYTE(v61) = 1;
      WebCore::ImageBufferBackend::calculateBaseTransform();
      v66 = WebCore::ImageBufferIOSurfaceBackend::calculateMemoryCost();
      v57 = v70;
      v58 = v71;
      v46 = v72;
      v59 = v72;
      if (v72)
        CFRetain(v72);
      v60 = v73;
      v47 = v67;
      v67 = 0;
      v56 = v47;
      WebCore::ImageBuffer::create<WebCore::ImageBuffer,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> &>(&v54, (uint64_t)&v57);
      v48 = v56;
      v56 = 0;
      if (v48)
        (*(void (**)(WebCore::ImageBufferIOSurfaceBackend *))(*(_QWORD *)v48 + 8))(v48);
      if (v46)
        CFRelease(v46);
      v49 = (WebCore::IOSurface **)v67;
      v67 = 0;
      if (v49)
      {
        WebKit::ImageBufferShareableMappedIOSurfaceBitmapBackend::~ImageBufferShareableMappedIOSurfaceBitmapBackend(v49);
        bmalloc::api::isoDeallocate(v50, v51);
      }
    }
    else
    {
      v54 = 0;
    }
    v52 = cf;
    cf = 0;
    if (v52)
      CFRelease(v52);
    v53 = v72;
    v72 = 0;
    if (v53)
      CFRelease(v53);
    v21 = v54;
    if (v54)
      goto LABEL_26;
    goto LABEL_29;
  }
  v64 = a7;
  v65 = a5;
  if (WebKit::isSmallLayerBacking((uint64_t)&v61))
    goto LABEL_49;
LABEL_29:
  v36 = *a6;
  v70 = *a3;
  v71 = a9;
  v72 = v36;
  if (v36)
    CFRetain(v36);
  LOBYTE(v73) = a7;
  HIBYTE(v73) = a5;
  WebCore::ImageBuffer::backendParameters();
  WebKit::ImageBufferShareableMappedIOSurfaceBackend::create((uint64_t)v68, &v67);
  if (v67)
  {
    LOBYTE(v61) = 1;
    WebCore::ImageBufferBackend::calculateBaseTransform();
    v66 = WebCore::ImageBufferIOSurfaceBackend::calculateMemoryCost();
    v57 = v70;
    v58 = v71;
    v37 = v72;
    v59 = v72;
    if (v72)
      CFRetain(v72);
    v60 = v73;
    v38 = v67;
    v67 = 0;
    v56 = v38;
    WebCore::ImageBuffer::create<WebCore::ImageBuffer,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> &>(&v54, (uint64_t)&v57);
    v39 = v56;
    v56 = 0;
    if (v39)
      (*(void (**)(WebCore::ImageBufferIOSurfaceBackend *))(*(_QWORD *)v39 + 8))(v39);
    if (v37)
      CFRelease(v37);
    v40 = v67;
    v67 = 0;
    if (v40)
    {
      WebCore::ImageBufferIOSurfaceBackend::~ImageBufferIOSurfaceBackend(v40);
      bmalloc::api::isoDeallocate(v41, v42);
    }
  }
  else
  {
    v54 = 0;
  }
  v43 = cf;
  cf = 0;
  if (v43)
    CFRelease(v43);
  v44 = v72;
  v72 = 0;
  if (v44)
    CFRelease(v44);
  v21 = v54;
  if (!v54)
    goto LABEL_10;
LABEL_26:
  *a1 = v21;
}

uint64_t WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate()
{
  uint64_t result;

  if (!WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
    return WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  result = 142;
  __break(0xC471u);
  return result;
}

unsigned int *WebKit::RemoteRenderingBackend::createDisplayListRecorder(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  unsigned int *result;
  CFTypeRef *v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  WebCore::DestinationColorSpace *v18;
  uint64_t v19;

  v19 = a3;
  if (a2)
  {
    v3 = a1 + 14;
    WebKit::RemoteDisplayListRecorder::create((uint64_t *)&v18, a2, a3, (uint64_t)a1);
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>((uint64_t)&v15, v3, &v19, (unsigned int **)&v18);
    result = (unsigned int *)v18;
    v18 = 0;
    if (result)
    {
      v9 = result + 2;
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  else
  {
    v7 = (CFTypeRef *)WebCore::DestinationColorSpace::SRGB((WebCore::DestinationColorSpace *)a1);
    v15 = 0;
    v16 = 0;
    WebCore::ImageBuffer::create<WebCore::NullImageBufferBackend,WebCore::ImageBuffer,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> &>((uint64_t *)&v18, 0, *v7);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v16 + 4));
    WebKit::RemoteDisplayListRecorder::create((uint64_t *)&v17, (uint64_t)v18, a3, (uint64_t)a1);
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>((uint64_t)&v15, a1 + 14, &v19, &v17);
    result = v17;
    v17 = 0;
    if (result)
    {
      v12 = result + 2;
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, result + 2);
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
    if (v18)
      return (unsigned int *)WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::deref((unsigned __int8 **)v18 + 1, v8);
  }
  return result;
}

_QWORD *WebKit::RemoteRenderingBackend::create@<X0>(WebKit::GPUConnectionToWebProcess *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, WebKit::RemoteRenderingBackend **a4@<X8>)
{
  uint64_t v8;
  WebKit::RemoteRenderingBackend *v9;

  v8 = WTF::fastMalloc((WTF *)0x90);
  v9 = (WebKit::RemoteRenderingBackend *)WebKit::RemoteRenderingBackend::RemoteRenderingBackend(v8, a1, a2, a3);
  *a4 = v9;
  return WebKit::RemoteRenderingBackend::startListeningForIPC(v9);
}

uint64_t WebKit::RemoteRenderingBackend::RemoteRenderingBackend(uint64_t a1, WebKit::GPUConnectionToWebProcess *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  WebKit::ShapeDetection::ObjectHeap *v10;
  uint64_t v11;

  *(_DWORD *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = off_1E34B8290;
  *(_QWORD *)(a1 + 8) = &unk_1E34B82E8;
  v8 = WTF::fastMalloc((WTF *)0x70);
  *(_QWORD *)(a1 + 32) = IPC::StreamConnectionWorkQueue::StreamConnectionWorkQueue(v8, (uint64_t)"RemoteRenderingBackend work queue", 34);
  v9 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 40) = v9;
  WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>::Ref((_QWORD *)(a1 + 48), (uint64_t)a2);
  WebKit::GPUConnectionToWebProcess::sharedResourceCache(a2, (WebKit::RemoteSharedResourceCache **)(a1 + 56));
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 96) = a3;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  v10 = (WebKit::ShapeDetection::ObjectHeap *)WTF::fastMalloc((WTF *)0x28);
  WebKit::ShapeDetection::ObjectHeap::ObjectHeap(v10);
  *(_QWORD *)(a1 + 136) = v11;
  return a1;
}

void WebKit::RemoteRenderingBackend::~RemoteRenderingBackend(WebKit::RemoteRenderingBackend *this, void *a2)
{
  WebKit::ShapeDetection::ObjectHeap *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  *(_QWORD *)this = off_1E34B8290;
  *((_QWORD *)this + 1) = &unk_1E34B82E8;
  v3 = (WebKit::ShapeDetection::ObjectHeap *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v3)
    WTF::RefCounted<WebKit::ShapeDetection::ObjectHeap>::deref(v3);
  v4 = *((_QWORD *)this + 16);
  if (v4)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 15);
  if (v5)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v5, a2);
  v6 = *((_QWORD *)this + 14);
  if (v6)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v6, a2);
  v7 = (unsigned int *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v7)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v7);
  WTF::MachSendRight::~MachSendRight((WebKit::RemoteRenderingBackend *)((char *)this + 88));
  v9 = *((_QWORD *)this + 8);
  if (v9)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v9, v8);
  v10 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v10)
    WTF::ThreadSafeRefCounted<WebKit::RemoteSharedResourceCache,(WTF::DestructionThread)0>::deref((unsigned int *)(v10 + 16));
  v11 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v11)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v11 + 16));
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)this + 5);
  v13 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v13)
    WTF::ThreadSafeRefCounted<IPC::StreamConnectionWorkQueue,(WTF::DestructionThread)0>::deref((unsigned int *)(v13 + 8), v12);
  WTF::WeakPtrFactory<WebCore::NowPlayingManagerClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v12);
  WTF::isIntegralOrPointerType(this);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteRenderingBackend::~RemoteRenderingBackend(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebKit::RemoteRenderingBackend::~RemoteRenderingBackend(WebKit::RemoteRenderingBackend *this, void *a2)
{
  WebKit::RemoteRenderingBackend::~RemoteRenderingBackend((WebKit::RemoteRenderingBackend *)((char *)this - 8), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteRenderingBackend::~RemoteRenderingBackend((WebKit::RemoteRenderingBackend *)((char *)this - 8), a2);
  WTF::fastFree(v2, v3);
}

_QWORD *WebKit::RemoteRenderingBackend::stopListeningForIPC(WebKit::RemoteRenderingBackend *this)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *result;
  _QWORD *v5;

  v2 = *((_QWORD *)this + 4);
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E34B84F8;
  v3[1] = this;
  v5 = v3;
  IPC::StreamConnectionWorkQueue::stopAndWaitForCompletion(v2, (uint64_t *)&v5);
  result = v5;
  v5 = 0;
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  return result;
}

unsigned __int8 ***WebKit::RemoteRenderingBackend::workQueueUninitialize(WebKit::RemoteRenderingBackend *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *((_QWORD *)this + 14);
  if (v3)
  {
    *((_QWORD *)this + 14) = 0;
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v3, a2);
  }
  v4 = *((_QWORD *)this + 15);
  if (v4)
  {
    *((_QWORD *)this + 15) = 0;
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v4, a2);
  }
  v5 = *((_QWORD *)this + 16);
  if (v5)
  {
    *((_QWORD *)this + 16) = 0;
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v5, a2);
  }
  v6 = *((_QWORD *)this + 8);
  if (v6)
  {
    *((_QWORD *)this + 8) = 0;
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v6, a2);
  }
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  IPC::StreamServerConnection::stopReceivingMessages(*((_QWORD *)this + 5), 0x74u, *((_QWORD *)this + 12));
  return IPC::StreamServerConnection::invalidate(*((uint64_t ***)this + 5));
}

uint64_t WebKit::RemoteRenderingBackend::messageSenderDestinationID(WebKit::RemoteRenderingBackend *this)
{
  return *((_QWORD *)this + 12);
}

void WebCore::ImageBuffer::create<WebCore::NullImageBufferBackend,WebCore::ImageBuffer,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> &>(uint64_t *a1, uint64_t a2, CFTypeRef cf)
{
  CFTypeRef v4;
  WebCore::NullImageBufferBackend *v5;
  WebCore::NullImageBufferBackend *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  CFTypeRef v11;
  WebCore::NullImageBufferBackend *v12;
  uint64_t v13;
  int v14;
  CFTypeRef v15;
  __int16 v16;
  char v17;
  uint64_t v18;
  WebCore::NullImageBufferBackend *v19;
  const void *v20;
  uint64_t v21;
  int v22;
  CFTypeRef v23;
  __int16 v24;

  v21 = a2;
  v22 = 1065353216;
  v23 = cf;
  if (cf)
    CFRetain(cf);
  v24 = 1;
  WebCore::ImageBuffer::backendParameters();
  WebCore::NullImageBufferBackend::create();
  if (v19)
  {
    v17 = 0;
    WebCore::ImageBufferBackend::calculateBaseTransform();
    v18 = 0;
    v13 = v21;
    v14 = v22;
    v4 = v23;
    v15 = v23;
    if (v23)
      CFRetain(v23);
    v16 = v24;
    v5 = v19;
    v19 = 0;
    v12 = v5;
    WebCore::ImageBuffer::create<WebCore::ImageBuffer,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> &>(a1, (uint64_t)&v13);
    (*(void (**)(WebCore::NullImageBufferBackend *))(*(_QWORD *)v12 + 8))(v12);
    if (v4)
      CFRelease(v4);
    v6 = v19;
    v19 = 0;
    if (v6)
    {
      WebCore::NullImageBufferBackend::~NullImageBufferBackend(v6);
      MEMORY[0x19AEB936C](v7, 0x10E3C409DD61336, v8, v9);
    }
  }
  else
  {
    *a1 = 0;
  }
  v10 = v20;
  v20 = 0;
  if (v10)
    CFRelease(v10);
  v11 = v23;
  v23 = 0;
  if (v11)
    CFRelease(v11);
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>(uint64_t result, uint64_t *a2, uint64_t *a3, unsigned int **a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  unsigned int **v20;
  unsigned int *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = *a3 + ~(*a3 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (_QWORD *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v35 = 0;
        else
          v35 = *(unsigned int *)(v8 - 4);
        v29 = 0;
        v28 = v8 + 16 * v35;
        goto LABEL_21;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (_QWORD *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v16 = v18;
    }
  }
  *v16 = v11;
  v20 = (unsigned int **)(v16 + 1);
  v21 = *a4;
  *a4 = 0;
  v36 = v21;
  if (v16 + 1 != &v36)
  {
    if (*v20)
    {
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>((unsigned int **)v16 + 1);
      v30 = *v20;
      v31 = v36;
      v36 = 0;
      *v20 = v31;
      if (v30)
      {
        v32 = v30 + 2;
        do
        {
          v33 = __ldaxr(v32);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, v32));
        if (!v34)
        {
          atomic_store(1u, v30 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 8))(v30);
        }
      }
    }
    else
    {
      v36 = 0;
      *v20 = v21;
    }
  }
  result = (uint64_t)IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>::~ScopedActiveMessageReceiveQueue(&v36);
  v22 = *a2;
  if (*a2)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v24 = *a2;
  if (*a2)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 > 2 * v26)
      goto LABEL_20;
LABEL_28:
    result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(a2, v16);
    v16 = (_QWORD *)result;
    v24 = *a2;
    if (*a2)
      v27 = *(unsigned int *)(v24 - 4);
    else
      v27 = 0;
    goto LABEL_20;
  }
  if (3 * v27 <= 4 * v26)
    goto LABEL_28;
LABEL_20:
  v28 = v24 + 16 * v27;
  v29 = 1;
LABEL_21:
  *(_QWORD *)v7 = v16;
  *(_QWORD *)(v7 + 8) = v28;
  *(_BYTE *)(v7 + 16) = v29;
  return result;
}

uint64_t WebKit::RemoteDisplayListRecorder::create(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;

  v8 = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)v8 = off_1E34B81A8;
  WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::Ref((_QWORD *)(v8 + 24), a2);
  *(_QWORD *)(v8 + 32) = a3;
  v9 = (unsigned int *)(a4 + 16);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *(_QWORD *)(v8 + 40) = a4;
  v11 = *(_QWORD *)(a4 + 56);
  v12 = (unsigned int *)(v11 + 16);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 48) = v11;
  *a1 = v8;
  return IPC::StreamServerConnection::startReceivingMessages(*(_QWORD *)(*(_QWORD *)(v8 + 40) + 40), v8, 0x4Cu, *(_QWORD *)(v8 + 32));
}

IPC::Encoder *WebKit::RemoteRenderingBackend::didFailCreateImageBuffer(uint64_t *a1, uint64_t a2)
{
  CFTypeRef *v4;
  unsigned int *v5;
  void *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;

  v35 = a2;
  v4 = (CFTypeRef *)WebCore::DestinationColorSpace::SRGB((WebCore::DestinationColorSpace *)a1);
  v29 = 0;
  v30 = 0;
  WebCore::ImageBuffer::create<WebCore::NullImageBufferBackend,WebCore::ImageBuffer,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> &>(&v34, 0, *v4);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v30 + 4));
  if (!v34)
  {
    __break(0xC471u);
    JUMPOUT(0x197040B64);
  }
  WebKit::RemoteDisplayListRecorder::create((uint64_t *)&v36, v34, a2, (uint64_t)a1);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>((uint64_t)&v29, a1 + 14, &v35, &v36);
  v5 = v36;
  v36 = 0;
  if (v5)
  {
    v26 = v5 + 2;
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  v33 = v34;
  v34 = 0;
  WebKit::RemoteImageBuffer::create((uint64_t *)&v36, &v33, (uint64_t)a1);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>((uint64_t)&v29, a1 + 15, &v35, &v36);
  v7 = v36;
  v36 = 0;
  if (v7)
  {
    v22 = v7 + 2;
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(&v33, v6);
  LOBYTE(v29) = 0;
  v32 = 0;
  v8 = v35;
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 1093;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v36 = (unsigned int *)v9;
  IPC::ArgumentCoder<std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>,void>::encode<IPC::Encoder,std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>>((IPC::Encoder *)v9, (unint64_t)&v29);
  (*(void (**)(uint64_t *, unsigned int **, _QWORD))(*a1 + 32))(a1, &v36, 0);
  result = (IPC::Encoder *)v36;
  v36 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    result = (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  if (v32 && v31 != -1)
    result = (IPC::Encoder *)off_1E34B8330[v31]((int)&v36, (WTF::MachSendRight *)&v29);
  v14 = v34;
  v34 = 0;
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 8);
    if (__ldaxr((unsigned __int8 *)v15))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v15))
    {
      goto LABEL_14;
    }
    result = (IPC::Encoder *)MEMORY[0x19AEABB3C](v15);
LABEL_14:
    v17 = *(_QWORD *)(v15 + 8);
    v18 = v17 - 1;
    *(_QWORD *)(v15 + 8) = v17 - 1;
    if (v17 == 1)
    {
      v25 = *(_QWORD *)(v15 + 16);
      v19 = *(_QWORD *)(v15 + 24);
      *(_QWORD *)(v15 + 24) = 0;
      v20 = v25 != 0;
    }
    else
    {
      v19 = 0;
      v20 = 1;
    }
    v21 = __ldxr((unsigned __int8 *)v15);
    if (v21 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v15))
      {
        if (v18)
          return result;
LABEL_22:
        if (v19)
          result = (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        if (!v20)
          return (IPC::Encoder *)WTF::fastFree((WTF *)v15, v10);
        return result;
      }
    }
    else
    {
      __clrex();
    }
    result = (IPC::Encoder *)WTF::Lock::unlockSlow((WTF::Lock *)v15);
    if (v18)
      return result;
    goto LABEL_22;
  }
  return result;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>(uint64_t result, uint64_t *a2, uint64_t *a3, unsigned int **a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  unsigned int **v20;
  unsigned int *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = *a3 + ~(*a3 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (_QWORD *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v35 = 0;
        else
          v35 = *(unsigned int *)(v8 - 4);
        v29 = 0;
        v28 = v8 + 16 * v35;
        goto LABEL_21;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (_QWORD *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v16 = v18;
    }
  }
  *v16 = v11;
  v20 = (unsigned int **)(v16 + 1);
  v21 = *a4;
  *a4 = 0;
  v36 = v21;
  if (v16 + 1 != &v36)
  {
    if (*v20)
    {
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>((unsigned int **)v16 + 1);
      v30 = *v20;
      v31 = v36;
      v36 = 0;
      *v20 = v31;
      if (v30)
      {
        v32 = v30 + 2;
        do
        {
          v33 = __ldaxr(v32);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, v32));
        if (!v34)
        {
          atomic_store(1u, v30 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 8))(v30);
        }
      }
    }
    else
    {
      v36 = 0;
      *v20 = v21;
    }
  }
  result = (uint64_t)IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>::~ScopedActiveMessageReceiveQueue(&v36);
  v22 = *a2;
  if (*a2)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v24 = *a2;
  if (*a2)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 > 2 * v26)
      goto LABEL_20;
LABEL_28:
    result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(a2, v16);
    v16 = (_QWORD *)result;
    v24 = *a2;
    if (*a2)
      v27 = *(unsigned int *)(v24 - 4);
    else
      v27 = 0;
    goto LABEL_20;
  }
  if (3 * v27 <= 4 * v26)
    goto LABEL_28;
LABEL_20:
  v28 = v24 + 16 * v27;
  v29 = 1;
LABEL_21:
  *(_QWORD *)v7 = v16;
  *(_QWORD *)(v7 + 8) = v28;
  *(_BYTE *)(v7 + 16) = v29;
  return result;
}

IPC::Encoder *WebKit::RemoteRenderingBackend::didCreateImageBuffer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  IPC::Encoder *result;
  WTF *v15;
  void *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23[16];
  int v24;
  char v25;
  uint64_t v26;
  _QWORD v27[8];
  int v28;
  char v29;
  uint64_t v30;
  unsigned int *v31;

  v4 = *a2;
  v5 = *(_QWORD *)(*a2 + 120);
  v30 = v5;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 128))(v4);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6) & 1) == 0)
  {
    v7 = (unsigned int *)96;
    __break(0xC471u);
    goto LABEL_19;
  }
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 24))(v27, v6, 1);
  WebKit::RemoteDisplayListRecorder::create((uint64_t *)&v31, *a2, v5, (uint64_t)a1);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>((uint64_t)v23, a1 + 14, &v30, &v31);
  v7 = v31;
  v31 = 0;
  if (v7)
    goto LABEL_20;
  while (1)
  {
    v8 = *a2;
    *a2 = 0;
    v26 = v8;
    WebKit::RemoteImageBuffer::create((uint64_t *)&v31, &v26, (uint64_t)a1);
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>((uint64_t)v23, a1 + 15, &v30, &v31);
    v10 = v31;
    v31 = 0;
    if (v10)
    {
      v17 = v10 + 2;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        atomic_store(1u, v10 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
      }
    }
    v7 = (unsigned int *)WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(&v26, v9);
    if (v29)
      break;
LABEL_19:
    __break(1u);
LABEL_20:
    v20 = v7 + 2;
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  LOBYTE(v23[0]) = 0;
  v24 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>>(v23, (uint64_t)v27);
  v25 = 1;
  v11 = v30;
  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 1093;
  *(_QWORD *)(v12 + 8) = v11;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v31 = (unsigned int *)v12;
  IPC::ArgumentCoder<std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>,void>::encode<IPC::Encoder,std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>>((IPC::Encoder *)v12, (unint64_t)v23);
  (*(void (**)(uint64_t *, unsigned int **, _QWORD))(*a1 + 32))(a1, &v31, 0);
  result = (IPC::Encoder *)v31;
  v31 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    result = (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  if (v25 && v24 != -1)
    result = (IPC::Encoder *)off_1E34B8330[v24]((int)&v31, (WTF::MachSendRight *)v23);
  if (v29)
  {
    if (v28 != -1)
      return (IPC::Encoder *)off_1E34B8330[v28]((int)v23, (WTF::MachSendRight *)v27);
  }
  return result;
}

uint64_t *WebKit::RemoteRenderingBackend::moveToSerializedBuffer(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *result;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unint64_t v11;

  v11 = a2;
  v3 = (uint64_t *)(a1 + 112);
  v4 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 112), &v11);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::take(v3, v4, &v10);
  IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>::~ScopedActiveMessageReceiveQueue(&v10);
  result = (uint64_t *)WebKit::RemoteRenderingBackend::takeImageBuffer(a1, v11, &v9);
  if (v9)
  {
    v6 = *(_QWORD *)(a1 + 56);
    v8 = v9;
    WebKit::RemoteSharedResourceCache::addSerializedImageBuffer(v6, v11, &v8);
    return WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(&v8, v7);
  }
  return result;
}

unsigned int **WebKit::RemoteRenderingBackend::takeImageBuffer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;

  v16 = a2;
  v4 = (uint64_t *)(a1 + 120);
  v5 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 120), &v16);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::HashTableTraits>::take(v4, v5, &v15);
  v6 = v15;
  if (v15)
  {
    v7 = v15 + 2;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    if (v15)
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>(&v15);
    WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::Ref(&v14, (uint64_t *)v6 + 3);
    v9 = v14;
    v14 = 0;
    *a3 = v9;
    WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(&v14, v10);
    do
    {
      v11 = __ldaxr(v7);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v7));
    if (!v12)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  else
  {
    *a3 = 0;
  }
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>::~ScopedActiveMessageReceiveQueue(&v15);
}

void WebKit::RemoteRenderingBackend::moveToImageBuffer(WTF::ApproximateTime *a1, unint64_t a2)
{
  uint64_t v3;
  double v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[2];

  v3 = *((_QWORD *)a1 + 7) + 24;
  v19[0] = 0;
  v19[1] = 0;
  v18 = a2;
  WTF::ApproximateTime::now(a1);
  IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>::take(v3, &v18, &v17, v4 + 15.0);
  if (!v17)
    return;
  v18 = *(_QWORD *)(*((_QWORD *)a1 + 7) + 56);
  v19[0] = 0;
  WebCore::ProcessIdentity::operator=();
  WebCore::ImageBuffer::transferToNewContext();
  v16 = v17;
  v17 = 0;
  WebKit::RemoteRenderingBackend::didCreateImageBuffer((uint64_t *)a1, &v16);
  WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(&v16, v5);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)v19 + 4));
  v7 = v17;
  v17 = 0;
  if (!v7)
    return;
  v8 = *(_QWORD *)(v7 + 8);
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEABB3C](v8);
LABEL_7:
  v10 = *(_QWORD *)(v8 + 8);
  v11 = v10 - 1;
  *(_QWORD *)(v8 + 8) = v10 - 1;
  if (v10 == 1)
  {
    v15 = *(_QWORD *)(v8 + 16);
    v12 = *(_QWORD *)(v8 + 24);
    *(_QWORD *)(v8 + 24) = 0;
    v13 = v15 != 0;
  }
  else
  {
    v12 = 0;
    v13 = 1;
  }
  v14 = __ldxr((unsigned __int8 *)v8);
  if (v14 != 1)
  {
    __clrex();
LABEL_14:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if (v11)
      return;
    goto LABEL_15;
  }
  if (__stlxr(0, (unsigned __int8 *)v8))
    goto LABEL_14;
  if (v11)
    return;
LABEL_15:
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (!v13)
    WTF::fastFree((WTF *)v8, v6);
}

uint64_t *WebKit::RemoteRenderingBackend::createImageBuffer(uint64_t *a1, uint64_t *a2, int a3, int a4, const void **a5, char a6, uint64_t a7, float a8)
{
  void *v10;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  v16 = 0;
  WebKit::RemoteRenderingBackend::allocateImageBuffer(&v17, (uint64_t)a1, a2, a3, a4, a5, a6, &v15, a8, a7);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v16 + 4));
  if (v17)
  {
    v14 = v17;
    WebKit::RemoteRenderingBackend::didCreateImageBuffer(a1, &v14);
    return WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(&v14, v10);
  }
  else
  {
    v12 = qword_1ECE716E0;
    if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
    {
      v13 = a1[12];
      *(_DWORD *)buf = 134218240;
      v19 = v13;
      v20 = 2048;
      v21 = a7;
      _os_log_impl(&dword_196BCC000, v12, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackend::createImageBuffer - failed to allocate image buffer %llu", buf, 0x16u);
    }
    return (uint64_t *)WebKit::RemoteRenderingBackend::didFailCreateImageBuffer(a1, a7);
  }
}

unsigned __int8 **WebKit::RemoteRenderingBackend::releaseImageBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned __int8 **result;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;

  v10 = a2;
  v3 = (uint64_t *)(a1 + 112);
  v4 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 112), &v10);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::take(v3, v4, &v9);
  IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>::~ScopedActiveMessageReceiveQueue(&v9);
  v5 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 120), &v10);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::HashTableTraits>::take((uint64_t *)(a1 + 120), v5, &v8);
  v6 = v8;
  result = (unsigned __int8 **)IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>::~ScopedActiveMessageReceiveQueue(&v8);
  if (!v6)
    return WebKit::RemoteRenderingBackend::terminateWebProcess(a1, (uint64_t)"Resource is being released before being cached.");
  return result;
}

unsigned int *WebKit::RemoteRenderingBackend::createRemoteImageBufferSet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  unsigned int *result;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _BYTE v8[24];
  unsigned int *v9;
  uint64_t v10;

  v10 = a2;
  v3 = (uint64_t *)(a1 + 128);
  WebKit::RemoteImageBufferSet::create(a2, a3, a1, (uint64_t *)&v9);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>(v3, &v10, &v9, (uint64_t)v8);
  result = v9;
  v9 = 0;
  if (result)
  {
    v5 = result + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, unsigned int **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  unsigned int **v20;
  unsigned int *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v35 = 0;
        else
          v35 = *(unsigned int *)(v8 - 4);
        v29 = 0;
        v28 = v8 + 16 * v35;
        goto LABEL_21;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  v20 = (unsigned int **)(v16 + 1);
  v21 = *a3;
  *a3 = 0;
  v36 = v21;
  if (v16 + 1 != (uint64_t *)&v36)
  {
    if (*v20)
    {
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>((unsigned int **)v16 + 1);
      v30 = *v20;
      v31 = v36;
      v36 = 0;
      *v20 = v31;
      if (v30)
      {
        v32 = v30 + 2;
        do
        {
          v33 = __ldaxr(v32);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, v32));
        if (!v34)
        {
          atomic_store(1u, v30 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 8))(v30);
        }
      }
    }
    else
    {
      v36 = 0;
      *v20 = v21;
    }
  }
  result = (uint64_t *)IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>::~ScopedActiveMessageReceiveQueue(&v36);
  v22 = *v6;
  if (*v6)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v24 = *v6;
  if (*v6)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 > 2 * v26)
      goto LABEL_20;
LABEL_28:
    result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6, v16);
    v16 = result;
    v24 = *v6;
    if (*v6)
      v27 = *(unsigned int *)(v24 - 4);
    else
      v27 = 0;
    goto LABEL_20;
  }
  if (3 * v27 <= 4 * v26)
    goto LABEL_28;
LABEL_20:
  v28 = v24 + 16 * v27;
  v29 = 1;
LABEL_21:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v28;
  *(_BYTE *)(a4 + 16) = v29;
  return result;
}

unsigned __int8 **WebKit::RemoteRenderingBackend::releaseRemoteImageBufferSet(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned __int8 **result;
  unsigned int *v7;
  uint64_t v8;

  v8 = a2;
  v3 = (uint64_t *)(a1 + 128);
  v4 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 128), &v8);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::take(v3, v4, &v7);
  v5 = v7;
  result = (unsigned __int8 **)IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>::~ScopedActiveMessageReceiveQueue(&v7);
  if (!v5)
    return WebKit::RemoteRenderingBackend::terminateWebProcess(a1, (uint64_t)"BufferSet is being released before being created");
  return result;
}

WTF *WebKit::RemoteRenderingBackend::cacheNativeImage(uint64_t a1)
{
  WTF *result;
  void *v3;
  CFTypeRef v4;
  void *v5;
  unsigned __int8 **v6;
  CFTypeRef cf;
  void *v8;
  WTF *v9;

  WebCore::ShareableBitmap::create();
  result = v9;
  if (v9)
  {
    WebCore::ShareableBitmap::createPlatformImage();
    WebCore::NativeImage::create();
    v4 = cf;
    cf = 0;
    if (v4)
      CFRelease(v4);
    if (v8)
    {
      cf = v8;
      v8 = 0;
      WebCore::DisplayList::ResourceHeap::add((uint64_t *)(a1 + 64), (uint64_t *)&cf);
      WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>::~Ref((uint64_t *)&cf, v5);
      v6 = (unsigned __int8 **)v8;
      v8 = 0;
      if (v6)
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::deref(v6 + 1, v3);
    }
    result = v9;
    v9 = 0;
    if (result)
      return (WTF *)WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)result, v3);
  }
  return result;
}

void WebKit::RemoteRenderingBackend::cacheFont(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  WebCore::FontCustomPlatformData *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  WebCore::Font **v20;
  WebCore::Font *v21;
  WebCore::Font *v22;
  WebCore::Font *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  WebCore::FontCustomPlatformData *v30;
  WebCore::Font *v31;
  char v32[39];
  char v33;

  if (a5)
  {
    v30 = (WebCore::FontCustomPlatformData *)WebCore::DisplayList::ResourceHeap::get<WebCore::FontCustomPlatformData>(*(_QWORD *)(a1 + 64), a4);
    if (!v30)
    {
      WebKit::RemoteRenderingBackend::terminateWebProcess(a1, (uint64_t)"CacheFont without caching custom data");
      return;
    }
    v6 = v30;
    ++*(_DWORD *)v30;
  }
  else
  {
    v6 = 0;
  }
  WebCore::FontPlatformData::create();
  WebCore::Font::create();
  v7 = WebCore::Font::renderingResourceIdentifier(v31);
  v9 = (uint64_t *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 64);
  if (v8
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(a1 + 64), 0), (v8 = *v9) != 0))
  {
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
  }
  v11 = (v7 + ~(v7 << 32)) ^ ((unint64_t)(v7 + ~(v7 << 32)) >> 22);
  v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = v10 & ((v13 >> 31) ^ v13);
  v15 = v8 + 24 * v14;
  v16 = *(_QWORD *)v15;
  if (*(_QWORD *)v15)
  {
    v17 = 0;
    v18 = 1;
    while (v16 != v7)
    {
      if (v16 == -1)
        v17 = v15;
      v14 = (v14 + v18) & v10;
      v15 = v8 + 24 * v14;
      v16 = *(_QWORD *)v15;
      ++v18;
      if (!*(_QWORD *)v15)
      {
        if (v17)
        {
          *(_QWORD *)v17 = 0;
          *(_DWORD *)(v17 + 16) = 0;
          --*(_DWORD *)(*v9 - 16);
          v15 = v17;
        }
        goto LABEL_13;
      }
    }
    goto LABEL_26;
  }
LABEL_13:
  *(_QWORD *)v15 = v7;
  v19 = *(unsigned int *)(v15 + 16);
  if ((_DWORD)v19 == -1)
    goto LABEL_18;
  v20 = (WebCore::Font **)(v15 + 8);
  if ((_DWORD)v19 != 3)
  {
    ((void (*)(char *, WebCore::Font **))off_1E34B8358[v19])(&v33, v20);
LABEL_18:
    v23 = v31;
    v31 = 0;
    *(_QWORD *)(v15 + 8) = v23;
    *(_DWORD *)(v15 + 16) = 3;
    goto LABEL_19;
  }
  v21 = v31;
  v31 = 0;
  v22 = *v20;
  *v20 = v21;
  if (v22)
    WTF::RefCounted<WebCore::Font>::deref(v22);
LABEL_19:
  v24 = *v9;
  if (*v9)
    v25 = *(_DWORD *)(v24 - 12) + 1;
  else
    v25 = 1;
  *(_DWORD *)(v24 - 12) = v25;
  v26 = *v9;
  if (*v9)
    v27 = *(_DWORD *)(v26 - 12);
  else
    v27 = 0;
  v28 = (*(_DWORD *)(v26 - 16) + v27);
  v29 = *(unsigned int *)(v26 - 4);
  if (v29 > 0x400)
  {
    if (v29 > 2 * v28)
      goto LABEL_25;
LABEL_32:
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(a1 + 64), (uint64_t *)v15);
    goto LABEL_25;
  }
  if (3 * v29 <= 4 * v28)
    goto LABEL_32;
LABEL_25:
  ++*(_DWORD *)(a1 + 80);
LABEL_26:
  if (v31)
    WTF::RefCounted<WebCore::Font>::deref(v31);
  WebCore::FontPlatformData::~FontPlatformData((WebCore::FontPlatformData *)v32);
  if (v6)
    WTF::RefCounted<WebCore::FontCustomPlatformData>::deref(v6);
}

WebCore::FontCustomPlatformData *WebKit::RemoteRenderingBackend::cacheFontCustomPlatformData(PAL *a1)
{
  uint64_t v2;
  WebCore::FontCustomPlatformData *result;
  WebCore::FontCustomPlatformData *v4;
  char v5;

  v2 = *((_QWORD *)a1 + 6);
  if (*(_BYTE *)(v2 + 365) && *(_BYTE *)(v2 + 345))
    PAL::canLoad_CoreText_CTFontManagerCreateMemorySafeFontDescriptorFromData(a1);
  WebCore::FontCustomPlatformData::tryMakeFromSerializationData();
  if (v5)
    result = (WebCore::FontCustomPlatformData *)WebCore::DisplayList::ResourceHeap::add((uint64_t)a1 + 64, (uint64_t *)&v4);
  else
    result = (WebCore::FontCustomPlatformData *)WebKit::RemoteRenderingBackend::terminateWebProcess((uint64_t)a1, (uint64_t)"cacheFontCustomPlatformData couldn't deserialize FontCustomPlatformData");
  if (v5)
  {
    result = v4;
    v4 = 0;
    if (result)
      return WTF::RefCounted<WebCore::FontCustomPlatformData>::deref(result);
  }
  return result;
}

uint64_t WebKit::RemoteResourceCache::releaseRenderingResource(uint64_t a1, uint64_t a2)
{
  if ((WebCore::DisplayList::ResourceHeap::remove<WebCore::ImageBuffer>((uint64_t *)a1, a2, (_DWORD *)(a1 + 8)) & 1) != 0
    || (WebCore::DisplayList::ResourceHeap::remove<WebCore::RenderingResource>((uint64_t *)a1, a2, (_DWORD *)(a1 + 12)) & 1) != 0
    || (WebCore::DisplayList::ResourceHeap::remove<WebCore::Font>((uint64_t *)a1, a2, (_DWORD *)(a1 + 16)) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return WebCore::DisplayList::ResourceHeap::remove<WebCore::FontCustomPlatformData>((uint64_t *)a1, a2, (_DWORD *)(a1 + 20));
  }
}

void WebKit::RemoteRenderingBackend::prepareImageBufferSetsForDisplay(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  char v12;

  if (*(_DWORD *)(a2 + 12))
  {
    v4 = 0;
    while (1)
    {
      v5 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(a1 + 128), *(_QWORD *)(*(_QWORD *)a2 + 40 * v4));
      if (!v5)
        break;
      v6 = (unsigned int *)v5;
      v7 = (unsigned int *)(v5 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
      v12 = 1;
      if (v4 >= *(unsigned int *)(a2 + 12))
      {
LABEL_20:
        __break(0xC471u);
        JUMPOUT(0x197041E28);
      }
      WebKit::RemoteImageBufferSet::ensureBufferForDisplay(v5, (_BYTE *)(*(_QWORD *)a2 + 40 * v4), &v12);
      if (v12)
      {
        if (v12 != 2)
        {
          if (v4 >= *(unsigned int *)(a2 + 12))
            goto LABEL_20;
          WebKit::RemoteImageBufferSet::prepareBufferForDisplay((WebKit::RemoteImageBufferSet *)v6, (const WebCore::Region *)(*(_QWORD *)a2 + 40 * v4 + 8), *(unsigned __int8 *)(*(_QWORD *)a2 + 40 * v4 + 34));
        }
        v9 = 1;
      }
      else
      {
        WebKit::RemoteRenderingBackend::terminateWebProcess(a1, (uint64_t)"Can't asynchronously require full display for a buffer set");
        v9 = 0;
      }
      do
      {
        v10 = __ldaxr(v7);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v7));
      if (!v11)
      {
        atomic_store(1u, v6 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
      }
      if ((v9 & 1) != 0 && ++v4 < *(unsigned int *)(a2 + 12))
        continue;
      return;
    }
    WebKit::RemoteRenderingBackend::terminateWebProcess(a1, (uint64_t)"BufferSet is being updated before being created");
  }
}

WTF *WebKit::RemoteRenderingBackend::prepareImageBufferSetsForDisplaySync(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WTF *v6;
  unint64_t v7;
  unint64_t v8;
  WTF *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  WebKit::RemoteImageBufferSet *v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  WTF *result;
  WTF *v27;
  uint64_t v28;

  v27 = 0;
  v28 = 0;
  v6 = (WTF *)*(unsigned int *)(a2 + 12);
  WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v27, v6);
  if (HIDWORD(v28) < v6 && v28 < v6)
  {
    v7 = v28 + ((unint64_t)v28 >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 <= (unint64_t)v6)
      v9 = v6;
    else
      v9 = (WTF *)v8;
    WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v27, v9);
  }
  HIDWORD(v28) = (_DWORD)v6;
  if (*(_DWORD *)(a2 + 12))
  {
    v10 = 0;
    while (1)
    {
      v11 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(a1 + 128), *(_QWORD *)(*(_QWORD *)a2 + 40 * v10));
      if (!v11)
        break;
      v12 = (unsigned int *)v11;
      v13 = (unsigned int *)(v11 + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
      if (v10 >= *(unsigned int *)(a2 + 12))
      {
LABEL_43:
        __break(0xC471u);
        JUMPOUT(0x1970420A0);
      }
      if (v10 >= HIDWORD(v28))
      {
        __break(0xC471u);
        JUMPOUT(0x1970420A8);
      }
      WebKit::RemoteImageBufferSet::ensureBufferForDisplay(v11, (_BYTE *)(*(_QWORD *)a2 + 40 * v10), (_BYTE *)v27 + v10);
      do
      {
        v15 = __ldaxr(v13);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v13));
      if (!v16)
      {
        atomic_store(1u, v12 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
      }
      if (++v10 >= *(unsigned int *)(a2 + 12))
        goto LABEL_22;
    }
  }
  else
  {
LABEL_22:
    v17 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v17 + 16))(v17, &v27);
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    if (!*(_DWORD *)(a2 + 12))
      goto LABEL_37;
    v19 = 0;
    while (1)
    {
      v20 = (WebKit::RemoteImageBufferSet *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(a1 + 128), *(_QWORD *)(*(_QWORD *)a2 + 40 * v19));
      if (!v20)
        break;
      v21 = (unsigned int *)v20;
      v22 = (unsigned int *)((char *)v20 + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
      if (v19 >= HIDWORD(v28))
      {
        __break(0xC471u);
        JUMPOUT(0x1970420B0);
      }
      if (*((_BYTE *)v27 + v19) != 2)
      {
        if (v19 >= *(unsigned int *)(a2 + 12))
          goto LABEL_43;
        WebKit::RemoteImageBufferSet::prepareBufferForDisplay(v20, (const WebCore::Region *)(*(_QWORD *)a2 + 40 * v19 + 8), *(unsigned __int8 *)(*(_QWORD *)a2 + 40 * v19 + 34));
      }
      do
      {
        v24 = __ldaxr(v22);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v22));
      if (!v25)
      {
        atomic_store(1u, v21 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 8))(v21);
      }
      if (++v19 >= *(unsigned int *)(a2 + 12))
        goto LABEL_37;
    }
  }
  WebKit::RemoteRenderingBackend::terminateWebProcess(a1, (uint64_t)"BufferSet is being updated before being created");
LABEL_37:
  result = v27;
  if (v27)
  {
    v27 = 0;
    LODWORD(v28) = 0;
    return (WTF *)WTF::fastFree(result, v18);
  }
  return result;
}

WTF *WebKit::RemoteRenderingBackend::markSurfacesVolatile(_QWORD *a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned __int8 **v13;
  void *v14;
  unsigned int v15;
  unsigned __int8 *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  unsigned __int8 **v23;
  void *v24;
  unsigned __int8 *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  unsigned __int8 **v32;
  void *v33;
  unsigned __int8 *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  WTF *v44;
  __int128 v45;
  __int128 *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  IPC::Encoder *v50;
  WTF *v51;
  void *v52;
  WTF *result;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v60;
  int v61;
  __int128 v62;
  char v63;
  WTF *v64;
  uint64_t v65;
  uint64_t v66;
  IPC::Encoder *v67;

  v65 = 0;
  v66 = a2;
  v64 = 0;
  v4 = *((unsigned int *)a3 + 3);
  if ((_DWORD)v4)
  {
    v5 = *a3;
    v57 = *a3 + 16 * v4;
    v6 = 1;
    while (1)
    {
      v7 = *(_QWORD *)v5;
      v8 = *(_BYTE *)(v5 + 8);
      v9 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1[16], *(_QWORD *)v5);
      if (!v9)
      {
        WebKit::RemoteRenderingBackend::terminateWebProcess((uint64_t)a1, (uint64_t)"BufferSet is being marked volatile before being created");
        goto LABEL_92;
      }
      v10 = v9;
      v60 = v6;
      v11 = (unsigned int *)(v9 + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
      v13 = *(unsigned __int8 ***)(v9 + 40);
      if (!v13)
      {
        v15 = 0;
        v61 = 1;
        goto LABEL_18;
      }
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::ref(v13[1]);
      if ((v8 & 1) == 0)
        break;
      if (a4)
      {
        WebCore::ImageBuffer::setVolatileAndPurgeForTesting((WebCore::ImageBuffer *)v13);
LABEL_48:
        v15 = 1;
LABEL_9:
        v61 = 1;
        goto LABEL_10;
      }
      (*((void (**)(unsigned __int8 **))*v13 + 13))(v13);
      if (WebCore::ImageBuffer::setVolatile((WebCore::ImageBuffer *)v13))
        goto LABEL_48;
      v15 = 0;
      v61 = 0;
LABEL_10:
      v16 = v13[1];
      if (__ldaxr(v16))
      {
        __clrex();
LABEL_12:
        MEMORY[0x19AEABB3C](v16);
        goto LABEL_13;
      }
      if (__stxr(1u, v16))
        goto LABEL_12;
LABEL_13:
      v18 = *((_QWORD *)v16 + 1);
      v19 = v18 - 1;
      *((_QWORD *)v16 + 1) = v18 - 1;
      if (v18 == 1)
      {
        v54 = *((_QWORD *)v16 + 2);
        v20 = *((_QWORD *)v16 + 3);
        *((_QWORD *)v16 + 3) = 0;
        v21 = v54 != 0;
      }
      else
      {
        v20 = 0;
        v21 = 1;
      }
      v22 = __ldxr(v16);
      if (v22 == 1)
      {
        if (!__stlxr(0, v16))
          goto LABEL_17;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v16);
LABEL_17:
      if (!v19)
      {
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        if (!v21)
          WTF::fastFree((WTF *)v16, v14);
      }
LABEL_18:
      v23 = *(unsigned __int8 ***)(v10 + 48);
      if (!v23)
        goto LABEL_28;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::ref(v23[1]);
      if ((v8 & 2) != 0)
      {
        if (a4)
        {
          WebCore::ImageBuffer::setVolatileAndPurgeForTesting((WebCore::ImageBuffer *)v23);
LABEL_53:
          v15 |= 2u;
          goto LABEL_20;
        }
        (*((void (**)(unsigned __int8 **))*v23 + 13))(v23);
        if (WebCore::ImageBuffer::setVolatile((WebCore::ImageBuffer *)v23))
          goto LABEL_53;
        v61 = 0;
      }
LABEL_20:
      v25 = v23[1];
      if (__ldaxr(v25))
      {
        __clrex();
LABEL_22:
        MEMORY[0x19AEABB3C](v25);
        goto LABEL_23;
      }
      if (__stxr(1u, v25))
        goto LABEL_22;
LABEL_23:
      v27 = *((_QWORD *)v25 + 1);
      v28 = v27 - 1;
      *((_QWORD *)v25 + 1) = v27 - 1;
      if (v27 == 1)
      {
        v55 = *((_QWORD *)v25 + 2);
        v29 = *((_QWORD *)v25 + 3);
        *((_QWORD *)v25 + 3) = 0;
        v30 = v55 != 0;
      }
      else
      {
        v29 = 0;
        v30 = 1;
      }
      v31 = __ldxr(v25);
      if (v31 == 1)
      {
        if (!__stlxr(0, v25))
          goto LABEL_27;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_27:
      if (!v28)
      {
        if (v29)
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
        if (!v30)
          WTF::fastFree((WTF *)v25, v24);
      }
LABEL_28:
      v32 = *(unsigned __int8 ***)(v10 + 56);
      if (v32)
      {
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::ref(v32[1]);
        if ((v8 & 4) == 0)
          goto LABEL_30;
        if (a4)
        {
          WebCore::ImageBuffer::setVolatileAndPurgeForTesting((WebCore::ImageBuffer *)v32);
          goto LABEL_58;
        }
        (*((void (**)(unsigned __int8 **))*v32 + 13))(v32);
        if (WebCore::ImageBuffer::setVolatile((WebCore::ImageBuffer *)v32))
LABEL_58:
          v15 |= 4u;
        else
          v61 = 0;
LABEL_30:
        v34 = v32[1];
        if (__ldaxr(v34))
        {
          __clrex();
          goto LABEL_32;
        }
        if (__stxr(1u, v34))
LABEL_32:
          MEMORY[0x19AEABB3C](v34);
        v36 = *((_QWORD *)v34 + 1);
        v37 = v36 - 1;
        *((_QWORD *)v34 + 1) = v36 - 1;
        if (v36 == 1)
        {
          v56 = *((_QWORD *)v34 + 2);
          v38 = *((_QWORD *)v34 + 3);
          *((_QWORD *)v34 + 3) = 0;
          v39 = v56 != 0;
        }
        else
        {
          v38 = 0;
          v39 = 1;
        }
        v40 = __ldxr(v34);
        if (v40 == 1)
        {
          if (!__stlxr(0, v34))
            goto LABEL_37;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_37:
        if (!v37)
        {
          if (v38)
            (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
          if (!v39)
            WTF::fastFree((WTF *)v34, v33);
        }
      }
      v6 = v60;
      if (!v61)
        v6 = 0;
      if (v15)
      {
        *(_QWORD *)&v62 = v7;
        *((_QWORD *)&v62 + 1) = v15;
        v43 = HIDWORD(v65);
        if (HIDWORD(v65) == (_DWORD)v65)
        {
          v46 = (__int128 *)WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v64, HIDWORD(v65) + 1, (unint64_t)&v62);
          v43 = HIDWORD(v65);
          v44 = v64;
          v45 = *v46;
        }
        else
        {
          v44 = v64;
          v45 = v62;
        }
        *((_OWORD *)v44 + v43) = v45;
        ++HIDWORD(v65);
      }
      do
      {
        v41 = __ldaxr(v11);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v11));
      if (!v42)
      {
        atomic_store(1u, (unsigned int *)(v10 + 8));
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      }
      v5 += 16;
      if (v5 == v57)
        goto LABEL_90;
    }
    v15 = 0;
    goto LABEL_9;
  }
  LOBYTE(v6) = 1;
LABEL_90:
  *(_QWORD *)&v62 = &v66;
  *((_QWORD *)&v62 + 1) = &v64;
  v63 = v6 & 1;
  v47 = a1[12];
  v48 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v48 = 1296;
  *(_QWORD *)(v48 + 8) = v47;
  *(_QWORD *)(v48 + 528) = v48 + 16;
  *(_QWORD *)(v48 + 536) = v48 + 16;
  *(_OWORD *)(v48 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v48 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v48);
  v67 = (IPC::Encoder *)v48;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL>,0ul,1ul,2ul>((IPC::Encoder *)v48, (uint64_t **)&v62);
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*a1 + 32))(a1, &v67, 0);
  v50 = v67;
  v67 = 0;
  if (v50)
  {
    IPC::Encoder::~Encoder(v50, v49);
    WTF::fastFree(v51, v52);
  }
LABEL_92:
  result = v64;
  if (v64)
  {
    v64 = 0;
    LODWORD(v65) = 0;
    return (WTF *)WTF::fastFree(result, v49);
  }
  return result;
}

uint64_t WebKit::RemoteRenderingBackend::createRemoteBarcodeDetector(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t result;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15[3];
  uint64_t v16;

  v6 = WTF::fastMalloc((WTF *)0x20);
  v15[0] = MEMORY[0x19AEAE764](v6, a3);
  v7 = a1[17];
  v8 = *(_QWORD *)(a1[6] + 80);
  v9 = (unsigned int *)WTF::fastMalloc((WTF *)0x38);
  WebKit::RemoteBarcodeDetector::RemoteBarcodeDetector((uint64_t)v9, v15, v7, (uint64_t)a1, a2, v8);
  if (v15[0])
  {
    if (*(_DWORD *)(v15[0] + 8) == 1)
      (*(void (**)(void))(*(_QWORD *)v15[0] + 8))();
    else
      --*(_DWORD *)(v15[0] + 8);
  }
  v10 = a1[17];
  v16 = a2;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::HashTableTraits>::add<WebKit::RemoteBarcodeDetector&>((uint64_t *)(v10 + 16), &v16, (uint64_t)v9, (uint64_t)v15);
  result = IPC::StreamServerConnection::startReceivingMessages(a1[5], (uint64_t)v9, 0x3Bu, a2);
  v12 = v9 + 2;
  do
  {
    v13 = __ldaxr(v12);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v12));
  if (!v14)
  {
    atomic_store(1u, v9 + 2);
    return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
  }
  return result;
}

uint64_t WebKit::RemoteRenderingBackend::getRemoteBarcodeDetectorSupportedFormats()
{
  return WebCore::ShapeDetection::BarcodeDetectorImpl::getSupportedFormats();
}

uint64_t WebKit::RemoteRenderingBackend::createRemoteFaceDetector(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t result;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12[3];
  uint64_t v13;

  WTF::fastMalloc((WTF *)0x10);
  v12[0] = WebCore::ShapeDetection::FaceDetectorImpl::FaceDetectorImpl();
  v4 = a1[17];
  v5 = *(_QWORD *)(a1[6] + 80);
  v6 = (unsigned int *)WTF::fastMalloc((WTF *)0x38);
  WebKit::RemoteFaceDetector::RemoteFaceDetector((uint64_t)v6, v12, v4, (uint64_t)a1, a2, v5);
  if (v12[0])
  {
    if (*(_DWORD *)(v12[0] + 8) == 1)
      (*(void (**)(void))(*(_QWORD *)v12[0] + 8))();
    else
      --*(_DWORD *)(v12[0] + 8);
  }
  v7 = a1[17];
  v13 = a2;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::HashTableTraits>::add<WebKit::RemoteBarcodeDetector&>((uint64_t *)(v7 + 24), &v13, (uint64_t)v6, (uint64_t)v12);
  result = IPC::StreamServerConnection::startReceivingMessages(a1[5], (uint64_t)v6, 0x4Eu, a2);
  v9 = v6 + 2;
  do
  {
    v10 = __ldaxr(v9);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v9));
  if (!v11)
  {
    atomic_store(1u, v6 + 2);
    return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  return result;
}

uint64_t WebKit::RemoteRenderingBackend::createRemoteTextDetector(uint64_t *a1, uint64_t a2)
{
  WebCore::ShapeDetection::TextDetectorImpl *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t result;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13[3];
  uint64_t v14;

  v4 = (WebCore::ShapeDetection::TextDetectorImpl *)WTF::fastMalloc((WTF *)0x10);
  v13[0] = WebCore::ShapeDetection::TextDetectorImpl::TextDetectorImpl(v4);
  v5 = a1[17];
  v6 = *(_QWORD *)(a1[6] + 80);
  v7 = (unsigned int *)WTF::fastMalloc((WTF *)0x38);
  WebKit::RemoteTextDetector::RemoteTextDetector((uint64_t)v7, v13, v5, (uint64_t)a1, a2, v6);
  if (v13[0])
  {
    if (*(_DWORD *)(v13[0] + 8) == 1)
      (*(void (**)(void))(*(_QWORD *)v13[0] + 8))();
    else
      --*(_DWORD *)(v13[0] + 8);
  }
  v8 = a1[17];
  v14 = a2;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::HashTableTraits>::add<WebKit::RemoteBarcodeDetector&>((uint64_t *)(v8 + 32), &v14, (uint64_t)v7, (uint64_t)v13);
  result = IPC::StreamServerConnection::startReceivingMessages(a1[5], (uint64_t)v7, 0x7Du, a2);
  v10 = v7 + 2;
  do
  {
    v11 = __ldaxr(v10);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v10));
  if (!v12)
  {
    atomic_store(1u, v7 + 2);
    return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
  }
  return result;
}

uint64_t WebKit::RemoteRenderingBackend::getImageBufferResourceLimitsForTesting(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v9[8];

  v2 = *(_QWORD *)(a1 + 56);
  v3 = atomic_load((unint64_t *)(v2 + 64));
  v4 = atomic_load(&WebKit::globalAcceleratedImageBufferCount);
  v5 = atomic_load(&WebKit::globalImageBufferForCanvasCount);
  v6 = atomic_load((unint64_t *)(v2 + 72));
  v7 = *a2;
  *a2 = 0;
  v9[0] = v3;
  v9[1] = 5000;
  v9[2] = v4;
  v9[3] = 10000;
  v9[4] = v5;
  v9[5] = 200000;
  v9[6] = v6;
  v9[7] = 50000;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 16))(v7, v9);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

uint64_t *WebCore::DisplayList::ResourceHeap::add(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[24];
  uint64_t v9;

  v2 = *a2;
  if (*(_BYTE *)(*a2 + 40))
  {
    v3 = result;
    v4 = *(_QWORD *)(v2 + 32);
    *a2 = 0;
    v7 = v2;
    v9 = v4;
    result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>>(result, &v9, &v7, (uint64_t)v8);
    if (v8[16])
      ++*((_DWORD *)v3 + 3);
    v6 = v7;
    v7 = 0;
    if (v6)
      return (uint64_t *)WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v6 + 8), v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a2;
  if (*(_BYTE *)(*a2 + 40))
  {
    v3 = *(_QWORD *)(v2 + 32);
    *a2 = 0;
    v6 = v2;
    result = WebCore::DisplayList::ResourceHeap::add<WebCore::RenderingResource>(result, v3, &v6, (_DWORD *)result + 3);
    v5 = v6;
    v6 = 0;
    if (v5)
      return (uint64_t *)WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v5 + 8), v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WebCore::DisplayList::ResourceHeap::add(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _BYTE v4[24];
  uint64_t v5;

  v5 = *(_QWORD *)(*a2 + 32);
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>((uint64_t *)a1, &v5, a2, (uint64_t)v4);
  if (v4[16])
    ++*(_DWORD *)(a1 + 20);
  return result;
}

uint64_t *WebKit::RemoteResourceCache::cachedGradient@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v15;
  int v16;

  v4 = *result;
  if (!*result)
    goto LABEL_13;
  v5 = *(_DWORD *)(v4 - 8);
  v6 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v5 & ((v8 >> 31) ^ v8);
  v10 = (uint64_t *)(v4 + 24 * v9);
  v11 = *v10;
  if (*v10 != a2)
  {
    v16 = 1;
    while (v11)
    {
      v9 = (v9 + v16) & v5;
      v10 = (uint64_t *)(v4 + 24 * v9);
      v11 = *v10;
      ++v16;
      if (*v10 == a2)
        goto LABEL_3;
    }
    v10 = (uint64_t *)(v4 + 24 * *(unsigned int *)(v4 - 4));
  }
LABEL_3:
  if (v10 == (uint64_t *)(v4 + 24 * *(unsigned int *)(v4 - 4)) || *((_DWORD *)v10 + 4) != 2)
    goto LABEL_13;
  v12 = (_QWORD *)v10[1];
  if (!v12)
    goto LABEL_14;
  result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*v12 + 24))(v10[1]);
  if (!(_DWORD)result)
  {
LABEL_13:
    v12 = 0;
    goto LABEL_14;
  }
  v13 = v12[1];
  if (__ldaxr((unsigned __int8 *)v13))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v13))
  {
    goto LABEL_10;
  }
  result = (uint64_t *)MEMORY[0x19AEABB3C](v13);
LABEL_10:
  ++*(_QWORD *)(v13 + 8);
  v15 = __ldxr((unsigned __int8 *)v13);
  if (v15 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v13))
      goto LABEL_14;
  }
  else
  {
    __clrex();
  }
  result = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v13);
LABEL_14:
  *a3 = v12;
  return result;
}

uint64_t *WebCore::DisplayList::ResourceHeap::clearAllDrawingResources(uint64_t *this)
{
  uint64_t *v1;

  v1 = this;
  if (*((_DWORD *)this + 3) || *((_DWORD *)this + 4) || *((_DWORD *)this + 5))
  {
    this = _ZN3WTF9HashTableINS_23ObjectIdentifierGenericIN7WebCore31RenderingResourceIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS_12KeyValuePairIS6_NSt3__17variantIJNS8_9monostateENS_3RefINS2_11ImageBufferENS_12RawPtrTraitsISC_EENS_21DefaultRefDerefTraitsISC_EEEENSB_INS2_17RenderingResourceENSD_ISI_EENSF_ISI_EEEENSB_INS2_4FontENSD_ISM_EENSF_ISM_EEEENSB_INS2_22FontCustomPlatformDataENSD_ISQ_EENSF_ISQ_EEEEEEEEENS_24KeyValuePairKeyExtractorISV_EENS_11DefaultHashIS6_EENS_7HashMapIS6_SU_SZ_NS_10HashTraitsIS6_EENS11_ISU_EENS_15HashTableTraitsEE18KeyValuePairTraitsES12_E8removeIfIZNS2_11DisplayList12ResourceHeap24clearAllDrawingResourcesEvEUlRKT_E_EEbS1D_(this);
    v1[2] = 0;
    *((_DWORD *)v1 + 3) = 0;
  }
  return this;
}

uint64_t *WebCore::DisplayList::ResourceHeap::clearAllImageResources(uint64_t *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  char v21;

  v1 = *this;
  if (*this)
  {
    v2 = *(_DWORD *)(v1 - 4);
    if (v2)
    {
      v3 = (uint64_t)this;
      v4 = 0;
      v5 = v2 - 1;
      do
      {
        v6 = v5;
        v7 = (_QWORD *)(v1 + 24 * v5);
        if ((unint64_t)(*v7 + 1) >= 2)
        {
          v8 = v1 + 24 * v5;
          v10 = *(_DWORD *)(v8 + 16);
          v9 = (_DWORD *)(v8 + 16);
          if (v10 == 2)
          {
            v11 = v1 + 24 * v5;
            v13 = *(_QWORD *)(v11 + 8);
            v12 = v11 + 8;
            this = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
            if ((_DWORD)this)
            {
              --*(_DWORD *)(v3 + 12);
              *v7 = -1;
              v14 = *v9;
              if ((_DWORD)v14 != -1)
                this = (uint64_t *)((uint64_t (*)(char *, uint64_t))off_1E34B8358[v14])(&v21, v12);
              *v9 = -1;
              ++v4;
            }
          }
        }
        --v5;
      }
      while (v6);
      v15 = *(_QWORD *)v3;
      if (v4)
      {
        *(_DWORD *)(v15 - 16) += v4;
        v16 = *(_QWORD *)v3;
        if (*(_QWORD *)v3)
          v17 = *(_DWORD *)(v16 - 12);
        else
          v17 = 0;
        *(_DWORD *)(v16 - 12) = v17 - v4;
        v15 = *(_QWORD *)v3;
      }
      if (v15)
      {
        v18 = *(_DWORD *)(v15 - 4);
        v19 = 6 * *(_DWORD *)(v15 - 12);
        if (v18 >= 9 && v19 < v18)
          return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::shrinkToBestSize((uint64_t *)v3);
      }
    }
  }
  return this;
}

void WebKit::ImageBufferShareableAllocator::~ImageBufferShareableAllocator(WebKit::ImageBufferShareableAllocator *this)
{
  WTF::MachSendRight::~MachSendRight((WebKit::ImageBufferShareableAllocator *)((char *)this + 8));
}

{
  void *v2;

  WTF::MachSendRight::~MachSendRight((WebKit::ImageBufferShareableAllocator *)((char *)this + 8));
  WTF::fastFree(this, v2);
}

_QWORD *WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>::Ref(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v6;

  v4 = *(_QWORD *)(a2 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](v4);
LABEL_5:
  ++*(_QWORD *)(v4 + 8);
  v6 = __ldxr((unsigned __int8 *)v4);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_10:
  *a1 = a2;
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 8);
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34B8300[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 8) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E34B8318[v4])(&v5, result, a2);
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ImageBufferENSC_ISH_EENSE_ISH_EEEENS8_23ObjectIdentifierGenericINSA_31RenderingResourceIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISQ_LNS0_6_TraitE1EEEEEvOT_EUlRSW_OT0_E_JRNS0_6__baseILSU_1EJSG_SK_SP_EEEOS14_EEEDcSW_DpT0_(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = *result;
  v5 = *(unsigned int *)(*result + 8);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      v6 = *a3;
      *a3 = 0;
      v7 = *a2;
      *a2 = v6;
      v9 = v7;
      return WTF::Ref<WebCore::FEColorMatrix,WTF::RawPtrTraits<WebCore::FEColorMatrix>,WTF::DefaultRefDerefTraits<WebCore::FEColorMatrix>>::~Ref(&v9, a2);
    }
    result = (uint64_t *)((uint64_t (*)(char *, uint64_t))off_1E34B8300[v5])(&v10, v4);
  }
  v8 = *a3;
  *a3 = 0;
  *(_QWORD *)v4 = v8;
  *(_DWORD *)(v4 + 8) = 0;
  return result;
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ImageBufferENSC_ISH_EENSE_ISH_EEEENS8_23ObjectIdentifierGenericINSA_31RenderingResourceIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISQ_LNS0_6_TraitE1EEEEEvOT_EUlRSW_OT0_E_JRNS0_6__baseILSU_1EJSG_SK_SP_EEEOS14_EEEDcSW_DpT0_(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = *result;
  v5 = *(unsigned int *)(*result + 8);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v6 = *a3;
      *a3 = 0;
      v7 = *a2;
      *a2 = v6;
      v9 = v7;
      return WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(&v9, a2);
    }
    result = (uint64_t *)((uint64_t (*)(char *, uint64_t))off_1E34B8300[v5])(&v10, v4);
  }
  v8 = *a3;
  *a3 = 0;
  *(_QWORD *)v4 = v8;
  *(_DWORD *)(v4 + 8) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ImageBufferENSC_ISH_EENSE_ISH_EEEENS8_23ObjectIdentifierGenericINSA_31RenderingResourceIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISQ_LNS0_6_TraitE1EEEEEvOT_EUlRSW_OT0_E_JRNS0_6__baseILSU_1EJSG_SK_SP_EEEOS14_EEEDcSW_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E34B8300[v5])(&v6, v4);
  }
  *(_DWORD *)(v4 + 8) = -1;
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 8) = 2;
  return result;
}

uint64_t std::__optional_storage_base<std::variant<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::variant<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,false>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = result;
  if (*(unsigned __int8 *)(result + 16) == *(unsigned __int8 *)(a2 + 16))
  {
    if (*(_BYTE *)(result + 16))
      return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,(std::__variant_detail::_Trait)1>>(result, a2);
  }
  else if (*(_BYTE *)(result + 16))
  {
    v3 = *(unsigned int *)(result + 8);
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E34B8300[v3])(&v4, result);
    *(_DWORD *)(v2 + 8) = -1;
    *(_BYTE *)(v2 + 16) = 0;
  }
  else
  {
    *(_BYTE *)result = 0;
    *(_DWORD *)(result + 8) = -1;
    result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Ref<WebCore::NativeImage,WTF::RawPtrTraits<WebCore::NativeImage>,WTF::DefaultRefDerefTraits<WebCore::NativeImage>>,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,(std::__variant_detail::_Trait)1>>(result, a2);
    *(_BYTE *)(v2 + 16) = 1;
  }
  return result;
}

unsigned __int8 **WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::deref(unsigned __int8 **result, void *a2)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;

  v2 = *result;
  if (__ldaxr(*result))
  {
    __clrex();
LABEL_3:
    result = (unsigned __int8 **)MEMORY[0x19AEABB3C](v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = *((_QWORD *)v2 + 1);
  v5 = v4 - 1;
  *((_QWORD *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    v9 = *((_QWORD *)v2 + 2);
    v6 = *((_QWORD *)v2 + 3);
    *((_QWORD *)v2 + 3) = 0;
    v7 = v9 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = __ldxr(v2);
  if (v8 == 1)
  {
    if (!__stlxr(0, v2))
      goto LABEL_8;
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 **)WTF::Lock::unlockSlow((WTF::Lock *)v2);
LABEL_8:
  if (!v5)
  {
    if (v6)
      result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (!v7)
      return (unsigned __int8 **)WTF::fastFree((WTF *)v2, a2);
  }
  return result;
}

uint64_t std::make_unique[abi:sn180100]<WebKit::ImageBufferShareableAllocator,WebCore::ProcessIdentity const&>(WebCore::ImageBufferAllocator **a1, const WTF::MachSendRight *a2)
{
  WebCore::ImageBufferAllocator *v4;
  _QWORD *v5;
  uint64_t result;

  v4 = (WebCore::ImageBufferAllocator *)WTF::fastMalloc((WTF *)0x10);
  v5 = (_QWORD *)WebCore::ImageBufferAllocator::ImageBufferAllocator(v4);
  *v5 = off_1E34B8178;
  result = WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)(v5 + 1), a2);
  *a1 = v4;
  return result;
}

WTF *WTF::RefCounted<WebCore::FilterImage>::deref(WTF *this, void *a2)
{
  WTF *v2;
  const void *v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  const void *v14;
  uint64_t v15;

  v2 = this;
  if (*(_DWORD *)this != 1)
  {
    --*(_DWORD *)this;
    return this;
  }
  v3 = (const void *)*((_QWORD *)this + 11);
  *((_QWORD *)v2 + 11) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (_DWORD *)*((_QWORD *)v2 + 10);
  *((_QWORD *)v2 + 10) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)v2 + 9);
  *((_QWORD *)v2 + 9) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = *((_QWORD *)v2 + 8);
  *((_QWORD *)v2 + 8) = 0;
  if (!v6)
    goto LABEL_30;
  v7 = *(_QWORD *)(v6 + 8);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEABB3C](v7);
LABEL_18:
  v9 = *(_QWORD *)(v7 + 8);
  v10 = v9 - 1;
  *(_QWORD *)(v7 + 8) = v9 - 1;
  if (v9 == 1)
  {
    v15 = *(_QWORD *)(v7 + 16);
    v11 = *(_QWORD *)(v7 + 24);
    *(_QWORD *)(v7 + 24) = 0;
    v12 = v15 != 0;
  }
  else
  {
    v11 = 0;
    v12 = 1;
  }
  v13 = __ldxr((unsigned __int8 *)v7);
  if (v13 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
    {
      if (!v10)
        goto LABEL_26;
      goto LABEL_30;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  if (!v10)
  {
LABEL_26:
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (!v12)
      WTF::fastFree((WTF *)v7, a2);
  }
LABEL_30:
  v14 = (const void *)*((_QWORD *)v2 + 7);
  *((_QWORD *)v2 + 7) = 0;
  if (v14)
    CFRelease(v14);
  return (WTF *)WTF::fastFree(v2, a2);
}

void WebKit::ScopedWebGLRenderingResourcesRequest::~ScopedWebGLRenderingResourcesRequest(WebKit::ScopedWebGLRenderingResourcesRequest *this)
{
  WebKit::ScopedWebGLRenderingResourcesRequest *v1;
  unsigned int v2;
  unsigned int v4;

  v1 = this;
  if (*(_BYTE *)this)
  {
    do
      v2 = __ldaxr((unsigned int *)&WebKit::ScopedWebGLRenderingResourcesRequest::s_requests);
    while (__stlxr(v2 - 1, (unsigned int *)&WebKit::ScopedWebGLRenderingResourcesRequest::s_requests));
    if (!atomic_load((unsigned int *)&WebKit::ScopedWebGLRenderingResourcesRequest::s_requests))
      this = WebKit::ScopedWebGLRenderingResourcesRequest::scheduleFreeWebGLRenderingResources(this);
  }
  if (*((_BYTE *)v1 + 1))
  {
    do
      v4 = __ldaxr((unsigned int *)&WebKit::ScopedRenderingResourcesRequest::s_requests);
    while (__stlxr(v4 - 1, (unsigned int *)&WebKit::ScopedRenderingResourcesRequest::s_requests));
    if (!atomic_load((unsigned int *)&WebKit::ScopedRenderingResourcesRequest::s_requests))
      WebKit::ScopedRenderingResourcesRequest::scheduleFreeRenderingResources(this);
  }
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int **v4;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (unsigned int **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (unsigned int *)-1)
        v4 = IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>::~ScopedActiveMessageReceiveQueue(v4);
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int **v4;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (unsigned int **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (unsigned int *)-1)
        v4 = IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>::~ScopedActiveMessageReceiveQueue(v4);
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int **v4;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (unsigned int **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (unsigned int *)-1)
        v4 = IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>::~ScopedActiveMessageReceiveQueue(v4);
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1 + 8;
    do
    {
      if (*(_QWORD *)(v4 - 8) != -1)
      {
        v5 = *(unsigned int *)(v4 + 8);
        if ((_DWORD)v5 != -1)
          ((void (*)(char *, uint64_t))off_1E34B8358[v5])(&v7, v4);
        *(_DWORD *)(v4 + 8) = -1;
      }
      v4 += 24;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3WTF3RefIN7WebCore11ImageBufferENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_17RenderingResourceENSD_ISI_EENSF_ISI_EEEENSA_INSB_4FontENSD_ISM_EENSF_ISM_EEEENSA_INSB_22FontCustomPlatformDataENSD_ISQ_EENSF_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJS8_SH_SL_SP_ST_EEEEEEDcSX_DpT0_(uint64_t a1, uint64_t *a2)
{
  return WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(a2, a2);
}

unsigned __int8 **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3WTF3RefIN7WebCore11ImageBufferENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_17RenderingResourceENSD_ISI_EENSF_ISI_EEEENSA_INSB_4FontENSD_ISM_EENSF_ISM_EEEENSA_INSB_22FontCustomPlatformDataENSD_ISQ_EENSF_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJS8_SH_SL_SP_ST_EEEEEEDcSX_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned __int8 **result;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v2 + 8), a2);
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3WTF3RefIN7WebCore11ImageBufferENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_17RenderingResourceENSD_ISI_EENSF_ISI_EEEENSA_INSB_4FontENSD_ISM_EENSF_ISM_EEEENSA_INSB_22FontCustomPlatformDataENSD_ISQ_EENSF_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJS8_SH_SL_SP_ST_EEEEEEDcSX_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return WTF::RefCounted<WebCore::Font>::deref(result);
  return result;
}

WebCore::FontCustomPlatformData *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3WTF3RefIN7WebCore11ImageBufferENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_17RenderingResourceENSD_ISI_EENSF_ISI_EEEENSA_INSB_4FontENSD_ISM_EENSF_ISM_EEEENSA_INSB_22FontCustomPlatformDataENSD_ISQ_EENSF_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJS8_SH_SL_SP_ST_EEEEEEDcSX_DpT0_(uint64_t a1, WebCore::FontCustomPlatformData **a2)
{
  WebCore::FontCustomPlatformData *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return WTF::RefCounted<WebCore::FontCustomPlatformData>::deref(result);
  return result;
}

WebCore::FontCustomPlatformData *WTF::RefCounted<WebCore::FontCustomPlatformData>::deref(WebCore::FontCustomPlatformData *result)
{
  WTF *v1;
  void *v2;

  if (*(_DWORD *)result == 1)
  {
    WebCore::FontCustomPlatformData::~FontCustomPlatformData(result);
    return (WebCore::FontCustomPlatformData *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t *WebCore::DisplayList::ResourceHeap::add<WebCore::RenderingResource>(uint64_t *a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t *result;
  _BYTE v6[24];
  uint64_t v7;

  v7 = a2;
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>>(a1, &v7, a3, (uint64_t)v6);
  if (v6[16])
    ++*a4;
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>>@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v5;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  _QWORD *v32;
  unsigned int v33;
  char v34;

  v5 = result;
  v7 = *result;
  if (*result
    || (v32 = a2,
        result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(result, 0), a2 = v32, (v7 = *v5) != 0))
  {
    v8 = 0;
    v9 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v9 = 0;
    v8 = 1;
  }
  v10 = *a2;
  v11 = *a2 + ~(*a2 << 32);
  v12 = (v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13);
  v13 = (9 * (v12 ^ (v12 >> 8))) ^ ((9 * (v12 ^ (v12 >> 8))) >> 15);
  v14 = v9 & (((v13 + ~(v13 << 27)) >> 31) ^ (v13 + ~((_DWORD)v13 << 27)));
  v15 = (uint64_t *)(v7 + 24 * v14);
  v16 = *v15;
  if (*v15)
  {
    v17 = 0;
    v18 = 1;
    do
    {
      if (v16 == v10)
      {
        if ((v8 & 1) != 0)
          v33 = 0;
        else
          v33 = *(_DWORD *)(v7 - 4);
        v31 = 0;
        v30 = v7 + 24 * v33;
        goto LABEL_24;
      }
      if (v16 == -1)
        v17 = v15;
      v14 = (v14 + v18) & v9;
      v15 = (uint64_t *)(v7 + 24 * v14);
      v16 = *v15;
      ++v18;
    }
    while (*v15);
    if (v17)
    {
      *v17 = 0;
      *((_DWORD *)v17 + 4) = 0;
      --*(_DWORD *)(*v5 - 16);
      v10 = *a2;
      v15 = v17;
    }
  }
  *v15 = v10;
  v19 = *((unsigned int *)v15 + 4);
  if ((_DWORD)v19 == -1)
    goto LABEL_16;
  v20 = v15 + 1;
  if ((_DWORD)v19 != 2)
  {
    result = (uint64_t *)((uint64_t (*)(char *, uint64_t *))off_1E34B8358[v19])(&v34, v20);
LABEL_16:
    v23 = *a3;
    *a3 = 0;
    v15[1] = v23;
    *((_DWORD *)v15 + 4) = 2;
    goto LABEL_17;
  }
  v21 = *a3;
  *a3 = 0;
  v22 = *v20;
  *v20 = v21;
  if (v22)
    result = (uint64_t *)WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v22 + 8), v20);
LABEL_17:
  v24 = *v5;
  if (*v5)
    v25 = *(_DWORD *)(v24 - 12) + 1;
  else
    v25 = 1;
  *(_DWORD *)(v24 - 12) = v25;
  v26 = *v5;
  if (*v5)
    v27 = *(_DWORD *)(v26 - 12);
  else
    v27 = 0;
  v28 = (*(_DWORD *)(v26 - 16) + v27);
  v29 = *(unsigned int *)(v26 - 4);
  if (v29 > 0x400)
  {
    if (v29 > 2 * v28)
      goto LABEL_23;
LABEL_26:
    result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(v5, v15);
    v15 = result;
    v26 = *v5;
    if (*v5)
      LODWORD(v29) = *(_DWORD *)(v26 - 4);
    else
      LODWORD(v29) = 0;
    goto LABEL_23;
  }
  if (3 * v29 <= 4 * v28)
    goto LABEL_26;
LABEL_23:
  v30 = v26 + 24 * v29;
  v31 = 1;
LABEL_24:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v30;
  *(_BYTE *)(a4 + 16) = v31;
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  unsigned int v39;
  uint64_t *result;
  uint64_t v41;
  char v44;
  char v45;
  char v46;
  char v47;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = (_DWORD *)(v7 + 32);
    do
    {
      *((_QWORD *)v10 - 2) = 0;
      *v10 = 0;
      v10 += 6;
      --v9;
    }
    while (v9);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    v41 = v5;
    do
    {
      v14 = (uint64_t *)(v4 + 24 * v11);
      v15 = *v14;
      if (*v14)
      {
        if (v15 != -1)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = (v15 + ~(v15 << 32)) ^ ((unint64_t)(v15 + ~(v15 << 32)) >> 22);
          v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          v21 = v17 & ((v20 >> 31) ^ v20);
          v22 = 1;
          do
          {
            v23 = v21;
            v24 = (uint64_t *)(v16 + 24 * v21);
            v21 = (v21 + v22++) & v17;
          }
          while (*v24);
          v25 = v23;
          v26 = v16 + 24 * v23;
          v29 = *(_DWORD *)(v26 + 16);
          v28 = (_DWORD *)(v26 + 16);
          v27 = v29;
          if (v29 != -1)
            ((void (*)(char *, uint64_t))off_1E34B8358[v27])(&v45, v16 + 24 * v23 + 8);
          *v28 = -1;
          *v24 = *v14;
          v30 = v16 + 24 * v25;
          *(_BYTE *)(v30 + 8) = 0;
          v31 = v30 + 8;
          v32 = v4 + 24 * v11;
          *(_DWORD *)(v31 + 8) = -1;
          v33 = *(unsigned int *)(v32 + 16);
          if ((_DWORD)v33 != -1)
          {
            v34 = v32 + 8;
            ((void (*)(char *, uint64_t, uint64_t))off_1E34B8380[v33])(&v47, v31, v32 + 8);
            *(_DWORD *)(v31 + 8) = v33;
            v35 = *(unsigned int *)(v4 + 24 * v11 + 16);
            if ((_DWORD)v35 != -1)
              ((void (*)(char *, uint64_t))off_1E34B8358[v35])(&v46, v34);
          }
          *(_DWORD *)(v4 + 24 * v11 + 16) = -1;
          if (v14 == a3)
            v12 = v24;
          v13 = v41;
        }
      }
      else
      {
        v36 = v4 + 24 * v11;
        v39 = *(_DWORD *)(v36 + 16);
        v38 = (_DWORD *)(v36 + 16);
        v37 = v39;
        if (v39 != -1)
          ((void (*)(char *, uint64_t))off_1E34B8358[v37])(&v44, v4 + 24 * v11 + 8);
        *v38 = -1;
      }
      ++v11;
    }
    while (v11 != v13);
    goto LABEL_26;
  }
  v12 = 0;
  result = 0;
  if (v4)
  {
LABEL_26:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v12;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3WTF3RefIN7WebCore11ImageBufferENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_17RenderingResourceENSD_ISI_EENSF_ISI_EEEENSA_INSB_4FontENSD_ISM_EENSF_ISM_EEEENSA_INSB_22FontCustomPlatformDataENSD_ISQ_EENSF_ISQ_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS11_OT0_E_JRNS0_6__baseILSY_1EJS8_SH_SL_SP_ST_EEEOS19_EEEDcS11_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3WTF3RefIN7WebCore11ImageBufferENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_17RenderingResourceENSD_ISI_EENSF_ISI_EEEENSA_INSB_4FontENSD_ISM_EENSF_ISM_EEEENSA_INSB_22FontCustomPlatformDataENSD_ISQ_EENSF_ISQ_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS11_OT0_E_JRNS0_6__baseILSY_1EJS8_SH_SL_SP_ST_EEEOS19_EEEDcS11_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3WTF3RefIN7WebCore11ImageBufferENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_17RenderingResourceENSD_ISI_EENSF_ISI_EEEENSA_INSB_4FontENSD_ISM_EENSF_ISM_EEEENSA_INSB_22FontCustomPlatformDataENSD_ISQ_EENSF_ISQ_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS11_OT0_E_JRNS0_6__baseILSY_1EJS8_SH_SL_SP_ST_EEEOS19_EEEDcS11_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3WTF3RefIN7WebCore11ImageBufferENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_17RenderingResourceENSD_ISI_EENSF_ISI_EEEENSA_INSB_4FontENSD_ISM_EENSF_ISM_EEEENSA_INSB_22FontCustomPlatformDataENSD_ISQ_EENSF_ISQ_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS11_OT0_E_JRNS0_6__baseILSY_1EJS8_SH_SL_SP_ST_EEEOS19_EEEDcS11_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t WebCore::DisplayList::ResourceHeap::get<WebCore::RenderingResource>(uint64_t result, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    v6 = v2 & ((v5 >> 31) ^ v5);
    v7 = (uint64_t *)(result + 24 * v6);
    v8 = *v7;
    if (*v7 != a2)
    {
      v9 = 1;
      while (v8)
      {
        v6 = (v6 + v9) & v2;
        v7 = (uint64_t *)(result + 24 * v6);
        v8 = *v7;
        ++v9;
        if (*v7 == a2)
          goto LABEL_3;
      }
      v7 = (uint64_t *)(result + 24 * *(unsigned int *)(result - 4));
    }
LABEL_3:
    if (v7 == (uint64_t *)(result + 24 * *(unsigned int *)(result - 4)) || *((_DWORD *)v7 + 4) != 2)
      return 0;
    else
      return v7[1];
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::find(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  int v10;

  if (!a1)
    return 0;
  v2 = *(_DWORD *)(a1 - 8);
  v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  v6 = v2 & ((v5 >> 31) ^ v5);
  v7 = (uint64_t *)(a1 + 24 * v6);
  v8 = *v7;
  if (*v7 != a2)
  {
    v10 = 1;
    while (v8)
    {
      v6 = (v6 + v10) & v2;
      v7 = (uint64_t *)(a1 + 24 * v6);
      v8 = *v7;
      ++v10;
      if (*v7 == a2)
        return v7;
    }
    return (uint64_t *)(a1 + 24 * *(unsigned int *)(a1 - 4));
  }
  return v7;
}

uint64_t WebCore::DisplayList::ResourceHeap::get<WebCore::Font>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  int v11;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  v8 = (uint64_t *)(v2 + 24 * v7);
  v9 = *v8;
  if (*v8 != a2)
  {
    v11 = 1;
    while (v9)
    {
      v7 = (v7 + v11) & v3;
      v8 = (uint64_t *)(v2 + 24 * v7);
      v9 = *v8;
      ++v11;
      if (*v8 == a2)
        goto LABEL_3;
    }
    v8 = (uint64_t *)(v2 + 24 * *(unsigned int *)(v2 - 4));
  }
LABEL_3:
  if (v8 != (uint64_t *)(v2 + 24 * *(unsigned int *)(v2 - 4)) && *((_DWORD *)v8 + 4) == 3)
    return v8[1];
  else
    return 0;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t result;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *a2;
  result = WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::hash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(*a2);
  v12 = result & v9;
  v13 = v8 + 24 * (result & v9);
  v14 = *(_QWORD *)v13;
  if (*(_QWORD *)v13)
  {
    v15 = 0;
    v16 = 1;
    do
    {
      if (v14 == v10)
      {
        v20 = 0;
        v21 = v8 + 24 * *(unsigned int *)(v8 - 4);
        goto LABEL_28;
      }
      if (v14 == -1)
        v15 = v13;
      v12 = (v12 + v16) & v9;
      v13 = v8 + 24 * v12;
      v14 = *(_QWORD *)v13;
      ++v16;
    }
    while (*(_QWORD *)v13);
    if (v15)
    {
      *(_QWORD *)v15 = 0;
      *(_DWORD *)(v15 + 16) = 0;
      --*(_DWORD *)(*a1 - 16);
      v10 = *a2;
      v13 = v15;
    }
  }
  *(_QWORD *)v13 = v10;
  v17 = *(unsigned int *)(v13 + 16);
  if ((_DWORD)v17 == -1)
    goto LABEL_18;
  v18 = (uint64_t *)(v13 + 8);
  if ((_DWORD)v17 != 4)
  {
    result = ((uint64_t (*)(char *, uint64_t *))off_1E34B8358[v17])(&v29, v18);
LABEL_18:
    v22 = *a3;
    *a3 = 0;
    *(_QWORD *)(v13 + 8) = v22;
    *(_DWORD *)(v13 + 16) = 4;
    goto LABEL_19;
  }
  v19 = *a3;
  *a3 = 0;
  result = *v18;
  *v18 = v19;
  if (result)
    result = (uint64_t)WTF::RefCounted<WebCore::FontCustomPlatformData>::deref((WebCore::FontCustomPlatformData *)result);
LABEL_19:
  v23 = *a1;
  if (*a1)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v25 = *a1;
  if (*a1)
    v26 = *(_DWORD *)(v25 - 12);
  else
    v26 = 0;
  v27 = (*(_DWORD *)(v25 - 16) + v26);
  v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 <= 2 * v27)
    {
LABEL_25:
      result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1, (uint64_t *)v13);
      v13 = result;
      v25 = *a1;
      if (*a1)
        LODWORD(v28) = *(_DWORD *)(v25 - 4);
      else
        LODWORD(v28) = 0;
    }
  }
  else if (3 * v28 <= 4 * v27)
  {
    goto LABEL_25;
  }
  v21 = v25 + 24 * v28;
  v20 = 1;
LABEL_28:
  *(_QWORD *)a4 = v13;
  *(_QWORD *)(a4 + 8) = v21;
  *(_BYTE *)(a4 + 16) = v20;
  return result;
}

uint64_t WebCore::DisplayList::ResourceHeap::get<WebCore::FontCustomPlatformData>(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::find(a1, a2);
  if (a1)
    v4 = (uint64_t *)(a1 + 24 * *(unsigned int *)(a1 - 4));
  else
    v4 = 0;
  if (v4 == v3 || *((_DWORD *)v3 + 4) != 4)
    return 0;
  else
    return v3[1];
}

uint64_t *_ZN3WTF9HashTableINS_23ObjectIdentifierGenericIN7WebCore31RenderingResourceIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS_12KeyValuePairIS6_NSt3__17variantIJNS8_9monostateENS_3RefINS2_11ImageBufferENS_12RawPtrTraitsISC_EENS_21DefaultRefDerefTraitsISC_EEEENSB_INS2_17RenderingResourceENSD_ISI_EENSF_ISI_EEEENSB_INS2_4FontENSD_ISM_EENSF_ISM_EEEENSB_INS2_22FontCustomPlatformDataENSD_ISQ_EENSF_ISQ_EEEEEEEEENS_24KeyValuePairKeyExtractorISV_EENS_11DefaultHashIS6_EENS_7HashMapIS6_SU_SZ_NS_10HashTraitsIS6_EENS11_ISU_EENS_15HashTableTraitsEE18KeyValuePairTraitsES12_E8removeIfIZNS2_11DisplayList12ResourceHeap24clearAllDrawingResourcesEvEUlRKT_E_EEbS1D_(uint64_t *result)
{
  uint64_t v1;
  int v2;
  uint64_t *v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  char v17;

  v1 = *result;
  if (*result)
  {
    v2 = *(_DWORD *)(v1 - 4);
    if (v2)
    {
      v3 = result;
      v4 = 0;
      v5 = v2 - 1;
      do
      {
        v6 = v5;
        v7 = (_QWORD *)(v1 + 24 * v5);
        if ((unint64_t)(*v7 + 1) >= 2)
        {
          v8 = v1 + 24 * v5;
          v11 = *(_DWORD *)(v8 + 16);
          v10 = (_DWORD *)(v8 + 16);
          v9 = v11;
          if (v11 - 2 <= 2)
          {
            *v7 = -1;
            result = (uint64_t *)((uint64_t (*)(char *, uint64_t))off_1E34B8358[v9])(&v17, v1 + 24 * v5 + 8);
            *v10 = -1;
            ++v4;
          }
        }
        --v5;
      }
      while (v6);
      v12 = *v3;
      if (v4)
      {
        *(_DWORD *)(v12 - 16) += v4;
        v13 = *v3;
        if (*v3)
          v14 = *(_DWORD *)(v13 - 12);
        else
          v14 = 0;
        *(_DWORD *)(v13 - 12) = v14 - v4;
        v12 = *v3;
      }
      if (v12)
      {
        v15 = *(_DWORD *)(v12 - 4);
        if (6 * *(_DWORD *)(v12 - 12) < v15 && v15 >= 9)
          return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::shrinkToBestSize(v3);
      }
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::shrinkToBestSize(uint64_t *a1)
{
  unsigned int v2;
  unsigned int v3;

  if (*a1)
    v2 = *(_DWORD *)(*a1 - 12);
  else
    v2 = 0;
  v3 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::computeBestTableSize(v2);
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v3, 0);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::computeBestTableSize(unsigned int a1)
{
  unsigned int v1;
  unsigned int v2;
  unint64_t v3;
  double v4;
  double v5;
  double v6;

  v1 = (a1 - 1) | ((a1 - 1) >> 1) | (((a1 - 1) | ((a1 - 1) >> 1)) >> 2);
  v2 = v1 | (v1 >> 4) | ((v1 | (v1 >> 4)) >> 8);
  v3 = (v2 | HIWORD(v2)) + 1;
  if (v3 > 0x400)
  {
    if (v3 > 2 * (unint64_t)a1)
      goto LABEL_11;
  }
  else if (3 * v3 > 4 * (unint64_t)a1)
  {
LABEL_4:
    v4 = (double)a1;
    v5 = (double)v3;
    v6 = 0.604166667;
    goto LABEL_5;
  }
  LODWORD(v3) = 2 * v3;
  if (v3 <= 0x400)
    goto LABEL_4;
LABEL_11:
  v4 = (double)a1;
  v5 = (double)v3;
  v6 = 0.416666667;
LABEL_5:
  if (v5 * v6 <= v4)
    LODWORD(v3) = 2 * v3;
  if (v3 <= 8)
    return 8;
  else
    return v3;
}

uint64_t WebCore::DisplayList::ResourceHeap::remove<WebCore::ImageBuffer>(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v8;

  v8 = a2;
  if (!*a3)
    return 0;
  v5 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1, &v8);
  v6 = *a1;
  if (*a1)
    v6 += 24 * *(unsigned int *)(v6 - 4);
  if ((uint64_t *)v6 == v5 || *((_DWORD *)v5 + 4) != 1)
    return 0;
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::remove(a1, (uint64_t)v5);
  --*a3;
  return result;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::remove(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  if (!*a1)
  {
    if (a2)
    {
      v2 = 0;
      goto LABEL_3;
    }
    return 0;
  }
  v2 = *a1 + 24 * *(unsigned int *)(*a1 - 4);
  if (v2 == a2)
    return 0;
LABEL_3:
  if (v2 != a2)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(a1, a2);
  return 1;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t *result;
  uint64_t v9;
  int v10;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = *a2 + ~(*a2 << 32);
  v5 = 9 * (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) ^ (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  result = (uint64_t *)(v2 + 24 * v7);
  v9 = *result;
  if (*result != *a2)
  {
    v10 = 1;
    while (v9)
    {
      v7 = (v7 + v10) & v3;
      result = (uint64_t *)(v2 + 24 * v7);
      v9 = *result;
      ++v10;
      if (*result == *a2)
        return result;
    }
    return (uint64_t *)(v2 + 24 * *(unsigned int *)(v2 - 4));
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  char v11;

  v3 = result;
  *(_QWORD *)a2 = -1;
  v4 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v4 != -1)
    result = (uint64_t *)((uint64_t (*)(char *, uint64_t))off_1E34B8358[v4])(&v11, a2 + 8);
  v5 = -1;
  *(_DWORD *)(a2 + 16) = -1;
  ++*(_DWORD *)(*v3 - 16);
  v6 = *v3;
  if (*v3)
    v5 = *(_DWORD *)(v6 - 12) - 1;
  *(_DWORD *)(v6 - 12) = v5;
  v7 = *v3;
  if (*v3)
  {
    v8 = 6 * *(_DWORD *)(v7 - 12);
    v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9)
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v3, v9 >> 1, 0);
  }
  return result;
}

uint64_t WebCore::DisplayList::ResourceHeap::remove<WebCore::RenderingResource>(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t result;
  uint64_t v10;

  v10 = a2;
  if (!*a3)
    return 0;
  v5 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1, &v10);
  v6 = *a1;
  v7 = *a1 ? v6 + 24 * *(unsigned int *)(v6 - 4) : 0;
  if ((uint64_t *)v7 == v5 || *((_DWORD *)v5 + 4) != 2)
    return 0;
  if (v6)
  {
    v8 = (uint64_t *)(v6 + 24 * *(unsigned int *)(v6 - 4));
    if (v8 != v5)
    {
LABEL_8:
      if (v8 != v5)
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(a1, (uint64_t)v5);
      result = 1;
      goto LABEL_11;
    }
  }
  else if (v5)
  {
    v8 = 0;
    goto LABEL_8;
  }
  result = 0;
LABEL_11:
  --*a3;
  return result;
}

uint64_t WebCore::DisplayList::ResourceHeap::remove<WebCore::Font>(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = a2;
  if (!*a3)
    return 0;
  v5 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1, &v8);
  v6 = *a1;
  if (*a1)
    v6 += 24 * *(unsigned int *)(v6 - 4);
  if ((uint64_t *)v6 == v5 || *((_DWORD *)v5 + 4) != 3)
    return 0;
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::remove(a1, (uint64_t)v5);
  --*a3;
  return result;
}

uint64_t WebCore::DisplayList::ResourceHeap::remove<WebCore::FontCustomPlatformData>(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v8 = a2;
  if (!*a3)
    return 0;
  v5 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1, &v8);
  v6 = *a1;
  if (*a1)
    v6 += 24 * *(unsigned int *)(v6 - 4);
  if ((uint64_t *)v6 == v5 || *((_DWORD *)v5 + 4) != 4)
    return 0;
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::remove(a1, (uint64_t)v5);
  --*a3;
  return result;
}

uint64_t WebCore::ImageBuffer::populateBackendInfo<WebKit::ImageBufferShareableBitmapBackend>@<X0>(IntSize *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  const WebCore::DestinationColorSpace *v5;
  uint64_t result;

  *(_BYTE *)a2 = 0;
  WebCore::ImageBufferBackend::calculateBaseTransform();
  result = WebKit::ImageBufferShareableBitmapBackend::calculateMemoryCost(a1, v4, v5);
  *(_QWORD *)(a2 + 56) = result;
  return result;
}

void WebCore::ImageBuffer::create<WebCore::ImageBuffer>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  const void *v5;
  CFTypeRef cf;

  v4 = WTF::fastMalloc((WTF *)0x88);
  v5 = *(const void **)(a1 + 16);
  cf = v5;
  if (v5)
    CFRetain(v5);
  WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  WebCore::ImageBuffer::ImageBuffer();
  *a2 = v4;
  if (cf)
    CFRelease(cf);
}

void std::default_delete<WebKit::ImageBufferShareableBitmapBackend>::operator()[abi:sn180100](int a1, WebCore::ImageBufferCGBackend *this)
{
  uint64_t v3;
  uint64_t v4;
  bmalloc::api *v5;
  void *v6;

  if (this)
  {
    v3 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = *((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    if (v4)
      WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v4, this);
    WebCore::ImageBufferCGBackend::~ImageBufferCGBackend(this);
    bmalloc::api::isoDeallocate(v5, v6);
  }
}

unsigned int *WTF::ThreadSafeRefCounted<IPC::StreamConnectionWorkQueue,(WTF::DestructionThread)0>::deref(unsigned int *result, void *a2)
{
  unsigned int v2;
  unsigned int v3;
  WTF *v4;
  void *v5;

  do
  {
    v2 = __ldaxr(result);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, result));
  if (!v3)
  {
    atomic_store(1u, result);
    IPC::StreamConnectionWorkQueue::~StreamConnectionWorkQueue((IPC::StreamConnectionWorkQueue *)(result - 2), a2);
    return (unsigned int *)WTF::fastFree(v4, v5);
  }
  return result;
}

_QWORD *WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::Ref(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v6;

  v3 = *a2;
  v4 = *(_QWORD *)(*a2 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEABB3C](v4);
    goto LABEL_4;
  }
  if (__stxr(1u, (unsigned __int8 *)v4))
    goto LABEL_3;
LABEL_4:
  ++*(_QWORD *)(v4 + 8);
  v6 = __ldxr((unsigned __int8 *)v4);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_9;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_9:
  *a1 = v3;
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteDisplayListRecorder::drawFilteredImageBuffer(std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::FloatRect const&,WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>)::$_0,std::unique_ptr<WebCore::FilterResults>>::call@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  const WTF::MachSendRight *v3;
  WebCore::ImageBufferAllocator *v4;
  _QWORD *v5;
  uint64_t result;

  v3 = (const WTF::MachSendRight *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) + 48);
  v4 = (WebCore::ImageBufferAllocator *)WTF::fastMalloc((WTF *)0x10);
  v5 = (_QWORD *)WebCore::ImageBufferAllocator::ImageBufferAllocator(v4);
  *v5 = off_1E34B8178;
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)(v5 + 1), v3);
  WTF::fastMalloc((WTF *)0x18);
  *a2 = WebCore::FilterResults::FilterResults();
  result = (uint64_t)v4;
  if (v4)
    return (*(uint64_t (**)(WebCore::ImageBufferAllocator *))(*(_QWORD *)v4 + 8))(v4);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteDisplayListRecorder::paintFrameForMedia(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect const&)::$_0,void,WebCore::MediaPlayer &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  *a1 = off_1E34B83E0;
  WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteDisplayListRecorder::paintFrameForMedia(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect const&)::$_0,void,WebCore::MediaPlayer &>::~CallableWrapper(uint64_t *a1, void *a2)
{
  void *v3;

  *a1 = (uint64_t)off_1E34B83E0;
  WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(a1 + 1, a2);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteDisplayListRecorder::paintFrameForMedia(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect const&)::$_0,void,WebCore::MediaPlayer &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 432))(v4, a2, a1 + 16);
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::remoteGraphicsContextGLStreamWorkQueue(void)::$_0 &&>>()
{
  return IPC::StreamConnectionWorkQueue::StreamConnectionWorkQueue((uint64_t)&WebKit::remoteGraphicsContextGLStreamWorkQueue(void)::instance, (uint64_t)"RemoteGraphicsContextGL work queue", 35);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteGraphicsContextGL::initialize(WebCore::GraphicsContextGLAttributes &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34B8408;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 16);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)(v2 + 16));
      (*(void (**)(uint64_t))(*(_QWORD *)(v2 + 8) + 8))(v2 + 8);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteGraphicsContextGL::initialize(WebCore::GraphicsContextGLAttributes &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34B8408;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 16);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)(v3 + 16));
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 8) + 8))(v3 + 8);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::RemoteGraphicsContextGL::initialize(WebCore::GraphicsContextGLAttributes &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  task_t *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _QWORD v14[3];
  char v15;
  _DWORD **v16;
  WTF::StringImpl **v17;
  _QWORD *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;

  v1 = *(_QWORD *)(a1 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 40))(v1, a1 + 8);
  IPC::StreamServerConnection::open(*(IPC::StreamServerConnection **)(v1 + 48), *(IPC::StreamConnectionWorkQueue **)(v1 + 40));
  v2 = *(_QWORD *)(v1 + 56);
  if (!v2)
  {
    v20 = 0;
    v10 = (task_t *)MEMORY[0x1E0C83DA0];
    semaphore_create(*MEMORY[0x1E0C83DA0], (semaphore_t *)&v20 + 1, 0, 0);
    v19 = 0;
    semaphore_create(*v10, (semaphore_t *)&v19 + 1, 0, 0);
    LOBYTE(v14[0]) = 0;
    v15 = 0;
    v16 = (_DWORD **)&v20;
    v17 = &v19;
    v18 = v14;
    IPC::Connection::send<Messages::RemoteGraphicsContextGLProxy::WasCreated>(*(_QWORD *)(*(_QWORD *)(v1 + 48) + 32), (uint64_t)&v16, *(_QWORD *)(v1 + 64));
    std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v14, v11);
    IPC::Semaphore::destroy((IPC::Semaphore *)&v19);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v19);
    IPC::Semaphore::destroy((IPC::Semaphore *)&v20);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v20);
    return;
  }
  *(_QWORD *)(v2 + 24) = v1;
  WebCore::GraphicsContextGLANGLE::getString(*(WebCore::GraphicsContextGLANGLE **)(v1 + 56));
  WebCore::GraphicsContextGLANGLE::getString(*(WebCore::GraphicsContextGLANGLE **)(v1 + 56));
  v3 = WebCore::GraphicsContextGLCocoa::externalImageTextureBindingPoint(*(WebCore::GraphicsContextGLCocoa **)(v1 + 56));
  v4 = v20;
  if (v20)
    *(_DWORD *)v20 += 2;
  v5 = v19;
  if (v19)
    *(_DWORD *)v19 += 2;
  v6 = *(_QWORD *)(v1 + 48);
  v7 = *(_QWORD *)(v1 + 40) + 32;
  if (v4)
    *(_DWORD *)v4 += 2;
  v14[0] = v4;
  if (v5)
    *(_DWORD *)v5 += 2;
  v14[1] = v5;
  v14[2] = v3;
  v15 = 1;
  v16 = (_DWORD **)v7;
  v17 = (WTF::StringImpl **)(v6 + 136);
  v18 = v14;
  IPC::Connection::send<Messages::RemoteGraphicsContextGLProxy::WasCreated>(*(_QWORD *)(v6 + 32), (uint64_t)&v16, *(_QWORD *)(v1 + 64));
  std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v14, v8);
  IPC::StreamServerConnection::startReceivingMessages(*(_QWORD *)(v1 + 48), v1 + 8, 0x51u, *(_QWORD *)(v1 + 64));
  if (!v5)
  {
LABEL_13:
    if (!v4)
      goto LABEL_20;
LABEL_17:
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v9);
    else
      *(_DWORD *)v4 -= 2;
    goto LABEL_20;
  }
  if (*(_DWORD *)v5 != 2)
  {
    *(_DWORD *)v5 -= 2;
    goto LABEL_13;
  }
  WTF::StringImpl::destroy(v5, v9);
  if (v4)
    goto LABEL_17;
LABEL_20:
  v12 = v19;
  v19 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v9);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v20;
  v20 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v9);
    else
      *(_DWORD *)v13 -= 2;
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteGraphicsContextGL::stopListeningForIPC(WTF::Ref<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = a1[1];
  *a1 = &off_1E34B8430;
  a1[1] = 0;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 16);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)(v2 + 16));
      (*(void (**)(uint64_t))(*(_QWORD *)(v2 + 8) + 8))(v2 + 8);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteGraphicsContextGL::stopListeningForIPC(WTF::Ref<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34B8430;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 16);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)(v3 + 16));
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 8) + 8))(v3 + 8);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::RemoteGraphicsContextGL::stopListeningForIPC(WTF::Ref<WebKit::RemoteGraphicsContextGL,WTF::RawPtrTraits<WebKit::RemoteGraphicsContextGL>,WTF::DefaultRefDerefTraits<WebKit::RemoteGraphicsContextGL>> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  char v10;
  unsigned int v11;
  char v13;
  WTF *v14;
  void *v15;
  __int16 v16;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 56);
  if (v2)
  {
    *(_QWORD *)(v2 + 24) = 0;
    v3 = *(_DWORD **)(v1 + 56);
    *(_QWORD *)(v1 + 56) = 0;
    if (v3)
    {
      if (v3[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
      else
        --v3[2];
    }
    IPC::StreamServerConnection::stopReceivingMessages(*(_QWORD *)(v1 + 48), 0x51u, *(_QWORD *)(v1 + 64));
  }
  IPC::StreamServerConnection::invalidate(*(uint64_t ***)(v1 + 48));
  v4 = *(unsigned int **)(v1 + 48);
  *(_QWORD *)(v1 + 48) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      IPC::StreamServerConnection::~StreamServerConnection((IPC::StreamServerConnection *)v4);
      v4 = (unsigned int *)WTF::fastFree(v14, v15);
    }
  }
  v16 = 0;
  if ((__int16 *)(v1 + 176) != &v16)
  {
    if (*(_BYTE *)(v1 + 176))
    {
      do
        v8 = __ldaxr((unsigned int *)&WebKit::ScopedWebGLRenderingResourcesRequest::s_requests);
      while (__stlxr(v8 - 1, (unsigned int *)&WebKit::ScopedWebGLRenderingResourcesRequest::s_requests));
      if (!atomic_load((unsigned int *)&WebKit::ScopedWebGLRenderingResourcesRequest::s_requests))
        v4 = (unsigned int *)WebKit::ScopedWebGLRenderingResourcesRequest::scheduleFreeWebGLRenderingResources((WTF::RunLoop *)v4);
    }
    v10 = v16;
    LOBYTE(v16) = 0;
    *(_BYTE *)(v1 + 176) = v10;
    if (*(_BYTE *)(v1 + 177))
    {
      do
        v11 = __ldaxr((unsigned int *)&WebKit::ScopedRenderingResourcesRequest::s_requests);
      while (__stlxr(v11 - 1, (unsigned int *)&WebKit::ScopedRenderingResourcesRequest::s_requests));
      if (!atomic_load((unsigned int *)&WebKit::ScopedRenderingResourcesRequest::s_requests))
        WebKit::ScopedRenderingResourcesRequest::scheduleFreeRenderingResources((WTF::RunLoop *)v4);
    }
    v13 = HIBYTE(v16);
    HIBYTE(v16) = 0;
    *(_BYTE *)(v1 + 177) = v13;
  }
  WebKit::ScopedWebGLRenderingResourcesRequest::~ScopedWebGLRenderingResourcesRequest((WebKit::ScopedWebGLRenderingResourcesRequest *)&v16);
}

char *IPC::Connection::send<Messages::RemoteGraphicsContextGLProxy::WasCreated>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  _BYTE *v14;
  void *v15;
  char *result;
  WTF *v17;
  void *v18;
  unint64_t v19;
  size_t v20;
  void *v21;
  IPC::Encoder *v22;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 877;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v22 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<IPC::Semaphore,void>::encode(v6, *(IPC::Semaphore **)a2);
  IPC::ArgumentCoder<IPC::Semaphore,void>::encode(v6, *(IPC::Semaphore **)(a2 + 8));
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(unsigned __int8 *)(v7 + 24);
  v9 = *(_QWORD *)(v6 + 544);
  v10 = v9 + 1;
  v11 = *(_QWORD *)(v6 + 552);
  if (v11 < v9 + 1)
  {
    v19 = (2 * v11 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v20 = v19;
      v19 *= 2;
    }
    while (v20 < v10);
    result = (char *)mmap(0, v20, 3, 4098, -1, 0);
    if (result == (char *)-1)
      goto LABEL_17;
    v12 = result;
    memcpy(result, *(const void **)(v6 + 528), *(_QWORD *)(v6 + 544));
    v21 = *(void **)(v6 + 528);
    if (v21 != (void *)(v6 + 16))
      munmap(v21, *(_QWORD *)(v6 + 552));
    *(_QWORD *)(v6 + 528) = v12;
    *(_QWORD *)(v6 + 552) = v20;
    v13 = *(_QWORD *)(v6 + 544);
  }
  else
  {
    v12 = *(char **)(v6 + 528);
    v13 = *(_QWORD *)(v6 + 544);
  }
  bzero(&v12[v13], v9 - v13);
  *(_QWORD *)(v6 + 544) = v10;
  v14 = (_BYTE *)(*(_QWORD *)(v6 + 528) + v9);
  *(_QWORD *)(v6 + 536) = v14 + 1;
  if (v8)
  {
    *v14 = 1;
    if (*(_BYTE *)(v7 + 24))
    {
      IPC::ArgumentCoder<WebKit::RemoteGraphicsContextGLInitializationState,void>::encode((IPC::Encoder *)v6, (uint64_t *)v7);
      goto LABEL_7;
    }
    result = (char *)std::__throw_bad_optional_access[abi:sn180100]();
LABEL_17:
    __break(0xC471u);
    return result;
  }
  *v14 = 0;
LABEL_7:
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v22, 0, 0);
  result = (char *)v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v15);
    return (char *)WTF::fastFree(v17, v18);
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::RemoteGraphicsContextGLProxy::WasLost>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  IPC::Encoder *v16;

  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 878;
  *(_QWORD *)(v9 + 8) = a3;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v16 = (IPC::Encoder *)v9;
  v11 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v16, a4, a5);
  v12 = v16;
  v16 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v10);
    WTF::fastFree(v13, v14);
  }
  return v11;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteGraphicsContextGL::drawSurfaceBufferToImageBuffer(WebCore::GraphicsContextGLSurfaceBuffer,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::NativeImage &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  int v8;
  char v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v3 = *(_QWORD *)(a1 + 8);
  v11 = **(_QWORD **)(a1 + 16);
  v10 = 0;
  v9 = 0;
  v4 = *(_QWORD *)(v3 + 72);
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  *v5 = off_1E34B8480;
  v5[1] = v3;
  v5[2] = &v11;
  v5[3] = a2;
  v5[4] = (char *)&v10 + 1;
  v5[5] = &v9;
  v5[6] = &v10;
  v12 = (uint64_t)v5;
  IPC::StreamConnectionWorkQueue::dispatch(*(_QWORD *)(v4 + 32), &v12);
  result = v12;
  v12 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (__ldaxr((unsigned __int8 *)&v10 + 1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&v10 + 1))
  {
    goto LABEL_7;
  }
  result = MEMORY[0x19AEABB3C]((char *)&v10 + 1);
LABEL_7:
  while (!v9)
  {
    v12 = 0x7FF0000000000000;
    v13 = 0;
    result = WTF::Condition::waitUntilUnchecked<WTF::Lock>((uint64_t)&v10, (unsigned __int8 *)&v10 + 1, (WTF::TimeWithDynamicClockType *)&v12);
  }
  v8 = __ldxr((unsigned __int8 *)&v10 + 1);
  if (v8 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)((char *)&v10 + 1));
  }
  if (__stlxr(0, (unsigned __int8 *)&v10 + 1))
    return WTF::Lock::unlockSlow((WTF::Lock *)((char *)&v10 + 1));
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteGraphicsContextGL::paintNativeImageToImageBuffer(WebCore::NativeImage &,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::call(uint64_t a1)
{
  WebCore::ImageBuffer *v2;
  void *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t result;
  int v14;
  uint64_t v15;
  WebCore::ImageBuffer *v16;

  WebKit::RemoteRenderingBackend::imageBuffer(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72), **(_QWORD **)(a1 + 16), (uint64_t *)&v16);
  v2 = v16;
  if (!v16)
    goto LABEL_18;
  WebCore::ImageBuffer::backendSize(v16);
  (*(void (**)(WebCore::ImageBuffer *))(*(_QWORD *)v2 + 16))(v2);
  WebCore::GraphicsContextGL::paintToCanvas();
  (*(void (**)(WebCore::ImageBuffer *))(*(_QWORD *)v2 + 24))(v2);
  v16 = 0;
  v4 = *((_QWORD *)v2 + 1);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEABB3C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v15 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v15 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
    goto LABEL_13;
  if (v7)
    goto LABEL_18;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, v3);
LABEL_18:
  v11 = *(unsigned __int8 **)(a1 + 32);
  if (__ldaxr(v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, v11))
  {
    goto LABEL_22;
  }
  MEMORY[0x19AEABB3C](v11);
LABEL_22:
  **(_BYTE **)(a1 + 40) = 1;
  result = WTF::Condition::notifyOne(*(WTF::Condition **)(a1 + 48));
  v14 = __ldxr(v11);
  if (v14 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v11);
  }
  if (__stlxr(0, v11))
    return WTF::Lock::unlockSlow((WTF::Lock *)v11);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteGraphicsContextGL::simulateEventForTesting(WebCore::GraphicsContextGLSimulatedEventForTesting)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)a1[1];
  *a1 = &off_1E34B84A8;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteGraphicsContextGL::simulateEventForTesting(WebCore::GraphicsContextGLSimulatedEventForTesting)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34B84A8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::RemoteGraphicsContextGL::simulateEventForTesting(WebCore::GraphicsContextGLSimulatedEventForTesting)::$_0,void>::call(_QWORD *a1)
{
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (unsigned __int8 *)a1[1];
  if (v2)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v2, a1[2], &v4);
    if (v4)
    {
      WebKit::GPUConnectionToWebProcess::releaseGraphicsContextGL(v4, a1[3]);
      v3 = v4;
      v4 = 0;
      if (v3)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 16));
    }
  }
}

uint64_t WTF::VectorBuffer<WebCore::IntRect,1ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = result;
  if (a2 < 2)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 1;
    return 1;
  }
  v3 = a2;
  if (!(a2 >> 28))
  {
    v4 = WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v4;
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebCore::IntRect,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::IntRect&>(uint64_t a1, unint64_t a2)
{
  *(_OWORD *)(*(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12)) = *(_OWORD *)WTF::Vector<WebCore::IntRect,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::IntRect,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::IntRect,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::IntRect,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::IntRect,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  WTF *v8;
  __int128 v9;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  v3 = result;
  v4 = *(WTF **)result;
  v5 = *(unsigned int *)(result + 12);
  if (a2 < 2)
  {
    v6 = (_OWORD *)(result + 16);
    *(_QWORD *)v3 = v3 + 16;
    *(_DWORD *)(v3 + 8) = 1;
    if (!(_DWORD)v5)
      goto LABEL_9;
    goto LABEL_7;
  }
  if (!(a2 >> 28))
  {
    v6 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    if (!(_DWORD)v5)
      goto LABEL_9;
LABEL_7:
    v7 = 16 * v5;
    v8 = v4;
    do
    {
      v9 = *(_OWORD *)v8;
      v8 = (WTF *)((char *)v8 + 16);
      *v6++ = v9;
      v7 -= 16;
    }
    while (v7);
LABEL_9:
    if ((WTF *)(v3 + 16) != v4 && v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, (void *)a2);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebCore::FloatRect,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FloatRect&>(uint64_t a1, unint64_t a2)
{
  *(_OWORD *)(*(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12)) = *(_OWORD *)WTF::Vector<WebCore::FloatRect,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::FloatRect,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::FloatRect,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::FloatRect,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::FloatRect,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  WTF *v8;
  __int128 v9;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  v3 = result;
  v4 = *(WTF **)result;
  v5 = *(unsigned int *)(result + 12);
  if (a2 < 6)
  {
    v6 = (_OWORD *)(result + 16);
    *(_QWORD *)v3 = v3 + 16;
    *(_DWORD *)(v3 + 8) = 5;
    if (!(_DWORD)v5)
      goto LABEL_9;
    goto LABEL_7;
  }
  if (!(a2 >> 28))
  {
    v6 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    if (!(_DWORD)v5)
      goto LABEL_9;
LABEL_7:
    v7 = 16 * v5;
    v8 = v4;
    do
    {
      v9 = *(_OWORD *)v8;
      v8 = (WTF *)((char *)v8 + 16);
      *v6++ = v9;
      v7 -= 16;
    }
    while (v7);
LABEL_9:
    if ((WTF *)(v3 + 16) != v4 && v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, (void *)a2);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

WebKit::ShapeDetection::ObjectHeap *WTF::RefCounted<WebKit::ShapeDetection::ObjectHeap>::deref(WebKit::ShapeDetection::ObjectHeap *result)
{
  WTF *v1;
  void *v2;

  if (*(_DWORD *)result == 1)
  {
    WebKit::ShapeDetection::ObjectHeap::~ObjectHeap(result);
    return (WebKit::ShapeDetection::ObjectHeap *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::RemoteRenderingBackend::startListeningForIPC(void)::$_0,void>::call(uint64_t a1)
{
  return WebKit::RemoteRenderingBackend::workQueueInitialize(*(WebKit::RemoteRenderingBackend **)(a1 + 8));
}

unsigned __int8 ***WTF::Detail::CallableWrapper<WebKit::RemoteRenderingBackend::stopListeningForIPC(void)::$_0,void>::call(uint64_t a1, void *a2)
{
  return WebKit::RemoteRenderingBackend::workQueueUninitialize(*(WebKit::RemoteRenderingBackend **)(a1 + 8), a2);
}

void WebCore::ImageBuffer::create<WebCore::ImageBuffer,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> &>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  CFTypeRef cf;

  v4 = WTF::fastMalloc((WTF *)0x88);
  v5 = *(const void **)(a2 + 16);
  cf = v5;
  if (v5)
    CFRetain(v5);
  WebCore::ImageBuffer::ImageBuffer();
  *a1 = v4;
  if (cf)
    CFRelease(cf);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int **v16;
  unsigned int *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    v15 = v7;
    do
    {
      v16 = (unsigned int **)(v6 + 16 * v13);
      v17 = *v16;
      if (*v16)
      {
        if (v17 != (unsigned int *)-1)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = ((unint64_t)v17 + ~((_QWORD)v17 << 32)) ^ (((unint64_t)v17 + ~((_QWORD)v17 << 32)) >> 22);
          v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          v23 = v19 & ((v22 >> 31) ^ v22);
          v24 = 1;
          do
          {
            v25 = v23;
            v26 = *(_QWORD *)(v18 + 16 * v23);
            v23 = (v23 + v24++) & v19;
          }
          while (v26);
          v27 = v18 + 16 * v25;
          IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>::~ScopedActiveMessageReceiveQueue((unsigned int **)(v27 + 8));
          *(_QWORD *)v27 = *v16;
          v28 = v6 + 16 * v13;
          v29 = *(_QWORD *)(v28 + 8);
          v28 += 8;
          *(_QWORD *)(v27 + 8) = v29;
          *(_QWORD *)v28 = 0;
          IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>::~ScopedActiveMessageReceiveQueue((unsigned int **)v28);
          if (v16 == (unsigned int **)a3)
            v14 = v27;
        }
      }
      else
      {
        IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>::~ScopedActiveMessageReceiveQueue(v16 + 1);
      }
      ++v13;
    }
    while (v13 != v15);
    goto LABEL_18;
  }
  v14 = 0;
  result = 0;
  if (v6)
  {
LABEL_18:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v14;
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::take@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;

  v3 = *result;
  if (*result)
    v3 += 16 * *(unsigned int *)(v3 - 4);
  if (v3 == a2)
  {
    *a3 = 0;
    v5 = 0;
    return (uint64_t *)IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>::~ScopedActiveMessageReceiveQueue(&v5);
  }
  *a3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (*result)
  {
    v4 = *result + 16 * *(unsigned int *)(*result - 4);
    if (v4 == a2)
      return result;
  }
  else
  {
    if (!a2)
      return result;
    v4 = 0;
  }
  if (v4 != a2)
    return (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(result, a2);
  return result;
}

unsigned int **WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, uint64_t a2)
{
  unsigned int **result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)a2 = -1;
  result = IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>::~ScopedActiveMessageReceiveQueue((unsigned int **)(a2 + 8));
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (unsigned int **)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int **v16;
  unsigned int *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    v15 = v7;
    do
    {
      v16 = (unsigned int **)(v6 + 16 * v13);
      v17 = *v16;
      if (*v16)
      {
        if (v17 != (unsigned int *)-1)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = ((unint64_t)v17 + ~((_QWORD)v17 << 32)) ^ (((unint64_t)v17 + ~((_QWORD)v17 << 32)) >> 22);
          v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          v23 = v19 & ((v22 >> 31) ^ v22);
          v24 = 1;
          do
          {
            v25 = v23;
            v26 = *(_QWORD *)(v18 + 16 * v23);
            v23 = (v23 + v24++) & v19;
          }
          while (v26);
          v27 = v18 + 16 * v25;
          IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>::~ScopedActiveMessageReceiveQueue((unsigned int **)(v27 + 8));
          *(_QWORD *)v27 = *v16;
          v28 = v6 + 16 * v13;
          v29 = *(_QWORD *)(v28 + 8);
          v28 += 8;
          *(_QWORD *)(v27 + 8) = v29;
          *(_QWORD *)v28 = 0;
          IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>::~ScopedActiveMessageReceiveQueue((unsigned int **)v28);
          if (v16 == (unsigned int **)a3)
            v14 = v27;
        }
      }
      else
      {
        IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>::~ScopedActiveMessageReceiveQueue(v16 + 1);
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::HashTableTraits>::take@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;

  v3 = *result;
  if (*result)
    v3 += 16 * *(unsigned int *)(v3 - 4);
  if (v3 == a2)
  {
    *a3 = 0;
    v5 = 0;
    return (uint64_t *)IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>::~ScopedActiveMessageReceiveQueue(&v5);
  }
  *a3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (*result)
  {
    v4 = *result + 16 * *(unsigned int *)(*result - 4);
    if (v4 == a2)
      return result;
  }
  else
  {
    if (!a2)
      return result;
    v4 = 0;
  }
  if (v4 != a2)
    return (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(result, a2);
  return result;
}

unsigned int **WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, uint64_t a2)
{
  unsigned int **result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)a2 = -1;
  result = IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>::~ScopedActiveMessageReceiveQueue((unsigned int **)(a2 + 8));
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (unsigned int **)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

unsigned int **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>::~ScopedActiveMessageReceiveQueue(unsigned int **a1)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>(a1);
    v3 = *a1;
    *a1 = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v3 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int **v16;
  unsigned int *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    v15 = v7;
    do
    {
      v16 = (unsigned int **)(v6 + 16 * v13);
      v17 = *v16;
      if (*v16)
      {
        if (v17 != (unsigned int *)-1)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = ((unint64_t)v17 + ~((_QWORD)v17 << 32)) ^ (((unint64_t)v17 + ~((_QWORD)v17 << 32)) >> 22);
          v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          v23 = v19 & ((v22 >> 31) ^ v22);
          v24 = 1;
          do
          {
            v25 = v23;
            v26 = *(_QWORD *)(v18 + 16 * v23);
            v23 = (v23 + v24++) & v19;
          }
          while (v26);
          v27 = v18 + 16 * v25;
          IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>::~ScopedActiveMessageReceiveQueue((unsigned int **)(v27 + 8));
          *(_QWORD *)v27 = *v16;
          v28 = v6 + 16 * v13;
          v29 = *(_QWORD *)(v28 + 8);
          v28 += 8;
          *(_QWORD *)(v27 + 8) = v29;
          *(_QWORD *)v28 = 0;
          IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>::~ScopedActiveMessageReceiveQueue((unsigned int **)v28);
          if (v16 == (unsigned int **)a3)
            v14 = v27;
        }
      }
      else
      {
        IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>::~ScopedActiveMessageReceiveQueue(v16 + 1);
      }
      ++v13;
    }
    while (v13 != v15);
    goto LABEL_18;
  }
  v14 = 0;
  result = 0;
  if (v6)
  {
LABEL_18:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v14;
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::take@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;

  v3 = *result;
  if (*result)
    v3 += 16 * *(unsigned int *)(v3 - 4);
  if (v3 == a2)
  {
    *a3 = 0;
    v5 = 0;
    return (uint64_t *)IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>::~ScopedActiveMessageReceiveQueue(&v5);
  }
  *a3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (*result)
  {
    v4 = *result + 16 * *(unsigned int *)(*result - 4);
    if (v4 == a2)
      return result;
  }
  else
  {
    if (!a2)
      return result;
    v4 = 0;
  }
  if (v4 != a2)
    return (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(result, a2);
  return result;
}

unsigned int **WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, uint64_t a2)
{
  unsigned int **result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)a2 = -1;
  result = IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>::~ScopedActiveMessageReceiveQueue((unsigned int **)(a2 + 8));
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (unsigned int **)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int *v10;

  if (!a1)
  {
LABEL_9:
    v10 = 0;
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>::~ScopedActiveMessageReceiveQueue(&v10);
    return 0;
  }
  v2 = *(_DWORD *)(a1 - 8);
  v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  v6 = v2 & ((v5 >> 31) ^ v5);
  v7 = *(_QWORD *)(a1 + 16 * v6);
  if (v7 != a2)
  {
    v9 = 1;
    while (v7)
    {
      v6 = ((_DWORD)v6 + v9) & v2;
      v7 = *(_QWORD *)(a1 + 16 * v6);
      ++v9;
      if (v7 == a2)
        return *(_QWORD *)(a1 + 16 * v6 + 8);
    }
    goto LABEL_9;
  }
  return *(_QWORD *)(a1 + 16 * v6 + 8);
}

char *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t **v2;
  uint64_t v4;
  char *result;

  v2 = a2;
  v4 = **a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::VectorArgumentCoder<false,std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t **)v2[1]);
  LOBYTE(v2) = *((_BYTE *)v2 + 16);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

char *IPC::VectorArgumentCoder<false,std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t v4;
  char *result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;

  v4 = *((unsigned int *)a2 + 3);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  v6 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v6)
  {
    v7 = *a2;
    v8 = &v7[2 * v6];
    do
    {
      v9 = *v7;
      *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v9;
      LOBYTE(v9) = *((_BYTE *)v7 + 8);
      result = IPC::Encoder::grow(a1, 1uLL, 1);
      *result = v9;
      v7 += 2;
    }
    while (v7 != v8);
  }
  return result;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  unsigned int *v11;

  v2 = *a1;
  if (!*a1)
  {
LABEL_9:
    v11 = 0;
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>::~ScopedActiveMessageReceiveQueue(&v11);
    return 0;
  }
  v3 = *(_DWORD *)(v2 - 8);
  v4 = *a2 + ~(*a2 << 32);
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ ((_DWORD)v6 + ~((_DWORD)v6 << 27)));
  v8 = *(_QWORD *)(v2 + 16 * v7);
  if (v8 != *a2)
  {
    v10 = 1;
    while (v8)
    {
      v7 = ((_DWORD)v7 + v10) & v3;
      v8 = *(_QWORD *)(v2 + 16 * v7);
      ++v10;
      if (v8 == *a2)
        return *(_QWORD *)(v2 + 16 * v7 + 8);
    }
    goto LABEL_9;
  }
  return *(_QWORD *)(v2 + 16 * v7 + 8);
}

unsigned int *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBuffer,WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteImageBuffer,WTF::RawPtrTraits<WebKit::RemoteImageBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBuffer>>>(unsigned int **a1)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  WebKit::RemoteImageBuffer::stopListeningForIPC(*a1);
  result = *a1;
  *a1 = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void WebKit::cancelledError(WebKit *this@<X0>, uint64_t a2@<X8>)
{
  WebKit *v4;
  void *v5;
  const void *v6;
  const void *v7;

  v4 = (WebKit *)*MEMORY[0x1E0CB32E8];
  WebCore::ResourceRequestBase::url(this);
  v5 = (void *)WTF::URL::operator NSURL *();
  WebKit::createNSError(v4, (NSString *)0xFFFFFC19, v5, &v7);
  v6 = v7;
  MEMORY[0x19AEADCC0](a2, v7);
  if (v6)
    CFRelease(v6);
}

void sub_197046568(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::createNSError@<X0>(WebKit *this@<X0>, NSString *a2@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  int v5;
  uint64_t v8;
  uint64_t result;

  v5 = (int)a2;
  v8 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", a3, CFSTR("NSErrorFailingURLKey"), objc_msgSend(a3, "absoluteString"), CFSTR("NSErrorFailingURLStringKey"), 0);
  result = objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", this, v5, v8);
  *a4 = result;
  return result;
}

void WebKit::fileDoesNotExistError(WebKit *this@<X0>, uint64_t a2@<X8>)
{
  WebKit *v4;
  void *v5;
  const void *v6;
  const void *v7;

  v4 = (WebKit *)*MEMORY[0x1E0CB32E8];
  WebCore::ResourceResponseBase::url(this);
  v5 = (void *)WTF::URL::operator NSURL *();
  WebKit::createNSError(v4, (NSString *)0xFFFFFBB4, v5, &v7);
  v6 = v7;
  MEMORY[0x19AEADCC0](a2, v7);
  if (v6)
    CFRelease(v6);
}

void sub_197046690(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::fallbackIconForFile(WebKit *this@<X0>, _QWORD *a2@<X8>)
{
  void *v4;

  v4 = (void *)objc_msgSend(MEMORY[0x1E0CEA538], "interactionControllerWithURL:", this);
  if (objc_msgSend((id)objc_msgSend(v4, "icons"), "count"))
    WebKit::thumbnailSizedImageForImage((WebKit *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v4, "icons"), "objectAtIndexedSubscript:", 0), "CGImage"), a2);
  else
    *a2 = 0;
}

void WebKit::thumbnailSizedImageForImage(WebKit *this@<X0>, _QWORD *a2@<X8>)
{
  double Width;
  size_t Height;
  double v7;
  CGImage *v8;
  double v9;
  BOOL v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  CGColorSpaceRef ColorSpace;
  CGColorSpace *v17;
  CGColorSpace *v18;
  CGContext *v19;
  CGImageRef Image;
  id v21;
  CGImageRef v22;
  CGRect v23;

  if (!this)
    goto LABEL_18;
  Width = (double)CGImageGetWidth(this);
  Height = CGImageGetHeight(this);
  v7 = (double)Height;
  if (Width == (double)Height)
  {
    CFRetain(this);
    v8 = this;
    goto LABEL_14;
  }
  v9 = v7 >= Width ? Width : (double)Height;
  v10 = Width < v7;
  v11 = round((Width - v9) * 0.5);
  v12 = round((v7 - v9) * 0.5);
  v13 = Width < v7 ? 0.0 : v11;
  v14 = v10 ? v12 : 0.0;
  v15 = v9;
  v8 = CGImageCreateWithImageInRect(this, *(CGRect *)(&v9 - 2));
  if (!v8)
  {
LABEL_18:
    *a2 = 0;
    return;
  }
LABEL_14:
  ColorSpace = CGImageGetColorSpace(this);
  v17 = ColorSpace;
  if (ColorSpace)
    CFRetain(ColorSpace);
  if (CGColorSpaceSupportsOutput(v17))
  {
    v18 = v17;
  }
  else
  {
    v18 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
    if (v17)
      CFRelease(v17);
  }
  v19 = CGBitmapContextCreate(0, 0x64uLL, 0x64uLL, 8uLL, 0x190uLL, v18, 1u);
  CGContextSetInterpolationQuality(v19, kCGInterpolationHigh);
  v23.size.width = 100.0;
  v23.origin.x = 0.0;
  v23.origin.y = 0.0;
  v23.size.height = 100.0;
  CGContextDrawImage(v19, v23, v8);
  Image = CGBitmapContextCreateImage(v19);
  v21 = objc_alloc(MEMORY[0x1E0CEA638]);
  if (Image)
    v22 = Image;
  else
    v22 = v8;
  *a2 = objc_msgSend(v21, "initWithCGImage:", v22);
  if (!Image)
  {
    if (!v19)
      goto LABEL_26;
LABEL_29:
    CFRelease(v19);
    if (!v18)
      goto LABEL_27;
LABEL_30:
    CFRelease(v18);
    goto LABEL_27;
  }
  CFRelease(Image);
  if (v19)
    goto LABEL_29;
LABEL_26:
  if (v18)
    goto LABEL_30;
LABEL_27:
  CFRelease(v8);
}

void sub_1970468D4(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::iconForImageFile(WebKit *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  const __CFDictionary *v6;
  CGImageSource *v7;
  WebKit *ThumbnailAtIndex;
  WebKit *v9;
  _QWORD v10[4];
  _QWORD v11[5];

  v11[4] = *MEMORY[0x1E0C80C00];
  v5 = *MEMORY[0x1E0CBD2A0];
  v10[0] = *MEMORY[0x1E0CBD180];
  v10[1] = v5;
  v11[0] = MEMORY[0x1E0C9AAB0];
  v11[1] = &unk_1E356FEF8;
  v10[2] = *MEMORY[0x1E0CBD190];
  v10[3] = CFSTR("kCGImageSourceEnableRestrictedDecoding");
  v11[2] = MEMORY[0x1E0C9AAB0];
  v11[3] = MEMORY[0x1E0C9AAB0];
  v6 = (const __CFDictionary *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v11, v10, 4);
  v7 = CGImageSourceCreateWithURL(this, 0);
  ThumbnailAtIndex = CGImageSourceCreateThumbnailAtIndex(v7, 0, v6);
  v9 = ThumbnailAtIndex;
  if (ThumbnailAtIndex)
  {
    WebKit::thumbnailSizedImageForImage(ThumbnailAtIndex, a2);
    CFRelease(v9);
  }
  else
  {
    WebKit::fallbackIconForFile(this, a2);
  }
  if (v7)
    CFRelease(v7);
}

void sub_197046A54(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::iconForVideoFile(WebKit *this@<X0>, NSURL *a2@<X1>, _QWORD *a3@<X8>)
{
  const void *v5;
  void *v6;
  WebKit *v7;
  WebKit *v8;
  uint64_t v9;
  uint64_t v10;

  v5 = (const void *)objc_msgSend(objc_alloc((Class)((uint64_t (*)(WebKit *, NSURL *))*MEMORY[0x1E0DCDF58])(this, a2)), "initWithURL:options:", this, 0);
  v6 = (void *)objc_msgSend(objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E0DCE0B0])()), "initWithAsset:", v5);
  v10 = 0;
  PAL::get_CoreMedia_kCMTimeZero((PAL *)objc_msgSend(v6, "setAppliesPreferredTrackTransform:", 1));
  v7 = (WebKit *)objc_msgSend(v6, "copyCGImageAtTime:actualTime:error:", &v9, 0, &v10);
  v8 = v7;
  if (v7)
  {
    WebKit::thumbnailSizedImageForImage(v7, a3);
    CFRelease(v8);
  }
  else
  {
    WebKit::fallbackIconForFile(this, a3);
  }
  if (v6)
    CFRelease(v6);
  if (v5)
    CFRelease(v5);
}

void sub_197046B70(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::iconForFiles(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  const __CFString *v4;
  WebKit *v5;
  WebKit *v6;
  __CFString *v7;
  const __CFString *PreferredIdentifierForTag;
  NSURL *v9;

  if (*(_DWORD *)(a1 + 12)
    && ((v3 = (void *)MEMORY[0x1E0C99E98], !**(_QWORD **)a1)
      ? (v4 = &stru_1E351F1B8)
      : (v4 = (const __CFString *)WTF::StringImpl::operator NSString *()),
        (v5 = (WebKit *)objc_msgSend(v3, "fileURLWithPath:isDirectory:", v4, 0)) != 0
     && (v6 = v5, v7 = (__CFString *)-[WebKit pathExtension](v5, "pathExtension"), -[__CFString length](v7, "length"))))
  {
    PreferredIdentifierForTag = UTTypeCreatePreferredIdentifierForTag((CFStringRef)*MEMORY[0x1E0CA5A88], v7, 0);
    if (UTTypeConformsTo(PreferredIdentifierForTag, (CFStringRef)*MEMORY[0x1E0CA5B90]))
    {
      WebKit::iconForImageFile(v6, a2);
    }
    else if (UTTypeConformsTo(PreferredIdentifierForTag, (CFStringRef)*MEMORY[0x1E0CA5BF8]))
    {
      WebKit::iconForVideoFile(v6, v9, a2);
    }
    else
    {
      WebKit::fallbackIconForFile(v6, a2);
    }
    if (PreferredIdentifierForTag)
      CFRelease(PreferredIdentifierForTag);
  }
  else
  {
    *a2 = 0;
  }
}

void sub_197046CBC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::startListeningForMachServiceConnections(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  xpc_connection_t mach_service;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD handler[10];

  {
    v11 = a3;
    v12 = a2;
    v9 = a4;
    v10 = a5;
    v8 = a6;
    v7 = a1;
    mach_service = xpc_connection_create_mach_service(a1, MEMORY[0x1E0C80D38], 1uLL);
    WebKit::startListeningForMachServiceConnections(char const*,WTF::ASCIILiteral,void (*)(NSObject  {objcproto13OS_xpc_object}*),void (*)(NSObject  {objcproto13OS_xpc_object}*),void (*)(NSObject  {objcproto13OS_xpc_object}*))::listener = (uint64_t)mach_service;
    if (mach_service)
      CFRetain(mach_service);
    a6 = v8;
    a4 = v9;
    a5 = v10;
    a3 = v11;
    a1 = v7;
    a2 = v12;
  }
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = ___ZN6WebKit39startListeningForMachServiceConnectionsEPKcN3WTF12ASCIILiteralEPFvPU24objcproto13OS_xpc_object8NSObjectES8_S8__block_invoke;
  handler[3] = &__block_descriptor_80_e33_v16__0__NSObject_OS_xpc_object__8l;
  handler[4] = a2;
  handler[5] = a3;
  handler[6] = a1;
  handler[7] = a5;
  handler[8] = a6;
  handler[9] = a4;
  xpc_connection_set_event_handler((xpc_connection_t)WebKit::startListeningForMachServiceConnections(char const*,WTF::ASCIILiteral,void (*)(NSObject  {objcproto13OS_xpc_object}*),void (*)(NSObject  {objcproto13OS_xpc_object}*),void (*)(NSObject  {objcproto13OS_xpc_object}*))::listener, handler);
  xpc_connection_activate((xpc_connection_t)WebKit::startListeningForMachServiceConnections(char const*,WTF::ASCIILiteral,void (*)(NSObject  {objcproto13OS_xpc_object}*),void (*)(NSObject  {objcproto13OS_xpc_object}*),void (*)(NSObject  {objcproto13OS_xpc_object}*))::listener);
}

void ___ZN6WebKit39startListeningForMachServiceConnectionsEPKcN3WTF12ASCIILiteralEPFvPU24objcproto13OS_xpc_object8NSObjectES8_S8__block_invoke(uint64_t a1, _xpc_connection_s *a2)
{
  _QWORD handler[5];
  __int128 v5;
  uint64_t v6;

  if (object_getClass(a2) == (Class)MEMORY[0x1E0C812E0])
  {
    if (*(_QWORD *)(a1 + 40) && (WTF::hasEntitlement() & 1) == 0)
    {
      NSLog(CFSTR("Connection attempted without required entitlement"));
      xpc_connection_cancel(a2);
    }
    else
    {
      handler[0] = MEMORY[0x1E0C809B0];
      handler[1] = 3221225472;
      handler[2] = ___ZN6WebKit39startListeningForMachServiceConnectionsEPKcN3WTF12ASCIILiteralEPFvPU24objcproto13OS_xpc_object8NSObjectES8_S8__block_invoke_2;
      handler[3] = &unk_1E34B8518;
      handler[4] = a2;
      v5 = *(_OWORD *)(a1 + 48);
      v6 = *(_QWORD *)(a1 + 64);
      xpc_connection_set_event_handler(a2, handler);
      xpc_connection_set_target_queue(a2, MEMORY[0x1E0C80D38]);
      xpc_connection_activate(a2);
      NSLog(CFSTR("Adding peer connection %p"), a2);
      (*(void (**)(_xpc_connection_s *))(a1 + 72))(a2);
    }
  }
}

uint64_t ___ZN6WebKit39startListeningForMachServiceConnectionsEPKcN3WTF12ASCIILiteralEPFvPU24objcproto13OS_xpc_object8NSObjectES8_S8__block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  if (a2 == MEMORY[0x1E0C81260])
  {
    v4 = xpc_connection_copy_invalidation_reason();
    NSLog(CFSTR("Failed to start listening for connections to mach service %s, reason: %s"), *(_QWORD *)(a1 + 40), v4);
    NSLog(CFSTR("Removing peer connection %p"), *(_QWORD *)(a1 + 32));
    result = (*(uint64_t (**)(_QWORD))(a1 + 48))(*(_QWORD *)(a1 + 32));
    if (v4)
      JUMPOUT(0x19AEB9354);
  }
  else if (a2 == MEMORY[0x1E0C81258])
  {
    NSLog(CFSTR("Removing peer connection %p"), *(_QWORD *)(a1 + 32));
    return (*(uint64_t (**)(_QWORD))(a1 + 48))(*(_QWORD *)(a1 + 32));
  }
  else
  {
    return (*(uint64_t (**)(uint64_t))(a1 + 56))(a2);
  }
  return result;
}

void sub_197046F88(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    MEMORY[0x19AEB9354](v1, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

void WebKit::vectorToXPCData(uint64_t a1@<X0>, void *a2@<X1>, xpc_object_t *a3@<X8>)
{
  size_t v4;
  const void *v5;
  NSObject *v6;
  _QWORD destructor[5];

  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  WTF::fastFree(0, a2);
  destructor[0] = MEMORY[0x1E0C809B0];
  destructor[1] = 3221225472;
  destructor[2] = ___ZN6WebKit15vectorToXPCDataEON3WTF6VectorIhLm0ENS0_15CrashOnOverflowELm16ENS0_10FastMallocEEE_block_invoke;
  destructor[3] = &__block_descriptor_40_e5_v8__0l;
  destructor[4] = v5;
  v6 = dispatch_data_create(v5, v4, MEMORY[0x1E0C80D38], destructor);
  *a3 = xpc_data_create_with_dispatch_data(v6);
  if (v6)
    CFRelease(v6);
}

void sub_197047050(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN6WebKit15vectorToXPCDataEON3WTF6VectorIhLm0ENS0_15CrashOnOverflowELm16ENS0_10FastMallocEEE_block_invoke(uint64_t a1, void *a2)
{
  return WTF::fastFree(*(WTF **)(a1 + 32), a2);
}

IPC::Encoder *WebKit::encoderToXPCData@<X0>(IPC::Encoder **a1@<X0>, xpc_object_t *a2@<X8>)
{
  IPC::Encoder *v3;
  const void *v4;
  size_t v5;
  NSObject *v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  _QWORD v11[5];
  _QWORD v12[6];
  IPC::Encoder *v13;

  v12[0] = 0;
  v12[1] = v12;
  v12[2] = 0x3812000000;
  v12[3] = __Block_byref_object_copy__3;
  v12[4] = __Block_byref_object_dispose__3;
  v3 = *a1;
  *a1 = 0;
  v12[5] = 0;
  v13 = v3;
  v4 = (const void *)*((_QWORD *)v3 + 66);
  v5 = *((_QWORD *)v3 + 68);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = ___ZN6WebKit16encoderToXPCDataEON3WTF9UniqueRefIN3IPC7EncoderEEE_block_invoke;
  v11[3] = &unk_1E34B8560;
  v11[4] = v12;
  v6 = dispatch_data_create(v4, v5, MEMORY[0x1E0C80D38], v11);
  *a2 = xpc_data_create_with_dispatch_data(v6);
  if (v6)
    CFRelease(v6);
  _Block_object_dispose(v12, 8);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

void sub_197047148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, IPC::Encoder *a20)
{
  const void *v20;
  void *v22;
  IPC::Encoder *v23;
  WTF *v24;
  void *v25;

  if (v20)
    CFRelease(v20);
  _Block_object_dispose(&a14, 8);
  v23 = a20;
  a20 = 0;
  if (v23)
  {
    IPC::Encoder::~Encoder(v23, v22);
    WTF::fastFree(v24, v25);
  }
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

IPC::Encoder *__Block_byref_object_dispose__3(uint64_t a1)
{
  return std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 48), 0);
}

uint64_t WebKit::PCM::DaemonConnectionSet::setConnectedNetworkProcessHasDebugModeEnabled(WebKit::PCM::DaemonConnectionSet *this, const WebKit::Daemon::Connection *a2, int a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *((_QWORD *)a2 + 2);
  result = WTF::HashTable<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>>,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashMap<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>>,NSObject  {objcproto13OS_xpc_object} const*>((uint64_t *)this, &v9);
  v6 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    v6 += 16 * *(unsigned int *)(v6 - 4);
  if (v6 != result && *(unsigned __int8 *)(result + 8) != a3)
  {
    v7 = *((_QWORD *)this + 1);
    *(_BYTE *)(result + 8) = a3;
    if (a3)
      v8 = v7 + 1;
    else
      v8 = v7 - 1;
    *((_QWORD *)this + 1) = v8;
  }
  return result;
}

void WebKit::PCM::DaemonConnectionSet::broadcastConsoleMessage(_QWORD **a1, unsigned int a2)
{
  xpc_object_t v4;
  const char *v5;
  void *v6;
  xpc_connection_t *v7;
  xpc_connection_t *v8;
  xpc_connection_t *v9;
  xpc_connection_t *v10;
  uint64_t v11;
  WTF *v12;

  v4 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_uint64(v4, "debug message level", a2);
  WTF::String::utf8();
  if (v12)
    v5 = (char *)v12 + 16;
  else
    v5 = 0;
  xpc_dictionary_set_string(v4, "debug message", v5);
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
      WTF::fastFree(v12, v6);
    else
      --*(_DWORD *)v12;
  }
  v7 = (xpc_connection_t *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(a1);
  v8 = v7;
  v10 = v9;
  if (*a1)
    v11 = (uint64_t)&(*a1)[2 * *((unsigned int *)*a1 - 1)];
  else
    v11 = 0;
  if ((xpc_connection_t *)v11 != v7)
  {
    do
    {
      xpc_connection_send_message(*v8, v4);
      while (1)
      {
        v8 += 2;
        if (v8 == v10)
          break;
        if ((unint64_t)*v8 + 1 > 1)
          goto LABEL_17;
      }
      v8 = v10;
LABEL_17:
      ;
    }
    while (v8 != (xpc_connection_t *)v11);
  }
  if (v4)

}

void sub_19704735C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  void *v10;

  if (v10)

  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PCMDaemonMain(WebKit *this, uint64_t a2, const char **a3)
{
  unsigned int v4;
  const char *v6;
  WTF::FileSystemImpl *v7;
  _BOOL4 v8;
  void *v9;
  WTF *v10;
  const char *v11;
  const WTF::String *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  if ((int)this >= 5
    && (v4 = this, !strcmp(*(const char **)(a2 + 8), "--machServiceName"))
    && !strcmp(*(const char **)(a2 + 24), "--storageLocation"))
  {
    v6 = *(const char **)(a2 + 16);
    v7 = *(WTF::FileSystemImpl **)(a2 + 32);
    v8 = v4 >= 6 && strcmp(*(const char **)(a2 + 40), "--startActivity") == 0;
    v9 = (void *)MEMORY[0x19AEB9C30]();
    _CFPrefsSetDirectModeEnabled();
    _CFPrefsSetReadOnly();
    WebKit::startListeningForMachServiceConnections(v6, (uint64_t)"com.apple.private.webkit.adattributiond", 40, (uint64_t)WebKit::connectionAdded, (uint64_t)WebKit::connectionRemoved, (uint64_t)WebKit::connectionEventHandler);
    if (v8)
    {
      NSLog(CFSTR("Registering XPC activity"));
      xpc_activity_register("com.apple.webkit.adattributiond.activity", (xpc_object_t)*MEMORY[0x1E0C80748], &__block_literal_global_15);
    }
    WTF::initializeMainThread(v10);
    WTF::FileSystemImpl::stringFromFileSystemRepresentation(v7, v11);
    WebKit::PCM::initializePCMStorageInDirectory((WebKit::PCM *)&v15, v12);
    v14 = v15;
    v15 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
    objc_autoreleasePoolPop(v9);
    CFRunLoopRun();
    return 0;
  }
  else
  {
    NSLog(CFSTR("Usage: %s --machServiceName <name> --storageLocation <location> [--startActivity]"), *(_QWORD *)a2);
    return 0xFFFFFFFFLL;
  }
}

void WebKit::connectionAdded(CFTypeRef cf)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  CFTypeRef v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;

  {
    WebKit::PCM::DaemonConnectionSet::singleton(void)::set = 0;
    qword_1EE341CA8 = 0;
    if (!cf)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (cf)
LABEL_3:
    CFRetain(cf);
LABEL_4:
  v2 = WebKit::PCM::DaemonConnectionSet::singleton(void)::set;
  if (WebKit::PCM::DaemonConnectionSet::singleton(void)::set
    || (WTF::HashTable<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>>,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashMap<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>>::expand(),
        (v2 = WebKit::PCM::DaemonConnectionSet::singleton(void)::set) != 0))
  {
    v3 = *(_DWORD *)(v2 - 8);
  }
  else
  {
    v3 = 0;
  }
  v4 = ((unint64_t)cf + ~((_QWORD)cf << 32)) ^ (((unint64_t)cf + ~((_QWORD)cf << 32)) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  v8 = v2 + 16 * v7;
  v9 = *(CFTypeRef *)v8;
  if (!*(_QWORD *)v8)
  {
LABEL_15:
    *(_QWORD *)v8 = cf;
    *(_BYTE *)(v8 + 8) = 0;
    if (WebKit::PCM::DaemonConnectionSet::singleton(void)::set)
      v12 = *(_DWORD *)(WebKit::PCM::DaemonConnectionSet::singleton(void)::set - 12) + 1;
    else
      v12 = 1;
    *(_DWORD *)(WebKit::PCM::DaemonConnectionSet::singleton(void)::set - 12) = v12;
    if (WebKit::PCM::DaemonConnectionSet::singleton(void)::set)
      v13 = *(_DWORD *)(WebKit::PCM::DaemonConnectionSet::singleton(void)::set - 12);
    else
      v13 = 0;
    v14 = (*(_DWORD *)(WebKit::PCM::DaemonConnectionSet::singleton(void)::set - 16) + v13);
    v15 = *(unsigned int *)(WebKit::PCM::DaemonConnectionSet::singleton(void)::set - 4);
    if (v15 > 0x400)
    {
      if (v15 > 2 * v14)
        return;
    }
    else if (3 * v15 > 4 * v14)
    {
      return;
    }
    WTF::HashTable<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>>,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashMap<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>>::expand();
    return;
  }
  v10 = 0;
  v11 = 1;
  while (v9 != cf)
  {
    if (v9 == (CFTypeRef)-1)
      v10 = v8;
    v7 = (v7 + v11) & v3;
    v8 = v2 + 16 * v7;
    v9 = *(CFTypeRef *)v8;
    ++v11;
    if (!*(_QWORD *)v8)
    {
      if (v10)
      {
        *(_QWORD *)v10 = 0;
        *(_BYTE *)(v10 + 8) = 0;
        --*(_DWORD *)(WebKit::PCM::DaemonConnectionSet::singleton(void)::set - 16);
        v8 = v10;
      }
      goto LABEL_15;
    }
  }
  if (cf)
    CFRelease(cf);
}

void sub_1970476A0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::connectionRemoved(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  int v3;
  const void *v4;
  int v5;
  unsigned int v6;
  uint64_t v8;

  {
    WebKit::PCM::DaemonConnectionSet::singleton(void)::set = 0;
    qword_1EE341CA8 = 0;
  }
  v8 = a1;
  v1 = WTF::HashTable<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>>,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashMap<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>>,NSObject  {objcproto13OS_xpc_object} const*>(&WebKit::PCM::DaemonConnectionSet::singleton(void)::set, &v8);
  v2 = (_QWORD *)v1;
  if (WebKit::PCM::DaemonConnectionSet::singleton(void)::set)
  {
    if (WebKit::PCM::DaemonConnectionSet::singleton(void)::set
       + 16 * *(unsigned int *)(WebKit::PCM::DaemonConnectionSet::singleton(void)::set - 4) == v1)
      return;
  }
  else if (!v1)
  {
    return;
  }
  v3 = *(unsigned __int8 *)(v1 + 8);
  v4 = *(const void **)v1;
  *v2 = 0;
  if (v4)
    CFRelease(v4);
  *v2 = -1;
  ++*(_DWORD *)(WebKit::PCM::DaemonConnectionSet::singleton(void)::set - 16);
  if (WebKit::PCM::DaemonConnectionSet::singleton(void)::set)
    v5 = *(_DWORD *)(WebKit::PCM::DaemonConnectionSet::singleton(void)::set - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(WebKit::PCM::DaemonConnectionSet::singleton(void)::set - 12) = v5;
  if (WebKit::PCM::DaemonConnectionSet::singleton(void)::set)
  {
    v6 = *(_DWORD *)(WebKit::PCM::DaemonConnectionSet::singleton(void)::set - 4);
    if (6 * *(_DWORD *)(WebKit::PCM::DaemonConnectionSet::singleton(void)::set - 12) < v6 && v6 >= 9)
      WTF::HashTable<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>>,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashMap<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>>::rehash(v6 >> 1);
  }
  if (v3)
    --qword_1EE341CA8;
}

void WebKit::connectionEventHandler(void *a1)
{
  void *v1;
  unsigned __int8 uint64;
  WTF::StringImpl *data;
  WTF::StringImpl *v4;
  xpc_connection_t remote_connection;
  xpc_connection_t v6;
  _xpc_connection_s *v7;
  id v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD v13[3];
  size_t length;

  v1 = a1;
  if (object_getClass(a1) == (Class)MEMORY[0x1E0C812F8])
  {
    if (xpc_dictionary_get_uint64(v1, "version") == 1)
    {
      uint64 = xpc_dictionary_get_uint64(v1, "message type");
      length = 0;
      data = (WTF::StringImpl *)xpc_dictionary_get_data(v1, "encoded message", &length);
      v4 = (WTF::StringImpl *)length;
      remote_connection = xpc_dictionary_get_remote_connection(v1);
      v6 = remote_connection;
      if (remote_connection)
        v7 = remote_connection;
      v13[0] = &off_1E34B4B38;
      v13[1] = 0;
      v13[2] = v6;
      if (v1)
        v8 = v1;
      v9 = 0;
      if (uint64 <= 0x10u && ((1 << uint64) & 0x1104D) != 0)
      {
        v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v9 = &off_1E34B8590;
        v9[1] = v1;
        v1 = 0;
      }
      v12 = v9;
      WebKit::PCM::decodeMessageAndSendToManager((WebKit::Daemon::Connection *)v13, uint64, data, v4, (uint64_t *)&v12);
      v11 = (uint64_t)v12;
      v12 = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      if (v1)

      WebKit::Daemon::Connection::~Connection((WebKit::Daemon::Connection *)v13, v10);
    }
    else
    {
      NSLog(CFSTR("Received request that was not the current protocol version"));
    }
  }
}

void sub_197047914(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  va_list va;

  va_start(va, a4);
  if (v4)

  WebKit::Daemon::Connection::~Connection((WebKit::Daemon::Connection *)va, a2);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::replySender(WebKit::PCM::MessageType,WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E34B8590;
  v2 = (void *)a1[1];
  if (v2)

  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::replySender(WebKit::PCM::MessageType,WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF *this, void *a2)
{
  void *v3;

  *(_QWORD *)this = &off_1E34B8590;
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::replySender(WebKit::PCM::MessageType,WTF::OSObjectPtr<NSObject  {objcproto13OS_xpc_object}*> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1, uint64_t a2)
{
  _xpc_connection_s *remote_connection;
  xpc_object_t message;

  message = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 8));
  WebKit::PCM::addVersionAndEncodedMessageToDictionary(a2, message);
  remote_connection = xpc_dictionary_get_remote_connection(*(xpc_object_t *)(a1 + 8));
  xpc_connection_send_message(remote_connection, message);
  if (message)

}

void sub_197047A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  if (a10)

  _Unwind_Resume(exception_object);
}

void ___ZN6WebKitL32registerScheduledActivityHandlerEv_block_invoke(int a1, xpc_activity_t activity)
{
  xpc_object_t xdict;

  if (xpc_activity_get_state(activity))
  {
    dispatch_async(MEMORY[0x1E0C80D38], &__block_literal_global_40_0);
  }
  else
  {
    NSLog(CFSTR("Activity checking in"));
    xdict = xpc_activity_copy_criteria(activity);
    xpc_dictionary_set_uint64(xdict, (const char *)*MEMORY[0x1E0C807A8], 0x15180uLL);
    xpc_dictionary_set_uint64(xdict, (const char *)*MEMORY[0x1E0C80790], 0xE10uLL);
    xpc_dictionary_set_string(xdict, (const char *)*MEMORY[0x1E0C80878], (const char *)*MEMORY[0x1E0C80880]);
    xpc_dictionary_set_BOOL(xdict, (const char *)*MEMORY[0x1E0C80738], 1);
    xpc_dictionary_set_uint64(xdict, (const char *)*MEMORY[0x1E0C80890], 0x15180uLL);
    xpc_dictionary_set_BOOL(xdict, (const char *)*MEMORY[0x1E0C808D0], 1);
    xpc_dictionary_set_BOOL(xdict, (const char *)*MEMORY[0x1E0C80898], 1);
    xpc_activity_set_criteria(activity, xdict);
    if (xdict)

  }
}

void sub_197047B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  if (a10)

  _Unwind_Resume(exception_object);
}

uint64_t ___ZN6WebKitL32registerScheduledActivityHandlerEv_block_invoke_2()
{
  NSLog(CFSTR("XPC activity happening"));
  return WebKit::PrivateClickMeasurementManager::firePendingAttributionRequests((WebKit::PrivateClickMeasurementManager *)WebKit::PCM::managerPointer(void)::manager);
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::InitializeWebKit2(void)::$_0 &&>>()
{
  uint64_t v0;
  void *v1;
  uint64_t result;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v0 = objc_msgSend(MEMORY[0x1E0CB3978], "isMainThread");
  if ((v0 & 1) != 0)
    return WebKit::runInitializationCode((WebKit *)v0, v1);
  v0 = WTF::linkedOnOrAfterSDKWithBehavior();
  if ((_DWORD)v0)
    return WebKit::runInitializationCode((WebKit *)v0, v1);
  v3 = WTF::WorkQueue::main((WTF::WorkQueue *)v0);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34B8618;
  v5 = v4;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v3 + 24))(v3, &v5);
  result = (uint64_t)v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_197047C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::defaultTextRecognitionInVideosEnabled(void)::$_0 &&>>()
{
  uint64_t result;

  result = _os_feature_enabled_impl();
  WebKit::defaultTextRecognitionInVideosEnabled(void)::enabled = result;
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::defaultVisualTranslationEnabled(void)::$_0 &&>>()
{
  uint64_t result;

  result = _os_feature_enabled_impl();
  WebKit::defaultVisualTranslationEnabled(void)::enabled = result;
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::defaultRemoveBackgroundEnabled(void)::$_0 &&>>()
{
  uint64_t result;

  result = _os_feature_enabled_impl();
  WebKit::defaultRemoveBackgroundEnabled(void)::enabled = result;
  return result;
}

_DWORD *WTF::HashTable<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>>,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashMap<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>>::expand()
{
  int v0;

  if (WebKit::PCM::DaemonConnectionSet::singleton(void)::set
    && (v0 = *(_DWORD *)(WebKit::PCM::DaemonConnectionSet::singleton(void)::set - 4)) != 0)
  {
    return WTF::HashTable<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>>,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashMap<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>>::rehash(v0 << (6 * *(_DWORD *)(WebKit::PCM::DaemonConnectionSet::singleton(void)::set - 12) >= (2 * v0)));
  }
  else
  {
    return WTF::HashTable<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>>,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashMap<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>>::rehash(8u);
  }
}

_DWORD *WTF::HashTable<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>>,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashMap<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>>::rehash(unsigned int a1)
{
  uint64_t v2;
  int v3;
  int v4;
  _DWORD *result;
  void *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t i;
  const void **v10;
  const void *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  const void *v22;

  v2 = WebKit::PCM::DaemonConnectionSet::singleton(void)::set;
  if (WebKit::PCM::DaemonConnectionSet::singleton(void)::set)
  {
    v3 = *(_DWORD *)(WebKit::PCM::DaemonConnectionSet::singleton(void)::set - 4);
    v4 = *(_DWORD *)(WebKit::PCM::DaemonConnectionSet::singleton(void)::set - 12);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  result = (_DWORD *)WTF::fastMalloc((WTF *)(16 * a1 + 16));
  if (a1)
  {
    v7 = a1;
    v8 = result + 6;
    do
    {
      *((_QWORD *)v8 - 1) = 0;
      *v8 = 0;
      v8 += 16;
      --v7;
    }
    while (v7);
  }
  WebKit::PCM::DaemonConnectionSet::singleton(void)::set = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *result = 0;
  *(_DWORD *)(WebKit::PCM::DaemonConnectionSet::singleton(void)::set - 12) = v4;
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v10 = (const void **)(v2 + 16 * i);
      v11 = *v10;
      if (*v10 != (const void *)-1)
      {
        if (v11)
        {
          if (WebKit::PCM::DaemonConnectionSet::singleton(void)::set)
            v12 = *(_DWORD *)(WebKit::PCM::DaemonConnectionSet::singleton(void)::set - 8);
          else
            v12 = 0;
          v13 = ((unint64_t)v11 + ~((_QWORD)v11 << 32)) ^ (((unint64_t)v11 + ~((_QWORD)v11 << 32)) >> 22);
          v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
          v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
          v16 = v12 & ((v15 >> 31) ^ v15);
          v17 = 1;
          do
          {
            v18 = v16;
            v19 = *(_QWORD *)(WebKit::PCM::DaemonConnectionSet::singleton(void)::set + 16 * v16);
            v16 = (v16 + v17++) & v12;
          }
          while (v19);
          v20 = WebKit::PCM::DaemonConnectionSet::singleton(void)::set + 16 * v18;
          *(_QWORD *)v20 = 0;
          v21 = *v10;
          *v10 = 0;
          *(_QWORD *)v20 = v21;
          *(_BYTE *)(v20 + 8) = *(_BYTE *)(v2 + 16 * i + 8);
          v22 = *v10;
          *v10 = 0;
          if (v22)
            CFRelease(v22);
        }
        else
        {
          *v10 = 0;
        }
      }
    }
  }
  else if (!v2)
  {
    return result;
  }
  return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
}

WTF::RunLoop *WebKit::ScopedWebGLRenderingResourcesRequest::scheduleFreeWebGLRenderingResources(WTF::RunLoop *this)
{
  WTF::RunLoop *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  WTF *v6;
  void *v7;
  WTF::RunLoop *v8;
  WTF::RunLoop::TimerBase *v9;

  if ((WebKit::didScheduleFreeWebGLRenderingResources & 1) == 0)
  {
    WTF::RunLoop::main(this);
    v1 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v1 = off_1E34B3DA0;
    *((_QWORD *)v1 + 1) = WebKit::ScopedWebGLRenderingResourcesRequest::freeWebGLRenderingResources;
    v8 = v1;
    WTF::RunLoop::dispatchAfter();
    if (v9)
    {
      v2 = (unsigned int *)((char *)v9 + 24);
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        atomic_store(1u, (unsigned int *)v9 + 6);
        v5 = *((_QWORD *)v9 + 4);
        *((_QWORD *)v9 + 4) = 0;
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        WTF::RunLoop::TimerBase::~TimerBase(v9);
        WTF::fastFree(v6, v7);
      }
    }
    this = v8;
    if (v8)
      this = (WTF::RunLoop *)(*(uint64_t (**)(WTF::RunLoop *))(*(_QWORD *)v8 + 8))(v8);
    WebKit::didScheduleFreeWebGLRenderingResources = 1;
  }
  return this;
}

WebKit *WebKit::ScopedWebGLRenderingResourcesRequest::freeWebGLRenderingResources(WebKit *this)
{
  void *v2;
  WebKit *v3;
  WebKit *v4;

  WebKit::didScheduleFreeWebGLRenderingResources = 0;
  if (!atomic_load((unsigned int *)&WebKit::ScopedWebGLRenderingResourcesRequest::s_requests))
  {
    v2 = WebKit::remoteGraphicsContextGLStreamWorkQueue(this);
    v3 = (WebKit *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v3 = off_1E34B87D0;
    v4 = v3;
    IPC::StreamConnectionWorkQueue::dispatch((uint64_t)v2, (uint64_t *)&v4);
    this = v4;
    v4 = 0;
    if (this)
      return (WebKit *)(*(uint64_t (**)(WebKit *))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

unsigned int *WebKit::ShareablePixelBuffer::tryCreate@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int *result;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  char v10;
  WebCore::SharedMemory *v11;

  result = (unsigned int *)WebCore::PixelBuffer::computeBufferSize();
  if (v10
    || (result = (unsigned int *)WebCore::SharedMemory::allocate((WebCore::SharedMemory *)v11), !v9))
  {
    *a3 = 0;
  }
  else
  {
    v7 = WTF::fastMalloc((WTF *)0x40);
    v8 = v9;
    v9 = 0;
    *a3 = WebKit::ShareablePixelBuffer::ShareablePixelBuffer(v7, a1, a2, (uint64_t *)&v8);
    if (v8)
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v8);
    result = v9;
    v9 = 0;
    if (result)
      return WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(result);
  }
  return result;
}

uint64_t WebKit::ShareablePixelBuffer::ShareablePixelBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  unint64_t v9;

  result = WebCore::PixelBuffer::PixelBuffer();
  *(_QWORD *)result = off_1E34B8640;
  v6 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 56) = v6;
  v7 = *(_DWORD *)(result + 32);
  v8 = *(_DWORD *)(result + 36);
  if (v7 < 0)
    v7 = -v7;
  if (v8 < 0)
    v8 = -v8;
  v9 = v7 * (unint64_t)v8;
  if ((v9 & 0xFFFFFFFF00000000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1970481A4);
  }
  if (v9 >> 30 || *(_QWORD *)(result + 48) < (unint64_t)(4 * v9))
  {
    __break(0xC471u);
    JUMPOUT(0x19704819CLL);
  }
  return result;
}

unsigned int *WebKit::ShareablePixelBuffer::createScratchPixelBuffer@<X0>(WebKit::ShareablePixelBuffer *this@<X0>, const WebCore::IntSize *a2@<X1>, uint64_t *a3@<X8>)
{
  return WebKit::ShareablePixelBuffer::tryCreate((uint64_t)this + 16, (uint64_t)a2, a3);
}

unsigned int *WebKit::RemoteGraphicsContextGL::copyTextureFromVideoFrame(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, unsigned __int8 a10, uint64_t *a11)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *result;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int *v29;
  WebCore::VideoFrame *v30;
  int v31;

  v31 = a3;
  WebKit::SharedVideoFrameReader::read(a1 + 96, a2, &v30);
  if (v30)
  {
    WebCore::VideoFrame::asVideoFrameCV(v30);
    if (v29 && (v16 = WebCore::GraphicsContextGLCocoa::asCV(*(WebCore::GraphicsContextGLCocoa **)(a1 + 56))) != 0)
    {
      v17 = v16;
      v18 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)(a1 + 192), &v31);
      v31 = v18;
      v19 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v17 + 16))(v17, v29, v18, a5, a6, a7, a8, a10);
      v20 = *a11;
      *a11 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v19);
    }
    else
    {
      v20 = *a11;
      *a11 = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 16))(v20, 0);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    if (v29)
    {
      v21 = v29 + 2;
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        atomic_store(1u, v29 + 2);
        (*(void (**)())(*(_QWORD *)v29 + 8))();
      }
    }
    result = (unsigned int *)v30;
    v30 = 0;
    if (result)
    {
      v25 = result + 2;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  else
  {
    v28 = *a11;
    *a11 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v28 + 16))(v28, 0);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::create@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  _QWORD *v13;
  uint64_t result;

  v12 = WTF::fastMalloc((WTF *)0xC8);
  v13 = (_QWORD *)WebKit::RemoteGraphicsContextGL::RemoteGraphicsContextGL(v12, a1, a3, a4, a5);
  *v13 = off_1E34B8738;
  v13[1] = &unk_1E34B8780;
  result = WebKit::RemoteGraphicsContextGL::initialize((uint64_t)v13, a2);
  *a6 = v12;
  return result;
}

uint64_t WebKit::RemoteAdapter::RemoteAdapter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  WTF::ThreadSafeWeakPtrControlBlock *v14;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E34B8670;
  ++*(_DWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 16) = a3;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a4 + 16), a4);
  v11 = *(unsigned int **)(a4 + 16);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  *(_QWORD *)(a1 + 24) = v11;
  v13 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 32) = v13;
  v14 = *(WTF::ThreadSafeWeakPtrControlBlock **)(a2 + 16);
  if (v14)
  {
    v14 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(*(WTF::ThreadSafeWeakPtrControlBlock **)(a2 + 16));
    v13 = *(_QWORD *)(a1 + 32);
  }
  *(_QWORD *)(a1 + 40) = v14;
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 56) = a6;
  IPC::StreamServerConnection::startReceivingMessages(v13, a1, 0x34u, a6);
  return a1;
}

void WebKit::RemoteAdapter::~RemoteAdapter(WebKit::RemoteAdapter *this, void *a2)
{
  unsigned __int8 *v3;
  void *v4;
  unsigned int *v5;
  _DWORD *v6;
  unsigned int v7;
  unsigned int v8;

  v3 = (unsigned __int8 *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)this + 4);
  v5 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    do
    {
      v7 = __ldaxr(v5);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v5));
    if (!v8)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }
  v6 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteAdapter::~RemoteAdapter(this, a2);
  WTF::fastFree(v2, v3);
}

WTF::StringImpl *WebKit::RemoteAdapter::requestDevice(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  WTF::StringImpl *result;
  uint64_t v24;
  void *v25;
  void *v26;
  WTF *v27;
  __int128 v28;
  _OWORD v29[4];
  int v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _QWORD v35[2];
  WTF::StringImpl *v36;
  WTF *v37;
  int v38;
  uint64_t v39;
  char v40;

  WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a2, (uint64_t)&v36);
  if (v40)
  {
    v9 = a1[2];
    v10 = *a5;
    *a5 = 0;
    v11 = *(_QWORD *)(a1[3] + 8);
    ++*(_DWORD *)(v11 + 8);
    *(_QWORD *)&v28 = v10;
    *((_QWORD *)&v28 + 1) = v11;
    v12 = a1[4];
    v13 = (unsigned int *)(v12 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
    *(_QWORD *)&v29[0] = v12;
    *((_QWORD *)&v29[0] + 1) = a3;
    *(_QWORD *)&v29[1] = a4;
    v15 = (unsigned __int8 *)a1[5];
    if (v15)
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v15, a1[6], (_QWORD *)&v29[1] + 1);
    else
      *((_QWORD *)&v29[1] + 1) = 0;
    v16 = WTF::fastMalloc((WTF *)0x38);
    *(_QWORD *)v16 = off_1E34B87F8;
    *(_QWORD *)(v16 + 8) = v28;
    v17 = *((_QWORD *)&v28 + 1);
    v28 = 0uLL;
    *(_QWORD *)(v16 + 16) = v17;
    *(_QWORD *)(v16 + 24) = *(_QWORD *)&v29[0];
    *(_OWORD *)(v16 + 32) = *(_OWORD *)((char *)v29 + 8);
    v18 = *((_QWORD *)&v29[1] + 1);
    *(_QWORD *)&v29[0] = 0;
    *((_QWORD *)&v29[1] + 1) = 0;
    *(_QWORD *)(v16 + 48) = v18;
    v35[0] = v16;
    (*(void (**)(uint64_t, WTF::StringImpl **, _QWORD *))(*(_QWORD *)v9 + 16))(v9, &v36, v35);
    v19 = v35[0];
    v35[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v20 = *((_QWORD *)&v29[1] + 1);
    *((_QWORD *)&v29[1] + 1) = 0;
    if (v20)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v20 + 16));
    WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)v29);
    v22 = *((_QWORD *)&v28 + 1);
    *((_QWORD *)&v28 + 1) = 0;
    if (v22)
      WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref((_DWORD *)(v22 + 8), v21);
    result = (WTF::StringImpl *)v28;
    *(_QWORD *)&v28 = 0;
    if (result)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    v35[0] = 0;
    v35[1] = 0;
    v30 = 0;
    memset(v29, 0, sizeof(v29));
    v28 = 0u;
    v34 = 0;
    v33 = 0u;
    v32 = 0u;
    v31 = 0u;
    v24 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, _QWORD *, __int128 *))(*(_QWORD *)v24 + 16))(v24, v35, &v28);
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v35, v25);
  }
  if (v40)
  {
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v21);
    v27 = v37;
    if (v37)
    {
      v37 = 0;
      v38 = 0;
      WTF::fastFree(v27, v26);
    }
    result = v36;
    v36 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v26);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::RemoteBindGroup::RemoteBindGroup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E34B8698;
  ++*(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = a2;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 16), a3);
  v9 = *(unsigned int **)(a3 + 16);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *(_QWORD *)(a1 + 24) = v9;
  v11 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = a5;
  IPC::StreamServerConnection::startReceivingMessages(v11, a1, 0x3Cu, a5);
  return a1;
}

void WebKit::RemoteBindGroup::~RemoteBindGroup(unsigned int **this)
{
  void *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(this + 4);
  v3 = this[3];
  this[3] = 0;
  if (v3)
  {
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, v2);
    }
  }
  v4 = this[2];
  this[2] = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteBindGroup::~RemoteBindGroup(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::RemoteBindGroupLayout::RemoteBindGroupLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E34B86C0;
  ++*(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = a2;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 16), a3);
  v9 = *(unsigned int **)(a3 + 16);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *(_QWORD *)(a1 + 24) = v9;
  v11 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = a5;
  IPC::StreamServerConnection::startReceivingMessages(v11, a1, 0x3Du, a5);
  return a1;
}

void WebKit::RemoteBindGroupLayout::~RemoteBindGroupLayout(unsigned int **this)
{
  WTF *v1;
  void *v2;

  WebKit::RemoteBindGroup::~RemoteBindGroup(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::RemoteBuffer::RemoteBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, uint64_t a6)
{
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  char v14;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E34B86E8;
  ++*(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = a2;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 16), a3);
  v11 = *(unsigned int **)(a3 + 16);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  *(_QWORD *)(a1 + 24) = v11;
  v13 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 32) = v13;
  *(_QWORD *)(a1 + 40) = a6;
  *(_BYTE *)(a1 + 48) = a5;
  if (a5)
    v14 = 2;
  else
    v14 = 0;
  *(_BYTE *)(a1 + 49) = v14;
  IPC::StreamServerConnection::startReceivingMessages(v13, a1, 0x3Eu, a6);
  return a1;
}

void WebKit::RemoteBuffer::~RemoteBuffer(unsigned int **this)
{
  WTF *v1;
  void *v2;

  WebKit::RemoteBindGroup::~RemoteBindGroup(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::RemoteBuffer::mapAsync(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t result;
  _QWORD *v17;

  *(_BYTE *)(a1 + 48) = 1;
  *(_BYTE *)(a1 + 49) = a2;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = (unsigned int *)(a1 + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  v14 = *a6;
  *a6 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v15 = &off_1E34B8820;
  v15[1] = a1;
  v15[2] = v14;
  v17 = v15;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v11 + 16))(v11, a2, a3, a4, a5, &v17);
  result = (uint64_t)v17;
  v17 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::RemoteBuffer::getMappedRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;
  _QWORD *v13;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v11 = off_1E34B8848;
  v11[1] = a1;
  v11[2] = a5;
  v13 = v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v10 + 24))(v10, a2, a3, a4, &v13);
  result = (uint64_t)v13;
  v13 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unsigned int *WebKit::RemoteBuffer::copy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  size_t v7;
  const void *v8;
  uint64_t v9;
  size_t v10;
  BOOL v11;
  uint64_t v12;
  unsigned int *result;
  uint64_t v14;

  if (*(_BYTE *)(a2 + 16))
  {
    WebCore::SharedMemory::map();
    if (v14)
    {
      v7 = *(_QWORD *)(v14 + 8);
      v8 = *(const void **)(v14 + 16);
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v14 = 0;
  }
  if (!*(_BYTE *)(a1 + 48)
    || (*(_BYTE *)(a1 + 49) & 2) == 0
    || ((v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16))) != 0
      ? (v11 = v10 == 0)
      : (v11 = 1),
        v11 || __CFADD__(a3, v7) || a3 + v7 > v10))
  {
    v12 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 16))(v12, 0);
  }
  else
  {
    memcpy((void *)(v9 + a3), v8, v7);
    v12 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, 1);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  result = (unsigned int *)v14;
  if (v14)
    return WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref((unsigned int *)v14);
  return result;
}

uint64_t WebKit::RemoteCommandBuffer::RemoteCommandBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E34B8710;
  ++*(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = a2;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 16), a3);
  v9 = *(unsigned int **)(a3 + 16);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *(_QWORD *)(a1 + 24) = v9;
  v11 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = a5;
  IPC::StreamServerConnection::startReceivingMessages(v11, a1, 0x46u, a5);
  return a1;
}

void WebKit::RemoteCommandBuffer::~RemoteCommandBuffer(unsigned int **this)
{
  WTF *v1;
  void *v2;

  WebKit::RemoteBindGroup::~RemoteBindGroup(this);
  WTF::fastFree(v1, v2);
}

void WebKit::ShareablePixelBuffer::~ShareablePixelBuffer(WebKit::ShareablePixelBuffer *this)
{
  unsigned int *v2;

  *(_QWORD *)this = off_1E34B8640;
  v2 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v2);
  WebCore::PixelBuffer::~PixelBuffer(this);
}

{
  unsigned int *v2;
  WTF *v3;
  void *v4;

  *(_QWORD *)this = off_1E34B8640;
  v2 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v2);
  WebCore::PixelBuffer::~PixelBuffer(this);
  WTF::fastFree(v3, v4);
}

uint64_t WebCore::PixelBuffer::isByteArrayPixelBuffer(WebCore::PixelBuffer *this)
{
  return 0;
}

void WebKit::`anonymous namespace'::RemoteGraphicsContextGLCocoa::~RemoteGraphicsContextGLCocoa(WebKit::_anonymous_namespace_::RemoteGraphicsContextGLCocoa *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebKit::RemoteGraphicsContextGL::~RemoteGraphicsContextGL(this, a2);
  WTF::fastFree(v2, v3);
}

void WebKit::`anonymous namespace'::RemoteGraphicsContextGLCocoa::platformWorkQueueInitialize(uint64_t a1)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  _BYTE v5[4];
  _DWORD *v6;

  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)v5, (const WTF::MachSendRight *)(*(_QWORD *)(a1 + 80) + 48));
  WebCore::GraphicsContextGLCocoa::create();
  v2 = v6;
  v6 = 0;
  v3 = *(_DWORD **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v2;
  if (v3)
  {
    if (v3[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
      v4 = v6;
      v6 = 0;
      if (v4)
      {
        if (v4[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
        else
          --v4[2];
      }
    }
    else
    {
      --v3[2];
      v6 = 0;
    }
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v5);
}

void WebKit::`anonymous namespace'::RemoteGraphicsContextGLCocoa::prepareForDisplay(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v6;
  _DWORD *v7;
  int v8;
  WebCore::IOSurface *v9;
  uint64_t v10;
  _BYTE v11[4];
  int v12;
  int v13;
  uint64_t v14;

  WTF::MachSendRight::MachSendRight();
  v6 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a2 + 4) = 0;
  v13 = v6;
  v7 = (_DWORD *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = off_1E34B87A8;
  WTF::MachSendRight::MachSendRight();
  v8 = v13;
  v13 = 0;
  v7[3] = v8;
  WebCore::GraphicsContextGLCocoa::prepareForDisplayWithFinishedSignal();
  v14 = 0;
  if (v7)
    (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
  IPC::Semaphore::destroy((IPC::Semaphore *)&v12);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v12);
  v12 = 0;
  v9 = (WebCore::IOSurface *)WebCore::GraphicsContextGLCocoa::displayBufferSurface(*(WebCore::GraphicsContextGLCocoa **)(a1 + 56));
  if (v9)
  {
    WebCore::IOSurface::createSendRight(v9);
    WTF::MachSendRight::operator=();
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v11);
  }
  v10 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v10 + 16))(v10, &v12);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v12);
}

void `non-virtual thunk to'WebKit::`anonymous namespace'::RemoteGraphicsContextGLCocoa::~RemoteGraphicsContextGLCocoa(uint64_t a1, void *a2)
{
  WebKit::RemoteGraphicsContextGL::~RemoteGraphicsContextGL((WebKit::RemoteGraphicsContextGL *)(a1 - 8), a2);
}

uint64_t `non-virtual thunk to'WebKit::`anonymous namespace'::RemoteGraphicsContextGLCocoa::~RemoteGraphicsContextGLCocoa(uint64_t a1, void *a2)
{
  WTF *v2;
  void *v3;

  WebKit::RemoteGraphicsContextGL::~RemoteGraphicsContextGL((WebKit::RemoteGraphicsContextGL *)(a1 - 8), a2);
  return WTF::fastFree(v2, v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::`anonymous namespace'::RemoteGraphicsContextGLCocoa::prepareForDisplay(IPC::Semaphore &&,WTF::CompletionHandler<void ()(WTF::MachSendRight &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  WTF::MachSendRight *v2;

  *a1 = off_1E34B87A8;
  v2 = (WTF::MachSendRight *)(a1 + 1);
  IPC::Semaphore::destroy((IPC::Semaphore *)(a1 + 1));
  WTF::MachSendRight::~MachSendRight(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::`anonymous namespace'::RemoteGraphicsContextGLCocoa::prepareForDisplay(IPC::Semaphore &&,WTF::CompletionHandler<void ()(WTF::MachSendRight &&)> &&)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  WTF::MachSendRight *v2;
  void *v3;

  *(_QWORD *)a1 = off_1E34B87A8;
  v2 = (WTF::MachSendRight *)(a1 + 8);
  IPC::Semaphore::destroy((IPC::Semaphore *)(a1 + 8));
  WTF::MachSendRight::~MachSendRight(v2);
  return WTF::fastFree((WTF *)a1, v3);
}

void WTF::Detail::CallableWrapper<WebKit::`anonymous namespace'::RemoteGraphicsContextGLCocoa::prepareForDisplay(IPC::Semaphore &&,WTF::CompletionHandler<void ()(WTF::MachSendRight &&)> &&)::$_0,void>::call()
{
  JUMPOUT(0x19AEBA1A0);
}

_DWORD *WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(_DWORD *result, void *a2)
{
  WTF *v2;
  void *v3;

  if (*result == 1)
  {
    WebKit::WebGPU::ObjectHeap::~ObjectHeap((WebKit::WebGPU::ObjectHeap *)(result - 2), a2);
    return (_DWORD *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*result;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ScopedWebGLRenderingResourcesRequest::freeWebGLRenderingResources(void)::$_0,void>::call()
{
  return WebCore::GraphicsContextGLANGLE::releaseThreadResources();
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteAdapter::requestDevice(WebKit::WebGPU::DeviceDescriptor const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebKit::WebGPU::SupportedFeatures &&,WebKit::WebGPU::SupportedLimits &&)> &&)::$_0,void,WTF::RefPtr<WebCore::WebGPU::Device,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_1E34B87F8;
  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 16));
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref((_DWORD *)(v4 + 8), v3);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_1E34B87F8;
  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 16));
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref((_DWORD *)(v4 + 8), v3);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteAdapter::requestDevice(WebKit::WebGPU::DeviceDescriptor const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebKit::WebGPU::SupportedFeatures &&,WebKit::WebGPU::SupportedLimits &&)> &&)::$_0,void,WTF::RefPtr<WebCore::WebGPU::Device,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&>::call(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  void *v20;
  uint64_t result;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[2];
  int v31;
  _BYTE v32[56];
  _QWORD v33[2];

  v3 = *a2;
  if (*a2 && a1[6])
  {
    *a2 = 0;
    v5 = a1[5];
    v4 = (_QWORD *)a1[6];
    v6 = a1[2];
    v7 = a1[4];
    v8 = WTF::fastMalloc((WTF *)0xA0);
    WebKit::RemoteDevice::RemoteDevice(v8, v4, (_DWORD *)v3, v6, a1 + 3, v7, v5);
    WebKit::WebGPU::ObjectHeap::addObject(a1[2], a1[4], v8);
    v9 = a1[2];
    v10 = a1[5];
    v11 = *(unsigned int **)(v8 + 48);
    v12 = v11 + 2;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    WebKit::WebGPU::ObjectHeap::addObject(v9, v10, (uint64_t)v11);
    do
    {
      v14 = __ldaxr(v12);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v12));
    if (!v15)
    {
      atomic_store(1u, v11 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
    }
    v16 = *(_QWORD *)(v3 + 48);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v33, *(_QWORD *)(v3 + 40) + 8);
    v17 = *(_OWORD *)(v16 + 20);
    v27 = *(_OWORD *)(v16 + 4);
    v28 = v17;
    v29 = *(_OWORD *)(v16 + 36);
    *(_QWORD *)&v30[0] = *(_QWORD *)(v16 + 52);
    *(_OWORD *)((char *)v30 + 8) = *(_OWORD *)(v16 + 64);
    *((_QWORD *)&v30[1] + 1) = *(_QWORD *)(v16 + 80);
    v31 = *(_DWORD *)(v16 + 88);
    *(_QWORD *)v32 = *(_QWORD *)(v16 + 96);
    v18 = *(_OWORD *)(v16 + 120);
    *(_OWORD *)&v32[8] = *(_OWORD *)(v16 + 104);
    *(_OWORD *)&v32[24] = v18;
    *(_OWORD *)&v32[40] = *(_OWORD *)(v16 + 136);
    v19 = a1[1];
    a1[1] = 0;
    (*(void (**)(uint64_t, _QWORD *, __int128 *))(*(_QWORD *)v19 + 16))(v19, v33, &v27);
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v33, v20);
    v22 = (unsigned int *)(v8 + 8);
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, (unsigned int *)(v8 + 8));
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
    if (*(_DWORD *)(v3 + 8) == 1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    else
      --*(_DWORD *)(v3 + 8);
  }
  else
  {
    v33[0] = 0;
    v33[1] = 0;
    v31 = 0;
    memset(v30, 0, sizeof(v30));
    v28 = 0u;
    v29 = 0u;
    v27 = 0u;
    memset(v32, 0, sizeof(v32));
    v25 = a1[1];
    a1[1] = 0;
    (*(void (**)(uint64_t, _QWORD *, __int128 *))(*(_QWORD *)v25 + 16))(v25, v33, &v27);
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v33, v26);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteBuffer::mapAsync(WTF::OptionSet<WebCore::WebGPU::MapMode>,unsigned long long,std::optional<unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34B8820;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteBuffer::mapAsync(WTF::OptionSet<WebCore::WebGPU::MapMode>,unsigned long long,std::optional<unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E34B8820;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteBuffer::mapAsync(WTF::OptionSet<WebCore::WebGPU::MapMode>,unsigned long long,std::optional<unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

WTF *WTF::Detail::CallableWrapper<WebKit::RemoteBuffer::getMappedRange(unsigned long long,std::optional<unsigned long long>,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0,void,WebCore::WebGPU::Buffer::MappedRange>::call(WTF *result, uint64_t a2, WTF *this)
{
  uint64_t *v4;
  WTF *v6;
  WTF *v7;
  uint64_t v8;
  void *v9;
  WTF *v10;
  int v11;
  int v12;
  char v13;

  *(_BYTE *)(*((_QWORD *)result + 1) + 48) = 1;
  v4 = (uint64_t *)*((_QWORD *)result + 2);
  if (this)
  {
    if ((unint64_t)this >> 32)
    {
      __break(0xC471u);
      return result;
    }
    v6 = (WTF *)WTF::fastMalloc(this);
    v7 = 0;
    do
    {
      *((_BYTE *)v7 + (_QWORD)v6) = *((_BYTE *)v7 + a2);
      v7 = (WTF *)((char *)v7 + 1);
    }
    while (this != v7);
  }
  else
  {
    v6 = 0;
  }
  v10 = v6;
  v11 = (int)this;
  v12 = (int)this;
  v13 = 1;
  v8 = *v4;
  *v4 = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v8 + 16))(v8, &v10);
  result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (v13)
  {
    result = v10;
    if (v10)
    {
      v10 = 0;
      v11 = 0;
      return (WTF *)WTF::fastFree(result, v9);
    }
  }
  return result;
}

void WebKit::handleLaunchServiceDatabaseMessage(void *a1)
{
  _xpc_endpoint_s *value;
  _xpc_endpoint_s *v2;
  WebKit::LaunchServicesDatabaseManager *Class;
  uint64_t *v4;

  value = (_xpc_endpoint_s *)xpc_dictionary_get_value(a1, "xpc-endpoint-launch-services-database");
  if (value)
  {
    v2 = value;
    Class = object_getClass(value);
    if (Class == (WebKit::LaunchServicesDatabaseManager *)MEMORY[0x1E0C81308])
    {
      v4 = WebKit::LaunchServicesDatabaseManager::singleton(Class);
      WebKit::XPCEndpointClient::setEndpoint((uint64_t)v4, v2);
    }
  }
}

uint64_t WebKit::XPCServiceInitializerDelegate::getClientSDKAlignedBehaviors(uint64_t a1, uint64_t a2)
{
  _DWORD *data;
  _DWORD *v4;
  BOOL v5;
  uint64_t result;
  uint64_t v7;
  size_t length;

  length = 0;
  data = xpc_dictionary_get_data(*(xpc_object_t *)(a1 + 16), "client-sdk-aligned-behaviors", &length);
  v4 = data;
  if (length)
    v5 = data == 0;
  else
    v5 = 1;
  result = !v5;
  if (!v5)
  {
    if (length == 12)
    {
      v7 = *(_QWORD *)v4;
      *(_DWORD *)(a2 + 8) = v4[2];
      *(_QWORD *)a2 = v7;
    }
    else
    {
      result = 92;
      __break(0xC471u);
    }
  }
  return result;
}

BOOL WebKit::XPCServiceInitializerDelegate::getProcessIdentifier(uint64_t a1, unint64_t *a2)
{
  const char *string;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  string = xpc_dictionary_get_string(*(xpc_object_t *)(a1 + 16), "process-identifier");
  v4 = (uint64_t)string;
  v5 = 0x100000000;
  if (string)
    v5 = strlen(string) | 0x100000000;
  v6 = WTF::parseInteger<unsigned long long>(v4, v5, 0xAu);
  if (v7)
    *a2 = v6;
  return v7 != 0;
}

uint64_t ___ZN6WebKit22XPCServiceEventHandlerEPU24objcproto13OS_xpc_object8NSObject_block_invoke_17()
{
  int v0;
  int v1;
  xpc_object_t v2;

  v0 = WTF::exitProcess((WTF *)1);
  return ___ZN6WebKit22XPCServiceEventHandlerEPU24objcproto13OS_xpc_object8NSObject_block_invoke_24(v0, v1, v2);
}

uint64_t ___ZN6WebKit22XPCServiceEventHandlerEPU24objcproto13OS_xpc_object8NSObject_block_invoke_24(int a1, const char *a2, xpc_object_t xstring)
{
  const char *string_ptr;

  string_ptr = xpc_string_get_string_ptr(xstring);
  setenv(a2, string_ptr, 1);
  return 1;
}

void ___ZN6WebKit22XPCServiceEventHandlerEPU24objcproto13OS_xpc_object8NSObject_block_invoke_41()
{
  WebKit *v0;
  int v1;
  const char **v2;

  v0 = (WebKit *)WTF::exitProcess((WTF *)1);
  WebKit::XPCServiceMain(v0, v1, v2);
}

void WebKit::XPCServiceMain(WebKit *this, int a2, const char **a3)
{
  xpc_copy_bootstrap();
  xpc_main((xpc_connection_handler_t)WebKit::XPCServiceEventHandler);
}

void sub_19704986C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)

  _Unwind_Resume(exception_object);
}

WebKit::RemoteLayerWithRemoteRenderingBackingStore *WebKit::RemoteLayerBackingStore::createForLayer@<X0>(WebKit::RemoteLayerBackingStore *this@<X0>, WebKit::PlatformCALayerRemote *a2@<X1>, WebKit::RemoteLayerWithRemoteRenderingBackingStore **a3@<X8>)
{
  WebKit::RemoteLayerWithRemoteRenderingBackingStore *v5;
  WebKit::RemoteLayerWithRemoteRenderingBackingStore *result;
  WebKit::RemoteLayerWithRemoteRenderingBackingStore *v7;
  WebKit::PlatformCALayerRemote *v8;

  v8 = this;
  if (WebKit::RemoteLayerBackingStore::processModelForLayer(this, a2))
  {
    v5 = (WebKit::RemoteLayerWithRemoteRenderingBackingStore *)WTF::fastMalloc((WTF *)0x1D0);
    result = WebKit::RemoteLayerWithRemoteRenderingBackingStore::RemoteLayerWithRemoteRenderingBackingStore(v5, this);
    *a3 = v5;
  }
  else
  {
    result = std::make_unique[abi:sn180100]<WebKit::RemoteLayerWithInProcessRenderingBackingStore,WebKit::PlatformCALayerRemote *&>(&v8, (uint64_t *)&v7);
    *a3 = v7;
  }
  return result;
}

void sub_1970498EC(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

BOOL WebKit::RemoteLayerBackingStore::processModelForLayer(WebKit::RemoteLayerBackingStore *this, WebKit::PlatformCALayerRemote *a2)
{
  WebKit::WebProcess *v2;
  WebKit::WebProcess *v4;
  WebKit::RemoteLayerBackingStore *v5;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v5 = this;
    v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v4);
    this = v5;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  return *((_BYTE *)v2 + 761) && !WebCore::PlatformCALayer::needsPlatformContext(this);
}

uint64_t WebKit::RemoteLayerBackingStore::ensureBackingStore(WebKit::RemoteLayerBackingStore *this, const Parameters *a2)
{
  char *v4;
  BOOL v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  int v10;

  v4 = (char *)this + 24;
  if ((*((_BYTE *)this + 24) == 0) == (*(_BYTE *)a2 != 0)
    || (*((float *)this + 7) == *((float *)a2 + 1) ? (v5 = *((float *)this + 8) == *((float *)a2 + 2)) : (v5 = 0),
        !v5
     || (result = WebCore::operator==(), !(_DWORD)result)
     || *((float *)this + 12) != *((float *)a2 + 6)
     || *((unsigned __int8 *)this + 52) != *((unsigned __int8 *)a2 + 28)
     || *((unsigned __int8 *)this + 53) != *((unsigned __int8 *)a2 + 29)))
  {
    v7 = *(_QWORD *)a2;
    *((_DWORD *)v4 + 2) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v4 = v7;
    v8 = *((_QWORD *)a2 + 2);
    if (v8)
      CFRetain(*((CFTypeRef *)a2 + 2));
    v9 = (const void *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v8;
    if (v9)
      CFRelease(v9);
    v10 = *((_DWORD *)a2 + 6);
    *((_WORD *)this + 26) = *((_WORD *)a2 + 14);
    *((_DWORD *)this + 12) = v10;
    return (*(uint64_t (**)(WebKit::RemoteLayerBackingStore *))(*(_QWORD *)this + 96))(this);
  }
  return result;
}

uint64_t std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::operator=[abi:sn180100]<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,void>(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 72))
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>>(a1, a2);
  }
  else
  {
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>::__move_constructor((unsigned int *)a1, a2);
    *(_BYTE *)(a1 + 72) = 1;
  }
  return a1;
}

BOOL WebKit::RemoteLayerBackingStore::layerWillBeDisplayed(WebKit::RemoteLayerBackingStore *this)
{
  uint64_t v1;
  uint64_t v2;
  WebKit::RemoteLayerBackingStoreCollection *v4;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 832);
  return v1
      && (v2 = *(_QWORD *)(v1 + 8)) != 0
      && (v4 = *(WebKit::RemoteLayerBackingStoreCollection **)(v2 + 88)) != 0
      && WebKit::RemoteLayerBackingStoreCollection::backingStoreWillBeDisplayed(v4, this);
}

uint64_t WebKit::RemoteLayerBackingStore::layerWillBeDisplayedWithRenderingSuppression(WebKit::RemoteLayerBackingStore *this)
{
  uint64_t v1;
  uint64_t v2;
  WebKit::RemoteLayerBackingStoreCollection *v4;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 832);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v4 = *(WebKit::RemoteLayerBackingStoreCollection **)(v2 + 88);
      if (v4)
        WebKit::RemoteLayerBackingStoreCollection::backingStoreWillBeDisplayedWithRenderingSuppression(v4, this);
    }
  }
  return 0;
}

uint64_t WebKit::RemoteLayerBackingStoreCollection::backingStoreWillBeDisplayedWithRenderingSuppression(WebKit::RemoteLayerBackingStoreCollection *this, WebKit::RemoteLayerBackingStore *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v8;
  uint64_t *v9[5];

  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::RemoteLayerBackingStore>((uint64_t)this + 56, (unsigned int *)a2, (uint64_t)v9);
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::find<WebKit::RemoteLayerBackingStore>((uint64_t)this + 40, (uint64_t)a2, v9);
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    v6 = (uint64_t *)(v4 + 8 * v5);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(&v8, (uint64_t *)this + 5, v6, (uint64_t *)(v4 + 8 * v5));
  return 0;
}

BOOL WebKit::RemoteLayerBackingStore::supportsPartialRepaint(WebKit::RemoteLayerBackingStore *this)
{
  uint64_t v1;
  unint64_t v2;
  unsigned int v3;
  unint64_t v4;

  v1 = WebCore::ImageBuffer::calculateBackendSize(this, *(FloatSize *)((char *)this + 28), *((float *)this + 12));
  v2 = HIDWORD(v1);
  if ((int)v1 >= 0)
    v3 = v1;
  else
    v3 = -(int)v1;
  if (v1 < 0)
    LODWORD(v2) = -HIDWORD(v1);
  v4 = v3 * (unint64_t)v2;
  return (v4 & 0xFFFFFFFF00000000) != 0 || v4 > 0x1000;
}

WTF **WebKit::RemoteLayerBackingStore::setDelegatedContents(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  WTF *v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  WTF *v19[8];
  int v20;
  char v21;

  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>::__copy_constructor((unsigned int *)v19, (unsigned int *)a2);
  std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::operator=[abi:sn180100]<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,void>(a1 + 104, (uint64_t)v19);
  if (v20 != -1)
    __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v20]((int)&v21, (WTF::MachSendRight *)v19);
  v4 = *(_QWORD *)(a2 + 72);
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v7 = off_1E34B8AD0;
    *((_QWORD *)v7 + 1) = v4;
    v19[0] = v7;
    v9 = *(unsigned int *)(a1 + 212);
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 208))
    {
      v10 = v9 + (v9 >> 2);
      if (v10 >= 0x10)
        v11 = v10 + 1;
      else
        v11 = 16;
      if (v11 <= v9 + 1)
        v12 = v9 + 1;
      else
        v12 = v11;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 200, v12);
      v9 = *(unsigned int *)(a1 + 212);
      v13 = *(_QWORD *)(a1 + 200);
      v14 = v19[0];
      v19[0] = 0;
      *(_QWORD *)(v13 + 8 * v9) = v14;
    }
    else
    {
      v15 = *(_QWORD *)(a1 + 200);
      v19[0] = 0;
      *(_QWORD *)(v15 + 8 * v9) = v7;
    }
    *(_DWORD *)(a1 + 212) = v9 + 1;
  }
  if (*(_BYTE *)(a2 + 88))
  {
    v16 = *(_QWORD *)(a2 + 80);
    if (!*(_BYTE *)(a1 + 192))
      *(_BYTE *)(a1 + 192) = 1;
    *(_QWORD *)(a1 + 184) = v16;
  }
  else if (*(_BYTE *)(a1 + 192))
  {
    *(_BYTE *)(a1 + 192) = 0;
  }
  WebCore::Region::Region((WebCore::Region *)v19);
  WebCore::Region::operator=();
  WebCore::Region::~Region((WebCore::Region *)v19);
  return WTF::Vector<WebCore::FloatRect,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WTF **)(a1 + 216), v17);
}

void sub_197049D4C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WTF *a9)
{
  _Unwind_Resume(a1);
}

WTF **std::unique_ptr<WebKit::`anonymous namespace'::DelegatedContentsFenceFlusher>::~unique_ptr[abi:sn180100](WTF **a1, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    v4 = (unsigned int *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v4 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      }
    }
    WTF::fastFree(v3, a2);
  }
  return a1;
}

void WebKit::RemoteLayerBackingStore::dirtyRepaintCounterIfNecessary(WebKit::RemoteLayerBackingStore *this)
{
  _BYTE v1[24];
  IntRect v2;

  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 2) + 48) + 72))(*(_QWORD *)(*((_QWORD *)this + 2) + 48)))
  {
    v2 = (IntRect)xmmword_1978CF490;
    WebCore::Region::Region((WebCore::Region *)v1, &v2);
    WebCore::Region::unite();
    WebCore::Region::~Region((WebCore::Region *)v1);
  }
}

void sub_197049EB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WebCore::Region::~Region((WebCore::Region *)va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::RemoteLayerBackingStoreProperties::layerContentsBufferFromBackendHandle@<X0>(uint64_t a1@<X0>, char a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  char v5;
  _QWORD v6[3];
  _QWORD *v7;

  v5 = a2;
  *a3 = 0;
  v6[0] = a3;
  v6[1] = &v5;
  v6[2] = a3;
  v3 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v3 == -1)
  {
    result = std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
  }
  else
  {
    v7 = v6;
    return ((uint64_t (*)(_QWORD **, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN6WebKit33RemoteLayerBackingStoreProperties36layerContentsBufferFromBackendHandleEONS_7variantIJN7WebCore21ShareableBitmapHandleENS6_13MachSendRightEEEENS8_17LayerContentsTypeEE3__0JZNS9_36layerContentsBufferFromBackendHandleESF_SG_E3__1EEEEEJRNS0_6__implIJSC_SD_EEEEEEDcOT_DpOT0____fmatrix
                                                        + v3))(&v7, a1);
  }
  return result;
}

void sub_197049F38(_Unwind_Exception *exception_object)
{
  const void **v1;
  const void *v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

WebKit::RemoteLayerBackingStore *WebKit::RemoteLayerBackingStore::purgeFrontBufferForTesting(WebKit::RemoteLayerBackingStore *this)
{
  uint64_t v1;
  uint64_t v2;
  WebKit::RemoteLayerBackingStore *v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 832);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = this;
      this = *(WebKit::RemoteLayerBackingStore **)(v2 + 88);
      if (this)
        return (WebKit::RemoteLayerBackingStore *)WebKit::RemoteLayerBackingStoreCollection::purgeFrontBufferForTesting(this, v3);
    }
  }
  return this;
}

uint64_t WebKit::RemoteLayerBackingStoreCollection::purgeFrontBufferForTesting(WebKit::RemoteLayerBackingStoreCollection *this, WebKit::RemoteLayerBackingStore *a2)
{
  uint64_t result;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  _QWORD *v11;
  char v12;
  _QWORD v13[2];

  result = (*(uint64_t (**)(WebKit::RemoteLayerBackingStore *))(*(_QWORD *)a2 + 16))(a2);
  if ((_DWORD)result)
  {
    v5 = *((_QWORD *)a2 + 40);
    if (v5)
    {
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v5 + 16));
      v13[0] = 0;
      v13[1] = 0;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v5 + 16));
      v11 = (_QWORD *)v5;
      v12 = 1;
      WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>>((uint64_t)v13, (unint64_t)&v11);
      v7 = (uint64_t)v11;
      v11 = 0;
      if (v7)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v7 + 16), v6);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E34B8B70;
      v11 = v8;
      WebKit::RemoteLayerBackingStoreCollection::sendMarkBuffersVolatile(*(WebKit::WebPage **)(*((_QWORD *)this + 2) + 24), (uint64_t)v13, (uint64_t *)&v11, 1);
      if (v11)
        (*(void (**)(_QWORD *))(*v11 + 8))(v11);
      WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v13, v9);
      return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), v10);
    }
  }
  else
  {
    result = (*(uint64_t (**)(WebKit::RemoteLayerBackingStore *))(*(_QWORD *)a2 + 24))(a2);
    if ((result & 1) != 0)
    {
      if (!*((_BYTE *)a2 + 24))
        return WebKit::RemoteLayerWithInProcessRenderingBackingStore::setBufferVolatile((WebKit::RemoteLayerWithInProcessRenderingBackingStore *)result, (WebCore::ImageBuffer **)a2 + 40, 1);
    }
    else
    {
      result = 96;
      __break(0xC471u);
    }
  }
  return result;
}

void sub_19704A0E4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  unsigned __int8 **v4;
  void *v6;
  va_list va;

  va_start(va, a4);
  if (a3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(a3 + 16), a2);
  WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*v4, v6);
  _Unwind_Resume(a1);
}

WebKit::RemoteLayerBackingStore *WebKit::RemoteLayerBackingStore::purgeBackBufferForTesting(WebKit::RemoteLayerBackingStore *this)
{
  uint64_t v1;
  uint64_t v2;
  WebKit::RemoteLayerBackingStore *v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 832);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = this;
      this = *(WebKit::RemoteLayerBackingStore **)(v2 + 88);
      if (this)
        return (WebKit::RemoteLayerBackingStore *)WebKit::RemoteLayerBackingStoreCollection::purgeBackBufferForTesting(this, v3);
    }
  }
  return this;
}

uint64_t WebKit::RemoteLayerBackingStoreCollection::purgeBackBufferForTesting(WebKit::RemoteLayerBackingStoreCollection *this, WebKit::RemoteLayerBackingStore *a2)
{
  uint64_t result;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  _QWORD *v11;
  char v12;
  _QWORD v13[2];

  result = (*(uint64_t (**)(WebKit::RemoteLayerBackingStore *))(*(_QWORD *)a2 + 16))(a2);
  if ((_DWORD)result)
  {
    v5 = *((_QWORD *)a2 + 40);
    if (v5)
    {
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v5 + 16));
      v13[0] = 0;
      v13[1] = 0;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v5 + 16));
      v11 = (_QWORD *)v5;
      v12 = 6;
      WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>>((uint64_t)v13, (unint64_t)&v11);
      v7 = (uint64_t)v11;
      v11 = 0;
      if (v7)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v7 + 16), v6);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E34B8B98;
      v11 = v8;
      WebKit::RemoteLayerBackingStoreCollection::sendMarkBuffersVolatile(*(WebKit::WebPage **)(*((_QWORD *)this + 2) + 24), (uint64_t)v13, (uint64_t *)&v11, 1);
      if (v11)
        (*(void (**)(_QWORD *))(*v11 + 8))(v11);
      WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v13, v9);
      return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), v10);
    }
  }
  else
  {
    result = (*(uint64_t (**)(WebKit::RemoteLayerBackingStore *))(*(_QWORD *)a2 + 24))(a2);
    if ((result & 1) != 0)
    {
      if (!*((_BYTE *)a2 + 24))
      {
        result = WebKit::RemoteLayerWithInProcessRenderingBackingStore::setBufferVolatile((WebKit::RemoteLayerWithInProcessRenderingBackingStore *)result, (WebCore::ImageBuffer **)a2 + 42, 1);
        if (!*((_BYTE *)a2 + 24))
          return WebKit::RemoteLayerWithInProcessRenderingBackingStore::setBufferVolatile((WebKit::RemoteLayerWithInProcessRenderingBackingStore *)result, (WebCore::ImageBuffer **)a2 + 44, 1);
      }
    }
    else
    {
      result = 96;
      __break(0xC471u);
    }
  }
  return result;
}

void sub_19704A2E0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  unsigned __int8 **v4;
  void *v6;
  va_list va;

  va_start(va, a4);
  if (a3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(a3 + 16), a2);
  WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*v4, v6);
  _Unwind_Resume(a1);
}

WebKit::RemoteLayerBackingStore *WebKit::RemoteLayerBackingStore::markFrontBufferVolatileForTesting(WebKit::RemoteLayerBackingStore *this)
{
  uint64_t v1;
  uint64_t v2;
  WebKit::RemoteLayerBackingStore *v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 832);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = this;
      this = *(WebKit::RemoteLayerBackingStore **)(v2 + 88);
      if (this)
        return (WebKit::RemoteLayerBackingStore *)WebKit::RemoteLayerBackingStoreCollection::markFrontBufferVolatileForTesting(this, v3);
    }
  }
  return this;
}

uint64_t WebKit::RemoteLayerBackingStoreCollection::markFrontBufferVolatileForTesting(WebKit::RemoteLayerBackingStoreCollection *this, WebKit::RemoteLayerBackingStore *a2)
{
  uint64_t result;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  _QWORD *v11;
  char v12;
  _QWORD v13[2];

  result = (*(uint64_t (**)(WebKit::RemoteLayerBackingStore *))(*(_QWORD *)a2 + 16))(a2);
  if ((_DWORD)result)
  {
    v5 = *((_QWORD *)a2 + 40);
    if (v5)
    {
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v5 + 16));
      v13[0] = 0;
      v13[1] = 0;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v5 + 16));
      v11 = (_QWORD *)v5;
      v12 = 1;
      WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>>((uint64_t)v13, (unint64_t)&v11);
      v7 = (uint64_t)v11;
      v11 = 0;
      if (v7)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v7 + 16), v6);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E34B8BC0;
      v11 = v8;
      WebKit::RemoteLayerBackingStoreCollection::sendMarkBuffersVolatile(*(WebKit::WebPage **)(*((_QWORD *)this + 2) + 24), (uint64_t)v13, (uint64_t *)&v11, 0);
      if (v11)
        (*(void (**)(_QWORD *))(*v11 + 8))(v11);
      WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v13, v9);
      return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), v10);
    }
  }
  else
  {
    result = (*(uint64_t (**)(WebKit::RemoteLayerBackingStore *))(*(_QWORD *)a2 + 24))(a2);
    if ((result & 1) != 0)
    {
      if (!*((_BYTE *)a2 + 24))
        return WebKit::RemoteLayerWithInProcessRenderingBackingStore::setBufferVolatile((WebKit::RemoteLayerWithInProcessRenderingBackingStore *)result, (WebCore::ImageBuffer **)a2 + 40, 0);
    }
    else
    {
      result = 96;
      __break(0xC471u);
    }
  }
  return result;
}

void sub_19704A4C8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  unsigned __int8 **v4;
  void *v6;
  va_list va;

  va_start(va, a4);
  if (a3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(a3 + 16), a2);
  WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*v4, v6);
  _Unwind_Resume(a1);
}

void WebKit::RemoteLayerBackingStoreCollection::~RemoteLayerBackingStoreCollection(WebKit::RemoteLayerBackingStoreCollection *this)
{
  WebCore::TimerBase *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)this = off_1E34B8A10;
  *((_QWORD *)this + 11) = off_1E34B3740;
  v2 = (WebKit::RemoteLayerBackingStoreCollection *)((char *)this + 88);
  v3 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  v5 = *((_QWORD *)this + 9);
  if (v5)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v5, v4);
  v6 = *((_QWORD *)this + 7);
  if (v6)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v6, v4);
  v7 = *((_QWORD *)this + 5);
  if (v7)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v7, v4);
  v8 = *((_QWORD *)this + 3);
  if (v8)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v8, v4);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v4);
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteLayerBackingStoreCollection::~RemoteLayerBackingStoreCollection(this);
  WTF::fastFree(v1, v2);
}

void WebKit::RemoteRenderingBackendProxy::LayerPrepareBuffersData::~LayerPrepareBuffersData(WebKit::RemoteRenderingBackendProxy::LayerPrepareBuffersData *this)
{
  void *v2;
  uint64_t v3;

  WebCore::Region::~Region((WebKit::RemoteRenderingBackendProxy::LayerPrepareBuffersData *)((char *)this + 8));
  v3 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), v2);
}

uint64_t **WebKit::RemoteLayerBackingStoreCollection::backingStoreBecameUnreachable(WebKit::RemoteLayerBackingStoreCollection *this, WebKit::RemoteLayerBackingStore *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t **result;
  _OWORD v9[2];
  uint64_t v10;
  uint64_t *v11[5];
  _OWORD v12[2];
  uint64_t v13;

  v4 = (uint64_t *)((char *)this + 24);
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::find<WebKit::RemoteLayerBackingStore>((uint64_t)this + 24, (uint64_t)a2, (uint64_t **)v12);
  v5 = *((_QWORD *)this + 3);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    v7 = (uint64_t *)(v5 + 8 * v6);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  result = WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(v11, v4, v7, (uint64_t *)(v5 + 8 * v6));
  if (*((uint64_t **)&v12[0] + 1) != v11[1])
  {
    WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::RemoteLayerBackingStore>((uint64_t)this + 40, (unsigned int *)a2, (uint64_t)v11);
    v9[0] = v12[0];
    v9[1] = v12[1];
    v10 = v13;
    WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove((uint64_t)v4, (uint64_t)v9);
    return (uint64_t **)(*(uint64_t (**)(WebKit::RemoteLayerBackingStoreCollection *, WebKit::RemoteLayerBackingStore *))(*(_QWORD *)this + 64))(this, a2);
  }
  return result;
}

unsigned int *WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::RemoteLayerBackingStore>@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  void *v21;
  unsigned int *result;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 <= v6)
    goto LABEL_26;
  v8 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v9 = *(unsigned int *)(v8 - 4);
    if (!(_DWORD)v9)
      goto LABEL_20;
    v10 = 0;
    do
    {
      v11 = --v9;
      v12 = *(_QWORD *)(v8 + 8 * v9);
      if ((unint64_t)(v12 + 1) >= 2 && !*(_QWORD *)(v12 + 8))
      {
        *(_QWORD *)(v8 + 8 * v9) = 0;
        do
        {
          v13 = __ldaxr((unsigned int *)v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, (unsigned int *)v12));
        if (!v14)
        {
          atomic_store(1u, (unsigned int *)v12);
          v30 = v9;
          v31 = v8;
          v29 = v10;
          v32 = v9;
          WTF::fastFree((WTF *)v12, a2);
          v8 = v31;
          v11 = v32;
          v9 = v30;
          v10 = v29;
        }
        *(_QWORD *)(v8 + 8 * v11) = -1;
        ++v10;
      }
    }
    while (v11);
    v8 = *(_QWORD *)a1;
    if (v10)
    {
      *(_DWORD *)(v8 - 16) += v10;
      v27 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v28 = *(_DWORD *)(v27 - 12);
      else
        v28 = 0;
      *(_DWORD *)(v27 - 12) = v28 - v10;
      v8 = *(_QWORD *)a1;
    }
    if (v8)
    {
      v15 = *(_DWORD *)(v8 - 4);
      if (v15 >= 9 && 6 * *(_DWORD *)(v8 - 12) < v15)
      {
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
        v8 = *(_QWORD *)a1;
        *(_DWORD *)(a1 + 8) = 0;
        if (!v8)
          goto LABEL_24;
LABEL_21:
        LODWORD(v8) = *(_DWORD *)(v8 - 12);
        v17 = 0x7FFFFFFF;
        if (v8 >= 0x7FFFFFFF)
          goto LABEL_25;
        goto LABEL_24;
      }
LABEL_20:
      *(_DWORD *)(a1 + 8) = 0;
      goto LABEL_21;
    }
  }
  LODWORD(v8) = 0;
  *(_DWORD *)(a1 + 8) = 0;
LABEL_24:
  v17 = v8;
LABEL_25:
  *(_DWORD *)(a1 + 12) = 2 * v17;
LABEL_26:
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a2 + 2, (uint64_t)a2);
  v18 = (unsigned int *)*((_QWORD *)a2 + 1);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 + 1, v18));
  do
    v20 = __ldaxr(v18);
  while (__stlxr(v20 + 1, v18));
  v33 = (WTF *)v18;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v33, a3);
  result = (unsigned int *)v33;
  v33 = 0;
  if (result)
  {
    do
    {
      v25 = __ldaxr(result);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, result));
    if (!v26)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v21);
    }
  }
  if (v18)
  {
    do
    {
      v23 = __ldaxr(v18);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v18));
    if (!v24)
    {
      atomic_store(1u, v18);
      return (unsigned int *)WTF::fastFree((WTF *)v18, v21);
    }
  }
  return result;
}

void sub_19704A8F0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14)
{
  unsigned int *v14;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;

  if (a14)
  {
    do
    {
      v18 = __ldaxr((unsigned int *)a14);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, (unsigned int *)a14));
    if (!v19)
    {
      atomic_store(1u, (unsigned int *)a14);
      WTF::fastFree(a14, a2);
    }
  }
  if (v14)
  {
    do
    {
      v16 = __ldaxr(v14);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v14));
    if (!v17)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;

  v4 = WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::remove((uint64_t *)a1, *(unsigned int ***)(a2 + 8));
  v5 = *(_DWORD *)(a1 + 12);
  v6 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v6;
  if (v6 > v5)
  {
    _ZN3WTF7HashSetINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS_15HashTableTraitsEE8removeIfIZNS_11WeakHashSetIN6WebKit23RemoteLayerBackingStoreES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)a1, v3);
    *(_DWORD *)(a1 + 8) = 0;
    v7 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      LODWORD(v7) = *(_DWORD *)(v7 - 12);
      if (v7 > 0x7FFFFFFE)
        LODWORD(v7) = 0x7FFFFFFF;
    }
    *(_DWORD *)(a1 + 12) = 2 * v7;
  }
  return v4;
}

uint64_t WebKit::RemoteLayerBackingStoreCollection::sendMarkBuffersVolatile(WebKit::WebPage *a1, uint64_t a2, uint64_t *a3, char a4)
{
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  _QWORD *v11;

  v7 = (uint64_t *)WebKit::WebPage::ensureRemoteRenderingBackendProxy(a1);
  v8 = *a3;
  *a3 = 0;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = &off_1E34B8C60;
  v9[1] = v8;
  v11 = v9;
  WebKit::RemoteRenderingBackendProxy::markSurfacesVolatile(v7, a2, (uint64_t *)&v11, a4);
  result = (uint64_t)v11;
  v11 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19704AA5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::RemoteLayerBackingStoreCollection::markInProcessBackingStoreVolatile(WebKit::RemoteLayerWithInProcessRenderingBackingStore *a1, uint64_t a2, char a3, double a4)
{
  WebKit::RemoteLayerWithInProcessRenderingBackingStore *v6;
  double v7;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;

  v6 = a1;
  if ((a3 & 2) != 0 && (v7 = a4 - *(double *)(a2 + 312), v7 < 1.0))
  {
    if (v7 >= 0.2 && *(_BYTE *)(a2 + 24) == 0)
      WebKit::RemoteLayerWithInProcessRenderingBackingStore::setBufferVolatile(a1, (WebCore::ImageBuffer **)(a2 + 352), 0);
    return 0;
  }
  else
  {
    if (*(_BYTE *)(a2 + 24))
    {
      v9 = 1;
    }
    else
    {
      a1 = (WebKit::RemoteLayerWithInProcessRenderingBackingStore *)WebKit::RemoteLayerWithInProcessRenderingBackingStore::setBufferVolatile(a1, (WebCore::ImageBuffer **)(a2 + 352), 0);
      v9 = (uint64_t)a1;
      if (!*(_BYTE *)(a2 + 24))
      {
        a1 = (WebKit::RemoteLayerWithInProcessRenderingBackingStore *)WebKit::RemoteLayerWithInProcessRenderingBackingStore::setBufferVolatile(a1, (WebCore::ImageBuffer **)(a2 + 336), 0);
        v9 = a1 & v9;
      }
    }
    v10 = *(_QWORD *)(a2 + 8);
    ++*((_DWORD *)v6 + 16);
    if (!v10
      || !*(_QWORD *)(v10 + 8)
      || ((v13 = v10,
           a1 = (WebKit::RemoteLayerWithInProcessRenderingBackingStore *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)v6 + 7, &v13), (a3 & 1) == 0)? (v11 = (char)a1): (v11 = 0), (v11 & 1) == 0))
    {
      if (!*(_BYTE *)(a2 + 24))
        return WebKit::RemoteLayerWithInProcessRenderingBackingStore::setBufferVolatile(a1, (WebCore::ImageBuffer **)(a2 + 320), 0) & v9;
    }
  }
  return v9;
}

uint64_t WebKit::RemoteLayerBackingStoreCollection::markBackingStoreVolatileAfterReachabilityChange(WebKit::RemoteLayerBackingStoreCollection *this, WebKit::RemoteLayerBackingStore *a2)
{
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  if ((*(unsigned int (**)(WebKit::RemoteLayerBackingStore *))(*(_QWORD *)a2 + 16))(a2))
  {
    v10 = 0;
    v11 = 0;
    WebKit::RemoteLayerBackingStoreCollection::collectRemoteRenderingBackingStoreBufferIdentifiersToMarkVolatile((uint64_t)this, (uint64_t)a2, 0, (uint64_t)&v10, 0.0);
    if (HIDWORD(v11))
    {
      WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
      v5 = (unsigned int *)*((_QWORD *)this + 1);
      if (v5)
      {
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 + 1, v5));
      }
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = &off_1E34B8BE8;
      v7[1] = v5;
      v9 = v7;
      WebKit::RemoteLayerBackingStoreCollection::sendMarkBuffersVolatile(*(WebKit::WebPage **)(*((_QWORD *)this + 2) + 24), (uint64_t)&v10, (uint64_t *)&v9, 0);
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
    return WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v4);
  }
  else if (((*(uint64_t (**)(WebKit::RemoteLayerBackingStore *))(*(_QWORD *)a2 + 24))(a2) & 1) != 0)
  {
    return WebKit::RemoteLayerBackingStoreCollection::markInProcessBackingStoreVolatile(this, (uint64_t)a2, 0, 0.0);
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

void sub_19704ACC0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  if (a4)
    (*(void (**)(uint64_t))(*(_QWORD *)a4 + 8))(a4);
  WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::RemoteLayerBackingStoreCollection::collectRemoteRenderingBackingStoreBufferIdentifiersToMarkVolatile(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, double a5)
{
  uint64_t v5;
  void *v11;
  double v12;
  uint64_t v13;
  uint64_t v15;
  char v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;

  v5 = *(_QWORD *)(a2 + 320);
  if (!v5)
    return 1;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v5 + 16));
  if ((a3 & 2) != 0 && (v12 = a5 - *(double *)(a2 + 312), v12 < 1.0))
  {
    if (v12 < 0.2 || (*(_BYTE *)(v5 + 65) & 4) != 0)
    {
      v13 = 0;
    }
    else
    {
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v5 + 16));
      v20 = *(unsigned int *)(a4 + 12);
      if ((_DWORD)v20 == *(_DWORD *)(a4 + 8))
      {
        v24 = v20 + (v20 >> 2);
        if (v24 >= 0x10)
          v25 = v24 + 1;
        else
          v25 = 16;
        if (v25 <= v20 + 1)
          v26 = v20 + 1;
        else
          v26 = v25;
        WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a4, v26);
        v13 = 0;
        v20 = *(unsigned int *)(a4 + 12);
      }
      else
      {
        v13 = 0;
      }
      v21 = v20 + 1;
      v22 = *(_QWORD *)a4 + 16 * v20;
      *(_QWORD *)v22 = v5;
      *(_BYTE *)(v22 + 8) = 4;
      *(_DWORD *)(a4 + 12) = v21;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a2 + 8);
    ++*(_DWORD *)(a1 + 64);
    if (v15 && *(_QWORD *)(v15 + 8))
    {
      v27 = v15;
      v16 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)(a1 + 56), &v27) ^ 1;
    }
    else
    {
      v16 = 1;
    }
    v17 = (v16 | a3) & 1 | 6;
    if ((v17 & ~*(unsigned __int8 *)(v5 + 65)) != 0)
    {
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v5 + 16));
      v27 = v5;
      v28 = v17;
      v18 = *(unsigned int *)(a4 + 12);
      if ((_DWORD)v18 == *(_DWORD *)(a4 + 8))
      {
        WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>>(a4, (unint64_t)&v27);
        v23 = v27;
        v27 = 0;
        if (v23)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v23 + 16), v11);
      }
      else
      {
        v19 = *(_QWORD *)a4 + 16 * v18;
        *(_QWORD *)v19 = v5;
        *(_BYTE *)(v19 + 8) = v17;
        ++*(_DWORD *)(a4 + 12);
      }
    }
    v13 = 1;
  }
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), v11);
  return v13;
}

void sub_19704AEE8(_Unwind_Exception *a1, void *a2)
{
  unsigned __int8 **v2;
  void *v4;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*v2, a2);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*v2, v4);
  _Unwind_Resume(a1);
}

uint64_t WebKit::RemoteLayerBackingStoreCollection::collectAllRemoteRenderingBufferIdentifiersToMarkVolatile(uint64_t *a1, unsigned __int8 a2, unsigned __int8 a3, uint64_t a4)
{
  double v8;
  double v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t i;
  uint64_t v24;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  v9 = v8;
  v10 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)a1 + 3);
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(&v28, a1 + 3, v10, v11);
  v12 = (_QWORD *)a1[3];
  if (v12)
  {
    v13 = *((unsigned int *)v12 - 1);
    v14 = &v12[v13];
  }
  else
  {
    v14 = 0;
    v13 = 0;
  }
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(&v26, a1 + 3, v14, &v12[v13]);
  v15 = v29;
  if (v29 == v27)
  {
    v16 = 1;
  }
  else
  {
    v16 = 1;
    do
    {
      v17 = *(_QWORD *)(*(_QWORD *)v15 + 8);
      if (v17 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17))
        v16 &= WebKit::RemoteLayerBackingStoreCollection::collectRemoteRenderingBackingStoreBufferIdentifiersToMarkVolatile((uint64_t)a1, v17, a2, a4, v9);
      WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v28);
      v15 = v29;
    }
    while (v29 != v27);
  }
  v18 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)a1 + 5);
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(&v28, a1 + 5, v18, v19);
  v20 = (_QWORD *)a1[5];
  if (v20)
  {
    v21 = *((unsigned int *)v20 - 1);
    v22 = &v20[v21];
  }
  else
  {
    v22 = 0;
    v21 = 0;
  }
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(&v26, a1 + 5, v22, &v20[v21]);
  for (i = v29; v29 != v27; i = v29)
  {
    v24 = *(_QWORD *)(*(_QWORD *)i + 8);
    if (v24 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24))
      v16 &= WebKit::RemoteLayerBackingStoreCollection::collectRemoteRenderingBackingStoreBufferIdentifiersToMarkVolatile((uint64_t)a1, v24, a3, a4, v9);
    WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v28);
  }
  return v16 & 1;
}

void *WebKit::RemoteLayerBackingStoreCollection::gpuProcessConnectionWasDestroyed(WebKit::RemoteLayerBackingStoreCollection *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  WebKit::RemoteLayerBackingStore *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  void *result;
  WebKit::RemoteLayerBackingStore *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;

  v2 = (uint64_t *)((char *)this + 24);
  v3 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 3);
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(&v18, v2, v3, v4);
  v5 = *((_QWORD *)this + 3);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    v7 = (uint64_t *)(v5 + 8 * v6);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(&v16, v2, v7, (uint64_t *)(v5 + 8 * v6));
  while (v19 != v17)
  {
    v8 = *(WebKit::RemoteLayerBackingStore **)(*(_QWORD *)v19 + 8);
    if ((*(unsigned int (**)(WebKit::RemoteLayerBackingStore *))(*(_QWORD *)v8 + 16))(v8))
      WebKit::RemoteLayerBackingStore::setNeedsDisplay(v8);
    WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v18);
  }
  v9 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 5);
  WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(&v18, (uint64_t *)this + 5, v9, v10);
  v11 = *((_QWORD *)this + 5);
  if (v11)
  {
    v12 = *(unsigned int *)(v11 - 4);
    v13 = (uint64_t *)(v11 + 8 * v12);
  }
  else
  {
    v13 = 0;
    v12 = 0;
  }
  result = WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(&v16, (uint64_t *)this + 5, v13, (uint64_t *)(v11 + 8 * v12));
  while (v19 != v17)
  {
    v15 = *(WebKit::RemoteLayerBackingStore **)(*(_QWORD *)v19 + 8);
    if ((*(unsigned int (**)(WebKit::RemoteLayerBackingStore *))(*(_QWORD *)v15 + 16))(v15))
      WebKit::RemoteLayerBackingStore::setNeedsDisplay(v15);
    result = WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v18);
  }
  return result;
}

void WebKit::RemoteLayerTreePropertyApplier::applyPropertiesToLayer(CALayer *a1, Color *a2, WebKit::RemoteLayerTreeHost *this, float *a4, int a5, double a6)
{
  uint64_t *v8;
  uint64_t v9;
  CALayer *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  const __CFString *v20;
  uint64_t v21;
  const void *v22;
  uint64_t v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  CALayer *v27;
  uint64_t v28;
  CALayer *v29;
  int v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  void *v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  const void *v48;
  unsigned int v49;
  BOOL v50;
  uint64_t v51;
  CFTypeRef *v52;
  uint64_t v53;
  CFTypeRef v54;
  const void *v55;
  uint64_t v56;
  const void *v57;
  const void *v58;
  const void *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  const void *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const void **v67;
  const void *v68;
  WTF *v69;
  uint64_t v70;
  const void *v71;
  double v72;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v77;
  double v78;
  double v79;
  double v80;
  CGFloat v81;
  CGFloat v82;
  CGFloat v83;
  CGFloat v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  CFTypeRef *v92;
  _OWORD v93[8];
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  _OWORD v102[8];
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  unint64_t v111;
  uint64_t v112;
  __int128 v113;
  const void *v114;
  int v115;
  uint64_t v116;
  CGRect v117;
  CGRect v118;
  CGRect v119;

  v8 = (uint64_t *)this;
  v9 = (uint64_t)a2;
  v10 = a1;
  v116 = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)a4;
  if ((*(_QWORD *)a4 & 0x40) != 0)
  {
    -[CALayer setPosition:](a1, "setPosition:", a4[88], a4[89]);
    -[CALayer setZPosition:](v10, "setZPosition:", a4[90]);
    v11 = *(_QWORD *)a4;
    if ((*(_QWORD *)a4 & 0x80) == 0)
    {
LABEL_3:
      if ((v11 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else if ((v11 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  -[CALayer setAnchorPoint:](v10, "setAnchorPoint:", a4[91], a4[92]);
  -[CALayer setAnchorPointZ:](v10, "setAnchorPointZ:", a4[93]);
  v11 = *(_QWORD *)a4;
  if ((*(_QWORD *)a4 & 0x100) == 0)
  {
LABEL_4:
    if ((v11 & 2) == 0)
      goto LABEL_5;
    goto LABEL_23;
  }
LABEL_22:
  WebCore::FloatRect::operator CGRect();
  -[CALayer setBounds:](v10, "setBounds:");
  v11 = *(_QWORD *)a4;
  if ((*(_QWORD *)a4 & 2) == 0)
  {
LABEL_5:
    if ((v11 & 4) == 0)
      goto LABEL_6;
    goto LABEL_27;
  }
LABEL_23:
  if (*((_QWORD *)a4 + 3))
  {
    WebCore::TransformationMatrix::operator CATransform3D();
  }
  else
  {
    v12 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 80);
    v107 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 64);
    v108 = v12;
    v13 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 112);
    v109 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 96);
    v110 = v13;
    v14 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 16);
    v103 = *MEMORY[0x1E0CD2610];
    v104 = v14;
    v15 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 48);
    v105 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 32);
    v106 = v15;
  }
  v102[4] = v107;
  v102[5] = v108;
  v102[6] = v109;
  v102[7] = v110;
  v102[0] = v103;
  v102[1] = v104;
  v102[2] = v105;
  v102[3] = v106;
  -[CALayer setTransform:](v10, "setTransform:", v102);
  v11 = *(_QWORD *)a4;
  if ((*(_QWORD *)a4 & 4) == 0)
  {
LABEL_6:
    if ((v11 & 0x40000000) == 0)
      goto LABEL_7;
    goto LABEL_31;
  }
LABEL_27:
  if (*((_QWORD *)a4 + 4))
  {
    WebCore::TransformationMatrix::operator CATransform3D();
  }
  else
  {
    v16 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 80);
    v98 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 64);
    v99 = v16;
    v17 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 112);
    v100 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 96);
    v101 = v17;
    v18 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 16);
    v94 = *MEMORY[0x1E0CD2610];
    v95 = v18;
    v19 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 48);
    v96 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 32);
    v97 = v19;
  }
  v93[4] = v98;
  v93[5] = v99;
  v93[6] = v100;
  v93[7] = v101;
  v93[0] = v94;
  v93[1] = v95;
  v93[2] = v96;
  v93[3] = v97;
  -[CALayer setSublayerTransform:](v10, "setSublayerTransform:", v93);
  v11 = *(_QWORD *)a4;
  if ((*(_QWORD *)a4 & 0x40000000) == 0)
  {
LABEL_7:
    if ((v11 & 0x100000000) == 0)
      goto LABEL_8;
    goto LABEL_32;
  }
LABEL_31:
  -[CALayer setHidden:](v10, "setHidden:", *((unsigned __int8 *)a4 + 591));
  v11 = *(_QWORD *)a4;
  if ((*(_QWORD *)a4 & 0x100000000) == 0)
  {
LABEL_8:
    if ((v11 & 0x20000) == 0)
      goto LABEL_9;
    goto LABEL_33;
  }
LABEL_32:
  -[CALayer setGeometryFlipped:](v10, "setGeometryFlipped:", *((unsigned __int8 *)a4 + 593));
  v11 = *(_QWORD *)a4;
  if ((*(_QWORD *)a4 & 0x20000) == 0)
  {
LABEL_9:
    if ((v11 & 0x100000) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  -[CALayer setContentsScale:](v10, "setContentsScale:", a4[137]);
  -[CALayer setRasterizationScale:](v10, "setRasterizationScale:", a4[137]);
  v11 = *(_QWORD *)a4;
  if ((*(_QWORD *)a4 & 0x100000) == 0)
  {
LABEL_10:
    if ((v11 & 0x400000000) == 0)
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  *(float *)&a6 = a4[140];
  -[CALayer setOpacity:](v10, "setOpacity:", a6);
  v11 = *(_QWORD *)a4;
  if ((*(_QWORD *)a4 & 0x400000000) == 0)
  {
LABEL_11:
    if ((v11 & 1) == 0)
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  -[CALayer setMasksToBounds:](v10, "setMasksToBounds:", *((unsigned __int8 *)a4 + 595));
  v11 = *(_QWORD *)a4;
  if ((*(_QWORD *)a4 & 1) == 0)
  {
LABEL_12:
    if ((v11 & 0x200000) == 0)
      goto LABEL_13;
    goto LABEL_39;
  }
LABEL_36:
  if (*((_QWORD *)a4 + 2))
    v20 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v20 = &stru_1E351F1B8;
  -[CALayer setName:](v10, "setName:", v20);
  v11 = *(_QWORD *)a4;
  if ((*(_QWORD *)a4 & 0x200000) == 0)
  {
LABEL_13:
    if ((v11 & 0x400000) == 0)
      goto LABEL_14;
    goto LABEL_45;
  }
LABEL_39:
  if ((*((_BYTE *)a4 + 574) & 4) != 0)
  {
    WebCore::cachedCGColor((WebCore *)(a4 + 142), a2);
    v21 = v113;
  }
  else
  {
    v21 = 0;
    *(_QWORD *)&v113 = 0;
  }
  -[CALayer setBackgroundColor:](v10, "setBackgroundColor:", v21);
  v22 = (const void *)v113;
  *(_QWORD *)&v113 = 0;
  if (v22)
    CFRelease(v22);
  v11 = *(_QWORD *)a4;
  if ((*(_QWORD *)a4 & 0x400000) == 0)
  {
LABEL_14:
    if ((v11 & 0x80000) == 0)
      goto LABEL_15;
    goto LABEL_51;
  }
LABEL_45:
  if ((*((_BYTE *)a4 + 582) & 4) != 0)
  {
    WebCore::cachedCGColor((WebCore *)(a4 + 144), a2);
    v23 = v113;
  }
  else
  {
    v23 = 0;
    *(_QWORD *)&v113 = 0;
  }
  -[CALayer setBorderColor:](v10, "setBorderColor:", v23);
  v24 = (const void *)v113;
  *(_QWORD *)&v113 = 0;
  if (v24)
    CFRelease(v24);
  v11 = *(_QWORD *)a4;
  if ((*(_QWORD *)a4 & 0x80000) == 0)
  {
LABEL_15:
    if ((v11 & 0x200000000) == 0)
      goto LABEL_16;
    goto LABEL_52;
  }
LABEL_51:
  -[CALayer setBorderWidth:](v10, "setBorderWidth:", a4[139]);
  v11 = *(_QWORD *)a4;
  if ((*(_QWORD *)a4 & 0x200000000) == 0)
  {
LABEL_16:
    if ((v11 & 0x800000000) == 0)
      goto LABEL_17;
    goto LABEL_53;
  }
LABEL_52:
  -[CALayer setDoubleSided:](v10, "setDoubleSided:", *((unsigned __int8 *)a4 + 594));
  v11 = *(_QWORD *)a4;
  if ((*(_QWORD *)a4 & 0x800000000) == 0)
  {
LABEL_17:
    if ((v11 & 0x200) == 0)
      goto LABEL_18;
    goto LABEL_54;
  }
LABEL_53:
  -[CALayer setOpaque:](v10, "setOpaque:", *((unsigned __int8 *)a4 + 596));
  v11 = *(_QWORD *)a4;
  if ((*(_QWORD *)a4 & 0x200) == 0)
  {
LABEL_18:
    if ((v11 & 0x40000) == 0)
      goto LABEL_57;
    goto LABEL_55;
  }
LABEL_54:
  WebCore::FloatRect::operator CGRect();
  -[CALayer setContentsRect:](v10, "setContentsRect:");
  if ((*(_QWORD *)a4 & 0x40000) == 0)
    goto LABEL_57;
LABEL_55:
  -[CALayer setCornerRadius:](v10, "setCornerRadius:", a4[138]);
  if (a4[138] != 0.0)
    -[CALayer setCornerCurve:](v10, "setCornerCurve:", *MEMORY[0x1E0CD2A60]);
LABEL_57:
  v25 = *(_QWORD *)a4;
  if ((*(_QWORD *)a4 & 8) != 0)
  {
    v115 = 0;
    if (*((_QWORD *)a4 + 5))
      WebCore::Path::addRoundedRect();
    v26 = WebCore::Path::platformPath((WebCore::Path *)&v113);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v27 = v10;
    else
      v27 = 0;
    -[CALayer setPath:](v27, "setPath:", v26);
    if (v115 != -1)
      ((void (*)(unint64_t *, char *))off_1E34B8AE8[v115])(&v111, (char *)&v113 + 8);
    v25 = *(_QWORD *)a4;
  }
  if ((v25 & 0x1000) != 0)
  {
    v28 = WebCore::Path::platformPath((WebCore::Path *)(a4 + 108));
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v29 = v10;
    else
      v29 = 0;
    -[CALayer setPath:](v29, "setPath:", v28);
    v25 = *(_QWORD *)a4;
  }
  if ((v25 & 0x1000000) != 0)
  {
    v30 = *((unsigned __int8 *)a4 + 585);
    if (v30 == 2)
    {
      v31 = (uint64_t *)MEMORY[0x1E0CD2EF8];
    }
    else if (v30 == 1)
    {
      v31 = (uint64_t *)MEMORY[0x1E0CD2E68];
    }
    else
    {
      if (*((_BYTE *)a4 + 585))
      {
        v32 = 0;
        goto LABEL_80;
      }
      v31 = (uint64_t *)MEMORY[0x1E0CD2DF0];
    }
    v32 = *v31;
LABEL_80:
    -[CALayer setMinificationFilter:](v10, "setMinificationFilter:", v32);
    v25 = *(_QWORD *)a4;
  }
  if ((v25 & 0x2000000) == 0)
    goto LABEL_91;
  v33 = *((unsigned __int8 *)a4 + 586);
  if (v33 == 2)
  {
    v34 = (uint64_t *)MEMORY[0x1E0CD2EF8];
  }
  else if (v33 == 1)
  {
    v34 = (uint64_t *)MEMORY[0x1E0CD2E68];
  }
  else
  {
    if (*((_BYTE *)a4 + 586))
    {
      v35 = 0;
      goto LABEL_90;
    }
    v34 = (uint64_t *)MEMORY[0x1E0CD2DF0];
  }
  v35 = *v34;
LABEL_90:
  -[CALayer setMagnificationFilter:](v10, "setMagnificationFilter:", v35);
  v25 = *(_QWORD *)a4;
LABEL_91:
  if ((v25 & 0x4000000) != 0)
  {
    WebCore::PlatformCAFilters::setBlendingFiltersOnLayer();
    v25 = *(_QWORD *)a4;
  }
  if ((v25 & 0x8000000) != 0)
  {
    objc_opt_class();
    if (!((v10 == 0) | ((objc_opt_isKindOfClass() & 1) == 0)))
    {
      v36 = (_QWORD *)MEMORY[0x1E0CD2B78];
      if (*((_BYTE *)a4 + 588))
        v36 = (_QWORD *)MEMORY[0x1E0CD2B70];
      -[CALayer setFillRule:](v10, "setFillRule:", *v36);
    }
  }
  v37 = *(_QWORD *)a4;
  if ((*(_QWORD *)a4 & 0x10000) != 0)
  {
    *(float *)&a6 = a4[136];
    -[CALayer setSpeed:](v10, "setSpeed:", a6);
    v37 = *(_QWORD *)a4;
  }
  if ((v37 & 0x8000) != 0)
  {
    -[CALayer setTimeOffset:](v10, "setTimeOffset:", *((double *)a4 + 67));
    v37 = *(_QWORD *)a4;
  }
  if ((v37 & 0x80000400) != 0)
  {
    v38 = *((_QWORD *)a4 + 52);
    if (!v38 || !*((_BYTE *)a4 + 592))
      goto LABEL_175;
    if (!v9)
    {
LABEL_167:
      -[CALayer setContentsOpaque:](v10, "setContentsOpaque:", *(unsigned __int8 *)(v38 + 212), v90);
      v71 = *(const void **)(v38 + 80);
      if (v71)
      {
        CFRetain(*(CFTypeRef *)(v38 + 80));
LABEL_169:
        -[CALayer setContents:](v10, "setContents:", v71);
        if (objc_msgSend(MEMORY[0x1E0CD27A8], "instancesRespondToSelector:", sel_contentsDirtyRect)
          && *(_BYTE *)(v38 + 208))
        {
          WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v113, (const WebCore::IntRect *)(v38 + 192));
          -[CALayer contentsScale](v10, "contentsScale");
          *(float *)&v72 = v72;
          WebCore::FloatRect::scale((WebCore::FloatRect *)&v113, *(float *)&v72, *(float *)&v72);
          -[CALayer contentsDirtyRect](v10, "contentsDirtyRect");
          x = v117.origin.x;
          y = v117.origin.y;
          width = v117.size.width;
          height = v117.size.height;
          if (CGRectIsNull(v117))
          {
            WebCore::FloatRect::operator CGRect();
          }
          else
          {
            WebCore::FloatRect::operator CGRect();
            v119.origin.x = v81;
            v119.origin.y = v82;
            v119.size.width = v83;
            v119.size.height = v84;
            v118.origin.x = x;
            v118.origin.y = y;
            v118.size.width = width;
            v118.size.height = height;
            *(CGRect *)&v77 = CGRectUnion(v118, v119);
          }
          -[CALayer setContentsDirtyRect:](v10, "setContentsDirtyRect:", v77, v78, v79, v80);
        }
        CFRelease(v71);
        goto LABEL_179;
      }
      if (*(_BYTE *)(v38 + 72))
      {
        WebKit::RemoteLayerBackingStoreProperties::layerContentsBufferFromBackendHandle(v38, a5, &v113);
        v71 = (const void *)v113;
        if ((_QWORD)v113)
          goto LABEL_169;
      }
LABEL_175:
      -[CALayer _web_clearContents](v10, "_web_clearContents");
      goto LABEL_179;
    }
    v39 = *(_QWORD *)(v9 + 208);
    v111 = v39;
    v40 = *(_DWORD *)(v9 + 220);
    LODWORD(v112) = *(_DWORD *)(v9 + 216);
    HIDWORD(v112) = v40;
    *(_QWORD *)&v113 = 0;
    *(_QWORD *)(v9 + 208) = 0;
    *((_QWORD *)&v113 + 1) = 0;
    *(_QWORD *)(v9 + 216) = 0;
    WTF::Vector<WebKit::RemoteLayerTreeNode::CachedContentsBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v113, a2);
    if (a5 != 2 || !*(_BYTE *)(v38 + 120) || !*(_BYTE *)(v38 + 72) || *(_DWORD *)(v38 + 64) != 1)
    {
LABEL_164:
      WTF::Vector<WebKit::RemoteLayerTreeNode::CachedContentsBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v111, v41);
      if (*(_BYTE *)(v9 + 232) && *(_BYTE *)(v38 + 184) && *(_QWORD *)(v9 + 224) >= *(_QWORD *)(v38 + 176))
        goto LABEL_179;
      goto LABEL_167;
    }
    v91 = v9;
    v92 = (CFTypeRef *)(v38 + 104);
    v42 = v39 + 24 * v40;
    if (v40)
    {
      v90 = v8;
      v43 = 0;
      v44 = v39;
      v45 = v42;
      v46 = v42;
      do
      {
        if ((!*(_BYTE *)(v38 + 120) || *v92 != *(CFTypeRef *)v39 || *(_DWORD *)(v38 + 112) != *(_DWORD *)(v39 + 8))
          && (!*(_BYTE *)(v38 + 144)
           || *(_QWORD *)(v38 + 128) != *(_QWORD *)v39
           || *(_DWORD *)(v38 + 136) != *(_DWORD *)(v39 + 8))
          && (!*(_BYTE *)(v38 + 168)
           || *(_QWORD *)(v38 + 152) != *(_QWORD *)v39
           || *(_DWORD *)(v38 + 160) != *(_DWORD *)(v39 + 8)))
        {
          v47 = v39;
          if (v46 != v111 + 24 * HIDWORD(v112))
          {
            if (v39 == v45)
            {
              v47 = v46;
            }
            else
            {
              WTF::VectorMover<false,WebKit::RemoteLayerTreeNode::CachedContentsBuffer>::moveOverlapping(v45, v39, v46);
              v47 = v46 + v44 - v45;
            }
          }
          v48 = *(const void **)(v39 + 16);
          *(_QWORD *)(v39 + 16) = 0;
          if (v48)
            CFRelease(v48);
          v45 = v39 + 24;
          ++v43;
          v46 = v47;
        }
        v39 += 24;
        v44 += 24;
      }
      while (v39 < v42);
      v39 = v111;
      v49 = HIDWORD(v112);
      v42 = v46;
      v8 = v90;
    }
    else
    {
      v49 = 0;
      v43 = 0;
      v45 = v39;
    }
    v41 = (void *)(v39 + 24 * v49);
    if ((void *)v45 != v41)
    {
      WTF::VectorMover<false,WebKit::RemoteLayerTreeNode::CachedContentsBuffer>::moveOverlapping(v45, (uint64_t)v41, v42);
      v49 = HIDWORD(v112);
      v39 = v111;
    }
    v51 = v49 - v43;
    v50 = v49 == v43;
    HIDWORD(v112) = v49 - v43;
    v9 = v91;
    if (!v50)
    {
      if (!*(_BYTE *)(v38 + 120))
        goto LABEL_206;
      v52 = (CFTypeRef *)(v39 + 16);
      v53 = 24 * v51;
      while (*v92 != *(v52 - 2))
      {
        v52 += 3;
        v53 -= 24;
        if (!v53)
          goto LABEL_144;
      }
      v54 = *v52;
      if (*v52)
        CFRetain(*v52);
      v55 = *(const void **)(v38 + 80);
      *(_QWORD *)(v38 + 80) = v54;
      if (v55)
        CFRelease(v55);
    }
LABEL_144:
    if (*(_QWORD *)(v38 + 80))
    {
LABEL_156:
      v65 = *(unsigned int *)(v91 + 220);
      if ((_DWORD)v65)
      {
        v66 = 24 * v65;
        v67 = (const void **)(*(_QWORD *)(v91 + 208) + 16);
        do
        {
          v68 = *v67;
          *v67 = 0;
          if (v68)
            CFRelease(v68);
          v67 += 3;
          v66 -= 24;
        }
        while (v66);
      }
      v69 = *(WTF **)(v91 + 208);
      if (v69)
      {
        *(_QWORD *)(v91 + 208) = 0;
        *(_DWORD *)(v91 + 216) = 0;
        WTF::fastFree(v69, v41);
      }
      *(_QWORD *)(v91 + 208) = v111;
      v70 = v112;
      v111 = 0;
      v112 = 0;
      *(_QWORD *)(v91 + 216) = v70;
      LOBYTE(a5) = 2;
      goto LABEL_164;
    }
    if (*(_BYTE *)(v38 + 72))
    {
      WebKit::RemoteLayerBackingStoreProperties::layerContentsBufferFromBackendHandle(v38, 2, &v113);
      v56 = v113;
      *(_QWORD *)&v113 = 0;
      v57 = *(const void **)(v38 + 80);
      *(_QWORD *)(v38 + 80) = v56;
      if (v57)
      {
        CFRelease(v57);
        v58 = (const void *)v113;
        *(_QWORD *)&v113 = 0;
        if (v58)
          CFRelease(v58);
      }
      if (*(_BYTE *)(v38 + 120))
      {
        *(_QWORD *)&v113 = *v92;
        DWORD2(v113) = *(_DWORD *)(v38 + 112);
        v59 = *(const void **)(v38 + 80);
        v114 = v59;
        if (v59)
          CFRetain(v59);
        if (HIDWORD(v112) == (_DWORD)v112)
        {
          v60 = WTF::Vector<WebKit::RemoteLayerTreeNode::CachedContentsBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v111, HIDWORD(v112) + 1, (unint64_t)&v113);
          v61 = v111 + 24 * HIDWORD(v112);
          *(_OWORD *)v61 = *(_OWORD *)v60;
          v62 = *(_QWORD *)(v60 + 16);
          *(_QWORD *)(v60 + 16) = 0;
          *(_QWORD *)(v61 + 16) = v62;
          v63 = v114;
          ++HIDWORD(v112);
          v114 = 0;
          if (v63)
            CFRelease(v63);
        }
        else
        {
          v64 = v111 + 24 * HIDWORD(v112);
          *(_OWORD *)v64 = v113;
          *(_QWORD *)(v64 + 16) = v59;
          ++HIDWORD(v112);
        }
        goto LABEL_156;
      }
    }
LABEL_206:
    __break(1u);
  }
LABEL_179:
  v85 = *(_QWORD *)a4;
  if (v9 && (v85 & 0x8000000000) != 0)
    *(_BYTE *)(v9 + 248) = *((_BYTE *)a4 + 600);
  if ((v85 & 0x800) != 0)
  {
    v86 = *((_QWORD *)a4 + 53);
    if (v86)
      WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v113, v86);
    else
      v113 = 0uLL;
    WebCore::PlatformCAFilters::setFiltersOnLayer();
    WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v113, v87);
    v85 = *(_QWORD *)a4;
  }
  if ((v85 & 0x20) != 0)
  {
    if (WebKit::RemoteLayerTreeHost::threadedAnimationResolutionEnabled((WebKit::RemoteLayerTreeHost *)v8, (uint64_t)a2, this))WebKit::RemoteLayerTreeNode::setAcceleratedEffectsAndBaseValues(v9, (uint64_t)(a4 + 22), (WebCore::AcceleratedEffectValues *)(a4 + 26), (uint64_t)v8);
    else
      WebKit::PlatformCAAnimationRemote::updateLayerAnimations(v10, v8, (uint64_t)(a4 + 16), (_QWORD **)a4 + 10);
  }
  v88 = *(_QWORD *)a4;
  if ((*(_QWORD *)a4 & 0x20000000) != 0)
  {
    if (*((_BYTE *)a4 + 590))
      v89 = 15;
    else
      v89 = 0;
    -[CALayer setEdgeAntialiasingMask:](v10, "setEdgeAntialiasingMask:", v89, v90);
    v88 = *(_QWORD *)a4;
  }
  if ((v88 & 0x4000000000) != 0)
  {
    -[CALayer setShouldRasterize:](v10, "setShouldRasterize:", *((unsigned __int8 *)a4 + 599));
    v88 = *(_QWORD *)a4;
  }
  if ((v88 & 0x10000000) != 0)
  {
    if (v9)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v10 = (CALayer *)objc_msgSend(*(id *)(v9 + 48), "playerLayer");
    }
    if ((objc_opt_respondsToSelector() & 1) != 0)
      -[CALayer setVideoGravity:](v10, "setVideoGravity:", WebCore::convertMediaPlayerToAVLayerVideoGravity());
  }
}

void sub_19704BE18(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  const void *v4;

  v4 = *(const void **)(v2 - 184);
  *(_QWORD *)(v2 - 184) = 0;
  if (v4)
    CFRelease(v4);
  WTF::Vector<WebKit::RemoteLayerTreeNode::CachedContentsBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(v2 - 216), a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::RemoteLayerTreePropertyApplier::applyProperties(uint64_t a1, WebKit::RemoteLayerTreeHost *this, uint64_t a3, uint64_t *a4, int a5, double a6)
{
  uint64_t result;
  BOOL v10;
  uint64_t v11;

  WebKit::RemoteLayerTreePropertyApplier::applyPropertiesToLayer(*(CALayer **)(a1 + 40), (Color *)a1, this, (float *)a3, a5, a6);
  if ((*(_BYTE *)(a3 + 5) & 1) != 0)
    WebKit::RemoteLayerTreeNode::setEventRegion((WebKit::RemoteLayerTreeNode *)a1, (const WebCore::EventRegion *)(a3 + 608));
  result = WebKit::RemoteLayerTreePropertyApplier::updateMask(a1, a3, a4);
  if ((*(_BYTE *)(a3 + 4) & 0x30) != 0)
  {
    if (*(_BYTE *)(a3 + 597))
      v10 = 1;
    else
      v10 = *(_BYTE *)(a3 + 598) == 0;
    v11 = !v10;
    return objc_msgSend(*(id *)(a1 + 48), "setUserInteractionEnabled:", v11);
  }
  return result;
}

uint64_t WebKit::RemoteLayerTreePropertyApplier::updateMask(uint64_t result, uint64_t a2, uint64_t *a3)
{
  void *v3;
  void *v4;

  if ((*(_BYTE *)(a2 + 1) & 0x20) != 0)
  {
    v3 = *(void **)(result + 40);
    if (*(_QWORD *)(a2 + 504))
    {
      result = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a3, (_QWORD *)(a2 + 504));
      if (!result)
        return result;
      v4 = *(void **)(result + 40);
      result = objc_msgSend(v4, "superlayer");
      if (result)
        return result;
    }
    else
    {
      v4 = 0;
    }
    return objc_msgSend(v3, "setMask:", v4);
  }
  return result;
}

void WebKit::RemoteLayerTreePropertyApplier::applyHierarchyUpdates(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  if ((*(_BYTE *)a2 & 0x10) != 0)
  {
    v6 = *(void **)(a1 + 48);
    if (v6 && objc_msgSend((id)objc_msgSend(v6, "subviews"), "count")
      || *(_DWORD *)(a2 + 60)
      && (v7 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a3, *(_QWORD **)(a2 + 48))) != 0&& *(_QWORD *)(v7 + 48))
    {
      v8 = *(void **)(a1 + 48);
      v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a2 + 60));
      v10 = *(unsigned int *)(a2 + 60);
      if ((_DWORD)v10)
      {
        v11 = *(_QWORD **)(a2 + 48);
        v12 = 16 * v10;
        do
        {
          v13 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a3, v11);
          if (v13 && *(_QWORD *)(v13 + 48))
            objc_msgSend(v9, "addObject:");
          v11 += 2;
          v12 -= 16;
        }
        while (v12);
      }
      objc_msgSend(v8, "_web_setSubviews:", v9);
    }
    else
    {
      v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a2 + 60));
      v14 = *(unsigned int *)(a2 + 60);
      if ((_DWORD)v14)
      {
        v15 = *(_QWORD **)(a2 + 48);
        v16 = 16 * v14;
        do
        {
          v17 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a3, v15);
          if (v17 && *(_QWORD *)(v17 + 40))
            objc_msgSend(v9, "addObject:");
          v15 += 2;
          v16 -= 16;
        }
        while (v16);
      }
      objc_msgSend(*(id *)(a1 + 40), "setSublayers:", v9);
    }
    if (v9)
      CFRelease(v9);
  }
}

void sub_19704C148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  const void *v16;
  NSException *v19;

  if (v16)
    CFRelease(v16);
  if (a2 != 1)
    _Unwind_Resume(exception_object);
  v19 = (NSException *)objc_begin_catch(exception_object);
  ReportBlockedObjCException(v19);
  objc_end_catch();
}

uint64_t WebKit::RemoteLayerBackingStore::isRemoteLayerWithRemoteRenderingBackingStore(WebKit::RemoteLayerBackingStore *this)
{
  return 0;
}

uint64_t WebKit::RemoteLayerBackingStore::isRemoteLayerWithInProcessRenderingBackingStore(WebKit::RemoteLayerBackingStore *this)
{
  return 0;
}

uint64_t WebKit::RemoteLayerBackingStore::bufferSetIdentifier(WebKit::RemoteLayerBackingStore *this)
{
  return 0;
}

uint64_t _ZZN3WTF8BlockPtrIFbmPU24objcproto13OS_xpc_object8NSObjectEE12fromCallableIZZN6WebKit22XPCServiceEventHandlerES3_EUb_E3__0EES5_T_ENUlPvmS3_E_8__invokeESA_mS3_(uint64_t a1, int a2, xpc_object_t xstring)
{
  uint64_t v3;
  WTF::String *string_ptr;
  const char *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;

  v3 = *(_QWORD *)(a1 + 32);
  string_ptr = (WTF::String *)xpc_string_get_string_ptr(xstring);
  WTF::String::fromUTF8((uint64_t *)&v13, string_ptr, v5);
  v7 = *(unsigned int *)(v3 + 12);
  if ((_DWORD)v7 == *(_DWORD *)(v3 + 8))
  {
    v12 = (WTF::StringImpl **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3, v7 + 1, (unint64_t)&v13);
    v7 = *(unsigned int *)(v3 + 12);
    v8 = *(_QWORD *)v3;
    v9 = *v12;
    *v12 = 0;
  }
  else
  {
    v8 = *(_QWORD *)v3;
    v9 = v13;
    v13 = 0;
  }
  *(_QWORD *)(v8 + 8 * v7) = v9;
  *(_DWORD *)(v3 + 12) = v7 + 1;
  v10 = v13;
  v13 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v6);
    else
      *(_DWORD *)v10 -= 2;
  }
  return 1;
}

void sub_19704C27C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t analytics_send_event_lazyPtr(void)
{
  uint64_t result;
  void *v1;

  if (byte_1ECE723C9 != 1)
  {
    if (byte_1ECE723CA == 1)
    {
      v1 = (void *)qword_1ECE723D8;
    }
    else
    {
      v1 = dlopen("/System/Library/PrivateFrameworks/CoreAnalytics.framework/CoreAnalytics", 2);
      if (!v1)
      {
        result = 21;
        __break(0xC471u);
        return result;
      }
      qword_1ECE723D8 = (uint64_t)v1;
      byte_1ECE723CA = 1;
    }
    result = (uint64_t)dlsym(v1, "analytics_send_event_lazy");
    qword_1ECE723D0 = result;
    byte_1ECE723C9 = 1;
    return result;
  }
  return qword_1ECE723D0;
}

uint64_t dlsym_callback_notify(const char *a1)
{
  uint64_t (*v2)(const char *, _QWORD *);
  _QWORD v4[5];
  uint32_t bufsize;

  bufsize = 1025;
  if (_NSGetExecutablePath(byte_1ECE723F0, &bufsize) == -1)
    return WTFLogAlways();
  v2 = (uint64_t (*)(const char *, _QWORD *))analytics_send_event_lazyPtr();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___ZL21dlsym_callback_notifyPKc_block_invoke;
  v4[3] = &__block_descriptor_40_e30___NSObject_OS_xpc_object__8__0l;
  v4[4] = a1;
  return v2("com.apple.dlsym_callback.webkit", v4);
}

WebKit::RemoteLayerBackingStore *std::make_unique[abi:sn180100]<WebKit::RemoteLayerWithInProcessRenderingBackingStore,WebKit::PlatformCALayerRemote *&>@<X0>(WebKit::PlatformCALayerRemote **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  WebKit::RemoteLayerBackingStore *result;

  v4 = WTF::fastMalloc((WTF *)0x170);
  result = WebKit::RemoteLayerBackingStore::RemoteLayerBackingStore((WebKit::RemoteLayerBackingStore *)v4, *a1);
  *(_QWORD *)v4 = off_1E34B9200;
  *(_QWORD *)(v4 + 320) = 0;
  *(_BYTE *)(v4 + 328) = 0;
  *(_QWORD *)(v4 + 336) = 0;
  *(_BYTE *)(v4 + 344) = 0;
  *(_QWORD *)(v4 + 352) = 0;
  *(_BYTE *)(v4 + 360) = 0;
  *a2 = v4;
  return result;
}

void sub_19704C4F0(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

unsigned int *std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>::__copy_constructor(unsigned int *a1, unsigned int *a2)
{
  *(_BYTE *)a1 = 0;
  a1[16] = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

void sub_19704C53C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  unsigned int *v13;
  uint64_t v15;

  v15 = v13[16];
  if ((_DWORD)v15 != -1)
    __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v15]((int)&a13, (WTF::MachSendRight *)v13);
  v13[16] = -1;
  _Unwind_Resume(exception_object);
}

unsigned int *std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1> const&>(unsigned int *result, unsigned int *a2)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = result[16];
  if ((_DWORD)v4 != -1)
    result = (unsigned int *)__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v4]((int)&v7, (WTF::MachSendRight *)result);
  v3[16] = -1;
  v5 = a2[16];
  if ((_DWORD)v5 != -1)
  {
    result = (unsigned int *)off_1E34B8AB0[v5]((int)&v6, (WebCore::ShareableBitmapHandle *)v3, (WebCore::ShareableBitmapHandle *)a2);
    v3[16] = v5;
  }
  return result;
}

WebCore::ShareableBitmapHandle *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEERKST_EEEDcSL_DpT0_(int a1, WebCore::ShareableBitmapHandle *this, WebCore::ShareableBitmapHandle *a3)
{
  return WebCore::ShareableBitmapHandle::ShareableBitmapHandle(this, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore21ShareableBitmapHandleEN3WTF13MachSendRightEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEERKST_EEEDcSL_DpT0_(int a1, WTF::MachSendRight *this, WTF::MachSendRight *a3)
{
  return WTF::MachSendRight::MachSendRight(this, a3);
}

WebCore::ShareableBitmapHandle *WebCore::ShareableBitmapHandle::ShareableBitmapHandle(WebCore::ShareableBitmapHandle *this, const WebCore::ShareableBitmapHandle *a2)
{
  uint64_t v4;

  v4 = WTF::MachSendRight::MachSendRight(this, a2);
  *(_QWORD *)(v4 + 8) = *((_QWORD *)a2 + 1);
  *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
  std::__optional_copy_base<WebCore::DestinationColorSpace,false>::__optional_copy_base[abi:sn180100]((_BYTE *)(v4 + 24), (uint64_t)a2 + 24);
  *((_BYTE *)this + 40) = *((_BYTE *)a2 + 40);
  *((_BYTE *)this + 44) = 0;
  if (*((_BYTE *)a2 + 44))
    *((_BYTE *)this + 44) = 1;
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_BYTE *)this + 52) = 0;
  if (*((_BYTE *)a2 + 52))
    *((_BYTE *)this + 52) = 1;
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  return this;
}

void sub_19704C6A0(_Unwind_Exception *a1)
{
  WTF::MachSendRight *v1;

  WTF::MachSendRight::~MachSendRight(v1);
  _Unwind_Resume(a1);
}

_BYTE *std::__optional_copy_base<WebCore::DestinationColorSpace,false>::__optional_copy_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  const void *v3;

  *a1 = 0;
  a1[8] = 0;
  if (*(_BYTE *)(a2 + 8))
  {
    v3 = *(const void **)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    if (v3)
      CFRetain(v3);
    a1[8] = 1;
  }
  return a1;
}

void sub_19704C6FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  if (*(_BYTE *)(v1 + 8))
  {
    v3 = *(const void **)v1;
    *(_QWORD *)v1 = 0;
    if (v3)
      CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::`anonymous namespace'::DelegatedContentsFenceFlusher::~DelegatedContentsFenceFlusher(WebKit::_anonymous_namespace_::DelegatedContentsFenceFlusher *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
}

void WebKit::`anonymous namespace'::DelegatedContentsFenceFlusher::~DelegatedContentsFenceFlusher(WebKit::_anonymous_namespace_::DelegatedContentsFenceFlusher *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  WTF::fastFree(this, a2);
}

uint64_t WebKit::`anonymous namespace'::DelegatedContentsFenceFlusher::flushAndCollectHandles(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, double))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), 5.0);
}

uint64_t WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 29))
  {
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v5;
    v6 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v6)
    {
      v7 = *(_QWORD **)a2;
      v8 = *(_QWORD *)a2 + 8 * v6;
      do
      {
        v9 = *v7;
        v10 = (unsigned int *)(*v7 + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 + 1, v10));
        *v5++ = v9;
        ++v7;
      }
      while (v7 != (_QWORD *)v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

unint64_t WTF::parseInteger<unsigned long long,unsigned char>(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  char v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *i;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  unint64_t v21;
  int v22;
  uint64_t v25;
  int v26;
  int v27;

  v4 = 0;
  v5 = 0;
  if (a1 && a2)
  {
    v6 = 0;
    while (1)
    {
      v7 = *(unsigned __int8 *)(a1 + v6);
      if (v7 - 9 >= 5 && v7 != 32)
        break;
      if (a2 == ++v6)
        goto LABEL_48;
    }
    if (v7 == 43)
    {
      if (a2 - 1 == v6)
        goto LABEL_48;
      v9 = ~v6 + a2;
      v8 = (unsigned __int8 *)(a1 + v6 + 1);
      v7 = *v8;
    }
    else
    {
      v8 = (unsigned __int8 *)(a1 + v6);
      v9 = a2 - v6;
    }
    if (v7 - 48 > 9)
    {
      if ((v7 | 0x20) >= 0x61)
      {
        v27 = (int)a3 >= 36 ? 36 : a3;
        v11 = v27 + 87;
        if (v27 + 87 > (v7 | 0x20))
          goto LABEL_16;
      }
    }
    else if (v7 - 48 < a3)
    {
      if ((int)a3 >= 36)
        v10 = 36;
      else
        v10 = a3;
      v11 = v10 + 87;
LABEL_16:
      v4 = 0;
      v12 = 0;
      v13 = &v8[v9];
      v14 = v9 - 1;
      for (i = v8 + 1; ; ++i)
      {
        v16 = v7 - 48;
        v17 = v7 - 48;
        v18 = (v7 | 0x20) - 87;
        if (v16 < 0xA)
          v18 = v17;
        v19 = (v4 * (unsigned __int128)a3) >> 64;
        if (is_mul_ok(v4, a3))
          v4 *= a3;
        v20 = __CFADD__(v4, v18);
        v21 = v4 + v18;
        v22 = v20;
        if (!v20)
          v4 = v21;
        if (v19 ? 1 : v22)
          v12 = 1;
        if (!v14)
          break;
        ++v8;
        v7 = *i;
        if (v7 - 48 > 9)
        {
          if ((v7 | 0x20) < 0x61 || v11 <= (v7 | 0x20))
          {
            v13 = i;
            break;
          }
        }
        else if (v7 - 48 >= a3)
        {
          v13 = v8;
          break;
        }
        --v14;
      }
      if (!v12)
      {
        if (a4 || !v14)
        {
LABEL_39:
          v5 = v4 & 0xFFFFFFFFFFFFFF00;
          v4 = v4;
          return v5 | v4;
        }
        v25 = 0;
        while (1)
        {
          v26 = v13[v25];
          if ((v26 - 9) >= 5 && v26 != 32)
            break;
          if (v14 == ++v25)
            goto LABEL_39;
        }
      }
    }
LABEL_48:
    v4 = 0;
    v5 = 0;
  }
  return v5 | v4;
}

unint64_t WTF::parseInteger<unsigned long long,char16_t>(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  unint64_t v4;
  unint64_t v5;
  unsigned __int16 *v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  char v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  int v21;
  uint64_t v23;
  int v24;

  v4 = 0;
  v5 = 0;
  if (!a1 || !a2)
    return v5 | v4;
  v6 = (unsigned __int16 *)(a1 + 2);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 - 9 >= 5 && v7 != 32)
      break;
    ++v6;
    if (!--a2)
      goto LABEL_54;
  }
  if (v7 == 43)
  {
    if (!--a2)
      goto LABEL_54;
    v7 = *v6;
  }
  else
  {
    --v6;
  }
  if (v7 - 48 <= 9)
  {
    if (v7 - 48 < a3)
    {
      if ((int)a3 >= 36)
        v8 = 36;
      else
        v8 = a3;
      v9 = v8 + 87;
      goto LABEL_23;
    }
LABEL_54:
    v4 = 0;
    v5 = 0;
    return v5 | v4;
  }
  if ((v7 | 0x20) < 0x61)
    goto LABEL_54;
  v10 = (int)a3 >= 36 ? 36 : a3;
  v9 = v10 + 87;
  if (v10 + 87 <= (v7 | 0x20))
    goto LABEL_54;
LABEL_23:
  v4 = 0;
  v11 = 0;
  v12 = a2 - 1;
  v13 = v6 + 1;
  v14 = &v6[a2];
  while (1)
  {
    v15 = v7 - 48;
    v16 = v7 - 48;
    v17 = (v7 | 0x20) - 87;
    if (v15 < 0xA)
      v17 = v16;
    v18 = (v4 * (unsigned __int128)a3) >> 64;
    if (is_mul_ok(v4, a3))
      v4 *= a3;
    v19 = __CFADD__(v4, v17);
    v20 = v4 + v17;
    v21 = v19;
    if (!v19)
      v4 = v20;
    if (v18 ? 1 : v21)
      v11 = 1;
    if (!v12)
      break;
    ++v6;
    v7 = *v13;
    if (v7 - 48 > 9)
    {
      if ((v7 | 0x20) < 0x61 || v9 <= (v7 | 0x20))
      {
        v14 = v13;
        break;
      }
    }
    else if (v7 - 48 >= a3)
    {
      v14 = v6;
      break;
    }
    --v12;
    ++v13;
  }
  if (v11)
    goto LABEL_54;
  if (!a4 && v12)
  {
    v23 = 0;
    do
    {
      v24 = v14[v23];
      if ((v24 - 9) >= 5 && v24 != 32)
        goto LABEL_54;
    }
    while (v12 != ++v23);
  }
  v5 = v4 & 0xFFFFFFFFFFFFFF00;
  v4 = v4;
  return v5 | v4;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit22XPCServiceEventHandlerEPU24objcproto13OS_xpc_object8NSObjectEUb_E3__1vJEED1Ev(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E34B8B10;
  v2 = (void *)a1[3];
  if (v2)

  v3 = (void *)a1[2];
  if (v3)

  return a1;
}

uint64_t *WTF::Vector<std::unique_ptr<WebKit::ThreadSafeImageBufferSetFlusher>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<WebKit::ThreadSafeImageBufferSetFlusher>>(uint64_t a1, unint64_t a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = (uint64_t *)WTF::Vector<std::unique_ptr<WebKit::ThreadSafeImageBufferSetFlusher>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *result;
  *result = 0;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::RemoteLayerBackingStoreProperties::layerContentsBufferFromBackendHandle(std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight> &&,WebKit::LayerContentsType)::$_0,WebKit::RemoteLayerBackingStoreProperties::layerContentsBufferFromBackendHandle(std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight> &,std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight> &&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ShareableBitmapHandle,WTF::MachSendRight> &>(const void ****a1)
{
  const void ***v1;
  uint64_t result;
  void *v3;
  const void *v4;
  CFTypeRef cf;
  WebCore::ShareableBitmap *v6;

  v1 = *a1;
  WebCore::ShareableBitmap::create();
  result = (uint64_t)v6;
  if (v6)
  {
    WebCore::ShareableBitmap::makeCGImageCopy(v6);
    v4 = **v1;
    **v1 = cf;
    if (v4)
      CFRelease(v4);
    return WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v6, v3);
  }
  return result;
}

void sub_19704CD24(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  if (a10)
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)a10, a2);
  _Unwind_Resume(exception_object);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::RemoteLayerBackingStoreProperties::layerContentsBufferFromBackendHandle(std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight> &&,WebKit::LayerContentsType)::$_0,WebKit::RemoteLayerBackingStoreProperties::layerContentsBufferFromBackendHandle(std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight> &,std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight> &&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ShareableBitmapHandle,WTF::MachSendRight> &>(uint64_t *a1, WTF::MachSendRight *this)
{
  uint64_t v2;
  int v3;
  const void *v4;
  CFTypeRef v5;
  uint64_t v6;
  const void **v7;
  const void *v8;
  const void **v9;
  const void *v10;
  WTF *v11;
  void *v12;
  CFTypeRef cf;
  WebCore::IOSurface *v14;

  v2 = *a1;
  v3 = **(unsigned __int8 **)(*a1 + 8);
  if (v3 == 2)
  {
    WebCore::IOSurface::createFromSendRight();
    if (v14)
    {
      WebCore::IOSurface::asCAIOSurfaceLayerContents(v14);
      v5 = cf;
    }
    else
    {
      v5 = 0;
    }
    v9 = *(const void ***)(v2 + 16);
    v10 = *v9;
    *v9 = v5;
    if (v10)
      CFRelease(v10);
LABEL_15:
    if (v14)
    {
      WebCore::IOSurface::~IOSurface(v14);
      WTF::fastFree(v11, v12);
    }
    return;
  }
  if (v3 != 1)
  {
    if (**(_BYTE **)(*a1 + 8))
      return;
    WebCore::IOSurface::createFromSendRight();
    if (v14)
      v4 = (const void *)*((_QWORD *)v14 + 6);
    else
      v4 = 0;
    WTF::RetainPtr<objc_object *>::operator=(*(const void ***)(v2 + 16), v4);
    goto LABEL_15;
  }
  WTF::MachSendRight::leakSendRight(this);
  v6 = CAMachPortCreate();
  v7 = *(const void ***)(v2 + 16);
  v8 = *v7;
  *v7 = (const void *)v6;
  if (v8)
    CFRelease(v8);
}

void sub_19704CE40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::IOSurface *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    WebCore::IOSurface::~IOSurface(a10);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

const void **WTF::RetainPtr<objc_object *>::operator=(const void **a1, CFTypeRef cf)
{
  const void *v4;

  if (cf)
    CFRetain(cf);
  v4 = *a1;
  *a1 = cf;
  if (v4)
    CFRelease(v4);
  return a1;
}

uint64_t *_ZN3WTF7HashSetINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS_15HashTableTraitsEE8removeIfIZNS_11WeakHashSetIN6WebKit23RemoteLayerBackingStoreES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_(uint64_t *result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;

  v2 = *result;
  if (*result)
  {
    v3 = *(unsigned int *)(v2 - 4);
    if ((_DWORD)v3)
    {
      v4 = 0;
      do
      {
        v5 = --v3;
        v6 = *(_QWORD *)(v2 + 8 * v3);
        if ((unint64_t)(v6 + 1) >= 2 && !*(_QWORD *)(v6 + 8))
        {
          *(_QWORD *)(v2 + 8 * v3) = 0;
          do
          {
            v7 = __ldaxr((unsigned int *)v6);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, (unsigned int *)v6));
          if (!v8)
          {
            atomic_store(1u, (unsigned int *)v6);
            v19 = result;
            v16 = v4;
            v15 = v2;
            v17 = v3;
            v18 = v3;
            WTF::fastFree((WTF *)v6, a2);
            v5 = v18;
            result = v19;
            v3 = v17;
            v2 = v15;
            v4 = v16;
          }
          *(_QWORD *)(v2 + 8 * v5) = -1;
          ++v4;
        }
      }
      while (v5);
      v9 = *result;
      if (v4)
      {
        *(_DWORD *)(v9 - 16) += v4;
        v13 = *result;
        if (*result)
          v14 = *(_DWORD *)(v13 - 12);
        else
          v14 = 0;
        *(_DWORD *)(v13 - 12) = v14 - v4;
        v9 = *result;
      }
      if (v9)
      {
        v10 = *(_DWORD *)(v9 - 4);
        v11 = 6 * *(_DWORD *)(v9 - 12);
        if (v10 >= 9 && v11 < v10)
          return (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(result);
      }
    }
  }
  return result;
}

uint64_t **WTF::WeakHashSet<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::WeakHashSetConstIterator(uint64_t **result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  *result = a2;
  result[1] = a3;
  result[2] = a4;
  v4 = *a2;
  if (*a2)
  {
    v5 = *(unsigned int *)(v4 - 4);
    v6 = (uint64_t *)(v4 + 8 * v5);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  result[3] = v6;
  result[4] = (uint64_t *)(v4 + 8 * v5);
LABEL_4:
  while (a3 != v6 && !*(_QWORD *)(*a3 + 8))
  {
    while (1)
    {
      result[1] = ++a3;
      if (a3 == a4)
        break;
      if ((unint64_t)(*a3 + 1) > 1)
        goto LABEL_4;
    }
    a3 = a4;
  }
  return result;
}

uint64_t WTF::Vector<WebKit::RemoteRenderingBackendProxy::LayerPrepareBuffersData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::RemoteRenderingBackendProxy::LayerPrepareBuffersData>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  __int16 v10;

  v3 = WTF::Vector<WebKit::RemoteRenderingBackendProxy::LayerPrepareBuffersData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = (_QWORD *)(*(_QWORD *)a1 + 40 * v4);
  v7 = *(_QWORD *)v3;
  *(_QWORD *)v3 = 0;
  *v6 = v7;
  result = WebCore::Region::Region();
  v9 = v5 + 40 * v4;
  v10 = *(_WORD *)(v3 + 32);
  *(_BYTE *)(v9 + 34) = *(_BYTE *)(v3 + 34);
  *(_WORD *)(v9 + 32) = v10;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

void sub_19704D0C8(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *v2 = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  _Unwind_Resume(exception_object);
}

unint64_t WTF::Vector<WebKit::RemoteRenderingBackendProxy::LayerPrepareBuffersData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::RemoteRenderingBackendProxy::LayerPrepareBuffersData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::RemoteRenderingBackendProxy::LayerPrepareBuffersData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<WebKit::RemoteRenderingBackendProxy::LayerPrepareBuffersData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF *v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  __int16 v13;
  uint64_t v14;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = *(WTF **)a1;
      v4 = *(_DWORD *)(a1 + 12);
      v5 = 40 * a2;
      v6 = WTF::fastMalloc((WTF *)(40 * a2));
      *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)a1 = v6;
      if (v4)
      {
        v8 = v6;
        v9 = (char *)v3 + 40 * v4;
        v10 = (char *)v3 + 8;
        do
        {
          v12 = v10 - 8;
          v11 = *((_QWORD *)v10 - 1);
          *((_QWORD *)v10 - 1) = 0;
          *(_QWORD *)v8 = v11;
          WebCore::Region::Region();
          v13 = *((_WORD *)v10 + 12);
          *(_BYTE *)(v8 + 34) = v10[26];
          *(_WORD *)(v8 + 32) = v13;
          WebCore::Region::~Region((WebCore::Region *)v10);
          v14 = *((_QWORD *)v10 - 1);
          *((_QWORD *)v10 - 1) = 0;
          if (v14)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v14 + 16), v7);
          v8 += 40;
          v10 += 40;
        }
        while (v12 + 40 != v9);
      }
      if (v3)
      {
        if (*(WTF **)a1 == v3)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v3, v7);
      }
    }
  }
}

void sub_19704D2A8(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *v2 = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  _Unwind_Resume(exception_object);
}

unsigned int *WTF::Vector<WTF::WeakPtr<WebKit::RemoteLayerWithRemoteRenderingBackingStore,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::RemoteLayerWithRemoteRenderingBackingStore&>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  WTF *v9;
  void *v10;
  WTF *v11;
  unsigned int **v12;
  unsigned int **v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *result;
  unsigned int *v20;
  unsigned int v21;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(unsigned int *)(a1 + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  v9 = *(WTF **)a1;
  if (v8 > v4)
  {
    if (v8 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x19704D40CLL);
    }
    v11 = (WTF *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(a1 + 8) = v8;
    *(_QWORD *)a1 = v11;
    if ((_DWORD)v5)
    {
      v12 = (unsigned int **)((char *)v9 + 8 * v5);
      v13 = (unsigned int **)v9;
      do
      {
        v14 = *v13;
        *v13 = 0;
        *(_QWORD *)v11 = v14;
        v15 = *v13;
        *v13 = 0;
        if (v15)
        {
          do
          {
            v16 = __ldaxr(v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v15));
          if (!v17)
          {
            atomic_store(1u, v15);
            WTF::fastFree((WTF *)v15, v10);
          }
        }
        v11 = (WTF *)((char *)v11 + 8);
        ++v13;
      }
      while (v13 != v12);
      v11 = *(WTF **)a1;
    }
    if (v9)
    {
      if (v11 == v9)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v9, v10);
      v9 = *(WTF **)a1;
    }
    else
    {
      v9 = v11;
    }
  }
  v18 = *(unsigned int *)(a1 + 12);
  result = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  v20 = *(unsigned int **)(a2 + 8);
  if (v20)
  {
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  *((_QWORD *)v9 + v18) = v20;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unsigned int *WTF::VectorDestructor<true,WTF::WeakPtr<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::destruct(unsigned int *result, void *a2)
{
  unsigned int **v3;
  unsigned int v4;
  unsigned int v5;

  if (result != a2)
  {
    v3 = (unsigned int **)result;
    do
    {
      result = *v3;
      *v3 = 0;
      if (result)
      {
        do
        {
          v4 = __ldaxr(result);
          v5 = v4 - 1;
        }
        while (__stlxr(v5, result));
        if (!v5)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
        }
      }
      ++v3;
    }
    while (v3 != a2);
  }
  return result;
}

unsigned int *WTF::Vector<WTF::WeakPtr<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::RemoteLayerBackingStore&>(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *result;
  unsigned int *v11;
  unsigned int v12;

  v4 = a1[3];
  v5 = a1[2] + ((unint64_t)a1[2] >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  WTF::Vector<WTF::WeakPtr<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  v8 = a1[3];
  v9 = *(_QWORD *)a1;
  result = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  v11 = *(unsigned int **)(a2 + 8);
  if (v11)
  {
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  *(_QWORD *)(v9 + 8 * v8) = v11;
  ++a1[3];
  return result;
}

unsigned int *WTF::Vector<WTF::WeakPtr<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int **v6;
  void *v7;

  if (result[2] < a2)
  {
    v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x19704D59CLL);
    }
    v3 = result;
    v4 = *(unsigned int **)result;
    v5 = (unsigned int *)(*(_QWORD *)result + 8 * result[3]);
    v6 = (unsigned int **)WTF::fastMalloc((WTF *)(8 * a2));
    v3[2] = v2;
    *(_QWORD *)v3 = v6;
    result = WTF::VectorMover<false,WTF::WeakPtr<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::move(v4, v5, v6);
    if (v4)
    {
      if (*(unsigned int **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree((WTF *)v4, v7);
    }
  }
  return result;
}

unsigned int *WTF::VectorMover<false,WTF::WeakPtr<WebKit::RemoteLayerBackingStore,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::move(unsigned int *result, unsigned int *a2, unsigned int **a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(unsigned int **)v5;
      *(_QWORD *)v5 = 0;
      *a3 = v6;
      result = *(unsigned int **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        do
        {
          v7 = __ldaxr(result);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, result));
        if (!v8)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
        }
      }
      ++a3;
      v5 += 2;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::remove(uint64_t *a1, unsigned int **a2)
{
  uint64_t v2;

  if (!*a1)
  {
    if (a2)
    {
      v2 = 0;
      goto LABEL_3;
    }
    return 0;
  }
  v2 = *a1 + 8 * *(unsigned int *)(*a1 - 4);
  if ((unsigned int **)v2 == a2)
    return 0;
LABEL_3:
  if ((unsigned int **)v2 != a2)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(a1, a2);
  return 1;
}

uint64_t WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    v5 = 16 * v3;
    do
    {
      v6 = *(_QWORD *)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v6 + 16), a2);
      v4 = (WTF *)((char *)v4 + 16);
      v5 -= 16;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

unint64_t WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>>(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)result;
  *(_QWORD *)result = 0;
  *(_QWORD *)v4 = v5;
  *(_BYTE *)(v4 + 8) = *(_BYTE *)(result + 8);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;

  if (*(unsigned int *)(result + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = (WTF *)((char *)v4 + 16 * v5);
        v9 = v4;
        do
        {
          v10 = *(_QWORD *)v9;
          *(_QWORD *)v9 = 0;
          *(_QWORD *)v7 = v10;
          *(_BYTE *)(v7 + 8) = *((_BYTE *)v9 + 8);
          v11 = *(_QWORD *)v9;
          *(_QWORD *)v9 = 0;
          if (v11)
            result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v11 + 16), v6);
          v9 = (WTF *)((char *)v9 + 16);
          v7 += 16;
        }
        while (v9 != v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteLayerBackingStoreCollection::markBackingStoreVolatileAfterReachabilityChange(WebKit::RemoteLayerBackingStore &)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34B8BE8;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteLayerBackingStoreCollection::markBackingStoreVolatileAfterReachabilityChange(WebKit::RemoteLayerBackingStore &)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34B8BE8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

double WTF::Detail::CallableWrapper<WebKit::RemoteLayerBackingStoreCollection::markBackingStoreVolatileAfterReachabilityChange(WebKit::RemoteLayerBackingStore &)::$_0,void,BOOL>::call(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  if ((a2 & 1) == 0)
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 8);
      if (v3)
      {
        if ((*(_QWORD *)(v3 + 120) & 0xFFFFFFFFFFFFLL) == 0
          || (result = *(double *)((*(_QWORD *)(v3 + 120) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
        {
          WebCore::TimerBase::start();
        }
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteLayerBackingStoreCollection::tryMarkAllBackingStoreVolatile(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34B8C10;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteLayerBackingStoreCollection::tryMarkAllBackingStoreVolatile(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34B8C10;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteLayerBackingStoreCollection::tryMarkAllBackingStoreVolatile(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_BYTE *)(a1 + 8))
  {
    if (*(_BYTE *)(a1 + 9))
      a2 = a2;
    else
      a2 = 0;
  }
  else
  {
    a2 = 0;
  }
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void sub_19704DAA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteLayerBackingStoreCollection::markAllBackingStoreVolatileFromTimer(void)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34B8C38;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteLayerBackingStoreCollection::markAllBackingStoreVolatileFromTimer(void)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34B8C38;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteLayerBackingStoreCollection::markAllBackingStoreVolatileFromTimer(void)::$_0,void,BOOL>::call(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (*(_BYTE *)(result + 8) && *(_BYTE *)(result + 9) && a2 && (*(_QWORD *)(v3 + 120) & 0xFFFFFFFFFFFFLL) != 0)
        return WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v3 + 88));
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteLayerBackingStoreCollection::sendMarkBuffersVolatile(WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(BOOL)> &&,BOOL)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34B8C60;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteLayerBackingStoreCollection::sendMarkBuffersVolatile(WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(BOOL)> &&,BOOL)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34B8C60;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteLayerBackingStoreCollection::sendMarkBuffersVolatile(WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(BOOL)> &&,BOOL)::$_0,void,BOOL>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_19704DC70(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  uint64_t *v13;
  unsigned int v16;
  __int16 v17;
  char v18;

  v2 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v2 - 8);
    v16 = -1640531527;
    v17 = 0;
    v18 = 0;
    WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v16, a2);
    v5 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v16);
    v6 = a2[1];
    v7 = v5 & v4;
    v8 = (uint64_t *)(v2 + 24 * (v5 & v4));
    v9 = *v8;
    v10 = v8[1];
    if (*v8 == *a2 && v10 == v6)
      return *(_QWORD *)(v2 + 24 * v7 + 16);
    v12 = 1;
    while (v9 | v10)
    {
      v7 = (v7 + v12) & v4;
      v13 = (uint64_t *)(v2 + 24 * v7);
      v9 = *v13;
      v10 = v13[1];
      ++v12;
      if (v9 == *a2 && v10 == v6)
        return *(_QWORD *)(v2 + 24 * v7 + 16);
    }
  }
  return 0;
}

void WebKit::RemoteCommandEncoder::~RemoteCommandEncoder(WebKit::RemoteCommandEncoder *this, void *a2)
{
  unsigned __int8 *v3;
  void *v4;
  unsigned int *v5;
  _DWORD *v6;
  unsigned int v7;
  unsigned int v8;

  v3 = (unsigned __int8 *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)this + 4);
  v5 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    do
    {
      v7 = __ldaxr(v5);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v5));
    if (!v8)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }
  v6 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteCommandEncoder::~RemoteCommandEncoder(this, a2);
  WTF::fastFree(v2, v3);
}

unsigned __int8 *WebKit::RemoteCommandEncoder::beginRenderPass(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  WebKit::GPUConnectionToWebProcess *v6;
  WebKit::GPUConnectionToWebProcess *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned __int8 *result;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  unsigned int v25;
  WebKit::GPUConnectionToWebProcess *v26;
  unsigned __int8 *v27;
  WebKit::GPUConnectionToWebProcess *v28;
  WebKit::GPUConnectionToWebProcess *v29;
  WebKit::GPUConnectionToWebProcess *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF *v33;
  char v34;
  WTF *v35;
  WTF *v36;
  char v37;
  char v38;

  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a2, (uint64_t)&v31);
  if (v38)
  {
    (*(void (**)(WebKit::GPUConnectionToWebProcess **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 16) + 16))(&v30, *(_QWORD *)(a1 + 16), &v31);
    v6 = v30;
    if (v30)
    {
      v7 = *(WebKit::GPUConnectionToWebProcess **)(a1 + 32);
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
      v9 = (unsigned int *)((char *)v7 + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      v29 = v7;
      v11 = (unsigned int *)WTF::fastMalloc((WTF *)0x30);
      WebKit::RemoteRenderPassEncoder::RemoteRenderPassEncoder((uint64_t)v11, (uint64_t)v6, v8, (uint64_t *)&v29, a3);
      WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)&v29);
      WebKit::WebGPU::ObjectHeap::addObject(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a3, (uint64_t)v11);
      v12 = v11 + 2;
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v11 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
      }
    }
    else
    {
      v27 = *(unsigned __int8 **)(a1 + 48);
      if (v27)
      {
        WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v27, *(_QWORD *)(a1 + 56), &v29);
        if (v29)
        {
          WebKit::GPUConnectionToWebProcess::terminateWebProcess(v29);
          v28 = v29;
          v29 = 0;
          if (v28)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v28 + 2));
        }
      }
    }
    result = (unsigned __int8 *)v30;
    v30 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    result = *(unsigned __int8 **)(a1 + 48);
    if (result)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(_QWORD *)(a1 + 56), &v30);
      result = (unsigned __int8 *)v30;
      if (v30)
      {
        result = (unsigned __int8 *)WebKit::GPUConnectionToWebProcess::terminateWebProcess(v30);
        v26 = v30;
        v30 = 0;
        if (v26)
          result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v26 + 2));
      }
    }
  }
  if (v38)
  {
    if (v37)
    {
      v16 = (unsigned int *)v36;
      v36 = 0;
      if (v16)
      {
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
        {
          atomic_store(1u, v16);
          WTF::fastFree((WTF *)v16, v5);
        }
      }
    }
    v19 = (unsigned int *)v35;
    v35 = 0;
    if (v19)
    {
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        atomic_store(1u, v19);
        WTF::fastFree((WTF *)v19, v5);
      }
    }
    if (v34)
    {
      v22 = (unsigned int *)v33;
      v33 = 0;
      if (v22)
      {
        do
        {
          v24 = __ldaxr(v22);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v22));
        if (!v25)
        {
          atomic_store(1u, v22);
          WTF::fastFree((WTF *)v22, v5);
        }
      }
    }
    WTF::Vector<std::optional<WebCore::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v5);
    result = (unsigned __int8 *)v31;
    v31 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v23);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::RemoteCommandEncoder::beginComputePass(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF *v13;
  WTF *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  WTF *v21;
  void *v22;
  _DWORD *v23;
  WebKit::GPUConnectionToWebProcess *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  WebKit::GPUConnectionToWebProcess *v32;
  unsigned int v33;
  unsigned int v34;
  _DWORD *v35;
  unsigned __int8 *v37;
  WebKit::GPUConnectionToWebProcess *v38;
  unsigned __int8 *v39;
  WebKit::GPUConnectionToWebProcess *v40;
  WebKit::GPUConnectionToWebProcess *v41;
  _DWORD *v42;
  WTF *v43;
  uint64_t v44;
  char v45;
  char v46;
  WTF::StringImpl *v47;
  WTF *v48;
  uint64_t v49;
  char v50;
  char v51;

  LOBYTE(v47) = 0;
  v51 = 0;
  if (!*(_BYTE *)(a2 + 32))
  {
LABEL_37:
    (*(void (**)(_DWORD **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 16) + 24))(&v42, *(_QWORD *)(a1 + 16), &v47);
    v23 = v42;
    if (v42)
    {
      v24 = *(WebKit::GPUConnectionToWebProcess **)(a1 + 32);
      v25 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
      v26 = (unsigned int *)((char *)v24 + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 + 1, v26));
      v41 = v24;
      v28 = WTF::fastMalloc((WTF *)0x30);
      *(_DWORD *)(v28 + 8) = 1;
      v29 = (unsigned int *)(v28 + 8);
      *(_QWORD *)v28 = off_1E34B8CD8;
      ++v23[2];
      *(_QWORD *)(v28 + 16) = v23;
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v25 + 16), v25);
      v30 = *(unsigned int **)(v25 + 16);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 + 1, v30));
      v32 = v41;
      v41 = 0;
      *(_QWORD *)(v28 + 24) = v30;
      *(_QWORD *)(v28 + 32) = v32;
      *(_QWORD *)(v28 + 40) = a3;
      IPC::StreamServerConnection::startReceivingMessages((uint64_t)v32, v28, 0x49u, a3);
      WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)&v41);
      WebKit::WebGPU::ObjectHeap::addObject(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a3, v28);
      do
      {
        v33 = __ldaxr(v29);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v29));
      if (!v34)
      {
        atomic_store(1u, (unsigned int *)(v28 + 8));
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
      }
    }
    else
    {
      v37 = *(unsigned __int8 **)(a1 + 48);
      if (v37)
      {
        WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v37, *(_QWORD *)(a1 + 56), &v41);
        if (v41)
        {
          WebKit::GPUConnectionToWebProcess::terminateWebProcess(v41);
          v38 = v41;
          v41 = 0;
          if (v38)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v38 + 2));
        }
      }
    }
    v35 = v42;
    v42 = 0;
    if (v35)
    {
      if (v35[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 8))(v35);
      else
        --v35[2];
    }
    return std::__optional_destruct_base<WebCore::WebGPU::ComputePassDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v47, v22);
  }
  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(*(unsigned int **)(*(_QWORD *)(a1 + 24) + 8), a2, (uint64_t)&v42);
  if (v46)
  {
    if (v51 == v46)
    {
      v6 = (WTF::StringImpl *)v42;
      v42 = 0;
      v7 = v47;
      v47 = v6;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, v5);
        else
          *(_DWORD *)v7 -= 2;
      }
      if (v50 == v45)
      {
        if (v50)
        {
          v14 = v43;
          v43 = 0;
          v15 = (unsigned int *)v48;
          v48 = v14;
          if (v15)
          {
            do
            {
              v16 = __ldaxr(v15);
              v17 = v16 - 1;
            }
            while (__stlxr(v17, v15));
            if (!v17)
            {
              atomic_store(1u, v15);
              WTF::fastFree((WTF *)v15, v5);
            }
          }
          v49 = v44;
        }
      }
      else if (v50)
      {
        v18 = (unsigned int *)v48;
        v48 = 0;
        if (v18)
        {
          do
          {
            v19 = __ldaxr(v18);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, v18));
          if (!v20)
          {
            atomic_store(1u, v18);
            WTF::fastFree((WTF *)v18, v5);
          }
        }
        v50 = 0;
      }
      else
      {
        v21 = v43;
        v43 = 0;
        v48 = v21;
        v49 = v44;
        v50 = 1;
      }
    }
    else if (v51)
    {
      if (v50)
      {
        v8 = (unsigned int *)v48;
        v48 = 0;
        if (v8)
        {
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            atomic_store(1u, v8);
            WTF::fastFree((WTF *)v8, v5);
          }
        }
      }
      v11 = v47;
      v47 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v5);
        else
          *(_DWORD *)v11 -= 2;
      }
      v51 = 0;
    }
    else
    {
      v12 = (WTF::StringImpl *)v42;
      v42 = 0;
      v47 = v12;
      LOBYTE(v48) = 0;
      v50 = 0;
      if (v45)
      {
        v13 = v43;
        v43 = 0;
        v48 = v13;
        v49 = v44;
        v50 = 1;
      }
      v51 = 1;
    }
    std::__optional_destruct_base<WebCore::WebGPU::ComputePassDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v42, v5);
    goto LABEL_37;
  }
  v39 = *(unsigned __int8 **)(a1 + 48);
  if (v39)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v39, *(_QWORD *)(a1 + 56), &v41);
    if (v41)
    {
      WebKit::GPUConnectionToWebProcess::terminateWebProcess(v41);
      v40 = v41;
      v41 = 0;
      if (v40)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v40 + 2));
    }
  }
  std::__optional_destruct_base<WebCore::WebGPU::ComputePassDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v42, v5);
  return std::__optional_destruct_base<WebCore::WebGPU::ComputePassDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v47, v22);
}

uint64_t WebKit::RemoteCommandEncoder::copyBufferToBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t result;
  BOOL v13;

  v11 = WebKit::WebGPU::ObjectHeap::convertBufferFromBacking(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a2);
  result = WebKit::WebGPU::ObjectHeap::convertBufferFromBacking(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a4);
  if (v11)
    v13 = result == 0;
  else
    v13 = 1;
  if (!v13)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v11, a3, result, a5, a6);
  return result;
}

unsigned int *WebKit::RemoteCommandEncoder::copyBufferToTexture(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  int v8;
  unsigned int *result;
  void *v10;
  unsigned int v11;
  unsigned int v12;
  _BYTE v13[16];
  int v14;
  unsigned __int8 v15;
  _BYTE v16[64];
  _BYTE v17[24];
  unsigned int *v18;
  char v19;
  char v20;

  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a2, (uint64_t)v17);
  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a3, (uint64_t)v16);
  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a4);
  v8 = v15;
  if (v19 && v16[56] && v15)
  {
    (*(void (**)(_QWORD, _BYTE *, _BYTE *, _BYTE *))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), v17, v16, v13);
    v8 = v15;
  }
  if (v8 && v14 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Extent3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v14])(&v20, v13);
  result = (unsigned int *)std::__optional_destruct_base<WebCore::WebGPU::ImageCopyTexture,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v16, v7);
  if (v19)
  {
    result = v18;
    v18 = 0;
    if (result)
    {
      do
      {
        v11 = __ldaxr(result);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, result));
      if (!v12)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v10);
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteCommandEncoder::copyTextureToBuffer(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void *v7;
  int v8;
  unsigned int *v9;
  unsigned int v11;
  unsigned int v12;
  _BYTE v13[16];
  int v14;
  unsigned __int8 v15;
  _BYTE v16[24];
  WTF *v17;
  char v18;
  _BYTE v19[71];
  char v20;

  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a2, (uint64_t)v19);
  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a3, (uint64_t)v16);
  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a4);
  v8 = v15;
  if (v19[56] && v18 && v15)
  {
    (*(void (**)(_QWORD, _BYTE *, _BYTE *, _BYTE *))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16), v19, v16, v13);
    v8 = v15;
  }
  if (v8 && v14 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Extent3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v14])(&v20, v13);
  if (v18)
  {
    v9 = (unsigned int *)v17;
    v17 = 0;
    if (v9)
    {
      do
      {
        v11 = __ldaxr(v9);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v9));
      if (!v12)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, v7);
      }
    }
  }
  return std::__optional_destruct_base<WebCore::WebGPU::ImageCopyTexture,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v19, v7);
}

uint64_t WebKit::RemoteCommandEncoder::copyTextureToTexture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  int v8;
  void *v9;
  _BYTE v11[16];
  int v12;
  unsigned __int8 v13;
  _BYTE v14[64];
  _BYTE v15[71];
  char v16;

  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a2, (uint64_t)v15);
  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a3, (uint64_t)v14);
  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a4);
  v8 = v13;
  if (v15[56] && v14[56] && v13)
  {
    (*(void (**)(_QWORD, _BYTE *, _BYTE *, _BYTE *))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16), v15, v14, v11);
    v8 = v13;
  }
  if (v8 && v12 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Extent3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v12])(&v16, v11);
  std::__optional_destruct_base<WebCore::WebGPU::ImageCopyTexture,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v14, v7);
  return std::__optional_destruct_base<WebCore::WebGPU::ImageCopyTexture,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15, v9);
}

uint64_t WebKit::RemoteCommandEncoder::clearBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  result = WebKit::WebGPU::ObjectHeap::convertBufferFromBacking(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a2);
  if (result)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 64))(*(_QWORD *)(a1 + 16), result, a3, a4, a5);
  return result;
}

uint64_t WebKit::RemoteCommandEncoder::writeTimestamp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = WebKit::WebGPU::ObjectHeap::convertQuerySetFromBacking(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a2);
  if (result)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 96))(*(_QWORD *)(a1 + 16), result, a3);
  return result;
}

uint64_t WebKit::RemoteCommandEncoder::resolveQuerySet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t SetFromBacking;
  uint64_t result;
  BOOL v13;

  SetFromBacking = WebKit::WebGPU::ObjectHeap::convertQuerySetFromBacking(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a2);
  result = WebKit::WebGPU::ObjectHeap::convertBufferFromBacking(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a5);
  if (SetFromBacking)
    v13 = result == 0;
  else
    v13 = 1;
  if (!v13)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16)
                                                                                          + 104))(*(_QWORD *)(a1 + 16), SetFromBacking, a3, a4, result, a6);
  return result;
}

WTF::StringImpl *WebKit::RemoteCommandEncoder::finish(uint64_t a1, WTF::StringImpl **a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WebKit::GPUConnectionToWebProcess *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  WTF::StringImpl *result;
  unsigned __int8 *v17;
  WebKit::GPUConnectionToWebProcess *v18;
  WebKit::GPUConnectionToWebProcess *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  char v22;

  v5 = *a2;
  if (*a2)
    *(_DWORD *)v5 += 2;
  v21 = v5;
  v22 = 1;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 16) + 112))(&v20, *(_QWORD *)(a1 + 16), &v21);
  v7 = (uint64_t)v20;
  if (v20)
  {
    v8 = *(WebKit::GPUConnectionToWebProcess **)(a1 + 32);
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    v10 = (unsigned int *)((char *)v8 + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    v19 = v8;
    v12 = (unsigned int *)WTF::fastMalloc((WTF *)0x30);
    WebKit::RemoteCommandBuffer::RemoteCommandBuffer((uint64_t)v12, v7, v9, (uint64_t *)&v19, a3);
    WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)&v19);
    WebKit::WebGPU::ObjectHeap::addObject(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a3, (uint64_t)v12);
    v13 = v12 + 2;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v12 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
    }
  }
  else
  {
    v17 = *(unsigned __int8 **)(a1 + 48);
    if (v17)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v17, *(_QWORD *)(a1 + 56), &v19);
      if (v19)
      {
        WebKit::GPUConnectionToWebProcess::terminateWebProcess(v19);
        v18 = v19;
        v19 = 0;
        if (v18)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v18 + 2));
      }
    }
  }
  result = v20;
  v20 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    else
      --*((_DWORD *)result + 2);
  }
  if (v22)
  {
    result = v21;
    v21 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::RemoteCompositorIntegration::RemoteCompositorIntegration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E34B8CB0;
  ++*(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = a2;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 16), a3);
  v11 = *(unsigned int **)(a3 + 16);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  *(_QWORD *)(a1 + 24) = v11;
  v13 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 32) = v13;
  *(_QWORD *)(a1 + 40) = a6;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a5 + 16), a5);
  v14 = *(unsigned int **)(a5 + 16);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  *(_QWORD *)(a1 + 48) = v14;
  IPC::StreamServerConnection::startReceivingMessages(*(_QWORD *)(a1 + 32), a1, 0x48u, *(_QWORD *)(a1 + 40));
  return a1;
}

void WebKit::RemoteCompositorIntegration::~RemoteCompositorIntegration(WebKit::RemoteCompositorIntegration *this, void *a2)
{
  unsigned int *v3;
  void *v4;
  unsigned int *v5;
  _DWORD *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  v3 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    do
    {
      v7 = __ldaxr(v3);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v3));
    if (!v8)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)this + 4);
  v5 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    do
    {
      v9 = __ldaxr(v5);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v5));
    if (!v10)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }
  v6 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteCompositorIntegration::~RemoteCompositorIntegration(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebKit::RemoteCompositorIntegration::paintCompositedResultsToCanvas(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  _QWORD *v12;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(unsigned int **)(a1 + 48);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v9 = *a4;
  *a4 = 0;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v10 = &off_1E34B8E70;
  v10[1] = v7;
  v10[2] = a2;
  v10[3] = v9;
  v12 = v10;
  (*(void (**)(uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v6 + 32))(v6, a3, &v12);
  result = (uint64_t)v12;
  v12 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unsigned __int8 *WebKit::RemoteCompositorIntegration::recreateRenderBuffers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unsigned __int8 *result;
  uint64_t v19;
  WebKit::GPUConnectionToWebProcess *v20;
  WebKit::GPUConnectionToWebProcess *v21[2];

  v15 = WebKit::WebGPU::ObjectHeap::convertDeviceFromBacking(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a7);
  if (v15 || (v19 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8)) == 0)
  {
    (*(void (**)(WebKit::GPUConnectionToWebProcess **__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(v21, *(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, v15);
    v16 = *a8;
    *a8 = 0;
    (*(void (**)(uint64_t, WebKit::GPUConnectionToWebProcess **))(*(_QWORD *)v16 + 16))(v16, v21);
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    return (unsigned __int8 *)WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v21, v17);
  }
  else
  {
    result = *(unsigned __int8 **)(v19 + 24);
    if (result)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(_QWORD *)(v19 + 32), v21);
      result = (unsigned __int8 *)v21[0];
      if (v21[0])
      {
        result = (unsigned __int8 *)WebKit::GPUConnectionToWebProcess::terminateWebProcess(v21[0]);
        v20 = v21[0];
        v21[0] = 0;
        if (v20)
          return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v20 + 2));
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteCompositorIntegration::prepareForDisplay(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = &off_1E34B8E98;
  v4[1] = v3;
  v6 = v4;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v2 + 24))(v2, &v6);
  result = (uint64_t)v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WebKit::RemoteComputePassEncoder::~RemoteComputePassEncoder(unsigned int **this)
{
  WTF *v1;
  void *v2;

  WebKit::RemoteBindGroup::~RemoteBindGroup(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::RemoteComputePassEncoder::setPipeline(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = WebKit::WebGPU::ObjectHeap::convertComputePipelineFromBacking(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a2);
  if (result)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), result);
  return result;
}

uint64_t WebKit::RemoteComputePassEncoder::dispatchIndirect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = WebKit::WebGPU::ObjectHeap::convertBufferFromBacking(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a2);
  if (result)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), result, a3);
  return result;
}

uint64_t WebKit::RemoteComputePassEncoder::setBindGroup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = WebKit::WebGPU::ObjectHeap::convertBindGroupFromBacking(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a3);
  if (result)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16), a2, result, a4);
  return result;
}

uint64_t WebKit::RemoteComputePipeline::RemoteComputePipeline(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E34B8D00;
  ++*(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = a2;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 16), a3);
  v9 = *(unsigned int **)(a3 + 16);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *(_QWORD *)(a1 + 24) = v9;
  v11 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = a5;
  IPC::StreamServerConnection::startReceivingMessages(v11, a1, 0x4Au, a5);
  return a1;
}

void WebKit::RemoteComputePipeline::~RemoteComputePipeline(unsigned int **this)
{
  WTF *v1;
  void *v2;

  WebKit::RemoteBindGroup::~RemoteBindGroup(this);
  WTF::fastFree(v1, v2);
}

_DWORD *WebKit::RemoteComputePipeline::getBindGroupLayout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  _DWORD *result;
  unsigned int *v15;
  _DWORD *v16;

  (*(void (**)(_DWORD **__return_ptr))(**(_QWORD **)(a1 + 16) + 16))(&v16);
  v5 = (uint64_t)v16;
  v6 = *(unsigned int **)(a1 + 32);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  v8 = v6 + 2;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v15 = v6;
  v10 = (unsigned int *)WTF::fastMalloc((WTF *)0x30);
  WebKit::RemoteBindGroupLayout::RemoteBindGroupLayout((uint64_t)v10, v5, v7, (uint64_t *)&v15, a3);
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(&v15);
  WebKit::WebGPU::ObjectHeap::addObject(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a3, (uint64_t)v10);
  v11 = v10 + 2;
  do
  {
    v12 = __ldaxr(v11);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v11));
  if (!v13)
  {
    atomic_store(1u, v10 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
  }
  result = v16;
  v16 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebKit::RemoteDevice::RemoteDevice(uint64_t a1, _QWORD *a2, _DWORD *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  WTF::ThreadSafeWeakPtrControlBlock *v23;
  _DWORD *v25;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E34B8D28;
  ++a3[2];
  *(_QWORD *)(a1 + 16) = a3;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a4 + 16), a4);
  v14 = *(unsigned int **)(a4 + 16);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  *(_QWORD *)(a1 + 24) = v14;
  v16 = *a5;
  v17 = (unsigned int *)(*a5 + 8);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 + 1, v17));
  *(_QWORD *)(a1 + 32) = v16;
  *(_QWORD *)(a1 + 40) = a6;
  (*(void (**)(_DWORD **__return_ptr, _DWORD *))(*(_QWORD *)a3 + 16))(&v25, a3);
  v19 = (uint64_t)v25;
  v20 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)(a1 + 48) = WebKit::RemoteQueue::RemoteQueue(v20, v19, a4, a5, a7);
  v21 = v25;
  v25 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  v22 = a2[24];
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v22 + 16));
  *(_QWORD *)(a1 + 56) = v22;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v22 + 16));
  *(_QWORD *)(a1 + 64) = v22;
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)(a1 + 72), (const WTF::MachSendRight *)(a2 + 11));
  *(_BYTE *)(a1 + 76) = 1;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 0;
  v23 = (WTF::ThreadSafeWeakPtrControlBlock *)a2[2];
  if (v23)
    v23 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v23);
  *(_QWORD *)(a1 + 144) = v23;
  *(_QWORD *)(a1 + 152) = a2;
  IPC::StreamServerConnection::startReceivingMessages(*(_QWORD *)(a1 + 32), a1, 0x4Bu, *(_QWORD *)(a1 + 40));
  return a1;
}

void WebKit::RemoteDevice::~RemoteDevice(WebKit::RemoteDevice *this, void *a2)
{
  unsigned __int8 *v3;
  void *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  void *v10;
  unsigned int *v11;
  _DWORD *v12;
  unsigned int v13;
  unsigned int v14;

  v3 = (unsigned __int8 *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  WebKit::SharedVideoFrameReader::~SharedVideoFrameReader((WebKit::RemoteDevice *)((char *)this + 64));
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), v4);
  v6 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)this + 4);
  v11 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v11)
  {
    do
    {
      v13 = __ldaxr(v11);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v11));
    if (!v14)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, v10);
    }
  }
  v12 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v12)
  {
    if (v12[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    else
      --v12[2];
  }
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteDevice::~RemoteDevice(this, a2);
  WTF::fastFree(v2, v3);
}

WTF::StringImpl *WebKit::RemoteDevice::createBuffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  __int16 v8;
  char v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WebKit::GPUConnectionToWebProcess *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  WTF::StringImpl *result;
  unsigned __int8 *v22;
  WebKit::GPUConnectionToWebProcess *v23;
  WebKit::GPUConnectionToWebProcess *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26[2];
  __int16 v27;
  char v28;
  char v29;

  v6 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v6 += 2;
  v7 = *(WTF::StringImpl **)(a2 + 8);
  v8 = *(_WORD *)(a2 + 16);
  v9 = *(_BYTE *)(a2 + 18);
  v26[0] = v6;
  v26[1] = v7;
  v27 = v8;
  v28 = v9;
  v29 = 1;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 16) + 32))(&v25, *(_QWORD *)(a1 + 16), v26);
  v11 = (uint64_t)v25;
  if (v25)
  {
    v12 = *(WebKit::GPUConnectionToWebProcess **)(a1 + 32);
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    v14 = (unsigned int *)((char *)v12 + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
    v24 = v12;
    v16 = *(unsigned __int8 *)(a2 + 18);
    v17 = (unsigned int *)WTF::fastMalloc((WTF *)0x38);
    WebKit::RemoteBuffer::RemoteBuffer((uint64_t)v17, v11, v13, (uint64_t *)&v24, v16, a3);
    WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)&v24);
    WebKit::WebGPU::ObjectHeap::addObject(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a3, (uint64_t)v17);
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
    }
  }
  else
  {
    v22 = *(unsigned __int8 **)(a1 + 144);
    if (v22)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v22, *(_QWORD *)(a1 + 152), &v24);
      if (v24)
      {
        WebKit::GPUConnectionToWebProcess::terminateWebProcess(v24);
        v23 = v24;
        v24 = 0;
        if (v23)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v23 + 2));
      }
    }
  }
  result = v25;
  v25 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    else
      --*((_DWORD *)result + 2);
  }
  if (v29)
  {
    result = v26[0];
    v26[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned __int8 *WebKit::RemoteDevice::createTexture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  WebKit::GPUConnectionToWebProcess *v6;
  unsigned __int8 *v7;
  WebKit::GPUConnectionToWebProcess *v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  WebKit::GPUConnectionToWebProcess *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned __int8 *result;
  WTF *v19;
  WebKit::GPUConnectionToWebProcess *v20;
  unsigned __int8 *v21;
  WebKit::GPUConnectionToWebProcess *v22;
  unsigned int *v23;
  WebKit::GPUConnectionToWebProcess *v24;
  WebKit::GPUConnectionToWebProcess *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  int v28;
  WTF *v29;
  int v30;
  char v31;

  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a2, (uint64_t)&v26);
  if (v31)
  {
    (*(void (**)(WebKit::GPUConnectionToWebProcess **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 16) + 40))(&v25, *(_QWORD *)(a1 + 16), &v26);
    v6 = v25;
    if (v25)
    {
      v7 = *(unsigned __int8 **)(a1 + 144);
      if (v7)
      {
        WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v7, *(_QWORD *)(a1 + 152), &v24);
        v8 = v24;
        v6 = v25;
      }
      else
      {
        v8 = 0;
        v24 = 0;
      }
      v25 = 0;
      v9 = *(unsigned int **)(a1 + 32);
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
      v11 = v9 + 2;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
      v23 = v9;
      v13 = (unsigned int *)WTF::fastMalloc((WTF *)0x40);
      WebKit::RemoteTexture::RemoteTexture((uint64_t)v13, (uint64_t)v8, (uint64_t)v6, v10, (uint64_t *)&v23, a3);
      WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(&v23);
      if (*((_DWORD *)v6 + 2) == 1)
        (*(void (**)(WebKit::GPUConnectionToWebProcess *))(*(_QWORD *)v6 + 8))(v6);
      else
        --*((_DWORD *)v6 + 2);
      v14 = v24;
      v24 = 0;
      if (v14)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v14 + 2));
      WebKit::WebGPU::ObjectHeap::addObject(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a3, (uint64_t)v13);
      v15 = v13 + 2;
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        atomic_store(1u, v13 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
      }
    }
    else
    {
      v21 = *(unsigned __int8 **)(a1 + 144);
      if (v21)
      {
        WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v21, *(_QWORD *)(a1 + 152), &v24);
        if (v24)
        {
          WebKit::GPUConnectionToWebProcess::terminateWebProcess(v24);
          v22 = v24;
          v24 = 0;
          if (v22)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v22 + 2));
        }
      }
    }
    result = (unsigned __int8 *)v25;
    v25 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    result = *(unsigned __int8 **)(a1 + 144);
    if (result)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(_QWORD *)(a1 + 152), &v25);
      result = (unsigned __int8 *)v25;
      if (v25)
      {
        result = (unsigned __int8 *)WebKit::GPUConnectionToWebProcess::terminateWebProcess(v25);
        v20 = v25;
        v25 = 0;
        if (v20)
          result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v20 + 2));
      }
    }
  }
  if (v31)
  {
    v19 = v29;
    if (v29)
    {
      v29 = 0;
      v30 = 0;
      WTF::fastFree(v19, v5);
    }
    if (v28 != -1)
      ((void (*)(WebKit::GPUConnectionToWebProcess **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Extent3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v28])(&v25, &v27);
    v28 = -1;
    result = (unsigned __int8 *)v26;
    v26 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::RemoteDevice::createSampler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  __int16 v6;
  int v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WebKit::GPUConnectionToWebProcess *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  WTF::StringImpl *result;
  unsigned __int8 *v19;
  WebKit::GPUConnectionToWebProcess *v20;
  WebKit::GPUConnectionToWebProcess *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  int v27;
  char v28;

  v5 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v5 += 2;
  v6 = *(_WORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 24);
  v23 = v5;
  v24 = *(_DWORD *)(a2 + 8);
  v25 = v6;
  v26 = *(_QWORD *)(a2 + 16);
  v27 = v7;
  v28 = 1;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 16) + 48))(&v22, *(_QWORD *)(a1 + 16), &v23);
  v9 = (uint64_t)v22;
  if (v22)
  {
    v10 = *(WebKit::GPUConnectionToWebProcess **)(a1 + 32);
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    v12 = (unsigned int *)((char *)v10 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    v21 = v10;
    v14 = (unsigned int *)WTF::fastMalloc((WTF *)0x30);
    WebKit::RemoteSampler::RemoteSampler((uint64_t)v14, v9, v11, (uint64_t *)&v21, a3);
    WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)&v21);
    WebKit::WebGPU::ObjectHeap::addObject(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a3, (uint64_t)v14);
    v15 = v14 + 2;
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v14 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
    }
  }
  else
  {
    v19 = *(unsigned __int8 **)(a1 + 144);
    if (v19)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v19, *(_QWORD *)(a1 + 152), &v21);
      if (v21)
      {
        WebKit::GPUConnectionToWebProcess::terminateWebProcess(v21);
        v20 = v21;
        v21 = 0;
        if (v20)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v20 + 2));
      }
    }
  }
  result = v22;
  v22 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    else
      --*((_DWORD *)result + 2);
  }
  if (v28)
  {
    result = v23;
    v23 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebKit::RemoteDevice::importExternalTextureFromVideoFrame(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int *v7;
  const void *v8;
  const void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned __int8 *v13;
  CFTypeRef v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WebKit::GPUConnectionToWebProcess *v17;
  WebKit::GPUConnectionToWebProcess *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  WebKit::GPUConnectionToWebProcess *v26;
  unsigned int v27;
  unsigned int v28;
  WebKit::GPUConnectionToWebProcess *v29;
  WTF::StringImpl *v30;
  CFTypeRef v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WebKit::GPUConnectionToWebProcess *v34;
  WebKit::GPUConnectionToWebProcess *v35;
  WTF::StringImpl *v36;
  unsigned __int8 *v37;
  WebKit::GPUConnectionToWebProcess *v38;
  unsigned __int8 *v39;
  WebKit::GPUConnectionToWebProcess *v40;
  WebKit::GPUConnectionToWebProcess *v41;
  CFTypeRef v42;
  WebKit::GPUConnectionToWebProcess *v43;
  CFTypeRef cf;
  __int128 v45;
  int v46;
  _BYTE v47[16];
  int v48;
  char v49;
  WTF::StringImpl *v50[2];
  uint64_t v51;
  int v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  LOBYTE(v45) = 0;
  v49 = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    v45 = *(_OWORD *)(a2 + 32);
    v46 = *(_DWORD *)(a2 + 48);
    v47[0] = 0;
    v48 = -1;
    v6 = *(unsigned int *)(a2 + 72);
    if ((_DWORD)v6 != -1)
    {
      ((void (*)(WTF::StringImpl **, _BYTE *, uint64_t))off_1E34B8E08[v6])(v50, v47, a2 + 56);
      v48 = v6;
    }
    v49 = 1;
    cf = 0;
    WebKit::SharedVideoFrameReader::read(a1 + 64, (uint64_t)&v45, v50);
    v7 = (unsigned int *)v50[0];
    if (v50[0])
    {
      v8 = (const void *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v50[0] + 56))(v50[0]);
      v9 = v8;
      if (v8)
        CFRetain(v8);
      cf = v9;
      v50[0] = 0;
      v10 = v7 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v7 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
      }
    }
  }
  else
  {
    cf = 0;
    if (!*(_BYTE *)(a2 + 16))
    {
      v15 = a1 + 24;
      v42 = 0;
      goto LABEL_16;
    }
    v13 = *(unsigned __int8 **)(a1 + 144);
    if (v13)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v13, *(_QWORD *)(a1 + 152), v50);
      v32 = v50[0];
      if (v50[0])
      {
        if (!*(_BYTE *)(a2 + 16))
          __break(1u);
        v33 = *(_QWORD *)(a2 + 8);
        v34 = (WebKit::GPUConnectionToWebProcess *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v34 = off_1E34B8EC0;
        *((_QWORD *)v34 + 1) = &cf;
        v43 = v34;
        WebKit::GPUConnectionToWebProcess::performWithMediaPlayerOnMainThread((uint64_t)v32, v33, (uint64_t)&v43);
        v35 = v43;
        v43 = 0;
        if (v35)
          (*(void (**)(WebKit::GPUConnectionToWebProcess *))(*(_QWORD *)v35 + 8))(v35);
        v36 = v50[0];
        v50[0] = 0;
        if (v36)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v36 + 2));
      }
    }
  }
  v14 = cf;
  v15 = a1 + 24;
  v42 = cf;
  if (cf)
  {
    CFRetain(cf);
    WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(a2, &v42, (uint64_t)v50);
    v42 = 0;
    CFRelease(v14);
    goto LABEL_17;
  }
LABEL_16:
  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(a2, &v42, (uint64_t)v50);
  v42 = 0;
LABEL_17:
  if (v53)
  {
    (*(void (**)(WebKit::GPUConnectionToWebProcess **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 16) + 56))(&v43, *(_QWORD *)(a1 + 16), v50);
    v17 = v43;
    if (v43)
    {
      v18 = *(WebKit::GPUConnectionToWebProcess **)(a1 + 32);
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
      v20 = (unsigned int *)((char *)v18 + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 + 1, v20));
      v41 = v18;
      v22 = WTF::fastMalloc((WTF *)0x30);
      *(_DWORD *)(v22 + 8) = 1;
      v23 = (unsigned int *)(v22 + 8);
      *(_QWORD *)v22 = off_1E34B8D50;
      ++*((_DWORD *)v17 + 2);
      *(_QWORD *)(v22 + 16) = v17;
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v19 + 16), v19);
      v24 = *(unsigned int **)(v19 + 16);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 + 1, v24));
      v26 = v41;
      v41 = 0;
      *(_QWORD *)(v22 + 24) = v24;
      *(_QWORD *)(v22 + 32) = v26;
      *(_QWORD *)(v22 + 40) = a3;
      IPC::StreamServerConnection::startReceivingMessages((uint64_t)v26, v22, 0x4Du, a3);
      WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)&v41);
      WebKit::WebGPU::ObjectHeap::addObject(*(_QWORD *)(*(_QWORD *)v15 + 8), a3, v22);
      do
      {
        v27 = __ldaxr(v23);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v23));
      if (!v28)
      {
        atomic_store(1u, (unsigned int *)(v22 + 8));
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      }
    }
    else
    {
      v39 = *(unsigned __int8 **)(a1 + 144);
      if (v39)
      {
        WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v39, *(_QWORD *)(a1 + 152), &v41);
        if (v41)
        {
          WebKit::GPUConnectionToWebProcess::terminateWebProcess(v41);
          v40 = v41;
          v41 = 0;
          if (v40)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v40 + 2));
        }
      }
    }
    v29 = v43;
    v43 = 0;
    if (v29)
    {
      if (*((_DWORD *)v29 + 2) == 1)
        (*(void (**)(WebKit::GPUConnectionToWebProcess *))(*(_QWORD *)v29 + 8))(v29);
      else
        --*((_DWORD *)v29 + 2);
    }
  }
  else
  {
    v37 = *(unsigned __int8 **)(a1 + 144);
    if (v37)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v37, *(_QWORD *)(a1 + 152), &v43);
      if (v43)
      {
        WebKit::GPUConnectionToWebProcess::terminateWebProcess(v43);
        v38 = v43;
        v43 = 0;
        if (v38)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v38 + 2));
      }
    }
  }
  if (v53)
  {
    if (v52 != -1)
      ((void (*)(WebKit::GPUConnectionToWebProcess **, uint64_t *))off_1E34B8E28[v52])(&v43, &v51);
    v52 = -1;
    v30 = v50[0];
    v50[0] = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v16);
      else
        *(_DWORD *)v30 -= 2;
    }
  }
  v31 = cf;
  cf = 0;
  if (v31)
    CFRelease(v31);
  if (v49)
  {
    if (v48 != -1)
      ((void (*)(WTF::StringImpl **, _BYTE *))off_1E34B8DE8[v48])(v50, v47);
  }
}

unsigned __int8 *WebKit::RemoteDevice::createBindGroupLayout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  WebKit::GPUConnectionToWebProcess *v6;
  WebKit::GPUConnectionToWebProcess *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned __int8 *result;
  WTF *v16;
  WebKit::GPUConnectionToWebProcess *v17;
  unsigned __int8 *v18;
  WebKit::GPUConnectionToWebProcess *v19;
  WebKit::GPUConnectionToWebProcess *v20;
  WebKit::GPUConnectionToWebProcess *v21;
  WTF::StringImpl *v22;
  WTF *v23;
  int v24;
  char v25;

  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(a2, (uint64_t)&v22);
  if (v25)
  {
    (*(void (**)(WebKit::GPUConnectionToWebProcess **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 16) + 64))(&v21, *(_QWORD *)(a1 + 16), &v22);
    v6 = v21;
    if (v21)
    {
      v7 = *(WebKit::GPUConnectionToWebProcess **)(a1 + 32);
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
      v9 = (unsigned int *)((char *)v7 + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      v20 = v7;
      v11 = (unsigned int *)WTF::fastMalloc((WTF *)0x30);
      WebKit::RemoteBindGroupLayout::RemoteBindGroupLayout((uint64_t)v11, (uint64_t)v6, v8, (uint64_t *)&v20, a3);
      WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)&v20);
      WebKit::WebGPU::ObjectHeap::addObject(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a3, (uint64_t)v11);
      v12 = v11 + 2;
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v11 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
      }
    }
    else
    {
      v18 = *(unsigned __int8 **)(a1 + 144);
      if (v18)
      {
        WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v18, *(_QWORD *)(a1 + 152), &v20);
        if (v20)
        {
          WebKit::GPUConnectionToWebProcess::terminateWebProcess(v20);
          v19 = v20;
          v20 = 0;
          if (v19)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v19 + 2));
        }
      }
    }
    result = (unsigned __int8 *)v21;
    v21 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    result = *(unsigned __int8 **)(a1 + 144);
    if (result)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(_QWORD *)(a1 + 152), &v21);
      result = (unsigned __int8 *)v21;
      if (v21)
      {
        result = (unsigned __int8 *)WebKit::GPUConnectionToWebProcess::terminateWebProcess(v21);
        v17 = v21;
        v21 = 0;
        if (v17)
          result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v17 + 2));
      }
    }
  }
  if (v25)
  {
    v16 = v23;
    if (v23)
    {
      v23 = 0;
      v24 = 0;
      WTF::fastFree(v16, v5);
    }
    result = (unsigned __int8 *)v22;
    v22 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned __int8 *WebKit::RemoteDevice::createPipelineLayout(uint64_t a1, WTF::StringImpl **a2, uint64_t a3)
{
  void *v5;
  WebKit::GPUConnectionToWebProcess *v6;
  WebKit::GPUConnectionToWebProcess *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  WebKit::GPUConnectionToWebProcess *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned __int8 *result;
  WTF *v19;
  WebKit::GPUConnectionToWebProcess *v20;
  unsigned __int8 *v21;
  WebKit::GPUConnectionToWebProcess *v22;
  WebKit::GPUConnectionToWebProcess *v23;
  WebKit::GPUConnectionToWebProcess *v24;
  WTF::StringImpl *v25;
  WTF *v26;
  int v27;
  char v28;
  char v29;

  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(*(WTF **)(*(_QWORD *)(a1 + 24) + 8), a2, (uint64_t)&v25);
  if (v29)
  {
    (*(void (**)(WebKit::GPUConnectionToWebProcess **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 16) + 72))(&v24, *(_QWORD *)(a1 + 16), &v25);
    v6 = v24;
    if (v24)
    {
      v7 = *(WebKit::GPUConnectionToWebProcess **)(a1 + 32);
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
      v9 = (unsigned int *)((char *)v7 + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      v23 = v7;
      v11 = WTF::fastMalloc((WTF *)0x30);
      *(_DWORD *)(v11 + 8) = 1;
      v12 = (unsigned int *)(v11 + 8);
      *(_QWORD *)v11 = off_1E34B8DA0;
      ++*((_DWORD *)v6 + 2);
      *(_QWORD *)(v11 + 16) = v6;
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v8 + 16), v8);
      v13 = *(unsigned int **)(v8 + 16);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
      v15 = v23;
      v23 = 0;
      *(_QWORD *)(v11 + 24) = v13;
      *(_QWORD *)(v11 + 32) = v15;
      *(_QWORD *)(v11 + 40) = a3;
      IPC::StreamServerConnection::startReceivingMessages((uint64_t)v15, v11, 0x6Au, a3);
      WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)&v23);
      WebKit::WebGPU::ObjectHeap::addObject(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a3, v11);
      do
      {
        v16 = __ldaxr(v12);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v12));
      if (!v17)
      {
        atomic_store(1u, (unsigned int *)(v11 + 8));
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      }
    }
    else
    {
      v21 = *(unsigned __int8 **)(a1 + 144);
      if (v21)
      {
        WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v21, *(_QWORD *)(a1 + 152), &v23);
        if (v23)
        {
          WebKit::GPUConnectionToWebProcess::terminateWebProcess(v23);
          v22 = v23;
          v23 = 0;
          if (v22)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v22 + 2));
        }
      }
    }
    result = (unsigned __int8 *)v24;
    v24 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    result = *(unsigned __int8 **)(a1 + 144);
    if (result)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(_QWORD *)(a1 + 152), &v24);
      result = (unsigned __int8 *)v24;
      if (v24)
      {
        result = (unsigned __int8 *)WebKit::GPUConnectionToWebProcess::terminateWebProcess(v24);
        v20 = v24;
        v24 = 0;
        if (v20)
          result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v20 + 2));
      }
    }
  }
  if (v29)
  {
    if (v28)
    {
      v19 = v26;
      if (v26)
      {
        v26 = 0;
        v27 = 0;
        WTF::fastFree(v19, v5);
      }
    }
    result = (unsigned __int8 *)v25;
    v25 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned __int8 *WebKit::RemoteDevice::createBindGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  WebKit::GPUConnectionToWebProcess *v6;
  WebKit::GPUConnectionToWebProcess *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned __int8 *result;
  void *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  WebKit::GPUConnectionToWebProcess *v20;
  unsigned __int8 *v21;
  WebKit::GPUConnectionToWebProcess *v22;
  WebKit::GPUConnectionToWebProcess *v23;
  WebKit::GPUConnectionToWebProcess *v24;
  WTF::StringImpl *v25;
  WTF *v26;
  uint64_t v27;
  char v28;

  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a2, (uint64_t)&v25);
  if (v28)
  {
    (*(void (**)(WebKit::GPUConnectionToWebProcess **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 16) + 80))(&v24, *(_QWORD *)(a1 + 16), &v25);
    v6 = v24;
    if (v24)
    {
      v7 = *(WebKit::GPUConnectionToWebProcess **)(a1 + 32);
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
      v9 = (unsigned int *)((char *)v7 + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      v23 = v7;
      v11 = (unsigned int *)WTF::fastMalloc((WTF *)0x30);
      WebKit::RemoteBindGroup::RemoteBindGroup((uint64_t)v11, (uint64_t)v6, v8, (uint64_t *)&v23, a3);
      WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)&v23);
      WebKit::WebGPU::ObjectHeap::addObject(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a3, (uint64_t)v11);
      v12 = v11 + 2;
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v11 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
      }
    }
    else
    {
      v21 = *(unsigned __int8 **)(a1 + 144);
      if (v21)
      {
        WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v21, *(_QWORD *)(a1 + 152), &v23);
        if (v23)
        {
          WebKit::GPUConnectionToWebProcess::terminateWebProcess(v23);
          v22 = v23;
          v23 = 0;
          if (v22)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v22 + 2));
        }
      }
    }
    result = (unsigned __int8 *)v24;
    v24 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    result = *(unsigned __int8 **)(a1 + 144);
    if (result)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(_QWORD *)(a1 + 152), &v24);
      result = (unsigned __int8 *)v24;
      if (v24)
      {
        result = (unsigned __int8 *)WebKit::GPUConnectionToWebProcess::terminateWebProcess(v24);
        v20 = v24;
        v24 = 0;
        if (v20)
          result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v20 + 2));
      }
    }
  }
  if (v28)
  {
    WTF::Vector<WebCore::WebGPU::BindGroupEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v5);
    v17 = (unsigned int *)v26;
    v26 = 0;
    if (v17)
    {
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        atomic_store(1u, v17);
        WTF::fastFree((WTF *)v17, v16);
      }
    }
    result = (unsigned __int8 *)v25;
    v25 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v16);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned __int8 *WebKit::RemoteDevice::createShaderModule(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  WebKit::GPUConnectionToWebProcess *v6;
  WebKit::GPUConnectionToWebProcess *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned __int8 *result;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WebKit::GPUConnectionToWebProcess *v18;
  unsigned __int8 *v19;
  WebKit::GPUConnectionToWebProcess *v20;
  WebKit::GPUConnectionToWebProcess *v21;
  WebKit::GPUConnectionToWebProcess *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  char v26;

  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a2, (uint64_t)&v23);
  if (v26)
  {
    (*(void (**)(WebKit::GPUConnectionToWebProcess **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 16) + 88))(&v22, *(_QWORD *)(a1 + 16), &v23);
    v6 = v22;
    if (v22)
    {
      v7 = *(WebKit::GPUConnectionToWebProcess **)(a1 + 32);
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
      v9 = (unsigned int *)((char *)v7 + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      v21 = v7;
      v11 = (unsigned int *)WTF::fastMalloc((WTF *)0x30);
      WebKit::RemoteShaderModule::RemoteShaderModule((uint64_t)v11, (uint64_t)v6, v8, (uint64_t *)&v21, a3);
      WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)&v21);
      WebKit::WebGPU::ObjectHeap::addObject(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a3, (uint64_t)v11);
      v12 = v11 + 2;
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v11 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
      }
    }
    else
    {
      v19 = *(unsigned __int8 **)(a1 + 144);
      if (v19)
      {
        WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v19, *(_QWORD *)(a1 + 152), &v21);
        if (v21)
        {
          WebKit::GPUConnectionToWebProcess::terminateWebProcess(v21);
          v20 = v21;
          v21 = 0;
          if (v20)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v20 + 2));
        }
      }
    }
    result = (unsigned __int8 *)v22;
    v22 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    result = *(unsigned __int8 **)(a1 + 144);
    if (result)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(_QWORD *)(a1 + 152), &v22);
      result = (unsigned __int8 *)v22;
      if (v22)
      {
        result = (unsigned __int8 *)WebKit::GPUConnectionToWebProcess::terminateWebProcess(v22);
        v18 = v22;
        v22 = 0;
        if (v18)
          result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v18 + 2));
      }
    }
  }
  if (v26)
  {
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v5);
    v17 = v24;
    v24 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    result = (unsigned __int8 *)v23;
    v23 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v16);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::RemoteDevice::createComputePipeline(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  WebKit::GPUConnectionToWebProcess *v6;
  WebKit::GPUConnectionToWebProcess *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  WebKit::GPUConnectionToWebProcess *v15;
  unsigned __int8 *v17;
  WebKit::GPUConnectionToWebProcess *v18;
  unsigned __int8 *v19;
  WebKit::GPUConnectionToWebProcess *v20;
  WebKit::GPUConnectionToWebProcess *v21;
  WebKit::GPUConnectionToWebProcess *v22;
  _BYTE v23[64];

  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(*(unsigned int **)(*(_QWORD *)(a1 + 24) + 8), a2, (uint64_t)v23);
  if (v23[56])
  {
    (*(void (**)(WebKit::GPUConnectionToWebProcess **__return_ptr, _QWORD, _BYTE *))(**(_QWORD **)(a1 + 16)
                                                                                              + 96))(&v22, *(_QWORD *)(a1 + 16), v23);
    v6 = v22;
    if (v22)
    {
      v7 = *(WebKit::GPUConnectionToWebProcess **)(a1 + 32);
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
      v9 = (unsigned int *)((char *)v7 + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      v21 = v7;
      v11 = (unsigned int *)WTF::fastMalloc((WTF *)0x30);
      WebKit::RemoteComputePipeline::RemoteComputePipeline((uint64_t)v11, (uint64_t)v6, v8, (uint64_t *)&v21, a3);
      WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)&v21);
      WebKit::WebGPU::ObjectHeap::addObject(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a3, (uint64_t)v11);
      v12 = v11 + 2;
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v11 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
      }
    }
    else
    {
      v19 = *(unsigned __int8 **)(a1 + 144);
      if (v19)
      {
        WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v19, *(_QWORD *)(a1 + 152), &v21);
        if (v21)
        {
          WebKit::GPUConnectionToWebProcess::terminateWebProcess(v21);
          v20 = v21;
          v21 = 0;
          if (v20)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v20 + 2));
        }
      }
    }
    v15 = v22;
    v22 = 0;
    if (v15)
    {
      if (*((_DWORD *)v15 + 2) == 1)
        (*(void (**)(WebKit::GPUConnectionToWebProcess *))(*(_QWORD *)v15 + 8))(v15);
      else
        --*((_DWORD *)v15 + 2);
    }
  }
  else
  {
    v17 = *(unsigned __int8 **)(a1 + 144);
    if (v17)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v17, *(_QWORD *)(a1 + 152), &v22);
      if (v22)
      {
        WebKit::GPUConnectionToWebProcess::terminateWebProcess(v22);
        v18 = v22;
        v22 = 0;
        if (v18)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v18 + 2));
      }
    }
  }
  return std::__optional_destruct_base<WebCore::WebGPU::ComputePipelineDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v23, v5);
}

void WebKit::RemoteDevice::createRenderPipeline(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  WebKit::GPUConnectionToWebProcess *v6;
  WebKit::GPUConnectionToWebProcess *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  WebKit::GPUConnectionToWebProcess *v15;
  unsigned __int8 *v16;
  WebKit::GPUConnectionToWebProcess *v17;
  unsigned __int8 *v18;
  WebKit::GPUConnectionToWebProcess *v19;
  WebKit::GPUConnectionToWebProcess *v20;
  WebKit::GPUConnectionToWebProcess *v21;
  _BYTE v22[208];
  char v23;

  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(*(unsigned int **)(*(_QWORD *)(a1 + 24) + 8), a2, (uint64_t)v22);
  if (v23)
  {
    (*(void (**)(WebKit::GPUConnectionToWebProcess **__return_ptr, _QWORD, _BYTE *))(**(_QWORD **)(a1 + 16)
                                                                                              + 104))(&v21, *(_QWORD *)(a1 + 16), v22);
    v6 = v21;
    if (v21)
    {
      v7 = *(WebKit::GPUConnectionToWebProcess **)(a1 + 32);
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
      v9 = (unsigned int *)((char *)v7 + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      v20 = v7;
      v11 = (unsigned int *)WTF::fastMalloc((WTF *)0x30);
      WebKit::RemoteRenderPipeline::RemoteRenderPipeline((uint64_t)v11, (uint64_t)v6, v8, (uint64_t *)&v20, a3);
      WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)&v20);
      WebKit::WebGPU::ObjectHeap::addObject(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a3, (uint64_t)v11);
      v12 = v11 + 2;
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v11 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
      }
    }
    else
    {
      v18 = *(unsigned __int8 **)(a1 + 144);
      if (v18)
      {
        WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v18, *(_QWORD *)(a1 + 152), &v20);
        if (v20)
        {
          WebKit::GPUConnectionToWebProcess::terminateWebProcess(v20);
          v19 = v20;
          v20 = 0;
          if (v19)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v19 + 2));
        }
      }
    }
    v15 = v21;
    v21 = 0;
    if (v15)
    {
      if (*((_DWORD *)v15 + 2) == 1)
        (*(void (**)(WebKit::GPUConnectionToWebProcess *))(*(_QWORD *)v15 + 8))(v15);
      else
        --*((_DWORD *)v15 + 2);
    }
  }
  else
  {
    v16 = *(unsigned __int8 **)(a1 + 144);
    if (v16)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v16, *(_QWORD *)(a1 + 152), &v21);
      if (v21)
      {
        WebKit::GPUConnectionToWebProcess::terminateWebProcess(v21);
        v17 = v21;
        v21 = 0;
        if (v17)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v17 + 2));
      }
    }
  }
  if (v23)
    WebCore::WebGPU::RenderPipelineDescriptor::~RenderPipelineDescriptor((WebCore::WebGPU::RenderPipelineDescriptor *)v22, v5);
}

uint64_t WebKit::RemoteDevice::createComputePipelineAsync(_QWORD *a1, uint64_t a2, unsigned int *a3, WTF::StringImpl **a4)
{
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v23;
  uint64_t v24;
  unsigned int *v25[3];
  _QWORD *v26;
  _BYTE v27[64];

  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(*(unsigned int **)(a1[3] + 8), a2, (uint64_t)v27);
  if (v27[56])
  {
    v7 = a1[2];
    v8 = *a4;
    *a4 = 0;
    v9 = *(_QWORD *)(a1[3] + 8);
    ++*(_DWORD *)(v9 + 8);
    v23 = v8;
    v24 = v9;
    v10 = a1[4];
    v11 = (unsigned int *)(v10 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    v25[1] = a3;
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
    *v13 = off_1E34B8EE8;
    v13[1] = v23;
    v14 = v24;
    v23 = 0;
    v24 = 0;
    v13[2] = v14;
    v13[3] = v10;
    v25[0] = 0;
    v13[4] = a3;
    v26 = v13;
    (*(void (**)(uint64_t, _BYTE *, _QWORD **))(*(_QWORD *)v7 + 112))(v7, v27, &v26);
    v15 = v26;
    v26 = 0;
    if (v15)
      (*(void (**)(_QWORD *))(*v15 + 8))(v15);
    WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(v25);
    v17 = v24;
    v24 = 0;
    if (v17)
      WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref((_DWORD *)(v17 + 8), v16);
    v18 = v23;
    v23 = 0;
    if (v18)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v18 + 8))(v18);
  }
  else
  {
    v19 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    v23 = v19;
    v20 = *a4;
    *a4 = 0;
    (*(void (**)(WTF::StringImpl *, _QWORD, WTF::StringImpl **))(*(_QWORD *)v20 + 16))(v20, 0, &v23);
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v20 + 8))(v20);
    v21 = v23;
    v23 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v16);
      else
        *(_DWORD *)v21 -= 2;
    }
  }
  return std::__optional_destruct_base<WebCore::WebGPU::ComputePipelineDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v27, v16);
}

void WebKit::RemoteDevice::createRenderPipelineAsync(_QWORD *a1, uint64_t a2, unsigned int *a3, WTF::StringImpl **a4)
{
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  unsigned int *v24[2];
  _QWORD *v25;
  _BYTE v26[208];
  char v27;

  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(*(unsigned int **)(a1[3] + 8), a2, (uint64_t)v26);
  if (v27)
  {
    v7 = a1[2];
    v8 = *a4;
    *a4 = 0;
    v9 = *(_QWORD *)(a1[3] + 8);
    ++*(_DWORD *)(v9 + 8);
    v22 = v8;
    v23 = v9;
    v10 = a1[4];
    v11 = (unsigned int *)(v10 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    v24[1] = a3;
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
    *v13 = off_1E34B8F10;
    v13[1] = v22;
    v14 = v23;
    v22 = 0;
    v23 = 0;
    v13[2] = v14;
    v13[3] = v10;
    v24[0] = 0;
    v13[4] = a3;
    v25 = v13;
    (*(void (**)(uint64_t, _BYTE *, _QWORD **))(*(_QWORD *)v7 + 120))(v7, v26, &v25);
    v15 = v25;
    v25 = 0;
    if (v15)
      (*(void (**)(_QWORD *))(*v15 + 8))(v15);
    WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(v24);
    v17 = v23;
    v23 = 0;
    if (v17)
      WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref((_DWORD *)(v17 + 8), v16);
    v18 = v22;
    v22 = 0;
    if (v18)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v18 + 8))(v18);
  }
  else
  {
    v19 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    v22 = v19;
    v20 = *a4;
    *a4 = 0;
    (*(void (**)(WTF::StringImpl *, _QWORD, WTF::StringImpl **))(*(_QWORD *)v20 + 16))(v20, 0, &v22);
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v20 + 8))(v20);
    v21 = v22;
    v22 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v16);
      else
        *(_DWORD *)v21 -= 2;
    }
  }
  if (v27)
    WebCore::WebGPU::RenderPipelineDescriptor::~RenderPipelineDescriptor((WebCore::WebGPU::RenderPipelineDescriptor *)v26, v16);
}

WTF::StringImpl *WebKit::RemoteDevice::createCommandEncoder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  unsigned __int8 *v8;
  WebKit::GPUConnectionToWebProcess *v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  WTF::ThreadSafeWeakPtrControlBlock *v19;
  uint64_t v20;
  WebKit::GPUConnectionToWebProcess *v21;
  unsigned int v22;
  unsigned int v23;
  WTF::StringImpl *result;
  unsigned __int8 *v25;
  WebKit::GPUConnectionToWebProcess *v26;
  unsigned int *v27;
  WebKit::GPUConnectionToWebProcess *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  char v31;

  LOBYTE(v30) = 0;
  v31 = 0;
  if (*(_BYTE *)(a2 + 8))
  {
    v5 = *(WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v5 += 2;
    v30 = v5;
    v31 = 1;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 16) + 128))(&v29, *(_QWORD *)(a1 + 16), &v30);
  v7 = v29;
  if (v29)
  {
    v8 = *(unsigned __int8 **)(a1 + 144);
    if (v8)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v8, *(_QWORD *)(a1 + 152), &v28);
      v9 = v28;
      v7 = v29;
    }
    else
    {
      v9 = 0;
      v28 = 0;
    }
    v10 = *(unsigned int **)(a1 + 32);
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    v12 = v10 + 2;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    v27 = v10;
    v14 = WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)(v14 + 8) = 1;
    v15 = (unsigned int *)(v14 + 8);
    *(_QWORD *)v14 = off_1E34B8C88;
    ++*((_DWORD *)v7 + 2);
    *(_QWORD *)(v14 + 16) = v7;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v11 + 16), v11);
    v16 = *(unsigned int **)(v11 + 16);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 + 1, v16));
    v18 = v27;
    v27 = 0;
    *(_QWORD *)(v14 + 24) = v16;
    *(_QWORD *)(v14 + 32) = v18;
    *(_QWORD *)(v14 + 40) = a3;
    v19 = (WTF::ThreadSafeWeakPtrControlBlock *)*((_QWORD *)v9 + 2);
    if (v19)
    {
      v19 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(*((WTF::ThreadSafeWeakPtrControlBlock **)v9 + 2));
      v18 = *(unsigned int **)(v14 + 32);
      v20 = *(_QWORD *)(v14 + 40);
    }
    else
    {
      v20 = a3;
    }
    *(_QWORD *)(v14 + 48) = v19;
    *(_QWORD *)(v14 + 56) = v9;
    IPC::StreamServerConnection::startReceivingMessages((uint64_t)v18, v14, 0x47u, v20);
    WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(&v27);
    v21 = v28;
    v28 = 0;
    if (v21)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v21 + 2));
    WebKit::WebGPU::ObjectHeap::addObject(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a3, v14);
    do
    {
      v22 = __ldaxr(v15);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v15));
    if (!v23)
    {
      atomic_store(1u, (unsigned int *)(v14 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    }
  }
  else
  {
    v25 = *(unsigned __int8 **)(a1 + 144);
    if (v25)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v25, *(_QWORD *)(a1 + 152), &v28);
      if (v28)
      {
        WebKit::GPUConnectionToWebProcess::terminateWebProcess(v28);
        v26 = v28;
        v28 = 0;
        if (v26)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v26 + 2));
      }
    }
  }
  result = v29;
  v29 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    else
      --*((_DWORD *)result + 2);
  }
  if (v31)
  {
    result = v30;
    v30 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned __int8 *WebKit::RemoteDevice::createRenderBundleEncoder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  WebKit::GPUConnectionToWebProcess *v6;
  unsigned __int8 *v7;
  WebKit::GPUConnectionToWebProcess *v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  WebKit::GPUConnectionToWebProcess *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned __int8 *result;
  WTF *v19;
  WebKit::GPUConnectionToWebProcess *v20;
  unsigned __int8 *v21;
  WebKit::GPUConnectionToWebProcess *v22;
  unsigned int *v23;
  WebKit::GPUConnectionToWebProcess *v24;
  WebKit::GPUConnectionToWebProcess *v25;
  WTF::StringImpl *v26;
  WTF *v27;
  int v28;
  char v29;

  WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a2, (uint64_t)&v26);
  if (v29)
  {
    (*(void (**)(WebKit::GPUConnectionToWebProcess **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 16) + 136))(&v25, *(_QWORD *)(a1 + 16), &v26);
    v6 = v25;
    if (v25)
    {
      v7 = *(unsigned __int8 **)(a1 + 144);
      if (v7)
      {
        WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v7, *(_QWORD *)(a1 + 152), &v24);
        v8 = v24;
        v6 = v25;
      }
      else
      {
        v8 = 0;
        v24 = 0;
      }
      v9 = *(unsigned int **)(a1 + 32);
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
      v11 = v9 + 2;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
      v23 = v9;
      v13 = (unsigned int *)WTF::fastMalloc((WTF *)0x40);
      WebKit::RemoteRenderBundleEncoder::RemoteRenderBundleEncoder((uint64_t)v13, (uint64_t)v8, (uint64_t)v6, v10, (uint64_t *)&v23, a3);
      WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(&v23);
      v14 = v24;
      v24 = 0;
      if (v14)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v14 + 2));
      WebKit::WebGPU::ObjectHeap::addObject(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a3, (uint64_t)v13);
      v15 = v13 + 2;
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        atomic_store(1u, v13 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
      }
    }
    else
    {
      v21 = *(unsigned __int8 **)(a1 + 144);
      if (v21)
      {
        WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v21, *(_QWORD *)(a1 + 152), &v24);
        if (v24)
        {
          WebKit::GPUConnectionToWebProcess::terminateWebProcess(v24);
          v22 = v24;
          v24 = 0;
          if (v22)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v22 + 2));
        }
      }
    }
    result = (unsigned __int8 *)v25;
    v25 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
    if (v29)
    {
      v19 = v27;
      if (v27)
      {
        v27 = 0;
        v28 = 0;
        WTF::fastFree(v19, v5);
      }
      result = (unsigned __int8 *)v26;
      v26 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    result = *(unsigned __int8 **)(a1 + 144);
    if (result)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(_QWORD *)(a1 + 152), &v25);
      result = (unsigned __int8 *)v25;
      if (v25)
      {
        result = (unsigned __int8 *)WebKit::GPUConnectionToWebProcess::terminateWebProcess(v25);
        v20 = v25;
        v25 = 0;
        if (v20)
          return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v20 + 2));
      }
    }
  }
  return result;
}

WTF::StringImpl *WebKit::RemoteDevice::createQuerySet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WebKit::GPUConnectionToWebProcess *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  WTF::StringImpl *result;
  unsigned __int8 *v18;
  WebKit::GPUConnectionToWebProcess *v19;
  WebKit::GPUConnectionToWebProcess *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22[2];
  char v23;

  v5 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v5 += 2;
  v6 = (WTF::StringImpl *)(*(unsigned __int8 *)(a2 + 8) | ((unint64_t)*(unsigned int *)(a2 + 12) << 32));
  v22[0] = v5;
  v22[1] = v6;
  v23 = 1;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 16) + 144))(&v21, *(_QWORD *)(a1 + 16), v22);
  v8 = (uint64_t)v21;
  if (v21)
  {
    v9 = *(WebKit::GPUConnectionToWebProcess **)(a1 + 32);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    v11 = (unsigned int *)((char *)v9 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    v20 = v9;
    v13 = (unsigned int *)WTF::fastMalloc((WTF *)0x30);
    WebKit::RemoteQuerySet::RemoteQuerySet((uint64_t)v13, v8, v10, (uint64_t *)&v20, a3);
    WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)&v20);
    WebKit::WebGPU::ObjectHeap::addObject(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a3, (uint64_t)v13);
    v14 = v13 + 2;
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v13 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
    }
  }
  else
  {
    v18 = *(unsigned __int8 **)(a1 + 144);
    if (v18)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v18, *(_QWORD *)(a1 + 152), &v20);
      if (v20)
      {
        WebKit::GPUConnectionToWebProcess::terminateWebProcess(v20);
        v19 = v20;
        v20 = 0;
        if (v19)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v19 + 2));
      }
    }
  }
  result = v21;
  v21 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    else
      --*((_DWORD *)result + 2);
  }
  if (v23)
  {
    result = v22[0];
    v22[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::RemoteDevice::popErrorScope(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = &off_1E34B8F38;
  v4[1] = v3;
  v6 = v4;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v2 + 160))(v2, &v6);
  result = (uint64_t)v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::RemoteDevice::resolveUncapturedErrorEvent(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = &off_1E34B8F90;
  v4[1] = v3;
  v6 = v4;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v2 + 168))(v2, &v6);
  result = (uint64_t)v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::RemoteDevice::resolveDeviceLostPromise(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = &off_1E34B8FD0;
  v4[1] = v3;
  v6 = v4;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v2 + 176))(v2, &v6);
  result = (uint64_t)v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WebKit::RemoteExternalTexture::~RemoteExternalTexture(unsigned int **this)
{
  WTF *v1;
  void *v2;

  WebKit::RemoteBindGroup::~RemoteBindGroup(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::RemoteGPU::RemoteGPU(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  WTF::ThreadSafeWeakPtrControlBlock *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1E34B8D78;
  v10 = *(WTF::ThreadSafeWeakPtrControlBlock **)(a3 + 16);
  if (v10)
    v10 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v10);
  *(_QWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = a3;
  v11 = WTF::fastMalloc((WTF *)0x70);
  *(_QWORD *)(a1 + 40) = IPC::StreamConnectionWorkQueue::StreamConnectionWorkQueue(v11, (uint64_t)"WebGPU work queue", 18);
  v12 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 48) = v12;
  *(_QWORD *)(a1 + 56) = 0;
  v13 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v13 + 8) = 1;
  *(_QWORD *)v13 = off_1E34B94E8;
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(a1 + 64) = v13;
  *(_QWORD *)(a1 + 72) = a2;
  v14 = (unsigned int *)(a4 + 16);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  *(_QWORD *)(a1 + 80) = a4;
  return a1;
}

void WebKit::RemoteGPU::~RemoteGPU(WebKit::RemoteGPU *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    v13 = (unsigned int *)(v3 + 16);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)(v3 + 16));
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 8) + 8))(v3 + 8);
    }
  }
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref((_DWORD *)(v4 + 8), a2);
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  v6 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v6)
    WTF::ThreadSafeRefCounted<IPC::StreamServerConnection,(WTF::DestructionThread)0>::deref((unsigned int *)(v6 + 8));
  v7 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v7)
    WTF::ThreadSafeRefCounted<IPC::StreamConnectionWorkQueue,(WTF::DestructionThread)0>::deref((unsigned int *)(v7 + 8), a2);
  v8 = (unsigned __int8 *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v8, a2);
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteGPU::~RemoteGPU(this, a2);
  WTF::fastFree(v2, v3);
}

_QWORD *WebKit::RemoteGPU::initialize(WebKit::RemoteGPU *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  _QWORD *v5;
  _QWORD *result;
  _QWORD *v7;

  v2 = *((_QWORD *)this + 5);
  v3 = (unsigned int *)((char *)this + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = &off_1E34B8FF8;
  v5[1] = this;
  v7 = v5;
  IPC::StreamConnectionWorkQueue::dispatch(v2, (uint64_t *)&v7);
  result = v7;
  v7 = 0;
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  return result;
}

_QWORD *WebKit::RemoteGPU::stopListeningForIPC(WebKit::RemoteGPU *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  _QWORD *v7;

  v2 = *((_QWORD *)this + 5);
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E34B9020;
  v3[1] = this;
  v7 = v3;
  IPC::StreamConnectionWorkQueue::dispatch(v2, (uint64_t *)&v7);
  v4 = (uint64_t)v7;
  v7 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 5);
  v7 = 0;
  IPC::StreamConnectionWorkQueue::stopAndWaitForCompletion(v5, (uint64_t *)&v7);
  result = v7;
  if (v7)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 8))(v7);
  return result;
}

uint64_t WebKit::RemoteGPU::requestAdapter(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t *a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  char v23;

  v4 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16) | 0x1000000;
  v23 = 0;
  v22 = v4;
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *a4;
  *a4 = 0;
  v7 = *(_QWORD *)(a1 + 64);
  ++*(_DWORD *)(v7 + 8);
  v16 = v6;
  v17 = v7;
  v8 = *(unsigned int **)(a1 + 48);
  v9 = v8 + 2;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  v18 = v8;
  v19 = a3;
  if (*(_QWORD *)(a1 + 24))
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(*(unsigned __int8 **)(a1 + 24), *(_QWORD *)(a1 + 32), &v20);
  else
    v20 = 0;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  *v11 = off_1E34B9070;
  v11[1] = v16;
  v11[2] = v17;
  v11[3] = v18;
  v11[4] = v19;
  v12 = v20;
  v18 = 0;
  v20 = 0;
  v11[5] = v12;
  v21 = v11;
  (*(void (**)(uint64_t, int *, _QWORD **))(*(_QWORD *)v5 + 16))(v5, &v22, &v21);
  v13 = v21;
  v21 = 0;
  if (v13)
    (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  v14 = v20;
  v20 = 0;
  if (v14)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v14 + 16));
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(&v18);
  return 0;
}

unsigned __int8 *WebKit::RemoteGPU::createPresentationContext(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  WebKit::GPUConnectionToWebProcess *v5;
  unsigned __int8 *v6;
  WebKit::GPUConnectionToWebProcess *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  WebKit::GPUConnectionToWebProcess *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned __int8 *result;
  WebKit::GPUConnectionToWebProcess *v18;
  unsigned __int8 *v19;
  WebKit::GPUConnectionToWebProcess *v20;
  unsigned int *v21;
  WebKit::GPUConnectionToWebProcess *v22;
  WebKit::GPUConnectionToWebProcess *v23;
  _QWORD v24[2];

  v24[0] = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 64) + 64))(*(_QWORD *)(a1 + 64), *a2);
  v24[1] = v24[0] != 0;
  if (v24[0])
  {
    (*(void (**)(WebKit::GPUConnectionToWebProcess **__return_ptr, _QWORD, _QWORD *))(**(_QWORD **)(a1 + 56)
                                                                                               + 40))(&v23, *(_QWORD *)(a1 + 56), v24);
    v5 = v23;
    if (v23)
    {
      v6 = *(unsigned __int8 **)(a1 + 24);
      if (v6)
      {
        WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v6, *(_QWORD *)(a1 + 32), &v22);
        v7 = v22;
        v5 = v23;
      }
      else
      {
        v7 = 0;
        v22 = 0;
      }
      v8 = *(_QWORD *)(a1 + 64);
      v9 = *(unsigned int **)(a1 + 48);
      v10 = v9 + 2;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v21 = v9;
      v12 = (unsigned int *)WTF::fastMalloc((WTF *)0x40);
      WebKit::RemotePresentationContext::RemotePresentationContext((uint64_t)v12, (uint64_t)v7, (uint64_t)v5, v8, (uint64_t *)&v21, a3);
      WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(&v21);
      v13 = v22;
      v22 = 0;
      if (v13)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v13 + 2));
      WebKit::WebGPU::ObjectHeap::addObject(*(_QWORD *)(a1 + 64), a3, (uint64_t)v12);
      v14 = v12 + 2;
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v12 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
      }
    }
    else
    {
      v19 = *(unsigned __int8 **)(a1 + 24);
      if (v19)
      {
        WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v19, *(_QWORD *)(a1 + 32), &v22);
        if (v22)
        {
          WebKit::GPUConnectionToWebProcess::terminateWebProcess(v22);
          v20 = v22;
          v22 = 0;
          if (v20)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v20 + 2));
        }
      }
    }
    result = (unsigned __int8 *)v23;
    v23 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  else
  {
    result = *(unsigned __int8 **)(a1 + 24);
    if (result)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(_QWORD *)(a1 + 32), &v23);
      result = (unsigned __int8 *)v23;
      if (v23)
      {
        result = (unsigned __int8 *)WebKit::GPUConnectionToWebProcess::terminateWebProcess(v23);
        v18 = v23;
        v23 = 0;
        if (v18)
          return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v18 + 2));
      }
    }
  }
  return result;
}

_DWORD *WebKit::RemoteGPU::createCompositorIntegration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  WebKit::GPUConnectionToWebProcess *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _DWORD *result;
  unsigned __int8 *v14;
  WebKit::GPUConnectionToWebProcess *v15;
  WebKit::GPUConnectionToWebProcess *v16;
  _DWORD *v17;

  (*(void (**)(_DWORD **__return_ptr))(**(_QWORD **)(a1 + 56) + 48))(&v17);
  v4 = (uint64_t)v17;
  if (v17)
  {
    v5 = *(_QWORD *)(a1 + 64);
    v6 = *(WebKit::GPUConnectionToWebProcess **)(a1 + 48);
    v7 = (unsigned int *)((char *)v6 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    v16 = v6;
    v9 = (unsigned int *)WTF::fastMalloc((WTF *)0x38);
    WebKit::RemoteCompositorIntegration::RemoteCompositorIntegration((uint64_t)v9, v4, v5, (uint64_t *)&v16, a1, a2);
    WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)&v16);
    WebKit::WebGPU::ObjectHeap::addObject(*(_QWORD *)(a1 + 64), a2, (uint64_t)v9);
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  else
  {
    v14 = *(unsigned __int8 **)(a1 + 24);
    if (v14)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v14, *(_QWORD *)(a1 + 32), &v16);
      if (v16)
      {
        WebKit::GPUConnectionToWebProcess::terminateWebProcess(v16);
        v15 = v16;
        v16 = 0;
        if (v15)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v15 + 2));
      }
    }
  }
  result = v17;
  v17 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebKit::RemoteGPU::isValid(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v5 = *(_QWORD *)(a1 + 56);
  if (v5)
  {
    v6 = WebKit::WebGPU::ObjectHeap::objectExistsAndValid(*(_QWORD *)(a1 + 64), v5, a2);
    v7 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 16))(v7, (v6 >> 8) & 1, v6 & 1);
  }
  else
  {
    v7 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 16))(v7, 0, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

void WebKit::RemotePipelineLayout::~RemotePipelineLayout(unsigned int **this)
{
  WTF *v1;
  void *v2;

  WebKit::RemoteBindGroup::~RemoteBindGroup(this);
  WTF::fastFree(v1, v2);
}

uint64_t WTF::Vector<std::optional<WebCore::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    v4 = *(_QWORD *)a1;
    v5 = 88 * v3;
    do
    {
      v4 = std::__optional_destruct_base<WebCore::WebGPU::RenderPassColorAttachment,false>::~__optional_destruct_base[abi:sn180100](v4, a2)+ 88;
      v5 -= 88;
    }
    while (v5);
  }
  v6 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::WebGPU::RenderPassColorAttachment,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v9;
  unsigned int v10;
  char v11;

  if (*(_BYTE *)(a1 + 80))
  {
    if (*(_BYTE *)(a1 + 64))
    {
      v3 = *(unsigned int *)(a1 + 56);
      if ((_DWORD)v3 != -1)
        ((void (*)(char *, uint64_t))off_1E34B8DB8[v3])(&v11, a1 + 24);
      *(_DWORD *)(a1 + 56) = -1;
    }
    v4 = *(unsigned int **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
    v7 = *(unsigned int **)a1;
    *(_QWORD *)a1 = 0;
    if (v7)
    {
      do
      {
        v9 = __ldaxr(v7);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v7));
      if (!v10)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
  return a1;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIdLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU9ColorDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSC_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::WebGPU::ComputePassTimestampWrites,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*(_BYTE *)(a1 + 16))
  {
    v3 = *(unsigned int **)a1;
    *(_QWORD *)a1 = 0;
    if (v3)
    {
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v3);
        WTF::fastFree((WTF *)v3, a2);
      }
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::WebGPU::ComputePassDescriptor,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 32))
  {
    std::__optional_destruct_base<WebCore::WebGPU::ComputePassTimestampWrites,false>::~__optional_destruct_base[abi:sn180100](a1 + 8, a2);
    v4 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU12Extent3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSC_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::WebGPU::ImageCopyTexture,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v6;
  unsigned int v7;
  char v8;

  if (*(_BYTE *)(a1 + 56))
  {
    if (*(_BYTE *)(a1 + 40))
    {
      v3 = *(unsigned int *)(a1 + 32);
      if ((_DWORD)v3 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v3])(&v8, a1 + 16);
      *(_DWORD *)(a1 + 32) = -1;
    }
    v4 = *(unsigned int **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      do
      {
        v6 = __ldaxr(v4);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v4));
      if (!v7)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  return a1;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSC_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEENSA_13MachSendRightEN7WebCore7IntSizeEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSU_OT0_E_JRNS0_6__baseILSP_1EJDnSH_SI_SK_EEERKS12_EEEDcSU_DpT0_(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEENSA_13MachSendRightEN7WebCore7IntSizeEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSU_OT0_E_JRNS0_6__baseILSP_1EJDnSH_SI_SK_EEERKS12_EEEDcSU_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEENSA_13MachSendRightEN7WebCore7IntSizeEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSU_OT0_E_JRNS0_6__baseILSP_1EJDnSH_SI_SK_EEERKS12_EEEDcSU_DpT0_(int a1, WTF::MachSendRight *this, WTF::MachSendRight *a3)
{
  return WTF::MachSendRight::MachSendRight(this, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEENSA_13MachSendRightEN7WebCore7IntSizeEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSU_OT0_E_JRNS0_6__baseILSP_1EJDnSH_SI_SK_EEERKS12_EEEDcSU_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN3WTF23ObjectIdentifierGenericIN7WebCore25MediaPlayerIdentifierTypeENS9_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENS9_6RefPtrINSB_10VideoFrameENS9_12RawPtrTraitsISI_EENS9_21DefaultRefDerefTraitsISI_EEEENS9_9RetainPtrIP10__CVBufferEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILST_1EJSG_SN_SR_EEEEEEDcSV_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN3WTF23ObjectIdentifierGenericIN7WebCore25MediaPlayerIdentifierTypeENS9_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENS9_6RefPtrINSB_10VideoFrameENS9_12RawPtrTraitsISI_EENS9_21DefaultRefDerefTraitsISI_EEEENS9_9RetainPtrIP10__CVBufferEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILST_1EJSG_SN_SR_EEEEEEDcSV_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

uint64_t WTF::Vector<WebCore::WebGPU::BindGroupEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  char v9;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = *(WTF **)a1;
  if ((_DWORD)v3)
  {
    v5 = 48 * v3;
    v6 = (_DWORD *)((char *)v4 + 40);
    do
    {
      v7 = *v6;
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, _DWORD *))off_1E34B8E40[v7])(&v9, v6 - 8);
      *v6 = -1;
      v6 += 12;
      v5 -= 48;
    }
    while (v5);
    v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_17reference_wrapperIN7WebCore6WebGPU7SamplerEEENS8_INSA_11TextureViewEEENSA_13BufferBindingENS8_INSA_15ExternalTextureEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSC_SE_SF_SH_EEEEEEDcSL_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;
  unsigned int v3;
  unsigned int v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    do
    {
      v3 = __ldaxr(result);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, result));
    if (!v4)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::WebGPU::ComputePipelineDescriptor,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF::StringImpl *v3;
  void *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  unsigned int v10;
  unsigned int v11;

  if (*(_BYTE *)(a1 + 56))
  {
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 40, a2);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 24, v3);
    v5 = *(unsigned int **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v5)
    {
      do
      {
        v10 = __ldaxr(v5);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v5));
      if (!v11)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, v4);
      }
    }
    v6 = *(unsigned int **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, v4);
      }
    }
    v9 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v4);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  return a1;
}

void WebCore::WebGPU::RenderPipelineDescriptor::~RenderPipelineDescriptor(WebCore::WebGPU::RenderPipelineDescriptor *this, void *a2)
{
  void *v3;
  void *v4;
  WTF::StringImpl *v5;
  void *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  WTF::StringImpl *v11;
  unsigned int v12;
  unsigned int v13;

  std::__optional_destruct_base<WebCore::WebGPU::FragmentState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 144, a2);
  WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 56, v3);
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 40, v4);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 24, v5);
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    do
    {
      v12 = __ldaxr(v7);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v7));
    if (!v13)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, v6);
    }
  }
  v8 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, v6);
    }
  }
  v11 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v6);
    else
      *(_DWORD *)v11 -= 2;
  }
}

uint64_t std::__optional_destruct_base<WebCore::WebGPU::FragmentState,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;
  void *v5;
  unsigned int *v6;
  unsigned int v8;
  unsigned int v9;

  if (*(_BYTE *)(a1 + 56))
  {
    v3 = *(WTF **)(a1 + 40);
    if (v3)
    {
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 48) = 0;
      WTF::fastFree(v3, a2);
    }
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 24, a2);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 8, v4);
    v6 = *(unsigned int **)a1;
    *(_QWORD *)a1 = 0;
    if (v6)
    {
      do
      {
        v8 = __ldaxr(v6);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v6));
      if (!v9)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, v5);
      }
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebKit::RemoteGPURequestAdapterResponse,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 176))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 8, a2);
    v4 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteCompositorIntegration::paintCompositedResultsToCanvas(WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned int,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::NativeImage *>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v6;
  unsigned int v7;

  *a1 = &off_1E34B8E70;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v6 = __ldaxr(v4);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v4));
    if (!v7)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteCompositorIntegration::paintCompositedResultsToCanvas(WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned int,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::NativeImage *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E34B8E70;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v6 = __ldaxr(v4);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v4));
    if (!v7)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteCompositorIntegration::paintCompositedResultsToCanvas(WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned int,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::NativeImage *>::call(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  __int16 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  if (a2)
  {
    v3 = *(_QWORD *)(a1[1] + 8);
    if (v3)
    {
      v13 = a1[2];
      v11 = 0;
      v12 = 0;
      v10 = *(_QWORD *)(v3 + 56);
      v5 = *(_QWORD *)(v3 + 80);
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
      *v6 = off_1E34B9098;
      v6[1] = v3;
      v6[2] = &v13;
      v6[3] = &v10;
      v6[4] = a2;
      v6[5] = &v11;
      v14 = (uint64_t)v6;
      IPC::StreamConnectionWorkQueue::dispatch(*(_QWORD *)(v5 + 32), &v14);
      v7 = v14;
      v14 = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      v14 = 0x7FF0000000000000;
      v15 = 0;
      WTF::BinarySemaphore::waitUntil();
    }
  }
  v8 = a1[3];
  a1[3] = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteCompositorIntegration::prepareForDisplay(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34B8E98;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteCompositorIntegration::prepareForDisplay(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34B8E98;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteCompositorIntegration::prepareForDisplay(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::RemoteDevice::importExternalTextureFromVideoFrame(WebKit::WebGPU::ExternalTextureDescriptor const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)::$_0,void,WebCore::MediaPlayer &>::call(uint64_t a1, WebCore::MediaPlayer *this)
{
  const void *v3;
  const void *v4;
  const void **v5;
  const void *v6;
  unsigned int *result;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;

  WebCore::MediaPlayer::videoFrameForCurrentTime(this);
  if (v11)
  {
    v3 = (const void *)(*(uint64_t (**)())(*(_QWORD *)v11 + 56))();
    v4 = v3;
    v5 = *(const void ***)(a1 + 8);
    if (v3)
      CFRetain(v3);
  }
  else
  {
    v4 = 0;
    v5 = *(const void ***)(a1 + 8);
  }
  v6 = *v5;
  *v5 = v4;
  if (v6)
    CFRelease(v6);
  result = v11;
  if (v11)
  {
    v8 = v11 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v11 + 2);
      return (unsigned int *)(*(uint64_t (**)())(*(_QWORD *)v11 + 8))();
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteDevice::createComputePipelineAsync(WebKit::WebGPU::ComputePipelineDescriptor const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(BOOL,WTF::String &&)> &&)::$_0,void,WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>> &&,WTF::String &>::~CallableWrapper(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E34B8EE8;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref((_DWORD *)(v3 + 8), v2);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E34B8EE8;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref((_DWORD *)(v3 + 8), v2);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteDevice::createComputePipelineAsync(WebKit::WebGPU::ComputePipelineDescriptor const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(BOOL,WTF::String &&)> &&)::$_0,void,WTF::RefPtr<WebCore::WebGPU::ComputePipeline,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>> &&,WTF::String &>::call(_QWORD *a1, _DWORD **a2, uint64_t a3)
{
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  _BOOL8 v12;
  uint64_t v13;

  v5 = *a2;
  if (*a2)
  {
    *a2 = 0;
    v6 = a1[2];
    v7 = a1[4];
    v8 = (unsigned int *)WTF::fastMalloc((WTF *)0x30);
    WebKit::RemoteComputePipeline::RemoteComputePipeline((uint64_t)v8, (uint64_t)v5, v6, a1 + 3, v7);
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
    WebKit::WebGPU::ObjectHeap::addObject(a1[2], a1[4], (uint64_t)v8);
    v9 = v8 + 2;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v8 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
    }
  }
  v12 = v5 != 0;
  v13 = a1[1];
  a1[1] = 0;
  (*(void (**)(uint64_t, _BOOL8, uint64_t))(*(_QWORD *)v13 + 16))(v13, v12, a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteDevice::createRenderPipelineAsync(WebKit::WebGPU::RenderPipelineDescriptor const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(BOOL,WTF::String &&)> &&)::$_0,void,WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>> &&,WTF::String &>::~CallableWrapper(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E34B8F10;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref((_DWORD *)(v3 + 8), v2);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E34B8F10;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref((_DWORD *)(v3 + 8), v2);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteDevice::createRenderPipelineAsync(WebKit::WebGPU::RenderPipelineDescriptor const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(BOOL,WTF::String &&)> &&)::$_0,void,WTF::RefPtr<WebCore::WebGPU::RenderPipeline,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>> &&,WTF::String &>::call(_QWORD *a1, _DWORD **a2, uint64_t a3)
{
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  _BOOL8 v12;
  uint64_t v13;

  v5 = *a2;
  if (*a2)
  {
    *a2 = 0;
    v6 = a1[2];
    v7 = a1[4];
    v8 = (unsigned int *)WTF::fastMalloc((WTF *)0x30);
    WebKit::RemoteRenderPipeline::RemoteRenderPipeline((uint64_t)v8, (uint64_t)v5, v6, a1 + 3, v7);
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
    WebKit::WebGPU::ObjectHeap::addObject(a1[2], a1[4], (uint64_t)v8);
    v9 = v8 + 2;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v8 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
    }
  }
  v12 = v5 != 0;
  v13 = a1[1];
  a1[1] = 0;
  (*(void (**)(uint64_t, _BOOL8, uint64_t))(*(_QWORD *)v13 + 16))(v13, v12, a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteDevice::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&)::$_0,void,BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::ValidationError,WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::InternalError,WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::RawPtrTraits<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>>>> &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34B8F38;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteDevice::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&)::$_0,void,BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::ValidationError,WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::InternalError,WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::RawPtrTraits<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>>>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34B8F38;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteDevice::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&)::$_0,void,BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::ValidationError,WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::InternalError,WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::RawPtrTraits<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>>>> &&>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;

  v3 = (uint64_t *)(a1 + 8);
  v8 = a2;
  if (*(_BYTE *)(a3 + 16))
  {
    v9 = a1 + 8;
    v10 = &v8;
    v11 = a1 + 8;
    v12 = &v8;
    v13 = a1 + 8;
    v14 = &v8;
    v4 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v4 == -1)
    {
      v7 = std::__throw_bad_variant_access[abi:sn180100]();
      return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6WebKit6WebGPU16OutOfMemoryErrorENS9_15ValidationErrorENS9_13InternalErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SB_SC_EEEEEEDcSG_DpT0_(v7);
    }
    else
    {
      v15 = &v9;
      return ((uint64_t (*)(uint64_t **, uint64_t))off_1E34B8F68[v4])(&v15, a3);
    }
  }
  else
  {
    LOBYTE(v9) = 0;
    LOBYTE(v11) = 0;
    v6 = *v3;
    *v3 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v6 + 16))(v6, a2, &v9);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if ((_BYTE)v11 && (_DWORD)v10 != -1)
      return off_1E34B8F50[v10](&v15, &v9);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6WebKit6WebGPU16OutOfMemoryErrorENS9_15ValidationErrorENS9_13InternalErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6WebKit6WebGPU16OutOfMemoryErrorENS9_15ValidationErrorENS9_13InternalErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::RemoteDevice::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&)::$_0::operator()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::ValidationError,WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::InternalError,WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::RawPtrTraits<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>>>> &&)::{lambda(WTF::DefaultRefDerefTraits)#1},WebKit::RemoteDevice::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)>)::WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &::operator()(BOOL,std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::ValidationError,WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::InternalError,WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::RawPtrTraits<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>>>)::{lambda(WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>)#1},WebKit::RemoteDevice::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)>)::WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &::operator()(BOOL,std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::ValidationError,WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::InternalError,WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::RawPtrTraits<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>>>)::{lambda(WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::DefaultRefDerefTraits,WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>,WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>> &>(uint64_t *a1, WTF **a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  int v10;
  char v11;
  char v12;

  v2 = *a1;
  v3 = *a2;
  ++*(_DWORD *)*a2;
  v4 = *(uint64_t **)v2;
  v5 = **(unsigned __int8 **)(v2 + 8);
  v10 = 0;
  v11 = 1;
  v6 = *v4;
  *v4 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v6 + 16))(v6, v5, &v9);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (v11 && v10 != -1)
    result = off_1E34B8F50[v10]((_QWORD **)&v12, &v9);
  if (*(_DWORD *)v3 == 1)
    return WTF::fastFree(v3, v8);
  --*(_DWORD *)v3;
  return result;
}

WTF::StringImpl **std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::RemoteDevice::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&)::$_0::operator()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::ValidationError,WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::InternalError,WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::RawPtrTraits<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>>>> &&)::{lambda(WTF::DefaultRefDerefTraits)#1},WebKit::RemoteDevice::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)>)::WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &::operator()(BOOL,std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::ValidationError,WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::InternalError,WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::RawPtrTraits<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>>>)::{lambda(WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>)#1},WebKit::RemoteDevice::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)>)::WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &::operator()(BOOL,std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::ValidationError,WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::InternalError,WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::RawPtrTraits<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>>>)::{lambda(WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::DefaultRefDerefTraits,WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>,WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>> &>(uint64_t *a1, _DWORD **a2)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t *v4;
  int v5;
  _DWORD *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  _DWORD *v10;
  int v11;
  char v12;
  char v13;

  v2 = *a1;
  v3 = *a2;
  *v3 = **a2 + 1;
  v4 = *(uint64_t **)(v2 + 16);
  v5 = **(unsigned __int8 **)(v2 + 24);
  v6 = (_DWORD *)*((_QWORD *)v3 + 1);
  if (v6)
    *v6 += 2;
  v10 = v6;
  v11 = 1;
  v12 = 1;
  v7 = *v4;
  *v4 = 0;
  (*(void (**)(uint64_t, BOOL, _DWORD **))(*(_QWORD *)v7 + 16))(v7, v5 != 0, &v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (v12 && v11 != -1)
    ((uint64_t (**)(_QWORD **, _DWORD **))off_1E34B8F50)[v11]((_QWORD **)&v13, &v10);
  return WTF::RefCounted<WebCore::WebGPU::ValidationError>::deref((WTF::StringImpl **)v3, v8);
}

WTF::StringImpl **std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::RemoteDevice::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&)::$_0::operator()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::ValidationError,WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::InternalError,WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::RawPtrTraits<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>>>> &&)::{lambda(WTF::DefaultRefDerefTraits)#1},WebKit::RemoteDevice::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)>)::WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &::operator()(BOOL,std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::ValidationError,WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::InternalError,WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::RawPtrTraits<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>>>)::{lambda(WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>)#1},WebKit::RemoteDevice::popErrorScope(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)>)::WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &::operator()(BOOL,std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::ValidationError,WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::InternalError,WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::RawPtrTraits<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>>>)::{lambda(WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::DefaultRefDerefTraits,WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>,WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>> &>(uint64_t *a1, _DWORD **a2)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t *v4;
  int v5;
  _DWORD *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  _DWORD *v10;
  int v11;
  char v12;
  char v13;

  v2 = *a1;
  v3 = *a2;
  *v3 = **a2 + 1;
  v4 = *(uint64_t **)(v2 + 32);
  v5 = **(unsigned __int8 **)(v2 + 40);
  v6 = (_DWORD *)*((_QWORD *)v3 + 1);
  if (v6)
    *v6 += 2;
  v10 = v6;
  v11 = 2;
  v12 = 1;
  v7 = *v4;
  *v4 = 0;
  (*(void (**)(uint64_t, BOOL, _DWORD **))(*(_QWORD *)v7 + 16))(v7, v5 != 0, &v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (v12 && v11 != -1)
    ((uint64_t (**)(_QWORD **, _DWORD **))off_1E34B8F50)[v11]((_QWORD **)&v13, &v10);
  return WTF::RefCounted<WebCore::WebGPU::ValidationError>::deref((WTF::StringImpl **)v3, v8);
}

WTF::StringImpl **WTF::RefCounted<WebCore::WebGPU::ValidationError>::deref(WTF::StringImpl **this, WTF::StringImpl *a2)
{
  WTF *v2;
  WTF::StringImpl *v3;

  v2 = (WTF *)this;
  if (*(_DWORD *)this == 1)
  {
    v3 = this[1];
    *((_QWORD *)v2 + 1) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    return (WTF::StringImpl **)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteDevice::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&)::$_0,void,BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::ValidationError,WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::InternalError,WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::RawPtrTraits<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>>>> &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34B8F90;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteDevice::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&)::$_0,void,BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::ValidationError,WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::InternalError,WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::RawPtrTraits<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>>>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34B8F90;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteDevice::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&)::$_0,void,BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::ValidationError,WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::InternalError,WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::RawPtrTraits<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>>>> &&>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;

  v3 = (uint64_t *)(a1 + 8);
  v8 = a2;
  if (*(_BYTE *)(a3 + 16))
  {
    v9 = a1 + 8;
    v10 = &v8;
    v11 = a1 + 8;
    v12 = &v8;
    v13 = a1 + 8;
    v14 = &v8;
    v4 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v4 == -1)
    {
      v7 = std::__throw_bad_variant_access[abi:sn180100]();
      return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::RemoteDevice::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&)::$_0::operator()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::ValidationError,WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::InternalError,WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::RawPtrTraits<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>>>> &&)::{lambda(WTF::DefaultRefDerefTraits)#1},WebKit::RemoteDevice::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)>)::WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &::operator()(BOOL,std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::ValidationError,WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::InternalError,WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::RawPtrTraits<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>>>)::{lambda(WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>)#1},WebKit::RemoteDevice::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)>)::WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &::operator()(BOOL,std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::ValidationError,WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::InternalError,WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::RawPtrTraits<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>>>)::{lambda(WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::DefaultRefDerefTraits,WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>,WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>> &>(v7);
    }
    else
    {
      v15 = &v9;
      return ((uint64_t (*)(uint64_t **, uint64_t))off_1E34B8FA8[v4])(&v15, a3);
    }
  }
  else
  {
    LOBYTE(v9) = 0;
    LOBYTE(v11) = 0;
    v6 = *v3;
    *v3 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v6 + 16))(v6, a2, &v9);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if ((_BYTE)v11 && (_DWORD)v10 != -1)
      return off_1E34B8F50[v10](&v15, &v9);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::RemoteDevice::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&)::$_0::operator()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::ValidationError,WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::InternalError,WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::RawPtrTraits<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>>>> &&)::{lambda(WTF::DefaultRefDerefTraits)#1},WebKit::RemoteDevice::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)>)::WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &::operator()(BOOL,std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::ValidationError,WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::InternalError,WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::RawPtrTraits<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>>>)::{lambda(WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>)#1},WebKit::RemoteDevice::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)>)::WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &::operator()(BOOL,std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::ValidationError,WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::InternalError,WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::RawPtrTraits<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>>>)::{lambda(WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::DefaultRefDerefTraits,WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>,WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>> &>(uint64_t *a1, WTF **a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  int v10;
  char v11;
  char v12;

  v2 = *a1;
  v3 = *a2;
  ++*(_DWORD *)*a2;
  v4 = *(uint64_t **)v2;
  v5 = **(unsigned __int8 **)(v2 + 8);
  v10 = 0;
  v11 = 1;
  v6 = *v4;
  *v4 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v6 + 16))(v6, v5, &v9);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (v11 && v10 != -1)
    result = off_1E34B8F50[v10]((_QWORD **)&v12, &v9);
  if (*(_DWORD *)v3 == 1)
    return WTF::fastFree(v3, v8);
  --*(_DWORD *)v3;
  return result;
}

WTF::StringImpl **std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::RemoteDevice::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&)::$_0::operator()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::ValidationError,WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::InternalError,WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::RawPtrTraits<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>>>> &&)::{lambda(WTF::DefaultRefDerefTraits)#1},WebKit::RemoteDevice::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)>)::WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &::operator()(BOOL,std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::ValidationError,WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::InternalError,WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::RawPtrTraits<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>>>)::{lambda(WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>)#1},WebKit::RemoteDevice::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)>)::WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &::operator()(BOOL,std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::ValidationError,WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::InternalError,WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::RawPtrTraits<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>>>)::{lambda(WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::DefaultRefDerefTraits,WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>,WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>> &>(uint64_t *a1, _DWORD **a2)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t *v4;
  int v5;
  _DWORD *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  _DWORD *v10;
  int v11;
  char v12;
  char v13;

  v2 = *a1;
  v3 = *a2;
  *v3 = **a2 + 1;
  v4 = *(uint64_t **)(v2 + 16);
  v5 = **(unsigned __int8 **)(v2 + 24);
  v6 = (_DWORD *)*((_QWORD *)v3 + 1);
  if (v6)
    *v6 += 2;
  v10 = v6;
  v11 = 1;
  v12 = 1;
  v7 = *v4;
  *v4 = 0;
  (*(void (**)(uint64_t, BOOL, _DWORD **))(*(_QWORD *)v7 + 16))(v7, v5 != 0, &v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (v12 && v11 != -1)
    ((uint64_t (**)(_QWORD **, _DWORD **))off_1E34B8F50)[v11]((_QWORD **)&v13, &v10);
  return WTF::RefCounted<WebCore::WebGPU::ValidationError>::deref((WTF::StringImpl **)v3, v8);
}

WTF::StringImpl **std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::RemoteDevice::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&)::$_0::operator()(BOOL,std::optional<std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::ValidationError,WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::InternalError,WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::RawPtrTraits<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>>>> &&)::{lambda(WTF::DefaultRefDerefTraits)#1},WebKit::RemoteDevice::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)>)::WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &::operator()(BOOL,std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::ValidationError,WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::InternalError,WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::RawPtrTraits<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>>>)::{lambda(WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>)#1},WebKit::RemoteDevice::resolveUncapturedErrorEvent(WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)>)::WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &::operator()(BOOL,std::variant<WTF::Ref<WebCore::WebGPU::OutOfMemoryError,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::ValidationError,WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>,WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::CompletionHandler<void ()(BOOL,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>> &&)> &&<WTF::Ref::InternalError,WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>,WTF::RawPtrTraits<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>>>)::{lambda(WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::DefaultRefDerefTraits,WebCore::WebGPU<WTF::DefaultRefDerefTraits<WebCore>>,WebCore::WebGPU<WTF::RawPtrTraits<WTF::DefaultRefDerefTraits<WebCore>>>> &>(uint64_t *a1, _DWORD **a2)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t *v4;
  int v5;
  _DWORD *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  _DWORD *v10;
  int v11;
  char v12;
  char v13;

  v2 = *a1;
  v3 = *a2;
  *v3 = **a2 + 1;
  v4 = *(uint64_t **)(v2 + 32);
  v5 = **(unsigned __int8 **)(v2 + 40);
  v6 = (_DWORD *)*((_QWORD *)v3 + 1);
  if (v6)
    *v6 += 2;
  v10 = v6;
  v11 = 2;
  v12 = 1;
  v7 = *v4;
  *v4 = 0;
  (*(void (**)(uint64_t, BOOL, _DWORD **))(*(_QWORD *)v7 + 16))(v7, v5 != 0, &v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (v12 && v11 != -1)
    ((uint64_t (**)(_QWORD **, _DWORD **))off_1E34B8F50)[v11]((_QWORD **)&v13, &v10);
  return WTF::RefCounted<WebCore::WebGPU::ValidationError>::deref((WTF::StringImpl **)v3, v8);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteDevice::resolveDeviceLostPromise(WTF::CompletionHandler<void ()(WebCore::WebGPU::DeviceLostReason)> &&)::$_0,void,WebCore::WebGPU::DeviceLostReason>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34B8FD0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteDevice::resolveDeviceLostPromise(WTF::CompletionHandler<void ()(WebCore::WebGPU::DeviceLostReason)> &&)::$_0,void,WebCore::WebGPU::DeviceLostReason>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34B8FD0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteDevice::resolveDeviceLostPromise(WTF::CompletionHandler<void ()(WebCore::WebGPU::DeviceLostReason)> &&)::$_0,void,WebCore::WebGPU::DeviceLostReason>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteGPU::initialize(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E34B8FF8;
  a1[1] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteGPU::initialize(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34B8FF8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::RemoteGPU::initialize(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  unsigned int *v3;
  unsigned int v4;
  IPC::Semaphore *v5;
  IPC::Semaphore *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  task_t *v11;
  unsigned __int8 *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  IPC::Semaphore *v16;
  uint64_t *v17;
  uint64_t *v18;
  unsigned __int8 *v19;
  uint64_t v20;

  v1 = *(_QWORD *)(a1 + 8);
  IPC::StreamServerConnection::open(*(IPC::StreamServerConnection **)(v1 + 48), *(IPC::StreamConnectionWorkQueue **)(v1 + 40));
  IPC::StreamServerConnection::startReceivingMessages(*(_QWORD *)(v1 + 48), v1, 0x4Fu, *(_QWORD *)(v1 + 72));
  v2 = *(unsigned __int8 **)(v1 + 24);
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v2, *(_QWORD *)(v1 + 32), &v20);
  else
    v20 = 0;
  v3 = (unsigned int *)(v1 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = (IPC::Semaphore *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v5 = &off_1E34B9048;
  *((_QWORD *)v5 + 1) = v1;
  v16 = v5;
  WebCore::WebGPU::create();
  v6 = v16;
  v16 = 0;
  if (v6)
    (*(void (**)(IPC::Semaphore *))(*(_QWORD *)v6 + 8))(v6);
  v7 = v19;
  if (v19)
  {
    v19 = 0;
    v8 = *(_QWORD *)(v1 + 56);
    *(_QWORD *)(v1 + 56) = v7;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    v9 = *(_QWORD *)(v1 + 48);
    v10 = *(_QWORD *)(v1 + 40) + 32;
    LOBYTE(v16) = 1;
    v17 = (uint64_t *)v10;
    v18 = (uint64_t *)(v9 + 136);
    IPC::Connection::send<Messages::RemoteGPUProxy::WasCreated>(*(_QWORD *)(v9 + 32), &v16, *(_QWORD *)(v1 + 72));
  }
  else
  {
    v15 = 0;
    v11 = (task_t *)MEMORY[0x1E0C83DA0];
    semaphore_create(*MEMORY[0x1E0C83DA0], (semaphore_t *)&v15 + 1, 0, 0);
    v14 = 0;
    semaphore_create(*v11, (semaphore_t *)&v14 + 1, 0, 0);
    LOBYTE(v16) = 0;
    v17 = &v15;
    v18 = &v14;
    IPC::Connection::send<Messages::RemoteGPUProxy::WasCreated>(*(_QWORD *)(*(_QWORD *)(v1 + 48) + 32), &v16, *(_QWORD *)(v1 + 72));
    IPC::Semaphore::destroy((IPC::Semaphore *)&v14);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v14);
    IPC::Semaphore::destroy((IPC::Semaphore *)&v15);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v15);
  }
  result = v19;
  v19 = 0;
  if (result)
    result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 32))(result);
  v13 = v20;
  v20 = 0;
  if (v13)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v13 + 16));
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteGPU::stopListeningForIPC(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v1 = *(uint64_t **)(a1 + 8);
  IPC::StreamServerConnection::stopReceivingMessages(v1[6], 0x4Fu, v1[9]);
  IPC::StreamServerConnection::invalidate((uint64_t **)v1[6]);
  v3 = v1[6];
  v1[6] = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<IPC::StreamServerConnection,(WTF::DestructionThread)0>::deref((unsigned int *)(v3 + 8));
  v4 = v1[8];
  v5 = *(_QWORD *)(v4 + 24);
  if (v5)
  {
    *(_QWORD *)(v4 + 24) = 0;
    _ZN3WTF9HashTableINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS_12KeyValuePairIS6_NSt3__17variantIJNS8_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISD_NS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEENSC_INS2_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSC_INS2_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSC_INS2_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSC_INS2_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSC_INS2_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSC_INS2_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSC_INS2_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSC_INS2_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSC_INS2_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSC_INS2_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSC_INS2_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSC_INS2_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSC_INS2_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSC_INS2_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSC_INS2_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSC_INS2_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSC_INS2_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSC_INS2_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSC_INS2_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSC_INS2_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSC_INS2_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSC_INS2_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEEENS_24KeyValuePairKeyExtractorIS3O_EENS_11DefaultHashIS6_EENS_7HashMapIS6_S3N_S3S_NS_10HashTraitsIS6_EENS3U_IS3N_EENS_15HashTableTraitsEE18KeyValuePairTraitsES3V_E15deallocateTableEPS3O_(v5, v2);
  }
  result = v1[7];
  v1[7] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteGPU::workQueueInitialize(void)::$_0,void,WTF::Function<void ()(void)> &&>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E34B9048;
  a1[1] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteGPU::workQueueInitialize(void)::$_0,void,WTF::Function<void ()(void)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34B9048;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteGPU::workQueueInitialize(void)::$_0,void,WTF::Function<void ()(void)> &&>::call(uint64_t a1, uint64_t *a2)
{
  return IPC::StreamConnectionWorkQueue::dispatch(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40), a2);
}

char *IPC::Connection::send<Messages::RemoteGPUProxy::WasCreated>(uint64_t a1, IPC::Semaphore **a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE *v13;
  void *v14;
  char *result;
  WTF *v16;
  void *v17;
  unint64_t v18;
  size_t v19;
  void *v20;
  IPC::Encoder *v21;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 874;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v21 = (IPC::Encoder *)v6;
  v7 = *(_BYTE *)a2;
  v8 = *(_QWORD *)(v6 + 544);
  v9 = v8 + 1;
  v10 = *(_QWORD *)(v6 + 552);
  if (v10 < v8 + 1)
  {
    v18 = (2 * v10 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v19 = v18;
      v18 *= 2;
    }
    while (v19 < v9);
    result = (char *)mmap(0, v19, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v11 = result;
    memcpy(result, *(const void **)(v6 + 528), *(_QWORD *)(v6 + 544));
    v20 = *(void **)(v6 + 528);
    if (v20 != (void *)(v6 + 16))
      munmap(v20, *(_QWORD *)(v6 + 552));
    *(_QWORD *)(v6 + 528) = v11;
    *(_QWORD *)(v6 + 552) = v19;
    v12 = *(_QWORD *)(v6 + 544);
  }
  else
  {
    v11 = *(char **)(v6 + 528);
    v12 = *(_QWORD *)(v6 + 544);
  }
  bzero(&v11[v12], v8 - v12);
  *(_QWORD *)(v6 + 544) = v9;
  v13 = (_BYTE *)(*(_QWORD *)(v6 + 528) + v8);
  *(_QWORD *)(v6 + 536) = v13 + 1;
  *v13 = v7;
  IPC::ArgumentCoder<IPC::Semaphore,void>::encode(v6, a2[1]);
  IPC::ArgumentCoder<IPC::Semaphore,void>::encode(v6, a2[2]);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v21, 0, 0);
  result = (char *)v21;
  v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v14);
    return (char *)WTF::fastFree(v16, v17);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteGPU::requestAdapter(WebKit::WebGPU::RequestAdapterOptions const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::optional<WebKit::RemoteGPURequestAdapterResponse> &&)> &&)::$_0,void,WTF::RefPtr<WebCore::WebGPU::Adapter,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>> &&>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_1E34B9070;
  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 16));
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref((_DWORD *)(v4 + 8), v3);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_1E34B9070;
  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 16));
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref((_DWORD *)(v4 + 8), v3);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteGPU::requestAdapter(WebKit::WebGPU::RequestAdapterOptions const&,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(std::optional<WebKit::RemoteGPURequestAdapterResponse> &&)> &&)::$_0,void,WTF::RefPtr<WebCore::WebGPU::Adapter,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>> &&>::call(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t result;
  uint64_t v17;
  void *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  WTF::StringImpl *v22[2];
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[32];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  char v44;
  char v45;

  v3 = *a2;
  if (*a2)
  {
    v5 = a1[2];
    v7 = a1[4];
    v6 = a1[5];
    v8 = (unsigned int *)WTF::fastMalloc((WTF *)0x40);
    WebKit::RemoteAdapter::RemoteAdapter((uint64_t)v8, v6, v3, v5, a1 + 3, v7);
    WebKit::WebGPU::ObjectHeap::addObject(a1[2], a1[4], (uint64_t)v8);
    v9 = *a2;
    v10 = *(WTF::StringImpl **)(*a2 + 16);
    if (v10)
      *(_DWORD *)v10 += 2;
    v11 = *(_QWORD *)(v9 + 32);
    v22[0] = v10;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v22[1], *(_QWORD *)(v9 + 24) + 8);
    v24 = *(_OWORD *)(v11 + 4);
    v25 = *(_OWORD *)(v11 + 20);
    v26 = *(_OWORD *)(v11 + 36);
    *(_QWORD *)v27 = *(_QWORD *)(v11 + 52);
    *(_OWORD *)&v27[8] = *(_OWORD *)(v11 + 64);
    *(_QWORD *)&v27[24] = *(_QWORD *)(v11 + 80);
    LODWORD(v28) = *(_DWORD *)(v11 + 88);
    *((_QWORD *)&v28 + 1) = *(_QWORD *)(v11 + 96);
    v29 = *(_OWORD *)(v11 + 104);
    v30 = *(_OWORD *)(v11 + 120);
    v31 = *(_OWORD *)(v11 + 136);
    v32 = *(_BYTE *)(*a2 + 40);
    v12 = *(_OWORD *)v22;
    v22[1] = 0;
    v33 = v12;
    *(_QWORD *)&v12 = v23;
    v23 = 0;
    v34 = v12;
    v41 = v29;
    v42 = v30;
    v43 = v31;
    v44 = v32;
    v40 = v28;
    v36 = v25;
    v35 = v24;
    v39 = *(_OWORD *)&v27[16];
    v38 = *(_OWORD *)v27;
    v37 = v26;
    v45 = 1;
    v13 = a1[1];
    a1[1] = 0;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v13 + 16))(v13, &v33);
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    std::__optional_destruct_base<WebKit::RemoteGPURequestAdapterResponse,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v33, v14);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22[1], v15);
    result = 0;
    v19 = v8 + 2;
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v8 + 2);
      return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
    }
  }
  else
  {
    LOBYTE(v33) = 0;
    v45 = 0;
    v17 = a1[1];
    a1[1] = 0;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v17 + 16))(v17, &v33);
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    return std::__optional_destruct_base<WebKit::RemoteGPURequestAdapterResponse,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v33, v18);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteGPU::paintNativeImageToImageBuffer(WebCore::NativeImage &,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::call(uint64_t a1)
{
  WebCore::ImageBuffer *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  uint64_t v15;
  uint64_t v16;
  WebCore::ImageBuffer *v17;

  WebKit::RemoteRenderingBackend::imageBuffer(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 80), **(_QWORD **)(a1 + 16), (uint64_t *)&v17);
  v2 = v17;
  if (!v17)
    return WTF::BinarySemaphore::signal(*(WTF::BinarySemaphore **)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = **(_QWORD **)(a1 + 24);
  v16 = WebCore::ImageBuffer::backendSize(v17);
  v5 = (*(uint64_t (**)(WebCore::ImageBuffer *))(*(_QWORD *)v2 + 16))(v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v4 + 56))(v4, v3, &v16, v5);
  (*(void (**)(WebCore::ImageBuffer *))(*(_QWORD *)v2 + 24))(v2);
  v17 = 0;
  v7 = *((_QWORD *)v2 + 1);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEABB3C](v7);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 8);
  v10 = v9 - 1;
  *(_QWORD *)(v7 + 8) = v9 - 1;
  if (v9 == 1)
  {
    v15 = *(_QWORD *)(v7 + 16);
    v11 = *(_QWORD *)(v7 + 24);
    *(_QWORD *)(v7 + 24) = 0;
    v12 = v15 != 0;
  }
  else
  {
    v11 = 0;
    v12 = 1;
  }
  v13 = __ldxr((unsigned __int8 *)v7);
  if (v13 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
    {
      if (v10)
        return WTF::BinarySemaphore::signal(*(WTF::BinarySemaphore **)(a1 + 40));
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  if (v10)
    return WTF::BinarySemaphore::signal(*(WTF::BinarySemaphore **)(a1 + 40));
LABEL_14:
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (!v12)
    WTF::fastFree((WTF *)v7, v6);
  return WTF::BinarySemaphore::signal(*(WTF::BinarySemaphore **)(a1 + 40));
}

void WebCore::Color::~Color(WebCore::Color *this, void *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  if ((*(_QWORD *)this & 0x8000000000000) != 0)
  {
    v2 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFLL);
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
    }
  }
}

uint64_t *WebKit::RemoteLayerWithInProcessRenderingBackingStore::Buffer::discard(uint64_t *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  uint64_t v10;

  v2 = *this;
  *this = 0;
  if (!v2)
    return this;
  v3 = *(_QWORD *)(v2 + 8);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  this = (uint64_t *)MEMORY[0x19AEABB3C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 8);
  v6 = v5 - 1;
  *(_QWORD *)(v3 + 8) = v5 - 1;
  if (v5 == 1)
  {
    v10 = *(_QWORD *)(v3 + 16);
    v7 = *(_QWORD *)(v3 + 24);
    *(_QWORD *)(v3 + 24) = 0;
    v8 = v10 != 0;
  }
  else
  {
    v7 = 0;
    v8 = 1;
  }
  v9 = __ldxr((unsigned __int8 *)v3);
  if (v9 != 1)
  {
    __clrex();
LABEL_13:
    this = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
    if (v6)
      return this;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
    goto LABEL_13;
  if (v6)
    return this;
LABEL_14:
  if (v7)
    this = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (!v8)
    return (uint64_t *)WTF::fastFree((WTF *)v3, a2);
  return this;
}

BOOL WebKit::RemoteLayerWithInProcessRenderingBackingStore::hasFrontBuffer(WebKit::RemoteLayerWithInProcessRenderingBackingStore *this)
{
  return *((_BYTE *)this + 176) || *((_QWORD *)this + 40) != 0;
}

WebCore::ImageBuffer *WebKit::RemoteLayerWithInProcessRenderingBackingStore::frontBufferMayBeVolatile(WebKit::RemoteLayerWithInProcessRenderingBackingStore *this)
{
  WebCore::ImageBuffer *result;

  result = (WebCore::ImageBuffer *)*((_QWORD *)this + 40);
  if (result)
    return (WebCore::ImageBuffer *)(WebCore::ImageBuffer::volatilityState(result) == 1);
  return result;
}

uint64_t *WebKit::RemoteLayerWithInProcessRenderingBackingStore::clearBackingStore(WebKit::RemoteLayerWithInProcessRenderingBackingStore *this, void *a2)
{
  void *v3;
  void *v4;
  uint64_t *result;
  uint64_t v6;
  char v7;

  WebKit::RemoteLayerWithInProcessRenderingBackingStore::Buffer::discard((uint64_t *)this + 40, a2);
  WebKit::RemoteLayerWithInProcessRenderingBackingStore::Buffer::discard((uint64_t *)this + 42, v3);
  result = WebKit::RemoteLayerWithInProcessRenderingBackingStore::Buffer::discard((uint64_t *)this + 44, v4);
  if (*((_BYTE *)this + 176))
  {
    v6 = *((unsigned int *)this + 42);
    if ((_DWORD)v6 != -1)
      result = (uint64_t *)off_1E34B91A0[v6]((int)&v7, (WebKit::RemoteLayerWithInProcessRenderingBackingStore *)((char *)this + 104));
    *((_DWORD *)this + 42) = -1;
    *((_BYTE *)this + 176) = 0;
  }
  return result;
}

_QWORD *WebKit::RemoteLayerWithInProcessRenderingBackingStore::frontBufferHandle@<X0>(_QWORD *this@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  int v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v16;

  v3 = (_QWORD *)this[40];
  if (!v3)
  {
    *a2 = 0;
    a2[72] = 0;
    return this;
  }
  v4 = v3[1];
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEABB3C](v4);
LABEL_6:
  ++*(_QWORD *)(v4 + 8);
  v6 = __ldxr((unsigned __int8 *)v4);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_11;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_11:
  this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 128))(v3);
  v8 = this;
  if (this && (this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 16))(this), (_DWORD)this))
  {
    this = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*v8 + 32))(v8, 0);
  }
  else
  {
    *a2 = 0;
    a2[72] = 0;
  }
  v9 = v3[1];
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_19;
  }
  this = (_QWORD *)MEMORY[0x19AEABB3C](v9);
LABEL_19:
  v11 = *(_QWORD *)(v9 + 8);
  v12 = v11 - 1;
  *(_QWORD *)(v9 + 8) = v11 - 1;
  if (v11 == 1)
  {
    v16 = *(_QWORD *)(v9 + 16);
    v13 = *(_QWORD *)(v9 + 24);
    *(_QWORD *)(v9 + 24) = 0;
    v14 = v16 != 0;
  }
  else
  {
    v13 = 0;
    v14 = 1;
  }
  v15 = __ldxr((unsigned __int8 *)v9);
  if (v15 != 1)
  {
    __clrex();
LABEL_26:
    this = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v9);
    if (v12)
      return this;
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v9))
    goto LABEL_26;
  if (v12)
    return this;
LABEL_27:
  if (v13)
    this = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (!v14)
    return (_QWORD *)WTF::fastFree((WTF *)v9, v7);
  return this;
}

void sub_197054010(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;

  v4 = *(_QWORD *)(v2 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
LABEL_6:
    v6 = *(_QWORD *)(v4 + 8);
    v7 = v6 - 1;
    *(_QWORD *)(v4 + 8) = v6 - 1;
    if (v6 == 1)
    {
      v11 = *(_QWORD *)(v4 + 16);
      v8 = *(_QWORD *)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      v9 = v11 != 0;
    }
    else
    {
      v8 = 0;
      v9 = 1;
    }
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
      {
LABEL_13:
        if (!v7)
        {
          if (v8)
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
          if (!v9)
            WTF::fastFree((WTF *)v4, a2);
        }
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    goto LABEL_13;
  }
  MEMORY[0x19AEABB3C](v4);
  goto LABEL_6;
}

uint64_t WebKit::RemoteLayerWithInProcessRenderingBackingStore::createContextAndPaintContents(WebKit::RemoteLayerWithInProcessRenderingBackingStore *this)
{
  uint64_t result;
  WebCore::GraphicsContext *v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  FloatSize v8;
  char v9;
  void *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  FloatRect *v19;
  uint64_t v20;
  FloatSize v21;
  uint64_t v22;
  _BYTE v23[16];
  _BYTE v24[16];
  FloatRect v25;
  FloatRect v26[4];
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  result = *((_QWORD *)this + 40);
  if (!result)
    return result;
  v3 = (WebCore::GraphicsContext *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v3 + 96))(v3, 1);
  v4 = *((_QWORD *)this + 42);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (__ldaxr((unsigned __int8 *)v5))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v5))
    {
      goto LABEL_7;
    }
    MEMORY[0x19AEABB3C](v5);
LABEL_7:
    ++*(_QWORD *)(v5 + 8);
    v7 = __ldxr((unsigned __int8 *)v5);
    if (v7 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v5))
        goto LABEL_12;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
LABEL_12:
  v25.m_location = (FloatPoint)WebKit::RemoteLayerBackingStore::layerBounds(this);
  v25.m_size = v8;
  WebCore::Region::Region((WebCore::Region *)v26, (const IntRect *)&v25);
  v9 = WebCore::Region::contains((WebKit::RemoteLayerWithInProcessRenderingBackingStore *)((char *)this + 56), (const WebCore::Region *)v26);
  WebCore::Region::~Region((WebCore::Region *)v26);
  if ((v9 & 1) != 0)
  {
    if (!v4)
      goto LABEL_38;
  }
  else
  {
    if (!v4)
      goto LABEL_38;
    if (*((_BYTE *)this + 96))
    {
      WebCore::Region::Region((WebCore::Region *)v26, (const IntRect *)this + 5);
      WebCore::Region::subtract();
      v25 = v26[0];
      if (SLODWORD(v26[0].m_size.m_width) >= 1 && SLODWORD(v26[0].m_size.m_height) >= 1)
      {
        WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v24, (const WebCore::IntRect *)&v25);
        WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v23, (const WebCore::IntRect *)&v25);
        (*(void (**)(WebCore::GraphicsContext *, uint64_t, _BYTE *, _BYTE *, uint64_t))(*(_QWORD *)v3 + 384))(v3, v4, v24, v23, 4385);
      }
      WebCore::Region::~Region((WebCore::Region *)v26);
    }
    else
    {
      v26[0].m_location = 0;
      WebCore::GraphicsContext::drawImageBuffer();
    }
  }
  v11 = *(_QWORD *)(v4 + 8);
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v11))
  {
    goto LABEL_26;
  }
  MEMORY[0x19AEABB3C](v11);
LABEL_26:
  v13 = *(_QWORD *)(v11 + 8);
  v14 = v13 - 1;
  *(_QWORD *)(v11 + 8) = v13 - 1;
  if (v13 == 1)
  {
    v22 = *(_QWORD *)(v11 + 16);
    v15 = *(_QWORD *)(v11 + 24);
    *(_QWORD *)(v11 + 24) = 0;
    v16 = v22 != 0;
  }
  else
  {
    v15 = 0;
    v16 = 1;
  }
  v17 = __ldxr((unsigned __int8 *)v11);
  if (v17 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v11))
    {
      if (!v14)
        goto LABEL_34;
      goto LABEL_38;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v11);
  if (!v14)
  {
LABEL_34:
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    if (!v16)
      WTF::fastFree((WTF *)v11, v10);
  }
LABEL_38:
  v18 = *((unsigned int *)this + 57);
  if ((_DWORD)v18 == 1)
  {
    (*(void (**)(WebCore::GraphicsContext *, _QWORD))(*(_QWORD *)v3 + 456))(v3, *((_QWORD *)this + 27));
  }
  else
  {
    v27 = 0;
    if ((_DWORD)v18)
    {
      v19 = (FloatRect *)*((_QWORD *)this + 27);
      v20 = 16 * v18;
      do
      {
        v25 = *v19;
        WebCore::Path::addRect((WebCore::Path *)v26, &v25);
        ++v19;
        v20 -= 16;
      }
      while (v20);
    }
    (*(void (**)(WebCore::GraphicsContext *, FloatRect *, uint64_t))(*(_QWORD *)v3 + 496))(v3, v26, 1);
    if (v27 != -1)
      ((void (*)(FloatRect *, FloatSize *))off_1E34B91B0[v27])(&v25, &v26[0].m_size);
  }
  if (!*((_BYTE *)this + 53)
    && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 2) + 48) + 232))(*(_QWORD *)(*((_QWORD *)this + 2) + 48)) & 1) == 0
    && !*((_BYTE *)this + 328))
  {
    v25.m_location = (FloatPoint)WebKit::RemoteLayerBackingStore::layerBounds(this);
    v25.m_size = v21;
    WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v26, (const WebCore::IntRect *)&v25);
    (*(void (**)(WebCore::GraphicsContext *, FloatRect *))(*(_QWORD *)v3 + 280))(v3, v26);
  }
  WebKit::RemoteLayerBackingStore::drawInContext(this, v3);
  *((_BYTE *)this + 328) = 0;
  return (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v3 + 104))(v3, 1);
}

void sub_197054428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v8;
  void *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  va_list va;

  va_start(va, a7);
  WebCore::Region::~Region((WebCore::Region *)va);
  v11 = *(_QWORD *)(v8 + 8);
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v11))
  {
LABEL_6:
    v13 = *(_QWORD *)(v11 + 8);
    v14 = v13 - 1;
    *(_QWORD *)(v11 + 8) = v13 - 1;
    if (v13 == 1)
    {
      v18 = *(_QWORD *)(v11 + 16);
      v15 = *(_QWORD *)(v11 + 24);
      *(_QWORD *)(v11 + 24) = 0;
      v16 = v18 != 0;
    }
    else
    {
      v15 = 0;
      v16 = 1;
    }
    v17 = __ldxr((unsigned __int8 *)v11);
    if (v17 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v11))
      {
LABEL_13:
        if (!v14)
        {
          if (v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
          if (!v16)
            WTF::fastFree((WTF *)v11, v10);
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 104))(v7, 1);
        _Unwind_Resume(a1);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
    goto LABEL_13;
  }
  MEMORY[0x19AEABB3C](v11);
  goto LABEL_6;
}

_QWORD *WebKit::RemoteLayerWithInProcessRenderingBackingStore::createFlusher@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;

  if (a2)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 32))(*(_QWORD *)(a1 + 320));
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 320) + 112))(&v7);
    result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    v6 = v7;
    *result = off_1E34B91D8;
    result[1] = v6;
  }
  else
  {
    result = 0;
  }
  *a3 = result;
  return result;
}

void sub_1970545D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::RemoteLayerWithInProcessRenderingBackingStore::setBufferVolatile(WebKit::RemoteLayerWithInProcessRenderingBackingStore *this, WebCore::ImageBuffer **a2, int a3)
{
  WebCore::ImageBuffer *v6;

  if (!*a2)
    return 1;
  if (WebCore::ImageBuffer::volatilityState(*a2) == 1 && a3 == 0)
    return 1;
  v6 = *a2;
  if (a3)
  {
    WebCore::ImageBuffer::setVolatileAndPurgeForTesting(v6);
    return 1;
  }
  (*(void (**)(WebCore::ImageBuffer *))(*(_QWORD *)v6 + 104))(v6);
  return WebCore::ImageBuffer::setVolatile(*a2);
}

uint64_t WebKit::RemoteLayerWithInProcessRenderingBackingStore::setBufferNonVolatile(WebCore::ImageBuffer **this, WebKit::RemoteLayerWithInProcessRenderingBackingStore::Buffer *a2)
{
  WebCore::ImageBuffer *v3;

  v3 = *this;
  if (v3 && WebCore::ImageBuffer::volatilityState(v3))
    return WebCore::ImageBuffer::setNonVolatile(*this);
  else
    return 0;
}

void WebKit::RemoteLayerWithInProcessRenderingBackingStore::prepareToDisplay(WebKit::RemoteLayerWithInProcessRenderingBackingStore *this)
{
  uint64_t v1;
  uint64_t v2;
  WebKit::RemoteLayerWithInProcessRenderingBackingStore::Buffer *v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  _BOOL4 v8;
  uint64_t v9;
  WebKit::RemoteLayerWithInProcessRenderingBackingStore::Buffer *v10;
  int v11;
  _BOOL4 v12;
  WebCore::ImageBuffer *v13;
  WebCore::ImageBuffer *v14;
  void *v15;
  WebCore::IOSurfacePool *v16;
  char v17;
  int v18;
  float v19;
  CFTypeRef v20;
  int v21;
  char v22;
  WebCore::ImageBufferIOSurfaceBackend *v23;
  WebCore::ImageBufferIOSurfaceBackend *v24;
  CFTypeRef v25;
  WebCore::ImageBufferIOSurfaceBackend *v26;
  bmalloc::api *v27;
  void *v28;
  const void *v29;
  CFTypeRef v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  CFTypeRef v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WebCore::ImageBufferIOSurfaceBackend *v56;
  uint64_t v57;
  float v58;
  CFTypeRef cf;
  __int16 v60;
  _BYTE v61[56];
  uint64_t v62;
  WebCore::ImageBufferIOSurfaceBackend *v63;
  char v64[16];
  const void *v65;
  uint64_t v66;
  float v67;
  CFTypeRef v68;
  __int16 v69;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 832);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (*(_QWORD *)(v2 + 88) && (WebKit::RemoteLayerBackingStore::performDelegatedLayerDisplay(this) & 1) == 0)
      {
        if (*((_BYTE *)this + 176))
        {
          v5 = *((unsigned int *)this + 42);
          if ((_DWORD)v5 != -1)
            off_1E34B91A0[v5]((int)v61, (WebKit::RemoteLayerWithInProcessRenderingBackingStore *)((char *)this + 104));
          *((_DWORD *)this + 42) = -1;
          *((_BYTE *)this + 176) = 0;
        }
        v6 = (uint64_t *)((char *)this + 320);
        if (*((_QWORD *)this + 40)
          && (*((_BYTE *)this + 24)
           || WebKit::RemoteLayerWithInProcessRenderingBackingStore::setBufferNonVolatile((WebCore::ImageBuffer **)this + 40, v4) != 1))
        {
          if (*((int *)this + 16) < 1
            || *((int *)this + 17) < 1
            || *((float *)this + 7) <= 0.0
            || *((float *)this + 8) <= 0.0)
          {
            return;
          }
          v7 = 0;
        }
        else
        {
          v7 = 1;
        }
        v8 = WebKit::RemoteLayerBackingStore::supportsPartialRepaint(this);
        if (!*((_BYTE *)this + 24))
        {
          v13 = (WebCore::ImageBuffer *)*((_QWORD *)this + 42);
          if (!v13 || WebCore::ImageBuffer::isInUse(v13))
          {
            std::swap[abi:sn180100]<WebKit::RemoteLayerWithInProcessRenderingBackingStore::Buffer>((uint64_t)this + 336, (_BYTE *)this + 352);
            v14 = (WebCore::ImageBuffer *)*((_QWORD *)this + 42);
            if (v14)
            {
              if (WebCore::ImageBuffer::isInUse(v14))
                WebKit::RemoteLayerWithInProcessRenderingBackingStore::Buffer::discard((uint64_t *)this + 42, v15);
            }
          }
        }
        if (*((_BYTE *)this + 176))
        {
          v9 = *((unsigned int *)this + 42);
          if ((_DWORD)v9 != -1)
            off_1E34B91A0[v9]((int)v61, (WebKit::RemoteLayerWithInProcessRenderingBackingStore *)((char *)this + 104));
          *((_DWORD *)this + 42) = -1;
          *((_BYTE *)this + 176) = 0;
        }
        std::swap[abi:sn180100]<WebKit::RemoteLayerWithInProcessRenderingBackingStore::Buffer>((uint64_t)this + 320, (_BYTE *)this + 336);
        v11 = WebKit::RemoteLayerWithInProcessRenderingBackingStore::setBufferNonVolatile((WebCore::ImageBuffer **)this + 40, v10);
        if (*((_BYTE *)this + 176))
          v12 = 1;
        else
          v12 = *v6 != 0;
        if (v11 == 1)
          v12 = 0;
        if ((v7 | (!v12 || !v8)) == 1)
          WebKit::RemoteLayerBackingStore::setNeedsDisplay(this);
        WebKit::RemoteLayerBackingStore::dirtyRepaintCounterIfNecessary(this);
        if (!*((_QWORD *)this + 40))
        {
          v16 = *(WebCore::IOSurfacePool **)(*((_QWORD *)this + 2) + 48);
          v17 = 3;
          if (v16)
          {
            v16 = (WebCore::IOSurfacePool *)(*(uint64_t (**)(WebCore::IOSurfacePool *))(*(_QWORD *)v16 + 224))(v16);
            if ((_DWORD)v16)
              v17 = 4;
            else
              v17 = 3;
          }
          v55 = 0;
          v54 = WebCore::IOSurfacePool::sharedPool(v16);
          v18 = *((unsigned __int8 *)this + 24);
          v53 = *(_QWORD *)((char *)this + 28);
          v19 = *((float *)this + 12);
          v20 = (CFTypeRef)*((_QWORD *)this + 5);
          v52 = v20;
          v21 = v18;
          if (v20)
          {
            CFRetain(v20);
            v21 = *((unsigned __int8 *)this + 24);
          }
          if (v21 || !*((_BYTE *)this + 52))
          {
            v22 = *((_BYTE *)this + 53) ^ 1;
            if (!v18)
            {
LABEL_50:
              v66 = v53;
              v67 = v19;
              v68 = v20;
              if (v20)
                CFRetain(v20);
              LOBYTE(v69) = v22;
              HIBYTE(v69) = v17;
              WebCore::ImageBuffer::backendParameters();
              WebKit::ImageBufferShareableMappedIOSurfaceBackend::create((uint64_t)v64, &v63);
              if (v63)
              {
                v61[0] = 1;
                WebCore::ImageBufferBackend::calculateBaseTransform();
                v62 = WebCore::ImageBufferIOSurfaceBackend::calculateMemoryCost();
                v57 = v66;
                v58 = v67;
                cf = v68;
                if (v68)
                  CFRetain(v68);
                v60 = v69;
                v23 = v63;
                v63 = 0;
                v56 = v23;
                WebCore::ImageBuffer::create<WebCore::ImageBuffer>((uint64_t)&v57, &v51);
                v24 = v56;
                v56 = 0;
                if (v24)
                  (*(void (**)(WebCore::ImageBufferIOSurfaceBackend *))(*(_QWORD *)v24 + 8))(v24);
                v25 = cf;
                cf = 0;
                if (v25)
                  CFRelease(v25);
                v26 = v63;
                v63 = 0;
                if (v26)
                {
                  WebCore::ImageBufferIOSurfaceBackend::~ImageBufferIOSurfaceBackend(v26);
                  bmalloc::api::isoDeallocate(v27, v28);
                }
              }
              else
              {
                v51 = 0;
              }
              v29 = v65;
              v65 = 0;
              if (v29)
                CFRelease(v29);
              v30 = v68;
              v68 = 0;
              if (v30)
                CFRelease(v30);
LABEL_66:
              v52 = 0;
              if (v20)
                CFRelease(v20);
              WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v55 + 4));
              v32 = v51;
              v51 = 0;
              v33 = *v6;
              *v6 = v32;
              if (!v33)
                goto LABEL_102;
              v34 = *(_QWORD *)(v33 + 8);
              if (__ldaxr((unsigned __int8 *)v34))
              {
                __clrex();
              }
              else if (!__stxr(1u, (unsigned __int8 *)v34))
              {
                goto LABEL_73;
              }
              MEMORY[0x19AEABB3C](v34);
LABEL_73:
              v36 = *(_QWORD *)(v34 + 8);
              v37 = v36 - 1;
              *(_QWORD *)(v34 + 8) = v36 - 1;
              if (v36 == 1)
              {
                v49 = *(_QWORD *)(v34 + 16);
                v38 = *(_QWORD *)(v34 + 24);
                *(_QWORD *)(v34 + 24) = 0;
                v39 = v49 != 0;
              }
              else
              {
                v38 = 0;
                v39 = 1;
              }
              v40 = __ldxr((unsigned __int8 *)v34);
              if (v40 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v34))
                {
LABEL_80:
                  if (!v37)
                  {
                    if (v38)
                      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
                    if (!v39)
                      WTF::fastFree((WTF *)v34, v31);
                  }
                  v41 = v51;
                  v51 = 0;
                  if (!v41)
                    goto LABEL_102;
                  v42 = *(_QWORD *)(v41 + 8);
                  if (__ldaxr((unsigned __int8 *)v42))
                  {
                    __clrex();
                  }
                  else if (!__stxr(1u, (unsigned __int8 *)v42))
                  {
                    goto LABEL_90;
                  }
                  MEMORY[0x19AEABB3C](v42);
LABEL_90:
                  v44 = *(_QWORD *)(v42 + 8);
                  v45 = v44 - 1;
                  *(_QWORD *)(v42 + 8) = v44 - 1;
                  if (v44 == 1)
                  {
                    v50 = *(_QWORD *)(v42 + 16);
                    v46 = *(_QWORD *)(v42 + 24);
                    *(_QWORD *)(v42 + 24) = 0;
                    v47 = v50 != 0;
                  }
                  else
                  {
                    v46 = 0;
                    v47 = 1;
                  }
                  v48 = __ldxr((unsigned __int8 *)v42);
                  if (v48 == 1)
                  {
                    if (!__stlxr(0, (unsigned __int8 *)v42))
                    {
LABEL_97:
                      if (!v45)
                      {
                        if (v46)
                          (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
                        if (!v47)
                          WTF::fastFree((WTF *)v42, v31);
                      }
LABEL_102:
                      *((_BYTE *)this + 328) = 1;
                      return;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow((WTF::Lock *)v42);
                  goto LABEL_97;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v34);
              goto LABEL_80;
            }
          }
          else
          {
            if (*((_BYTE *)this + 53))
              v22 = 2;
            else
              v22 = 3;
            if (!v18)
              goto LABEL_50;
          }
          WebCore::ImageBuffer::create<WebKit::ImageBufferShareableBitmapBackend,WebCore::ImageBuffer>(&v53, &v52, v22, v17, (uint64_t)&v54, &v51, v19);
          v20 = v52;
          goto LABEL_66;
        }
      }
    }
  }
}

void sub_197054BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, CFTypeRef cf, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,WebCore::ImageBufferIOSurfaceBackend *a28)
{
  const void *v28;
  uint64_t v29;
  uint64_t v31;
  CFTypeRef v32;
  WebCore::ImageBufferIOSurfaceBackend *v33;
  bmalloc::api *v34;
  void *v35;
  const void *v36;
  const void *v37;

  v31 = a15;
  a15 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = cf;
  cf = 0;
  if (v32)
    CFRelease(v32);
  v33 = a28;
  a28 = 0;
  if (v33)
  {
    WebCore::ImageBufferIOSurfaceBackend::~ImageBufferIOSurfaceBackend(v33);
    bmalloc::api::isoDeallocate(v34, v35);
  }
  v36 = *(const void **)(v29 - 128);
  *(_QWORD *)(v29 - 128) = 0;
  if (v36)
    CFRelease(v36);
  v37 = *(const void **)(v29 - 96);
  *(_QWORD *)(v29 - 96) = 0;
  if (v37)
    CFRelease(v37);
  if (v28)
    CFRelease(v28);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&a14 + 4));
  _Unwind_Resume(a1);
}

uint64_t std::swap[abi:sn180100]<WebKit::RemoteLayerWithInProcessRenderingBackingStore::Buffer>(uint64_t result, _BYTE *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  v3 = result;
  v4 = *(_QWORD *)result;
  *(_QWORD *)result = 0;
  v5 = *(_BYTE *)(result + 8);
  v6 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v7 = *(_QWORD *)result;
  *(_QWORD *)result = v6;
  if (!v7)
    goto LABEL_18;
  v8 = *(_QWORD *)(v7 + 8);
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEABB3C](v8);
LABEL_6:
  v10 = *(_QWORD *)(v8 + 8);
  v11 = v10 - 1;
  *(_QWORD *)(v8 + 8) = v10 - 1;
  if (v10 == 1)
  {
    v23 = *(_QWORD *)(v8 + 16);
    v12 = *(_QWORD *)(v8 + 24);
    *(_QWORD *)(v8 + 24) = 0;
    v13 = v23 != 0;
  }
  else
  {
    v12 = 0;
    v13 = 1;
  }
  v14 = __ldxr((unsigned __int8 *)v8);
  if (v14 != 1)
  {
    __clrex();
LABEL_13:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if (v11)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v8))
    goto LABEL_13;
  if (v11)
    goto LABEL_18;
LABEL_14:
  if (v12)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (!v13)
    result = WTF::fastFree((WTF *)v8, a2);
LABEL_18:
  *(_BYTE *)(v3 + 8) = a2[8];
  v15 = *(_QWORD *)a2;
  *(_QWORD *)a2 = v4;
  if (!v15)
    goto LABEL_35;
  v16 = *(_QWORD *)(v15 + 8);
  if (__ldaxr((unsigned __int8 *)v16))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v16))
  {
    goto LABEL_23;
  }
  result = MEMORY[0x19AEABB3C](v16);
LABEL_23:
  v18 = *(_QWORD *)(v16 + 8);
  v19 = v18 - 1;
  *(_QWORD *)(v16 + 8) = v18 - 1;
  if (v18 == 1)
  {
    v24 = *(_QWORD *)(v16 + 16);
    v20 = *(_QWORD *)(v16 + 24);
    *(_QWORD *)(v16 + 24) = 0;
    v21 = v24 != 0;
  }
  else
  {
    v20 = 0;
    v21 = 1;
  }
  v22 = __ldxr((unsigned __int8 *)v16);
  if (v22 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v16))
    {
      if (v19)
        goto LABEL_35;
      goto LABEL_31;
    }
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v16);
  if (v19)
    goto LABEL_35;
LABEL_31:
  if (v20)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  if (!v21)
    result = WTF::fastFree((WTF *)v16, a2);
LABEL_35:
  a2[8] = v5;
  return result;
}

char *WebKit::RemoteLayerWithInProcessRenderingBackingStore::encodeBufferAndBackendInfos(WebKit::RemoteLayerWithInProcessRenderingBackingStore *this, IPC::Encoder *a2)
{
  WebCore::ImageBuffer *v4;
  WebCore::ImageBuffer *v5;
  uint64_t v6;
  unsigned int v7;
  WebCore::ImageBuffer *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v4 = (WebCore::ImageBuffer *)*((_QWORD *)this + 40);
  if (v4)
  {
    v12 = *((_QWORD *)v4 + 15);
    v13 = WebCore::ImageBuffer::backendGeneration(v4);
    v14 = 1;
  }
  else
  {
    LOBYTE(v12) = 0;
    v14 = 0;
  }
  IPC::ArgumentCoder<std::optional<WebKit::BufferAndBackendInfo>,void>::encode<IPC::Encoder,std::optional<WebKit::BufferAndBackendInfo>>(a2, &v12);
  v5 = (WebCore::ImageBuffer *)*((_QWORD *)this + 42);
  if (v5)
  {
    v6 = *((_QWORD *)v5 + 15);
    v7 = WebCore::ImageBuffer::backendGeneration(v5);
    v12 = v6;
    v13 = v7;
    v14 = 1;
  }
  else
  {
    LOBYTE(v12) = 0;
    v14 = 0;
  }
  IPC::ArgumentCoder<std::optional<WebKit::BufferAndBackendInfo>,void>::encode<IPC::Encoder,std::optional<WebKit::BufferAndBackendInfo>>(a2, &v12);
  v8 = (WebCore::ImageBuffer *)*((_QWORD *)this + 44);
  if (v8)
  {
    v9 = *((_QWORD *)v8 + 15);
    v10 = WebCore::ImageBuffer::backendGeneration(v8);
    v12 = v9;
    v13 = v10;
    v14 = 1;
  }
  else
  {
    LOBYTE(v12) = 0;
    v14 = 0;
  }
  return IPC::ArgumentCoder<std::optional<WebKit::BufferAndBackendInfo>,void>::encode<IPC::Encoder,std::optional<WebKit::BufferAndBackendInfo>>(a2, &v12);
}

uint64_t WebKit::RemoteLayerWithInProcessRenderingBackingStore::dump(WebKit::RemoteLayerWithInProcessRenderingBackingStore *this, WTF::TextStream *a2)
{
  WTF::TextStream::dumpProperty<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>(a2, (uint64_t)"front buffer", (_QWORD *)this + 40);
  WTF::TextStream::dumpProperty<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>(a2, (uint64_t)"back buffer", (_QWORD *)this + 42);
  WTF::TextStream::dumpProperty<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>(a2, (uint64_t)"secondaryBack buffer", (_QWORD *)this + 44);
  return WTF::TextStream::dumpProperty<BOOL>(a2);
}

uint64_t WTF::TextStream::dumpProperty<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>(WTF::TextStream *a1, uint64_t a2, _QWORD *a3)
{
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (*a3)
    WebCore::operator<<();
  else
    WTF::TextStream::operator<<();
  return WTF::TextStream::endGroup(a1);
}

uint64_t WTF::TextStream::dumpProperty<BOOL>(WTF::TextStream *a1)
{
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return WTF::TextStream::endGroup(a1);
}

uint64_t WebKit::RemoteLayerWithRemoteRenderingBackingStore::clearBackingStore(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = this;
  if (*(_BYTE *)(this + 176))
  {
    v2 = *(unsigned int *)(this + 168);
    if ((_DWORD)v2 != -1)
      this = off_1E34B91A0[v2]((int)&v3, (WTF::MachSendRight *)(this + 104));
    *(_DWORD *)(v1 + 168) = -1;
    *(_BYTE *)(v1 + 176) = 0;
  }
  *(_BYTE *)(v1 + 456) = 1;
  return this;
}

uint64_t WebKit::RemoteLayerWithRemoteRenderingBackingStore::dump(WebKit::RemoteLayerWithRemoteRenderingBackingStore *this, WTF::TextStream *a2)
{
  WTF::TextStream *v4;

  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (*((_QWORD *)this + 40))
    WTF::operator<<();
  else
    WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a2);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  v4 = (WTF::TextStream *)WTF::TextStream::operator<<();
  WebKit::operator<<(v4, (_BYTE *)this + 328);
  WTF::TextStream::endGroup(a2);
  return WTF::TextStream::dumpProperty<BOOL>(a2);
}

void WebKit::AuxiliaryProcess::initializeSandbox()
{
  __break(0xC471u);
}

uint64_t WebKit::InteractionInformationAtPosition::mergeCompatibleOptionalInformation(uint64_t this, const WebKit::InteractionInformationAtPosition *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  if (*(_DWORD *)a2 == *(_DWORD *)this && *((_DWORD *)a2 + 1) == *(_DWORD *)(this + 4))
  {
    v4 = this;
    if (*((_BYTE *)a2 + 8) && !*(_BYTE *)(this + 8))
    {
      v5 = (unsigned int *)*((_QWORD *)a2 + 24);
      if (v5)
      {
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 + 1, v5));
      }
      this = *(_QWORD *)(this + 192);
      *(_QWORD *)(v4 + 192) = v5;
      if (this)
        this = WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(this, a2);
    }
    if (*((_BYTE *)a2 + 9))
    {
      if (!*(_BYTE *)(v4 + 9))
        return WebCore::TextIndicatorData::operator=(v4 + 280, (__int128 *)((char *)a2 + 280));
    }
  }
  return this;
}

uint64_t WebCore::TextIndicatorData::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;

  v4 = *a2;
  v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 48, (uint64_t)(a2 + 3));
  *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 16);
  v6 = *((_QWORD *)a2 + 9);
  if (v6)
    ++*(_DWORD *)(v6 + 8);
  v7 = *(_DWORD **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v6;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  v8 = *((_QWORD *)a2 + 10);
  if (v8)
    ++*(_DWORD *)(v8 + 8);
  v9 = *(_DWORD **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v8;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  v10 = *((_QWORD *)a2 + 11);
  if (v10)
    ++*(_DWORD *)(v10 + 8);
  v11 = *(_DWORD **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v10;
  if (v11)
  {
    if (v11[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
    else
      --v11[2];
  }
  WebCore::Color::operator=();
  *(_DWORD *)(a1 + 104) = *((_DWORD *)a2 + 26);
  return a1;
}

uint64_t WebKit::NativeWebKeyboardEvent::NativeWebKeyboardEvent(uint64_t a1, WebKit::WebIOSEventFactory *this, WebEvent *a3)
{
  WTF::StringImpl *v5;
  __int128 v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _OWORD v13[2];
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  WebKit::WebIOSEventFactory::createWebKeyboardEvent(this, a3, (uint64_t)v13);
  v6 = v13[1];
  *(_OWORD *)a1 = v13[0];
  *(_OWORD *)(a1 + 16) = v6;
  v7 = v14;
  if (v14)
    *v14 += 2;
  *(_QWORD *)(a1 + 32) = v7;
  v8 = v15;
  if (v15)
    *v15 += 2;
  *(_QWORD *)(a1 + 40) = v8;
  v9 = v16;
  if (v16)
    *v16 += 2;
  *(_QWORD *)(a1 + 48) = v9;
  v10 = v17;
  if (v17)
    *v17 += 2;
  *(_QWORD *)(a1 + 56) = v10;
  v11 = v18;
  if (v18)
    *v18 += 2;
  *(_QWORD *)(a1 + 64) = v11;
  *(_OWORD *)(a1 + 72) = v19;
  WebKit::WebKeyboardEvent::~WebKeyboardEvent((WebKit::WebKeyboardEvent *)v13, v5);
  *(_QWORD *)(a1 + 88) = this;
  if (this)
    CFRetain(this);
  return a1;
}

void sub_197055460(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  WebKit::WebKeyboardEvent *v2;

  WebKit::WebKeyboardEvent::~WebKeyboardEvent(v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::RemoteLayerWithInProcessRenderingBackingStore::~RemoteLayerWithInProcessRenderingBackingStore(WebKit::RemoteLayerWithInProcessRenderingBackingStore *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebKit::RemoteLayerWithInProcessRenderingBackingStore::~RemoteLayerWithInProcessRenderingBackingStore(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  *(_QWORD *)this = off_1E34B9200;
  v3 = *((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (!v3)
    goto LABEL_18;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEABB3C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v27 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v27 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
    goto LABEL_13;
  if (v7)
    goto LABEL_18;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
LABEL_18:
  v11 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (!v11)
    goto LABEL_35;
  v12 = *(_QWORD *)(v11 + 8);
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v12))
  {
    goto LABEL_23;
  }
  MEMORY[0x19AEABB3C](v12);
LABEL_23:
  v14 = *(_QWORD *)(v12 + 8);
  v15 = v14 - 1;
  *(_QWORD *)(v12 + 8) = v14 - 1;
  if (v14 == 1)
  {
    v28 = *(_QWORD *)(v12 + 16);
    v16 = *(_QWORD *)(v12 + 24);
    *(_QWORD *)(v12 + 24) = 0;
    v17 = v28 != 0;
  }
  else
  {
    v16 = 0;
    v17 = 1;
  }
  v18 = __ldxr((unsigned __int8 *)v12);
  if (v18 != 1)
  {
    __clrex();
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v12);
    if (v15)
      goto LABEL_35;
    goto LABEL_31;
  }
  if (__stlxr(0, (unsigned __int8 *)v12))
    goto LABEL_30;
  if (v15)
    goto LABEL_35;
LABEL_31:
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (!v17)
    WTF::fastFree((WTF *)v12, a2);
LABEL_35:
  v19 = *((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (!v19)
    goto LABEL_52;
  v20 = *(_QWORD *)(v19 + 8);
  if (__ldaxr((unsigned __int8 *)v20))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v20))
  {
    goto LABEL_40;
  }
  MEMORY[0x19AEABB3C](v20);
LABEL_40:
  v22 = *(_QWORD *)(v20 + 8);
  v23 = v22 - 1;
  *(_QWORD *)(v20 + 8) = v22 - 1;
  if (v22 == 1)
  {
    v29 = *(_QWORD *)(v20 + 16);
    v24 = *(_QWORD *)(v20 + 24);
    *(_QWORD *)(v20 + 24) = 0;
    v25 = v29 != 0;
  }
  else
  {
    v24 = 0;
    v25 = 1;
  }
  v26 = __ldxr((unsigned __int8 *)v20);
  if (v26 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v20))
    {
      if (v23)
        goto LABEL_52;
      goto LABEL_48;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v20);
  if (v23)
    goto LABEL_52;
LABEL_48:
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  if (!v25)
    WTF::fastFree((WTF *)v20, a2);
LABEL_52:
  WebKit::RemoteLayerBackingStore::~RemoteLayerBackingStore(this, a2);
}

uint64_t WebKit::RemoteLayerWithInProcessRenderingBackingStore::isRemoteLayerWithInProcessRenderingBackingStore(WebKit::RemoteLayerWithInProcessRenderingBackingStore *this)
{
  return 1;
}

uint64_t WebKit::RemoteLayerWithInProcessRenderingBackingStore::processModel(WebKit::RemoteLayerWithInProcessRenderingBackingStore *this)
{
  return 0;
}

uint64_t WebKit::RemoteLayerWithRemoteRenderingBackingStore::processModel(WebKit::RemoteLayerWithRemoteRenderingBackingStore *this)
{
  return 1;
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>,WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>,WTF::HashTraits<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>,WTF::HashTraits<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>>::deallocateTable(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != -1)
      {
        *v4 = 0;
        if (v5)
          WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
      }
      ++v4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData,WTF::Ref<WebCore::Model,WTF::RawPtrTraits<WebCore::Model>,WTF::DefaultRefDerefTraits<WebCore::Model>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 16) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData,WTF::Ref<WebCore::Model,WTF::RawPtrTraits<WebCore::Model>,WTF::DefaultRefDerefTraits<WebCore::Model>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData,WTF::Ref<WebCore::Model,WTF::RawPtrTraits<WebCore::Model>,WTF::DefaultRefDerefTraits<WebCore::Model>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_197055548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 16);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENS8_10CustomDataEN3WTF3RefIN7WebCore5ModelENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEENSB_23ObjectIdentifierGenericINSD_33LayerHostingContextIdentifierTypeENSB_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSR_EEEDcOSS_DpOT0____fmatrix[v15])(&a13, v13);
  *(_DWORD *)(v13 + 16) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData,WTF::Ref<WebCore::Model,WTF::RawPtrTraits<WebCore::Model>,WTF::DefaultRefDerefTraits<WebCore::Model>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData,WTF::Ref<WebCore::Model,WTF::RawPtrTraits<WebCore::Model>,WTF::DefaultRefDerefTraits<WebCore::Model>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENS8_10CustomDataEN3WTF3RefIN7WebCore5ModelENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEENSB_23ObjectIdentifierGenericINSD_33LayerHostingContextIdentifierTypeENSB_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSR_EEEDcOSS_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENS8_10CustomDataEN3WTF3RefIN7WebCore5ModelENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEENSB_23ObjectIdentifierGenericINSD_33LayerHostingContextIdentifierTypeENSB_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JSV_SU_EEEDcmSX_DpOT0____fdiagonal[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENSA_10CustomDataEN3WTF3RefIN7WebCore5ModelENSD_12RawPtrTraitsISG_EENSD_21DefaultRefDerefTraitsISG_EEEENSD_23ObjectIdentifierGenericINSF_33LayerHostingContextIdentifierTypeENSD_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISR_LNS0_6_TraitE1EEEEEvRSS_OT_EUlRSY_OT0_E_JRNS0_6__baseILSV_1EJSB_SC_SL_SQ_EEEOS16_EEEDcSY_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
  *(_QWORD *)a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENSA_10CustomDataEN3WTF3RefIN7WebCore5ModelENSD_12RawPtrTraitsISG_EENSD_21DefaultRefDerefTraitsISG_EEEENSD_23ObjectIdentifierGenericINSF_33LayerHostingContextIdentifierTypeENSD_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISR_LNS0_6_TraitE1EEEEEvRSS_OT_EUlRSY_OT0_E_JRNS0_6__baseILSV_1EJSB_SC_SL_SQ_EEEOS16_EEEDcSY_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENSA_10CustomDataEN3WTF3RefIN7WebCore5ModelENSD_12RawPtrTraitsISG_EENSD_21DefaultRefDerefTraitsISG_EEEENSD_23ObjectIdentifierGenericINSF_33LayerHostingContextIdentifierTypeENSD_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISR_LNS0_6_TraitE1EEEEEvRSS_OT_EUlRSY_OT0_E_JRNS0_6__baseILSV_1EJSB_SC_SL_SQ_EEEOS16_EEEDcSY_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData,WTF::Ref<WebCore::Model,WTF::RawPtrTraits<WebCore::Model>,WTF::DefaultRefDerefTraits<WebCore::Model>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::NoAdditionalData,WebKit::RemoteLayerTreeTransaction::LayerCreationProperties::CustomData,WTF::Ref<WebCore::Model,WTF::RawPtrTraits<WebCore::Model>,WTF::DefaultRefDerefTraits<WebCore::Model>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 16);
  v4 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENS8_10CustomDataEN3WTF3RefIN7WebCore5ModelENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEENSB_23ObjectIdentifierGenericINSD_33LayerHostingContextIdentifierTypeENSB_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSR_EEEDcOSS_DpOT0____fmatrix[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 16) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENS8_10CustomDataEN3WTF3RefIN7WebCore5ModelENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEENSB_23ObjectIdentifierGenericINSD_33LayerHostingContextIdentifierTypeENSB_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISP_LNS0_6_TraitE1EEEEEvOT_EUlRSV_OT0_E_JRSQ_SU_EEEDcmSW_DpOT0____fdiagonal[v4])(&v5, result, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENSA_10CustomDataEN3WTF3RefIN7WebCore5ModelENSD_12RawPtrTraitsISG_EENSD_21DefaultRefDerefTraitsISG_EEEENSD_23ObjectIdentifierGenericINSF_33LayerHostingContextIdentifierTypeENSD_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSB_SC_SL_SQ_EEEOS15_EEEDcSX_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENS8_10CustomDataEN3WTF3RefIN7WebCore5ModelENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEENSB_23ObjectIdentifierGenericINSD_33LayerHostingContextIdentifierTypeENSB_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSR_EEEDcOSS_DpOT0____fmatrix[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 16) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENSA_10CustomDataEN3WTF3RefIN7WebCore5ModelENSD_12RawPtrTraitsISG_EENSD_21DefaultRefDerefTraitsISG_EEEENSD_23ObjectIdentifierGenericINSF_33LayerHostingContextIdentifierTypeENSD_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSB_SC_SL_SQ_EEEOS15_EEEDcSX_DpT0_(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v6 = *a3;
      *(_BYTE *)(a2 + 8) = *((_BYTE *)a3 + 8);
      *(_QWORD *)a2 = v6;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENS8_10CustomDataEN3WTF3RefIN7WebCore5ModelENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEENSB_23ObjectIdentifierGenericINSD_33LayerHostingContextIdentifierTypeENSB_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSR_EEEDcOSS_DpOT0____fmatrix[v5])(&v8, v4);
  }
  *(_DWORD *)(v4 + 16) = -1;
  v7 = *a3;
  *(_DWORD *)(v4 + 8) = *((_DWORD *)a3 + 2);
  *(_QWORD *)v4 = v7;
  *(_DWORD *)(v4 + 16) = 1;
  return result;
}

WebCore::Model *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENSA_10CustomDataEN3WTF3RefIN7WebCore5ModelENSD_12RawPtrTraitsISG_EENSD_21DefaultRefDerefTraitsISG_EEEENSD_23ObjectIdentifierGenericINSF_33LayerHostingContextIdentifierTypeENSD_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSB_SC_SL_SQ_EEEOS15_EEEDcSX_DpT0_(WebCore::Model *result, WebCore::Model **a2, WebCore::Model **a3)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::Model *v6;
  WebCore::Model *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = (WebCore::Model *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENS8_10CustomDataEN3WTF3RefIN7WebCore5ModelENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEENSB_23ObjectIdentifierGenericINSD_33LayerHostingContextIdentifierTypeENSB_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSR_EEEDcOSS_DpOT0____fmatrix[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 16) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return WTF::RefCounted<WebCore::Model>::deref(result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENSA_10CustomDataEN3WTF3RefIN7WebCore5ModelENSD_12RawPtrTraitsISG_EENSD_21DefaultRefDerefTraitsISG_EEEENSD_23ObjectIdentifierGenericINSF_33LayerHostingContextIdentifierTypeENSD_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSB_SC_SL_SQ_EEEOS15_EEEDcSX_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 3)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit26RemoteLayerTreeTransaction23LayerCreationProperties16NoAdditionalDataENS8_10CustomDataEN3WTF3RefIN7WebCore5ModelENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEENSB_23ObjectIdentifierGenericINSD_33LayerHostingContextIdentifierTypeENSB_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSR_EEEDcOSS_DpOT0____fmatrix[v5])(&v6, v4);
  }
  *(_DWORD *)(v4 + 16) = -1;
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 16) = 3;
  return result;
}

void WebKit::ImageBufferBackingStoreFlusher::~ImageBufferBackingStoreFlusher(WebKit::ImageBufferBackingStoreFlusher *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void WebKit::ImageBufferBackingStoreFlusher::~ImageBufferBackingStoreFlusher(WebKit::ImageBufferBackingStoreFlusher *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::fastFree(this, a2);
}

uint64_t WebKit::ImageBufferBackingStoreFlusher::flushAndCollectHandles(uint64_t a1)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  return 1;
}

uint64_t WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 *v8;
  uint64_t v9;
  __int128 v10;

  if (a2 != a1)
  {
    v4 = *(_DWORD *)(a1 + 12);
    v5 = *(_DWORD *)(a2 + 12);
    if (v4 <= v5)
    {
      if (v5 > *(_DWORD *)(a1 + 8))
      {
        WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a2 + 12));
        v4 = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 12) = v5;
      v4 = v5;
    }
    if (v4)
    {
      memmove(*(void **)a1, *(const void **)a2, 16 * v4);
      v4 = *(_DWORD *)(a1 + 12);
    }
    v6 = *(unsigned int *)(a2 + 12);
    if (v4 != (_DWORD)v6)
    {
      v7 = (_OWORD *)(*(_QWORD *)a1 + 16 * v4);
      v8 = (__int128 *)(*(_QWORD *)a2 + 16 * v4);
      v9 = 16 * v6 - 16 * v4;
      do
      {
        v10 = *v8++;
        *v7++ = v10;
        v9 -= 16;
      }
      while (v9);
      v4 = *(_DWORD *)(a2 + 12);
    }
    *(_DWORD *)(a1 + 12) = v4;
  }
  return a1;
}

uint64_t *WTF::HashTable<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>,WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>,WTF::HashTraits<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>,WTF::HashTraits<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>,WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>,WTF::HashTraits<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>,WTF::HashTraits<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>>::expand(result, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = 0;
  v10 = *a2;
  v11 = ~(*a2 << 32) + *a2;
  v12 = 9
      * (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) ^ (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = (v13 >> 31) ^ v13;
  for (i = 1; ; ++i)
  {
    v16 = v14 & v8;
    v17 = (uint64_t *)(v6 + 8 * v16);
    v18 = *v17;
    if (!*v17)
    {
      if (v9)
      {
        *v9 = 0;
        --*(_DWORD *)(*v4 - 16);
        v10 = *a2;
        v17 = v9;
      }
      *a2 = 0;
      v19 = *v17;
      *v17 = v10;
      if (v19)
        result = (uint64_t *)WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v19 + 8));
      v20 = *v4;
      if (*v4)
        v21 = *(_DWORD *)(v20 - 12) + 1;
      else
        v21 = 1;
      *(_DWORD *)(v20 - 12) = v21;
      v22 = *v4;
      if (*v4)
        v23 = *(_DWORD *)(v22 - 12);
      else
        v23 = 0;
      v24 = (*(_DWORD *)(v22 - 16) + v23);
      v25 = *(unsigned int *)(v22 - 4);
      if (v25 > 0x400)
      {
        if (v25 > 2 * v24)
          goto LABEL_19;
      }
      else if (3 * v25 > 4 * v24)
      {
LABEL_19:
        v26 = v22 + 8 * v25;
        v27 = 1;
        goto LABEL_20;
      }
      result = WTF::HashTable<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>,WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>,WTF::HashTraits<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>,WTF::HashTraits<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>>::expand(v4, v17);
      v17 = result;
      v22 = *v4;
      if (*v4)
        v25 = *(unsigned int *)(v22 - 4);
      else
        v25 = 0;
      goto LABEL_19;
    }
    if (v18 != -1)
      break;
    v9 = (uint64_t *)(v6 + 8 * v16);
LABEL_8:
    v14 = i + v16;
  }
  if (v18 != v10)
    goto LABEL_8;
  if ((v7 & 1) != 0)
    v28 = 0;
  else
    v28 = *(unsigned int *)(v6 - 4);
  v27 = 0;
  v26 = v6 + 8 * v28;
LABEL_20:
  *(_QWORD *)a3 = v17;
  *(_QWORD *)(a3 + 8) = v26;
  *(_BYTE *)(a3 + 16) = v27;
  return result;
}

_QWORD *WTF::HashTable<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>,WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>,WTF::HashTraits<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>,WTF::HashTraits<WTF::Ref<WebKit::PlatformCALayerRemote,WTF::RawPtrTraits<WebKit::PlatformCALayerRemote>,WTF::DefaultRefDerefTraits<WebKit::PlatformCALayerRemote>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *result;

  v4 = *a1;
  if (!*a1)
  {
    v5 = 0;
    v6 = 0;
    goto LABEL_3;
  }
  v5 = *(_DWORD *)(v4 - 4);
  v6 = *(_DWORD *)(v4 - 12);
  if (!v5)
  {
LABEL_3:
    v7 = 8;
    goto LABEL_4;
  }
  v7 = v5 << (6 * v6 >= (2 * v5));
LABEL_4:
  v8 = WTF::fastZeroedMalloc((WTF *)(8 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = (uint64_t *)(v4 + 8 * v10);
      v13 = *v12;
      if (*v12)
      {
        if (v13 != -1)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v19 = v15 & ((v18 >> 31) ^ v18);
          v20 = 1;
          do
          {
            v21 = v19;
            v22 = *(_QWORD *)(v14 + 8 * v19);
            v19 = (v19 + v20++) & v15;
          }
          while (v22);
          v23 = (_QWORD *)(v14 + 8 * v21);
          *v23 = 0;
          v24 = *v12;
          *v12 = 0;
          *v23 = v24;
          v25 = *v12;
          *v12 = 0;
          if (v25)
            WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(v25 + 8));
          if (v12 == a2)
            v11 = v23;
        }
      }
      else
      {
        *v12 = 0;
      }
      ++v10;
    }
    while (v10 != v5);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v11;
}

WTF::TextStream *WebKit::operator<<(WTF::TextStream *a1, _BYTE *a2)
{
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (a2[8])
    WTF::operator<<();
  else
    WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (a2[24])
    WTF::operator<<();
  else
    WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (a2[40])
    WTF::operator<<();
  else
    WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  return a1;
}

uint64_t WebKit::RemotePresentationContext::RemotePresentationContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  WTF::ThreadSafeWeakPtrControlBlock *v14;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E34B92B8;
  ++*(_DWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 16) = a3;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a4 + 16), a4);
  v11 = *(unsigned int **)(a4 + 16);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  *(_QWORD *)(a1 + 24) = v11;
  v13 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 32) = v13;
  *(_QWORD *)(a1 + 40) = a6;
  v14 = *(WTF::ThreadSafeWeakPtrControlBlock **)(a2 + 16);
  if (v14)
  {
    v14 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(*(WTF::ThreadSafeWeakPtrControlBlock **)(a2 + 16));
    v13 = *(_QWORD *)(a1 + 32);
    a6 = *(_QWORD *)(a1 + 40);
  }
  *(_QWORD *)(a1 + 48) = v14;
  *(_QWORD *)(a1 + 56) = a2;
  IPC::StreamServerConnection::startReceivingMessages(v13, a1, 0x6Bu, a6);
  return a1;
}

void WebKit::RemotePresentationContext::~RemotePresentationContext(WebKit::RemotePresentationContext *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebKit::RemoteCommandEncoder::~RemoteCommandEncoder(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebKit::RemotePresentationContext::configure(uint64_t a1, uint64_t a2)
{
  void *v3;
  _BYTE v5[48];

  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a2, (uint64_t)v5);
  if (v5[40])
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), v5);
  return std::__optional_destruct_base<WebCore::WebGPU::CanvasConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5, v3);
}

unsigned __int8 *WebKit::RemotePresentationContext::getCurrentTexture(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *result;
  _DWORD *v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  _DWORD *v18;

  (*(void (**)(_DWORD **__return_ptr))(**(_QWORD **)(a1 + 16) + 40))(&v18);
  result = *(unsigned __int8 **)(a1 + 48);
  if (result)
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(_QWORD *)(a1 + 56), &v17);
  else
    v17 = 0;
  v5 = v18;
  if (v18)
  {
    v6 = v17;
    if (!v17)
    {
      v18 = 0;
LABEL_16:
      if (v5[2] == 1)
        return (unsigned __int8 *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
      --v5[2];
      return result;
    }
    v7 = *(unsigned int **)(a1 + 32);
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    v9 = v7 + 2;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    v16 = v7;
    v11 = (unsigned int *)WTF::fastMalloc((WTF *)0x40);
    WebKit::RemoteTexture::RemoteTexture((uint64_t)v11, v6, (uint64_t)v5, v8, (uint64_t *)&v16, a2);
    WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(&v16);
    result = (unsigned __int8 *)WebKit::WebGPU::ObjectHeap::addObject(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a2, (uint64_t)v11);
    v12 = v11 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v11 + 2);
      result = (unsigned __int8 *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
    }
  }
  v15 = v17;
  v17 = 0;
  if (v15)
    result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v15 + 16));
  v5 = v18;
  v18 = 0;
  if (v5)
    goto LABEL_16;
  return result;
}

uint64_t WebKit::RemoteQuerySet::RemoteQuerySet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E34B92E0;
  ++*(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = a2;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 16), a3);
  v9 = *(unsigned int **)(a3 + 16);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *(_QWORD *)(a1 + 24) = v9;
  v11 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = a5;
  IPC::StreamServerConnection::startReceivingMessages(v11, a1, 0x6Cu, a5);
  return a1;
}

void WebKit::RemoteQuerySet::~RemoteQuerySet(unsigned int **this)
{
  WTF *v1;
  void *v2;

  WebKit::RemoteBindGroup::~RemoteBindGroup(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::RemoteQueue::RemoteQueue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E34B9308;
  ++*(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = a2;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 16), a3);
  v9 = *(unsigned int **)(a3 + 16);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *(_QWORD *)(a1 + 24) = v9;
  v11 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = a5;
  IPC::StreamServerConnection::startReceivingMessages(v11, a1, 0x6Du, a5);
  return a1;
}

void WebKit::RemoteQueue::~RemoteQueue(unsigned int **this)
{
  WTF *v1;
  void *v2;

  WebKit::RemoteBindGroup::~RemoteBindGroup(this);
  WTF::fastFree(v1, v2);
}

WTF *WebKit::RemoteQueue::submit(WTF *result, uint64_t a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  WTF *v16;
  uint64_t v17;

  v2 = result;
  v16 = 0;
  v17 = 0;
  v3 = *(unsigned int *)(a2 + 12);
  if (!(_DWORD)v3)
    goto LABEL_16;
  if (v3 >> 29)
  {
    __break(0xC471u);
    return result;
  }
  LODWORD(v17) = *(_DWORD *)(a2 + 12);
  v16 = (WTF *)WTF::fastMalloc((WTF *)(8 * v3));
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = *(uint64_t **)a2;
    v7 = 8 * v5;
    while (1)
    {
      v8 = WebKit::WebGPU::ObjectHeap::convertCommandBufferFromBacking(*(_QWORD *)(*((_QWORD *)v2 + 3) + 8), *v6);
      if (!v8)
        break;
      v10 = v8;
      v11 = HIDWORD(v17);
      if (HIDWORD(v17) == (_DWORD)v17)
      {
        v12 = HIDWORD(v17) + ((unint64_t)HIDWORD(v17) >> 2);
        if (v12 >= 0x10)
          v13 = v12 + 1;
        else
          v13 = 16;
        if (v13 <= (unint64_t)HIDWORD(v17) + 1)
          v14 = HIDWORD(v17) + 1;
        else
          v14 = v13;
        WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v16, v14);
        v11 = HIDWORD(v17);
        v15 = (uint64_t *)((char *)v16 + 8 * HIDWORD(v17));
      }
      else
      {
        v15 = (uint64_t *)((char *)v16 + 8 * HIDWORD(v17));
      }
      *v15 = v10;
      HIDWORD(v17) = v11 + 1;
      ++v6;
      v7 -= 8;
      if (!v7)
        goto LABEL_16;
    }
  }
  else
  {
LABEL_16:
    (*(void (**)(_QWORD, WTF **))(**((_QWORD **)v2 + 2) + 16))(*((_QWORD *)v2 + 2), &v16);
  }
  result = v16;
  if (v16)
  {
    v16 = 0;
    LODWORD(v17) = 0;
    return (WTF *)WTF::fastFree(result, v9);
  }
  return result;
}

uint64_t WebKit::RemoteQueue::onSubmittedWorkDone(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = &off_1E34B9448;
  v4[1] = v3;
  v6 = v4;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v2 + 24))(v2, &v6);
  result = (uint64_t)v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unsigned int *WebKit::RemoteQueue::writeBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *result;
  uint64_t v14;

  if (*(_BYTE *)(a4 + 16))
    WebCore::SharedMemory::map();
  else
    v14 = 0;
  v9 = WebKit::WebGPU::ObjectHeap::convertBufferFromBacking(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a2);
  if (v9)
  {
    if (v14)
    {
      v11 = *(_QWORD *)(v14 + 8);
      v10 = *(_QWORD *)(v14 + 16);
    }
    else
    {
      v11 = 0;
      v10 = 0;
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 16)
                                                                                               + 48))(*(_QWORD *)(a1 + 16), v9, a3, v10, v11, 0, 0, 0);
    v12 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, 1);
  }
  else
  {
    v12 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 16))(v12, 0);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  result = (unsigned int *)v14;
  if (v14)
    return WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref((unsigned int *)v14);
  return result;
}

unsigned int *WebKit::RemoteQueue::writeTexture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unsigned int *result;
  _BYTE v19[16];
  int v20;
  char v21;
  uint64_t v22;
  int v23;
  char v24;
  unint64_t v25;
  char v26;
  _BYTE v27[64];
  uint64_t v28;
  char v29;

  if (*(_BYTE *)(a3 + 16))
    WebCore::SharedMemory::map();
  else
    v28 = 0;
  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a2, (uint64_t)v27);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *a4;
  v23 = *((_DWORD *)a4 + 2);
  v24 = *((_BYTE *)a4 + 12);
  v13 = ((unint64_t)*((unsigned int *)a4 + 4) << 24) | ((unint64_t)*((unsigned __int8 *)a4 + 20) << 56);
  v22 = v12;
  v25 = v13;
  v26 = 1;
  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(*(_QWORD *)(v11 + 8), a5);
  if (v27[56] && v21)
  {
    if (v28)
    {
      v15 = *(_QWORD *)(v28 + 8);
      v14 = *(_QWORD *)(v28 + 16);
    }
    else
    {
      v14 = 0;
      v15 = 0;
    }
    (*(void (**)(_QWORD, _BYTE *, uint64_t, uint64_t, uint64_t *, _BYTE *))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16), v27, v14, v15, &v22, v19);
    v16 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, 1);
  }
  else
  {
    v16 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 16))(v16, 0);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (v21 && v20 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Extent3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v20])(&v29, v19);
  std::__optional_destruct_base<WebCore::WebGPU::ImageCopyTexture,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v27, v17);
  result = (unsigned int *)v28;
  v28 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(result);
  return result;
}

uint64_t WebKit::RemoteQueue::copyExternalImageToTexture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  void *v8;
  int v9;
  BOOL v10;
  _BYTE v11[16];
  int v12;
  unsigned __int8 v13;
  _BYTE v14[64];
  _BYTE v15[16];
  int v16;
  char v17;
  char v18;
  char v19;

  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a2, v15);
  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a3, v14);
  result = WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a4);
  v9 = v13;
  if (v14[56])
    v10 = v13 == 0;
  else
    v10 = 1;
  if (!v10)
  {
    if (!v18)
    {
      __break(1u);
      return result;
    }
    (*(void (**)(_QWORD, _BYTE *, _BYTE *, _BYTE *))(**(_QWORD **)(a1 + 16) + 64))(*(_QWORD *)(a1 + 16), v15, v14, v11);
    v9 = v13;
  }
  if (v9 && v12 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Extent3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v12])(&v19, v11);
  result = std::__optional_destruct_base<WebCore::WebGPU::ImageCopyTextureTagged,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v14, v8);
  if (v18 && v17 && v16 != -1)
    return ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v16])(v14, v15);
  return result;
}

void WebKit::RemoteRenderBundle::~RemoteRenderBundle(unsigned int **this)
{
  WTF *v1;
  void *v2;

  WebKit::RemoteBindGroup::~RemoteBindGroup(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::RemoteRenderBundleEncoder::RemoteRenderBundleEncoder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  WTF::ThreadSafeWeakPtrControlBlock *v14;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E34B9358;
  ++*(_DWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 16) = a3;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a4 + 16), a4);
  v11 = *(unsigned int **)(a4 + 16);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  *(_QWORD *)(a1 + 24) = v11;
  v13 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 32) = v13;
  *(_QWORD *)(a1 + 40) = a6;
  v14 = *(WTF::ThreadSafeWeakPtrControlBlock **)(a2 + 16);
  if (v14)
  {
    v14 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(*(WTF::ThreadSafeWeakPtrControlBlock **)(a2 + 16));
    v13 = *(_QWORD *)(a1 + 32);
    a6 = *(_QWORD *)(a1 + 40);
  }
  *(_QWORD *)(a1 + 48) = v14;
  *(_QWORD *)(a1 + 56) = a2;
  IPC::StreamServerConnection::startReceivingMessages(v13, a1, 0x71u, a6);
  return a1;
}

void WebKit::RemoteRenderBundleEncoder::~RemoteRenderBundleEncoder(WebKit::RemoteRenderBundleEncoder *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebKit::RemoteCommandEncoder::~RemoteCommandEncoder(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebKit::RemoteRenderBundleEncoder::setPipeline(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = WebKit::WebGPU::ObjectHeap::convertRenderPipelineFromBacking(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a2);
  if (result)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), result);
  return result;
}

uint64_t WebKit::RemoteRenderBundleEncoder::setIndexBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;

  result = WebKit::WebGPU::ObjectHeap::convertBufferFromBacking(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a2);
  if (result)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), result, a3, a4, a5, a6, a7);
  return result;
}

uint64_t WebKit::RemoteRenderBundleEncoder::setVertexBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;

  result = WebKit::WebGPU::ObjectHeap::convertBufferFromBacking(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a3);
  if (result)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2, result, a4, a5, a6, a7);
  return result;
}

uint64_t WebKit::RemoteRenderBundleEncoder::drawIndirect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = WebKit::WebGPU::ObjectHeap::convertBufferFromBacking(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a2);
  if (result)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16), result, a3);
  return result;
}

uint64_t WebKit::RemoteRenderBundleEncoder::drawIndexedIndirect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = WebKit::WebGPU::ObjectHeap::convertBufferFromBacking(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a2);
  if (result)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 64))(*(_QWORD *)(a1 + 16), result, a3);
  return result;
}

uint64_t WebKit::RemoteRenderBundleEncoder::setBindGroup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = WebKit::WebGPU::ObjectHeap::convertBindGroupFromBacking(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a3);
  if (result)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16), a2, result, a4);
  return result;
}

WTF::StringImpl *WebKit::RemoteRenderBundleEncoder::finish(uint64_t a1, WTF::StringImpl **a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WebKit::GPUConnectionToWebProcess *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  WebKit::GPUConnectionToWebProcess *v16;
  unsigned int v17;
  unsigned int v18;
  WTF::StringImpl *result;
  unsigned __int8 *v20;
  WebKit::GPUConnectionToWebProcess *v21;
  WebKit::GPUConnectionToWebProcess *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  char v25;

  v5 = *a2;
  if (*a2)
    *(_DWORD *)v5 += 2;
  v24 = v5;
  v25 = 1;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 16) + 112))(&v23, *(_QWORD *)(a1 + 16), &v24);
  v7 = v23;
  if (v23)
  {
    v8 = *(WebKit::GPUConnectionToWebProcess **)(a1 + 32);
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    v10 = (unsigned int *)((char *)v8 + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    v22 = v8;
    v12 = WTF::fastMalloc((WTF *)0x30);
    *(_DWORD *)(v12 + 8) = 1;
    v13 = (unsigned int *)(v12 + 8);
    *(_QWORD *)v12 = off_1E34B9330;
    ++*((_DWORD *)v7 + 2);
    *(_QWORD *)(v12 + 16) = v7;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v9 + 16), v9);
    v14 = *(unsigned int **)(v9 + 16);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
    v16 = v22;
    v22 = 0;
    *(_QWORD *)(v12 + 24) = v14;
    *(_QWORD *)(v12 + 32) = v16;
    *(_QWORD *)(v12 + 40) = a3;
    IPC::StreamServerConnection::startReceivingMessages((uint64_t)v16, v12, 0x70u, a3);
    WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)&v22);
    WebKit::WebGPU::ObjectHeap::addObject(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a3, v12);
    do
    {
      v17 = __ldaxr(v13);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v13));
    if (!v18)
    {
      atomic_store(1u, (unsigned int *)(v12 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    }
  }
  else
  {
    v20 = *(unsigned __int8 **)(a1 + 48);
    if (v20)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v20, *(_QWORD *)(a1 + 56), &v22);
      if (v22)
      {
        WebKit::GPUConnectionToWebProcess::terminateWebProcess(v22);
        v21 = v22;
        v22 = 0;
        if (v21)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v21 + 2));
      }
    }
  }
  result = v23;
  v23 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    else
      --*((_DWORD *)result + 2);
  }
  if (v25)
  {
    result = v24;
    v24 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::RemoteRenderPassEncoder::RemoteRenderPassEncoder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E34B9380;
  ++*(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = a2;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 16), a3);
  v9 = *(unsigned int **)(a3 + 16);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *(_QWORD *)(a1 + 24) = v9;
  v11 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = a5;
  IPC::StreamServerConnection::startReceivingMessages(v11, a1, 0x72u, a5);
  return a1;
}

void WebKit::RemoteRenderPassEncoder::~RemoteRenderPassEncoder(unsigned int **this)
{
  WTF *v1;
  void *v2;

  WebKit::RemoteBindGroup::~RemoteBindGroup(this);
  WTF::fastFree(v1, v2);
}

unint64_t WebKit::RemoteRenderPassEncoder::setBlendConstant(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  int v5;
  _BYTE v6[32];
  int v7;
  _BYTE v8[32];
  int v9;
  char v10;
  char v11;

  result = WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a2);
  if (v10)
  {
    v4 = *(_QWORD *)(a1 + 16);
    v6[0] = 0;
    v7 = -1;
    v5 = v9;
    if (v9 != -1)
    {
      ((void (*)(char *, _BYTE *, _BYTE *))off_1E34B9428[v9])(&v11, v6, v8);
      v7 = v5;
    }
    result = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v4 + 128))(v4, v6);
    if (v7 != -1)
      result = ((uint64_t (*)(char *, _BYTE *))off_1E34B9418[v7])(&v11, v6);
    v7 = -1;
    if (v10)
    {
      if (v9 != -1)
        return ((uint64_t (*)(char *, _BYTE *))off_1E34B9418[v9])(&v11, v8);
    }
  }
  return result;
}

WTF *WebKit::RemoteRenderPassEncoder::executeBundles(WTF *result, uint64_t a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  WTF *v16;
  uint64_t v17;

  v2 = result;
  v16 = 0;
  v17 = 0;
  v3 = *(unsigned int *)(a2 + 12);
  if (!(_DWORD)v3)
    goto LABEL_16;
  if (v3 >> 29)
  {
    __break(0xC471u);
    return result;
  }
  LODWORD(v17) = *(_DWORD *)(a2 + 12);
  v16 = (WTF *)WTF::fastMalloc((WTF *)(8 * v3));
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = *(uint64_t **)a2;
    v7 = 8 * v5;
    while (1)
    {
      v8 = WebKit::WebGPU::ObjectHeap::convertRenderBundleFromBacking(*(_QWORD *)(*((_QWORD *)v2 + 3) + 8), *v6);
      if (!v8)
        break;
      v10 = v8;
      v11 = HIDWORD(v17);
      if (HIDWORD(v17) == (_DWORD)v17)
      {
        v12 = HIDWORD(v17) + ((unint64_t)HIDWORD(v17) >> 2);
        if (v12 >= 0x10)
          v13 = v12 + 1;
        else
          v13 = 16;
        if (v13 <= (unint64_t)HIDWORD(v17) + 1)
          v14 = HIDWORD(v17) + 1;
        else
          v14 = v13;
        WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v16, v14);
        v11 = HIDWORD(v17);
        v15 = (uint64_t *)((char *)v16 + 8 * HIDWORD(v17));
      }
      else
      {
        v15 = (uint64_t *)((char *)v16 + 8 * HIDWORD(v17));
      }
      *v15 = v10;
      HIDWORD(v17) = v11 + 1;
      ++v6;
      v7 -= 8;
      if (!v7)
        goto LABEL_16;
    }
  }
  else
  {
LABEL_16:
    (*(void (**)(_QWORD, WTF **))(**((_QWORD **)v2 + 2) + 160))(*((_QWORD *)v2 + 2), &v16);
  }
  result = v16;
  if (v16)
  {
    v16 = 0;
    LODWORD(v17) = 0;
    return (WTF *)WTF::fastFree(result, v9);
  }
  return result;
}

uint64_t WebKit::RemoteRenderPipeline::RemoteRenderPipeline(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E34B93A8;
  ++*(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = a2;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 16), a3);
  v9 = *(unsigned int **)(a3 + 16);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *(_QWORD *)(a1 + 24) = v9;
  v11 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = a5;
  IPC::StreamServerConnection::startReceivingMessages(v11, a1, 0x73u, a5);
  return a1;
}

void WebKit::RemoteRenderPipeline::~RemoteRenderPipeline(unsigned int **this)
{
  WTF *v1;
  void *v2;

  WebKit::RemoteBindGroup::~RemoteBindGroup(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::RemoteSampler::RemoteSampler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E34B93D0;
  ++*(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = a2;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 16), a3);
  v9 = *(unsigned int **)(a3 + 16);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *(_QWORD *)(a1 + 24) = v9;
  v11 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = a5;
  IPC::StreamServerConnection::startReceivingMessages(v11, a1, 0x78u, a5);
  return a1;
}

void WebKit::RemoteSampler::~RemoteSampler(unsigned int **this)
{
  WTF *v1;
  void *v2;

  WebKit::RemoteBindGroup::~RemoteBindGroup(this);
  WTF::fastFree(v1, v2);
}

uint64_t std::__optional_destruct_base<WebCore::WebGPU::CanvasConfiguration,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int v6;
  unsigned int v7;

  if (*(_BYTE *)(a1 + 40))
  {
    v3 = *(WTF **)(a1 + 16);
    if (v3)
    {
      *(_QWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = 0;
      WTF::fastFree(v3, a2);
    }
    v4 = *(unsigned int **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      do
      {
        v6 = __ldaxr(v4);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v4));
      if (!v7)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::WebGPU::ImageCopyTextureTagged,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v6;
  unsigned int v7;
  char v8;

  if (*(_BYTE *)(a1 + 56))
  {
    if (*(_BYTE *)(a1 + 40))
    {
      v3 = *(unsigned int *)(a1 + 32);
      if ((_DWORD)v3 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v3])(&v8, a1 + 16);
      *(_DWORD *)(a1 + 32) = -1;
    }
    v4 = *(unsigned int **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      do
      {
        v6 = __ldaxr(v4);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v4));
      if (!v7)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  return a1;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSC_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIdLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU9ColorDictEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a2, a3);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIdLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU9ColorDictEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *a2 = *(_OWORD *)a3;
  a2[1] = v4;
  return result;
}

uint64_t WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 29))
  {
    v5 = (void *)WTF::fastMalloc((WTF *)(8 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v5;
    memcpy(v5, *(const void **)a2, 8 * *(unsigned int *)(a2 + 12));
    return v2;
  }
  __break(0xC471u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteQueue::onSubmittedWorkDone(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34B9448;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteQueue::onSubmittedWorkDone(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34B9448;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteQueue::onSubmittedWorkDone(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

WebKit::NativeWebTouchEvent *WebKit::NativeWebTouchEvent::NativeWebTouchEvent(WebKit::NativeWebTouchEvent *this, const WKTouchEvent *a2, unsigned int a3)
{
  unsigned int type;
  char v7;
  double timestamp;
  WebKit::NativeWebTouchEvent *result;
  CGFloat y;
  CGFloat x;
  uint64_t m_size;
  int v13;
  WTF *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  _BYTE *v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  BOOL isPotentialTap;
  BOOL inJavaScriptGesture;
  void *v31;
  WTF *v32;
  double v33;
  float64x2_t v34;
  WTF *v35;
  uint64_t v36;
  CGPoint locationInDocumentCoordinates;
  uint64_t v38;

  type = a2->type;
  if (type >= 4)
    v7 = 11;
  else
    v7 = type + 11;
  timestamp = a2->timestamp;
  result = (WebKit::NativeWebTouchEvent *)WTF::UUID::UUID((WTF::UUID *)&locationInDocumentCoordinates);
  x = locationInDocumentCoordinates.x;
  y = locationInDocumentCoordinates.y;
  v35 = 0;
  v36 = 0;
  m_size = a2->touchPoints.m_size;
  if ((_DWORD)m_size)
  {
    if (m_size >= 0x38E38E4)
    {
      __break(0xC471u);
      return result;
    }
    v13 = 72 * m_size;
    v14 = (WTF *)WTF::fastMalloc((WTF *)(72 * m_size));
    LODWORD(v36) = (v13 & 0xFFFFFFF8) / 0x48;
    v35 = v14;
    if (a2->touchPoints.m_size)
    {
      v33 = x;
      v15 = 0;
      v16 = (char *)v14 + 32;
      v17 = 80;
      do
      {
        v18 = (char *)a2->touchPoints.m_buffer + v17;
        v19 = *((_DWORD *)v18 - 12);
        locationInDocumentCoordinates = (CGPoint)*((_OWORD *)v18 - 4);
        WebCore::IntPoint::IntPoint((WebCore::IntPoint *)&v38, &locationInDocumentCoordinates);
        v20 = v38;
        v21 = *((_QWORD *)v18 - 5);
        if (v21 >= 5)
          v22 = 3;
        else
          v22 = 0x400030201uLL >> (8 * v21);
        v23 = *((_QWORD *)v18 - 4);
        v24 = *((_QWORD *)v18 - 1);
        v25 = *v18 == 1;
        *((_DWORD *)v16 - 8) = v19;
        *(v16 - 20) = v22;
        v26 = *(_OWORD *)(v18 - 24);
        *(_QWORD *)(v16 - 28) = v20;
        *((_QWORD *)v16 - 2) = v23;
        *((_QWORD *)v16 - 1) = v23;
        *(_QWORD *)v16 = 0;
        *(_OWORD *)(v16 + 8) = v26;
        *((_QWORD *)v16 + 3) = v24;
        v16[32] = v25;
        ++v15;
        v16 += 72;
        v17 += 88;
      }
      while (v15 < a2->touchPoints.m_size);
      HIDWORD(v36) = v15;
      x = v33;
    }
  }
  locationInDocumentCoordinates = a2->locationInDocumentCoordinates;
  WebCore::IntPoint::IntPoint((WebCore::IntPoint *)&v38, &locationInDocumentCoordinates);
  v27 = v38;
  v28 = (a3 >> 12) & 0x10 | (a3 >> 17) & 0xF;
  isPotentialTap = a2->isPotentialTap;
  inJavaScriptGesture = a2->inJavaScriptGesture;
  v34 = *(float64x2_t *)&a2->scale;
  *(_BYTE *)this = v7;
  *((_BYTE *)this + 1) = v28;
  *((double *)this + 1) = timestamp;
  *((CGFloat *)this + 2) = x;
  *((CGFloat *)this + 3) = y;
  WTF::Vector<WebKit::WebPlatformTouchPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 32, (uint64_t *)&v35);
  *((_QWORD *)this + 6) = v27;
  *((_BYTE *)this + 56) = 1;
  *((_BYTE *)this + 57) = isPotentialTap;
  *((_BYTE *)this + 58) = inJavaScriptGesture;
  *(float32x2_t *)((char *)this + 60) = vcvt_f32_f64(v34);
  v32 = v35;
  if (v35)
  {
    v35 = 0;
    LODWORD(v36) = 0;
    WTF::fastFree(v32, v31);
  }
  return this;
}

void sub_197057780(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16)
{
  if (a15)
    WTF::fastFree(a15, a2);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::WebIOSEventFactory::createWebKeyboardEvent@<X0>(WebKit::WebIOSEventFactory *this@<X0>, WebEvent *a2@<X1>, uint64_t a3@<X8>)
{
  char v3;
  char v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  WTF::StringImpl *v16;
  WebEvent *v17;
  char v18;
  WebEvent *v19;
  WebEvent *v20;
  WebEvent *v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *result;
  __int128 v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;

  v3 = (char)a2;
  if (-[WebKit::WebIOSEventFactory type](this, "type") == 5)
    v6 = 8;
  else
    v6 = 7;
  v49 = 0;
  v50 = 0;
  if ((-[WebKit::WebIOSEventFactory keyboardFlags](this, "keyboardFlags") & 0x20) == 0)
  {
    MEMORY[0x19AEABCC8](&v44, -[WebKit::WebIOSEventFactory characters](this, "characters"));
    v8 = (WTF::StringImpl *)v44;
    *(_QWORD *)&v44 = 0;
    v9 = v50;
    v50 = v8;
    if (!v9)
      goto LABEL_10;
    v10 = *(_DWORD *)v9 - 2;
    if (*(_DWORD *)v9 != 2)
      goto LABEL_9;
    WTF::StringImpl::destroy(v9, v7);
    v9 = (WTF::StringImpl *)v44;
    *(_QWORD *)&v44 = 0;
    if (!v9)
      goto LABEL_10;
    v10 = *(_DWORD *)v9 - 2;
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v11);
    else
LABEL_9:
      *(_DWORD *)v9 = v10;
LABEL_10:
    MEMORY[0x19AEABCC8](&v44, -[WebKit::WebIOSEventFactory charactersIgnoringModifiers](this, "charactersIgnoringModifiers"));
    v13 = (WTF::StringImpl *)v44;
    *(_QWORD *)&v44 = 0;
    v14 = v49;
    v49 = v13;
    if (v14)
    {
      v15 = *(_DWORD *)v14 - 2;
      if (*(_DWORD *)v14 != 2)
      {
LABEL_14:
        *(_DWORD *)v14 = v15;
        goto LABEL_15;
      }
      WTF::StringImpl::destroy(v14, v12);
      v14 = (WTF::StringImpl *)v44;
      *(_QWORD *)&v44 = 0;
      if (v14)
      {
        v15 = *(_DWORD *)v14 - 2;
        if (*(_DWORD *)v14 == 2)
        {
          WTF::StringImpl::destroy(v14, v16);
          goto LABEL_15;
        }
        goto LABEL_14;
      }
    }
LABEL_15:
    v18 = -[WebKit::WebIOSEventFactory isKeyRepeating](this, "isKeyRepeating");
    goto LABEL_17;
  }
  WTF::String::operator=(&v50, MEMORY[0x1E0CBF738]);
  WTF::String::operator=(&v49, MEMORY[0x1E0CBF738]);
  v18 = 0;
LABEL_17:
  WebCore::keyForKeyEvent(this, v17);
  WebCore::codeForKeyEvent(this, v19);
  WebCore::keyIdentifierForKeyEvent(this, v20);
  v22 = WebCore::windowsKeyCodeForKeyEvent(this, v21);
  v23 = -[WebKit::WebIOSEventFactory keyCode](this, "keyCode");
  v24 = -[WebKit::WebIOSEventFactory modifierFlags](this, "modifierFlags");
  v25 = v24;
  v26 = (v24 & 0x220000) != 0;
  if ((v24 & 0x900000) != 0)
    v26 |= 2u;
  if ((v24 & 0x480000) != 0)
    v26 |= 4u;
  if ((v24 & 0x1010000) != 0)
    v27 = v26 | 8;
  else
    v27 = v26;
  -[WebKit::WebIOSEventFactory timestamp](this, "timestamp");
  v29 = v28;
  if (v22 == 13)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v31 = v50;
    v50 = (WTF::StringImpl *)v44;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v30);
      else
        *(_DWORD *)v31 -= 2;
    }
    WTF::String::operator=(&v49, (WTF::StringImpl *)&v50);
  }
  if (MEMORY[0x19AEABBCC](v50, "\x7F", 1))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v33 = v50;
    v50 = (WTF::StringImpl *)v44;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v32);
      else
        *(_DWORD *)v33 -= 2;
    }
  }
  if (MEMORY[0x19AEABBCC](v49, "\x7F", 1))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v35 = v49;
    v49 = (WTF::StringImpl *)v44;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v34);
      else
        *(_DWORD *)v35 -= 2;
    }
  }
  if (v22 == 9)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v37 = v50;
    v50 = (WTF::StringImpl *)v44;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, v36);
      else
        *(_DWORD *)v37 -= 2;
    }
    WTF::String::operator=(&v49, (WTF::StringImpl *)&v50);
  }
  LOBYTE(v44) = v6;
  BYTE1(v44) = v27 | (v25 >> 14) & 0x10;
  *((_QWORD *)&v44 + 1) = v29;
  WTF::UUID::UUID((WTF::UUID *)&v45);
  WebKit::WebKeyboardEvent::WebKeyboardEvent(a3, &v44, (_DWORD **)&v50, (_DWORD **)&v49, (_DWORD **)&v48, (_DWORD **)&v47, (_DWORD **)&v46, v22, v23, 0, v3, v18, 0, 0);
  v39 = v46;
  v46 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v38);
    else
      *(_DWORD *)v39 -= 2;
  }
  v40 = v47;
  v47 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v38);
    else
      *(_DWORD *)v40 -= 2;
  }
  v41 = v48;
  v48 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, v38);
    else
      *(_DWORD *)v41 -= 2;
  }
  v42 = v49;
  v49 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v38);
    else
      *(_DWORD *)v42 -= 2;
  }
  result = v50;
  v50 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v38);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_197057BF0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, WTF::StringImpl *a17, WTF::StringImpl *a18, WTF::StringImpl *a19, WTF::StringImpl *a20)
{
  if (a16)
  {
    if (*(_DWORD *)a16 == 2)
      WTF::StringImpl::destroy(a16, a2);
    else
      *(_DWORD *)a16 -= 2;
  }
  if (a17)
  {
    if (*(_DWORD *)a17 == 2)
      WTF::StringImpl::destroy(a17, a2);
    else
      *(_DWORD *)a17 -= 2;
  }
  if (a18)
  {
    if (*(_DWORD *)a18 == 2)
      WTF::StringImpl::destroy(a18, a2);
    else
      *(_DWORD *)a18 -= 2;
  }
  if (a19)
  {
    if (*(_DWORD *)a19 == 2)
      WTF::StringImpl::destroy(a19, a2);
    else
      *(_DWORD *)a19 -= 2;
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2)
      WTF::StringImpl::destroy(a20, a2);
    else
      *(_DWORD *)a20 -= 2;
  }
  _Unwind_Resume(exception_object);
}

double WebKit::WebIOSEventFactory::createWebWheelEvent@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  CGFloat v8;
  CGFloat v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  unint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  CGFloat v20;
  uint64_t v21;
  uint64_t v22;
  CGFloat y;
  CGFloat x;
  unint64_t v25;
  int v26;
  float v27;
  float v28;
  uint64_t v29;
  double result;
  float v31[2];
  CGPoint v32;

  objc_msgSend(a1, "locationInView:", a2);
  v32.x = v8;
  v32.y = v9;
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v31, &v32);
  v10 = roundf(v31[0]);
  v11 = 0x80000000;
  if (v10 > -2147500000.0)
    v11 = (int)v10;
  if (v10 < 2147500000.0)
    v12 = v11;
  else
    v12 = 0x7FFFFFFFLL;
  v13 = roundf(v31[1]);
  v14 = 0x8000000000000000;
  if (v13 > -2147500000.0)
    v14 = (unint64_t)(int)v13 << 32;
  if (v13 < 2147500000.0)
    v15 = v14;
  else
    v15 = 0x7FFFFFFF00000000;
  objc_msgSend(a1, "translationInView:", a2);
  v17 = v16;
  v19 = v18;
  objc_msgSend(a1, "timestamp");
  v32.x = v20;
  WTF::MonotonicTime::approximateWallTime((WTF::MonotonicTime *)&v32);
  v22 = v21;
  WTF::UUID::UUID((WTF::UUID *)&v32);
  x = v32.x;
  y = v32.y;
  v25 = objc_msgSend(a1, "phase");
  if (v25 > 3)
    v26 = 0;
  else
    v26 = dword_1978CF4C0[v25];
  v27 = v19;
  *(_WORD *)a4 = 6;
  v28 = v17;
  *(_QWORD *)(a4 + 8) = v22;
  v29 = v15 | v12;
  if ((a3 & 0xFF00000000) != 0)
    v26 = a3;
  *(CGFloat *)(a4 + 16) = x;
  *(CGFloat *)(a4 + 24) = y;
  *(_QWORD *)(a4 + 32) = v29;
  *(_QWORD *)(a4 + 40) = v29;
  *(float *)(a4 + 48) = v28;
  *(float *)(a4 + 52) = v27;
  *(float *)(a4 + 56) = v28 * 0.025;
  *(float *)(a4 + 60) = v27 * 0.025;
  *(_DWORD *)(a4 + 64) = 1;
  *(_DWORD *)(a4 + 68) = v26;
  *(_DWORD *)(a4 + 72) = 0;
  *(_WORD *)(a4 + 76) = 0;
  *(_BYTE *)(a4 + 78) = 1;
  *(_QWORD *)(a4 + 80) = v22;
  *(_QWORD *)(a4 + 88) = 0;
  *(_QWORD *)&result = 0x100000000;
  *(_QWORD *)(a4 + 96) = 0x100000000;
  *(float *)(a4 + 104) = v28;
  *(float *)(a4 + 108) = v27;
  return result;
}

uint64_t WebKit::defaultAutomaticLiveResizeEnabled(WebKit *this)
{
  uint64_t result;

    return WebKit::defaultAutomaticLiveResizeEnabled(void)::enabled != 0;
  result = PAL::deviceHasIPadCapability(this);
  if ((_DWORD)result)
    result = _os_feature_enabled_impl();
  WebKit::defaultAutomaticLiveResizeEnabled(void)::enabled = result;
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::isAsyncTextInputFeatureFlagEnabled(void)::$_0 &&>>(PAL *a1)
{
  PAL *IsSmallScreen;
  uint64_t result;

  IsSmallScreen = (PAL *)PAL::deviceClassIsSmallScreen(a1);
  if (!(_DWORD)IsSmallScreen)
  {
    result = PAL::deviceHasIPadCapability(IsSmallScreen);
    if (!(_DWORD)result)
      return result;
    goto LABEL_5;
  }
  if ((_os_feature_enabled_impl() & 1) == 0)
  {
LABEL_5:
    result = _os_feature_enabled_impl();
    goto LABEL_6;
  }
  result = 1;
LABEL_6:
  WebKit::isAsyncTextInputFeatureFlagEnabled(void)::enabled = result;
  return result;
}

uint64_t WebKit::RemoteShaderModule::RemoteShaderModule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E34B9470;
  ++*(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = a2;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 16), a3);
  v9 = *(unsigned int **)(a3 + 16);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *(_QWORD *)(a1 + 24) = v9;
  v11 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = a5;
  IPC::StreamServerConnection::startReceivingMessages(v11, a1, 0x7Au, a5);
  return a1;
}

void WebKit::RemoteShaderModule::~RemoteShaderModule(unsigned int **this)
{
  WTF *v1;
  void *v2;

  WebKit::RemoteBindGroup::~RemoteBindGroup(this);
  WTF::fastFree(v1, v2);
}

uint64_t *WebKit::WebGPU::ObjectHeap::removeObject(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v7 = a2;
  v3 = (uint64_t *)(a1 + 24);
  result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), &v7);
  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
  {
    v6 = (uint64_t *)(v5 + 24 * *(unsigned int *)(v5 - 4));
    if (v6 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v6 = 0;
  }
  if (v6 != result)
    return _ZN3WTF9HashTableINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS_12KeyValuePairIS6_NSt3__17variantIJNS8_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISD_NS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEENSC_INS2_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSC_INS2_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSC_INS2_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSC_INS2_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSC_INS2_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSC_INS2_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSC_INS2_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSC_INS2_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSC_INS2_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSC_INS2_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSC_INS2_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSC_INS2_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSC_INS2_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSC_INS2_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSC_INS2_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSC_INS2_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSC_INS2_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSC_INS2_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSC_INS2_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSC_INS2_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSC_INS2_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSC_INS2_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEEENS_24KeyValuePairKeyExtractorIS3O_EENS_11DefaultHashIS6_EENS_7HashMapIS6_S3N_S3S_NS_10HashTraitsIS6_EENS3U_IS3N_EENS_15HashTableTraitsEE18KeyValuePairTraitsES3V_E6removeEPS3O_(v3, (uint64_t)result);
  return result;
}

uint64_t WebKit::RemoteShaderModule::compilationInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = &off_1E34B9778;
  v4[1] = v3;
  v6 = v4;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v2 + 16))(v2, &v6);
  result = (uint64_t)v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::RemoteTexture::RemoteTexture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  WTF::ThreadSafeWeakPtrControlBlock *v14;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E34B9498;
  ++*(_DWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 16) = a3;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a4 + 16), a4);
  v11 = *(unsigned int **)(a4 + 16);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  *(_QWORD *)(a1 + 24) = v11;
  v13 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 32) = v13;
  *(_QWORD *)(a1 + 40) = a6;
  v14 = *(WTF::ThreadSafeWeakPtrControlBlock **)(a2 + 16);
  if (v14)
  {
    v14 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(*(WTF::ThreadSafeWeakPtrControlBlock **)(a2 + 16));
    v13 = *(_QWORD *)(a1 + 32);
    a6 = *(_QWORD *)(a1 + 40);
  }
  *(_QWORD *)(a1 + 48) = v14;
  *(_QWORD *)(a1 + 56) = a2;
  IPC::StreamServerConnection::startReceivingMessages(v13, a1, 0x7Eu, a6);
  return a1;
}

void WebKit::RemoteTexture::~RemoteTexture(WebKit::RemoteTexture *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebKit::RemoteCommandEncoder::~RemoteCommandEncoder(this, a2);
  WTF::fastFree(v2, v3);
}

WTF::StringImpl *WebKit::RemoteTexture::createView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  int v6;
  char v7;
  int v8;
  int v9;
  int v10;
  int v11;
  WTF::StringImpl *v12;
  _DWORD *v13;
  WebKit::GPUConnectionToWebProcess *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  WebKit::GPUConnectionToWebProcess *v22;
  uint64_t v23;
  uint64_t *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  WTF::StringImpl *result;
  unsigned __int8 *v29;
  WebKit::GPUConnectionToWebProcess *v30;
  _DWORD *v31;
  WTF::StringImpl *v32;
  int v33;
  char v34;
  int v35;
  int v36;
  char v37;
  int v38;
  int v39;
  char v40;
  char v41;
  unsigned int *v42;
  uint64_t v43;
  int v44;
  WebKit::GPUConnectionToWebProcess *v45[3];
  uint64_t v46;
  char v47;

  LOBYTE(v32) = 0;
  v41 = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    v5 = *(WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v5 += 2;
    v6 = *(_DWORD *)(a2 + 8);
    v7 = *(_BYTE *)(a2 + 12);
    v8 = *(_DWORD *)(a2 + 16);
    v9 = *(_DWORD *)(a2 + 20);
    v37 = *(_BYTE *)(a2 + 24);
    v40 = *(_BYTE *)(a2 + 36);
    v10 = *(_DWORD *)(a2 + 28);
    v11 = *(_DWORD *)(a2 + 32);
    v32 = v5;
    v33 = v6;
    v34 = v7;
    v35 = v8;
    v36 = v9;
    v38 = v10;
    v39 = v11;
    v41 = 1;
  }
  (*(void (**)(_DWORD **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 16) + 16))(&v31, *(_QWORD *)(a1 + 16), &v32);
  v13 = v31;
  if (v31)
  {
    v31 = 0;
    v14 = *(WebKit::GPUConnectionToWebProcess **)(a1 + 32);
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    v16 = (unsigned int *)((char *)v14 + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 + 1, v16));
    v45[0] = v14;
    v18 = WTF::fastMalloc((WTF *)0x30);
    *(_DWORD *)(v18 + 8) = 1;
    v19 = (unsigned int *)(v18 + 8);
    *(_QWORD *)v18 = off_1E34B94C0;
    ++v13[2];
    *(_QWORD *)(v18 + 16) = v13;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v15 + 16), v15);
    v20 = *(unsigned int **)(v15 + 16);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
    v22 = v45[0];
    v45[0] = 0;
    *(_QWORD *)(v18 + 24) = v20;
    *(_QWORD *)(v18 + 32) = v22;
    *(_QWORD *)(v18 + 40) = a3;
    IPC::StreamServerConnection::startReceivingMessages((uint64_t)v22, v18, 0x7Fu, a3);
    WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)v45);
    if (v13[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
    else
      --v13[2];
    v23 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    v46 = a3;
    v24 = (uint64_t *)(v23 + 24);
    do
      v25 = __ldaxr(v19);
    while (__stlxr(v25 + 1, v19));
    v42 = 0;
    v43 = v18;
    v44 = 23;
    _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENSt3__17variantIJNS7_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISC_NS_12RawPtrTraitsISC_EENS_21DefaultRefDerefTraitsISC_EEEEEENSB_INS2_15RemoteBindGroupENSD_ISK_NSE_ISK_EENSG_ISK_EEEEEENSB_INS2_21RemoteBindGroupLayoutENSD_ISP_NSE_ISP_EENSG_ISP_EEEEEENSB_INS2_12RemoteBufferENSD_ISU_NSE_ISU_EENSG_ISU_EEEEEENSB_INS2_19RemoteCommandBufferENSD_ISZ_NSE_ISZ_EENSG_ISZ_EEEEEENSB_INS2_20RemoteCommandEncoderENSD_IS14_NSE_IS14_EENSG_IS14_EEEEEENSB_INS2_27RemoteCompositorIntegrationENSD_IS19_NSE_IS19_EENSG_IS19_EEEEEENSB_INS2_24RemoteComputePassEncoderENSD_IS1E_NSE_IS1E_EENSG_IS1E_EEEEEENSB_INS2_21RemoteComputePipelineENSD_IS1J_NSE_IS1J_EENSG_IS1J_EEEEEENSB_INS2_12RemoteDeviceENSD_IS1O_NSE_IS1O_EENSG_IS1O_EEEEEENSB_INS2_21RemoteExternalTextureENSD_IS1T_NSE_IS1T_EENSG_IS1T_EEEEEENSB_INS2_20RemotePipelineLayoutENSD_IS1Y_NSE_IS1Y_EENSG_IS1Y_EEEEEENSB_INS2_25RemotePresentationContextENSD_IS23_NSE_IS23_EENSG_IS23_EEEEEENSB_INS2_14RemoteQuerySetENSD_IS28_NSE_IS28_EENSG_IS28_EEEEEENSB_INS2_11RemoteQueueENSD_IS2D_NSE_IS2D_EENSG_IS2D_EEEEEENSB_INS2_25RemoteRenderBundleEncoderENSD_IS2I_NSE_IS2I_EENSG_IS2I_EEEEEENSB_INS2_18RemoteRenderBundleENSD_IS2N_NSE_IS2N_EENSG_IS2N_EEEEEENSB_INS2_23RemoteRenderPassEncoderENSD_IS2S_NSE_IS2S_EENSG_IS2S_EEEEEENSB_INS2_20RemoteRenderPipelineENSD_IS2X_NSE_IS2X_EENSG_IS2X_EEEEEENSB_INS2_13RemoteSamplerENSD_IS32_NSE_IS32_EENSG_IS32_EEEEEENSB_INS2_18RemoteShaderModuleENSD_IS37_NSE_IS37_EENSG_IS37_EEEEEENSB_INS2_13RemoteTextureENSD_IS3C_NSE_IS3C_EENSG_IS3C_EEEEEENSB_INS2_17RemoteTextureViewENSD_IS3H_NSE_IS3H_EENSG_IS3H_EEEEEEEEENS_11DefaultHashIS6_EENS_10HashTraitsIS6_EENS3P_IS3M_EENS_15HashTableTraitsEE3addIS3M_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS6_NS_12KeyValuePairIS6_S3M_EENS_24KeyValuePairKeyExtractorIS3Z_EES3O_NS3T_18KeyValuePairTraitsES3Q_EES6_S3Z_S41_S3O_S42_S3Q_EEEERKS6_OT_(v24, &v46, (uint64_t)&v43, (uint64_t)v45);
    if (v44 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v44])(&v47, &v43);
    v44 = -1;
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteTextureView,WTF::RefPtr<WebKit::RemoteTextureView,WTF::RawPtrTraits<WebKit::RemoteTextureView>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextureView>>>::~ScopedActiveMessageReceiveQueue(&v42);
    do
    {
      v26 = __ldaxr(v19);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v19));
    if (!v27)
    {
      atomic_store(1u, (unsigned int *)(v18 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    }
  }
  else
  {
    v29 = *(unsigned __int8 **)(a1 + 48);
    if (v29)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v29, *(_QWORD *)(a1 + 56), v45);
      if (v45[0])
      {
        WebKit::GPUConnectionToWebProcess::terminateWebProcess(v45[0]);
        v30 = v45[0];
        v45[0] = 0;
        if (v30)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v30 + 2));
      }
    }
  }
  result = (WTF::StringImpl *)v31;
  v31 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    else
      --*((_DWORD *)result + 2);
  }
  if (v41)
  {
    result = v32;
    v32 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebKit::RemoteTextureView::~RemoteTextureView(unsigned int **this)
{
  WTF *v1;
  void *v2;

  WebKit::RemoteBindGroup::~RemoteBindGroup(this);
  WTF::fastFree(v1, v2);
}

void WebKit::WebGPU::ObjectHeap::~ObjectHeap(WebKit::WebGPU::ObjectHeap *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 3);
  if (v3)
    _ZN3WTF9HashTableINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS_12KeyValuePairIS6_NSt3__17variantIJNS8_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISD_NS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEENSC_INS2_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSC_INS2_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSC_INS2_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSC_INS2_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSC_INS2_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSC_INS2_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSC_INS2_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSC_INS2_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSC_INS2_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSC_INS2_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSC_INS2_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSC_INS2_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSC_INS2_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSC_INS2_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSC_INS2_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSC_INS2_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSC_INS2_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSC_INS2_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSC_INS2_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSC_INS2_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSC_INS2_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSC_INS2_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEEENS_24KeyValuePairKeyExtractorIS3O_EENS_11DefaultHashIS6_EENS_7HashMapIS6_S3N_S3S_NS_10HashTraitsIS6_EENS3U_IS3N_EENS_15HashTableTraitsEE18KeyValuePairTraitsES3V_E15deallocateTableEPS3O_(v3, a2);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::WebGPU::ObjectHeap::~ObjectHeap(this, a2);
  WTF::fastFree(v2, v3);
}

unsigned int **WebKit::WebGPU::ObjectHeap::addObject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v7;
  uint64_t v8;
  int v9;
  _BYTE v10[24];
  uint64_t v11;
  char v12;

  v11 = a2;
  v3 = (uint64_t *)(a1 + 24);
  v4 = (unsigned int *)(a3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v7 = 0;
  v8 = a3;
  v9 = 1;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENSt3__17variantIJNS7_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISC_NS_12RawPtrTraitsISC_EENS_21DefaultRefDerefTraitsISC_EEEEEENSB_INS2_15RemoteBindGroupENSD_ISK_NSE_ISK_EENSG_ISK_EEEEEENSB_INS2_21RemoteBindGroupLayoutENSD_ISP_NSE_ISP_EENSG_ISP_EEEEEENSB_INS2_12RemoteBufferENSD_ISU_NSE_ISU_EENSG_ISU_EEEEEENSB_INS2_19RemoteCommandBufferENSD_ISZ_NSE_ISZ_EENSG_ISZ_EEEEEENSB_INS2_20RemoteCommandEncoderENSD_IS14_NSE_IS14_EENSG_IS14_EEEEEENSB_INS2_27RemoteCompositorIntegrationENSD_IS19_NSE_IS19_EENSG_IS19_EEEEEENSB_INS2_24RemoteComputePassEncoderENSD_IS1E_NSE_IS1E_EENSG_IS1E_EEEEEENSB_INS2_21RemoteComputePipelineENSD_IS1J_NSE_IS1J_EENSG_IS1J_EEEEEENSB_INS2_12RemoteDeviceENSD_IS1O_NSE_IS1O_EENSG_IS1O_EEEEEENSB_INS2_21RemoteExternalTextureENSD_IS1T_NSE_IS1T_EENSG_IS1T_EEEEEENSB_INS2_20RemotePipelineLayoutENSD_IS1Y_NSE_IS1Y_EENSG_IS1Y_EEEEEENSB_INS2_25RemotePresentationContextENSD_IS23_NSE_IS23_EENSG_IS23_EEEEEENSB_INS2_14RemoteQuerySetENSD_IS28_NSE_IS28_EENSG_IS28_EEEEEENSB_INS2_11RemoteQueueENSD_IS2D_NSE_IS2D_EENSG_IS2D_EEEEEENSB_INS2_25RemoteRenderBundleEncoderENSD_IS2I_NSE_IS2I_EENSG_IS2I_EEEEEENSB_INS2_18RemoteRenderBundleENSD_IS2N_NSE_IS2N_EENSG_IS2N_EEEEEENSB_INS2_23RemoteRenderPassEncoderENSD_IS2S_NSE_IS2S_EENSG_IS2S_EEEEEENSB_INS2_20RemoteRenderPipelineENSD_IS2X_NSE_IS2X_EENSG_IS2X_EEEEEENSB_INS2_13RemoteSamplerENSD_IS32_NSE_IS32_EENSG_IS32_EEEEEENSB_INS2_18RemoteShaderModuleENSD_IS37_NSE_IS37_EENSG_IS37_EEEEEENSB_INS2_13RemoteTextureENSD_IS3C_NSE_IS3C_EENSG_IS3C_EEEEEENSB_INS2_17RemoteTextureViewENSD_IS3H_NSE_IS3H_EENSG_IS3H_EEEEEEEEENS_11DefaultHashIS6_EENS_10HashTraitsIS6_EENS3P_IS3M_EENS_15HashTableTraitsEE3addIS3M_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS6_NS_12KeyValuePairIS6_S3M_EENS_24KeyValuePairKeyExtractorIS3Z_EES3O_NS3T_18KeyValuePairTraitsES3Q_EES6_S3Z_S41_S3O_S42_S3Q_EEEERKS6_OT_(v3, &v11, (uint64_t)&v8, (uint64_t)v10);
  if (v9 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v9])(&v12, &v8);
  v9 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteAdapter,WTF::RefPtr<WebKit::RemoteAdapter,WTF::RawPtrTraits<WebKit::RemoteAdapter>,WTF::DefaultRefDerefTraits<WebKit::RemoteAdapter>>>::~ScopedActiveMessageReceiveQueue(&v7);
}

{
  uint64_t *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v7;
  uint64_t v8;
  int v9;
  _BYTE v10[24];
  uint64_t v11;
  char v12;

  v11 = a2;
  v3 = (uint64_t *)(a1 + 24);
  v4 = (unsigned int *)(a3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v7 = 0;
  v8 = a3;
  v9 = 2;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENSt3__17variantIJNS7_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISC_NS_12RawPtrTraitsISC_EENS_21DefaultRefDerefTraitsISC_EEEEEENSB_INS2_15RemoteBindGroupENSD_ISK_NSE_ISK_EENSG_ISK_EEEEEENSB_INS2_21RemoteBindGroupLayoutENSD_ISP_NSE_ISP_EENSG_ISP_EEEEEENSB_INS2_12RemoteBufferENSD_ISU_NSE_ISU_EENSG_ISU_EEEEEENSB_INS2_19RemoteCommandBufferENSD_ISZ_NSE_ISZ_EENSG_ISZ_EEEEEENSB_INS2_20RemoteCommandEncoderENSD_IS14_NSE_IS14_EENSG_IS14_EEEEEENSB_INS2_27RemoteCompositorIntegrationENSD_IS19_NSE_IS19_EENSG_IS19_EEEEEENSB_INS2_24RemoteComputePassEncoderENSD_IS1E_NSE_IS1E_EENSG_IS1E_EEEEEENSB_INS2_21RemoteComputePipelineENSD_IS1J_NSE_IS1J_EENSG_IS1J_EEEEEENSB_INS2_12RemoteDeviceENSD_IS1O_NSE_IS1O_EENSG_IS1O_EEEEEENSB_INS2_21RemoteExternalTextureENSD_IS1T_NSE_IS1T_EENSG_IS1T_EEEEEENSB_INS2_20RemotePipelineLayoutENSD_IS1Y_NSE_IS1Y_EENSG_IS1Y_EEEEEENSB_INS2_25RemotePresentationContextENSD_IS23_NSE_IS23_EENSG_IS23_EEEEEENSB_INS2_14RemoteQuerySetENSD_IS28_NSE_IS28_EENSG_IS28_EEEEEENSB_INS2_11RemoteQueueENSD_IS2D_NSE_IS2D_EENSG_IS2D_EEEEEENSB_INS2_25RemoteRenderBundleEncoderENSD_IS2I_NSE_IS2I_EENSG_IS2I_EEEEEENSB_INS2_18RemoteRenderBundleENSD_IS2N_NSE_IS2N_EENSG_IS2N_EEEEEENSB_INS2_23RemoteRenderPassEncoderENSD_IS2S_NSE_IS2S_EENSG_IS2S_EEEEEENSB_INS2_20RemoteRenderPipelineENSD_IS2X_NSE_IS2X_EENSG_IS2X_EEEEEENSB_INS2_13RemoteSamplerENSD_IS32_NSE_IS32_EENSG_IS32_EEEEEENSB_INS2_18RemoteShaderModuleENSD_IS37_NSE_IS37_EENSG_IS37_EEEEEENSB_INS2_13RemoteTextureENSD_IS3C_NSE_IS3C_EENSG_IS3C_EEEEEENSB_INS2_17RemoteTextureViewENSD_IS3H_NSE_IS3H_EENSG_IS3H_EEEEEEEEENS_11DefaultHashIS6_EENS_10HashTraitsIS6_EENS3P_IS3M_EENS_15HashTableTraitsEE3addIS3M_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS6_NS_12KeyValuePairIS6_S3M_EENS_24KeyValuePairKeyExtractorIS3Z_EES3O_NS3T_18KeyValuePairTraitsES3Q_EES6_S3Z_S41_S3O_S42_S3Q_EEEERKS6_OT_(v3, &v11, (uint64_t)&v8, (uint64_t)v10);
  if (v9 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v9])(&v12, &v8);
  v9 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteBindGroup,WTF::RefPtr<WebKit::RemoteBindGroup,WTF::RawPtrTraits<WebKit::RemoteBindGroup>,WTF::DefaultRefDerefTraits<WebKit::RemoteBindGroup>>>::~ScopedActiveMessageReceiveQueue(&v7);
}

{
  uint64_t *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v7;
  uint64_t v8;
  int v9;
  _BYTE v10[24];
  uint64_t v11;
  char v12;

  v11 = a2;
  v3 = (uint64_t *)(a1 + 24);
  v4 = (unsigned int *)(a3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v7 = 0;
  v8 = a3;
  v9 = 3;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENSt3__17variantIJNS7_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISC_NS_12RawPtrTraitsISC_EENS_21DefaultRefDerefTraitsISC_EEEEEENSB_INS2_15RemoteBindGroupENSD_ISK_NSE_ISK_EENSG_ISK_EEEEEENSB_INS2_21RemoteBindGroupLayoutENSD_ISP_NSE_ISP_EENSG_ISP_EEEEEENSB_INS2_12RemoteBufferENSD_ISU_NSE_ISU_EENSG_ISU_EEEEEENSB_INS2_19RemoteCommandBufferENSD_ISZ_NSE_ISZ_EENSG_ISZ_EEEEEENSB_INS2_20RemoteCommandEncoderENSD_IS14_NSE_IS14_EENSG_IS14_EEEEEENSB_INS2_27RemoteCompositorIntegrationENSD_IS19_NSE_IS19_EENSG_IS19_EEEEEENSB_INS2_24RemoteComputePassEncoderENSD_IS1E_NSE_IS1E_EENSG_IS1E_EEEEEENSB_INS2_21RemoteComputePipelineENSD_IS1J_NSE_IS1J_EENSG_IS1J_EEEEEENSB_INS2_12RemoteDeviceENSD_IS1O_NSE_IS1O_EENSG_IS1O_EEEEEENSB_INS2_21RemoteExternalTextureENSD_IS1T_NSE_IS1T_EENSG_IS1T_EEEEEENSB_INS2_20RemotePipelineLayoutENSD_IS1Y_NSE_IS1Y_EENSG_IS1Y_EEEEEENSB_INS2_25RemotePresentationContextENSD_IS23_NSE_IS23_EENSG_IS23_EEEEEENSB_INS2_14RemoteQuerySetENSD_IS28_NSE_IS28_EENSG_IS28_EEEEEENSB_INS2_11RemoteQueueENSD_IS2D_NSE_IS2D_EENSG_IS2D_EEEEEENSB_INS2_25RemoteRenderBundleEncoderENSD_IS2I_NSE_IS2I_EENSG_IS2I_EEEEEENSB_INS2_18RemoteRenderBundleENSD_IS2N_NSE_IS2N_EENSG_IS2N_EEEEEENSB_INS2_23RemoteRenderPassEncoderENSD_IS2S_NSE_IS2S_EENSG_IS2S_EEEEEENSB_INS2_20RemoteRenderPipelineENSD_IS2X_NSE_IS2X_EENSG_IS2X_EEEEEENSB_INS2_13RemoteSamplerENSD_IS32_NSE_IS32_EENSG_IS32_EEEEEENSB_INS2_18RemoteShaderModuleENSD_IS37_NSE_IS37_EENSG_IS37_EEEEEENSB_INS2_13RemoteTextureENSD_IS3C_NSE_IS3C_EENSG_IS3C_EEEEEENSB_INS2_17RemoteTextureViewENSD_IS3H_NSE_IS3H_EENSG_IS3H_EEEEEEEEENS_11DefaultHashIS6_EENS_10HashTraitsIS6_EENS3P_IS3M_EENS_15HashTableTraitsEE3addIS3M_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS6_NS_12KeyValuePairIS6_S3M_EENS_24KeyValuePairKeyExtractorIS3Z_EES3O_NS3T_18KeyValuePairTraitsES3Q_EES6_S3Z_S41_S3O_S42_S3Q_EEEERKS6_OT_(v3, &v11, (uint64_t)&v8, (uint64_t)v10);
  if (v9 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v9])(&v12, &v8);
  v9 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteBindGroupLayout,WTF::RefPtr<WebKit::RemoteBindGroupLayout,WTF::RawPtrTraits<WebKit::RemoteBindGroupLayout>,WTF::DefaultRefDerefTraits<WebKit::RemoteBindGroupLayout>>>::~ScopedActiveMessageReceiveQueue(&v7);
}

{
  uint64_t *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v7;
  uint64_t v8;
  int v9;
  _BYTE v10[24];
  uint64_t v11;
  char v12;

  v11 = a2;
  v3 = (uint64_t *)(a1 + 24);
  v4 = (unsigned int *)(a3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v7 = 0;
  v8 = a3;
  v9 = 4;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENSt3__17variantIJNS7_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISC_NS_12RawPtrTraitsISC_EENS_21DefaultRefDerefTraitsISC_EEEEEENSB_INS2_15RemoteBindGroupENSD_ISK_NSE_ISK_EENSG_ISK_EEEEEENSB_INS2_21RemoteBindGroupLayoutENSD_ISP_NSE_ISP_EENSG_ISP_EEEEEENSB_INS2_12RemoteBufferENSD_ISU_NSE_ISU_EENSG_ISU_EEEEEENSB_INS2_19RemoteCommandBufferENSD_ISZ_NSE_ISZ_EENSG_ISZ_EEEEEENSB_INS2_20RemoteCommandEncoderENSD_IS14_NSE_IS14_EENSG_IS14_EEEEEENSB_INS2_27RemoteCompositorIntegrationENSD_IS19_NSE_IS19_EENSG_IS19_EEEEEENSB_INS2_24RemoteComputePassEncoderENSD_IS1E_NSE_IS1E_EENSG_IS1E_EEEEEENSB_INS2_21RemoteComputePipelineENSD_IS1J_NSE_IS1J_EENSG_IS1J_EEEEEENSB_INS2_12RemoteDeviceENSD_IS1O_NSE_IS1O_EENSG_IS1O_EEEEEENSB_INS2_21RemoteExternalTextureENSD_IS1T_NSE_IS1T_EENSG_IS1T_EEEEEENSB_INS2_20RemotePipelineLayoutENSD_IS1Y_NSE_IS1Y_EENSG_IS1Y_EEEEEENSB_INS2_25RemotePresentationContextENSD_IS23_NSE_IS23_EENSG_IS23_EEEEEENSB_INS2_14RemoteQuerySetENSD_IS28_NSE_IS28_EENSG_IS28_EEEEEENSB_INS2_11RemoteQueueENSD_IS2D_NSE_IS2D_EENSG_IS2D_EEEEEENSB_INS2_25RemoteRenderBundleEncoderENSD_IS2I_NSE_IS2I_EENSG_IS2I_EEEEEENSB_INS2_18RemoteRenderBundleENSD_IS2N_NSE_IS2N_EENSG_IS2N_EEEEEENSB_INS2_23RemoteRenderPassEncoderENSD_IS2S_NSE_IS2S_EENSG_IS2S_EEEEEENSB_INS2_20RemoteRenderPipelineENSD_IS2X_NSE_IS2X_EENSG_IS2X_EEEEEENSB_INS2_13RemoteSamplerENSD_IS32_NSE_IS32_EENSG_IS32_EEEEEENSB_INS2_18RemoteShaderModuleENSD_IS37_NSE_IS37_EENSG_IS37_EEEEEENSB_INS2_13RemoteTextureENSD_IS3C_NSE_IS3C_EENSG_IS3C_EEEEEENSB_INS2_17RemoteTextureViewENSD_IS3H_NSE_IS3H_EENSG_IS3H_EEEEEEEEENS_11DefaultHashIS6_EENS_10HashTraitsIS6_EENS3P_IS3M_EENS_15HashTableTraitsEE3addIS3M_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS6_NS_12KeyValuePairIS6_S3M_EENS_24KeyValuePairKeyExtractorIS3Z_EES3O_NS3T_18KeyValuePairTraitsES3Q_EES6_S3Z_S41_S3O_S42_S3Q_EEEERKS6_OT_(v3, &v11, (uint64_t)&v8, (uint64_t)v10);
  if (v9 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v9])(&v12, &v8);
  v9 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteBuffer,WTF::RefPtr<WebKit::RemoteBuffer,WTF::RawPtrTraits<WebKit::RemoteBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteBuffer>>>::~ScopedActiveMessageReceiveQueue(&v7);
}

{
  uint64_t *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v7;
  uint64_t v8;
  int v9;
  _BYTE v10[24];
  uint64_t v11;
  char v12;

  v11 = a2;
  v3 = (uint64_t *)(a1 + 24);
  v4 = (unsigned int *)(a3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v7 = 0;
  v8 = a3;
  v9 = 5;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENSt3__17variantIJNS7_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISC_NS_12RawPtrTraitsISC_EENS_21DefaultRefDerefTraitsISC_EEEEEENSB_INS2_15RemoteBindGroupENSD_ISK_NSE_ISK_EENSG_ISK_EEEEEENSB_INS2_21RemoteBindGroupLayoutENSD_ISP_NSE_ISP_EENSG_ISP_EEEEEENSB_INS2_12RemoteBufferENSD_ISU_NSE_ISU_EENSG_ISU_EEEEEENSB_INS2_19RemoteCommandBufferENSD_ISZ_NSE_ISZ_EENSG_ISZ_EEEEEENSB_INS2_20RemoteCommandEncoderENSD_IS14_NSE_IS14_EENSG_IS14_EEEEEENSB_INS2_27RemoteCompositorIntegrationENSD_IS19_NSE_IS19_EENSG_IS19_EEEEEENSB_INS2_24RemoteComputePassEncoderENSD_IS1E_NSE_IS1E_EENSG_IS1E_EEEEEENSB_INS2_21RemoteComputePipelineENSD_IS1J_NSE_IS1J_EENSG_IS1J_EEEEEENSB_INS2_12RemoteDeviceENSD_IS1O_NSE_IS1O_EENSG_IS1O_EEEEEENSB_INS2_21RemoteExternalTextureENSD_IS1T_NSE_IS1T_EENSG_IS1T_EEEEEENSB_INS2_20RemotePipelineLayoutENSD_IS1Y_NSE_IS1Y_EENSG_IS1Y_EEEEEENSB_INS2_25RemotePresentationContextENSD_IS23_NSE_IS23_EENSG_IS23_EEEEEENSB_INS2_14RemoteQuerySetENSD_IS28_NSE_IS28_EENSG_IS28_EEEEEENSB_INS2_11RemoteQueueENSD_IS2D_NSE_IS2D_EENSG_IS2D_EEEEEENSB_INS2_25RemoteRenderBundleEncoderENSD_IS2I_NSE_IS2I_EENSG_IS2I_EEEEEENSB_INS2_18RemoteRenderBundleENSD_IS2N_NSE_IS2N_EENSG_IS2N_EEEEEENSB_INS2_23RemoteRenderPassEncoderENSD_IS2S_NSE_IS2S_EENSG_IS2S_EEEEEENSB_INS2_20RemoteRenderPipelineENSD_IS2X_NSE_IS2X_EENSG_IS2X_EEEEEENSB_INS2_13RemoteSamplerENSD_IS32_NSE_IS32_EENSG_IS32_EEEEEENSB_INS2_18RemoteShaderModuleENSD_IS37_NSE_IS37_EENSG_IS37_EEEEEENSB_INS2_13RemoteTextureENSD_IS3C_NSE_IS3C_EENSG_IS3C_EEEEEENSB_INS2_17RemoteTextureViewENSD_IS3H_NSE_IS3H_EENSG_IS3H_EEEEEEEEENS_11DefaultHashIS6_EENS_10HashTraitsIS6_EENS3P_IS3M_EENS_15HashTableTraitsEE3addIS3M_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS6_NS_12KeyValuePairIS6_S3M_EENS_24KeyValuePairKeyExtractorIS3Z_EES3O_NS3T_18KeyValuePairTraitsES3Q_EES6_S3Z_S41_S3O_S42_S3Q_EEEERKS6_OT_(v3, &v11, (uint64_t)&v8, (uint64_t)v10);
  if (v9 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v9])(&v12, &v8);
  v9 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteCommandBuffer,WTF::RefPtr<WebKit::RemoteCommandBuffer,WTF::RawPtrTraits<WebKit::RemoteCommandBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteCommandBuffer>>>::~ScopedActiveMessageReceiveQueue(&v7);
}

{
  uint64_t *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v7;
  uint64_t v8;
  int v9;
  _BYTE v10[24];
  uint64_t v11;
  char v12;

  v11 = a2;
  v3 = (uint64_t *)(a1 + 24);
  v4 = (unsigned int *)(a3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v7 = 0;
  v8 = a3;
  v9 = 6;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENSt3__17variantIJNS7_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISC_NS_12RawPtrTraitsISC_EENS_21DefaultRefDerefTraitsISC_EEEEEENSB_INS2_15RemoteBindGroupENSD_ISK_NSE_ISK_EENSG_ISK_EEEEEENSB_INS2_21RemoteBindGroupLayoutENSD_ISP_NSE_ISP_EENSG_ISP_EEEEEENSB_INS2_12RemoteBufferENSD_ISU_NSE_ISU_EENSG_ISU_EEEEEENSB_INS2_19RemoteCommandBufferENSD_ISZ_NSE_ISZ_EENSG_ISZ_EEEEEENSB_INS2_20RemoteCommandEncoderENSD_IS14_NSE_IS14_EENSG_IS14_EEEEEENSB_INS2_27RemoteCompositorIntegrationENSD_IS19_NSE_IS19_EENSG_IS19_EEEEEENSB_INS2_24RemoteComputePassEncoderENSD_IS1E_NSE_IS1E_EENSG_IS1E_EEEEEENSB_INS2_21RemoteComputePipelineENSD_IS1J_NSE_IS1J_EENSG_IS1J_EEEEEENSB_INS2_12RemoteDeviceENSD_IS1O_NSE_IS1O_EENSG_IS1O_EEEEEENSB_INS2_21RemoteExternalTextureENSD_IS1T_NSE_IS1T_EENSG_IS1T_EEEEEENSB_INS2_20RemotePipelineLayoutENSD_IS1Y_NSE_IS1Y_EENSG_IS1Y_EEEEEENSB_INS2_25RemotePresentationContextENSD_IS23_NSE_IS23_EENSG_IS23_EEEEEENSB_INS2_14RemoteQuerySetENSD_IS28_NSE_IS28_EENSG_IS28_EEEEEENSB_INS2_11RemoteQueueENSD_IS2D_NSE_IS2D_EENSG_IS2D_EEEEEENSB_INS2_25RemoteRenderBundleEncoderENSD_IS2I_NSE_IS2I_EENSG_IS2I_EEEEEENSB_INS2_18RemoteRenderBundleENSD_IS2N_NSE_IS2N_EENSG_IS2N_EEEEEENSB_INS2_23RemoteRenderPassEncoderENSD_IS2S_NSE_IS2S_EENSG_IS2S_EEEEEENSB_INS2_20RemoteRenderPipelineENSD_IS2X_NSE_IS2X_EENSG_IS2X_EEEEEENSB_INS2_13RemoteSamplerENSD_IS32_NSE_IS32_EENSG_IS32_EEEEEENSB_INS2_18RemoteShaderModuleENSD_IS37_NSE_IS37_EENSG_IS37_EEEEEENSB_INS2_13RemoteTextureENSD_IS3C_NSE_IS3C_EENSG_IS3C_EEEEEENSB_INS2_17RemoteTextureViewENSD_IS3H_NSE_IS3H_EENSG_IS3H_EEEEEEEEENS_11DefaultHashIS6_EENS_10HashTraitsIS6_EENS3P_IS3M_EENS_15HashTableTraitsEE3addIS3M_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS6_NS_12KeyValuePairIS6_S3M_EENS_24KeyValuePairKeyExtractorIS3Z_EES3O_NS3T_18KeyValuePairTraitsES3Q_EES6_S3Z_S41_S3O_S42_S3Q_EEEERKS6_OT_(v3, &v11, (uint64_t)&v8, (uint64_t)v10);
  if (v9 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v9])(&v12, &v8);
  v9 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteCommandEncoder,WTF::RefPtr<WebKit::RemoteCommandEncoder,WTF::RawPtrTraits<WebKit::RemoteCommandEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteCommandEncoder>>>::~ScopedActiveMessageReceiveQueue(&v7);
}

{
  uint64_t *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v7;
  uint64_t v8;
  int v9;
  _BYTE v10[24];
  uint64_t v11;
  char v12;

  v11 = a2;
  v3 = (uint64_t *)(a1 + 24);
  v4 = (unsigned int *)(a3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v7 = 0;
  v8 = a3;
  v9 = 7;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENSt3__17variantIJNS7_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISC_NS_12RawPtrTraitsISC_EENS_21DefaultRefDerefTraitsISC_EEEEEENSB_INS2_15RemoteBindGroupENSD_ISK_NSE_ISK_EENSG_ISK_EEEEEENSB_INS2_21RemoteBindGroupLayoutENSD_ISP_NSE_ISP_EENSG_ISP_EEEEEENSB_INS2_12RemoteBufferENSD_ISU_NSE_ISU_EENSG_ISU_EEEEEENSB_INS2_19RemoteCommandBufferENSD_ISZ_NSE_ISZ_EENSG_ISZ_EEEEEENSB_INS2_20RemoteCommandEncoderENSD_IS14_NSE_IS14_EENSG_IS14_EEEEEENSB_INS2_27RemoteCompositorIntegrationENSD_IS19_NSE_IS19_EENSG_IS19_EEEEEENSB_INS2_24RemoteComputePassEncoderENSD_IS1E_NSE_IS1E_EENSG_IS1E_EEEEEENSB_INS2_21RemoteComputePipelineENSD_IS1J_NSE_IS1J_EENSG_IS1J_EEEEEENSB_INS2_12RemoteDeviceENSD_IS1O_NSE_IS1O_EENSG_IS1O_EEEEEENSB_INS2_21RemoteExternalTextureENSD_IS1T_NSE_IS1T_EENSG_IS1T_EEEEEENSB_INS2_20RemotePipelineLayoutENSD_IS1Y_NSE_IS1Y_EENSG_IS1Y_EEEEEENSB_INS2_25RemotePresentationContextENSD_IS23_NSE_IS23_EENSG_IS23_EEEEEENSB_INS2_14RemoteQuerySetENSD_IS28_NSE_IS28_EENSG_IS28_EEEEEENSB_INS2_11RemoteQueueENSD_IS2D_NSE_IS2D_EENSG_IS2D_EEEEEENSB_INS2_25RemoteRenderBundleEncoderENSD_IS2I_NSE_IS2I_EENSG_IS2I_EEEEEENSB_INS2_18RemoteRenderBundleENSD_IS2N_NSE_IS2N_EENSG_IS2N_EEEEEENSB_INS2_23RemoteRenderPassEncoderENSD_IS2S_NSE_IS2S_EENSG_IS2S_EEEEEENSB_INS2_20RemoteRenderPipelineENSD_IS2X_NSE_IS2X_EENSG_IS2X_EEEEEENSB_INS2_13RemoteSamplerENSD_IS32_NSE_IS32_EENSG_IS32_EEEEEENSB_INS2_18RemoteShaderModuleENSD_IS37_NSE_IS37_EENSG_IS37_EEEEEENSB_INS2_13RemoteTextureENSD_IS3C_NSE_IS3C_EENSG_IS3C_EEEEEENSB_INS2_17RemoteTextureViewENSD_IS3H_NSE_IS3H_EENSG_IS3H_EEEEEEEEENS_11DefaultHashIS6_EENS_10HashTraitsIS6_EENS3P_IS3M_EENS_15HashTableTraitsEE3addIS3M_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS6_NS_12KeyValuePairIS6_S3M_EENS_24KeyValuePairKeyExtractorIS3Z_EES3O_NS3T_18KeyValuePairTraitsES3Q_EES6_S3Z_S41_S3O_S42_S3Q_EEEERKS6_OT_(v3, &v11, (uint64_t)&v8, (uint64_t)v10);
  if (v9 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v9])(&v12, &v8);
  v9 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteCompositorIntegration,WTF::RefPtr<WebKit::RemoteCompositorIntegration,WTF::RawPtrTraits<WebKit::RemoteCompositorIntegration>,WTF::DefaultRefDerefTraits<WebKit::RemoteCompositorIntegration>>>::~ScopedActiveMessageReceiveQueue(&v7);
}

{
  uint64_t *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v7;
  uint64_t v8;
  int v9;
  _BYTE v10[24];
  uint64_t v11;
  char v12;

  v11 = a2;
  v3 = (uint64_t *)(a1 + 24);
  v4 = (unsigned int *)(a3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v7 = 0;
  v8 = a3;
  v9 = 8;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENSt3__17variantIJNS7_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISC_NS_12RawPtrTraitsISC_EENS_21DefaultRefDerefTraitsISC_EEEEEENSB_INS2_15RemoteBindGroupENSD_ISK_NSE_ISK_EENSG_ISK_EEEEEENSB_INS2_21RemoteBindGroupLayoutENSD_ISP_NSE_ISP_EENSG_ISP_EEEEEENSB_INS2_12RemoteBufferENSD_ISU_NSE_ISU_EENSG_ISU_EEEEEENSB_INS2_19RemoteCommandBufferENSD_ISZ_NSE_ISZ_EENSG_ISZ_EEEEEENSB_INS2_20RemoteCommandEncoderENSD_IS14_NSE_IS14_EENSG_IS14_EEEEEENSB_INS2_27RemoteCompositorIntegrationENSD_IS19_NSE_IS19_EENSG_IS19_EEEEEENSB_INS2_24RemoteComputePassEncoderENSD_IS1E_NSE_IS1E_EENSG_IS1E_EEEEEENSB_INS2_21RemoteComputePipelineENSD_IS1J_NSE_IS1J_EENSG_IS1J_EEEEEENSB_INS2_12RemoteDeviceENSD_IS1O_NSE_IS1O_EENSG_IS1O_EEEEEENSB_INS2_21RemoteExternalTextureENSD_IS1T_NSE_IS1T_EENSG_IS1T_EEEEEENSB_INS2_20RemotePipelineLayoutENSD_IS1Y_NSE_IS1Y_EENSG_IS1Y_EEEEEENSB_INS2_25RemotePresentationContextENSD_IS23_NSE_IS23_EENSG_IS23_EEEEEENSB_INS2_14RemoteQuerySetENSD_IS28_NSE_IS28_EENSG_IS28_EEEEEENSB_INS2_11RemoteQueueENSD_IS2D_NSE_IS2D_EENSG_IS2D_EEEEEENSB_INS2_25RemoteRenderBundleEncoderENSD_IS2I_NSE_IS2I_EENSG_IS2I_EEEEEENSB_INS2_18RemoteRenderBundleENSD_IS2N_NSE_IS2N_EENSG_IS2N_EEEEEENSB_INS2_23RemoteRenderPassEncoderENSD_IS2S_NSE_IS2S_EENSG_IS2S_EEEEEENSB_INS2_20RemoteRenderPipelineENSD_IS2X_NSE_IS2X_EENSG_IS2X_EEEEEENSB_INS2_13RemoteSamplerENSD_IS32_NSE_IS32_EENSG_IS32_EEEEEENSB_INS2_18RemoteShaderModuleENSD_IS37_NSE_IS37_EENSG_IS37_EEEEEENSB_INS2_13RemoteTextureENSD_IS3C_NSE_IS3C_EENSG_IS3C_EEEEEENSB_INS2_17RemoteTextureViewENSD_IS3H_NSE_IS3H_EENSG_IS3H_EEEEEEEEENS_11DefaultHashIS6_EENS_10HashTraitsIS6_EENS3P_IS3M_EENS_15HashTableTraitsEE3addIS3M_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS6_NS_12KeyValuePairIS6_S3M_EENS_24KeyValuePairKeyExtractorIS3Z_EES3O_NS3T_18KeyValuePairTraitsES3Q_EES6_S3Z_S41_S3O_S42_S3Q_EEEERKS6_OT_(v3, &v11, (uint64_t)&v8, (uint64_t)v10);
  if (v9 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v9])(&v12, &v8);
  v9 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteComputePassEncoder,WTF::RefPtr<WebKit::RemoteComputePassEncoder,WTF::RawPtrTraits<WebKit::RemoteComputePassEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteComputePassEncoder>>>::~ScopedActiveMessageReceiveQueue(&v7);
}

{
  uint64_t *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v7;
  uint64_t v8;
  int v9;
  _BYTE v10[24];
  uint64_t v11;
  char v12;

  v11 = a2;
  v3 = (uint64_t *)(a1 + 24);
  v4 = (unsigned int *)(a3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v7 = 0;
  v8 = a3;
  v9 = 9;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENSt3__17variantIJNS7_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISC_NS_12RawPtrTraitsISC_EENS_21DefaultRefDerefTraitsISC_EEEEEENSB_INS2_15RemoteBindGroupENSD_ISK_NSE_ISK_EENSG_ISK_EEEEEENSB_INS2_21RemoteBindGroupLayoutENSD_ISP_NSE_ISP_EENSG_ISP_EEEEEENSB_INS2_12RemoteBufferENSD_ISU_NSE_ISU_EENSG_ISU_EEEEEENSB_INS2_19RemoteCommandBufferENSD_ISZ_NSE_ISZ_EENSG_ISZ_EEEEEENSB_INS2_20RemoteCommandEncoderENSD_IS14_NSE_IS14_EENSG_IS14_EEEEEENSB_INS2_27RemoteCompositorIntegrationENSD_IS19_NSE_IS19_EENSG_IS19_EEEEEENSB_INS2_24RemoteComputePassEncoderENSD_IS1E_NSE_IS1E_EENSG_IS1E_EEEEEENSB_INS2_21RemoteComputePipelineENSD_IS1J_NSE_IS1J_EENSG_IS1J_EEEEEENSB_INS2_12RemoteDeviceENSD_IS1O_NSE_IS1O_EENSG_IS1O_EEEEEENSB_INS2_21RemoteExternalTextureENSD_IS1T_NSE_IS1T_EENSG_IS1T_EEEEEENSB_INS2_20RemotePipelineLayoutENSD_IS1Y_NSE_IS1Y_EENSG_IS1Y_EEEEEENSB_INS2_25RemotePresentationContextENSD_IS23_NSE_IS23_EENSG_IS23_EEEEEENSB_INS2_14RemoteQuerySetENSD_IS28_NSE_IS28_EENSG_IS28_EEEEEENSB_INS2_11RemoteQueueENSD_IS2D_NSE_IS2D_EENSG_IS2D_EEEEEENSB_INS2_25RemoteRenderBundleEncoderENSD_IS2I_NSE_IS2I_EENSG_IS2I_EEEEEENSB_INS2_18RemoteRenderBundleENSD_IS2N_NSE_IS2N_EENSG_IS2N_EEEEEENSB_INS2_23RemoteRenderPassEncoderENSD_IS2S_NSE_IS2S_EENSG_IS2S_EEEEEENSB_INS2_20RemoteRenderPipelineENSD_IS2X_NSE_IS2X_EENSG_IS2X_EEEEEENSB_INS2_13RemoteSamplerENSD_IS32_NSE_IS32_EENSG_IS32_EEEEEENSB_INS2_18RemoteShaderModuleENSD_IS37_NSE_IS37_EENSG_IS37_EEEEEENSB_INS2_13RemoteTextureENSD_IS3C_NSE_IS3C_EENSG_IS3C_EEEEEENSB_INS2_17RemoteTextureViewENSD_IS3H_NSE_IS3H_EENSG_IS3H_EEEEEEEEENS_11DefaultHashIS6_EENS_10HashTraitsIS6_EENS3P_IS3M_EENS_15HashTableTraitsEE3addIS3M_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS6_NS_12KeyValuePairIS6_S3M_EENS_24KeyValuePairKeyExtractorIS3Z_EES3O_NS3T_18KeyValuePairTraitsES3Q_EES6_S3Z_S41_S3O_S42_S3Q_EEEERKS6_OT_(v3, &v11, (uint64_t)&v8, (uint64_t)v10);
  if (v9 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v9])(&v12, &v8);
  v9 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteComputePipeline,WTF::RefPtr<WebKit::RemoteComputePipeline,WTF::RawPtrTraits<WebKit::RemoteComputePipeline>,WTF::DefaultRefDerefTraits<WebKit::RemoteComputePipeline>>>::~ScopedActiveMessageReceiveQueue(&v7);
}

{
  uint64_t *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v7;
  uint64_t v8;
  int v9;
  _BYTE v10[24];
  uint64_t v11;
  char v12;

  v11 = a2;
  v3 = (uint64_t *)(a1 + 24);
  v4 = (unsigned int *)(a3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v7 = 0;
  v8 = a3;
  v9 = 10;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENSt3__17variantIJNS7_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISC_NS_12RawPtrTraitsISC_EENS_21DefaultRefDerefTraitsISC_EEEEEENSB_INS2_15RemoteBindGroupENSD_ISK_NSE_ISK_EENSG_ISK_EEEEEENSB_INS2_21RemoteBindGroupLayoutENSD_ISP_NSE_ISP_EENSG_ISP_EEEEEENSB_INS2_12RemoteBufferENSD_ISU_NSE_ISU_EENSG_ISU_EEEEEENSB_INS2_19RemoteCommandBufferENSD_ISZ_NSE_ISZ_EENSG_ISZ_EEEEEENSB_INS2_20RemoteCommandEncoderENSD_IS14_NSE_IS14_EENSG_IS14_EEEEEENSB_INS2_27RemoteCompositorIntegrationENSD_IS19_NSE_IS19_EENSG_IS19_EEEEEENSB_INS2_24RemoteComputePassEncoderENSD_IS1E_NSE_IS1E_EENSG_IS1E_EEEEEENSB_INS2_21RemoteComputePipelineENSD_IS1J_NSE_IS1J_EENSG_IS1J_EEEEEENSB_INS2_12RemoteDeviceENSD_IS1O_NSE_IS1O_EENSG_IS1O_EEEEEENSB_INS2_21RemoteExternalTextureENSD_IS1T_NSE_IS1T_EENSG_IS1T_EEEEEENSB_INS2_20RemotePipelineLayoutENSD_IS1Y_NSE_IS1Y_EENSG_IS1Y_EEEEEENSB_INS2_25RemotePresentationContextENSD_IS23_NSE_IS23_EENSG_IS23_EEEEEENSB_INS2_14RemoteQuerySetENSD_IS28_NSE_IS28_EENSG_IS28_EEEEEENSB_INS2_11RemoteQueueENSD_IS2D_NSE_IS2D_EENSG_IS2D_EEEEEENSB_INS2_25RemoteRenderBundleEncoderENSD_IS2I_NSE_IS2I_EENSG_IS2I_EEEEEENSB_INS2_18RemoteRenderBundleENSD_IS2N_NSE_IS2N_EENSG_IS2N_EEEEEENSB_INS2_23RemoteRenderPassEncoderENSD_IS2S_NSE_IS2S_EENSG_IS2S_EEEEEENSB_INS2_20RemoteRenderPipelineENSD_IS2X_NSE_IS2X_EENSG_IS2X_EEEEEENSB_INS2_13RemoteSamplerENSD_IS32_NSE_IS32_EENSG_IS32_EEEEEENSB_INS2_18RemoteShaderModuleENSD_IS37_NSE_IS37_EENSG_IS37_EEEEEENSB_INS2_13RemoteTextureENSD_IS3C_NSE_IS3C_EENSG_IS3C_EEEEEENSB_INS2_17RemoteTextureViewENSD_IS3H_NSE_IS3H_EENSG_IS3H_EEEEEEEEENS_11DefaultHashIS6_EENS_10HashTraitsIS6_EENS3P_IS3M_EENS_15HashTableTraitsEE3addIS3M_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS6_NS_12KeyValuePairIS6_S3M_EENS_24KeyValuePairKeyExtractorIS3Z_EES3O_NS3T_18KeyValuePairTraitsES3Q_EES6_S3Z_S41_S3O_S42_S3Q_EEEERKS6_OT_(v3, &v11, (uint64_t)&v8, (uint64_t)v10);
  if (v9 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v9])(&v12, &v8);
  v9 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDevice,WTF::RefPtr<WebKit::RemoteDevice,WTF::RawPtrTraits<WebKit::RemoteDevice>,WTF::DefaultRefDerefTraits<WebKit::RemoteDevice>>>::~ScopedActiveMessageReceiveQueue(&v7);
}

{
  uint64_t *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v7;
  uint64_t v8;
  int v9;
  _BYTE v10[24];
  uint64_t v11;
  char v12;

  v11 = a2;
  v3 = (uint64_t *)(a1 + 24);
  v4 = (unsigned int *)(a3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v7 = 0;
  v8 = a3;
  v9 = 11;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENSt3__17variantIJNS7_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISC_NS_12RawPtrTraitsISC_EENS_21DefaultRefDerefTraitsISC_EEEEEENSB_INS2_15RemoteBindGroupENSD_ISK_NSE_ISK_EENSG_ISK_EEEEEENSB_INS2_21RemoteBindGroupLayoutENSD_ISP_NSE_ISP_EENSG_ISP_EEEEEENSB_INS2_12RemoteBufferENSD_ISU_NSE_ISU_EENSG_ISU_EEEEEENSB_INS2_19RemoteCommandBufferENSD_ISZ_NSE_ISZ_EENSG_ISZ_EEEEEENSB_INS2_20RemoteCommandEncoderENSD_IS14_NSE_IS14_EENSG_IS14_EEEEEENSB_INS2_27RemoteCompositorIntegrationENSD_IS19_NSE_IS19_EENSG_IS19_EEEEEENSB_INS2_24RemoteComputePassEncoderENSD_IS1E_NSE_IS1E_EENSG_IS1E_EEEEEENSB_INS2_21RemoteComputePipelineENSD_IS1J_NSE_IS1J_EENSG_IS1J_EEEEEENSB_INS2_12RemoteDeviceENSD_IS1O_NSE_IS1O_EENSG_IS1O_EEEEEENSB_INS2_21RemoteExternalTextureENSD_IS1T_NSE_IS1T_EENSG_IS1T_EEEEEENSB_INS2_20RemotePipelineLayoutENSD_IS1Y_NSE_IS1Y_EENSG_IS1Y_EEEEEENSB_INS2_25RemotePresentationContextENSD_IS23_NSE_IS23_EENSG_IS23_EEEEEENSB_INS2_14RemoteQuerySetENSD_IS28_NSE_IS28_EENSG_IS28_EEEEEENSB_INS2_11RemoteQueueENSD_IS2D_NSE_IS2D_EENSG_IS2D_EEEEEENSB_INS2_25RemoteRenderBundleEncoderENSD_IS2I_NSE_IS2I_EENSG_IS2I_EEEEEENSB_INS2_18RemoteRenderBundleENSD_IS2N_NSE_IS2N_EENSG_IS2N_EEEEEENSB_INS2_23RemoteRenderPassEncoderENSD_IS2S_NSE_IS2S_EENSG_IS2S_EEEEEENSB_INS2_20RemoteRenderPipelineENSD_IS2X_NSE_IS2X_EENSG_IS2X_EEEEEENSB_INS2_13RemoteSamplerENSD_IS32_NSE_IS32_EENSG_IS32_EEEEEENSB_INS2_18RemoteShaderModuleENSD_IS37_NSE_IS37_EENSG_IS37_EEEEEENSB_INS2_13RemoteTextureENSD_IS3C_NSE_IS3C_EENSG_IS3C_EEEEEENSB_INS2_17RemoteTextureViewENSD_IS3H_NSE_IS3H_EENSG_IS3H_EEEEEEEEENS_11DefaultHashIS6_EENS_10HashTraitsIS6_EENS3P_IS3M_EENS_15HashTableTraitsEE3addIS3M_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS6_NS_12KeyValuePairIS6_S3M_EENS_24KeyValuePairKeyExtractorIS3Z_EES3O_NS3T_18KeyValuePairTraitsES3Q_EES6_S3Z_S41_S3O_S42_S3Q_EEEERKS6_OT_(v3, &v11, (uint64_t)&v8, (uint64_t)v10);
  if (v9 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v9])(&v12, &v8);
  v9 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteExternalTexture,WTF::RefPtr<WebKit::RemoteExternalTexture,WTF::RawPtrTraits<WebKit::RemoteExternalTexture>,WTF::DefaultRefDerefTraits<WebKit::RemoteExternalTexture>>>::~ScopedActiveMessageReceiveQueue(&v7);
}

{
  uint64_t *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v7;
  uint64_t v8;
  int v9;
  _BYTE v10[24];
  uint64_t v11;
  char v12;

  v11 = a2;
  v3 = (uint64_t *)(a1 + 24);
  v4 = (unsigned int *)(a3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v7 = 0;
  v8 = a3;
  v9 = 12;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENSt3__17variantIJNS7_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISC_NS_12RawPtrTraitsISC_EENS_21DefaultRefDerefTraitsISC_EEEEEENSB_INS2_15RemoteBindGroupENSD_ISK_NSE_ISK_EENSG_ISK_EEEEEENSB_INS2_21RemoteBindGroupLayoutENSD_ISP_NSE_ISP_EENSG_ISP_EEEEEENSB_INS2_12RemoteBufferENSD_ISU_NSE_ISU_EENSG_ISU_EEEEEENSB_INS2_19RemoteCommandBufferENSD_ISZ_NSE_ISZ_EENSG_ISZ_EEEEEENSB_INS2_20RemoteCommandEncoderENSD_IS14_NSE_IS14_EENSG_IS14_EEEEEENSB_INS2_27RemoteCompositorIntegrationENSD_IS19_NSE_IS19_EENSG_IS19_EEEEEENSB_INS2_24RemoteComputePassEncoderENSD_IS1E_NSE_IS1E_EENSG_IS1E_EEEEEENSB_INS2_21RemoteComputePipelineENSD_IS1J_NSE_IS1J_EENSG_IS1J_EEEEEENSB_INS2_12RemoteDeviceENSD_IS1O_NSE_IS1O_EENSG_IS1O_EEEEEENSB_INS2_21RemoteExternalTextureENSD_IS1T_NSE_IS1T_EENSG_IS1T_EEEEEENSB_INS2_20RemotePipelineLayoutENSD_IS1Y_NSE_IS1Y_EENSG_IS1Y_EEEEEENSB_INS2_25RemotePresentationContextENSD_IS23_NSE_IS23_EENSG_IS23_EEEEEENSB_INS2_14RemoteQuerySetENSD_IS28_NSE_IS28_EENSG_IS28_EEEEEENSB_INS2_11RemoteQueueENSD_IS2D_NSE_IS2D_EENSG_IS2D_EEEEEENSB_INS2_25RemoteRenderBundleEncoderENSD_IS2I_NSE_IS2I_EENSG_IS2I_EEEEEENSB_INS2_18RemoteRenderBundleENSD_IS2N_NSE_IS2N_EENSG_IS2N_EEEEEENSB_INS2_23RemoteRenderPassEncoderENSD_IS2S_NSE_IS2S_EENSG_IS2S_EEEEEENSB_INS2_20RemoteRenderPipelineENSD_IS2X_NSE_IS2X_EENSG_IS2X_EEEEEENSB_INS2_13RemoteSamplerENSD_IS32_NSE_IS32_EENSG_IS32_EEEEEENSB_INS2_18RemoteShaderModuleENSD_IS37_NSE_IS37_EENSG_IS37_EEEEEENSB_INS2_13RemoteTextureENSD_IS3C_NSE_IS3C_EENSG_IS3C_EEEEEENSB_INS2_17RemoteTextureViewENSD_IS3H_NSE_IS3H_EENSG_IS3H_EEEEEEEEENS_11DefaultHashIS6_EENS_10HashTraitsIS6_EENS3P_IS3M_EENS_15HashTableTraitsEE3addIS3M_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS6_NS_12KeyValuePairIS6_S3M_EENS_24KeyValuePairKeyExtractorIS3Z_EES3O_NS3T_18KeyValuePairTraitsES3Q_EES6_S3Z_S41_S3O_S42_S3Q_EEEERKS6_OT_(v3, &v11, (uint64_t)&v8, (uint64_t)v10);
  if (v9 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v9])(&v12, &v8);
  v9 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemotePipelineLayout,WTF::RefPtr<WebKit::RemotePipelineLayout,WTF::RawPtrTraits<WebKit::RemotePipelineLayout>,WTF::DefaultRefDerefTraits<WebKit::RemotePipelineLayout>>>::~ScopedActiveMessageReceiveQueue(&v7);
}

{
  uint64_t *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v7;
  uint64_t v8;
  int v9;
  _BYTE v10[24];
  uint64_t v11;
  char v12;

  v11 = a2;
  v3 = (uint64_t *)(a1 + 24);
  v4 = (unsigned int *)(a3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v7 = 0;
  v8 = a3;
  v9 = 13;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENSt3__17variantIJNS7_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISC_NS_12RawPtrTraitsISC_EENS_21DefaultRefDerefTraitsISC_EEEEEENSB_INS2_15RemoteBindGroupENSD_ISK_NSE_ISK_EENSG_ISK_EEEEEENSB_INS2_21RemoteBindGroupLayoutENSD_ISP_NSE_ISP_EENSG_ISP_EEEEEENSB_INS2_12RemoteBufferENSD_ISU_NSE_ISU_EENSG_ISU_EEEEEENSB_INS2_19RemoteCommandBufferENSD_ISZ_NSE_ISZ_EENSG_ISZ_EEEEEENSB_INS2_20RemoteCommandEncoderENSD_IS14_NSE_IS14_EENSG_IS14_EEEEEENSB_INS2_27RemoteCompositorIntegrationENSD_IS19_NSE_IS19_EENSG_IS19_EEEEEENSB_INS2_24RemoteComputePassEncoderENSD_IS1E_NSE_IS1E_EENSG_IS1E_EEEEEENSB_INS2_21RemoteComputePipelineENSD_IS1J_NSE_IS1J_EENSG_IS1J_EEEEEENSB_INS2_12RemoteDeviceENSD_IS1O_NSE_IS1O_EENSG_IS1O_EEEEEENSB_INS2_21RemoteExternalTextureENSD_IS1T_NSE_IS1T_EENSG_IS1T_EEEEEENSB_INS2_20RemotePipelineLayoutENSD_IS1Y_NSE_IS1Y_EENSG_IS1Y_EEEEEENSB_INS2_25RemotePresentationContextENSD_IS23_NSE_IS23_EENSG_IS23_EEEEEENSB_INS2_14RemoteQuerySetENSD_IS28_NSE_IS28_EENSG_IS28_EEEEEENSB_INS2_11RemoteQueueENSD_IS2D_NSE_IS2D_EENSG_IS2D_EEEEEENSB_INS2_25RemoteRenderBundleEncoderENSD_IS2I_NSE_IS2I_EENSG_IS2I_EEEEEENSB_INS2_18RemoteRenderBundleENSD_IS2N_NSE_IS2N_EENSG_IS2N_EEEEEENSB_INS2_23RemoteRenderPassEncoderENSD_IS2S_NSE_IS2S_EENSG_IS2S_EEEEEENSB_INS2_20RemoteRenderPipelineENSD_IS2X_NSE_IS2X_EENSG_IS2X_EEEEEENSB_INS2_13RemoteSamplerENSD_IS32_NSE_IS32_EENSG_IS32_EEEEEENSB_INS2_18RemoteShaderModuleENSD_IS37_NSE_IS37_EENSG_IS37_EEEEEENSB_INS2_13RemoteTextureENSD_IS3C_NSE_IS3C_EENSG_IS3C_EEEEEENSB_INS2_17RemoteTextureViewENSD_IS3H_NSE_IS3H_EENSG_IS3H_EEEEEEEEENS_11DefaultHashIS6_EENS_10HashTraitsIS6_EENS3P_IS3M_EENS_15HashTableTraitsEE3addIS3M_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS6_NS_12KeyValuePairIS6_S3M_EENS_24KeyValuePairKeyExtractorIS3Z_EES3O_NS3T_18KeyValuePairTraitsES3Q_EES6_S3Z_S41_S3O_S42_S3Q_EEEERKS6_OT_(v3, &v11, (uint64_t)&v8, (uint64_t)v10);
  if (v9 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v9])(&v12, &v8);
  v9 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemotePresentationContext,WTF::RefPtr<WebKit::RemotePresentationContext,WTF::RawPtrTraits<WebKit::RemotePresentationContext>,WTF::DefaultRefDerefTraits<WebKit::RemotePresentationContext>>>::~ScopedActiveMessageReceiveQueue(&v7);
}

{
  uint64_t *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v7;
  uint64_t v8;
  int v9;
  _BYTE v10[24];
  uint64_t v11;
  char v12;

  v11 = a2;
  v3 = (uint64_t *)(a1 + 24);
  v4 = (unsigned int *)(a3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v7 = 0;
  v8 = a3;
  v9 = 14;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENSt3__17variantIJNS7_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISC_NS_12RawPtrTraitsISC_EENS_21DefaultRefDerefTraitsISC_EEEEEENSB_INS2_15RemoteBindGroupENSD_ISK_NSE_ISK_EENSG_ISK_EEEEEENSB_INS2_21RemoteBindGroupLayoutENSD_ISP_NSE_ISP_EENSG_ISP_EEEEEENSB_INS2_12RemoteBufferENSD_ISU_NSE_ISU_EENSG_ISU_EEEEEENSB_INS2_19RemoteCommandBufferENSD_ISZ_NSE_ISZ_EENSG_ISZ_EEEEEENSB_INS2_20RemoteCommandEncoderENSD_IS14_NSE_IS14_EENSG_IS14_EEEEEENSB_INS2_27RemoteCompositorIntegrationENSD_IS19_NSE_IS19_EENSG_IS19_EEEEEENSB_INS2_24RemoteComputePassEncoderENSD_IS1E_NSE_IS1E_EENSG_IS1E_EEEEEENSB_INS2_21RemoteComputePipelineENSD_IS1J_NSE_IS1J_EENSG_IS1J_EEEEEENSB_INS2_12RemoteDeviceENSD_IS1O_NSE_IS1O_EENSG_IS1O_EEEEEENSB_INS2_21RemoteExternalTextureENSD_IS1T_NSE_IS1T_EENSG_IS1T_EEEEEENSB_INS2_20RemotePipelineLayoutENSD_IS1Y_NSE_IS1Y_EENSG_IS1Y_EEEEEENSB_INS2_25RemotePresentationContextENSD_IS23_NSE_IS23_EENSG_IS23_EEEEEENSB_INS2_14RemoteQuerySetENSD_IS28_NSE_IS28_EENSG_IS28_EEEEEENSB_INS2_11RemoteQueueENSD_IS2D_NSE_IS2D_EENSG_IS2D_EEEEEENSB_INS2_25RemoteRenderBundleEncoderENSD_IS2I_NSE_IS2I_EENSG_IS2I_EEEEEENSB_INS2_18RemoteRenderBundleENSD_IS2N_NSE_IS2N_EENSG_IS2N_EEEEEENSB_INS2_23RemoteRenderPassEncoderENSD_IS2S_NSE_IS2S_EENSG_IS2S_EEEEEENSB_INS2_20RemoteRenderPipelineENSD_IS2X_NSE_IS2X_EENSG_IS2X_EEEEEENSB_INS2_13RemoteSamplerENSD_IS32_NSE_IS32_EENSG_IS32_EEEEEENSB_INS2_18RemoteShaderModuleENSD_IS37_NSE_IS37_EENSG_IS37_EEEEEENSB_INS2_13RemoteTextureENSD_IS3C_NSE_IS3C_EENSG_IS3C_EEEEEENSB_INS2_17RemoteTextureViewENSD_IS3H_NSE_IS3H_EENSG_IS3H_EEEEEEEEENS_11DefaultHashIS6_EENS_10HashTraitsIS6_EENS3P_IS3M_EENS_15HashTableTraitsEE3addIS3M_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS6_NS_12KeyValuePairIS6_S3M_EENS_24KeyValuePairKeyExtractorIS3Z_EES3O_NS3T_18KeyValuePairTraitsES3Q_EES6_S3Z_S41_S3O_S42_S3Q_EEEERKS6_OT_(v3, &v11, (uint64_t)&v8, (uint64_t)v10);
  if (v9 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v9])(&v12, &v8);
  v9 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteQuerySet,WTF::RefPtr<WebKit::RemoteQuerySet,WTF::RawPtrTraits<WebKit::RemoteQuerySet>,WTF::DefaultRefDerefTraits<WebKit::RemoteQuerySet>>>::~ScopedActiveMessageReceiveQueue(&v7);
}

{
  uint64_t *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v7;
  uint64_t v8;
  int v9;
  _BYTE v10[24];
  uint64_t v11;
  char v12;

  v11 = a2;
  v3 = (uint64_t *)(a1 + 24);
  v4 = (unsigned int *)(a3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v7 = 0;
  v8 = a3;
  v9 = 15;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENSt3__17variantIJNS7_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISC_NS_12RawPtrTraitsISC_EENS_21DefaultRefDerefTraitsISC_EEEEEENSB_INS2_15RemoteBindGroupENSD_ISK_NSE_ISK_EENSG_ISK_EEEEEENSB_INS2_21RemoteBindGroupLayoutENSD_ISP_NSE_ISP_EENSG_ISP_EEEEEENSB_INS2_12RemoteBufferENSD_ISU_NSE_ISU_EENSG_ISU_EEEEEENSB_INS2_19RemoteCommandBufferENSD_ISZ_NSE_ISZ_EENSG_ISZ_EEEEEENSB_INS2_20RemoteCommandEncoderENSD_IS14_NSE_IS14_EENSG_IS14_EEEEEENSB_INS2_27RemoteCompositorIntegrationENSD_IS19_NSE_IS19_EENSG_IS19_EEEEEENSB_INS2_24RemoteComputePassEncoderENSD_IS1E_NSE_IS1E_EENSG_IS1E_EEEEEENSB_INS2_21RemoteComputePipelineENSD_IS1J_NSE_IS1J_EENSG_IS1J_EEEEEENSB_INS2_12RemoteDeviceENSD_IS1O_NSE_IS1O_EENSG_IS1O_EEEEEENSB_INS2_21RemoteExternalTextureENSD_IS1T_NSE_IS1T_EENSG_IS1T_EEEEEENSB_INS2_20RemotePipelineLayoutENSD_IS1Y_NSE_IS1Y_EENSG_IS1Y_EEEEEENSB_INS2_25RemotePresentationContextENSD_IS23_NSE_IS23_EENSG_IS23_EEEEEENSB_INS2_14RemoteQuerySetENSD_IS28_NSE_IS28_EENSG_IS28_EEEEEENSB_INS2_11RemoteQueueENSD_IS2D_NSE_IS2D_EENSG_IS2D_EEEEEENSB_INS2_25RemoteRenderBundleEncoderENSD_IS2I_NSE_IS2I_EENSG_IS2I_EEEEEENSB_INS2_18RemoteRenderBundleENSD_IS2N_NSE_IS2N_EENSG_IS2N_EEEEEENSB_INS2_23RemoteRenderPassEncoderENSD_IS2S_NSE_IS2S_EENSG_IS2S_EEEEEENSB_INS2_20RemoteRenderPipelineENSD_IS2X_NSE_IS2X_EENSG_IS2X_EEEEEENSB_INS2_13RemoteSamplerENSD_IS32_NSE_IS32_EENSG_IS32_EEEEEENSB_INS2_18RemoteShaderModuleENSD_IS37_NSE_IS37_EENSG_IS37_EEEEEENSB_INS2_13RemoteTextureENSD_IS3C_NSE_IS3C_EENSG_IS3C_EEEEEENSB_INS2_17RemoteTextureViewENSD_IS3H_NSE_IS3H_EENSG_IS3H_EEEEEEEEENS_11DefaultHashIS6_EENS_10HashTraitsIS6_EENS3P_IS3M_EENS_15HashTableTraitsEE3addIS3M_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS6_NS_12KeyValuePairIS6_S3M_EENS_24KeyValuePairKeyExtractorIS3Z_EES3O_NS3T_18KeyValuePairTraitsES3Q_EES6_S3Z_S41_S3O_S42_S3Q_EEEERKS6_OT_(v3, &v11, (uint64_t)&v8, (uint64_t)v10);
  if (v9 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v9])(&v12, &v8);
  v9 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteQueue,WTF::RefPtr<WebKit::RemoteQueue,WTF::RawPtrTraits<WebKit::RemoteQueue>,WTF::DefaultRefDerefTraits<WebKit::RemoteQueue>>>::~ScopedActiveMessageReceiveQueue(&v7);
}

{
  uint64_t *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v7;
  uint64_t v8;
  int v9;
  _BYTE v10[24];
  uint64_t v11;
  char v12;

  v11 = a2;
  v3 = (uint64_t *)(a1 + 24);
  v4 = (unsigned int *)(a3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v7 = 0;
  v8 = a3;
  v9 = 16;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENSt3__17variantIJNS7_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISC_NS_12RawPtrTraitsISC_EENS_21DefaultRefDerefTraitsISC_EEEEEENSB_INS2_15RemoteBindGroupENSD_ISK_NSE_ISK_EENSG_ISK_EEEEEENSB_INS2_21RemoteBindGroupLayoutENSD_ISP_NSE_ISP_EENSG_ISP_EEEEEENSB_INS2_12RemoteBufferENSD_ISU_NSE_ISU_EENSG_ISU_EEEEEENSB_INS2_19RemoteCommandBufferENSD_ISZ_NSE_ISZ_EENSG_ISZ_EEEEEENSB_INS2_20RemoteCommandEncoderENSD_IS14_NSE_IS14_EENSG_IS14_EEEEEENSB_INS2_27RemoteCompositorIntegrationENSD_IS19_NSE_IS19_EENSG_IS19_EEEEEENSB_INS2_24RemoteComputePassEncoderENSD_IS1E_NSE_IS1E_EENSG_IS1E_EEEEEENSB_INS2_21RemoteComputePipelineENSD_IS1J_NSE_IS1J_EENSG_IS1J_EEEEEENSB_INS2_12RemoteDeviceENSD_IS1O_NSE_IS1O_EENSG_IS1O_EEEEEENSB_INS2_21RemoteExternalTextureENSD_IS1T_NSE_IS1T_EENSG_IS1T_EEEEEENSB_INS2_20RemotePipelineLayoutENSD_IS1Y_NSE_IS1Y_EENSG_IS1Y_EEEEEENSB_INS2_25RemotePresentationContextENSD_IS23_NSE_IS23_EENSG_IS23_EEEEEENSB_INS2_14RemoteQuerySetENSD_IS28_NSE_IS28_EENSG_IS28_EEEEEENSB_INS2_11RemoteQueueENSD_IS2D_NSE_IS2D_EENSG_IS2D_EEEEEENSB_INS2_25RemoteRenderBundleEncoderENSD_IS2I_NSE_IS2I_EENSG_IS2I_EEEEEENSB_INS2_18RemoteRenderBundleENSD_IS2N_NSE_IS2N_EENSG_IS2N_EEEEEENSB_INS2_23RemoteRenderPassEncoderENSD_IS2S_NSE_IS2S_EENSG_IS2S_EEEEEENSB_INS2_20RemoteRenderPipelineENSD_IS2X_NSE_IS2X_EENSG_IS2X_EEEEEENSB_INS2_13RemoteSamplerENSD_IS32_NSE_IS32_EENSG_IS32_EEEEEENSB_INS2_18RemoteShaderModuleENSD_IS37_NSE_IS37_EENSG_IS37_EEEEEENSB_INS2_13RemoteTextureENSD_IS3C_NSE_IS3C_EENSG_IS3C_EEEEEENSB_INS2_17RemoteTextureViewENSD_IS3H_NSE_IS3H_EENSG_IS3H_EEEEEEEEENS_11DefaultHashIS6_EENS_10HashTraitsIS6_EENS3P_IS3M_EENS_15HashTableTraitsEE3addIS3M_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS6_NS_12KeyValuePairIS6_S3M_EENS_24KeyValuePairKeyExtractorIS3Z_EES3O_NS3T_18KeyValuePairTraitsES3Q_EES6_S3Z_S41_S3O_S42_S3Q_EEEERKS6_OT_(v3, &v11, (uint64_t)&v8, (uint64_t)v10);
  if (v9 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v9])(&v12, &v8);
  v9 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderBundleEncoder,WTF::RefPtr<WebKit::RemoteRenderBundleEncoder,WTF::RawPtrTraits<WebKit::RemoteRenderBundleEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderBundleEncoder>>>::~ScopedActiveMessageReceiveQueue(&v7);
}

{
  uint64_t *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v7;
  uint64_t v8;
  int v9;
  _BYTE v10[24];
  uint64_t v11;
  char v12;

  v11 = a2;
  v3 = (uint64_t *)(a1 + 24);
  v4 = (unsigned int *)(a3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v7 = 0;
  v8 = a3;
  v9 = 17;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENSt3__17variantIJNS7_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISC_NS_12RawPtrTraitsISC_EENS_21DefaultRefDerefTraitsISC_EEEEEENSB_INS2_15RemoteBindGroupENSD_ISK_NSE_ISK_EENSG_ISK_EEEEEENSB_INS2_21RemoteBindGroupLayoutENSD_ISP_NSE_ISP_EENSG_ISP_EEEEEENSB_INS2_12RemoteBufferENSD_ISU_NSE_ISU_EENSG_ISU_EEEEEENSB_INS2_19RemoteCommandBufferENSD_ISZ_NSE_ISZ_EENSG_ISZ_EEEEEENSB_INS2_20RemoteCommandEncoderENSD_IS14_NSE_IS14_EENSG_IS14_EEEEEENSB_INS2_27RemoteCompositorIntegrationENSD_IS19_NSE_IS19_EENSG_IS19_EEEEEENSB_INS2_24RemoteComputePassEncoderENSD_IS1E_NSE_IS1E_EENSG_IS1E_EEEEEENSB_INS2_21RemoteComputePipelineENSD_IS1J_NSE_IS1J_EENSG_IS1J_EEEEEENSB_INS2_12RemoteDeviceENSD_IS1O_NSE_IS1O_EENSG_IS1O_EEEEEENSB_INS2_21RemoteExternalTextureENSD_IS1T_NSE_IS1T_EENSG_IS1T_EEEEEENSB_INS2_20RemotePipelineLayoutENSD_IS1Y_NSE_IS1Y_EENSG_IS1Y_EEEEEENSB_INS2_25RemotePresentationContextENSD_IS23_NSE_IS23_EENSG_IS23_EEEEEENSB_INS2_14RemoteQuerySetENSD_IS28_NSE_IS28_EENSG_IS28_EEEEEENSB_INS2_11RemoteQueueENSD_IS2D_NSE_IS2D_EENSG_IS2D_EEEEEENSB_INS2_25RemoteRenderBundleEncoderENSD_IS2I_NSE_IS2I_EENSG_IS2I_EEEEEENSB_INS2_18RemoteRenderBundleENSD_IS2N_NSE_IS2N_EENSG_IS2N_EEEEEENSB_INS2_23RemoteRenderPassEncoderENSD_IS2S_NSE_IS2S_EENSG_IS2S_EEEEEENSB_INS2_20RemoteRenderPipelineENSD_IS2X_NSE_IS2X_EENSG_IS2X_EEEEEENSB_INS2_13RemoteSamplerENSD_IS32_NSE_IS32_EENSG_IS32_EEEEEENSB_INS2_18RemoteShaderModuleENSD_IS37_NSE_IS37_EENSG_IS37_EEEEEENSB_INS2_13RemoteTextureENSD_IS3C_NSE_IS3C_EENSG_IS3C_EEEEEENSB_INS2_17RemoteTextureViewENSD_IS3H_NSE_IS3H_EENSG_IS3H_EEEEEEEEENS_11DefaultHashIS6_EENS_10HashTraitsIS6_EENS3P_IS3M_EENS_15HashTableTraitsEE3addIS3M_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS6_NS_12KeyValuePairIS6_S3M_EENS_24KeyValuePairKeyExtractorIS3Z_EES3O_NS3T_18KeyValuePairTraitsES3Q_EES6_S3Z_S41_S3O_S42_S3Q_EEEERKS6_OT_(v3, &v11, (uint64_t)&v8, (uint64_t)v10);
  if (v9 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v9])(&v12, &v8);
  v9 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderBundle,WTF::RefPtr<WebKit::RemoteRenderBundle,WTF::RawPtrTraits<WebKit::RemoteRenderBundle>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderBundle>>>::~ScopedActiveMessageReceiveQueue(&v7);
}

{
  uint64_t *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v7;
  uint64_t v8;
  int v9;
  _BYTE v10[24];
  uint64_t v11;
  char v12;

  v11 = a2;
  v3 = (uint64_t *)(a1 + 24);
  v4 = (unsigned int *)(a3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v7 = 0;
  v8 = a3;
  v9 = 18;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENSt3__17variantIJNS7_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISC_NS_12RawPtrTraitsISC_EENS_21DefaultRefDerefTraitsISC_EEEEEENSB_INS2_15RemoteBindGroupENSD_ISK_NSE_ISK_EENSG_ISK_EEEEEENSB_INS2_21RemoteBindGroupLayoutENSD_ISP_NSE_ISP_EENSG_ISP_EEEEEENSB_INS2_12RemoteBufferENSD_ISU_NSE_ISU_EENSG_ISU_EEEEEENSB_INS2_19RemoteCommandBufferENSD_ISZ_NSE_ISZ_EENSG_ISZ_EEEEEENSB_INS2_20RemoteCommandEncoderENSD_IS14_NSE_IS14_EENSG_IS14_EEEEEENSB_INS2_27RemoteCompositorIntegrationENSD_IS19_NSE_IS19_EENSG_IS19_EEEEEENSB_INS2_24RemoteComputePassEncoderENSD_IS1E_NSE_IS1E_EENSG_IS1E_EEEEEENSB_INS2_21RemoteComputePipelineENSD_IS1J_NSE_IS1J_EENSG_IS1J_EEEEEENSB_INS2_12RemoteDeviceENSD_IS1O_NSE_IS1O_EENSG_IS1O_EEEEEENSB_INS2_21RemoteExternalTextureENSD_IS1T_NSE_IS1T_EENSG_IS1T_EEEEEENSB_INS2_20RemotePipelineLayoutENSD_IS1Y_NSE_IS1Y_EENSG_IS1Y_EEEEEENSB_INS2_25RemotePresentationContextENSD_IS23_NSE_IS23_EENSG_IS23_EEEEEENSB_INS2_14RemoteQuerySetENSD_IS28_NSE_IS28_EENSG_IS28_EEEEEENSB_INS2_11RemoteQueueENSD_IS2D_NSE_IS2D_EENSG_IS2D_EEEEEENSB_INS2_25RemoteRenderBundleEncoderENSD_IS2I_NSE_IS2I_EENSG_IS2I_EEEEEENSB_INS2_18RemoteRenderBundleENSD_IS2N_NSE_IS2N_EENSG_IS2N_EEEEEENSB_INS2_23RemoteRenderPassEncoderENSD_IS2S_NSE_IS2S_EENSG_IS2S_EEEEEENSB_INS2_20RemoteRenderPipelineENSD_IS2X_NSE_IS2X_EENSG_IS2X_EEEEEENSB_INS2_13RemoteSamplerENSD_IS32_NSE_IS32_EENSG_IS32_EEEEEENSB_INS2_18RemoteShaderModuleENSD_IS37_NSE_IS37_EENSG_IS37_EEEEEENSB_INS2_13RemoteTextureENSD_IS3C_NSE_IS3C_EENSG_IS3C_EEEEEENSB_INS2_17RemoteTextureViewENSD_IS3H_NSE_IS3H_EENSG_IS3H_EEEEEEEEENS_11DefaultHashIS6_EENS_10HashTraitsIS6_EENS3P_IS3M_EENS_15HashTableTraitsEE3addIS3M_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS6_NS_12KeyValuePairIS6_S3M_EENS_24KeyValuePairKeyExtractorIS3Z_EES3O_NS3T_18KeyValuePairTraitsES3Q_EES6_S3Z_S41_S3O_S42_S3Q_EEEERKS6_OT_(v3, &v11, (uint64_t)&v8, (uint64_t)v10);
  if (v9 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v9])(&v12, &v8);
  v9 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderPassEncoder,WTF::RefPtr<WebKit::RemoteRenderPassEncoder,WTF::RawPtrTraits<WebKit::RemoteRenderPassEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderPassEncoder>>>::~ScopedActiveMessageReceiveQueue(&v7);
}

{
  uint64_t *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v7;
  uint64_t v8;
  int v9;
  _BYTE v10[24];
  uint64_t v11;
  char v12;

  v11 = a2;
  v3 = (uint64_t *)(a1 + 24);
  v4 = (unsigned int *)(a3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v7 = 0;
  v8 = a3;
  v9 = 19;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENSt3__17variantIJNS7_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISC_NS_12RawPtrTraitsISC_EENS_21DefaultRefDerefTraitsISC_EEEEEENSB_INS2_15RemoteBindGroupENSD_ISK_NSE_ISK_EENSG_ISK_EEEEEENSB_INS2_21RemoteBindGroupLayoutENSD_ISP_NSE_ISP_EENSG_ISP_EEEEEENSB_INS2_12RemoteBufferENSD_ISU_NSE_ISU_EENSG_ISU_EEEEEENSB_INS2_19RemoteCommandBufferENSD_ISZ_NSE_ISZ_EENSG_ISZ_EEEEEENSB_INS2_20RemoteCommandEncoderENSD_IS14_NSE_IS14_EENSG_IS14_EEEEEENSB_INS2_27RemoteCompositorIntegrationENSD_IS19_NSE_IS19_EENSG_IS19_EEEEEENSB_INS2_24RemoteComputePassEncoderENSD_IS1E_NSE_IS1E_EENSG_IS1E_EEEEEENSB_INS2_21RemoteComputePipelineENSD_IS1J_NSE_IS1J_EENSG_IS1J_EEEEEENSB_INS2_12RemoteDeviceENSD_IS1O_NSE_IS1O_EENSG_IS1O_EEEEEENSB_INS2_21RemoteExternalTextureENSD_IS1T_NSE_IS1T_EENSG_IS1T_EEEEEENSB_INS2_20RemotePipelineLayoutENSD_IS1Y_NSE_IS1Y_EENSG_IS1Y_EEEEEENSB_INS2_25RemotePresentationContextENSD_IS23_NSE_IS23_EENSG_IS23_EEEEEENSB_INS2_14RemoteQuerySetENSD_IS28_NSE_IS28_EENSG_IS28_EEEEEENSB_INS2_11RemoteQueueENSD_IS2D_NSE_IS2D_EENSG_IS2D_EEEEEENSB_INS2_25RemoteRenderBundleEncoderENSD_IS2I_NSE_IS2I_EENSG_IS2I_EEEEEENSB_INS2_18RemoteRenderBundleENSD_IS2N_NSE_IS2N_EENSG_IS2N_EEEEEENSB_INS2_23RemoteRenderPassEncoderENSD_IS2S_NSE_IS2S_EENSG_IS2S_EEEEEENSB_INS2_20RemoteRenderPipelineENSD_IS2X_NSE_IS2X_EENSG_IS2X_EEEEEENSB_INS2_13RemoteSamplerENSD_IS32_NSE_IS32_EENSG_IS32_EEEEEENSB_INS2_18RemoteShaderModuleENSD_IS37_NSE_IS37_EENSG_IS37_EEEEEENSB_INS2_13RemoteTextureENSD_IS3C_NSE_IS3C_EENSG_IS3C_EEEEEENSB_INS2_17RemoteTextureViewENSD_IS3H_NSE_IS3H_EENSG_IS3H_EEEEEEEEENS_11DefaultHashIS6_EENS_10HashTraitsIS6_EENS3P_IS3M_EENS_15HashTableTraitsEE3addIS3M_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS6_NS_12KeyValuePairIS6_S3M_EENS_24KeyValuePairKeyExtractorIS3Z_EES3O_NS3T_18KeyValuePairTraitsES3Q_EES6_S3Z_S41_S3O_S42_S3Q_EEEERKS6_OT_(v3, &v11, (uint64_t)&v8, (uint64_t)v10);
  if (v9 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v9])(&v12, &v8);
  v9 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderPipeline,WTF::RefPtr<WebKit::RemoteRenderPipeline,WTF::RawPtrTraits<WebKit::RemoteRenderPipeline>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderPipeline>>>::~ScopedActiveMessageReceiveQueue(&v7);
}

{
  uint64_t *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v7;
  uint64_t v8;
  int v9;
  _BYTE v10[24];
  uint64_t v11;
  char v12;

  v11 = a2;
  v3 = (uint64_t *)(a1 + 24);
  v4 = (unsigned int *)(a3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v7 = 0;
  v8 = a3;
  v9 = 20;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENSt3__17variantIJNS7_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISC_NS_12RawPtrTraitsISC_EENS_21DefaultRefDerefTraitsISC_EEEEEENSB_INS2_15RemoteBindGroupENSD_ISK_NSE_ISK_EENSG_ISK_EEEEEENSB_INS2_21RemoteBindGroupLayoutENSD_ISP_NSE_ISP_EENSG_ISP_EEEEEENSB_INS2_12RemoteBufferENSD_ISU_NSE_ISU_EENSG_ISU_EEEEEENSB_INS2_19RemoteCommandBufferENSD_ISZ_NSE_ISZ_EENSG_ISZ_EEEEEENSB_INS2_20RemoteCommandEncoderENSD_IS14_NSE_IS14_EENSG_IS14_EEEEEENSB_INS2_27RemoteCompositorIntegrationENSD_IS19_NSE_IS19_EENSG_IS19_EEEEEENSB_INS2_24RemoteComputePassEncoderENSD_IS1E_NSE_IS1E_EENSG_IS1E_EEEEEENSB_INS2_21RemoteComputePipelineENSD_IS1J_NSE_IS1J_EENSG_IS1J_EEEEEENSB_INS2_12RemoteDeviceENSD_IS1O_NSE_IS1O_EENSG_IS1O_EEEEEENSB_INS2_21RemoteExternalTextureENSD_IS1T_NSE_IS1T_EENSG_IS1T_EEEEEENSB_INS2_20RemotePipelineLayoutENSD_IS1Y_NSE_IS1Y_EENSG_IS1Y_EEEEEENSB_INS2_25RemotePresentationContextENSD_IS23_NSE_IS23_EENSG_IS23_EEEEEENSB_INS2_14RemoteQuerySetENSD_IS28_NSE_IS28_EENSG_IS28_EEEEEENSB_INS2_11RemoteQueueENSD_IS2D_NSE_IS2D_EENSG_IS2D_EEEEEENSB_INS2_25RemoteRenderBundleEncoderENSD_IS2I_NSE_IS2I_EENSG_IS2I_EEEEEENSB_INS2_18RemoteRenderBundleENSD_IS2N_NSE_IS2N_EENSG_IS2N_EEEEEENSB_INS2_23RemoteRenderPassEncoderENSD_IS2S_NSE_IS2S_EENSG_IS2S_EEEEEENSB_INS2_20RemoteRenderPipelineENSD_IS2X_NSE_IS2X_EENSG_IS2X_EEEEEENSB_INS2_13RemoteSamplerENSD_IS32_NSE_IS32_EENSG_IS32_EEEEEENSB_INS2_18RemoteShaderModuleENSD_IS37_NSE_IS37_EENSG_IS37_EEEEEENSB_INS2_13RemoteTextureENSD_IS3C_NSE_IS3C_EENSG_IS3C_EEEEEENSB_INS2_17RemoteTextureViewENSD_IS3H_NSE_IS3H_EENSG_IS3H_EEEEEEEEENS_11DefaultHashIS6_EENS_10HashTraitsIS6_EENS3P_IS3M_EENS_15HashTableTraitsEE3addIS3M_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS6_NS_12KeyValuePairIS6_S3M_EENS_24KeyValuePairKeyExtractorIS3Z_EES3O_NS3T_18KeyValuePairTraitsES3Q_EES6_S3Z_S41_S3O_S42_S3Q_EEEERKS6_OT_(v3, &v11, (uint64_t)&v8, (uint64_t)v10);
  if (v9 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v9])(&v12, &v8);
  v9 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteSampler,WTF::RefPtr<WebKit::RemoteSampler,WTF::RawPtrTraits<WebKit::RemoteSampler>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampler>>>::~ScopedActiveMessageReceiveQueue(&v7);
}

{
  uint64_t *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v7;
  uint64_t v8;
  int v9;
  _BYTE v10[24];
  uint64_t v11;
  char v12;

  v11 = a2;
  v3 = (uint64_t *)(a1 + 24);
  v4 = (unsigned int *)(a3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v7 = 0;
  v8 = a3;
  v9 = 21;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENSt3__17variantIJNS7_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISC_NS_12RawPtrTraitsISC_EENS_21DefaultRefDerefTraitsISC_EEEEEENSB_INS2_15RemoteBindGroupENSD_ISK_NSE_ISK_EENSG_ISK_EEEEEENSB_INS2_21RemoteBindGroupLayoutENSD_ISP_NSE_ISP_EENSG_ISP_EEEEEENSB_INS2_12RemoteBufferENSD_ISU_NSE_ISU_EENSG_ISU_EEEEEENSB_INS2_19RemoteCommandBufferENSD_ISZ_NSE_ISZ_EENSG_ISZ_EEEEEENSB_INS2_20RemoteCommandEncoderENSD_IS14_NSE_IS14_EENSG_IS14_EEEEEENSB_INS2_27RemoteCompositorIntegrationENSD_IS19_NSE_IS19_EENSG_IS19_EEEEEENSB_INS2_24RemoteComputePassEncoderENSD_IS1E_NSE_IS1E_EENSG_IS1E_EEEEEENSB_INS2_21RemoteComputePipelineENSD_IS1J_NSE_IS1J_EENSG_IS1J_EEEEEENSB_INS2_12RemoteDeviceENSD_IS1O_NSE_IS1O_EENSG_IS1O_EEEEEENSB_INS2_21RemoteExternalTextureENSD_IS1T_NSE_IS1T_EENSG_IS1T_EEEEEENSB_INS2_20RemotePipelineLayoutENSD_IS1Y_NSE_IS1Y_EENSG_IS1Y_EEEEEENSB_INS2_25RemotePresentationContextENSD_IS23_NSE_IS23_EENSG_IS23_EEEEEENSB_INS2_14RemoteQuerySetENSD_IS28_NSE_IS28_EENSG_IS28_EEEEEENSB_INS2_11RemoteQueueENSD_IS2D_NSE_IS2D_EENSG_IS2D_EEEEEENSB_INS2_25RemoteRenderBundleEncoderENSD_IS2I_NSE_IS2I_EENSG_IS2I_EEEEEENSB_INS2_18RemoteRenderBundleENSD_IS2N_NSE_IS2N_EENSG_IS2N_EEEEEENSB_INS2_23RemoteRenderPassEncoderENSD_IS2S_NSE_IS2S_EENSG_IS2S_EEEEEENSB_INS2_20RemoteRenderPipelineENSD_IS2X_NSE_IS2X_EENSG_IS2X_EEEEEENSB_INS2_13RemoteSamplerENSD_IS32_NSE_IS32_EENSG_IS32_EEEEEENSB_INS2_18RemoteShaderModuleENSD_IS37_NSE_IS37_EENSG_IS37_EEEEEENSB_INS2_13RemoteTextureENSD_IS3C_NSE_IS3C_EENSG_IS3C_EEEEEENSB_INS2_17RemoteTextureViewENSD_IS3H_NSE_IS3H_EENSG_IS3H_EEEEEEEEENS_11DefaultHashIS6_EENS_10HashTraitsIS6_EENS3P_IS3M_EENS_15HashTableTraitsEE3addIS3M_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS6_NS_12KeyValuePairIS6_S3M_EENS_24KeyValuePairKeyExtractorIS3Z_EES3O_NS3T_18KeyValuePairTraitsES3Q_EES6_S3Z_S41_S3O_S42_S3Q_EEEERKS6_OT_(v3, &v11, (uint64_t)&v8, (uint64_t)v10);
  if (v9 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v9])(&v12, &v8);
  v9 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteShaderModule,WTF::RefPtr<WebKit::RemoteShaderModule,WTF::RawPtrTraits<WebKit::RemoteShaderModule>,WTF::DefaultRefDerefTraits<WebKit::RemoteShaderModule>>>::~ScopedActiveMessageReceiveQueue(&v7);
}

{
  uint64_t *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v7;
  uint64_t v8;
  int v9;
  _BYTE v10[24];
  uint64_t v11;
  char v12;

  v11 = a2;
  v3 = (uint64_t *)(a1 + 24);
  v4 = (unsigned int *)(a3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v7 = 0;
  v8 = a3;
  v9 = 22;
  _ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENSt3__17variantIJNS7_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISC_NS_12RawPtrTraitsISC_EENS_21DefaultRefDerefTraitsISC_EEEEEENSB_INS2_15RemoteBindGroupENSD_ISK_NSE_ISK_EENSG_ISK_EEEEEENSB_INS2_21RemoteBindGroupLayoutENSD_ISP_NSE_ISP_EENSG_ISP_EEEEEENSB_INS2_12RemoteBufferENSD_ISU_NSE_ISU_EENSG_ISU_EEEEEENSB_INS2_19RemoteCommandBufferENSD_ISZ_NSE_ISZ_EENSG_ISZ_EEEEEENSB_INS2_20RemoteCommandEncoderENSD_IS14_NSE_IS14_EENSG_IS14_EEEEEENSB_INS2_27RemoteCompositorIntegrationENSD_IS19_NSE_IS19_EENSG_IS19_EEEEEENSB_INS2_24RemoteComputePassEncoderENSD_IS1E_NSE_IS1E_EENSG_IS1E_EEEEEENSB_INS2_21RemoteComputePipelineENSD_IS1J_NSE_IS1J_EENSG_IS1J_EEEEEENSB_INS2_12RemoteDeviceENSD_IS1O_NSE_IS1O_EENSG_IS1O_EEEEEENSB_INS2_21RemoteExternalTextureENSD_IS1T_NSE_IS1T_EENSG_IS1T_EEEEEENSB_INS2_20RemotePipelineLayoutENSD_IS1Y_NSE_IS1Y_EENSG_IS1Y_EEEEEENSB_INS2_25RemotePresentationContextENSD_IS23_NSE_IS23_EENSG_IS23_EEEEEENSB_INS2_14RemoteQuerySetENSD_IS28_NSE_IS28_EENSG_IS28_EEEEEENSB_INS2_11RemoteQueueENSD_IS2D_NSE_IS2D_EENSG_IS2D_EEEEEENSB_INS2_25RemoteRenderBundleEncoderENSD_IS2I_NSE_IS2I_EENSG_IS2I_EEEEEENSB_INS2_18RemoteRenderBundleENSD_IS2N_NSE_IS2N_EENSG_IS2N_EEEEEENSB_INS2_23RemoteRenderPassEncoderENSD_IS2S_NSE_IS2S_EENSG_IS2S_EEEEEENSB_INS2_20RemoteRenderPipelineENSD_IS2X_NSE_IS2X_EENSG_IS2X_EEEEEENSB_INS2_13RemoteSamplerENSD_IS32_NSE_IS32_EENSG_IS32_EEEEEENSB_INS2_18RemoteShaderModuleENSD_IS37_NSE_IS37_EENSG_IS37_EEEEEENSB_INS2_13RemoteTextureENSD_IS3C_NSE_IS3C_EENSG_IS3C_EEEEEENSB_INS2_17RemoteTextureViewENSD_IS3H_NSE_IS3H_EENSG_IS3H_EEEEEEEEENS_11DefaultHashIS6_EENS_10HashTraitsIS6_EENS3P_IS3M_EENS_15HashTableTraitsEE3addIS3M_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS6_NS_12KeyValuePairIS6_S3M_EENS_24KeyValuePairKeyExtractorIS3Z_EES3O_NS3T_18KeyValuePairTraitsES3Q_EES6_S3Z_S41_S3O_S42_S3Q_EEEERKS6_OT_(v3, &v11, (uint64_t)&v8, (uint64_t)v10);
  if (v9 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v9])(&v12, &v8);
  v9 = -1;
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteTexture,WTF::RefPtr<WebKit::RemoteTexture,WTF::RawPtrTraits<WebKit::RemoteTexture>,WTF::DefaultRefDerefTraits<WebKit::RemoteTexture>>>::~ScopedActiveMessageReceiveQueue(&v7);
}

uint64_t *_ZN3WTF7HashMapINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENSt3__17variantIJNS7_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISC_NS_12RawPtrTraitsISC_EENS_21DefaultRefDerefTraitsISC_EEEEEENSB_INS2_15RemoteBindGroupENSD_ISK_NSE_ISK_EENSG_ISK_EEEEEENSB_INS2_21RemoteBindGroupLayoutENSD_ISP_NSE_ISP_EENSG_ISP_EEEEEENSB_INS2_12RemoteBufferENSD_ISU_NSE_ISU_EENSG_ISU_EEEEEENSB_INS2_19RemoteCommandBufferENSD_ISZ_NSE_ISZ_EENSG_ISZ_EEEEEENSB_INS2_20RemoteCommandEncoderENSD_IS14_NSE_IS14_EENSG_IS14_EEEEEENSB_INS2_27RemoteCompositorIntegrationENSD_IS19_NSE_IS19_EENSG_IS19_EEEEEENSB_INS2_24RemoteComputePassEncoderENSD_IS1E_NSE_IS1E_EENSG_IS1E_EEEEEENSB_INS2_21RemoteComputePipelineENSD_IS1J_NSE_IS1J_EENSG_IS1J_EEEEEENSB_INS2_12RemoteDeviceENSD_IS1O_NSE_IS1O_EENSG_IS1O_EEEEEENSB_INS2_21RemoteExternalTextureENSD_IS1T_NSE_IS1T_EENSG_IS1T_EEEEEENSB_INS2_20RemotePipelineLayoutENSD_IS1Y_NSE_IS1Y_EENSG_IS1Y_EEEEEENSB_INS2_25RemotePresentationContextENSD_IS23_NSE_IS23_EENSG_IS23_EEEEEENSB_INS2_14RemoteQuerySetENSD_IS28_NSE_IS28_EENSG_IS28_EEEEEENSB_INS2_11RemoteQueueENSD_IS2D_NSE_IS2D_EENSG_IS2D_EEEEEENSB_INS2_25RemoteRenderBundleEncoderENSD_IS2I_NSE_IS2I_EENSG_IS2I_EEEEEENSB_INS2_18RemoteRenderBundleENSD_IS2N_NSE_IS2N_EENSG_IS2N_EEEEEENSB_INS2_23RemoteRenderPassEncoderENSD_IS2S_NSE_IS2S_EENSG_IS2S_EEEEEENSB_INS2_20RemoteRenderPipelineENSD_IS2X_NSE_IS2X_EENSG_IS2X_EEEEEENSB_INS2_13RemoteSamplerENSD_IS32_NSE_IS32_EENSG_IS32_EEEEEENSB_INS2_18RemoteShaderModuleENSD_IS37_NSE_IS37_EENSG_IS37_EEEEEENSB_INS2_13RemoteTextureENSD_IS3C_NSE_IS3C_EENSG_IS3C_EEEEEENSB_INS2_17RemoteTextureViewENSD_IS3H_NSE_IS3H_EENSG_IS3H_EEEEEEEEENS_11DefaultHashIS6_EENS_10HashTraitsIS6_EENS3P_IS3M_EENS_15HashTableTraitsEE3addIS3M_EENS_18HashTableAddResultINS_17HashTableIteratorINS_9HashTableIS6_NS_12KeyValuePairIS6_S3M_EENS_24KeyValuePairKeyExtractorIS3Z_EES3O_NS3T_18KeyValuePairTraitsES3Q_EES6_S3Z_S41_S3O_S42_S3Q_EEEERKS6_OT_@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  char v32;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = _ZN3WTF9HashTableINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS_12KeyValuePairIS6_NSt3__17variantIJNS8_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISD_NS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEENSC_INS2_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSC_INS2_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSC_INS2_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSC_INS2_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSC_INS2_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSC_INS2_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSC_INS2_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSC_INS2_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSC_INS2_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSC_INS2_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSC_INS2_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSC_INS2_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSC_INS2_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSC_INS2_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSC_INS2_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSC_INS2_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSC_INS2_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSC_INS2_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSC_INS2_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSC_INS2_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSC_INS2_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSC_INS2_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEEENS_24KeyValuePairKeyExtractorIS3O_EENS_11DefaultHashIS6_EENS_7HashMapIS6_S3N_S3S_NS_10HashTraitsIS6_EENS3U_IS3N_EENS_15HashTableTraitsEE18KeyValuePairTraitsES3V_E6expandEPS3O_(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  v15 = v10 & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~((_DWORD)v14 << 27)));
  v16 = (uint64_t *)(v8 + 24 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v22 = 0;
        else
          v22 = *(_DWORD *)(v8 - 4);
        v29 = 0;
        v30 = v8 + 24 * v22;
        goto LABEL_34;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 24 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      *((_DWORD *)v18 + 4) = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  v20 = *((unsigned int *)v16 + 4);
  v21 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v20 == -1)
  {
    if ((_DWORD)v21 == -1)
      goto LABEL_19;
  }
  else if ((_DWORD)v21 == -1)
  {
    result = (uint64_t *)((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v20])(&v32, v16 + 1);
    *((_DWORD *)v16 + 4) = -1;
    goto LABEL_19;
  }
  v31 = v16 + 1;
  result = (uint64_t *)((uint64_t (*)(uint64_t **))off_1E34B9850[v21])(&v31);
LABEL_19:
  v23 = *v6;
  if (*v6)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v25 = *v6;
  if (*v6)
    v26 = *(_DWORD *)(v25 - 12);
  else
    v26 = 0;
  v27 = (*(_DWORD *)(v25 - 16) + v26);
  v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 <= 2 * v27)
    {
LABEL_27:
      result = _ZN3WTF9HashTableINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS_12KeyValuePairIS6_NSt3__17variantIJNS8_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISD_NS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEENSC_INS2_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSC_INS2_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSC_INS2_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSC_INS2_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSC_INS2_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSC_INS2_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSC_INS2_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSC_INS2_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSC_INS2_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSC_INS2_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSC_INS2_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSC_INS2_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSC_INS2_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSC_INS2_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSC_INS2_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSC_INS2_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSC_INS2_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSC_INS2_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSC_INS2_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSC_INS2_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSC_INS2_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSC_INS2_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEEENS_24KeyValuePairKeyExtractorIS3O_EENS_11DefaultHashIS6_EENS_7HashMapIS6_S3N_S3S_NS_10HashTraitsIS6_EENS3U_IS3N_EENS_15HashTableTraitsEE18KeyValuePairTraitsES3V_E6expandEPS3O_(v6, v16);
      v16 = result;
      v25 = *v6;
      if (*v6)
        LODWORD(v28) = *(_DWORD *)(v25 - 4);
      else
        LODWORD(v28) = 0;
    }
  }
  else if (3 * v28 <= 4 * v27)
  {
    goto LABEL_27;
  }
  v30 = v25 + 24 * v28;
  v29 = 1;
LABEL_34:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v30;
  *(_BYTE *)(a4 + 16) = v29;
  return result;
}

uint64_t WebKit::WebGPU::ObjectHeap::convertAdapterFromBacking(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;

  v6 = a2;
  v3 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), &v6);
  v4 = *(uint64_t **)(a1 + 24);
  if (v4)
    v4 += 3 * *((unsigned int *)v4 - 1);
  if (v4 == v3 || *((_DWORD *)v3 + 4) != 1)
    return 0;
  else
    return *(_QWORD *)(v3[1] + 16);
}

uint64_t WebKit::WebGPU::ObjectHeap::convertBindGroupFromBacking(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;

  v6 = a2;
  v3 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), &v6);
  v4 = *(uint64_t **)(a1 + 24);
  if (v4)
    v4 += 3 * *((unsigned int *)v4 - 1);
  if (v4 == v3 || *((_DWORD *)v3 + 4) != 2)
    return 0;
  else
    return *(_QWORD *)(v3[1] + 16);
}

uint64_t WebKit::WebGPU::ObjectHeap::convertBindGroupLayoutFromBacking(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;

  v6 = a2;
  v3 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), &v6);
  v4 = *(uint64_t **)(a1 + 24);
  if (v4)
    v4 += 3 * *((unsigned int *)v4 - 1);
  if (v4 == v3 || *((_DWORD *)v3 + 4) != 3)
    return 0;
  else
    return *(_QWORD *)(v3[1] + 16);
}

uint64_t WebKit::WebGPU::ObjectHeap::convertBufferFromBacking(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;

  v6 = a2;
  v3 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), &v6);
  v4 = *(uint64_t **)(a1 + 24);
  if (v4)
    v4 += 3 * *((unsigned int *)v4 - 1);
  if (v4 == v3 || *((_DWORD *)v3 + 4) != 4)
    return 0;
  else
    return *(_QWORD *)(v3[1] + 16);
}

uint64_t WebKit::WebGPU::ObjectHeap::convertCommandBufferFromBacking(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;

  v6 = a2;
  v3 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), &v6);
  v4 = *(uint64_t **)(a1 + 24);
  if (v4)
    v4 += 3 * *((unsigned int *)v4 - 1);
  if (v4 == v3 || *((_DWORD *)v3 + 4) != 5)
    return 0;
  else
    return *(_QWORD *)(v3[1] + 16);
}

uint64_t WebKit::WebGPU::ObjectHeap::convertCommandEncoderFromBacking(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;

  v6 = a2;
  v3 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), &v6);
  v4 = *(uint64_t **)(a1 + 24);
  if (v4)
    v4 += 3 * *((unsigned int *)v4 - 1);
  if (v4 == v3 || *((_DWORD *)v3 + 4) != 6)
    return 0;
  else
    return *(_QWORD *)(v3[1] + 16);
}

uint64_t WebKit::WebGPU::ObjectHeap::convertCompositorIntegrationFromBacking(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;

  v6 = a2;
  v3 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), &v6);
  v4 = *(uint64_t **)(a1 + 24);
  if (v4)
    v4 += 3 * *((unsigned int *)v4 - 1);
  if (v4 == v3 || *((_DWORD *)v3 + 4) != 7)
    return 0;
  else
    return *(_QWORD *)(v3[1] + 16);
}

uint64_t WebKit::WebGPU::ObjectHeap::convertComputePassEncoderFromBacking(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;

  v6 = a2;
  v3 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), &v6);
  v4 = *(uint64_t **)(a1 + 24);
  if (v4)
    v4 += 3 * *((unsigned int *)v4 - 1);
  if (v4 == v3 || *((_DWORD *)v3 + 4) != 8)
    return 0;
  else
    return *(_QWORD *)(v3[1] + 16);
}

uint64_t WebKit::WebGPU::ObjectHeap::convertComputePipelineFromBacking(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;

  v6 = a2;
  v3 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), &v6);
  v4 = *(uint64_t **)(a1 + 24);
  if (v4)
    v4 += 3 * *((unsigned int *)v4 - 1);
  if (v4 == v3 || *((_DWORD *)v3 + 4) != 9)
    return 0;
  else
    return *(_QWORD *)(v3[1] + 16);
}

uint64_t WebKit::WebGPU::ObjectHeap::convertDeviceFromBacking(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;

  v6 = a2;
  v3 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), &v6);
  v4 = *(uint64_t **)(a1 + 24);
  if (v4)
    v4 += 3 * *((unsigned int *)v4 - 1);
  if (v4 == v3 || *((_DWORD *)v3 + 4) != 10)
    return 0;
  else
    return *(_QWORD *)(v3[1] + 16);
}

uint64_t WebKit::WebGPU::ObjectHeap::convertExternalTextureFromBacking(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;

  v6 = a2;
  v3 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), &v6);
  v4 = *(uint64_t **)(a1 + 24);
  if (v4)
    v4 += 3 * *((unsigned int *)v4 - 1);
  if (v4 == v3 || *((_DWORD *)v3 + 4) != 11)
    return 0;
  else
    return *(_QWORD *)(v3[1] + 16);
}

uint64_t WebKit::WebGPU::ObjectHeap::convertPipelineLayoutFromBacking(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;

  v6 = a2;
  v3 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), &v6);
  v4 = *(uint64_t **)(a1 + 24);
  if (v4)
    v4 += 3 * *((unsigned int *)v4 - 1);
  if (v4 == v3 || *((_DWORD *)v3 + 4) != 12)
    return 0;
  else
    return *(_QWORD *)(v3[1] + 16);
}

uint64_t WebKit::WebGPU::ObjectHeap::convertPresentationContextFromBacking(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;

  v6 = a2;
  v3 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), &v6);
  v4 = *(uint64_t **)(a1 + 24);
  if (v4)
    v4 += 3 * *((unsigned int *)v4 - 1);
  if (v4 == v3 || *((_DWORD *)v3 + 4) != 13)
    return 0;
  else
    return *(_QWORD *)(v3[1] + 16);
}

uint64_t WebKit::WebGPU::ObjectHeap::convertQuerySetFromBacking(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;

  v6 = a2;
  v3 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), &v6);
  v4 = *(uint64_t **)(a1 + 24);
  if (v4)
    v4 += 3 * *((unsigned int *)v4 - 1);
  if (v4 == v3 || *((_DWORD *)v3 + 4) != 14)
    return 0;
  else
    return *(_QWORD *)(v3[1] + 16);
}

uint64_t WebKit::WebGPU::ObjectHeap::convertQueueFromBacking(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;

  v6 = a2;
  v3 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), &v6);
  v4 = *(uint64_t **)(a1 + 24);
  if (v4)
    v4 += 3 * *((unsigned int *)v4 - 1);
  if (v4 == v3 || *((_DWORD *)v3 + 4) != 15)
    return 0;
  else
    return *(_QWORD *)(v3[1] + 16);
}

uint64_t WebKit::WebGPU::ObjectHeap::convertRenderBundleEncoderFromBacking(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;

  v6 = a2;
  v3 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), &v6);
  v4 = *(uint64_t **)(a1 + 24);
  if (v4)
    v4 += 3 * *((unsigned int *)v4 - 1);
  if (v4 == v3 || *((_DWORD *)v3 + 4) != 16)
    return 0;
  else
    return *(_QWORD *)(v3[1] + 16);
}

uint64_t WebKit::WebGPU::ObjectHeap::convertRenderBundleFromBacking(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;

  v6 = a2;
  v3 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), &v6);
  v4 = *(uint64_t **)(a1 + 24);
  if (v4)
    v4 += 3 * *((unsigned int *)v4 - 1);
  if (v4 == v3 || *((_DWORD *)v3 + 4) != 17)
    return 0;
  else
    return *(_QWORD *)(v3[1] + 16);
}

uint64_t WebKit::WebGPU::ObjectHeap::convertRenderPassEncoderFromBacking(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;

  v6 = a2;
  v3 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), &v6);
  v4 = *(uint64_t **)(a1 + 24);
  if (v4)
    v4 += 3 * *((unsigned int *)v4 - 1);
  if (v4 == v3 || *((_DWORD *)v3 + 4) != 18)
    return 0;
  else
    return *(_QWORD *)(v3[1] + 16);
}

uint64_t WebKit::WebGPU::ObjectHeap::convertRenderPipelineFromBacking(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;

  v6 = a2;
  v3 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), &v6);
  v4 = *(uint64_t **)(a1 + 24);
  if (v4)
    v4 += 3 * *((unsigned int *)v4 - 1);
  if (v4 == v3 || *((_DWORD *)v3 + 4) != 19)
    return 0;
  else
    return *(_QWORD *)(v3[1] + 16);
}

uint64_t WebKit::WebGPU::ObjectHeap::convertSamplerFromBacking(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;

  v6 = a2;
  v3 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), &v6);
  v4 = *(uint64_t **)(a1 + 24);
  if (v4)
    v4 += 3 * *((unsigned int *)v4 - 1);
  if (v4 == v3 || *((_DWORD *)v3 + 4) != 20)
    return 0;
  else
    return *(_QWORD *)(v3[1] + 16);
}

uint64_t WebKit::WebGPU::ObjectHeap::convertShaderModuleFromBacking(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;

  v6 = a2;
  v3 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), &v6);
  v4 = *(uint64_t **)(a1 + 24);
  if (v4)
    v4 += 3 * *((unsigned int *)v4 - 1);
  if (v4 == v3 || *((_DWORD *)v3 + 4) != 21)
    return 0;
  else
    return *(_QWORD *)(v3[1] + 16);
}

uint64_t WebKit::WebGPU::ObjectHeap::convertTextureFromBacking(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;

  v6 = a2;
  v3 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), &v6);
  v4 = *(uint64_t **)(a1 + 24);
  if (v4)
    v4 += 3 * *((unsigned int *)v4 - 1);
  if (v4 == v3 || *((_DWORD *)v3 + 4) != 22)
    return 0;
  else
    return *(_QWORD *)(v3[1] + 16);
}

uint64_t WebKit::WebGPU::ObjectHeap::convertTextureViewFromBacking(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;

  v6 = a2;
  v3 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), &v6);
  v4 = *(uint64_t **)(a1 + 24);
  if (v4)
    v4 += 3 * *((unsigned int *)v4 - 1);
  if (v4 == v3 || *((_DWORD *)v3 + 4) != 23)
    return 0;
  else
    return *(_QWORD *)(v3[1] + 16);
}

WebKit::RemoteAudioHardwareListenerProxy *WebKit::WebGPU::ObjectHeap::objectExistsAndValid(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  WebKit::RemoteAudioHardwareListenerProxy *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;

  v14 = a3;
  v5 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::LibWebRTCCodecsProxy::Decoder,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::LibWebRTCCodecsProxy::Decoder>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), &v14);
  v6 = *(uint64_t **)(a1 + 24);
  if (v6)
    v6 += 3 * *((unsigned int *)v6 - 1);
  if (v6 == v5)
  {
    v9 = 0;
    v8 = 0;
    return (WebKit::RemoteAudioHardwareListenerProxy *)(v9 | (v8 << 8));
  }
  v15 = a2;
  v7 = *((unsigned int *)v5 + 4);
  if ((_DWORD)v7 != -1)
  {
    v16 = &v15;
    v8 = ((uint64_t (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK6WebKit6WebGPU10ObjectHeap20objectExistsAndValidERKN7WebCore6WebGPU3GPUENS6_23ObjectIdentifierGenericINS8_20WebGPUIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEE3__0JZNKSA_20objectExistsAndValidESF_SK_E3__1EEEEEJRKNS0_6__implIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS8_13RemoteAdapterENS6_6RefPtrIST_NS6_12RawPtrTraitsIST_EENS6_21DefaultRefDerefTraitsIST_EEEEEENSS_INS8_15RemoteBindGroupENSU_IS11_NSV_IS11_EENSX_IS11_EEEEEENSS_INS8_21RemoteBindGroupLayoutENSU_IS16_NSV_IS16_EENSX_IS16_EEEEEENSS_INS8_12RemoteBufferENSU_IS1B_NSV_IS1B_EENSX_IS1B_EEEEEENSS_INS8_19RemoteCommandBufferENSU_IS1G_NSV_IS1G_EENSX_IS1G_EEEEEENSS_INS8_20RemoteCommandEncoderENSU_IS1L_NSV_IS1L_EENSX_IS1L_EEEEEENSS_INS8_27RemoteCompositorIntegrationENSU_IS1Q_NSV_IS1Q_EENSX_IS1Q_EEEEEENSS_INS8_24RemoteComputePassEncoderENSU_IS1V_NSV_IS1V_EENSX_IS1V_EEEEEENSS_INS8_21RemoteComputePipelineENSU_IS20_NSV_IS20_EENSX_IS20_EEEEEENSS_INS8_12RemoteDeviceENSU_IS25_NSV_IS25_EENSX_IS25_EEEEEENSS_INS8_21RemoteExternalTextureENSU_IS2A_NSV_IS2A_EENSX_IS2A_EEEEEENSS_INS8_20RemotePipelineLayoutENSU_IS2F_NSV_IS2F_EENSX_IS2F_EEEEEENSS_INS8_25RemotePresentationContextENSU_IS2K_NSV_IS2K_EENSX_IS2K_EEEEEENSS_INS8_14RemoteQuerySetENSU_IS2P_NSV_IS2P_EENSX_IS2P_EEEEEENSS_INS8_11RemoteQueueENSU_IS2U_NSV_IS2U_EENSX_IS2U_EEEEEENSS_INS8_25RemoteRenderBundleEncoderENSU_IS2Z_NSV_IS2Z_EENSX_IS2Z_EEEEEENSS_INS8_18RemoteRenderBundleENSU_IS34_NSV_IS34_EENSX_IS34_EEEEEENSS_INS8_23RemoteRenderPassEncoderENSU_IS39_NSV_IS39_EENSX_IS39_EEEEEENSS_INS8_20RemoteRenderPipelineENSU_IS3E_NSV_IS3E_EENSX_IS3E_EEEEEENSS_INS8_13RemoteSamplerENSU_IS3J_NSV_IS3J_EENSX_IS3J_EEEEEENSS_INS8_18RemoteShaderModuleENSU_IS3O_NSV_IS3O_EENSX_IS3O_EEEEEENSS_INS8_13RemoteTextureENSU_IS3T_NSV_IS3T_EENSX_IS3T_EEEEEENSS_INS8_17RemoteTextureViewENSU_IS3Y_NSV_IS3Y_EENSX_IS3Y_EEEEEEEEEEEEDcOT_DpOT0____fmatrix[v7])(&v16, v5 + 1);
    v9 = 1;
    return (WebKit::RemoteAudioHardwareListenerProxy *)(v9 | (v8 << 8));
  }
  v11 = (WebKit::RemoteAudioHardwareListenerProxy *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebKit::RemoteAudioHardwareListenerProxy::RemoteAudioHardwareListenerProxy(v11, v12, v13);
}

WebKit::RemoteAudioHardwareListenerProxy *WebKit::RemoteAudioHardwareListenerProxy::RemoteAudioHardwareListenerProxy(WebKit::RemoteAudioHardwareListenerProxy *a1, uint64_t a2, _QWORD *a3)
{
  WTF::ThreadSafeWeakPtrControlBlock *v6;

  *(_QWORD *)a1 = off_1E34B95C0;
  v6 = *(WTF::ThreadSafeWeakPtrControlBlock **)(a2 + 16);
  if (v6)
    v6 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v6);
  *((_QWORD *)a1 + 1) = v6;
  *((_QWORD *)a1 + 2) = a2;
  *((_QWORD *)a1 + 3) = *a3;
  WebCore::AudioHardwareListener::create();
  WebKit::RemoteAudioHardwareListenerProxy::audioOutputDeviceChanged(a1);
  return a1;
}

unsigned __int8 *WebKit::RemoteAudioHardwareListenerProxy::audioOutputDeviceChanged(WebKit::RemoteAudioHardwareListenerProxy *this)
{
  unsigned __int8 *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6[3];
  uint64_t v7;

  result = (unsigned __int8 *)*((_QWORD *)this + 1);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *((_QWORD *)this + 2), &v7);
    if (v7)
    {
      v3 = *(_QWORD *)(v7 + 48);
      v4 = *((_QWORD *)this + 3);
      *(_OWORD *)v6 = *(_OWORD *)(*((_QWORD *)this + 4) + 24);
      result = (unsigned __int8 *)IPC::Connection::send<Messages::RemoteAudioHardwareListener::AudioOutputDeviceChanged>(v3, v6, v4, 0, 0);
      v5 = v7;
      v7 = 0;
      if (v5)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v5 + 16));
    }
  }
  return result;
}

void WebKit::RemoteAudioHardwareListenerProxy::~RemoteAudioHardwareListenerProxy(WebKit::RemoteAudioHardwareListenerProxy *this, void *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;

  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned __int8 *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteAudioHardwareListenerProxy::~RemoteAudioHardwareListenerProxy(this, a2);
  WTF::fastFree(v2, v3);
}

unsigned __int8 *WebKit::RemoteAudioHardwareListenerProxy::audioHardwareDidBecomeActive(WebKit::RemoteAudioHardwareListenerProxy *this)
{
  unsigned __int8 *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  WTF *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;

  result = (unsigned __int8 *)*((_QWORD *)this + 1);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *((_QWORD *)this + 2), &v10);
    if (v10)
    {
      v3 = *(_QWORD *)(v10 + 48);
      v4 = *((_QWORD *)this + 3);
      v5 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v5 = 683;
      *(_QWORD *)(v5 + 8) = v4;
      *(_QWORD *)(v5 + 528) = v5 + 16;
      *(_QWORD *)(v5 + 536) = v5 + 16;
      *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v5 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
      v11 = (IPC::Encoder *)v5;
      IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v11, 0, 0);
      result = (unsigned __int8 *)v11;
      v11 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v6);
        result = (unsigned __int8 *)WTF::fastFree(v7, v8);
      }
      v9 = v10;
      v10 = 0;
      if (v9)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v9 + 16));
    }
  }
  return result;
}

unsigned __int8 *WebKit::RemoteAudioHardwareListenerProxy::audioHardwareDidBecomeInactive(WebKit::RemoteAudioHardwareListenerProxy *this)
{
  unsigned __int8 *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  WTF *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;

  result = (unsigned __int8 *)*((_QWORD *)this + 1);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *((_QWORD *)this + 2), &v10);
    if (v10)
    {
      v3 = *(_QWORD *)(v10 + 48);
      v4 = *((_QWORD *)this + 3);
      v5 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v5 = 684;
      *(_QWORD *)(v5 + 8) = v4;
      *(_QWORD *)(v5 + 528) = v5 + 16;
      *(_QWORD *)(v5 + 536) = v5 + 16;
      *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v5 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
      v11 = (IPC::Encoder *)v5;
      IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v11, 0, 0);
      result = (unsigned __int8 *)v11;
      v11 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v6);
        result = (unsigned __int8 *)WTF::fastFree(v7, v8);
      }
      v9 = v10;
      v10 = 0;
      if (v9)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v9 + 16));
    }
  }
  return result;
}

void WebKit::RemoteAudioSessionProxy::~RemoteAudioSessionProxy(WebKit::RemoteAudioSessionProxy *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned __int8 *v4;

  *(_QWORD *)this = off_1E34B95F8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned __int8 *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, a2);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteAudioSessionProxy::~RemoteAudioSessionProxy(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebKit::RemoteAudioSessionProxy::audioSessionManager(WebKit::RemoteAudioSessionProxy *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(*((unsigned __int8 **)this + 2), *((_QWORD *)this + 3), &v4);
  v1 = WebKit::GPUProcess::audioSessionManager(*(WebKit::GPUProcess **)(v4 + 72));
  v2 = v4;
  v4 = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 16));
  return v1;
}

WebKit::RemoteAudioSessionProxy *WebKit::RemoteAudioSessionProxy::setCategory(WebKit::RemoteAudioSessionProxy *result, int a2, int a3, int a4)
{
  WebKit::RemoteAudioSessionProxyManager *v4;

  if (*((unsigned __int8 *)result + 32) != a2
    || *((unsigned __int8 *)result + 33) != a3
    || *((unsigned __int8 *)result + 34) != a4
    || *((_BYTE *)result + 58))
  {
    *((_BYTE *)result + 32) = a2;
    *((_BYTE *)result + 33) = a3;
    *((_BYTE *)result + 34) = a4;
    *((_BYTE *)result + 58) = 0;
    v4 = (WebKit::RemoteAudioSessionProxyManager *)WebKit::RemoteAudioSessionProxy::audioSessionManager(result);
    return (WebKit::RemoteAudioSessionProxy *)WebKit::RemoteAudioSessionProxyManager::updateCategory(v4);
  }
  return result;
}

WebCore::AudioSession *WebKit::RemoteAudioSessionProxyManager::updatePreferredBufferSizeForProcess(WebKit::RemoteAudioSessionProxyManager *this)
{
  WebCore::CoreAudioCaptureSourceFactory *v2;
  WebCore::CoreAudioCaptureSourceFactory *isAudioCaptureUnitRunning;
  unsigned int *v4;
  unsigned int v5;
  WebCore::AudioSession *v6;
  WebCore::AudioSession *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WebCore::AudioSession *v22;
  uint64_t v23;

  v2 = (WebCore::CoreAudioCaptureSourceFactory *)WebCore::CoreAudioCaptureSourceFactory::singleton(this);
  isAudioCaptureUnitRunning = (WebCore::CoreAudioCaptureSourceFactory *)WebCore::CoreAudioCaptureSourceFactory::isAudioCaptureUnitRunning(v2);
  if ((_DWORD)isAudioCaptureUnitRunning)
  {
    WebCore::CoreAudioCaptureSourceFactory::singleton(isAudioCaptureUnitRunning);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    if (v4)
    {
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
    }
    v6 = (WebCore::AudioSession *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v6 = &off_1E34B99E0;
    *((_QWORD *)v6 + 1) = v4;
    v22 = v6;
    WebCore::CoreAudioCaptureSourceFactory::whenAudioCaptureUnitIsNotRunning();
    result = v22;
    v22 = 0;
    if (result)
      return (WebCore::AudioSession *)(*(uint64_t (**)(WebCore::AudioSession *))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(&v22, (_QWORD **)this + 5);
    v8 = *((_QWORD *)this + 5);
    if (v8)
    {
      v9 = *(unsigned int *)(v8 - 4);
      v10 = v8 + 8 * v9;
    }
    else
    {
      v10 = 0;
      v9 = 0;
    }
    v17 = (char *)this + 40;
    v18 = v10;
    v19 = v10;
    v20 = v10;
    v21 = v8 + 8 * v9;
    result = (WebCore::AudioSession *)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v17);
    v11 = v23;
    v12 = v18;
    if (v23 != v18)
    {
      v13 = -1;
      do
      {
        v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 8) + 48);
        if (v14 < v13 && v14 != 0)
          v13 = v14;
        result = (WebCore::AudioSession *)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v22);
        v11 = v23;
      }
      while (v23 != v12);
      if (v13 != -1)
      {
        v16 = WebCore::AudioSession::sharedSession(result);
        return (WebCore::AudioSession *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v16 + 112))(v16, v13);
      }
    }
  }
  return result;
}

WTF::StringImpl *WebKit::RemoteAudioSessionProxy::tryToSetActive(uint64_t a1, int a2, uint64_t *a3)
{
  WTF *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  WebCore::AudioSession *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  WebCore::AudioSession *v17;
  WebCore::AudioSession *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  WebCore::AudioSession *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *i;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  int v41;
  _OWORD *v42;
  __int128 v43;
  _QWORD *v44;
  WebCore::AudioSession *v45;
  uint64_t v46;
  void *v47;
  WTF *v48;
  WebKit::RemoteAudioSessionProxyManager *v49;
  WTF *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  char v58;
  uint64_t v59;

  v6 = (WTF *)(WebKit::RemoteAudioSessionProxy::audioSessionManager((WebKit::RemoteAudioSessionProxy *)a1) + 40);
  if ((a2 & 1) != 0)
  {
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(&v56, (_QWORD **)v6);
    v7 = *(_QWORD **)v6;
    if (*(_QWORD *)v6)
    {
      v8 = *((unsigned int *)v7 - 1);
      v9 = &v7[v8];
    }
    else
    {
      v9 = 0;
      v8 = 0;
    }
    v51 = v6;
    v52 = v9;
    v53 = v9;
    v54 = v9;
    v55 = &v7[v8];
    v13 = (WebCore::AudioSession *)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v51);
    v14 = v57;
    v15 = v52;
    while (v14 != v15)
    {
      v16 = *(_QWORD *)(*v14 + 8);
      if (*(_BYTE *)(v16 + 56) && !*(_BYTE *)(v16 + 57))
      {
        if (*(_BYTE *)(a1 + 32) != 1)
        {
          WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(&v56, (_QWORD **)v6);
          v25 = *(_QWORD **)v6;
          if (*(_QWORD *)v6)
          {
            v26 = *((unsigned int *)v25 - 1);
            v27 = &v25[v26];
          }
          else
          {
            v27 = 0;
            v26 = 0;
          }
          v51 = v6;
          v52 = v27;
          v53 = v27;
          v54 = v27;
          v55 = &v25[v26];
          WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v51);
          v28 = v57;
          for (i = v52; v57 != i; v28 = v57)
          {
            v30 = *(_QWORD *)(*v28 + 8);
            WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(*(unsigned __int8 **)(v30 + 16), *(_QWORD *)(v30 + 24), &v59);
            v31 = v59;
            v32 = *(_QWORD *)(v59 + 80);
            v59 = 0;
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v31 + 16));
            WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(*(unsigned __int8 **)(a1 + 16), *(_QWORD *)(a1 + 24), &v59);
            v33 = v59;
            v34 = *(_QWORD *)(v59 + 80);
            v59 = 0;
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v33 + 16));
            if (v32 != v34 && *(_BYTE *)(v30 + 56) && *(_BYTE *)(v30 + 32) != 1)
            {
              *(_BYTE *)(v30 + 57) = 1;
              WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(*(unsigned __int8 **)(v30 + 16), *(_QWORD *)(v30 + 24), &v59);
              v35 = v59;
              v36 = *(_QWORD *)(v59 + 48);
              v59 = 0;
              WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v35 + 16));
              IPC::Connection::send<Messages::RemoteAudioSession::BeginInterruptionRemote>(v36);
            }
            WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v56);
          }
        }
        goto LABEL_35;
      }
      v13 = (WebCore::AudioSession *)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v56);
      v14 = v57;
    }
    v17 = (WebCore::AudioSession *)WebCore::AudioSession::sharedSession(v13);
    if ((WebCore::AudioSession::tryToSetActive(v17) & 1) == 0)
      goto LABEL_24;
  }
  else
  {
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(&v56, (_QWORD **)v6);
    v10 = *(_QWORD **)v6;
    if (*(_QWORD *)v6)
    {
      v11 = *((unsigned int *)v10 - 1);
      v12 = &v10[v11];
    }
    else
    {
      v12 = 0;
      v11 = 0;
    }
    v51 = v6;
    v52 = v12;
    v53 = v12;
    v54 = v12;
    v55 = &v10[v11];
    v18 = (WebCore::AudioSession *)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v51);
    v19 = v57;
    v20 = v52;
    while (v19 != v20)
    {
      v21 = *(_QWORD *)(*v19 + 8);
      if (v21 != a1 && *(_BYTE *)(v21 + 56) != 0)
        goto LABEL_35;
      v18 = (WebCore::AudioSession *)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v56);
      v19 = v57;
    }
    v23 = (WebCore::AudioSession *)WebCore::AudioSession::sharedSession(v18);
    if (!WebCore::AudioSession::tryToSetActive(v23))
    {
LABEL_24:
      v24 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v24 + 16))(v24, 0);
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      goto LABEL_39;
    }
  }
LABEL_35:
  v37 = *(unsigned __int8 *)(a1 + 56);
  *(_BYTE *)(a1 + 56) = a2;
  if (a2)
    *(_BYTE *)(a1 + 57) = 0;
  v38 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 16))(v38, 1);
  (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  if (v37 != a2)
    WebKit::RemoteAudioSessionProxy::configurationChanged((WebKit::RemoteAudioSessionProxy *)a1);
LABEL_39:
  v39 = WebKit::RemoteAudioSessionProxy::audioSessionManager((WebKit::RemoteAudioSessionProxy *)a1);
  if ((WebCore::PlatformMediaSessionManager::mediaCapabilityGrantsEnabled((WebCore::PlatformMediaSessionManager *)v39) & 1) == 0)
  {
    v51 = 0;
    v52 = 0;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v39 + 32) + 8) + 32) + 352))
    {
      xpc_connection_get_audit_token();
      v58 = 1;
      v40 = (_OWORD *)WTF::Vector<audit_token_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v51, 1uLL, (unint64_t)&v56);
      v41 = HIDWORD(v52);
      v42 = (_OWORD *)((char *)v51 + 32 * HIDWORD(v52));
      v43 = v40[1];
      *v42 = *v40;
      v42[1] = v43;
      HIDWORD(v52) = v41 + 1;
    }
    v44 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v44 = off_1E34B9A08;
    v44[1] = &v51;
    v56 = v44;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((unsigned int *)(v39 + 40), &v56);
    v45 = (WebCore::AudioSession *)(*(uint64_t (**)(_QWORD *))(*v44 + 8))(v44);
    v46 = WebCore::AudioSession::sharedSession(v45);
    (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v46 + 248))(v46, &v51);
    v48 = v51;
    if (v51)
    {
      v51 = 0;
      LODWORD(v52) = 0;
      WTF::fastFree(v48, v47);
    }
  }
  v49 = (WebKit::RemoteAudioSessionProxyManager *)WebKit::RemoteAudioSessionProxy::audioSessionManager((WebKit::RemoteAudioSessionProxy *)a1);
  return WebKit::RemoteAudioSessionProxyManager::updateSpatialExperience(v49);
}

WTF::StringImpl *WebKit::RemoteAudioSessionProxy::configurationChanged(WebKit::RemoteAudioSessionProxy *this)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *v6;
  WTF *v7;
  void *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11[7];
  WTF::StringImpl *v12;
  IPC::Encoder *v13;

  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(*((unsigned __int8 **)this + 2), *((_QWORD *)this + 3), v11);
  v2 = v11[0];
  v3 = *((_QWORD *)v11[0] + 6);
  v11[0] = 0;
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v2 + 2));
  WebKit::RemoteAudioSessionProxy::configuration(this, (uint64_t)v11);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 701;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v13 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<WebKit::RemoteAudioSessionConfiguration,void>::encode((IPC::Encoder *)v4, (uint64_t *)v11);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v13, 0, 0);
  v6 = v13;
  v13 = 0;
  if (v6)
  {
    IPC::Encoder::~Encoder(v6, v5);
    WTF::fastFree(v7, v8);
  }
  v9 = v12;
  v12 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  result = v11[0];
  v11[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::RemoteAudioSessionProxyManager::updateSpatialExperience(WebKit::RemoteAudioSessionProxyManager *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::AudioSession *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unsigned __int8 v10;
  unsigned __int8 *v11;
  unsigned int v12;
  uint64_t v13;
  WebCore::AudioSession *v14;
  uint64_t v15;
  unsigned __int8 v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *result;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;

  v26 = 0;
  v2 = (char *)this + 40;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(&v24, (_QWORD **)this + 5);
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    v5 = v3 + 8 * v4;
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v19 = v2;
  v20 = v5;
  v21 = v5;
  v22 = v5;
  v23 = v3 + 8 * v4;
  v6 = (WebCore::AudioSession *)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v19);
  v7 = v25;
  v8 = v20;
  if (v25 == v20)
  {
    v10 = 0;
    v9 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = *(unsigned __int8 **)(*(_QWORD *)v7 + 8);
      if (v11[56])
      {
        v12 = v11[35];
        if (v9 && v12 <= v10)
        {
          v9 = 1;
        }
        else
        {
          WTF::String::operator=(&v26, (WTF::StringImpl *)(v11 + 40));
          v9 = 1;
          v10 = v12;
        }
      }
      v6 = (WebCore::AudioSession *)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v24);
      v7 = v25;
    }
    while (v25 != v8);
  }
  v13 = WebCore::AudioSession::sharedSession(v6);
  v14 = (WebCore::AudioSession *)(*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v13 + 256))(v13, &v26);
  v15 = WebCore::AudioSession::sharedSession(v14);
  if (v9)
    v16 = v10;
  else
    v16 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 272))(v15, v16);
  result = v26;
  v26 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::RemoteAudioSession::BeginInterruptionRemote>(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  IPC::Encoder *result;
  WTF *v5;
  void *v6;
  IPC::Encoder *v7;

  v2 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v2 = 700;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 528) = v2 + 16;
  *(_QWORD *)(v2 + 536) = v2 + 16;
  *(_OWORD *)(v2 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v2 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v2);
  v7 = (IPC::Encoder *)v2;
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v7, 0, 0);
  result = v7;
  v7 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v3);
    return (IPC::Encoder *)WTF::fastFree(v5, v6);
  }
  return result;
}

uint64_t WebKit::RemoteAudioSessionProxy::beginInterruptionRemote(WebKit::RemoteAudioSessionProxy *this)
{
  WebCore::AudioSession *v1;
  uint64_t v2;

  v1 = (WebCore::AudioSession *)WebKit::RemoteAudioSessionProxy::audioSessionManager(this);
  v2 = WebCore::AudioSession::sharedSession(v1);
  (*(void (**)(uint64_t, WebCore::AudioSession *))(*(_QWORD *)v2 + 216))(v2, v1);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 168))(v2);
  return (*(uint64_t (**)(uint64_t, WebCore::AudioSession *))(*(_QWORD *)v2 + 208))(v2, v1);
}

uint64_t WebKit::RemoteAudioSessionProxy::endInterruptionRemote(WebKit::RemoteAudioSessionProxy *a1, uint64_t a2)
{
  WebCore::AudioSession *v3;
  uint64_t v4;

  v3 = (WebCore::AudioSession *)WebKit::RemoteAudioSessionProxy::audioSessionManager(a1);
  v4 = WebCore::AudioSession::sharedSession(v3);
  (*(void (**)(uint64_t, WebCore::AudioSession *))(*(_QWORD *)v4 + 216))(v4, v3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 176))(v4, a2);
  return (*(uint64_t (**)(uint64_t, WebCore::AudioSession *))(*(_QWORD *)v4 + 208))(v4, v3);
}

BOOL WebKit::RemoteAudioSessionProxy::allowTestOnlyIPC(WebKit::RemoteAudioSessionProxy *this)
{
  unsigned __int8 *v2;
  _BOOL8 v3;
  uint64_t v5;
  uint64_t v6;

  v2 = (unsigned __int8 *)*((_QWORD *)this + 2);
  if (!v2)
    return 0;
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v2, *((_QWORD *)this + 3), &v6);
  v5 = v6;
  if (!v6)
    return 0;
  v3 = *(_BYTE *)(v6 + 364) != 0;
  v6 = 0;
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v5 + 16));
  return v3;
}

unsigned __int8 *WebKit::RemoteAudioSessionProxy::triggerBeginInterruptionForTesting(WebKit::RemoteAudioSessionProxy *this)
{
  uint64_t v2;
  int v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned __int8 *result;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10[24];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(*((unsigned __int8 **)this + 2), *((_QWORD *)this + 3), v10);
  v2 = *(_QWORD *)v10;
  v3 = *(unsigned __int8 *)(*(_QWORD *)v10 + 364);
  *(_QWORD *)v10 = 0;
  v4 = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 16));
  if (v3)
  {
    v5 = WebCore::AudioSession::sharedSession((WebCore::AudioSession *)v4);
    return (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 184))(v5);
  }
  else
  {
    v7 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v10 = 136315138;
      *(_QWORD *)&v10[4] = "void WebKit::RemoteAudioSessionProxy::triggerBeginInterruptionForTesting()";
      _os_log_fault_impl(&dword_196BCC000, v7, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/media/RemoteAudioSessionProxy.cpp 185: Invalid message dispatched %s", v10, 0xCu);
    }
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(*((unsigned __int8 **)this + 2), *((_QWORD *)this + 3), v10);
    v8 = *(_QWORD *)v10;
    v9 = *(_QWORD *)(*(_QWORD *)v10 + 48);
    *(_QWORD *)v10 = 0;
    result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v8 + 16));
    *(_BYTE *)(v9 + 98) = 1;
  }
  return result;
}

unsigned __int8 *WebKit::RemoteAudioSessionProxy::triggerEndInterruptionForTesting(WebKit::RemoteAudioSessionProxy *this)
{
  uint64_t v2;
  int v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned __int8 *result;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10[24];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(*((unsigned __int8 **)this + 2), *((_QWORD *)this + 3), v10);
  v2 = *(_QWORD *)v10;
  v3 = *(unsigned __int8 *)(*(_QWORD *)v10 + 364);
  *(_QWORD *)v10 = 0;
  v4 = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 16));
  if (v3)
  {
    v5 = WebCore::AudioSession::sharedSession((WebCore::AudioSession *)v4);
    return (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 192))(v5);
  }
  else
  {
    v7 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v10 = 136315138;
      *(_QWORD *)&v10[4] = "void WebKit::RemoteAudioSessionProxy::triggerEndInterruptionForTesting()";
      _os_log_fault_impl(&dword_196BCC000, v7, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/media/RemoteAudioSessionProxy.cpp 191: Invalid message dispatched %s", v10, 0xCu);
    }
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(*((unsigned __int8 **)this + 2), *((_QWORD *)this + 3), v10);
    v8 = *(_QWORD *)v10;
    v9 = *(_QWORD *)(*(_QWORD *)v10 + 48);
    *(_QWORD *)v10 = 0;
    result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v8 + 16));
    *(_BYTE *)(v9 + 98) = 1;
  }
  return result;
}

void WebKit::RemoteAudioSessionProxyManager::~RemoteAudioSessionProxyManager(WebKit::RemoteAudioSessionProxyManager *this)
{
  char *v2;
  uint64_t v3;
  WebCore::AudioSession *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  *(_QWORD *)this = off_1E34B9630;
  *((_QWORD *)this + 2) = &unk_1E34B9680;
  v2 = (char *)this + 16;
  v3 = WebCore::AudioSession::sharedSession(this);
  v4 = (WebCore::AudioSession *)(*(uint64_t (**)(uint64_t, WebKit::RemoteAudioSessionProxyManager *))(*(_QWORD *)v3 + 216))(v3, this);
  v5 = WebCore::AudioSession::sharedSession(v4);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 128))(v5, v2);
  v7 = *((_QWORD *)this + 5);
  if (v7)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v7, v6);
  v8 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
  {
    do
    {
      v13 = __ldaxr(v8);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v8));
    if (!v14)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, v6);
    }
  }
  v9 = *((_QWORD *)this + 3);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (unsigned int *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, v6);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 3) = 0;
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v6);
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteAudioSessionProxyManager::~RemoteAudioSessionProxyManager(this);
  WTF::fastFree(v1, v2);
}

void `non-virtual thunk to'WebKit::RemoteAudioSessionProxyManager::~RemoteAudioSessionProxyManager(WebKit::RemoteAudioSessionProxyManager *this)
{
  WebKit::RemoteAudioSessionProxyManager::~RemoteAudioSessionProxyManager((WebKit::RemoteAudioSessionProxyManager *)((char *)this - 16));
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteAudioSessionProxyManager::~RemoteAudioSessionProxyManager((WebKit::RemoteAudioSessionProxyManager *)((char *)this - 16));
  WTF::fastFree(v1, v2);
}

unsigned int *WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::RemoteAudioSessionProxy>@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v18;
  int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  void *v23;
  unsigned int *result;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  WTF *v29;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 <= v6)
    goto LABEL_31;
  v8 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_26;
  v9 = *(_DWORD *)(v8 - 4);
  if (!v9)
  {
LABEL_25:
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_28;
  }
  v10 = 0;
  do
  {
    while (1)
    {
      v11 = *(_QWORD *)(v8 + 8 * --v9);
      if ((unint64_t)(v11 + 1) >= 2 && !*(_QWORD *)(v11 + 8))
        break;
      if (!v9)
        goto LABEL_14;
    }
    *(_QWORD *)(v8 + 8 * v9) = 0;
    do
    {
      v12 = __ldaxr((unsigned int *)v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, (unsigned int *)v11));
    if (!v13)
    {
      atomic_store(1u, (unsigned int *)v11);
      WTF::fastFree((WTF *)v11, a2);
    }
    *(_QWORD *)(v8 + 8 * v9) = -1;
    ++v10;
  }
  while (v9);
LABEL_14:
  v8 = *(_QWORD *)a1;
  if (v10)
  {
    *(_DWORD *)(v8 - 16) += v10;
    v14 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v15 = *(_DWORD *)(v14 - 12);
    else
      v15 = 0;
    *(_DWORD *)(v14 - 12) = v15 - v10;
    v8 = *(_QWORD *)a1;
  }
  if (!v8)
  {
LABEL_26:
    v18 = 0;
    *(_DWORD *)(a1 + 8) = 0;
LABEL_29:
    v19 = v18;
    goto LABEL_30;
  }
  v16 = *(_DWORD *)(v8 - 4);
  if (v16 < 9 || 6 * *(_DWORD *)(v8 - 12) >= v16)
    goto LABEL_25;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
  v8 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = 0;
  if (!v8)
  {
    v18 = 0;
    goto LABEL_29;
  }
LABEL_28:
  v18 = *(_DWORD *)(v8 - 12);
  v19 = 0x7FFFFFFF;
  if (v18 < 0x7FFFFFFF)
    goto LABEL_29;
LABEL_30:
  *(_DWORD *)(a1 + 12) = 2 * v19;
LABEL_31:
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a2 + 2, (uint64_t)a2);
  v20 = (unsigned int *)*((_QWORD *)a2 + 1);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 + 1, v20));
  do
    v22 = __ldaxr(v20);
  while (__stlxr(v22 + 1, v20));
  v29 = (WTF *)v20;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v29, a3);
  result = (unsigned int *)v29;
  v29 = 0;
  if (result)
  {
    do
    {
      v27 = __ldaxr(result);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, result));
    if (!v28)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v23);
    }
  }
  if (v20)
  {
    do
    {
      v25 = __ldaxr(v20);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v20));
    if (!v26)
    {
      atomic_store(1u, v20);
      return (unsigned int *)WTF::fastFree((WTF *)v20, v23);
    }
  }
  return result;
}

uint64_t WebKit::RemoteAudioSessionProxyManager::removeProxy(WebKit::RemoteAudioSessionProxyManager *this, WebKit::RemoteAudioSessionProxy *a2)
{
  uint64_t *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned int **v20;
  uint64_t v21;
  uint64_t v23;

  v4 = (uint64_t *)((char *)this + 40);
  v5 = *((_DWORD *)this + 13);
  v6 = *((_DWORD *)this + 12) + 1;
  *((_DWORD *)this + 12) = v6;
  if (v6 > v5)
  {
    v7 = *v4;
    if (*v4)
    {
      v8 = *(_DWORD *)(v7 - 4);
      if (!v8)
        goto LABEL_25;
      v9 = 0;
      do
      {
        while (1)
        {
          v10 = *(_QWORD *)(v7 + 8 * --v8);
          if ((unint64_t)(v10 + 1) >= 2 && !*(_QWORD *)(v10 + 8))
            break;
          if (!v8)
            goto LABEL_14;
        }
        *(_QWORD *)(v7 + 8 * v8) = 0;
        do
        {
          v11 = __ldaxr((unsigned int *)v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, (unsigned int *)v10));
        if (!v12)
        {
          atomic_store(1u, (unsigned int *)v10);
          WTF::fastFree((WTF *)v10, a2);
        }
        *(_QWORD *)(v7 + 8 * v8) = -1;
        ++v9;
      }
      while (v8);
LABEL_14:
      v7 = *v4;
      if (v9)
      {
        *(_DWORD *)(v7 - 16) += v9;
        v13 = *v4;
        if (*v4)
          v14 = *(_DWORD *)(v13 - 12);
        else
          v14 = 0;
        *(_DWORD *)(v13 - 12) = v14 - v9;
        v7 = *v4;
      }
      if (v7)
      {
        v15 = *(_DWORD *)(v7 - 4);
        if (v15 >= 9 && 6 * *(_DWORD *)(v7 - 12) < v15)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v4);
          v7 = *((_QWORD *)this + 5);
          *((_DWORD *)this + 12) = 0;
          if (!v7)
          {
            v17 = 0;
            goto LABEL_29;
          }
          goto LABEL_28;
        }
LABEL_25:
        *((_DWORD *)this + 12) = 0;
LABEL_28:
        v17 = *(_DWORD *)(v7 - 12);
        v18 = 0x7FFFFFFF;
        if (v17 >= 0x7FFFFFFF)
        {
LABEL_30:
          *((_DWORD *)this + 13) = 2 * v18;
          goto LABEL_31;
        }
LABEL_29:
        v18 = v17;
        goto LABEL_30;
      }
    }
    v17 = 0;
    *((_DWORD *)this + 12) = 0;
    goto LABEL_29;
  }
LABEL_31:
  v19 = *((_QWORD *)a2 + 1);
  if (v19 && *(_QWORD *)(v19 + 8))
  {
    v23 = *((_QWORD *)a2 + 1);
    v20 = (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(v4, &v23);
    if (*v4)
    {
      v21 = *v4 + 8 * *(unsigned int *)(*v4 - 4);
      if ((unsigned int **)v21 == v20)
        return WebKit::RemoteAudioSessionProxyManager::updateCategory(this);
    }
    else
    {
      if (!v20)
        return WebKit::RemoteAudioSessionProxyManager::updateCategory(this);
      v21 = 0;
    }
    if ((unsigned int **)v21 != v20)
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(v4, v20);
  }
  return WebKit::RemoteAudioSessionProxyManager::updateCategory(this);
}

unsigned int *WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(unsigned int *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  WTF *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  WTF *v17;
  unsigned int **v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;

  v3 = (uint64_t *)result;
  if (*(_QWORD *)result && (v4 = *(unsigned int *)(*(_QWORD *)result - 12), (_DWORD)v4))
  {
    if (v4 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v5 = (WTF *)WTF::fastMalloc((WTF *)(8 * v4));
  }
  else
  {
    v5 = 0;
  }
  result = (unsigned int *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)v3);
  v7 = result;
  v8 = v6;
  if (*v3)
    v9 = *v3 + 8 * *(unsigned int *)(*v3 - 4);
  else
    v9 = 0;
  if ((unsigned int *)v9 != result)
  {
    v10 = 0;
    v11 = 1;
    do
    {
      v12 = v11;
      v13 = *(_QWORD *)(*(_QWORD *)v7 + 8);
      if (v13)
      {
        result = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v13 + 8), *(_QWORD *)(*(_QWORD *)v7 + 8));
        v14 = *(unsigned int **)(v13 + 8);
        if (v14)
        {
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 + 1, v14));
        }
      }
      else
      {
        v14 = 0;
      }
      *((_QWORD *)v5 + v10) = v14;
      while (1)
      {
        v7 += 2;
        if (v7 == v8)
          break;
        if ((unint64_t)(*(_QWORD *)v7 + 1) > 1)
          goto LABEL_21;
      }
      v7 = v8;
LABEL_21:
      ++v10;
      v11 = v12 + 1;
    }
    while (v7 != (unsigned int *)v9);
    if (v10)
    {
      v16 = 8 * v12;
      v17 = v5;
      do
      {
        if (*(_QWORD *)v17)
        {
          if (*(_QWORD *)(*(_QWORD *)v17 + 8))
          {
            v21 = *(_QWORD *)v17;
            if (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(v3, &v21))(*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *(_QWORD *)(*(_QWORD *)v17 + 8));
          }
        }
        v17 = (WTF *)((char *)v17 + 8);
        v16 -= 8;
      }
      while (v16);
      v18 = (unsigned int **)v5;
      do
      {
        result = *v18;
        *v18 = 0;
        if (result)
        {
          do
          {
            v19 = __ldaxr(result);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, result));
          if (!v20)
          {
            atomic_store(1u, result);
            result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
          }
        }
        ++v18;
      }
      while (v18 != (unsigned int **)((char *)v5 + 8 * v10));
    }
  }
  if (v5)
    return (unsigned int *)WTF::fastFree(v5, v6);
  return result;
}

uint64_t WebKit::RemoteAudioSessionProxyManager::beginAudioSessionInterruption(WebKit::RemoteAudioSessionProxyManager *this)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v4;

  v1 = (unsigned int *)((char *)this + 40);
  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v2 = off_1E34B9A30;
  v4 = v2;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v1, &v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t WebKit::RemoteAudioSessionProxyManager::endAudioSessionInterruption(uint64_t a1, char a2)
{
  unsigned int *v3;
  _BYTE *v4;
  _BYTE *v6;

  v3 = (unsigned int *)(a1 + 40);
  v4 = (_BYTE *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v4 = off_1E34B9A58;
  v4[8] = a2;
  v6 = v4;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v3, &v6);
  return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t WebKit::RemoteAudioSessionProxyManager::configurationDidChange(WebKit::RemoteAudioSessionProxyManager *this, const WebCore::AudioSession *a2)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v5;

  v2 = (unsigned int *)((char *)this + 40);
  v3 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v3 = off_1E34B9A80;
  v5 = v3;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v2, &v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t `non-virtual thunk to'WebKit::RemoteAudioSessionProxyManager::hardwareMutedStateDidChange(WebKit::RemoteAudioSessionProxyManager *this, const WebCore::AudioSession *a2)
{
  return WebKit::RemoteAudioSessionProxyManager::configurationDidChange((WebKit::RemoteAudioSessionProxyManager *)((char *)this - 16), a2);
}

uint64_t `non-virtual thunk to'WebKit::RemoteAudioSessionProxyManager::bufferSizeDidChange(WebKit::RemoteAudioSessionProxyManager *this, const WebCore::AudioSession *a2)
{
  return WebKit::RemoteAudioSessionProxyManager::configurationDidChange((WebKit::RemoteAudioSessionProxyManager *)((char *)this - 16), a2);
}

uint64_t `non-virtual thunk to'WebKit::RemoteAudioSessionProxyManager::sampleRateDidChange(WebKit::RemoteAudioSessionProxyManager *this, const WebCore::AudioSession *a2)
{
  return WebKit::RemoteAudioSessionProxyManager::configurationDidChange((WebKit::RemoteAudioSessionProxyManager *)((char *)this - 16), a2);
}

uint64_t _ZN3WTF9HashTableINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS_12KeyValuePairIS6_NSt3__17variantIJNS8_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISD_NS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEENSC_INS2_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSC_INS2_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSC_INS2_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSC_INS2_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSC_INS2_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSC_INS2_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSC_INS2_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSC_INS2_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSC_INS2_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSC_INS2_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSC_INS2_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSC_INS2_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSC_INS2_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSC_INS2_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSC_INS2_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSC_INS2_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSC_INS2_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSC_INS2_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSC_INS2_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSC_INS2_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSC_INS2_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSC_INS2_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEEENS_24KeyValuePairKeyExtractorIS3O_EENS_11DefaultHashIS6_EENS_7HashMapIS6_S3N_S3S_NS_10HashTraitsIS6_EENS3U_IS3N_EENS_15HashTableTraitsEE18KeyValuePairTraitsES3V_E15deallocateTableEPS3O_(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1 + 8;
    do
    {
      if (*(_QWORD *)(v4 - 8) != -1)
      {
        v5 = *(unsigned int *)(v4 + 8);
        if ((_DWORD)v5 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v5])(&v7, v4);
        *(_DWORD *)(v4 + 8) = -1;
      }
      v4 += 24;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

unsigned int **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS3O_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEEEEDcS3Q_DpT0_(uint64_t a1, unsigned int **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteAdapter,WTF::RefPtr<WebKit::RemoteAdapter,WTF::RawPtrTraits<WebKit::RemoteAdapter>,WTF::DefaultRefDerefTraits<WebKit::RemoteAdapter>>>::~ScopedActiveMessageReceiveQueue(a2);
}

unsigned int **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS3O_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEEEEDcS3Q_DpT0_(uint64_t a1, unsigned int **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteBindGroup,WTF::RefPtr<WebKit::RemoteBindGroup,WTF::RawPtrTraits<WebKit::RemoteBindGroup>,WTF::DefaultRefDerefTraits<WebKit::RemoteBindGroup>>>::~ScopedActiveMessageReceiveQueue(a2);
}

unsigned int **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS3O_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEEEEDcS3Q_DpT0_(uint64_t a1, unsigned int **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteBindGroupLayout,WTF::RefPtr<WebKit::RemoteBindGroupLayout,WTF::RawPtrTraits<WebKit::RemoteBindGroupLayout>,WTF::DefaultRefDerefTraits<WebKit::RemoteBindGroupLayout>>>::~ScopedActiveMessageReceiveQueue(a2);
}

unsigned int **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS3O_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEEEEDcS3Q_DpT0_(uint64_t a1, unsigned int **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteBuffer,WTF::RefPtr<WebKit::RemoteBuffer,WTF::RawPtrTraits<WebKit::RemoteBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteBuffer>>>::~ScopedActiveMessageReceiveQueue(a2);
}

unsigned int **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS3O_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEEEEDcS3Q_DpT0_(uint64_t a1, unsigned int **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteCommandBuffer,WTF::RefPtr<WebKit::RemoteCommandBuffer,WTF::RawPtrTraits<WebKit::RemoteCommandBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteCommandBuffer>>>::~ScopedActiveMessageReceiveQueue(a2);
}

unsigned int **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS3O_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEEEEDcS3Q_DpT0_(uint64_t a1, unsigned int **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteCommandEncoder,WTF::RefPtr<WebKit::RemoteCommandEncoder,WTF::RawPtrTraits<WebKit::RemoteCommandEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteCommandEncoder>>>::~ScopedActiveMessageReceiveQueue(a2);
}

unsigned int **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS3O_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEEEEDcS3Q_DpT0_(uint64_t a1, unsigned int **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteCompositorIntegration,WTF::RefPtr<WebKit::RemoteCompositorIntegration,WTF::RawPtrTraits<WebKit::RemoteCompositorIntegration>,WTF::DefaultRefDerefTraits<WebKit::RemoteCompositorIntegration>>>::~ScopedActiveMessageReceiveQueue(a2);
}

unsigned int **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS3O_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEEEEDcS3Q_DpT0_(uint64_t a1, unsigned int **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteComputePassEncoder,WTF::RefPtr<WebKit::RemoteComputePassEncoder,WTF::RawPtrTraits<WebKit::RemoteComputePassEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteComputePassEncoder>>>::~ScopedActiveMessageReceiveQueue(a2);
}

unsigned int **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS3O_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEEEEDcS3Q_DpT0_(uint64_t a1, unsigned int **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteComputePipeline,WTF::RefPtr<WebKit::RemoteComputePipeline,WTF::RawPtrTraits<WebKit::RemoteComputePipeline>,WTF::DefaultRefDerefTraits<WebKit::RemoteComputePipeline>>>::~ScopedActiveMessageReceiveQueue(a2);
}

unsigned int **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS3O_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEEEEDcS3Q_DpT0_(uint64_t a1, unsigned int **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDevice,WTF::RefPtr<WebKit::RemoteDevice,WTF::RawPtrTraits<WebKit::RemoteDevice>,WTF::DefaultRefDerefTraits<WebKit::RemoteDevice>>>::~ScopedActiveMessageReceiveQueue(a2);
}

unsigned int **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS3O_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEEEEDcS3Q_DpT0_(uint64_t a1, unsigned int **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteExternalTexture,WTF::RefPtr<WebKit::RemoteExternalTexture,WTF::RawPtrTraits<WebKit::RemoteExternalTexture>,WTF::DefaultRefDerefTraits<WebKit::RemoteExternalTexture>>>::~ScopedActiveMessageReceiveQueue(a2);
}

unsigned int **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS3O_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEEEEDcS3Q_DpT0_(uint64_t a1, unsigned int **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemotePipelineLayout,WTF::RefPtr<WebKit::RemotePipelineLayout,WTF::RawPtrTraits<WebKit::RemotePipelineLayout>,WTF::DefaultRefDerefTraits<WebKit::RemotePipelineLayout>>>::~ScopedActiveMessageReceiveQueue(a2);
}

unsigned int **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS3O_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEEEEDcS3Q_DpT0_(uint64_t a1, unsigned int **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemotePresentationContext,WTF::RefPtr<WebKit::RemotePresentationContext,WTF::RawPtrTraits<WebKit::RemotePresentationContext>,WTF::DefaultRefDerefTraits<WebKit::RemotePresentationContext>>>::~ScopedActiveMessageReceiveQueue(a2);
}

unsigned int **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm14EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS3O_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEEEEDcS3Q_DpT0_(uint64_t a1, unsigned int **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteQuerySet,WTF::RefPtr<WebKit::RemoteQuerySet,WTF::RawPtrTraits<WebKit::RemoteQuerySet>,WTF::DefaultRefDerefTraits<WebKit::RemoteQuerySet>>>::~ScopedActiveMessageReceiveQueue(a2);
}

unsigned int **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm15EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS3O_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEEEEDcS3Q_DpT0_(uint64_t a1, unsigned int **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteQueue,WTF::RefPtr<WebKit::RemoteQueue,WTF::RawPtrTraits<WebKit::RemoteQueue>,WTF::DefaultRefDerefTraits<WebKit::RemoteQueue>>>::~ScopedActiveMessageReceiveQueue(a2);
}

unsigned int **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm16EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS3O_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEEEEDcS3Q_DpT0_(uint64_t a1, unsigned int **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderBundleEncoder,WTF::RefPtr<WebKit::RemoteRenderBundleEncoder,WTF::RawPtrTraits<WebKit::RemoteRenderBundleEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderBundleEncoder>>>::~ScopedActiveMessageReceiveQueue(a2);
}

unsigned int **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm17EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS3O_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEEEEDcS3Q_DpT0_(uint64_t a1, unsigned int **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderBundle,WTF::RefPtr<WebKit::RemoteRenderBundle,WTF::RawPtrTraits<WebKit::RemoteRenderBundle>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderBundle>>>::~ScopedActiveMessageReceiveQueue(a2);
}

unsigned int **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm18EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS3O_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEEEEDcS3Q_DpT0_(uint64_t a1, unsigned int **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderPassEncoder,WTF::RefPtr<WebKit::RemoteRenderPassEncoder,WTF::RawPtrTraits<WebKit::RemoteRenderPassEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderPassEncoder>>>::~ScopedActiveMessageReceiveQueue(a2);
}

unsigned int **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm19EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS3O_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEEEEDcS3Q_DpT0_(uint64_t a1, unsigned int **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderPipeline,WTF::RefPtr<WebKit::RemoteRenderPipeline,WTF::RawPtrTraits<WebKit::RemoteRenderPipeline>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderPipeline>>>::~ScopedActiveMessageReceiveQueue(a2);
}

unsigned int **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm20EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS3O_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEEEEDcS3Q_DpT0_(uint64_t a1, unsigned int **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteSampler,WTF::RefPtr<WebKit::RemoteSampler,WTF::RawPtrTraits<WebKit::RemoteSampler>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampler>>>::~ScopedActiveMessageReceiveQueue(a2);
}

unsigned int **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm21EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS3O_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEEEEDcS3Q_DpT0_(uint64_t a1, unsigned int **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteShaderModule,WTF::RefPtr<WebKit::RemoteShaderModule,WTF::RawPtrTraits<WebKit::RemoteShaderModule>,WTF::DefaultRefDerefTraits<WebKit::RemoteShaderModule>>>::~ScopedActiveMessageReceiveQueue(a2);
}

unsigned int **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm22EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS3O_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEEEEDcS3Q_DpT0_(uint64_t a1, unsigned int **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteTexture,WTF::RefPtr<WebKit::RemoteTexture,WTF::RawPtrTraits<WebKit::RemoteTexture>,WTF::DefaultRefDerefTraits<WebKit::RemoteTexture>>>::~ScopedActiveMessageReceiveQueue(a2);
}

unsigned int **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm23EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS3O_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEEEEDcS3Q_DpT0_(uint64_t a1, unsigned int **a2)
{
  return IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteTextureView,WTF::RefPtr<WebKit::RemoteTextureView,WTF::RawPtrTraits<WebKit::RemoteTextureView>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextureView>>>::~ScopedActiveMessageReceiveQueue(a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteShaderModule::compilationInfo(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebGPU::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>> &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34B9778;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteShaderModule::compilationInfo(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebGPU::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34B9778;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteShaderModule::compilationInfo(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebGPU::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WTF::Ref<WebCore::WebGPU::CompilationInfo,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>> &&>::call(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  char v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  v2 = result;
  v3 = *a2;
  v16 = 0;
  v17 = 0;
  v4 = *(unsigned int *)(v3 + 20);
  if (!(_DWORD)v4)
  {
LABEL_9:
    v14 = *(_QWORD *)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v14 + 16))(v14, &v16);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return WTF::Vector<WebCore::TextRecognitionWordData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v15);
  }
  if (v4 < 0x5555556)
  {
    v5 = 48 * v4;
    v6 = WTF::fastMalloc((WTF *)(48 * v4));
    LODWORD(v17) = (v5 & 0xFFFFFFF0) / 0x30;
    v16 = v6;
    if (*(_DWORD *)(v3 + 20))
    {
      v7 = 0;
      v8 = (_OWORD *)(v6 + 16);
      do
      {
        v9 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v7);
        v10 = *(_DWORD **)(v9 + 8);
        if (v10)
          *v10 += 2;
        v11 = *(_BYTE *)(v9 + 16);
        *((_QWORD *)v8 - 2) = v10;
        v12 = *(_OWORD *)(v9 + 24);
        v13 = *(_OWORD *)(v9 + 40);
        *((_BYTE *)v8 - 8) = v11;
        *v8 = v12;
        v8[1] = v13;
        v8 += 3;
        ++v7;
      }
      while (v7 < *(unsigned int *)(v3 + 20));
      HIDWORD(v17) = v7;
    }
    goto LABEL_9;
  }
  __break(0xC471u);
  return result;
}

unsigned int **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteAdapter,WTF::RefPtr<WebKit::RemoteAdapter,WTF::RawPtrTraits<WebKit::RemoteAdapter>,WTF::DefaultRefDerefTraits<WebKit::RemoteAdapter>>>::~ScopedActiveMessageReceiveQueue(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteAdapter,WTF::RefPtr<WebKit::RemoteAdapter,WTF::RawPtrTraits<WebKit::RemoteAdapter>,WTF::DefaultRefDerefTraits<WebKit::RemoteAdapter>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteAdapter,WTF::RawPtrTraits<WebKit::RemoteAdapter>,WTF::DefaultRefDerefTraits<WebKit::RemoteAdapter>>>(a1);
    v2 = *a1;
    *a1 = 0;
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v2 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

unsigned int *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteAdapter,WTF::RefPtr<WebKit::RemoteAdapter,WTF::RawPtrTraits<WebKit::RemoteAdapter>,WTF::DefaultRefDerefTraits<WebKit::RemoteAdapter>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteAdapter,WTF::RawPtrTraits<WebKit::RemoteAdapter>,WTF::DefaultRefDerefTraits<WebKit::RemoteAdapter>>>(unsigned int **a1)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  IPC::StreamServerConnection::stopReceivingMessages(*((_QWORD *)*a1 + 4), 0x34u, *((_QWORD *)*a1 + 7));
  result = *a1;
  *a1 = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t *_ZN3WTF9HashTableINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS_12KeyValuePairIS6_NSt3__17variantIJNS8_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISD_NS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEENSC_INS2_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSC_INS2_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSC_INS2_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSC_INS2_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSC_INS2_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSC_INS2_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSC_INS2_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSC_INS2_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSC_INS2_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSC_INS2_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSC_INS2_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSC_INS2_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSC_INS2_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSC_INS2_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSC_INS2_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSC_INS2_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSC_INS2_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSC_INS2_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSC_INS2_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSC_INS2_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSC_INS2_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSC_INS2_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEEENS_24KeyValuePairKeyExtractorIS3O_EENS_11DefaultHashIS6_EENS_7HashMapIS6_S3N_S3S_NS_10HashTraitsIS6_EENS3U_IS3N_EENS_15HashTableTraitsEE18KeyValuePairTraitsES3V_E6expandEPS3O_(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return _ZN3WTF9HashTableINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS_12KeyValuePairIS6_NSt3__17variantIJNS8_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISD_NS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEENSC_INS2_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSC_INS2_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSC_INS2_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSC_INS2_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSC_INS2_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSC_INS2_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSC_INS2_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSC_INS2_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSC_INS2_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSC_INS2_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSC_INS2_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSC_INS2_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSC_INS2_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSC_INS2_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSC_INS2_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSC_INS2_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSC_INS2_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSC_INS2_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSC_INS2_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSC_INS2_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSC_INS2_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSC_INS2_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEEENS_24KeyValuePairKeyExtractorIS3O_EENS_11DefaultHashIS6_EENS_7HashMapIS6_S3N_S3S_NS_10HashTraitsIS6_EENS3U_IS3N_EENS_15HashTableTraitsEE18KeyValuePairTraitsES3V_E6rehashEjPS3O_(a1, v5, a2);
}

uint64_t *_ZN3WTF9HashTableINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS_12KeyValuePairIS6_NSt3__17variantIJNS8_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISD_NS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEENSC_INS2_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSC_INS2_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSC_INS2_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSC_INS2_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSC_INS2_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSC_INS2_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSC_INS2_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSC_INS2_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSC_INS2_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSC_INS2_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSC_INS2_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSC_INS2_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSC_INS2_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSC_INS2_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSC_INS2_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSC_INS2_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSC_INS2_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSC_INS2_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSC_INS2_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSC_INS2_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSC_INS2_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSC_INS2_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEEENS_24KeyValuePairKeyExtractorIS3O_EENS_11DefaultHashIS6_EENS_7HashMapIS6_S3N_S3S_NS_10HashTraitsIS6_EENS3U_IS3N_EENS_15HashTableTraitsEE18KeyValuePairTraitsES3V_E6rehashEjPS3O_(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *result;
  uint64_t *v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = (_DWORD *)(v7 + 32);
    do
    {
      *((_QWORD *)v10 - 2) = 0;
      *v10 = 0;
      v10 += 6;
      --v9;
    }
    while (v9);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    do
    {
      v14 = (uint64_t *)(v4 + 24 * v11);
      v15 = *v14;
      if (*v14 != -1)
      {
        if (v15)
        {
          v43 = v12;
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = (v15 + ~(v15 << 32)) ^ ((unint64_t)(v15 + ~(v15 << 32)) >> 22);
          v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
          v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
          v25 = v21 & ((v24 >> 31) ^ v24);
          v26 = 1;
          do
          {
            v27 = v25;
            v28 = (uint64_t *)(v20 + 24 * v25);
            v25 = (v25 + v26++) & v21;
          }
          while (*v28);
          v29 = v27;
          v30 = v20 + 24 * v27;
          v33 = *(_DWORD *)(v30 + 16);
          v32 = (_DWORD *)(v30 + 16);
          v31 = v33;
          if (v33 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v31])(&v45, v20 + 24 * v27 + 8);
          *v32 = -1;
          *v28 = *v14;
          v34 = v20 + 24 * v29;
          *(_BYTE *)(v34 + 8) = 0;
          v35 = v34 + 8;
          v36 = v4 + 24 * v11;
          *(_DWORD *)(v35 + 8) = -1;
          v37 = *(unsigned int *)(v36 + 16);
          if ((_DWORD)v37 != -1)
          {
            v38 = v36 + 8;
            ((void (*)(char *, uint64_t, uint64_t))off_1E34B9790[v37])(&v47, v35, v36 + 8);
            *(_DWORD *)(v35 + 8) = v37;
            v39 = *(unsigned int *)(v4 + 24 * v11 + 16);
            if ((_DWORD)v39 != -1)
              ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v39])(&v46, v38);
          }
          *(_DWORD *)(v4 + 24 * v11 + 16) = -1;
          v12 = v43;
          if (v14 == a3)
            v12 = v28;
        }
        else
        {
          v16 = v4 + 24 * v11;
          v19 = *(_DWORD *)(v16 + 16);
          v18 = (_DWORD *)(v16 + 16);
          v17 = v19;
          if (v19 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v17])(&v44, v4 + 24 * v11 + 8);
          *v18 = -1;
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS3N_LNS0_6_TraitE1EEEEEvRS3O_OT_EUlRS3U_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS42_EEEDcS3U_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS3N_LNS0_6_TraitE1EEEEEvRS3O_OT_EUlRS3U_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS42_EEEDcS3U_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS3N_LNS0_6_TraitE1EEEEEvRS3O_OT_EUlRS3U_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS42_EEEDcS3U_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS3N_LNS0_6_TraitE1EEEEEvRS3O_OT_EUlRS3U_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS42_EEEDcS3U_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS3N_LNS0_6_TraitE1EEEEEvRS3O_OT_EUlRS3U_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS42_EEEDcS3U_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS3N_LNS0_6_TraitE1EEEEEvRS3O_OT_EUlRS3U_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS42_EEEDcS3U_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS3N_LNS0_6_TraitE1EEEEEvRS3O_OT_EUlRS3U_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS42_EEEDcS3U_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS3N_LNS0_6_TraitE1EEEEEvRS3O_OT_EUlRS3U_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS42_EEEDcS3U_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS3N_LNS0_6_TraitE1EEEEEvRS3O_OT_EUlRS3U_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS42_EEEDcS3U_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS3N_LNS0_6_TraitE1EEEEEvRS3O_OT_EUlRS3U_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS42_EEEDcS3U_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11ELm11EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS3N_LNS0_6_TraitE1EEEEEvRS3O_OT_EUlRS3U_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS42_EEEDcS3U_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12ELm12EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS3N_LNS0_6_TraitE1EEEEEvRS3O_OT_EUlRS3U_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS42_EEEDcS3U_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13ELm13EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS3N_LNS0_6_TraitE1EEEEEvRS3O_OT_EUlRS3U_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS42_EEEDcS3U_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm14ELm14EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS3N_LNS0_6_TraitE1EEEEEvRS3O_OT_EUlRS3U_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS42_EEEDcS3U_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm15ELm15EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS3N_LNS0_6_TraitE1EEEEEvRS3O_OT_EUlRS3U_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS42_EEEDcS3U_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm16ELm16EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS3N_LNS0_6_TraitE1EEEEEvRS3O_OT_EUlRS3U_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS42_EEEDcS3U_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm17ELm17EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS3N_LNS0_6_TraitE1EEEEEvRS3O_OT_EUlRS3U_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS42_EEEDcS3U_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm18ELm18EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS3N_LNS0_6_TraitE1EEEEEvRS3O_OT_EUlRS3U_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS42_EEEDcS3U_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm19ELm19EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS3N_LNS0_6_TraitE1EEEEEvRS3O_OT_EUlRS3U_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS42_EEEDcS3U_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm20ELm20EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS3N_LNS0_6_TraitE1EEEEEvRS3O_OT_EUlRS3U_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS42_EEEDcS3U_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm21ELm21EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS3N_LNS0_6_TraitE1EEEEEvRS3O_OT_EUlRS3U_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS42_EEEDcS3U_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm22ELm22EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS3N_LNS0_6_TraitE1EEEEEvRS3O_OT_EUlRS3U_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS42_EEEDcS3U_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm23ELm23EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS3N_LNS0_6_TraitE1EEEEEvRS3O_OT_EUlRS3U_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS42_EEEDcS3U_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS3N_LNS0_6_TraitE1EEEEEvOT_EUlRS3T_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS41_EEEDcS3T_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS3N_LNS0_6_TraitE1EEEEEvOT_EUlRS3T_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS41_EEEDcS3T_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  char v11;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_12;
  if ((_DWORD)v5 != 1)
  {
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v5])(&v11, v4);
LABEL_12:
    *(_QWORD *)v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2)
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteAdapter,WTF::RefPtr<WebKit::RemoteAdapter,WTF::RawPtrTraits<WebKit::RemoteAdapter>,WTF::DefaultRefDerefTraits<WebKit::RemoteAdapter>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteAdapter,WTF::RawPtrTraits<WebKit::RemoteAdapter>,WTF::DefaultRefDerefTraits<WebKit::RemoteAdapter>>>(a2);
    v7 = *a3;
    *a3 = 0;
    result = *a2;
    *a2 = v7;
    if (result)
    {
      v8 = result + 2;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS3N_LNS0_6_TraitE1EEEEEvOT_EUlRS3T_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS41_EEEDcS3T_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  char v11;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_12;
  if ((_DWORD)v5 != 2)
  {
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v5])(&v11, v4);
LABEL_12:
    *(_QWORD *)v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 2;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2)
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteBindGroup,WTF::RefPtr<WebKit::RemoteBindGroup,WTF::RawPtrTraits<WebKit::RemoteBindGroup>,WTF::DefaultRefDerefTraits<WebKit::RemoteBindGroup>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteBindGroup,WTF::RawPtrTraits<WebKit::RemoteBindGroup>,WTF::DefaultRefDerefTraits<WebKit::RemoteBindGroup>>>(a2);
    v7 = *a3;
    *a3 = 0;
    result = *a2;
    *a2 = v7;
    if (result)
    {
      v8 = result + 2;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS3N_LNS0_6_TraitE1EEEEEvOT_EUlRS3T_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS41_EEEDcS3T_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  char v11;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_12;
  if ((_DWORD)v5 != 3)
  {
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v5])(&v11, v4);
LABEL_12:
    *(_QWORD *)v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 3;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2)
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteBindGroupLayout,WTF::RefPtr<WebKit::RemoteBindGroupLayout,WTF::RawPtrTraits<WebKit::RemoteBindGroupLayout>,WTF::DefaultRefDerefTraits<WebKit::RemoteBindGroupLayout>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteBindGroupLayout,WTF::RawPtrTraits<WebKit::RemoteBindGroupLayout>,WTF::DefaultRefDerefTraits<WebKit::RemoteBindGroupLayout>>>(a2);
    v7 = *a3;
    *a3 = 0;
    result = *a2;
    *a2 = v7;
    if (result)
    {
      v8 = result + 2;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS3N_LNS0_6_TraitE1EEEEEvOT_EUlRS3T_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS41_EEEDcS3T_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  char v11;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_12;
  if ((_DWORD)v5 != 4)
  {
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v5])(&v11, v4);
LABEL_12:
    *(_QWORD *)v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 4;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2)
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteBuffer,WTF::RefPtr<WebKit::RemoteBuffer,WTF::RawPtrTraits<WebKit::RemoteBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteBuffer>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteBuffer,WTF::RawPtrTraits<WebKit::RemoteBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteBuffer>>>(a2);
    v7 = *a3;
    *a3 = 0;
    result = *a2;
    *a2 = v7;
    if (result)
    {
      v8 = result + 2;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS3N_LNS0_6_TraitE1EEEEEvOT_EUlRS3T_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS41_EEEDcS3T_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  char v11;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_12;
  if ((_DWORD)v5 != 5)
  {
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v5])(&v11, v4);
LABEL_12:
    *(_QWORD *)v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 5;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2)
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteCommandBuffer,WTF::RefPtr<WebKit::RemoteCommandBuffer,WTF::RawPtrTraits<WebKit::RemoteCommandBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteCommandBuffer>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteCommandBuffer,WTF::RawPtrTraits<WebKit::RemoteCommandBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteCommandBuffer>>>(a2);
    v7 = *a3;
    *a3 = 0;
    result = *a2;
    *a2 = v7;
    if (result)
    {
      v8 = result + 2;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS3N_LNS0_6_TraitE1EEEEEvOT_EUlRS3T_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS41_EEEDcS3T_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  char v11;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_12;
  if ((_DWORD)v5 != 6)
  {
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v5])(&v11, v4);
LABEL_12:
    *(_QWORD *)v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 6;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2)
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteCommandEncoder,WTF::RefPtr<WebKit::RemoteCommandEncoder,WTF::RawPtrTraits<WebKit::RemoteCommandEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteCommandEncoder>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteCommandEncoder,WTF::RawPtrTraits<WebKit::RemoteCommandEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteCommandEncoder>>>(a2);
    v7 = *a3;
    *a3 = 0;
    result = *a2;
    *a2 = v7;
    if (result)
    {
      v8 = result + 2;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS3N_LNS0_6_TraitE1EEEEEvOT_EUlRS3T_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS41_EEEDcS3T_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  char v11;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_12;
  if ((_DWORD)v5 != 7)
  {
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v5])(&v11, v4);
LABEL_12:
    *(_QWORD *)v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 7;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2)
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteCompositorIntegration,WTF::RefPtr<WebKit::RemoteCompositorIntegration,WTF::RawPtrTraits<WebKit::RemoteCompositorIntegration>,WTF::DefaultRefDerefTraits<WebKit::RemoteCompositorIntegration>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteCompositorIntegration,WTF::RawPtrTraits<WebKit::RemoteCompositorIntegration>,WTF::DefaultRefDerefTraits<WebKit::RemoteCompositorIntegration>>>(a2);
    v7 = *a3;
    *a3 = 0;
    result = *a2;
    *a2 = v7;
    if (result)
    {
      v8 = result + 2;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

