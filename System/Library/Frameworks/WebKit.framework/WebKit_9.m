id *std::unique_ptr<WebPushD::ApplePushServiceConnection>::reset[abi:sn180100](id **a1)
{
  id *result;
  WTF *v3;
  void *v4;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    WebPushD::ApplePushServiceConnection::~ApplePushServiceConnection(result);
    return (id *)WTF::fastFree(v3, v4);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(_QWORD *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = a1;
  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    do
    {
      if (*a1 != -1)
        a1 = (_QWORD *)WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>::~KeyValuePair((uint64_t)a1, a2);
      a1 += 5;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(v2 - 2), a2);
}

uint64_t WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>::~KeyValuePair(uint64_t a1, void *a2)
{
  unint64_t v3;
  unint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(WTF **)(a1 + 24);
  if (v3 <= v4)
  {
    if (v3 == v4)
      goto LABEL_20;
    v12 = (uint64_t *)((char *)v5 + 8 * v3);
    v13 = 8 * v4 - 8 * v3;
    do
    {
      v14 = *v12;
      *v12 = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  else
  {
    if (v4)
    {
      v6 = 8 * v4;
      do
      {
        v7 = *(_QWORD *)v5;
        *(_QWORD *)v5 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        v5 = (WTF *)((char *)v5 + 8);
        v6 -= 8;
      }
      while (v6);
      v5 = *(WTF **)(a1 + 24);
      v3 = *(_QWORD *)(a1 + 8);
    }
    v8 = *(unsigned int *)(a1 + 32);
    if (v3 != v8)
    {
      v9 = (uint64_t *)((char *)v5 + 8 * v3);
      v10 = 8 * v8 - 8 * v3;
      do
      {
        v11 = *v9;
        *v9 = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        ++v9;
        v10 -= 8;
      }
      while (v10);
    }
  }
  v5 = *(WTF **)(a1 + 24);
LABEL_20:
  if (v5)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v5, a2);
  }
  v15 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  return a1;
}

uint64_t std::unique_ptr<WebCore::PushDatabase>::reset[abi:sn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    v4 = (WTF *)MEMORY[0x19AEAD768]();
    return WTF::fastFree(v4, v5);
  }
  return result;
}

void WebPushD::PushServiceRequest::~PushServiceRequest(WebPushD::PushServiceRequest *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *(_QWORD *)this = off_1E34B2AD0;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore20PushSubscriptionDataEEENS9_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, void *a2)
{
  return std::__optional_destruct_base<WebCore::PushSubscriptionData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore20PushSubscriptionDataEEENS9_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::PushSubscriptionData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF *v3;
  WTF *v4;
  WTF *v5;
  WTF::StringImpl *v6;

  if (*(_BYTE *)(a1 + 80))
  {
    v3 = *(WTF **)(a1 + 64);
    if (v3)
    {
      *(_QWORD *)(a1 + 64) = 0;
      *(_DWORD *)(a1 + 72) = 0;
      WTF::fastFree(v3, a2);
    }
    v4 = *(WTF **)(a1 + 48);
    if (v4)
    {
      *(_QWORD *)(a1 + 48) = 0;
      *(_DWORD *)(a1 + 56) = 0;
      WTF::fastFree(v4, a2);
    }
    v5 = *(WTF **)(a1 + 32);
    if (v5)
    {
      *(_QWORD *)(a1 + 32) = 0;
      *(_DWORD *)(a1 + 40) = 0;
      WTF::fastFree(v5, a2);
    }
    v6 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore20PushSubscriptionDataENS8_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF *v3;
  WTF *v4;
  WTF *v5;
  WTF::StringImpl *result;

  v3 = *(WTF **)(a2 + 64);
  if (v3)
  {
    *(_QWORD *)(a2 + 64) = 0;
    *(_DWORD *)(a2 + 72) = 0;
    WTF::fastFree(v3, (void *)a2);
  }
  v4 = *(WTF **)(a2 + 48);
  if (v4)
  {
    *(_QWORD *)(a2 + 48) = 0;
    *(_DWORD *)(a2 + 56) = 0;
    WTF::fastFree(v4, (void *)a2);
  }
  v5 = *(WTF **)(a2 + 32);
  if (v5)
  {
    *(_QWORD *)(a2 + 32) = 0;
    *(_DWORD *)(a2 + 40) = 0;
    WTF::fastFree(v5, (void *)a2);
  }
  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore20PushSubscriptionDataENS8_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJbN7WebCore13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJbS9_EEEEEEDcSD_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebPushD::base64URLDecode(WebPushD *this, NSString *a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;

  MEMORY[0x19AEABCC8](&v4, a2);
  WTF::base64Decode();
  result = v4;
  v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_196F972D8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<WebPushD::RawPushMessage,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF *v3;
  WTF *v4;
  WTF *v5;
  WTF::StringImpl *v6;

  if (*(_BYTE *)(a1 + 64))
  {
    v3 = *(WTF **)(a1 + 48);
    if (v3)
    {
      *(_QWORD *)(a1 + 48) = 0;
      *(_DWORD *)(a1 + 56) = 0;
      WTF::fastFree(v3, a2);
    }
    v4 = *(WTF **)(a1 + 32);
    if (v4)
    {
      *(_QWORD *)(a1 + 32) = 0;
      *(_DWORD *)(a1 + 40) = 0;
      WTF::fastFree(v4, a2);
    }
    v5 = *(WTF **)(a1 + 16);
    if (v5)
    {
      *(_QWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = 0;
      WTF::fastFree(v5, a2);
    }
    v6 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

void WebPushD::PushServiceRequestImpl<std::optional<WebCore::PushSubscriptionData>>::~PushServiceRequestImpl(WebPushD::PushServiceRequest *this, WTF::StringImpl *a2)
{
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E34B2B38;
  v3 = (void *)*((_QWORD *)this + 11);
  if (v3)

  v4 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WebPushD::PushServiceRequest::~PushServiceRequest(this, a2);
}

void WebPushD::PushServiceRequestImpl<BOOL>::~PushServiceRequestImpl(WebPushD::PushServiceRequest *this, WTF::StringImpl *a2)
{
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E34B2B78;
  v3 = (void *)*((_QWORD *)this + 11);
  if (v3)

  v4 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WebPushD::PushServiceRequest::~PushServiceRequest(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::PushService::create(WTF::String const&,WTF::String const&,WTF::Function<void ()(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)> &&,WTF::CompletionHandler<void ()(std::unique_ptr<WebPushD::PushService,WTF::Function<void ()(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)> &&::default_delete<WebPushD::PushService>> &&)> &&)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  void *v5;
  WTF::StringImpl *v6;

  *(_QWORD *)a1 = off_1E34B2BB8;
  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::unique_ptr<WebPushD::ApplePushServiceConnection>::reset[abi:sn180100]((id **)(a1 + 24));
  v5 = *(void **)(a1 + 16);
  if (v5)

  v6 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  return a1;
}

{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  void *v5;
  WTF::StringImpl *v6;

  *(_QWORD *)a1 = off_1E34B2BB8;
  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::unique_ptr<WebPushD::ApplePushServiceConnection>::reset[abi:sn180100]((id **)(a1 + 24));
  v5 = *(void **)(a1 + 16);
  if (v5)

  v6 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  return WTF::fastFree((WTF *)a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::PushService::create(WTF::String const&,WTF::String const&,WTF::Function<void ()(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)> &&,WTF::CompletionHandler<void ()(std::unique_ptr<WebPushD::PushService,WTF::Function<void ()(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)> &&::default_delete<WebPushD::PushService>> &&)> &&)::$_0,void>::call(_QWORD *a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;

  v2 = (void *)a1[2];
  if (v2)
    v3 = v2;
  v4 = a1[3];
  v5 = a1[4];
  a1[3] = 0;
  a1[4] = 0;
  v6 = a1[5];
  a1[5] = 0;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v7 = off_1E34B2BE0;
  v7[1] = v2;
  v7[2] = v4;
  v7[3] = v5;
  v7[4] = v6;
  v9 = v7;
  WebCore::PushDatabase::create();
  result = (uint64_t)v9;
  if (v9)
    return (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  return result;
}

void sub_196F97600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN8WebPushD11PushService6createERKNS_6StringES6_ONS_8FunctionIFvRKN7WebCore29PushSubscriptionSetIdentifierEON6WebKit14WebPushMessageEEEEONS_17CompletionHandlerIFvONSt3__110unique_ptrIS3_NSJ_14default_deleteIS3_EEEEEEEEN3__0clEvEUlOT_E_vJONSK_INS8_12PushDatabaseENSL_ISW_EEEEEED1Ev(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)a1 = off_1E34B2BE0;
  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::unique_ptr<WebPushD::ApplePushServiceConnection>::reset[abi:sn180100]((id **)(a1 + 16));
  v4 = *(void **)(a1 + 8);
  if (v4)

  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN8WebPushD11PushService6createERKNS_6StringES6_ONS_8FunctionIFvRKN7WebCore29PushSubscriptionSetIdentifierEON6WebKit14WebPushMessageEEEEONS_17CompletionHandlerIFvONSt3__110unique_ptrIS3_NSJ_14default_deleteIS3_EEEEEEEEN3__0clEvEUlOT_E_vJONSK_INS8_12PushDatabaseENSL_ISW_EEEEEED0Ev(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  *(_QWORD *)a1 = off_1E34B2BE0;
  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::unique_ptr<WebPushD::ApplePushServiceConnection>::reset[abi:sn180100]((id **)(a1 + 16));
  v5 = *(void **)(a1 + 8);
  if (v5)

  return WTF::fastFree((WTF *)a1, v4);
}

WebPushD::PushService *_ZN3WTF6Detail15CallableWrapperIZZN8WebPushD11PushService6createERKNS_6StringES6_ONS_8FunctionIFvRKN7WebCore29PushSubscriptionSetIdentifierEON6WebKit14WebPushMessageEEEEONS_17CompletionHandlerIFvONSt3__110unique_ptrIS3_NSJ_14default_deleteIS3_EEEEEEEEN3__0clEvEUlOT_E_vJONSK_INS8_12PushDatabaseENSL_ISW_EEEEEE4callESZ_(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  _QWORD *v11;
  WebPushD::PushService *result;
  WTF *v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  uint8_t buf[8];

  v3 = *a2;
  if (*a2)
  {
    *a2 = 0;
    *(_QWORD *)buf = v3;
    v4 = (uint64_t *)WTF::fastMalloc((WTF *)0x30);
    v5 = a1[2];
    a1[2] = 0;
    v18 = (_QWORD *)v5;
    WebPushD::PushService::PushService(v4, (uint64_t *)&v18, (uint64_t *)buf, a1 + 3);
    if (v18)
      (*(void (**)(_QWORD *))(*v18 + 8))(v18);
    v6 = *v4;
    v7 = v4[1];
    v8 = (void *)a1[1];
    if (v8)
      v9 = v8;
    v10 = a1[4];
    a1[4] = 0;
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v11 = off_1E34B2C30;
    v11[1] = v8;
    v11[2] = v4;
    v11[3] = v10;
    v18 = v11;
    WebPushD::updateTopicLists(v6, v7, (uint64_t *)&v18);
    if (v18)
      (*(void (**)(_QWORD *))(*v18 + 8))(v18);
    result = *(WebPushD::PushService **)buf;
    if (*(_QWORD *)buf)
    {
      v13 = (WTF *)MEMORY[0x19AEAD768]();
      return (WebPushD::PushService *)WTF::fastFree(v13, v14);
    }
  }
  else
  {
    v15 = qword_1ECE716B8;
    if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_196BCC000, v15, OS_LOG_TYPE_ERROR, "Push service initialization failed with database error", buf, 2u);
    }
    *(_QWORD *)buf = 0;
    v16 = a1[4];
    a1[4] = 0;
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v16 + 16))(v16, buf);
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    result = *(WebPushD::PushService **)buf;
    *(_QWORD *)buf = 0;
    if (result)
    {
      WebPushD::PushService::~PushService(result, v17);
      return (WebPushD::PushService *)WTF::fastFree(v13, v14);
    }
  }
  return result;
}

void sub_196F978CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WebPushD::PushService *a11)
{
  uint64_t v11;
  void *v13;
  WTF *v14;
  void *v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (a11)
  {
    WebPushD::PushService::~PushService(a11, v13);
    WTF::fastFree(v14, v15);
  }
  _Unwind_Resume(a1);
}

uint64_t WebPushD::updateTopicLists(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;

  v4 = *a3;
  *a3 = 0;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v5 = &off_1E34B2C08;
  v5[1] = a1;
  v5[2] = v4;
  v7 = v5;
  WebCore::PushDatabase::getTopics();
  result = (uint64_t)v7;
  if (v7)
    return (*(uint64_t (**)(_QWORD *))(*v7 + 8))(v7);
  return result;
}

void sub_196F97A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

WebPushD::PushService *std::unique_ptr<WebPushD::PushService>::reset[abi:sn180100](WebPushD::PushService **a1, WebPushD::PushService *a2)
{
  WebPushD::PushService *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebPushD::PushService::~PushService(result, a2);
    return (WebPushD::PushService *)WTF::fastFree(v4, v5);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebPushD::updateTopicLists(WebPushD::PushServiceConnection &,WebCore::PushDatabase &,WTF::CompletionHandler<void ()(void)>)::$_0,void,WebCore::PushTopics &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34B2C08;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::updateTopicLists(WebPushD::PushServiceConnection &,WebCore::PushDatabase &,WTF::CompletionHandler<void ()(void)>)::$_0,void,WebCore::PushTopics &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34B2C08;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::updateTopicLists(WebPushD::PushServiceConnection &,WebCore::PushDatabase &,WTF::CompletionHandler<void ()(void)>)::$_0,void,WebCore::PushTopics &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD v13[2];
  _QWORD v14[2];
  __int128 v15;
  __int128 v16;

  v15 = 0u;
  v16 = 0u;
  v3 = *a2;
  *a2 = 0;
  v13[0] = v3;
  v4 = a2[1];
  a2[1] = 0;
  v13[1] = v4;
  v5 = a2[2];
  a2[2] = 0;
  v14[0] = v5;
  v6 = a2[3];
  a2[3] = 0;
  v14[1] = v6;
  (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8), v13);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v8);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v9);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v14, v10);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v13, v11);
}

void sub_196F97BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a15, v19);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v15, v20);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v16, v21);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v22);
  _Unwind_Resume(a1);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN8WebPushD11PushService6createERKNS_6StringES6_ONS_8FunctionIFvRKN7WebCore29PushSubscriptionSetIdentifierEON6WebKit14WebPushMessageEEEEONS_17CompletionHandlerIFvONSt3__110unique_ptrIS3_NSJ_14default_deleteIS3_EEEEEEEEN3__0clEvENUlOT_E_clINSK_INS8_12PushDatabaseENSL_ISX_EEEEEEDaSU_EUlvE_vJEED1Ev(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)a1 = off_1E34B2C30;
  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<WebPushD::PushService>::reset[abi:sn180100]((WebPushD::PushService **)(a1 + 16), 0);
  v3 = *(void **)(a1 + 8);
  if (v3)

  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN8WebPushD11PushService6createERKNS_6StringES6_ONS_8FunctionIFvRKN7WebCore29PushSubscriptionSetIdentifierEON6WebKit14WebPushMessageEEEEONS_17CompletionHandlerIFvONSt3__110unique_ptrIS3_NSJ_14default_deleteIS3_EEEEEEEEN3__0clEvENUlOT_E_clINSK_INS8_12PushDatabaseENSL_ISX_EEEEEEDaSU_EUlvE_vJEED0Ev(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = off_1E34B2C30;
  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<WebPushD::PushService>::reset[abi:sn180100]((WebPushD::PushService **)(a1 + 16), 0);
  v4 = *(void **)(a1 + 8);
  if (v4)

  return WTF::fastFree((WTF *)a1, v3);
}

WebPushD::PushService *_ZN3WTF6Detail15CallableWrapperIZZZN8WebPushD11PushService6createERKNS_6StringES6_ONS_8FunctionIFvRKN7WebCore29PushSubscriptionSetIdentifierEON6WebKit14WebPushMessageEEEEONS_17CompletionHandlerIFvONSt3__110unique_ptrIS3_NSJ_14default_deleteIS3_EEEEEEEEN3__0clEvENUlOT_E_clINSK_INS8_12PushDatabaseENSL_ISX_EEEEEEDaSU_EUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  WebPushD::PushService *result;
  WTF *v4;
  void *v5;
  WebPushD::PushService *v6;

  v1 = *(_QWORD *)(a1 + 24);
  v6 = *(WebPushD::PushService **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, WebPushD::PushService **))(*(_QWORD *)v1 + 16))(v1, &v6);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  result = v6;
  v6 = 0;
  if (result)
  {
    WebPushD::PushService::~PushService(result, v2);
    return (WebPushD::PushService *)WTF::fastFree(v4, v5);
  }
  return result;
}

void sub_196F97D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebPushD::PushService *a10)
{
  uint64_t v10;
  void *v12;
  WTF *v13;
  void *v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (a10)
  {
    WebPushD::PushService::~PushService(a10, v12);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebPushD::PushService::createMockService(WTF::Function<void ()(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)> &&,WTF::CompletionHandler<void ()(std::unique_ptr<WebPushD::PushService,WTF::Function<void ()(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)> &&::default_delete<WebPushD::PushService>> &&)> &&)::$_0,void,WTF::CompletionHandler<WebCore::PushDatabase,std::__1<WTF::CompletionHandler<void ()(std::unique_ptr<WebPushD::PushService,WTF::Function<void ()(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)> &&::default_delete<WebPushD::PushService>> &&)>>> &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34B2C58;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::PushService::createMockService(WTF::Function<void ()(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)> &&,WTF::CompletionHandler<void ()(std::unique_ptr<WebPushD::PushService,WTF::Function<void ()(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)> &&::default_delete<WebPushD::PushService>> &&)> &&)::$_0,void,WTF::CompletionHandler<WebCore::PushDatabase,std::__1<WTF::CompletionHandler<void ()(std::unique_ptr<WebPushD::PushService,WTF::Function<void ()(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)> &&::default_delete<WebPushD::PushService>> &&)>>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34B2C58;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

WebPushD::PushService *WTF::Detail::CallableWrapper<WebPushD::PushService::createMockService(WTF::Function<void ()(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)> &&,WTF::CompletionHandler<void ()(std::unique_ptr<WebPushD::PushService,WTF::Function<void ()(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)> &&::default_delete<WebPushD::PushService>> &&)> &&)::$_0,void,WTF::CompletionHandler<WebCore::PushDatabase,std::__1<WTF::CompletionHandler<void ()(std::unique_ptr<WebPushD::PushService,WTF::Function<void ()(WebCore::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)> &&::default_delete<WebPushD::PushService>> &&)>>> &&>::call(uint64_t a1, WebPushD::PushService **a2)
{
  WebPushD::MockPushServiceConnection *v4;
  WebPushD::PushService *v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  WebPushD::PushService *v9;
  WTF *v10;
  void *v11;
  WebPushD::PushService *result;
  WTF *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  WebPushD::MockPushServiceConnection *v17;
  WebPushD::PushService *v18;
  WebPushD::PushService *v19;

  if (!*a2)
  {
    v19 = 0;
    v15 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    (*(void (**)(uint64_t, WebPushD::PushService **))(*(_QWORD *)v15 + 16))(v15, &v19);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    result = v19;
    v19 = 0;
    if (!result)
      return result;
    WebPushD::PushService::~PushService(result, v16);
    return (WebPushD::PushService *)WTF::fastFree(v13, v14);
  }
  v4 = (WebPushD::MockPushServiceConnection *)WTF::fastMalloc((WTF *)0x90);
  WebPushD::MockPushServiceConnection::MockPushServiceConnection(v4);
  v5 = *a2;
  *a2 = 0;
  v19 = v5;
  v6 = (uint64_t *)WTF::fastMalloc((WTF *)0x30);
  v17 = v4;
  WebPushD::PushService::PushService(v6, (uint64_t *)&v17, (uint64_t *)&v19, (uint64_t *)(a1 + 8));
  v18 = (WebPushD::PushService *)v6;
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, WebPushD::PushService **))(*(_QWORD *)v7 + 16))(v7, &v18);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v9 = v18;
  v18 = 0;
  if (v9)
  {
    WebPushD::PushService::~PushService(v9, v8);
    WTF::fastFree(v10, v11);
  }
  if (v17)
    (*(void (**)(WebPushD::MockPushServiceConnection *))(*(_QWORD *)v17 + 8))(v17);
  result = v19;
  if (v19)
  {
    v13 = (WTF *)MEMORY[0x19AEAD768]();
    return (WebPushD::PushService *)WTF::fastFree(v13, v14);
  }
  return result;
}

void sub_196F97F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WebPushD::PushService *a11, WebPushD::PushService *a12)
{
  uint64_t v12;
  void *v14;
  WTF *v15;
  void *v16;

  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (a12)
  {
    WebPushD::PushService::~PushService(a12, v14);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::PushService::PushService(WTF::UniqueRef<WebPushD::PushServiceConnection> &&,WTF::UniqueRef<WebCore::PushDatabase> &&,WTF::Function<void ()(WTF::UniqueRef<WebPushD::PushServiceConnection> &&::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E34B2FC8;
  v2[1] = v1;
  v4 = v2;
  WebCore::PushDatabase::updatePublicToken();
  result = (uint64_t)v4;
  if (v4)
    return (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  return result;
}

void sub_196F98084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::PushService::PushService(WTF::UniqueRef<WebPushD::PushServiceConnection> &&,WTF::UniqueRef<WebCore::PushDatabase> &&,WTF::Function<void ()(WTF::UniqueRef<WebPushD::PushServiceConnection> &&::PushSubscriptionSetIdentifier const&,WebKit::WebPushMessage &&)> &&)::$_1,void,NSString *,NSDictionary *>::call(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = off_1E34B2CD0;
  v8 = v6;
  WebPushD::PushService::didReceivePushMessage(v5, a2, a3, (uint64_t *)&v8);
  result = (uint64_t)v8;
  if (v8)
    return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  return result;
}

void sub_196F98134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebPushD::PushServiceRequest::PushServiceRequest(uint64_t result, _QWORD *a2, uint64_t a3, _DWORD **a4)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;

  *(_QWORD *)result = off_1E34B2AD0;
  *(_QWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = *a2;
  *(_QWORD *)(result + 24) = a2[1];
  v4 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v4 += 2;
  *(_QWORD *)(result + 32) = v4;
  v5 = *(_DWORD **)(a3 + 8);
  if (v5)
    *v5 += 2;
  *(_QWORD *)(result + 40) = v5;
  *(_OWORD *)(result + 48) = *(_OWORD *)(a3 + 16);
  v6 = *a4;
  if (*a4)
    *v6 += 2;
  *(_QWORD *)(result + 64) = v6;
  *(_QWORD *)(result + 72) = 0;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::GetSubscriptionRequest::startInternal(void)::$_0,void,std::optional<WebCore::PushRecord> &&>::call(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD v14[3];
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v2 = *(_QWORD **)(a1 + 8);
  if (*((_BYTE *)a2 + 160))
  {
    v3 = *a2;
    v4 = a2[8];
    a2[8] = 0;
    v5 = a2[18];
    v14[1] = v4;
    v14[2] = v5;
    v15 = *((_BYTE *)a2 + 152);
    v6 = a2[10];
    a2[10] = 0;
    v7 = a2[12];
    a2[12] = 0;
    v8 = a2[16];
    a2[16] = 0;
    v14[0] = v3;
    v16 = v6;
    v9 = a2[11];
    a2[11] = 0;
    v17 = v9;
    v18 = v7;
    v10 = a2[13];
    a2[13] = 0;
    v19 = v10;
    v20 = v8;
    v11 = a2[17];
    a2[17] = 0;
    v21 = v11;
    v22 = 1;
  }
  else
  {
    LOBYTE(v14[0]) = 0;
    v22 = 0;
  }
  WebPushD::PushServiceRequestImpl<std::optional<WebCore::PushSubscriptionData>>::fulfill(v2, (uint64_t)v14);
  return std::__optional_destruct_base<WebCore::PushSubscriptionData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v14, v12);
}

void sub_196F982A4(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__optional_destruct_base<WebCore::PushSubscriptionData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t WebPushD::PushServiceRequestImpl<std::optional<WebCore::PushSubscriptionData>>::fulfill(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  char *v7;
  char *v8;
  void *v9;
  WTF *v10;
  uint64_t v11;
  WTF *v13;
  WTF::StringImpl *v14;
  WTF *v15;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  _QWORD *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  char *v23;
  __int16 v24;
  char *v25;
  char v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE716B8;
  if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(unsigned __int8 *)(a2 + 80);
    v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    WebCore::PushSubscriptionSetIdentifier::debugDescription((WebCore::PushSubscriptionSetIdentifier *)(a1 + 4));
    WTF::String::utf8();
    WTF::String::utf8();
    v7 = (char *)v15 + 16;
    if (!v15)
      v7 = 0;
    *(_DWORD *)buf = 136447235;
    if (v13)
      v8 = (char *)v13 + 16;
    else
      v8 = 0;
    v17 = v6;
    v18 = 2048;
    v19 = a1;
    v20 = 1024;
    v21 = v5;
    v22 = 2082;
    v23 = v7;
    v24 = 2085;
    v25 = v8;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "Finished pushServiceRequest %{public}s (%p) with result (hasResult: %d) for %{public}s, scope = %{sensitive}s", buf, 0x30u);
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
        WTF::fastFree(v13, v9);
      else
        --*(_DWORD *)v13;
    }
    v10 = v15;
    v15 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
        WTF::fastFree(v10, v9);
      else
        --*(_DWORD *)v10;
    }
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v9);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  BYTE4(v17) = 0;
  v26 = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    std::construct_at[abi:sn180100]<WebCore::PushSubscriptionData,WebCore::PushSubscriptionData,WebCore::PushSubscriptionData*>((uint64_t)&v17 + 4, a2);
    v26 = 1;
  }
  v27 = 0;
  v11 = a1[10];
  a1[10] = 0;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v11 + 16))(v11, buf);
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (v27 != -1)
    ((void (*)(WTF **, char *))off_1E34B2AF8[v27])(&v15, (char *)&v17 + 4);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
}

void sub_196F98500(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 1)
      WTF::fastFree(a12, a2);
    else
      --*(_DWORD *)a12;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::construct_at[abi:sn180100]<WebCore::PushSubscriptionData,WebCore::PushSubscriptionData,WebCore::PushSubscriptionData*>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    *(_QWORD *)result = *(_QWORD *)a2;
    v2 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(result + 8) = v2;
    *(_OWORD *)(result + 16) = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
    v3 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(result + 32) = v3;
    LODWORD(v3) = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    *(_DWORD *)(result + 40) = v3;
    LODWORD(v3) = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    *(_DWORD *)(result + 44) = v3;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 0;
    v4 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(result + 48) = v4;
    LODWORD(v4) = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 56) = 0;
    *(_DWORD *)(result + 56) = v4;
    LODWORD(v4) = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 60) = 0;
    *(_DWORD *)(result + 60) = v4;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 72) = 0;
    v5 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(result + 64) = v5;
    LODWORD(v5) = *(_DWORD *)(a2 + 72);
    *(_DWORD *)(a2 + 72) = 0;
    *(_DWORD *)(result + 72) = v5;
    LODWORD(v5) = *(_DWORD *)(a2 + 76);
    *(_DWORD *)(a2 + 76) = 0;
    *(_DWORD *)(result + 76) = v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebPushD::SubscribeRequest::startImpl(WebPushD::SubscribeRequest::IsRetry)::$_0,void,std::optional<WebCore::PushRecord> &&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  WTF *v5;
  void *v6;
  WTF::StringImpl *result;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  WTF *v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  WTF *v20;
  WTF *v21;
  WTF *v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  char v26;
  WTF *v27;
  int v28;
  int v29;
  WTF *v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(a2 + 160))
  {
    v4 = *(_DWORD *)(v2 + 108);
    if (v4 == *(_DWORD *)(a2 + 92)
      && (v5 = *(WTF **)(a2 + 80), !memcmp(*(const void **)(v2 + 96), v5, *(unsigned int *)(v2 + 108))))
    {
      v14 = *(_QWORD *)a2;
      v15 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a2 + 64) = 0;
      v24.n128_u64[0] = v14;
      v24.n128_u64[1] = v15;
      v25 = *(_QWORD *)(a2 + 144);
      v26 = *(_BYTE *)(a2 + 152);
      *(_QWORD *)(a2 + 80) = 0;
      v27 = v5;
      LODWORD(v14) = *(_DWORD *)(a2 + 88);
      *(_QWORD *)(a2 + 88) = 0;
      v28 = v14;
      v29 = v4;
      v16 = *(WTF **)(a2 + 96);
      *(_QWORD *)(a2 + 96) = 0;
      v30 = v16;
      v17 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a2 + 104) = 0;
      v31 = v17;
      v18 = *(WTF **)(a2 + 128);
      *(_QWORD *)(a2 + 128) = 0;
      v32 = v18;
      v19 = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a2 + 136) = 0;
      v33 = v19;
      WebPushD::PushServiceRequestImpl<WebCore::PushSubscriptionData>::fulfill((_QWORD *)v2, &v24);
      v20 = v32;
      if (v32)
      {
        v32 = 0;
        LODWORD(v33) = 0;
        WTF::fastFree(v20, v6);
      }
      v21 = v30;
      if (v30)
      {
        v30 = 0;
        LODWORD(v31) = 0;
        WTF::fastFree(v21, v6);
      }
      v22 = v27;
      if (v27)
      {
        v27 = 0;
        v28 = 0;
        WTF::fastFree(v22, v6);
      }
    }
    else
    {
      v24.n128_u8[0] = 8;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WebPushD::PushServiceRequestImpl<WebCore::PushSubscriptionData>::reject((_QWORD *)v2, (uint64_t)&v24);
    }
    result = (WTF::StringImpl *)v24.n128_u64[1];
    v24.n128_u64[1] = 0;
    if (!result)
      return result;
LABEL_12:
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v6);
    *(_DWORD *)result -= 2;
    return result;
  }
  WebCore::makePushTopic();
  v9 = *(_QWORD *)(v2 + 16);
  v10 = *(_BYTE *)(a1 + 16);
  v11 = v24.n128_u64[0];
  if (v24.n128_u64[0])
    *(_DWORD *)v24.n128_u64[0] += 2;
  v12 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v12 = &off_1E34B2D48;
  *(_QWORD *)(v12 + 8) = v2;
  *(_BYTE *)(v12 + 16) = v10;
  *(_QWORD *)(v12 + 24) = v11;
  v23 = v12;
  (*(void (**)(uint64_t, __n128 *, uint64_t, uint64_t *))(*(_QWORD *)v9 + 24))(v9, &v24, v2 + 96, &v23);
  v13 = v23;
  v23 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  result = (WTF::StringImpl *)v24.n128_u64[0];
  v24.n128_u64[0] = 0;
  if (result)
    goto LABEL_12;
  return result;
}

void sub_196F98850(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, WTF *a17, int a18, WTF *a19, int a20)
{
  if (a19)
    WTF::fastFree(a19, a2);
  if (a17)
    WTF::fastFree(a17, a2);
  if (a15)
    WTF::fastFree(a15, a2);
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPushD::PushServiceRequestImpl<WebCore::PushSubscriptionData>::reject(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  void *v8;
  WTF *v9;
  uint8_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v14;
  WTF::StringImpl *v15;
  WTF *v16;
  uint8_t buf[4];
  _BYTE v18[18];
  __int16 v19;
  char *v20;
  __int16 v21;
  char *v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE716B8;
  if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    WebCore::PushSubscriptionSetIdentifier::debugDescription((WebCore::PushSubscriptionSetIdentifier *)(a1 + 4));
    WTF::String::utf8();
    WTF::String::utf8();
    v6 = (char *)v16 + 16;
    if (!v16)
      v6 = 0;
    *(_DWORD *)buf = 136446979;
    if (v14)
      v7 = (char *)v14 + 16;
    else
      v7 = 0;
    *(_QWORD *)v18 = v5;
    *(_WORD *)&v18[8] = 2048;
    *(_QWORD *)&v18[10] = a1;
    v19 = 2082;
    v20 = v6;
    v21 = 2085;
    v22 = v7;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "Finished pushServiceRequest %{public}s (%p) with exception for %{public}s, scope = %{sensitive}s", buf, 0x2Au);
    if (v14)
    {
      if (*(_DWORD *)v14 == 1)
        WTF::fastFree(v14, v8);
      else
        --*(_DWORD *)v14;
    }
    v9 = v16;
    v16 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
        WTF::fastFree(v9, v8);
      else
        --*(_DWORD *)v9;
    }
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  v10 = *(_BYTE *)a2;
  v11 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  buf[0] = v10;
  *(_QWORD *)&v18[4] = v11;
  v23 = 1;
  v12 = a1[10];
  a1[10] = 0;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v12 + 16))(v12, buf);
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (v23 != -1)
    ((void (*)(WTF **, uint8_t *))off_1E34B2B08[v23])(&v16, buf);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
}

void sub_196F98B38(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF *a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 1)
      WTF::fastFree(a12, a2);
    else
      --*(_DWORD *)a12;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebPushD::PushServiceRequestImpl<WebCore::PushSubscriptionData>::fulfill(_QWORD *a1, __n128 *a2)
{
  NSObject *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  void *v8;
  WTF *v9;
  __n128 v10;
  uint64_t v11;
  WTF *v13;
  WTF::StringImpl *v14;
  WTF *v15;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  _QWORD *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  char *v23;
  __int16 v24;
  char *v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE716B8;
  if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    WebCore::PushSubscriptionSetIdentifier::debugDescription((WebCore::PushSubscriptionSetIdentifier *)(a1 + 4));
    WTF::String::utf8();
    WTF::String::utf8();
    v6 = (char *)v15 + 16;
    if (!v15)
      v6 = 0;
    *(_DWORD *)buf = 136447235;
    if (v13)
      v7 = (char *)v13 + 16;
    else
      v7 = 0;
    v17 = v5;
    v18 = 2048;
    v19 = a1;
    v20 = 1024;
    v21 = 1;
    v22 = 2082;
    v23 = v6;
    v24 = 2085;
    v25 = v7;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "Finished pushServiceRequest %{public}s (%p) with result (hasResult: %d) for %{public}s, scope = %{sensitive}s", buf, 0x30u);
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
        WTF::fastFree(v13, v8);
      else
        --*(_DWORD *)v13;
    }
    v9 = v15;
    v15 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
        WTF::fastFree(v9, v8);
      else
        --*(_DWORD *)v9;
    }
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  v10 = std::__variant_detail::__alt<0ul,WebCore::PushSubscriptionData>::__alt[abi:sn180100]<WebCore::PushSubscriptionData>((__n128 *)buf, a2);
  v26 = 0;
  v11 = a1[10];
  a1[10] = 0;
  (*(void (**)(uint64_t, uint8_t *, __n128))(*(_QWORD *)v11 + 16))(v11, buf, v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (v26 != -1)
    ((void (*)(WTF **, uint8_t *))off_1E34B2B08[v26])(&v15, buf);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
}

void sub_196F98E00(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF *a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 1)
      WTF::fastFree(a12, a2);
    else
      --*(_DWORD *)a12;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__variant_detail::__alt<0ul,WebCore::PushSubscriptionData>::__alt[abi:sn180100]<WebCore::PushSubscriptionData>(__n128 *a1, __n128 *a2)
{
  unint64_t v2;
  __n128 result;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  a1->n128_u64[0] = a2->n128_u64[0];
  v2 = a2->n128_u64[1];
  a2->n128_u64[1] = 0;
  a1->n128_u64[1] = v2;
  result = a2[1];
  a1[1] = result;
  a1[2].n128_u64[0] = 0;
  a1[2].n128_u64[1] = 0;
  v4 = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = 0;
  a1[2].n128_u64[0] = v4;
  LODWORD(v4) = a2[2].n128_u32[2];
  a2[2].n128_u32[2] = 0;
  a1[2].n128_u32[2] = v4;
  LODWORD(v4) = a2[2].n128_u32[3];
  a2[2].n128_u32[3] = 0;
  a1[2].n128_u32[3] = v4;
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  v5 = a2[3].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a1[3].n128_u64[0] = v5;
  LODWORD(v5) = a2[3].n128_u32[2];
  a2[3].n128_u32[2] = 0;
  a1[3].n128_u32[2] = v5;
  LODWORD(v5) = a2[3].n128_u32[3];
  a2[3].n128_u32[3] = 0;
  a1[3].n128_u32[3] = v5;
  a1[4].n128_u64[0] = 0;
  a1[4].n128_u64[1] = 0;
  v6 = a2[4].n128_u64[0];
  a2[4].n128_u64[0] = 0;
  a1[4].n128_u64[0] = v6;
  LODWORD(v6) = a2[4].n128_u32[2];
  a2[4].n128_u32[2] = 0;
  a1[4].n128_u32[2] = v6;
  LODWORD(v6) = a2[4].n128_u32[3];
  a2[4].n128_u32[3] = 0;
  a1[4].n128_u32[3] = v6;
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN8WebPushD16SubscribeRequest9startImplENS3_7IsRetryEEN3__0clINSt3__18optionalIN7WebCore10PushRecordEEEEEDaOT_EUlP8NSStringP7NSErrorE_vJSG_SI_EED1Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *a1 = &off_1E34B2D48;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN8WebPushD16SubscribeRequest9startImplENS3_7IsRetryEEN3__0clINSt3__18optionalIN7WebCore10PushRecordEEEEEDaOT_EUlP8NSStringP7NSErrorE_vJSG_SI_EED0Ev(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = &off_1E34B2D48;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZN8WebPushD16SubscribeRequest9startImplENS3_7IsRetryEEN3__0clINSt3__18optionalIN7WebCore10PushRecordEEEEEDaOT_EUlP8NSStringP7NSErrorE_vJSG_SI_EE4callESG_SI_(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  WTF::StringImpl *result;
  NSObject *v10;
  WTF::StringImpl *v11;
  const WTF::String *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF *v19;
  void *v20;
  WTF *v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  void *v29;
  WTF::StringImpl *v30;
  void *v31;
  WTF *v32;
  WTF *v33;
  char *v34;
  char *v35;
  void *v36;
  WTF *v37;
  WTF *v38;
  WTF::StringImpl *v39;
  WTF *v40;
  uint64_t v41;
  WTF *v42;
  uint64_t v43;
  WTF *v44;
  uint64_t v45;
  WTF *v46;
  WTF::StringImpl *v47;
  _BYTE buf[24];
  uint64_t v49;
  __int128 v50;
  _DWORD *v51;
  _QWORD v52[2];
  void *v53;
  int v54;
  int v55;
  WTF *v56;
  uint64_t v57;
  WTF *v58;
  uint64_t v59;
  WTF *v60;
  uint64_t v61;
  char v62;
  char v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 8);
  if (a3)
  {
    if (!*(_BYTE *)(a1 + 16)
      && objc_msgSend((id)objc_msgSend(a3, "domain"), "isEqualToString:", CFSTR("APSURLTokenErrorDomain"))
      && objc_msgSend(a3, "code") == 103)
    {
      v6 = WTF::WorkQueue::main((WTF::WorkQueue *)0x67);
      v7 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v8 = &off_1E34B2DC0;
      v8[1] = v4;
      v8[2] = v7;
      *(_QWORD *)buf = v8;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 32))(v6, buf);
      result = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (result)
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    }
    else
    {
      v10 = qword_1ECE716B8;
      if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_ERROR))
      {
        WebCore::PushSubscriptionSetIdentifier::debugDescription((WebCore::PushSubscriptionSetIdentifier *)(v4 + 32));
        WTF::String::utf8();
        if (v40)
          v34 = (char *)v40 + 16;
        else
          v34 = 0;
        WTF::String::utf8();
        if (v46)
          v35 = (char *)v46 + 16;
        else
          v35 = 0;
        *(_DWORD *)buf = 136446979;
        *(_QWORD *)&buf[4] = v34;
        *(_WORD *)&buf[12] = 2085;
        *(_QWORD *)&buf[14] = v35;
        *(_WORD *)&buf[22] = 2082;
        v49 = objc_msgSend((id)objc_msgSend(a3, "domain"), "UTF8String");
        LOWORD(v50) = 2048;
        *(_QWORD *)((char *)&v50 + 2) = objc_msgSend(a3, "code");
        _os_log_error_impl(&dword_196BCC000, v10, OS_LOG_TYPE_ERROR, "PushManager.subscribe(%{public}s, scope: %{sensitive}s) failed with domain: %{public}s code: %lld)", buf, 0x2Au);
        v37 = v46;
        v46 = 0;
        if (v37)
        {
          if (*(_DWORD *)v37 == 1)
            WTF::fastFree(v37, v36);
          else
            --*(_DWORD *)v37;
        }
        v38 = v40;
        v40 = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 1)
            WTF::fastFree(v38, v36);
          else
            --*(_DWORD *)v38;
        }
        v39 = v47;
        v47 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
            WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v36);
          else
            *(_DWORD *)v39 -= 2;
        }
      }
      buf[0] = 16;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WebPushD::PushServiceRequestImpl<WebCore::PushSubscriptionData>::reject((_QWORD *)v4, (uint64_t)buf);
      result = *(WTF::StringImpl **)&buf[8];
      *(_QWORD *)&buf[8] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    (*(void (**)(WTF **__return_ptr))(***(_QWORD ***)(v4 + 8) + 16))(&v40);
    *(_QWORD *)buf = 0;
    v14 = *(_DWORD **)(v4 + 32);
    if (v14)
      *v14 += 2;
    *(_QWORD *)&buf[16] = v14;
    v15 = *(_DWORD **)(v4 + 40);
    if (v15)
      *v15 += 2;
    v49 = (uint64_t)v15;
    v50 = *(_OWORD *)(v4 + 48);
    WebCore::SecurityOrigin::createFromString((WebCore::SecurityOrigin *)(v4 + 64), v13);
    WebCore::SecurityOriginData::toString((WTF::StringImpl *)((char *)v47 + 8));
    v16 = *(_DWORD **)(v4 + 64);
    if (v16)
      *v16 += 2;
    v51 = v16;
    MEMORY[0x19AEABCC8](v52, a2);
    v18 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    v19 = (WTF *)*(unsigned int *)(v4 + 108);
    v53 = 0;
    v54 = 0;
    v52[1] = v18;
    v55 = (int)v19;
    if ((_DWORD)v19)
    {
      v20 = (void *)WTF::fastMalloc(v19);
      v54 = (int)v19;
      v53 = v20;
      memcpy(v20, *(const void **)(v4 + 96), *(unsigned int *)(v4 + 108));
    }
    v21 = v40;
    v40 = 0;
    v56 = v21;
    v22 = v41;
    v41 = 0;
    v57 = v22;
    v23 = v42;
    v42 = 0;
    v58 = v23;
    v24 = v43;
    v43 = 0;
    v59 = v24;
    v25 = v44;
    v44 = 0;
    v60 = v25;
    v26 = v45;
    v45 = 0;
    v61 = v26;
    v62 = 0;
    v63 = 0;
    v27 = v47;
    v47 = 0;
    if (v27)
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v27, v17);
    v28 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v28 = off_1E34B2D70;
    *((_QWORD *)v28 + 1) = v4;
    v47 = v28;
    WebCore::PushDatabase::insertRecord();
    v30 = v47;
    v47 = 0;
    if (v30)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v30 + 8))(v30);
    WebCore::PushRecord::~PushRecord((WebCore::PushRecord *)buf, v29);
    v32 = v44;
    if (v44)
    {
      v44 = 0;
      LODWORD(v45) = 0;
      WTF::fastFree(v32, v31);
    }
    v33 = v42;
    if (v42)
    {
      v42 = 0;
      LODWORD(v43) = 0;
      WTF::fastFree(v33, v31);
    }
    result = v40;
    if (v40)
    {
      v40 = 0;
      LODWORD(v41) = 0;
      return (WTF::StringImpl *)WTF::fastFree(result, v31);
    }
  }
  return result;
}

void sub_196F9943C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, WTF *a11, int a12, WTF *a13, int a14, WTF *a15, WTF *a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, WTF::StringImpl *a20,uint64_t a21,uint64_t a22,WTF::StringImpl *a23,WTF::StringImpl *a24,WTF::StringImpl *a25,WTF::StringImpl *a26)
{
  if (a17)
    (*(void (**)(uint64_t))(*(_QWORD *)a17 + 8))(a17);
  _Unwind_Resume(exception_object);
}

void _ZN3WTF6Detail15CallableWrapperIZZZN8WebPushD16SubscribeRequest9startImplENS3_7IsRetryEEN3__0clINSt3__18optionalIN7WebCore10PushRecordEEEEEDaOT_ENUlP8NSStringP7NSErrorE_clESG_SI_EUlSE_E_vJOSB_EE4callESL_(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  NSObject *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  char *v28;
  char *v29;
  void *v30;
  WTF *v31;
  WTF *v32;
  WTF::StringImpl *v33;
  WTF *v34;
  _BYTE buf[24];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(a1 + 8);
  if (*((_BYTE *)a2 + 160))
  {
    v3 = v2[2];
    v4 = v2[3];
    v5 = *((_OWORD *)a2 + 1);
    v6 = *((_OWORD *)a2 + 2);
    *((_OWORD *)a2 + 1) = 0u;
    v36 = v5;
    v37 = v6;
    v7 = *((_OWORD *)a2 + 3);
    v8 = *((_OWORD *)a2 + 4);
    *((_OWORD *)a2 + 3) = 0u;
    *((_OWORD *)a2 + 4) = 0u;
    v9 = *a2;
    *(_QWORD *)buf = v2;
    *(_QWORD *)&buf[16] = v9;
    v38 = v7;
    v39 = v8;
    v10 = a2[10];
    a2[10] = 0;
    v40 = v10;
    v11 = a2[11];
    a2[11] = 0;
    v41 = v11;
    v12 = a2[12];
    a2[12] = 0;
    v42 = v12;
    v13 = a2[13];
    a2[13] = 0;
    v43 = v13;
    v14 = a2[14];
    a2[14] = 0;
    v44 = v14;
    v15 = a2[15];
    a2[15] = 0;
    v45 = v15;
    v16 = a2[16];
    a2[16] = 0;
    v46 = v16;
    v17 = a2[17];
    a2[17] = 0;
    v47 = v17;
    v48 = *((_OWORD *)a2 + 9);
    v18 = WTF::fastMalloc((WTF *)0xC0);
    *(_QWORD *)v18 = off_1E34B2D98;
    *(_QWORD *)(v18 + 16) = *(_QWORD *)buf;
    *(_QWORD *)(v18 + 32) = *(_QWORD *)&buf[16];
    *(_OWORD *)(v18 + 48) = v36;
    *(_OWORD *)(v18 + 64) = v37;
    v36 = 0u;
    *(_OWORD *)(v18 + 80) = v38;
    v19 = v39;
    v38 = 0u;
    v39 = 0u;
    *(_OWORD *)(v18 + 96) = v19;
    v20 = v40;
    v40 = 0;
    *(_QWORD *)(v18 + 112) = v20;
    *(_QWORD *)&v19 = v41;
    v41 = 0;
    *(_QWORD *)(v18 + 120) = v19;
    v21 = v42;
    v42 = 0;
    *(_QWORD *)(v18 + 128) = v21;
    *(_QWORD *)&v19 = v43;
    v43 = 0;
    *(_QWORD *)(v18 + 136) = v19;
    v22 = v44;
    v44 = 0;
    *(_QWORD *)(v18 + 144) = v22;
    *(_QWORD *)&v19 = v45;
    v45 = 0;
    *(_QWORD *)(v18 + 152) = v19;
    v23 = v46;
    v46 = 0;
    *(_QWORD *)(v18 + 160) = v23;
    *(_QWORD *)&v19 = v47;
    v47 = 0;
    *(_QWORD *)(v18 + 168) = v19;
    *(_OWORD *)(v18 + 176) = v48;
    v34 = (WTF *)v18;
    WebPushD::updateTopicLists(v3, v4, (uint64_t *)&v34);
    if (v34)
      (*(void (**)(WTF *))(*(_QWORD *)v34 + 8))(v34);
    WebCore::PushRecord::~PushRecord((WebCore::PushRecord *)&buf[16], v24);
  }
  else
  {
    v25 = qword_1ECE716B8;
    if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_ERROR))
    {
      WebCore::PushSubscriptionSetIdentifier::debugDescription((WebCore::PushSubscriptionSetIdentifier *)(v2 + 4));
      WTF::String::utf8();
      WTF::String::utf8();
      v28 = (char *)v34 + 16;
      if (!v34)
        v28 = 0;
      if (v32)
        v29 = (char *)v32 + 16;
      else
        v29 = 0;
      *(_DWORD *)buf = 136446467;
      *(_QWORD *)&buf[4] = v28;
      *(_WORD *)&buf[12] = 2085;
      *(_QWORD *)&buf[14] = v29;
      _os_log_error_impl(&dword_196BCC000, v25, OS_LOG_TYPE_ERROR, "PushManager.subscribe(%{public}s, scope: %{sensitive}s) failed with database error", buf, 0x16u);
      if (v32)
      {
        if (*(_DWORD *)v32 == 1)
          WTF::fastFree(v32, v30);
        else
          --*(_DWORD *)v32;
      }
      v31 = v34;
      v34 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 1)
          WTF::fastFree(v31, v30);
        else
          --*(_DWORD *)v31;
      }
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v30);
        else
          *(_DWORD *)v33 -= 2;
      }
    }
    buf[0] = 16;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebPushD::PushServiceRequestImpl<WebCore::PushSubscriptionData>::reject(v2, (uint64_t)buf);
    v27 = *(WTF::StringImpl **)&buf[8];
    *(_QWORD *)&buf[8] = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v26);
      else
        *(_DWORD *)v27 -= 2;
    }
  }
}

void sub_196F99A00(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF *a12, uint64_t a13, WTF::StringImpl *a14)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 1)
      WTF::fastFree(a12, a2);
    else
      --*(_DWORD *)a12;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZZZN8WebPushD16SubscribeRequest9startImplENS3_7IsRetryEEN3__0clINSt3__18optionalIN7WebCore10PushRecordEEEEEDaOT_ENUlP8NSStringP7NSErrorE_clESG_SI_ENUlSE_E_clISB_EESC_SE_EUlvE_vJEED1Ev(_QWORD *a1, void *a2)
{
  *a1 = off_1E34B2D98;
  WebCore::PushRecord::~PushRecord((WebCore::PushRecord *)(a1 + 4), a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZZN8WebPushD16SubscribeRequest9startImplENS3_7IsRetryEEN3__0clINSt3__18optionalIN7WebCore10PushRecordEEEEEDaOT_ENUlP8NSStringP7NSErrorE_clESG_SI_ENUlSE_E_clISB_EESC_SE_EUlvE_vJEED0Ev(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E34B2D98;
  WebCore::PushRecord::~PushRecord((WebCore::PushRecord *)(a1 + 32), a2);
  return WTF::fastFree((WTF *)a1, v3);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZZZN8WebPushD16SubscribeRequest9startImplENS3_7IsRetryEEN3__0clINSt3__18optionalIN7WebCore10PushRecordEEEEEDaOT_ENUlP8NSStringP7NSErrorE_clESG_SI_ENUlSE_E_clISB_EESC_SE_EUlvE_vJEE4callEv(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  void *v10;
  WTF *v11;
  WTF *v12;
  WTF *v13;
  WTF::StringImpl *result;
  __n128 v15;
  uint64_t v16;
  char v17;
  WTF *v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;

  v1 = *(_QWORD **)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  v15.n128_u64[0] = v2;
  v15.n128_u64[1] = v3;
  v16 = *(_QWORD *)(a1 + 176);
  v17 = *(_BYTE *)(a1 + 184);
  v4 = *(WTF **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  v18 = v4;
  v5 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  v19 = v5;
  v6 = *(WTF **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  v20 = v6;
  v7 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  v21 = v7;
  v8 = *(WTF **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  v22 = v8;
  v9 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  v23 = v9;
  WebPushD::PushServiceRequestImpl<WebCore::PushSubscriptionData>::fulfill(v1, &v15);
  v11 = v22;
  if (v22)
  {
    v22 = 0;
    LODWORD(v23) = 0;
    WTF::fastFree(v11, v10);
  }
  v12 = v20;
  if (v20)
  {
    v20 = 0;
    LODWORD(v21) = 0;
    WTF::fastFree(v12, v10);
  }
  v13 = v18;
  if (v18)
  {
    v18 = 0;
    LODWORD(v19) = 0;
    WTF::fastFree(v13, v10);
  }
  result = (WTF::StringImpl *)v15.n128_u64[1];
  v15.n128_u64[1] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_196F99C00(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, WTF *a13, int a14, WTF *a15, int a16, WTF *a17, int a18)
{
  if (a17)
    WTF::fastFree(a17, a2);
  if (a15)
    WTF::fastFree(a15, a2);
  if (a13)
    WTF::fastFree(a13, a2);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebCore::PushRecord::~PushRecord(WebCore::PushRecord *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  WTF *v5;
  WTF *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v3 = (WTF *)*((_QWORD *)this + 16);
  if (v3)
  {
    *((_QWORD *)this + 16) = 0;
    *((_DWORD *)this + 34) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 14);
  if (v4)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (WTF *)*((_QWORD *)this + 12);
  if (v5)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = (WTF *)*((_QWORD *)this + 10);
  if (v6)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v12 -= 2;
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebPushD::SubscribeRequest::attemptToRecoverFromTopicAlreadyInFilterError(WTF::String &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *a1 = &off_1E34B2DC0;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::SubscribeRequest::attemptToRecoverFromTopicAlreadyInFilterError(WTF::String &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = &off_1E34B2DC0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::SubscribeRequest::attemptToRecoverFromTopicAlreadyInFilterError(WTF::String &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  WTF::WorkQueue *v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(a1 + 8);
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v2 + 16) + 48))(v18);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v15, (uint64_t)v18);
  v3 = (_QWORD *)(a1 + 16);
  v4 = v17;
  if (v17 == v16)
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)&v15, (unint64_t)v3);
  }
  else
  {
    v5 = v15;
    v6 = (_DWORD *)*v3;
    if (*v3)
      *v6 += 2;
    *(_QWORD *)(v5 + 8 * v4) = v6;
    v17 = v4 + 1;
  }
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v2 + 16) + 80))(*(_QWORD *)(v2 + 16), &v15);
  v7 = (WTF::WorkQueue *)(*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(v2 + 16) + 80))(*(_QWORD *)(v2 + 16), v18);
  v8 = WTF::WorkQueue::main(v7);
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = off_1E34B2DE8;
  v9[1] = v2;
  v14 = v9;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v8 + 32))(v8, &v14);
  v11 = v14;
  v14 = 0;
  if (v11)
    (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v10);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v18, v12);
}

void sub_196F99F60(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  if (a4)
    (*(void (**)(uint64_t))(*(_QWORD *)a4 + 8))(a4);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v5);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::SubscribeRequest::attemptToRecoverFromTopicAlreadyInFilterError(WTF::String &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WebPushD::SubscribeRequest::startImpl(*(_QWORD *)(a1 + 8), 1);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::UnsubscribeRequest::startInternal(void)::$_0,void,std::optional<WebCore::PushRecord> &&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  void *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(a2 + 160) || *(_BYTE *)(v2 + 104) && *(_QWORD *)(v2 + 96) != *(_QWORD *)a2)
    return WebPushD::PushServiceRequestImpl<BOOL>::fulfill(*(_QWORD **)(a1 + 8), 0);
  v4 = *(_DWORD *)(a2 + 92);
  if (v4)
  {
    v5 = (void *)WTF::fastMalloc((WTF *)*(unsigned int *)(a2 + 92));
    memcpy(v5, *(const void **)(a2 + 80), *(unsigned int *)(a2 + 92));
  }
  else
  {
    v5 = 0;
  }
  v6 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v6 = &off_1E34B2E38;
  *(_QWORD *)(v6 + 8) = v2;
  *(_QWORD *)(v6 + 16) = v5;
  *(_DWORD *)(v6 + 24) = v4;
  *(_DWORD *)(v6 + 28) = v4;
  v8 = v6;
  WebCore::PushDatabase::removeRecordByIdentifier();
  result = v8;
  if (v8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return result;
}

void sub_196F9A0B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebPushD::PushServiceRequestImpl<BOOL>::fulfill(_QWORD *a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  void *v8;
  WTF *v9;
  uint64_t v10;
  WTF *v12;
  WTF::StringImpl *v13;
  WTF *v14;
  uint8_t buf[4];
  uint64_t v16;
  __int16 v17;
  _QWORD *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE716B8;
  if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    WebCore::PushSubscriptionSetIdentifier::debugDescription((WebCore::PushSubscriptionSetIdentifier *)(a1 + 4));
    WTF::String::utf8();
    WTF::String::utf8();
    v6 = (char *)v14 + 16;
    if (!v14)
      v6 = 0;
    *(_DWORD *)buf = 136447235;
    if (v12)
      v7 = (char *)v12 + 16;
    else
      v7 = 0;
    v16 = v5;
    v17 = 2048;
    v18 = a1;
    v19 = 1024;
    v20 = a2;
    v21 = 2082;
    v22 = v6;
    v23 = 2085;
    v24 = v7;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "Finished pushServiceRequest %{public}s (%p) with result (hasResult: %d) for %{public}s, scope = %{sensitive}s", buf, 0x30u);
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v8);
      else
        --*(_DWORD *)v12;
    }
    v9 = v14;
    v14 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
        WTF::fastFree(v9, v8);
      else
        --*(_DWORD *)v9;
    }
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  buf[0] = a2;
  *(_DWORD *)((char *)&v18 + 2) = 0;
  v10 = a1[10];
  a1[10] = 0;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v10 + 16))(v10, buf);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (*(_DWORD *)((char *)&v18 + 2) != -1)
    ((void (*)(WTF **, uint8_t *))off_1E34B2B18[*(unsigned int *)((char *)&v18 + 2)])(&v14, buf);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
}

void sub_196F9A300(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF *a12, char a13, uint64_t a14, int a15)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 1)
      WTF::fastFree(a12, a2);
    else
      --*(_DWORD *)a12;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN8WebPushD18UnsubscribeRequest13startInternalEvEN3__0clINSt3__18optionalIN7WebCore10PushRecordEEEEEDaOT_EUlbE_vJbEED1Ev(uint64_t a1, void *a2)
{
  WTF *v3;

  *(_QWORD *)a1 = &off_1E34B2E38;
  v3 = *(WTF **)(a1 + 16);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN8WebPushD18UnsubscribeRequest13startInternalEvEN3__0clINSt3__18optionalIN7WebCore10PushRecordEEEEEDaOT_EUlbE_vJbEED0Ev(WTF *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = &off_1E34B2E38;
  v3 = (WTF *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v3, a2);
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZN8WebPushD18UnsubscribeRequest13startInternalEvEN3__0clINSt3__18optionalIN7WebCore10PushRecordEEEEEDaOT_EUlbE_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  WTF::StringImpl *v9;
  _QWORD *v10;
  WTF::StringImpl *result;
  _QWORD *v12;
  WTF::StringImpl *v13;
  _QWORD *v14;

  v2 = *(_QWORD *)(a1 + 8);
  if ((a2 & 1) == 0)
    return (WTF::StringImpl *)WebPushD::PushServiceRequestImpl<BOOL>::fulfill(*(_QWORD **)(a1 + 8), 0);
  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = off_1E34B2E60;
  v6[1] = v2;
  v14 = v6;
  WebPushD::updateTopicLists(v4, v5, (uint64_t *)&v14);
  if (v14)
    (*(void (**)(_QWORD *))(*v14 + 8))(v14);
  WebCore::makePushTopic();
  v7 = *(_QWORD *)(v2 + 16);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = off_1E34B2E88;
  v8[1] = v2;
  v12 = v8;
  (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t, _QWORD **))(*(_QWORD *)v7 + 32))(v7, &v13, a1 + 16, &v12);
  v10 = v12;
  v12 = 0;
  if (v10)
    (*(void (**)(_QWORD *))(*v10 + 8))(v10);
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_196F9A534(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN8WebPushD18UnsubscribeRequest13startInternalEvEN3__0clINSt3__18optionalIN7WebCore10PushRecordEEEEEDaOT_ENUlbE_clEbEUlvE_vJEE4callEv(uint64_t a1)
{
  return WebPushD::PushServiceRequestImpl<BOOL>::fulfill(*(_QWORD **)(a1 + 8), 1);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN8WebPushD18UnsubscribeRequest13startInternalEvEN3__0clINSt3__18optionalIN7WebCore10PushRecordEEEEEDaOT_ENUlbE_clEbEUlbP7NSErrorE_vJbSG_EE4callEbSG_(uint64_t result, char a2, void *a3)
{
  uint64_t v4;
  NSObject *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  void *v11;
  WTF *v12;
  WTF::StringImpl *v13;
  WTF *v14;
  uint8_t buf[4];
  char *v16;
  __int16 v17;
  char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if ((a2 & 1) == 0)
  {
    v4 = *(_QWORD *)(result + 8);
    v5 = qword_1ECE716B8;
    result = os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      WebCore::PushSubscriptionSetIdentifier::debugDescription((WebCore::PushSubscriptionSetIdentifier *)(v4 + 32));
      WTF::String::utf8();
      if (v14)
        v6 = (char *)v14 + 16;
      else
        v6 = 0;
      WTF::String::utf8();
      if (v12)
        v7 = (char *)v12 + 16;
      else
        v7 = 0;
      v8 = objc_msgSend((id)objc_msgSend(a3, "domain"), "UTF8String");
      v9 = objc_msgSend(a3, "code");
      v10 = "none";
      *(_DWORD *)buf = 136446979;
      if (v8)
        v10 = (const char *)v8;
      v16 = v6;
      v17 = 2085;
      v18 = v7;
      v19 = 2082;
      v20 = v10;
      v21 = 2048;
      v22 = v9;
      _os_log_error_impl(&dword_196BCC000, v5, OS_LOG_TYPE_ERROR, "PushSubscription.unsubscribe(%{public}s scope: %{sensitive}s) failed with domain: %{public}s code: %lld)", buf, 0x2Au);
      if (v12)
      {
        if (*(_DWORD *)v12 == 1)
          WTF::fastFree(v12, v11);
        else
          --*(_DWORD *)v12;
      }
      if (v14)
      {
        if (*(_DWORD *)v14 == 1)
          WTF::fastFree(v14, v11);
        else
          --*(_DWORD *)v14;
      }
      result = (uint64_t)v13;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          return WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v11);
        else
          *(_DWORD *)v13 -= 2;
      }
    }
  }
  return result;
}

void sub_196F9A778(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, WTF::StringImpl *a11, WTF *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 1)
      WTF::fastFree(a12, a2);
    else
      --*(_DWORD *)a12;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(40 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 40 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF::StringImpl **)(v4 + 40 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = *((_DWORD *)v14 + 4);
          if (v17 >= 0x100)
            v18 = v17 >> 8;
          else
            v18 = WTF::StringImpl::hashSlowCase(v14);
          v19 = 0;
          do
          {
            v20 = v18 & v16;
            v21 = (WTF::StringImpl **)(v15 + 40 * (v18 & v16));
            v18 = ++v19 + (v18 & v16);
          }
          while (*v21);
          WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>::~KeyValuePair(v15 + 40 * v20, v8);
          v22 = *v13;
          *v13 = 0;
          *v21 = v22;
          v23 = v15 + 40 * v20;
          v24 = v4 + 40 * v11;
          *(_OWORD *)(v23 + 24) = 0u;
          *(_OWORD *)(v23 + 8) = 0u;
          *(_QWORD *)(v23 + 8) = *(_QWORD *)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          v25 = *(_QWORD *)(v23 + 16);
          v26 = *(_QWORD *)(v24 + 24);
          *(_QWORD *)(v23 + 16) = *(_QWORD *)(v24 + 16);
          *(_QWORD *)(v23 + 24) = v26;
          *(_QWORD *)(v24 + 16) = v25;
          *(_QWORD *)(v24 + 24) = 0;
          *(_DWORD *)(v23 + 32) = *(_DWORD *)(v24 + 32);
          *(_DWORD *)(v24 + 32) = 0;
          WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>::~KeyValuePair(v24, v27);
          if (v13 == a3)
            v12 = v15 + 40 * v20;
        }
        else
        {
          WTF::KeyValuePair<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>::~KeyValuePair(v4 + 40 * v11, v8);
        }
      }
      ++v11;
    }
    while (v11 != v5);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

_QWORD *WTF::Detail::CallableWrapper<WebPushD::PushService::finishedPushServiceRequest(WTF::HashMap<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::HashTableTraits> &,WebPushD::PushServiceRequest&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34B2EB0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::PushService::finishedPushServiceRequest(WTF::HashMap<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::HashTableTraits> &,WebPushD::PushServiceRequest&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34B2EB0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::PushService::finishedPushServiceRequest(WTF::HashMap<WTF::String,WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Deque<std::unique_ptr<WebPushD::PushServiceRequest>,0ul>>,WTF::HashTableTraits> &,WebPushD::PushServiceRequest&)::$_0,void>::call(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebPushD::PushService::incrementSilentPushCount(WebCore::PushSubscriptionSetIdentifier const&,WTF::String const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0,void,unsigned int>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *a1 = &off_1E34B2ED8;
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::PushService::incrementSilentPushCount(WebCore::PushSubscriptionSetIdentifier const&,WTF::String const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0,void,unsigned int>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *(_QWORD *)this = &off_1E34B2ED8;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebPushD::PushService::incrementSilentPushCount(WebCore::PushSubscriptionSetIdentifier const&,WTF::String const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0,void,unsigned int>::call(_QWORD *a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::StringImpl *result;
  uint64_t v6;
  NSObject *v7;
  char *v8;
  char *v9;
  void *v10;
  WTF *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF *v16;
  WTF::StringImpl *v17;
  WTF *v18;
  _BYTE buf[12];
  __int16 v20;
  char *v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v2 = a2;
  v24 = *MEMORY[0x1E0C80C00];
  if (a2 > 2)
  {
    v6 = a1[2];
    v7 = qword_1ECE716B8;
    if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_DEFAULT))
    {
      WebCore::PushSubscriptionSetIdentifier::debugDescription((WebCore::PushSubscriptionSetIdentifier *)(a1 + 4));
      WTF::String::utf8();
      WTF::String::utf8();
      v8 = (char *)v18 + 16;
      if (!v18)
        v8 = 0;
      *(_DWORD *)buf = 136446723;
      if (v16)
        v9 = (char *)v16 + 16;
      else
        v9 = 0;
      *(_QWORD *)&buf[4] = v8;
      v20 = 2085;
      v21 = v9;
      v22 = 1024;
      v23 = v2;
      _os_log_impl(&dword_196BCC000, v7, OS_LOG_TYPE_DEFAULT, "Removing all subscriptions associated with %{public}s %{sensitive}s since it processed %u silent pushes", buf, 0x1Cu);
      if (v16)
      {
        if (*(_DWORD *)v16 == 1)
          WTF::fastFree(v16, v10);
        else
          --*(_DWORD *)v16;
      }
      v11 = v18;
      v18 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 1)
          WTF::fastFree(v11, v10);
        else
          --*(_DWORD *)v11;
      }
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v10);
        else
          *(_DWORD *)v17 -= 2;
      }
    }
    v12 = (_DWORD *)a1[8];
    if (v12)
      *v12 += 2;
    *(_QWORD *)buf = v12;
    buf[8] = 1;
    v13 = a1[9];
    a1[9] = 0;
    v14 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v14 = &off_1E34B2F00;
    *(_QWORD *)(v14 + 8) = v13;
    *(_DWORD *)(v14 + 16) = v2;
    v18 = (WTF *)v14;
    WebPushD::PushService::removeRecordsImpl(v6, (uint64_t)(a1 + 4), buf, (uint64_t *)&v18);
    result = v18;
    if (v18)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v18 + 8))(v18);
    if (buf[8])
    {
      result = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    v4 = a1[9];
    a1[9] = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a2);
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  return result;
}

void sub_196F9AE74(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF *a12, WTF::StringImpl *a13, char a14)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 1)
      WTF::fastFree(a12, a2);
    else
      --*(_DWORD *)a12;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN8WebPushD11PushService24incrementSilentPushCountERKN7WebCore29PushSubscriptionSetIdentifierERKNS_6StringEONS_17CompletionHandlerIFvjEEEEN3__0clEjEUlOT_E_vJjEED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34B2F00;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN8WebPushD11PushService24incrementSilentPushCountERKN7WebCore29PushSubscriptionSetIdentifierERKNS_6StringEONS_17CompletionHandlerIFvjEEEEN3__0clEjEUlOT_E_vJjEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34B2F00;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN8WebPushD11PushService24incrementSilentPushCountERKN7WebCore29PushSubscriptionSetIdentifierERKNS_6StringEONS_17CompletionHandlerIFvjEEEEN3__0clEjEUlOT_E_vJjEE4callEj(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned int *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void sub_196F9AFF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebPushD::PushService::setPushesEnabledForSubscriptionSetAndOrigin(WebCore::PushSubscriptionSetIdentifier const&,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34B2F28;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::PushService::setPushesEnabledForSubscriptionSetAndOrigin(WebCore::PushSubscriptionSetIdentifier const&,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34B2F28;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::PushService::setPushesEnabledForSubscriptionSetAndOrigin(WebCore::PushSubscriptionSetIdentifier const&,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,BOOL>::call(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  if ((a2 & 1) == 0)
  {
    v7 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  v2 = *(uint64_t **)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v5 = *v2;
  v4 = v2[1];
  *(_QWORD *)(a1 + 16) = 0;
  v8 = v3;
  result = WebPushD::updateTopicLists(v5, v4, &v8);
  v7 = v8;
  if (v8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

void sub_196F9B110(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebPushD::PushService::removeRecordsImpl(WebCore::PushSubscriptionSetIdentifier const&,std::optional<WTF::String> const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0,void,WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *a1 = off_1E34B2F50;
  v3 = a1[10];
  a1[10] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 8), a2);
  v5 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::PushService::removeRecordsImpl(WebCore::PushSubscriptionSetIdentifier const&,std::optional<WTF::String> const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0,void,WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *(_QWORD *)a1 = off_1E34B2F50;
  v3 = *((_QWORD *)a1 + 10);
  *((_QWORD *)a1 + 10) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 64, a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)a1 + 5);
  *((_QWORD *)a1 + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::PushService::removeRecordsImpl(WebCore::PushSubscriptionSetIdentifier const&,std::optional<WTF::String> const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0,void,WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1, unsigned int *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  _DWORD **v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t result;
  _QWORD *v18;

  v3 = *(uint64_t **)(a1 + 16);
  v4 = a2[3];
  if ((_DWORD)v4)
  {
    v6 = 32 * v4;
    v7 = (_DWORD **)(*(_QWORD *)a2 + 8);
    do
    {
      v8 = *v3;
      v9 = *v7;
      if (*v7)
        *v9 += 2;
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v10 = &off_1E34B2F78;
      v10[1] = v9;
      v18 = v10;
      (*(void (**)(uint64_t, _DWORD **, _DWORD **, _QWORD **))(*(_QWORD *)v8 + 32))(v8, v7, v7 + 1, &v18);
      v11 = (uint64_t)v18;
      v18 = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      v7 += 4;
      v6 -= 32;
    }
    while (v6);
    v12 = a2[3];
  }
  else
  {
    v12 = 0;
  }
  v13 = *v3;
  v14 = v3[1];
  v15 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v16 = &off_1E34B2FA0;
  v16[1] = v12;
  v16[2] = v15;
  v18 = v16;
  WebPushD::updateTopicLists(v13, v14, (uint64_t *)&v18);
  result = (uint64_t)v18;
  if (v18)
    return (*(uint64_t (**)(_QWORD *))(*v18 + 8))(v18);
  return result;
}

void sub_196F9B390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebPushD::PushService::removeRecordsImpl(WebCore::PushSubscriptionSetIdentifier const&,std::optional<WTF::String> const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0::operator()(WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(BOOL,NSError *)#1},void,BOOL,WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)a1[1];
  *a1 = &off_1E34B2F78;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::PushService::removeRecordsImpl(WebCore::PushSubscriptionSetIdentifier const&,std::optional<WTF::String> const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0::operator()(WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(BOOL,NSError *)#1},void,BOOL,WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34B2F78;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebPushD::PushService::removeRecordsImpl(WebCore::PushSubscriptionSetIdentifier const&,std::optional<WTF::String> const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0::operator()(WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(BOOL,NSError *)#1},void,BOOL,WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1, char a2, void *a3)
{
  NSObject *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  void *v9;
  WTF *v10;
  uint8_t buf[4];
  char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if ((a2 & 1) == 0)
  {
    v4 = qword_1ECE716B8;
    if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_ERROR))
    {
      WTF::String::utf8();
      if (v10)
        v5 = (char *)v10 + 16;
      else
        v5 = 0;
      v6 = objc_msgSend((id)objc_msgSend(a3, "domain"), "UTF8String");
      v7 = objc_msgSend(a3, "code");
      v8 = "none";
      *(_DWORD *)buf = 136643331;
      if (v6)
        v8 = (const char *)v6;
      v12 = v5;
      v13 = 2082;
      v14 = v8;
      v15 = 2048;
      v16 = v7;
      _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "removeRecordsImpl couldn't remove subscription for topic %{sensitive}s: %{public}s code: %lld)", buf, 0x20u);
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
          WTF::fastFree(v10, v9);
        else
          --*(_DWORD *)v10;
      }
    }
  }
}

void sub_196F9B5D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebPushD::PushService::removeRecordsImpl(WebCore::PushSubscriptionSetIdentifier const&,std::optional<WTF::String> const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0::operator()(WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34B2FA0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::PushService::removeRecordsImpl(WebCore::PushSubscriptionSetIdentifier const&,std::optional<WTF::String> const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0::operator()(WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34B2FA0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::PushService::removeRecordsImpl(WebCore::PushSubscriptionSetIdentifier const&,std::optional<WTF::String> const&,WTF::CompletionHandler<void ()(unsigned int)> &&)::$_0::operator()(WTF::Vector<WebCore::RemovedPushRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned int *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void sub_196F9B6D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebPushD::PushService::didReceivePublicToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebCore::PushDatabase::PublicTokenChanged>::call(uint64_t a1, char a2)
{
  NSObject *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint8_t v8[16];
  uint8_t buf[16];

  v2 = qword_1ECE716B8;
  if ((a2 & 1) != 0)
  {
    v3 = *(uint64_t **)(a1 + 8);
    if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_error_impl(&dword_196BCC000, v2, OS_LOG_TYPE_ERROR, "Public token changed; invalidated all existing push subscriptions",
        v8,
        2u);
    }
    v4 = *v3;
    v5 = v3[1];
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v6 = off_1E34B2FF0;
    v7 = v6;
    WebPushD::updateTopicLists(v4, v5, (uint64_t *)&v7);
    if (v7)
      (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  }
  else if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "Received expected public token", buf, 2u);
  }
}

void sub_196F9B7DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::PushService::didReceivePushMessage(NSString *,NSDictionary *,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,std::optional<WebCore::PushRecord> &&>::~CallableWrapper(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;
  WTF::StringImpl *v8;

  *(_QWORD *)a1 = &off_1E34B3018;
  v3 = *(void **)(a1 + 88);
  if (v3)

  v4 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(WTF **)(a1 + 64);
  if (v5)
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = *(WTF **)(a1 + 48);
  if (v6)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = *(WTF **)(a1 + 32);
  if (v7)
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebPushD::PushService::didReceivePushMessage(NSString *,NSDictionary *,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,std::optional<WebCore::PushRecord> &&>::~CallableWrapper(WTF *this, void *a2)
{
  void *v3;
  uint64_t v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;
  WTF::StringImpl *v8;

  *(_QWORD *)this = &off_1E34B3018;
  v3 = (void *)*((_QWORD *)this + 11);
  if (v3)

  v4 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (WTF *)*((_QWORD *)this + 8);
  if (v5)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = (WTF *)*((_QWORD *)this + 6);
  if (v6)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = (WTF *)*((_QWORD *)this + 4);
  if (v7)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebPushD::PushService::didReceivePushMessage(NSString *,NSDictionary *,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,std::optional<WebCore::PushRecord> &&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  unsigned int v11;
  unsigned int v12;
  WTF *v13;
  unsigned int v14;
  unsigned int v15;
  WTF *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  void *v20;
  NSObject *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF *v26;
  NSObject *v27;
  char *v28;
  char *v29;
  void *v30;
  NSObject *v31;
  WTF::StringImpl *v32;
  WTF *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF *v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  WTF *v47;
  char *v48;
  void *v49;
  WTF *v50;
  uint64_t v51;
  void *v52;
  WTF *v53;
  WTF::StringImpl *v54;
  WTF *v55;
  WTF *v56;
  uint64_t v57;
  char v58;
  WTF *v59;
  unsigned int v60;
  unsigned int v61;
  WTF *v62;
  unsigned int v63;
  unsigned int v64;
  WTF *v65;
  unsigned int v66;
  unsigned int v67;
  WTF *v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  __int128 v71;
  _OWORD v72[2];
  uint64_t v73;
  uint64_t v74;
  WTF *v75;
  unint64_t v76;
  WTF *v77;
  unint64_t v78;
  WTF *v79;
  unint64_t v80;
  __int128 v81;
  _BYTE buf[22];
  WTF::StringImpl *v83;
  WTF::StringImpl *v84[5];
  _BYTE v85[136];
  char v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 160))
  {
    v3 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a2 + 16);
    v4 = *(WTF::StringImpl **)(a2 + 24);
    v68 = *(WTF **)a2;
    v69 = v5;
    v70 = v4;
    *(_OWORD *)(a2 + 16) = 0u;
    v6 = *(_OWORD *)(a2 + 48);
    v71 = *(_OWORD *)(a2 + 32);
    v72[0] = v6;
    v7 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    v72[1] = v7;
    v8 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a2 + 80) = 0;
    v73 = v8;
    v9 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a2 + 88) = 0;
    v74 = v9;
    v10 = *(WTF **)(a2 + 96);
    *(_QWORD *)(a2 + 96) = 0;
    v75 = v10;
    v11 = *(_DWORD *)(a2 + 104);
    v12 = *(_DWORD *)(a2 + 108);
    *(_QWORD *)(a2 + 104) = 0;
    v76 = __PAIR64__(v12, v11);
    v13 = *(WTF **)(a2 + 112);
    *(_QWORD *)(a2 + 112) = 0;
    v77 = v13;
    v14 = *(_DWORD *)(a2 + 120);
    v15 = *(_DWORD *)(a2 + 124);
    *(_QWORD *)(a2 + 120) = 0;
    v78 = __PAIR64__(v15, v14);
    v16 = *(WTF **)(a2 + 128);
    *(_QWORD *)(a2 + 128) = 0;
    v79 = v16;
    v18 = *(_DWORD *)(a2 + 136);
    v17 = *(_DWORD *)(a2 + 140);
    *(_QWORD *)(a2 + 136) = 0;
    v80 = __PAIR64__(v17, v18);
    v81 = *(_OWORD *)(a2 + 144);
    v19 = *(_DWORD *)(a1 + 24);
    if (!v19)
    {
      buf[0] = 0;
      buf[16] = 0;
      if (v4)
        *(_DWORD *)v4 += 2;
      v83 = v4;
      WTF::URL::URL((uint64_t)v84, (WTF::StringImpl **)v72 + 1);
      v85[0] = 0;
      v86 = 0;
      (*(void (**)(_QWORD, uint64_t *, _BYTE *))(**(_QWORD **)(v3 + 16) + 16))(*(_QWORD *)(v3 + 16), &v69, buf);
      std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v85, v23);
      v25 = v84[0];
      v84[0] = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v24);
        else
          *(_DWORD *)v25 -= 2;
      }
      v32 = v83;
      v83 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v24);
        else
          *(_DWORD *)v32 -= 2;
      }
      if (buf[16])
      {
        v33 = *(WTF **)buf;
        if (*(_QWORD *)buf)
        {
          *(_QWORD *)buf = 0;
          *(_DWORD *)&buf[8] = 0;
          WTF::fastFree(v33, v24);
        }
      }
      v34 = *(_QWORD *)(a1 + 80);
      *(_QWORD *)(a1 + 80) = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34);
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
      goto LABEL_70;
    }
    v75 = 0;
    v59 = v10;
    v76 = 0;
    v60 = v11;
    v61 = v12;
    v77 = 0;
    v62 = v13;
    v78 = 0;
    v63 = v14;
    v64 = v15;
    v79 = 0;
    v65 = v16;
    v80 = 0;
    v66 = v18;
    v67 = v17;
    LOBYTE(v56) = 0;
    v58 = 0;
    if (v19 == 1)
    {
      WebCore::PushCrypto::decryptAESGCMPayload();
      std::__optional_storage_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>((uint64_t)&v56, (uint64_t)buf);
    }
    else
    {
      if (v19 != 2)
        goto LABEL_27;
      WebCore::PushCrypto::decryptAES128GCMPayload();
      std::__optional_storage_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>((uint64_t)&v56, (uint64_t)buf);
    }
    if (buf[16])
    {
      v26 = *(WTF **)buf;
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)buf = 0;
        *(_DWORD *)&buf[8] = 0;
        WTF::fastFree(v26, v20);
      }
    }
    if (v58)
    {
      v27 = qword_1ECE716B8;
      if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_DEFAULT))
      {
        WebCore::PushSubscriptionSetIdentifier::debugDescription((WebCore::PushSubscriptionSetIdentifier *)&v69);
        WTF::String::utf8();
        WTF::String::utf8();
        v28 = (char *)v55 + 16;
        if (!v55)
          v28 = 0;
        if (v53)
          v29 = (char *)v53 + 16;
        else
          v29 = 0;
        *(_DWORD *)buf = 136446467;
        *(_QWORD *)&buf[4] = v28;
        *(_WORD *)&buf[12] = 2085;
        *(_QWORD *)&buf[14] = v29;
        _os_log_impl(&dword_196BCC000, v27, OS_LOG_TYPE_DEFAULT, "Decoded incoming push message for %{public}s %{sensitive}s", buf, 0x16u);
        if (v53)
        {
          if (*(_DWORD *)v53 == 1)
            WTF::fastFree(v53, v30);
          else
            --*(_DWORD *)v53;
        }
        if (v55)
        {
          if (*(_DWORD *)v55 == 1)
            WTF::fastFree(v55, v30);
          else
            --*(_DWORD *)v55;
        }
        if (v54)
        {
          if (*(_DWORD *)v54 == 2)
            WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v30);
          else
            *(_DWORD *)v54 -= 2;
        }
        if (!v58)
          __break(1u);
      }
      *(_QWORD *)buf = v56;
      v36 = v57;
      v56 = 0;
      v57 = 0;
      *(_QWORD *)&buf[8] = v36;
      buf[16] = 1;
      v37 = v70;
      if (v70)
        *(_DWORD *)v70 += 2;
      v83 = v37;
      WTF::URL::URL((uint64_t)v84, (WTF::StringImpl **)v72 + 1);
      v85[0] = 0;
      v86 = 0;
      (*(void (**)(_QWORD, uint64_t *, _BYTE *))(**(_QWORD **)(v3 + 16) + 16))(*(_QWORD *)(v3 + 16), &v69, buf);
      std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v85, v38);
      v40 = v84[0];
      v84[0] = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, v39);
        else
          *(_DWORD *)v40 -= 2;
      }
      v41 = v83;
      v83 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v39);
        else
          *(_DWORD *)v41 -= 2;
      }
      if (buf[16])
      {
        v42 = *(WTF **)buf;
        if (*(_QWORD *)buf)
        {
          *(_QWORD *)buf = 0;
          *(_DWORD *)&buf[8] = 0;
          WTF::fastFree(v42, v39);
        }
      }
LABEL_61:
      v43 = *(_QWORD *)(a1 + 80);
      *(_QWORD *)(a1 + 80) = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43);
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
      if (v58)
      {
        v44 = v56;
        if (v56)
        {
          v56 = 0;
          LODWORD(v57) = 0;
          WTF::fastFree(v44, v35);
        }
      }
      v45 = v65;
      if (v65)
      {
        v65 = 0;
        v66 = 0;
        WTF::fastFree(v45, v35);
      }
      v46 = v62;
      if (v62)
      {
        v62 = 0;
        v63 = 0;
        WTF::fastFree(v46, v35);
      }
      v47 = v59;
      if (v59)
      {
        v59 = 0;
        v60 = 0;
        WTF::fastFree(v47, v35);
      }
LABEL_70:
      WebCore::PushRecord::~PushRecord((WebCore::PushRecord *)&v68, v35);
      return;
    }
LABEL_27:
    v31 = qword_1ECE716B8;
    if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_ERROR))
    {
      WTF::String::utf8();
      v51 = v55 ? (uint64_t)v55 + 16 : 0;
      *(_DWORD *)buf = 136642819;
      *(_QWORD *)&buf[4] = v51;
      _os_log_error_impl(&dword_196BCC000, v31, OS_LOG_TYPE_ERROR, "Dropping incoming push due to decryption error for topic %{sensitive}s", buf, 0xCu);
      if (v55)
      {
        if (*(_DWORD *)v55 == 1)
          WTF::fastFree(v55, v52);
        else
          --*(_DWORD *)v55;
      }
    }
    goto LABEL_61;
  }
  v21 = qword_1ECE716B8;
  if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_ERROR))
  {
    WTF::String::utf8();
    v48 = v68 ? (char *)v68 + 16 : 0;
    *(_DWORD *)buf = 136642819;
    *(_QWORD *)&buf[4] = v48;
    _os_log_error_impl(&dword_196BCC000, v21, OS_LOG_TYPE_ERROR, "Dropping incoming push sent to unknown topic: %{sensitive}s", buf, 0xCu);
    v50 = v68;
    v68 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
        WTF::fastFree(v50, v49);
      else
        --*(_DWORD *)v50;
    }
  }
  v22 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
}

void sub_196F9C028(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF *a11, WTF *a12, int a13, int a14, char a15, WTF *a16, int a17, WTF *a18, int a19, WTF *a20,int a21,int a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,WTF *a43,int a44,int a45,char a46,WTF::StringImpl *a47,WTF::StringImpl *a48)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 1)
      WTF::fastFree(a11, a2);
    else
      --*(_DWORD *)a11;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a15 && a12)
    WTF::fastFree(a12, a2);
  if (a20)
    WTF::fastFree(a20, a2);
  if (a18)
    WTF::fastFree(a18, a2);
  if (a16)
    WTF::fastFree(a16, a2);
  WebCore::PushRecord::~PushRecord((WebCore::PushRecord *)&a23, a2);
  _Unwind_Resume(a1);
}

void sub_196F9C19C()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  JUMPOUT(0x196F9C18CLL);
}

void sub_196F9C1B4(int a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,int a43,char a44,WTF::StringImpl *a45,WTF::StringImpl *a46)
{
  uint64_t v46;
  WTF::StringImpl *v47;

  std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100](v46, a2);
  if (a46)
  {
    if (*(_DWORD *)a46 == 2)
      WTF::StringImpl::destroy(a46, v47);
    else
      *(_DWORD *)a46 -= 2;
  }
  if (a45)
  {
    if (*(_DWORD *)a45 == 2)
      WTF::StringImpl::destroy(a45, v47);
    else
      *(_DWORD *)a45 -= 2;
  }
  if (a44)
  {
    if (a41)
      JUMPOUT(0x196F9C188);
  }
  JUMPOUT(0x196F9C18CLL);
}

void sub_196F9C22C()
{
  JUMPOUT(0x196F9C194);
}

void sub_196F9C234()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  JUMPOUT(0x196F9C194);
}

uint64_t *WTF::makeString<WTF::ASCIILiteral,WTF::ASCIILiteral,char,WTF::String,char,WTF::String>(uint64_t *result, int8x16_t *a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  size_t v5;
  uint64_t *v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  char v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  _BOOL4 v21;
  _DWORD *v22;
  _BYTE *v23;
  uint64_t v24;
  _BYTE *v25;
  char *v26;
  const char *v27;
  uint64_t i;
  __int16 v29;
  char *v30;
  char *v31;
  __int128 v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  char *v36;
  char *v37;
  char *v38;
  __int16 v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  _DWORD *v44;
  int8x16x2_t v45;
  int8x16x2_t v46;
  int8x16x2_t v47;

  if (a3)
    v5 = a3 - 1;
  else
    v5 = 0;
  if (v5 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x196F9C510);
  }
  v9 = result;
  if (a4)
  {
    v10 = *(_DWORD *)(a4 + 4);
    if (a5)
      goto LABEL_7;
LABEL_53:
    v11 = 0;
    goto LABEL_8;
  }
  v10 = 0;
  if (!a5)
    goto LABEL_53;
LABEL_7:
  v11 = a5[1];
  if (v11 < 0)
    goto LABEL_51;
LABEL_8:
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  v14 = v12;
  if (v10 < 0)
    goto LABEL_51;
  if ((v14 & 1) != 0)
    goto LABEL_51;
  v12 = __OFADD__(v10, v13);
  v15 = v10 + v13;
  if (v12)
    goto LABEL_51;
  v12 = __OFADD__(v15, 1);
  v16 = v15 + 1;
  if (v12)
    goto LABEL_51;
  v12 = __OFADD__((_DWORD)v5, v16);
  v17 = v5 + v16;
  if (v12)
    goto LABEL_51;
  v18 = v17 + 26;
  if (__OFADD__(v17, 26))
    goto LABEL_51;
  if (a4)
  {
    v19 = *(_DWORD *)(a4 + 16);
    if (!a5 || (v19 & 4) == 0)
    {
      v20 = v18;
      v21 = v18 == 0;
      if ((v19 & 4) == 0)
      {
LABEL_21:
        if (v21)
        {
LABEL_22:
          v22 = (_DWORD *)MEMORY[0x1E0CBEF70];
          *MEMORY[0x1E0CBEF70] += 2;
          goto LABEL_46;
        }
        if (v18 <= 0x7FFFFFEF)
        {
          WTF::tryFastCompactMalloc((WTF *)(2 * v20 + 20));
          v22 = v44;
          if (v44)
          {
            *v44 = 2;
            v22[1] = v18;
            *((_QWORD *)v22 + 1) = v22 + 5;
            v22[4] = 0;
            v26 = (char *)(v22 + 18);
            v27 = "com.apple.webkit.webpushd:";
            for (i = 20; i != 72; i += 2)
            {
              v29 = *(unsigned __int8 *)v27++;
              *(_WORD *)((char *)v22 + i) = v29;
            }
            v30 = &v26[2 * v5];
            if ((v5 & 0xFFFFFFC0) != 0)
            {
              v31 = &v26[2 * (v5 & 0xFFFFFFC0)];
              v32 = 0uLL;
              do
              {
                v45.val[0] = *a2;
                v33 = a2[1];
                v46.val[0] = a2[2];
                v34 = a2[3];
                a2 += 4;
                v35 = v34;
                v46.val[1] = 0uLL;
                v47.val[0] = v33;
                v45.val[1] = 0uLL;
                v36 = v26;
                vst2q_s8(v36, v45);
                v36 += 32;
                v47.val[1] = 0uLL;
                vst2q_s8(v36, v47);
                v37 = v26 + 64;
                vst2q_s8(v37, v46);
                v38 = v26 + 96;
                vst2q_s8(v38, *(int8x16x2_t *)(&v32 - 1));
                v26 += 128;
              }
              while (v26 != v31);
              v26 = v31;
            }
            while (v26 != v30)
            {
              v39 = a2->u8[0];
              a2 = (int8x16_t *)((char *)a2 + 1);
              *(_WORD *)v26 = v39;
              v26 += 2;
            }
            *(_WORD *)v30 = 58;
            v40 = v30 + 2;
            v43 = a4;
            WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v43, v40);
            v41 = v43;
            if (v43)
              v41 = *(unsigned int *)(v43 + 4);
            v42 = &v40[2 * v41];
            *(_WORD *)v42 = 58;
            v44 = a5;
            result = WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v44, v42 + 2);
            goto LABEL_46;
          }
        }
LABEL_51:
        *v9 = 0;
        __break(0xC471u);
        JUMPOUT(0x196F9C52CLL);
      }
      goto LABEL_24;
    }
  }
  else if (!a5)
  {
    if (v17 == -26)
      goto LABEL_22;
    v20 = v18;
    if ((v18 & 0x80000000) != 0)
      goto LABEL_51;
    goto LABEL_26;
  }
  v20 = v18;
  v21 = v18 == 0;
  if ((a5[4] & 4) == 0)
    goto LABEL_21;
LABEL_24:
  if (v21)
    goto LABEL_22;
  if ((v18 & 0x80000000) != 0)
    goto LABEL_51;
LABEL_26:
  WTF::tryFastCompactMalloc((WTF *)(v20 + 20));
  v22 = v44;
  if (!v44)
    goto LABEL_51;
  *v44 = 2;
  v22[1] = v18;
  *((_QWORD *)v22 + 1) = v22 + 5;
  v22[4] = 4;
  qmemcpy(v22 + 5, "com.apple.webkit.webpushd:", 26);
  v23 = (char *)v22 + 46;
  if ((_DWORD)v5)
  {
    if ((_DWORD)v5 == 1)
      *v23 = a2->i8[0];
    else
      memcpy((char *)v22 + 46, a2, v5);
  }
  v23[v5] = 58;
  v43 = a4;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v43, &v23[v5 + 1]);
  v24 = v43;
  if (v43)
    v24 = *(unsigned int *)(v43 + 4);
  v25 = &v23[v5 + 1 + v24];
  *v25 = 58;
  v44 = a5;
  result = WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v44, v25 + 1);
LABEL_46:
  *v9 = (uint64_t)v22;
  return result;
}

void sub_196F9C54C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

WTF *WebPushD::PushServiceConnection::startListeningForPublicToken(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WTF *result;
  int v5;
  uint64_t v6;
  void *v7;
  WTF *v8;
  int v9;
  int v10;

  v3 = *a2;
  *a2 = 0;
  result = *(WTF **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  if (result)
    result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 8))(result);
  v5 = *(_DWORD *)(a1 + 36);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v8 = *(WTF **)(a1 + 24);
    v9 = *(_DWORD *)(a1 + 32);
    v10 = v5;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v6 + 16))(v6, &v8);
    result = v8;
    if (v8)
    {
      v8 = 0;
      v9 = 0;
      return (WTF *)WTF::fastFree(result, v7);
    }
  }
  return result;
}

void sub_196F9C640(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  if (a9)
    WTF::fastFree(a9, a2);
  _Unwind_Resume(exception_object);
}

WTF::WorkQueue *WebPushD::PushServiceConnection::startListeningForPushMessages(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WTF::WorkQueue *result;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  WTF::WorkQueue *v8;
  WTF::WorkQueue *v9;

  v3 = *a2;
  *a2 = 0;
  result = *(WTF::WorkQueue **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  if (result)
    result = (WTF::WorkQueue *)(*(uint64_t (**)(WTF::WorkQueue *))(*(_QWORD *)result + 8))(result);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  if (v5 > v6)
    v6 += *(unsigned int *)(a1 + 72);
  if (v6 != v5)
  {
    v7 = WTF::WorkQueue::main(result);
    v8 = (WTF::WorkQueue *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v8 = off_1E34B30C8;
    *((_QWORD *)v8 + 1) = a1;
    v9 = v8;
    (*(void (**)(uint64_t, WTF::WorkQueue **))(*(_QWORD *)v7 + 32))(v7, &v9);
    result = v9;
    v9 = 0;
    if (result)
      return (WTF::WorkQueue *)(*(uint64_t (**)(WTF::WorkQueue *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_196F9C710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void WebPushD::PushServiceConnection::didReceivePushMessage(WebPushD::PushServiceConnection *this, NSString *a2, NSDictionary *a3)
{
  uint64_t v3;
  char *v4;
  CFTypeRef v5;
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef cf;
  const void *v9;
  const void *v10;

  v9 = a3;
  v10 = a2;
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v3 + 16))(*((_QWORD *)this + 5));
  }
  else
  {
    v4 = (char *)this + 48;
    std::pair<WTF::RetainPtr<NSString>,WTF::RetainPtr<NSDictionary>>::pair[abi:sn180100]<NSString*&,NSDictionary*&,0>(&v7, &v10, &v9);
    WTF::Deque<std::pair<WTF::RetainPtr<NSString>,WTF::RetainPtr<NSDictionary>>,0ul>::append((uint64_t)v4, (uint64_t *)&v7);
    v5 = cf;
    cf = 0;
    if (v5)
      CFRelease(v5);
    v6 = v7;
    v7 = 0;
    if (v6)
      CFRelease(v6);
  }
}

void sub_196F9C7BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  if (a9)
    CFRelease(a9);
  _Unwind_Resume(exception_object);
}

void WTF::Deque<std::pair<WTF::RetainPtr<NSString>,WTF::RetainPtr<NSDictionary>>,0ul>::append(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1)
  {
    if (v4 + 1 != *(_QWORD *)a1)
      goto LABEL_10;
    goto LABEL_9;
  }
  v5 = *(unsigned int *)(a1 + 24);
  if (!v4)
  {
    if ((_DWORD)v5)
    {
      v4 = 0;
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (v4 == v5 - 1)
  {
LABEL_9:
    WTF::Deque<std::pair<WTF::RetainPtr<NSString>,WTF::RetainPtr<NSDictionary>>,0ul>::expandCapacity(a1);
    v4 = *(_QWORD *)(a1 + 8);
  }
LABEL_10:
  v6 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 16 * v4);
  v7 = *a2;
  *a2 = 0;
  *v6 = v7;
  v8 = a2[1];
  a2[1] = 0;
  v6[1] = v8;
  if (v4 == *(unsigned int *)(a1 + 24) - 1)
    v9 = 0;
  else
    v9 = v4 + 1;
  *(_QWORD *)(a1 + 8) = v9;
}

const void **std::pair<WTF::RetainPtr<NSString>,WTF::RetainPtr<NSDictionary>>::pair[abi:sn180100]<NSString*&,NSDictionary*&,0>(const void **a1, const void **a2, const void **a3)
{
  const void *v5;
  const void *v6;

  v5 = *a2;
  *a1 = *a2;
  if (v5)
    CFRetain(v5);
  v6 = *a3;
  a1[1] = *a3;
  if (v6)
    CFRetain(v6);
  return a1;
}

void sub_196F9C8D4(_Unwind_Exception *exception_object)
{
  const void **v1;
  const void *v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

void WTF::Detail::CallableWrapper<WebPushD::PushServiceConnection::startListeningForPushMessages(WTF::Function<void ()(NSString *,NSDictionary *)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  const void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 8);
  while (1)
  {
    v2 = *(_QWORD *)(v1 + 48);
    v3 = *(_QWORD *)(v1 + 56);
    if (v2 > v3)
      v3 += *(unsigned int *)(v1 + 72);
    if (v3 == v2)
      break;
    v4 = MEMORY[0x19AEB9C30]();
    v5 = *(_QWORD *)(v1 + 48);
    if (v5 == *(_QWORD *)(v1 + 56))
    {
      __break(0xC471u);
      return;
    }
    v6 = (void *)v4;
    v7 = *(_QWORD *)(v1 + 64) + 16 * v5;
    v8 = *(const void **)v7;
    v9 = *(const void **)(v7 + 8);
    *(_QWORD *)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
    WTF::VectorDestructor<true,std::pair<WTF::RetainPtr<NSString>,WTF::RetainPtr<NSDictionary>>>::destruct(*(_QWORD *)(v1 + 64) + 16 * v5, *(_QWORD *)(v1 + 64) + 16 * v5 + 16);
    v10 = *(_QWORD *)(v1 + 40);
    v11 = *(_QWORD *)(v1 + 48);
    if (v11 == *(unsigned int *)(v1 + 72) - 1)
      v12 = 0;
    else
      v12 = v11 + 1;
    *(_QWORD *)(v1 + 48) = v12;
    (*(void (**)(uint64_t, const void *, const void *))(*(_QWORD *)v10 + 16))(v10, v8, v9);
    if (v9)
      CFRelease(v9);
    if (v8)
      CFRelease(v8);
    objc_autoreleasePoolPop(v6);
  }
}

void sub_196F9C9DC(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WTF::Deque<std::pair<WTF::RetainPtr<NSString>,WTF::RetainPtr<NSDictionary>>,0ul>::expandCapacity(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  const void **v4;
  int v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;

  v1 = *(unsigned int *)(a1 + 24);
  v2 = v1 + (v1 >> 2);
  if (v2 <= 0xF)
    v2 = 15;
  if (v2 >= 0xFFFFFFF)
  {
    __break(0xC471u);
    JUMPOUT(0x196F9CAE4);
  }
  v4 = *(const void ***)(a1 + 16);
  v5 = v2 + 1;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * (v2 + 1)));
  *(_DWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 <= v7)
  {
    WTF::VectorMover<false,std::pair<WTF::RetainPtr<NSString>,WTF::RetainPtr<NSDictionary>>>::move(&v4[2 * *(_QWORD *)a1], &v4[2 * v7], &v6[2 * *(_QWORD *)a1]);
    if (!v4)
      return;
  }
  else
  {
    WTF::VectorMover<false,std::pair<WTF::RetainPtr<NSString>,WTF::RetainPtr<NSDictionary>>>::move(v4, &v4[2 * v7], v6);
    v8 = *(_QWORD *)a1 - v1 + *(unsigned int *)(a1 + 24);
    WTF::VectorMover<false,std::pair<WTF::RetainPtr<NSString>,WTF::RetainPtr<NSDictionary>>>::move(&v4[2 * *(_QWORD *)a1], &v4[2 * v1], (_QWORD *)(*(_QWORD *)(a1 + 16) + 16 * v8));
    *(_QWORD *)a1 = v8;
    if (!v4)
      return;
  }
  if (*(const void ***)(a1 + 16) == v4)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
  }
  WTF::fastFree((WTF *)v4, v9);
}

void WTF::VectorMover<false,std::pair<WTF::RetainPtr<NSString>,WTF::RetainPtr<NSDictionary>>>::move(const void **a1, const void **a2, _QWORD *a3)
{
  const void **v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *v5;
      *v5 = 0;
      *a3 = v6;
      v7 = v5[1];
      v5[1] = 0;
      a3[1] = v7;
      v8 = v5[1];
      v5[1] = 0;
      if (v8)
        CFRelease(v8);
      v9 = *v5;
      *v5 = 0;
      if (v9)
        CFRelease(v9);
      v5 += 2;
      a3 += 2;
    }
    while (v5 != a2);
  }
}

void WebKit::RemoteAudioDestinationManager::~RemoteAudioDestinationManager(WebKit::RemoteAudioDestinationManager *this, void *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  WebKit::RemoteAudioDestination **v6;

  *(_QWORD *)this = off_1E34B30F0;
  v3 = (unsigned __int8 *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = (WebKit::RemoteAudioDestination **)(v4 + 8);
      do
      {
        if (*(v6 - 1) != (WebKit::RemoteAudioDestination *)-1)
          std::unique_ptr<WebKit::RemoteAudioDestination>::reset[abi:sn180100](v6, 0);
        v6 += 2;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteAudioDestinationManager::~RemoteAudioDestinationManager(this, a2);
  WTF::fastFree(v2, v3);
}

unsigned __int8 *WebKit::RemoteAudioDestinationManager::createAudioDestination(_QWORD *a1, uint64_t a2, double a3, float a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  unsigned __int8 *result;
  WebKit::GPUConnectionToWebProcess *v14;
  uint64_t v15;
  int v16;
  WebCore::AudioOutputUnitAdaptor *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  int v34;
  WTF *v35;
  void *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  WebKit::GPUConnectionToWebProcess *v41;
  NSObject *v42;
  uint64_t v43;
  WebKit::GPUConnectionToWebProcess *v44;
  _BYTE buf[12];
  __int16 v46;
  const char *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  result = (unsigned __int8 *)a1[3];
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, a1[4], &v44);
    v14 = v44;
    if (v44)
    {
      if (*((_BYTE *)v44 + 345))
      {
        v42 = off_1ECE71C40;
        if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
        {
          v43 = *((_QWORD *)v14 + 10);
          *(_DWORD *)buf = 134218242;
          *(_QWORD *)&buf[4] = v43;
          v46 = 2082;
          v47 = "\"Received a createAudioDestination() message from a webpage in Lockdown mode.\"";
          _os_log_fault_impl(&dword_196BCC000, v42, OS_LOG_TYPE_FAULT, "Requesting termination of web process %llu for reason: %{public}s", buf, 0x16u);
          v14 = v44;
        }
        result = (unsigned __int8 *)WebKit::GPUConnectionToWebProcess::terminateWebProcess(v14);
        goto LABEL_29;
      }
      v15 = WTF::fastMalloc((WTF *)0x48);
      *(_QWORD *)v15 = off_1E34B3158;
      WTF::MachSendRight::MachSendRight();
      v16 = *(_DWORD *)(a8 + 4);
      *(_DWORD *)(a8 + 4) = 0;
      *(_DWORD *)(v15 + 12) = v16;
      *(_BYTE *)(v15 + 16) = 0;
      v17 = (WebCore::AudioOutputUnitAdaptor *)WebCore::AudioOutputUnitAdaptor::AudioOutputUnitAdaptor();
      *(_QWORD *)(v15 + 40) = 0;
      *(_DWORD *)(v15 + 48) = a7;
      *(_QWORD *)(v15 + 56) = 0;
      *(_QWORD *)(v15 + 64) = 0;
      WebCore::AudioOutputUnitAdaptor::configure(v17, a4);
      WebCore::SharedMemory::map();
      v18 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      v19 = *(unsigned int **)(v15 + 40);
      *(_QWORD *)(v15 + 40) = v18;
      if (v19)
      {
        WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v19);
        v20 = *(unsigned int **)buf;
        *(_QWORD *)buf = 0;
        if (v20)
          WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v20);
      }
      v23 = a1[2];
      v22 = a1 + 2;
      v21 = v23;
      if (v23
        || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v22),
            (v21 = *v22) != 0))
      {
        v24 = *(_DWORD *)(v21 - 8);
      }
      else
      {
        v24 = 0;
      }
      v25 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
      v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
      v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
      v28 = v24 & ((v27 >> 31) ^ v27);
      v29 = (_QWORD *)(v21 + 16 * v28);
      v30 = *v29;
      if (*v29)
      {
        v31 = 0;
        v32 = 1;
        do
        {
          if (v30 == a2)
          {
            WebKit::RemoteAudioDestination::~RemoteAudioDestination((WebKit::RemoteAudioDestination *)v15);
            result = (unsigned __int8 *)WTF::fastFree(v35, v36);
            goto LABEL_29;
          }
          if (v30 == -1)
            v31 = v29;
          v28 = (v28 + v32) & v24;
          v29 = (_QWORD *)(v21 + 16 * v28);
          v30 = *v29;
          ++v32;
        }
        while (*v29);
        if (v31)
        {
          *v31 = 0;
          v31[1] = 0;
          --*(_DWORD *)(*v22 - 16);
          v29 = v31;
        }
      }
      *v29 = a2;
      result = (unsigned __int8 *)std::unique_ptr<WebKit::RemoteAudioDestination>::reset[abi:sn180100]((WebKit::RemoteAudioDestination **)v29 + 1, (WebKit::RemoteAudioDestination *)v15);
      v33 = *v22;
      if (*v22)
        v34 = *(_DWORD *)(v33 - 12) + 1;
      else
        v34 = 1;
      *(_DWORD *)(v33 - 12) = v34;
      v37 = *v22;
      if (*v22)
        v38 = *(_DWORD *)(v37 - 12);
      else
        v38 = 0;
      v39 = (*(_DWORD *)(v37 - 16) + v38);
      v40 = *(unsigned int *)(v37 - 4);
      if (v40 > 0x400)
      {
        if (v40 > 2 * v39)
        {
LABEL_29:
          v41 = v44;
          v44 = 0;
          if (v41)
            return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v41 + 2));
          return result;
        }
      }
      else if (3 * v40 > 4 * v39)
      {
        goto LABEL_29;
      }
      result = (unsigned __int8 *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v22);
      goto LABEL_29;
    }
  }
  return result;
}

void WebKit::RemoteAudioDestinationManager::deleteAudioDestination(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 *v3;
  WebKit::GPUConnectionToWebProcess *v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  const char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = (unsigned __int8 *)a1[3];
  if (v3)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v3, a1[4], &v25);
    v5 = (WebKit::GPUConnectionToWebProcess *)v25;
    if (v25)
    {
      if (*(_BYTE *)(v25 + 345))
      {
        v23 = off_1ECE71C40;
        if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
        {
          v24 = *((_QWORD *)v5 + 10);
          *(_DWORD *)buf = 134218242;
          v27 = v24;
          v28 = 2082;
          v29 = "\"Received a deleteAudioDestination() message from a webpage in Lockdown mode.\"";
          _os_log_fault_impl(&dword_196BCC000, v23, OS_LOG_TYPE_FAULT, "Requesting termination of web process %llu for reason: %{public}s", buf, 0x16u);
          v5 = (WebKit::GPUConnectionToWebProcess *)v25;
        }
        WebKit::GPUConnectionToWebProcess::terminateWebProcess(v5);
      }
      else
      {
        v7 = a1 + 2;
        v6 = a1[2];
        if (v6)
        {
          v8 = *(_DWORD *)(v6 - 8);
          v9 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
          v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
          v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
          v12 = v8 & ((v11 >> 31) ^ v11);
          v13 = *(_QWORD *)(v6 + 16 * v12);
          if (v13 != a2)
          {
            v14 = 1;
            while (v13)
            {
              v12 = ((_DWORD)v12 + v14) & v8;
              v13 = *(_QWORD *)(v6 + 16 * v12);
              ++v14;
              if (v13 == a2)
                goto LABEL_12;
            }
            v12 = *(unsigned int *)(v6 - 4);
          }
LABEL_12:
          if (v12 != *(_DWORD *)(v6 - 4))
          {
            v15 = v6 + 16 * v12;
            *(_QWORD *)v15 = -1;
            std::unique_ptr<WebKit::RemoteAudioDestination>::reset[abi:sn180100]((WebKit::RemoteAudioDestination **)(v15 + 8), 0);
            ++*(_DWORD *)(*v7 - 16);
            v16 = *v7;
            v17 = *v7 ? *(_DWORD *)(v16 - 12) - 1 : -1;
            *(_DWORD *)(v16 - 12) = v17;
            v18 = *v7;
            if (*v7)
            {
              v19 = 6 * *(_DWORD *)(v18 - 12);
              v20 = *(_DWORD *)(v18 - 4);
              if (v19 < v20 && v20 >= 9)
                WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1 + 2, v20 >> 1);
            }
          }
        }
        if (WebKit::RemoteAudioDestinationManager::allowsExitUnderMemoryPressure((WebKit::RemoteAudioDestinationManager *)a1))
          WebKit::GPUProcess::tryExitIfUnusedAndUnderMemoryPressure(*(WebKit::GPUProcess **)(v25 + 72));
      }
      v22 = v25;
      v25 = 0;
      if (v22)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v22 + 16));
    }
  }
}

BOOL WebKit::RemoteAudioDestinationManager::allowsExitUnderMemoryPressure(WebKit::RemoteAudioDestinationManager *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  _BOOL8 v8;

  v2 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 2);
  v4 = *((_QWORD *)this + 2);
  if (v4)
    v5 = (_QWORD *)(v4 + 16 * *(unsigned int *)(v4 - 4));
  else
    v5 = 0;
  if (v5 == v2)
    return 1;
  do
  {
    v6 = v2[1];
    v7 = *(unsigned __int8 *)(v6 + 16);
    v8 = *(_BYTE *)(v6 + 16) == 0;
    if (v7)
      break;
    while (1)
    {
      v2 += 2;
      if (v2 == v3)
        break;
      if ((unint64_t)(*v2 + 1) > 1)
        goto LABEL_10;
    }
    v2 = v3;
LABEL_10:
    ;
  }
  while (v2 != v5);
  return v8;
}

unsigned __int8 *WebKit::RemoteAudioDestinationManager::startAudioDestination(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *result;
  WebKit::GPUConnectionToWebProcess *v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  WebKit::GPUConnectionToWebProcess *v12;
  NSObject *v13;
  uint64_t v14;
  WebKit::GPUConnectionToWebProcess *v15;
  uint64_t v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v16 = a2;
  v5 = (unsigned __int8 *)a1[3];
  if (!v5)
  {
    v15 = 0;
LABEL_3:
    v6 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 16))(v6, 0);
LABEL_4:
    result = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    goto LABEL_5;
  }
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v5, a1[4], &v15);
  if (!v15)
    goto LABEL_3;
  if (!*((_BYTE *)v15 + 345))
  {
    v9 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1 + 2, &v16);
    if (v9)
    {
      v10 = v9;
      if (WebCore::AudioOutputUnitAdaptor::start((WebCore::AudioOutputUnitAdaptor *)(v9 + 24)))
      {
        v11 = *(_BYTE *)(v10 + 16) != 0;
      }
      else
      {
        v11 = 1;
        *(_BYTE *)(v10 + 16) = 1;
      }
    }
    else
    {
      v11 = 0;
    }
    v6 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v6 + 16))(v6, v11);
    goto LABEL_4;
  }
  v12 = v15;
  v13 = off_1ECE71C40;
  if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
  {
    v14 = *((_QWORD *)v12 + 10);
    *(_DWORD *)buf = 134218242;
    v18 = v14;
    v19 = 2082;
    v20 = "\"Received a startAudioDestination() message from a webpage in Lockdown mode.\"";
    _os_log_fault_impl(&dword_196BCC000, v13, OS_LOG_TYPE_FAULT, "Requesting termination of web process %llu for reason: %{public}s", buf, 0x16u);
    v12 = v15;
  }
  result = (unsigned __int8 *)WebKit::GPUConnectionToWebProcess::terminateWebProcess(v12);
LABEL_5:
  v8 = v15;
  v15 = 0;
  if (v8)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v8 + 2));
  return result;
}

unsigned __int8 *WebKit::RemoteAudioDestinationManager::stopAudioDestination(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *result;
  WebKit::GPUConnectionToWebProcess *v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  WebKit::GPUConnectionToWebProcess *v12;
  NSObject *v13;
  uint64_t v14;
  WebKit::GPUConnectionToWebProcess *v15;
  uint64_t v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v16 = a2;
  v5 = (unsigned __int8 *)a1[3];
  if (!v5)
  {
    v15 = 0;
LABEL_3:
    v6 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 16))(v6, 0);
LABEL_4:
    result = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    goto LABEL_5;
  }
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v5, a1[4], &v15);
  if (!v15)
    goto LABEL_3;
  if (!*((_BYTE *)v15 + 345))
  {
    v9 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1 + 2, &v16);
    if (v9)
    {
      v10 = v9;
      if (WebCore::AudioOutputUnitAdaptor::stop((WebCore::AudioOutputUnitAdaptor *)(v9 + 24)))
      {
        v11 = *(_BYTE *)(v10 + 16) != 0;
      }
      else
      {
        v11 = 0;
        *(_BYTE *)(v10 + 16) = 0;
      }
    }
    else
    {
      v11 = 0;
    }
    v6 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v6 + 16))(v6, v11);
    goto LABEL_4;
  }
  v12 = v15;
  v13 = off_1ECE71C40;
  if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
  {
    v14 = *((_QWORD *)v12 + 10);
    *(_DWORD *)buf = 134218242;
    v18 = v14;
    v19 = 2082;
    v20 = "\"Received a stopAudioDestination() message from a webpage in Lockdown mode.\"";
    _os_log_fault_impl(&dword_196BCC000, v13, OS_LOG_TYPE_FAULT, "Requesting termination of web process %llu for reason: %{public}s", buf, 0x16u);
    v12 = v15;
  }
  result = (unsigned __int8 *)WebKit::GPUConnectionToWebProcess::terminateWebProcess(v12);
LABEL_5:
  v8 = v15;
  v15 = 0;
  if (v8)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v8 + 2));
  return result;
}

void WebKit::RemoteAudioDestinationManager::audioSamplesStorageChanged(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = a2;
  v2 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 16), &v3);
  if (v2)
    WebKit::RemoteAudioDestination::audioSamplesStorageChanged(v2);
}

void WebKit::RemoteAudioDestination::audioSamplesStorageChanged(uint64_t a1)
{
  WebCore::CARingBuffer *v2;
  WebCore::CARingBuffer *v3;
  WebCore::CARingBuffer *v4;
  WebCore::CARingBuffer *v5;

  if (*(_BYTE *)(a1 + 16))
  {
    if (WebCore::AudioOutputUnitAdaptor::stop((WebCore::AudioOutputUnitAdaptor *)(a1 + 24)))
    {
      if (*(_BYTE *)(a1 + 16))
        return;
    }
    else
    {
      *(_BYTE *)(a1 + 16) = 0;
    }
  }
  WebKit::ConsumerSharedCARingBuffer::map((WebCore::CARingBuffer *)4, &v5);
  v2 = *(WebCore::CARingBuffer **)(a1 + 56);
  v3 = v5;
  v5 = 0;
  *(_QWORD *)(a1 + 56) = v3;
  if (v2)
  {
    std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100](a1 + 56, v2);
    v4 = v5;
    v5 = 0;
    if (v4)
      std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100]((int)&v5, v4);
    v3 = *(WebCore::CARingBuffer **)(a1 + 56);
  }
  if (v3)
  {
    if (!WebCore::AudioOutputUnitAdaptor::start((WebCore::AudioOutputUnitAdaptor *)(a1 + 24)))
      *(_BYTE *)(a1 + 16) = 1;
  }
}

WebKit::RemoteAudioDestination *std::unique_ptr<WebKit::RemoteAudioDestination>::reset[abi:sn180100](WebKit::RemoteAudioDestination **a1, WebKit::RemoteAudioDestination *a2)
{
  WebKit::RemoteAudioDestination *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::RemoteAudioDestination::~RemoteAudioDestination(result);
    return (WebKit::RemoteAudioDestination *)WTF::fastFree(v4, v5);
  }
  return result;
}

void WebKit::RemoteAudioDestination::~RemoteAudioDestination(WebKit::RemoteAudioDestination *this)
{
  WebCore::CARingBuffer *v2;
  unsigned int *v3;

  if (*((_BYTE *)this + 16)
    && !WebCore::AudioOutputUnitAdaptor::stop((WebKit::RemoteAudioDestination *)((char *)this + 24)))
  {
    *((_BYTE *)this + 16) = 0;
  }
  v2 = (WebCore::CARingBuffer *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100]((_DWORD)this + 56, v2);
  v3 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
  WebCore::AudioOutputUnitAdaptor::~AudioOutputUnitAdaptor((WebKit::RemoteAudioDestination *)((char *)this + 24));
  IPC::Semaphore::destroy((WebKit::RemoteAudioDestination *)((char *)this + 8));
  WTF::MachSendRight::~MachSendRight((WebKit::RemoteAudioDestination *)((char *)this + 8));
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteAudioDestination::~RemoteAudioDestination(this);
  WTF::fastFree(v1, v2);
}

void std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100](int a1, WebCore::CARingBuffer *this)
{
  unsigned int *v3;
  WTF *v4;
  void *v5;

  if (this)
  {
    *(_QWORD *)this = off_1E34B3128;
    v3 = (unsigned int *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (v3)
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
    WebCore::CARingBuffer::~CARingBuffer(this);
    WTF::fastFree(v4, v5);
  }
}

void WebKit::SharedCARingBufferBase::~SharedCARingBufferBase(WebKit::SharedCARingBufferBase *this)
{
  unsigned int *v2;

  *(_QWORD *)this = off_1E34B3128;
  v2 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v2);
  WebCore::CARingBuffer::~CARingBuffer(this);
}

{
  unsigned int *v2;
  WTF *v3;
  void *v4;

  *(_QWORD *)this = off_1E34B3128;
  v2 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v2);
  WebCore::CARingBuffer::~CARingBuffer(this);
  WTF::fastFree(v3, v4);
}

uint64_t WebKit::SharedCARingBufferBase::data(WebKit::SharedCARingBufferBase *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 9) + 16) + 24;
}

uint64_t WebKit::SharedCARingBufferBase::timeBoundsBuffer(WebKit::SharedCARingBufferBase *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 9) + 16);
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v4;
  int v7;

  v4 = result;
  if (__ldaxr(result))
  {
    __clrex();
LABEL_3:
    result = (unsigned __int8 *)MEMORY[0x19AEABB3C](result);
    goto LABEL_4;
  }
  if (__stxr(1u, result))
    goto LABEL_3;
LABEL_4:
  if (*((_QWORD *)v4 + 3))
    ++*((_QWORD *)v4 + 1);
  else
    a2 = 0;
  *a3 = a2;
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(unsigned __int8 *result)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;

  v1 = result;
  if (__ldaxr(result))
  {
    __clrex();
LABEL_3:
    result = (unsigned __int8 *)MEMORY[0x19AEABB3C](result);
    goto LABEL_4;
  }
  if (__stxr(1u, result))
    goto LABEL_3;
LABEL_4:
  v3 = *((_QWORD *)v1 + 1);
  v4 = v3 - 1;
  *((_QWORD *)v1 + 1) = v3 - 1;
  if (v3 == 1)
  {
    v9 = *((_QWORD *)v1 + 2);
    v6 = *((_QWORD *)v1 + 3);
    *((_QWORD *)v1 + 3) = 0;
    v5 = v9 == 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = __ldxr(v1);
  if (v7 == 1)
  {
    if (!__stlxr(0, v1))
      goto LABEL_8;
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
LABEL_8:
  if (!v4)
  {
    v8 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v8 = off_1E34B3180;
    *(_QWORD *)(v8 + 8) = v1;
    *(_QWORD *)(v8 + 16) = v6;
    *(_BYTE *)(v8 + 24) = v5;
    v10 = (unsigned __int8 *)v8;
    WTF::ensureOnMainThread();
    result = v10;
    if (v10)
      return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v10 + 8))(v10);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(void)const::{lambda(void)#1}::operator()(a1 + 8, a2);
}

uint64_t WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(void)const::{lambda(void)#1}::operator()(uint64_t a1, void *a2)
{
  uint64_t result;
  WTF *v4;
  BOOL v5;

  v4 = *(WTF **)a1;
  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (*(_BYTE *)(a1 + 16))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (!v5)
    return WTF::fastFree(v4, a2);
  return result;
}

uint64_t WebKit::RemoteAudioDestination::render(WebKit::RemoteAudioDestination *this, double a2, unint64_t a3, unsigned int a4, AudioBufferList *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t result;

  v7 = a4;
  if (WebCore::CARingBuffer::fetchIfHasEnoughData())
  {
    v8 = 0;
    *((_QWORD *)this + 8) += v7;
  }
  else
  {
    v8 = 0xFFFFFFFFLL;
  }
  v9 = *((_QWORD *)this + 5);
  if (!v9)
    goto LABEL_8;
  if (*(_QWORD *)(v9 + 8) == 4)
  {
    v10 = *(unsigned int **)(v9 + 16);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + a4, v10));
LABEL_8:
    MEMORY[0x19AEBA1A0](*((unsigned int *)this + 3));
    return v8;
  }
  result = 144;
  __break(0xC471u);
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (uint64_t *)(v4 + 16 * i);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v14 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          v17 = v13 & ((v16 >> 31) ^ v16);
          v18 = 1;
          do
          {
            v19 = v17;
            v20 = *(_QWORD *)(v12 + 16 * v17);
            v17 = (v17 + v18++) & v13;
          }
          while (v20);
          v21 = v12 + 16 * v19;
          std::unique_ptr<WebKit::RemoteAudioDestination>::reset[abi:sn180100]((WebKit::RemoteAudioDestination **)(v21 + 8), 0);
          *(_QWORD *)v21 = *v10;
          v22 = v4 + 16 * i;
          v23 = *(_QWORD *)(v22 + 8);
          v22 += 8;
          *(_QWORD *)v22 = 0;
          *(_QWORD *)(v21 + 8) = v23;
          std::unique_ptr<WebKit::RemoteAudioDestination>::reset[abi:sn180100]((WebKit::RemoteAudioDestination **)v22, 0);
        }
        else
        {
          std::unique_ptr<WebKit::RemoteAudioDestination>::reset[abi:sn180100]((WebKit::RemoteAudioDestination **)(v4 + 16 * i + 8), 0);
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = *a2 + ~(*a2 << 32);
    v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
    v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
    v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ ((_DWORD)v6 + ~((_DWORD)v6 << 27)));
    v8 = *(_QWORD *)(v2 + 16 * v7);
    if (v8 == *a2)
      return *(_QWORD *)(v2 + 16 * v7 + 8);
    v9 = 1;
    while (v8)
    {
      v7 = ((_DWORD)v7 + v9) & v3;
      v8 = *(_QWORD *)(v2 + 16 * v7);
      ++v9;
      if (v8 == *a2)
        return *(_QWORD *)(v2 + 16 * v7 + 8);
    }
  }
  return 0;
}

void WebKit::RemoteCaptureSampleManager::didReceiveMessage(WebKit::RemoteCaptureSampleManager *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  int v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  unint64_t v26;
  unsigned __int8 *v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const void *v40;
  const void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE cf[32];
  __int128 v51;
  _BYTE v52[56];
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  char v56;
  _BYTE v57[56];
  __int128 v58;
  int v59;
  char v60;
  _BYTE v61[4];
  int v62;
  char v63;
  __int128 v64;
  char v65;
  _BYTE v66[32];
  __int128 v67;
  uint64_t v68;
  char v69;

  v5 = *((unsigned __int16 *)a3 + 25);
  if (v5 == 737)
  {
    v20 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
    if (v21)
    {
      v22 = v20;
      IPC::Decoder::decode<WTF::RetainPtr<__CVBuffer *>>(a3, (uint64_t)&v64);
      if (BYTE8(v64))
      {
        v23 = IPC::Decoder::decode<WebCore::VideoFrameRotation>((uint64_t *)a3);
        v24 = v23;
        if ((v23 & 0xFF0000) == 0)
        {
LABEL_47:
          v31 = 0;
          LOBYTE(v49) = 0;
          v52[40] = 0;
          goto LABEL_48;
        }
        v9 = *((_QWORD *)a3 + 1);
        v25 = *(_QWORD *)a3;
        v26 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
        if (v9 <= v26)
          goto LABEL_44;
        v27 = (unsigned __int8 *)(v25 + v26);
        *((_QWORD *)a3 + 2) = v27 + 1;
        if (!v25)
        {
          v35 = v9;
          v36 = 0;
LABEL_45:
          v9 = 0;
          v25 = 0;
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v38 = *((_QWORD *)a3 + 3);
          if (v38)
          {
            if (v35)
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v38 + 16))(v38, v36, v35);
              v25 = *(_QWORD *)a3;
              v9 = *((_QWORD *)a3 + 1);
            }
            else
            {
              v9 = 0;
              v25 = 0;
            }
          }
          goto LABEL_46;
        }
        v28 = *v27;
        if (v28 >= 2)
        {
LABEL_46:
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v39 = *((_QWORD *)a3 + 3);
          if (v39 && v9)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 16))(v39, v25);
          goto LABEL_47;
        }
        v29 = v28 != 0;
        IPC::Decoder::decode<WTF::MediaTime>((uint64_t *)a3, (uint64_t)v66);
        if (v66[16])
        {
          IPC::Decoder::decode<WebCore::VideoFrameTimeMetadata>((uint64_t)v57, (uint64_t *)a3);
          if ((_BYTE)v58)
          {
            if (!BYTE8(v64) || !v66[16])
            {
LABEL_43:
              __break(1u);
LABEL_44:
              v35 = 0;
              v36 = 0;
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              v37 = *((_QWORD *)a3 + 3);
              if (v37)
              {
                if (v9)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
                  v36 = *(_QWORD *)a3;
                  v35 = *((_QWORD *)a3 + 1);
                }
                else
                {
                  v35 = 0;
                  v36 = 0;
                }
              }
              goto LABEL_45;
            }
            *(_OWORD *)&cf[16] = *(_OWORD *)v66;
            v51 = *(_OWORD *)v57;
            v30 = v64;
            *(_QWORD *)&v64 = 0;
            v49 = v22;
            *(_QWORD *)cf = v30;
            *(_WORD *)&cf[8] = v24;
            cf[10] = v29;
            *(_QWORD *)&v52[32] = *(_QWORD *)&v57[48];
            v31 = 1;
            *(_OWORD *)v52 = *(_OWORD *)&v57[16];
            *(_OWORD *)&v52[16] = *(_OWORD *)&v57[32];
          }
          else
          {
            v31 = 0;
            LOBYTE(v49) = 0;
          }
          v52[40] = v31;
        }
        else
        {
          v31 = 0;
          LOBYTE(v49) = 0;
          v52[40] = 0;
        }
LABEL_48:
        if (BYTE8(v64))
        {
          v40 = (const void *)v64;
          *(_QWORD *)&v64 = 0;
          if (v40)
            CFRelease(v40);
        }
        if (v31)
        {
          *(_OWORD *)v57 = v51;
          *(_OWORD *)&v57[16] = *(_OWORD *)v52;
          *(_OWORD *)&v57[32] = *(_OWORD *)&v52[16];
          *(_QWORD *)&v57[48] = *(_QWORD *)&v52[32];
          WebKit::RemoteCaptureSampleManager::videoFrameAvailableCV((uint64_t)this, v49);
          if (v52[40])
          {
            v41 = *(const void **)cf;
            *(_QWORD *)cf = 0;
            if (v41)
              CFRelease(v41);
          }
          return;
        }
      }
    }
LABEL_55:
    v42 = *(_QWORD *)a3;
    v43 = *((_QWORD *)a3 + 1);
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    v44 = *((_QWORD *)a3 + 3);
    if (v44 && v43)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 16))(v44, v42);
    return;
  }
  if (v5 == 736)
  {
    v17 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
    if (v18)
    {
      v19 = v17;
      IPC::Decoder::decode<WebKit::RemoteVideoFrameProxyProperties>((uint64_t *)a3, (uint64_t)v66);
      if (v69)
      {
        IPC::Decoder::decode<WebCore::VideoFrameTimeMetadata>((uint64_t)v57, (uint64_t *)a3);
        if ((_BYTE)v58)
        {
          if (v69)
          {
            *(_OWORD *)cf = *(_OWORD *)v66;
            *(_OWORD *)&cf[16] = *(_OWORD *)&v66[16];
            v51 = v67;
            *(_QWORD *)v52 = v68;
            *(_OWORD *)&v52[8] = *(_OWORD *)v57;
            *(_OWORD *)&v52[24] = *(_OWORD *)&v57[16];
            *(_OWORD *)&v52[40] = *(_OWORD *)&v57[32];
            v53 = *(_QWORD *)&v57[48];
            LOBYTE(v54) = 1;
            WebKit::RemoteCaptureSampleManager::videoFrameAvailable((uint64_t)this, v19, (uint64_t)cf);
            return;
          }
          goto LABEL_43;
        }
      }
    }
    goto LABEL_55;
  }
  if (v5 != 735)
    return;
  v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
  if (v7)
  {
    v8 = v6;
    IPC::Decoder::decode<WebKit::ConsumerSharedCARingBufferHandle>(a3, (uint64_t)v66);
    if (!v66[24])
    {
      LOBYTE(v49) = 0;
      v56 = 0;
      goto LABEL_68;
    }
    IPC::Decoder::decode<WebCore::CAAudioStreamDescription>((uint64_t *)a3, (uint64_t)v57);
    if (!v60)
    {
      LOBYTE(v49) = 0;
      v56 = 0;
LABEL_66:
      if (v66[24])
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v66);
LABEL_68:
      if (v56)
      {
LABEL_69:
        WebKit::RemoteCaptureSampleManager::audioStorageChanged((uint64_t)this, v49, (uint64_t)cf, (uint64_t)&cf[24], (IPC::Semaphore *)&v53, (uint64_t *)&v54, v55);
        if (v56)
        {
          IPC::Semaphore::destroy((IPC::Semaphore *)&v53);
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v53);
          WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)&cf[24]);
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)cf);
        }
        return;
      }
      goto LABEL_39;
    }
    IPC::Decoder::decode<IPC::Semaphore>(a3, v61);
    if (!v63)
    {
      LOBYTE(v49) = 0;
      v56 = 0;
LABEL_64:
      if (v60)
        WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)v57);
      goto LABEL_66;
    }
    IPC::Decoder::decode<WTF::MediaTime>((uint64_t *)a3, (uint64_t)&v64);
    v10 = v65;
    if (v65)
    {
      v11 = *((_QWORD *)a3 + 1);
      v12 = *(_QWORD *)a3;
      v13 = ((*((_QWORD *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a3;
      if (v11 < v13 || v11 - v13 <= 7)
      {
        v45 = 0;
        v46 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v47 = *((_QWORD *)a3 + 3);
        if (v47)
        {
          if (v11)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v47 + 16))(v47);
            v46 = *(_QWORD *)a3;
            v45 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v45 = 0;
            v46 = 0;
          }
        }
      }
      else
      {
        v14 = (uint64_t *)(v12 + v13);
        *((_QWORD *)a3 + 2) = v14 + 1;
        if (v12)
        {
          if (v66[24] && v60 && v63)
          {
            v15 = *v14;
            v49 = v8;
            WTF::MachSendRight::MachSendRight();
            *(_OWORD *)&cf[8] = *(_OWORD *)&v66[8];
            *(_QWORD *)&cf[24] = MEMORY[0x1E0DD8FD8] + 16;
            *(_OWORD *)v52 = *(_OWORD *)&v57[24];
            *(_OWORD *)&v52[16] = *(_OWORD *)&v57[40];
            *(_OWORD *)&v52[32] = v58;
            *(_DWORD *)&v52[48] = v59;
            v51 = *(_OWORD *)&v57[8];
            WTF::MachSendRight::MachSendRight();
            v16 = v62;
            v62 = 0;
            HIDWORD(v53) = v16;
            v54 = v64;
            v55 = v15;
            v10 = 1;
            goto LABEL_62;
          }
          goto LABEL_43;
        }
        v45 = v11;
        v46 = 0;
      }
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v48 = *((_QWORD *)a3 + 3);
      if (v48 && v45)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v48 + 16))(v48, v46);
      v10 = 0;
    }
    LOBYTE(v49) = 0;
LABEL_62:
    v56 = v10;
    if (v63)
    {
      IPC::Semaphore::destroy((IPC::Semaphore *)v61);
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v61);
    }
    goto LABEL_64;
  }
  LOBYTE(v49) = 0;
  v56 = 0;
LABEL_39:
  v32 = *(_QWORD *)a3;
  v33 = *((_QWORD *)a3 + 1);
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v34 = *((_QWORD *)a3 + 3);
  if (v34)
  {
    if (v33)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v32);
      if (v56)
        goto LABEL_69;
    }
  }
}

void IPC::Decoder::decode<WebKit::ConsumerSharedCARingBufferHandle>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebKit::ConsumerSharedCARingBufferHandle,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 24))
  {
    v4 = *(_QWORD *)a1;
    v5 = *((_QWORD *)a1 + 1);
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    v6 = *((_QWORD *)a1 + 3);
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::Decoder::decode<WebCore::CAAudioStreamDescription>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebCore::CAAudioStreamDescription,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 80))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

uint64_t IPC::Decoder::decode<WebCore::VideoFrameTimeMetadata>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::VideoFrameTimeMetadata,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 56))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void WebKit::RemoteCDMFactoryProxy::didReceiveMessage(WebKit::RemoteCDMFactoryProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v4 = *((unsigned __int16 *)a3 + 25);
  if (v4 == 717)
  {
    v7 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
    v8 = v6;
    if ((_BYTE)v6)
      WebKit::RemoteCDMFactoryProxy::removeSession((uint64_t)this, &v7);
  }
  else if (v4 == 716)
  {
    v7 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
    v8 = v5;
    if ((_BYTE)v5)
      WebKit::RemoteCDMFactoryProxy::removeInstance(this, &v7);
  }
}

BOOL WebKit::RemoteCDMFactoryProxy::didReceiveSyncMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  int v4;

  v4 = *(unsigned __int16 *)(a3 + 50);
  if (v4 == 3538)
    return IPC::handleMessageSynchronous<Messages::RemoteCDMFactoryProxy::SupportsKeySystem,WebKit::RemoteCDMFactoryProxy,WebKit::RemoteCDMFactoryProxy,void ()(WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, WTF::StringImpl **, _QWORD **))WebKit::RemoteCDMFactoryProxy::supportsKeySystem, 0);
  if (v4 == 3537)
    return IPC::handleMessageSynchronous<Messages::RemoteCDMFactoryProxy::CreateCDM,WebKit::RemoteCDMFactoryProxy,WebKit::RemoteCDMFactoryProxy,void ()(WTF::String const&,WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> &&,WebKit::RemoteCDMConfiguration &&)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, WTF::StringImpl **, _QWORD **))WebKit::RemoteCDMFactoryProxy::createCDM, 0);
  return 0;
}

BOOL IPC::handleMessageSynchronous<Messages::RemoteCDMFactoryProxy::CreateCDM,WebKit::RemoteCDMFactoryProxy,WebKit::RemoteCDMFactoryProxy,void ()(WTF::String const&,WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> &&,WebKit::RemoteCDMConfiguration &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, WTF::StringImpl **, _QWORD **), uint64_t a6)
{
  int v11;
  IPC::Encoder *v12;
  _QWORD *v13;
  unsigned __int8 **v14;
  _BOOL8 result;
  _QWORD *v16;
  WTF::StringImpl *v17;
  _QWORD *v18;
  WTF::StringImpl *v19;
  IPC::Encoder *v20;
  unsigned __int8 **v21[2];
  _QWORD *v22;
  WTF::StringImpl *v23;
  unsigned __int8 v24;

  IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v23);
  v11 = v24;
  if (!v24)
    return v11 != 0;
  v12 = *a3;
  *a3 = 0;
  v20 = v12;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v21, a1);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = off_1E34B31A8;
  v13[1] = v20;
  v14 = v21[0];
  v21[0] = 0;
  v13[2] = v14;
  v22 = v13;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v21);
  result = 0;
  if (v24)
  {
    v16 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, WTF::StringImpl **, _QWORD **))(*v16 + a5);
    a5(v16, &v23, &v22);
    v18 = v22;
    v22 = 0;
    if (v18)
      (*(void (**)(_QWORD *))(*v18 + 8))(v18);
    if (v24)
    {
      v19 = v23;
      v23 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v17);
        else
          *(_DWORD *)v19 -= 2;
      }
    }
    return v11 != 0;
  }
  __break(1u);
  return result;
}

BOOL IPC::handleMessageSynchronous<Messages::RemoteCDMFactoryProxy::SupportsKeySystem,WebKit::RemoteCDMFactoryProxy,WebKit::RemoteCDMFactoryProxy,void ()(WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, WTF::StringImpl **, _QWORD **), uint64_t a6)
{
  int v11;
  IPC::Encoder *v12;
  _QWORD *v13;
  unsigned __int8 **v14;
  _BOOL8 result;
  _QWORD *v16;
  WTF::StringImpl *v17;
  _QWORD *v18;
  WTF::StringImpl *v19;
  IPC::Encoder *v20;
  unsigned __int8 **v21[2];
  _QWORD *v22;
  WTF::StringImpl *v23;
  unsigned __int8 v24;

  IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v23);
  v11 = v24;
  if (!v24)
    return v11 != 0;
  v12 = *a3;
  *a3 = 0;
  v20 = v12;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v21, a1);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = off_1E34B31D0;
  v13[1] = v20;
  v14 = v21[0];
  v21[0] = 0;
  v13[2] = v14;
  v22 = v13;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v21);
  result = 0;
  if (v24)
  {
    v16 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, WTF::StringImpl **, _QWORD **))(*v16 + a5);
    a5(v16, &v23, &v22);
    v18 = v22;
    v22 = 0;
    if (v18)
      (*(void (**)(_QWORD *))(*v18 + 8))(v18);
    if (v24)
    {
      v19 = v23;
      v23 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v17);
        else
          *(_DWORD *)v19 -= 2;
      }
    }
    return v11 != 0;
  }
  __break(1u);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages21RemoteCDMFactoryProxy9CreateCDMEN6WebKit21RemoteCDMFactoryProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvONS_23ObjectIdentifierGenericINS7_23RemoteCDMIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS7_22RemoteCDMConfigurationEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSI_SK_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B31A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages21RemoteCDMFactoryProxy9CreateCDMEN6WebKit21RemoteCDMFactoryProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvONS_23ObjectIdentifierGenericINS7_23RemoteCDMIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS7_22RemoteCDMConfigurationEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSI_SK_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B31A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages21RemoteCDMFactoryProxy9CreateCDMEN6WebKit21RemoteCDMFactoryProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvONS_23ObjectIdentifierGenericINS7_23RemoteCDMIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS7_22RemoteCDMConfigurationEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSI_SK_EE4callESI_SK_(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  IPC::Encoder *v5;

  v4 = (uint64_t *)(a1 + 8);
  v5 = *(IPC::Encoder **)(a1 + 8);
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(v5, a2);
  IPC::ArgumentCoder<WebKit::RemoteCDMConfiguration,void>::encode(v5, a3);
  return IPC::Connection::sendMessageImpl(v4[1], v4, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages21RemoteCDMFactoryProxy17SupportsKeySystemEN6WebKit21RemoteCDMFactoryProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B31D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages21RemoteCDMFactoryProxy17SupportsKeySystemEN6WebKit21RemoteCDMFactoryProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B31D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages21RemoteCDMFactoryProxy17SupportsKeySystemEN6WebKit21RemoteCDMFactoryProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  *IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1) = a2;
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t WebKit::RemoteCDMInstance::didReceiveMessage(uint64_t this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[8];
  _BYTE v8[16];

  if (*((_WORD *)a3 + 25) == 731)
  {
    v3 = this;
    IPC::Decoder::decode<std::tuple<WTF::String,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>((uint64_t *)a3, v7);
    if (v8[8])
    {
      v5 = *(_QWORD *)(v3 + 56);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
          (*(void (**)(uint64_t, _BYTE *, _BYTE *))(*(_QWORD *)v6 + 16))(v6, v7, v8);
      }
    }
    return std::__optional_destruct_base<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v4);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebKit::RemoteCDMInstance::didReceiveMessage(WebKit::RemoteCDMInstance *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  return WebKit::RemoteCDMInstance::didReceiveMessage((uint64_t)this - 16, a2, a3);
}

void IPC::Decoder::decode<std::tuple<WTF::String,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<WTF::String,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::String,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;

  IPC::Decoder::decode<WTF::String>(a1, &v6);
  if (v7)
  {
    IPC::ArgumentCoder<std::tuple<WTF::String,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,void>::decode<IPC::Decoder,WTF::String>(a1, (uint64_t *)&v6, (uint64_t)a2);
    if (v7)
    {
      v5 = v6;
      v6 = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, v4);
        else
          *(_DWORD *)v5 -= 2;
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[16] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::String,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,void>::decode<IPC::Decoder,WTF::String>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  IPC::Decoder::decode<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(a1, (uint64_t)&v8);
  v5 = v9;
  if (!v9)
  {
    *(_BYTE *)a3 = 0;
    goto LABEL_5;
  }
  if (*((_BYTE *)a2 + 8))
  {
    v6 = *a2;
    *a2 = 0;
    v7 = v8;
    *(_QWORD *)a3 = v6;
    *(_QWORD *)(a3 + 8) = v7;
    v5 = 1;
LABEL_5:
    *(_BYTE *)(a3 + 16) = v5;
    return;
  }
  __break(1u);
}

WTF::StringImpl *WebKit::RemoteCDMInstanceProxy::didReceiveMessage(WTF::StringImpl *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  WTF::StringImpl *v3;
  int v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;

  v3 = this;
  v4 = *((unsigned __int16 *)a3 + 25);
  switch(v4)
  {
    case 720:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)&v6);
      if (v7)
      {
        this = (WTF::StringImpl *)WebKit::RemoteCDMInstanceProxy::setStorageDirectory(v3, (const WTF::String *)&v6);
        if (v7)
        {
          this = v6;
          v6 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2)
              return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v5);
            else
              *(_DWORD *)this -= 2;
          }
        }
      }
      break;
    case 719:
      return (WTF::StringImpl *)IPC::handleMessageAsync<Messages::RemoteCDMInstanceProxy::SetServerCertificate,WebKit::RemoteCDMInstanceProxy,WebKit::RemoteCDMInstanceProxy,void ()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WebCore::CDMInstance::SuccessValue)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, unsigned int **, unsigned int **))WebKit::RemoteCDMInstanceProxy::setServerCertificate, 0);
    case 718:
      return IPC::handleMessageAsync<Messages::RemoteCDMInstanceProxy::InitializeWithConfiguration,WebKit::RemoteCDMInstanceProxy,WebKit::RemoteCDMInstanceProxy,void ()(WebCore::CDMKeySystemConfiguration const&,WebCore::CDMInstance::AllowDistinctiveIdentifiers,WebCore::CDMInstance::AllowPersistentState,WTF::CompletionHandler<void ()(WebCore::CDMInstance::SuccessValue)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, WTF::StringImpl **, BOOL, BOOL, WTF::StringImpl **))WebKit::RemoteCDMInstanceProxy::initializeWithConfiguration, 0);
  }
  return this;
}

WTF::StringImpl *IPC::handleMessageAsync<Messages::RemoteCDMInstanceProxy::InitializeWithConfiguration,WebKit::RemoteCDMInstanceProxy,WebKit::RemoteCDMInstanceProxy,void ()(WebCore::CDMKeySystemConfiguration const&,WebCore::CDMInstance::AllowDistinctiveIdentifiers,WebCore::CDMInstance::AllowPersistentState,WTF::CompletionHandler<void ()(WebCore::CDMInstance::SuccessValue)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, WTF::StringImpl **, BOOL, BOOL, WTF::StringImpl **), uint64_t a5)
{
  uint64_t *v8;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  unsigned int v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  unint64_t v22;
  void *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  unsigned __int8 ***v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  WTF::StringImpl *result;
  WTF *v31;
  void *v32;
  void *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49[2];
  uint64_t v50;
  _QWORD v51[2];
  _QWORD v52[2];
  __int16 v53;
  WTF *v54;
  uint64_t v55;
  BOOL v56;
  BOOL v57;
  unsigned __int8 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int16 v65;
  WTF *v66;
  uint64_t v67;
  char v68;

  v8 = a2;
  IPC::Decoder::decode<WebCore::CDMKeySystemConfiguration>(a2, (uint64_t)&v59);
  if (!v68)
    goto LABEL_27;
  v11 = v8[1];
  v10 = (char *)*v8;
  v12 = v8[2] - *v8;
  if (v11 <= v12)
  {
    v28 = 0;
    v27 = 0;
    *v8 = 0;
    v8[1] = 0;
    v35 = v8[3];
    if (v35)
    {
      if (v11)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
        v27 = *v8;
        v28 = v8[1];
      }
      else
      {
        v28 = 0;
        v27 = 0;
      }
    }
LABEL_21:
    v11 = 0;
    v10 = 0;
    *v8 = 0;
    v8[1] = 0;
    v26 = (unsigned __int8 ***)v8[3];
    if (!v26)
      goto LABEL_22;
    goto LABEL_34;
  }
  v13 = &v10[v12];
  v14 = (uint64_t)&v10[v12 + 1];
  v8[2] = v14;
  if (!v10)
  {
    v28 = v11;
    v27 = 0;
    goto LABEL_21;
  }
  v15 = *v13;
  if (v15 >= 2)
    goto LABEL_22;
  v16 = v15 != 0;
  if (v11 <= v14 - (uint64_t)v10)
  {
    v37 = 0;
    v38 = 0;
    *v8 = 0;
    v8[1] = 0;
    v39 = v8[3];
    if (v39)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 16))(v39);
      v37 = 0;
      v10 = (char *)*v8;
      v46 = v8[1];
      v47 = v8[3];
      *v8 = 0;
      v8[1] = 0;
      v38 = 0;
      if (v47)
      {
        if (v46)
        {
          (*(void (**)(uint64_t, char *))(*(_QWORD *)v47 + 16))(v47, v10);
          v38 = (char *)*v8;
          v37 = v8[1];
        }
      }
    }
LABEL_26:
    *v8 = 0;
    v8[1] = 0;
    v40 = v8[3];
    if (v40 && v37)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v40 + 16))(v40, v38, v37);
      goto LABEL_40;
    }
LABEL_27:
    std::__optional_destruct_base<WebCore::CDMKeySystemConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v59, v10);
    v41 = *v8;
    v42 = v8[1];
    *v8 = 0;
    v8[1] = 0;
    result = (WTF::StringImpl *)v8[3];
    if (result)
      v43 = v42 == 0;
    else
      v43 = 1;
    if (!v43)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v41);
    return result;
  }
  v8[2] = (uint64_t)(v13 + 2);
  v17 = v13[1];
  if (v17 >= 2)
  {
    v37 = v11;
    v38 = v10;
    goto LABEL_26;
  }
  v18 = v59;
  v59 = 0uLL;
  *(_OWORD *)v49 = v18;
  *(_QWORD *)&v18 = v60;
  v60 = 0;
  v50 = v18;
  v19 = v61;
  v61 = 0;
  v51[0] = v19;
  *(_QWORD *)&v18 = v62;
  v62 = 0;
  v51[1] = v18;
  v20 = v63;
  v63 = 0;
  v52[0] = v20;
  *(_QWORD *)&v18 = v64;
  v64 = 0;
  v52[1] = v18;
  v53 = v65;
  v21 = v66;
  v66 = 0;
  v54 = v21;
  *(_QWORD *)&v18 = v67;
  v67 = 0;
  v55 = v18;
  v56 = v16;
  v57 = v17 != 0;
  v58 = 1;
  std::__optional_destruct_base<WebCore::CDMKeySystemConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v59, v10);
  v22 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
  if (!(_BYTE)v23)
  {
LABEL_14:
    v31 = v54;
    if (v54)
    {
      v54 = 0;
      LODWORD(v55) = 0;
      WTF::fastFree(v31, v23);
    }
    WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v52, v23);
    WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v51, v32);
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v49[1], v33);
    result = v49[0];
    v49[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v34);
      else
        *(_DWORD *)result -= 2;
    }
    return result;
  }
  *(_QWORD *)&v59 = v22;
  v8 = (uint64_t *)&v59 + 1;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v59 + 1, a1);
  v24 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v24 = off_1E34B31F8;
  *((_QWORD *)v24 + 1) = v59;
  v25 = *((_QWORD *)&v59 + 1);
  *((_QWORD *)&v59 + 1) = 0;
  *((_QWORD *)v24 + 2) = v25;
  v48 = v24;
  v26 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v59 + 1);
  v28 = v58;
  if (!v58)
  {
    __break(1u);
LABEL_34:
    if (v28)
    {
      ((void (*)(unsigned __int8 ***, uint64_t, uint64_t))(*v26)[2])(v26, v27, v28);
      v10 = (char *)*v8;
      v11 = v8[1];
    }
    else
    {
      v11 = 0;
      v10 = 0;
    }
LABEL_22:
    *v8 = 0;
    v8[1] = 0;
    v36 = v8[3];
    if (v36 && v11)
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v36 + 16))(v36, v10);
LABEL_40:
      v44 = v8[3];
      v10 = (char *)*v8;
      v45 = v8[1];
      *v8 = 0;
      v8[1] = 0;
      if (v44 && v45)
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v44 + 16))(v44, v10);
      goto LABEL_27;
    }
    goto LABEL_27;
  }
  v29 = (_QWORD *)(a3 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(void (**)(_QWORD *, WTF::StringImpl **, BOOL, BOOL, WTF::StringImpl **))(*v29 + a4);
  a4(v29, v49, v56, v57, &v48);
  result = v48;
  v48 = 0;
  if (result)
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  if (v58)
    goto LABEL_14;
  return result;
}

unsigned int *IPC::handleMessageAsync<Messages::RemoteCDMInstanceProxy::SetServerCertificate,WebKit::RemoteCDMInstanceProxy,WebKit::RemoteCDMInstanceProxy,void ()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WebCore::CDMInstance::SuccessValue)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, unsigned int **, unsigned int **), uint64_t a5)
{
  unint64_t v10;
  void *v11;
  unsigned int *v12;
  unsigned __int8 **v13;
  _QWORD *v14;
  unsigned int *result;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unsigned int *v19;
  unsigned int *v20;
  char v21;
  unint64_t v22;
  unsigned __int8 **v23;

  IPC::Decoder::decode<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(a2, (uint64_t)&v22);
  if ((_BYTE)v23)
  {
    v20 = (unsigned int *)v22;
    v21 = 1;
    v10 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (!(_BYTE)v11)
      goto LABEL_8;
    v22 = v10;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v23, a1);
    v12 = (unsigned int *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v12 = off_1E34B3220;
    *((_QWORD *)v12 + 1) = v22;
    v13 = v23;
    v23 = 0;
    *((_QWORD *)v12 + 2) = v13;
    v19 = v12;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v23);
    v14 = (_QWORD *)(a3 + (a5 >> 1));
    if ((a5 & 1) != 0)
      a4 = *(void (**)(_QWORD *, unsigned int **, unsigned int **))(*v14 + a4);
    a4(v14, &v20, &v19);
    result = v19;
    v19 = 0;
    if (result)
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    if (v21)
    {
LABEL_8:
      result = v20;
      v20 = 0;
      if (result)
        return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v11);
    }
  }
  else
  {
    v16 = *a2;
    v17 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (unsigned int *)a2[3];
    if (result)
      v18 = v17 == 0;
    else
      v18 = 1;
    if (!v18)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)result + 16))(result, v16);
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebKit::RemoteCDMInstanceProxy::didReceiveMessage(WebKit::RemoteCDMInstanceProxy *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  return WebKit::RemoteCDMInstanceProxy::didReceiveMessage((WebKit::RemoteCDMInstanceProxy *)((char *)this - 16), a2, a3);
}

BOOL WebKit::RemoteCDMInstanceProxy::didReceiveSyncMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  return *(_WORD *)(a3 + 50) == 3539
      && IPC::handleMessageSynchronous<Messages::RemoteCDMInstanceProxy::CreateSession,WebKit::RemoteCDMInstanceProxy,WebKit::RemoteCDMInstanceProxy,void ()(unsigned long long,WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, unint64_t, _QWORD **))WebKit::RemoteCDMInstanceProxy::createSession, 0);
}

BOOL IPC::handleMessageSynchronous<Messages::RemoteCDMInstanceProxy::CreateSession,WebKit::RemoteCDMInstanceProxy,WebKit::RemoteCDMInstanceProxy,void ()(unsigned long long,WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, unint64_t, _QWORD **), uint64_t a6)
{
  unint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  unint64_t v14;
  IPC::Encoder *v15;
  _QWORD *v16;
  unsigned __int8 **v17;
  _QWORD *v18;
  _QWORD *v19;
  IPC::Encoder *v21;
  unsigned __int8 **v22[2];
  _QWORD *v23;

  v11 = IPC::Decoder::decode<std::tuple<double>>(a2);
  v13 = v12;
  if (v12)
  {
    v14 = v11;
    v15 = *a3;
    *a3 = 0;
    v21 = v15;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v22, a1);
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v16 = off_1E34B3248;
    v16[1] = v21;
    v17 = v22[0];
    v22[0] = 0;
    v16[2] = v17;
    v23 = v16;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v22);
    v18 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, unint64_t, _QWORD **))(*v18 + a5);
    a5(v18, v14, &v23);
    v19 = v23;
    v23 = 0;
    if (v19)
      (*(void (**)(_QWORD *))(*v19 + 8))(v19);
  }
  return v13 != 0;
}

BOOL `non-virtual thunk to'WebKit::RemoteCDMInstanceProxy::didReceiveSyncMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  return *(_WORD *)(a3 + 50) == 3539
      && IPC::handleMessageSynchronous<Messages::RemoteCDMInstanceProxy::CreateSession,WebKit::RemoteCDMInstanceProxy,WebKit::RemoteCDMInstanceProxy,void ()(unsigned long long,WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&)> &&)>(a2, (uint64_t *)a3, a4, a1 - 16, (void (*)(_QWORD *, unint64_t, _QWORD **))WebKit::RemoteCDMInstanceProxy::createSession, 0);
}

WTF *IPC::Decoder::decode<WebCore::CDMKeySystemConfiguration>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::CDMKeySystemConfiguration,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 80))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t std::__tuple_leaf<0ul,WebCore::CDMKeySystemConfiguration,false>::__tuple_leaf[abi:sn180100]<WebCore::CDMKeySystemConfiguration,void>(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = v2;
  v3 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(result + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = 0;
  *(_DWORD *)(result + 16) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = 0;
  *(_DWORD *)(result + 20) = v3;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  v4 = a2[3];
  a2[3] = 0;
  *(_QWORD *)(result + 24) = v4;
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = 0;
  *(_DWORD *)(result + 32) = v4;
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = 0;
  *(_DWORD *)(result + 36) = v4;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  v5 = a2[5];
  a2[5] = 0;
  *(_QWORD *)(result + 40) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = 0;
  *(_DWORD *)(result + 48) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = 0;
  *(_DWORD *)(result + 52) = v5;
  *(_WORD *)(result + 56) = *((_WORD *)a2 + 28);
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 72) = 0;
  v6 = a2[8];
  a2[8] = 0;
  *(_QWORD *)(result + 64) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = 0;
  *(_DWORD *)(result + 72) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = 0;
  *(_DWORD *)(result + 76) = v6;
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::CDMKeySystemConfiguration,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF *v3;
  void *v4;
  void *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  if (*(_BYTE *)(a1 + 80))
  {
    v3 = *(WTF **)(a1 + 64);
    if (v3)
    {
      *(_QWORD *)(a1 + 64) = 0;
      *(_DWORD *)(a1 + 72) = 0;
      WTF::fastFree(v3, a2);
    }
    WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 40, a2);
    WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 24, v4);
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 8, v5);
    v7 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteCDMInstanceProxy27InitializeWithConfigurationEN6WebKit22RemoteCDMInstanceProxyES8_FvRKN7WebCore25CDMKeySystemConfigurationENS9_11CDMInstance27AllowDistinctiveIdentifiersENSD_20AllowPersistentStateEONS_17CompletionHandlerIFvNSD_12SuccessValueEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B31F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteCDMInstanceProxy27InitializeWithConfigurationEN6WebKit22RemoteCDMInstanceProxyES8_FvRKN7WebCore25CDMKeySystemConfigurationENS9_11CDMInstance27AllowDistinctiveIdentifiersENSD_20AllowPersistentStateEONS_17CompletionHandlerIFvNSD_12SuccessValueEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B31F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteCDMInstanceProxy27InitializeWithConfigurationEN6WebKit22RemoteCDMInstanceProxyES8_FvRKN7WebCore25CDMKeySystemConfigurationENS9_11CDMInstance27AllowDistinctiveIdentifiersENSD_20AllowPersistentStateEONS_17CompletionHandlerIFvNSD_12SuccessValueEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3072;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteCDMInstanceProxy20SetServerCertificateEN6WebKit22RemoteCDMInstanceProxyES8_FvONS_3RefIN7WebCore12SharedBufferENS_12RawPtrTraitsISB_EENS_21DefaultRefDerefTraitsISB_EEEEONS_17CompletionHandlerIFvNSA_11CDMInstance12SuccessValueEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3220;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteCDMInstanceProxy20SetServerCertificateEN6WebKit22RemoteCDMInstanceProxyES8_FvONS_3RefIN7WebCore12SharedBufferENS_12RawPtrTraitsISB_EENS_21DefaultRefDerefTraitsISB_EEEEONS_17CompletionHandlerIFvNSA_11CDMInstance12SuccessValueEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B3220;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteCDMInstanceProxy20SetServerCertificateEN6WebKit22RemoteCDMInstanceProxyES8_FvONS_3RefIN7WebCore12SharedBufferENS_12RawPtrTraitsISB_EENS_21DefaultRefDerefTraitsISB_EEEEONS_17CompletionHandlerIFvNSA_11CDMInstance12SuccessValueEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3073;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteCDMInstanceProxy13CreateSessionEN6WebKit22RemoteCDMInstanceProxyES8_FvyONS_17CompletionHandlerIFvRKNS_23ObjectIdentifierGenericINS7_38RemoteCDMInstanceSessionIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSG_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3248;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteCDMInstanceProxy13CreateSessionEN6WebKit22RemoteCDMInstanceProxyES8_FvyONS_17CompletionHandlerIFvRKNS_23ObjectIdentifierGenericINS7_38RemoteCDMInstanceSessionIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSG_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B3248;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteCDMInstanceProxy13CreateSessionEN6WebKit22RemoteCDMInstanceProxyES8_FvyONS_17CompletionHandlerIFvRKNS_23ObjectIdentifierGenericINS7_38RemoteCDMInstanceSessionIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSG_EE4callESG_(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(*(IPC::Encoder **)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

void WebKit::RemoteCDMInstanceSession::didReceiveMessage(WebKit::RemoteCDMInstanceSession *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  int v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unsigned int *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unsigned int *v15;
  char v16;

  v4 = *((unsigned __int16 *)a3 + 25);
  switch(v4)
  {
    case 728:
      IPC::Decoder::decode<std::tuple<WebCore::CDMMessageType,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>((uint64_t *)a3, &v14);
      if (v16)
      {
        WebKit::RemoteCDMInstanceSession::sendMessage((unsigned int *)this, v14, &v15);
        if (v16)
        {
          v9 = v15;
          v15 = 0;
          if (v9)
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v9, v8);
        }
      }
      break;
    case 729:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)&v14);
      if ((_BYTE)v15)
      {
        v11 = *((_QWORD *)this + 6);
        if (!v11
          || (v12 = *(_QWORD *)(v11 + 8)) == 0
          || ((*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v12 + 32))(v12, &v14), (_BYTE)v15))
        {
          v13 = v14;
          v14 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, v10);
            else
              *(_DWORD *)v13 -= 2;
          }
        }
      }
      break;
    case 730:
      IPC::Decoder::decode<std::tuple<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t *)a3, a2, (uint64_t)&v14);
      if (v16)
      {
        v6 = *((_QWORD *)this + 6);
        if (!v6
          || (v7 = *(_QWORD *)(v6 + 8)) == 0
          || ((*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v7 + 16))(v7, &v14), v16))
        {
          WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v5);
        }
      }
      break;
  }
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::ArgumentCoder<std::tuple<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  void *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  result = IPC::Decoder::decode<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)&v8);
  v6 = v10;
  if (v10)
  {
    *(_QWORD *)a3 = v8;
    v7 = v9;
    v8 = 0;
    v9 = 0;
    *(_QWORD *)(a3 + 8) = v7;
    result = WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v5);
    v6 = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 16) = v6;
  return result;
}

uint64_t IPC::Decoder::decode<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::VectorArgumentCoder<false,std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

uint64_t IPC::VectorArgumentCoder<false,std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;

  v5 = a1[1];
  v6 = *a1;
  v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    v30 = 0;
    v31 = 0;
    *a1 = 0;
    a1[1] = 0;
    v32 = a1[3];
    if (v32)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v32 + 16))(v32, v6, v5);
        v31 = *a1;
        v30 = a1[1];
      }
      else
      {
        v30 = 0;
        v31 = 0;
      }
    }
    goto LABEL_33;
  }
  v9 = (unint64_t *)(v6 + v7);
  a1[2] = (uint64_t)(v9 + 1);
  if (!v6)
  {
    v30 = v5;
    v31 = 0;
LABEL_33:
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
    {
      if (v30)
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v31);
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return result;
  }
  v10 = *v9;
  v37 = 0;
  v38 = 0;
  if (v10 < 0x10000)
  {
    if (!v10)
    {
      v19 = 0;
      v20 = 0;
LABEL_20:
      v37 = 0;
      v38 = 0;
      *(_QWORD *)a3 = v19;
      *(_QWORD *)(a3 + 8) = v20;
      goto LABEL_21;
    }
    LODWORD(v38) = v10;
    v37 = WTF::fastMalloc((WTF *)(16 * v10));
    while (1)
    {
      IPC::Decoder::decode<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>>(a1, (uint64_t)&v34);
      if (!v36)
        goto LABEL_30;
      if (HIDWORD(v38) != (_DWORD)v38)
        break;
      v11 = WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v37, HIDWORD(v38) + 1, (unint64_t)&v34);
      v12 = HIDWORD(v38) + 1;
      v13 = v37 + 16 * HIDWORD(v38);
      v14 = *(_QWORD *)v11;
      *(_QWORD *)v11 = 0;
      *(_QWORD *)v13 = v14;
      *(_BYTE *)(v13 + 8) = *(_BYTE *)(v11 + 8);
      HIDWORD(v38) = v12;
      if (v36)
        goto LABEL_15;
LABEL_17:
      if (!--v10)
      {
        v19 = v37;
        v20 = v38;
        goto LABEL_20;
      }
    }
    v15 = HIDWORD(v38) + 1;
    v16 = v37 + 16 * HIDWORD(v38);
    v17 = v34;
    v34 = 0;
    *(_QWORD *)v16 = v17;
    *(_BYTE *)(v16 + 8) = v35;
    HIDWORD(v38) = v15;
LABEL_15:
    v18 = v34;
    v34 = 0;
    if (v18)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v18, a2);
    goto LABEL_17;
  }
  do
  {
    IPC::Decoder::decode<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>>(a1, (uint64_t)&v34);
    if (!v36)
    {
LABEL_30:
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 16) = 0;
      return WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, a2);
    }
    if (HIDWORD(v38) == (_DWORD)v38)
    {
      v21 = WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v37, HIDWORD(v38) + 1, (unint64_t)&v34);
      v22 = HIDWORD(v38) + 1;
      v23 = v37 + 16 * HIDWORD(v38);
      v24 = *(_QWORD *)v21;
      *(_QWORD *)v21 = 0;
      *(_QWORD *)v23 = v24;
      *(_BYTE *)(v23 + 8) = *(_BYTE *)(v21 + 8);
      HIDWORD(v38) = v22;
      if (!v36)
        goto LABEL_28;
    }
    else
    {
      v25 = HIDWORD(v38) + 1;
      v26 = v37 + 16 * HIDWORD(v38);
      v27 = v34;
      v34 = 0;
      *(_QWORD *)v26 = v27;
      *(_BYTE *)(v26 + 8) = v35;
      HIDWORD(v38) = v25;
    }
    v28 = v34;
    v34 = 0;
    if (v28)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v28, a2);
LABEL_28:
    --v10;
  }
  while (v10);
  WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v37, HIDWORD(v38));
  *(_QWORD *)a3 = v37;
  v33 = v38;
  v37 = 0;
  v38 = 0;
  *(_QWORD *)(a3 + 8) = v33;
LABEL_21:
  *(_BYTE *)(a3 + 16) = 1;
  return WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, a2);
}

void IPC::Decoder::decode<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int16 v4;
  void *v5;
  unsigned int *v6;
  unsigned int *v7;
  char v8;

  IPC::Decoder::decode<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(a1, (uint64_t)&v7);
  if (v8)
  {
    v4 = IPC::Decoder::decode<WebCore::CDMKeyStatus>(a1);
    if (v4 >= 0x100u)
    {
      if (v8)
      {
        *(_QWORD *)a2 = v7;
        *(_BYTE *)(a2 + 8) = v4;
        *(_BYTE *)(a2 + 16) = 1;
      }
      else
      {
        __break(1u);
      }
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 16) = 0;
      if (v8)
      {
        v6 = v7;
        v7 = 0;
        if (v6)
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v6, v5);
      }
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
}

uint64_t IPC::Decoder::decode<WebCore::CDMKeyStatus>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebCore::CDMKeyStatus,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::CDMKeyStatus,void>::decode<IPC::Decoder>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v7 = 0;
    v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9)
    {
      v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v9 + 16))(v9, v2, v1);
        a1 = v12;
        v8 = *v12;
        v7 = v12[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
    }
    goto LABEL_6;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    v7 = v1;
    v8 = 0;
LABEL_6:
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10 && v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v8);
    goto LABEL_7;
  }
  v5 = *v4;
  if (v5 >= 7)
  {
LABEL_7:
    v5 = 0;
    v6 = 0;
    return v5 | (v6 << 8);
  }
  v6 = 1;
  return v5 | (v6 << 8);
}

unsigned int *WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;

  if (result[2] > a2)
  {
    v3 = result;
    if (result[3] > a2)
      result = WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(result, (void *)a2);
    v4 = *(WTF **)v3;
    if (a2)
    {
      if (v3[2])
      {
        v3[2] = a2;
        result = (unsigned int *)WTF::fastRealloc(v4, (void *)(16 * a2));
        *(_QWORD *)v3 = result;
        return result;
      }
      if (a2 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      v5 = v3[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * a2));
      v3[2] = a2;
      *(_QWORD *)v3 = result;
      if (result != (unsigned int *)v4)
        result = (unsigned int *)memcpy(result, v4, 16 * v5);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v4, (void *)a2);
    }
  }
  return result;
}

unsigned int *WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(unsigned int *result, void *a2)
{
  unsigned int v2;
  unsigned int *v3;
  unint64_t v4;
  unsigned int **v5;
  uint64_t v6;

  v2 = a2;
  v3 = result;
  v4 = result[3];
  if ((void *)v4 != a2)
  {
    v5 = (unsigned int **)(*(_QWORD *)result + 16 * (_QWORD)a2);
    v6 = 16 * v4 - 16 * (_QWORD)a2;
    do
    {
      result = *v5;
      *v5 = 0;
      if (result)
        result = WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, a2);
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  v3[3] = v2;
  return result;
}

uint64_t WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int **v4;
  uint64_t v5;
  unsigned int *v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(unsigned int ***)a1;
    v5 = 16 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v6, a2);
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void IPC::Decoder::decode<std::tuple<WebCore::CDMMessageType,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<WebCore::CDMMessageType,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<std::tuple<WebCore::CDMMessageType,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned __int16 v4;

  v4 = IPC::Decoder::decode<WebKit::AuthenticationChallengeDisposition>(a1);
  if (v4 > 0xFFu)
  {
    IPC::ArgumentCoder<std::tuple<WebCore::CDMMessageType,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,void>::decode<IPC::Decoder,WebCore::CDMMessageType>(a1, &v4, (uint64_t)a2);
  }
  else
  {
    *a2 = 0;
    a2[16] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WebCore::CDMMessageType,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,void>::decode<IPC::Decoder,WebCore::CDMMessageType>(uint64_t *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  char v5;
  uint64_t v6;
  char v7;

  IPC::Decoder::decode<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(a1, &v6);
  v5 = v7;
  if (!v7)
  {
    *(_BYTE *)a3 = 0;
    goto LABEL_5;
  }
  if (a2[1])
  {
    *(_BYTE *)a3 = *a2;
    *(_QWORD *)(a3 + 8) = v6;
    v5 = 1;
LABEL_5:
    *(_BYTE *)(a3 + 16) = v5;
    return;
  }
  __break(1u);
}

WTF::StringImpl *WebKit::RemoteCDMInstanceSessionProxy::didReceiveMessage(WTF::StringImpl *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  WTF::StringImpl *v3;
  char v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;

  v3 = this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x2D1:
      this = IPC::handleMessageAsync<Messages::RemoteCDMInstanceSessionProxy::CloseSession,WebKit::RemoteCDMInstanceSessionProxy,WebKit::RemoteCDMInstanceSessionProxy,void ()(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, WTF::StringImpl **, WTF::StringImpl **))WebKit::RemoteCDMInstanceSessionProxy::closeSession, 0);
      break;
    case 0x2D2:
      this = (WTF::StringImpl *)IPC::handleMessageAsync<Messages::RemoteCDMInstanceSessionProxy::LoadSession,WebKit::RemoteCDMInstanceSessionProxy,WebKit::RemoteCDMInstanceSessionProxy,void ()(WebCore::CDMSessionType,WTF::String,WTF::String,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,BOOL,WebCore::CDMInstanceSessionLoadFailure)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, uint64_t, WTF::StringImpl **, WTF::StringImpl **))WebKit::RemoteCDMInstanceSessionProxy::loadSession, 0);
      break;
    case 0x2D3:
      this = IPC::handleMessageAsync<Messages::RemoteCDMInstanceSessionProxy::RemoveSessionData,WebKit::RemoteCDMInstanceSessionProxy,WebKit::RemoteCDMInstanceSessionProxy,void ()(WTF::String const&,WebCore::CDMSessionType,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,BOOL)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, WTF::StringImpl **, _QWORD, WTF::StringImpl **))WebKit::RemoteCDMInstanceSessionProxy::removeSessionData, 0);
      break;
    case 0x2D4:
      this = (WTF::StringImpl *)IPC::handleMessageAsync<Messages::RemoteCDMInstanceSessionProxy::RequestLicense,WebKit::RemoteCDMInstanceSessionProxy,WebKit::RemoteCDMInstanceSessionProxy,void ()(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,BOOL)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, uint64_t, uint64_t, WTF::StringImpl **, unsigned __int8 *, uint64_t))WebKit::RemoteCDMInstanceSessionProxy::requestLicense, 0);
      break;
    case 0x2D5:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<double>>((uint64_t *)a3);
      if (v4)
        this = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, WTF::StringImpl *))(**((_QWORD **)v3 + 5) + 16))(*((_QWORD *)v3 + 5), this);
      break;
    case 0x2D6:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)&v6);
      if (v7)
      {
        this = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, WTF::StringImpl **))(**((_QWORD **)v3 + 5) + 80))(*((_QWORD *)v3 + 5), &v6);
        if (v7)
        {
          this = v6;
          v6 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2)
              this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v5);
            else
              *(_DWORD *)this -= 2;
          }
        }
      }
      break;
    case 0x2D7:
      this = (WTF::StringImpl *)IPC::handleMessageAsync<Messages::RemoteCDMInstanceSessionProxy::UpdateLicense,WebKit::RemoteCDMInstanceSessionProxy,WebKit::RemoteCDMInstanceSessionProxy,void ()(WTF::String,WebCore::CDMSessionType,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref>> &&,BOOL)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, WTF::StringImpl **, _QWORD, uint64_t))WebKit::RemoteCDMInstanceSessionProxy::updateLicense, 0);
      break;
    default:
      return this;
  }
  return this;
}

unsigned __int8 ***IPC::handleMessageAsync<Messages::RemoteCDMInstanceSessionProxy::RequestLicense,WebKit::RemoteCDMInstanceSessionProxy,WebKit::RemoteCDMInstanceSessionProxy,void ()(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,BOOL)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, uint64_t, uint64_t, WTF::StringImpl **, unsigned __int8 *, uint64_t), uint64_t a5)
{
  void *v10;
  unint64_t v11;
  _QWORD *v12;
  unsigned __int8 **v13;
  unsigned __int8 ***result;
  _QWORD *v15;
  unint64_t v16;
  unsigned __int8 **v17;
  _QWORD *v18;
  unsigned __int8 v19[24];
  char v20;

  IPC::Decoder::decode<std::tuple<WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>(a2, v19);
  if (!v20)
    return (unsigned __int8 ***)std::__optional_destruct_base<std::tuple<WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v19, v10);
  v11 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (!(_BYTE)v10)
    return (unsigned __int8 ***)std::__optional_destruct_base<std::tuple<WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v19, v10);
  v16 = v11;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v17, a1);
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v12 = off_1E34B3270;
  v12[1] = v16;
  v13 = v17;
  v17 = 0;
  v18 = v12;
  v12[2] = v13;
  result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v17);
  if (v20)
  {
    IPC::callMemberFunction<WebKit::RemoteCDMInstanceSessionProxy,WebKit::RemoteCDMInstanceSessionProxy,void ()(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,BOOL)> &&),std::tuple<WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,WTF::String const&>(a3, a4, a5, v19, (uint64_t)&v18);
    v15 = v18;
    v18 = 0;
    if (v15)
      (*(void (**)(_QWORD *))(*v15 + 8))(v15);
    return (unsigned __int8 ***)std::__optional_destruct_base<std::tuple<WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v19, v10);
  }
  __break(1u);
  return result;
}

unsigned __int8 ***IPC::handleMessageAsync<Messages::RemoteCDMInstanceSessionProxy::UpdateLicense,WebKit::RemoteCDMInstanceSessionProxy,WebKit::RemoteCDMInstanceSessionProxy,void ()(WTF::String,WebCore::CDMSessionType,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref>> &&,BOOL)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, WTF::StringImpl **, _QWORD, uint64_t), uint64_t a5)
{
  void *v10;
  unint64_t v11;
  _QWORD *v12;
  unsigned __int8 **v13;
  unsigned __int8 ***result;
  _QWORD *v15;
  unint64_t v16;
  unsigned __int8 **v17;
  _QWORD *v18;
  _BYTE v19[24];
  char v20;

  IPC::Decoder::decode<std::tuple<WTF::String,WebCore::CDMSessionType,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>(a2, v19);
  if (!v20)
    return (unsigned __int8 ***)std::__optional_destruct_base<std::tuple<WTF::String,WebCore::CDMSessionType,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v19, v10);
  v11 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (!(_BYTE)v10)
    return (unsigned __int8 ***)std::__optional_destruct_base<std::tuple<WTF::String,WebCore::CDMSessionType,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v19, v10);
  v16 = v11;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v17, a1);
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v12 = off_1E34B3298;
  v12[1] = v16;
  v13 = v17;
  v17 = 0;
  v18 = v12;
  v12[2] = v13;
  result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v17);
  if (v20)
  {
    IPC::callMemberFunction<WebKit::RemoteCDMInstanceSessionProxy,WebKit::RemoteCDMInstanceSessionProxy,void ()(WTF::String,WebCore::CDMSessionType,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref>> &&,BOOL)> &&),WTF::CompletionHandler::tuple<WTF::String,WebCore::CDMSessionType,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,WTF::Vector<WebCore::CDMMessageType,WTF::Ref>>(a3, a4, a5, (uint64_t)v19);
    v15 = v18;
    v18 = 0;
    if (v15)
      (*(void (**)(_QWORD *))(*v15 + 8))(v15);
    return (unsigned __int8 ***)std::__optional_destruct_base<std::tuple<WTF::String,WebCore::CDMSessionType,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v19, v10);
  }
  __break(1u);
  return result;
}

unsigned __int8 ***IPC::handleMessageAsync<Messages::RemoteCDMInstanceSessionProxy::LoadSession,WebKit::RemoteCDMInstanceSessionProxy,WebKit::RemoteCDMInstanceSessionProxy,void ()(WebCore::CDMSessionType,WTF::String,WTF::String,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,BOOL,WebCore::CDMInstanceSessionLoadFailure)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, uint64_t, WTF::StringImpl **, WTF::StringImpl **), uint64_t a5)
{
  WTF::StringImpl *v10;
  unint64_t v11;
  _QWORD *v12;
  unsigned __int8 **v13;
  unsigned __int8 ***result;
  _QWORD *v15;
  unint64_t v16;
  unsigned __int8 **v17;
  _QWORD *v18;
  unsigned __int8 v19[24];
  char v20;

  IPC::Decoder::decode<std::tuple<WebCore::CDMSessionType,WTF::String,WTF::String>>(a2, v19);
  if (!v20)
    return (unsigned __int8 ***)std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicy,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v19, v10);
  v11 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (!(_BYTE)v10)
    return (unsigned __int8 ***)std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicy,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v19, v10);
  v16 = v11;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v17, a1);
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v12 = off_1E34B32C0;
  v12[1] = v16;
  v13 = v17;
  v17 = 0;
  v18 = v12;
  v12[2] = v13;
  result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v17);
  if (v20)
  {
    IPC::callMemberFunction<WebKit::RemoteCDMInstanceSessionProxy,WebKit::RemoteCDMInstanceSessionProxy,void ()(WebCore::CDMSessionType,WTF::String,WTF::String,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,BOOL,WebCore::CDMInstanceSessionLoadFailure)> &&),std::tuple<WebCore::CDMSessionType,WTF::String,WTF::String>,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &>(a3, a4, a5, v19);
    v15 = v18;
    v18 = 0;
    if (v15)
      (*(void (**)(_QWORD *))(*v15 + 8))(v15);
    return (unsigned __int8 ***)std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicy,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v19, v10);
  }
  __break(1u);
  return result;
}

WTF::StringImpl *IPC::handleMessageAsync<Messages::RemoteCDMInstanceSessionProxy::CloseSession,WebKit::RemoteCDMInstanceSessionProxy,WebKit::RemoteCDMInstanceSessionProxy,void ()(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, WTF::StringImpl **, WTF::StringImpl **), uint64_t a5)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unsigned __int8 **v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  unsigned __int8 **v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  char v19;

  result = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v18);
  if (v19)
  {
    result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if ((_BYTE)v11)
    {
      v15 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v16, a1);
      v12 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v12 = off_1E34B32E8;
      *((_QWORD *)v12 + 1) = v15;
      v13 = v16;
      v16 = 0;
      v17 = v12;
      *((_QWORD *)v12 + 2) = v13;
      result = (WTF::StringImpl *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v16);
      if (!v19)
      {
        __break(1u);
        return result;
      }
      v14 = (_QWORD *)(a3 + (a5 >> 1));
      if ((a5 & 1) != 0)
        a4 = *(void (**)(_QWORD *, WTF::StringImpl **, WTF::StringImpl **))(*v14 + a4);
      a4(v14, &v18, &v17);
      result = v17;
      v17 = 0;
      if (result)
        result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    }
    if (v19)
    {
      result = v18;
      v18 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

WTF::StringImpl *IPC::handleMessageAsync<Messages::RemoteCDMInstanceSessionProxy::RemoveSessionData,WebKit::RemoteCDMInstanceSessionProxy,WebKit::RemoteCDMInstanceSessionProxy,void ()(WTF::String const&,WebCore::CDMSessionType,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,BOOL)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, WTF::StringImpl **, _QWORD, WTF::StringImpl **), uint64_t a5)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unsigned __int8 v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  unsigned __int8 **v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  char v24;
  char v25;
  WTF::StringImpl *v26;
  unsigned __int8 **v27;

  IPC::Decoder::decode<WTF::String>(a2, &v26);
  if (!(_BYTE)v27)
  {
LABEL_18:
    v19 = *a2;
    v20 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
      v21 = v20 == 0;
    else
      v21 = 1;
    if (!v21)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v19);
    return result;
  }
  result = (WTF::StringImpl *)IPC::Decoder::decode<WebCore::CDMRequirement>(a2);
  if ((unsigned __int16)result < 0x100u)
  {
    if ((_BYTE)v27)
    {
      v12 = v26;
      v26 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v11);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
    goto LABEL_18;
  }
  if ((_BYTE)v27)
  {
    v13 = result;
    v23 = v26;
    v24 = (char)result;
    v25 = 1;
    v14 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (!(_BYTE)v15)
      goto LABEL_14;
    v26 = v14;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v27, a1);
    v16 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v16 = off_1E34B3310;
    *((_QWORD *)v16 + 1) = v26;
    v17 = v27;
    v27 = 0;
    *((_QWORD *)v16 + 2) = v17;
    v22 = v16;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v27);
    v18 = (_QWORD *)(a3 + (a5 >> 1));
    if ((a5 & 1) != 0)
      a4 = *(void (**)(_QWORD *, WTF::StringImpl **, _QWORD, WTF::StringImpl **))(*v18 + a4);
    a4(v18, &v23, v13, &v22);
    result = v22;
    v22 = 0;
    if (result)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    if (v25)
    {
LABEL_14:
      result = v23;
      v23 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[24])
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

WTF::StringImpl *IPC::callMemberFunction<WebKit::RemoteCDMInstanceSessionProxy,WebKit::RemoteCDMInstanceSessionProxy,void ()(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,BOOL)> &&),std::tuple<WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,WTF::String const&>(uint64_t a1, void (*a2)(_QWORD *, uint64_t, uint64_t, WTF::StringImpl **, unsigned __int8 *, uint64_t), uint64_t a3, unsigned __int8 *a4, uint64_t a5)
{
  void (*v5)(_QWORD *, uint64_t, uint64_t, WTF::StringImpl **, unsigned __int8 *, uint64_t);
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;

  v5 = a2;
  v6 = (_QWORD *)(a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    v5 = *(void (**)(_QWORD *, uint64_t, uint64_t, WTF::StringImpl **, unsigned __int8 *, uint64_t))(*v6 + a2);
  v7 = *a4;
  v8 = a4[1];
  v9 = (WTF::StringImpl *)*((_QWORD *)a4 + 1);
  *((_QWORD *)a4 + 1) = 0;
  v12 = v9;
  v5(v6, v7, v8, &v12, a4 + 16, a5);
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void IPC::ArgumentCoder<std::tuple<WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned __int16 v4;

  v4 = IPC::Decoder::decode<WebCore::CDMRequirement>(a1);
  if (v4 > 0xFFu)
  {
    IPC::ArgumentCoder<std::tuple<WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,void>::decode<IPC::Decoder,WebCore::CDMSessionType>(a1, &v4, a2);
  }
  else
  {
    *a2 = 0;
    a2[24] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,void>::decode<IPC::Decoder,WebCore::CDMSessionType>(uint64_t *a1@<X0>, _BYTE *a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int16 v6;

  v6 = IPC::Decoder::decode<WebCore::ApplyTrackingPrevention>(a1);
  if (v6 > 0xFFu)
  {
    IPC::ArgumentCoder<std::tuple<WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,void>::decode<IPC::Decoder,WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy>(a1, a2, (char *)&v6, (uint64_t)a3);
  }
  else
  {
    *a3 = 0;
    a3[24] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,void>::decode<IPC::Decoder,WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy>(uint64_t *a1@<X0>, _BYTE *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  WTF::StringImpl *v8;
  char v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unsigned __int8 v15;
  uint64_t v16;
  char v17;

  IPC::Decoder::decode<WTF::AtomString>(a1, &v14);
  if (!v15)
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 24) = 0;
    return;
  }
  IPC::Decoder::decode<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(a1, &v16);
  if (v17)
  {
    if (!a2[1] || !a3[1] || !v15)
    {
      __break(1u);
      return;
    }
    v9 = *a3;
    *(_BYTE *)a4 = *a2;
    *(_BYTE *)(a4 + 1) = v9;
    v10 = v14;
    v14 = 0;
    v11 = v16;
    *(_QWORD *)(a4 + 8) = v10;
    *(_QWORD *)(a4 + 16) = v11;
    *(_BYTE *)(a4 + 24) = 1;
  }
  else
  {
    *(_BYTE *)a4 = 0;
    v12 = v15;
    *(_BYTE *)(a4 + 24) = 0;
    if (!v12)
      return;
  }
  v13 = v14;
  v14 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v8);
    else
      *(_DWORD *)v13 -= 2;
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteCDMInstanceSessionProxy14RequestLicenseEN6WebKit29RemoteCDMInstanceSessionProxyES8_FvN7WebCore14CDMSessionTypeENS9_22CDMKeyGroupingStrategyENS_10AtomStringEONS_6RefPtrINS9_12SharedBufferENS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEEONS_17CompletionHandlerIFvSK_RKNS_6StringEbbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_SO_bbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3270;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteCDMInstanceSessionProxy14RequestLicenseEN6WebKit29RemoteCDMInstanceSessionProxyES8_FvN7WebCore14CDMSessionTypeENS9_22CDMKeyGroupingStrategyENS_10AtomStringEONS_6RefPtrINS9_12SharedBufferENS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEEONS_17CompletionHandlerIFvSK_RKNS_6StringEbbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_SO_bbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B3270;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteCDMInstanceSessionProxy14RequestLicenseEN6WebKit29RemoteCDMInstanceSessionProxyES8_FvN7WebCore14CDMSessionTypeENS9_22CDMKeyGroupingStrategyENS_10AtomStringEONS_6RefPtrINS9_12SharedBufferENS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEEONS_17CompletionHandlerIFvSK_RKNS_6StringEbbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_SO_bbEE4callESK_SO_bb(uint64_t a1, WebCore::FragmentedSharedBuffer **a2, uint64_t *a3, char a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  void *v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  IPC::Encoder *v16;

  v10 = *(_QWORD *)(a1 + 8);
  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 3077;
  *(_QWORD *)(v11 + 8) = v10;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v16 = (IPC::Encoder *)v11;
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>((IPC::Encoder *)v11, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, a3);
  *IPC::Encoder::grow((IPC::Encoder *)v11, 1uLL, 1) = a4;
  *IPC::Encoder::grow((IPC::Encoder *)v11, 1uLL, 1) = a5;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v16, 0, 0);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  unsigned int *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(unsigned int **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v3)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, a2);
    v4 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

void IPC::Decoder::decode<std::tuple<WTF::String,WebCore::CDMSessionType,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<WTF::String,WebCore::CDMSessionType,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[24])
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

WTF::StringImpl *IPC::callMemberFunction<WebKit::RemoteCDMInstanceSessionProxy,WebKit::RemoteCDMInstanceSessionProxy,void ()(WTF::String,WebCore::CDMSessionType,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref>> &&,BOOL)> &&),WTF::CompletionHandler::tuple<WTF::String,WebCore::CDMSessionType,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,WTF::Vector<WebCore::CDMMessageType,WTF::Ref>>(uint64_t a1, void (*a2)(_QWORD *, WTF::StringImpl **, _QWORD, uint64_t), uint64_t a3, uint64_t a4)
{
  void (*v5)(_QWORD *, WTF::StringImpl **, _QWORD, uint64_t);
  uint64_t v6;
  _QWORD *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;

  v5 = a2;
  v6 = a4 + 16;
  v7 = (_QWORD *)(a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    v5 = *(void (**)(_QWORD *, WTF::StringImpl **, _QWORD, uint64_t))(*v7 + a2);
  v8 = *(WTF::StringImpl **)a4;
  *(_QWORD *)a4 = 0;
  v11 = v8;
  v5(v7, &v11, *(unsigned __int8 *)(a4 + 8), v6);
  result = v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void IPC::ArgumentCoder<std::tuple<WTF::String,WebCore::CDMSessionType,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;

  IPC::Decoder::decode<WTF::String>(a1, &v6);
  if (v7)
  {
    IPC::ArgumentCoder<std::tuple<WTF::String,WebCore::CDMSessionType,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,void>::decode<IPC::Decoder,WTF::String>(a1, (uint64_t *)&v6, a2);
    if (v7)
    {
      v5 = v6;
      v6 = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, v4);
        else
          *(_DWORD *)v5 -= 2;
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[24] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::String,WebCore::CDMSessionType,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,void>::decode<IPC::Decoder,WTF::String>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned __int16 v6;

  v6 = IPC::Decoder::decode<WebCore::CDMRequirement>(a1);
  if (v6 > 0xFFu)
  {
    IPC::ArgumentCoder<std::tuple<WTF::String,WebCore::CDMSessionType,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,void>::decode<IPC::Decoder,WTF::String,WebCore::CDMSessionType>(a1, a2, &v6, (uint64_t)a3);
  }
  else
  {
    *a3 = 0;
    a3[24] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::String,WebCore::CDMSessionType,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,void>::decode<IPC::Decoder,WTF::String,WebCore::CDMSessionType>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  IPC::Decoder::decode<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(a1, &v9);
  v7 = v10;
  if (!v10)
  {
    *(_BYTE *)a4 = 0;
    goto LABEL_6;
  }
  if (*((_BYTE *)a2 + 8) && a3[1])
  {
    v8 = *a2;
    *a2 = 0;
    *(_QWORD *)a4 = v8;
    *(_BYTE *)(a4 + 8) = *a3;
    *(_QWORD *)(a4 + 16) = v9;
    v7 = 1;
LABEL_6:
    *(_BYTE *)(a4 + 24) = v7;
    return;
  }
  __break(1u);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteCDMInstanceSessionProxy13UpdateLicenseEN6WebKit29RemoteCDMInstanceSessionProxyES8_FvNS_6StringEN7WebCore14CDMSessionTypeEONS_6RefPtrINSA_12SharedBufferENS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEONS_17CompletionHandlerIFvbONSt3__18optionalINS_6VectorINSL_4pairINS_3RefISD_SF_SH_EENSA_12CDMKeyStatusEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEONSM_IdEEONSM_INSO_INSA_14CDMMessageTypeESQ_EEEEbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSX_SZ_S13_bEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3298;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteCDMInstanceSessionProxy13UpdateLicenseEN6WebKit29RemoteCDMInstanceSessionProxyES8_FvNS_6StringEN7WebCore14CDMSessionTypeEONS_6RefPtrINSA_12SharedBufferENS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEONS_17CompletionHandlerIFvbONSt3__18optionalINS_6VectorINSL_4pairINS_3RefISD_SF_SH_EENSA_12CDMKeyStatusEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEONSM_IdEEONSM_INSO_INSA_14CDMMessageTypeESQ_EEEEbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSX_SZ_S13_bEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B3298;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteCDMInstanceSessionProxy13UpdateLicenseEN6WebKit29RemoteCDMInstanceSessionProxyES8_FvNS_6StringEN7WebCore14CDMSessionTypeEONS_6RefPtrINSA_12SharedBufferENS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEONS_17CompletionHandlerIFvbONSt3__18optionalINS_6VectorINSL_4pairINS_3RefISD_SF_SH_EENSA_12CDMKeyStatusEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEONSM_IdEEONSM_INSO_INSA_14CDMMessageTypeESQ_EEEEbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSX_SZ_S13_bEE4callEbSX_SZ_S13_b(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t a5, char a6)
{
  uint64_t v12;
  uint64_t v13;
  void *v14;
  IPC::Encoder *result;
  WTF *v16;
  void *v17;
  IPC::Encoder *v18;

  v12 = *(_QWORD *)(a1 + 8);
  v13 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v13 = 3078;
  *(_QWORD *)(v13 + 8) = v12;
  *(_QWORD *)(v13 + 528) = v13 + 16;
  *(_QWORD *)(v13 + 536) = v13 + 16;
  *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v13 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
  v18 = (IPC::Encoder *)v13;
  *IPC::Encoder::grow((IPC::Encoder *)v13, 1uLL, 1) = a2;
  IPC::ArgumentCoder<std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((IPC::Encoder *)v13, a3);
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>((IPC::Encoder *)v13, a4);
  IPC::ArgumentCoder<std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>,void>::encode<IPC::Encoder,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>>((IPC::Encoder *)v13, a5);
  *IPC::Encoder::grow((IPC::Encoder *)v13, 1uLL, 1) = a6;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v18, 0, 0);
  result = v18;
  v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v14);
    return (IPC::Encoder *)WTF::fastFree(v16, v17);
  }
  return result;
}

char *IPC::ArgumentCoder<std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  IPC::Encoder *v6;
  uint64_t *v7;

  v4 = *(unsigned __int8 *)(a2 + 16);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 16))
    {
      v6 = a1;
      v7 = (uint64_t *)a2;
    }
    else
    {
      v6 = (IPC::Encoder *)std::__throw_bad_optional_access[abi:sn180100]();
    }
    return IPC::VectorArgumentCoder<false,std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v6, v7);
  }
  else
  {
    *result = 0;
  }
  return result;
}

char *IPC::VectorArgumentCoder<false,std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  char *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *((unsigned int *)a2 + 3);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  v6 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v6)
  {
    v7 = *a2;
    v8 = v7 + 16 * v6;
    do
    {
      IPC::ArgumentCoder<WebCore::SharedBuffer,void>::encode(a1, *(WebCore::FragmentedSharedBuffer **)v7);
      v9 = *(_BYTE *)(v7 + 8);
      result = IPC::Encoder::grow(a1, 1uLL, 1);
      *result = v9;
      v7 += 16;
    }
    while (v7 != v8);
  }
  return result;
}

unsigned int *IPC::ArgumentCoder<std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>,void>::encode<IPC::Encoder,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  unsigned int *result;
  char v6;
  id v7;
  void *v8;

  v4 = *(unsigned __int8 *)(a2 + 16);
  result = (unsigned int *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *(_BYTE *)result = 1;
    if (*(_BYTE *)(a2 + 16))
    {
      v6 = *(_BYTE *)a2;
      *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
      return IPC::ArgumentCoder<WebCore::SharedBuffer,void>::encode(a1, *(WebCore::FragmentedSharedBuffer **)(a2 + 8));
    }
    else
    {
      v7 = std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned int *)std::__optional_destruct_base<std::tuple<WTF::String,WebCore::CDMSessionType,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v8);
    }
  }
  else
  {
    *(_BYTE *)result = 0;
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::String,WebCore::CDMSessionType,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  unsigned int *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(unsigned int **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v3)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, a2);
    v4 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WebCore::CDMSessionType,WTF::String,WTF::String>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::CDMSessionType,WTF::String,WTF::String>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[24])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WTF::StringImpl *IPC::callMemberFunction<WebKit::RemoteCDMInstanceSessionProxy,WebKit::RemoteCDMInstanceSessionProxy,void ()(WebCore::CDMSessionType,WTF::String,WTF::String,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,BOOL,WebCore::CDMInstanceSessionLoadFailure)> &&),std::tuple<WebCore::CDMSessionType,WTF::String,WTF::String>,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &>(uint64_t a1, void (*a2)(_QWORD *, uint64_t, WTF::StringImpl **, WTF::StringImpl **), uint64_t a3, unsigned __int8 *a4)
{
  void (*v4)(_QWORD *, uint64_t, WTF::StringImpl **, WTF::StringImpl **);
  _QWORD *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v4 = a2;
  v5 = (_QWORD *)(a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    v4 = *(void (**)(_QWORD *, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*v5 + a2);
  v6 = *a4;
  v7 = (WTF::StringImpl *)*((_QWORD *)a4 + 1);
  v11 = (WTF::StringImpl *)*((_QWORD *)a4 + 2);
  v12 = v7;
  *((_QWORD *)a4 + 1) = 0;
  *((_QWORD *)a4 + 2) = 0;
  v4(v5, v6, &v12, &v11);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WebCore::CDMSessionType,WTF::String,WTF::String>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  __int16 v5;

  result = (WTF::StringImpl *)IPC::Decoder::decode<WebCore::CDMRequirement>(a1);
  v5 = (__int16)result;
  if ((unsigned __int16)result > 0xFFu)
    return IPC::ArgumentCoder<std::tuple<WebCore::CDMSessionType,WTF::String,WTF::String>,void>::decode<IPC::Decoder,WebCore::CDMSessionType>(a1, &v5, (uint64_t)a2);
  *a2 = 0;
  a2[24] = 0;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WebCore::CDMSessionType,WTF::String,WTF::String>,void>::decode<IPC::Decoder,WebCore::CDMSessionType>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  int v10;
  WTF::StringImpl *v11;
  unsigned __int8 v12;
  uint64_t v13;
  char v14;

  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v11);
  if (!v12)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    return result;
  }
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v13);
  if (v14)
  {
    if (!a2[1] || !v12)
    {
      __break(1u);
      return result;
    }
    *(_BYTE *)a3 = *a2;
    v8 = v11;
    v11 = 0;
    v9 = v13;
    *(_QWORD *)(a3 + 8) = v8;
    *(_QWORD *)(a3 + 16) = v9;
    *(_BYTE *)(a3 + 24) = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    v10 = v12;
    *(_BYTE *)(a3 + 24) = 0;
    if (!v10)
      return result;
  }
  result = v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteCDMInstanceSessionProxy11LoadSessionEN6WebKit29RemoteCDMInstanceSessionProxyES8_FvN7WebCore14CDMSessionTypeENS_6StringESB_ONS_17CompletionHandlerIFvONSt3__18optionalINS_6VectorINSD_4pairINS_3RefINS9_12SharedBufferENS_12RawPtrTraitsISI_EENS_21DefaultRefDerefTraitsISI_EEEENS9_12CDMKeyStatusEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEONSE_IdEEONSE_INSG_INS9_14CDMMessageTypeESN_EEEEbNS9_29CDMInstanceSessionLoadFailureEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_SW_S10_bS11_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B32C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteCDMInstanceSessionProxy11LoadSessionEN6WebKit29RemoteCDMInstanceSessionProxyES8_FvN7WebCore14CDMSessionTypeENS_6StringESB_ONS_17CompletionHandlerIFvONSt3__18optionalINS_6VectorINSD_4pairINS_3RefINS9_12SharedBufferENS_12RawPtrTraitsISI_EENS_21DefaultRefDerefTraitsISI_EEEENS9_12CDMKeyStatusEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEONSE_IdEEONSE_INSG_INS9_14CDMMessageTypeESN_EEEEbNS9_29CDMInstanceSessionLoadFailureEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_SW_S10_bS11_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B32C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteCDMInstanceSessionProxy11LoadSessionEN6WebKit29RemoteCDMInstanceSessionProxyES8_FvN7WebCore14CDMSessionTypeENS_6StringESB_ONS_17CompletionHandlerIFvONSt3__18optionalINS_6VectorINSD_4pairINS_3RefINS9_12SharedBufferENS_12RawPtrTraitsISI_EENS_21DefaultRefDerefTraitsISI_EEEENS9_12CDMKeyStatusEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEONSE_IdEEONSE_INSG_INS9_14CDMMessageTypeESN_EEEEbNS9_29CDMInstanceSessionLoadFailureEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_SW_S10_bS11_EE4callESU_SW_S10_bS11_(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, char a6)
{
  uint64_t v12;
  uint64_t v13;
  void *v14;
  IPC::Encoder *result;
  WTF *v16;
  void *v17;
  IPC::Encoder *v18;

  v12 = *(_QWORD *)(a1 + 8);
  v13 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v13 = 3075;
  *(_QWORD *)(v13 + 8) = v12;
  *(_QWORD *)(v13 + 528) = v13 + 16;
  *(_QWORD *)(v13 + 536) = v13 + 16;
  *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v13 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
  v18 = (IPC::Encoder *)v13;
  IPC::ArgumentCoder<std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((IPC::Encoder *)v13, a2);
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>((IPC::Encoder *)v13, a3);
  IPC::ArgumentCoder<std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>,void>::encode<IPC::Encoder,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>>((IPC::Encoder *)v13, a4);
  *IPC::Encoder::grow((IPC::Encoder *)v13, 1uLL, 1) = a5;
  *IPC::Encoder::grow((IPC::Encoder *)v13, 1uLL, 1) = a6;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v18, 0, 0);
  result = v18;
  v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v14);
    return (IPC::Encoder *)WTF::fastFree(v16, v17);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteCDMInstanceSessionProxy12CloseSessionEN6WebKit29RemoteCDMInstanceSessionProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B32E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteCDMInstanceSessionProxy12CloseSessionEN6WebKit29RemoteCDMInstanceSessionProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B32E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteCDMInstanceSessionProxy12CloseSessionEN6WebKit29RemoteCDMInstanceSessionProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3074;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteCDMInstanceSessionProxy17RemoveSessionDataEN6WebKit29RemoteCDMInstanceSessionProxyES8_FvRKNS_6StringEN7WebCore14CDMSessionTypeEONS_17CompletionHandlerIFvONS_6VectorINSt3__14pairINS_3RefINSC_12SharedBufferENS_12RawPtrTraitsISJ_EENS_21DefaultRefDerefTraitsISJ_EEEENSC_12CDMKeyStatusEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_6RefPtrISJ_SL_SN_EEbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_SX_bEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3310;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteCDMInstanceSessionProxy17RemoveSessionDataEN6WebKit29RemoteCDMInstanceSessionProxyES8_FvRKNS_6StringEN7WebCore14CDMSessionTypeEONS_17CompletionHandlerIFvONS_6VectorINSt3__14pairINS_3RefINSC_12SharedBufferENS_12RawPtrTraitsISJ_EENS_21DefaultRefDerefTraitsISJ_EEEENSC_12CDMKeyStatusEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_6RefPtrISJ_SL_SN_EEbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_SX_bEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B3310;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29RemoteCDMInstanceSessionProxy17RemoveSessionDataEN6WebKit29RemoteCDMInstanceSessionProxyES8_FvRKNS_6StringEN7WebCore14CDMSessionTypeEONS_17CompletionHandlerIFvONS_6VectorINSt3__14pairINS_3RefINSC_12SharedBufferENS_12RawPtrTraitsISJ_EENS_21DefaultRefDerefTraitsISJ_EEEENSC_12CDMKeyStatusEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_6RefPtrISJ_SL_SN_EEbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSU_SX_bEE4callESU_SX_b(uint64_t a1, uint64_t *a2, WebCore::FragmentedSharedBuffer **a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  IPC::Encoder *v14;

  v8 = *(_QWORD *)(a1 + 8);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 3076;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v14 = (IPC::Encoder *)v9;
  IPC::VectorArgumentCoder<false,std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v9, a2);
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>((IPC::Encoder *)v9, a3);
  *IPC::Encoder::grow((IPC::Encoder *)v9, 1uLL, 1) = a4;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v14, 0, 0);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteCDMProxy::didReceiveMessage(unsigned __int8 ***this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  unsigned __int8 ***v3;
  int v4;
  char v5;
  unsigned __int8 **v6;

  v3 = this;
  v4 = *((unsigned __int16 *)a3 + 25);
  switch(v4)
  {
    case 734:
      this = (unsigned __int8 ***)IPC::Decoder::decode<std::tuple<double>>((uint64_t *)a3);
      if (v5)
      {
        v3[6] = (unsigned __int8 **)this;
        v6 = v3[2];
        if (v6)
        {
          if (v6[1])
            return (unsigned __int8 ***)(*((uint64_t (**)(unsigned __int8 **, unsigned __int8 ***))*v3[3] + 2))(v3[3], this);
        }
      }
      break;
    case 733:
      return (unsigned __int8 ***)(*((uint64_t (**)(unsigned __int8 **))*this[3] + 13))(this[3]);
    case 732:
      return IPC::handleMessageAsync<Messages::RemoteCDMProxy::GetSupportedConfiguration,WebKit::RemoteCDMProxy,WebKit::RemoteCDMProxy,void ()(WebCore::CDMKeySystemConfiguration &&,WebCore::CDMPrivate::LocalStorageAccess,WTF::CompletionHandler<void ()(std::optional<WebCore::CDMKeySystemConfiguration>)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, _BYTE *, _QWORD, _QWORD **))WebKit::RemoteCDMProxy::getSupportedConfiguration, 0);
  }
  return this;
}

unsigned __int8 ***IPC::handleMessageAsync<Messages::RemoteCDMProxy::GetSupportedConfiguration,WebKit::RemoteCDMProxy,WebKit::RemoteCDMProxy,void ()(WebCore::CDMKeySystemConfiguration &&,WebCore::CDMPrivate::LocalStorageAccess,WTF::CompletionHandler<void ()(std::optional<WebCore::CDMKeySystemConfiguration>)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, _BYTE *, _QWORD, _QWORD **), uint64_t a5)
{
  void *v10;
  unint64_t v11;
  _QWORD *v12;
  unsigned __int8 **v13;
  unsigned __int8 ***result;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unsigned __int8 **v18;
  _QWORD *v19;
  _BYTE v20[88];
  char v21;

  IPC::Decoder::decode<std::tuple<WebCore::CDMKeySystemConfiguration,WebCore::CDMPrivate::LocalStorageAccess>>(a2, v20);
  if (!v21)
    return (unsigned __int8 ***)std::__optional_destruct_base<std::tuple<WebCore::CDMKeySystemConfiguration,WebCore::CDMPrivate::LocalStorageAccess>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v20, v10);
  v11 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (!(_BYTE)v10)
    return (unsigned __int8 ***)std::__optional_destruct_base<std::tuple<WebCore::CDMKeySystemConfiguration,WebCore::CDMPrivate::LocalStorageAccess>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v20, v10);
  v17 = v11;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v18, a1);
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v12 = off_1E34B3338;
  v12[1] = v17;
  v13 = v18;
  v18 = 0;
  v19 = v12;
  v12[2] = v13;
  result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v18);
  if (v21)
  {
    v15 = (_QWORD *)(a3 + (a5 >> 1));
    if ((a5 & 1) != 0)
      a4 = *(void (**)(_QWORD *, _BYTE *, _QWORD, _QWORD **))(*v15 + a4);
    a4(v15, v20, v20[80], &v19);
    v16 = v19;
    v19 = 0;
    if (v16)
      (*(void (**)(_QWORD *))(*v16 + 8))(v16);
    return (unsigned __int8 ***)std::__optional_destruct_base<std::tuple<WebCore::CDMKeySystemConfiguration,WebCore::CDMPrivate::LocalStorageAccess>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v20, v10);
  }
  __break(1u);
  return result;
}

uint64_t WebKit::RemoteCDMProxy::didReceiveSyncMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  if (*(_WORD *)(a3 + 50) == 3540)
    return IPC::handleMessageSynchronous<Messages::RemoteCDMProxy::CreateInstance,WebKit::RemoteCDMProxy,WebKit::RemoteCDMProxy,void ()(WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::RemoteCDMInstanceConfiguration &&)> &&)>(a2, a3, a4, a1, (void (*)(_QWORD *, _QWORD **))WebKit::RemoteCDMProxy::createInstance, 0);
  else
    return 0;
}

uint64_t IPC::handleMessageSynchronous<Messages::RemoteCDMProxy::CreateInstance,WebKit::RemoteCDMProxy,WebKit::RemoteCDMProxy,void ()(WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::RemoteCDMInstanceConfiguration &&)> &&)>(unsigned __int8 **a1, uint64_t a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _QWORD **), uint64_t a6)
{
  IPC::Encoder *v9;
  _QWORD *v10;
  unsigned __int8 **v11;
  _QWORD *v12;
  _QWORD *v13;
  IPC::Encoder *v15;
  unsigned __int8 **v16[2];
  _QWORD *v17;

  v9 = *a3;
  *a3 = 0;
  v15 = v9;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v16, a1);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = off_1E34B3360;
  v10[1] = v15;
  v11 = v16[0];
  v16[0] = 0;
  v10[2] = v11;
  v17 = v10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v16);
  v12 = (_QWORD *)(a4 + (a6 >> 1));
  if ((a6 & 1) != 0)
    a5 = *(void (**)(_QWORD *, _QWORD **))(*v12 + a5);
  a5(v12, &v17);
  v13 = v17;
  v17 = 0;
  if (v13)
    (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  return 1;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::CDMKeySystemConfiguration,WebCore::CDMPrivate::LocalStorageAccess>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::CDMKeySystemConfiguration,WebCore::CDMPrivate::LocalStorageAccess>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[88])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::CDMKeySystemConfiguration,WebCore::CDMPrivate::LocalStorageAccess>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  void *v4;
  _BYTE v6[88];

  IPC::Decoder::decode<WebCore::CDMKeySystemConfiguration>(a1, (uint64_t)v6);
  if (v6[80])
  {
    IPC::ArgumentCoder<std::tuple<WebCore::CDMKeySystemConfiguration,WebCore::CDMPrivate::LocalStorageAccess>,void>::decode<IPC::Decoder,WebCore::CDMKeySystemConfiguration>(a1, (uint64_t)v6, a2);
  }
  else
  {
    *a2 = 0;
    a2[88] = 0;
  }
  return std::__optional_destruct_base<WebCore::CDMKeySystemConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v4);
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::CDMKeySystemConfiguration,WebCore::CDMPrivate::LocalStorageAccess>,void>::decode<IPC::Decoder,WebCore::CDMKeySystemConfiguration>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;
  char v6;
  char v7;

  result = IPC::Decoder::decode<WebCore::ApplyTrackingPrevention>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v6 = 0;
    *a3 = 0;
LABEL_5:
    a3[88] = v6;
    return result;
  }
  if (*(_BYTE *)(a2 + 80))
  {
    v7 = result;
    result = std::__tuple_leaf<0ul,WebCore::CDMKeySystemConfiguration,false>::__tuple_leaf[abi:sn180100]<WebCore::CDMKeySystemConfiguration,void>((uint64_t)a3, (uint64_t *)a2);
    a3[80] = v7;
    v6 = 1;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14RemoteCDMProxy25GetSupportedConfigurationEN6WebKit14RemoteCDMProxyES8_FvON7WebCore25CDMKeySystemConfigurationENS9_10CDMPrivate18LocalStorageAccessEONS_17CompletionHandlerIFvNSt3__18optionalISA_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3338;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14RemoteCDMProxy25GetSupportedConfigurationEN6WebKit14RemoteCDMProxyES8_FvON7WebCore25CDMKeySystemConfigurationENS9_10CDMPrivate18LocalStorageAccessEONS_17CompletionHandlerIFvNSt3__18optionalISA_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B3338;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14RemoteCDMProxy25GetSupportedConfigurationEN6WebKit14RemoteCDMProxyES8_FvON7WebCore25CDMKeySystemConfigurationENS9_10CDMPrivate18LocalStorageAccessEONS_17CompletionHandlerIFvNSt3__18optionalISA_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  id v12;
  void *v13;
  IPC::Encoder *v14;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3079;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v14 = (IPC::Encoder *)v5;
  v6 = *(unsigned __int8 *)(a2 + 80);
  v7 = IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1);
  if (v6)
  {
    *v7 = 1;
    if (!*(_BYTE *)(a2 + 80))
    {
      v12 = std::__throw_bad_optional_access[abi:sn180100]();
      return (IPC::Encoder *)std::__optional_destruct_base<std::tuple<WebCore::CDMKeySystemConfiguration,WebCore::CDMPrivate::LocalStorageAccess>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v12, v13);
    }
    IPC::ArgumentCoder<WebCore::CDMKeySystemConfiguration,void>::encode((IPC::Encoder *)v5, a2);
  }
  else
  {
    *v7 = 0;
  }
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v14, 0, 0);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::CDMKeySystemConfiguration,WebCore::CDMPrivate::LocalStorageAccess>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF *v3;
  void *v4;
  void *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  if (*(_BYTE *)(a1 + 88))
  {
    v3 = *(WTF **)(a1 + 64);
    if (v3)
    {
      *(_QWORD *)(a1 + 64) = 0;
      *(_DWORD *)(a1 + 72) = 0;
      WTF::fastFree(v3, a2);
    }
    WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 40, a2);
    WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 24, v4);
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 8, v5);
    v7 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14RemoteCDMProxy14CreateInstanceEN6WebKit14RemoteCDMProxyES8_FvONS_17CompletionHandlerIFvNS_23ObjectIdentifierGenericINS7_31RemoteCDMInstanceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS7_30RemoteCDMInstanceConfigurationEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSE_SG_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3360;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14RemoteCDMProxy14CreateInstanceEN6WebKit14RemoteCDMProxyES8_FvONS_17CompletionHandlerIFvNS_23ObjectIdentifierGenericINS7_31RemoteCDMInstanceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS7_30RemoteCDMInstanceConfigurationEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSE_SG_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B3360;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages14RemoteCDMProxy14CreateInstanceEN6WebKit14RemoteCDMProxyES8_FvONS_17CompletionHandlerIFvNS_23ObjectIdentifierGenericINS7_31RemoteCDMInstanceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS7_30RemoteCDMInstanceConfigurationEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSE_SG_EE4callESE_SG_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  IPC::Encoder *v5;

  v4 = (uint64_t *)(a1 + 8);
  v5 = *(IPC::Encoder **)(a1 + 8);
  *(_QWORD *)IPC::Encoder::grow(v5, 8uLL, 8) = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v5, a3);
  return IPC::Connection::sendMessageImpl(v4[1], v4, 0, 0);
}

uint64_t WebKit::RemoteLayerTreeContext::create(WebKit::RemoteLayerTreeContext *this, WebKit::WebPage *a2)
{
  WebKit::RemoteLayerTreeContext *v4;
  uint64_t result;

  v4 = (WebKit::RemoteLayerTreeContext *)WTF::fastMalloc((WTF *)0xD8);
  result = WebKit::RemoteLayerTreeContext::RemoteLayerTreeContext(v4, a2);
  *(_QWORD *)this = v4;
  return result;
}

void sub_196FA1E30(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::RemoteLayerTreeDrawingArea::scheduleRenderingUpdateTimerFired(WebKit::RemoteLayerTreeDrawingArea *this)
{
  WebKit::RemoteLayerTreeDrawingArea::triggerRenderingUpdate(this);
  *((_BYTE *)this + 360) = 0;
}

uint64_t WebKit::RemoteLayerTreeDrawingArea::setViewExposedRect(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  uint64_t v3;
  WebKit::WebPage *v4;
  uint64_t result;
  _DWORD *v6;

  v2 = *a2;
  *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 16);
  *(_OWORD *)(a1 + 144) = v2;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (v3)
    v4 = (WebKit::WebPage *)(v3 - 16);
  else
    v4 = 0;
  result = WebKit::WebPage::localMainFrameView(v4);
  if (result)
  {
    v6 = (_DWORD *)result;
    ++*(_DWORD *)(result + 8);
    result = WebCore::LocalFrameView::setViewExposedRect();
    if (v6[2] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  return result;
}

void sub_196FA1F08(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[2];
  _Unwind_Resume(exception_object);
}

void WebKit::RemoteLayerTreeDrawingArea::~RemoteLayerTreeDrawingArea(WebKit::RemoteLayerTreeDrawingArea *this)
{
  WebCore::TimerBase *v2;
  uint64_t v3;
  void *v4;
  WTF *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _DWORD *v12;
  void *v13;

  *(_QWORD *)this = off_1E34B3388;
  *((_QWORD *)this + 2) = &unk_1E34B3568;
  *((_QWORD *)this + 9) = &unk_1E34B3590;
  v2 = (WebKit::RemoteLayerTreeDrawingArea *)((char *)this + 288);
  *((_QWORD *)this + 36) = off_1E34B3740;
  v3 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  v5 = (WTF *)*((_QWORD *)this + 32);
  if (v5)
  {
    *((_QWORD *)this + 32) = 0;
    *((_DWORD *)this + 66) = 0;
    WTF::fastFree(v5, v4);
  }
  v6 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(v6 + 8));
      WTF::fastFree((WTF *)v6, v13);
    }
  }
  v9 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 56))(v9);
  *((_QWORD *)this + 21) = off_1E34B3740;
  v10 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  WebCore::TimerBase::~TimerBase((WebKit::RemoteLayerTreeDrawingArea *)((char *)this + 168));
  WTF::Vector<WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)this + 22, v11);
  v12 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v12)
  {
    if (v12[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    else
      --v12[2];
  }
  WebKit::DrawingArea::~DrawingArea(this);
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteLayerTreeDrawingArea::~RemoteLayerTreeDrawingArea(this);
  WTF::fastFree(v1, v2);
}

void `non-virtual thunk to'WebKit::RemoteLayerTreeDrawingArea::~RemoteLayerTreeDrawingArea(WebKit::RemoteLayerTreeDrawingArea *this)
{
  WebKit::RemoteLayerTreeDrawingArea::~RemoteLayerTreeDrawingArea((WebKit::RemoteLayerTreeDrawingArea *)((char *)this - 16));
}

{
  WebKit::RemoteLayerTreeDrawingArea::~RemoteLayerTreeDrawingArea((WebKit::RemoteLayerTreeDrawingArea *)((char *)this - 72));
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteLayerTreeDrawingArea::~RemoteLayerTreeDrawingArea((WebKit::RemoteLayerTreeDrawingArea *)((char *)this - 16));
  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteLayerTreeDrawingArea::~RemoteLayerTreeDrawingArea((WebKit::RemoteLayerTreeDrawingArea *)((char *)this - 72));
  WTF::fastFree(v1, v2);
}

void WebKit::RemoteLayerTreeDrawingArea::createDisplayRefreshMonitor(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void `non-virtual thunk to'WebKit::RemoteLayerTreeDrawingArea::createDisplayRefreshMonitor(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebKit::RemoteLayerTreeDrawingArea::attachViewOverlayGraphicsLayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  _DWORD *v8;

  result = WebKit::RemoteLayerTreeDrawingArea::rootLayerInfoWithFrameIdentifier(a1, a2, a3);
  if (result)
  {
    v7 = result;
    if (a4)
      ++*(_DWORD *)(a4 + 8);
    v8 = *(_DWORD **)(result + 16);
    *(_QWORD *)(v7 + 16) = a4;
    if (v8)
    {
      if (v8[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
      else
        --v8[2];
    }
    return WebKit::RemoteLayerTreeDrawingArea::updateRootLayers(*(_QWORD *)(a1 + 88), *(_DWORD *)(a1 + 100));
  }
  return result;
}

uint64_t WebKit::RemoteLayerTreeDrawingArea::rootLayerInfoWithFrameIdentifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t result;

  v3 = *(unsigned int *)(a1 + 100);
  if (!(_DWORD)v3)
    return 0;
  v4 = 0;
  for (result = *(_QWORD *)(a1 + 88); *(_QWORD *)(result + 24) != a2 || *(_QWORD *)(result + 32) != a3; result += 40)
  {
    if (v3 == ++v4)
      return 0;
  }
  if (v4 >= v3)
    __break(0xC471u);
  return result;
}

_DWORD *WebKit::RemoteLayerTreeDrawingArea::addRootFrame(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  const char *v6;
  _DWORD *result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  const char *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  WTF::StringImpl *v19;
  const char *v20;

  WebCore::GraphicsLayer::create();
  v6 = v20;
  v15 = "drawing area root ";
  LODWORD(v16) = 18;
  result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,void>>(&v19, (uint64_t)&v15, a3, a2);
  if (v19)
  {
    (*(void (**)(const char *, WTF::StringImpl **))(*(_QWORD *)v6 + 40))(v6, &v19);
    v9 = v19;
    v19 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v20;
    v20 = 0;
    v15 = v10;
    v16 = 0;
    v17 = 0;
    *(_QWORD *)&v18 = a2;
    *((_QWORD *)&v18 + 1) = a3;
    v11 = a1[25];
    if (v11 == a1[24])
    {
      WTF::Vector<WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo>(a1 + 22, (unint64_t)&v15);
    }
    else
    {
      v12 = *((_QWORD *)a1 + 11) + 40 * v11;
      v15 = 0;
      *(_QWORD *)v12 = v10;
      v13 = v16;
      v16 = 0;
      *(_QWORD *)(v12 + 8) = v13;
      v14 = v17;
      v17 = 0;
      *(_QWORD *)(v12 + 16) = v14;
      *(_OWORD *)(v12 + 24) = v18;
      ++a1[25];
    }
    WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo::~RootLayerInfo((WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo *)&v15);
    result = v20;
    v20 = 0;
    if (result)
    {
      if (result[2] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
      else
        --result[2];
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_196FA230C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15)
{
  uint64_t v15;
  _DWORD *v17;

  WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo::~RootLayerInfo((WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo *)&a10);
  v17 = *(_DWORD **)(v15 - 40);
  *(_QWORD *)(v15 - 40) = 0;
  if (v17)
  {
    if (v17[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 16))(v17);
    else
      --v17[2];
  }
  _Unwind_Resume(a1);
}

char *WebKit::RemoteLayerTreeDrawingArea::removeRootFrame(char *result, uint64_t a2, uint64_t a3)
{
  char *v3;
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  char *v17;

  v3 = result;
  v4 = *((_QWORD *)result + 11);
  v5 = *((_DWORD *)result + 25);
  v6 = v4 + 40 * v5;
  if (v5)
  {
    v9 = 0;
    v10 = *((_QWORD *)result + 11);
    v11 = (char *)(v4 + 40 * v5);
    v12 = (unint64_t)v11;
    do
    {
      if (*(_QWORD *)(v4 + 24) == a2 && *(_QWORD *)(v4 + 32) == a3)
      {
        v14 = v4;
        if (v12 != *((_QWORD *)v3 + 11) + 40 * *((unsigned int *)v3 + 25))
        {
          if ((char *)v4 == v11)
          {
            v14 = v12;
          }
          else
          {
            WTF::VectorMover<false,WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo>::moveOverlapping(v11, (char *)v4, v12);
            v14 = v12 + v10 - (_QWORD)v11;
          }
        }
        v15 = *(_DWORD **)(v4 + 16);
        *(_QWORD *)(v4 + 16) = 0;
        if (v15)
        {
          if (v15[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 16))(v15);
          else
            --v15[2];
        }
        v16 = *(_DWORD **)(v4 + 8);
        *(_QWORD *)(v4 + 8) = 0;
        if (v16)
        {
          if (v16[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 16))(v16);
          else
            --v16[2];
        }
        result = *(char **)v4;
        *(_QWORD *)v4 = 0;
        if (result)
        {
          if (*((_DWORD *)result + 2) == 1)
            result = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)result + 16))(result);
          else
            --*((_DWORD *)result + 2);
        }
        v11 = (char *)(v4 + 40);
        ++v9;
        v12 = v14;
      }
      else
      {
        v14 = v12;
      }
      v4 += 40;
      v10 += 40;
    }
    while (v4 < v6);
    v4 = *((_QWORD *)v3 + 11);
    v5 = *((_DWORD *)v3 + 25);
    v6 = v14;
  }
  else
  {
    v9 = 0;
    v11 = (char *)*((_QWORD *)result + 11);
  }
  v17 = (char *)(v4 + 40 * v5);
  if (v11 != v17)
  {
    result = WTF::VectorMover<false,WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo>::moveOverlapping(v11, v17, v6);
    v5 = *((_DWORD *)v3 + 25);
  }
  *((_DWORD *)v3 + 25) = v5 - v9;
  return result;
}

double WebKit::RemoteLayerTreeDrawingArea::startRenderingUpdateTimer(WebKit::RemoteLayerTreeDrawingArea *this)
{
  double result;

  if ((*((_QWORD *)this + 25) & 0xFFFFFFFFFFFFLL) == 0
    || (result = *(double *)((*((_QWORD *)this + 25) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  {
    WebCore::TimerBase::start();
  }
  return result;
}

void WebKit::RemoteLayerTreeDrawingArea::updateRenderingWithForcedRepaint(WebKit::RemoteLayerTreeDrawingArea *this)
{
  uint64_t v2;
  uint64_t v3;

  if (!*((_BYTE *)this + 224))
  {
    v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
    if (v2)
      v3 = v2 - 16;
    else
      v3 = 0;
    WebCore::Page::forceRepaintAllFrames(*(WebCore::Page **)(v3 + 48));
    WebKit::RemoteLayerTreeDrawingArea::updateRendering(this);
  }
}

uint64_t WebKit::RemoteLayerTreeDrawingArea::updateRenderingWithForcedRepaintAsync(WebKit::RemoteLayerTreeDrawingArea *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;

  WebKit::RemoteLayerTreeDrawingArea::updateRenderingWithForcedRepaint(a1);
  v4 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void sub_196FA25F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t *WebKit::RemoteLayerTreeDrawingArea::acceleratedAnimationDidStart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  return WebKit::RemoteLayerTreeContext::animationDidStart(*(_QWORD *)(a1 + 80), a2, a3, a4, a5);
}

uint64_t *WebKit::RemoteLayerTreeDrawingArea::acceleratedAnimationDidEnd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return WebKit::RemoteLayerTreeContext::animationDidEnd(*(_QWORD *)(a1 + 80), a2, a3, a4);
}

float WebKit::RemoteLayerTreeDrawingArea::exposedContentRect(WebKit::RemoteLayerTreeDrawingArea *this)
{
  uint64_t v1;
  WebKit::WebPage *v2;
  _DWORD *v3;
  _DWORD *v4;
  float v5;
  float v6;

  v1 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  if (v1)
    v2 = (WebKit::WebPage *)(v1 - 16);
  else
    v2 = 0;
  v3 = (_DWORD *)WebKit::WebPage::localMainFrameView(v2);
  if (!v3)
    return 0.0;
  v4 = v3;
  ++v3[2];
  WebCore::ScrollView::exposedContentRect((WebCore::ScrollView *)v3);
  v6 = v5;
  if (v4[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  else
    --v4[2];
  return v6;
}

void sub_196FA26CC(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[2];
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::RemoteLayerTreeDrawingArea::setNextRenderingUpdateRequiresSynchronousImageDecoding(uint64_t this)
{
  *(_BYTE *)(*(_QWORD *)(this + 80) + 208) = 1;
  return this;
}

IPC::Encoder **WebKit::RemoteLayerTreeDrawingArea::updateRendering(void)::$_1::~$_1(IPC::Encoder **a1, void *a2)
{
  IPC::Encoder *v3;
  unsigned int v4;
  unsigned int v5;
  void *v7;

  WTF::Vector<std::unique_ptr<WebKit::ThreadSafeImageBufferSetFlusher>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 2), a2);
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100](a1 + 1, 0);
  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v3 + 1);
      WTF::fastFree(v3, v7);
    }
  }
  return a1;
}

uint64_t *WebKit::RemoteLayerTreeDrawingArea::mainFrameContentSizeChanged(uint64_t a1, uint64_t a2, uint64_t a3, int32x2_t *a4)
{
  uint64_t *result;
  uint64_t v6;
  float32x2_t v7;

  result = (uint64_t *)WebKit::RemoteLayerTreeDrawingArea::rootLayerInfoWithFrameIdentifier(a1, a2, a3);
  if (result)
  {
    v6 = *result;
    v7 = vcvt_f32_s32(*a4);
    return (uint64_t *)(*(uint64_t (**)(uint64_t, float32x2_t *))(*(_QWORD *)v6 + 160))(v6, &v7);
  }
  return result;
}

double WebKit::RemoteLayerTreeDrawingArea::dispatchAfterEnsuringDrawing(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;

  v6 = a2;
  *(_BYTE *)(*(_QWORD *)(a1 + 80) + 208) = 1;
  v3 = (_QWORD *)(a1 + 256);
  v4 = *(unsigned int *)(a1 + 268);
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 264))
    *(_QWORD *)(*(_QWORD *)(a1 + 256) + 8 * *(unsigned int *)(a1 + 268)) = *(_QWORD *)WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v3, v4 + 1, (unint64_t)&v6);
  else
    *(_QWORD *)(*v3 + 8 * v4) = a2;
  ++*(_DWORD *)(a1 + 268);
  return WebKit::RemoteLayerTreeDrawingArea::triggerRenderingUpdate((WebKit::RemoteLayerTreeDrawingArea *)a1);
}

uint64_t WebKit::RemoteLayerTreeDrawingArea::adoptLayersFromDrawingArea(unsigned int **this, WebKit::RemoteLayerTreeContext **a2)
{
  uint64_t result;

  if (*((unsigned __int8 *)a2 + 24) == *((unsigned __int8 *)this + 24))
    return (uint64_t)WebKit::RemoteLayerTreeContext::adoptLayersFromContext(this[10], a2[10]);
  result = 541;
  __break(0xC471u);
  return result;
}

uint64_t WebKit::RemoteLayerTreeDrawingArea::layerTreeStateIsFrozen(WebKit::RemoteLayerTreeDrawingArea *this)
{
  return *((unsigned __int8 *)this + 224);
}

void WebKit::DrawingArea::displayColorSpace(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

uint64_t WebKit::RemoteLayerTreeDrawingArea::addMilestonesToDispatch(uint64_t a1, __int16 a2)
{
  *(_WORD *)(a1 + 280) |= a2;
  return 1;
}

uint64_t WebCore::GraphicsLayerClient::getCurrentTransform()
{
  return 0;
}

float WebCore::GraphicsLayerClient::pageScaleFactor(WebCore::GraphicsLayerClient *this)
{
  return 1.0;
}

float WebCore::GraphicsLayerClient::zoomedOutPageScaleFactor(WebCore::GraphicsLayerClient *this)
{
  return 0.0;
}

uint64_t WebCore::GraphicsLayerClient::customContentsScale(WebCore::GraphicsLayerClient *this, const WebCore::GraphicsLayer *a2)
{
  return 0;
}

float WebCore::GraphicsLayerClient::contentsScaleMultiplierForNewTiles(WebCore::GraphicsLayerClient *this, const WebCore::GraphicsLayer *a2)
{
  return 1.0;
}

uint64_t WebCore::GraphicsLayerClient::paintsOpaquelyAtNonIntegralScales(WebCore::GraphicsLayerClient *this, const WebCore::GraphicsLayer *a2)
{
  return 0;
}

uint64_t WebCore::GraphicsLayerClient::isTrackingRepaints(WebCore::GraphicsLayerClient *this)
{
  return 0;
}

uint64_t WebCore::GraphicsLayerClient::shouldSkipLayerInDump()
{
  return 0;
}

uint64_t WebCore::GraphicsLayerClient::shouldDumpPropertyForLayer()
{
  return 1;
}

uint64_t WebCore::GraphicsLayerClient::shouldAggressivelyRetainTiles(WebCore::GraphicsLayerClient *this, const WebCore::GraphicsLayer *a2)
{
  return 0;
}

uint64_t WebCore::GraphicsLayerClient::shouldTemporarilyRetainTileCohorts(WebCore::GraphicsLayerClient *this, const WebCore::GraphicsLayer *a2)
{
  return 1;
}

uint64_t WebCore::GraphicsLayerClient::useGiantTiles(WebCore::GraphicsLayerClient *this)
{
  return 0;
}

uint64_t WebCore::GraphicsLayerClient::cssUnprefixedBackdropFilterEnabled(WebCore::GraphicsLayerClient *this)
{
  return 0;
}

uint64_t WebCore::GraphicsLayerClient::needsIOSDumpRenderTreeMainFrameRenderViewLayerIsAlwaysOpaqueHack(WebCore::GraphicsLayerClient *this, const WebCore::GraphicsLayer *a2)
{
  return 0;
}

double WebCore::GraphicsLayerClient::transformMatrixForProperty@<D0>(_OWORD *a1@<X8>)
{
  double result;

  a1[4] = xmmword_1978CEDC8;
  a1[5] = unk_1978CEDD8;
  a1[6] = xmmword_1978CEDE8;
  a1[7] = unk_1978CEDF8;
  *a1 = xmmword_1978CED88;
  a1[1] = unk_1978CED98;
  result = 0.0;
  a1[2] = xmmword_1978CEDA8;
  a1[3] = unk_1978CEDB8;
  return result;
}

uint64_t WebCore::GraphicsLayerClient::layerContainsBitmapOnly(WebCore::GraphicsLayerClient *this, const WebCore::GraphicsLayer *a2)
{
  return 0;
}

uint64_t WebCore::GraphicsLayerClient::layerNeedsPlatformContext(WebCore::GraphicsLayerClient *this, const WebCore::GraphicsLayer *a2)
{
  return 0;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, WTF *a2)
{
  uint64_t v3;
  WTF **v4;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WTF **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WTF *)-1)
      {
        a2 = *v4;
        *v4 = 0;
        if (a2)
          std::default_delete<WebKit::BufferSetBackendHandle>::operator()[abi:sn180100]((int)v4, a2);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t std::default_delete<WebKit::BufferSetBackendHandle>::operator()[abi:sn180100](int a1, WTF *this)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  if (this)
  {
    if (*((_BYTE *)this + 72))
    {
      v3 = *((unsigned int *)this + 16);
      if ((_DWORD)v3 != -1)
        off_1E34B3680[v3]((int)&v5, this);
      *((_DWORD *)this + 16) = -1;
    }
    return WTF::fastFree(this, this);
  }
  return result;
}

uint64_t WTF::ThreadSafeRefCounted<WebKit::RemoteLayerTreeDrawingArea::BackingStoreFlusher,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(uint64_t result)
{
  WTF *v1;
  void *v2;

  if (result)
  {
    v1 = (WTF *)result;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(result + 8));
    return WTF::fastFree(v1, v2);
  }
  return result;
}

unsigned int *WTF::Vector<WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD **v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  WTF *v9;

  v3 = a1[3];
  if ((_DWORD)v3)
  {
    v4 = 40 * v3;
    v5 = (_DWORD **)(*(_QWORD *)a1 + 16);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
        else
          --v6[2];
      }
      v7 = *(v5 - 1);
      *(v5 - 1) = 0;
      if (v7)
      {
        if (v7[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
        else
          --v7[2];
      }
      v8 = *(v5 - 2);
      *(v5 - 2) = 0;
      if (v8)
      {
        if (v8[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
        else
          --v8[2];
      }
      v5 += 5;
      v4 -= 40;
    }
    while (v4);
  }
  v9 = *(WTF **)a1;
  if (a1 + 4 != *(unsigned int **)a1 && v9 != 0)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v9, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>::destruct(*(_DWORD **)a1, (_DWORD **)(*(_QWORD *)a1 + 8 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

_DWORD *WTF::VectorDestructor<true,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>::destruct(_DWORD *result, _DWORD **a2)
{
  _DWORD **v3;

  if (result != (_DWORD *)a2)
  {
    v3 = (_DWORD **)result;
    do
    {
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (result[2] == 1)
          result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
        else
          --result[2];
      }
      ++v3;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GraphicsLayer&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  v9 = *(unsigned int *)(a1 + 12);
  v10 = *(_QWORD *)a1;
  ++*(_DWORD *)(a2 + 8);
  *(_QWORD *)(v10 + 8 * v9) = a2;
  *(_DWORD *)(a1 + 12) = v9 + 1;
  return result;
}

_QWORD *WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,void>>(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  int v5;
  int v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;

  v4 = result;
  v5 = *(_DWORD *)(a2 + 8);
  v6 = 1;
  v7 = a3;
  do
  {
    ++v6;
    v8 = v7 > 9;
    v7 /= 0xAuLL;
  }
  while (v8);
  v9 = a4;
  do
  {
    ++v6;
    v8 = v9 > 9;
    v9 /= 0xAuLL;
  }
  while (v8);
  if ((v6 | v5) < 0 || (v10 = __OFADD__(v5, v6), v11 = v5 + v6, v10))
  {
    *result = 0;
  }
  else
  {
    result = (_QWORD *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,void>>((uint64_t)&v12, v11, *(_BYTE **)a2, *(_QWORD *)(a2 + 8), a3, a4);
    *v4 = v12;
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,void>>(uint64_t result, unsigned int a2, _BYTE *a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v12;
  uint64_t v13;

  v6 = (_QWORD *)result;
  if (a2)
  {
    if ((a2 & 0x80000000) != 0)
    {
      v12 = 0;
    }
    else
    {
      result = WTF::tryFastCompactMalloc((WTF *)(a2 + 20));
      v12 = v13;
      if (v13)
      {
        *(_DWORD *)v13 = 2;
        *(_DWORD *)(v13 + 4) = a2;
        *(_QWORD *)(v13 + 8) = v13 + 20;
        *(_DWORD *)(v13 + 16) = 4;
        result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,void>>((_BYTE *)(v13 + 20), a3, a4, a5, a6);
      }
    }
  }
  else
  {
    v12 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
  }
  *v6 = v12;
  return result;
}

_QWORD *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,void>>(_BYTE *__dst, _BYTE *a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  _QWORD v10[2];

  if (a3)
  {
    if (a3 == 1)
      *__dst = *a2;
    else
      memcpy(__dst, a2, a3);
  }
  v10[0] = a4;
  v10[1] = a5;
  return WTF::ProcessQualifiedStringTypeAdapter::writeTo<unsigned char>(v10, &__dst[a3]);
}

__n128 WTF::Vector<WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo>(_DWORD *a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;

  v3 = WTF::Vector<WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  v4 = *(_QWORD *)a1 + 40 * a1[3];
  v5 = *(_QWORD *)v3;
  *(_QWORD *)v3 = 0;
  *(_QWORD *)v4 = v5;
  v6 = *(_QWORD *)(v3 + 8);
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v4 + 8) = v6;
  v7 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v4 + 16) = v7;
  result = *(__n128 *)(v3 + 24);
  *(__n128 *)(v4 + 24) = result;
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(_DWORD *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

_DWORD *WTF::Vector<WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(_DWORD *result, unint64_t a2)
{
  _DWORD *v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (result[2] < a2)
  {
    v2 = result;
    v3 = *(WTF **)result;
    v4 = result[3];
    if (a2 < 2)
    {
      v6 = (uint64_t)(result + 4);
      *(_QWORD *)result = result + 4;
      result[2] = 1;
    }
    else
    {
      if (a2 >= 0x6666667)
      {
        __break(0xC471u);
        JUMPOUT(0x196FA30B4);
      }
      v5 = 40 * a2;
      v6 = WTF::fastMalloc((WTF *)(40 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)v2 = v6;
    }
    result = WTF::VectorMover<false,WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo>::move(v3, (_DWORD *)v3 + 10 * v4, v6);
    if (v2 + 4 != (_DWORD *)v3 && v3 != 0)
    {
      if (*(WTF **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        v2[2] = 0;
      }
      return (_DWORD *)WTF::fastFree(v3, v7);
    }
  }
  return result;
}

_DWORD *WTF::VectorMover<false,WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo>::move(_DWORD *result, _DWORD *a2, uint64_t a3)
{
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(_DWORD **)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)a3 = v6;
      v7 = *((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      *(_QWORD *)(a3 + 8) = v7;
      v8 = *((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      *(_QWORD *)(a3 + 16) = v8;
      *(_OWORD *)(a3 + 24) = *(_OWORD *)(v5 + 6);
      v9 = (_DWORD *)*((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      if (v9)
      {
        if (v9[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
        else
          --v9[2];
      }
      v10 = (_DWORD *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      if (v10)
      {
        if (v10[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
        else
          --v10[2];
      }
      result = *(_DWORD **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        if (result[2] == 1)
          result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
        else
          --result[2];
      }
      v5 += 10;
      a3 += 40;
    }
    while (v5 != a2);
  }
  return result;
}

char *WTF::VectorMover<false,WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo>::moveOverlapping(char *result, char *a2, unint64_t a3)
{
  char *v3;
  char *v4;
  _OWORD *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;

  v3 = a2;
  v4 = result;
  if ((unint64_t)result > a3)
    return (char *)WTF::VectorMover<false,WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo>::move(result, a2, a3);
  if (a2 != result)
  {
    v5 = (_OWORD *)(a3 + 40 * ((a2 - result) / 40) - 16);
    v6 = a2;
    do
    {
      v7 = *((_QWORD *)v6 - 5);
      v6 -= 40;
      *(_QWORD *)v6 = 0;
      *((_QWORD *)v5 - 3) = v7;
      v8 = *((_QWORD *)v6 + 1);
      *((_QWORD *)v6 + 1) = 0;
      *((_QWORD *)v5 - 2) = v8;
      v9 = *((_QWORD *)v6 + 2);
      *((_QWORD *)v6 + 2) = 0;
      *((_QWORD *)v5 - 1) = v9;
      *v5 = *(_OWORD *)(v6 + 24);
      v10 = (_DWORD *)*((_QWORD *)v6 + 2);
      *((_QWORD *)v6 + 2) = 0;
      if (v10)
      {
        if (v10[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
        else
          --v10[2];
      }
      v11 = (_DWORD *)*((_QWORD *)v3 - 4);
      *((_QWORD *)v3 - 4) = 0;
      if (v11)
      {
        if (v11[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
        else
          --v11[2];
      }
      result = (char *)*((_QWORD *)v3 - 5);
      *((_QWORD *)v3 - 5) = 0;
      if (result)
      {
        if (*((_DWORD *)result + 2) == 1)
          result = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)result + 16))(result);
        else
          --*((_DWORD *)result + 2);
      }
      v5 = (_OWORD *)((char *)v5 - 40);
      v3 = v6;
    }
    while (v6 != v4);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteLayerTreeDrawingArea::updateRendering(void)::$_1,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  void *v7;

  *(_QWORD *)a1 = off_1E34B36C8;
  WTF::Vector<std::unique_ptr<WebKit::ThreadSafeImageBufferSetFlusher>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 24, a2);
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 16), 0);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(v3 + 8));
      WTF::fastFree((WTF *)v3, v7);
    }
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  void *v8;

  *(_QWORD *)a1 = off_1E34B36C8;
  WTF::Vector<std::unique_ptr<WebKit::ThreadSafeImageBufferSetFlusher>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 24, a2);
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 16), 0);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(v4 + 8));
      WTF::fastFree((WTF *)v4, v8);
    }
  }
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteLayerTreeDrawingArea::updateRendering(void)::$_1,void>::call(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  char *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  unint64_t v29;
  size_t v30;
  char *v31;
  void *v32;
  uint64_t v33;
  WTF *v34;
  WTF::RunLoop *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  unint64_t v39;
  size_t v40;
  char *v41;
  void *v42;
  size_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;

  v45 = *(_QWORD *)(a1 + 8);
  v2 = (uint64_t *)(a1 + 16);
  kdebug_trace();
  v46 = 0;
  v3 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD **)(a1 + 24);
    v5 = 8 * v3 - 8;
    do
    {
      v6 = (*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)*v4 + 16))(*v4, &v46);
      ++v4;
      if (v5)
        v7 = v6;
      else
        v7 = 0;
      v5 -= 8;
    }
    while ((v7 & 1) != 0);
    v8 = *v2;
    if (v46)
      v9 = *(_DWORD *)(v46 - 12);
    else
      v9 = 0;
  }
  else
  {
    v9 = 0;
    v8 = *v2;
    v6 = 1;
  }
  v10 = *(_QWORD *)(v8 + 544);
  v11 = (v10 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v12 = v11 + 4;
  v13 = *(_QWORD *)(v8 + 552);
  v44 = v6;
  if (v13 < v11 + 4)
  {
    v39 = (2 * v13 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v40 = v39;
      v39 *= 2;
    }
    while (v40 < v12);
    v41 = (char *)mmap(0, v40, 3, 4098, -1, 0);
    if (v41 == (char *)-1)
    {
LABEL_55:
      __break(0xC471u);
      JUMPOUT(0x196FA37CCLL);
    }
    v14 = v41;
    memcpy(v41, *(const void **)(v8 + 528), *(_QWORD *)(v8 + 544));
    v42 = *(void **)(v8 + 528);
    if (v42 != (void *)(v8 + 16))
      munmap(v42, *(_QWORD *)(v8 + 552));
    *(_QWORD *)(v8 + 528) = v14;
    *(_QWORD *)(v8 + 552) = v40;
    v10 = *(_QWORD *)(v8 + 544);
  }
  else
  {
    v14 = *(char **)(v8 + 528);
  }
  bzero(&v14[v10], v11 - v10);
  *(_QWORD *)(v8 + 544) = v12;
  v15 = (_DWORD *)(*(_QWORD *)(v8 + 528) + v11);
  *(_QWORD *)(v8 + 536) = v15 + 1;
  *v15 = v9;
  if (v46)
  {
    v16 = *(unsigned int *)(v46 - 4);
    v17 = v46 + 16 * v16;
    if (*(_DWORD *)(v46 - 12))
    {
      v18 = v46;
      if ((_DWORD)v16)
      {
        v19 = 16 * v16;
        v18 = v46;
        while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
        {
          v18 += 16;
          v19 -= 16;
          if (!v19)
          {
            v18 = v17;
            goto LABEL_19;
          }
        }
      }
      goto LABEL_19;
    }
    v18 = v46 + 16 * v16;
  }
  else
  {
    v18 = 0;
    v16 = 0;
  }
  v17 = v46 + 16 * v16;
  if (v46)
  {
LABEL_19:
    v20 = v46 + 16 * *(unsigned int *)(v46 - 4);
    goto LABEL_23;
  }
  v20 = 0;
LABEL_23:
  while (v18 != v20)
  {
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v8, (uint64_t *)v18);
    v21 = *(_QWORD *)(v18 + 8);
    v22 = *(_QWORD *)(v8 + 544);
    v23 = v22 + 1;
    v24 = *(_QWORD *)(v8 + 552);
    if (v24 < v22 + 1)
    {
      v29 = (2 * v24 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v30 = v29;
        v29 *= 2;
      }
      while (v30 < v23);
      v43 = v30;
      v31 = (char *)mmap(0, v30, 3, 4098, -1, 0);
      if (v31 == (char *)-1)
        goto LABEL_55;
      v25 = v31;
      memcpy(v31, *(const void **)(v8 + 528), *(_QWORD *)(v8 + 544));
      v32 = *(void **)(v8 + 528);
      if (v32 != (void *)(v8 + 16))
        munmap(v32, *(_QWORD *)(v8 + 552));
      *(_QWORD *)(v8 + 528) = v25;
      *(_QWORD *)(v8 + 552) = v43;
      v26 = *(_QWORD *)(v8 + 544);
    }
    else
    {
      v25 = *(char **)(v8 + 528);
      v26 = *(_QWORD *)(v8 + 544);
    }
    bzero(&v25[v26], v22 - v26);
    *(_QWORD *)(v8 + 544) = v23;
    v27 = (_BYTE *)(*(_QWORD *)(v8 + 528) + v22);
    *(_QWORD *)(v8 + 536) = v27 + 1;
    if (v21)
    {
      *v27 = 1;
      IPC::ArgumentCoder<WebKit::BufferSetBackendHandle,void>::encode((IPC::Encoder *)v8, *(uint64_t **)(v18 + 8));
    }
    else
    {
      *v27 = 0;
    }
    v28 = v18 + 16;
    v18 = v17;
    if (v28 != v17)
    {
      v18 = v28;
      while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
      {
        v18 += 16;
        if (v18 == v17)
        {
          v18 = v17;
          break;
        }
      }
    }
  }
  v33 = v45;
  atomic_store(0, (unsigned __int8 *)(v45 + 16));
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v33 + 8), v2, 0, 0);
  if (v46)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v46, v34);
  v35 = (WTF::RunLoop *)kdebug_trace();
  WTF::RunLoop::main(v35);
  v36 = *(_QWORD *)(a1 + 40);
  v37 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v37 = off_1E34B36F0;
  *(_QWORD *)(v37 + 8) = v36;
  *(_BYTE *)(v37 + 16) = v44;
  v46 = v37;
  WTF::RunLoop::dispatch();
  result = v46;
  v46 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_196FA37D8(_Unwind_Exception *a1, WTF *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(a14, a2);
  kdebug_trace();
  _Unwind_Resume(a1);
}

WTF::MonotonicTime *WTF::Detail::CallableWrapper<WebKit::RemoteLayerTreeDrawingArea::updateRendering(void)::$_1::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  WebKit::WebProcess *v2;
  WTF::MonotonicTime *result;
  uint64_t v4;
  char v5;
  uint64_t v6;
  double *v7;
  double v8;
  WebKit::WebProcess *v9;
  uint64_t v10;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v9 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v9);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v10 = *(_QWORD *)(a1 + 8);
  result = (WTF::MonotonicTime *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)v2 + 14, &v10);
  if (result)
  {
    v4 = *((_QWORD *)result + 9);
    if (v4)
    {
      if (!*(_BYTE *)(v4 + 24))
      {
        v5 = *(_BYTE *)(a1 + 16);
        v6 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8);
        if (v6)
          v7 = (double *)(v6 - 16);
        else
          v7 = 0;
        WTF::MonotonicTime::now(result);
        WebKit::WebPage::didFlushLayerTreeAtTime(v7, v5, v8);
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 296))(v4);
        return (WTF::MonotonicTime *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 304))(v4);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteLayerTreeDrawingArea::scheduleRenderingUpdate(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34B3718;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteLayerTreeDrawingArea::scheduleRenderingUpdate(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34B3718;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

double WTF::Detail::CallableWrapper<WebKit::RemoteLayerTreeDrawingArea::scheduleRenderingUpdate(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  WebKit::RemoteLayerTreeDrawingArea *v2;
  double result;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
  {
    v2 = *(WebKit::RemoteLayerTreeDrawingArea **)(v1 + 8);
    if (v2)
    {
      *((_BYTE *)v2 + 360) = 0;
      return WebKit::RemoteLayerTreeDrawingArea::triggerRenderingUpdate(v2);
    }
  }
  return result;
}

__n128 WTF::Vector<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  v3 = WTF::Vector<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = WebKit::RemoteLayerTreeTransaction::RemoteLayerTreeTransaction(*(_QWORD *)a1 + 832 * *(unsigned int *)(a1 + 12), v3);
  v5 = *(_QWORD *)(v3 + 800);
  *(_QWORD *)(v3 + 800) = 0;
  *(_QWORD *)(v4 + 800) = v5;
  result = *(__n128 *)(v3 + 808);
  *(_QWORD *)(v4 + 824) = *(_QWORD *)(v3 + 824);
  *(__n128 *)(v4 + 808) = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 832 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x4EC4ED)
    {
      __break(0xC471u);
      JUMPOUT(0x196FA3BC8);
    }
    v3 = *(WTF **)a1;
    v4 = *(_QWORD *)a1 + 832 * *(unsigned int *)(a1 + 12);
    v5 = 832 * a2;
    v6 = WTF::fastMalloc((WTF *)(832 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFC0) / 0x340;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
}

void WTF::VectorMover<false,std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>>::move(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      WebKit::RemoteLayerTreeTransaction::RemoteLayerTreeTransaction(a3, v5);
      v7 = *(_QWORD *)(v5 + 800);
      *(_QWORD *)(v5 + 800) = 0;
      *(_QWORD *)(a3 + 800) = v7;
      v8 = *(_OWORD *)(v5 + 808);
      *(_QWORD *)(a3 + 824) = *(_QWORD *)(v5 + 824);
      *(_OWORD *)(a3 + 808) = v8;
      v9 = *(_QWORD *)(v5 + 800);
      *(_QWORD *)(v5 + 800) = 0;
      if (v9)
        WebCore::ScrollingStateTree::operator delete(v9, 0x50uLL);
      WebKit::RemoteLayerTreeTransaction::~RemoteLayerTreeTransaction((WebKit::RemoteLayerTreeTransaction *)v5, v6);
      a3 += 832;
      v5 += 832;
    }
    while (v5 != a2);
  }
}

WebKit::RemoteLayerTreeTransaction *std::__optional_destruct_base<std::pair<WebKit::RemoteLayerTreeTransaction,WebKit::RemoteScrollingCoordinatorTransaction>,false>::~__optional_destruct_base[abi:sn180100](WebKit::RemoteLayerTreeTransaction *this, void *a2)
{
  uint64_t v3;

  if (*((_BYTE *)this + 832))
  {
    v3 = *((_QWORD *)this + 100);
    *((_QWORD *)this + 100) = 0;
    if (v3)
      WebCore::ScrollingStateTree::operator delete(v3, 0x50uLL);
    WebKit::RemoteLayerTreeTransaction::~RemoteLayerTreeTransaction(this, a2);
  }
  return this;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, WTF **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF *v10;
  _QWORD *v11;
  _QWORD *result;
  uint64_t v13;
  WTF **v14;
  uint64_t v15;
  _QWORD *v16;
  WTF *v17;
  WTF *v18;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (WTF **)(v6 + 8);
    do
    {
      v15 = (uint64_t)*(v14 - 1);
      if (v15)
      {
        if (v15 != -1)
        {
          v16 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::lookupForReinsert(a1, v14 - 1);
          v17 = (WTF *)v16[1];
          v16[1] = 0;
          if (v17)
            std::default_delete<WebKit::BufferSetBackendHandle>::operator()[abi:sn180100]((_DWORD)v16 + 8, v17);
          *v16 = *(v14 - 1);
          v18 = *v14;
          *v14 = 0;
          v16[1] = v18;
          v10 = *v14;
          *v14 = 0;
          if (v10)
            std::default_delete<WebKit::BufferSetBackendHandle>::operator()[abi:sn180100]((int)v14, v10);
          if (v14 - 1 == a3)
            v11 = v16;
        }
      }
      else
      {
        v10 = *v14;
        *v14 = 0;
        if (v10)
          std::default_delete<WebKit::BufferSetBackendHandle>::operator()[abi:sn180100]((int)v14, v10);
      }
      v14 += 2;
      --v13;
    }
    while (v13);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::lookupForReinsert(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = *a2 + ~(*a2 << 32);
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~((_DWORD)v6 << 27)));
  v8 = 1;
  do
  {
    v9 = v7;
    v10 = *(_QWORD *)(v2 + 16 * v7);
    v7 = (v7 + v8++) & v3;
  }
  while (v10);
  return v2 + 16 * v9;
}

uint64_t WebKit::mayContainEditableElementsInRect(WebKit *this, UIView *a2, const WebCore::FloatRect *a3)
{
  char v3;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  void *v9;
  uint64_t v10;
  uint64_t *v11;
  char v12;
  void *v13;
  WebKit::RemoteLayerTreeNode *v14;
  CALayer *v15;
  uint64_t v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  int v21;
  char v22;
  CGRect v24;
  FloatRect v25;
  IntRect v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  v27 = &v29;
  v28 = 16;
  WebCore::FloatRect::operator CGRect();
  WebKit::collectDescendantViewsInRect((uint64_t)&v27, this, v5, v6, v7, v8);
  if (HIDWORD(v28))
  {
    v10 = HIDWORD(v28);
    v11 = v27 - 1;
    v12 = 1;
    while (1)
    {
      v13 = (void *)v11[v10];
      if (v13)
        CFRetain((CFTypeRef)v11[v10]);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0
        || (v14 = (WebKit::RemoteLayerTreeNode *)objc_msgSend(v13, "layer"),
            (v16 = WebKit::RemoteLayerTreeNode::forCALayer(v14, v15)) == 0))
      {
        v21 = 3;
        goto LABEL_10;
      }
      WebCore::FloatRect::operator CGRect();
      objc_msgSend(v13, "convertRect:fromView:", this);
      v24.origin.x = v17;
      v24.origin.y = v18;
      v24.size.width = v19;
      v24.size.height = v20;
      WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v25, &v24);
      WebCore::IntRect::IntRect((WebCore::IntRect *)&v26, &v25);
      if ((WebCore::EventRegion::containsEditableElementsInRect((WebCore::EventRegion *)(v16 + 56), (const WebCore::IntRect *)&v26) & 1) != 0)
      {
        v21 = 1;
        v3 = 1;
        goto LABEL_10;
      }
      if (*(_BYTE *)(v16 + 168))
      {
        WebCore::Region::Region((WebCore::Region *)&v24, &v26);
        v22 = WebCore::Region::contains((WebCore::Region *)(v16 + 56), (const WebCore::Region *)&v24);
        WebCore::Region::~Region((WebCore::Region *)&v24);
        if ((v22 & 1) != 0)
        {
          v3 = 0;
          v21 = 1;
          goto LABEL_10;
        }
        v12 = 0;
      }
      v21 = 0;
LABEL_10:
      if (v13)
        CFRelease(v13);
      if (v21 != 3 && v21)
      {
        v12 = v3;
        goto LABEL_23;
      }
      if (!(--v10 * 8))
        goto LABEL_23;
    }
  }
  v12 = 0;
LABEL_23:
  WTF::Vector<WTF::RetainPtr<UIView>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v9);
  return v12 & 1;
}

void sub_196FA4038(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v2;
  void *v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  WebCore::Region::~Region((WebCore::Region *)va);
  if (v2)
    CFRelease(v2);
  WTF::Vector<WTF::RetainPtr<UIView>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v4);
  _Unwind_Resume(a1);
}

uint64_t WebKit::collectDescendantViewsInRect(uint64_t a1, void *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  uint64_t result;
  void *v13;
  void **v14;
  uint64_t v15;
  void *v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  CGPoint origin;
  CGSize size;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  WebKit::RemoteLayerTreeNode *v27;
  CALayer *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  CFTypeRef v32;
  CFTypeRef v33;
  CFTypeRef v34;
  CGRect v35;
  CFTypeRef cf;
  void **v37;
  unsigned int v38;
  FloatRect v39;
  IntRect v40;
  _BYTE v41[24];
  CGRect v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;

  if (!objc_msgSend(a2, "clipsToBounds")
    || (objc_msgSend(a2, "bounds"),
        v45.origin.x = a3,
        v45.origin.y = a4,
        v45.size.width = a5,
        v45.size.height = a6,
        result = CGRectIntersectsRect(v42, v45),
        (_DWORD)result))
  {
    if (!objc_msgSend((id)objc_msgSend(a2, "layer"), "mask")
      || (result = objc_msgSend((id)objc_msgSend(a2, "layer"), "_web_maskMayIntersectRect:", a3, a4, a5, a6),
          (_DWORD)result))
    {
      WTF::makeVector<WTF::RetainPtr<UIView>>((uint64_t)&v37, (void *)objc_msgSend(a2, "subviews"));
      if (v38)
      {
        v14 = v37;
        v15 = 8 * v38;
        while (1)
        {
          v16 = *v14;
          cf = v16;
          if (v16)
          {
            CFRetain(v16);
            v16 = (void *)cf;
          }
          objc_msgSend(v16, "convertRect:fromView:", a2, a3, a4, a5, a6, 0, 0, 0, 0);
          v35.origin.x = v17;
          v35.origin.y = v18;
          v35.size.width = v19;
          v35.size.height = v20;
          if (objc_msgSend((id)cf, "isUserInteractionEnabled"))
          {
            objc_msgSend((id)cf, "frame");
            if (!CGRectIsEmpty(v43))
            {
              origin = v35.origin;
              size = v35.size;
              objc_msgSend((id)cf, "bounds");
              v46.origin.x = v23;
              v46.origin.y = v24;
              v46.size.width = v25;
              v46.size.height = v26;
              v44.origin = origin;
              v44.size = size;
              if (CGRectIntersectsRect(v44, v46))
              {
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0
                  || (v27 = (WebKit::RemoteLayerTreeNode *)objc_msgSend((id)cf, "layer"),
                      (v29 = WebKit::RemoteLayerTreeNode::forCALayer(v27, v28)) != 0)
                  && (WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v39, &v35),
                      WebCore::IntRect::IntRect((WebCore::IntRect *)&v40, &v39),
                      WebCore::Region::Region((WebCore::Region *)v41, &v40),
                      v30 = WebCore::Region::intersects((WebCore::Region *)(v29 + 56), (const WebCore::Region *)v41),
                      WebCore::Region::~Region((WebCore::Region *)v41),
                      v30))
                {
                  v31 = *(unsigned int *)(a1 + 12);
                  if ((_DWORD)v31 == *(_DWORD *)(a1 + 8))
                  {
                    WTF::Vector<WTF::RetainPtr<UIView>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::RetainPtr<UIView>&>(a1, (unint64_t)&cf);
                  }
                  else
                  {
                    v32 = cf;
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = cf;
                    if (v32)
                    {
                      CFRetain(v32);
                      LODWORD(v31) = *(_DWORD *)(a1 + 12);
                    }
                    *(_DWORD *)(a1 + 12) = v31 + 1;
                  }
                }
              }
            }
          }
          if (!objc_msgSend((id)cf, "subviews"))
            break;
          WebKit::collectDescendantViewsInRect(a1, cf, v35.origin.x, v35.origin.y, v35.size.width, v35.size.height);
          v33 = cf;
          cf = 0;
          if (v33)
            CFRelease(v33);
          ++v14;
          v15 -= 8;
          if (!v15)
            return WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, v13);
        }
        v34 = cf;
        cf = 0;
        if (v34)
          CFRelease(v34);
      }
      return WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, v13);
    }
  }
  return result;
}

void sub_196FA4304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  void *v21;

  WebCore::Region::~Region((WebCore::Region *)&a20);
  if (cf)
    CFRelease(cf);
  WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a14, v21);
  _Unwind_Resume(a1);
}

uint64_t WebKit::touchActionsForPoint(WebKit *this, UIView *a2, const WebCore::IntPoint *a3)
{
  double v4;
  double v5;
  void *v6;
  uint64_t v7;
  uint64_t *v8;
  void *v9;
  uint64_t v10;
  CGFloat v11;
  CGFloat v12;
  WebKit::RemoteLayerTreeNode *v13;
  CALayer *v14;
  uint64_t v15;
  _BYTE v17[8];
  CGPoint v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;

  v19 = &v21;
  v20 = 16;
  WebCore::IntPoint::operator CGPoint();
  WebKit::collectDescendantViewsAtPoint((uint64_t)&v19, this, 0, v4, v5);
  if (HIDWORD(v20))
  {
    v7 = HIDWORD(v20);
    v8 = v19 - 1;
    while (1)
    {
      v9 = (void *)v8[v7];
      if (v9)
        CFRetain((CFTypeRef)v8[v7]);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v10 = 1;
        if (!v9)
          goto LABEL_19;
        goto LABEL_18;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        break;
      if (v9)
        CFRelease(v9);
      if (!(--v7 * 8))
        goto LABEL_16;
    }
    if (!v9)
      goto LABEL_16;
    WebCore::IntPoint::operator CGPoint();
    objc_msgSend(v9, "convertPoint:fromView:", this);
    v18.x = v11;
    v18.y = v12;
    v13 = (WebKit::RemoteLayerTreeNode *)objc_msgSend(v9, "layer");
    v15 = WebKit::RemoteLayerTreeNode::forCALayer(v13, v14);
    if (v15)
    {
      WebCore::IntPoint::IntPoint((WebCore::IntPoint *)v17, &v18);
      v10 = WebCore::EventRegion::touchActionsForPoint((WebCore::EventRegion *)(v15 + 56), (const WebCore::IntPoint *)v17);
    }
    else
    {
      v10 = 1;
    }
LABEL_18:
    CFRelease(v9);
  }
  else
  {
LABEL_16:
    v10 = 1;
  }
LABEL_19:
  WTF::Vector<WTF::RetainPtr<UIView>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v6);
  return v10;
}

void sub_196FA44A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  const void *v13;
  void *v15;

  CFRelease(v13);
  WTF::Vector<WTF::RetainPtr<UIView>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v15);
  _Unwind_Resume(a1);
}

uint64_t WebKit::collectDescendantViewsAtPoint(uint64_t a1, void *a2, uint64_t a3, double a4, double a5)
{
  uint64_t result;
  void *v11;
  id *v12;
  uint64_t v13;
  id v14;
  CGFloat v15;
  CGFloat v16;
  void *v17;
  WebKit::RemoteLayerTreeNode *v18;
  CALayer *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  id v23;
  id v24;
  CATransform3D v25;
  _BYTE v26[128];
  CGPoint v27;
  id v28;
  id *v29;
  unsigned int v30;
  CGRect v31;

  if (!objc_msgSend(a2, "clipsToBounds")
    || (result = objc_msgSend(a2, "pointInside:withEvent:", a3, a4, a5), (_DWORD)result))
  {
    if (!objc_msgSend((id)objc_msgSend(a2, "layer"), "mask")
      || (result = objc_msgSend((id)objc_msgSend(a2, "layer"), "_web_maskContainsPoint:", a4, a5), (_DWORD)result))
    {
      WTF::makeVector<WTF::RetainPtr<UIView>>((uint64_t)&v29, (void *)objc_msgSend(a2, "subviews"));
      if (v30)
      {
        v12 = v29;
        v13 = 8 * v30;
        do
        {
          v28 = *v12;
          v14 = v28;
          if (v28)
          {
            CFRetain(v28);
            v14 = v28;
          }
          v27.x = 0.0;
          v27.y = 0.0;
          objc_msgSend(v14, "convertPoint:fromView:", a2, a4, a5, *(_OWORD *)&v25.m11, *(_OWORD *)&v25.m13, *(_OWORD *)&v25.m21, *(_OWORD *)&v25.m23, *(_OWORD *)&v25.m31, *(_OWORD *)&v25.m33, *(_OWORD *)&v25.m41, *(_OWORD *)&v25.m43);
          v27.x = v15;
          v27.y = v16;
          v17 = (void *)objc_msgSend(v28, "layer");
          if (v17)
            objc_msgSend(v17, "transform");
          else
            memset(&v25, 0, sizeof(v25));
          WebCore::TransformationMatrix::TransformationMatrix((WebCore::TransformationMatrix *)v26, &v25);
          if ((WebCore::TransformationMatrix::isInvertible((WebCore::TransformationMatrix *)v26) & 1) != 0)
          {
            if (objc_msgSend(v28, "isUserInteractionEnabled"))
            {
              objc_msgSend(v28, "frame");
              if (!CGRectIsEmpty(v31))
              {
                if (objc_msgSend(v28, "pointInside:withEvent:", a3, v27.x, v27.y))
                {
                  if ((objc_msgSend(v28, "conformsToProtocol:", &unk_1EE388840) & 1) != 0
                    || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0)
                    || (v18 = (WebKit::RemoteLayerTreeNode *)objc_msgSend(v28, "layer"),
                        (v20 = WebKit::RemoteLayerTreeNode::forCALayer(v18, v19)) != 0)
                    && (WebCore::IntPoint::IntPoint((WebCore::IntPoint *)&v25, &v27),
                        WebCore::Region::contains((WebCore::Region *)(v20 + 56), (const WebCore::IntPoint *)&v25)))
                  {
                    v21 = *(unsigned int *)(a1 + 12);
                    if ((_DWORD)v21 == *(_DWORD *)(a1 + 8))
                    {
                      WTF::Vector<WTF::RetainPtr<UIView>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::RetainPtr<UIView>&>(a1, (unint64_t)&v28);
                    }
                    else
                    {
                      v23 = v28;
                      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v28;
                      if (v23)
                      {
                        CFRetain(v23);
                        LODWORD(v21) = *(_DWORD *)(a1 + 12);
                      }
                      *(_DWORD *)(a1 + 12) = v21 + 1;
                    }
                  }
                }
              }
            }
            if (objc_msgSend(v28, "subviews", *(_OWORD *)&v25.m11, *(_OWORD *)&v25.m13, *(_OWORD *)&v25.m21, *(_OWORD *)&v25.m23, *(_OWORD *)&v25.m31, *(_OWORD *)&v25.m33, *(_OWORD *)&v25.m41, *(_OWORD *)&v25.m43))
            {
              WebKit::collectDescendantViewsAtPoint(a1, v28, a3, v27.x, v27.y);
              v22 = 0;
            }
            else
            {
              v22 = 1;
            }
          }
          else
          {
            v22 = 3;
          }
          v24 = v28;
          v28 = 0;
          if (v24)
            CFRelease(v24);
          if (v22 != 3 && v22)
            break;
          ++v12;
          v13 -= 8;
        }
        while (v13);
      }
      return WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v11);
    }
  }
  return result;
}

void sub_196FA4754(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 - 112, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::eventListenerTypesAtPoint(WebKit *this, UIView *a2, const WebCore::IntPoint *a3)
{
  double v4;
  double v5;
  void *v6;
  uint64_t v7;
  uint64_t *v8;
  void *v9;
  CGFloat v10;
  CGFloat v11;
  WebKit::RemoteLayerTreeNode *v12;
  CALayer *v13;
  uint64_t v14;
  _BYTE v16[8];
  CGPoint v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  v18 = &v20;
  v19 = 16;
  WebCore::IntPoint::operator CGPoint();
  WebKit::collectDescendantViewsAtPoint((uint64_t)&v18, this, 0, v4, v5);
  if (!HIDWORD(v19))
    goto LABEL_14;
  v7 = HIDWORD(v19);
  v8 = v18 - 1;
  while (1)
  {
    v9 = (void *)v8[v7];
    if (v9)
      CFRetain((CFTypeRef)v8[v7]);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      break;
    if (v9)
      CFRelease(v9);
    if (!(--v7 * 8))
      goto LABEL_14;
  }
  if (v9)
  {
    WebCore::IntPoint::operator CGPoint();
    objc_msgSend(v9, "convertPoint:fromView:", this);
    v17.x = v10;
    v17.y = v11;
    v12 = (WebKit::RemoteLayerTreeNode *)objc_msgSend(v9, "layer");
    v14 = WebKit::RemoteLayerTreeNode::forCALayer(v12, v13);
    if (v14)
    {
      WebCore::IntPoint::IntPoint((WebCore::IntPoint *)v16, &v17);
      v14 = WebCore::EventRegion::eventListenerRegionTypesForPoint((WebCore::EventRegion *)(v14 + 56), (const WebCore::IntPoint *)v16);
    }
    CFRelease(v9);
  }
  else
  {
LABEL_14:
    v14 = 0;
  }
  WTF::Vector<WTF::RetainPtr<UIView>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v6);
  return v14;
}

void sub_196FA48B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  const void *v13;
  void *v15;

  CFRelease(v13);
  WTF::Vector<WTF::RetainPtr<UIView>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v15);
  _Unwind_Resume(a1);
}

uint64_t WebKit::findActingScrollParent(WebKit *this, UIScrollView *a2, const WebKit::RemoteLayerTreeHost *a3)
{
  void *v4;
  void *v5;
  uint64_t *p_layeringSceneIdentity;
  WebKit::RemoteLayerTreeNode *v7;
  CALayer *v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v16;
  uint64_t *v17;
  WebKit::RemoteLayerTreeNode *v19;
  CALayer *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;
  __int128 v30;
  unsigned int v31;
  __int16 v32;
  char v33;

  v29 = 0;
  v5 = (void *)-[WebKit superview](this, "superview", a3);
  p_layeringSceneIdentity = (uint64_t *)&a2->super.super.__layeringSceneIdentity;
  while (v5)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v7 = (WebKit::RemoteLayerTreeNode *)objc_msgSend(v5, "layer");
      *(_QWORD *)&v30 = WebKit::RemoteLayerTreeNode::layerID(v7, v8);
      *((_QWORD *)&v30 + 1) = v4;
      v9 = v29;
      if (!v29)
        break;
      v10 = *(_DWORD *)(v29 - 8);
      v31 = -1640531527;
      v32 = 0;
      v33 = 0;
      WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v31, &v30);
      v11 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v31) & v10;
      v12 = (uint64_t *)(v9 + 16 * v11);
      v13 = *v12;
      v14 = v12[1];
      if (*v12 != (_QWORD)v30 || v14 != *((_QWORD *)&v30 + 1))
      {
        v16 = 1;
        while (v13 | v14)
        {
          v11 = (v11 + v16) & v10;
          v17 = (uint64_t *)(v9 + 16 * v11);
          v13 = *v17;
          v14 = v17[1];
          ++v16;
          if (v13 == (_QWORD)v30 && v14 == *((_QWORD *)&v30 + 1))
            goto LABEL_16;
        }
        break;
      }
    }
LABEL_16:
    v19 = (WebKit::RemoteLayerTreeNode *)objc_msgSend(v5, "layer");
    v21 = WebKit::RemoteLayerTreeNode::forCALayer(v19, v20);
    v22 = v21;
    if (v21)
    {
      v30 = *(_OWORD *)(v21 + 176);
      if ((_QWORD)v30)
      {
        v23 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(p_layeringSceneIdentity, &v30);
        if (v23)
        {
          v24 = *(_QWORD *)(v23 + 48);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & (v24 != 0)) != 0)
            goto LABEL_25;
        }
      }
      v25 = *(unsigned int *)(v22 + 204);
      if ((_DWORD)v25)
      {
        v26 = *(_QWORD **)(v22 + 192);
        v27 = 16 * v25;
        do
        {
          WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::add(&v29, v26, (uint64_t)&v30);
          v26 += 2;
          v27 -= 16;
        }
        while (v27);
      }
    }
    v5 = (void *)objc_msgSend(v5, "superview");
  }
  v24 = 0;
LABEL_25:
  if (v29)
    WTF::fastFree((WTF *)(v29 - 16), v4);
  return v24;
}

void sub_196FA4AA0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    WTF::fastFree((WTF *)(a10 - 16), a2);
  _Unwind_Resume(exception_object);
}

void sub_196FA4CCC(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WTF::Vector<WTF::RetainPtr<UIView>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::isScrolledBy(WKChildScrollView *this, WKChildScrollView *a2, UIView *a3)
{
  WebKit::RemoteLayerTreeNode *v5;
  CALayer *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  WebKit::RemoteLayerTreeNode *v12;
  CALayer *v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD *v17;
  int v19;

  v5 = (WebKit::RemoteLayerTreeNode *)-[WKChildScrollView layer](this, "layer", a3);
  v7 = WebKit::RemoteLayerTreeNode::layerID(v5, v6);
  if (!a2)
  {
    v19 = 0;
    return v19 & v9;
  }
  v10 = v7;
  v11 = v8;
  while (1)
  {
    if (a2 == this)
    {
LABEL_21:
      v19 = 1;
      goto LABEL_22;
    }
    v12 = (WebKit::RemoteLayerTreeNode *)-[WKChildScrollView layer](a2, "layer");
    v14 = WebKit::RemoteLayerTreeNode::forCALayer(v12, v13);
    if (v14)
    {
      if (v10)
      {
        if (*(_QWORD *)(v14 + 176) == v10 && *(_QWORD *)(v14 + 184) == v11)
          goto LABEL_21;
        v16 = *(unsigned int *)(v14 + 204);
        if ((_DWORD)v16)
          break;
      }
    }
LABEL_17:
    a2 = (WKChildScrollView *)-[WKChildScrollView superview](a2, "superview");
    if (!a2)
    {
      v19 = 0;
LABEL_22:
      v9 = 1;
      return v19 & v9;
    }
  }
  v17 = (_QWORD *)(*(_QWORD *)(v14 + 192) + 8);
  while (*(v17 - 1) != v10 || *v17 != v11)
  {
    v17 += 2;
    if (!--v16)
      goto LABEL_17;
  }
  v9 = 0;
  v19 = 1;
  return v19 & v9;
}

void WTF::makeVector<WTF::RetainPtr<UIView>>(uint64_t a1, void *a2)
{
  unint64_t v4;
  int v5;
  WTF *v6;
  void *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t i;
  const void *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  CFTypeRef v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  CFTypeRef cf;
  unsigned __int8 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = objc_msgSend(a2, "count");
  v5 = v4;
  if (v4)
  {
    if (v4 >> 29)
    {
      __break(0xC471u);
      goto LABEL_37;
    }
    v6 = (WTF *)WTF::fastMalloc((WTF *)(8 * v4));
    *(_DWORD *)(a1 + 8) = v5;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    v6 = 0;
  }
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v8 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
  if (!v8)
  {
    if (v5)
      goto LABEL_30;
    return;
  }
  v9 = 0;
  v10 = *(_QWORD *)v24;
  do
  {
    for (i = 0; i != v8; ++i)
    {
      if (*(_QWORD *)v24 != v10)
        objc_enumerationMutation(a2);
      v12 = *(const void **)(*((_QWORD *)&v23 + 1) + 8 * i);
      if (v12)
        CFRetain(*(CFTypeRef *)(*((_QWORD *)&v23 + 1) + 8 * i));
      cf = v12;
      v22 = 1;
      if (v9 == *(_DWORD *)(a1 + 8))
      {
        v13 = (uint64_t *)WTF::Vector<WTF::RetainPtr<WKUserDefaults>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v9 + 1, (unint64_t)&cf);
        v14 = *(unsigned int *)(a1 + 12);
        v6 = *(WTF **)a1;
        v15 = *v13;
        *v13 = 0;
        *((_QWORD *)v6 + v14) = v15;
        LODWORD(v15) = v22;
        v9 = v14 + 1;
        *(_DWORD *)(a1 + 12) = v14 + 1;
        if (!(_DWORD)v15)
          continue;
      }
      else
      {
        cf = 0;
        *((_QWORD *)v6 + v9++) = v12;
        *(_DWORD *)(a1 + 12) = v9;
      }
      v16 = cf;
      cf = 0;
      if (v16)
        CFRelease(v16);
    }
    v8 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
  }
  while (v8);
  if (*(_DWORD *)(a1 + 8) <= v9)
    return;
  if (!v9)
    goto LABEL_31;
  if (v9 >> 29)
  {
    __break(0xC471u);
LABEL_37:
    JUMPOUT(0x196FA5228);
  }
  v17 = WTF::fastMalloc((WTF *)(8 * v9));
  *(_DWORD *)(a1 + 8) = v9;
  *(_QWORD *)a1 = v17;
  if ((WTF *)v17 == v6)
    goto LABEL_31;
  v18 = 0;
  do
  {
    v19 = *(_QWORD *)((char *)v6 + v18);
    *(_QWORD *)((char *)v6 + v18) = 0;
    *(_QWORD *)(v17 + v18) = v19;
    v20 = *(const void **)((char *)v6 + v18);
    *(_QWORD *)((char *)v6 + v18) = 0;
    if (v20)
      CFRelease(v20);
    v18 += 8;
  }
  while (8 * v9 != v18);
LABEL_30:
  if (v6)
  {
LABEL_31:
    if (*(WTF **)a1 == v6)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
    }
    WTF::fastFree(v6, v7);
  }
}

void sub_196FA5234(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, char a10)
{
  uint64_t v10;

  WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v10, a2);
  _Unwind_Resume(a1);
}

CFTypeRef WTF::Vector<WTF::RetainPtr<UIView>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::RetainPtr<UIView>&>(uint64_t a1, unint64_t a2)
{
  CFTypeRef *v3;
  uint64_t v4;
  CFTypeRef result;

  v3 = (CFTypeRef *)WTF::Vector<WTF::RetainPtr<UIView>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  result = *v3;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = result;
  if (result)
  {
    result = CFRetain(result);
    LODWORD(v4) = *(_DWORD *)(a1 + 12);
  }
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

unint64_t WTF::Vector<WTF::RetainPtr<UIView>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::RetainPtr<UIView>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::RetainPtr<UIView>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<WTF::RetainPtr<UIView>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  WTF *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  WTF *v8;
  const void *v9;
  const void *v10;

  if (*(unsigned int *)(a1 + 8) >= a2)
    return;
  v2 = a2;
  v4 = *(WTF **)a1;
  v5 = *(unsigned int *)(a1 + 12);
  if (a2 >= 0x11)
  {
    if (a2 >> 29)
    {
      __break(0xC471u);
      return;
    }
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(_QWORD *)a1 = v6;
    if (!(_DWORD)v5)
      goto LABEL_11;
    goto LABEL_7;
  }
  v6 = (_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_DWORD *)(a1 + 8) = 16;
  if ((_DWORD)v5)
  {
LABEL_7:
    v7 = 8 * v5;
    v8 = v4;
    do
    {
      v9 = *(const void **)v8;
      *(_QWORD *)v8 = 0;
      *v6 = v9;
      v10 = *(const void **)v8;
      *(_QWORD *)v8 = 0;
      if (v10)
        CFRelease(v10);
      ++v6;
      v8 = (WTF *)((char *)v8 + 8);
      v7 -= 8;
    }
    while (v7);
  }
LABEL_11:
  if ((WTF *)(a1 + 16) != v4 && v4)
  {
    if (*(WTF **)a1 == v4)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
    }
    WTF::fastFree(v4, (void *)a2);
  }
}

Class ___ZN6WebKitL30scrollViewScrollIndicatorClassEv_block_invoke()
{
  Class result;

  result = NSClassFromString(CFSTR("_UIScrollViewScrollIndicator"));
  qword_1ECE72100 = (uint64_t)result;
  return result;
}

uint64_t WTF::Vector<WTF::RetainPtr<UIView>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  const void **v4;
  uint64_t v5;
  const void *v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(const void ***)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
        CFRelease(v6);
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (a1 + 16 != *(_QWORD *)a1 && v7 != 0)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::add@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t result;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  __int16 v26;
  char v27;

  v6 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a1, 0), (v6 = *a1) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v25 = -1640531527;
  v26 = 0;
  v27 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v25, a2);
  result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v25);
  v9 = result & v7;
  v10 = (_QWORD *)(v6 + 16 * (result & v7));
  v12 = *v10;
  v11 = v10[1];
  if (*(_OWORD *)v10 != 0)
  {
    v13 = 0;
    v14 = 1;
    do
    {
      if (v12 == *a2 && v11 == a2[1])
      {
        v21 = *a1;
        if (*a1)
          v22 = *(unsigned int *)(v21 - 4);
        else
          v22 = 0;
        v24 = 0;
        v23 = v21 + 16 * v22;
        goto LABEL_30;
      }
      if (v11 == -1)
        v13 = v10;
      v9 = (v9 + v14) & v7;
      v10 = (_QWORD *)(v6 + 16 * v9);
      v12 = *v10;
      v11 = v10[1];
      ++v14;
    }
    while (*(_OWORD *)v10 != 0);
    if (v13)
    {
      *v13 = 0;
      v13[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v10 = v13;
    }
  }
  *(_OWORD *)v10 = *(_OWORD *)a2;
  v15 = *a1;
  if (*a1)
    v16 = *(_DWORD *)(v15 - 12) + 1;
  else
    v16 = 1;
  *(_DWORD *)(v15 - 12) = v16;
  v17 = *a1;
  if (*a1)
    v18 = *(_DWORD *)(v17 - 12);
  else
    v18 = 0;
  v19 = (*(_DWORD *)(v17 - 16) + v18);
  v20 = *(unsigned int *)(v17 - 4);
  if (v20 > 0x400)
  {
    if (v20 <= 2 * v19)
    {
LABEL_21:
      result = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a1, v10);
      v10 = (_QWORD *)result;
      v17 = *a1;
      if (*a1)
        v20 = *(unsigned int *)(v17 - 4);
      else
        v20 = 0;
    }
  }
  else if (3 * v20 <= 4 * v19)
  {
    goto LABEL_21;
  }
  v23 = v17 + 16 * v20;
  v24 = 1;
LABEL_30:
  *(_QWORD *)a3 = v10;
  *(_QWORD *)(a3 + 8) = v23;
  *(_BYTE *)(a3 + 16) = v24;
  return result;
}

void WebKit::RemoteLegacyCDMFactoryProxy::didReceiveMessage(WebKit::RemoteLegacyCDMFactoryProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  unint64_t v4;
  char v5;

  if (*((_WORD *)a3 + 25) == 1110)
  {
    v4 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
    if (v5)
      WebKit::RemoteLegacyCDMFactoryProxy::removeSession((uint64_t)this, v4);
  }
}

uint64_t *WebKit::RemoteLegacyCDMFactoryProxy::didReceiveSyncMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  int v4;

  v4 = *(unsigned __int16 *)(a3 + 50);
  if (v4 == 3624)
    return (uint64_t *)IPC::handleMessageSynchronous<Messages::RemoteLegacyCDMFactoryProxy::SupportsKeySystem,WebKit::RemoteLegacyCDMFactoryProxy,WebKit::RemoteLegacyCDMFactoryProxy,void ()(WTF::String const&,std::optional<WTF::String>,WTF::CompletionHandler<void ()(BOOL)> &&)>(a2, (uint64_t *)a3, a4, a1, (uint64_t (*)(_QWORD *, uint64_t, WTF::StringImpl **, uint64_t))WebKit::RemoteLegacyCDMFactoryProxy::supportsKeySystem, 0);
  if (v4 == 3623)
    return IPC::handleMessageSynchronous<Messages::RemoteLegacyCDMFactoryProxy::CreateCDM,WebKit::RemoteLegacyCDMFactoryProxy,WebKit::RemoteLegacyCDMFactoryProxy,void ()(WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> &&,WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> &&)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, WTF::StringImpl **, __int128 *, WTF::StringImpl **))WebKit::RemoteLegacyCDMFactoryProxy::createCDM, 0);
  return 0;
}

uint64_t *IPC::handleMessageSynchronous<Messages::RemoteLegacyCDMFactoryProxy::CreateCDM,WebKit::RemoteLegacyCDMFactoryProxy,WebKit::RemoteLegacyCDMFactoryProxy,void ()(WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> &&,WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, WTF::StringImpl **, __int128 *, WTF::StringImpl **), uint64_t a6)
{
  uint64_t *result;
  WTF::StringImpl *v13;
  IPC::Encoder *v14;
  uint64_t v15;
  IPC::Encoder *v16;
  void *v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  _QWORD *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  __int128 v29;
  char v30;
  WTF::StringImpl *v31;
  char v32;
  IPC::Encoder *v33[2];
  char v34;

  IPC::Decoder::decode<WTF::String>(a2, &v31);
  if (v32)
  {
    result = IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, v33);
    if (v34)
    {
      if (v32)
      {
        v28 = v31;
        v29 = *(_OWORD *)v33;
        v30 = 1;
        v14 = *a3;
        *a3 = 0;
        v33[0] = v14;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v33[1], a1);
        v15 = WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v15 = off_1E34B3798;
        *(IPC::Encoder **)(v15 + 8) = v33[0];
        v16 = v33[1];
        v33[0] = 0;
        v33[1] = 0;
        *(_QWORD *)(v15 + 16) = v16;
        v31 = (WTF::StringImpl *)v15;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v33[1]);
        v18 = v33[0];
        v33[0] = 0;
        if (v18)
        {
          IPC::Encoder::~Encoder(v18, v17);
          WTF::fastFree(v19, v20);
        }
        v21 = (_QWORD *)(a4 + (a6 >> 1));
        if ((a6 & 1) != 0)
          a5 = *(void (**)(_QWORD *, WTF::StringImpl **, __int128 *, WTF::StringImpl **))(*v21 + a5);
        a5(v21, &v28, &v29, &v31);
        v23 = v31;
        v31 = 0;
        if (v23)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v23 + 8))(v23);
        if (v30)
        {
          v24 = v28;
          v28 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v22);
            else
              *(_DWORD *)v24 -= 2;
          }
        }
        return (uint64_t *)1;
      }
      else
      {
        __break(1u);
      }
      return result;
    }
    if (v32)
    {
      v25 = v31;
      v31 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v13);
        else
          *(_DWORD *)v25 -= 2;
      }
    }
  }
  v26 = *a2;
  v27 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (uint64_t *)a2[3];
  if (result)
  {
    if (v27)
      (*(void (**)(uint64_t *, uint64_t))(*result + 16))(result, v26);
    return 0;
  }
  return result;
}

BOOL IPC::handleMessageSynchronous<Messages::RemoteLegacyCDMFactoryProxy::SupportsKeySystem,WebKit::RemoteLegacyCDMFactoryProxy,WebKit::RemoteLegacyCDMFactoryProxy,void ()(WTF::String const&,std::optional<WTF::String>,WTF::CompletionHandler<void ()(BOOL)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, uint64_t (*a5)(_QWORD *, uint64_t, WTF::StringImpl **, uint64_t), uint64_t a6)
{
  WTF::StringImpl *v11;
  int v12;
  IPC::Encoder *v13;
  _QWORD *v14;
  unsigned __int8 **v15;
  _BOOL8 result;
  _QWORD *v17;
  IPC::Encoder *v18;
  unsigned __int8 **v19[2];
  _QWORD *v20;
  _BYTE v21[24];
  unsigned __int8 v22;

  IPC::Decoder::decode<std::tuple<WTF::String,std::optional<WTF::String>>>(a2, v21);
  v12 = v22;
  if (!v22)
    goto LABEL_5;
  v13 = *a3;
  *a3 = 0;
  v18 = v13;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v19, a1);
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v14 = off_1E34B37C0;
  v14[1] = v18;
  v15 = v19[0];
  v19[0] = 0;
  v14[2] = v15;
  v20 = v14;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v19);
  result = 0;
  if (v22)
  {
    IPC::callMemberFunction<WebKit::RemoteLegacyCDMFactoryProxy,WebKit::RemoteLegacyCDMFactoryProxy,void ()(WTF::String const&,std::optional<WTF::String>,WTF::CompletionHandler<void ()(BOOL)> &&),std::tuple<WTF::String,std::optional<WTF::String>>,void ()(BOOL)>(a4, a5, a6, (uint64_t)v21, (uint64_t)&v20);
    v17 = v20;
    v20 = 0;
    if (v17)
      (*(void (**)(_QWORD *))(*v17 + 8))(v17);
LABEL_5:
    std::__optional_destruct_base<std::tuple<WTF::String,std::optional<WTF::String>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v21, v11);
    return v12 != 0;
  }
  __break(1u);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteLegacyCDMFactoryProxy9CreateCDMEN6WebKit27RemoteLegacyCDMFactoryProxyES8_FvRKNS_6StringEONSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore25MediaPlayerIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvONSE_INS7_29RemoteLegacyCDMIdentifierTypeESI_yEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3798;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteLegacyCDMFactoryProxy9CreateCDMEN6WebKit27RemoteLegacyCDMFactoryProxyES8_FvRKNS_6StringEONSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore25MediaPlayerIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvONSE_INS7_29RemoteLegacyCDMIdentifierTypeESI_yEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B3798;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteLegacyCDMFactoryProxy9CreateCDMEN6WebKit27RemoteLegacyCDMFactoryProxyES8_FvRKNS_6StringEONSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore25MediaPlayerIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvONSE_INS7_29RemoteLegacyCDMIdentifierTypeESI_yEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(*(IPC::Encoder **)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WTF::String,std::optional<WTF::String>>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::String,std::optional<WTF::String>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[24])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WTF::StringImpl *IPC::callMemberFunction<WebKit::RemoteLegacyCDMFactoryProxy,WebKit::RemoteLegacyCDMFactoryProxy,void ()(WTF::String const&,std::optional<WTF::String>,WTF::CompletionHandler<void ()(BOOL)> &&),std::tuple<WTF::String,std::optional<WTF::String>>,void ()(BOOL)>(uint64_t a1, uint64_t (*a2)(_QWORD *, uint64_t, WTF::StringImpl **, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v5)(_QWORD *, uint64_t, WTF::StringImpl **, uint64_t);
  _QWORD *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  char v11;

  v5 = a2;
  v6 = (_QWORD *)(a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *, uint64_t, WTF::StringImpl **, uint64_t))(*v6 + a2);
  LOBYTE(v10) = 0;
  v11 = 0;
  if (*(_BYTE *)(a4 + 16))
  {
    v7 = *(WTF::StringImpl **)(a4 + 8);
    *(_QWORD *)(a4 + 8) = 0;
    v10 = v7;
    v11 = 1;
  }
  result = (WTF::StringImpl *)v5(v6, a4, &v10, a5);
  if (v11)
  {
    result = v10;
    v10 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WTF::String,std::optional<WTF::String>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;

  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v6);
  if (v7)
  {
    result = (WTF::StringImpl *)IPC::ArgumentCoder<std::tuple<WTF::String,std::optional<WTF::String>>,void>::decode<IPC::Decoder,WTF::String>(a1, (uint64_t *)&v6, a2);
    if (v7)
    {
      result = v6;
      v6 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[24] = 0;
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::tuple<WTF::String,std::optional<WTF::String>>,void>::decode<IPC::Decoder,WTF::String>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t *result;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;

  result = IPC::Decoder::decode<std::optional<WTF::String>>(a1, (uint64_t)&v8);
  v6 = v10;
  if (!v10)
  {
    *a3 = 0;
LABEL_6:
    a3[24] = v6;
    return result;
  }
  if (*((_BYTE *)a2 + 8))
  {
    v7 = *a2;
    *a2 = 0;
    *(_QWORD *)a3 = v7;
    a3[8] = 0;
    a3[16] = 0;
    v6 = 1;
    if (v9)
    {
      *((_QWORD *)a3 + 1) = v8;
      a3[16] = 1;
    }
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteLegacyCDMFactoryProxy17SupportsKeySystemEN6WebKit27RemoteLegacyCDMFactoryProxyES8_FvRKNS_6StringENSt3__18optionalIS9_EEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B37C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteLegacyCDMFactoryProxy17SupportsKeySystemEN6WebKit27RemoteLegacyCDMFactoryProxyES8_FvRKNS_6StringENSt3__18optionalIS9_EEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B37C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteLegacyCDMFactoryProxy17SupportsKeySystemEN6WebKit27RemoteLegacyCDMFactoryProxyES8_FvRKNS_6StringENSt3__18optionalIS9_EEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  char *result;
  unint64_t v13;
  size_t v14;
  void *v15;

  v4 = (uint64_t *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 >= v6 + 1)
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
LABEL_3:
    bzero(&v9[v10], v6 - v10);
    *(_QWORD *)(v5 + 544) = v7;
    v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
    *(_QWORD *)(v5 + 536) = v11 + 1;
    *v11 = a2;
    return (char *)IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), v4, 0, 0);
  }
  v13 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v14 = v13;
    v13 *= 2;
  }
  while (v14 < v7);
  result = (char *)mmap(0, v14, 3, 4098, -1, 0);
  if (result != (char *)-1)
  {
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v15 = *(void **)(v5 + 528);
    if (v15 != (void *)(v5 + 16))
      munmap(v15, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v14;
    v10 = *(_QWORD *)(v5 + 544);
    goto LABEL_3;
  }
  __break(0xC471u);
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::String,std::optional<WTF::String>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 24))
  {
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 8, a2);
    v4 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t *WebKit::RemoteLegacyCDMProxy::didReceiveMessage(uint64_t *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;

  if (*((_WORD *)a3 + 25) == 1111)
  {
    v3 = (uint64_t)this;
    this = IPC::Decoder::decode<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t *)a3, (uint64_t)&v4);
    if (v6)
    {
      if (v5)
      {
        *(_QWORD *)(v3 + 32) = v4;
      }
      else
      {
        *(_QWORD *)(v3 + 32) = 0;
        __break(1u);
      }
    }
  }
  return this;
}

uint64_t WebKit::RemoteLegacyCDMProxy::didReceiveSyncMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, WTF::StringImpl **a4)
{
  int v4;

  v4 = *(unsigned __int16 *)(a3 + 50);
  if (v4 == 3625)
    return IPC::handleMessageSynchronous<Messages::RemoteLegacyCDMProxy::CreateSession,WebKit::RemoteLegacyCDMProxy,WebKit::RemoteLegacyCDMProxy,void ()(WTF::String const&,unsigned long long,WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> &&)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, WTF::StringImpl **, WTF::StringImpl *, _QWORD **))WebKit::RemoteLegacyCDMProxy::createSession, 0);
  if (v4 == 3626)
    return IPC::handleMessageSynchronous<Messages::RemoteLegacyCDMProxy::SupportsMIMEType,WebKit::RemoteLegacyCDMProxy,WebKit::RemoteLegacyCDMProxy,void ()(WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, WTF::StringImpl **, _QWORD **))WebKit::RemoteLegacyCDMProxy::supportsMIMEType, 0);
  return 0;
}

BOOL IPC::handleMessageSynchronous<Messages::RemoteLegacyCDMProxy::SupportsMIMEType,WebKit::RemoteLegacyCDMProxy,WebKit::RemoteLegacyCDMProxy,void ()(WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, WTF::StringImpl **, _QWORD **), uint64_t a6)
{
  int v11;
  IPC::Encoder *v12;
  _QWORD *v13;
  unsigned __int8 **v14;
  _BOOL8 result;
  _QWORD *v16;
  WTF::StringImpl *v17;
  _QWORD *v18;
  WTF::StringImpl *v19;
  IPC::Encoder *v20;
  unsigned __int8 **v21[2];
  _QWORD *v22;
  WTF::StringImpl *v23;
  unsigned __int8 v24;

  IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v23);
  v11 = v24;
  if (!v24)
    return v11 != 0;
  v12 = *a3;
  *a3 = 0;
  v20 = v12;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v21, a1);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = off_1E34B37E8;
  v13[1] = v20;
  v14 = v21[0];
  v21[0] = 0;
  v13[2] = v14;
  v22 = v13;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v21);
  result = 0;
  if (v24)
  {
    v16 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, WTF::StringImpl **, _QWORD **))(*v16 + a5);
    a5(v16, &v23, &v22);
    v18 = v22;
    v22 = 0;
    if (v18)
      (*(void (**)(_QWORD *))(*v18 + 8))(v18);
    if (v24)
    {
      v19 = v23;
      v23 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v17);
        else
          *(_DWORD *)v19 -= 2;
      }
    }
    return v11 != 0;
  }
  __break(1u);
  return result;
}

uint64_t IPC::handleMessageSynchronous<Messages::RemoteLegacyCDMProxy::CreateSession,WebKit::RemoteLegacyCDMProxy,WebKit::RemoteLegacyCDMProxy,void ()(WTF::String const&,unsigned long long,WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::RemoteLegacyCDMSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, WTF::StringImpl **a3, uint64_t a4, void (*a5)(_QWORD *, WTF::StringImpl **, WTF::StringImpl *, _QWORD **), uint64_t a6)
{
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  _QWORD *v19;
  unsigned __int8 **v20;
  void *v21;
  IPC::Encoder *v22;
  WTF *v23;
  void *v24;
  _QWORD *v25;
  WTF::StringImpl *v26;
  _QWORD *v27;
  WTF::StringImpl *v28;
  uint64_t result;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  WTF::StringImpl *v38[2];
  char v39;
  WTF::StringImpl *v40;
  unsigned __int8 **v41;

  IPC::Decoder::decode<WTF::String>(a2, &v40);
  if (!(_BYTE)v41)
  {
LABEL_27:
    v35 = *a2;
    v36 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
    {
      if (v36)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v35);
      return 0;
    }
    return result;
  }
  v12 = a2[1];
  v13 = *a2;
  v14 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v12 < v14 || v12 - v14 <= 7)
  {
    v30 = 0;
    v31 = 0;
    *a2 = 0;
    a2[1] = 0;
    v32 = a2[3];
    if (v32)
    {
      if (v12)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v32 + 16))(v32, v13, v12);
        v31 = (WTF::StringImpl *)*a2;
        v30 = a2[1];
      }
      else
      {
        v30 = 0;
        v31 = 0;
      }
    }
    goto LABEL_21;
  }
  v16 = (WTF::StringImpl **)(v13 + v14);
  a2[2] = (uint64_t)(v16 + 1);
  if (!v13)
  {
    v30 = v12;
    v31 = 0;
LABEL_21:
    *a2 = 0;
    a2[1] = 0;
    v33 = a2[3];
    if (v33 && v30)
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v33 + 16))(v33, v31);
    if ((_BYTE)v41)
    {
      v34 = v40;
      v40 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, v31);
        else
          *(_DWORD *)v34 -= 2;
      }
    }
    goto LABEL_27;
  }
  v17 = *v16;
  v38[0] = v40;
  v38[1] = v17;
  v39 = 1;
  v18 = *a3;
  *a3 = 0;
  v40 = v18;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v41, a1);
  v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v19 = off_1E34B3810;
  v19[1] = v40;
  v20 = v41;
  v40 = 0;
  v41 = 0;
  v19[2] = v20;
  v37 = v19;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v41);
  v22 = v40;
  v40 = 0;
  if (v22)
  {
    IPC::Encoder::~Encoder(v22, v21);
    WTF::fastFree(v23, v24);
  }
  v25 = (_QWORD *)(a4 + (a6 >> 1));
  if ((a6 & 1) != 0)
    a5 = *(void (**)(_QWORD *, WTF::StringImpl **, WTF::StringImpl *, _QWORD **))(*v25 + a5);
  a5(v25, v38, v17, &v37);
  v27 = v37;
  v37 = 0;
  if (v27)
    (*(void (**)(_QWORD *))(*v27 + 8))(v27);
  if (v39)
  {
    v28 = v38[0];
    v38[0] = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v26);
      else
        *(_DWORD *)v28 -= 2;
    }
  }
  return 1;
}

uint64_t *IPC::Decoder::decode<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  __int128 v8;
  char v9;

  result = IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, &v8);
  if (v9)
  {
    *(_OWORD *)a2 = v8;
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages20RemoteLegacyCDMProxy16SupportsMIMETypeEN6WebKit20RemoteLegacyCDMProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B37E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages20RemoteLegacyCDMProxy16SupportsMIMETypeEN6WebKit20RemoteLegacyCDMProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B37E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages20RemoteLegacyCDMProxy16SupportsMIMETypeEN6WebKit20RemoteLegacyCDMProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  char *result;
  unint64_t v13;
  size_t v14;
  void *v15;

  v4 = (uint64_t *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 >= v6 + 1)
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
LABEL_3:
    bzero(&v9[v10], v6 - v10);
    *(_QWORD *)(v5 + 544) = v7;
    v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
    *(_QWORD *)(v5 + 536) = v11 + 1;
    *v11 = a2;
    return (char *)IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), v4, 0, 0);
  }
  v13 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v14 = v13;
    v13 *= 2;
  }
  while (v14 < v7);
  result = (char *)mmap(0, v14, 3, 4098, -1, 0);
  if (result != (char *)-1)
  {
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v15 = *(void **)(v5 + 528);
    if (v15 != (void *)(v5 + 16))
      munmap(v15, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v14;
    v10 = *(_QWORD *)(v5 + 544);
    goto LABEL_3;
  }
  __break(0xC471u);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages20RemoteLegacyCDMProxy13CreateSessionEN6WebKit20RemoteLegacyCDMProxyES8_FvRKNS_6StringEyONS_17CompletionHandlerIFvONS_23ObjectIdentifierGenericINS7_36RemoteLegacyCDMSessionIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3810;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages20RemoteLegacyCDMProxy13CreateSessionEN6WebKit20RemoteLegacyCDMProxyES8_FvRKNS_6StringEyONS_17CompletionHandlerIFvONS_23ObjectIdentifierGenericINS7_36RemoteLegacyCDMSessionIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B3810;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages20RemoteLegacyCDMProxy13CreateSessionEN6WebKit20RemoteLegacyCDMProxyES8_FvRKNS_6StringEyONS_17CompletionHandlerIFvONS_23ObjectIdentifierGenericINS7_36RemoteLegacyCDMSessionIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(*(IPC::Encoder **)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

unint64_t WebKit::RemoteLegacyCDMSession::didReceiveMessage(unint64_t this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v3;
  int v4;
  WTF::StringImpl *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  WTF::DeferrableRefCountedBase *v9;
  WTF::StringImpl *v10;
  char v11;

  v3 = this;
  v4 = *((unsigned __int16 *)a3 + 25);
  if (v4 == 1113)
  {
    this = IPC::Decoder::decode<std::tuple<unsigned short,unsigned int>>((uint64_t *)a3);
    if (v6)
    {
      v7 = *(_QWORD *)(v3 + 40);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 8);
        if (v8)
          return (*(uint64_t (**)(uint64_t, _QWORD, unint64_t))(*(_QWORD *)v8 + 24))(v8, (unsigned __int16)this, HIDWORD(this));
      }
    }
  }
  else if (v4 == 1114)
  {
    IPC::Decoder::decode<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>>((uint64_t *)a3, &v9);
    if (v11)
      WebKit::RemoteLegacyCDMSession::sendMessage((unsigned int *)v3, &v9, &v10);
    return std::__optional_destruct_base<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v9, v5);
  }
  return this;
}

unint64_t `non-virtual thunk to'WebKit::RemoteLegacyCDMSession::didReceiveMessage(WebKit::RemoteLegacyCDMSession *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  return WebKit::RemoteLegacyCDMSession::didReceiveMessage((unint64_t)this - 8, a2, a3);
}

void IPC::Decoder::decode<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  void *v4;
  unsigned int *v5;
  unsigned int *v6;
  char v7;

  IPC::Decoder::decode<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(a1, &v6);
  if (v7)
  {
    IPC::ArgumentCoder<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,void>::decode<IPC::Decoder,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(a1, (uint64_t *)&v6, (uint64_t)a2);
    if (v7)
    {
      v5 = v6;
      v6 = 0;
      if (v5)
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v5, v4);
    }
  }
  else
  {
    *a2 = 0;
    a2[16] = 0;
  }
}

_QWORD *IPC::ArgumentCoder<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,void>::decode<IPC::Decoder,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  result = IPC::Decoder::decode<WTF::String>(a1, &v9);
  v6 = v10;
  if (!v10)
  {
    *(_BYTE *)a3 = 0;
    goto LABEL_5;
  }
  if (*((_BYTE *)a2 + 8))
  {
    v7 = *a2;
    *a2 = 0;
    v8 = v9;
    *(_QWORD *)a3 = v7;
    *(_QWORD *)(a3 + 8) = v8;
    v6 = 1;
LABEL_5:
    *(_BYTE *)(a3 + 16) = v6;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;

  if (*(_BYTE *)(a1 + 16))
  {
    v3 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(unsigned int **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  }
  return a1;
}

uint64_t IPC::Decoder::decode<std::tuple<unsigned short,unsigned int>>(uint64_t *a1)
{
  uint64_t result;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  result = IPC::ArgumentCoder<std::tuple<unsigned short,unsigned int>,void>::decode<IPC::Decoder>(a1);
  if (!v3)
  {
    v5 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v4 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<unsigned short,unsigned int>,void>::decode<IPC::Decoder>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int16 *v5;
  unint64_t v6;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(void);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;

  v1 = a1[1];
  v2 = *a1;
  v3 = ((a1[2] + 1) & 0xFFFFFFFFFFFFFFFELL) - *a1;
  if (v1 < v3 || v1 - v3 <= 1)
  {
    v13 = 0;
    *a1 = 0;
    a1[1] = 0;
    v14 = a1[3];
    if (v14)
    {
      v21 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
        a1 = v21;
        v13 = v21[1];
      }
      else
      {
        v13 = 0;
      }
    }
LABEL_15:
    v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    v15 = a1[3];
    if (v15)
    {
      if (v13)
      {
        v16 = *(void (**)(void))(*(_QWORD *)v15 + 16);
LABEL_23:
        v16();
      }
      return 0;
    }
    return v11;
  }
  v5 = (unsigned __int16 *)(v2 + v3);
  a1[2] = v5 + 1;
  if (!v2)
  {
    v13 = v1;
    goto LABEL_15;
  }
  v6 = (((unint64_t)v5 + 5) & 0xFFFFFFFFFFFFFFFCLL) - v2;
  if (v1 >= v6 && v1 - v6 > 3)
  {
    v8 = *v5;
    v9 = (unsigned int *)(v2 + v6);
    v10 = *v9;
    a1[2] = v9 + 1;
    return v8 | (v10 << 32);
  }
  else
  {
    v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    v17 = a1[3];
    if (v17)
    {
      v20 = a1;
      if (!v1)
        return 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
      v11 = 0;
      v18 = v20[1];
      v19 = v20[3];
      *v20 = 0;
      v20[1] = 0;
      if (v19 && v18)
      {
        v16 = *(void (**)(void))(*(_QWORD *)v19 + 16);
        goto LABEL_23;
      }
    }
  }
  return v11;
}

_QWORD *WebKit::RemoteLegacyCDMSessionProxy::didReceiveMessage(_QWORD *result, uint64_t a2, uint64_t a3)
{
  if (*(_WORD *)(a3 + 50) == 1112)
  {
    result = (_QWORD *)result[8];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
  }
  return result;
}

void WebKit::RemoteLegacyCDMSessionProxy::didReceiveSyncMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  int v4;

  v4 = *(unsigned __int16 *)(a3 + 50);
  switch(v4)
  {
    case 3627:
      IPC::handleMessageSynchronous<Messages::RemoteLegacyCDMSessionProxy::CachedKeyForKeyID,WebKit::RemoteLegacyCDMSessionProxy,WebKit::RemoteLegacyCDMSessionProxy,void ()(WTF::String,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, WTF::StringImpl **, uint64_t))WebKit::RemoteLegacyCDMSessionProxy::cachedKeyForKeyID, 0);
      break;
    case 3629:
      IPC::handleMessageSynchronous<Messages::RemoteLegacyCDMSessionProxy::Update,WebKit::RemoteLegacyCDMSessionProxy,WebKit::RemoteLegacyCDMSessionProxy,void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(BOOL,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,unsigned short,unsigned int)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, unsigned int **, _QWORD **))WebKit::RemoteLegacyCDMSessionProxy::update, 0);
      break;
    case 3628:
      IPC::handleMessageSynchronous<Messages::RemoteLegacyCDMSessionProxy::GenerateKeyRequest,WebKit::RemoteLegacyCDMSessionProxy,WebKit::RemoteLegacyCDMSessionProxy,void ()(WTF::String const&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,unsigned short,unsigned int)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, WTF::StringImpl **, IPC::Encoder **, WTF::StringImpl **))WebKit::RemoteLegacyCDMSessionProxy::generateKeyRequest, 0);
      break;
  }
}

void IPC::handleMessageSynchronous<Messages::RemoteLegacyCDMSessionProxy::GenerateKeyRequest,WebKit::RemoteLegacyCDMSessionProxy,WebKit::RemoteLegacyCDMSessionProxy,void ()(WTF::String const&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,unsigned short,unsigned int)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, WTF::StringImpl **, IPC::Encoder **, WTF::StringImpl **), uint64_t a6)
{
  WTF::StringImpl *v12;
  IPC::Encoder *v13;
  WTF::StringImpl *v14;
  unsigned __int8 **v15;
  void *v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  _QWORD *v20;
  void *v21;
  WTF::StringImpl *v22;
  unsigned int *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  IPC::Encoder *v30;
  char v31;
  WTF::StringImpl *v32;
  char v33;
  IPC::Encoder *v34;
  unsigned __int8 **v35;

  IPC::Decoder::decode<WTF::String>(a2, &v32);
  if (v33)
  {
    IPC::Decoder::decode<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(a2, &v34);
    if ((_BYTE)v35)
    {
      if (v33)
      {
        v29 = v32;
        v30 = v34;
        v31 = 1;
        v13 = *a3;
        *a3 = 0;
        v34 = v13;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v35, a1);
        v14 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v14 = off_1E34B3838;
        *((_QWORD *)v14 + 1) = v34;
        v15 = v35;
        v34 = 0;
        v35 = 0;
        *((_QWORD *)v14 + 2) = v15;
        v32 = v14;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v35);
        v17 = v34;
        v34 = 0;
        if (v17)
        {
          IPC::Encoder::~Encoder(v17, v16);
          WTF::fastFree(v18, v19);
        }
        v20 = (_QWORD *)(a4 + (a6 >> 1));
        if ((a6 & 1) != 0)
          a5 = *(void (**)(_QWORD *, WTF::StringImpl **, IPC::Encoder **, WTF::StringImpl **))(*v20 + a5);
        a5(v20, &v29, &v30, &v32);
        v22 = v32;
        v32 = 0;
        if (v22)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v22 + 8))(v22);
        if (v31)
        {
          v23 = (unsigned int *)v30;
          v30 = 0;
          if (v23)
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v23, v21);
          v24 = v29;
          v29 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v21);
            else
              *(_DWORD *)v24 -= 2;
          }
        }
      }
      else
      {
        __break(1u);
      }
      return;
    }
    if (v33)
    {
      v25 = v32;
      v32 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v12);
        else
          *(_DWORD *)v25 -= 2;
      }
    }
  }
  v26 = *a2;
  v27 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v28 = a2[3];
  if (v28 && v27)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v26);
}

BOOL IPC::handleMessageSynchronous<Messages::RemoteLegacyCDMSessionProxy::Update,WebKit::RemoteLegacyCDMSessionProxy,WebKit::RemoteLegacyCDMSessionProxy,void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(BOOL,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,unsigned short,unsigned int)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, unsigned int **, _QWORD **), uint64_t a6)
{
  int v11;
  IPC::Encoder *v12;
  _QWORD *v13;
  unsigned __int8 **v14;
  _BOOL8 result;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  unsigned int *v19;
  IPC::Encoder *v20;
  unsigned __int8 **v21[2];
  _QWORD *v22;
  unsigned int *v23;
  unsigned __int8 v24;

  IPC::Decoder::decode<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>(a2, (uint64_t)&v23);
  v11 = v24;
  if (!v24)
    return v11 != 0;
  v12 = *a3;
  *a3 = 0;
  v20 = v12;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v21, a1);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = off_1E34B3860;
  v13[1] = v20;
  v14 = v21[0];
  v21[0] = 0;
  v13[2] = v14;
  v22 = v13;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v21);
  result = 0;
  if (v24)
  {
    v16 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, unsigned int **, _QWORD **))(*v16 + a5);
    a5(v16, &v23, &v22);
    v18 = v22;
    v22 = 0;
    if (v18)
      (*(void (**)(_QWORD *))(*v18 + 8))(v18);
    if (v24)
    {
      v19 = v23;
      v23 = 0;
      if (v19)
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v19, v17);
    }
    return v11 != 0;
  }
  __break(1u);
  return result;
}

BOOL IPC::handleMessageSynchronous<Messages::RemoteLegacyCDMSessionProxy::CachedKeyForKeyID,WebKit::RemoteLegacyCDMSessionProxy,WebKit::RemoteLegacyCDMSessionProxy,void ()(WTF::String,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, WTF::StringImpl **, uint64_t), uint64_t a6)
{
  int v11;
  IPC::Encoder *v12;
  _QWORD *v13;
  unsigned __int8 **v14;
  _BOOL8 result;
  WTF::StringImpl *v16;
  _QWORD *v17;
  WTF::StringImpl *v18;
  IPC::Encoder *v19;
  unsigned __int8 **v20[2];
  _QWORD *v21;
  WTF::StringImpl *v22;
  unsigned __int8 v23;

  IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v22);
  v11 = v23;
  if (!v23)
    return v11 != 0;
  v12 = *a3;
  *a3 = 0;
  v19 = v12;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v20, a1);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = off_1E34B3888;
  v13[1] = v19;
  v14 = v20[0];
  v20[0] = 0;
  v13[2] = v14;
  v21 = v13;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v20);
  result = 0;
  if (v23)
  {
    IPC::callMemberFunction<WebKit::RemoteLegacyCDMSessionProxy,WebKit::RemoteLegacyCDMSessionProxy,void ()(WTF::String,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&),std::tuple<WTF::String>,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&>(a4, a5, a6, &v22, (uint64_t)&v21);
    v17 = v21;
    v21 = 0;
    if (v17)
      (*(void (**)(_QWORD *))(*v17 + 8))(v17);
    if (v23)
    {
      v18 = v22;
      v22 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v16);
        else
          *(_DWORD *)v18 -= 2;
      }
    }
    return v11 != 0;
  }
  __break(1u);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteLegacyCDMSessionProxy18GenerateKeyRequestEN6WebKit27RemoteLegacyCDMSessionProxyES8_FvRKNS_6StringEONS_6RefPtrIN7WebCore12SharedBufferENS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEEONS_17CompletionHandlerIFvSK_SB_tjEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_SB_tjEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3838;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteLegacyCDMSessionProxy18GenerateKeyRequestEN6WebKit27RemoteLegacyCDMSessionProxyES8_FvRKNS_6StringEONS_6RefPtrIN7WebCore12SharedBufferENS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEEONS_17CompletionHandlerIFvSK_SB_tjEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_SB_tjEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B3838;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteLegacyCDMSessionProxy18GenerateKeyRequestEN6WebKit27RemoteLegacyCDMSessionProxyES8_FvRKNS_6StringEONS_6RefPtrIN7WebCore12SharedBufferENS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEEONS_17CompletionHandlerIFvSK_SB_tjEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_SB_tjEE4callESK_SB_tj(uint64_t a1, WebCore::FragmentedSharedBuffer **a2, uint64_t *a3, __int16 a4, int a5)
{
  uint64_t *v8;
  IPC::Encoder *v9;

  v8 = (uint64_t *)(a1 + 8);
  v9 = *(IPC::Encoder **)(a1 + 8);
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>(v9, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v9, a3);
  *(_WORD *)IPC::Encoder::grow(v9, 2uLL, 2) = a4;
  *(_DWORD *)IPC::Encoder::grow(v9, 4uLL, 4) = a5;
  return IPC::Connection::sendMessageImpl(v8[1], v8, 0, 0);
}

void IPC::Decoder::decode<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  char v9;

  IPC::Decoder::decode<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(a1, &v8);
  if (v9)
  {
    *(_QWORD *)a2 = v8;
    *(_BYTE *)(a2 + 8) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteLegacyCDMSessionProxy6UpdateEN6WebKit27RemoteLegacyCDMSessionProxyES8_FvONS_6RefPtrIN7WebCore12SharedBufferENS_12RawPtrTraitsISB_EENS_21DefaultRefDerefTraitsISB_EEEEONS_17CompletionHandlerIFvbSH_tjEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbSH_tjEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3860;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteLegacyCDMSessionProxy6UpdateEN6WebKit27RemoteLegacyCDMSessionProxyES8_FvONS_6RefPtrIN7WebCore12SharedBufferENS_12RawPtrTraitsISB_EENS_21DefaultRefDerefTraitsISB_EEEEONS_17CompletionHandlerIFvbSH_tjEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbSH_tjEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B3860;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteLegacyCDMSessionProxy6UpdateEN6WebKit27RemoteLegacyCDMSessionProxyES8_FvONS_6RefPtrIN7WebCore12SharedBufferENS_12RawPtrTraitsISB_EENS_21DefaultRefDerefTraitsISB_EEEEONS_17CompletionHandlerIFvbSH_tjEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbSH_tjEE4callEbSH_tj(uint64_t a1, char a2, WebCore::FragmentedSharedBuffer **a3, __int16 a4, int a5)
{
  uint64_t *v8;
  IPC::Encoder *v9;

  v8 = (uint64_t *)(a1 + 8);
  v9 = *(IPC::Encoder **)(a1 + 8);
  *IPC::Encoder::grow(v9, 1uLL, 1) = a2;
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>(v9, a3);
  *(_WORD *)IPC::Encoder::grow(v9, 2uLL, 2) = a4;
  *(_DWORD *)IPC::Encoder::grow(v9, 4uLL, 4) = a5;
  return IPC::Connection::sendMessageImpl(v8[1], v8, 0, 0);
}

WTF::StringImpl *IPC::callMemberFunction<WebKit::RemoteLegacyCDMSessionProxy,WebKit::RemoteLegacyCDMSessionProxy,void ()(WTF::String,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&),std::tuple<WTF::String>,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&>(uint64_t a1, void (*a2)(_QWORD *, WTF::StringImpl **, uint64_t), uint64_t a3, WTF::StringImpl **a4, uint64_t a5)
{
  void (*v5)(_QWORD *, WTF::StringImpl **, uint64_t);
  _QWORD *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;

  v5 = a2;
  v6 = (_QWORD *)(a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    v5 = *(void (**)(_QWORD *, WTF::StringImpl **, uint64_t))(*v6 + a2);
  v7 = *a4;
  *a4 = 0;
  v10 = v7;
  v5(v6, &v10, a5);
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteLegacyCDMSessionProxy17CachedKeyForKeyIDEN6WebKit27RemoteLegacyCDMSessionProxyES8_FvNS_6StringEONS_17CompletionHandlerIFvONS_6RefPtrIN7WebCore12SharedBufferENS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3888;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteLegacyCDMSessionProxy17CachedKeyForKeyIDEN6WebKit27RemoteLegacyCDMSessionProxyES8_FvNS_6StringEONS_17CompletionHandlerIFvONS_6RefPtrIN7WebCore12SharedBufferENS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B3888;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteLegacyCDMSessionProxy17CachedKeyForKeyIDEN6WebKit27RemoteLegacyCDMSessionProxyES8_FvNS_6StringEONS_17CompletionHandlerIFvONS_6RefPtrIN7WebCore12SharedBufferENS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_EE4callESJ_(uint64_t a1, WebCore::FragmentedSharedBuffer **a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>(*(IPC::Encoder **)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

unsigned __int8 ***WebKit::RemoteMediaEngineConfigurationFactoryProxy::didReceiveMessage(unsigned __int8 ***this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  int v3;

  v3 = *((unsigned __int16 *)a3 + 25);
  if (v3 == 1116)
    return IPC::handleMessageAsync<Messages::RemoteMediaEngineConfigurationFactoryProxy::CreateEncodingConfiguration,WebKit::RemoteMediaEngineConfigurationFactoryProxy,WebKit::RemoteMediaEngineConfigurationFactoryProxy,void ()(WebCore::MediaEncodingConfiguration &&,WTF::CompletionHandler<void ()(WebCore::MediaCapabilitiesEncodingInfo &&)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, _BYTE *, _QWORD **))WebKit::RemoteMediaEngineConfigurationFactoryProxy::createEncodingConfiguration, 0);
  if (v3 == 1115)
    return IPC::handleMessageAsync<Messages::RemoteMediaEngineConfigurationFactoryProxy::CreateDecodingConfiguration,WebKit::RemoteMediaEngineConfigurationFactoryProxy,WebKit::RemoteMediaEngineConfigurationFactoryProxy,void ()(WebCore::MediaDecodingConfiguration &&,WTF::CompletionHandler<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, _BYTE *, _QWORD **))WebKit::RemoteMediaEngineConfigurationFactoryProxy::createDecodingConfiguration, 0);
  return this;
}

unsigned __int8 ***IPC::handleMessageAsync<Messages::RemoteMediaEngineConfigurationFactoryProxy::CreateDecodingConfiguration,WebKit::RemoteMediaEngineConfigurationFactoryProxy,WebKit::RemoteMediaEngineConfigurationFactoryProxy,void ()(WebCore::MediaDecodingConfiguration &&,WTF::CompletionHandler<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, _BYTE *, _QWORD **), uint64_t a5)
{
  void *v10;
  unint64_t v11;
  _QWORD *v12;
  unsigned __int8 **v13;
  unsigned __int8 ***result;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unsigned __int8 **v18;
  _QWORD *v19;
  _BYTE v20[160];
  char v21;

  IPC::Decoder::decode<std::tuple<WebCore::MediaDecodingConfiguration>>(a2, v20);
  if (!v21)
    return (unsigned __int8 ***)std::__optional_destruct_base<WebCore::MediaDecodingConfiguration,false>::~__optional_destruct_base[abi:sn180100](v20, v10);
  v11 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (!(_BYTE)v10)
    return (unsigned __int8 ***)std::__optional_destruct_base<WebCore::MediaDecodingConfiguration,false>::~__optional_destruct_base[abi:sn180100](v20, v10);
  v17 = v11;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v18, a1);
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v12 = off_1E34B38B0;
  v12[1] = v17;
  v13 = v18;
  v18 = 0;
  v19 = v12;
  v12[2] = v13;
  result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v18);
  if (v21)
  {
    v15 = (_QWORD *)(a3 + (a5 >> 1));
    if ((a5 & 1) != 0)
      a4 = *(void (**)(_QWORD *, _BYTE *, _QWORD **))(*v15 + a4);
    a4(v15, v20, &v19);
    v16 = v19;
    v19 = 0;
    if (v16)
      (*(void (**)(_QWORD *))(*v16 + 8))(v16);
    return (unsigned __int8 ***)std::__optional_destruct_base<WebCore::MediaDecodingConfiguration,false>::~__optional_destruct_base[abi:sn180100](v20, v10);
  }
  __break(1u);
  return result;
}

unsigned __int8 ***IPC::handleMessageAsync<Messages::RemoteMediaEngineConfigurationFactoryProxy::CreateEncodingConfiguration,WebKit::RemoteMediaEngineConfigurationFactoryProxy,WebKit::RemoteMediaEngineConfigurationFactoryProxy,void ()(WebCore::MediaEncodingConfiguration &&,WTF::CompletionHandler<void ()(WebCore::MediaCapabilitiesEncodingInfo &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, _BYTE *, _QWORD **), uint64_t a5)
{
  void *v10;
  unint64_t v11;
  _QWORD *v12;
  unsigned __int8 **v13;
  unsigned __int8 ***result;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unsigned __int8 **v18;
  _QWORD *v19;
  _BYTE v20[160];
  char v21;

  IPC::Decoder::decode<std::tuple<WebCore::MediaEncodingConfiguration>>(a2, v20);
  if (!v21)
    return (unsigned __int8 ***)std::__optional_destruct_base<WebCore::MediaDecodingConfiguration,false>::~__optional_destruct_base[abi:sn180100](v20, v10);
  v11 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (!(_BYTE)v10)
    return (unsigned __int8 ***)std::__optional_destruct_base<WebCore::MediaDecodingConfiguration,false>::~__optional_destruct_base[abi:sn180100](v20, v10);
  v17 = v11;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v18, a1);
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v12 = off_1E34B38D8;
  v12[1] = v17;
  v13 = v18;
  v18 = 0;
  v19 = v12;
  v12[2] = v13;
  result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v18);
  if (v21)
  {
    v15 = (_QWORD *)(a3 + (a5 >> 1));
    if ((a5 & 1) != 0)
      a4 = *(void (**)(_QWORD *, _BYTE *, _QWORD **))(*v15 + a4);
    a4(v15, v20, &v19);
    v16 = v19;
    v19 = 0;
    if (v16)
      (*(void (**)(_QWORD *))(*v16 + 8))(v16);
    return (unsigned __int8 ***)std::__optional_destruct_base<WebCore::MediaDecodingConfiguration,false>::~__optional_destruct_base[abi:sn180100](v20, v10);
  }
  __break(1u);
  return result;
}

_BYTE *IPC::Decoder::decode<std::tuple<WebCore::MediaDecodingConfiguration>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::MediaDecodingConfiguration>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[160])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_BYTE *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

_BYTE *IPC::ArgumentCoder<std::tuple<WebCore::MediaDecodingConfiguration>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  void *v3;
  char v4;
  uint64_t v6[20];
  char v7;

  IPC::Decoder::decode<WebCore::MediaDecodingConfiguration>(a1, (uint64_t)v6);
  v4 = v7;
  if (v7)
  {
    std::__tuple_leaf<0ul,WebCore::MediaDecodingConfiguration,false>::__tuple_leaf[abi:sn180100]<WebCore::MediaDecodingConfiguration,void>((uint64_t)a2, v6);
    v4 = 1;
  }
  else
  {
    *a2 = 0;
  }
  a2[160] = v4;
  return std::__optional_destruct_base<WebCore::MediaDecodingConfiguration,false>::~__optional_destruct_base[abi:sn180100](v6, v3);
}

uint64_t std::__tuple_leaf<0ul,WebCore::MediaDecodingConfiguration,false>::__tuple_leaf[abi:sn180100]<WebCore::MediaDecodingConfiguration,void>(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 40) = 0;
  if (*((_BYTE *)a2 + 40))
  {
    v2 = *a2;
    *a2 = 0;
    *(_QWORD *)result = v2;
    v3 = *(_OWORD *)(a2 + 1);
    *(_OWORD *)(result + 24) = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(result + 8) = v3;
    *(_BYTE *)(result + 40) = 1;
  }
  *(_BYTE *)(result + 48) = 0;
  *(_BYTE *)(result + 96) = 0;
  if (*((_BYTE *)a2 + 96))
  {
    v4 = a2[6];
    a2[6] = 0;
    *(_QWORD *)(result + 48) = v4;
    v5 = a2[7];
    a2[7] = 0;
    *(_QWORD *)(result + 56) = v5;
    v6 = *((_OWORD *)a2 + 4);
    *(_OWORD *)(result + 74) = *(_OWORD *)((char *)a2 + 74);
    *(_OWORD *)(result + 64) = v6;
    *(_BYTE *)(result + 96) = 1;
  }
  *(_BYTE *)(result + 104) = 0;
  *(_BYTE *)(result + 120) = 0;
  if (*((_BYTE *)a2 + 120))
  {
    *(_QWORD *)(result + 104) = 0;
    *(_QWORD *)(result + 112) = 0;
    v7 = a2[13];
    a2[13] = 0;
    *(_QWORD *)(result + 104) = v7;
    LODWORD(v7) = *((_DWORD *)a2 + 28);
    *((_DWORD *)a2 + 28) = 0;
    *(_DWORD *)(result + 112) = v7;
    LODWORD(v7) = *((_DWORD *)a2 + 29);
    *((_DWORD *)a2 + 29) = 0;
    *(_DWORD *)(result + 116) = v7;
    *(_BYTE *)(result + 120) = 1;
  }
  *(_BYTE *)(result + 128) = 0;
  *(_BYTE *)(result + 144) = 0;
  if (*((_BYTE *)a2 + 144))
  {
    *(_QWORD *)(result + 128) = 0;
    *(_QWORD *)(result + 136) = 0;
    v8 = a2[16];
    a2[16] = 0;
    *(_QWORD *)(result + 128) = v8;
    LODWORD(v8) = *((_DWORD *)a2 + 34);
    *((_DWORD *)a2 + 34) = 0;
    *(_DWORD *)(result + 136) = v8;
    LODWORD(v8) = *((_DWORD *)a2 + 35);
    *((_DWORD *)a2 + 35) = 0;
    *(_DWORD *)(result + 140) = v8;
    *(_BYTE *)(result + 144) = 1;
  }
  *(_WORD *)(result + 152) = *((_WORD *)a2 + 76);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages42RemoteMediaEngineConfigurationFactoryProxy27CreateDecodingConfigurationEN6WebKit42RemoteMediaEngineConfigurationFactoryProxyES8_FvON7WebCore26MediaDecodingConfigurationEONS_17CompletionHandlerIFvONS9_29MediaCapabilitiesDecodingInfoEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B38B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages42RemoteMediaEngineConfigurationFactoryProxy27CreateDecodingConfigurationEN6WebKit42RemoteMediaEngineConfigurationFactoryProxyES8_FvON7WebCore26MediaDecodingConfigurationEONS_17CompletionHandlerIFvONS9_29MediaCapabilitiesDecodingInfoEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B38B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages42RemoteMediaEngineConfigurationFactoryProxy27CreateDecodingConfigurationEN6WebKit42RemoteMediaEngineConfigurationFactoryProxyES8_FvON7WebCore26MediaDecodingConfigurationEONS_17CompletionHandlerIFvONS9_29MediaCapabilitiesDecodingInfoEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EE4callESE_(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3086;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebCore::MediaCapabilitiesDecodingInfo,void>::encode((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

_BYTE *IPC::Decoder::decode<std::tuple<WebCore::MediaEncodingConfiguration>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::MediaEncodingConfiguration>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[160])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_BYTE *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

_BYTE *IPC::ArgumentCoder<std::tuple<WebCore::MediaEncodingConfiguration>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  void *v3;
  char v4;
  uint64_t v6[20];
  char v7;

  IPC::Decoder::decode<WebCore::MediaEncodingConfiguration>(a1, (uint64_t)v6);
  v4 = v7;
  if (v7)
  {
    std::__tuple_leaf<0ul,WebCore::MediaEncodingConfiguration,false>::__tuple_leaf[abi:sn180100]<WebCore::MediaEncodingConfiguration,void>((uint64_t)a2, v6);
    v4 = 1;
  }
  else
  {
    *a2 = 0;
  }
  a2[160] = v4;
  return std::__optional_destruct_base<WebCore::MediaDecodingConfiguration,false>::~__optional_destruct_base[abi:sn180100](v6, v3);
}

uint64_t std::__tuple_leaf<0ul,WebCore::MediaEncodingConfiguration,false>::__tuple_leaf[abi:sn180100]<WebCore::MediaEncodingConfiguration,void>(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 40) = 0;
  if (*((_BYTE *)a2 + 40))
  {
    v2 = *a2;
    *a2 = 0;
    *(_QWORD *)result = v2;
    v3 = *(_OWORD *)(a2 + 1);
    *(_OWORD *)(result + 24) = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(result + 8) = v3;
    *(_BYTE *)(result + 40) = 1;
  }
  *(_BYTE *)(result + 48) = 0;
  *(_BYTE *)(result + 96) = 0;
  if (*((_BYTE *)a2 + 96))
  {
    v4 = a2[6];
    a2[6] = 0;
    *(_QWORD *)(result + 48) = v4;
    v5 = a2[7];
    a2[7] = 0;
    *(_QWORD *)(result + 56) = v5;
    v6 = *((_OWORD *)a2 + 4);
    *(_OWORD *)(result + 74) = *(_OWORD *)((char *)a2 + 74);
    *(_OWORD *)(result + 64) = v6;
    *(_BYTE *)(result + 96) = 1;
  }
  *(_BYTE *)(result + 104) = 0;
  *(_BYTE *)(result + 120) = 0;
  if (*((_BYTE *)a2 + 120))
  {
    *(_QWORD *)(result + 104) = 0;
    *(_QWORD *)(result + 112) = 0;
    v7 = a2[13];
    a2[13] = 0;
    *(_QWORD *)(result + 104) = v7;
    LODWORD(v7) = *((_DWORD *)a2 + 28);
    *((_DWORD *)a2 + 28) = 0;
    *(_DWORD *)(result + 112) = v7;
    LODWORD(v7) = *((_DWORD *)a2 + 29);
    *((_DWORD *)a2 + 29) = 0;
    *(_DWORD *)(result + 116) = v7;
    *(_BYTE *)(result + 120) = 1;
  }
  *(_BYTE *)(result + 128) = 0;
  *(_BYTE *)(result + 144) = 0;
  if (*((_BYTE *)a2 + 144))
  {
    *(_QWORD *)(result + 128) = 0;
    *(_QWORD *)(result + 136) = 0;
    v8 = a2[16];
    a2[16] = 0;
    *(_QWORD *)(result + 128) = v8;
    LODWORD(v8) = *((_DWORD *)a2 + 34);
    *((_DWORD *)a2 + 34) = 0;
    *(_DWORD *)(result + 136) = v8;
    LODWORD(v8) = *((_DWORD *)a2 + 35);
    *((_DWORD *)a2 + 35) = 0;
    *(_DWORD *)(result + 140) = v8;
    *(_BYTE *)(result + 144) = 1;
  }
  *(_BYTE *)(result + 152) = *((_BYTE *)a2 + 152);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages42RemoteMediaEngineConfigurationFactoryProxy27CreateEncodingConfigurationEN6WebKit42RemoteMediaEngineConfigurationFactoryProxyES8_FvON7WebCore26MediaEncodingConfigurationEONS_17CompletionHandlerIFvONS9_29MediaCapabilitiesEncodingInfoEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B38D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages42RemoteMediaEngineConfigurationFactoryProxy27CreateEncodingConfigurationEN6WebKit42RemoteMediaEngineConfigurationFactoryProxyES8_FvON7WebCore26MediaEncodingConfigurationEONS_17CompletionHandlerIFvONS9_29MediaCapabilitiesEncodingInfoEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B38D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages42RemoteMediaEngineConfigurationFactoryProxy27CreateEncodingConfigurationEN6WebKit42RemoteMediaEngineConfigurationFactoryProxyES8_FvON7WebCore26MediaEncodingConfigurationEONS_17CompletionHandlerIFvONS9_29MediaCapabilitiesEncodingInfoEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EE4callESE_(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3087;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebCore::MediaCapabilitiesEncodingInfo,void>::encode((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void WebKit::RemoteMediaPlayerManagerProxy::didReceiveMessage(WebKit::RemoteMediaPlayerManagerProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  int v4;
  void *v5;
  unint64_t v6;
  char v7;
  uint64_t v8[2];
  char v9;
  _BYTE v10[280];
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = *((unsigned __int16 *)a3 + 25);
  if (v4 == 1118)
  {
    v6 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
    if (v7)
      WebKit::RemoteMediaPlayerManagerProxy::deleteMediaPlayer((uint64_t *)this, v6);
  }
  else if (v4 == 1117)
  {
    IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::MediaPlayerMediaEngineIdentifier,WebKit::RemoteMediaPlayerProxyConfiguration>>((uint64_t *)a3, v8);
    if (v11)
    {
      WebKit::RemoteMediaPlayerManagerProxy::createMediaPlayer((uint64_t *)this, v8[0], v8[1], v9, (uint64_t)v10);
      if (v11)
        WebKit::RemoteMediaPlayerProxyConfiguration::~RemoteMediaPlayerProxyConfiguration((WebKit::RemoteMediaPlayerProxyConfiguration *)v10, v5);
    }
  }
}

uint64_t WebKit::RemoteMediaPlayerManagerProxy::didReceiveSyncMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  int v4;

  v4 = *(unsigned __int16 *)(a3 + 50);
  switch(v4)
  {
    case 3632:
      return IPC::handleMessageSynchronous<Messages::RemoteMediaPlayerManagerProxy::SupportsTypeAndCodecs,WebKit::RemoteMediaPlayerManagerProxy,WebKit::RemoteMediaPlayerManagerProxy,void ()(WebCore::MediaPlayerMediaEngineIdentifier,WebCore::MediaEngineSupportParameters const&&,WTF::CompletionHandler<void ()(WebCore::MediaPlayerSupportsType)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, _QWORD, _BYTE *, _QWORD **))WebKit::RemoteMediaPlayerManagerProxy::supportsTypeAndCodecs, 0);
    case 3631:
      return IPC::handleMessageSynchronous<Messages::RemoteMediaPlayerManagerProxy::SupportsKeySystem,WebKit::RemoteMediaPlayerManagerProxy,WebKit::RemoteMediaPlayerManagerProxy,void ()(WebCore::MediaPlayerMediaEngineIdentifier,WTF::String const&&,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, _QWORD, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))WebKit::RemoteMediaPlayerManagerProxy::supportsKeySystem, 0);
    case 3630:
      return IPC::handleMessageSynchronous<Messages::RemoteMediaPlayerManagerProxy::GetSupportedTypes,WebKit::RemoteMediaPlayerManagerProxy,WebKit::RemoteMediaPlayerManagerProxy,void ()(WebCore::MediaPlayerMediaEngineIdentifier,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, _QWORD, _QWORD **))WebKit::RemoteMediaPlayerManagerProxy::getSupportedTypes, 0);
  }
  return 0;
}

BOOL IPC::handleMessageSynchronous<Messages::RemoteMediaPlayerManagerProxy::GetSupportedTypes,WebKit::RemoteMediaPlayerManagerProxy,WebKit::RemoteMediaPlayerManagerProxy,void ()(WebCore::MediaPlayerMediaEngineIdentifier,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _QWORD, _QWORD **), uint64_t a6)
{
  unsigned __int16 v11;
  unsigned int v12;
  unsigned __int8 v13;
  IPC::Encoder *v14;
  _QWORD *v15;
  unsigned __int8 **v16;
  _QWORD *v17;
  _QWORD *v18;
  IPC::Encoder *v20;
  unsigned __int8 **v21[2];
  _QWORD *v22;

  v11 = IPC::Decoder::decode<std::tuple<WebCore::MediaPlayerMediaEngineIdentifier>>(a2);
  v12 = v11;
  if (v11 >= 0x100u)
  {
    v13 = v11;
    v14 = *a3;
    *a3 = 0;
    v20 = v14;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v21, a1);
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v15 = off_1E34B3900;
    v15[1] = v20;
    v16 = v21[0];
    v21[0] = 0;
    v15[2] = v16;
    v22 = v15;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v21);
    v17 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, _QWORD, _QWORD **))(*v17 + a5);
    a5(v17, v13, &v22);
    v18 = v22;
    v22 = 0;
    if (v18)
      (*(void (**)(_QWORD *))(*v18 + 8))(v18);
  }
  return v12 > 0xFF;
}

uint64_t IPC::handleMessageSynchronous<Messages::RemoteMediaPlayerManagerProxy::SupportsTypeAndCodecs,WebKit::RemoteMediaPlayerManagerProxy,WebKit::RemoteMediaPlayerManagerProxy,void ()(WebCore::MediaPlayerMediaEngineIdentifier,WebCore::MediaEngineSupportParameters const&&,WTF::CompletionHandler<void ()(WebCore::MediaPlayerSupportsType)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _QWORD, _BYTE *, _QWORD **), uint64_t a6)
{
  unsigned __int8 v6;
  unsigned __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  void *v17;
  IPC::Encoder *v18;
  _QWORD *v19;
  unsigned __int8 **v20;
  void *v21;
  IPC::Encoder *v22;
  WTF *v23;
  void *v24;
  _QWORD *v25;
  void *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unsigned __int8 v32;
  _BYTE v33[200];
  char v34;
  IPC::Encoder *v35;
  unsigned __int8 **v36[24];
  char v37;

  v13 = IPC::Decoder::decode<WebCore::MediaPlayerMediaEngineIdentifier>(a2);
  if (v13 > 0xFFu)
  {
    v6 = v13;
    IPC::ArgumentCoder<WebCore::MediaEngineSupportParameters,void>::decode(a2, &v35);
    if (!v37)
      goto LABEL_22;
    goto LABEL_8;
  }
LABEL_2:
  v32 = 0;
  v34 = 0;
LABEL_3:
  v14 = *a2;
  v15 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v15 && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v14), v34))
    {
      while (1)
      {
        v18 = *a3;
        *a3 = 0;
        v35 = v18;
        a3 = (IPC::Encoder **)v36;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v36, a1);
        v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v19 = off_1E34B3928;
        v19[1] = v35;
        v20 = v36[0];
        v35 = 0;
        v36[0] = 0;
        v19[2] = v20;
        v31 = v19;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v36);
        v22 = v35;
        v35 = 0;
        if (v22)
        {
          IPC::Encoder::~Encoder(v22, v21);
          WTF::fastFree(v23, v24);
        }
        if (v34)
          break;
        __break(1u);
LABEL_22:
        v28 = *a2;
        v29 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        v30 = a2[3];
        if (!v30)
          goto LABEL_2;
        if (!v29)
          goto LABEL_2;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, v28);
        if (!v37)
          goto LABEL_2;
LABEL_8:
        v32 = v6;
        WebCore::MediaEngineSupportParameters::MediaEngineSupportParameters((uint64_t)v33, (uint64_t *)&v35);
        v34 = 1;
        if (v37)
        {
          WebCore::MediaEngineSupportParameters::~MediaEngineSupportParameters((WebCore::MediaEngineSupportParameters *)&v35, v17);
          if (!v34)
            goto LABEL_3;
        }
      }
      v25 = (_QWORD *)(a4 + (a6 >> 1));
      if ((a6 & 1) != 0)
        a5 = *(void (**)(_QWORD *, _QWORD, _BYTE *, _QWORD **))(*v25 + a5);
      a5(v25, v32, v33, &v31);
      v27 = v31;
      v31 = 0;
      if (v27)
        (*(void (**)(_QWORD *))(*v27 + 8))(v27);
      if (v34)
        WebCore::MediaEngineSupportParameters::~MediaEngineSupportParameters((WebCore::MediaEngineSupportParameters *)v33, v26);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t IPC::handleMessageSynchronous<Messages::RemoteMediaPlayerManagerProxy::SupportsKeySystem,WebKit::RemoteMediaPlayerManagerProxy,WebKit::RemoteMediaPlayerManagerProxy,void ()(WebCore::MediaPlayerMediaEngineIdentifier,WTF::String const&&,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _QWORD, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **), uint64_t a6)
{
  unsigned __int16 v12;
  unsigned __int8 v13;
  uint64_t result;
  WTF::StringImpl *v15;
  IPC::Encoder *v16;
  WTF::StringImpl *v17;
  unsigned __int8 **v18;
  void *v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  char v33;
  WTF::StringImpl *v34;
  char v35;
  IPC::Encoder *v36;
  unsigned __int8 **v37;

  v12 = IPC::Decoder::decode<WebCore::MediaPlayerMediaEngineIdentifier>(a2);
  if (v12 >= 0x100u)
  {
    v13 = v12;
    IPC::Decoder::decode<WTF::String>(a2, &v34);
    if (v35)
    {
      result = (uint64_t)IPC::Decoder::decode<WTF::String>(a2, &v36);
      if ((_BYTE)v37)
      {
        if (v35)
        {
          v31 = v34;
          v32 = v36;
          v33 = 1;
          v16 = *a3;
          *a3 = 0;
          v36 = v16;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v37, a1);
          v17 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v17 = off_1E34B3950;
          *((_QWORD *)v17 + 1) = v36;
          v18 = v37;
          v36 = 0;
          v37 = 0;
          *((_QWORD *)v17 + 2) = v18;
          v34 = v17;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v37);
          v20 = v36;
          v36 = 0;
          if (v20)
          {
            IPC::Encoder::~Encoder(v20, v19);
            WTF::fastFree(v21, v22);
          }
          v23 = (_QWORD *)(a4 + (a6 >> 1));
          if ((a6 & 1) != 0)
            a5 = *(void (**)(_QWORD *, _QWORD, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))(*v23 + a5);
          a5(v23, v13, &v31, &v32, &v34);
          v25 = v34;
          v34 = 0;
          if (v25)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v25 + 8))(v25);
          if (v33)
          {
            v26 = v32;
            v32 = 0;
            if (v26)
            {
              if (*(_DWORD *)v26 == 2)
                WTF::StringImpl::destroy(v26, v24);
              else
                *(_DWORD *)v26 -= 2;
            }
            v28 = v31;
            v31 = 0;
            if (v28)
            {
              if (*(_DWORD *)v28 == 2)
                WTF::StringImpl::destroy(v28, v24);
              else
                *(_DWORD *)v28 -= 2;
            }
          }
          return 1;
        }
        else
        {
          __break(1u);
        }
        return result;
      }
      if (v35)
      {
        v27 = v34;
        v34 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, v15);
          else
            *(_DWORD *)v27 -= 2;
        }
      }
    }
  }
  v29 = *a2;
  v30 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v30)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v29);
    return 0;
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::MediaPlayerMediaEngineIdentifier,WebKit::RemoteMediaPlayerProxyConfiguration>>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::MediaPlayerMediaEngineIdentifier,WebKit::RemoteMediaPlayerProxyConfiguration>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[304])
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::MediaPlayerMediaEngineIdentifier,WebKit::RemoteMediaPlayerProxyConfiguration>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  _QWORD v5[2];

  v5[0] = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v5[1] = v4;
  if ((_BYTE)v4)
  {
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::MediaPlayerMediaEngineIdentifier,WebKit::RemoteMediaPlayerProxyConfiguration>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1, (uint64_t)v5, a2);
  }
  else
  {
    *a2 = 0;
    a2[304] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::MediaPlayerMediaEngineIdentifier,WebKit::RemoteMediaPlayerProxyConfiguration>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7[2];

  v7[0] = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v7[1] = v6;
  if ((_BYTE)v6)
  {
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::MediaPlayerMediaEngineIdentifier,WebKit::RemoteMediaPlayerProxyConfiguration>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1, a2, v7, a3);
  }
  else
  {
    *a3 = 0;
    a3[304] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::MediaPlayerMediaEngineIdentifier,WebKit::RemoteMediaPlayerProxyConfiguration>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _BYTE *a4@<X8>)
{
  unsigned __int16 v8;

  v8 = IPC::Decoder::decode<WebCore::MediaPlayerMediaEngineIdentifier>(a1);
  if (v8 > 0xFFu)
  {
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::MediaPlayerMediaEngineIdentifier,WebKit::RemoteMediaPlayerProxyConfiguration>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::MediaPlayerMediaEngineIdentifier>(a1, a2, a3, (char *)&v8, (uint64_t)a4);
  }
  else
  {
    *a4 = 0;
    a4[304] = 0;
  }
}

uint64_t IPC::Decoder::decode<WebCore::MediaPlayerMediaEngineIdentifier>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebCore::MediaPlayerMediaEngineIdentifier,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::MediaPlayerMediaEngineIdentifier,WebKit::RemoteMediaPlayerProxyConfiguration>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::MediaPlayerMediaEngineIdentifier>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  char v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17[35];
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  IPC::ArgumentCoder<WebKit::RemoteMediaPlayerProxyConfiguration,void>::decode(a1, v17);
  if (!v18)
    goto LABEL_9;
  while (!*(_BYTE *)(a2 + 8) || !*((_BYTE *)a3 + 8) || !a4[1])
  {
    __break(1u);
LABEL_9:
    v13 = *a1;
    v14 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v15 = a1[3];
    if (v15)
      v16 = v14 == 0;
    else
      v16 = 1;
    if (!v16)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13);
      if (v18)
        continue;
    }
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 304) = 0;
    return;
  }
  v10 = *a3;
  v11 = *a4;
  *(_QWORD *)a5 = *(_QWORD *)a2;
  *(_QWORD *)(a5 + 8) = v10;
  *(_BYTE *)(a5 + 16) = v11;
  WebKit::RemoteMediaPlayerProxyConfiguration::RemoteMediaPlayerProxyConfiguration(a5 + 24, v17);
  *(_BYTE *)(a5 + 304) = 1;
  if (v18)
    WebKit::RemoteMediaPlayerProxyConfiguration::~RemoteMediaPlayerProxyConfiguration((WebKit::RemoteMediaPlayerProxyConfiguration *)v17, v12);
}

uint64_t IPC::ArgumentCoder<WebCore::MediaPlayerMediaEngineIdentifier,void>::decode<IPC::Decoder>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v7 = 0;
    v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9)
    {
      v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v9 + 16))(v9, v2, v1);
        a1 = v12;
        v8 = *v12;
        v7 = v12[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
    }
    goto LABEL_6;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    v7 = v1;
    v8 = 0;
LABEL_6:
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10 && v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v8);
    goto LABEL_7;
  }
  v5 = *v4;
  if (v5 >= 0xA)
  {
LABEL_7:
    v5 = 0;
    v6 = 0;
    return v5 | (v6 << 8);
  }
  v6 = 1;
  return v5 | (v6 << 8);
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::MediaPlayerMediaEngineIdentifier>>(uint64_t *a1)
{
  unsigned int v2;
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  v2 = (unsigned __int16)IPC::Decoder::decode<WebCore::MediaPlayerMediaEngineIdentifier>(a1);
  v3 = 256;
  if (v2 <= 0xFF)
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7)
    {
      v8 = v2;
      if (v6)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v5);
        v3 = 0;
        v2 = v8;
      }
      else
      {
        v3 = 0;
      }
    }
    else
    {
      v3 = 0;
    }
  }
  if (v2 <= 0x100)
    LOBYTE(v2) = 0;
  return v3 | v2;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29RemoteMediaPlayerManagerProxy17GetSupportedTypesEN6WebKit29RemoteMediaPlayerManagerProxyES8_FvN7WebCore32MediaPlayerMediaEngineIdentifierEONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3900;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29RemoteMediaPlayerManagerProxy17GetSupportedTypesEN6WebKit29RemoteMediaPlayerManagerProxyES8_FvN7WebCore32MediaPlayerMediaEngineIdentifierEONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B3900;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29RemoteMediaPlayerManagerProxy17GetSupportedTypesEN6WebKit29RemoteMediaPlayerManagerProxyES8_FvN7WebCore32MediaPlayerMediaEngineIdentifierEONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(*(IPC::Encoder **)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29RemoteMediaPlayerManagerProxy21SupportsTypeAndCodecsEN6WebKit29RemoteMediaPlayerManagerProxyES8_FvN7WebCore32MediaPlayerMediaEngineIdentifierEOKNS9_28MediaEngineSupportParametersEONS_17CompletionHandlerIFvNS9_23MediaPlayerSupportsTypeEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSF_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3928;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29RemoteMediaPlayerManagerProxy21SupportsTypeAndCodecsEN6WebKit29RemoteMediaPlayerManagerProxyES8_FvN7WebCore32MediaPlayerMediaEngineIdentifierEOKNS9_28MediaEngineSupportParametersEONS_17CompletionHandlerIFvNS9_23MediaPlayerSupportsTypeEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSF_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B3928;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29RemoteMediaPlayerManagerProxy21SupportsTypeAndCodecsEN6WebKit29RemoteMediaPlayerManagerProxyES8_FvN7WebCore32MediaPlayerMediaEngineIdentifierEOKNS9_28MediaEngineSupportParametersEONS_17CompletionHandlerIFvNS9_23MediaPlayerSupportsTypeEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSF_EE4callESF_(uint64_t a1, char a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  char *result;
  unint64_t v13;
  size_t v14;
  void *v15;

  v4 = (uint64_t *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 >= v6 + 1)
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
LABEL_3:
    bzero(&v9[v10], v6 - v10);
    *(_QWORD *)(v5 + 544) = v7;
    v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
    *(_QWORD *)(v5 + 536) = v11 + 1;
    *v11 = a2;
    return (char *)IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), v4, 0, 0);
  }
  v13 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v14 = v13;
    v13 *= 2;
  }
  while (v14 < v7);
  result = (char *)mmap(0, v14, 3, 4098, -1, 0);
  if (result != (char *)-1)
  {
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v15 = *(void **)(v5 + 528);
    if (v15 != (void *)(v5 + 16))
      munmap(v15, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v14;
    v10 = *(_QWORD *)(v5 + 544);
    goto LABEL_3;
  }
  __break(0xC471u);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29RemoteMediaPlayerManagerProxy17SupportsKeySystemEN6WebKit29RemoteMediaPlayerManagerProxyES8_FvN7WebCore32MediaPlayerMediaEngineIdentifierEOKNS_6StringESD_ONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3950;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29RemoteMediaPlayerManagerProxy17SupportsKeySystemEN6WebKit29RemoteMediaPlayerManagerProxyES8_FvN7WebCore32MediaPlayerMediaEngineIdentifierEOKNS_6StringESD_ONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B3950;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29RemoteMediaPlayerManagerProxy17SupportsKeySystemEN6WebKit29RemoteMediaPlayerManagerProxyES8_FvN7WebCore32MediaPlayerMediaEngineIdentifierEOKNS_6StringESD_ONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  char *result;
  unint64_t v13;
  size_t v14;
  void *v15;

  v4 = (uint64_t *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 >= v6 + 1)
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
LABEL_3:
    bzero(&v9[v10], v6 - v10);
    *(_QWORD *)(v5 + 544) = v7;
    v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
    *(_QWORD *)(v5 + 536) = v11 + 1;
    *v11 = a2;
    return (char *)IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), v4, 0, 0);
  }
  v13 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v14 = v13;
    v13 *= 2;
  }
  while (v14 < v7);
  result = (char *)mmap(0, v14, 3, 4098, -1, 0);
  if (result != (char *)-1)
  {
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v15 = *(void **)(v5 + 528);
    if (v15 != (void *)(v5 + 16))
      munmap(v15, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v14;
    v10 = *(_QWORD *)(v5 + 544);
    goto LABEL_3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebKit::RemoteMediaPlayerMIMETypeCache::addSupportedTypes(uint64_t result, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t *v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  _BYTE v7[24];

  v3 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)(result + 32);
    v5 = *(WTF::StringImpl ***)a2;
    v6 = 8 * v3;
    do
    {
      result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v4, v5++, a3, (uint64_t)v7);
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

BOOL WebKit::RemoteMediaPlayerMIMETypeCache::isEmpty(WebKit::RemoteMediaPlayerMIMETypeCache *this)
{
  uint64_t v1;

  if (!*((_BYTE *)this + 40))
    return 0;
  v1 = *((_QWORD *)this + 4);
  return !v1 || *(_DWORD *)(v1 - 12) == 0;
}

char *WebKit::RemoteMediaPlayerMIMETypeCache::supportedTypes(WebKit::RemoteMediaPlayerMIMETypeCache *this)
{
  WTF::StringImpl **v2;
  char v3;
  IPC::Encoder *v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  int v11;
  uint64_t *v12;
  int v13;
  void *v14;
  const WTF::StringImpl *v15;
  int v16;
  IPC::Decoder *v17;
  WTF *v18;
  void *v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  NSObject *v23;
  int v24;
  char *result;
  uint64_t v26;
  const char *v27;
  unint64_t v28;
  size_t v29;
  char *v30;
  _QWORD v31[2];
  int v32;
  int v33;
  int v34;
  WTF::StringImpl **v35;
  uint64_t v36;
  char v37;
  uint64_t *v38;
  int v39;
  IPC::Encoder *v40;
  uint64_t v41;
  __int128 buf;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 40))
    return (char *)this + 32;
  v2 = *(WTF::StringImpl ***)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)this)
                            + 24);
  v3 = *((_BYTE *)this + 8);
  v41 = 0;
  IPC::Connection::createSyncMessageEncoder(3630, 0, &v41, (uint64_t *)&v40);
  v4 = v40;
  v5 = *((_QWORD *)v40 + 68);
  v6 = v5 + 1;
  v7 = *((_QWORD *)v40 + 69);
  if (v7 < v5 + 1)
  {
    v28 = (2 * v7 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v29 = v28;
      v28 *= 2;
    }
    while (v29 < v6);
    result = (char *)mmap(0, v29, 3, 4098, -1, 0);
    if (result == (char *)-1)
      goto LABEL_37;
    v8 = result;
    memcpy(result, *((const void **)v4 + 66), *((_QWORD *)v4 + 68));
    v30 = (char *)*((_QWORD *)v4 + 66);
    if (v30 != (char *)v4 + 16)
      munmap(v30, *((_QWORD *)v4 + 69));
    *((_QWORD *)v4 + 66) = v8;
    *((_QWORD *)v4 + 69) = v29;
    v9 = *((_QWORD *)v4 + 68);
  }
  else
  {
    v8 = (char *)*((_QWORD *)v40 + 66);
    v9 = *((_QWORD *)v40 + 68);
  }
  bzero(&v8[v9], v5 - v9);
  *((_QWORD *)v4 + 68) = v6;
  v10 = (_BYTE *)(*((_QWORD *)v4 + 66) + v5);
  *((_QWORD *)v4 + 67) = v10 + 1;
  *v10 = v3;
  IPC::Connection::sendSyncMessage((uint64_t)v2, v41, (uint64_t *)&v40, 0, (uint64_t)&v38, INFINITY);
  v11 = v39;
  if (v39)
  {
    if (v39 == 1)
    {
      LOBYTE(v12) = (_BYTE)v38;
      LOBYTE(v31[0]) = (_BYTE)v38;
      v13 = 1;
      v34 = 1;
      goto LABEL_16;
    }
    goto LABEL_36;
  }
  LOBYTE(v35) = 0;
  v37 = 0;
  IPC::Decoder::operator>><std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v38, &v35);
  if (!v37)
  {
    LOBYTE(v12) = 13;
    LOBYTE(v31[0]) = 13;
    v13 = 1;
    v34 = 1;
    goto LABEL_15;
  }
  if (!v39)
  {
    v12 = v38;
    v38 = 0;
    v2 = v35;
    v35 = 0;
    v16 = v36;
    LODWORD(v8) = HIDWORD(v36);
    v36 = 0;
    buf = 0uLL;
    v31[0] = v12;
    v31[1] = v2;
    v43 = 0;
    v32 = v16;
    v33 = (int)v8;
    v34 = 0;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&buf + 8, v14);
    v17 = (IPC::Decoder *)buf;
    *(_QWORD *)&buf = 0;
    if (v17)
    {
      IPC::Decoder::~Decoder(v17);
      WTF::fastFree(v18, v19);
    }
    if (v37)
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, v14);
    v13 = 0;
LABEL_15:
    v11 = v39;
    if (v39 == -1)
    {
LABEL_17:
      v20 = v40;
      v40 = 0;
      if (v20)
      {
        IPC::Encoder::~Encoder(v20, v14);
        WTF::fastFree(v21, v22);
      }
      if (v13)
      {
        v23 = qword_1ECE71348;
        if (os_log_type_enabled((os_log_t)qword_1ECE71348, OS_LOG_TYPE_ERROR))
        {
          v27 = IPC::errorAsString(v12);
          LODWORD(buf) = 136446210;
          *(_QWORD *)((char *)&buf + 4) = v27;
          _os_log_error_impl(&dword_196BCC000, v23, OS_LOG_TYPE_ERROR, "RemoteMediaPlayerMIMETypeCache::supportedTypes: Sync IPC to the GPUProcess failed with error %{public}s", (uint8_t *)&buf, 0xCu);
        }
        v24 = 1;
      }
      else if ((_DWORD)v8)
      {
        v26 = 8 * v8;
        do
        {
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)this + 4, v2++, v15, (uint64_t)&buf);
          v26 -= 8;
        }
        while (v26);
        v24 = v34;
        *((_BYTE *)this + 40) = 1;
      }
      else
      {
        v24 = 0;
        *((_BYTE *)this + 40) = 1;
      }
      ((void (*)(__int128 *, _QWORD *))off_1E34B3968[v24])(&buf, v31);
      return (char *)this + 32;
    }
LABEL_16:
    ((void (*)(__int128 *, uint64_t **))off_1E34B3988[v11])(&buf, &v38);
    goto LABEL_17;
  }
LABEL_36:
  result = (char *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_37:
  __break(0xC471u);
  return result;
}

uint64_t WebKit::RemoteMediaPlayerMIMETypeCache::supportsTypeAndCodecs(WebKit::RemoteMediaPlayerMIMETypeCache *this, const WebCore::MediaEngineSupportParameters *a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  IPC::Encoder *v9;
  uint64_t v10;
  const WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  const WTF::StringImpl *v13;
  int v14;
  IPC::Encoder *v15;
  uint64_t v16;
  char v17;
  int v18;
  char *v19;
  unint64_t v20;
  char *v21;
  int v22;
  IPC::Encoder *v23;
  WTF *v24;
  void *v25;
  int v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  const WTF::StringImpl *v32;
  const WTF::StringImpl *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  const WTF::StringImpl *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  int v51;
  WTF::StringImpl *v52;
  char v53;
  __int16 v54;
  uint64_t v55;
  int v56;
  IPC::Encoder *v57;
  uint64_t v58;
  char v59;

  v2 = *(WTF::StringImpl **)a2;
  if (!*(_QWORD *)a2 || !*((_DWORD *)v2 + 1))
  {
    LOBYTE(v3) = 2;
    return v3;
  }
  v3 = (uint64_t)a2;
  *(_DWORD *)v2 += 2;
  v52 = v2;
  v53 = *((_BYTE *)a2 + 56);
  v54 = *(_WORD *)((char *)a2 + 57);
  v5 = (uint64_t *)((char *)this + 16);
  if (!*((_BYTE *)this + 24))
  {
    *((_QWORD *)this + 2) = 0;
    *((_BYTE *)this + 24) = 1;
    goto LABEL_20;
  }
  v6 = *v5;
  if (!*v5)
    goto LABEL_20;
  v7 = *(_DWORD *)(v6 - 8);
  v8 = WTF::TupleHash<WTF::String,BOOL,BOOL,BOOL>::hash<0ul>((uint64_t)&v52) & v7;
  v9 = (IPC::Encoder *)(v6 + 24 * v8);
  if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,false>::isEmptyValue<std::tuple<WTF::String,BOOL,BOOL,BOOL>>((uint64_t)v9, v10, v11))
  {
LABEL_10:
    v9 = *v5 ? (IPC::Encoder *)(*v5 + 24 * *(unsigned int *)(*v5 - 4)) : 0;
  }
  else
  {
    v14 = 1;
    while (*(_QWORD *)v9 == -1
         || (WTF::TupleHash<WTF::String,BOOL,BOOL,BOOL>::equal<0ul>((uint64_t)v9, (uint64_t)&v52, v13) & 1) == 0)
    {
      v8 = (v8 + v14) & v7;
      v9 = (IPC::Encoder *)(v6 + 24 * v8);
      ++v14;
      if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,false>::isEmptyValue<std::tuple<WTF::String,BOOL,BOOL,BOOL>>((uint64_t)v9, (uint64_t)v12, v13))
      {
        goto LABEL_10;
      }
    }
  }
  if (!*((_BYTE *)this + 24))
    goto LABEL_69;
  v15 = (IPC::Encoder *)*v5;
  if (*v5)
    v15 = (IPC::Encoder *)((char *)v15 + 24 * *((unsigned int *)v15 - 1));
  if (v15 == v9)
  {
LABEL_20:
    v16 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)this)
                    + 24);
    v17 = *((_BYTE *)this + 8);
    v58 = 0;
    IPC::Connection::createSyncMessageEncoder(3632, 0, &v58, (uint64_t *)&v57);
    v9 = v57;
    *IPC::Encoder::grow(v57, 1uLL, 1) = v17;
    IPC::ArgumentCoder<WebCore::MediaEngineSupportParameters,void>::encode(v9, v3);
    IPC::Connection::sendSyncMessage(v16, v58, (uint64_t *)&v57, 0, (uint64_t)&v55, INFINITY);
    v18 = v56;
    if (v56)
    {
      if (v56 == 1)
      {
        LOBYTE(v49) = v55;
        goto LABEL_27;
      }
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    else
    {
      v3 = v55;
      v13 = *(const WTF::StringImpl **)(v55 + 8);
      v19 = *(char **)v55;
      v20 = *(_QWORD *)(v55 + 16) - *(_QWORD *)v55;
      if ((unint64_t)v13 <= v20)
        goto LABEL_70;
      v21 = &v19[v20];
      *(_QWORD *)(v55 + 16) = v21 + 1;
      if (v19)
      {
        LODWORD(v9) = *v21;
        if (v9 >= 3)
          goto LABEL_72;
        v55 = 0;
        v49 = v3;
        v50 = (char)v9;
LABEL_27:
        v51 = v18;
        v22 = v18;
LABEL_28:
        ((void (*)(char *, uint64_t *))off_1E34B3988[v22])(&v59, &v55);
        while (1)
        {
          v23 = v57;
          v57 = 0;
          if (v23)
          {
            IPC::Encoder::~Encoder(v23, v19);
            WTF::fastFree(v24, v25);
          }
          if (v18)
            v3 = 0;
          else
            v3 = v9;
          if (v18)
          {
            LOBYTE(v3) = 0;
            v26 = 1;
            goto LABEL_59;
          }
          if (*((_BYTE *)this + 24))
            break;
LABEL_69:
          __break(1u);
LABEL_70:
          v43 = 0;
          v44 = 0;
          *(_QWORD *)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
          v45 = *(_QWORD *)(v3 + 24);
          if (v45)
          {
            if (v13)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v45 + 16))(v45);
              v44 = *(char **)v3;
              v43 = *(const WTF::StringImpl **)(v3 + 8);
            }
            else
            {
              v43 = 0;
              v44 = 0;
            }
          }
LABEL_71:
          v13 = 0;
          v19 = 0;
          *(_QWORD *)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
          v46 = *(_QWORD *)(v3 + 24);
          if (v46)
          {
            if (v43)
            {
              (*(void (**)(uint64_t, char *, const WTF::StringImpl *))(*(_QWORD *)v46 + 16))(v46, v44, v43);
              v19 = *(char **)v3;
              v13 = *(const WTF::StringImpl **)(v3 + 8);
            }
            else
            {
              v13 = 0;
              v19 = 0;
            }
          }
LABEL_72:
          *(_QWORD *)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
          v47 = *(_QWORD *)(v3 + 24);
          if (v47)
          {
            if (v13)
            {
              (*(void (**)(uint64_t, char *))(*(_QWORD *)v47 + 16))(v47, v19);
              v19 = *(char **)v3;
              v13 = *(const WTF::StringImpl **)(v3 + 8);
              v48 = *(_QWORD *)(v3 + 24);
              *(_QWORD *)v3 = 0;
              *(_QWORD *)(v3 + 8) = 0;
              if (v48)
              {
                if (v13)
                  (*(void (**)(uint64_t, char *))(*(_QWORD *)v48 + 16))(v48, v19);
              }
            }
          }
          LOBYTE(v49) = 13;
          v18 = 1;
          v51 = 1;
          v22 = v56;
          if (v56 != -1)
            goto LABEL_28;
        }
        v27 = *v5;
        if (*v5
          || (WTF::HashTable<std::tuple<WTF::String,BOOL,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<WTF::String,BOOL,BOOL,BOOL>,WebCore::MediaPlayerSupportsType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,BOOL,BOOL,BOOL>,WebCore::MediaPlayerSupportsType>>,WTF::DefaultHash<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,WTF::HashMap<std::tuple<WTF::String,BOOL,BOOL,BOOL>,WebCore::MediaPlayerSupportsType,WTF::DefaultHash<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,WTF::HashTraits<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,WTF::HashTraits<WebCore::MediaPlayerSupportsType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,BOOL,BOOL,BOOL>>>::expand(v5),
              (v27 = *v5) != 0))
        {
          v28 = *(_DWORD *)(v27 - 8);
        }
        else
        {
          v28 = 0;
        }
        v29 = WTF::TupleHash<WTF::String,BOOL,BOOL,BOOL>::hash<0ul>((uint64_t)&v52) & v28;
        v30 = v27 + 24 * v29;
        if (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,false>::isEmptyValue<std::tuple<WTF::String,BOOL,BOOL,BOOL>>(v30, v31, v32))
        {
          v34 = 0;
          v35 = 1;
          do
          {
            if (*(_QWORD *)v30 == -1)
            {
              v34 = v30;
            }
            else if ((WTF::TupleHash<WTF::String,BOOL,BOOL,BOOL>::equal<0ul>(v30, (uint64_t)&v52, v33) & 1) != 0)
            {
              goto LABEL_58;
            }
            v29 = (v29 + v35) & v28;
            v30 = v27 + 24 * v29;
            ++v35;
          }
          while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,false>::isEmptyValue<std::tuple<WTF::String,BOOL,BOOL,BOOL>>(v30, (uint64_t)v12, v33));
          if (v34)
          {
            *(_DWORD *)(v34 + 7) = 0;
            *(_QWORD *)v34 = 0;
            *(_BYTE *)(v34 + 16) = 0;
            --*(_DWORD *)(*v5 - 16);
            v30 = v34;
          }
        }
        WTF::String::operator=((WTF::StringImpl **)v30, (WTF::StringImpl *)&v52);
        *(_BYTE *)(v30 + 8) = v53;
        *(_WORD *)(v30 + 9) = v54;
        *(_BYTE *)(v30 + 16) = v3;
        v36 = *v5;
        if (*v5)
          v37 = *(_DWORD *)(v36 - 12) + 1;
        else
          v37 = 1;
        *(_DWORD *)(v36 - 12) = v37;
        v38 = *v5;
        if (*v5)
          v39 = *(_DWORD *)(v38 - 12);
        else
          v39 = 0;
        v40 = (*(_DWORD *)(v38 - 16) + v39);
        v41 = *(unsigned int *)(v38 - 4);
        if (v41 > 0x400)
        {
          if (v41 > 2 * v40)
            goto LABEL_58;
        }
        else if (3 * v41 > 4 * v40)
        {
LABEL_58:
          v26 = v51;
          if (v51 == -1)
            goto LABEL_60;
LABEL_59:
          ((void (*)(uint64_t *, uint64_t *))off_1E34B3978[v26])(&v55, &v49);
LABEL_60:
          v2 = v52;
          goto LABEL_61;
        }
        WTF::HashTable<std::tuple<WTF::String,BOOL,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<WTF::String,BOOL,BOOL,BOOL>,WebCore::MediaPlayerSupportsType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,BOOL,BOOL,BOOL>,WebCore::MediaPlayerSupportsType>>,WTF::DefaultHash<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,WTF::HashMap<std::tuple<WTF::String,BOOL,BOOL,BOOL>,WebCore::MediaPlayerSupportsType,WTF::DefaultHash<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,WTF::HashTraits<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,WTF::HashTraits<WebCore::MediaPlayerSupportsType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,BOOL,BOOL,BOOL>>>::expand(v5);
        goto LABEL_58;
      }
    }
    v43 = v13;
    v44 = v19;
    goto LABEL_71;
  }
  LOBYTE(v3) = *((_BYTE *)v9 + 16);
LABEL_61:
  v52 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v12);
    else
      *(_DWORD *)v2 -= 2;
  }
  return v3;
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages29RemoteMediaPlayerManagerProxy17GetSupportedTypesEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 8, a2);
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](IPC::Decoder **a1, IPC::Decoder *a2)
{
  IPC::Decoder *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    IPC::Decoder::~Decoder(result);
    return (IPC::Decoder *)WTF::fastFree(v4, v5);
  }
  return result;
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages29RemoteMediaPlayerManagerProxy21SupportsTypeAndCodecsEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

uint64_t *IPC::Decoder::operator>><std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t *a1, void *a2)
{
  void *v4;
  uint64_t v6[2];
  char v7;

  IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a1, a2, (uint64_t)v6);
  std::__optional_storage_base<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>>((WTF *)a2, v6);
  if (v7)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, v4);
  return a1;
}

WTF *std::__optional_storage_base<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>>(WTF *result, uint64_t *a2)
{
  uint64_t v2;

  if (*((unsigned __int8 *)result + 16) == *((unsigned __int8 *)a2 + 16))
  {
    if (*((_BYTE *)result + 16))
      return WTF::GenericHashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::assignToEmpty<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)result, a2);
  }
  else if (*((_BYTE *)result + 16))
  {
    result = (WTF *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)result, a2);
    *((_BYTE *)result + 16) = 0;
  }
  else
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = 0;
    v2 = *a2;
    *a2 = 0;
    *(_QWORD *)result = v2;
    LODWORD(v2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 0;
    *((_DWORD *)result + 2) = v2;
    LODWORD(v2) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = 0;
    *((_DWORD *)result + 3) = v2;
    *((_BYTE *)result + 16) = 1;
  }
  return result;
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9UniqueRefIN3IPC7DecoderEEENSA_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

unint64_t WTF::TupleHash<WTF::String,BOOL,BOOL,BOOL>::hash<0ul>(uint64_t a1)
{
  WTF::StringImpl *v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(WTF::StringImpl **)a1;
  v3 = *((_DWORD *)v2 + 4);
  if (v3 >= 0x100)
    v4 = v3 >> 8;
  else
    v4 = WTF::StringImpl::hashSlowCase(v2);
  v5 = ~(*(unsigned __int8 *)(a1 + 8) << 15) + *(unsigned __int8 *)(a1 + 8);
  v6 = (9 * (v5 ^ (v5 >> 10))) ^ ((9 * (v5 ^ (v5 >> 10))) >> 6);
  v7 = ~(*(unsigned __int8 *)(a1 + 9) << 15) + *(unsigned __int8 *)(a1 + 9);
  v8 = (9 * (v7 ^ (v7 >> 10))) ^ ((9 * (v7 ^ (v7 >> 10))) >> 6);
  v9 = ~(*(unsigned __int8 *)(a1 + 10) << 15) + *(unsigned __int8 *)(a1 + 10);
  v10 = (9 * (v9 ^ (v9 >> 10))) ^ ((9 * (v9 ^ (v9 >> 10))) >> 6);
  return (0xD7862706ELL
        * (unint64_t)(277951225 * v4
                           + 95187966
                           * ((0xD7862706ELL
                                           * (unint64_t)(277951225
                                                              * ((v6 + ~(v6 << 11)) ^ ((v6 + ~(v6 << 11)) >> 16))
                                                              + 95187966
                                                              * ((0xD7862706ELL
                                                                              * (unint64_t)(277951225
                                                                                                 * ((v8 + ~(v8 << 11)) ^ ((v8 + ~(v8 << 11)) >> 16))
                                                                                                 + 95187966
                                                                                                 * ((v10 + ~(v10 << 11)) ^ ((v10 + ~(v10 << 11)) >> 16)))) >> 4))) >> 4))) >> 4;
}

BOOL WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,false>::isEmptyValue<std::tuple<WTF::String,BOOL,BOOL,BOOL>>(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  BOOL v4;

  if (WTF::equal(*(WTF **)a1, 0, a3))
    v4 = *(_BYTE *)(a1 + 8) == 0;
  else
    v4 = 0;
  return v4 && *(_BYTE *)(a1 + 9) == 0 && *(_BYTE *)(a1 + 10) == 0;
}

uint64_t WTF::TupleHash<WTF::String,BOOL,BOOL,BOOL>::equal<0ul>(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t result;

  result = WTF::equal(*(WTF **)a1, *(const WTF::StringImpl **)a2, a3);
  if ((_DWORD)result)
    return *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8)
        && *(unsigned __int8 *)(a1 + 9) == *(unsigned __int8 *)(a2 + 9)
        && *(unsigned __int8 *)(a1 + 10) == *(unsigned __int8 *)(a2 + 10);
  return result;
}

uint64_t WTF::HashTable<std::tuple<WTF::String,BOOL,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<WTF::String,BOOL,BOOL,BOOL>,WebCore::MediaPlayerSupportsType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,BOOL,BOOL,BOOL>,WebCore::MediaPlayerSupportsType>>,WTF::DefaultHash<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,WTF::HashMap<std::tuple<WTF::String,BOOL,BOOL,BOOL>,WebCore::MediaPlayerSupportsType,WTF::DefaultHash<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,WTF::HashTraits<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,WTF::HashTraits<WebCore::MediaPlayerSupportsType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,BOOL,BOOL,BOOL>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  unsigned int v2;
  int v3;
  unsigned int v4;
  uint64_t result;
  WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  _BOOL4 v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;

  v1 = *a1;
  if (*a1)
  {
    v2 = *(_DWORD *)(v1 - 4);
    v3 = *(_DWORD *)(v1 - 12);
    if (v2)
    {
      v4 = v2 << (6 * v3 >= 2 * v2);
      goto LABEL_6;
    }
  }
  else
  {
    v2 = 0;
    v3 = 0;
  }
  v4 = 8;
LABEL_6:
  result = WTF::fastMalloc((WTF *)(24 * v4 + 16));
  if (v4)
  {
    v8 = v4;
    v9 = (_BYTE *)(result + 32);
    do
    {
      *(_DWORD *)(v9 - 9) = 0;
      *((_QWORD *)v9 - 2) = 0;
      *v9 = 0;
      v9 += 24;
      --v8;
    }
    while (v8);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v4;
  *(_DWORD *)(*a1 - 8) = v4 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v3;
  if (v2)
  {
    v10 = 0;
    v11 = v2;
    v24 = v2;
    do
    {
      v12 = v1 + 24 * v10;
      if (*(_QWORD *)v12 != -1)
      {
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,false>::isEmptyValue<std::tuple<WTF::String,BOOL,BOOL,BOOL>>(v1 + 24 * v10, (uint64_t)v6, v7))
        {
          v13 = *(WTF::StringImpl **)v12;
          *(_QWORD *)v12 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, v6);
            else
              *(_DWORD *)v13 -= 2;
          }
        }
        else
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = WTF::TupleHash<WTF::String,BOOL,BOOL,BOOL>::hash<0ul>(v1 + 24 * v10);
          v17 = 0;
          do
          {
            v18 = v16 & v15;
            v19 = v14 + 24 * (v16 & v15);
            v20 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,false>::isEmptyValue<std::tuple<WTF::String,BOOL,BOOL,BOOL>>(v19, (uint64_t)v6, v7);
            v16 = ++v17 + v18;
          }
          while (!v20);
          v21 = *(WTF::StringImpl **)v19;
          *(_QWORD *)v19 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v6);
            else
              *(_DWORD *)v21 -= 2;
          }
          v22 = *(WTF::StringImpl **)v12;
          *(_QWORD *)v12 = 0;
          *(_QWORD *)v19 = v22;
          *(_BYTE *)(v19 + 8) = *(_BYTE *)(v12 + 8);
          *(_BYTE *)(v19 + 9) = *(_BYTE *)(v12 + 9);
          *(_BYTE *)(v19 + 10) = *(_BYTE *)(v12 + 10);
          *(_BYTE *)(v14 + 24 * v18 + 16) = *(_BYTE *)(v1 + 24 * v10 + 16);
          v23 = *(WTF::StringImpl **)v12;
          *(_QWORD *)v12 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v6);
            else
              *(_DWORD *)v23 -= 2;
          }
          v11 = v24;
        }
      }
      ++v10;
    }
    while (v10 != v11);
  }
  else if (!v1)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v1 - 16), v6);
}

_DWORD *WebKit::RemoteMediaPlayerProxy::didReceiveMessage(WebKit::RemoteMediaPlayerProxy *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  BOOL v5;
  _DWORD *v6;
  uint64_t *v7;
  unsigned __int16 v10;
  double v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  char v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  unsigned __int8 *v31;
  unsigned int v32;
  BOOL v33;
  uint64_t v34;
  const char **v35;
  WTF::StringImpl *v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  unsigned __int16 v42;
  BOOL v43;
  unint64_t v44;
  unsigned __int8 *v45;
  unsigned int v46;
  unsigned __int16 v47;
  unint64_t v48;
  unsigned __int8 *v49;
  unsigned int v50;
  unsigned __int8 v51;
  unsigned __int16 v52;
  unint64_t v53;
  unsigned __int8 *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned __int8 v57;
  unint64_t v58;
  char v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  float *v63;
  IntSize v64;
  float v65;
  IntSize v66;
  WTF::StringImpl *v67;
  unint64_t v68;
  unint64_t v69;
  unsigned __int8 *v70;
  unsigned int v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unsigned __int8 *v91;
  unsigned int v92;
  unint64_t v93;
  char v94;
  unsigned __int16 v95;
  uint64_t v96;
  char v97;
  WebCore::MediaPlayer *v98;
  double v99;
  char v100;
  uint64_t v101;
  char v102;
  WebCore::MediaPlayer *v103;
  unsigned __int16 v104;
  int v105;
  unsigned __int16 v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unsigned __int8 *v110;
  WebCore::MediaPlayer *v111;
  WebCore::MediaPlayer *v112;
  WTF::StringImpl *v113;
  __int128 v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  double v117;
  char v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  unint64_t v123;
  WTF::StringImpl *v124;
  uint64_t v125;
  uint64_t v126;
  WTF::StringImpl *v127;
  unint64_t v128;
  WTF::StringImpl *v129;
  uint64_t v130;
  uint64_t v131;
  WTF::StringImpl *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  WTF::StringImpl *v176;
  uint64_t v177;
  _BYTE v178[24];
  _BYTE v179[24];
  char v180;
  _BYTE v181[24];
  _BYTE v182[24];
  char v183;
  WTF::StringImpl *v184;
  unint64_t v185;
  WTF::StringImpl *v186;
  BOOL v187;
  char v188;
  const char **v189;
  char v190;
  char v191;
  WTF::StringImpl *v192;
  char v193;
  WTF::StringImpl *v194;
  char v195;
  char v196;

  v6 = (_DWORD *)((char *)this + 16);
  ++*((_DWORD *)this + 4);
  v7 = (uint64_t *)a3;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x45F:
      v10 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if (v10 >= 0x100u)
        WebKit::RemoteMediaPlayerProxy::acceleratedRenderingStateChanged(this, v10 != 0);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x460:
      WebCore::MediaPlayer::applicationDidBecomeActive(*((WebCore::MediaPlayer **)this + 15));
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x461:
      WebCore::MediaPlayer::applicationWillResignActive(*((WebCore::MediaPlayer **)this + 15));
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x462:
      *(_QWORD *)v181 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      *(_QWORD *)&v181[8] = v76;
      if ((_BYTE)v76)
        WebKit::RemoteMediaPlayerProxy::attemptToDecryptWithInstance((uint64_t)this, v181);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x463:
      IPC::Decoder::decode<std::tuple<unsigned long long,BOOL>>(v181, a3);
      if (v181[16])
        WebKit::RemoteMediaPlayerProxy::audioTrackSetEnabled((uint64_t)this, *(uint64_t *)v181, v181[8]);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x464:
      WebCore::MediaPlayer::beginSimulatedHDCPError(*((WebCore::MediaPlayer **)this + 15));
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x465:
      WTF::RunLoop::TimerBase::stop((WebKit::RemoteMediaPlayerProxy *)((char *)this + 192));
      WebCore::MediaPlayer::cancelLoad(*((WebCore::MediaPlayer **)this + 15));
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x466:
      *(_QWORD *)v181 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      *(_QWORD *)&v181[8] = v77;
      if ((_BYTE)v77)
        WebKit::RemoteMediaPlayerProxy::cdmInstanceAttached((uint64_t)this, v181);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x467:
      *(_QWORD *)v181 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      *(_QWORD *)&v181[8] = v87;
      if ((_BYTE)v87)
        WebKit::RemoteMediaPlayerProxy::cdmInstanceDetached((uint64_t)this, v181);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x468:
      WebKit::RemoteMediaPlayerProxy::createAudioSourceProvider(this);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x469:
      v83 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v84)
      {
        *(_QWORD *)v181 = v83;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v181[8], a2);
        v85 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v85 = off_1E34B39F8;
        v85[1] = *(_QWORD *)v181;
        v86 = *(_QWORD *)&v181[8];
        *(_QWORD *)&v181[8] = 0;
        v85[2] = v86;
        *(_QWORD *)v178 = v85;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v181[8]);
        WebKit::RemoteMediaPlayerProxy::didLoadingProgress();
        goto LABEL_125;
      }
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x46A:
      WebCore::MediaPlayer::endSimulatedHDCPError(*((WebCore::MediaPlayer **)this + 15));
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x46B:
      if ((unsigned __int16)IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3) >= 0x100u)
        WebCore::MediaPlayer::setInFullscreenOrPictureInPicture(*((WebCore::MediaPlayer **)this + 15));
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x46C:
      WebCore::MediaPlayer::keyAdded(*((WebCore::MediaPlayer **)this + 15));
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x46D:
      IPC::Decoder::decode<WTF::URL>((uint64_t *)a3, v178);
      if (!v179[16])
        goto LABEL_274;
      IPC::Decoder::decode<std::optional<WebKit::SandboxExtensionHandle>>(v7, (uint64_t)&v189);
      if (!v191)
      {
        v37 = 0;
        v181[0] = 0;
        v188 = 0;
        goto LABEL_216;
      }
      IPC::Decoder::decode<WebCore::ContentType>(v7, (uint64_t)&v194);
      if (!v196)
      {
        v37 = 0;
        v181[0] = 0;
        v188 = 0;
        goto LABEL_213;
      }
      IPC::Decoder::decode<WTF::String>(v7, &v192);
      if (!v193)
      {
        v37 = 0;
        v181[0] = 0;
        v188 = 0;
        goto LABEL_192;
      }
      v13 = v7[1];
      v29 = (WTF::StringImpl *)*v7;
      v30 = v7[2] - *v7;
      if (v13 <= v30)
      {
        v171 = 0;
        v172 = 0;
        *v7 = 0;
        v7[1] = 0;
        v173 = v7[3];
        if (v173)
        {
          if (v13)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v173 + 16))(v173);
            v172 = *v7;
            v171 = v7[1];
          }
          else
          {
            v171 = 0;
            v172 = 0;
          }
        }
        goto LABEL_294;
      }
      v31 = (unsigned __int8 *)v29 + v30;
      v7[2] = (uint64_t)(v31 + 1);
      if (!v29)
      {
        v171 = v13;
        v172 = 0;
LABEL_294:
        v13 = 0;
        v29 = 0;
        *v7 = 0;
        v7[1] = 0;
        v174 = v7[3];
        if (v174)
        {
          if (v171)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v174 + 16))(v174, v172, v171);
            v29 = (WTF::StringImpl *)*v7;
            v13 = v7[1];
          }
          else
          {
            v13 = 0;
            v29 = 0;
          }
        }
        goto LABEL_295;
      }
      v32 = *v31;
      if (v32 < 2)
      {
        v33 = v32 != 0;
        if (!v179[16] || !v191 || !v196)
          goto LABEL_242;
        v34 = *(_QWORD *)v178;
        *(_QWORD *)v178 = 0;
        *(_QWORD *)v181 = v34;
        *(_OWORD *)&v181[8] = *(_OWORD *)&v178[8];
        *(_OWORD *)v182 = *(_OWORD *)v179;
        *(_DWORD *)&v178[8] &= ~1u;
        v182[16] = 0;
        v183 = 0;
        if (v190)
        {
          v35 = v189;
          v189 = 0;
          *(_QWORD *)&v182[16] = v35;
          v183 = 1;
        }
        v36 = v194;
        v194 = 0;
        v184 = v36;
        LOBYTE(v185) = v195;
        v3 = v192;
        v186 = v192;
        v187 = v33;
        v37 = 1;
        v188 = 1;
        goto LABEL_192;
      }
LABEL_295:
      *v7 = 0;
      v7[1] = 0;
      v175 = v7[3];
      if (v175 && v13)
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v175 + 16))(v175, v29);
      v181[0] = 0;
      v188 = 0;
      if (v193)
      {
        v176 = v192;
        v192 = 0;
        if (v176)
        {
          if (*(_DWORD *)v176 != 2)
          {
            v37 = 0;
            *(_DWORD *)v176 -= 2;
            goto LABEL_192;
          }
          WTF::StringImpl::destroy(v176, v29);
        }
      }
      v37 = 0;
LABEL_192:
      if (v196)
      {
        v121 = v194;
        v194 = 0;
        if (v121)
        {
          if (*(_DWORD *)v121 == 2)
            WTF::StringImpl::destroy(v121, v29);
          else
            *(_DWORD *)v121 -= 2;
        }
      }
LABEL_213:
      if (v191 && v190)
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v189);
LABEL_216:
      if (v179[16])
      {
        v127 = *(WTF::StringImpl **)v178;
        *(_QWORD *)v178 = 0;
        if (v127)
        {
          if (*(_DWORD *)v127 == 2)
            WTF::StringImpl::destroy(v127, v29);
          else
            *(_DWORD *)v127 -= 2;
        }
      }
      if (!v37)
      {
LABEL_274:
        v152 = *v7;
        v150 = v7[1];
        *v7 = 0;
        v7[1] = 0;
        v151 = v7[3];
        if (!v151)
          return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
LABEL_276:
        if (v150)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v151 + 16))(v151, v152);
        return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
      }
      v128 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v7);
      if (!(_BYTE)v115)
      {
LABEL_228:
        v186 = 0;
        if (v3)
        {
          if (*(_DWORD *)v3 == 2)
            WTF::StringImpl::destroy(v3, v115);
          else
            *(_DWORD *)v3 -= 2;
        }
        v132 = v184;
        v184 = 0;
        if (v132)
        {
          if (*(_DWORD *)v132 == 2)
            WTF::StringImpl::destroy(v132, v115);
          else
            *(_DWORD *)v132 -= 2;
        }
        if (v183)
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v182[16]);
        goto LABEL_238;
      }
      *(_QWORD *)v178 = v128;
      v7 = (uint64_t *)&v178[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v178[8], a2);
      v129 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v129 = off_1E34B39A8;
      *((_QWORD *)v129 + 1) = *(_QWORD *)v178;
      v130 = *(_QWORD *)&v178[8];
      *(_QWORD *)&v178[8] = 0;
      *((_QWORD *)v129 + 2) = v130;
      v194 = v129;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v178[8]);
      if (!v188)
        goto LABEL_242;
      WebKit::RemoteMediaPlayerProxy::load((uint64_t)this, (WTF::URL *)v181, (uint64_t *)&v182[16], (WebCore::ContentType *)&v184, (WTF::String *)&v186, v187, (uint64_t *)&v194);
      v131 = (uint64_t)v194;
      v194 = 0;
      if (v131)
        (*(void (**)(uint64_t))(*(_QWORD *)v131 + 8))(v131);
      if (v188)
      {
        v3 = v186;
        goto LABEL_228;
      }
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x46E:
      IPC::Decoder::decode<WTF::URL>((uint64_t *)a3, v178);
      if (!v179[16])
        goto LABEL_274;
      IPC::Decoder::decode<WebCore::ContentType>(v7, (uint64_t)&v194);
      if (!v196)
      {
        v74 = 0;
        v181[0] = 0;
        LOBYTE(v186) = 0;
        goto LABEL_197;
      }
      v68 = v7[1];
      v67 = (WTF::StringImpl *)*v7;
      v69 = v7[2] - *v7;
      if (v68 <= v69)
      {
        v162 = 0;
        v163 = 0;
        *v7 = 0;
        v7[1] = 0;
        v164 = v7[3];
        if (v164)
        {
          if (v68)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v164 + 16))(v164);
            v163 = *v7;
            v162 = v7[1];
          }
          else
          {
            v162 = 0;
            v163 = 0;
          }
        }
      }
      else
      {
        v70 = (unsigned __int8 *)v67 + v69;
        v7[2] = (uint64_t)(v70 + 1);
        if (v67)
        {
          v71 = *v70;
          if (v71 >= 2)
            goto LABEL_285;
          v5 = v71 != 0;
          v72 = IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,void>::decode(v7);
          if ((_BYTE)v67)
          {
            if (!v179[16] || !v196)
            {
LABEL_242:
              __break(1u);
LABEL_243:
              v133 = 0;
              v134 = 0;
              *v7 = 0;
              v7[1] = 0;
              v135 = v7[3];
              if (v135)
              {
                if (v13)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v135 + 16))(v135);
                  v134 = *v7;
                  v133 = v7[1];
                }
                else
                {
                  v133 = 0;
                  v134 = 0;
                }
              }
              goto LABEL_244;
            }
            v3 = (WTF::StringImpl *)v72;
            v73 = *(_QWORD *)v178;
            *(_QWORD *)v178 = 0;
            *(_QWORD *)v181 = v73;
            *(_OWORD *)&v181[8] = *(_OWORD *)&v178[8];
            *(_OWORD *)v182 = *(_OWORD *)v179;
            *(_DWORD *)&v178[8] &= ~1u;
            v4 = v194;
            v194 = 0;
            *(_QWORD *)&v182[16] = v4;
            v183 = v195;
            LOBYTE(v184) = v5;
            v74 = 1;
            v185 = v72;
LABEL_99:
            LOBYTE(v186) = v74;
            if (v196)
            {
              v75 = v194;
              v194 = 0;
              if (v75)
              {
                if (*(_DWORD *)v75 == 2)
                  WTF::StringImpl::destroy(v75, v67);
                else
                  *(_DWORD *)v75 -= 2;
              }
            }
LABEL_197:
            if (v179[16])
            {
              v122 = *(WTF::StringImpl **)v178;
              *(_QWORD *)v178 = 0;
              if (v122)
              {
                if (*(_DWORD *)v122 == 2)
                  WTF::StringImpl::destroy(v122, v67);
                else
                  *(_DWORD *)v122 -= 2;
              }
            }
            if (!v74)
              goto LABEL_274;
            v123 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v7);
            if ((_BYTE)v115)
            {
              *(_QWORD *)v178 = v123;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v178[8], a2);
              v124 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
              *(_QWORD *)v124 = off_1E34B39D0;
              *((_QWORD *)v124 + 1) = *(_QWORD *)v178;
              v125 = *(_QWORD *)&v178[8];
              *(_QWORD *)&v178[8] = 0;
              *((_QWORD *)v124 + 2) = v125;
              v194 = v124;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v178[8]);
              WebKit::RemoteMediaPlayerProxy::loadMediaSource((uint64_t)this, (const WTF::URL *)v181, (const WebCore::ContentType *)&v182[16], v5, (uint64_t)v3, (uint64_t *)&v194);
              v126 = (uint64_t)v194;
              v194 = 0;
              if (v126)
                (*(void (**)(uint64_t))(*(_QWORD *)v126 + 8))(v126);
              if (!(_BYTE)v186)
                return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
              v4 = *(WTF::StringImpl **)&v182[16];
            }
            *(_QWORD *)&v182[16] = 0;
            if (v4)
            {
              if (*(_DWORD *)v4 == 2)
                WTF::StringImpl::destroy(v4, v115);
              else
                *(_DWORD *)v4 -= 2;
            }
LABEL_238:
            v120 = *(WTF::StringImpl **)v181;
            *(_QWORD *)v181 = 0;
            if (v120)
            {
LABEL_239:
              if (*(_DWORD *)v120 == 2)
                WTF::StringImpl::destroy(v120, v115);
              else
                *(_DWORD *)v120 -= 2;
            }
            return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
          }
          goto LABEL_284;
        }
        v162 = v68;
        v163 = 0;
      }
      v68 = 0;
      v67 = 0;
      *v7 = 0;
      v7[1] = 0;
      v165 = v7[3];
      if (!v165)
        goto LABEL_285;
      if (!v162)
      {
        v68 = 0;
        v67 = 0;
LABEL_285:
        *v7 = 0;
        v7[1] = 0;
        v166 = v7[3];
        if (v166 && v68)
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v166 + 16))(v166, v67);
        v74 = 0;
        v181[0] = 0;
        goto LABEL_99;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v165 + 16))(v165, v163, v162);
LABEL_284:
      v67 = (WTF::StringImpl *)*v7;
      v68 = v7[1];
      goto LABEL_285;
    case 0x46F:
      v27 = *((_QWORD *)this + 14);
      v181[0] = 0;
      IPC::Connection::send<Messages::MediaPlayerPrivateRemote::ActiveSourceBuffersChanged>(v27, (uint64_t)v181, *((_QWORD *)this + 11), 0, 0);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x470:
      WebCore::MediaPlayer::notifyTrackModeChanged(*((WebCore::MediaPlayer **)this + 15));
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x471:
      WebKit::RemoteMediaPlayerProxy::pause((WebCore::MediaPlayer **)this);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x472:
      v101 = IPC::Decoder::decode<std::tuple<WTF::Seconds>>((uint64_t *)a3);
      if (v102)
      {
        *(_QWORD *)v181 = v101;
        v103 = (WebCore::MediaPlayer *)*((_QWORD *)this + 15);
        if (v103)
          WebCore::MediaPlayer::pauseAtHostTime(v103, (const WTF::MonotonicTime *)v181);
      }
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x473:
      IPC::Decoder::decode<std::tuple<WTF::MediaTime>>((uint64_t *)a3, (uint64_t)v181);
      if (!v181[16])
        return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
      v78 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v7);
      if (!v79)
        return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
      *(_QWORD *)v178 = v78;
      v7 = (uint64_t *)&v178[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v178[8], a2);
      v80 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v80 = off_1E34B3A20;
      *((_QWORD *)v80 + 1) = *(_QWORD *)v178;
      v81 = *(_QWORD *)&v178[8];
      *(_QWORD *)&v178[8] = 0;
      *((_QWORD *)v80 + 2) = v81;
      v194 = v80;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v178[8]);
      if (!v181[16])
        goto LABEL_242;
      WebKit::RemoteMediaPlayerProxy::performTaskAtTime((uint64_t)this, (WTF::MediaTime *)v181, (uint64_t *)&v194);
      v82 = (uint64_t)v194;
      v194 = 0;
      if (v82)
LABEL_126:
        (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x474:
      WebKit::RemoteMediaPlayerProxy::play((WebCore::MediaPlayer **)this);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x475:
      v96 = IPC::Decoder::decode<std::tuple<WTF::Seconds>>((uint64_t *)a3);
      if (v97)
      {
        *(_QWORD *)v181 = v96;
        v98 = (WebCore::MediaPlayer *)*((_QWORD *)this + 15);
        if (v98)
          WebCore::MediaPlayer::playAtHostTime(v98, (const WTF::MonotonicTime *)v181);
      }
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x476:
      IPC::Decoder::decode<WebCore::LayoutRect>((uint64_t *)a3, (uint64_t)v181);
      if (!v181[16])
        goto LABEL_274;
      *(_OWORD *)v178 = *(_OWORD *)v181;
      v178[16] = 1;
      WebKit::RemoteMediaPlayerProxy::playerContentBoxRectChanged((uint64_t)this, (const WebCore::LayoutRect *)v178);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x477:
      v13 = *((_QWORD *)a3 + 1);
      v14 = *v7;
      v44 = v7[2] - *v7;
      if (v13 <= v44)
        goto LABEL_243;
      v45 = (unsigned __int8 *)(v14 + v44);
      v7[2] = (uint64_t)(v45 + 1);
      if (!v14)
        goto LABEL_335;
      v46 = *v45;
      if (v46 >= 2)
        goto LABEL_245;
      v47 = IPC::Decoder::decode<WebCore::MediaPlayerPreload>(v7);
      if (v47 < 0x100u)
        goto LABEL_274;
      v13 = v7[1];
      v14 = *v7;
      v48 = v7[2] - *v7;
      if (v13 <= v48)
        goto LABEL_243;
      v49 = (unsigned __int8 *)(v14 + v48);
      v7[2] = (uint64_t)(v49 + 1);
      if (!v14)
        goto LABEL_335;
      v50 = *v49;
      if (v50 >= 2)
        goto LABEL_245;
      v51 = v47;
      v52 = IPC::Decoder::decode<WebCore::MediaPlayerPreload>(v7);
      if (v52 < 0x100u)
        goto LABEL_274;
      v13 = v7[1];
      v14 = *v7;
      v53 = v7[2] - *v7;
      if (v13 <= v53)
        goto LABEL_243;
      v54 = (unsigned __int8 *)(v14 + v53);
      v7[2] = (uint64_t)(v54 + 1);
      if (!v14)
      {
LABEL_335:
        v133 = v13;
        v134 = v14;
LABEL_244:
        v13 = 0;
        v14 = 0;
        *v7 = 0;
        v7[1] = 0;
        v136 = v7[3];
        if (!v136)
          goto LABEL_245;
        if (!v133)
        {
          v13 = 0;
          v14 = 0;
          goto LABEL_245;
        }
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v136 + 16))(v136, v134, v133);
        goto LABEL_304;
      }
      v55 = *v54;
      if (v55 >= 2)
      {
LABEL_245:
        *v7 = 0;
        v7[1] = 0;
        v137 = v7[3];
        if (v137 && v13)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v137 + 16))(v137, v14);
        goto LABEL_274;
      }
      if (v13 > (unint64_t)&v54[-v14 + 1])
      {
        v7[2] = (uint64_t)(v54 + 2);
        v56 = v54[1];
        if (v56 >= 2)
          goto LABEL_336;
        v57 = v52;
        v58 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)v7);
        if (v59)
        {
          v60 = v7[1];
          v61 = *v7;
          v62 = ((v7[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *v7;
          if (v60 < v62 || v60 - v62 <= 3)
          {
            v167 = 0;
            v168 = 0;
            *v7 = 0;
            v7[1] = 0;
            v169 = v7[3];
            if (v169)
            {
              if (v60)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v169 + 16))(v169);
                v168 = *v7;
                v167 = v7[1];
              }
              else
              {
                v167 = 0;
                v168 = 0;
              }
            }
          }
          else
          {
            v63 = (float *)(v61 + v62);
            v7[2] = (uint64_t)(v63 + 1);
            if (v61)
            {
              v64 = (IntSize)v58;
              v65 = *v63;
              if ((unsigned __int16)IPC::Decoder::decode<WebCore::DynamicRangeMode>(v7) <= 0xFFu)
                goto LABEL_274;
              v66 = v64;
              WebKit::RemoteMediaPlayerProxy::prepareForPlayback((uint64_t)this, v65, v46 != 0, v51, v50 != 0, v57, v55 != 0, v56 != 0, v66);
              return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
            }
            v167 = v60;
            v168 = 0;
          }
          *v7 = 0;
          v7[1] = 0;
          v170 = v7[3];
          if (v170 && v167)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v170 + 16))(v170, v168);
          goto LABEL_274;
        }
LABEL_304:
        v14 = *v7;
        v13 = v7[1];
        goto LABEL_245;
      }
      v20 = 0;
      v21 = 0;
      *v7 = 0;
      v7[1] = 0;
      v159 = v7[3];
      if (!v159)
        goto LABEL_273;
      goto LABEL_320;
    case 0x478:
      WebKit::RemoteMediaPlayerProxy::prepareForRendering(this);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x479:
      WebKit::RemoteMediaPlayerProxy::prepareToPlay(this);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x47A:
      v23 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v24)
      {
        *(_QWORD *)v181 = v23;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v181[8], a2);
        v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v25 = off_1E34B3A48;
        v25[1] = *(_QWORD *)v181;
        v26 = *(_QWORD *)&v181[8];
        *(_QWORD *)&v181[8] = 0;
        v25[2] = v26;
        *(_QWORD *)v178 = v25;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v181[8]);
        WebKit::RemoteMediaPlayerProxy::requestHostingContextID((uint64_t)this, (id *)v178);
LABEL_125:
        v82 = *(_QWORD *)v178;
        *(_QWORD *)v178 = 0;
        if (v82)
          goto LABEL_126;
      }
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x47B:
      IPC::Decoder::decode<std::tuple<WebCore::SeekTarget>>((uint64_t *)a3, (uint64_t)v181);
      if (v183)
        WebKit::RemoteMediaPlayerProxy::seekToTarget(this, (const WebCore::SeekTarget *)v181);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x47C:
      v107 = *((_QWORD *)a3 + 1);
      v108 = *(_QWORD *)a3;
      v109 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
      if (v107 <= v109)
      {
        v153 = 0;
        v154 = 0;
        *v7 = 0;
        v7[1] = 0;
        v155 = v7[3];
        if (v155)
        {
          if (v107)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v155 + 16))(v155, v108, v107);
            v154 = *v7;
            v153 = v7[1];
          }
          else
          {
            v153 = 0;
            v154 = 0;
          }
        }
      }
      else
      {
        v110 = (unsigned __int8 *)(v108 + v109);
        *((_QWORD *)a3 + 2) = v110 + 1;
        if (v108)
        {
          if (*v110 < 4u)
          {
            WebCore::MediaPlayer::setBufferingPolicy();
            return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
          }
LABEL_266:
          v149 = *v7;
          v157 = v7[1];
          *v7 = 0;
          v7[1] = 0;
          v151 = v7[3];
          if (!v151 || !v157)
            return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
          goto LABEL_268;
        }
        v153 = v107;
        v154 = 0;
      }
      *v7 = 0;
      v7[1] = 0;
      v156 = v7[3];
      if (v156 && v153)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v156 + 16))(v156, v154);
      goto LABEL_266;
    case 0x47D:
      v88 = *((_QWORD *)a3 + 1);
      v89 = *v7;
      v90 = v7[2] - *v7;
      if (v88 <= v90)
      {
        v144 = 0;
        v145 = 0;
        *v7 = 0;
        v7[1] = 0;
        v146 = v7[3];
        if (v146)
        {
          if (v88)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v146 + 16))(v146);
            v145 = *v7;
            v144 = v7[1];
          }
          else
          {
            v144 = 0;
            v145 = 0;
          }
        }
      }
      else
      {
        v91 = (unsigned __int8 *)(v89 + v90);
        v7[2] = (uint64_t)(v91 + 1);
        if (v89)
        {
          v92 = *v91;
          if (v92 < 2)
          {
            if (!v92)
            {
              v93 = 0;
              goto LABEL_180;
            }
            v93 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v7);
            if (v94)
            {
              LOBYTE(v92) = 1;
LABEL_180:
              *(_QWORD *)v181 = v93;
              v181[8] = v92;
              v181[16] = 1;
              WebKit::RemoteMediaPlayerProxy::setLegacyCDMSession((uint64_t)this, (uint64_t *)v181);
              return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
            }
LABEL_257:
            v149 = *v7;
            v150 = v7[1];
            *v7 = 0;
            v7[1] = 0;
            v151 = v7[3];
            if (v151)
            {
              if (v150)
              {
LABEL_268:
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v151 + 16))(v151, v149);
                v152 = *v7;
                v150 = v7[1];
                v151 = v7[3];
LABEL_260:
                *v7 = 0;
                v7[1] = 0;
                if (!v151)
                  return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
                goto LABEL_276;
              }
            }
            else
            {
              v150 = 0;
            }
            v152 = 0;
            goto LABEL_260;
          }
LABEL_256:
          *v7 = 0;
          v7[1] = 0;
          v148 = v7[3];
          if (v148 && v88)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v148 + 16))(v148, v89);
          goto LABEL_257;
        }
        v144 = v88;
        v145 = 0;
      }
      v88 = 0;
      v89 = 0;
      *v7 = 0;
      v7[1] = 0;
      v147 = v7[3];
      if (v147)
      {
        if (v144)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v147 + 16))(v147, v145, v144);
          v89 = *v7;
          v88 = v7[1];
        }
        else
        {
          v88 = 0;
          v89 = 0;
        }
      }
      goto LABEL_256;
    case 0x47E:
      if ((unsigned __int16)IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3) >= 0x100u)
        WebCore::MediaPlayer::setMuted(*((WebCore::MediaPlayer **)this + 15));
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x47F:
      v95 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if (v95 >= 0x100u)
        WebKit::RemoteMediaPlayerProxy::setPageIsVisible(this, v95 != 0);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x480:
      if ((unsigned __int16)IPC::Decoder::decode<WebCore::MediaPlayerPreload>(a3) <= 0xFFu)
        goto LABEL_274;
      WebCore::MediaPlayer::setPitchCorrectionAlgorithm();
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x481:
      if ((unsigned __int16)IPC::Decoder::decode<WebCore::DynamicRangeMode>(a3) <= 0xFFu)
        goto LABEL_274;
      if (*((_QWORD *)this + 15))
        WebCore::MediaPlayer::setPreferredDynamicRangeMode();
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x482:
      if ((unsigned __int16)IPC::Decoder::decode<WebCore::MediaPlayerPreload>(a3) <= 0xFFu)
        goto LABEL_274;
      WebCore::MediaPlayer::setPreload();
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x483:
      *(_QWORD *)v181 = IPC::Decoder::decode<std::tuple<WebCore::IntSize>>((unint64_t *)a3);
      *(_DWORD *)&v181[8] = v22;
      if ((_BYTE)v22)
        WebKit::RemoteMediaPlayerProxy::setPresentationSize((uint64_t)this, (const IntSize *)v181);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x484:
      if ((unsigned __int16)IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3) >= 0x100u)
        WebCore::MediaPlayer::setPreservesPitch(*((WebCore::MediaPlayer **)this + 15));
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x485:
      if ((unsigned __int16)IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3) >= 0x100u)
        WebCore::MediaPlayer::setPrivateBrowsingMode(*((WebCore::MediaPlayer **)this + 15));
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x486:
      v99 = COERCE_DOUBLE(IPC::Decoder::decode<std::tuple<double>>((uint64_t *)a3));
      if (v100)
        WebCore::MediaPlayer::setRate(*((WebCore::MediaPlayer **)this + 15), v99);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x487:
      v42 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if (v42 >= 0x100u)
      {
        v43 = v42 != 0;
        WebCore::MediaPlayer::setShouldCheckHardwareSupport(*((WebCore::MediaPlayer **)this + 15));
        *((_BYTE *)this + 856) = v43;
      }
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x488:
      if ((unsigned __int16)IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3) >= 0x100u)
        WebCore::MediaPlayer::setShouldContinueAfterKeyNeeded(*((WebCore::MediaPlayer **)this + 15));
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x489:
      v104 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if (v104 >= 0x100u)
      {
        v105 = v104 != 0;
        if (*((unsigned __int8 *)this + 732) != v105)
        {
          *((_BYTE *)this + 732) = v105;
          if (*((_QWORD *)this + 15))
            WebCore::MediaPlayer::setShouldDisableHDR(*((WebCore::MediaPlayer **)this + 15));
        }
      }
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x48A:
      if ((unsigned __int16)IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3) >= 0x100u)
        WebCore::MediaPlayer::setShouldDisableSleep(*((WebCore::MediaPlayer **)this + 15));
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x48B:
      v28 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if (v28 >= 0x100u)
        WebKit::RemoteMediaPlayerProxy::setShouldEnableAudioSourceProvider((WebCore::MediaPlayer **)this, v28 != 0);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x48C:
      if ((unsigned __int16)IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3) >= 0x100u)
        WebCore::MediaPlayer::setShouldMaintainAspectRatio(*((WebCore::MediaPlayer **)this + 15));
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x48D:
      if ((unsigned __int16)IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3) >= 0x100u)
        WebCore::MediaPlayer::setShouldPlayToPlaybackTarget(*((WebCore::MediaPlayer **)this + 15));
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x48E:
      if ((unsigned __int16)IPC::Decoder::decode<WebCore::CDMRequirement>((uint64_t *)a3) <= 0xFFu)
        goto LABEL_274;
      WebCore::MediaPlayer::setVideoFullscreenGravity();
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x48F:
      v38 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v38 & 0xFF00000000) != 0)
      {
        *((_DWORD *)this + 199) = v38;
        WebCore::MediaPlayer::setVideoFullscreenMode(*((WebCore::MediaPlayer **)this + 15));
      }
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x490:
      v39 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a3);
      if (v40)
      {
        v41 = v39;
        IPC::Decoder::takeLastAttachment((IPC::Decoder *)v7, v178);
        if (v178[4])
        {
          *(_QWORD *)v181 = v41;
          WTF::MachSendRight::MachSendRight();
          v181[12] = 1;
          if (!v178[4])
            goto LABEL_58;
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v178);
          if (v181[12])
            goto LABEL_58;
LABEL_250:
          v141 = *v7;
          v142 = v7[1];
          *v7 = 0;
          v7[1] = 0;
          v143 = v7[3];
          if (!v143)
            return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
          if (!v142)
            return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v143 + 16))(v143, v141);
          if (!v181[12])
            return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
LABEL_58:
          WebKit::RemoteMediaPlayerProxy::setVideoLayerSizeFenced(this, (const WebCore::FloatSize *)v181);
          if (v181[12])
            WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v181[8]);
          return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
        }
      }
      else
      {
        v138 = *v7;
        v139 = v7[1];
        *v7 = 0;
        v7[1] = 0;
        v140 = v7[3];
        if (v140 && v139)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v140 + 16))(v140, v138);
      }
      v181[0] = 0;
      v181[12] = 0;
      goto LABEL_250;
    case 0x491:
      v11 = COERCE_DOUBLE(IPC::Decoder::decode<std::tuple<double>>((uint64_t *)a3));
      if (v12)
        WebKit::RemoteMediaPlayerProxy::setVideoPlaybackMetricsUpdateInterval(this, v11);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x492:
      v117 = COERCE_DOUBLE(IPC::Decoder::decode<std::tuple<double>>((uint64_t *)a3));
      if (v118)
        WebCore::MediaPlayer::setVolume(*((WebCore::MediaPlayer **)this + 15), v117);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x493:
      IPC::Decoder::decode<WebKit::MediaPlaybackTargetContextSerialized>((uint64_t *)a3, (uint64_t)v181);
      if (!v183)
      {
        std::__optional_destruct_base<WebKit::MediaPlaybackTargetContextSerialized,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v181, v113);
        goto LABEL_274;
      }
      v178[8] = v181[8];
      *(_QWORD *)v178 = off_1E34AE7F0;
      *(_QWORD *)&v178[16] = *(_QWORD *)&v181[16];
      *(_DWORD *)v179 = *(_DWORD *)v182;
      v114 = *(_OWORD *)&v182[8];
      *(_QWORD *)&v181[16] = 0;
      *(_QWORD *)&v182[8] = 0;
      *(_QWORD *)&v182[16] = 0;
      *(_OWORD *)&v179[8] = v114;
      v180 = 1;
      std::__optional_destruct_base<WebKit::MediaPlaybackTargetContextSerialized,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v181, v113);
      WebKit::RemoteMediaPlayerProxy::setWirelessPlaybackTarget((uint64_t)this, (WebKit::MediaPlaybackTargetContextSerialized *)v178);
      if (!v180)
        return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
      v116 = *(WTF::StringImpl **)&v179[16];
      *(_QWORD *)&v179[16] = 0;
      if (v116)
      {
        if (*(_DWORD *)v116 == 2)
          WTF::StringImpl::destroy(v116, v115);
        else
          *(_DWORD *)v116 -= 2;
      }
      v119 = *(WTF::StringImpl **)&v179[8];
      *(_QWORD *)&v179[8] = 0;
      if (v119)
      {
        if (*(_DWORD *)v119 == 2)
          WTF::StringImpl::destroy(v119, v115);
        else
          *(_DWORD *)v119 -= 2;
      }
      v120 = *(WTF::StringImpl **)&v178[16];
      *(_QWORD *)&v178[16] = 0;
      if (!v120)
        return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
      goto LABEL_239;
    case 0x494:
      if ((unsigned __int16)IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3) >= 0x100u)
        WebKit::RemoteMediaPlayerProxy::setWirelessVideoPlaybackDisabled((WebCore::MediaPlayer **)this);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x495:
      v111 = (WebCore::MediaPlayer *)*((_QWORD *)this + 15);
      if (v111)
        WebCore::MediaPlayer::startVideoFrameMetadataGathering(v111);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x496:
      v112 = (WebCore::MediaPlayer *)*((_QWORD *)this + 15);
      if (v112)
        WebCore::MediaPlayer::stopVideoFrameMetadataGathering(v112);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x497:
      v13 = *((_QWORD *)a3 + 1);
      v14 = *v7;
      v15 = ((v7[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v7;
      if (v13 >= v15 && v13 - v15 > 7)
      {
        v17 = v14 + v15;
        v7[2] = v17 + 8;
        if (!v14)
        {
LABEL_336:
          v20 = v13;
          v21 = v14;
          goto LABEL_273;
        }
        if (v13 > v17 + 8 - v14)
        {
          v18 = *(_QWORD *)v17;
          v7[2] = v17 + 9;
          v19 = *(unsigned __int8 *)(v17 + 8);
          v20 = v13;
          v21 = v14;
          if (v19 >= 3)
            goto LABEL_273;
          WebKit::RemoteMediaPlayerProxy::textTrackSetMode((uint64_t)this, v18, v19);
          return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
        }
        v20 = 0;
        v21 = 0;
        *v7 = 0;
        v7[1] = 0;
        v159 = v7[3];
        if (!v159)
          goto LABEL_273;
        if (!v13)
        {
LABEL_342:
          v20 = 0;
          v21 = 0;
          goto LABEL_273;
        }
LABEL_320:
        (*(void (**)(uint64_t))(*(_QWORD *)v159 + 16))(v159);
        v20 = 0;
        v177 = v7[1];
        v158 = v7[3];
        *v7 = 0;
        v7[1] = 0;
        v21 = 0;
        if (!v158 || !v177)
        {
LABEL_273:
          *v7 = 0;
          v7[1] = 0;
          v160 = v7[3];
          if (v160 && v20)
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v160 + 16))(v160, v21, v20);
          goto LABEL_274;
        }
      }
      else
      {
        v20 = 0;
        v21 = 0;
        *v7 = 0;
        v7[1] = 0;
        v158 = v7[3];
        if (!v158)
          goto LABEL_273;
        if (!v13)
          goto LABEL_342;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v158 + 16))(v158);
      v21 = *v7;
      v20 = v7[1];
      goto LABEL_273;
    case 0x498:
      WebCore::MediaPlayer::tracksChanged(*((WebCore::MediaPlayer **)this + 15));
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x499:
      WebCore::MediaPlayer::updateVideoFullscreenInlineImage(*((WebCore::MediaPlayer **)this + 15));
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x49A:
      v106 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if (v106 >= 0x100u)
      {
        *((_BYTE *)this + 800) = v106 != 0;
        WebCore::MediaPlayer::videoFullscreenStandbyChanged(*((WebCore::MediaPlayer **)this + 15));
      }
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    case 0x49B:
      IPC::Decoder::decode<std::tuple<unsigned long long,BOOL>>(v181, a3);
      if (v181[16])
        WebKit::RemoteMediaPlayerProxy::videoTrackSetSelected((uint64_t)this, *(uint64_t *)v181, v181[8]);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
    default:
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v6);
  }
}

_DWORD *`non-virtual thunk to'WebKit::RemoteMediaPlayerProxy::didReceiveMessage(WebKit::RemoteMediaPlayerProxy *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  return WebKit::RemoteMediaPlayerProxy::didReceiveMessage((WebKit::RemoteMediaPlayerProxy *)((char *)this - 24), a2, a3);
}

uint64_t WebKit::RemoteMediaPlayerProxy::didReceiveSyncMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_DWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 16);
  switch(*(_WORD *)(a3 + 50))
  {
    case 0xE31:
      v5 = IPC::handleMessageSynchronous<Messages::RemoteMediaPlayerProxy::AccessLog,WebKit::RemoteMediaPlayerProxy,WebKit::RemoteMediaPlayerProxy,void ()(WTF::CompletionHandler<void ()(WTF::String)> &&)>(a2, a3, a4, a1, (void (*)(_QWORD *, _QWORD **))WebKit::RemoteMediaPlayerProxy::accessLog, 0);
      goto LABEL_9;
    case 0xE32:
      v5 = IPC::handleMessageSynchronous<Messages::RemoteMediaPlayerProxy::ColorSpace,WebKit::RemoteMediaPlayerProxy,WebKit::RemoteMediaPlayerProxy,void ()(WTF::CompletionHandler<void ()(WebCore::DestinationColorSpace)> &&)>(a2, a3, a4, a1, (void (*)(_QWORD *, _QWORD **))WebKit::RemoteMediaPlayerProxy::colorSpace, 0);
      goto LABEL_9;
    case 0xE33:
      v5 = IPC::handleMessageSynchronous<Messages::RemoteMediaPlayerProxy::ErrorLog,WebKit::RemoteMediaPlayerProxy,WebKit::RemoteMediaPlayerProxy,void ()(WTF::CompletionHandler<void ()(WTF::String)> &&)>(a2, a3, a4, a1, (void (*)(_QWORD *, _QWORD **))WebKit::RemoteMediaPlayerProxy::errorLog, 0);
      goto LABEL_9;
    case 0xE34:
      v5 = IPC::handleMessageSynchronous<Messages::RemoteMediaPlayerProxy::IsCrossOrigin,WebKit::RemoteMediaPlayerProxy,WebKit::RemoteMediaPlayerProxy,void ()(WebCore::SecurityOriginData,WTF::CompletionHandler<void ()(std::optional<BOOL>)> &&)>(a2, (uint64_t *)a3, a4, a1, (uint64_t (*)(_QWORD *, _BYTE *, uint64_t))WebKit::RemoteMediaPlayerProxy::isCrossOrigin, 0);
      goto LABEL_9;
    case 0xE35:
      v5 = IPC::handleMessageSynchronous<Messages::RemoteMediaPlayerProxy::NativeImageForCurrentTime,WebKit::RemoteMediaPlayerProxy,WebKit::RemoteMediaPlayerProxy,void ()(WTF::CompletionHandler<void ()(std::optional<WTF::MachSendRight> &&,WebCore::DestinationColorSpace)> &&)>(a2, a3, a4, a1, (void (*)(_QWORD *, _QWORD **))WebKit::RemoteMediaPlayerProxy::nativeImageForCurrentTime, 0);
      goto LABEL_9;
    case 0xE36:
      v5 = IPC::handleMessageSynchronous<Messages::RemoteMediaPlayerProxy::VideoFrameForCurrentTimeIfChanged,WebKit::RemoteMediaPlayerProxy,WebKit::RemoteMediaPlayerProxy,void ()(WTF::CompletionHandler<void ()(std::optional<WebKit::RemoteVideoFrameProxyProperties> &&,BOOL)> &&)>(a2, a3, a4, a1, (void (*)(_QWORD *, _QWORD **))WebKit::RemoteMediaPlayerProxy::videoFrameForCurrentTimeIfChanged, 0);
LABEL_9:
      v6 = v5;
      break;
    default:
      v6 = 0;
      break;
  }
  WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v4);
  return v6;
}

BOOL IPC::handleMessageSynchronous<Messages::RemoteMediaPlayerProxy::IsCrossOrigin,WebKit::RemoteMediaPlayerProxy,WebKit::RemoteMediaPlayerProxy,void ()(WebCore::SecurityOriginData,WTF::CompletionHandler<void ()(std::optional<BOOL>)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, uint64_t (*a5)(_QWORD *, _BYTE *, uint64_t), uint64_t a6)
{
  int v11;
  IPC::Encoder *v12;
  _QWORD *v13;
  unsigned __int8 **v14;
  void *v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  _QWORD *v19;
  IPC::Encoder *v21;
  unsigned __int8 **v22[2];
  _QWORD *v23;
  _BYTE v24[24];
  int v25;
  unsigned __int8 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<std::tuple<WebCore::SecurityOriginData>>(a2, (uint64_t)v24);
  v11 = v26;
  if (v26)
  {
    v12 = *a3;
    *a3 = 0;
    v21 = v12;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v22, a1);
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v13 = off_1E34B3A80;
    v13[1] = v21;
    v14 = v22[0];
    v21 = 0;
    v22[0] = 0;
    v13[2] = v14;
    v23 = v13;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v22);
    v16 = v21;
    v21 = 0;
    if (v16)
    {
      IPC::Encoder::~Encoder(v16, v15);
      WTF::fastFree(v17, v18);
    }
    if (!v26)
      __break(1u);
    IPC::callMemberFunction<WebKit::RemoteMediaPlayerProxy,WebKit::RemoteMediaPlayerProxy,void ()(WebCore::SecurityOriginData,WTF::CompletionHandler<void ()(std::optional<BOOL>)> &&),std::tuple<WebCore::SecurityOriginData>,void ()(std::optional<BOOL>)>(a4, a5, a6, (uint64_t)v24, (uint64_t)&v23);
    v19 = v23;
    v23 = 0;
    if (v19)
      (*(void (**)(_QWORD *))(*v19 + 8))(v19);
    if (v26 && v25 != -1)
      ((void (*)(IPC::Encoder **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_1[v25])(&v21, v24);
  }
  return v11 != 0;
}

uint64_t IPC::handleMessageSynchronous<Messages::RemoteMediaPlayerProxy::ErrorLog,WebKit::RemoteMediaPlayerProxy,WebKit::RemoteMediaPlayerProxy,void ()(WTF::CompletionHandler<void ()(WTF::String)> &&)>(unsigned __int8 **a1, uint64_t a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _QWORD **), uint64_t a6)
{
  IPC::Encoder *v9;
  _QWORD *v10;
  unsigned __int8 **v11;
  _QWORD *v12;
  _QWORD *v13;
  IPC::Encoder *v15;
  unsigned __int8 **v16[2];
  _QWORD *v17;

  v9 = *a3;
  *a3 = 0;
  v15 = v9;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v16, a1);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = off_1E34B3AA8;
  v10[1] = v15;
  v11 = v16[0];
  v16[0] = 0;
  v10[2] = v11;
  v17 = v10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v16);
  v12 = (_QWORD *)(a4 + (a6 >> 1));
  if ((a6 & 1) != 0)
    a5 = *(void (**)(_QWORD *, _QWORD **))(*v12 + a5);
  a5(v12, &v17);
  v13 = v17;
  v17 = 0;
  if (v13)
    (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  return 1;
}

uint64_t IPC::handleMessageSynchronous<Messages::RemoteMediaPlayerProxy::AccessLog,WebKit::RemoteMediaPlayerProxy,WebKit::RemoteMediaPlayerProxy,void ()(WTF::CompletionHandler<void ()(WTF::String)> &&)>(unsigned __int8 **a1, uint64_t a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _QWORD **), uint64_t a6)
{
  IPC::Encoder *v9;
  _QWORD *v10;
  unsigned __int8 **v11;
  _QWORD *v12;
  _QWORD *v13;
  IPC::Encoder *v15;
  unsigned __int8 **v16[2];
  _QWORD *v17;

  v9 = *a3;
  *a3 = 0;
  v15 = v9;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v16, a1);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = off_1E34B3AD0;
  v10[1] = v15;
  v11 = v16[0];
  v16[0] = 0;
  v10[2] = v11;
  v17 = v10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v16);
  v12 = (_QWORD *)(a4 + (a6 >> 1));
  if ((a6 & 1) != 0)
    a5 = *(void (**)(_QWORD *, _QWORD **))(*v12 + a5);
  a5(v12, &v17);
  v13 = v17;
  v17 = 0;
  if (v13)
    (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  return 1;
}

uint64_t IPC::handleMessageSynchronous<Messages::RemoteMediaPlayerProxy::NativeImageForCurrentTime,WebKit::RemoteMediaPlayerProxy,WebKit::RemoteMediaPlayerProxy,void ()(WTF::CompletionHandler<void ()(std::optional<WTF::MachSendRight> &&,WebCore::DestinationColorSpace)> &&)>(unsigned __int8 **a1, uint64_t a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _QWORD **), uint64_t a6)
{
  IPC::Encoder *v9;
  _QWORD *v10;
  unsigned __int8 **v11;
  _QWORD *v12;
  _QWORD *v13;
  IPC::Encoder *v15;
  unsigned __int8 **v16[2];
  _QWORD *v17;

  v9 = *a3;
  *a3 = 0;
  v15 = v9;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v16, a1);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = off_1E34B3AF8;
  v10[1] = v15;
  v11 = v16[0];
  v16[0] = 0;
  v10[2] = v11;
  v17 = v10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v16);
  v12 = (_QWORD *)(a4 + (a6 >> 1));
  if ((a6 & 1) != 0)
    a5 = *(void (**)(_QWORD *, _QWORD **))(*v12 + a5);
  a5(v12, &v17);
  v13 = v17;
  v17 = 0;
  if (v13)
    (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  return 1;
}

uint64_t IPC::handleMessageSynchronous<Messages::RemoteMediaPlayerProxy::ColorSpace,WebKit::RemoteMediaPlayerProxy,WebKit::RemoteMediaPlayerProxy,void ()(WTF::CompletionHandler<void ()(WebCore::DestinationColorSpace)> &&)>(unsigned __int8 **a1, uint64_t a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _QWORD **), uint64_t a6)
{
  IPC::Encoder *v9;
  _QWORD *v10;
  unsigned __int8 **v11;
  _QWORD *v12;
  _QWORD *v13;
  IPC::Encoder *v15;
  unsigned __int8 **v16[2];
  _QWORD *v17;

  v9 = *a3;
  *a3 = 0;
  v15 = v9;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v16, a1);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = off_1E34B3B20;
  v10[1] = v15;
  v11 = v16[0];
  v16[0] = 0;
  v10[2] = v11;
  v17 = v10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v16);
  v12 = (_QWORD *)(a4 + (a6 >> 1));
  if ((a6 & 1) != 0)
    a5 = *(void (**)(_QWORD *, _QWORD **))(*v12 + a5);
  a5(v12, &v17);
  v13 = v17;
  v17 = 0;
  if (v13)
    (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  return 1;
}

uint64_t IPC::handleMessageSynchronous<Messages::RemoteMediaPlayerProxy::VideoFrameForCurrentTimeIfChanged,WebKit::RemoteMediaPlayerProxy,WebKit::RemoteMediaPlayerProxy,void ()(WTF::CompletionHandler<void ()(std::optional<WebKit::RemoteVideoFrameProxyProperties> &&,BOOL)> &&)>(unsigned __int8 **a1, uint64_t a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, _QWORD **), uint64_t a6)
{
  IPC::Encoder *v9;
  _QWORD *v10;
  unsigned __int8 **v11;
  _QWORD *v12;
  _QWORD *v13;
  IPC::Encoder *v15;
  unsigned __int8 **v16[2];
  _QWORD *v17;

  v9 = *a3;
  *a3 = 0;
  v15 = v9;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v16, a1);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = off_1E34B3B48;
  v10[1] = v15;
  v11 = v16[0];
  v16[0] = 0;
  v10[2] = v11;
  v17 = v10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v16);
  v12 = (_QWORD *)(a4 + (a6 >> 1));
  if ((a6 & 1) != 0)
    a5 = *(void (**)(_QWORD *, _QWORD **))(*v12 + a5);
  a5(v12, &v17);
  v13 = v17;
  v17 = 0;
  if (v13)
    (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  return 1;
}

uint64_t `non-virtual thunk to'WebKit::RemoteMediaPlayerProxy::didReceiveSyncMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  return WebKit::RemoteMediaPlayerProxy::didReceiveSyncMessage(a1 - 24, a2, a3, a4);
}

_DWORD *WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(_DWORD *result)
{
  WTF *v1;
  void *v2;

  if (*result == 1)
  {
    WebKit::RemoteMediaPlayerProxy::~RemoteMediaPlayerProxy((WebKit::RemoteMediaPlayerProxy *)(result - 4));
    return (_DWORD *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::MediaPlayerPreload>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v7 = 0;
    v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9)
    {
      v18 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v9 + 16))(v9, v2, v1);
        a1 = v18;
        v8 = *v18;
        v7 = v18[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
    }
    goto LABEL_6;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    v7 = v1;
    v8 = 0;
LABEL_6:
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10 && v7)
    {
      v17 = a1;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v8);
      a1 = v17;
    }
    goto LABEL_7;
  }
  v5 = *v4;
  if (v5 >= 3)
  {
LABEL_7:
    v5 = 0;
    v6 = 0;
    goto LABEL_8;
  }
  v6 = 1;
LABEL_8:
  v11 = v5 | (v6 << 8);
  if (v11 <= 0xFF)
  {
    v13 = *a1;
    v14 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v15 = a1[3];
    if (v15)
    {
      if (v14)
      {
        v16 = v11;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13);
        return v16;
      }
    }
  }
  return v11;
}

uint64_t IPC::Decoder::decode<WebCore::DynamicRangeMode>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v9 = 0;
    v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11)
    {
      v18 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v2, v1);
        a1 = v18;
        v10 = *v18;
        v9 = v18[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
    goto LABEL_8;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    v9 = v1;
    v10 = 0;
LABEL_8:
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12 && v9)
    {
      v17 = a1;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v10);
      a1 = v17;
    }
    goto LABEL_9;
  }
  v5 = *v4;
  if (v5 >= 5)
  {
LABEL_9:
    v5 = 0;
    v6 = 0;
    goto LABEL_5;
  }
  v6 = 1;
LABEL_5:
  v7 = v5 | (v6 << 8);
  if (v7 <= 0xFF)
  {
    v13 = *a1;
    v14 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v15 = a1[3];
    if (v15)
    {
      if (v14)
      {
        v16 = v7;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13);
        return v16;
      }
    }
  }
  return v7;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteMediaPlayerProxy4LoadEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_3URLEONSt3__18optionalINS7_22SandboxExtensionHandleEEERKN7WebCore11ContentTypeERKNS_6StringEbONS_17CompletionHandlerIFvONS7_30RemoteMediaPlayerConfigurationEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B39A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteMediaPlayerProxy4LoadEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_3URLEONSt3__18optionalINS7_22SandboxExtensionHandleEEERKN7WebCore11ContentTypeERKNS_6StringEbONS_17CompletionHandlerIFvONS7_30RemoteMediaPlayerConfigurationEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B39A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteMediaPlayerProxy4LoadEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_3URLEONSt3__18optionalINS7_22SandboxExtensionHandleEEERKN7WebCore11ContentTypeERKNS_6StringEbONS_17CompletionHandlerIFvONS7_30RemoteMediaPlayerConfigurationEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3090;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebKit::RemoteMediaPlayerConfiguration,void>::encode((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteMediaPlayerProxy15LoadMediaSourceEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_3URLERKN7WebCore11ContentTypeEbNS_23ObjectIdentifierGenericINS7_31RemoteMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONS7_30RemoteMediaPlayerConfigurationEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B39D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteMediaPlayerProxy15LoadMediaSourceEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_3URLERKN7WebCore11ContentTypeEbNS_23ObjectIdentifierGenericINS7_31RemoteMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONS7_30RemoteMediaPlayerConfigurationEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B39D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteMediaPlayerProxy15LoadMediaSourceEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_3URLERKN7WebCore11ContentTypeEbNS_23ObjectIdentifierGenericINS7_31RemoteMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONS7_30RemoteMediaPlayerConfigurationEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3089;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebKit::RemoteMediaPlayerConfiguration,void>::encode((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteMediaPlayerProxy18DidLoadingProgressEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B39F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteMediaPlayerProxy18DidLoadingProgressEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B39F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteMediaPlayerProxy18DidLoadingProgressEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3088;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::IntSize>,void>::decode<IPC::Decoder>(unint64_t *a1)
{
  unint64_t result;
  unsigned __int8 v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;

  result = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a1);
  v4 = v3;
  if (!v3)
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7 && v6 != 0)
    {
      v9 = result;
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v7 + 16))(v7, v5);
      v4 = 0;
      result = v9;
    }
  }
  if (!v4)
    return 0;
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::MediaPlaybackTargetContextSerialized>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::MediaPlaybackTargetContextSerialized,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 48))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::MediaPlaybackTargetContextSerialized,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(a1 + 48))
  {
    v3 = *(WTF::StringImpl **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

_BYTE *IPC::Decoder::decode<std::tuple<unsigned long long,BOOL>>(_BYTE *result, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  _QWORD *v19;
  _QWORD *v20;

  v2 = a2[1];
  v3 = *a2;
  v4 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v2 < v4 || v2 - v4 <= 7)
  {
    v9 = 0;
    v10 = 0;
    *a2 = 0;
    a2[1] = 0;
    v11 = a2[3];
    if (!v11)
      goto LABEL_15;
    v17 = result;
    v19 = a2;
    if (!v2)
    {
LABEL_26:
      v9 = 0;
      v10 = 0;
      goto LABEL_27;
    }
LABEL_24:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v3);
    result = v17;
    a2 = v19;
    v10 = *v19;
    v9 = v19[1];
    goto LABEL_15;
  }
  v6 = (uint64_t *)(v3 + v4);
  a2[2] = v6 + 1;
  if (!v3)
  {
LABEL_25:
    v9 = v2;
    v10 = v3;
    goto LABEL_15;
  }
  if (v2 > (unint64_t)v6 - v3 + 8)
  {
    v7 = *v6;
    a2[2] = (char *)v6 + 9;
    v8 = *((unsigned __int8 *)v6 + 8);
    if (v8 < 2)
    {
      *(_QWORD *)result = v7;
      result[8] = v8 != 0;
      result[16] = 1;
      return result;
    }
    goto LABEL_25;
  }
  v9 = 0;
  v10 = 0;
  *a2 = 0;
  a2[1] = 0;
  v12 = a2[3];
  if (!v12)
    goto LABEL_15;
  v17 = result;
  v19 = a2;
  if (!v2)
    goto LABEL_26;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v3);
  v9 = 0;
  v3 = *v19;
  v16 = v19[1];
  v11 = v19[3];
  *v19 = 0;
  v19[1] = 0;
  v10 = 0;
  if (v11)
  {
    result = v17;
    a2 = v19;
    if (!v16)
      goto LABEL_15;
    goto LABEL_24;
  }
LABEL_27:
  result = v17;
  a2 = v19;
LABEL_15:
  *a2 = 0;
  a2[1] = 0;
  v13 = a2[3];
  if (v13 && v9)
  {
    v18 = result;
    v20 = a2;
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v10, v9);
    result = v18;
    a2 = v20;
  }
  *result = 0;
  result[16] = 0;
  v15 = *a2;
  v14 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (_BYTE *)a2[3];
  if (result)
  {
    if (v14)
      return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)result + 16))(result, v15);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteMediaPlayerProxy17PerformTaskAtTimeEN6WebKit22RemoteMediaPlayerProxyES8_FvRKNS_9MediaTimeEONS_17CompletionHandlerIFvNSt3__18optionalIS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3A20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteMediaPlayerProxy17PerformTaskAtTimeEN6WebKit22RemoteMediaPlayerProxyES8_FvRKNS_9MediaTimeEONS_17CompletionHandlerIFvNSt3__18optionalIS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B3A20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteMediaPlayerProxy17PerformTaskAtTimeEN6WebKit22RemoteMediaPlayerProxyES8_FvRKNS_9MediaTimeEONS_17CompletionHandlerIFvNSt3__18optionalIS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EE4callESF_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  void *v13;
  char *result;
  WTF *v15;
  void *v16;
  unint64_t v17;
  size_t v18;
  void *v19;
  IPC::Encoder *v20;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3091;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v20 = (IPC::Encoder *)v5;
  v6 = *(unsigned __int8 *)(a2 + 16);
  v7 = *(_QWORD *)(v5 + 544);
  v8 = v7 + 1;
  v9 = *(_QWORD *)(v5 + 552);
  if (v9 < v7 + 1)
  {
    v17 = (2 * v9 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v18 = v17;
      v17 *= 2;
    }
    while (v18 < v8);
    result = (char *)mmap(0, v18, 3, 4098, -1, 0);
    if (result == (char *)-1)
      goto LABEL_17;
    v10 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v19 = *(void **)(v5 + 528);
    if (v19 != (void *)(v5 + 16))
      munmap(v19, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v10;
    *(_QWORD *)(v5 + 552) = v18;
    v11 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v10 = *(char **)(v5 + 528);
    v11 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v10[v11], v7 - v11);
  *(_QWORD *)(v5 + 544) = v8;
  v12 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v7);
  *(_QWORD *)(v5 + 536) = v12 + 1;
  if (v6)
  {
    *v12 = 1;
    if (*(_BYTE *)(a2 + 16))
    {
      IPC::ArgumentCoder<WTF::MediaTime,void>::encode((IPC::Encoder *)v5, (_QWORD *)a2);
      goto LABEL_7;
    }
    result = (char *)std::__throw_bad_optional_access[abi:sn180100]();
LABEL_17:
    __break(0xC471u);
    return result;
  }
  *v12 = 0;
LABEL_7:
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v20, 0, 0);
  result = (char *)v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
    return (char *)WTF::fastFree(v15, v16);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteMediaPlayerProxy23RequestHostingContextIDEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvjEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJjEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3A48;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteMediaPlayerProxy23RequestHostingContextIDEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvjEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJjEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B3A48;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteMediaPlayerProxy23RequestHostingContextIDEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvjEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJjEE4callEj(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  _DWORD *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3092;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = (v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v8 = v7 + 4;
  v9 = *(_QWORD *)(v5 + 552);
  if (v9 < v7 + 4)
  {
    v16 = (2 * v9 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v8);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v10 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v10;
    *(_QWORD *)(v5 + 552) = v17;
    v6 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v10 = *(char **)(v5 + 528);
  }
  bzero(&v10[v6], v7 - v6);
  *(_QWORD *)(v5 + 544) = v8;
  v11 = (_DWORD *)(*(_QWORD *)(v5 + 528) + v7);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::SecurityOriginData>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::SecurityOriginData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 32))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::callMemberFunction<WebKit::RemoteMediaPlayerProxy,WebKit::RemoteMediaPlayerProxy,void ()(WebCore::SecurityOriginData,WTF::CompletionHandler<void ()(std::optional<BOOL>)> &&),std::tuple<WebCore::SecurityOriginData>,void ()(std::optional<BOOL>)>(uint64_t a1, uint64_t (*a2)(_QWORD *, _BYTE *, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v6)(_QWORD *, _BYTE *, uint64_t);
  _QWORD *v7;
  uint64_t result;
  char v9;
  _BYTE v10[24];
  int v11;
  uint64_t v12;

  v6 = a2;
  v12 = *MEMORY[0x1E0C80C00];
  v7 = (_QWORD *)(a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, _BYTE *, uint64_t))(*v7 + a2);
  v10[0] = 0;
  v11 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v10, a4);
  result = v6(v7, v10, a5);
  if (v11 != -1)
    return ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_1[v11])(&v9, v10);
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::SecurityOriginData>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v4;
  int v5;
  char v6;
  _BYTE v7[24];
  int v8;
  unsigned __int8 v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  result = IPC::Decoder::decode<WebCore::SecurityOriginData>(a1, v7);
  v4 = v9;
  *(_BYTE *)a2 = 0;
  if (v4)
  {
    *(_DWORD *)(a2 + 24) = -1;
    result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v7);
    v5 = v9;
    *(_BYTE *)(a2 + 32) = 1;
    if (v5)
    {
      if (v8 != -1)
        return ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_1[v8])(&v6, v7);
    }
  }
  else
  {
    *(_BYTE *)(a2 + 32) = 0;
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaPlayerProxy13IsCrossOriginEN6WebKit22RemoteMediaPlayerProxyES8_FvN7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvNSt3__18optionalIbEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSE_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3A80;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaPlayerProxy13IsCrossOriginEN6WebKit22RemoteMediaPlayerProxyES8_FvN7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvNSt3__18optionalIbEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSE_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B3A80;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaPlayerProxy13IsCrossOriginEN6WebKit22RemoteMediaPlayerProxyES8_FvN7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvNSt3__18optionalIbEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSE_EE4callESE_(uint64_t a1, __int16 a2)
{
  uint64_t *v2;
  __int16 v4;

  v4 = a2;
  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(*(IPC::Encoder **)(a1 + 8), (char *)&v4);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaPlayerProxy8ErrorLogEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvNS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSA_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3AA8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaPlayerProxy8ErrorLogEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvNS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSA_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B3AA8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaPlayerProxy8ErrorLogEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvNS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSA_EE4callESA_(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(*(_QWORD *)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaPlayerProxy9AccessLogEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvNS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSA_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3AD0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaPlayerProxy9AccessLogEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvNS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSA_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B3AD0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaPlayerProxy9AccessLogEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvNS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSA_EE4callESA_(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(*(_QWORD *)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaPlayerProxy25NativeImageForCurrentTimeEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvONSt3__18optionalINS_13MachSendRightEEEN7WebCore21DestinationColorSpaceEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSE_SG_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3AF8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaPlayerProxy25NativeImageForCurrentTimeEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvONSt3__18optionalINS_13MachSendRightEEEN7WebCore21DestinationColorSpaceEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSE_SG_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B3AF8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaPlayerProxy25NativeImageForCurrentTimeEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvONSt3__18optionalINS_13MachSendRightEEEN7WebCore21DestinationColorSpaceEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSE_SG_EE4callESE_SG_(uint64_t a1, unint64_t a2, CFTypeRef *a3)
{
  uint64_t *v4;
  IPC::Encoder *v5;

  v4 = (uint64_t *)(a1 + 8);
  v5 = *(IPC::Encoder **)(a1 + 8);
  IPC::ArgumentCoder<std::optional<WTF::MachSendRight>,void>::encode<IPC::Encoder,std::optional<WTF::MachSendRight>>((uint64_t)v5, a2);
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(v5, a3);
  return IPC::Connection::sendMessageImpl(v4[1], v4, 0, 0);
}

void IPC::ArgumentCoder<std::optional<WTF::MachSendRight>,void>::encode<IPC::Encoder,std::optional<WTF::MachSendRight>>(uint64_t a1, unint64_t a2)
{
  int v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  size_t v12;
  char *v13;
  void *v14;

  v4 = *(unsigned __int8 *)(a2 + 4);
  v5 = *(_QWORD *)(a1 + 544);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(a1 + 552);
  if (v7 < v5 + 1)
  {
    v11 = (2 * v7 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v12 = v11;
      v11 *= 2;
    }
    while (v12 < v6);
    v13 = (char *)mmap(0, v12, 3, 4098, -1, 0);
    if (v13 == (char *)-1)
      goto LABEL_14;
    v8 = v13;
    memcpy(v13, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v14 = *(void **)(a1 + 528);
    if (v14 != (void *)(a1 + 16))
      munmap(v14, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v8;
    *(_QWORD *)(a1 + 552) = v12;
    v9 = *(_QWORD *)(a1 + 544);
  }
  else
  {
    v8 = *(char **)(a1 + 528);
    v9 = *(_QWORD *)(a1 + 544);
  }
  bzero(&v8[v9], v5 - v9);
  *(_QWORD *)(a1 + 544) = v6;
  v10 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v5);
  *(_QWORD *)(a1 + 536) = v10 + 1;
  if (!v4)
  {
    *v10 = 0;
    return;
  }
  *v10 = 1;
  if (*(_BYTE *)(a2 + 4))
  {
    IPC::Encoder::addAttachment(a1, a2);
    return;
  }
  std::__throw_bad_optional_access[abi:sn180100]();
LABEL_14:
  __break(0xC471u);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaPlayerProxy10ColorSpaceEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvN7WebCore21DestinationColorSpaceEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3B20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaPlayerProxy10ColorSpaceEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvN7WebCore21DestinationColorSpaceEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSB_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B3B20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaPlayerProxy10ColorSpaceEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvN7WebCore21DestinationColorSpaceEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSB_EE4callESB_(uint64_t a1, CFTypeRef *a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(*(IPC::Encoder **)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaPlayerProxy33VideoFrameForCurrentTimeIfChangedEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvONSt3__18optionalINS7_31RemoteVideoFrameProxyPropertiesEEEbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSE_bEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3B48;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaPlayerProxy33VideoFrameForCurrentTimeIfChangedEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvONSt3__18optionalINS7_31RemoteVideoFrameProxyPropertiesEEEbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSE_bEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B3B48;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaPlayerProxy33VideoFrameForCurrentTimeIfChangedEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvONSt3__18optionalINS7_31RemoteVideoFrameProxyPropertiesEEEbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSE_bEE4callESE_b(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v4;
  IPC::Encoder *v5;

  v4 = (uint64_t *)(a1 + 8);
  v5 = *(IPC::Encoder **)(a1 + 8);
  IPC::ArgumentCoder<std::optional<WebKit::RemoteVideoFrameProxyProperties>,void>::encode<IPC::Encoder,std::optional<WebKit::RemoteVideoFrameProxyProperties>>(v5, a2);
  *IPC::Encoder::grow(v5, 1uLL, 1) = a3;
  return IPC::Connection::sendMessageImpl(v4[1], v4, 0, 0);
}

void IPC::ArgumentCoder<std::optional<WebKit::RemoteVideoFrameProxyProperties>,void>::encode<IPC::Encoder,std::optional<WebKit::RemoteVideoFrameProxyProperties>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *v5;
  WebKit::RemoteMediaResourceManager *v6;
  unsigned __int8 **v7;
  IPC::Decoder *v8;

  v4 = *(unsigned __int8 *)(a2 + 56);
  v5 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *v5 = 1;
    if (*(_BYTE *)(a2 + 56))
    {
      IPC::ArgumentCoder<WebKit::RemoteVideoFrameProxyProperties,void>::encode(a1, (uint64_t *)a2);
    }
    else
    {
      v6 = (WebKit::RemoteMediaResourceManager *)std::__throw_bad_optional_access[abi:sn180100]();
      WebKit::RemoteMediaResourceManager::didReceiveMessage(v6, v7, v8);
    }
  }
  else
  {
    *v5 = 0;
  }
}

void WebKit::RemoteMediaResourceManager::didReceiveMessage(WebKit::RemoteMediaResourceManager *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7[2];
  char v8;
  char v9;
  char v10;

  switch(*((_WORD *)a3 + 25))
  {
    case 0x4A7:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceError>>((uint64_t *)a3, &v6);
      if (v9)
        WebKit::RemoteMediaResourceManager::accessControlCheckFailed((uint64_t)this, v6, (const WebCore::ResourceError *)v7);
      goto LABEL_9;
    case 0x4A8:
      IPC::handleMessageAsync<Messages::RemoteMediaResourceManager::DataReceived,WebKit::RemoteMediaResourceManager,WebKit::RemoteMediaResourceManager,void ()(WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::SharedBufferReference &&,WTF::CompletionHandler<void ()(std::optional<WebCore::SharedMemoryHandle> &&)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, uint64_t, uint64_t *, _QWORD **))WebKit::RemoteMediaResourceManager::dataReceived, 0);
      break;
    case 0x4A9:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long long,unsigned long long>>((uint64_t *)a3, &v6);
      if (v8)
        WebKit::RemoteMediaResourceManager::dataSent((uint64_t)this, v6, v7[0], v7[1]);
      break;
    case 0x4AA:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceError>>((uint64_t *)a3, &v6);
      if (v9)
        WebKit::RemoteMediaResourceManager::loadFailed((uint64_t)this, v6, (const WebCore::ResourceError *)v7);
LABEL_9:
      std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceError>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v6, v4);
      break;
    case 0x4AB:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::NetworkLoadMetrics>>((uint64_t *)a3, &v6);
      if (v10)
        WebKit::RemoteMediaResourceManager::loadFinished((uint64_t)this, v6, (const WebCore::NetworkLoadMetrics *)v7);
      std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::NetworkLoadMetrics>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v6, v5);
      break;
    case 0x4AC:
      IPC::handleMessageAsync<Messages::RemoteMediaResourceManager::RedirectReceived,WebKit::RemoteMediaResourceManager,WebKit::RemoteMediaResourceManager,void ()(WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, uint64_t, uint64_t *, uint64_t *, _QWORD **))WebKit::RemoteMediaResourceManager::redirectReceived, 0);
      break;
    case 0x4AD:
      IPC::handleMessageAsync<Messages::RemoteMediaResourceManager::ResponseReceived,WebKit::RemoteMediaResourceManager,WebKit::RemoteMediaResourceManager,void ()(WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceResponse const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ShouldContinuePolicyCheck)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, unint64_t, _BYTE *, BOOL, _QWORD **))WebKit::RemoteMediaResourceManager::responseReceived, 0);
      break;
    default:
      return;
  }
}

void IPC::handleMessageAsync<Messages::RemoteMediaResourceManager::ResponseReceived,WebKit::RemoteMediaResourceManager,WebKit::RemoteMediaResourceManager,void ()(WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceResponse const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ShouldContinuePolicyCheck)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, unint64_t, _BYTE *, BOOL, _QWORD **), uint64_t a5)
{
  uint64_t *v8;
  unint64_t v10;
  char v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 ***v28;
  unint64_t v29;
  WTF::StringImpl *v30;
  _QWORD *v31;
  unsigned __int8 **v32;
  _QWORD *v33;
  _QWORD *v34;
  CFTypeRef v35;
  _QWORD *v36;
  unint64_t v37;
  _BYTE v38[240];
  CFTypeRef cf;
  BOOL v40;
  char v41;
  unint64_t v42;
  unsigned __int8 **v43[31];
  char v44;

  v8 = a2;
  v10 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (!v11)
  {
    LOBYTE(v37) = 0;
    v41 = 0;
    goto LABEL_8;
  }
  v12 = v10;
  IPC::Decoder::decode<WebCore::ResourceResponse>(v8, &v42);
  v14 = v44;
  if (!v44)
    goto LABEL_18;
  v15 = v8[1];
  v13 = (WTF::StringImpl *)*v8;
  v16 = v8[2] - *v8;
  if (v15 <= v16)
  {
    v24 = 0;
    v25 = 0;
    *v8 = 0;
    v8[1] = 0;
    v26 = v8[3];
    if (v26)
    {
      if (v15)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
        v25 = *v8;
        v24 = v8[1];
      }
      else
      {
        v24 = 0;
        v25 = 0;
      }
    }
    goto LABEL_15;
  }
  v17 = (unsigned __int8 *)v13 + v16;
  v8[2] = (uint64_t)(v17 + 1);
  if (!v13)
  {
    v24 = v15;
    v25 = 0;
LABEL_15:
    v15 = 0;
    v13 = 0;
    *v8 = 0;
    v8[1] = 0;
    v27 = v8[3];
    if (v27)
    {
      if (v24)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, v25, v24);
        v13 = (WTF::StringImpl *)*v8;
        v15 = v8[1];
      }
      else
      {
        v15 = 0;
        v13 = 0;
      }
    }
LABEL_16:
    *v8 = 0;
    v8[1] = 0;
    v28 = (unsigned __int8 ***)v8[3];
    if (v28)
      goto LABEL_32;
    goto LABEL_17;
  }
  v18 = *v17;
  if (v18 >= 2)
    goto LABEL_16;
  v19 = v18 != 0;
  v37 = v12;
  std::__tuple_leaf<1ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)v38, (uint64_t)&v42);
  v40 = v19;
  v14 = 1;
  while (1)
  {
    v41 = v14;
    std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)&v42, v13);
    if (!v41)
    {
LABEL_8:
      v20 = *v8;
      v21 = v8[1];
      *v8 = 0;
      v8[1] = 0;
      v22 = v8[3];
      if (v22)
        v23 = v21 == 0;
      else
        v23 = 1;
      if (v23)
        return;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, v20);
      if (!v41)
        return;
    }
    v29 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
    if (!(_BYTE)v30)
      break;
    v42 = v29;
    v8 = (uint64_t *)v43;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v43, a1);
    v31 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v31 = off_1E34B3B70;
    v31[1] = v42;
    v32 = v43[0];
    v43[0] = 0;
    v31[2] = v32;
    v36 = v31;
    v28 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v43);
    if (v41)
    {
      v33 = (_QWORD *)(a3 + (a5 >> 1));
      if ((a5 & 1) != 0)
        a4 = *(void (**)(_QWORD *, unint64_t, _BYTE *, BOOL, _QWORD **))(*v33 + a4);
      a4(v33, v37, v38, v40, &v36);
      v34 = v36;
      v36 = 0;
      if (v34)
        (*(void (**)(_QWORD *))(*v34 + 8))(v34);
      break;
    }
    __break(1u);
LABEL_32:
    if (v15)
      ((void (*)(unsigned __int8 ***, WTF::StringImpl *))(*v28)[2])(v28, v13);
LABEL_17:
    v14 = 0;
LABEL_18:
    LOBYTE(v37) = 0;
  }
  if (v41)
  {
    v35 = cf;
    cf = 0;
    if (v35)
      CFRelease(v35);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v38, v30);
  }
}

unsigned __int8 ***IPC::handleMessageAsync<Messages::RemoteMediaResourceManager::RedirectReceived,WebKit::RemoteMediaResourceManager,WebKit::RemoteMediaResourceManager,void ()(WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, uint64_t, uint64_t *, uint64_t *, _QWORD **), uint64_t a5)
{
  WTF::StringImpl *v10;
  unint64_t v11;
  _QWORD *v12;
  unsigned __int8 **v13;
  unsigned __int8 ***result;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unsigned __int8 **v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest,WebCore::ResourceResponse>>(a2, &v20);
  if (!v23)
    return (unsigned __int8 ***)std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest,WebCore::ResourceResponse>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v20, v10);
  v11 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (!(_BYTE)v10)
    return (unsigned __int8 ***)std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest,WebCore::ResourceResponse>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v20, v10);
  v17 = v11;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v18, a1);
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v12 = off_1E34B3B98;
  v12[1] = v17;
  v13 = v18;
  v18 = 0;
  v19 = v12;
  v12[2] = v13;
  result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v18);
  if (v23)
  {
    v15 = (_QWORD *)(a3 + (a5 >> 1));
    if ((a5 & 1) != 0)
      a4 = *(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t *, _QWORD **))(*v15 + a4);
    a4(v15, v20, &v21, &v22, &v19);
    v16 = v19;
    v19 = 0;
    if (v16)
      (*(void (**)(_QWORD *))(*v16 + 8))(v16);
    return (unsigned __int8 ***)std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest,WebCore::ResourceResponse>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v20, v10);
  }
  __break(1u);
  return result;
}

unsigned __int8 ***IPC::handleMessageAsync<Messages::RemoteMediaResourceManager::DataReceived,WebKit::RemoteMediaResourceManager,WebKit::RemoteMediaResourceManager,void ()(WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::SharedBufferReference &&,WTF::CompletionHandler<void ()(std::optional<WebCore::SharedMemoryHandle> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, uint64_t, uint64_t *, _QWORD **), uint64_t a5)
{
  void *v10;
  unint64_t v11;
  _QWORD *v12;
  unsigned __int8 **v13;
  unsigned __int8 ***result;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unsigned __int8 **v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::SharedBufferReference>>(a2, &v20);
  if (!v22)
    return (unsigned __int8 ***)std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::SharedBufferReference>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v20, v10);
  v11 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (!(_BYTE)v10)
    return (unsigned __int8 ***)std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::SharedBufferReference>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v20, v10);
  v17 = v11;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v18, a1);
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v12 = off_1E34B3BC0;
  v12[1] = v17;
  v13 = v18;
  v18 = 0;
  v19 = v12;
  v12[2] = v13;
  result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v18);
  if (v22)
  {
    v15 = (_QWORD *)(a3 + (a5 >> 1));
    if ((a5 & 1) != 0)
      a4 = *(void (**)(_QWORD *, uint64_t, uint64_t *, _QWORD **))(*v15 + a4);
    a4(v15, v20, &v21, &v19);
    v16 = v19;
    v19 = 0;
    if (v16)
      (*(void (**)(_QWORD *))(*v16 + 8))(v16);
    return (unsigned __int8 ***)std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::SharedBufferReference>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v20, v10);
  }
  __break(1u);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26RemoteMediaResourceManager16ResponseReceivedEN6WebKit26RemoteMediaResourceManagerES8_FvNS_23ObjectIdentifierGenericINS7_33RemoteMediaResourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEERKN7WebCore16ResourceResponseEbONS_17CompletionHandlerIFvNSE_25ShouldContinuePolicyCheckEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3B70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26RemoteMediaResourceManager16ResponseReceivedEN6WebKit26RemoteMediaResourceManagerES8_FvNS_23ObjectIdentifierGenericINS7_33RemoteMediaResourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEERKN7WebCore16ResourceResponseEbONS_17CompletionHandlerIFvNSE_25ShouldContinuePolicyCheckEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B3B70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26RemoteMediaResourceManager16ResponseReceivedEN6WebKit26RemoteMediaResourceManagerES8_FvNS_23ObjectIdentifierGenericINS7_33RemoteMediaResourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEERKN7WebCore16ResourceResponseEbONS_17CompletionHandlerIFvNSE_25ShouldContinuePolicyCheckEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EE4callESJ_(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3100;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

WebCore::ResourceRequestBase *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest,WebCore::ResourceResponse>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WebCore::ResourceRequestBase *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest,WebCore::ResourceResponse>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[464])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WebCore::ResourceRequestBase *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WebCore::ResourceRequestBase *)(*(uint64_t (**)(WebCore::ResourceRequestBase *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WebCore::ResourceRequestBase *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest,WebCore::ResourceResponse>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WebCore::ResourceRequestBase *result;
  uint64_t v5;
  _QWORD v6[2];

  result = (WebCore::ResourceRequestBase *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6[0] = result;
  v6[1] = v5;
  if ((_BYTE)v5)
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest,WebCore::ResourceResponse>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1, (uint64_t)v6, a2);
  *a2 = 0;
  a2[464] = 0;
  return result;
}

WebCore::ResourceRequestBase *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest,WebCore::ResourceResponse>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  _BYTE v7[208];

  IPC::Decoder::decode<WebCore::ResourceRequest>(a1, (uint64_t)v7);
  if (v7[200])
  {
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest,WebCore::ResourceResponse>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest>(a1, a2, (uint64_t)v7, a3);
  }
  else
  {
    *a3 = 0;
    a3[464] = 0;
  }
  return std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v7);
}

WebCore::ResourceResponseBase *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest,WebCore::ResourceResponse>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  WTF::StringImpl *v7;
  _BYTE v9[264];

  IPC::Decoder::decode<WebCore::ResourceResponse>(a1, v9);
  if (v9[256])
  {
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest,WebCore::ResourceResponse>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest,WebCore::ResourceResponse>(a2, a3, (uint64_t)v9, (uint64_t)a4);
  }
  else
  {
    *a4 = 0;
    a4[464] = 0;
  }
  return std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v9, v7);
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest,WebCore::ResourceResponse>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest,WebCore::ResourceResponse>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  if (*(_BYTE *)(a1 + 8) && *(_BYTE *)(a2 + 200) && *(_BYTE *)(a3 + 256))
  {
    *(_QWORD *)a4 = *(_QWORD *)a1;
    std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>(a4 + 8, a2);
    std::__tuple_leaf<1ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>(a4 + 208, a3);
    *(_BYTE *)(a4 + 464) = 1;
  }
  else
  {
    __break(1u);
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26RemoteMediaResourceManager16RedirectReceivedEN6WebKit26RemoteMediaResourceManagerES8_FvNS_23ObjectIdentifierGenericINS7_33RemoteMediaResourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEON7WebCore15ResourceRequestERKNSE_16ResourceResponseEONS_17CompletionHandlerIFvSG_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3B98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26RemoteMediaResourceManager16RedirectReceivedEN6WebKit26RemoteMediaResourceManagerES8_FvNS_23ObjectIdentifierGenericINS7_33RemoteMediaResourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEON7WebCore15ResourceRequestERKNSE_16ResourceResponseEONS_17CompletionHandlerIFvSG_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B3B98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26RemoteMediaResourceManager16RedirectReceivedEN6WebKit26RemoteMediaResourceManagerES8_FvNS_23ObjectIdentifierGenericINS7_33RemoteMediaResourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEON7WebCore15ResourceRequestERKNSE_16ResourceResponseEONS_17CompletionHandlerIFvSG_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EE4callESG_(uint64_t a1, WebCore::ResourceRequest *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3099;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest,WebCore::ResourceResponse>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  const void *v4;

  if (*(_BYTE *)(a1 + 464))
  {
    v3 = *(const void **)(a1 + 448);
    *(_QWORD *)(a1 + 448) = 0;
    if (v3)
      CFRelease(v3);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 208), a2);
    v4 = *(const void **)(a1 + 200);
    *(_QWORD *)(a1 + 200) = 0;
    if (v4)
      CFRelease(v4);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 8));
  }
  return a1;
}

_QWORD *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long long,unsigned long long>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long long,unsigned long long>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[24])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long long,unsigned long long>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6[2];

  result = (_QWORD *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6[0] = (uint64_t)result;
  v6[1] = v5;
  if ((_BYTE)v5)
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long long,unsigned long long>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1, v6, (uint64_t)a2);
  *a2 = 0;
  a2[24] = 0;
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long long,unsigned long long>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  v4 = result[1];
  v5 = *result;
  v6 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *result;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    v17 = 0;
    v18 = 0;
    *result = 0;
    result[1] = 0;
    v14 = result[3];
    if (!v14)
      goto LABEL_16;
LABEL_22:
    v23 = result;
    v25 = a3;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
      result = v23;
      a3 = v25;
      v18 = *v23;
      v17 = v23[1];
    }
    else
    {
      v17 = 0;
      v18 = 0;
    }
    goto LABEL_16;
  }
  v8 = (uint64_t *)(v5 + v6);
  result[2] = v8 + 1;
  if (!v5)
  {
    v17 = v4;
    v18 = 0;
LABEL_16:
    *result = 0;
    result[1] = 0;
    result = (_QWORD *)result[3];
    if (!result || !v17)
      goto LABEL_20;
    v24 = a3;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, unint64_t))(*result + 16))(result, v18, v17);
LABEL_28:
    a3 = v24;
LABEL_20:
    v16 = 0;
    *(_BYTE *)a3 = 0;
    goto LABEL_14;
  }
  v9 = (((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8) - v5;
  if (v4 < v9 || v4 - v9 <= 7)
  {
    *result = 0;
    result[1] = 0;
    v19 = result[3];
    if (!v19)
      goto LABEL_20;
    if (!v4)
      goto LABEL_20;
    v20 = result;
    v24 = a3;
    (*(void (**)(_QWORD))(*(_QWORD *)v19 + 16))(result[3]);
    a3 = v24;
    v21 = *v20;
    v22 = v20[1];
    result = (_QWORD *)v20[3];
    *v20 = 0;
    v20[1] = 0;
    if (!result || !v22)
      goto LABEL_20;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v21);
    goto LABEL_28;
  }
  v11 = *v8;
  v12 = *a2;
  v13 = *((unsigned __int8 *)a2 + 8);
  v15 = v5 + v9 + 8;
  v14 = *(_QWORD *)(v5 + v9);
  result[2] = v15;
  if (!v13)
  {
    __break(1u);
    goto LABEL_22;
  }
  *(_QWORD *)a3 = v12;
  *(_QWORD *)(a3 + 8) = v11;
  v16 = 1;
  *(_QWORD *)(a3 + 16) = v14;
LABEL_14:
  *(_BYTE *)(a3 + 24) = v16;
  return result;
}

void IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::SharedBufferReference>>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::SharedBufferReference>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[32])
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::SharedBufferReference>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  _QWORD v5[2];

  v5[0] = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v5[1] = v4;
  if ((_BYTE)v4)
  {
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::SharedBufferReference>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1, (uint64_t)v5, (uint64_t)a2);
  }
  else
  {
    *a2 = 0;
    a2[32] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::SharedBufferReference>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v5;
  char v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  char v11;

  IPC::Decoder::decode<IPC::SharedBufferReference>(a1, (uint64_t)&v9);
  v6 = v11;
  if (!v11)
  {
    *(_BYTE *)a3 = 0;
    goto LABEL_5;
  }
  if (*(_BYTE *)(a2 + 8))
  {
    v7 = v9;
    *(_QWORD *)a3 = *(_QWORD *)a2;
    *(_QWORD *)(a3 + 8) = v7;
    v8 = v10;
    v10 = 0uLL;
    *(_OWORD *)(a3 + 16) = v8;
    v6 = 1;
LABEL_5:
    *(_BYTE *)(a3 + 32) = v6;
    std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v9, v5);
    return;
  }
  __break(1u);
}

uint64_t std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;

  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(unsigned int **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v3)
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
    v4 = *(unsigned int **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v4)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26RemoteMediaResourceManager12DataReceivedEN6WebKit26RemoteMediaResourceManagerES8_FvNS_23ObjectIdentifierGenericINS7_33RemoteMediaResourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS2_21SharedBufferReferenceEONS_17CompletionHandlerIFvONSt3__18optionalIN7WebCore18SharedMemoryHandleEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3BC0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26RemoteMediaResourceManager12DataReceivedEN6WebKit26RemoteMediaResourceManagerES8_FvNS_23ObjectIdentifierGenericINS7_33RemoteMediaResourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS2_21SharedBufferReferenceEONS_17CompletionHandlerIFvONSt3__18optionalIN7WebCore18SharedMemoryHandleEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B3BC0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26RemoteMediaResourceManager12DataReceivedEN6WebKit26RemoteMediaResourceManagerES8_FvNS_23ObjectIdentifierGenericINS7_33RemoteMediaResourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS2_21SharedBufferReferenceEONS_17CompletionHandlerIFvONSt3__18optionalIN7WebCore18SharedMemoryHandleEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3098;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::optional<WebCore::SharedMemoryHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::SharedMemoryHandle>>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::SharedBufferReference>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;

  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(unsigned int **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v3)
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
    v4 = *(unsigned int **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v4)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  }
  return a1;
}

unint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceError>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceError>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[88])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceError>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6[2];

  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6[0] = result;
  v6[1] = v5;
  if ((_BYTE)v5)
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceError>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1, v6, a2);
  *a2 = 0;
  a2[88] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceError>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  WTF::StringImpl *v5;
  uint64_t v7[10];
  char v8;

  IPC::Decoder::decode<WebCore::ResourceError>(a1, (uint64_t)v7);
  if (v8)
  {
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceError>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceError>(a2, v7, (uint64_t)a3);
  }
  else
  {
    *a3 = 0;
    a3[88] = 0;
  }
  return std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v5);
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceError>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceError>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*((_BYTE *)a1 + 8) && *((_BYTE *)a2 + 80))
  {
    v5 = *a1;
    v6 = *a2;
    *a2 = 0;
    *(_QWORD *)a3 = v5;
    *(_QWORD *)(a3 + 8) = v6;
    WTF::URL::URL(a3 + 16, a2 + 1);
    v7 = a2[6];
    a2[6] = 0;
    *(_QWORD *)(a3 + 56) = v7;
    *(_DWORD *)(a3 + 64) = *((_DWORD *)a2 + 14);
    *(_WORD *)(a3 + 68) = *((_WORD *)a2 + 30);
    v8 = a2[8];
    a2[8] = 0;
    *(_QWORD *)(a3 + 72) = v8;
    *(_BYTE *)(a3 + 80) = *((_BYTE *)a2 + 72);
    *(_BYTE *)(a3 + 88) = 1;
  }
  else
  {
    __break(1u);
  }
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceError>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (*(_BYTE *)(a1 + 88))
  {
    v3 = *(const void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    if (v3)
      CFRelease(v3);
    v4 = *(WTF::StringImpl **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

WebCore::AdditionalNetworkLoadMetricsForWebInspector *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::NetworkLoadMetrics>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::NetworkLoadMetrics>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[136])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)(*(uint64_t (**)(WebCore::AdditionalNetworkLoadMetricsForWebInspector *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WebCore::AdditionalNetworkLoadMetricsForWebInspector *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::NetworkLoadMetrics>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *result;
  uint64_t v5;
  _QWORD v6[2];

  result = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6[0] = result;
  v6[1] = v5;
  if ((_BYTE)v5)
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::NetworkLoadMetrics>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1, (uint64_t)v6, (uint64_t)a2);
  *a2 = 0;
  a2[136] = 0;
  return result;
}

WebCore::AdditionalNetworkLoadMetricsForWebInspector *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::NetworkLoadMetrics>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *result;
  WTF::StringImpl *v6;
  char v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v12[5];
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  result = IPC::Decoder::decode<WebCore::NetworkLoadMetrics>(a1, (uint64_t)v12);
  v7 = v18;
  if (!v18)
  {
    *(_BYTE *)a3 = 0;
    goto LABEL_5;
  }
  if (*(_BYTE *)(a2 + 8))
  {
    v8 = v12[3];
    *(_OWORD *)(a3 + 40) = v12[2];
    *(_OWORD *)(a3 + 56) = v8;
    *(_OWORD *)(a3 + 72) = v12[4];
    v9 = v12[1];
    *(_OWORD *)(a3 + 8) = v12[0];
    *(_QWORD *)a3 = *(_QWORD *)a2;
    *(_OWORD *)(a3 + 24) = v9;
    v10 = v14;
    *(_QWORD *)(a3 + 88) = v13;
    *(_QWORD *)(a3 + 96) = v10;
    *(_OWORD *)(a3 + 104) = v15;
    v11 = v17;
    *(_QWORD *)(a3 + 120) = v16;
    *(_QWORD *)(a3 + 128) = v11;
    v7 = 1;
    v14 = 0;
    v17 = 0;
LABEL_5:
    *(_BYTE *)(a3 + 136) = v7;
    return (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v12, v6);
  }
  __break(1u);
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::NetworkLoadMetrics>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 136))
  {
    v3 = *(WebCore::AdditionalNetworkLoadMetricsForWebInspector **)(a1 + 128);
    *(_QWORD *)(a1 + 128) = 0;
    if (v3)
      WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v3);
    v4 = *(WTF::StringImpl **)(a1 + 96);
    *(_QWORD *)(a1 + 96) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

_QWORD *WebKit::RemoteMediaSourceProxy::didReceiveMessage(_QWORD *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  int v10;
  char v11;

  v3 = this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x4C9:
      this = IPC::Decoder::decode<std::tuple<WebCore::PlatformTimeRanges>>((uint64_t *)a3, (uint64_t)&v9);
      if (v11)
      {
        v5 = v3[8];
        if (!v5 || (this = (_QWORD *)(*(uint64_t (**)(uint64_t, WTF **))(*(_QWORD *)v5 + 64))(v5, &v9), v11))
        {
          this = v9;
          if (v9)
          {
            v9 = 0;
            v10 = 0;
            this = (_QWORD *)WTF::fastFree((WTF *)this, v4);
          }
        }
      }
      break;
    case 0x4CA:
      this = (_QWORD *)IPC::Decoder::decode<std::tuple<WTF::MediaTime>>((uint64_t *)a3, (uint64_t)&v9);
      if (v11)
      {
        this = (_QWORD *)v3[8];
        if (this)
        {
          v6 = *(uint64_t (**)(void))(*this + 56);
          goto LABEL_20;
        }
      }
      break;
    case 0x4CB:
      this = (_QWORD *)IPC::Decoder::decode<std::tuple<WebCore::MediaSourcePrivateEndOfStreamStatus>>((uint64_t *)a3);
      if ((unsigned __int16)this >= 0x100u)
      {
        v7 = v3[8];
        if (v7)
          this = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 96))(v7, this);
      }
      break;
    case 0x4CC:
      this = (_QWORD *)IPC::Decoder::decode<std::tuple<WebCore::MediaPlayerReadyState>>((uint64_t *)a3);
      if ((unsigned __int16)this >= 0x100u)
      {
        v8 = v3[8];
        if (v8)
          this = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 88))(v8, this);
      }
      break;
    case 0x4CD:
      this = (_QWORD *)IPC::Decoder::decode<std::tuple<WTF::MediaTime>>((uint64_t *)a3, (uint64_t)&v9);
      if (v11)
      {
        this = (_QWORD *)v3[8];
        if (this)
        {
          v6 = *(uint64_t (**)(void))(*this + 128);
LABEL_20:
          this = (_QWORD *)v6();
        }
      }
      break;
    case 0x4CE:
      this = (_QWORD *)this[8];
      if (this)
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 104))(this);
      break;
    default:
      return this;
  }
  return this;
}

_QWORD *`non-virtual thunk to'WebKit::RemoteMediaSourceProxy::didReceiveMessage(WebKit::RemoteMediaSourceProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  return WebKit::RemoteMediaSourceProxy::didReceiveMessage((_QWORD *)this - 2, a2, a3);
}

BOOL WebKit::RemoteMediaSourceProxy::didReceiveSyncMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  return *(_WORD *)(a3 + 50) == 3639
      && IPC::handleMessageSynchronous<Messages::RemoteMediaSourceProxy::AddSourceBuffer,WebKit::RemoteMediaSourceProxy,WebKit::RemoteMediaSourceProxy,void ()(WebCore::ContentType const&,WTF::CompletionHandler<void ()(WebCore::MediaSourcePrivateAddStatus,std::optional<WTF::ObjectIdentifierGeneric<WebKit::RemoteSourceBufferIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, WTF::StringImpl **, _QWORD **))WebKit::RemoteMediaSourceProxy::addSourceBuffer, 0);
}

BOOL IPC::handleMessageSynchronous<Messages::RemoteMediaSourceProxy::AddSourceBuffer,WebKit::RemoteMediaSourceProxy,WebKit::RemoteMediaSourceProxy,void ()(WebCore::ContentType const&,WTF::CompletionHandler<void ()(WebCore::MediaSourcePrivateAddStatus,std::optional<WTF::ObjectIdentifierGeneric<WebKit::RemoteSourceBufferIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, WTF::StringImpl **, _QWORD **), uint64_t a6)
{
  int v11;
  IPC::Encoder *v12;
  _QWORD *v13;
  unsigned __int8 **v14;
  _BOOL8 result;
  _QWORD *v16;
  WTF::StringImpl *v17;
  _QWORD *v18;
  WTF::StringImpl *v19;
  IPC::Encoder *v20;
  unsigned __int8 **v21;
  _QWORD *v22;
  WTF::StringImpl *v23[2];
  unsigned __int8 v24;

  IPC::Decoder::decode<std::tuple<WebCore::ContentType>>(a2, (uint64_t)v23);
  v11 = v24;
  if (!v24)
    return v11 != 0;
  v12 = *a3;
  *a3 = 0;
  v20 = v12;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v21, a1);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = off_1E34B3BE8;
  v13[1] = v20;
  v14 = v21;
  v21 = 0;
  v13[2] = v14;
  v22 = v13;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v21);
  result = 0;
  if (v24)
  {
    v16 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, WTF::StringImpl **, _QWORD **))(*v16 + a5);
    a5(v16, v23, &v22);
    v18 = v22;
    v22 = 0;
    if (v18)
      (*(void (**)(_QWORD *))(*v18 + 8))(v18);
    if (v24)
    {
      v19 = v23[0];
      v23[0] = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v17);
        else
          *(_DWORD *)v19 -= 2;
      }
    }
    return v11 != 0;
  }
  __break(1u);
  return result;
}

BOOL `non-virtual thunk to'WebKit::RemoteMediaSourceProxy::didReceiveSyncMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  return *(_WORD *)(a3 + 50) == 3639
      && IPC::handleMessageSynchronous<Messages::RemoteMediaSourceProxy::AddSourceBuffer,WebKit::RemoteMediaSourceProxy,WebKit::RemoteMediaSourceProxy,void ()(WebCore::ContentType const&,WTF::CompletionHandler<void ()(WebCore::MediaSourcePrivateAddStatus,std::optional<WTF::ObjectIdentifierGeneric<WebKit::RemoteSourceBufferIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)> &&)>(a2, (uint64_t *)a3, a4, a1 - 16, (void (*)(_QWORD *, WTF::StringImpl **, _QWORD **))WebKit::RemoteMediaSourceProxy::addSourceBuffer, 0);
}

WTF *IPC::Decoder::decode<std::tuple<WebCore::PlatformTimeRanges>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::PlatformTimeRanges>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WTF *IPC::ArgumentCoder<std::tuple<WebCore::PlatformTimeRanges>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF *result;
  char v4;
  _QWORD v5[2];
  char v6;

  result = IPC::Decoder::decode<WebCore::PlatformTimeRanges>(a1, (uint64_t)v5);
  v4 = v6;
  if (v6)
  {
    *(_QWORD *)a2 = v5[0];
    *(_QWORD *)(a2 + 8) = v5[1];
    v4 = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 16) = v4;
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::MediaPlayerReadyState>>(uint64_t *a1)
{
  unsigned int ready;
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  ready = (unsigned __int16)IPC::Decoder::decode<WebCore::MediaPlayerReadyState>(a1);
  v3 = 256;
  if (ready <= 0xFF)
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7)
    {
      v8 = ready;
      if (v6)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v5);
        v3 = 0;
        ready = v8;
      }
      else
      {
        v3 = 0;
      }
    }
    else
    {
      v3 = 0;
    }
  }
  if (ready <= 0x100)
    LOBYTE(ready) = 0;
  return v3 | ready;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::MediaSourcePrivateEndOfStreamStatus>>(uint64_t *a1)
{
  unsigned int v2;
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  v2 = (unsigned __int16)IPC::Decoder::decode<WebCore::NotificationDirection>(a1);
  v3 = 256;
  if (v2 <= 0xFF)
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7)
    {
      v8 = v2;
      if (v6)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v5);
        v3 = 0;
        v2 = v8;
      }
      else
      {
        v3 = 0;
      }
    }
    else
    {
      v3 = 0;
    }
  }
  if (v2 <= 0x100)
    LOBYTE(v2) = 0;
  return v3 | v2;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WebCore::ContentType>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::ContentType>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WebCore::ContentType>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  char v4;
  uint64_t v5;
  char v6;
  char v7;

  result = IPC::Decoder::decode<WebCore::ContentType>(a1, (uint64_t)&v5);
  v4 = v7;
  if (v7)
  {
    *(_QWORD *)a2 = v5;
    *(_BYTE *)(a2 + 8) = v6;
    v4 = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 16) = v4;
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaSourceProxy15AddSourceBufferEN6WebKit22RemoteMediaSourceProxyES8_FvRKN7WebCore11ContentTypeEONS_17CompletionHandlerIFvNS9_27MediaSourcePrivateAddStatusENSt3__18optionalINS_23ObjectIdentifierGenericINS7_32RemoteSourceBufferIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSE_SM_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3BE8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaSourceProxy15AddSourceBufferEN6WebKit22RemoteMediaSourceProxyES8_FvRKN7WebCore11ContentTypeEONS_17CompletionHandlerIFvNS9_27MediaSourcePrivateAddStatusENSt3__18optionalINS_23ObjectIdentifierGenericINS7_32RemoteSourceBufferIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSE_SM_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B3BE8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaSourceProxy15AddSourceBufferEN6WebKit22RemoteMediaSourceProxyES8_FvRKN7WebCore11ContentTypeEONS_17CompletionHandlerIFvNS9_27MediaSourcePrivateAddStatusENSt3__18optionalINS_23ObjectIdentifierGenericINS7_32RemoteSourceBufferIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSE_SM_EE4callESE_SM_(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  char v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  size_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v22;
  size_t v23;
  char *v24;
  void *v25;
  unint64_t v26;
  size_t v27;
  char *v28;
  void *v29;
  uint64_t v30[2];

  v4 = a4;
  v30[0] = a3;
  v30[1] = a4;
  v7 = (uint64_t *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(v8 + 544);
  v10 = v9 + 1;
  v11 = *(_QWORD *)(v8 + 552);
  if (v11 < v9 + 1)
  {
    v22 = (2 * v11 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v23 = v22;
      v22 *= 2;
    }
    while (v23 < v10);
    v24 = (char *)mmap(0, v23, 3, 4098, -1, 0);
    if (v24 == (char *)-1)
      goto LABEL_21;
    v12 = v24;
    memcpy(v24, *(const void **)(v8 + 528), *(_QWORD *)(v8 + 544));
    v25 = *(void **)(v8 + 528);
    if (v25 != (void *)(v8 + 16))
      munmap(v25, *(_QWORD *)(v8 + 552));
    *(_QWORD *)(v8 + 528) = v12;
    *(_QWORD *)(v8 + 552) = v23;
    v13 = *(_QWORD *)(v8 + 544);
  }
  else
  {
    v12 = *(char **)(v8 + 528);
    v13 = *(_QWORD *)(v8 + 544);
  }
  bzero(&v12[v13], v9 - v13);
  *(_QWORD *)(v8 + 544) = v10;
  v14 = (_BYTE *)(*(_QWORD *)(v8 + 528) + v9);
  *(_QWORD *)(v8 + 536) = v14 + 1;
  *v14 = a2;
  v15 = *(_QWORD *)(v8 + 544);
  v16 = v15 + 1;
  v17 = *(_QWORD *)(v8 + 552);
  if (v17 >= v15 + 1)
  {
    v18 = *(char **)(v8 + 528);
    v19 = *(_QWORD *)(v8 + 544);
    goto LABEL_5;
  }
  v26 = (2 * v17 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v27 = v26;
    v26 *= 2;
  }
  while (v27 < v16);
  v28 = (char *)mmap(0, v27, 3, 4098, -1, 0);
  if (v28 == (char *)-1)
  {
LABEL_21:
    __break(0xC471u);
    JUMPOUT(0x196FAE4ACLL);
  }
  v18 = v28;
  memcpy(v28, *(const void **)(v8 + 528), *(_QWORD *)(v8 + 544));
  v29 = *(void **)(v8 + 528);
  if (v29 != (void *)(v8 + 16))
    munmap(v29, *(_QWORD *)(v8 + 552));
  *(_QWORD *)(v8 + 528) = v18;
  *(_QWORD *)(v8 + 552) = v27;
  v19 = *(_QWORD *)(v8 + 544);
LABEL_5:
  bzero(&v18[v19], v15 - v19);
  *(_QWORD *)(v8 + 544) = v16;
  v20 = (_BYTE *)(*(_QWORD *)(v8 + 528) + v15);
  *(_QWORD *)(v8 + 536) = v20 + 1;
  if (v4)
  {
    *v20 = 1;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v8, v30);
  }
  else
  {
    *v20 = 0;
  }
  return IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), v7, 0, 0);
}

void WebKit::RemoteObjectRegistry::didReceiveMessage(WebKit::RemoteObjectRegistry *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  int v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = *((unsigned __int16 *)a3 + 25);
  switch(v4)
  {
    case 1232:
      IPC::handleMessage<Messages::RemoteObjectRegistry::InvokeMethod,WebKit::RemoteObjectRegistry,WebKit::RemoteObjectRegistry,void ()(WebKit::RemoteObjectInvocation const&)>((uint64_t *)a3, (uint64_t)this);
      break;
    case 1231:
      IPC::Decoder::decode<std::tuple<unsigned long long,WebKit::UserData>>((uint64_t)&v8, (uint64_t *)a3);
      if (v10)
      {
        WebKit::RemoteObjectRegistry::callReplyBlock((uint64_t)this, v8, (uint64_t)&v9);
        if (v10)
        {
          v7 = v9;
          v9 = 0;
          if (v7)
            CFRelease(*(CFTypeRef *)(v7 + 8));
        }
      }
      break;
    case 1233:
      v5 = IPC::Decoder::decode<std::tuple<double>>((uint64_t *)a3);
      if (v6)
        WebKit::RemoteObjectRegistry::releaseUnusedReplyBlock(this, v5);
      break;
  }
}

uint64_t IPC::handleMessage<Messages::RemoteObjectRegistry::InvokeMethod,WebKit::RemoteObjectRegistry,WebKit::RemoteObjectRegistry,void ()(WebKit::RemoteObjectInvocation const&)>(uint64_t *a1, uint64_t a2)
{
  _BYTE v4[32];

  IPC::Decoder::decode<std::tuple<WebKit::RemoteObjectInvocation>>((uint64_t)v4, a1);
  if (v4[24])
    WebKit::RemoteObjectRegistry::invokeMethod(a2, (uint64_t)v4);
  return std::__optional_destruct_base<WebKit::RemoteObjectInvocation,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v4);
}

uint64_t IPC::Decoder::decode<std::tuple<WebKit::RemoteObjectInvocation>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebKit::RemoteObjectInvocation>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a1 + 24))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebKit::RemoteObjectInvocation>,void>::decode<IPC::Decoder>(uint64_t a1, uint64_t *a2)
{
  char v3;
  __int128 v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  char v9;

  IPC::Decoder::decode<WebKit::RemoteObjectInvocation>((uint64_t)&v7, a2);
  v3 = v9;
  if (v9)
  {
    v4 = v7;
    v7 = 0uLL;
    *(_OWORD *)a1 = v4;
    v5 = v8;
    v8 = 0;
    *(_QWORD *)(a1 + 16) = v5;
    v3 = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
  }
  *(_BYTE *)(a1 + 24) = v3;
  return std::__optional_destruct_base<WebKit::RemoteObjectInvocation,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v7);
}

uint64_t IPC::Decoder::decode<WebKit::RemoteObjectInvocation>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::RemoteObjectInvocation,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 24))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::RemoteObjectInvocation,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  int v2;
  WTF *v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(a1 + 24))
  {
    v2 = a1 + 16;
    v3 = *(WTF **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v3)
      std::default_delete<WebKit::RemoteObjectInvocation::ReplyInfo>::operator()[abi:sn180100](v2, v3);
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v4)
      CFRelease(*(CFTypeRef *)(v4 + 8));
    v5 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v3);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

void IPC::Decoder::decode<std::tuple<unsigned long long,WebKit::UserData>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;

  v4 = a2[1];
  v5 = *a2;
  v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    v13 = 0;
    v14 = 0;
    *a2 = 0;
    a2[1] = 0;
    v15 = a2[3];
    if (v15)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v15 + 16))(v15, v5, v4);
        v14 = *a2;
        v13 = a2[1];
      }
      else
      {
        v13 = 0;
        v14 = 0;
      }
    }
    goto LABEL_13;
  }
  v8 = (uint64_t *)(v5 + v6);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v13 = v4;
    v14 = 0;
LABEL_13:
    *a2 = 0;
    a2[1] = 0;
    v16 = a2[3];
    if (v16 && v13)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v14);
    goto LABEL_14;
  }
  v9 = *v8;
  IPC::Decoder::decode<WebKit::UserData>(a2, (uint64_t)&v20);
  if (!v21)
  {
LABEL_14:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    v17 = *a2;
    v18 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v19 = a2[3];
    if (v19)
    {
      if (v18)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v17);
    }
    return;
  }
  v10 = v20;
  *(_QWORD *)a1 = v9;
  if (v10)
  {
    CFRetain(*(CFTypeRef *)(v10 + 8));
    v11 = v21;
    *(_QWORD *)(a1 + 8) = v10;
    *(_BYTE *)(a1 + 16) = 1;
    if (v11)
    {
      v12 = v20;
      v20 = 0;
      if (v12)
        CFRelease(*(CFTypeRef *)(v12 + 8));
    }
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 1;
  }
}

uint64_t WebKit::RemoteRemoteCommandListener::didReceiveMessage(uint64_t this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v3;
  _BYTE v4[8];
  _BYTE v5[32];

  if (*((_WORD *)a3 + 25) == 1251)
  {
    v3 = this;
    this = IPC::Decoder::decode<std::tuple<WebCore::PlatformMediaSessionRemoteControlCommandType,WebCore::PlatformMediaSessionRemoteCommandArgument>>((uint64_t *)a3, v4);
    if (v5[24])
      return (*(uint64_t (**)(_QWORD, _QWORD, _BYTE *))(**(_QWORD **)(v3 + 8) + 16))(*(_QWORD *)(v3 + 8), v4[0], v5);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebKit::RemoteRemoteCommandListener::didReceiveMessage(WebKit::RemoteRemoteCommandListener *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  return WebKit::RemoteRemoteCommandListener::didReceiveMessage((uint64_t)this - 64, a2, a3);
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::PlatformMediaSessionRemoteControlCommandType,WebCore::PlatformMediaSessionRemoteCommandArgument>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::PlatformMediaSessionRemoteControlCommandType,WebCore::PlatformMediaSessionRemoteCommandArgument>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[32])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::PlatformMediaSessionRemoteControlCommandType,WebCore::PlatformMediaSessionRemoteCommandArgument>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  __int16 v5;

  result = IPC::Decoder::decode<WebCore::PlatformMediaSessionRemoteControlCommandType>(a1);
  v5 = result;
  if ((unsigned __int16)result > 0xFFu)
    return IPC::ArgumentCoder<std::tuple<WebCore::PlatformMediaSessionRemoteControlCommandType,WebCore::PlatformMediaSessionRemoteCommandArgument>,void>::decode<IPC::Decoder,WebCore::PlatformMediaSessionRemoteControlCommandType>(a1, &v5, (uint64_t)a2);
  *a2 = 0;
  a2[32] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::PlatformMediaSessionRemoteControlCommandType,WebCore::PlatformMediaSessionRemoteCommandArgument>,void>::decode<IPC::Decoder,WebCore::PlatformMediaSessionRemoteControlCommandType>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  char v6;
  __int128 v7;
  uint64_t v8;
  char v9;

  result = IPC::Decoder::decode<WebCore::PlatformMediaSessionRemoteCommandArgument>(a1, (uint64_t)&v7);
  v6 = v9;
  if (!v9)
  {
    *(_BYTE *)a3 = 0;
    goto LABEL_5;
  }
  if (a2[1])
  {
    *(_BYTE *)a3 = *a2;
    *(_OWORD *)(a3 + 8) = v7;
    *(_QWORD *)(a3 + 24) = v8;
    v6 = 1;
LABEL_5:
    *(_BYTE *)(a3 + 32) = v6;
    return result;
  }
  __break(1u);
  return result;
}

WTF *WebKit::RemoteRemoteCommandListenerProxy::didReceiveMessage(WTF *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v3;
  void *v4;
  WTF *v5;
  int v6;
  char v7;
  char v8;

  if (*((_WORD *)a3 + 25) == 1250)
  {
    v3 = (uint64_t)this;
    this = IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::PlatformMediaSessionRemoteControlCommandType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL>>((uint64_t *)a3, &v5);
    if (v8)
    {
      this = (WTF *)WebKit::RemoteRemoteCommandListenerProxy::updateSupportedCommands(v3, (unsigned int *)&v5, v7);
      if (v8)
      {
        this = v5;
        if (v5)
        {
          v5 = 0;
          v6 = 0;
          return (WTF *)WTF::fastFree(this, v4);
        }
      }
    }
  }
  return this;
}

WTF *IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::PlatformMediaSessionRemoteControlCommandType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::PlatformMediaSessionRemoteControlCommandType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[24])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WTF *IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::PlatformMediaSessionRemoteControlCommandType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF *result;
  void *v5;
  WTF *v6;
  int v7;
  char v8;

  result = (WTF *)IPC::Decoder::decode<WTF::Vector<WebCore::PlatformMediaSessionRemoteControlCommandType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)&v6);
  if (v8)
  {
    result = (WTF *)IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::PlatformMediaSessionRemoteControlCommandType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL>,void>::decode<IPC::Decoder,WTF::Vector<WebCore::PlatformMediaSessionRemoteControlCommandType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)&v6, (uint64_t)a2);
    if (v8)
    {
      result = v6;
      if (v6)
      {
        v6 = 0;
        v7 = 0;
        return (WTF *)WTF::fastFree(result, v5);
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[24] = 0;
  }
  return result;
}

uint64_t *IPC::Decoder::decode<WTF::Vector<WebCore::PlatformMediaSessionRemoteControlCommandType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::VectorArgumentCoder<false,WebCore::PlatformMediaSessionRemoteControlCommandType,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::PlatformMediaSessionRemoteControlCommandType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL>,void>::decode<IPC::Decoder,WTF::Vector<WebCore::PlatformMediaSessionRemoteControlCommandType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = result[1];
  v5 = *result;
  v6 = result[2] - *result;
  if (v4 <= v6)
  {
    v11 = 0;
    v12 = 0;
    *result = 0;
    result[1] = 0;
    v13 = result[3];
    if (v13)
    {
      v16 = result;
      v19 = a3;
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
        result = v16;
        a3 = v19;
        v12 = *v16;
        v11 = v16[1];
      }
      else
      {
        v11 = 0;
        v12 = 0;
      }
    }
    goto LABEL_8;
  }
  v7 = (unsigned __int8 *)(v5 + v6);
  result[2] = v7 + 1;
  if (!v5)
  {
    v11 = v4;
    v12 = 0;
LABEL_8:
    v4 = 0;
    v5 = 0;
    *result = 0;
    result[1] = 0;
    v14 = result[3];
    if (v14)
    {
      v15 = result;
      v18 = a3;
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v14 + 16))(v14, v12, v11);
        result = v15;
        a3 = v18;
        v5 = *v15;
        v4 = v15[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
LABEL_9:
    *result = 0;
    result[1] = 0;
    result = (_QWORD *)result[3];
    if (!result)
    {
LABEL_10:
      v10 = 0;
      *(_BYTE *)a3 = 0;
      goto LABEL_6;
    }
LABEL_12:
    if (v4)
    {
      v17 = a3;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
      a3 = v17;
    }
    goto LABEL_10;
  }
  v8 = *v7;
  if (v8 >= 2)
    goto LABEL_9;
  if (!*(_BYTE *)(a2 + 16))
  {
    __break(1u);
    goto LABEL_12;
  }
  *(_QWORD *)a3 = *(_QWORD *)a2;
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8 != 0;
  v10 = 1;
LABEL_6:
  *(_BYTE *)(a3 + 24) = v10;
  return result;
}

uint64_t *IPC::VectorArgumentCoder<false,WebCore::PlatformMediaSessionRemoteControlCommandType,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  WTF **v8;
  WTF *v9;
  WTF *v10;
  unsigned int v11;
  void *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  WTF *v19;
  uint64_t v20;

  v2 = result;
  v4 = result[1];
  v5 = *result;
  v6 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *result;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    v14 = 0;
    v15 = 0;
    *result = 0;
    result[1] = 0;
    v16 = result[3];
    if (v16)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v16 + 16))(v16, v5, v4);
        v15 = *v2;
        v14 = v2[1];
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
    }
    goto LABEL_22;
  }
  v8 = (WTF **)(v5 + v6);
  result[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v14 = v4;
    v15 = 0;
LABEL_22:
    *v2 = 0;
    v2[1] = 0;
    result = (uint64_t *)v2[3];
    if (result)
    {
      if (v14)
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v15);
    }
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return result;
  }
  v9 = *v8;
  v19 = 0;
  v20 = 0;
  if ((unint64_t)v9 >= 0x100000)
  {
    v10 = 0;
    LODWORD(v17) = 0;
    while (1)
    {
      result = (uint64_t *)IPC::Decoder::decode<WebCore::PlatformMediaSessionRemoteControlCommandType>(v2);
      v18 = (__int16)result;
      if ((unsigned __int16)result < 0x100u)
        break;
      if ((_DWORD)v17 == (_DWORD)v20)
      {
        result = (uint64_t *)WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v19, (WTF *)(v17 + 1), (unint64_t)&v18);
        LODWORD(v17) = HIDWORD(v20);
        v10 = v19;
        *((_BYTE *)v19 + HIDWORD(v20)) = *(_BYTE *)result;
      }
      else
      {
        *((_BYTE *)v10 + v17) = (_BYTE)result;
      }
      v17 = (v17 + 1);
      HIDWORD(v20) = v17;
      v9 = (WTF *)((char *)v9 - 1);
      if (!v9)
      {
        if (v20 > v17)
        {
          if ((_DWORD)v17)
          {
            LODWORD(v20) = v17;
            result = (uint64_t *)WTF::fastRealloc(v10, (void *)v17);
            v10 = (WTF *)result;
          }
          else
          {
            v19 = 0;
            LODWORD(v20) = 0;
            result = (uint64_t *)WTF::fastFree(v10, v12);
            v10 = v19;
          }
        }
        *(_QWORD *)a2 = v10;
        *(_QWORD *)(a2 + 8) = v20;
        goto LABEL_18;
      }
    }
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    if (v10)
      goto LABEL_20;
  }
  else if (v9)
  {
    v10 = (WTF *)WTF::fastMalloc(v9);
    v11 = 0;
    LODWORD(v20) = (_DWORD)v9;
    v19 = v10;
    while (1)
    {
      result = (uint64_t *)IPC::Decoder::decode<WebCore::PlatformMediaSessionRemoteControlCommandType>(v2);
      v18 = (__int16)result;
      if ((unsigned __int16)result < 0x100u)
        break;
      if (v11 == (_DWORD)v20)
      {
        result = (uint64_t *)WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v19, (WTF *)(v11 + 1), (unint64_t)&v18);
        v11 = HIDWORD(v20);
        v10 = v19;
        *((_BYTE *)v19 + HIDWORD(v20)) = *(_BYTE *)result;
      }
      else
      {
        *((_BYTE *)v10 + v11) = (_BYTE)result;
      }
      HIDWORD(v20) = ++v11;
      v9 = (WTF *)((char *)v9 - 1);
      if (!v9)
      {
        v13 = v20;
        goto LABEL_17;
      }
    }
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
LABEL_20:
    v19 = 0;
    LODWORD(v20) = 0;
    return (uint64_t *)WTF::fastFree(v10, v12);
  }
  else
  {
    v11 = 0;
    v13 = 0;
    v10 = 0;
LABEL_17:
    *(_QWORD *)a2 = v10;
    *(_DWORD *)(a2 + 8) = v13;
    *(_DWORD *)(a2 + 12) = v11;
LABEL_18:
    *(_BYTE *)(a2 + 16) = 1;
  }
  return result;
}

unsigned __int8 *WebKit::RemoteScrollingCoordinator::didReceiveMessage(unsigned __int8 **this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  unsigned __int8 **v6;
  unsigned __int8 *result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v6 = this + 1;
  result = (unsigned __int8 *)WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this + 1);
  if (*((_WORD *)a3 + 25) == 1344)
  {
    IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3, (uint64_t)&v19);
    if (!(_BYTE)v21 || (v9 = IPC::Decoder::decode<WebCore::ScrollbarOrientation>(a3), (unsigned __int16)v9 < 0x100u))
    {
LABEL_31:
      v8 = *(void **)a3;
      v18 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      result = (unsigned __int8 *)*((_QWORD *)a3 + 3);
      if (result && v18)
        result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, void *))(*(_QWORD *)result + 16))(result, v8);
      goto LABEL_12;
    }
    v12 = *((_QWORD *)a3 + 1);
    v13 = *(_QWORD *)a3;
    v14 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
    if (v12 >= v14 && v12 - v14 > 3)
    {
      v16 = (unsigned int *)(v13 + v14);
      *((_QWORD *)a3 + 2) = v16 + 1;
      if (v13)
      {
        if ((_BYTE)v21)
        {
          result = (unsigned __int8 *)WebKit::RemoteScrollingCoordinator::scrollingTreeNodeScrollbarMinimumThumbLengthDidChange((uint64_t)this, v19, v20, v9, *v16);
          goto LABEL_12;
        }
        __break(1u);
        goto LABEL_35;
      }
      v11 = v12;
      v10 = 0;
    }
    else
    {
      v11 = 0;
      v10 = 0;
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v17 = *((_QWORD *)a3 + 3);
      if (v17)
      {
        if (v12)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v17 + 16))(v17, v13, v12);
          v10 = *(_QWORD *)a3;
          v11 = *((_QWORD *)a3 + 1);
        }
        else
        {
          v11 = 0;
          v10 = 0;
        }
      }
    }
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    v9 = *((_QWORD *)a3 + 3);
    if (!v9)
      goto LABEL_31;
LABEL_35:
    if (v11)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v10);
    goto LABEL_31;
  }
  switch(*((_WORD *)a3 + 25))
  {
    case 0x53B:
      result = (unsigned __int8 *)IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t)&v19, (uint64_t *)a3);
      if ((_BYTE)v21)
        result = (unsigned __int8 *)WebKit::RemoteScrollingCoordinator::animatedScrollDidEndForNode();
      break;
    case 0x53C:
      result = (unsigned __int8 *)IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<unsigned int>,std::optional<unsigned int>>>((uint64_t)&v19, (uint64_t *)a3);
      if (v23)
        result = (unsigned __int8 *)WebKit::RemoteScrollingCoordinator::currentSnapPointIndicesChangedForNode(this, v19, v20, v21, v22);
      break;
    case 0x53D:
      result = (unsigned __int8 *)IPC::Decoder::decode<std::tuple<WebCore::PlatformWheelEventPhase,WebCore::PlatformWheelEventPhase>>((uint64_t *)a3);
      if ((result & 0xFFFFFF) >= 0x10000)
        result = WebKit::RemoteScrollingCoordinator::receivedWheelEventWithPhases((WebCore::ScrollingCoordinator *)this);
      break;
    case 0x53E:
      result = (unsigned __int8 *)IPC::handleMessageAsync<Messages::RemoteScrollingCoordinator::ScrollPositionChangedForNode,WebKit::RemoteScrollingCoordinator,WebKit::RemoteScrollingCoordinator,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::FloatPoint const&,std::optional<WebCore::FloatPoint>,BOOL,WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0x53F:
      result = (unsigned __int8 *)IPC::handleMessage<Messages::RemoteScrollingCoordinator::ScrollingStateInUIProcessChanged,WebKit::RemoteScrollingCoordinator,WebKit::RemoteScrollingCoordinator,void ()(WebKit::RemoteScrollingUIState const&)>((uint64_t *)a3, (uint64_t *)this);
      break;
    case 0x541:
      result = (unsigned __int8 *)IPC::handleMessage<Messages::RemoteScrollingCoordinator::ScrollingTreeNodeScrollbarVisibilityDidChange,WebKit::RemoteScrollingCoordinator,WebKit::RemoteScrollingCoordinator,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ScrollbarOrientation,BOOL)>((uint64_t *)a3, (uint64_t)this);
      break;
    case 0x542:
      result = (unsigned __int8 *)IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::OptionSet<WebCore::WheelEventTestMonitorDeferReason>>>((uint64_t)&v19, (uint64_t *)a3);
      if ((_BYTE)v22)
        result = WebKit::RemoteScrollingCoordinator::startDeferringScrollingTestCompletionForNode((WebCore::ScrollingCoordinator *)this);
      break;
    case 0x543:
      result = (unsigned __int8 *)IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::OptionSet<WebCore::WheelEventTestMonitorDeferReason>>>((uint64_t)&v19, (uint64_t *)a3);
      if ((_BYTE)v22)
        result = WebKit::RemoteScrollingCoordinator::stopDeferringScrollingTestCompletionForNode((WebCore::ScrollingCoordinator *)this);
      break;
    default:
      break;
  }
LABEL_12:
  if (this)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*v6, v8);
  return result;
}

unint64_t IPC::handleMessageAsync<Messages::RemoteScrollingCoordinator::ScrollPositionChangedForNode,WebKit::RemoteScrollingCoordinator,WebKit::RemoteScrollingCoordinator,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::FloatPoint const&,std::optional<WebCore::FloatPoint>,BOOL,WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t result;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  _QWORD *v29;
  __int128 v30;
  _QWORD v31[2];
  unsigned int v32;
  BOOL v33;
  char v34;
  __int128 v35;
  char v36;

  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, (uint64_t)&v35);
  if (!v36)
    goto LABEL_17;
  v6 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a2);
  if (!v7)
    goto LABEL_15;
  v8 = v6;
  v9 = IPC::Decoder::decode<std::optional<WebCore::FloatPoint>>((unint64_t *)a2);
  if ((v10 & 0xFF00000000) == 0)
    goto LABEL_17;
  v11 = v10;
  v12 = a2[1];
  v13 = *a2;
  v14 = a2[2] - *a2;
  if (v12 <= v14)
  {
    v22 = 0;
    v23 = 0;
    *a2 = 0;
    a2[1] = 0;
    v24 = a2[3];
    if (v24)
    {
      if (v12)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
        v23 = *a2;
        v22 = a2[1];
      }
      else
      {
        v22 = 0;
        v23 = 0;
      }
    }
  }
  else
  {
    v15 = (unsigned __int8 *)(v13 + v14);
    a2[2] = (uint64_t)(v15 + 1);
    if (v13)
    {
      v16 = *v15;
      if (v16 < 2)
      {
        if (v36)
        {
          v17 = v9;
          v30 = v35;
          v31[0] = v8;
          v31[1] = v9;
          v32 = v11;
          v33 = v16 != 0;
          v34 = 1;
          result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
          if (v19)
          {
            *(_QWORD *)&v35 = result;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v35 + 1, a1);
            v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v20 = off_1E34B3C10;
            v20[1] = v35;
            v21 = *((_QWORD *)&v35 + 1);
            *((_QWORD *)&v35 + 1) = 0;
            v20[2] = v21;
            v29 = v20;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v35 + 1);
            WebKit::RemoteScrollingCoordinator::scrollPositionChangedForNode(a3, v30, *((uint64_t *)&v30 + 1), (uint64_t)v31, v17, v11, v16 != 0, (uint64_t *)&v29);
            result = (unint64_t)v29;
            v29 = 0;
            if (result)
              return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
          }
          return result;
        }
        __break(1u);
        goto LABEL_24;
      }
      goto LABEL_16;
    }
    v22 = v12;
    v23 = 0;
  }
  v12 = 0;
  v13 = 0;
  *a2 = 0;
  a2[1] = 0;
  v25 = a2[3];
  if (v25)
  {
    if (v22)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v23, v22);
LABEL_15:
      v13 = *a2;
      v12 = a2[1];
      goto LABEL_16;
    }
    v12 = 0;
    v13 = 0;
  }
LABEL_16:
  *a2 = 0;
  a2[1] = 0;
  v9 = a2[3];
  if (v9)
  {
LABEL_24:
    if (v12)
      (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v13);
  }
LABEL_17:
  v26 = *a2;
  v27 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
    v28 = v27 == 0;
  else
    v28 = 1;
  if (!v28)
    return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v26);
  return result;
}

uint64_t IPC::handleMessage<Messages::RemoteScrollingCoordinator::ScrollingStateInUIProcessChanged,WebKit::RemoteScrollingCoordinator,WebKit::RemoteScrollingCoordinator,void ()(WebKit::RemoteScrollingUIState const&)>(uint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[8];
  __int128 v10;
  uint64_t v11;
  char v12;
  _BYTE v13[8];
  __int128 v14;
  uint64_t v15;
  char v16;

  IPC::ArgumentCoder<WebKit::RemoteScrollingUIState,void>::decode(a1, (uint64_t)v13);
  if (v16)
  {
LABEL_2:
    v10 = v14;
    v11 = v15;
    v9[0] = v13[0];
    v12 = 1;
    result = (uint64_t)WebKit::RemoteScrollingCoordinator::scrollingStateInUIProcessChanged(a2, (const WebKit::RemoteScrollingUIState *)v9);
    if (v12)
    {
      if (v11)
        result = WTF::fastFree((WTF *)(v11 - 16), v5);
      if (*((_QWORD *)&v10 + 1))
        result = WTF::fastFree((WTF *)(*((_QWORD *)&v10 + 1) - 16), v5);
      if ((_QWORD)v10)
        return WTF::fastFree((WTF *)(v10 - 16), v5);
    }
    return result;
  }
  v6 = *a1;
  v7 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (!result)
  {
    v7 = 0;
LABEL_12:
    v8 = 0;
    goto LABEL_13;
  }
  if (!v7)
    goto LABEL_12;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  if (v16)
    goto LABEL_2;
  v8 = *a1;
  v7 = a1[1];
  result = a1[3];
LABEL_13:
  *a1 = 0;
  a1[1] = 0;
  if (result && v7)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v8);
  return result;
}

WebCore::ScrollableArea *IPC::handleMessage<Messages::RemoteScrollingCoordinator::ScrollingTreeNodeScrollbarVisibilityDidChange,WebKit::RemoteScrollingCoordinator,WebKit::RemoteScrollingCoordinator,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ScrollbarOrientation,BOOL)>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::ScrollableArea *result;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17[2];
  unsigned __int8 v18;

  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)v17);
  if (v18)
  {
    v4 = IPC::Decoder::decode<WebCore::ScrollbarOrientation>(a1);
    if ((unsigned __int16)v4 >= 0x100u)
    {
      v9 = a1[1];
      v10 = *a1;
      v11 = a1[2] - *a1;
      if (v9 <= v11)
      {
        v13 = 0;
        v14 = 0;
        *a1 = 0;
        a1[1] = 0;
        v15 = a1[3];
        if (v15)
        {
          if (v9)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
            v14 = *a1;
            v13 = a1[1];
          }
          else
          {
            v13 = 0;
            v14 = 0;
          }
        }
      }
      else
      {
        v12 = (unsigned __int8 *)(v10 + v11);
        a1[2] = (uint64_t)(v12 + 1);
        if (v10)
        {
          v13 = *v12;
          if (v13 >= 2)
            goto LABEL_16;
          v14 = v18;
          if (v18)
            return WebKit::RemoteScrollingCoordinator::scrollingTreeNodeScrollbarVisibilityDidChange(a2, v17[0], v17[1], v4, (_DWORD)v13 != 0);
          __break(1u);
LABEL_20:
          if (v13)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v14, v13);
            v10 = *a1;
            v9 = a1[1];
          }
          else
          {
            v9 = 0;
            v10 = 0;
          }
LABEL_16:
          *a1 = 0;
          a1[1] = 0;
          v16 = a1[3];
          if (v16 && v9)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v10);
          goto LABEL_3;
        }
        v13 = v9;
        v14 = 0;
      }
      v9 = 0;
      v10 = 0;
      *a1 = 0;
      a1[1] = 0;
      v4 = a1[3];
      if (!v4)
        goto LABEL_16;
      goto LABEL_20;
    }
  }
LABEL_3:
  v5 = *a1;
  v6 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  result = (WebCore::ScrollableArea *)a1[3];
  if (result)
    v8 = v6 == 0;
  else
    v8 = 1;
  if (!v8)
    return (WebCore::ScrollableArea *)(*(uint64_t (**)(WebCore::ScrollableArea *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  return result;
}

unsigned __int8 *`non-virtual thunk to'WebKit::RemoteScrollingCoordinator::didReceiveMessage(unsigned __int8 **this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  return WebKit::RemoteScrollingCoordinator::didReceiveMessage(this - 17, a2, a3);
}

unint64_t IPC::Decoder::decode<std::optional<WebCore::FloatPoint>>(unint64_t *a1)
{
  unint64_t result;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;

  result = IPC::ArgumentCoder<std::optional<WebCore::FloatPoint>,void>::decode<IPC::Decoder>(a1);
  if ((v3 & 0xFF00000000) == 0)
  {
    v5 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v4 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = result;
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::optional<WebCore::FloatPoint>,void>::decode<IPC::Decoder>(unint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unsigned __int8 *v5;
  unsigned int v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v2 = a1[1];
  v3 = *a1;
  v4 = a1[2] - *a1;
  if (v2 <= v4)
  {
    v12 = 0;
    v13 = 0;
    *a1 = 0;
    a1[1] = 0;
    v14 = a1[3];
    if (v14)
    {
      if (v2)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v14 + 16))(v14);
        v13 = *a1;
        v12 = a1[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
    }
    goto LABEL_10;
  }
  v5 = (unsigned __int8 *)(v3 + v4);
  a1[2] = (unint64_t)(v5 + 1);
  if (!v3)
  {
    v12 = v2;
    v13 = 0;
LABEL_10:
    v2 = 0;
    v3 = 0;
    *a1 = 0;
    a1[1] = 0;
    v15 = a1[3];
    if (v15)
    {
      if (v12)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v15 + 16))(v15, v13, v12);
        v3 = *a1;
        v2 = a1[1];
      }
      else
      {
        v2 = 0;
        v3 = 0;
      }
    }
    goto LABEL_11;
  }
  v6 = *v5;
  if (v6 < 2)
  {
    if (v6)
    {
      v7 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
      if (v8)
      {
        v9 = v7 & 0xFFFFFFFFFFFFFF00;
        v10 = v7;
      }
      else
      {
        v17 = *a1;
        v18 = a1[1];
        *a1 = 0;
        a1[1] = 0;
        v19 = a1[3];
        if (v19 && v18)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v19 + 16))(v19, v17);
        v10 = 0;
        v9 = 0;
      }
    }
    else
    {
      v10 = 0;
      v9 = 0;
    }
    return v9 | v10;
  }
LABEL_11:
  v10 = 0;
  v9 = 0;
  *a1 = 0;
  a1[1] = 0;
  v16 = a1[3];
  if (v16)
  {
    if (v2)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v16 + 16))(v16, v3);
    v10 = 0;
    v9 = 0;
  }
  return v9 | v10;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26RemoteScrollingCoordinator28ScrollPositionChangedForNodeEN6WebKit26RemoteScrollingCoordinatorES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19ScrollingNodeIDTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS9_10FloatPointENSt3__18optionalISH_EEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3C10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26RemoteScrollingCoordinator28ScrollPositionChangedForNodeEN6WebKit26RemoteScrollingCoordinatorES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19ScrollingNodeIDTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS9_10FloatPointENSt3__18optionalISH_EEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B3C10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26RemoteScrollingCoordinator28ScrollPositionChangedForNodeEN6WebKit26RemoteScrollingCoordinatorES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19ScrollingNodeIDTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS9_10FloatPointENSt3__18optionalISH_EEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3116;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  __int128 v8;
  char v9;

  result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, (uint64_t)&v8);
  if (v9)
  {
    *(_OWORD *)a1 = v8;
    *(_BYTE *)(a1 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::optional<unsigned int>,std::optional<unsigned int>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  __int128 v12;
  char v13;

  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, (uint64_t)&v12);
  if (v13
    && (v4 = IPC::Decoder::decode<std::optional<unsigned int>>(a2), v5)
    && (v6 = v4, result = IPC::Decoder::decode<std::optional<unsigned int>>(a2), v8))
  {
    if (v13)
    {
      *(_OWORD *)a1 = v12;
      *(_QWORD *)(a1 + 16) = v6;
      *(_QWORD *)(a1 + 24) = result;
      *(_BYTE *)(a1 + 32) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 32) = 0;
    v9 = *a2;
    v10 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v11 = v10 == 0;
    else
      v11 = 1;
    if (!v11)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v9);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::PlatformWheelEventPhase,WebCore::PlatformWheelEventPhase>>(uint64_t *a1)
{
  unsigned __int16 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  int v5;
  unsigned __int8 v6;
  unsigned __int16 v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = IPC::Decoder::decode<WebCore::PlatformWheelEventPhase>(a1);
  if (v2 >= 0x100u)
  {
    v6 = v2;
    v7 = IPC::Decoder::decode<WebCore::PlatformWheelEventPhase>(a1);
    v5 = v7 > 0xFFu;
    if ((v7 & 0xFF00) != 0)
      v4 = v6;
    else
      v4 = 0;
    if ((v7 & 0xFF00) != 0)
      v3 = v7;
    else
      v3 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v8 = v5 << 16;
  result = v8 & 0xFFFF0000 | (v3 << 8) | v4;
  if (!v8)
  {
    v10 = *a1;
    v11 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12)
    {
      if (v11)
      {
        v13 = result;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v10);
        return v13;
      }
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::PlatformWheelEventPhase>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned int v17;
  _QWORD *v18;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v10 = 0;
    v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12)
    {
      v18 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v2, v1);
        a1 = v18;
        v11 = *v18;
        v10 = v18[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
  }
  else
  {
    v4 = (unsigned __int8 *)(v2 + v3);
    a1[2] = v4 + 1;
    if (v2)
    {
      LODWORD(v5) = *v4;
      if (v5 <= 0x20 && ((1 << v5) & 0x100010117) != 0)
      {
        v7 = 1;
        goto LABEL_8;
      }
      LODWORD(v5) = 0;
LABEL_11:
      v7 = 0;
      goto LABEL_8;
    }
    v10 = v1;
    v11 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  v5 = a1[3];
  if (!v5)
    goto LABEL_11;
  v16 = a1;
  if (v10)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v11);
  LODWORD(v5) = 0;
  v7 = 0;
  a1 = v16;
LABEL_8:
  v8 = v5 | (v7 << 8);
  if (v8 <= 0xFF)
  {
    v13 = *a1;
    v14 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v15 = a1[3];
    if (v15)
    {
      if (v14)
      {
        v17 = v8;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13);
        return v17;
      }
    }
  }
  return v8;
}

unint64_t IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::OptionSet<WebCore::WheelEventTestMonitorDeferReason>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int16 *v11;
  unsigned int v12;
  __int16 v13;
  __int16 v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  __int128 v23;
  char v24;

  result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, (uint64_t)&v23);
  if (v24)
  {
    v7 = a2[1];
    v8 = *a2;
    v9 = ((a2[2] + 1) & 0xFFFFFFFFFFFFFFFELL) - *a2;
    if (v7 < v9 || v7 - v9 <= 1)
    {
      v6 = 0;
      v5 = 0;
      *a2 = 0;
      a2[1] = 0;
      v16 = a2[3];
      if (v16)
      {
        if (v7)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v16 + 16))(v16, v8, v7);
          v5 = *a2;
          v6 = a2[1];
        }
        else
        {
          v6 = 0;
          v5 = 0;
        }
      }
LABEL_11:
      *a2 = 0;
      a2[1] = 0;
      result = a2[3];
      if (result)
        goto LABEL_24;
      goto LABEL_12;
    }
    v11 = (unsigned __int16 *)(v8 + v9);
    a2[2] = (uint64_t)(v11 + 1);
    if (!v8)
    {
      v6 = v7;
      v5 = 0;
      goto LABEL_11;
    }
    v12 = *v11;
    if (v12 <= 0x3FF)
    {
      v13 = v12 & 0x300;
      v14 = v12;
      v15 = 0x10000;
      goto LABEL_13;
    }
LABEL_12:
    while (1)
    {
      v15 = 0;
      v14 = 0;
      v13 = 0;
LABEL_13:
      if (!HIWORD(v15))
        break;
      if (v24)
      {
        *(_OWORD *)a1 = v23;
        *(_WORD *)(a1 + 16) = v14 | v15 | v13;
        *(_BYTE *)(a1 + 24) = 1;
        return result;
      }
      __break(1u);
LABEL_24:
      if (v6)
        result = (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
    }
    v17 = *a2;
    v18 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v19 = a2[3];
    if (v19 && v18)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v17);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  v20 = *a2;
  v21 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
    v22 = v21 == 0;
  else
    v22 = 1;
  if (!v22)
    return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v20);
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::ScrollbarOrientation>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v9 = 0;
    v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11)
    {
      v18 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v2, v1);
        a1 = v18;
        v10 = *v18;
        v9 = v18[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
    goto LABEL_8;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    v9 = v1;
    v10 = 0;
LABEL_8:
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12 && v9)
    {
      v17 = a1;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v10);
      a1 = v17;
    }
    goto LABEL_9;
  }
  v5 = *v4;
  if (v5 >= 2)
  {
LABEL_9:
    v5 = 0;
    v6 = 0;
    goto LABEL_5;
  }
  v6 = 1;
LABEL_5:
  v7 = v5 | (v6 << 8);
  if (v7 <= 0xFF)
  {
    v13 = *a1;
    v14 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v15 = a1[3];
    if (v15)
    {
      if (v14)
      {
        v16 = v7;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13);
        return v16;
      }
    }
  }
  return v7;
}

WTF *WebKit::RemoteSourceBufferProxy::didReceiveMessage(WTF *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  uint64_t *v3;
  WTF *v5;
  uint64_t (*v6)(void);
  uint64_t (*v7)(void);
  uint64_t (*v8)(void);
  char v9;
  WTF *v10;
  char v11;
  uint64_t v12;
  WTF *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  void *v18;
  WTF *v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  char v24;
  WTF *v25;
  char v26;
  uint64_t v27;
  WTF *v28;
  char v29;
  char v30;
  uint64_t v31;
  WTF *v32;
  char v33;
  uint64_t v34;
  WTF *v35;
  char v36;
  WTF *v37;
  char v38;
  uint64_t v39;
  WTF *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t *v45;
  unint64_t v46;
  WTF *v47;
  unsigned int v48;
  _OWORD *v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF *v65;
  uint64_t v66;
  _OWORD *v67;
  int v68;
  uint64_t v69;
  __int128 v70;
  unsigned __int8 v71;
  __int128 v72;
  unsigned __int8 v73;
  WTF *v74[2];
  char v75;
  WTF *v76[2];
  __int128 v77;
  __int128 v78;
  unsigned __int8 v79;

  v3 = (uint64_t *)a3;
  v5 = this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x548:
      v6 = *(uint64_t (**)(void))(**((_QWORD **)this + 7) + 72);
      return (WTF *)v6();
    case 0x549:
      this = (WTF *)IPC::Decoder::decode<std::tuple<double>>((uint64_t *)a3);
      if (v29)
        return (WTF *)WebKit::RemoteSourceBufferProxy::addTrackBuffer(v5, (unint64_t)this);
      return this;
    case 0x54A:
      IPC::Decoder::decode<std::tuple<IPC::SharedBufferReference>>((uint64_t *)a3, (uint64_t)v76);
      if (!BYTE8(v77))
        return (WTF *)std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v76, v18);
      v19 = (WTF *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3);
      if (!(_BYTE)v18)
        return (WTF *)std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v76, v18);
      v74[0] = v19;
      v3 = (uint64_t *)&v74[1];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v74[1], a2);
      v20 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v20 = off_1E34B3C38;
      *(WTF **)(v20 + 8) = v74[0];
      v21 = v74[1];
      v74[1] = 0;
      *(_QWORD *)(v20 + 16) = v21;
      *(_QWORD *)&v72 = v20;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v74[1]);
      v15 = BYTE8(v77);
      if (!BYTE8(v77))
        goto LABEL_97;
      WebKit::RemoteSourceBufferProxy::append((uint64_t)v5, (IPC::SharedBufferReference *)v76, (uint64_t *)&v72);
      v22 = v72;
      *(_QWORD *)&v72 = 0;
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      return (WTF *)std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v76, v18);
    case 0x54B:
      this = (WTF *)IPC::Decoder::decode<std::tuple<unsigned long long,WTF::MediaTime>>((uint64_t)v76, (uint64_t *)a3);
      if (!BYTE8(v77))
        return this;
      v23 = *(uint64_t (**)(void))(**((_QWORD **)v5 + 7) + 200);
      return (WTF *)v23();
    case 0x54C:
      this = (WTF *)IPC::Decoder::decode<std::tuple<double>>((uint64_t *)a3);
      if (!v9)
        return this;
      v10 = this;
      this = (WTF *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3);
      if (!v11)
        return this;
      v76[0] = this;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v76[1], a2);
      v12 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v12 = off_1E34B3CD8;
      *(WTF **)(v12 + 8) = v76[0];
      v13 = v76[1];
      v76[1] = 0;
      *(_QWORD *)(v12 + 16) = v13;
      v74[0] = (WTF *)v12;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v76[1]);
      WebKit::RemoteSourceBufferProxy::bufferedSamplesForTrackId((uint64_t)v5, (uint64_t)v10, (uint64_t *)v74);
      goto LABEL_62;
    case 0x54D:
      v8 = *(uint64_t (**)(void))(**((_QWORD **)this + 7) + 144);
      return (WTF *)v8();
    case 0x54E:
      this = (WTF *)IPC::Decoder::decode<std::tuple<WebCore::SeekTarget>>((uint64_t *)a3, (uint64_t)v76);
      if (!v79)
        return this;
      this = (WTF *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3);
      if (!v30)
        return this;
      v74[0] = this;
      v3 = (uint64_t *)&v74[1];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v74[1], a2);
      v31 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v31 = off_1E34B3CB0;
      *(WTF **)(v31 + 8) = v74[0];
      v32 = v74[1];
      v74[1] = 0;
      *(_QWORD *)(v31 + 16) = v32;
      *(_QWORD *)&v72 = v31;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v74[1]);
      v15 = v79;
      if (!v79)
        goto LABEL_97;
      WebKit::RemoteSourceBufferProxy::computeSeekTime((uint64_t)v5, (uint64_t)v76, (uint64_t *)&v72);
      goto LABEL_46;
    case 0x54F:
      this = (WTF *)IPC::Decoder::decode<std::tuple<double>>((uint64_t *)a3);
      if (!v24)
        return this;
      v25 = this;
      this = (WTF *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3);
      if (!v26)
        return this;
      v76[0] = this;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v76[1], a2);
      v27 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v27 = off_1E34B3D00;
      *(WTF **)(v27 + 8) = v76[0];
      v28 = v76[1];
      v76[1] = 0;
      *(_QWORD *)(v27 + 16) = v28;
      v74[0] = (WTF *)v27;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v76[1]);
      WebKit::RemoteSourceBufferProxy::enqueuedSamplesForTrackID((uint64_t)v5, (uint64_t)v25, (uint64_t *)v74);
      goto LABEL_62;
    case 0x550:
      this = (WTF *)IPC::Decoder::decode<std::tuple<WTF::MediaTime>>((uint64_t *)a3, (uint64_t)v76);
      if (!(_BYTE)v77)
        return this;
      v7 = *(uint64_t (**)(void))(**((_QWORD **)v5 + 7) + 328);
      return (WTF *)v7();
    case 0x551:
      this = (WTF *)IPC::Decoder::decode<std::tuple<WTF::MediaTime>>((uint64_t *)a3, (uint64_t)v76);
      if (!(_BYTE)v77)
        return this;
      v7 = *(uint64_t (**)(void))(**((_QWORD **)v5 + 7) + 120);
      return (WTF *)v7();
    case 0x552:
      IPC::Decoder::decode<WTF::MediaTime>((uint64_t *)a3, (uint64_t)&v70);
      if (!v71
        || (IPC::Decoder::decode<WTF::MediaTime>(v3, (uint64_t)&v72), !v73)
        || (IPC::Decoder::decode<WTF::MediaTime>(v3, (uint64_t)v74), !v75))
      {
        v52 = v3[1];
        *v3 = 0;
        v3[1] = 0;
        this = (WTF *)v3[3];
        if (!this)
          return this;
        goto LABEL_124;
      }
      v15 = v71;
      if (!v71 || (v15 = v73) == 0)
      {
LABEL_97:
        __break(1u);
LABEL_98:
        v53 = 0;
        v54 = 0;
        *v3 = 0;
        v3[1] = 0;
        v55 = v3[3];
        if (v55)
        {
          if (v14)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v55 + 16))(v55, v15, v14);
            v54 = *v3;
            v53 = v3[1];
          }
          else
          {
            v53 = 0;
            v54 = 0;
          }
        }
        goto LABEL_99;
      }
      *(_OWORD *)v76 = v70;
      v77 = v72;
      v78 = *(_OWORD *)v74;
      v79 = 1;
      this = (WTF *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3);
      if (v33)
      {
        v74[0] = this;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v74[1], a2);
        v34 = WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v34 = off_1E34B3C60;
        *(WTF **)(v34 + 8) = v74[0];
        v35 = v74[1];
        v74[1] = 0;
        *(_QWORD *)(v34 + 16) = v35;
        *(_QWORD *)&v72 = v34;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v74[1]);
        WebKit::RemoteSourceBufferProxy::removeCodedFrames((uint64_t)v5, (uint64_t)v76, (uint64_t)&v77, (uint64_t)&v78, (uint64_t *)&v72);
LABEL_46:
        this = (WTF *)v72;
        *(_QWORD *)&v72 = 0;
        if (this)
          return (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)this + 8))(this);
      }
      return this;
    case 0x553:
      v6 = *(uint64_t (**)(void))(**((_QWORD **)this + 7) + 88);
      return (WTF *)v6();
    case 0x554:
      v6 = *(uint64_t (**)(void))(**((_QWORD **)this + 7) + 80);
      return (WTF *)v6();
    case 0x555:
      v6 = *(uint64_t (**)(void))(**((_QWORD **)this + 7) + 224);
      return (WTF *)v6();
    case 0x556:
      v6 = *(uint64_t (**)(void))(**((_QWORD **)this + 7) + 136);
      return (WTF *)v6();
    case 0x557:
      this = (WTF *)IPC::Decoder::decode<std::tuple<WTF::MediaTime>>((uint64_t *)a3, (uint64_t)v76);
      if (!(_BYTE)v77)
        return this;
      v7 = *(uint64_t (**)(void))(**((_QWORD **)v5 + 7) + 272);
      return (WTF *)v7();
    case 0x558:
      this = (WTF *)IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if ((unsigned __int16)this < 0x100u)
        return this;
      v8 = *(uint64_t (**)(void))(**((_QWORD **)v5 + 7) + 56);
      return (WTF *)v8();
    case 0x559:
      v6 = *(uint64_t (**)(void))(**((_QWORD **)this + 7) + 152);
      return (WTF *)v6();
    case 0x55A:
      this = (WTF *)IPC::Decoder::decode<std::tuple<WTF::MediaTime>>((uint64_t *)a3, (uint64_t)v76);
      if (!(_BYTE)v77)
        return this;
      v7 = *(uint64_t (**)(void))(**((_QWORD **)v5 + 7) + 256);
      return (WTF *)v7();
    case 0x55B:
      this = (WTF *)IPC::Decoder::decode<std::tuple<WTF::MediaTime>>((uint64_t *)a3, (uint64_t)v76);
      if (!(_BYTE)v77)
        return this;
      v7 = *(uint64_t (**)(void))(**((_QWORD **)v5 + 7) + 248);
      return (WTF *)v7();
    case 0x55C:
      this = (WTF *)IPC::Decoder::decode<std::tuple<WTF::MediaTime>>((uint64_t *)a3, (uint64_t)v76);
      if (!(_BYTE)v77)
        return this;
      v7 = *(uint64_t (**)(void))(**((_QWORD **)v5 + 7) + 160);
      return (WTF *)v7();
    case 0x55D:
      v6 = *(uint64_t (**)(void))(**((_QWORD **)this + 7) + 168);
      return (WTF *)v6();
    case 0x55E:
      this = (WTF *)IPC::Decoder::decode<std::tuple<double>>((uint64_t *)a3);
      if (!v36)
        return this;
      v37 = this;
      this = (WTF *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3);
      if (!v38)
        return this;
      v76[0] = this;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v76[1], a2);
      v39 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v39 = off_1E34B3C88;
      *(WTF **)(v39 + 8) = v76[0];
      v40 = v76[1];
      v76[1] = 0;
      *(_QWORD *)(v39 + 16) = v40;
      v74[0] = (WTF *)v39;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v76[1]);
      WebKit::RemoteSourceBufferProxy::setMaximumBufferSize((uint64_t)v5, (uint64_t)v37, (uint64_t *)v74);
LABEL_62:
      this = v74[0];
      v74[0] = 0;
      if (this)
        return (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)this + 8))(this);
      return this;
    case 0x55F:
      this = (WTF *)IPC::Decoder::decode<std::tuple<unsigned long long,unsigned long long>>((uint64_t *)a3, (uint64_t)v76);
      if (!(_BYTE)v77)
        return this;
      v23 = *(uint64_t (**)(void))(**((_QWORD **)v5 + 7) + 360);
      return (WTF *)v23();
    case 0x560:
      this = (WTF *)IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if ((unsigned __int16)this < 0x100u)
        return this;
      v8 = *(uint64_t (**)(void))(**((_QWORD **)v5 + 7) + 104);
      return (WTF *)v8();
    case 0x561:
      v14 = *((_QWORD *)a3 + 1);
      v15 = *(_QWORD *)a3;
      v16 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
      if (v14 <= v16)
        goto LABEL_98;
      v17 = (unsigned __int8 *)(v15 + v16);
      *((_QWORD *)a3 + 2) = v17 + 1;
      if (v15)
      {
        if (*v17 < 2u)
        {
          v8 = *(uint64_t (**)(void))(**((_QWORD **)this + 7) + 112);
          return (WTF *)v8();
        }
      }
      else
      {
        v53 = v14;
        v54 = 0;
LABEL_99:
        *v3 = 0;
        v3[1] = 0;
        v56 = v3[3];
        if (v56 && v53)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v56 + 16))(v56, v54);
      }
      v57 = *v3;
      v58 = v3[1];
      *v3 = 0;
      v3[1] = 0;
      this = (WTF *)v3[3];
      if (this)
      {
        if (v58)
        {
          (*(void (**)(WTF *, uint64_t))(*(_QWORD *)this + 16))(this, v57);
          v59 = *v3;
          v60 = v3[1];
          this = (WTF *)v3[3];
          *v3 = 0;
          v3[1] = 0;
          if (this)
          {
            if (v60)
              return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)this + 16))(this, v59);
          }
        }
      }
      return this;
    case 0x562:
      this = (WTF *)IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if ((unsigned __int16)this < 0x100u)
        return this;
      v8 = *(uint64_t (**)(void))(**((_QWORD **)v5 + 7) + 176);
      return (WTF *)v8();
    case 0x563:
      this = (WTF *)IPC::Decoder::decode<std::tuple<WTF::MediaTime>>((uint64_t *)a3, (uint64_t)v76);
      if (!(_BYTE)v77)
        return this;
      v7 = *(uint64_t (**)(void))(**((_QWORD **)v5 + 7) + 240);
      return (WTF *)v7();
    case 0x564:
      v6 = *(uint64_t (**)(void))(**((_QWORD **)this + 7) + 232);
      return (WTF *)v6();
    case 0x565:
      v41 = *((_QWORD *)a3 + 1);
      v42 = *(_QWORD *)a3;
      v43 = ((*((_QWORD *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a3;
      if (v41 < v43 || v41 - v43 <= 7)
      {
        v61 = 0;
        v62 = 0;
        *v3 = 0;
        v3[1] = 0;
        v63 = v3[3];
        if (v63)
        {
          if (v41)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v63 + 16))(v63, v42, v41);
            v62 = *v3;
            v61 = v3[1];
          }
          else
          {
            v61 = 0;
            v62 = 0;
          }
        }
        goto LABEL_106;
      }
      v45 = (unint64_t *)(v42 + v43);
      *((_QWORD *)a3 + 2) = v45 + 1;
      if (!v42)
      {
        v61 = v41;
        v62 = 0;
LABEL_106:
        *v3 = 0;
        v3[1] = 0;
        v64 = v3[3];
        if (v64 && v61)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v64 + 16))(v64, v62);
        goto LABEL_120;
      }
      v46 = *v45;
      v74[0] = 0;
      v74[1] = 0;
      if (v46 < 0x10000)
      {
        if (v46)
        {
          v47 = (WTF *)WTF::fastMalloc((WTF *)(16 * v46));
          v48 = 0;
          LODWORD(v74[1]) = v46;
          v74[0] = v47;
          do
          {
            IPC::Decoder::decode<std::pair<unsigned long long,unsigned long long>>((uint64_t)v76, v3);
            if (!(_BYTE)v77)
              goto LABEL_119;
            if (v48 == LODWORD(v74[1]))
            {
              v49 = (_OWORD *)WTF::Vector<WebCore::LinearTimingFunction::Point,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v74, v48 + 1, (unint64_t)v76);
              v50 = HIDWORD(v74[1]);
              v47 = v74[0];
              *((_OWORD *)v74[0] + HIDWORD(v74[1])) = *v49;
            }
            else
            {
              *((_OWORD *)v47 + v48) = *(_OWORD *)v76;
              v50 = HIDWORD(v74[1]);
            }
            v48 = v50 + 1;
            HIDWORD(v74[1]) = v50 + 1;
            --v46;
          }
          while (v46);
          v51 = v74[1];
        }
        else
        {
          v51 = 0;
          v47 = 0;
          v48 = 0;
        }
LABEL_93:
        v76[0] = v47;
        v76[1] = (WTF *)__PAIR64__(v48, v51);
        LOBYTE(v77) = 1;
        if (!v48
          || (this = (WTF *)(*(uint64_t (**)(_QWORD, WTF **))(**((_QWORD **)v5 + 7) + 280))(*((_QWORD *)v5 + 7), v76), (_BYTE)v77))
        {
          this = v76[0];
          if (v76[0])
          {
            v76[0] = 0;
            LODWORD(v76[1]) = 0;
            return (WTF *)WTF::fastFree(this, a2);
          }
        }
        return this;
      }
      v65 = 0;
      LODWORD(v66) = 0;
      while (1)
      {
        IPC::Decoder::decode<std::pair<unsigned long long,unsigned long long>>((uint64_t)v76, v3);
        if (!(_BYTE)v77)
          break;
        if ((_DWORD)v66 == LODWORD(v74[1]))
        {
          v67 = (_OWORD *)WTF::Vector<WebCore::LinearTimingFunction::Point,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v74, v66 + 1, (unint64_t)v76);
          v68 = HIDWORD(v74[1]);
          v65 = v74[0];
          *((_OWORD *)v74[0] + HIDWORD(v74[1])) = *v67;
        }
        else
        {
          *((_OWORD *)v65 + v66) = *(_OWORD *)v76;
          v68 = HIDWORD(v74[1]);
        }
        v66 = (v68 + 1);
        HIDWORD(v74[1]) = v68 + 1;
        if (!--v46)
        {
          if (LODWORD(v74[1]) > v66)
          {
            if (v68 == -1)
            {
              v74[0] = 0;
              LODWORD(v74[1]) = 0;
              WTF::fastFree(v65, a2);
            }
            else
            {
              LODWORD(v74[1]) = v68 + 1;
              v74[0] = (WTF *)WTF::fastRealloc(v65, (void *)(16 * v66));
            }
          }
          v47 = v74[0];
          v51 = v74[1];
          v48 = HIDWORD(v74[1]);
          goto LABEL_93;
        }
      }
      v47 = v74[0];
      if (v74[0])
      {
LABEL_119:
        v74[0] = 0;
        LODWORD(v74[1]) = 0;
        WTF::fastFree(v47, a2);
      }
LABEL_120:
      v69 = *v3;
      v52 = v3[1];
      *v3 = 0;
      v3[1] = 0;
      this = (WTF *)v3[3];
      if (this)
      {
        if (v52)
        {
          (*(void (**)(WTF *, uint64_t))(*(_QWORD *)this + 16))(this, v69);
          v52 = v3[1];
          this = (WTF *)v3[3];
        }
      }
      else
      {
        v52 = 0;
      }
      *v3 = 0;
      v3[1] = 0;
      if (this)
      {
LABEL_124:
        if (v52)
        {
          v23 = *(uint64_t (**)(void))(*(_QWORD *)this + 16);
          return (WTF *)v23();
        }
      }
      return this;
    default:
      return this;
  }
}

WTF *`non-virtual thunk to'WebKit::RemoteSourceBufferProxy::didReceiveMessage(WebKit::RemoteSourceBufferProxy *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  return WebKit::RemoteSourceBufferProxy::didReceiveMessage((WebKit::RemoteSourceBufferProxy *)((char *)this - 16), a2, a3);
}

BOOL WebKit::RemoteSourceBufferProxy::didReceiveSyncMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  int v4;

  v4 = *(unsigned __int16 *)(a3 + 50);
  switch(v4)
  {
    case 3643:
      return IPC::handleMessageSynchronous<Messages::RemoteSourceBufferProxy::MinimumUpcomingPresentationTimeForTrackID,WebKit::RemoteSourceBufferProxy,WebKit::RemoteSourceBufferProxy,void ()(unsigned long long,WTF::CompletionHandler<void ()(WTF::MediaTime)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, unint64_t, _QWORD **))WebKit::RemoteSourceBufferProxy::minimumUpcomingPresentationTimeForTrackID, 0);
    case 3642:
      return IPC::handleMessageSynchronous<Messages::RemoteSourceBufferProxy::EvictCodedFrames,WebKit::RemoteSourceBufferProxy,WebKit::RemoteSourceBufferProxy,void ()(unsigned long long,WTF::MediaTime const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::SourceBufferEvictionData &&)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, uint64_t, uint64_t *, _QWORD **))WebKit::RemoteSourceBufferProxy::evictCodedFrames, 0);
    case 3641:
      return IPC::handleMessageSynchronous<Messages::RemoteSourceBufferProxy::CanSwitchToType,WebKit::RemoteSourceBufferProxy,WebKit::RemoteSourceBufferProxy,void ()(WebCore::ContentType const&,WTF::CompletionHandler<void ()(BOOL)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, WTF::StringImpl **, _QWORD **))WebKit::RemoteSourceBufferProxy::canSwitchToType, 0);
  }
  return 0;
}

BOOL IPC::handleMessageSynchronous<Messages::RemoteSourceBufferProxy::CanSwitchToType,WebKit::RemoteSourceBufferProxy,WebKit::RemoteSourceBufferProxy,void ()(WebCore::ContentType const&,WTF::CompletionHandler<void ()(BOOL)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, WTF::StringImpl **, _QWORD **), uint64_t a6)
{
  int v11;
  IPC::Encoder *v12;
  _QWORD *v13;
  unsigned __int8 **v14;
  _BOOL8 result;
  _QWORD *v16;
  WTF::StringImpl *v17;
  _QWORD *v18;
  WTF::StringImpl *v19;
  IPC::Encoder *v20;
  unsigned __int8 **v21;
  _QWORD *v22;
  WTF::StringImpl *v23[2];
  unsigned __int8 v24;

  IPC::Decoder::decode<std::tuple<WebCore::ContentType>>(a2, (uint64_t)v23);
  v11 = v24;
  if (!v24)
    return v11 != 0;
  v12 = *a3;
  *a3 = 0;
  v20 = v12;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v21, a1);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = off_1E34B3D28;
  v13[1] = v20;
  v14 = v21;
  v21 = 0;
  v13[2] = v14;
  v22 = v13;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v21);
  result = 0;
  if (v24)
  {
    v16 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, WTF::StringImpl **, _QWORD **))(*v16 + a5);
    a5(v16, v23, &v22);
    v18 = v22;
    v22 = 0;
    if (v18)
      (*(void (**)(_QWORD *))(*v18 + 8))(v18);
    if (v24)
    {
      v19 = v23[0];
      v23[0] = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v17);
        else
          *(_DWORD *)v19 -= 2;
      }
    }
    return v11 != 0;
  }
  __break(1u);
  return result;
}

BOOL IPC::handleMessageSynchronous<Messages::RemoteSourceBufferProxy::EvictCodedFrames,WebKit::RemoteSourceBufferProxy,WebKit::RemoteSourceBufferProxy,void ()(unsigned long long,WTF::MediaTime const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::SourceBufferEvictionData &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, uint64_t, uint64_t *, _QWORD **), uint64_t a6)
{
  int v11;
  IPC::Encoder *v12;
  _QWORD *v13;
  unsigned __int8 **v14;
  _QWORD *v15;
  _QWORD *v16;
  IPC::Encoder *v18;
  unsigned __int8 **v19[2];
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;

  IPC::Decoder::decode<std::tuple<unsigned long long,WTF::MediaTime>>((uint64_t)&v21, a2);
  v11 = v23;
  if (v23)
  {
    v12 = *a3;
    *a3 = 0;
    v18 = v12;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v19, a1);
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v13 = off_1E34B3D50;
    v13[1] = v18;
    v14 = v19[0];
    v19[0] = 0;
    v13[2] = v14;
    v20 = v13;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v19);
    v15 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, uint64_t, uint64_t *, _QWORD **))(*v15 + a5);
    a5(v15, v21, &v22, &v20);
    v16 = v20;
    v20 = 0;
    if (v16)
      (*(void (**)(_QWORD *))(*v16 + 8))(v16);
  }
  return v11 != 0;
}

BOOL IPC::handleMessageSynchronous<Messages::RemoteSourceBufferProxy::MinimumUpcomingPresentationTimeForTrackID,WebKit::RemoteSourceBufferProxy,WebKit::RemoteSourceBufferProxy,void ()(unsigned long long,WTF::CompletionHandler<void ()(WTF::MediaTime)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, unint64_t, _QWORD **), uint64_t a6)
{
  unint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  unint64_t v14;
  IPC::Encoder *v15;
  _QWORD *v16;
  unsigned __int8 **v17;
  _QWORD *v18;
  _QWORD *v19;
  IPC::Encoder *v21;
  unsigned __int8 **v22[2];
  _QWORD *v23;

  v11 = IPC::Decoder::decode<std::tuple<double>>(a2);
  v13 = v12;
  if (v12)
  {
    v14 = v11;
    v15 = *a3;
    *a3 = 0;
    v21 = v15;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v22, a1);
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v16 = off_1E34B3D78;
    v16[1] = v21;
    v17 = v22[0];
    v22[0] = 0;
    v16[2] = v17;
    v23 = v16;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v22);
    v18 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, unint64_t, _QWORD **))(*v18 + a5);
    a5(v18, v14, &v23);
    v19 = v23;
    v23 = 0;
    if (v19)
      (*(void (**)(_QWORD *))(*v19 + 8))(v19);
  }
  return v13 != 0;
}

BOOL `non-virtual thunk to'WebKit::RemoteSourceBufferProxy::didReceiveSyncMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  return WebKit::RemoteSourceBufferProxy::didReceiveSyncMessage(a1 - 16, a2, a3, a4);
}

uint64_t IPC::Decoder::decode<std::tuple<IPC::SharedBufferReference>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<IPC::SharedBufferReference>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 24))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<IPC::SharedBufferReference>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  char v4;
  __int128 v5;
  uint64_t v7;
  __int128 v8;
  char v9;

  IPC::Decoder::decode<IPC::SharedBufferReference>(a1, (uint64_t)&v7);
  v4 = v9;
  if (v9)
  {
    *(_QWORD *)a2 = v7;
    v5 = v8;
    v8 = 0uLL;
    *(_OWORD *)(a2 + 8) = v5;
    v4 = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 24) = v4;
  return std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v7, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23RemoteSourceBufferProxy6AppendEN6WebKit23RemoteSourceBufferProxyES8_FvONS2_21SharedBufferReferenceEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEERKNS_9MediaTimeEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_SK_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3C38;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23RemoteSourceBufferProxy6AppendEN6WebKit23RemoteSourceBufferProxyES8_FvONS2_21SharedBufferReferenceEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEERKNS_9MediaTimeEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_SK_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B3C38;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23RemoteSourceBufferProxy6AppendEN6WebKit23RemoteSourceBufferProxyES8_FvONS2_21SharedBufferReferenceEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEERKNS_9MediaTimeEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_SK_EE4callESH_SK_(uint64_t a1, char *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 3118;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,void>::encode<IPC::Encoder>(v7, a2);
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode((IPC::Encoder *)v7, a3);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23RemoteSourceBufferProxy17RemoveCodedFramesEN6WebKit23RemoteSourceBufferProxyES8_FvRKNS_9MediaTimeESB_SB_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3C60;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23RemoteSourceBufferProxy17RemoveCodedFramesEN6WebKit23RemoteSourceBufferProxyES8_FvRKNS_9MediaTimeESB_SB_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B3C60;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23RemoteSourceBufferProxy17RemoveCodedFramesEN6WebKit23RemoteSourceBufferProxyES8_FvRKNS_9MediaTimeESB_SB_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3122;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

int64_t IPC::Decoder::decode<std::tuple<unsigned long long,WTF::MediaTime>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  int64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  char v18;

  v4 = a2[1];
  v5 = *a2;
  v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    v11 = 0;
    v12 = 0;
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v5, v4);
        v12 = *a2;
        v11 = a2[1];
      }
      else
      {
        v11 = 0;
        v12 = 0;
      }
    }
    goto LABEL_10;
  }
  v8 = (uint64_t *)(v5 + v6);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v11 = v4;
    v12 = 0;
LABEL_10:
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14 && v11)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v12);
    goto LABEL_11;
  }
  v9 = *v8;
  result = IPC::Decoder::decode<WTF::MediaTime>(a2, (uint64_t)&v17);
  if (v18)
  {
    *(_QWORD *)a1 = v9;
    *(_OWORD *)(a1 + 8) = v17;
    *(_BYTE *)(a1 + 24) = 1;
    return result;
  }
LABEL_11:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  v15 = *a2;
  v16 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v16)
      return (*(uint64_t (**)(int64_t, uint64_t))(*(_QWORD *)result + 16))(result, v15);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23RemoteSourceBufferProxy20SetMaximumBufferSizeEN6WebKit23RemoteSourceBufferProxyES8_FvmONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3C88;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23RemoteSourceBufferProxy20SetMaximumBufferSizeEN6WebKit23RemoteSourceBufferProxyES8_FvmONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B3C88;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23RemoteSourceBufferProxy20SetMaximumBufferSizeEN6WebKit23RemoteSourceBufferProxyES8_FvmONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3123;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23RemoteSourceBufferProxy15ComputeSeekTimeEN6WebKit23RemoteSourceBufferProxyES8_FvRKN7WebCore10SeekTargetEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_9MediaTimeENS9_18PlatformMediaErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3CB0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23RemoteSourceBufferProxy15ComputeSeekTimeEN6WebKit23RemoteSourceBufferProxyES8_FvRKN7WebCore10SeekTargetEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_9MediaTimeENS9_18PlatformMediaErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B3CB0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23RemoteSourceBufferProxy15ComputeSeekTimeEN6WebKit23RemoteSourceBufferProxyES8_FvRKN7WebCore10SeekTargetEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_9MediaTimeENS9_18PlatformMediaErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3120;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::pair<unsigned long long,unsigned long long>>(uint64_t result, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  v2 = a2[1];
  v3 = *a2;
  v4 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v2 < v4 || v2 - v4 <= 7)
  {
    v12 = 0;
    v13 = 0;
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14)
    {
      v23 = a2;
      v25 = result;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v3);
        a2 = v23;
        result = v25;
        v13 = *v23;
        v12 = v23[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
    }
LABEL_15:
    *a2 = 0;
    a2[1] = 0;
    v15 = a2[3];
    if (v15 && v12)
    {
      v22 = a2;
      v24 = result;
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v15 + 16))(v15, v13, v12);
LABEL_28:
      a2 = v22;
      result = v24;
      goto LABEL_19;
    }
    goto LABEL_19;
  }
  v6 = (uint64_t *)(v3 + v4);
  a2[2] = v6 + 1;
  if (!v3)
  {
    v12 = v2;
    v13 = 0;
    goto LABEL_15;
  }
  v7 = (((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8) - v3;
  if (v2 >= v7 && v2 - v7 > 7)
  {
    v9 = (uint64_t *)(((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8);
    v10 = *v9;
    v11 = *v6;
    a2[2] = v9 + 1;
    *(_QWORD *)result = v11;
    *(_QWORD *)(result + 8) = v10;
    *(_BYTE *)(result + 16) = 1;
    return result;
  }
  *a2 = 0;
  a2[1] = 0;
  v16 = a2[3];
  if (v16)
  {
    if (v2)
    {
      v22 = a2;
      v24 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v3);
      a2 = v22;
      result = v24;
      v20 = *v22;
      v19 = v22[1];
      v21 = v22[3];
      *v22 = 0;
      v22[1] = 0;
      if (v21)
      {
        if (v19)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v20);
          goto LABEL_28;
        }
      }
    }
  }
LABEL_19:
  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 16) = 0;
  v18 = *a2;
  v17 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v17)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v18);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23RemoteSourceBufferProxy25BufferedSamplesForTrackIdEN6WebKit23RemoteSourceBufferProxyES8_FvyONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEN7WebCore18PlatformMediaErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3CD8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23RemoteSourceBufferProxy25BufferedSamplesForTrackIdEN6WebKit23RemoteSourceBufferProxyES8_FvyONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEN7WebCore18PlatformMediaErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B3CD8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23RemoteSourceBufferProxy25BufferedSamplesForTrackIdEN6WebKit23RemoteSourceBufferProxyES8_FvyONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEN7WebCore18PlatformMediaErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3119;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23RemoteSourceBufferProxy25EnqueuedSamplesForTrackIDEN6WebKit23RemoteSourceBufferProxyES8_FvyONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEN7WebCore18PlatformMediaErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3D00;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23RemoteSourceBufferProxy25EnqueuedSamplesForTrackIDEN6WebKit23RemoteSourceBufferProxyES8_FvyONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEN7WebCore18PlatformMediaErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B3D00;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23RemoteSourceBufferProxy25EnqueuedSamplesForTrackIDEN6WebKit23RemoteSourceBufferProxyES8_FvyONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEN7WebCore18PlatformMediaErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3121;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteSourceBufferProxy15CanSwitchToTypeEN6WebKit23RemoteSourceBufferProxyES8_FvRKN7WebCore11ContentTypeEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3D28;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteSourceBufferProxy15CanSwitchToTypeEN6WebKit23RemoteSourceBufferProxyES8_FvRKN7WebCore11ContentTypeEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B3D28;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteSourceBufferProxy15CanSwitchToTypeEN6WebKit23RemoteSourceBufferProxyES8_FvRKN7WebCore11ContentTypeEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  char *result;
  unint64_t v13;
  size_t v14;
  void *v15;

  v4 = (uint64_t *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 >= v6 + 1)
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
LABEL_3:
    bzero(&v9[v10], v6 - v10);
    *(_QWORD *)(v5 + 544) = v7;
    v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
    *(_QWORD *)(v5 + 536) = v11 + 1;
    *v11 = a2;
    return (char *)IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), v4, 0, 0);
  }
  v13 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v14 = v13;
    v13 *= 2;
  }
  while (v14 < v7);
  result = (char *)mmap(0, v14, 3, 4098, -1, 0);
  if (result != (char *)-1)
  {
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v15 = *(void **)(v5 + 528);
    if (v15 != (void *)(v5 + 16))
      munmap(v15, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v14;
    v10 = *(_QWORD *)(v5 + 544);
    goto LABEL_3;
  }
  __break(0xC471u);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteSourceBufferProxy16EvictCodedFramesEN6WebKit23RemoteSourceBufferProxyES8_FvyRKNS_9MediaTimeEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore18PlatformTimeRangesELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONSE_24SourceBufferEvictionDataEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_SL_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3D50;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteSourceBufferProxy16EvictCodedFramesEN6WebKit23RemoteSourceBufferProxyES8_FvyRKNS_9MediaTimeEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore18PlatformTimeRangesELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONSE_24SourceBufferEvictionDataEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_SL_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B3D50;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteSourceBufferProxy16EvictCodedFramesEN6WebKit23RemoteSourceBufferProxyES8_FvyRKNS_9MediaTimeEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore18PlatformTimeRangesELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONSE_24SourceBufferEvictionDataEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_SL_EE4callESJ_SL_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *result;
  unint64_t v19;
  size_t v20;
  void *v21;

  v6 = (uint64_t *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned int *)(a2 + 12);
  v9 = *(_QWORD *)(v7 + 544);
  v10 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = v10 + 8;
  v12 = *(_QWORD *)(v7 + 552);
  if (v12 < v10 + 8)
  {
    v19 = (2 * v12 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v20 = v19;
      v19 *= 2;
    }
    while (v20 < v11);
    result = (char *)mmap(0, v20, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v13 = result;
    memcpy(result, *(const void **)(v7 + 528), *(_QWORD *)(v7 + 544));
    v21 = *(void **)(v7 + 528);
    if (v21 != (void *)(v7 + 16))
      munmap(v21, *(_QWORD *)(v7 + 552));
    *(_QWORD *)(v7 + 528) = v13;
    *(_QWORD *)(v7 + 552) = v20;
    v9 = *(_QWORD *)(v7 + 544);
  }
  else
  {
    v13 = *(char **)(v7 + 528);
  }
  bzero(&v13[v9], v10 - v9);
  *(_QWORD *)(v7 + 544) = v11;
  v14 = (_QWORD *)(*(_QWORD *)(v7 + 528) + v10);
  *(_QWORD *)(v7 + 536) = v14 + 1;
  *v14 = v8;
  v15 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v15)
  {
    v16 = *(_QWORD *)a2;
    v17 = 16 * v15;
    do
    {
      IPC::VectorArgumentCoder<false,WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v7, v16);
      v16 += 16;
      v17 -= 16;
    }
    while (v17);
  }
  IPC::ArgumentCoder<WebCore::SourceBufferEvictionData,void>::encode((IPC::Encoder *)v7, a3);
  return (char *)IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), v6, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteSourceBufferProxy41MinimumUpcomingPresentationTimeForTrackIDEN6WebKit23RemoteSourceBufferProxyES8_FvyONS_17CompletionHandlerIFvNS_9MediaTimeEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSA_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3D78;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteSourceBufferProxy41MinimumUpcomingPresentationTimeForTrackIDEN6WebKit23RemoteSourceBufferProxyES8_FvyONS_17CompletionHandlerIFvNS_9MediaTimeEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSA_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B3D78;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteSourceBufferProxy41MinimumUpcomingPresentationTimeForTrackIDEN6WebKit23RemoteSourceBufferProxyES8_FvyONS_17CompletionHandlerIFvNS_9MediaTimeEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSA_EE4callESA_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  v3 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(*(IPC::Encoder **)(a1 + 8), v5);
  return IPC::Connection::sendMessageImpl(v3[1], v3, 0, 0);
}

_DWORD *WebKit::RemoteWebInspectorUI::didReceiveMessage(WebKit::RemoteWebInspectorUI *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  _DWORD *v3;
  WTF::StringImpl *v6;
  _DWORD *result;
  __int128 v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unsigned __int16 v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18[2];
  WTF::StringImpl *v19;
  char v20;
  WTF::StringImpl *v21;
  char v22;
  _BYTE v23[8];
  __int128 v24;
  WTF::StringImpl *v25;
  char v26;
  char v27;
  WTF::StringImpl *v28;
  char v29;

  v3 = (_DWORD *)((char *)this + 16);
  ++*((_DWORD *)this + 4);
  switch(*((_WORD *)a3 + 25))
  {
    case 0x585:
      IPC::Decoder::decode<WebKit::DebuggableInfoData>((uint64_t *)a3, (uint64_t)v23);
      if (!v27 || (result = IPC::Decoder::decode<WTF::String>((uint64_t *)a3, &v28), !v29))
      {
        LOBYTE(v17) = 0;
        std::__optional_destruct_base<WebKit::DebuggableInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v23, v6);
        a2 = *(IPC::Connection **)a3;
        v13 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v14 = *((_QWORD *)a3 + 3);
        if (v14 && v13)
          (*(void (**)(uint64_t, IPC::Connection *))(*(_QWORD *)v14 + 16))(v14, a2);
        return WTF::RefCounted<WebKit::RemoteWebInspectorUI>::deref(v3, a2);
      }
      if (v27)
      {
        LOBYTE(v17) = v23[0];
        v8 = v24;
        v24 = 0uLL;
        *(_OWORD *)v18 = v8;
        v9 = v25;
        v25 = 0;
        v19 = v9;
        v20 = v26;
        v21 = v28;
        v22 = 1;
        std::__optional_destruct_base<WebKit::DebuggableInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v23, v6);
        WebKit::RemoteWebInspectorUI::initialize((uint64_t)this, &v17, (WTF::StringImpl *)&v21);
        if (v22)
        {
          v10 = v21;
          v21 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, a2);
            else
              *(_DWORD *)v10 -= 2;
          }
          v15 = v19;
          v19 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, a2);
            else
              *(_DWORD *)v15 -= 2;
          }
          v16 = v18[1];
          v18[1] = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, a2);
            else
              *(_DWORD *)v16 -= 2;
          }
          v12 = v18[0];
          v18[0] = 0;
          if (v12)
            goto LABEL_19;
        }
        return WTF::RefCounted<WebKit::RemoteWebInspectorUI>::deref(v3, a2);
      }
      __break(1u);
      return result;
    case 0x586:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)&v17);
      if (!LOBYTE(v18[0]))
        return WTF::RefCounted<WebKit::RemoteWebInspectorUI>::deref(v3, a2);
      WebCore::InspectorFrontendAPIDispatcher::dispatchMessageAsync(*((WebCore::InspectorFrontendAPIDispatcher **)this + 6), (const WTF::String *)&v17);
      goto LABEL_17;
    case 0x587:
      v11 = IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3);
      if (v11 >= 0x100u)
        WebKit::RemoteWebInspectorUI::setDiagnosticLoggingAvailable(this, v11 != 0);
      return WTF::RefCounted<WebKit::RemoteWebInspectorUI>::deref(v3, a2);
    case 0x588:
      WebKit::RemoteWebInspectorUI::showConsole(this);
      return WTF::RefCounted<WebKit::RemoteWebInspectorUI>::deref(v3, a2);
    case 0x589:
      WebKit::RemoteWebInspectorUI::showResources(this);
      return WTF::RefCounted<WebKit::RemoteWebInspectorUI>::deref(v3, a2);
    case 0x58A:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)&v17);
      if (LOBYTE(v18[0]))
      {
        WebKit::RemoteWebInspectorUI::updateFindString(this, (const WTF::String *)&v17);
LABEL_17:
        if (LOBYTE(v18[0]))
        {
          v12 = v17;
          v17 = 0;
          if (v12)
          {
LABEL_19:
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, a2);
            else
              *(_DWORD *)v12 -= 2;
          }
        }
      }
      return WTF::RefCounted<WebKit::RemoteWebInspectorUI>::deref(v3, a2);
    default:
      return WTF::RefCounted<WebKit::RemoteWebInspectorUI>::deref(v3, a2);
  }
}

_DWORD *WTF::RefCounted<WebKit::RemoteWebInspectorUI>::deref(_DWORD *result, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  if (*result == 1)
  {
    WebKit::RemoteWebInspectorUI::~RemoteWebInspectorUI((WebKit::RemoteWebInspectorUI *)(result - 4), a2);
    return (_DWORD *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*result;
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::DebuggableInfoData>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::DebuggableInfoData,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 40))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::DebuggableInfoData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(a1 + 40))
  {
    v3 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL>,void>::decode<IPC::Decoder>(a1, a2, a3);
  if (!a3[24])
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;
  void *v6;
  _BYTE v7[16];
  char v8;

  result = IPC::Decoder::decode<WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)v7);
  if (v8)
  {
    result = (uint64_t)IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::PlatformMediaSessionRemoteControlCommandType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL>,void>::decode<IPC::Decoder,WTF::Vector<WebCore::PlatformMediaSessionRemoteControlCommandType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)v7, (uint64_t)a3);
    if (v8)
      return WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v6);
  }
  else
  {
    *a3 = 0;
    a3[24] = 0;
  }
  return result;
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::VectorArgumentCoder<false,WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

uint64_t IPC::VectorArgumentCoder<false,WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;

  v5 = a1[1];
  v6 = *a1;
  v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    v25 = 0;
    v26 = 0;
    *a1 = 0;
    a1[1] = 0;
    v27 = a1[3];
    if (v27)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v27 + 16))(v27, v6, v5);
        v26 = *a1;
        v25 = a1[1];
      }
      else
      {
        v25 = 0;
        v26 = 0;
      }
    }
    goto LABEL_28;
  }
  v9 = (unint64_t *)(v6 + v7);
  a1[2] = (uint64_t)(v9 + 1);
  if (v6)
  {
    v10 = *v9;
    v34 = 0;
    v35 = 0;
    if (v10 >= 0x8000)
    {
      while (1)
      {
        IPC::Decoder::decode<WebCore::InspectorFrontendClientSaveData>(a1, (uint64_t)&v29);
        if (!v33)
          break;
        if (HIDWORD(v35) == (_DWORD)v35)
        {
          WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::InspectorFrontendClientSaveData>((uint64_t)&v34, (unint64_t)&v29);
        }
        else
        {
          v19 = HIDWORD(v35) + 1;
          v20 = v34 + 32 * HIDWORD(v35);
          v21 = v29;
          v29 = 0;
          *(_QWORD *)v20 = v21;
          v22 = v30;
          v30 = 0;
          *(_QWORD *)(v20 + 8) = v22;
          v23 = v31;
          v31 = 0;
          *(_QWORD *)(v20 + 16) = v23;
          *(_BYTE *)(v20 + 24) = v32;
          HIDWORD(v35) = v19;
        }
        std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WTF::String,BOOL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v29, v11);
        if (!--v10)
        {
          WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v34, HIDWORD(v35));
          *(_QWORD *)a3 = v34;
          v28 = v35;
          v34 = 0;
          v35 = 0;
          *(_QWORD *)(a3 + 8) = v28;
          goto LABEL_18;
        }
      }
    }
    else
    {
      if (!v10)
      {
        v17 = 0;
        v18 = 0;
LABEL_17:
        v34 = 0;
        v35 = 0;
        *(_QWORD *)a3 = v17;
        *(_QWORD *)(a3 + 8) = v18;
LABEL_18:
        *(_BYTE *)(a3 + 16) = 1;
        return WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, a2);
      }
      LODWORD(v35) = v10;
      v34 = WTF::fastMalloc((WTF *)(32 * v10));
      while (1)
      {
        IPC::Decoder::decode<WebCore::InspectorFrontendClientSaveData>(a1, (uint64_t)&v29);
        if (!v33)
          break;
        if (HIDWORD(v35) == (_DWORD)v35)
        {
          WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::InspectorFrontendClientSaveData>((uint64_t)&v34, (unint64_t)&v29);
        }
        else
        {
          v12 = HIDWORD(v35) + 1;
          v13 = v34 + 32 * HIDWORD(v35);
          v14 = v29;
          v29 = 0;
          *(_QWORD *)v13 = v14;
          v15 = v30;
          v30 = 0;
          *(_QWORD *)(v13 + 8) = v15;
          v16 = v31;
          v31 = 0;
          *(_QWORD *)(v13 + 16) = v16;
          *(_BYTE *)(v13 + 24) = v32;
          HIDWORD(v35) = v12;
        }
        std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WTF::String,BOOL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v29, v11);
        if (!--v10)
        {
          v17 = v34;
          v18 = v35;
          goto LABEL_17;
        }
      }
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WTF::String,BOOL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v29, v11);
    return WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, a2);
  }
  v25 = v5;
  v26 = 0;
LABEL_28:
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v25)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v26);
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 16) = 0;
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::InspectorFrontendClientSaveData>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::InspectorFrontendClientSaveData,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 32))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::InspectorFrontendClientSaveData>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = v4 + 1;
  v6 = *(_QWORD *)a1 + 32 * v4;
  v7 = *(_QWORD *)v3;
  *(_QWORD *)v3 = 0;
  *(_QWORD *)v6 = v7;
  v8 = *(_QWORD *)(v3 + 8);
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v6 + 8) = v8;
  v9 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v6 + 16) = v9;
  *(_BYTE *)(v6 + 24) = *(_BYTE *)(v3 + 24);
  *(_DWORD *)(a1 + 12) = v5;
  return 1;
}

unint64_t WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x196FB24CCLL);
    }
    v4 = *(WTF::StringImpl **)a1;
    v5 = (WTF::StringImpl *)(*(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12));
    v6 = WTF::fastMalloc((WTF *)(32 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebCore::InspectorFrontendClientSaveData>::move(v4, v5, v6);
    if (v4)
    {
      if (*(WTF::StringImpl **)a1 == v4)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::InspectorFrontendClientSaveData>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)a3 = v6;
      v7 = *((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      *(_QWORD *)(a3 + 8) = v7;
      v8 = *((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      *(_QWORD *)(a3 + 16) = v8;
      *(_BYTE *)(a3 + 24) = *((_BYTE *)v5 + 24);
      v9 = (WTF::StringImpl *)*((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      v10 = (WTF::StringImpl *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, a2);
        else
          *(_DWORD *)v10 -= 2;
      }
      result = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 = (WTF::StringImpl *)((char *)v5 + 32);
      a3 += 32;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  WTF::StringImpl *v5;

  if (*(unsigned int *)(result + 8) > a2)
  {
    v3 = result;
    v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      result = (uint64_t)WTF::VectorDestructor<true,WebCore::InspectorFrontendClientSaveData>::destruct((WTF::StringImpl *)(*(_QWORD *)result + 32 * a2), (WTF::StringImpl *)(*(_QWORD *)result + 32 * v4));
      *(_DWORD *)(v3 + 12) = a2;
      LODWORD(v4) = a2;
    }
    v5 = *(WTF::StringImpl **)v3;
    if (a2)
    {
      if (a2 >> 27)
      {
        __break(0xC471u);
        JUMPOUT(0x196FB2670);
      }
      result = WTF::fastMalloc((WTF *)(32 * a2));
      *(_DWORD *)(v3 + 8) = a2;
      *(_QWORD *)v3 = result;
      if ((WTF::StringImpl *)result != v5)
        result = (uint64_t)WTF::VectorMover<false,WebCore::InspectorFrontendClientSaveData>::move(v5, (WTF::StringImpl *)((char *)v5 + 32 * v4), result);
    }
    if (v5)
    {
      if (*(WTF::StringImpl **)v3 == v5)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::InspectorFrontendClientSaveData>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (result != a2)
  {
    v3 = (WTF::StringImpl **)result;
    do
    {
      v4 = v3[2];
      v3[2] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, a2);
        else
          *(_DWORD *)v4 -= 2;
      }
      v5 = v3[1];
      v3[1] = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 += 4;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,WebCore::InspectorFrontendClientSaveData>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 32 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void IPC::Decoder::decode<std::tuple<WebCore::CertificateInfo>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  char v9;

  IPC::Decoder::decode<WebCore::CertificateInfo>(a1, (uint64_t)&v8);
  if (v9)
  {
    *(_QWORD *)a2 = v8;
    *(_BYTE *)(a2 + 8) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

WTF::RunLoop *WebKit::ScopedRenderingResourcesRequest::scheduleFreeRenderingResources(WTF::RunLoop *this)
{
  WTF::RunLoop *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  WTF::RunLoop *v5;
  uint64_t v6;
  uint64_t v7;

  if ((WebKit::didScheduleFreeRenderingResources & 1) == 0)
  {
    WTF::RunLoop::main(this);
    v1 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v1 = off_1E34B3DA0;
    *((_QWORD *)v1 + 1) = WebKit::ScopedRenderingResourcesRequest::freeRenderingResources;
    v5 = v1;
    WTF::RunLoop::dispatchAfter();
    if (v6)
    {
      v2 = (unsigned int *)(v6 + 24);
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        atomic_store(1u, v2);
        v7 = v6 + 24;
        WTF::ThreadSafeRefCounted<WTF::RunLoop::DispatchTimer,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v7);
      }
    }
    this = v5;
    if (v5)
      this = (WTF::RunLoop *)(*(uint64_t (**)(WTF::RunLoop *))(*(_QWORD *)v5 + 8))(v5);
    WebKit::didScheduleFreeRenderingResources = 1;
  }
  return this;
}

void sub_196FB28A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void WebKit::ScopedRenderingResourcesRequest::freeRenderingResources(WebKit::ScopedRenderingResourcesRequest *this)
{
  id v2;

  WebKit::didScheduleFreeRenderingResources = 0;
  if (!atomic_load((unsigned int *)&WebKit::ScopedRenderingResourcesRequest::s_requests))
  {
    v2 = MTLCreateSystemDefaultDevice();
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(v2, "_purgeDevice");
    if (v2)
      CFRelease(v2);
  }
}

void sub_196FB2934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  NSException *v14;

  if (a2 != 1)
    _Unwind_Resume(exception_object);
  v14 = (NSException *)objc_begin_catch(exception_object);
  ReportBlockedObjCException(v14);
  objc_end_catch();
}

uint64_t WTF::ThreadSafeRefCounted<WTF::RunLoop::DispatchTimer,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  WTF *v3;
  void *v4;

  v1 = *a1;
  v2 = *(_QWORD *)(*a1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  WTF::RunLoop::TimerBase::~TimerBase((WTF::RunLoop::TimerBase *)(v1 - 24));
  return WTF::fastFree(v3, v4);
}

unsigned __int8 ***WebKit::SecItemShimProxy::didReceiveMessage(unsigned __int8 ***this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  uint64_t v5;
  unint64_t v6;
  char v7;
  _QWORD *v8;
  unsigned __int8 **v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  _QWORD *v13;
  _BYTE v14[24];
  char v15;

  if (*((_WORD *)a3 + 25) == 1422)
  {
    v5 = (uint64_t)this;
    IPC::Decoder::decode<std::tuple<WebKit::SecItemRequestData>>((uint64_t)v14, (uint64_t *)a3);
    if (v15)
    {
      v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v7)
      {
        v11 = v6;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, a2);
        v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v8 = off_1E34B3DC8;
        v8[1] = v11;
        v9 = v12;
        v12 = 0;
        v13 = v8;
        v8[2] = v9;
        this = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v12);
        if (!v15)
        {
          __break(1u);
          return this;
        }
        WebKit::SecItemShimProxy::secItemRequest(v5, (const __CFDictionary *)a2, (uint64_t)v14, (uint64_t *)&v13);
        v10 = (uint64_t)v13;
        v13 = 0;
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      }
    }
    return (unsigned __int8 ***)std::__optional_destruct_base<std::tuple<WebKit::SecItemRequestData>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v14);
  }
  return this;
}

BOOL WebKit::SecItemShimProxy::didReceiveSyncMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  _BOOL8 v7;
  IPC::Encoder *v8;
  _QWORD *v9;
  unsigned __int8 **v10;
  _BOOL8 result;
  _QWORD *v12;
  IPC::Encoder *v13;
  unsigned __int8 **v14[2];
  _QWORD *v15;
  _BYTE v16[24];
  char v17;

  if (*(_WORD *)(a3 + 50) != 3646)
    return 0;
  IPC::Decoder::decode<std::tuple<WebKit::SecItemRequestData>>((uint64_t)v16, (uint64_t *)a3);
  v7 = v17 != 0;
  if (!v17)
  {
LABEL_6:
    std::__optional_destruct_base<std::tuple<WebKit::SecItemRequestData>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v16);
    return v7;
  }
  v8 = *a4;
  *a4 = 0;
  v13 = v8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v14, a2);
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v9 = off_1E34B3DF0;
  v9[1] = v13;
  v10 = v14[0];
  v14[0] = 0;
  v9[2] = v10;
  v15 = v9;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v14);
  result = 0;
  if (v17)
  {
    WebKit::SecItemShimProxy::secItemRequestSync(a1, a2, v16, &v15);
    v12 = v15;
    v15 = 0;
    if (v12)
      (*(void (**)(_QWORD *))(*v12 + 8))(v12);
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

void IPC::Decoder::decode<std::tuple<WebKit::SecItemRequestData>>(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[8];
  __int128 v10;
  char v11;

  IPC::ArgumentCoder<WebKit::SecItemRequestData,void>::decode(a2, (uint64_t)v9);
  if (v11)
  {
    v4 = v9[0];
    *(_OWORD *)(a1 + 8) = v10;
    *(_BYTE *)a1 = v4;
    *(_BYTE *)(a1 + 24) = 1;
    return;
  }
  v5 = *a2;
  v6 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v7 = a2[3];
  if (!v7)
  {
    v6 = 0;
LABEL_6:
    v8 = 0;
    goto LABEL_7;
  }
  if (!v6)
    goto LABEL_6;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v5);
  v8 = *a2;
  v6 = a2[1];
  v7 = a2[3];
LABEL_7:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *a2 = 0;
  a2[1] = 0;
  if (v7)
  {
    if (v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v8);
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16SecItemShimProxy14SecItemRequestEN6WebKit16SecItemShimProxyES8_FvRNS2_10ConnectionERKNS7_18SecItemRequestDataEONS_17CompletionHandlerIFvONSt3__18optionalINS7_19SecItemResponseDataEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3DC8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16SecItemShimProxy14SecItemRequestEN6WebKit16SecItemShimProxyES8_FvRNS2_10ConnectionERKNS7_18SecItemRequestDataEONS_17CompletionHandlerIFvONSt3__18optionalINS7_19SecItemResponseDataEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B3DC8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16SecItemShimProxy14SecItemRequestEN6WebKit16SecItemShimProxyES8_FvRNS2_10ConnectionERKNS7_18SecItemRequestDataEONS_17CompletionHandlerIFvONSt3__18optionalINS7_19SecItemResponseDataEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EE4callESJ_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3127;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::optional<WebKit::SecItemResponseData>,void>::encode<IPC::Encoder,std::optional<WebKit::SecItemResponseData>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::ArgumentCoder<std::optional<WebKit::SecItemResponseData>,void>::encode<IPC::Encoder,std::optional<WebKit::SecItemResponseData>>(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  size_t v12;
  char *v13;
  void *v14;

  v4 = *(unsigned __int8 *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 544);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(a1 + 552);
  if (v7 < v5 + 1)
  {
    v11 = (2 * v7 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v12 = v11;
      v11 *= 2;
    }
    while (v12 < v6);
    v13 = (char *)mmap(0, v12, 3, 4098, -1, 0);
    if (v13 == (char *)-1)
      goto LABEL_14;
    v8 = v13;
    memcpy(v13, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v14 = *(void **)(a1 + 528);
    if (v14 != (void *)(a1 + 16))
      munmap(v14, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v8;
    *(_QWORD *)(a1 + 552) = v12;
    v9 = *(_QWORD *)(a1 + 544);
  }
  else
  {
    v8 = *(char **)(a1 + 528);
    v9 = *(_QWORD *)(a1 + 544);
  }
  bzero(&v8[v9], v5 - v9);
  *(_QWORD *)(a1 + 544) = v6;
  v10 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v5);
  *(_QWORD *)(a1 + 536) = v10 + 1;
  if (!v4)
  {
    *v10 = 0;
    return;
  }
  *v10 = 1;
  if (*(_BYTE *)(a2 + 32))
  {
    IPC::ArgumentCoder<WebKit::SecItemResponseData,void>::encode((IPC::Encoder *)a1, (int *)a2);
    return;
  }
  std::__throw_bad_optional_access[abi:sn180100]();
LABEL_14:
  __break(0xC471u);
}

uint64_t std::__optional_destruct_base<std::tuple<WebKit::SecItemRequestData>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  const void *v2;
  const void *v3;

  if (*(_BYTE *)(a1 + 24))
  {
    v2 = *(const void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v2)
      CFRelease(v2);
    v3 = *(const void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v3)
      CFRelease(v3);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages16SecItemShimProxy18SecItemRequestSyncEN6WebKit16SecItemShimProxyES8_FvRNS2_10ConnectionERKNS7_18SecItemRequestDataEONS_17CompletionHandlerIFvONSt3__18optionalINS7_19SecItemResponseDataEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3DF0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages16SecItemShimProxy18SecItemRequestSyncEN6WebKit16SecItemShimProxyES8_FvRNS2_10ConnectionERKNS7_18SecItemRequestDataEONS_17CompletionHandlerIFvONSt3__18optionalINS7_19SecItemResponseDataEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B3DF0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages16SecItemShimProxy18SecItemRequestSyncEN6WebKit16SecItemShimProxyES8_FvRNS2_10ConnectionERKNS7_18SecItemRequestDataEONS_17CompletionHandlerIFvONSt3__18optionalINS7_19SecItemResponseDataEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_EE4callESJ_(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<std::optional<WebKit::SecItemResponseData>,void>::encode<IPC::Encoder,std::optional<WebKit::SecItemResponseData>>(*(_QWORD *)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t IPC::SharedFileHandle::create@<X0>(uint64_t a1@<X8>)
{
  _BYTE v4[24];

  WebCore::FileHandle::FileHandle((WebCore::FileHandle *)v4);
  WebCore::FileHandle::FileHandle();
  *(_BYTE *)(a1 + 24) = 1;
  return MEMORY[0x19AEAC4F0](v4);
}

uint64_t IPC::SharedFileHandle::SharedFileHandle(uint64_t a1)
{
  _BYTE v3[24];

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 0;
  if (fileport_makefd() != -1)
  {
    WebCore::FileHandle::FileHandle((WebCore::FileHandle *)v3);
    WebCore::FileHandle::operator=();
    MEMORY[0x19AEAC4F0](v3);
  }
  return a1;
}

uint64_t IPC::SharedFileHandle::toMachSendRight@<X0>(IPC::SharedFileHandle *this@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  WebCore::FileHandle::handle(this);
  result = fileport_makeport();
  if ((_DWORD)result != -1)
    return WTF::MachSendRight::adopt(0);
  *a2 = 0;
  return result;
}

uint64_t WebKit::SimulatedInputSourceState::emptyStateForSourceType@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)(a2 + 36) = 0;
  *(_BYTE *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 44) = 0;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 72) = 0;
  *(_BYTE *)(a2 + 76) = 0;
  *(_BYTE *)(a2 + 84) = 0;
  *(_BYTE *)(a2 + 88) = 0;
  *(_BYTE *)(a2 + 96) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_BYTE *)(a2 + 32) = 0;
  if ((result - 2) >= 2 && (_DWORD)result != 5)
  {
    if ((_DWORD)result != 4)
      return result;
    *(_BYTE *)(a2 + 84) = 1;
    *(_QWORD *)(a2 + 76) = 0;
  }
  *(_BYTE *)(a2 + 72) = 1;
  *(_QWORD *)(a2 + 64) = 0;
  return result;
}

_QWORD *WebKit::SimulatedInputKeyFrame::keyFrameToResetInputSources@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *result;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  _QWORD v34[2];
  uint64_t v35;
  char v36;
  __int128 v37;
  __int128 v38;
  char v39;
  _OWORD v40[2];
  _BYTE v41[13];
  char v42;
  char v43;
  _BYTE v44[32];
  char v45;

  v3 = *a1;
  result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD *)*a1);
  v6 = result;
  v7 = v5;
  if (v3)
  {
    v8 = (_QWORD *)(v3 + 16 * *(unsigned int *)(v3 - 4));
    v9 = *(unsigned int *)(v3 - 12);
    if ((_DWORD)v9)
    {
      if (v9 >= 0x2492493)
      {
        __break(0xC471u);
        return result;
      }
      v10 = 112 * v9;
      v3 = WTF::fastMalloc((WTF *)(112 * v9));
      v28 = (613566757 * (unint64_t)(v10 >> 4)) >> 32;
    }
    else
    {
      LODWORD(v28) = 0;
      v3 = 0;
    }
  }
  else
  {
    LODWORD(v28) = 0;
    v8 = 0;
    v29 = 0;
    v30 = 0;
  }
  if (v8 != v6)
  {
    v11 = 0;
    while (1)
    {
      v12 = v6[1];
      v13 = *(_DWORD *)(v12 + 4);
      v41[4] = 0;
      v41[8] = 0;
      v41[12] = 0;
      v42 = 0;
      v43 = 0;
      v44[0] = 0;
      v44[8] = 0;
      v44[12] = 0;
      v44[20] = 0;
      v44[24] = 0;
      v45 = 0;
      v41[0] = 0;
      if ((v13 - 2) >= 2 && v13 != 5)
      {
        if (v13 != 4)
          goto LABEL_16;
        v44[20] = 1;
        *(_QWORD *)&v44[12] = 0;
      }
      v44[8] = 1;
      *(_QWORD *)v44 = 0;
LABEL_16:
      v31 = v12;
      v32 = 0u;
      v33 = 0u;
      memset(v40, 0, sizeof(v40));
      v34[0] = *(_QWORD *)v41;
      *(_QWORD *)((char *)v34 + 5) = *(_QWORD *)&v41[5];
      LOBYTE(v35) = 0;
      v36 = 0;
      v37 = *(_OWORD *)v44;
      v38 = *(_OWORD *)&v44[16];
      v39 = v45;
      WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::deleteAllNodes((uint64_t)v40, v5);
      if (*(_QWORD *)&v40[0])
        WTF::fastFree((WTF *)(*(_QWORD *)&v40[0] - 16), v15);
      v16 = v3 + 112 * v11;
      *(_QWORD *)v16 = v31;
      v17 = v32;
      *(_QWORD *)&v32 = 0;
      *(_QWORD *)(v16 + 8) = v17;
      v18 = *((_QWORD *)&v32 + 1);
      *((_QWORD *)&v32 + 1) = 0;
      *(_QWORD *)(v16 + 16) = v18;
      v19 = v33;
      *(_QWORD *)&v33 = 0;
      *(_QWORD *)(v16 + 24) = v19;
      v20 = *((_QWORD *)&v33 + 1);
      *((_QWORD *)&v33 + 1) = 0;
      *(_QWORD *)(v16 + 32) = v20;
      v21 = v34[0];
      v22 = *(_QWORD *)((char *)v34 + 5);
      *(_BYTE *)(v16 + 56) = 0;
      v23 = v16 + 56;
      *(_QWORD *)(v23 - 11) = v22;
      *(_QWORD *)(v23 - 16) = v21;
      *(_BYTE *)(v23 + 8) = 0;
      if (v36)
      {
        v24 = v35;
        v35 = 0;
        *(_QWORD *)v23 = v24;
        *(_BYTE *)(v23 + 8) = 1;
      }
      v25 = v3 + 112 * v11;
      v26 = v37;
      v27 = v38;
      *(_BYTE *)(v25 + 104) = v39;
      *(_OWORD *)(v25 + 88) = v27;
      *(_OWORD *)(v25 + 72) = v26;
      WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::deleteAllNodes((uint64_t)&v32, v15);
      if ((_QWORD)v32)
        WTF::fastFree((WTF *)(v32 - 16), v5);
      while (1)
      {
        v6 += 2;
        if (v6 == v7)
          break;
        if ((unint64_t)(*v6 + 1) > 1)
          goto LABEL_26;
      }
      v6 = v7;
LABEL_26:
      ++v11;
      if (v6 == v8)
        goto LABEL_29;
    }
  }
  v11 = 0;
LABEL_29:
  v29 = 0;
  v30 = 0;
  *(_QWORD *)a2 = v3;
  *(_DWORD *)(a2 + 8) = v28;
  *(_DWORD *)(a2 + 12) = v11;
  return (_QWORD *)WTF::Vector<std::pair<WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v5);
}

uint64_t WebKit::SimulatedInputDispatcher::SimulatedInputDispatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF::RunLoop::TimerBase *v4;
  WTF::RunLoop *v5;
  _QWORD *v6;

  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  v4 = (WTF::RunLoop::TimerBase *)(a1 + 64);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v5 = (WTF::RunLoop *)WTF::RunLoop::current((WTF::RunLoop *)a1);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = off_1E34B3E28;
  v6[1] = WebKit::SimulatedInputDispatcher::keyFrameTransitionDurationTimerFired;
  v6[2] = 0;
  v6[3] = a1;
  WTF::RunLoop::TimerBase::TimerBase(v4, v5);
  *(_QWORD *)(a1 + 64) = off_1E34ABE00;
  *(_QWORD *)(a1 + 88) = v6;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  return a1;
}

uint64_t WebKit::SimulatedInputDispatcher::keyFrameTransitionDurationTimerFired(WebKit::SimulatedInputDispatcher *this)
{
  uint64_t result;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  _BYTE v5[8];
  WTF::StringImpl *v6;
  char v7;
  char v8;
  uint64_t v9;

  WTF::RunLoop::TimerBase::stop((WebKit::SimulatedInputDispatcher *)((char *)this + 64));
  result = WebKit::SimulatedInputDispatcher::isKeyFrameTransitionComplete((uint64_t)this);
  if ((_DWORD)result)
  {
    v9 = *((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    v5[0] = 0;
    v8 = 0;
    WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()(&v9, (uint64_t)v5);
    if (v8)
    {
      if (v7)
      {
        v4 = v6;
        v6 = 0;
        if (v4)
        {
          if (*(_DWORD *)v4 == 2)
            WTF::StringImpl::destroy(v4, v3);
          else
            *(_DWORD *)v4 -= 2;
        }
      }
    }
    result = v9;
    v9 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void WebKit::SimulatedInputDispatcher::~SimulatedInputDispatcher(WebKit::SimulatedInputDispatcher *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  WTF::Vector<WebKit::SimulatedInputKeyFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 96, a2);
  *((_QWORD *)this + 8) = off_1E34ABE00;
  v3 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::SimulatedInputDispatcher *)((char *)this + 64));
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t WebKit::SimulatedInputDispatcher::isKeyFrameTransitionComplete(uint64_t this)
{
  uint64_t v1;

  v1 = *(unsigned int *)(this + 112);
  if (*(_DWORD *)(this + 108) <= v1)
  {
    __break(0xC471u);
  }
  else if (*(_DWORD *)(*(_QWORD *)(this + 96) + 16 * v1 + 12) <= *(_DWORD *)(this + 116))
  {
    return WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(this + 64)) ^ 1;
  }
  else
  {
    return 0;
  }
  return this;
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()(uint64_t *a1, uint64_t a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  BOOL v4;
  WTF::StringImpl *v5;
  uint64_t result;
  int v7;
  WTF::StringImpl *v8;
  char v9;
  char v10;
  uint64_t v11;

  v11 = *a1;
  *a1 = 0;
  LOBYTE(v7) = 0;
  v10 = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    v7 = *(_DWORD *)a2;
    LOBYTE(v8) = 0;
    v9 = 0;
    if (*(_BYTE *)(a2 + 16))
    {
      v2 = *(WTF::StringImpl **)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      v8 = v2;
      v9 = 1;
    }
    v10 = 1;
  }
  WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()(&v11, &v7);
  if (v10)
    v4 = v9 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = v8;
    v8 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v3);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  result = v11;
  v11 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WebKit::SimulatedInputDispatcher::transitionToNextKeyFrame(WebKit::SimulatedInputDispatcher *this)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  double *v12;
  double v13;
  int v14[6];
  char v15;

  v2 = *((_DWORD *)this + 27);
  v3 = *((_DWORD *)this + 28);
  v4 = v3 + 1;
  *((_DWORD *)this + 28) = v4;
  if (v2 == (_DWORD)v4)
  {
    LOBYTE(v14[0]) = 0;
    v15 = 0;
    return (WTF::StringImpl *)WebKit::SimulatedInputDispatcher::finishDispatching((uint64_t)this, v14);
  }
  else
  {
    if (v2 <= v3 || v2 <= v4)
    {
      __break(0xC471u);
      JUMPOUT(0x196FB37C8);
    }
    v6 = *((_QWORD *)this + 12) + 16 * v4;
    ++*(_DWORD *)this;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v7 = &off_1E34B3E50;
    v7[1] = this;
    v7[2] = this;
    *((_DWORD *)this + 29) = 0;
    v8 = *((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v7;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = *(unsigned int *)(v6 + 12);
    v10 = 0.0;
    if ((_DWORD)v9)
    {
      v11 = 112 * v9;
      v12 = (double *)(*(_QWORD *)v6 + 104);
      do
      {
        v13 = 0.0;
        if (*(_BYTE *)v12)
          v13 = *(v12 - 1);
        if (v10 < v13)
          v10 = v13;
        v12 += 14;
        v11 -= 112;
      }
      while (v11);
    }
    WTF::RunLoop::TimerBase::start();
    return WebKit::SimulatedInputDispatcher::transitionToNextInputSourceState(this);
  }
}

uint64_t WebKit::SimulatedInputDispatcher::finishDispatching(uint64_t a1, int *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t result;
  int v13;
  WTF::StringImpl *v14;
  char v15;
  char v16;
  uint64_t v17;

  WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(a1 + 64));
  v17 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (*(_BYTE *)(a1 + 40))
    *(_BYTE *)(a1 + 40) = 0;
  if (*(_DWORD *)(a1 + 104))
  {
    v5 = *(unsigned int *)(a1 + 108);
    if ((_DWORD)v5)
    {
      v6 = *(_QWORD *)(a1 + 96);
      v7 = 16 * v5;
      do
      {
        v6 = WTF::Vector<std::pair<WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v6, v4)+ 16;
        v7 -= 16;
      }
      while (v7);
      *(_DWORD *)(a1 + 108) = 0;
    }
    v8 = *(WTF **)(a1 + 96);
    if (v8)
    {
      *(_QWORD *)(a1 + 96) = 0;
      *(_DWORD *)(a1 + 104) = 0;
      WTF::fastFree(v8, v4);
    }
  }
  *(_QWORD *)(a1 + 112) = 0;
  LOBYTE(v13) = 0;
  v16 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v13 = *a2;
    LOBYTE(v14) = 0;
    v15 = 0;
    if (*((_BYTE *)a2 + 16))
    {
      v9 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
      if (v9)
        *(_DWORD *)v9 += 2;
      v14 = v9;
      v15 = 1;
    }
    v16 = 1;
  }
  WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()(&v17, (uint64_t)&v13);
  if (v16)
  {
    if (v15)
    {
      v11 = v14;
      v14 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
  }
  result = v17;
  v17 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WebKit::SimulatedInputDispatcher::transitionToNextInputSourceState(WebKit::SimulatedInputDispatcher *this)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v3;
  BOOL v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  _DWORD **v11;
  _DWORD *v12;
  uint64_t *v13;
  _DWORD *v14;
  uint64_t (**v15)();
  uint64_t v16;
  const WTF::StringImpl *v17;
  uint64_t (***v18)();
  uint64_t *v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  WTF::StringImpl *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t (**v29)();
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t *v35;
  int *v36;
  int *v37;
  int v38;
  uint64_t v39;
  int v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t i;
  WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  WTF::StringImpl *v53;
  int v54;
  int *v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  int *v59;
  int *v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  int v67;
  int *v68;
  int *v69;
  uint64_t v70;
  int *v71;
  int *v72;
  uint64_t v73;
  int *v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  int *v80;
  int *v81;
  uint64_t v82;
  int *v83;
  uint64_t v84;
  uint64_t v85;
  int *v86;
  unint64_t v87;
  unint64_t v88;
  char v89[8];
  WTF::StringImpl *v90;
  char v91;
  char v92;
  _QWORD *v93;
  WTF::StringImpl *v94;
  char v95;
  uint64_t (***v96)();
  _QWORD *v97;
  WTF::StringImpl *v98[2];
  uint64_t v99;
  char v100;

  result = (WTF::StringImpl *)WebKit::SimulatedInputDispatcher::isKeyFrameTransitionComplete((uint64_t)this);
  if ((_DWORD)result)
  {
    v98[0] = *((WTF::StringImpl **)this + 7);
    *((_QWORD *)this + 7) = 0;
    v89[0] = 0;
    v92 = 0;
    WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()((uint64_t *)v98, (uint64_t)v89);
    if (v92)
      v4 = v91 == 0;
    else
      v4 = 1;
    if (!v4)
    {
      v5 = v90;
      v90 = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, v3);
        else
          *(_DWORD *)v5 -= 2;
      }
    }
    result = v98[0];
    v98[0] = 0;
    if (result)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    return result;
  }
  v6 = *((unsigned int *)this + 28);
  if (*((_DWORD *)this + 27) > v6)
  {
    v7 = *((_DWORD *)this + 29);
    v8 = *((_QWORD *)this + 12) + 16 * v6;
    v9 = *(_DWORD *)(v8 + 12);
    if (v9 == v7)
      return result;
    if (v9 <= v7)
    {
      __break(0xC471u);
      JUMPOUT(0x196FB42FCLL);
    }
    v10 = *(_QWORD *)v8;
    v11 = (_DWORD **)(*(_QWORD *)v8 + 112 * v7);
    v14 = *v11;
    v13 = (uint64_t *)(v11 + 1);
    v12 = v14;
    ++*v14;
    ++*(_DWORD *)this;
    v15 = (uint64_t (**)())WTF::fastMalloc((WTF *)0x18);
    *v15 = (uint64_t (*)())&off_1E34B3E78;
    v15[1] = (uint64_t (*)())this;
    v15[2] = (uint64_t (*)())this;
    v18 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x28);
    *v18 = &off_1E34B3EC8;
    v18[1] = (uint64_t (**)())this;
    v18[2] = (uint64_t (**)())v14;
    v18[3] = (uint64_t (**)())v13;
    v18[4] = v15;
    v96 = v18;
    v19 = (uint64_t *)(v14 + 2);
    switch(v14[1])
    {
      case 0:
        goto LABEL_13;
      case 1:
        v30 = *v19;
        if (*v19)
          LODWORD(v30) = *(_DWORD *)(v30 - 12);
        v31 = *v13;
        if (*v13)
          LODWORD(v31) = *(_DWORD *)(v31 - 12);
        if ((_DWORD)v30 != (_DWORD)v31)
          goto LABEL_47;
        v32 = *((_QWORD *)v12 + 2);
        if (!v32)
          goto LABEL_45;
        do
        {
          if ((WTF::HashTable<WTF::ListHashSetNode<WTF::String> *,WTF::ListHashSetNode<WTF::String> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>>::contains<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::String>>,WTF::String>(*v13, (WTF::StringImpl **)v32, v17) & 1) == 0)
          {
LABEL_47:
            v39 = v13[1];
            if (v39)
            {
              v40 = 0;
              do
              {
                v41 = *(WTF::StringImpl **)v39;
                if (*(_QWORD *)v39)
                  *(_DWORD *)v41 += 2;
                v94 = v41;
                if (((WTF::HashTable<WTF::ListHashSetNode<WTF::String> *,WTF::ListHashSetNode<WTF::String> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>>::contains<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::String>>,WTF::String>(*v19, &v94, v17) | v40) & 1) == 0)
                {
                  v43 = *((_QWORD *)this + 1);
                  v42 = *((_QWORD *)this + 2);
                  if (v41)
                    *(_DWORD *)v41 += 2;
                  v98[0] = v41;
                  LODWORD(v98[1]) = 1;
                  (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, uint64_t (****)()))(*(_QWORD *)v42 + 24))(v42, v43, 106, v98, &v96);
                  if (LODWORD(v98[1]) != -1)
                    ((void (*)(_QWORD **, WTF::StringImpl **))off_1E34B3E08[LODWORD(v98[1])])(&v97, v98);
                  v40 = 1;
                }
                if (v41)
                {
                  if (*(_DWORD *)v41 == 2)
                    WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v16);
                  else
                    *(_DWORD *)v41 -= 2;
                }
                v39 = *(_QWORD *)(v39 + 16);
              }
              while (v39);
            }
            else
            {
              v40 = 0;
            }
            for (i = *((_QWORD *)v12 + 2); i; i = *(_QWORD *)(i + 16))
            {
              v45 = *(WTF::StringImpl **)i;
              if (*(_QWORD *)i)
                *(_DWORD *)v45 += 2;
              v94 = v45;
              if (((WTF::HashTable<WTF::ListHashSetNode<WTF::String> *,WTF::ListHashSetNode<WTF::String> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>>::contains<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::String>>,WTF::String>(*v13, &v94, v17) | v40) & 1) == 0)
              {
                v47 = *((_QWORD *)this + 1);
                v46 = *((_QWORD *)this + 2);
                if (v45)
                  *(_DWORD *)v45 += 2;
                v98[0] = v45;
                LODWORD(v98[1]) = 1;
                (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, uint64_t (****)()))(*(_QWORD *)v46 + 24))(v46, v47, 107, v98, &v96);
                if (LODWORD(v98[1]) != -1)
                  ((void (*)(_QWORD **, WTF::StringImpl **))off_1E34B3E08[LODWORD(v98[1])])(&v97, v98);
                v40 = 1;
              }
              if (v45)
              {
                if (*(_DWORD *)v45 == 2)
                  WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v16);
                else
                  *(_DWORD *)v45 -= 2;
              }
            }
            goto LABEL_189;
          }
          v32 = *(_QWORD *)(v32 + 16);
        }
        while (v32);
LABEL_45:
        v33 = v10 + 112 * v7;
        v36 = *(int **)(v33 + 32);
        v35 = (uint64_t *)(v33 + 32);
        v34 = v36;
        v37 = (int *)*((_QWORD *)v12 + 4);
        if (v37)
          v38 = *(v37 - 3);
        else
          v38 = 0;
        if (v34)
          v54 = *(v34 - 3);
        else
          v54 = 0;
        if (v38 != v54)
          goto LABEL_136;
        if (v37)
          v55 = &v37[2 * *(v37 - 1)];
        else
          v55 = 0;
        if (v34)
          v57 = &v34[2 * *(v34 - 1)];
        else
          v57 = 0;
        if (!v37)
        {
          v60 = 0;
          v58 = 0;
LABEL_117:
          v59 = &v37[2 * v58];
          goto LABEL_118;
        }
        v58 = *(v37 - 1);
        v59 = &v37[2 * v58];
        if (!*(v37 - 3))
        {
          v60 = &v37[2 * v58];
          goto LABEL_117;
        }
        v60 = (int *)*((_QWORD *)v12 + 4);
        if ((_DWORD)v58)
        {
          v61 = 8 * v58;
          v60 = (int *)*((_QWORD *)v12 + 4);
          while (*v60 > 2147483645)
          {
            v60 += 2;
            v61 -= 8;
            if (!v61)
            {
              v60 = v59;
              break;
            }
          }
        }
LABEL_118:
        if (v55 == v60)
        {
LABEL_13:
          LOBYTE(v98[0]) = 0;
          v100 = 0;
          WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()((uint64_t *)&v96, (uint64_t)v98);
          if (v100)
          {
            if ((_BYTE)v99)
            {
              v20 = v98[1];
              v98[1] = 0;
              if (v20)
                goto LABEL_101;
            }
          }
          goto LABEL_189;
        }
        while (1)
        {
          if (v34)
          {
            v62 = *v60;
            v63 = *(v34 - 2);
            v64 = 9 * ((v62 + ~(v62 << 15)) ^ ((v62 + ~(v62 << 15)) >> 10));
            v65 = (v64 ^ (v64 >> 6)) + ~((v64 ^ (v64 >> 6)) << 11);
            v66 = v63 & (v65 ^ HIWORD(v65));
            v16 = 8 * v66;
            v67 = *(int *)((char *)v34 + v16);
            if (v67 == *v60)
            {
LABEL_124:
              v68 = &v34[2 * v66];
            }
            else
            {
              v16 = 1;
              while (v67 != 0x7FFFFFFF)
              {
                v66 = ((_DWORD)v66 + (_DWORD)v16) & v63;
                v67 = v34[2 * v66];
                v16 = (v16 + 1);
                if (v67 == v62)
                  goto LABEL_124;
              }
              v68 = &v34[2 * *(v34 - 1)];
            }
          }
          else
          {
            v68 = 0;
          }
          if (v57 == v68 || v60[1] != v68[1])
            break;
          v69 = v60 + 2;
          v60 = v59;
          if (v69 != v59)
          {
            v60 = v69;
            while (*v60 > 2147483645)
            {
              v60 += 2;
              if (v60 == v59)
              {
                v60 = v59;
                break;
              }
            }
          }
          if (v60 == v55)
            goto LABEL_13;
        }
LABEL_136:
        if (!v34)
        {
          v72 = 0;
          v70 = 0;
LABEL_145:
          v71 = &v34[2 * v70];
          goto LABEL_146;
        }
        v70 = *(v34 - 1);
        v71 = &v34[2 * v70];
        if (!*(v34 - 3))
        {
          v72 = &v34[2 * v70];
          goto LABEL_145;
        }
        v72 = v34;
        if ((_DWORD)v70)
        {
          v73 = 8 * v70;
          v72 = v34;
          while (*v72 > 2147483645)
          {
            v72 += 2;
            v73 -= 8;
            if (!v73)
            {
              v72 = v71;
              break;
            }
          }
        }
LABEL_146:
        if (v34)
          v74 = &v34[2 * *(v34 - 1)];
        else
          v74 = 0;
        if (v74 == v72)
        {
          v75 = 0;
        }
        else
        {
          v75 = 0;
          do
          {
            if ((WTF::HashTable<Inspector::Protocol::Automation::VirtualKey,WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>>,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::HashMap<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>>,Inspector::Protocol::Automation::VirtualKey>(*((_QWORD *)v12 + 4), *v72) & 1) == 0&& (v75 & 1) == 0)
            {
              v77 = *((_QWORD *)this + 1);
              v76 = *((_QWORD *)this + 2);
              LODWORD(v98[0]) = v72[1];
              LODWORD(v98[1]) = 0;
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, uint64_t (****)()))(*(_QWORD *)v76 + 24))(v76, v77, 106, v98, &v96);
              if (LODWORD(v98[1]) != -1)
                ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34B3E08[LODWORD(v98[1])])(&v94, v98);
              v75 = 1;
            }
            v78 = v72 + 2;
            v72 = v71;
            if (v78 != v71)
            {
              v72 = v78;
              while (*v72 > 2147483645)
              {
                v72 += 2;
                if (v72 == v71)
                {
                  v72 = v71;
                  break;
                }
              }
            }
          }
          while (v72 != v74);
          v37 = (int *)*((_QWORD *)v12 + 4);
        }
        if (v37)
        {
          v79 = *(v37 - 1);
          v80 = &v37[2 * v79];
          if (*(v37 - 3))
          {
            v81 = v37;
            if ((_DWORD)v79)
            {
              v82 = 8 * v79;
              v81 = v37;
              while (*v81 > 2147483645)
              {
                v81 += 2;
                v82 -= 8;
                if (!v82)
                {
                  v81 = v80;
                  goto LABEL_174;
                }
              }
            }
            goto LABEL_174;
          }
          v81 = &v37[2 * v79];
        }
        else
        {
          v81 = 0;
          v79 = 0;
        }
        v80 = &v37[2 * v79];
LABEL_174:
        if (v37)
          v83 = &v37[2 * *(v37 - 1)];
        else
          v83 = 0;
        while (v81 != v83)
        {
          if ((WTF::HashTable<Inspector::Protocol::Automation::VirtualKey,WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>>,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::HashMap<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>>,Inspector::Protocol::Automation::VirtualKey>(*v35, *v81) & 1) == 0&& (v75 & 1) == 0)
          {
            v85 = *((_QWORD *)this + 1);
            v84 = *((_QWORD *)this + 2);
            LODWORD(v98[0]) = v81[1];
            LODWORD(v98[1]) = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, uint64_t (****)()))(*(_QWORD *)v84 + 24))(v84, v85, 107, v98, &v96);
            if (LODWORD(v98[1]) != -1)
              ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34B3E08[LODWORD(v98[1])])(&v94, v98);
            v75 = 1;
          }
          v86 = v81 + 2;
          v81 = v80;
          if (v86 != v80)
          {
            v81 = v86;
            while (*v81 > 2147483645)
            {
              v81 += 2;
              if (v81 == v80)
              {
                v81 = v80;
                break;
              }
            }
          }
        }
LABEL_189:
        v18 = v96;
        v96 = 0;
        if (v18)
        {
          v29 = *v18;
LABEL_191:
          ((void (*)(uint64_t (***)()))v29[1])(v18);
        }
        return (WTF::StringImpl *)WTF::RefCounted<WebKit::SimulatedInputSource>::deref(v12, (WTF::StringImpl *)v16);
      case 2:
      case 5:
        __break(0xC471u);
        JUMPOUT(0x196FB42C8);
      case 3:
        if (*((_BYTE *)v12 + 80))
          v21 = *((_QWORD *)v12 + 9);
        else
          v21 = 0;
        v22 = v10 + 112 * v7;
        v87 = *(_QWORD *)(v22 + 72);
        v88 = v21;
        v23 = *(unsigned __int8 *)(v22 + 80);
        if (*(_BYTE *)(v22 + 52))
          v24 = *(_DWORD *)(v22 + 48);
        else
          v24 = 1;
        LOBYTE(v94) = 0;
        v95 = 0;
        v25 = *(unsigned __int8 *)(v22 + 64);
        if (*(_BYTE *)(v22 + 64))
        {
          v26 = *(WTF::StringImpl **)(v10 + 112 * v7 + 56);
          if (v26)
            *(_DWORD *)v26 += 2;
          v94 = v26;
          v95 = 1;
        }
        v96 = 0;
        v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
        *v27 = &off_1E34B3EF0;
        v27[1] = this;
        v27[2] = v19;
        v27[3] = v13;
        v27[4] = v18;
        v93 = v27;
        if (!v23)
        {
          LOBYTE(v98[0]) = 0;
          v100 = 0;
          v28 = v88;
LABEL_84:
          WTF::Function<void ()(std::optional<WebCore::IntPoint>,std::optional<WebKit::AutomationCommandError>)>::operator()((uint64_t *)&v93, v28, 1u, (int *)v98);
          if (v100)
          {
            if ((_BYTE)v99)
            {
              v53 = v98[1];
              v98[1] = 0;
              if (v53)
              {
                if (*(_DWORD *)v53 == 2)
                  WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v16);
                else
                  *(_DWORD *)v53 -= 2;
              }
            }
          }
          goto LABEL_97;
        }
        if (v24 != 119)
        {
          if (v24 == 118)
          {
            v28 = ((v87 & 0xFFFFFFFF00000000) + v88) & 0xFFFFFFFF00000000 | (v87 + v88);
            LOBYTE(v98[0]) = 0;
            v100 = 0;
          }
          else
          {
            if (v24 != 1)
              goto LABEL_97;
            LOBYTE(v98[0]) = 0;
            v100 = 0;
            v28 = v87;
          }
          goto LABEL_84;
        }
        v49 = *((_QWORD *)this + 1);
        v48 = *((_QWORD *)this + 2);
        *(_OWORD *)v98 = *(_OWORD *)((char *)this + 24);
        v99 = *((_QWORD *)this + 5);
        if (v25)
        {
          v50 = v27;
          v93 = 0;
          v51 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v51 = &off_1E34B3EA0;
          v51[1] = v87;
          v51[2] = v50;
          v97 = v51;
          (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **, _QWORD **))(*(_QWORD *)v48 + 32))(v48, v49, v98, &v94, &v97);
          v52 = v97;
          v97 = 0;
          if (v52)
            (*(void (**)(_QWORD *))(*v52 + 8))(v52);
LABEL_97:
          v56 = (uint64_t)v93;
          v93 = 0;
          if (v56)
            (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
          if (v95)
          {
            v20 = v94;
            v94 = 0;
            if (v20)
            {
LABEL_101:
              if (*(_DWORD *)v20 == 2)
                WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v16);
              else
                *(_DWORD *)v20 -= 2;
            }
          }
          goto LABEL_189;
        }
        std::__throw_bad_optional_access[abi:sn180100]();
        break;
      case 4:
        __break(0xC471u);
        JUMPOUT(0x196FB42E8);
      default:
        v96 = 0;
        v29 = &off_1E34B3EC8;
        goto LABEL_191;
    }
  }
  __break(0xC471u);
  JUMPOUT(0x196FB42F4);
}

WTF::StringImpl *WTF::Function<void ()(std::optional<WebCore::IntPoint>,std::optional<WebKit::AutomationCommandError>)>::operator()(uint64_t *a1, uint64_t a2, unsigned int a3, int *a4)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  BOOL v8;
  int v9;
  WTF::StringImpl *v10;
  char v11;
  char v12;

  v4 = *a1;
  LOBYTE(v9) = 0;
  v12 = 0;
  if (*((_BYTE *)a4 + 24))
  {
    v9 = *a4;
    LOBYTE(v10) = 0;
    v11 = 0;
    if (*((_BYTE *)a4 + 16))
    {
      v5 = (WTF::StringImpl *)*((_QWORD *)a4 + 1);
      *((_QWORD *)a4 + 1) = 0;
      v10 = v5;
      v11 = 1;
    }
    v12 = 1;
  }
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)v4 + 16))(v4, a2, a3, &v9);
  if (v12)
    v8 = v11 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    result = v10;
    v10 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::SimulatedInputDispatcher::run(uint64_t a1, __int128 *a2, uint64_t **a3, _QWORD **a4, uint64_t *a5)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  BOOL v7;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  const WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t i;
  void *v28;
  uint64_t v29;
  int v30;
  _DWORD *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  WTF::StringImpl *v66;
  char v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD v76[2];
  _DWORD *v77;
  char v78;
  __int128 v79;
  __int128 v80;
  char v81;
  char v82[32];

  if (*(_QWORD *)(a1 + 48))
  {
    v65 = 5;
    LOBYTE(v66) = 0;
    v67 = 0;
    v68 = 1;
    result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()(a5, (uint64_t)&v65);
    if (v68)
      v7 = v67 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      result = v66;
      v66 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    v11 = *a2;
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 16);
    *(_OWORD *)(a1 + 24) = v11;
    v12 = *a5;
    *a5 = 0;
    v13 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v12;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    WTF::Vector<WebKit::SimulatedInputKeyFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 96, *((unsigned int *)a3 + 3) + 1);
    v14 = (uint64_t)*a4;
    result = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(*a4);
    v17 = result;
    v18 = v15;
    if (v14)
    {
      v19 = (WTF::StringImpl *)(v14 + 16 * *(unsigned int *)(v14 - 4));
      v20 = *(unsigned int *)(v14 - 12);
      if ((_DWORD)v20)
      {
        if (v20 >= 0x2492493)
        {
          __break(0xC471u);
          return result;
        }
        v21 = 112 * v20;
        v22 = WTF::fastMalloc((WTF *)(112 * v20));
        v63 = (613566757 * (unint64_t)(v21 >> 4)) >> 32;
      }
      else
      {
        LODWORD(v63) = 0;
        v22 = 0;
      }
    }
    else
    {
      LODWORD(v63) = 0;
      v19 = 0;
      v22 = 0;
      v69 = 0;
      v70 = 0;
    }
    v62 = a1;
    v64 = a1 + 96;
    if (v19 == v17)
    {
      v23 = 0;
    }
    else
    {
      v23 = 0;
      do
      {
        v24 = v22;
        v25 = v19;
        v71 = *((_QWORD *)v17 + 1);
        v26 = v71;
        v73 = 0;
        v74 = 0;
        v72 = 0;
        for (i = *(_QWORD *)(v71 + 16); i; i = *(_QWORD *)(i + 16))
          WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::add((uint64_t *)&v72, (WTF::StringImpl **)i, v16, (uint64_t)v82);
        WTF::HashTable<Inspector::Protocol::Automation::VirtualKey,WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>>,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::HashMap<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>>::HashTable(&v75, (int **)(v71 + 32));
        v29 = *(_QWORD *)(v71 + 40);
        *(_QWORD *)((char *)v76 + 5) = *(_QWORD *)(v71 + 45);
        v76[0] = v29;
        LOBYTE(v77) = 0;
        v78 = 0;
        v30 = *(unsigned __int8 *)(v71 + 64);
        v22 = v24;
        if (*(_BYTE *)(v71 + 64))
        {
          v31 = *(_DWORD **)(v71 + 56);
          if (v31)
            *v31 += 2;
          v77 = v31;
          v78 = 1;
        }
        v32 = *(_OWORD *)(v26 + 72);
        v33 = *(_OWORD *)(v26 + 88);
        v81 = *(_BYTE *)(v26 + 104);
        v79 = v32;
        v80 = v33;
        v34 = v24 + 112 * v23;
        *(_QWORD *)v34 = v71;
        v35 = v72;
        v72 = 0;
        *(_QWORD *)(v34 + 8) = v35;
        v36 = v73;
        v73 = 0;
        *(_QWORD *)(v34 + 16) = v36;
        v37 = v74;
        v74 = 0;
        *(_QWORD *)(v34 + 24) = v37;
        v38 = v75;
        v75 = 0;
        *(_QWORD *)(v34 + 32) = v38;
        v39 = v76[0];
        v40 = *(_QWORD *)((char *)v76 + 5);
        *(_BYTE *)(v34 + 56) = 0;
        v41 = v34 + 56;
        *(_QWORD *)(v41 - 11) = v40;
        *(_QWORD *)(v41 - 16) = v39;
        *(_BYTE *)(v41 + 8) = 0;
        if (v30)
        {
          v42 = v77;
          v77 = 0;
          *(_QWORD *)v41 = v42;
          *(_BYTE *)(v41 + 8) = 1;
        }
        v43 = v24 + 112 * v23;
        v44 = v79;
        v45 = v80;
        *(_BYTE *)(v43 + 104) = v81;
        *(_OWORD *)(v43 + 88) = v45;
        *(_OWORD *)(v43 + 72) = v44;
        WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::deleteAllNodes((uint64_t)&v72, v28);
        v19 = v25;
        if (v72)
          WTF::fastFree((WTF *)(v72 - 16), v15);
        while (1)
        {
          v17 = (WTF::StringImpl *)((char *)v17 + 16);
          if (v17 == v18)
            break;
          if ((unint64_t)(*(_QWORD *)v17 + 1) > 1)
            goto LABEL_34;
        }
        v17 = v18;
LABEL_34:
        ++v23;
      }
      while (v17 != v25);
    }
    v69 = 0;
    v70 = 0;
    v71 = v22;
    v72 = __PAIR64__(v23, v63);
    WTF::Vector<std::pair<WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v69, v15);
    v47 = *(unsigned int *)(v62 + 108);
    if ((_DWORD)v47 == *(_DWORD *)(v62 + 104))
    {
      v48 = v64;
      WTF::Vector<WebKit::SimulatedInputKeyFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::SimulatedInputKeyFrame>(v64, (unint64_t)&v71);
    }
    else
    {
      v49 = *(_QWORD *)(v62 + 96) + 16 * v47;
      *(_QWORD *)(v49 + 8) = 0;
      v71 = 0;
      *(_QWORD *)v49 = v22;
      LODWORD(v72) = 0;
      *(_DWORD *)(v49 + 8) = v63;
      v50 = HIDWORD(v72);
      HIDWORD(v72) = 0;
      *(_DWORD *)(v49 + 12) = v50;
      ++*(_DWORD *)(v62 + 108);
      v48 = v64;
    }
    WTF::Vector<std::pair<WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v71, v46);
    v51 = *((unsigned int *)a3 + 3);
    v52 = *(unsigned int *)(v62 + 104);
    v53 = v51 + *(unsigned int *)(v62 + 108);
    if (v53 > v52)
    {
      v54 = v52 + (v52 >> 2);
      if (v54 >= 0x10)
        v55 = v54 + 1;
      else
        v55 = 16;
      if (v55 <= v53)
        v56 = v53;
      else
        v56 = v55;
      WTF::Vector<WebKit::SimulatedInputKeyFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v48, v56);
      v51 = *((unsigned int *)a3 + 3);
    }
    if ((_DWORD)v51)
    {
      v57 = *a3;
      v58 = (uint64_t)&(*a3)[2 * v51];
      v59 = *(_DWORD *)(v62 + 108);
      do
      {
        v60 = *(_QWORD *)(v62 + 96) + 16 * v59;
        *(_QWORD *)v60 = 0;
        *(_QWORD *)(v60 + 8) = 0;
        v61 = *v57;
        *v57 = 0;
        *(_QWORD *)v60 = v61;
        LODWORD(v61) = *((_DWORD *)v57 + 2);
        *((_DWORD *)v57 + 2) = 0;
        *(_DWORD *)(v60 + 8) = v61;
        LODWORD(v61) = *((_DWORD *)v57 + 3);
        *((_DWORD *)v57 + 3) = 0;
        *(_DWORD *)(v60 + 12) = v61;
        v59 = *(_DWORD *)(v62 + 108) + 1;
        *(_DWORD *)(v62 + 108) = v59;
        v57 += 2;
      }
      while (v57 != (uint64_t *)v58);
    }
    return WebKit::SimulatedInputDispatcher::transitionToNextKeyFrame((WebKit::SimulatedInputDispatcher *)v62);
  }
  return result;
}

uint64_t WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::deleteAllNodes(uint64_t result, void *a2)
{
  WTF *i;
  WTF *v3;
  WTF::StringImpl *v4;

  for (i = *(WTF **)(result + 8); i; result = WTF::fastFree(v3, a2))
  {
    v3 = i;
    i = (WTF *)*((_QWORD *)i + 2);
    v4 = *(WTF::StringImpl **)v3;
    *(_QWORD *)v3 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return result;
}

WebKit::SimulatedInputDispatcher *WTF::RefCounted<WebKit::SimulatedInputDispatcher>::deref(WebKit::SimulatedInputDispatcher *result, void *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebKit::SimulatedInputDispatcher::~SimulatedInputDispatcher(result, a2);
    return (WebKit::SimulatedInputDispatcher *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN9Inspector8Protocol10Automation10VirtualKeyEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSB_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *WTF::RefCounted<WebKit::SimulatedInputSource>::deref(_DWORD *result, WTF::StringImpl *a2)
{
  WTF *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  void *v6;

  v2 = (WTF *)result;
  if (*result == 1)
  {
    v3 = result + 2;
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(result + 14), a2);
    v5 = *((_QWORD *)v2 + 4);
    if (v5)
      WTF::fastFree((WTF *)(v5 - 16), v4);
    WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::deleteAllNodes((uint64_t)v2 + 8, v4);
    if (*v3)
      WTF::fastFree((WTF *)(*v3 - 16), v6);
    return (_DWORD *)WTF::fastFree(v2, v6);
  }
  else
  {
    --*result;
  }
  return result;
}

uint64_t WTF::Vector<std::pair<WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,std::pair<WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState>>::destruct(*(_QWORD *)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 112 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::VectorDestructor<true,std::pair<WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState>>::destruct(uint64_t result, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  if ((WTF::StringImpl *)result != a2)
  {
    v3 = (WTF::StringImpl *)result;
    do
    {
      std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v3 + 56, a2);
      v5 = *((_QWORD *)v3 + 4);
      if (v5)
        WTF::fastFree((WTF *)(v5 - 16), v4);
      result = WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::deleteAllNodes((uint64_t)v3 + 8, v4);
      v6 = *((_QWORD *)v3 + 1);
      if (v6)
        result = WTF::fastFree((WTF *)(v6 - 16), a2);
      v3 = (WTF::StringImpl *)((char *)v3 + 112);
    }
    while (v3 != a2);
  }
  return result;
}

WTF::StringImpl **WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::add@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  WTF::StringImpl ***v11;
  int i;
  unsigned int v13;
  WTF::StringImpl ***v14;
  WTF **v15;
  WTF::StringImpl **result;
  WTF::StringImpl *v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  WTF::StringImpl **v27;

  v7 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ListHashSetNode<WTF::String> *,WTF::ListHashSetNode<WTF::String> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>>::expand(a1, 0), (v7 = *a1) != 0))
  {
    v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = *((_DWORD *)*a2 + 4);
  if (v9 >= 0x100)
    v10 = v9 >> 8;
  else
    v10 = WTF::StringImpl::hashSlowCase(*a2);
  v11 = 0;
  for (i = 1; ; ++i)
  {
    v13 = v10 & v8;
    v14 = (WTF::StringImpl ***)(v7 + 8 * (v10 & v8));
    v15 = *v14;
    if (*v14 == (WTF::StringImpl **)-1)
    {
      v11 = (WTF::StringImpl ***)(v7 + 8 * v13);
      goto LABEL_13;
    }
    if (!v15)
      break;
    result = (WTF::StringImpl **)WTF::equal(*v15, *a2, a3);
    if ((result & 1) != 0)
    {
      v20 = 0;
      goto LABEL_31;
    }
LABEL_13:
    v10 = i + v13;
  }
  if (v11)
  {
    *v11 = 0;
    --*(_DWORD *)(*a1 - 16);
    v14 = v11;
  }
  result = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x18);
  v17 = *a2;
  if (*a2)
    *(_DWORD *)v17 += 2;
  result[1] = 0;
  result[2] = 0;
  *result = v17;
  *v14 = result;
  v18 = *a1;
  if (*a1)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v21 = *a1;
  if (*a1)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
    {
LABEL_26:
      v14 = (WTF::StringImpl ***)WTF::HashTable<WTF::ListHashSetNode<WTF::String> *,WTF::ListHashSetNode<WTF::String> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>>::expand(a1, v14);
      result = *v14;
    }
  }
  else if (3 * v24 <= 4 * v23)
  {
    goto LABEL_26;
  }
  v25 = (_QWORD *)a1[2];
  result[1] = (WTF::StringImpl *)v25;
  result[2] = 0;
  if (v25)
    v26 = v25 + 2;
  else
    v26 = a1 + 1;
  *v26 = result;
  a1[2] = (uint64_t)result;
  v20 = 1;
LABEL_31:
  v27 = *v14;
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = v27;
  *(_BYTE *)(a4 + 16) = v20;
  return result;
}

_QWORD *WTF::HashTable<WTF::ListHashSetNode<WTF::String> *,WTF::ListHashSetNode<WTF::String> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>>::expand(uint64_t *a1, WTF::StringImpl ***a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ListHashSetNode<WTF::String> *,WTF::ListHashSetNode<WTF::String> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<WTF::ListHashSetNode<WTF::String> *,WTF::ListHashSetNode<WTF::String> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl ***a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  WTF::StringImpl ***v12;
  _QWORD *v13;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v12 = (WTF::StringImpl ***)v6;
    do
    {
      if ((unint64_t)*v12 + 1 >= 2)
      {
        v13 = (_QWORD *)WTF::HashTable<WTF::ListHashSetNode<WTF::String> *,WTF::ListHashSetNode<WTF::String> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>>::lookupForReinsert(a1, v12);
        *v13 = *v12;
        if (v12 == a3)
          v11 = v13;
      }
      ++v12;
      --v7;
    }
    while (v7);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WTF::String> *,WTF::ListHashSetNode<WTF::String> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>>::lookupForReinsert(uint64_t *a1, WTF::StringImpl ***a2)
{
  uint64_t v2;
  unsigned int v3;
  WTF::StringImpl *v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v8;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = **a2;
  v5 = *((_DWORD *)v4 + 4);
  if (v5 >= 0x100)
    v6 = v5 >> 8;
  else
    v6 = WTF::StringImpl::hashSlowCase(v4);
  v7 = 0;
  do
  {
    v8 = v6 & v3;
    v6 = ++v7 + v8;
  }
  while (*(_QWORD *)(v2 + 8 * v8));
  return v2 + 8 * v8;
}

uint64_t *WTF::HashTable<Inspector::Protocol::Automation::VirtualKey,WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>>,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::HashMap<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>>::HashTable(uint64_t *a1, int **a2)
{
  int *v3;
  int v4;
  unsigned int v6;
  uint64_t Table;
  int *v8;
  uint64_t v9;
  int *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  int *v22;

  *a1 = 0;
  v3 = *a2;
  if (!*a2)
    return a1;
  v4 = *(v3 - 3);
  if (!v4)
    return a1;
  v6 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::computeBestTableSize(*(v3 - 3));
  Table = WTF::HashTable<Inspector::Protocol::Automation::VirtualKey,WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>>,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::HashMap<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>>::allocateTable(v6);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = v6;
  *(_DWORD *)(*a1 - 8) = v6 - 1;
  *(_DWORD *)(*a1 - 12) = v4;
  *(_DWORD *)(*a1 - 16) = 0;
  v8 = *a2;
  if (*a2)
  {
    v9 = *(v8 - 1);
    v10 = &v8[2 * v9];
    if (*(v8 - 3))
    {
      v11 = *a2;
      if ((_DWORD)v9)
      {
        v12 = 8 * v9;
        v11 = *a2;
        while (*v11 > 2147483645)
        {
          v11 += 2;
          v12 -= 8;
          if (!v12)
          {
            v11 = v10;
            goto LABEL_13;
          }
        }
      }
      goto LABEL_13;
    }
    v11 = &v8[2 * v9];
  }
  else
  {
    v11 = 0;
    v9 = 0;
  }
  v10 = &v8[2 * v9];
LABEL_13:
  if (v8)
    v8 += 2 * *(v8 - 1);
  if (v8 != v11)
  {
    do
    {
      v13 = *a1;
      if (*a1)
        v14 = *(_DWORD *)(v13 - 8);
      else
        v14 = 0;
      v15 = 0;
      v16 = *v11 + ~(*v11 << 15);
      v17 = (9 * (v16 ^ (v16 >> 10))) ^ ((9 * (v16 ^ (v16 >> 10))) >> 6);
      v18 = (v17 + ~(v17 << 11)) ^ ((v17 + ~(v17 << 11)) >> 16);
      do
      {
        v19 = v18 & v14;
        v18 = ++v15 + v19;
      }
      while (*(_DWORD *)(v13 + 8 * v19) != 0x7FFFFFFF);
      v21 = *(_QWORD *)v11;
      v20 = v11 + 2;
      *(_QWORD *)(v13 + 8 * v19) = v21;
      v22 = v10;
      if (v20 != v10)
      {
        v22 = v20;
        while (*v22 > 2147483645)
        {
          v22 += 2;
          if (v22 == v10)
          {
            v22 = v10;
            break;
          }
        }
      }
      v11 = v22;
    }
    while (v22 != v8);
  }
  return a1;
}

uint64_t WTF::HashTable<Inspector::Protocol::Automation::VirtualKey,WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>>,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::HashMap<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>>::allocateTable(unsigned int a1)
{
  uint64_t result;
  uint64_t v3;
  _QWORD *v4;

  result = WTF::fastMalloc((WTF *)(8 * a1 + 16)) + 16;
  if (a1)
  {
    v3 = a1;
    v4 = (_QWORD *)result;
    do
    {
      *v4++ = 0x7FFFFFFFLL;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::SimulatedInputDispatcher::*&)(void),WebKit::SimulatedInputDispatcher*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::Vector<WebKit::SimulatedInputKeyFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD *)a1;
    v5 = 16 * v3;
    do
    {
      v4 = WTF::Vector<std::pair<WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2)+ 16;
      v5 -= 16;
    }
    while (v5);
  }
  v6 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()(uint64_t *a1, int *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  BOOL v6;
  int v7;
  WTF::StringImpl *v8;
  char v9;
  char v10;

  v2 = *a1;
  LOBYTE(v7) = 0;
  v10 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v7 = *a2;
    LOBYTE(v8) = 0;
    v9 = 0;
    if (*((_BYTE *)a2 + 16))
    {
      v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = 0;
      v8 = v3;
      v9 = 1;
    }
    v10 = 1;
  }
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v2 + 16))(v2, &v7);
  if (v10)
    v6 = v9 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    result = v8;
    v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::SimulatedInputDispatcher::transitionToNextKeyFrame(void)::$_0,void,std::optional<WebKit::AutomationCommandError>>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WebKit::SimulatedInputDispatcher *v3;

  *a1 = &off_1E34B3E50;
  v3 = (WebKit::SimulatedInputDispatcher *)a1[2];
  a1[2] = 0;
  if (v3)
    WTF::RefCounted<WebKit::SimulatedInputDispatcher>::deref(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SimulatedInputDispatcher::transitionToNextKeyFrame(void)::$_0,void,std::optional<WebKit::AutomationCommandError>>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::SimulatedInputDispatcher *v3;

  *(_QWORD *)this = &off_1E34B3E50;
  v3 = (WebKit::SimulatedInputDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::SimulatedInputDispatcher>::deref(v3, a2);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::SimulatedInputDispatcher::transitionToNextKeyFrame(void)::$_0,void,std::optional<WebKit::AutomationCommandError>>::call(uint64_t a1, uint64_t a2)
{
  int v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  int v7;
  int v8;
  int v9;
  WTF::StringImpl *v10;
  char v11;
  char v12;

  if (!*(_BYTE *)(a2 + 24))
    return WebKit::SimulatedInputDispatcher::transitionToNextKeyFrame(*(WebKit::SimulatedInputDispatcher **)(a1 + 8));
  v2 = *(_DWORD *)a2;
  if (!*(_BYTE *)(a2 + 16))
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(_DWORD *)a2;
    LOBYTE(v10) = 0;
    v11 = 0;
LABEL_8:
    v12 = 1;
    return (WTF::StringImpl *)WebKit::SimulatedInputDispatcher::finishDispatching(v4, &v9);
  }
  v3 = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = *(_QWORD *)(a1 + 8);
  v9 = v2;
  if (!v3)
  {
    v10 = 0;
    v11 = 1;
    goto LABEL_8;
  }
  *(_DWORD *)v3 += 2;
  v10 = v3;
  v11 = 1;
  v12 = 1;
  result = (WTF::StringImpl *)WebKit::SimulatedInputDispatcher::finishDispatching(v4, &v9);
  v7 = *(_DWORD *)v3 - 2;
  if (*(_DWORD *)v3 == 2)
  {
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(v3, v6);
    v7 = *(_DWORD *)v3;
  }
  else
  {
    *(_DWORD *)v3 = v7;
  }
  v8 = v7 - 2;
  if (!v8)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v3, v6);
  *(_DWORD *)v3 = v8;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::SimulatedInputDispatcher::transitionToNextInputSourceState(void)::$_0,void,std::optional<WebKit::AutomationCommandError>>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WebKit::SimulatedInputDispatcher *v3;

  *a1 = &off_1E34B3E78;
  v3 = (WebKit::SimulatedInputDispatcher *)a1[2];
  a1[2] = 0;
  if (v3)
    WTF::RefCounted<WebKit::SimulatedInputDispatcher>::deref(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SimulatedInputDispatcher::transitionToNextInputSourceState(void)::$_0,void,std::optional<WebKit::AutomationCommandError>>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::SimulatedInputDispatcher *v3;

  *(_QWORD *)this = &off_1E34B3E78;
  v3 = (WebKit::SimulatedInputDispatcher *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::SimulatedInputDispatcher>::deref(v3, a2);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::SimulatedInputDispatcher::transitionToNextInputSourceState(void)::$_0,void,std::optional<WebKit::AutomationCommandError>>::call(uint64_t a1, int *a2)
{
  int v2;
  int v3;
  WTF::StringImpl *v4;
  WebKit::SimulatedInputDispatcher *v5;
  WTF::StringImpl *result;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  WTF::StringImpl *v11;
  char v12;
  char v13;
  WTF::StringImpl *v14;

  if (*((_BYTE *)a2 + 24))
  {
    v2 = *a2;
    v3 = *((unsigned __int8 *)a2 + 16);
    if (*((_BYTE *)a2 + 16))
    {
      v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = 0;
    }
    else
    {
      v4 = 0;
    }
    v7 = *(_QWORD *)(a1 + 8);
    v14 = *(WTF::StringImpl **)(v7 + 56);
    *(_QWORD *)(v7 + 56) = 0;
    v10 = v2;
    LOBYTE(v11) = 0;
    v12 = 0;
    if (v3)
    {
      if (v4)
        *(_DWORD *)v4 += 2;
      v11 = v4;
      v12 = 1;
    }
    v13 = 1;
    WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()((uint64_t *)&v14, (uint64_t)&v10);
    if (v13)
    {
      if (v12)
      {
        v9 = v11;
        v11 = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy(v9, v8);
          else
            *(_DWORD *)v9 -= 2;
        }
      }
    }
    result = v14;
    v14 = 0;
    if (result)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    if (v3 && v4)
    {
      if (*(_DWORD *)v4 == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v8);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  else
  {
    v5 = *(WebKit::SimulatedInputDispatcher **)(a1 + 8);
    ++*((_DWORD *)v5 + 29);
    return WebKit::SimulatedInputDispatcher::transitionToNextInputSourceState(v5);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::SimulatedInputDispatcher::resolveLocation(WebCore::IntPoint const&,std::optional<WebCore::IntPoint>,Inspector::Protocol::Automation::MouseMoveOrigin,std::optional<WTF::String>,WTF::Function<void ()(std::optional<WebCore::IntPoint>,std::optional<WebKit::AutomationCommandError>)> &&)::$_0,void,std::optional<WebCore::IntPoint>,std::optional<WebKit::AutomationCommandError>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34B3EA0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SimulatedInputDispatcher::resolveLocation(WebCore::IntPoint const&,std::optional<WebCore::IntPoint>,Inspector::Protocol::Automation::MouseMoveOrigin,std::optional<WTF::String>,WTF::Function<void ()(std::optional<WebCore::IntPoint>,std::optional<WebKit::AutomationCommandError>)> &&)::$_0,void,std::optional<WebCore::IntPoint>,std::optional<WebKit::AutomationCommandError>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34B3EA0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::SimulatedInputDispatcher::resolveLocation(WebCore::IntPoint const&,std::optional<WebCore::IntPoint>,Inspector::Protocol::Automation::MouseMoveOrigin,std::optional<WTF::String>,WTF::Function<void ()(std::optional<WebCore::IntPoint>,std::optional<WebKit::AutomationCommandError>)> &&)::$_0,void,std::optional<WebCore::IntPoint>,std::optional<WebKit::AutomationCommandError>>::call(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  int v4;
  int v5;
  WTF::StringImpl *v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  char v13;
  char v14;
  int v15;
  WTF::StringImpl *v16;
  char v17;
  char v18;
  int v19;
  WTF::StringImpl *v20;
  char v21;
  char v22;

  if (!*(_BYTE *)(a4 + 24))
  {
    if (a3)
    {
      v7 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 8) += a2;
      *(_DWORD *)(a1 + 12) = v7 + HIDWORD(a2);
      v8 = *(_QWORD *)(a1 + 8);
      LOBYTE(v11) = 0;
      v14 = 0;
      result = WTF::Function<void ()(std::optional<WebCore::IntPoint>,std::optional<WebKit::AutomationCommandError>)>::operator()((uint64_t *)(a1 + 16), v8, 1u, &v11);
      if (!v14)
        return result;
      if (!v13)
        return result;
      result = v12;
      v12 = 0;
      if (!result)
        return result;
    }
    else
    {
      v15 = 19;
      LOBYTE(v16) = 0;
      v17 = 0;
      v18 = 1;
      result = WTF::Function<void ()(std::optional<WebCore::IntPoint>,std::optional<WebKit::AutomationCommandError>)>::operator()((uint64_t *)(a1 + 16), 0, 0, &v15);
      if (!v18)
        return result;
      if (!v17)
        return result;
      result = v16;
      v16 = 0;
      if (!result)
        return result;
    }
    if (*(_DWORD *)result != 2)
    {
      *(_DWORD *)result -= 2;
      return result;
    }
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
  }
  v4 = *(_DWORD *)a4;
  v5 = *(unsigned __int8 *)(a4 + 16);
  if (*(_BYTE *)(a4 + 16))
  {
    v6 = *(WTF::StringImpl **)(a4 + 8);
    *(_QWORD *)(a4 + 8) = 0;
    v19 = v4;
    if (v6)
      *(_DWORD *)v6 += 2;
    v20 = v6;
    v21 = 1;
  }
  else
  {
    v6 = 0;
    v19 = *(_DWORD *)a4;
    LOBYTE(v20) = 0;
    v21 = 0;
  }
  v22 = 1;
  result = WTF::Function<void ()(std::optional<WebCore::IntPoint>,std::optional<WebKit::AutomationCommandError>)>::operator()((uint64_t *)(a1 + 16), 0, 0, &v19);
  if (!v22 || !v21 || (result = v20, v20 = 0, !result))
  {
LABEL_17:
    if (!v5)
      return result;
    goto LABEL_18;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_17;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
  if (v5)
  {
LABEL_18:
    if (!v6)
      return result;
    if (*(_DWORD *)v6 != 2)
    {
      *(_DWORD *)v6 -= 2;
      return result;
    }
    result = v6;
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::SimulatedInputDispatcher::transitionInputSourceToState(WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState &,WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)> &&)::$_1,void,std::optional<WebKit::AutomationCommandError>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34B3EC8;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SimulatedInputDispatcher::transitionInputSourceToState(WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState &,WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)> &&)::$_1,void,std::optional<WebKit::AutomationCommandError>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34B3EC8;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::SimulatedInputDispatcher::transitionInputSourceToState(WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState &,WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)> &&)::$_1,void,std::optional<WebKit::AutomationCommandError>>::call(_QWORD *a1, _BYTE *a2, const WTF::StringImpl *a3)
{
  int v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  __int128 v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[8];
  WTF::StringImpl *v21;
  char v22;
  char v23;
  int v24;
  WTF::StringImpl *v25;
  char v26;
  char v27;
  __int128 v28;
  uint64_t v29;
  _BYTE v30[24];

  if (a2[24])
  {
    v4 = *(_DWORD *)a2;
    v5 = a2[16];
    if (a2[16])
    {
      v6 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = 0;
      v24 = v4;
      if (v6)
        *(_DWORD *)v6 += 2;
      v25 = v6;
      v26 = 1;
    }
    else
    {
      v6 = 0;
      v24 = *(_DWORD *)a2;
      LOBYTE(v25) = 0;
      v26 = 0;
    }
    v27 = 1;
    result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()(a1 + 4, (uint64_t)&v24);
    if (!v27 || !v26 || (result = v25, v25 = 0, !result))
    {
LABEL_15:
      if (!v5)
        return result;
      goto LABEL_16;
    }
    if (*(_DWORD *)result != 2)
    {
      *(_DWORD *)result -= 2;
      goto LABEL_15;
    }
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    if (v5)
    {
LABEL_16:
      if (!v6)
        return result;
      if (*(_DWORD *)v6 != 2)
      {
        *(_DWORD *)v6 -= 2;
        return result;
      }
      result = v6;
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    }
  }
  else
  {
    v7 = a1[2];
    v8 = a1[3];
    v29 = 0;
    v9 = 0uLL;
    v28 = 0u;
    v10 = *(_QWORD *)(v8 + 8);
    if (v10)
    {
      do
      {
        WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::add((uint64_t *)&v28, (WTF::StringImpl **)v10, a3, (uint64_t)v30);
        v10 = *(_QWORD *)(v10 + 16);
      }
      while (v10);
      v9 = v28;
      v11 = v29;
    }
    else
    {
      v11 = 0;
    }
    v14 = *(_OWORD *)(v7 + 8);
    *(_OWORD *)(v7 + 8) = v9;
    v28 = v14;
    v15 = *(_QWORD *)(v7 + 24);
    *(_QWORD *)(v7 + 24) = v11;
    v29 = v15;
    WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::deleteAllNodes((uint64_t)&v28, a2);
    if ((_QWORD)v28)
      WTF::fastFree((WTF *)(v28 - 16), v16);
    WTF::HashTable<Inspector::Protocol::Automation::VirtualKey,WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>>,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::HashMap<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>>::operator=((uint64_t *)(v7 + 32), (int **)(v8 + 24));
    v17 = *(_QWORD *)(v8 + 37);
    *(_QWORD *)(v7 + 40) = *(_QWORD *)(v8 + 32);
    *(_QWORD *)(v7 + 45) = v17;
    std::__optional_storage_base<WTF::String,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::String,false> const&>((WTF::StringImpl **)(v7 + 56), (WTF::StringImpl *)(v8 + 48));
    v18 = *(_OWORD *)(v8 + 64);
    v19 = *(_OWORD *)(v8 + 80);
    *(_BYTE *)(v7 + 104) = *(_BYTE *)(v8 + 96);
    *(_OWORD *)(v7 + 88) = v19;
    *(_OWORD *)(v7 + 72) = v18;
    v20[0] = 0;
    v23 = 0;
    result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()(a1 + 4, (uint64_t)v20);
    if (v23)
    {
      if (v22)
      {
        result = v21;
        v21 = 0;
        if (result)
        {
          if (*(_DWORD *)result != 2)
          {
            *(_DWORD *)result -= 2;
            return result;
          }
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
        }
      }
    }
  }
  return result;
}

uint64_t *WTF::HashTable<Inspector::Protocol::Automation::VirtualKey,WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>>,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::HashMap<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>>::operator=(uint64_t *a1, int **a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v6;

  WTF::HashTable<Inspector::Protocol::Automation::VirtualKey,WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>>,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::HashMap<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>>::HashTable(&v6, a2);
  v4 = *a1;
  *a1 = v6;
  v6 = v4;
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), v3);
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::SimulatedInputDispatcher::transitionInputSourceToState(WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState &,WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)> &&)::$_2,void,std::optional<WebCore::IntPoint>,std::optional<WebKit::AutomationCommandError>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34B3EF0;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SimulatedInputDispatcher::transitionInputSourceToState(WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState &,WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)> &&)::$_2,void,std::optional<WebCore::IntPoint>,std::optional<WebKit::AutomationCommandError>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34B3EF0;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::SimulatedInputDispatcher::transitionInputSourceToState(WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState &,WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)> &&)::$_2,void,std::optional<WebCore::IntPoint>,std::optional<WebKit::AutomationCommandError>>::call(_QWORD *a1, uint64_t a2, char a3, int *a4)
{
  int v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *);
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *result;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  uint64_t v26;
  _BYTE v27[8];
  WTF::StringImpl *v28;
  char v29;
  char v30;
  int v31;
  WTF::StringImpl *v32;
  char v33;
  char v34;
  int v35;
  WTF::StringImpl *v36;
  char v37;
  char v38;

  if (!*((_BYTE *)a4 + 24))
  {
    if (!a3)
    {
      v31 = 19;
      LOBYTE(v32) = 0;
      v33 = 0;
      v34 = 1;
      result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()(a1 + 4, (uint64_t)&v31);
      if (!v34)
        return result;
      if (!v33)
        return result;
      result = v32;
      v32 = 0;
      if (!result)
        return result;
LABEL_49:
      if (*(_DWORD *)result != 2)
      {
        *(_DWORD *)result -= 2;
        return result;
      }
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
    }
    v7 = a1[1];
    v8 = a1[3];
    *(_QWORD *)(v8 + 64) = a2;
    *(_BYTE *)(v8 + 72) = a3;
    v10 = a1[2];
    v9 = a1[3];
    if (*(_BYTE *)(v10 + 36))
    {
      if (!*(_BYTE *)(v9 + 36))
      {
        if (*(_BYTE *)(v9 + 72))
        {
          v11 = v9 + 64;
          v12 = *(_QWORD *)(v7 + 8);
          v13 = *(_QWORD *)(v7 + 16);
          v14 = a1 + 4;
          v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v13 + 16);
          v16 = v13;
          v17 = 2;
LABEL_31:
          v21 = 0;
          v22 = 0;
          return (WTF::StringImpl *)v15(v16, v12, v17, v11, v21, v22, v14);
        }
        goto LABEL_39;
      }
    }
    else if (*(_BYTE *)(v9 + 36))
    {
      if (*(_BYTE *)(v9 + 72))
      {
        v11 = v9 + 64;
        v12 = *(_QWORD *)(v7 + 8);
        v20 = *(_QWORD *)(v7 + 16);
        v14 = a1 + 4;
        v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v20 + 16);
        v16 = v20;
        v17 = 0;
        goto LABEL_31;
      }
      goto LABEL_39;
    }
    v23 = *(unsigned __int8 *)(v9 + 72);
    if (*(_BYTE *)(v10 + 72))
      v24 = v23 == 0;
    else
      v24 = 1;
    if (!v24)
    {
LABEL_40:
      if (*(_DWORD *)(v10 + 64) != *(_DWORD *)(v9 + 64) || *(_DWORD *)(v10 + 68) != *(_DWORD *)(v9 + 68))
        goto LABEL_44;
      goto LABEL_46;
    }
    if ((*(_BYTE *)(v10 + 72) != 0) == (v23 != 0))
    {
LABEL_46:
      v27[0] = 0;
      v30 = 0;
      result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()(a1 + 4, (uint64_t)v27);
      if (!v30)
        return result;
      if (!v29)
        return result;
      result = v28;
      v28 = 0;
      if (!result)
        return result;
      goto LABEL_49;
    }
    if (*(_BYTE *)(v9 + 72))
    {
LABEL_44:
      v11 = v9 + 64;
      v12 = *(_QWORD *)(v7 + 8);
      v26 = *(_QWORD *)(v7 + 16);
      if (*(_BYTE *)(v10 + 96))
        v21 = *(_QWORD *)(v10 + 88);
      else
        v21 = 0;
      v14 = a1 + 4;
      v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v26 + 16);
      v16 = v26;
      v17 = 1;
      v22 = 1;
      return (WTF::StringImpl *)v15(v16, v12, v17, v11, v21, v22, v14);
    }
LABEL_39:
    a1 = std::__throw_bad_optional_access[abi:sn180100]();
    goto LABEL_40;
  }
  v4 = *a4;
  v5 = *((unsigned __int8 *)a4 + 16);
  if (*((_BYTE *)a4 + 16))
  {
    v6 = (WTF::StringImpl *)*((_QWORD *)a4 + 1);
    *((_QWORD *)a4 + 1) = 0;
    v35 = v4;
    if (v6)
      *(_DWORD *)v6 += 2;
    v36 = v6;
    v37 = 1;
  }
  else
  {
    v6 = 0;
    v35 = *a4;
    LOBYTE(v36) = 0;
    v37 = 0;
  }
  v38 = 1;
  result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()(a1 + 4, (uint64_t)&v35);
  if (!v38 || !v37 || (result = v36, v36 = 0, !result))
  {
LABEL_17:
    if (!v5)
      return result;
    goto LABEL_18;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_17;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
  if (v5)
  {
LABEL_18:
    if (!v6)
      return result;
    if (*(_DWORD *)v6 != 2)
    {
      *(_DWORD *)v6 -= 2;
      return result;
    }
    result = v6;
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WTF::String> *,WTF::ListHashSetNode<WTF::String> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>>::contains<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t result, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int i;
  int v9;
  WTF **v10;

  if (result)
  {
    v4 = result;
    v5 = *(_DWORD *)(result - 8);
    v6 = *((_DWORD *)*a2 + 4);
    if (v6 >= 0x100)
      v7 = v6 >> 8;
    else
      v7 = WTF::StringImpl::hashSlowCase(*a2);
    for (i = 0; ; v7 = i + v9)
    {
      v9 = v7 & v5;
      v10 = *(WTF ***)(v4 + 8 * (v7 & v5));
      if (v10 != (WTF **)-1)
      {
        if (!v10)
          return 0;
        if ((WTF::equal(*v10, *a2, a3) & 1) != 0)
          break;
      }
      ++i;
    }
    return 1;
  }
  return result;
}

uint64_t WTF::HashTable<Inspector::Protocol::Automation::VirtualKey,WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>>,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::HashMap<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>>,Inspector::Protocol::Automation::VirtualKey>(uint64_t a1, int a2)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  _BOOL8 v6;
  int v7;

  if (!a1)
    return 0;
  v2 = *(_DWORD *)(a1 - 8);
  v3 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v4 = v2 & (((v3 ^ (v3 >> 6)) + ~((v3 ^ (v3 >> 6)) << 11)) ^ (((v3 ^ (v3 >> 6)) + ~((v3 ^ (v3 >> 6)) << 11)) >> 16));
  v5 = *(_DWORD *)(a1 + 8 * v4);
  if (v5 == a2)
    return 1;
  v7 = 1;
  do
  {
    v6 = v5 != 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF)
      break;
    LODWORD(v4) = (v4 + v7) & v2;
    v5 = *(_DWORD *)(a1 + 8 * v4);
    ++v7;
  }
  while (v5 != a2);
  return v6;
}

uint64_t WTF::Vector<WebKit::SimulatedInputKeyFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  WTF *v4;
  void *v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x196FB5C9CLL);
    }
    v4 = *(WTF **)a1;
    v5 = (void *)(*(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12));
    v6 = WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebKit::SimulatedInputKeyFrame>::move((uint64_t)v4, v5, v6);
    if (v4)
    {
      if (*(WTF **)a1 == v4)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
  }
  return 1;
}

uint64_t WTF::VectorMover<false,WebKit::SimulatedInputKeyFrame>::move(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v5;

  for (; (void *)result != a2; a3 += 16)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    v5 = *(_QWORD *)result;
    *(_QWORD *)result = 0;
    *(_QWORD *)a3 = v5;
    LODWORD(v5) = *(_DWORD *)(result + 8);
    *(_DWORD *)(result + 8) = 0;
    *(_DWORD *)(a3 + 8) = v5;
    LODWORD(v5) = *(_DWORD *)(result + 12);
    *(_DWORD *)(result + 12) = 0;
    *(_DWORD *)(a3 + 12) = v5;
    result = WTF::Vector<std::pair<WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(result, a2)+ 16;
  }
  return result;
}

uint64_t WTF::Vector<WebKit::SimulatedInputKeyFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::SimulatedInputKeyFrame>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = WTF::Vector<WebKit::SimulatedInputKeyFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12);
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  v5 = *(_QWORD *)v3;
  *(_QWORD *)v3 = 0;
  *(_QWORD *)v4 = v5;
  LODWORD(v5) = *(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 8) = 0;
  *(_DWORD *)(v4 + 8) = v5;
  LODWORD(v5) = *(_DWORD *)(v3 + 12);
  *(_DWORD *)(v3 + 12) = 0;
  *(_DWORD *)(v4 + 12) = v5;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebKit::SimulatedInputKeyFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::SimulatedInputKeyFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::SimulatedInputKeyFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WebKit::SmartMagnificationController::didReceiveMessage(uint64_t this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unint64_t v19;
  double *v20;
  unint64_t v21;
  double v23;
  double v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _DWORD v34[4];
  char v35;
  double v36[2];
  char v37;

  v4 = this;
  v5 = *((unsigned __int16 *)a3 + 25);
  if (v5 == 1437)
  {
    IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a3);
    if (v25)
    {
      IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)a3, (uint64_t)v36);
      if (v37)
        return WebKit::SmartMagnificationController::scrollToRect(v4);
    }
    goto LABEL_28;
  }
  if (v5 != 1436)
    return this;
  v6 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a3);
  if (!v7)
    goto LABEL_28;
  v8 = v6;
  IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)a3, (uint64_t)v34);
  if (!v35)
    goto LABEL_28;
  IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)a3, (uint64_t)v36);
  if (!v37)
    goto LABEL_28;
  v13 = *((_QWORD *)a3 + 1);
  v14 = *(_QWORD *)a3;
  v15 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
  if (v13 <= v15)
  {
    v28 = 0;
    v29 = 0;
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    v30 = *((_QWORD *)a3 + 3);
    if (v30)
    {
      if (v13)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30);
        v29 = *(_QWORD *)a3;
        v28 = *((_QWORD *)a3 + 1);
      }
      else
      {
        v28 = 0;
        v29 = 0;
      }
    }
    goto LABEL_25;
  }
  v16 = (unsigned __int8 *)(v14 + v15);
  v17 = v16 + 1;
  *((_QWORD *)a3 + 2) = v16 + 1;
  if (!v14)
  {
    v28 = v13;
    v29 = 0;
LABEL_25:
    v13 = 0;
    v14 = 0;
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    v31 = *((_QWORD *)a3 + 3);
    if (!v31)
      goto LABEL_29;
    if (!v28)
    {
      v13 = 0;
      v14 = 0;
LABEL_29:
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v27 = *((_QWORD *)a3 + 3);
      if (!v27)
        goto LABEL_30;
LABEL_33:
      if (v13)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v27 + 16))(v27, v14);
      goto LABEL_30;
    }
    (*(void (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)v31 + 16))(v31, v29, v28);
LABEL_28:
    v14 = *(_QWORD *)a3;
    v13 = *((_QWORD *)a3 + 1);
    goto LABEL_29;
  }
  v18 = *v16;
  if (v18 >= 2)
    goto LABEL_29;
  v19 = ((unint64_t)(v17 + 7) & 0xFFFFFFFFFFFFFFF8) - v14;
  if (v13 >= v19 && v13 - v19 > 7)
  {
    v20 = (double *)(v14 + v19);
    *((_QWORD *)a3 + 2) = v20 + 1;
    v21 = (((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8) - v14;
    if (v13 >= v21 && v13 - v21 > 7)
    {
      v23 = *v20;
      v24 = *(double *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
      *((_QWORD *)a3 + 2) = (((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
      LODWORD(v10) = HIDWORD(v8);
      LODWORD(v9) = v8;
      LODWORD(v11) = v34[0];
      LODWORD(v12) = v34[1];
      return WebKit::SmartMagnificationController::didCollectGeometryForSmartMagnificationGesture(v4, v18 != 0, v9, v10, v11, v12, *(float *)&v34[2], *(float *)&v34[3], v23, v24, v36[0], v36[1], v23, v24);
    }
  }
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v26 = *((_QWORD *)a3 + 3);
  if (v26)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
    v14 = *(_QWORD *)a3;
    v13 = *((_QWORD *)a3 + 1);
    v27 = *((_QWORD *)a3 + 3);
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    if (v27)
      goto LABEL_33;
  }
LABEL_30:
  v32 = *(_QWORD *)a3;
  v33 = *((_QWORD *)a3 + 1);
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  this = *((_QWORD *)a3 + 3);
  if (this)
  {
    if (v33)
      return (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)this + 16))(this, v32);
  }
  return this;
}

void WebKit::SourceBufferPrivateRemote::MessageReceiver::didReceiveMessage(WebKit::SourceBufferPrivateRemote::MessageReceiver *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  __int128 *v3;
  uint64_t *v4;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  unint64_t v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  _QWORD *v38;
  uint64_t v39;
  WebKit::MediaSourcePrivateRemote *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  _QWORD v49[2];
  _QWORD v50[2];
  char v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  _QWORD *v59;

  v4 = (uint64_t *)a3;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x59E:
      IPC::Decoder::decode<WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a3, a2, (uint64_t)&v52);
      if (!(_BYTE)v53)
        goto LABEL_34;
      v8 = *((_QWORD *)&v52 + 1);
      *(_QWORD *)&v47 = v52;
      v52 = 0uLL;
      *((_QWORD *)&v47 + 1) = v8;
      WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v52, v7);
      LOBYTE(v48) = 1;
      v9 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v4);
      if (!(_BYTE)v10)
        goto LABEL_8;
      *(_QWORD *)&v52 = v9;
      v4 = (uint64_t *)&v52 + 1;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v52 + 1, (unsigned __int8 **)a2);
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v11 = off_1E34B3F40;
      v11[1] = v52;
      v12 = *((_QWORD *)&v52 + 1);
      *((_QWORD *)&v52 + 1) = 0;
      v11[2] = v12;
      v59 = v11;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52 + 1);
      if (!(_BYTE)v48)
        goto LABEL_36;
      WebKit::SourceBufferPrivateRemote::MessageReceiver::sourceBufferPrivateBufferedChanged(this, (uint64_t)&v47, (uint64_t *)&v59);
      v13 = (uint64_t)v59;
      v59 = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      if ((_BYTE)v48)
LABEL_8:
        WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v10);
      return;
    case 0x59F:
      WebKit::SourceBufferPrivateRemote::MessageReceiver::sourceBufferPrivateDidDropSample(this);
      return;
    case 0x5A0:
      v3 = &v52;
      IPC::ArgumentCoder<WebKit::InitializationSegmentInfo,void>::decode((uint64_t *)a3, (uint64_t)&v52);
      if (!v58)
        goto LABEL_37;
      goto LABEL_11;
    case 0x5A1:
      v29 = IPC::Decoder::decode<std::tuple<long long>>((uint64_t *)a3);
      if (v30)
        WebKit::SourceBufferPrivateRemote::MessageReceiver::sourceBufferPrivateDidReceiveRenderingError(this, v29);
      return;
    case 0x5A2:
      IPC::Decoder::decode<std::tuple<WTF::MediaTime>>((uint64_t *)a3, (uint64_t)&v52);
      if (!(_BYTE)v53)
        return;
      v31 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v4);
      if (!v32)
        return;
      *(_QWORD *)&v47 = v31;
      v4 = (uint64_t *)&v47 + 1;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v47 + 1, (unsigned __int8 **)a2);
      v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v33 = off_1E34B3F68;
      v33[1] = v47;
      v34 = *((_QWORD *)&v47 + 1);
      *((_QWORD *)&v47 + 1) = 0;
      v33[2] = v34;
      v59 = v33;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v47 + 1);
      if ((_BYTE)v53)
      {
        WebKit::SourceBufferPrivateRemote::MessageReceiver::sourceBufferPrivateDurationChanged(this, (uint64_t)&v52, (uint64_t *)&v59);
        v35 = (uint64_t)v59;
        v59 = 0;
        if (v35)
LABEL_30:
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
        return;
      }
      break;
    case 0x5A3:
      IPC::Decoder::decode<WebCore::SourceBufferEvictionData>((uint64_t *)a3, (uint64_t)&v52);
      if ((_BYTE)v54)
      {
        v47 = v52;
        v48 = v53;
        LOBYTE(v49[0]) = 1;
        WebKit::SourceBufferPrivateRemote::MessageReceiver::sourceBufferPrivateEvictionDataChanged(this, &v47);
        return;
      }
LABEL_34:
      v41 = *v4;
      v42 = v4[1];
      *v4 = 0;
      v4[1] = 0;
      v43 = v4[3];
      if (!v43)
        return;
      goto LABEL_42;
    case 0x5A4:
      IPC::Decoder::decode<std::tuple<WTF::MediaTime>>((uint64_t *)a3, (uint64_t)&v52);
      if ((_BYTE)v53)
        WebKit::SourceBufferPrivateRemote::MessageReceiver::sourceBufferPrivateHighestPresentationTimestampChanged(this, (const WTF::MediaTime *)&v52);
      return;
    case 0x5A5:
      v36 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v37)
      {
        *(_QWORD *)&v52 = v36;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v52 + 1, (unsigned __int8 **)a2);
        v38 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v38 = off_1E34B3F90;
        v38[1] = v52;
        v39 = *((_QWORD *)&v52 + 1);
        *((_QWORD *)&v52 + 1) = 0;
        v38[2] = v39;
        *(_QWORD *)&v47 = v38;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52 + 1);
        WebKit::SourceBufferPrivateRemote::MessageReceiver::sourceBufferPrivateShuttingDown(this, (uint64_t *)&v47);
        v35 = v47;
        *(_QWORD *)&v47 = 0;
        if (v35)
          goto LABEL_30;
      }
      return;
    case 0x5A6:
      IPC::Decoder::decode<std::tuple<WebCore::SharedMemoryHandle>>(a3, (uint64_t)&v52);
      if ((_BYTE)v53)
      {
        WebKit::MediaSourcePrivateRemote::queue(v40);
        WebCore::SharedMemoryHandle::takeOwnershipOfMemory();
        if ((_BYTE)v53)
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v52);
      }
      return;
    default:
      return;
  }
  do
  {
LABEL_36:
    __break(1u);
LABEL_37:
    v44 = *v4;
    v45 = v4[1];
    *v4 = 0;
    v4[1] = 0;
    v46 = v4[3];
    if (!v46 || !v45)
    {
      *v4 = 0;
      v4[1] = 0;
      return;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v46 + 16))(v46, v44);
    if (!v58)
    {
      v41 = *v4;
      v42 = v4[1];
      v43 = v4[3];
      *v4 = 0;
      v4[1] = 0;
      if (v43)
      {
LABEL_42:
        if (v42)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v43 + 16))(v43, v41);
      }
      return;
    }
LABEL_11:
    v47 = v52;
    v15 = *((_QWORD *)&v53 + 1);
    *(_QWORD *)&v48 = v53;
    v53 = 0uLL;
    *((_QWORD *)&v48 + 1) = v15;
    v16 = v54;
    v54 = 0;
    v49[0] = v16;
    v17 = v55;
    v55 = 0;
    v49[1] = v17;
    v18 = v56;
    v56 = 0;
    v50[0] = v18;
    v19 = v57;
    v57 = 0;
    v50[1] = v19;
    v51 = 1;
    WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v3 + 3), v14);
    WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v3 + 2), v20);
    WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v3 + 1), v21);
    v22 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v4);
    if (!(_BYTE)v23)
      goto LABEL_16;
    *(_QWORD *)&v52 = v22;
    v4 = (uint64_t *)&v52 + 1;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v52 + 1, (unsigned __int8 **)a2);
    v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v24 = off_1E34B3F18;
    v24[1] = v52;
    v25 = *((_QWORD *)&v52 + 1);
    *((_QWORD *)&v52 + 1) = 0;
    v24[2] = v25;
    v59 = v24;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52 + 1);
  }
  while (!v51);
  WebKit::SourceBufferPrivateRemote::MessageReceiver::sourceBufferPrivateDidReceiveInitializationSegment(this, (uint64_t)&v47, (uint64_t *)&v59);
  v26 = (uint64_t)v59;
  v59 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  if (v51)
  {
LABEL_16:
    WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v50, v23);
    WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v49, v27);
    WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v48, v28);
  }
}

void WebKit::SourceBufferPrivateRemote::MessageReceiver::~MessageReceiver(WebKit::SourceBufferPrivateRemote::MessageReceiver *this, void *a2)
{
  unsigned __int8 *v3;

  *(_QWORD *)this = off_1E34B3FB8;
  v3 = (unsigned __int8 *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  unsigned __int8 *v3;
  void *v4;

  *(_QWORD *)this = off_1E34B3FB8;
  v3 = (unsigned __int8 *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
  WTF::fastFree(this, v4);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages40SourceBufferPrivateRemoteMessageReceiver50SourceBufferPrivateDidReceiveInitializationSegmentEN6WebKit25SourceBufferPrivateRemote15MessageReceiverES9_FvONS7_25InitializationSegmentInfoEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3F18;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages40SourceBufferPrivateRemoteMessageReceiver50SourceBufferPrivateDidReceiveInitializationSegmentEN6WebKit25SourceBufferPrivateRemote15MessageReceiverES9_FvONS7_25InitializationSegmentInfoEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B3F18;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages40SourceBufferPrivateRemoteMessageReceiver50SourceBufferPrivateDidReceiveInitializationSegmentEN6WebKit25SourceBufferPrivateRemote15MessageReceiverES9_FvONS7_25InitializationSegmentInfoEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EE4callESJ_(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3129;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<WebCore::SharedMemoryHandle>>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<WebCore::SharedMemoryHandle>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v4 = *(_QWORD *)a1;
    v5 = *((_QWORD *)a1 + 1);
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    v6 = *((_QWORD *)a1 + 3);
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<std::tuple<WebCore::SharedMemoryHandle>,void>::decode<IPC::Decoder>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  _BYTE v4[8];
  uint64_t v5;
  unsigned __int8 v6;

  IPC::Decoder::decode<WebCore::SharedMemoryHandle>(a1, (uint64_t)v4);
  if (v6)
  {
    WTF::MachSendRight::MachSendRight();
    *(_QWORD *)(a2 + 8) = v5;
    v3 = v6;
    *(_BYTE *)(a2 + 16) = 1;
    if (v3)
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v4);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::VectorArgumentCoder<false,WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

uint64_t IPC::VectorArgumentCoder<false,WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  WTF *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  int v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;

  v5 = a1[1];
  v6 = *a1;
  v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    v20 = 0;
    v21 = 0;
    *a1 = 0;
    a1[1] = 0;
    v22 = a1[3];
    if (v22)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v22 + 16))(v22, v6, v5);
        v21 = *a1;
        v20 = a1[1];
      }
      else
      {
        v20 = 0;
        v21 = 0;
      }
    }
    goto LABEL_34;
  }
  v9 = (unint64_t *)(v6 + v7);
  a1[2] = (uint64_t)(v9 + 1);
  if (v6)
  {
    v10 = *v9;
    v28 = 0;
    v29 = 0;
    if (v10 >= 0x10000)
    {
      while (1)
      {
        IPC::Decoder::decode<WebCore::PlatformTimeRanges>(a1, (uint64_t)&v24);
        if (!v27)
          break;
        if (HIDWORD(v29) == (_DWORD)v29)
        {
          WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PlatformTimeRanges>((uint64_t)&v28, (unint64_t)&v24);
        }
        else
        {
          v16 = v28 + 16 * HIDWORD(v29);
          *(_QWORD *)v16 = 0;
          *(_QWORD *)(v16 + 8) = 0;
          v17 = v24;
          v24 = 0;
          *(_QWORD *)v16 = v17;
          *(_DWORD *)(v16 + 8) = v25;
          LODWORD(v17) = v26;
          v26 = 0;
          *(_DWORD *)(v16 + 12) = (_DWORD)v17;
          ++HIDWORD(v29);
        }
        if (v27)
        {
          v18 = v24;
          if (v24)
          {
            v24 = 0;
            v25 = 0;
            WTF::fastFree(v18, a2);
          }
        }
        if (!--v10)
        {
          WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v28, HIDWORD(v29));
          *(_QWORD *)a3 = v28;
          v23 = v29;
          v28 = 0;
          v29 = 0;
          *(_QWORD *)(a3 + 8) = v23;
          goto LABEL_21;
        }
      }
    }
    else
    {
      if (!v10)
      {
        v14 = 0;
        v15 = 0;
LABEL_20:
        v28 = 0;
        v29 = 0;
        *(_QWORD *)a3 = v14;
        *(_QWORD *)(a3 + 8) = v15;
LABEL_21:
        *(_BYTE *)(a3 + 16) = 1;
        return WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, a2);
      }
      LODWORD(v29) = v10;
      v28 = WTF::fastMalloc((WTF *)(16 * v10));
      while (1)
      {
        IPC::Decoder::decode<WebCore::PlatformTimeRanges>(a1, (uint64_t)&v24);
        if (!v27)
          break;
        if (HIDWORD(v29) == (_DWORD)v29)
        {
          WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PlatformTimeRanges>((uint64_t)&v28, (unint64_t)&v24);
        }
        else
        {
          v11 = v28 + 16 * HIDWORD(v29);
          *(_QWORD *)v11 = 0;
          *(_QWORD *)(v11 + 8) = 0;
          v12 = v24;
          v24 = 0;
          *(_QWORD *)v11 = v12;
          *(_DWORD *)(v11 + 8) = v25;
          LODWORD(v12) = v26;
          v26 = 0;
          *(_DWORD *)(v11 + 12) = (_DWORD)v12;
          ++HIDWORD(v29);
        }
        if (v27)
        {
          v13 = v24;
          if (v24)
          {
            v24 = 0;
            v25 = 0;
            WTF::fastFree(v13, a2);
          }
        }
        if (!--v10)
        {
          v14 = v28;
          v15 = v29;
          goto LABEL_20;
        }
      }
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, a2);
  }
  v20 = v5;
  v21 = 0;
LABEL_34:
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v20)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v21);
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 16) = 0;
  return result;
}

uint64_t WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PlatformTimeRanges>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12);
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  v5 = *(_QWORD *)v3;
  *(_QWORD *)v3 = 0;
  *(_QWORD *)v4 = v5;
  LODWORD(v5) = *(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 8) = 0;
  *(_DWORD *)(v4 + 8) = v5;
  LODWORD(v5) = *(_DWORD *)(v3 + 12);
  *(_DWORD *)(v3 + 12) = 0;
  *(_DWORD *)(v4 + 12) = v5;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x196FB6C58);
    }
    v4 = *(WTF **)a1;
    v5 = (WTF *)(*(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12));
    v6 = WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebCore::PlatformTimeRanges>::move(v4, v5, v6);
    if (v4)
    {
      if (*(WTF **)a1 == v4)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
  }
  return 1;
}

WTF *WTF::VectorMover<false,WebCore::PlatformTimeRanges>::move(WTF *result, WTF *a2, uint64_t a3)
{
  WTF *v5;
  WTF *v6;

  if (result != a2)
  {
    v5 = result;
    do
    {
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v6 = *(WTF **)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)a3 = v6;
      LODWORD(v6) = *((_DWORD *)v5 + 2);
      *((_DWORD *)v5 + 2) = 0;
      *(_DWORD *)(a3 + 8) = (_DWORD)v6;
      LODWORD(v6) = *((_DWORD *)v5 + 3);
      *((_DWORD *)v5 + 3) = 0;
      *(_DWORD *)(a3 + 12) = (_DWORD)v6;
      result = *(WTF **)v5;
      if (*(_QWORD *)v5)
      {
        *(_QWORD *)v5 = 0;
        *((_DWORD *)v5 + 2) = 0;
        result = (WTF *)WTF::fastFree(result, a2);
      }
      v5 = (WTF *)((char *)v5 + 16);
      a3 += 16;
    }
    while (v5 != a2);
  }
  return result;
}

unsigned int *WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;

  if (result[2] > a2)
  {
    v3 = result;
    if (result[3] > a2)
      result = WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(result, (void *)a2);
    v4 = *(WTF **)v3;
    if (a2)
    {
      if (a2 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      v5 = v3[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * a2));
      v3[2] = a2;
      *(_QWORD *)v3 = result;
      if (result != (unsigned int *)v4)
        result = (unsigned int *)WTF::VectorMover<false,WebCore::PlatformTimeRanges>::move(v4, (WTF *)((char *)v4 + 16 * v5), (uint64_t)result);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v4, (void *)a2);
    }
  }
  return result;
}

unsigned int *WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(unsigned int *result, void *a2)
{
  unsigned int v2;
  unsigned int *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a2;
  v3 = result;
  v4 = result[3];
  if ((void *)v4 != a2)
  {
    v5 = *(_QWORD *)result + 16 * (_QWORD)a2;
    v6 = 16 * v4 - 16 * (_QWORD)a2;
    do
    {
      result = *(unsigned int **)v5;
      if (*(_QWORD *)v5)
      {
        *(_QWORD *)v5 = 0;
        *(_DWORD *)(v5 + 8) = 0;
        result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
      }
      v5 += 16;
      v6 -= 16;
    }
    while (v6);
  }
  v3[3] = v2;
  return result;
}

uint64_t WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = *(WTF **)a1;
  if ((_DWORD)v3)
  {
    v5 = 16 * v3;
    do
    {
      v6 = *(WTF **)v4;
      if (*(_QWORD *)v4)
      {
        *(_QWORD *)v4 = 0;
        *((_DWORD *)v4 + 2) = 0;
        WTF::fastFree(v6, a2);
      }
      v4 = (WTF *)((char *)v4 + 16);
      v5 -= 16;
    }
    while (v5);
    v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages40SourceBufferPrivateRemoteMessageReceiver34SourceBufferPrivateBufferedChangedEN6WebKit25SourceBufferPrivateRemote15MessageReceiverES9_FvONS_6VectorIN7WebCore18PlatformTimeRangesELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3F40;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages40SourceBufferPrivateRemoteMessageReceiver34SourceBufferPrivateBufferedChangedEN6WebKit25SourceBufferPrivateRemote15MessageReceiverES9_FvONS_6VectorIN7WebCore18PlatformTimeRangesELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B3F40;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages40SourceBufferPrivateRemoteMessageReceiver34SourceBufferPrivateBufferedChangedEN6WebKit25SourceBufferPrivateRemote15MessageReceiverES9_FvONS_6VectorIN7WebCore18PlatformTimeRangesELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3128;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages40SourceBufferPrivateRemoteMessageReceiver34SourceBufferPrivateDurationChangedEN6WebKit25SourceBufferPrivateRemote15MessageReceiverES9_FvRKNS_9MediaTimeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3F68;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages40SourceBufferPrivateRemoteMessageReceiver34SourceBufferPrivateDurationChangedEN6WebKit25SourceBufferPrivateRemote15MessageReceiverES9_FvRKNS_9MediaTimeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B3F68;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages40SourceBufferPrivateRemoteMessageReceiver34SourceBufferPrivateDurationChangedEN6WebKit25SourceBufferPrivateRemote15MessageReceiverES9_FvRKNS_9MediaTimeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3130;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::SourceBufferEvictionData>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::SourceBufferEvictionData,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 32))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages40SourceBufferPrivateRemoteMessageReceiver31SourceBufferPrivateShuttingDownEN6WebKit25SourceBufferPrivateRemote15MessageReceiverES9_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B3F90;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages40SourceBufferPrivateRemoteMessageReceiver31SourceBufferPrivateShuttingDownEN6WebKit25SourceBufferPrivateRemote15MessageReceiverES9_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B3F90;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages40SourceBufferPrivateRemoteMessageReceiver31SourceBufferPrivateShuttingDownEN6WebKit25SourceBufferPrivateRemote15MessageReceiverES9_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3131;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t *WebKit::SpeechRecognitionRealtimeMediaSourceManager::didReceiveMessage(uint64_t *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t *v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  __int128 v9;
  WTF::StringImpl *v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17[2];
  WTF::StringImpl *v18;
  __int128 v19;
  char v20;

  v4 = this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x5A7:
      v5 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v6)
        goto LABEL_17;
      v7 = v5;
      IPC::Decoder::decode<WebCore::CaptureDevice>((uint64_t *)a3, (uint64_t)&v18);
      if (v20
        && (this = (uint64_t *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3),
            (_BYTE)v8))
      {
        if (v20)
        {
          v16 = v18;
          v9 = v19;
          v18 = 0;
          v19 = 0uLL;
          *(_OWORD *)v17 = v9;
          std::__optional_destruct_base<WebCore::CaptureDevice,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v18, v8);
          WebKit::SpeechRecognitionRealtimeMediaSourceManager::createSource((uint64_t)v4, v7);
          if (v17[1])
          {
            if (*(_DWORD *)v17[1] == 2)
              WTF::StringImpl::destroy(v17[1], v10);
            else
              *(_DWORD *)v17[1] -= 2;
          }
          if (v17[0])
          {
            if (*(_DWORD *)v17[0] == 2)
              WTF::StringImpl::destroy(v17[0], v10);
            else
              *(_DWORD *)v17[0] -= 2;
          }
          this = (uint64_t *)v16;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              return (uint64_t *)WTF::StringImpl::destroy(v16, v10);
            else
              *(_DWORD *)v16 -= 2;
          }
        }
        else
        {
          __break(1u);
        }
      }
      else
      {
        std::__optional_destruct_base<WebCore::CaptureDevice,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v18, v8);
LABEL_17:
        v14 = *(_QWORD *)a3;
        v15 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        this = (uint64_t *)*((_QWORD *)a3 + 3);
        if (this && v15)
          return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*this + 16))(this, v14);
      }
      return this;
    case 0x5A8:
      this = (uint64_t *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v11)
        return WebKit::SpeechRecognitionRealtimeMediaSourceManager::deleteSource((uint64_t)v4, (uint64_t)this);
      return this;
    case 0x5A9:
      this = (uint64_t *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v12)
        return (uint64_t *)WebKit::SpeechRecognitionRealtimeMediaSourceManager::start((uint64_t)v4, (uint64_t)this);
      return this;
    case 0x5AA:
      this = (uint64_t *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v13)
        return (uint64_t *)WebKit::SpeechRecognitionRealtimeMediaSourceManager::stop((uint64_t)v4, (uint64_t)this);
      return this;
    default:
      return this;
  }
}

void WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager::didReceiveMessage(WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  unint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[24];
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  char v39;
  char v40[8];
  __int128 v41;
  char v42;
  _BYTE v43[24];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  int v47;
  char v48;

  switch(*((_WORD *)a3 + 25))
  {
    case 0x5AB:
      v5 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v6)
        goto LABEL_35;
      v7 = v5;
      IPC::Decoder::decode<WTF::MediaTime>((uint64_t *)a3, (uint64_t)v43);
      if (!v43[16])
        goto LABEL_35;
      v8 = *((_QWORD *)a3 + 1);
      v9 = *(_QWORD *)a3;
      v10 = ((*((_QWORD *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a3;
      if (v8 < v10 || v8 - v10 <= 7)
      {
        v21 = 0;
        v20 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v27 = *((_QWORD *)a3 + 3);
        if (v27)
        {
          if (v8)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v27 + 16))(v27, v9, v8);
            v20 = *(_QWORD *)a3;
            v21 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v21 = 0;
            v20 = 0;
          }
        }
LABEL_34:
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v19 = *((_QWORD *)a3 + 3);
        if (v19)
          goto LABEL_40;
        goto LABEL_35;
      }
      v12 = (uint64_t *)(v9 + v10);
      *((_QWORD *)a3 + 2) = v12 + 1;
      if (!v9)
      {
        v21 = v8;
        v20 = 0;
        goto LABEL_34;
      }
      v13 = *v12;
      *(_OWORD *)v32 = *(_OWORD *)v43;
      *(_QWORD *)&v32[16] = v13;
      LOBYTE(v33) = 1;
      WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager::remoteAudioSamplesAvailable((uint64_t)this, v7);
      return;
    case 0x5AC:
      v22 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v23)
        WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager::remoteCaptureFailed((uint64_t)this, v22);
      return;
    case 0x5AD:
      v14 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v15)
        WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager::remoteSourceStopped((uint64_t)this, v14);
      return;
    case 0x5AE:
      v16 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v17)
      {
        LOBYTE(v31) = 0;
        v39 = 0;
        goto LABEL_29;
      }
      v18 = v16;
      IPC::Decoder::decode<WebKit::ConsumerSharedCARingBufferHandle>(a3, (uint64_t)v40);
      if (!v42)
      {
        LOBYTE(v31) = 0;
        v39 = 0;
        goto LABEL_25;
      }
      IPC::Decoder::decode<WebCore::CAAudioStreamDescription>((uint64_t *)a3, (uint64_t)v43);
      if (!v48)
      {
        LOBYTE(v31) = 0;
        v39 = 0;
LABEL_23:
        if (v42)
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v40);
LABEL_25:
        if (v39)
        {
LABEL_26:
          WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager::setStorage((uint64_t)this, v31, (uint64_t)v32, (uint64_t)&v33);
          if (v39)
          {
            WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)&v33);
            WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v32);
          }
          return;
        }
LABEL_29:
        v24 = *(_QWORD *)a3;
        v25 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v26 = *((_QWORD *)a3 + 3);
        if (!v26)
          return;
        if (!v25)
          return;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, v24);
        if (!v39)
          return;
        goto LABEL_26;
      }
      if (v42)
      {
        v31 = v18;
        WTF::MachSendRight::MachSendRight();
        *(_OWORD *)&v32[8] = v41;
        v33 = MEMORY[0x1E0DD8FD8] + 16;
        v35 = v44;
        v36 = v45;
        v37 = v46;
        v38 = v47;
        v34 = *(_OWORD *)&v43[8];
        v39 = 1;
        if (v48)
          WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)v43);
        goto LABEL_23;
      }
      __break(1u);
LABEL_40:
      if (v21)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v20);
LABEL_35:
      v28 = *(_QWORD *)a3;
      v29 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v30 = *((_QWORD *)a3 + 3);
      if (v30)
      {
        if (v29)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, v28);
      }
      return;
    default:
      return;
  }
}

void WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager::~SpeechRecognitionRemoteRealtimeMediaSourceManager(WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager *this, void *a2)
{
  uint64_t v3;
  void *v4;

  v3 = *((_QWORD *)this + 4);
  if (v3)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v3, a2);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)this + 3);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v4);
}

{
  uint64_t v3;
  void *v4;
  void *v5;

  v3 = *((_QWORD *)this + 4);
  if (v3)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v3, a2);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)this + 3);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v4);
  WTF::fastFree(this, v5);
}

void `non-virtual thunk to'WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager::~SpeechRecognitionRemoteRealtimeMediaSourceManager(WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager *this, void *a2)
{
  uint64_t v3;
  void *v4;

  v3 = *((_QWORD *)this + 2);
  if (v3)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v3, a2);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)this + 1);
  *((_QWORD *)this - 2) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this - 1, v4);
}

{
  uint64_t v3;
  unsigned int **v4;
  void *v5;
  void *v6;

  v3 = *((_QWORD *)this + 2);
  if (v3)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v3, a2);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)this + 1);
  *((_QWORD *)this - 2) = &off_1E34B0558;
  v4 = (unsigned int **)((char *)this - 16);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v4 + 1, v5);
  WTF::fastFree((WTF *)v4, v6);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (unsigned __int8 **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (unsigned __int8 *)-1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
          WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v5, a2);
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void WebKit::SpeechRecognitionServer::didReceiveMessage(WebKit::SpeechRecognitionServer *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  unint64_t v5;
  char v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  BOOL v16;
  unsigned __int8 *v17;
  unsigned int v18;
  BOOL v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  char v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  char v48;
  __int128 v49;
  char v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  char v53;
  char v54;
  uint64_t v55;
  _BYTE v56[24];
  int v57;
  _BYTE v58[24];
  int v59;
  __int128 v60;
  char v61;
  _BYTE v62[32];
  uint64_t v63;
  char v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  switch(*((_WORD *)a3 + 25))
  {
    case 0x5AF:
      v5 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v6)
        WebKit::SpeechRecognitionServer::abort((uint64_t *)this, v5);
      return;
    case 0x5B0:
      v27 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v28)
        WebKit::SpeechRecognitionServer::invalidate((uint64_t)this, v27);
      return;
    case 0x5B1:
      v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v8)
      {
        LOBYTE(v51) = 0;
        v61 = 0;
        goto LABEL_44;
      }
      v9 = v7;
      IPC::Decoder::decode<WTF::String>((uint64_t *)a3, &v47);
      if (!v48)
      {
        LOBYTE(v51) = 0;
        v61 = 0;
        goto LABEL_32;
      }
      v11 = *((_QWORD *)a3 + 1);
      v12 = *(WTF::StringImpl **)a3;
      v13 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
      if (v11 <= v13)
      {
        v35 = 0;
        v36 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v37 = *((_QWORD *)a3 + 3);
        if (v37)
        {
          if (v11)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
            v36 = *(_QWORD *)a3;
            v35 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v35 = 0;
            v36 = 0;
          }
        }
        goto LABEL_49;
      }
      v14 = (unsigned __int8 *)v12 + v13;
      *((_QWORD *)a3 + 2) = v14 + 1;
      if (!v12)
      {
        v35 = v11;
        v36 = 0;
LABEL_49:
        v11 = 0;
        v12 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v38 = *((_QWORD *)a3 + 3);
        if (v38)
        {
          if (v35)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v38 + 16))(v38, v36, v35);
            v12 = *(WTF::StringImpl **)a3;
            v11 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v11 = 0;
            v12 = 0;
          }
        }
LABEL_50:
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v39 = *((_QWORD *)a3 + 3);
        if (v39)
          goto LABEL_67;
        goto LABEL_57;
      }
      v15 = *v14;
      if (v15 >= 2)
        goto LABEL_50;
      v16 = v15 != 0;
      if (v11 <= v14 + 1 - (unsigned __int8 *)v12)
      {
        v40 = 0;
        v41 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v42 = *((_QWORD *)a3 + 3);
        if (v42)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 16))(v42);
          v40 = 0;
          v12 = *(WTF::StringImpl **)a3;
          v45 = *((_QWORD *)a3 + 1);
          v46 = *((_QWORD *)a3 + 3);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v41 = 0;
          if (v46)
          {
            if (v45)
            {
              (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v46 + 16))(v46, v12);
              v41 = *(_QWORD *)a3;
              v40 = *((_QWORD *)a3 + 1);
            }
          }
        }
        goto LABEL_53;
      }
      v17 = v14 + 2;
      *((_QWORD *)a3 + 2) = v14 + 2;
      v18 = v14[1];
      if (v18 >= 2)
      {
        v40 = v11;
        v41 = (uint64_t)v12;
LABEL_53:
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v43 = *((_QWORD *)a3 + 3);
        if (v43 && v40)
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v43 + 16))(v43, v41, v40);
        goto LABEL_57;
      }
      v19 = v18 != 0;
      v20 = ((unint64_t)(v17 + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v12;
      if (v11 < v20 || v11 - v20 <= 7)
      {
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v44 = *((_QWORD *)a3 + 3);
        if (v44)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v44 + 16))(v44);
          v12 = *(WTF::StringImpl **)a3;
          v11 = *((_QWORD *)a3 + 1);
          v39 = *((_QWORD *)a3 + 3);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          if (v39)
          {
LABEL_67:
            if (v11)
              (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v39 + 16))(v39, v12);
          }
        }
LABEL_57:
        LOBYTE(v51) = 0;
        v61 = 0;
        goto LABEL_27;
      }
      v21 = (uint64_t *)((unint64_t)(v17 + 7) & 0xFFFFFFFFFFFFFFF8);
      v22 = *v21;
      *((_QWORD *)a3 + 2) = v21 + 1;
      IPC::Decoder::decode<WebCore::ClientOrigin>((uint64_t *)a3, v62);
      if (v64)
      {
        IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3, (uint64_t)&v49);
        v23 = v50;
        if (v50)
        {
          if (!v48 || !v64)
            __break(1u);
          v24 = v47;
          v47 = 0;
          v51 = v9;
          v52 = v24;
          v53 = v16;
          v54 = v19;
          v55 = v22;
          v56[0] = 0;
          v57 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v56, (uint64_t)v62);
          v58[0] = 0;
          v59 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v58, (uint64_t)&v63);
          v60 = v49;
          v23 = 1;
        }
        else
        {
          LOBYTE(v51) = 0;
        }
        v61 = v23;
      }
      else
      {
        LOBYTE(v51) = 0;
        v61 = 0;
      }
      std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v62);
LABEL_27:
      if (v48)
      {
        v29 = v47;
        v47 = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, v12);
          else
            *(_DWORD *)v29 -= 2;
        }
      }
LABEL_32:
      if (v61)
        goto LABEL_33;
LABEL_44:
      v32 = *(_QWORD *)a3;
      v33 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v34 = *((_QWORD *)a3 + 3);
      if (!v34)
        return;
      if (!v33)
        return;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v32);
      if (!v61)
        return;
LABEL_33:
      WebKit::SpeechRecognitionServer::start((uint64_t)this, v51, (uint64_t *)&v52, v53, v54, v55, (uint64_t)v56, v10, v60, *((uint64_t *)&v60 + 1));
      if (v61)
      {
        if (v59 != -1)
          ((void (*)(_BYTE *, _BYTE *))off_1E34B4078[v59])(v62, v58);
        v59 = -1;
        if (v57 != -1)
          ((void (*)(_BYTE *, _BYTE *))off_1E34B4078[v57])(v62, v56);
        v57 = -1;
        v31 = v52;
        v52 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, v30);
          else
            *(_DWORD *)v31 -= 2;
        }
      }
      return;
    case 0x5B2:
      v25 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v26)
        WebKit::SpeechRecognitionServer::stop((uint64_t)this, v25);
      return;
    default:
      return;
  }
}

void WebKit::SpeechRecognitionServer::~SpeechRecognitionServer(WebKit::SpeechRecognitionServer *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  *(_QWORD *)this = off_1E34B4098;
  *((_QWORD *)this + 2) = &unk_1E34B40E0;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
    std::default_delete<WebCore::SpeechRecognizer>::operator()[abi:sn180100]((uint64_t)this + 56, (uint64_t)v4);
  v5 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 5);
  if (v6)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v6, v4);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)this + 3);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v7);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  *(_QWORD *)this = off_1E34B4098;
  *((_QWORD *)this + 2) = &unk_1E34B40E0;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
    std::default_delete<WebCore::SpeechRecognizer>::operator()[abi:sn180100]((uint64_t)this + 56, (uint64_t)v4);
  v5 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 5);
  if (v6)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v6, v4);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)this + 3);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v7);
  WTF::fastFree(this, v8);
}

void `non-virtual thunk to'WebKit::SpeechRecognitionServer::~SpeechRecognitionServer(WebKit::SpeechRecognitionServer *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  *((_QWORD *)this - 2) = off_1E34B4098;
  *(_QWORD *)this = &unk_1E34B40E0;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
    std::default_delete<WebCore::SpeechRecognizer>::operator()[abi:sn180100]((uint64_t)this + 40, (uint64_t)v4);
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 3);
  if (v6)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v6, v4);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)this + 1);
  *((_QWORD *)this - 2) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this - 1, v7);
}

{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  *((_QWORD *)this - 2) = off_1E34B4098;
  v2 = (WebKit::SpeechRecognitionServer *)((char *)this - 16);
  *(_QWORD *)this = &unk_1E34B40E0;
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
    std::default_delete<WebCore::SpeechRecognizer>::operator()[abi:sn180100]((uint64_t)this + 40, (uint64_t)v5);
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 3);
  if (v7)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v7, v5);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)this + 1);
  *((_QWORD *)this - 2) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this - 1, v8);
  WTF::fastFree(v2, v9);
}

void std::default_delete<WebCore::SpeechRecognizer>::operator()[abi:sn180100](uint64_t a1, uint64_t a2)
{
  const void *v3;
  void *v4;
  uint64_t v5;
  unsigned int **v6;
  void *v7;

  if (a2)
  {
    v3 = *(const void **)(a2 + 40);
    *(_QWORD *)(a2 + 40) = 0;
    if (v3)
      CFRelease(v3);
    std::unique_ptr<WebCore::SpeechRecognitionCaptureSource>::reset[abi:sn180100]((WTF **)(a2 + 24), 0);
    v4 = *(void **)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    if (v4)
      std::default_delete<WebCore::SpeechRecognitionRequest>::operator()[abi:sn180100](a2 + 16, (uint64_t)v4);
    v5 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)a2, v4);
    WTF::fastFree((WTF *)v6, v7);
  }
}

WTF **std::unique_ptr<WebCore::SpeechRecognitionCaptureSource>::reset[abi:sn180100](WTF **result, WTF *a2)
{
  WTF *v2;
  uint64_t v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(_QWORD *)v2;
    *(_QWORD *)v2 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    return (WTF **)WTF::fastFree(v2, a2);
  }
  return result;
}

void std::default_delete<WebCore::SpeechRecognitionRequest>::operator()[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  unsigned int **v6;
  void *v7;
  char v8;
  char v9;

  if (a2)
  {
    v3 = *(unsigned int *)(a2 + 96);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_1E34B4078[v3])(&v8, a2 + 72);
    *(_DWORD *)(a2 + 96) = -1;
    v4 = *(unsigned int *)(a2 + 64);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, uint64_t))off_1E34B4078[v4])(&v9, a2 + 40);
    *(_DWORD *)(a2 + 64) = -1;
    v5 = *(WTF::StringImpl **)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)a2, (void *)a2);
    WTF::fastFree((WTF *)v6, v7);
  }
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  void **v4;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (void **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (void *)-1)
      {
        a2 = *v4;
        *v4 = 0;
        if (a2)
          std::default_delete<WebCore::SpeechRecognitionRequest>::operator()[abi:sn180100]((uint64_t)v4, (uint64_t)a2);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t *IPC::Decoder::decode<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaImplIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::String,WTF::String,WTF::String,unsigned long long>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaImplIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::String,WTF::String,WTF::String,unsigned long long>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[56])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaImplIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::String,WTF::String,WTF::String,unsigned long long>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *result;
  _BYTE v5[24];

  result = IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, v5);
  if (v5[16])
    return (uint64_t *)IPC::ArgumentCoder<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaImplIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::String,WTF::String,WTF::String,unsigned long long>,void>::decode<IPC::Decoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaImplIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)v5, a2);
  *a2 = 0;
  a2[56] = 0;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaImplIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::String,WTF::String,WTF::String,unsigned long long>,void>::decode<IPC::Decoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaImplIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  char v9;

  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v8);
  if (v9)
  {
    result = IPC::ArgumentCoder<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaImplIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::String,WTF::String,WTF::String,unsigned long long>,void>::decode<IPC::Decoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaImplIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>(a1, a2, (uint64_t *)&v8, (uint64_t)a3);
    if (v9)
    {
      result = v8;
      v8 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[56] = 0;
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaImplIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::String,WTF::String,WTF::String,unsigned long long>,void>::decode<IPC::Decoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaImplIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  WTF::StringImpl *v23;
  unsigned __int8 v24;
  WTF::StringImpl *v25;
  unsigned __int8 v26;
  WTF::StringImpl *v27;
  unsigned __int8 v28;

  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v23);
  if (!v24)
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 56) = 0;
    return result;
  }
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v25);
  if (v26)
  {
    result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v27);
    if (v28)
    {
      v10 = a1[1];
      v11 = *a1;
      v12 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
      if (v10 < v12 || v10 - v12 <= 7)
      {
LABEL_30:
        v20 = 0;
        v9 = 0;
        *a1 = 0;
        a1[1] = 0;
        v21 = a1[3];
        if (v21)
        {
          if (v10)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v21 + 16))(v21, v11, v10);
            v9 = (WTF::StringImpl *)*a1;
            v20 = a1[1];
          }
          else
          {
            v20 = 0;
            v9 = 0;
          }
        }
        goto LABEL_31;
      }
      v14 = (uint64_t *)(v11 + v12);
      a1[2] = (uint64_t)(v14 + 1);
      if (!v11)
      {
        v20 = v10;
        v9 = 0;
LABEL_31:
        *a1 = 0;
        a1[1] = 0;
        result = (WTF::StringImpl *)a1[3];
        if (result && v20)
          result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result + 16))(result, v9);
        *(_BYTE *)a4 = 0;
        v22 = v28;
        *(_BYTE *)(a4 + 56) = 0;
        if (v22)
        {
          result = v27;
          v27 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
            else
              *(_DWORD *)result -= 2;
          }
        }
        goto LABEL_18;
      }
      v11 = *(unsigned __int8 *)(a2 + 16);
      if (!*(_BYTE *)(a2 + 16)
        || (v11 = *((unsigned __int8 *)a3 + 8), !*((_BYTE *)a3 + 8))
        || (v11 = v24) == 0
        || (v11 = v26) == 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v15 = *v14;
      *(_OWORD *)a4 = *(_OWORD *)a2;
      v16 = *a3;
      *a3 = 0;
      v17 = v23;
      v23 = 0;
      *(_QWORD *)(a4 + 16) = v16;
      *(_QWORD *)(a4 + 24) = v17;
      v18 = v25;
      v25 = 0;
      v19 = v27;
      *(_QWORD *)(a4 + 32) = v18;
      *(_QWORD *)(a4 + 40) = v19;
      *(_QWORD *)(a4 + 48) = v15;
      *(_BYTE *)(a4 + 56) = 1;
    }
    else
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 56) = 0;
    }
LABEL_18:
    if (v26)
    {
      result = v25;
      v25 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
        else
          *(_DWORD *)result -= 2;
      }
    }
    goto LABEL_23;
  }
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 56) = 0;
LABEL_23:
  if (v24)
  {
    result = v23;
    v23 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaImplIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::String,WTF::String,WTF::String,unsigned long long>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (*(_BYTE *)(a1 + 56))
  {
    v3 = *(WTF::StringImpl **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

uint64_t WebKit::get_TCC_kTCCServiceCamera(WebKit *this)
{
  if (qword_1ECE72128 != -1)
    dispatch_once(&qword_1ECE72128, &__block_literal_global_4_0);
  return qword_1ECE72120;
}

uint64_t ___ZN6WebKit25get_TCC_kTCCServiceCameraEv_block_invoke(WebKit *a1)
{
  void *v1;
  uint64_t result;

  v1 = (void *)WebKit::TCCLibrary(a1);
  result = (uint64_t)dlsym(v1, "kTCCServiceCamera");
  if (result)
  {
    qword_1ECE72120 = *(_QWORD *)result;
  }
  else
  {
    result = 35;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::get_TCC_kTCCServicePhotos(WebKit *this)
{
  if (qword_1ECE72148 != -1)
    dispatch_once(&qword_1ECE72148, &__block_literal_global_8_2);
  return qword_1ECE72140;
}

uint64_t ___ZN6WebKit25get_TCC_kTCCServicePhotosEv_block_invoke(WebKit *a1)
{
  void *v1;
  uint64_t result;

  v1 = (void *)WebKit::TCCLibrary(a1);
  result = (uint64_t)dlsym(v1, "kTCCServicePhotos");
  if (result)
  {
    qword_1ECE72140 = *(_QWORD *)result;
  }
  else
  {
    result = 37;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::initTCCtcc_identity_create(uint64_t a1, uint64_t a2)
{
  if (WebKit::initTCCtcc_identity_create(tcc_identity_type_t,char const*)::once != -1)
    dispatch_once(&WebKit::initTCCtcc_identity_create(tcc_identity_type_t,char const*)::once, &__block_literal_global_18_1);
  return WebKit::softLinkTCCtcc_identity_create(a1, a2);
}

uint64_t ___ZN6WebKitL26initTCCtcc_identity_createE19tcc_identity_type_tPKc_block_invoke(WebKit *a1)
{
  void *v1;
  uint64_t result;

  v1 = (void *)WebKit::TCCLibrary(a1);
  result = (uint64_t)dlsym(v1, "tcc_identity_create");
  WebKit::softLinkTCCtcc_identity_create = (uint64_t (*)(_QWORD, _QWORD))result;
  if (!result)
  {
    result = 44;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::WebTextTrackRepresentationCocoa::WebTextTrackRepresentationCocoa(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int *v13;
  unsigned int **v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  v5 = (_QWORD *)WebCore::TextTrackRepresentationCocoa::TextTrackRepresentationCocoa();
  *v5 = off_1E34B41F0;
  v5[6] = 0;
  v5[7] = 0;
  v5[5] = 0;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 296), a3);
  v6 = *(unsigned int **)(a3 + 296);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 64) = v6;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 40) + 8) + 528);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 24);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 8);
        if (v11)
        {
          v12 = *(_QWORD **)(*(_QWORD *)(v11 + 48) + 16);
          if (((*(uint64_t (**)(_QWORD *))(*v12 + 1368))(v12) & 1) != 0
            || (v13 = *(unsigned int **)(v12[2] + 8)) == 0)
          {
            v15 = 0;
          }
          else
          {
            v14 = (unsigned int **)(v13 + 2);
            WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v13 + 2, (uint64_t)v13);
            v15 = *v14;
            if (*v14)
            {
              do
                v16 = __ldaxr(v15);
              while (__stlxr(v16 + 1, v15));
            }
          }
          v17 = *(unsigned int **)(a1 + 56);
          *(_QWORD *)(a1 + 56) = v15;
          if (v17)
          {
            do
            {
              v18 = __ldaxr(v17);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, v17));
            if (!v19)
            {
              atomic_store(1u, v17);
              WTF::fastFree((WTF *)v17, v13);
            }
          }
        }
      }
    }
  }
  return a1;
}

void sub_196FB8984(_Unwind_Exception *a1, void *a2)
{
  WebCore::TextTrackRepresentationCocoa *v2;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v4 = (unsigned int *)*((_QWORD *)v2 + 8);
  *((_QWORD *)v2 + 8) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)v2 + 7);
  *((_QWORD *)v2 + 7) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  WebCore::TextTrackRepresentationCocoa::~TextTrackRepresentationCocoa(v2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebTextTrackRepresentationCocoa::update(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFTypeRef v10;
  void *v11;
  CFTypeRef v12;
  const void *v13;
  CFTypeRef v14;
  uint64_t v15;
  uint64_t v16;
  CFTypeRef v17;
  WebCore::NativeImage *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  CFTypeRef cf;
  char v29;
  char v30;
  uint64_t v31;
  float v32;
  float v33;
  CFTypeRef v34;
  CFTypeRef v35;
  char v36;
  WebCore::ShareableBitmap *v37;
  WebCore::NativeImage *v38;

  v1 = *(_QWORD *)(this + 56);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = this;
      this = (uint64_t)WebKit::WebPage::videoPresentationManager((WebKit::WebPage *)(v2 - 16));
      v4 = (_DWORD *)this;
      v5 = *(_DWORD *)(this + 16);
      *(_DWORD *)(this + 16) = v5 + 1;
      v6 = *(_QWORD *)(v3 + 64);
      if (!v6
        || (v7 = *(_QWORD *)(v6 + 8)) == 0
        || (v8 = MEMORY[0x1E0DD6158],
            *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) != *(_QWORD *)(*MEMORY[0x1E0DD6158] + 24)))
      {
        if (v5)
        {
LABEL_7:
          v4[4] = v5;
          return this;
        }
        return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
      }
      (*(void (**)(WebCore::NativeImage **__return_ptr))(**(_QWORD **)(v3 + 16) + 16))(&v38);
      this = (uint64_t)v38;
      if (!v38)
        goto LABEL_46;
      v9 = WebCore::NativeImage::size(v38);
      v31 = WebCore::NativeImage::size(v38);
      WebCore::NativeImage::colorSpace(v38);
      v10 = v34;
      v34 = 0;
      v35 = v10;
      v36 = 1;
      MEMORY[0x19AEB3600](&v27, &v31, &v35, 0);
      WebCore::ShareableBitmap::create();
      if (v29)
      {
        v12 = cf;
        cf = 0;
        if (v12)
          CFRelease(v12);
      }
      if (v36)
      {
        v13 = v35;
        v35 = 0;
        if (v13)
          CFRelease(v13);
      }
      v14 = v34;
      v34 = 0;
      if (v14)
        CFRelease(v14);
      this = (uint64_t)v37;
      if (v37)
      {
        WebCore::ShareableBitmap::createGraphicsContext(v37);
        if (v34)
        {
          v27 = 0;
          *(float *)&cf = (float)(int)v9;
          *((float *)&cf + 1) = (float)SHIDWORD(v9);
          v31 = 0;
          v32 = (float)(int)v9;
          v33 = (float)SHIDWORD(v9);
          WebCore::GraphicsContext::drawNativeImage();
          WebCore::ShareableBitmap::createHandle();
          if (v30)
          {
            v15 = *(_QWORD *)(v3 + 64);
            if (v15)
              v16 = *(_QWORD *)(v15 + 8);
            else
              v16 = 0;
            if (*(_QWORD *)(*(_QWORD *)(v16 + 96) + 24) != *(_QWORD *)(*(_QWORD *)v8 + 24))
            {
              this = 96;
              __break(0xC471u);
              return this;
            }
            *(_DWORD *)(v16 + 24) += 2;
            v31 = v16;
            WebKit::VideoPresentationManager::updateTextTrackRepresentationForVideoElement((uint64_t)v4, v16, (uint64_t)&v27);
            WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v31);
          }
          std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&v27);
          v17 = v34;
          v34 = 0;
          if (v17)
            (*(void (**)(CFTypeRef))(*(_QWORD *)v17 + 8))(v17);
        }
        this = (uint64_t)v37;
        v37 = 0;
        if (this)
          this = WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(this, v11);
      }
      v18 = v38;
      v38 = 0;
      if (!v18)
      {
LABEL_46:
        v5 = v4[4] - 1;
        if (v4[4] != 1)
          goto LABEL_7;
        return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
      }
      v19 = *((_QWORD *)v18 + 1);
      if (__ldaxr((unsigned __int8 *)v19))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v19))
      {
        goto LABEL_34;
      }
      this = MEMORY[0x19AEABB3C](v19);
LABEL_34:
      v21 = *(_QWORD *)(v19 + 8);
      v22 = v21 - 1;
      *(_QWORD *)(v19 + 8) = v21 - 1;
      if (v21 == 1)
      {
        v26 = *(_QWORD *)(v19 + 16);
        v23 = *(_QWORD *)(v19 + 24);
        *(_QWORD *)(v19 + 24) = 0;
        v24 = v26 != 0;
      }
      else
      {
        v23 = 0;
        v24 = 1;
      }
      v25 = __ldxr((unsigned __int8 *)v19);
      if (v25 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v19))
        {
LABEL_41:
          if (!v22)
          {
            if (v23)
              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
            if (!v24)
              this = WTF::fastFree((WTF *)v19, v11);
          }
          goto LABEL_46;
        }
      }
      else
      {
        __clrex();
      }
      this = WTF::Lock::unlockSlow((WTF::Lock *)v19);
      goto LABEL_41;
    }
  }
  return this;
}

void sub_196FB8D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, CFTypeRef a20)
{
  _DWORD *v20;
  uint64_t v21;
  void *v23;
  CFTypeRef v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  int v33;
  uint64_t v34;

  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a18);
  std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&a9);
  v24 = a20;
  a20 = 0;
  if (v24)
    (*(void (**)(CFTypeRef))(*(_QWORD *)v24 + 8))(v24);
  v25 = *(_QWORD *)(v21 - 64);
  *(_QWORD *)(v21 - 64) = 0;
  if (v25)
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v25, v23);
  v26 = *(_QWORD *)(v21 - 56);
  *(_QWORD *)(v21 - 56) = 0;
  if (!v26)
  {
LABEL_24:
    if (v20[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
    else
      --v20[4];
    _Unwind_Resume(a1);
  }
  v27 = *(_QWORD *)(v26 + 8);
  if (__ldaxr((unsigned __int8 *)v27))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v27))
  {
LABEL_11:
    v29 = *(_QWORD *)(v27 + 8);
    v30 = v29 - 1;
    *(_QWORD *)(v27 + 8) = v29 - 1;
    if (v29 == 1)
    {
      v34 = *(_QWORD *)(v27 + 16);
      v31 = *(_QWORD *)(v27 + 24);
      *(_QWORD *)(v27 + 24) = 0;
      v32 = v34 != 0;
    }
    else
    {
      v31 = 0;
      v32 = 1;
    }
    v33 = __ldxr((unsigned __int8 *)v27);
    if (v33 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v27))
      {
LABEL_18:
        if (!v30)
        {
          if (v31)
            (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
          if (!v32)
            WTF::fastFree((WTF *)v27, v23);
        }
        goto LABEL_24;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v27);
    goto LABEL_18;
  }
  MEMORY[0x19AEABB3C](v27);
  goto LABEL_11;
}

_DWORD *WebKit::WebTextTrackRepresentationCocoa::setContentScale(WebKit::WebTextTrackRepresentationCocoa *this, float a2)
{
  _DWORD *result;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;

  result = (_DWORD *)WebCore::TextTrackRepresentationCocoa::setContentScale(this, a2);
  v5 = *((_QWORD *)this + 7);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      result = WebKit::WebPage::videoPresentationManager((WebKit::WebPage *)(v6 - 16));
      v7 = result;
      ++result[4];
      v8 = *((_QWORD *)this + 8);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 8);
        if (v9)
        {
          if (*(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) == *(_QWORD *)(*MEMORY[0x1E0DD6158] + 24))
          {
            *(_DWORD *)(v9 + 24) += 2;
            result = WebKit::VideoPresentationManager::setTextTrackRepresentationContentScaleForVideoElement((char *)result, (WebCore::HTMLVideoElement *)v9, a2);
            if (*(_DWORD *)(v9 + 24) == 2)
            {
              if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
                result = (_DWORD *)WebCore::Node::removedLastRef((WebCore::Node *)v9);
            }
            else
            {
              *(_DWORD *)(v9 + 24) -= 2;
            }
          }
        }
      }
      if (v7[4] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
      else
        --v7[4];
    }
  }
  return result;
}

void sub_196FB8F94(_Unwind_Exception *exception_object)
{
  _DWORD *v1;
  uint64_t v2;

  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  if (v1[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[4];
  _Unwind_Resume(exception_object);
}

_DWORD *WebKit::WebTextTrackRepresentationCocoa::setHidden(WebKit::WebTextTrackRepresentationCocoa *this, char a2)
{
  _DWORD *result;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;

  result = (_DWORD *)WebCore::TextTrackRepresentationCocoa::setHidden(this);
  v5 = *((_QWORD *)this + 7);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      result = WebKit::WebPage::videoPresentationManager((WebKit::WebPage *)(v6 - 16));
      v7 = result;
      ++result[4];
      v8 = *((_QWORD *)this + 8);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 8);
        if (v9)
        {
          if (*(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) == *(_QWORD *)(*MEMORY[0x1E0DD6158] + 24))
          {
            *(_DWORD *)(v9 + 24) += 2;
            result = WebKit::VideoPresentationManager::setTextTrackRepresentationIsHiddenForVideoElement((char *)result, (WebCore::HTMLVideoElement *)v9, a2);
            if (*(_DWORD *)(v9 + 24) == 2)
            {
              if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
                result = (_DWORD *)WebCore::Node::removedLastRef((WebCore::Node *)v9);
            }
            else
            {
              *(_DWORD *)(v9 + 24) -= 2;
            }
          }
        }
      }
      if (v7[4] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
      else
        --v7[4];
    }
  }
  return result;
}

void sub_196FB90D8(_Unwind_Exception *exception_object)
{
  _DWORD *v1;
  uint64_t v2;

  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  if (v1[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[4];
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebTextTrackRepresentationCocoa::setBounds(uint64_t this, const IntRect *a2)
{
  BOOL v2;
  BOOL v3;

  v2 = *(_DWORD *)(this + 40) == a2->m_location.m_x && *(_DWORD *)(this + 44) == a2->m_location.m_y;
  if (!v2
    || (*(_DWORD *)(this + 48) == a2->m_size.m_width ? (v3 = *(_DWORD *)(this + 52) == a2->m_size.m_height) : (v3 = 0),
        !v3))
  {
    *(IntRect *)(this + 40) = *a2;
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 16) + 24))(*(_QWORD *)(this + 16));
  }
  return this;
}

void WebKit::WebTextTrackRepresentationCocoa::~WebTextTrackRepresentationCocoa(WebKit::WebTextTrackRepresentationCocoa *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebKit::WebTextTrackRepresentationCocoa::~WebTextTrackRepresentationCocoa(this, a2);
  WTF::fastFree(v2, v3);
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v3 = (unsigned int *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  WebCore::TextTrackRepresentationCocoa::~TextTrackRepresentationCocoa(this);
}

uint64_t WebCore::TextTrackRepresentationCocoa::platformLayer(WebCore::TextTrackRepresentationCocoa *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t WebKit::WebTextTrackRepresentationCocoa::bounds(WebKit::WebTextTrackRepresentationCocoa *this)
{
  return *((_QWORD *)this + 5);
}

WebKit::NetworkBroadcastChannelRegistry *WebKit::NetworkBroadcastChannelRegistry::didReceiveMessage(WebKit::NetworkBroadcastChannelRegistry *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  WebKit::NetworkBroadcastChannelRegistry *v4;
  int v5;
  WTF::StringImpl *v6;
  _BYTE v7[64];
  WTF::StringImpl *v8;
  char v9;
  uint64_t v10;

  v4 = this;
  v10 = *MEMORY[0x1E0C80C00];
  v5 = *((unsigned __int16 *)a3 + 25);
  switch(v5)
  {
    case 209:
      return (WebKit::NetworkBroadcastChannelRegistry *)IPC::handleMessageAsync<Messages::NetworkBroadcastChannelRegistry::PostMessage,WebKit::NetworkBroadcastChannelRegistry,WebKit::NetworkBroadcastChannelRegistry,void ()(IPC::Connection &,WebCore::ClientOrigin const&,WTF::String const&,WebCore::MessageWithMessagePorts &&,WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, unsigned __int8 **, _BYTE *, uint64_t *, uint64_t *, _QWORD **))WebKit::NetworkBroadcastChannelRegistry::postMessage, 0);
    case 211:
      IPC::Decoder::decode<std::tuple<WebCore::ClientOrigin,WTF::String>>((uint64_t *)a3, v7);
      if (v9)
        WebKit::NetworkBroadcastChannelRegistry::unregisterChannel(v4, (IPC::Connection *)a2, (const WebCore::ClientOrigin *)v7, &v8);
      break;
    case 210:
      IPC::Decoder::decode<std::tuple<WebCore::ClientOrigin,WTF::String>>((uint64_t *)a3, v7);
      if (v9)
        WebKit::NetworkBroadcastChannelRegistry::registerChannel((WebKit::NetworkProcess **)v4, (IPC::Connection *)a2, (const WebCore::ClientOrigin *)v7, &v8);
      break;
    default:
      return this;
  }
  return (WebKit::NetworkBroadcastChannelRegistry *)std::__optional_destruct_base<std::tuple<WebCore::ClientOrigin,WTF::String>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v6);
}

uint64_t IPC::handleMessageAsync<Messages::NetworkBroadcastChannelRegistry::PostMessage,WebKit::NetworkBroadcastChannelRegistry,WebKit::NetworkBroadcastChannelRegistry,void ()(IPC::Connection &,WebCore::ClientOrigin const&,WTF::String const&,WebCore::MessageWithMessagePorts &&,WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, unsigned __int8 **, _BYTE *, uint64_t *, uint64_t *, _QWORD **), uint64_t a5)
{
  void *v10;
  unint64_t v11;
  _QWORD *v12;
  unsigned __int8 **v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v17;
  unsigned __int8 **v18;
  _QWORD *v19;
  _BYTE v20[64];
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<std::tuple<WebCore::ClientOrigin,WTF::String,WebCore::MessageWithMessagePorts>>(a2, v20);
  if (v23)
  {
    v11 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if ((_BYTE)v10)
    {
      v17 = v11;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v18, a1);
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v12 = off_1E34B4250;
      v12[1] = v17;
      v13 = v18;
      v18 = 0;
      v19 = v12;
      v12[2] = v13;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v18);
      if (!v23)
        __break(1u);
      v14 = (_QWORD *)(a3 + (a5 >> 1));
      if ((a5 & 1) != 0)
        a4 = *(void (**)(_QWORD *, unsigned __int8 **, _BYTE *, uint64_t *, uint64_t *, _QWORD **))(*v14 + a4);
      a4(v14, a1, v20, &v21, &v22, &v19);
      v15 = v19;
      v19 = 0;
      if (v15)
        (*(void (**)(_QWORD *))(*v15 + 8))(v15);
    }
  }
  return std::__optional_destruct_base<std::tuple<WebCore::ClientOrigin,WTF::String,WebCore::MessageWithMessagePorts>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v20, v10);
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::ClientOrigin,WTF::String,WebCore::MessageWithMessagePorts>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin,WTF::String,WebCore::MessageWithMessagePorts>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[96])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin,WTF::String,WebCore::MessageWithMessagePorts>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE v5[72];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebCore::ClientOrigin>(a1, v5);
  if (v5[64])
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin,WTF::String,WebCore::MessageWithMessagePorts>,void>::decode<IPC::Decoder,WebCore::ClientOrigin>(a1, (uint64_t)v5, a2);
  }
  else
  {
    *a2 = 0;
    a2[96] = 0;
  }
  return std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5);
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin,WTF::String,WebCore::MessageWithMessagePorts>,void>::decode<IPC::Decoder,WebCore::ClientOrigin>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  char v9;

  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v8);
  if (v9)
  {
    result = (WTF::StringImpl *)IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin,WTF::String,WebCore::MessageWithMessagePorts>,void>::decode<IPC::Decoder,WebCore::ClientOrigin,WTF::String>(a1, a2, (uint64_t)&v8, a3);
    if (v9)
    {
      result = v8;
      v8 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[96] = 0;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin,WTF::String,WebCore::MessageWithMessagePorts>,void>::decode<IPC::Decoder,WebCore::ClientOrigin,WTF::String>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  void *v7;
  _BYTE v9[32];

  IPC::Decoder::decode<WebCore::MessageWithMessagePorts>(a1, (uint64_t)v9);
  if (v9[24])
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin,WTF::String,WebCore::MessageWithMessagePorts>,void>::decode<IPC::Decoder,WebCore::ClientOrigin,WTF::String,WebCore::MessageWithMessagePorts>(a2, a3, (uint64_t)v9, (uint64_t)a4);
  }
  else
  {
    *a4 = 0;
    a4[96] = 0;
  }
  return std::__optional_destruct_base<WebCore::MessageWithMessagePorts,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v9, v7);
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin,WTF::String,WebCore::MessageWithMessagePorts>,void>::decode<IPC::Decoder,WebCore::ClientOrigin,WTF::String,WebCore::MessageWithMessagePorts>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t result;

  result = a4;
  if (*(_BYTE *)(a1 + 64) && *(_BYTE *)(a2 + 8) && *(_BYTE *)(a3 + 24))
  {
    result = _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJN7WebCore12ClientOriginEN3WTF6StringENS3_23MessageWithMessagePortsEEEC2B8sn180100IJLm0ELm1ELm2EEJS4_S6_S7_EJEJEJS4_S6_S7_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSB_IJDpT2_EEEDpOT3_(a4, a1, (uint64_t *)a2, (uint64_t *)a3);
    *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJN7WebCore12ClientOriginEN3WTF6StringENS3_23MessageWithMessagePortsEEEC2B8sn180100IJLm0ELm1ELm2EEJS4_S6_S7_EJEJEJS4_S6_S7_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSB_IJDpT2_EEEDpOT3_(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  *(_BYTE *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(a1 + 32, a2 + 32);
  v8 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 64) = v8;
  v9 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = v9;
  v10 = a4[1];
  a4[1] = 0;
  *(_QWORD *)(a1 + 80) = v10;
  LODWORD(v10) = *((_DWORD *)a4 + 4);
  *((_DWORD *)a4 + 4) = 0;
  *(_DWORD *)(a1 + 88) = v10;
  LODWORD(v10) = *((_DWORD *)a4 + 5);
  *((_DWORD *)a4 + 5) = 0;
  *(_DWORD *)(a1 + 92) = v10;
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages31NetworkBroadcastChannelRegistry11PostMessageEN6WebKit31NetworkBroadcastChannelRegistryES8_FvRNS2_10ConnectionERKN7WebCore12ClientOriginERKNS_6StringEONSB_23MessageWithMessagePortsEONS_17CompletionHandlerIFvvEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B4250;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages31NetworkBroadcastChannelRegistry11PostMessageEN6WebKit31NetworkBroadcastChannelRegistryES8_FvRNS2_10ConnectionERKN7WebCore12ClientOriginERKNS_6StringEONSB_23MessageWithMessagePortsEONS_17CompletionHandlerIFvvEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B4250;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages31NetworkBroadcastChannelRegistry11PostMessageEN6WebKit31NetworkBroadcastChannelRegistryES8_FvRNS2_10ConnectionERKN7WebCore12ClientOriginERKNS_6StringEONSB_23MessageWithMessagePortsEONS_17CompletionHandlerIFvvEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2855;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::ClientOrigin,WTF::String,WebCore::MessageWithMessagePorts>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::SerializedScriptValue *v11;
  char v12;
  char v13;

  if (*(_BYTE *)(a1 + 96))
  {
    v3 = *(WTF **)(a1 + 80);
    if (v3)
    {
      *(_QWORD *)(a1 + 80) = 0;
      *(_DWORD *)(a1 + 88) = 0;
      WTF::fastFree(v3, a2);
    }
    v4 = *(unsigned int **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        v11 = (WebCore::SerializedScriptValue *)v4;
        WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v11);
      }
    }
    v7 = *(WTF::StringImpl **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = *(unsigned int *)(a1 + 56);
    if ((_DWORD)v8 != -1)
      ((void (*)(char *, uint64_t))off_1E34B4230[v8])(&v12, a1 + 32);
    *(_DWORD *)(a1 + 56) = -1;
    v9 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, uint64_t))off_1E34B4230[v9])(&v13, a1);
    *(_DWORD *)(a1 + 24) = -1;
  }
  return a1;
}

BOOL WebKit::GPUConnectionToWebProcess::setCaptureAttributionString(WebKit::GPUConnectionToWebProcess *this)
{
  void (**v2)(void);
  uint64_t v3;
  _BOOL8 v4;
  const WebCore::SecurityOriginData *v5;
  uint64_t v6;
  const __CFString *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  CFTypeRef v11;
  const void *v12;
  void *v13;
  char v15;
  _BYTE v16[31];
  char v17;
  _BYTE v18[31];
  _OWORD arg[2];
  _OWORD v20[2];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = (void (**)(void))MEMORY[0x1E0DCE2D8];
  ((void (*)(void))*MEMORY[0x1E0DCE2D8])();
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    (*v2)();
    if ((objc_opt_respondsToSelector() & 1) == 0)
      return 1;
  }
  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 9) + 32) + 352);
  v4 = v3 != 0;
  if (v3)
  {
    xpc_connection_get_audit_token();
    v20[0] = *(_OWORD *)((char *)arg + 1);
    *(_OWORD *)((char *)v20 + 15) = arg[1];
    v6 = WebKit::applicationVisibleNameFromOrigin((WebKit *)(*((_QWORD *)this + 22) + 8), v5);
    if (!v6)
    {
      if (*(_QWORD *)(*((_QWORD *)this + 9) + 264))
        v6 = WTF::StringImpl::operator NSString *();
      else
        v6 = (uint64_t)&stru_1E351F1B8;
    }
    (*v2)();
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      v8 = (void *)((uint64_t (*)(void))*v2)();
      v17 = arg[0];
      *(_OWORD *)v18 = v20[0];
      *(_OWORD *)&v18[15] = *(_OWORD *)((char *)v20 + 15);
      objc_msgSend(v8, "setCurrentAttributionWebsiteString:auditToken:", v6, &v17);
    }
    else
    {
      v9 = (void *)MEMORY[0x1E0CB3940];
      WebCore::copyLocalizedString((WebCore *)CFSTR("%@ in %%@"), v7);
      if (*(_QWORD *)&arg[0])
      {
        CFAutorelease(*(CFTypeRef *)&arg[0]);
        v10 = *(_QWORD *)&arg[0];
      }
      else
      {
        v10 = 0;
      }
      v11 = (CFTypeRef)objc_msgSend(v9, "stringWithFormat:", v10, v6);
      v12 = v11;
      if (v11)
        v11 = CFRetain(v11);
      v13 = (void *)((uint64_t (*)(CFTypeRef))*v2)(v11);
      v15 = arg[0];
      *(_OWORD *)v16 = v20[0];
      *(_OWORD *)&v16[15] = *(_OWORD *)((char *)v20 + 15);
      objc_msgSend(v13, "setCurrentAttributionStringWithFormat:auditToken:", v12, &v15);
      if (v12)
        CFRelease(v12);
    }
  }
  return v4;
}

void sub_196FB9AEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WebKit::GPUConnectionToWebProcess::setTCCIdentity(WebKit::GPUConnectionToWebProcess *this)
{
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  WebCore::RealtimeMediaSourceCenter *v6;
  WebCore::RealtimeMediaSourceCenter *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  const char *v11;
  NSObject *v12;
  uint32_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _BYTE v17[31];
  void *v18;
  _BYTE buf[32];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 9) + 32) + 352))
  {
    v14 = qword_1ECE71B18;
    if (!os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_ERROR))
      return;
    *(_WORD *)buf = 0;
    v11 = "getAuditToken returned null";
    goto LABEL_13;
  }
  xpc_connection_get_audit_token();
  *(_OWORD *)v17 = *(_OWORD *)&buf[1];
  *(_OWORD *)&v17[15] = *(_OWORD *)&buf[16];
  v18 = 0;
  v16 = buf[0];
  v1 = (void *)objc_msgSend(MEMORY[0x1E0CA5890], "bundleProxyWithAuditToken:error:", &v16, &v18);
  v2 = v18;
  if (v18)
  {
    v3 = qword_1ECE71B18;
    if (!os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_ERROR))
      return;
    v15 = objc_msgSend((id)objc_msgSend(v2, "localizedDescription"), "UTF8String");
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v15;
    v11 = "-[LSBundleProxy bundleProxyWithAuditToken:error:] failed with error %s";
    v12 = v3;
    v13 = 12;
LABEL_15:
    _os_log_error_impl(&dword_196BCC000, v12, OS_LOG_TYPE_ERROR, v11, buf, v13);
    return;
  }
  v4 = v1;
  v5 = objc_msgSend((id)objc_msgSend(v1, "bundleIdentifier"), "UTF8String");
  if (v5)
  {
    v6 = (WebCore::RealtimeMediaSourceCenter *)WebKit::softLinkTCCtcc_identity_create(0, v5);
    v7 = v6;
    if (v6)
    {
      v8 = WebCore::RealtimeMediaSourceCenter::singleton(v6);
      v9 = *(void **)(v8 + 88);
      *(_QWORD *)(v8 + 88) = v7;
      if (v9)

      return;
    }
    v14 = qword_1ECE71B18;
    if (!os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_ERROR))
      return;
    *(_WORD *)buf = 0;
    v11 = "tcc_identity_create returned null";
LABEL_13:
    v12 = v14;
    v13 = 2;
    goto LABEL_15;
  }
  v10 = qword_1ECE71B18;
  if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v4 != 0;
    v11 = "Unable to get the bundle identifier, bundle is %d";
    v12 = v10;
    v13 = 8;
    goto LABEL_15;
  }
}

void sub_196FB9D20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *WebKit::GPUConnectionToWebProcess::setMediaEnvironment(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = a2;
  if (*(_QWORD *)a3 && *(_DWORD *)(*(_QWORD *)a3 + 4))
    return (uint64_t *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::String const&>((uint64_t *)(a1 + 352), &v8, a3, (uint64_t)&v7);
  result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 352), &v8);
  v5 = *(_QWORD *)(a1 + 352);
  if (v5)
  {
    v6 = (uint64_t *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v6 = 0;
  }
  if (v6 != result)
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove((uint64_t *)(a1 + 352), (WTF::StringImpl *)result);
  return result;
}

uint64_t WebKit::GPUProcess::ensureAVCaptureServerConnection(WebKit::GPUProcess *this)
{
  NSObject *v1;
  uint64_t (**v2)(void);
  uint64_t result;
  NSObject *v4;
  uint8_t v5[16];
  uint8_t buf[16];

  v1 = qword_1ECE71B18;
  if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_196BCC000, v1, OS_LOG_TYPE_DEFAULT, "GPUProcess::ensureAVCaptureServerConnection: Entering.", buf, 2u);
  }
  v2 = (uint64_t (**)(void))MEMORY[0x1E0DCDFD8];
  ((void (*)(void))*MEMORY[0x1E0DCDFD8])();
  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
  {
    v4 = qword_1ECE71B18;
    if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "GPUProcess::ensureAVCaptureServerConnection: Calling [AVCaptureDevice ensureServerConnection]", v5, 2u);
    }
    return objc_msgSend((id)(*v2)(), "ensureServerConnection");
  }
  return result;
}

void WebKit::GPUProcess::resolveBookmarkDataForCacheDirectory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v3;
  uint64_t v4;
  char v5;

  v3 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", a2, a3);
  v5 = 0;
  v4 = 0;
  objc_msgSend(MEMORY[0x1E0C99E98], "URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:", v3, 256, 0, &v5, &v4);
  if (v3)
    CFRelease(v3);
}

void sub_196FB9F18(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::read@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>, double a4@<D0>)
{
  unsigned __int8 *v8;
  uint64_t *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  uint64_t result;
  unsigned int v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v20;
  char *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  char *v27;
  unsigned __int8 v28;
  int v29;
  __int128 v30;
  int v31;
  __int16 v32;
  char v33;

  v8 = (unsigned __int8 *)(a1 + 8);
  if (__ldaxr((unsigned __int8 *)(a1 + 8)))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEABB3C](a1 + 8);
    goto LABEL_5;
  }
  if (__stxr(1u, v8))
    goto LABEL_4;
LABEL_5:
  v10 = (uint64_t *)(a1 + 16);
  v11 = (unsigned __int8 *)(a1 + 9);
  while (1)
  {
    v30 = *a2;
    v12 = *v10;
    if (*v10)
      break;
LABEL_25:
    *(double *)&v30 = a4;
    DWORD2(v30) = 2;
    result = WTF::Condition::waitUntilUnchecked<WTF::Lock>((uint64_t)v11, v8, (WTF::TimeWithDynamicClockType *)&v30);
    if ((result & 1) == 0)
    {
      *a3 = 0;
      goto LABEL_38;
    }
  }
  v13 = *(_DWORD *)(v12 - 8);
  v31 = -1640531527;
  v32 = 0;
  v33 = 0;
  WTF::addArgs<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v31, &v30);
  result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v31);
  v15 = result & v13;
  v16 = (char *)(v12 + 56 * (result & v13));
  v17 = *(_QWORD *)v16;
  v18 = *((_QWORD *)v16 + 1);
  if ((_QWORD)v30 == *(_QWORD *)v16 && *((_QWORD *)&v30 + 1) == v18)
  {
LABEL_18:
    v22 = (char *)*v10;
    if (!*v10)
      goto LABEL_23;
  }
  else
  {
    v20 = 1;
    while (v17 | v18)
    {
      v15 = (v15 + v20) & v13;
      v16 = (char *)(v12 + 56 * v15);
      v17 = *(_QWORD *)v16;
      v18 = *((_QWORD *)v16 + 1);
      ++v20;
      if ((_QWORD)v30 == *(_QWORD *)v16 && *((_QWORD *)&v30 + 1) == v18)
        goto LABEL_18;
    }
    v22 = (char *)*v10;
    if (!*v10)
      goto LABEL_25;
    v16 = &v22[56 * *((unsigned int *)v22 - 1)];
  }
  v22 += 56 * *((unsigned int *)v22 - 1);
LABEL_23:
  if (v22 == v16 || !v16[48])
    goto LABEL_25;
  v23 = *((_QWORD *)v16 + 5);
  if (v23)
  {
    v24 = (unsigned int *)(v23 + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 + 1, v24));
  }
  *a3 = v23;
  v26 = *((_QWORD *)v16 + 2) + 1;
  *((_QWORD *)v16 + 2) = v26;
  if (v16[32])
  {
    if (*((_QWORD *)v16 + 3) == v26)
    {
      v27 = (char *)*v10;
      if (!*v10 || (v27 += 56 * *((unsigned int *)v27 - 1), v27 != v16))
      {
        if (v27 != v16)
          result = (uint64_t)WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::remove(v10, (uint64_t)v16);
      }
    }
  }
  v28 = atomic_load(v11);
  if ((v28 & 1) != 0)
  {
    atomic_store(0, v11);
    result = WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v11, v16);
  }
LABEL_38:
  v29 = __ldxr(v8);
  if (v29 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v8);
  }
  if (__stlxr(0, v8))
    return WTF::Lock::unlockSlow((WTF::Lock *)v8);
  return result;
}

void sub_196FBA144(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  unsigned int **v2;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  v4 = *v2;
  *v2 = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = __ldxr(v1);
  if (v8 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_11:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_11;
}

uint64_t WebKit::RemoteVideoFrameObjectHeap::createPixelConformer@<X0>(WebKit::RemoteVideoFrameObjectHeap *this@<X0>, WebCore::PixelBufferConformerCV **a2@<X8>)
{
  const __CFDictionary *v3;
  WebCore::PixelBufferConformerCV *v4;
  uint64_t result;
  uint64_t CoreVideo_kCVPixelBufferPixelFormatTypeKey;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  CoreVideo_kCVPixelBufferPixelFormatTypeKey = WebCore::get_CoreVideo_kCVPixelBufferPixelFormatTypeKey(this);
  v7[0] = &unk_1E356FCD0;
  v3 = (const __CFDictionary *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v7, &CoreVideo_kCVPixelBufferPixelFormatTypeKey, 1);
  v4 = (WebCore::PixelBufferConformerCV *)WTF::fastMalloc((WTF *)8);
  result = WebCore::PixelBufferConformerCV::PixelBufferConformerCV(v4, v3);
  *a2 = v4;
  return result;
}

void sub_196FBA258(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

_QWORD *WebKit::RemoteMediaPlayerProxy::setVideoLayerSizeIfPossible(_QWORD *this, const WebCore::FloatSize *a2)
{
  uint64_t v2;
  _QWORD *v4;
  void *v5;
  float v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  float v12;
  float v13;
  _QWORD v14[4];

  v2 = this[18];
  if (v2)
  {
    v4 = this;
    v5 = *(void **)(v2 + 16);
    if (!v5)
      v5 = *(void **)(v2 + 8);
    this = (_QWORD *)objc_msgSend(v5, "layer");
    if (this)
    {
      v6 = *(float *)a2;
      if (*(float *)a2 > 0.0)
      {
        v7 = *((float *)a2 + 1);
        if (v7 > 0.0)
        {
          v8 = v4[108];
          v9 = v4[90];
          v14[0] = "RemoteMediaPlayerProxy";
          v14[1] = 23;
          v14[2] = "setVideoLayerSizeIfPossible";
          v14[3] = v9;
          v12 = v7;
          v13 = v6;
          if (*(_BYTE *)(v8 + 12))
            WTF::Logger::log<WTF::Logger::LogSiteIdentifier,float,char [2],float>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v14, &v13, "x", &v12);
          objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
          objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
          v10 = v4[18];
          v11 = *(void **)(v10 + 16);
          if (!v11)
            v11 = *(void **)(v10 + 8);
          objc_msgSend((id)objc_msgSend(v11, "layer"), "setFrame:", 0.0, 0.0, *(float *)a2, *((float *)a2 + 1));
          return (_QWORD *)objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
        }
      }
    }
  }
  return this;
}

IPC::Encoder *WebKit::RemoteMediaPlayerProxy::mediaPlayerFirstVideoFrameAvailable(WebKit::RemoteMediaPlayerProxy *this)
{
  uint64_t v2;
  IPC::Encoder *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11[4];

  v2 = *((_QWORD *)this + 108);
  v3 = (IPC::Encoder *)*((_QWORD *)this + 90);
  v11[0] = (IPC::Encoder *)"RemoteMediaPlayerProxy";
  v11[1] = (IPC::Encoder *)23;
  v11[2] = (IPC::Encoder *)"mediaPlayerFirstVideoFrameAvailable";
  v11[3] = v3;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v11);
  WebKit::RemoteMediaPlayerProxy::setVideoLayerSizeIfPossible(this, (WebKit::RemoteMediaPlayerProxy *)((char *)this + 712));
  v4 = *((_QWORD *)this + 14);
  v5 = *((_QWORD *)this + 11);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 147;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11[0] = (IPC::Encoder *)v6;
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)v11, 0, 0);
  result = v11[0];
  v11[0] = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerRenderingModeChanged(WebKit::RemoteMediaPlayerProxy *this)
{
  uint64_t v2;
  CGFloat v3;
  void *v4;
  id *v5;
  id **v6;
  CGFloat x;
  CGFloat v8;
  WTF *v9;
  void *v10;
  float v11;
  float v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  const FloatRect *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t result;
  WTF *v35;
  void *v36;
  uint64_t v37;
  _QWORD v38[2];
  CGRect v39;

  v2 = *((_QWORD *)this + 108);
  v3 = *((double *)this + 90);
  *(_QWORD *)&v39.origin.x = "RemoteMediaPlayerProxy";
  *(_QWORD *)&v39.origin.y = 23;
  *(_QWORD *)&v39.size.width = "mediaPlayerRenderingModeChanged";
  v39.size.height = v3;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v39);
  v4 = (void *)WebCore::MediaPlayer::platformLayer(*((WebCore::MediaPlayer **)this + 15));
  v6 = (id **)((char *)this + 144);
  v5 = (id *)*((_QWORD *)this + 18);
  if (!v4)
  {
    if (!v5)
      goto LABEL_20;
    std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100]((id **)this + 18, 0);
    v28 = *((_QWORD *)this + 14);
    LOBYTE(v38[0]) = 0;
    BYTE4(v38[0]) = 0;
    v37 = 0;
    *(_QWORD *)&v39.origin.x = v38;
    *(_QWORD *)&v39.origin.y = &v37;
    IPC::Connection::send<Messages::MediaPlayerPrivateRemote::LayerHostingContextIdChanged>(v28, (int **)&v39, *((_QWORD *)this + 11));
LABEL_16:
    v5 = *v6;
    if (!*v6)
      goto LABEL_20;
    goto LABEL_17;
  }
  if (!v5)
  {
    BYTE1(v37) = 1;
    LOBYTE(v37) = *((_BYTE *)this + 733);
    WebKit::LayerHostingContext::createForExternalHostingProcess((unsigned __int8 *)&v37, (uint64_t *)&v39);
    x = v39.origin.x;
    v39.origin.x = 0.0;
    std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100]((id **)this + 18, *(id **)&x);
    v8 = v39.origin.x;
    v39.origin.x = 0.0;
    if (v8 != 0.0)
    {
      WebKit::LayerHostingContext::~LayerHostingContext(*(id **)&v8);
      WTF::fastFree(v9, v10);
    }
    v11 = *((float *)this + 178);
    if (v11 <= 0.0 || (v12 = *((float *)this + 179), v12 <= 0.0))
    {
      objc_msgSend(v4, "frame");
      v39.origin.x = v13;
      v39.origin.y = v14;
      v39.size.width = v15;
      v39.size.height = v16;
      WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v38, &v39);
      WebCore::enclosingIntRect((WebCore *)v38, v17);
      v11 = (float)v18;
      v12 = (float)v19;
      *((float *)this + 178) = (float)v18;
      *((float *)this + 179) = (float)v19;
    }
    objc_msgSend(v4, "setFrame:", 0.0, 0.0, v11, v12);
    v20 = *((_QWORD *)this + 14);
    LODWORD(v38[0]) = WebKit::LayerHostingContext::contextID(*((id **)this + 18));
    BYTE4(v38[0]) = 1;
    *(_QWORD *)&v39.origin.x = v38;
    *(_QWORD *)&v39.origin.y = (char *)this + 712;
    IPC::Connection::send<Messages::MediaPlayerPrivateRemote::LayerHostingContextIdChanged>(v20, (int **)&v39, *((_QWORD *)this + 11));
    v21 = (uint64_t *)*((_QWORD *)this + 16);
    *(_QWORD *)&v39.origin.x = v21;
    v22 = *((unsigned int *)this + 35);
    LODWORD(v39.origin.y) = *((_DWORD *)this + 34);
    HIDWORD(v39.origin.y) = v22;
    v38[0] = 0;
    *((_QWORD *)this + 16) = 0;
    v38[1] = 0;
    *((_QWORD *)this + 17) = 0;
    WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v38, v23);
    if ((_DWORD)v22)
    {
      v25 = 8 * v22;
      do
      {
        v26 = WebKit::LayerHostingContext::contextID(*v6);
        v27 = *v21;
        *v21 = 0;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, v26);
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        ++v21;
        v25 -= 8;
      }
      while (v25);
    }
    WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v24);
    goto LABEL_16;
  }
LABEL_17:
  v29 = v5[2];
  if (!v29)
    v29 = v5[1];
  objc_msgSend(v29, "setLayer:", v4);
LABEL_20:
  v30 = *((_QWORD *)this + 14);
  v31 = *((_QWORD *)this + 11);
  v32 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v32 = 170;
  *(_QWORD *)(v32 + 8) = v31;
  *(_QWORD *)(v32 + 528) = v32 + 16;
  *(_QWORD *)(v32 + 536) = v32 + 16;
  *(_OWORD *)(v32 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v32 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v32);
  *(_QWORD *)&v39.origin.x = v32;
  IPC::Connection::sendMessageImpl(v30, (uint64_t *)&v39, 0, 0);
  result = *(_QWORD *)&v39.origin.x;
  v39.origin.x = 0.0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v33);
    return WTF::fastFree(v35, v36);
  }
  return result;
}

void sub_196FBA708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  void *v7;
  va_list va;

  va_start(va, a5);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, v7);
  _Unwind_Resume(a1);
}

id *WebKit::RemoteMediaPlayerProxy::requestHostingContextID(uint64_t a1, id *a2)
{
  id *result;
  uint64_t v5;
  id v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  id v10;

  result = *(id **)(a1 + 144);
  if (result)
  {
    v5 = WebKit::LayerHostingContext::contextID(result);
    v6 = *a2;
    *a2 = 0;
    (*(void (**)(id, uint64_t))(*(_QWORD *)v6 + 16))(v6, v5);
    return (id *)(*(uint64_t (**)(id))(*(_QWORD *)v6 + 8))(v6);
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 140);
    if ((_DWORD)v7 == *(_DWORD *)(a1 + 136))
    {
      result = (id *)WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 128, v7 + 1, (unint64_t)a2);
      v7 = *(unsigned int *)(a1 + 140);
      v8 = v7 + 1;
      v9 = *(_QWORD *)(a1 + 128);
      v10 = *result;
      *result = 0;
    }
    else
    {
      v8 = v7 + 1;
      v9 = *(_QWORD *)(a1 + 128);
      v10 = *a2;
      *a2 = 0;
    }
    *(_QWORD *)(v9 + 8 * v7) = v10;
    *(_DWORD *)(a1 + 140) = v8;
  }
  return result;
}

void sub_196FBA7E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::RemoteMediaPlayerProxy::setVideoLayerSizeFenced(_QWORD *a1, const WebCore::FloatSize *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  const void *v9;
  int v10;
  int v11;
  _QWORD v12[4];

  v4 = *(_DWORD *)a2;
  v10 = *((_DWORD *)a2 + 1);
  v11 = v4;
  v5 = a1[108];
  v6 = a1[90];
  v12[0] = "RemoteMediaPlayerProxy";
  v12[1] = 23;
  v12[2] = "setVideoLayerSizeFenced";
  v12[3] = v6;
  if (*(_BYTE *)(v5 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,float,char [2],float>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v12, (float *)&v11, "x", (float *)&v10);
  if (a1[18])
  {
    WebKit::LayerHostingContext::createHostingUpdateCoordinator(v12);
    v7 = (void *)v12[0];
    v8 = a1[18];
    v9 = *(const void **)(v8 + 16);
    if (v9)
      CFRetain(*(CFTypeRef *)(v8 + 16));
    objc_msgSend(v7, "addLayerHierarchy:", v9);
    if (v9)
      CFRelease(v9);
  }
  else
  {
    v7 = 0;
  }
  a1[89] = *(_QWORD *)a2;
  WebKit::RemoteMediaPlayerProxy::setVideoLayerSizeIfPossible(a1, a2);
  WebCore::MediaPlayer::setVideoLayerSizeFenced();
  objc_msgSend(v7, "commit");
  if (v7)
    CFRelease(v7);
}

void sub_196FBA914(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::RemoteMediaPlayerProxy::mediaPlayerOnNewVideoFrameMetadata(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  IPC::Encoder *result;
  WTF *v15;
  void *v16;
  IPC::Encoder *v17;
  char v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21[7];

  v4 = a1[105];
  LOBYTE(v17) = 0;
  v18 = 0;
  WebCore::VideoFrameCV::create();
  v5 = v19;
  v19 = 0;
  v20 = (unsigned int *)v5;
  WebKit::RemoteVideoFrameObjectHeap::add(v4, (uint64_t *)&v20, (uint64_t)v21);
  v6 = v20;
  v20 = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  v19 = 0;
  v10 = a1[14];
  v11 = a1[11];
  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 158;
  *(_QWORD *)(v12 + 8) = v11;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v17 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebCore::VideoFrameMetadata,void>::encode((IPC::Encoder *)v12, a2);
  IPC::ArgumentCoder<WebKit::RemoteVideoFrameProxyProperties,void>::encode((IPC::Encoder *)v12, v21);
  IPC::Connection::sendMessageImpl(v10, (uint64_t *)&v17, 0, 0);
  result = v17;
  v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  return result;
}

void sub_196FBAAC4(_Unwind_Exception *a1, void *a2)
{
  IPC::Encoder *v2;
  WTF *v4;
  void *v5;

  IPC::Encoder::~Encoder(v2, a2);
  WTF::fastFree(v4, v5);
  _Unwind_Resume(a1);
}

void WebKit::RemoteMediaPlayerProxy::nativeImageForCurrentTime(uint64_t a1, uint64_t *a2)
{
  WebCore::MediaPlayer *v3;
  CFTypeRef *v4;
  WebCore::IOSurfacePool *v5;
  CGImage *v6;
  CFTypeRef v7;
  WTF::MachSendRight *v8;
  const void *v9;
  const void *v10;
  void *v11;
  CFTypeRef v12;
  const void *v13;
  const void *v14;
  CFTypeRef v15;
  WebCore::DestinationColorSpace *v16;
  WTF *v17;
  void *v18;
  WebCore::NativeImage *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  CFTypeRef cf;
  char v29;
  CFTypeRef v30;
  _BYTE v31[4];
  char v32;
  const void *v33;
  CFTypeRef v34;
  WebCore::DestinationColorSpace *v35;
  CFTypeRef v36;
  WebCore::NativeImage *v37;

  v3 = *(WebCore::MediaPlayer **)(a1 + 120);
  if (v3)
  {
    WebCore::MediaPlayer::nativeImageForCurrentTime(v3);
    if (v37)
    {
      v4 = (CFTypeRef *)WebCore::NativeImage::platformImage(v37);
      v5 = (WebCore::IOSurfacePool *)*v4;
      if (*v4)
      {
        CFRetain(*v4);
        WebCore::IOSurface::createFromImage(0, v5, v6);
        if (v35)
        {
          WebCore::IOSurface::createSendRight(v35);
          WTF::MachSendRight::MachSendRight();
          v32 = 1;
          WebCore::NativeImage::colorSpace(v37);
          WTF::CompletionHandler<void ()(std::optional<WTF::MachSendRight> &&,WebCore::DestinationColorSpace)>::operator()(a2, (uint64_t)v31, &cf);
          v7 = cf;
          cf = 0;
          if (v7)
            CFRelease(v7);
          if (v32)
            WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v31);
          v8 = (WTF::MachSendRight *)&v29;
        }
        else
        {
          v31[0] = 0;
          v32 = 0;
          v14 = *(const void **)WebCore::DestinationColorSpace::SRGB(0);
          v30 = v14;
          if (v14)
            CFRetain(v14);
          WTF::CompletionHandler<void ()(std::optional<WTF::MachSendRight> &&,WebCore::DestinationColorSpace)>::operator()(a2, (uint64_t)v31, &v30);
          v15 = v30;
          v30 = 0;
          if (v15)
            CFRelease(v15);
          if (!v32)
            goto LABEL_33;
          v8 = (WTF::MachSendRight *)v31;
        }
        WTF::MachSendRight::~MachSendRight(v8);
LABEL_33:
        v16 = v35;
        v35 = 0;
        if (v16)
        {
          WebCore::IOSurface::~IOSurface(v16);
          WTF::fastFree(v17, v18);
        }
        CFRelease(v5);
        goto LABEL_36;
      }
      LOBYTE(v35) = 0;
      BYTE4(v35) = 0;
      v13 = *(const void **)WebCore::DestinationColorSpace::SRGB((WebCore::DestinationColorSpace *)v4);
      v33 = v13;
      if (v13)
        CFRetain(v13);
      WTF::CompletionHandler<void ()(std::optional<WTF::MachSendRight> &&,WebCore::DestinationColorSpace)>::operator()(a2, (uint64_t)&v35, &v33);
      v12 = v33;
      v33 = 0;
      if (!v12)
      {
LABEL_20:
        if (BYTE4(v35))
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v35);
LABEL_36:
        v19 = v37;
        v37 = 0;
        if (!v19)
          return;
        v20 = *((_QWORD *)v19 + 1);
        if (__ldaxr((unsigned __int8 *)v20))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v20))
        {
          goto LABEL_41;
        }
        MEMORY[0x19AEABB3C](v20);
LABEL_41:
        v22 = *(_QWORD *)(v20 + 8);
        v23 = v22 - 1;
        *(_QWORD *)(v20 + 8) = v22 - 1;
        if (v22 == 1)
        {
          v27 = *(_QWORD *)(v20 + 16);
          v24 = *(_QWORD *)(v20 + 24);
          *(_QWORD *)(v20 + 24) = 0;
          v25 = v27 != 0;
        }
        else
        {
          v24 = 0;
          v25 = 1;
        }
        v26 = __ldxr((unsigned __int8 *)v20);
        if (v26 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v20))
          {
            if (v23)
              return;
LABEL_49:
            if (v24)
              (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
            if (!v25)
              WTF::fastFree((WTF *)v20, v11);
            return;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v20);
        if (v23)
          return;
        goto LABEL_49;
      }
    }
    else
    {
      LOBYTE(v35) = 0;
      BYTE4(v35) = 0;
      v10 = *(const void **)WebCore::DestinationColorSpace::SRGB(0);
      v34 = v10;
      if (v10)
        CFRetain(v10);
      WTF::CompletionHandler<void ()(std::optional<WTF::MachSendRight> &&,WebCore::DestinationColorSpace)>::operator()(a2, (uint64_t)&v35, &v34);
      v12 = v34;
      v34 = 0;
      if (!v12)
        goto LABEL_20;
    }
    CFRelease(v12);
    goto LABEL_20;
  }
  LOBYTE(v37) = 0;
  BYTE4(v37) = 0;
  v9 = *(const void **)WebCore::DestinationColorSpace::SRGB(0);
  v36 = v9;
  if (v9)
    CFRetain(v9);
  WTF::CompletionHandler<void ()(std::optional<WTF::MachSendRight> &&,WebCore::DestinationColorSpace)>::operator()(a2, (uint64_t)&v37, &v36);
  if (v36)
    CFRelease(v36);
  if (BYTE4(v37))
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v37);
}

void sub_196FBADA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, int a11, char a12, CFTypeRef cf, char a14, __int16 a15, char a16, char a17, CFTypeRef a18, uint64_t a19, WebCore::IOSurface *a20,CFTypeRef a21)
{
  const void *v21;
  uint64_t v22;
  WebCore::IOSurface *v24;
  WTF *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  int v35;
  uint64_t v36;

  if (cf)
    CFRelease(cf);
  if (a16)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a14);
  v24 = a20;
  a20 = 0;
  if (v24)
  {
    WebCore::IOSurface::~IOSurface(v24);
    WTF::fastFree(v25, v26);
  }
  CFRelease(v21);
  v28 = *(_QWORD *)(v22 - 56);
  *(_QWORD *)(v22 - 56) = 0;
  if (!v28)
LABEL_26:
    _Unwind_Resume(a1);
  v29 = *(_QWORD *)(v28 + 8);
  if (__ldaxr((unsigned __int8 *)v29))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v29))
  {
LABEL_13:
    v31 = *(_QWORD *)(v29 + 8);
    v32 = v31 - 1;
    *(_QWORD *)(v29 + 8) = v31 - 1;
    if (v31 == 1)
    {
      v36 = *(_QWORD *)(v29 + 16);
      v33 = *(_QWORD *)(v29 + 24);
      *(_QWORD *)(v29 + 24) = 0;
      v34 = v36 != 0;
    }
    else
    {
      v33 = 0;
      v34 = 1;
    }
    v35 = __ldxr((unsigned __int8 *)v29);
    if (v35 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v29))
      {
LABEL_20:
        if (!v32)
        {
          if (v33)
            (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
          if (!v34)
            WTF::fastFree((WTF *)v29, v27);
        }
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v29);
    goto LABEL_20;
  }
  MEMORY[0x19AEABB3C](v29);
  goto LABEL_13;
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WTF::MachSendRight> &&,WebCore::DestinationColorSpace)>::operator()(uint64_t *a1, uint64_t a2, const void **a3)
{
  uint64_t v3;
  const void *v4;
  CFTypeRef v5;
  CFTypeRef cf;

  v3 = *a1;
  *a1 = 0;
  v4 = *a3;
  *a3 = 0;
  cf = v4;
  (*(void (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)v3 + 16))(v3, a2, &cf);
  v5 = cf;
  cf = 0;
  if (v5)
    CFRelease(v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

void sub_196FBAFC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  uint64_t v10;

  if (cf)
    CFRelease(cf);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  _Unwind_Resume(a1);
}

void WebKit::RemoteMediaPlayerProxy::colorSpace(uint64_t a1, uint64_t *a2)
{
  WebCore::MediaPlayer *v3;
  CFTypeRef v4;
  const void *v5;
  CFTypeRef cf;
  const void *v7;

  v3 = *(WebCore::MediaPlayer **)(a1 + 120);
  if (v3)
  {
    WebCore::MediaPlayer::colorSpace(v3);
    WTF::CompletionHandler<void ()(WebCore::DestinationColorSpace)>::operator()(a2, &cf);
    v4 = cf;
    cf = 0;
    if (!v4)
      return;
    goto LABEL_3;
  }
  v5 = *(const void **)WebCore::DestinationColorSpace::SRGB(0);
  v7 = v5;
  if (v5)
    CFRetain(v5);
  WTF::CompletionHandler<void ()(WebCore::DestinationColorSpace)>::operator()(a2, &v7);
  v4 = v7;
  v7 = 0;
  if (v4)
LABEL_3:
    CFRelease(v4);
}

void sub_196FBB074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(WebCore::DestinationColorSpace)>::operator()(uint64_t *a1, const void **a2)
{
  uint64_t v2;
  const void *v3;
  CFTypeRef v4;
  uint64_t result;
  CFTypeRef cf;
  uint64_t v7;

  v2 = *a1;
  *a1 = 0;
  v3 = *a2;
  *a2 = 0;
  cf = v3;
  v7 = v2;
  WTF::Function<void ()(WebCore::DestinationColorSpace)>::operator()(&v7, &cf);
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
  result = v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_196FBB10C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10)
{
  if (cf)
    CFRelease(cf);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

id *std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100](id **a1, id *a2)
{
  id *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::LayerHostingContext::~LayerHostingContext(result);
    return (id *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t JSC::Config::configureForTesting(JSC::Config *this)
{
  WTF::Config *v1;
  JSC::Config *v2;

  v1 = (WTF::Config *)WTF::setPermissionsOfConfigPage(this);
  v2 = (JSC::Config *)WTF::Config::disableFreezingForTesting(v1);
  return JSC::Config::enableRestrictedOptions(v2);
}

void WebKit::GPUServiceInitializerDelegate::~GPUServiceInitializerDelegate(WebKit::GPUServiceInitializerDelegate *this)
{
  void *v1;

  *(_QWORD *)this = &off_1E34B8870;
  v1 = (void *)*((_QWORD *)this + 1);
  if (v1)

}

{
  void *v1;

  *(_QWORD *)this = &off_1E34B8870;
  v1 = (void *)*((_QWORD *)this + 1);
  if (v1)

  JUMPOUT(0x19AEB936CLL);
}

WTF *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  WTF *result;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  int v10;

  v3 = *a1;
  if (!*a1)
    return 0;
  v6 = *(_DWORD *)(v3 - 8);
  v7 = *((_DWORD *)*a2 + 4);
  if (v7 >= 0x100)
    v8 = v7 >> 8;
  else
    v8 = WTF::StringImpl::hashSlowCase(*a2);
  for (i = 0; ; v8 = i + v10)
  {
    v10 = v8 & v6;
    result = *(WTF **)(v3 + 16 * (v8 & v6));
    if (!result)
      break;
    if (result != (WTF *)-1 && (WTF::equal(result, *a2, a3) & 1) != 0)
      return (WTF *)1;
    ++i;
  }
  return result;
}

_DWORD **WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>@<X0>(_DWORD **result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  _DWORD *v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v3 = *result;
  if (*result)
  {
    v4 = *(v3 - 2);
    v5 = *a2 + ~(*a2 << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = v4 & (((v7 + ~(v7 << 27)) >> 31) ^ ((_DWORD)v7 + ~((_DWORD)v7 << 27)));
    v9 = *(_QWORD *)&v3[4 * v8];
    if (v9 == *a2)
    {
LABEL_6:
      v3 = *(_DWORD **)&v3[4 * v8 + 2];
      if (v3)
        *v3 += 2;
    }
    else
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(_QWORD *)&v3[4 * v8];
        ++v10;
        if (v9 == *a2)
          goto LABEL_6;
      }
      v3 = 0;
    }
  }
  *a3 = v3;
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = (uint64_t *)WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::String>>::customDeleteBucket(a2, a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

WTF::StringImpl *WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::String>>::customDeleteBucket(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)a1[1];
  *a1 = -1;
  a1[1] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = (uint64_t *)(v17 + 16 * v24);
          v27 = (WTF::StringImpl *)v26[1];
          v26[1] = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v10);
            else
              *(_DWORD *)v27 -= 2;
          }
          *v26 = *v13;
          v28 = v6 + 16 * v11;
          v29 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          v26[1] = v29;
          v30 = *(WTF::StringImpl **)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, v10);
            else
              *(_DWORD *)v30 -= 2;
          }
          if (v13 == a3)
            v12 = v26;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(WTF::StringImpl **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, v10);
            else
              *(_DWORD *)v16 -= 2;
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

WTF::StringImpl **WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::String const&>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  int v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  WTF::StringImpl **v16;
  uint64_t v17;
  WTF::StringImpl **v18;
  int v19;
  WTF::StringImpl **result;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = (WTF::StringImpl *)*a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (WTF::StringImpl **)(v8 + 16 * v15);
  v17 = (uint64_t)*v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if ((WTF::StringImpl *)v17 == v11)
      {
        if ((v9 & 1) != 0)
          v23 = 0;
        else
          v23 = *(unsigned int *)(v8 - 4);
        *(_QWORD *)a4 = v16;
        *(_QWORD *)(a4 + 8) = v8 + 16 * v23;
        *(_BYTE *)(a4 + 16) = 0;
        return WTF::String::operator=(v16 + 1, a3);
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (WTF::StringImpl **)(v8 + 16 * v15);
      v17 = (uint64_t)*v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v11 = (WTF::StringImpl *)*a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  result = WTF::String::operator=(v16 + 1, a3);
  v21 = *a1;
  if (*a1)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v24 = *a1;
  if (*a1)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
    {
LABEL_22:
      result = (WTF::StringImpl **)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1, (uint64_t *)v16);
      v16 = result;
      v24 = *a1;
      if (*a1)
        v27 = *(unsigned int *)(v24 - 4);
      else
        v27 = 0;
    }
  }
  else if (3 * v27 <= 4 * v26)
  {
    goto LABEL_22;
  }
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v24 + 16 * v27;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

_DWORD *WTF::addArgs<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(_DWORD *result, _QWORD *a2)
{
  unint64_t v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  v2 = a2[1];
  v3 = *result + (unsigned __int16)*a2;
  v4 = (*a2 >> 5) & 0x7FFF800 ^ (v3 << 16) ^ v3;
  v5 = v4 + (unsigned __int16)WORD2(*a2);
  v6 = (*a2 >> 37) & 0x7FFF800 ^ ((v5 + (v4 >> 11)) << 16) ^ (v5 + (v4 >> 11));
  v7 = (v2 >> 5) & 0x7FFF800 ^ ((v6 + (unsigned __int16)v2 + (v6 >> 11)) << 16) ^ (v6
                                                                                               + (unsigned __int16)v2
                                                                                               + (v6 >> 11));
  v8 = v7 + WORD2(v2) + (v7 >> 11);
  LODWORD(v2) = (v2 >> 37) & 0x7FFF800 ^ (v8 << 16);
  *result = (v2 ^ v8) + ((v2 ^ v8) >> 11);
  return result;
}

_OWORD *WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::remove(uint64_t *a1, uint64_t a2)
{
  _OWORD *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = (_OWORD *)WTF::KeyValuePairHashTraits<WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>>::customDeleteBucket(a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

uint64_t WTF::KeyValuePairHashTraits<WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>>::customDeleteBucket(uint64_t result)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  *(_OWORD *)result = xmmword_1978CEF10;
  if (*(_BYTE *)(result + 48))
  {
    v1 = result;
    result = *(_QWORD *)(result + 40);
    *(_QWORD *)(v1 + 40) = 0;
    if (result)
    {
      v2 = (unsigned int *)(result + 8);
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        atomic_store(1u, (unsigned int *)(result + 8));
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

_OWORD *WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(uint64_t *a1, unsigned int a2, _OWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  _OWORD *v21;
  _OWORD *v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  __int128 v28;
  _BYTE *v29;
  int v30;
  uint64_t v31;
  unsigned int **v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(56 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 56 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (_OWORD *)(v6 + 56 * v13);
      if (*(_QWORD *)v15 != -1)
      {
        if (*v15 == 0)
        {
          if (*(_BYTE *)(v6 + 56 * v13 + 48))
          {
            v16 = v6 + 56 * v13;
            v17 = *(unsigned int **)(v16 + 40);
            *(_QWORD *)(v16 + 40) = 0;
            if (v17)
            {
              v18 = v17 + 2;
              do
              {
                v19 = __ldaxr(v18);
                v20 = v19 - 1;
              }
              while (__stlxr(v20, v18));
              if (!v20)
              {
                atomic_store(1u, v17 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
              }
            }
          }
        }
        else
        {
          v21 = WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::lookupForReinsert(a1, (_QWORD *)(v6 + 56 * v13));
          v22 = v21;
          if (*((_BYTE *)v21 + 48))
          {
            v23 = (unsigned int *)*((_QWORD *)v21 + 5);
            *((_QWORD *)v22 + 5) = 0;
            if (v23)
            {
              v24 = v23 + 2;
              do
              {
                v25 = __ldaxr(v24);
                v26 = v25 - 1;
              }
              while (__stlxr(v26, v24));
              if (!v26)
              {
                atomic_store(1u, v23 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 8))(v23);
              }
            }
          }
          *v22 = *v15;
          v27 = v6 + 56 * v13;
          v28 = *(_OWORD *)(v27 + 16);
          *((_BYTE *)v22 + 32) = *(_BYTE *)(v27 + 32);
          v22[1] = v28;
          *((_BYTE *)v22 + 40) = 0;
          *((_BYTE *)v22 + 48) = 0;
          v30 = *(unsigned __int8 *)(v27 + 48);
          v29 = (_BYTE *)(v27 + 48);
          if (v30)
          {
            v31 = v6 + 56 * v13;
            v33 = *(_QWORD *)(v31 + 40);
            v32 = (unsigned int **)(v31 + 40);
            *v32 = 0;
            *((_QWORD *)v22 + 5) = v33;
            *((_BYTE *)v22 + 48) = 1;
            if (*v29)
            {
              v34 = *v32;
              *v32 = 0;
              if (v34)
              {
                v35 = v34 + 2;
                do
                {
                  v36 = __ldaxr(v35);
                  v37 = v36 - 1;
                }
                while (__stlxr(v37, v35));
                if (!v37)
                {
                  atomic_store(1u, v34 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 8))(v34);
                }
              }
            }
          }
          if (v15 == a3)
            v14 = v22;
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

_OWORD *WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::lookupForReinsert(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  _OWORD *v6;
  int v8;
  __int16 v9;
  char v10;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v8 = -1640531527;
  v9 = 0;
  v10 = 0;
  WTF::addArgs<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v8, a2);
  v4 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v8);
  v5 = 0;
  do
  {
    v6 = (_OWORD *)(v2 + 56 * (v4 & v3));
    v4 = ++v5 + (v4 & v3);
  }
  while (*v6 != 0);
  return v6;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,float,char [2],float>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, float *a4, const char *a5, float *a6)
{
  WTF::String *v8;
  WTF::String *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  WTF *v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::String *v27;
  float v28;
  WTF::String *v29;
  float v30;
  void *v31;
  uint64_t i;
  WTF::StringImpl *v33;
  int v34;
  WTF::StringImpl *result;
  uint64_t v36;
  WTF *v41[2];
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint8_t buf[4];
  char *v48;
  int v49;
  int v50;
  _DWORD v51[6];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v8 = (WTF::String *)WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::number(v8, *a4);
  v9 = (WTF::String *)WTF::String::String((WTF::String *)&v43, a5);
  WTF::String::number(v9, *a6);
  WTF::makeString<WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v45, (uint64_t *)&v44, (uint64_t *)&v43, (uint64_t *)&v42, &v46);
  v11 = v42;
  v42 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = v43;
  v43 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v44;
  v44 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v10);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v45;
  v45 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v10);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = (WTF *)os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v41[0] ? (char *)v41[0] + 16 : 0;
    *(_DWORD *)buf = 136446210;
    v48 = v18;
    _os_log_impl(&dword_196BCC000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v16 = v41[0];
    v41[0] = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = (WTF *)WTF::fastFree(v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v36 = a1;
          v22 = WTF::Logger::observers(v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              *(_DWORD *)buf = 0;
              v27 = (WTF::String *)WTF::Logger::LogSiteIdentifier::toString(this);
              v28 = *a4;
              v49 = 0;
              WTF::String::number(v27, v28);
              v50 = 0;
              v29 = (WTF::String *)WTF::String::String((WTF::String *)v51, a5);
              v30 = *a6;
              v51[2] = 0;
              WTF::String::number(v29, v30);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v41, (uint64_t)buf, 4uLL);
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF **))(*(_QWORD *)v26 + 16))(v26, v36, a2, v41);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v41, v31);
              for (i = 56; i != -8; i -= 16)
              {
                v33 = *(WTF::StringImpl **)&buf[i];
                *(_QWORD *)&buf[i] = 0;
                if (v33)
                {
                  if (*(_DWORD *)v33 == 2)
                    WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v17);
                  else
                    *(_DWORD *)v33 -= 2;
                }
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v34 = __ldxr(v19);
          if (v34 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = v46;
  v46 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_196FBBF7C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, WTF::StringImpl *a20,WTF::StringImpl *a21,WTF::StringImpl *a22,uint64_t a23,WTF::StringImpl *a24,char a25)
{
  unsigned __int8 *v25;
  int v27;

  v27 = __ldxr(v25);
  if (v27 == 1)
  {
    if (!__stlxr(0, v25))
    {
LABEL_6:
      if (a24)
      {
        if (*(_DWORD *)a24 == 2)
          WTF::StringImpl::destroy(a24, a2);
        else
          *(_DWORD *)a24 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::makeString<WTF::String,WTF::String,WTF::String,WTF::String>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *a1;
  v11 = *a2;
  v12 = v6;
  v7 = *a3;
  v9 = *a4;
  v10 = v7;
  result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v12, &v11, &v10, &v9, a5);
  if (!*a5)
    __break(0xC471u);
  return result;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  int v17;
  char v18;
  int v19;
  char v20;
  int v21;
  unsigned int v22;
  uint64_t v23;

  v8 = *(_QWORD *)result;
  if (*(_QWORD *)result)
    v9 = *(_DWORD *)(v8 + 4);
  else
    v9 = 0;
  v10 = *a2;
  if (*a2)
    v11 = *(_DWORD *)(v10 + 4);
  else
    v11 = 0;
  v12 = *a3;
  if (*a3)
    v13 = *(_DWORD *)(v12 + 4);
  else
    v13 = 0;
  v14 = *a4;
  if (*a4)
    v15 = *(_DWORD *)(v14 + 4);
  else
    v15 = 0;
  if ((v15 | v13) < 0
    || ((v16 = __OFADD__(v13, v15), v17 = v13 + v15, !v16) ? (v18 = 0) : (v18 = 1),
        v11 < 0
     || (v18 & 1) != 0
     || ((v16 = __OFADD__(v11, v17), v19 = v11 + v17, !v16) ? (v20 = 0) : (v20 = 1),
         v9 < 0 || (v20 & 1) != 0 || (result = (v9 + v19), __OFADD__(v9, v19)))))
  {
    *a5 = 0;
    return result;
  }
  if ((!v8 || (*(_BYTE *)(v8 + 16) & 4) != 0) && (!v10 || (*(_BYTE *)(v10 + 16) & 4) != 0))
  {
    if (v12)
    {
      v22 = *(_DWORD *)(v12 + 16);
      v21 = (v22 >> 2) & 1;
      if (!v14 || (v22 & 4) == 0)
        goto LABEL_26;
    }
    else if (!v14)
    {
      v21 = 1;
      goto LABEL_26;
    }
    v21 = (*(unsigned __int8 *)(v14 + 16) >> 2) & 1;
  }
  else
  {
    v21 = 0;
  }
LABEL_26:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v21, v8, v10, v12, (_DWORD *)v14, &v23);
  *a5 = v23;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _DWORD *a6@<X5>, _QWORD *a7@<X8>)
{
  int v11;
  _DWORD *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;

  v11 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v13 = v29;
        if (v29)
        {
          v14 = (char *)(v29 + 5);
          *v29 = 2;
          v13[1] = v11;
          *((_QWORD *)v13 + 1) = v13 + 5;
          v13[4] = 4;
          v26 = a3;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v26, (char *)v13 + 20);
          v15 = v26;
          if (v26)
            v15 = *(unsigned int *)(v26 + 4);
          v16 = &v14[v15];
          v27 = a4;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v27, &v14[v15]);
          v17 = v27;
          if (v27)
            v17 = *(unsigned int *)(v27 + 4);
          v18 = &v16[v17];
          v28 = a5;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v28, &v16[v17]);
          v19 = v28;
          if (v28)
            v19 = *(unsigned int *)(v28 + 4);
          v29 = a6;
          result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v29, &v18[v19]);
        }
        goto LABEL_24;
      }
LABEL_14:
      v13 = 0;
      goto LABEL_24;
    }
LABEL_15:
    v13 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_24;
  }
  if (!(_DWORD)result)
    goto LABEL_15;
  if (result > 0x7FFFFFEF)
    goto LABEL_14;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v13 = v29;
  if (v29)
  {
    v20 = v29 + 5;
    *v29 = 2;
    v13[1] = v11;
    *((_QWORD *)v13 + 1) = v13 + 5;
    v13[4] = 0;
    v26 = a3;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v26, (char *)v13 + 20);
    v21 = v26;
    if (v26)
      v21 = *(unsigned int *)(v26 + 4);
    v22 = (char *)v20 + 2 * v21;
    v27 = a4;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v27, v22);
    v23 = v27;
    if (v27)
      v23 = *(unsigned int *)(v27 + 4);
    v24 = &v22[2 * v23];
    v28 = a5;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v28, v24);
    v25 = v28;
    if (v28)
      v25 = *(unsigned int *)(v28 + 4);
    v29 = a6;
    result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v29, &v24[2 * v25]);
  }
LABEL_24:
  *a7 = v13;
  return result;
}

void sub_196FBC460(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _DWORD *v9;

  v3 = result;
  *result = 0;
  result[1] = 0;
  if (!a3)
    return v3;
  if (!(a3 >> 28))
  {
    v6 = WTF::fastMalloc((WTF *)(16 * a3));
    *((_DWORD *)v3 + 2) = a3;
    *v3 = v6;
    v7 = a2 + 16 * a3;
    v8 = *((_DWORD *)v3 + 3);
    do
    {
      *(_DWORD *)(v6 + 16 * v8) = *(_DWORD *)a2;
      v9 = *(_DWORD **)(a2 + 8);
      if (v9)
        *v9 += 2;
      *(_QWORD *)(v6 + 16 * v8 + 8) = v9;
      a2 += 16;
      ++v8;
    }
    while (a2 != v7);
    *((_DWORD *)v3 + 3) = v8;
    return v3;
  }
  __break(0xC471u);
  return result;
}

void sub_196FBC52C(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  v4 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;

  v3 = *a1;
  if (*a1)
  {
    result = *(unsigned int *)(v3 + 4);
    if ((result & 0x80000000) != 0)
    {
      *a2 = 0;
      return result;
    }
    v5 = (*(unsigned __int8 *)(v3 + 16) >> 2) & 1;
  }
  else
  {
    result = 0;
    v5 = 1;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>>(result, v5, (_DWORD *)v3, &v6);
  *a2 = v6;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _DWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  int v5;
  _DWORD *v7;
  char *v8;
  char *v9;
  _DWORD *v10;

  v5 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v7 = v10;
        if (v10)
        {
          v8 = (char *)(v10 + 5);
          *v10 = 2;
          v7[1] = v5;
          *((_QWORD *)v7 + 1) = v7 + 5;
          v7[4] = 4;
          v10 = a3;
          result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v10, v8);
        }
        goto LABEL_12;
      }
LABEL_8:
      v7 = 0;
      goto LABEL_12;
    }
LABEL_9:
    v7 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_12;
  }
  if (!(_DWORD)result)
    goto LABEL_9;
  if (result > 0x7FFFFFEF)
    goto LABEL_8;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v7 = v10;
  if (v10)
  {
    v9 = (char *)(v10 + 5);
    *v10 = 2;
    v7[1] = v5;
    *((_QWORD *)v7 + 1) = v7 + 5;
    v7[4] = 0;
    v10 = a3;
    result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v10, v9);
  }
LABEL_12:
  *a4 = v7;
  return result;
}

void sub_196FBC69C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

IPC::Encoder *IPC::Connection::send<Messages::MediaPlayerPrivateRemote::LayerHostingContextIdChanged>(uint64_t a1, int **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 150;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int>>((IPC::Encoder *)v6, *a2);
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode((IPC::Encoder *)v6, a2[1]);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

void sub_196FBC778(_Unwind_Exception *a1, void *a2)
{
  IPC::Encoder *v2;
  WTF *v4;
  void *v5;

  IPC::Encoder::~Encoder(v2, a2);
  WTF::fastFree(v4, v5);
  _Unwind_Resume(a1);
}

unint64_t WTF::Vector<WTF::CompletionHandler<void ()(unsigned int)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WTF::CompletionHandler<void ()(unsigned int)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 29))
  {
    v3 = result;
    v4 = *(WTF **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    if ((_DWORD)v5)
    {
      v8 = (_QWORD *)v6;
      v9 = 8 * v5;
      v10 = v4;
      do
      {
        v11 = *(_QWORD *)v10;
        *(_QWORD *)v10 = 0;
        *v8 = v11;
        v12 = *(_QWORD *)v10;
        *(_QWORD *)v10 = 0;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        ++v8;
        v10 = (WTF *)((char *)v10 + 8);
        v9 -= 8;
      }
      while (v9);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void WTF::Function<void ()(WebCore::DestinationColorSpace)>::operator()(uint64_t *a1, const void **a2)
{
  uint64_t v2;
  const void *v3;
  CFTypeRef v4;
  CFTypeRef cf;

  v2 = *a1;
  v3 = *a2;
  *a2 = 0;
  cf = v3;
  (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v2 + 16))(v2, &cf);
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
}

void sub_196FBC944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WebKit::NetworkTransportSession::didReceiveMessage(WebKit::NetworkTransportSession *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  char v7;
  void *v8;
  WTF *v9;
  _BYTE v10[8];
  WTF *v11;
  char v12;

  switch(*((_WORD *)a3 + 25))
  {
    case 0x245:
      IPC::handleMessageAsync<Messages::NetworkTransportSession::CreateBidirectionalStream,WebKit::NetworkTransportSession,WebKit::NetworkTransportSession,void ()(WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, _QWORD **))WebKit::NetworkTransportSession::createBidirectionalStream, 0);
      break;
    case 0x246:
      IPC::handleMessageAsync<Messages::NetworkTransportSession::CreateOutgoingUnidirectionalStream,WebKit::NetworkTransportSession,WebKit::NetworkTransportSession,void ()(WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, _QWORD **))WebKit::NetworkTransportSession::createOutgoingUnidirectionalStream, 0);
      break;
    case 0x247:
      v4 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v5)
        WebKit::NetworkTransportSession::destroyBidirectionalStream((uint64_t)this, v4);
      break;
    case 0x248:
      v6 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v7)
        WebKit::NetworkTransportSession::destroyOutgoingUnidirectionalStream((uint64_t)this, v6);
      break;
    case 0x249:
      IPC::handleMessageAsync<Messages::NetworkTransportSession::SendDatagram,WebKit::NetworkTransportSession,WebKit::NetworkTransportSession,void ()(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, _QWORD, _QWORD, _QWORD **))WebKit::NetworkTransportSession::sendDatagram, 0);
      break;
    case 0x24A:
      IPC::handleMessageAsync<Messages::NetworkTransportSession::SendStreamSendBytes,WebKit::NetworkTransportSession,WebKit::NetworkTransportSession,void ()(WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>,BOOL,WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD **))WebKit::NetworkTransportSession::sendStreamSendBytes, 0);
      break;
    case 0x24B:
      IPC::handleMessageAsync<Messages::NetworkTransportSession::StreamSendBytes,WebKit::NetworkTransportSession,WebKit::NetworkTransportSession,void ()(WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>,BOOL,WTF::CompletionHandler<void ()(void)> &&)>(a2, (uint64_t *)a3, (uint64_t)this, (void (*)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD **))WebKit::NetworkTransportSession::streamSendBytes, 0);
      break;
    case 0x24C:
      IPC::Decoder::decode<std::tuple<unsigned int,WTF::CString>>((uint64_t *)a3, (uint64_t)v10);
      if (v12)
      {
        v9 = v11;
        v11 = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 1)
            WTF::fastFree(v9, v8);
          else
            --*(_DWORD *)v9;
        }
      }
      break;
    default:
      return;
  }
}

uint64_t IPC::handleMessageAsync<Messages::NetworkTransportSession::SendDatagram,WebKit::NetworkTransportSession,WebKit::NetworkTransportSession,void ()(std::span<unsigned char const,18446744073709551615ul>,WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, _QWORD, _QWORD, _QWORD **), uint64_t a5)
{
  uint64_t result;
  char v11;
  _QWORD *v12;
  unsigned __int8 **v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 **v16;
  _QWORD *v17;
  _QWORD v18[2];
  char v19;

  result = (uint64_t)IPC::Decoder::decode<std::tuple<std::span<unsigned char const,18446744073709551615ul>>>(a2, (uint64_t)v18);
  if (v19)
  {
    result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v11)
    {
      v15 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v16, a1);
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v12 = off_1E34B42D8;
      v12[1] = v15;
      v13 = v16;
      v16 = 0;
      v17 = v12;
      v12[2] = v13;
      result = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v16);
      if (v19)
      {
        v14 = (_QWORD *)(a3 + (a5 >> 1));
        if ((a5 & 1) != 0)
          a4 = *(void (**)(_QWORD *, _QWORD, _QWORD, _QWORD **))(*v14 + a4);
        a4(v14, v18[0], v18[1], &v17);
        result = (uint64_t)v17;
        v17 = 0;
        if (result)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

unint64_t IPC::handleMessageAsync<Messages::NetworkTransportSession::CreateOutgoingUnidirectionalStream,WebKit::NetworkTransportSession,WebKit::NetworkTransportSession,void ()(WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, _QWORD **), uint64_t a5)
{
  unint64_t result;
  char v10;
  _QWORD *v11;
  unsigned __int8 **v12;
  _QWORD *v13;
  unint64_t v14;
  unsigned __int8 **v15;
  _QWORD *v16;

  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v10)
  {
    v14 = result;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v15, a1);
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v11 = off_1E34B4300;
    v11[1] = v14;
    v12 = v15;
    v15 = 0;
    v16 = v11;
    v11[2] = v12;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v15);
    v13 = (_QWORD *)(a3 + (a5 >> 1));
    if ((a5 & 1) != 0)
      a4 = *(void (**)(_QWORD *, _QWORD **))(*v13 + a4);
    a4(v13, &v16);
    result = (unint64_t)v16;
    v16 = 0;
    if (result)
      return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

unint64_t IPC::handleMessageAsync<Messages::NetworkTransportSession::CreateBidirectionalStream,WebKit::NetworkTransportSession,WebKit::NetworkTransportSession,void ()(WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, _QWORD **), uint64_t a5)
{
  unint64_t result;
  char v10;
  _QWORD *v11;
  unsigned __int8 **v12;
  _QWORD *v13;
  unint64_t v14;
  unsigned __int8 **v15;
  _QWORD *v16;

  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v10)
  {
    v14 = result;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v15, a1);
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v11 = off_1E34B4328;
    v11[1] = v14;
    v12 = v15;
    v15 = 0;
    v16 = v11;
    v11[2] = v12;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v15);
    v13 = (_QWORD *)(a3 + (a5 >> 1));
    if ((a5 & 1) != 0)
      a4 = *(void (**)(_QWORD *, _QWORD **))(*v13 + a4);
    a4(v13, &v16);
    result = (unint64_t)v16;
    v16 = 0;
    if (result)
      return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::NetworkTransportSession::SendStreamSendBytes,WebKit::NetworkTransportSession,WebKit::NetworkTransportSession,void ()(WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>,BOOL,WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD **), uint64_t a5)
{
  uint64_t result;
  char v11;
  _QWORD *v12;
  unsigned __int8 **v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 **v16;
  _QWORD *v17;
  _QWORD v18[3];
  unsigned __int8 v19;
  char v20;

  result = (uint64_t)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>,BOOL>>(a2, v18);
  if (v20)
  {
    result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v11)
    {
      v15 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v16, a1);
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v12 = off_1E34B4350;
      v12[1] = v15;
      v13 = v16;
      v16 = 0;
      v17 = v12;
      v12[2] = v13;
      result = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v16);
      if (v20)
      {
        v14 = (_QWORD *)(a3 + (a5 >> 1));
        if ((a5 & 1) != 0)
          a4 = *(void (**)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD **))(*v14 + a4);
        a4(v14, v18[0], v18[1], v18[2], v19, &v17);
        result = (uint64_t)v17;
        v17 = 0;
        if (result)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::NetworkTransportSession::StreamSendBytes,WebKit::NetworkTransportSession,WebKit::NetworkTransportSession,void ()(WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>,BOOL,WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD **), uint64_t a5)
{
  uint64_t result;
  char v11;
  _QWORD *v12;
  unsigned __int8 **v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 **v16;
  _QWORD *v17;
  _QWORD v18[3];
  unsigned __int8 v19;
  char v20;

  result = (uint64_t)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>,BOOL>>(a2, v18);
  if (v20)
  {
    result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v11)
    {
      v15 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v16, a1);
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v12 = off_1E34B4378;
      v12[1] = v15;
      v13 = v16;
      v16 = 0;
      v17 = v12;
      v12[2] = v13;
      result = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v16);
      if (v20)
      {
        v14 = (_QWORD *)(a3 + (a5 >> 1));
        if ((a5 & 1) != 0)
          a4 = *(void (**)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD **))(*v14 + a4);
        a4(v14, v18[0], v18[1], v18[2], v19, &v17);
        result = (uint64_t)v17;
        v17 = 0;
        if (result)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

void WebPushD::PushClientConnection::didReceiveMessageWithReplyHandler(WebPushD::PushClientConnection *a1, uint64_t a2, WTF::StringImpl ***a3)
{
  WTF::StringImpl **v3;
  int v5;
  uint64_t *v7;
  WTF::StringImpl **v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl **v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl **v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  __n128 v33;
  WTF::StringImpl *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WTF::StringImpl **v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  WTF::StringImpl **v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  void *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  __int128 v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl **v60;
  _QWORD *v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE v88[24];
  WTF::StringImpl *v89[2];
  _BYTE v90[24];
  __int128 v91;
  char v92;
  char v93;
  WTF::StringImpl *v94[3];
  __int128 v95;
  unint64_t v96;
  WTF::StringImpl *v97[2];
  __int128 v98;
  char v99;
  char v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  v5 = *((_DWORD *)a1 + 4);
  *((_DWORD *)a1 + 4) = v5 + 1;
  v7 = (uint64_t *)a2;
  v8 = v94;
  switch(*(_WORD *)(a2 + 50))
  {
    case 0x289:
      IPC::Decoder::decode<std::tuple<WTF::URL>>((uint64_t *)a2, v94);
      if ((_BYTE)v96)
      {
        v7 = (uint64_t *)v7[8];
        v8 = *a3;
        *a3 = 0;
        ++*((_DWORD *)a1 + 4);
        v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
        *v9 = &off_1E34B45E0;
        v9[1] = v7;
        v9[2] = v8;
        v9[3] = a1;
        *(_QWORD *)v88 = v9;
        if (!(_BYTE)v96)
          goto LABEL_118;
        WebPushD::PushClientConnection::didShowNotificationForTesting(a1, (_DWORD **)v94, (uint64_t *)v88);
        goto LABEL_37;
      }
      goto LABEL_135;
    case 0x28A:
      v40 = *(_QWORD *)(a2 + 64);
      v41 = *a3;
      *a3 = 0;
      *((_DWORD *)a1 + 4) = v5 + 2;
      v42 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v42 = &off_1E34B43C8;
      *((_QWORD *)v42 + 1) = v40;
      *((_QWORD *)v42 + 2) = v41;
      *((_QWORD *)v42 + 3) = a1;
      v94[0] = v42;
      WebPushD::PushClientConnection::getPendingPushMessage(a1, (uint64_t *)v94);
      goto LABEL_53;
    case 0x28B:
      v27 = *(_QWORD *)(a2 + 64);
      v28 = *a3;
      *a3 = 0;
      *((_DWORD *)a1 + 4) = v5 + 2;
      v29 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v29 = &off_1E34B43F0;
      *((_QWORD *)v29 + 1) = v27;
      *((_QWORD *)v29 + 2) = v28;
      *((_QWORD *)v29 + 3) = a1;
      v94[0] = v29;
      WebPushD::PushClientConnection::getPendingPushMessages(a1, (uint64_t *)v94);
      goto LABEL_53;
    case 0x28C:
      IPC::Decoder::decode<std::tuple<WTF::URL>>((uint64_t *)a2, v94);
      if (!(_BYTE)v96)
        goto LABEL_135;
      v7 = (uint64_t *)v7[8];
      v8 = *a3;
      *a3 = 0;
      ++*((_DWORD *)a1 + 4);
      v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v35 = &off_1E34B44E0;
      v35[1] = v7;
      v35[2] = v8;
      v35[3] = a1;
      *(_QWORD *)v88 = v35;
      if (!(_BYTE)v96)
        goto LABEL_118;
      WebPushD::PushClientConnection::getPushPermissionState((uint64_t)a1, (uint64_t)v94, (uint64_t *)v88);
      goto LABEL_37;
    case 0x28D:
      IPC::Decoder::decode<std::tuple<WTF::URL>>((uint64_t *)a2, v94);
      if (!(_BYTE)v96)
        goto LABEL_135;
      v7 = (uint64_t *)v7[8];
      v8 = *a3;
      *a3 = 0;
      ++*((_DWORD *)a1 + 4);
      v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v21 = &off_1E34B44B8;
      v21[1] = v7;
      v21[2] = v8;
      v21[3] = a1;
      *(_QWORD *)v88 = v21;
      if (!(_BYTE)v96)
        goto LABEL_118;
      WebPushD::PushClientConnection::getPushSubscription(a1, (_DWORD **)v94, (uint64_t *)v88);
LABEL_37:
      v36 = *(_QWORD *)v88;
      *(_QWORD *)v88 = 0;
      if (v36)
        (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      if (!(_BYTE)v96)
        goto LABEL_135;
      goto LABEL_47;
    case 0x28E:
      v43 = *(_QWORD *)(a2 + 64);
      v44 = *a3;
      *a3 = 0;
      *((_DWORD *)a1 + 4) = v5 + 2;
      v45 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v45 = &off_1E34B45B8;
      *((_QWORD *)v45 + 1) = v43;
      *((_QWORD *)v45 + 2) = v44;
      *((_QWORD *)v45 + 3) = a1;
      v94[0] = v45;
      WebPushD::PushClientConnection::getPushTopicsForTesting((uint64_t)a1, (uint64_t *)v94);
      goto LABEL_53;
    case 0x28F:
      IPC::Decoder::decode<std::tuple<WebCore::SecurityOriginData>>((uint64_t *)a2, (uint64_t)v94);
      if (!BYTE8(v95))
        goto LABEL_135;
      v7 = (uint64_t *)v7[8];
      v8 = *a3;
      *a3 = 0;
      ++*((_DWORD *)a1 + 4);
      v50 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v50 = &off_1E34B4518;
      v50[1] = v7;
      v50[2] = v8;
      v50[3] = a1;
      *(_QWORD *)v88 = v50;
      if (!BYTE8(v95))
        goto LABEL_118;
      WebPushD::PushClientConnection::incrementSilentPushCount(a1, (WebCore::SecurityOriginData *)v94, (WTF::StringImpl **)v88);
      goto LABEL_66;
    case 0x290:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a2, (uint64_t)v94);
      if (!LOBYTE(v94[1]))
        goto LABEL_135;
      v7 = (uint64_t *)v7[8];
      v8 = *a3;
      *a3 = 0;
      ++*((_DWORD *)a1 + 4);
      v37 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v37 = &off_1E34B4440;
      v37[1] = v7;
      v37[2] = v8;
      v37[3] = a1;
      *(_QWORD *)v88 = v37;
      if (!LOBYTE(v94[1]))
        goto LABEL_118;
      WebPushD::PushClientConnection::injectEncryptedPushMessageForTesting((uint64_t)a1, (_DWORD **)v94, (uint64_t *)v88);
      goto LABEL_44;
    case 0x291:
      v3 = v94;
      IPC::ArgumentCoder<WebKit::WebPushD::PushMessageForTesting,void>::decode((uint64_t *)a2, v94);
      if (v100)
        goto LABEL_72;
      goto LABEL_119;
    case 0x292:
      v24 = *(_QWORD *)(a2 + 64);
      v25 = *a3;
      *a3 = 0;
      *((_DWORD *)a1 + 4) = v5 + 2;
      v26 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v26 = &off_1E34B4540;
      *((_QWORD *)v26 + 1) = v24;
      *((_QWORD *)v26 + 2) = v25;
      *((_QWORD *)v26 + 3) = a1;
      v94[0] = v26;
      WebPushD::PushClientConnection::removeAllPushSubscriptions(a1, (uint64_t *)v94);
LABEL_53:
      v46 = v94[0];
      v94[0] = 0;
      if (v46)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v46 + 8))(v46);
      goto LABEL_135;
    case 0x293:
      IPC::Decoder::decode<std::tuple<WebCore::SecurityOriginData>>((uint64_t *)a2, (uint64_t)v94);
      if (!BYTE8(v95))
        goto LABEL_135;
      v7 = (uint64_t *)v7[8];
      v8 = *a3;
      *a3 = 0;
      ++*((_DWORD *)a1 + 4);
      v51 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v51 = &off_1E34B4568;
      v51[1] = v7;
      v51[2] = v8;
      v51[3] = a1;
      *(_QWORD *)v88 = v51;
      if (!BYTE8(v95))
        goto LABEL_118;
      WebPushD::PushClientConnection::removePushSubscriptionsForOrigin(a1, (WebCore::SecurityOriginData *)v94, (WTF::StringImpl **)v88);
LABEL_66:
      v52 = *(_QWORD *)v88;
      *(_QWORD *)v88 = 0;
      if (v52)
        (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
      if (BYTE8(v95) && (_DWORD)v95 != -1)
        ((void (*)(_BYTE *, WTF::StringImpl **))off_1E34B44F8[v95])(v88, v94);
      goto LABEL_135;
    case 0x294:
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a2, (uint64_t)v94);
      if (!LOBYTE(v94[1]))
        goto LABEL_135;
      v7 = (uint64_t *)v7[8];
      v8 = *a3;
      *a3 = 0;
      ++*((_DWORD *)a1 + 4);
      v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v20 = &off_1E34B4590;
      v20[1] = v7;
      v20[2] = v8;
      v20[3] = a1;
      *(_QWORD *)v88 = v20;
      if (!LOBYTE(v94[1]))
        goto LABEL_118;
      WebPushD::PushClientConnection::setPublicTokenForTesting((uint64_t)a1, v94, (uint64_t *)v88);
LABEL_44:
      v38 = *(_QWORD *)v88;
      *(_QWORD *)v88 = 0;
      if (v38)
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
      if (LOBYTE(v94[1]))
        goto LABEL_47;
      goto LABEL_135;
    case 0x295:
      IPC::Decoder::decode<std::tuple<WTF::String,BOOL>>((uint64_t *)a2, v94);
      if (!LOBYTE(v94[2]))
        goto LABEL_135;
      v7 = (uint64_t *)v7[8];
      v8 = *a3;
      *a3 = 0;
      ++*((_DWORD *)a1 + 4);
      v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v22 = &off_1E34B43A0;
      v22[1] = v7;
      v22[2] = v8;
      v22[3] = a1;
      *(_QWORD *)v88 = v22;
      if (!LOBYTE(v94[2]))
        goto LABEL_118;
      WebPushD::PushClientConnection::setPushAndNotificationsEnabledForOrigin(a1, v94, (char)v94[1], (uint64_t *)v88);
      v23 = *(_QWORD *)v88;
      *(_QWORD *)v88 = 0;
      if (v23)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      if (!LOBYTE(v94[2]))
        goto LABEL_135;
      goto LABEL_47;
    case 0x296:
      IPC::Decoder::decode<std::tuple<WTF::URL,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t *)a2, v94);
      if (!LOBYTE(v97[1]))
        goto LABEL_59;
      v7 = (uint64_t *)v7[8];
      v8 = *a3;
      *a3 = 0;
      ++*((_DWORD *)a1 + 4);
      v48 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v48 = &off_1E34B4468;
      v48[1] = v7;
      v48[2] = v8;
      v48[3] = a1;
      *(_QWORD *)v88 = v48;
      if (!LOBYTE(v97[1]))
        goto LABEL_118;
      WebPushD::PushClientConnection::subscribeToPushService(a1, (_DWORD **)v94, (uint64_t)&v96, (uint64_t *)v88);
      v49 = *(_QWORD *)v88;
      *(_QWORD *)v88 = 0;
      if (v49)
        (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
LABEL_59:
      std::__optional_destruct_base<std::tuple<WTF::URL,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v94, v47);
      goto LABEL_135;
    case 0x297:
      IPC::Decoder::decode<WTF::URL>((uint64_t *)a2, v88);
      if (!v90[0])
        goto LABEL_134;
      v10 = v7[1];
      v11 = *v7;
      v12 = v7[2] - *v7;
      if (v10 <= v12)
      {
        v77 = 0;
        v78 = 0;
        *v7 = 0;
        v7[1] = 0;
        v79 = v7[3];
        if (v79)
        {
          if (v10)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v79 + 16))(v79);
            v78 = *v7;
            v77 = v7[1];
          }
          else
          {
            v77 = 0;
            v78 = 0;
          }
        }
        goto LABEL_126;
      }
      v13 = (unsigned __int8 *)(v11 + v12);
      v7[2] = (uint64_t)(v13 + 1);
      if (!v11)
      {
        v77 = v10;
        v78 = 0;
LABEL_126:
        v10 = 0;
        v11 = 0;
        *v7 = 0;
        v7[1] = 0;
        v80 = v7[3];
        if (v80)
        {
          if (v77)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v80 + 16))(v80, v78, v77);
            v11 = *v7;
            v10 = v7[1];
          }
          else
          {
            v10 = 0;
            v11 = 0;
          }
        }
        goto LABEL_127;
      }
      v14 = *v13;
      if (v14 >= 2)
      {
LABEL_127:
        *v7 = 0;
        v7[1] = 0;
        v81 = v7[3];
        if (v81 && v10)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v81 + 16))(v81, v11);
LABEL_128:
        v82 = (WTF::StringImpl *)*v7;
        v83 = v7[1];
        *v7 = 0;
        v7[1] = 0;
        v84 = v7[3];
        if (v84 && v83)
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v84 + 16))(v84, v82);
        LOBYTE(v94[0]) = 0;
        LOBYTE(v97[1]) = 0;
        if (v90[0])
        {
          v85 = *(WTF::StringImpl **)v88;
          *(_QWORD *)v88 = 0;
          if (v85)
          {
            if (*(_DWORD *)v85 == 2)
              WTF::StringImpl::destroy(v85, v82);
            else
              *(_DWORD *)v85 -= 2;
          }
        }
LABEL_134:
        a2 = *v7;
        v86 = v7[1];
        *v7 = 0;
        v7[1] = 0;
        v87 = v7[3];
        if (v87 && v86)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v87 + 16))(v87, a2);
        goto LABEL_135;
      }
      if (!v14)
      {
        v19 = 0;
        v17 = 0;
        v18 = 0;
        goto LABEL_78;
      }
      v15 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v7);
      if (!v16)
        goto LABEL_128;
      if (v90[0])
      {
        v17 = v15 & 0xFFFFFFFFFFFFFF00;
        v18 = v15;
        v19 = 1;
LABEL_78:
        *(_OWORD *)&v94[1] = *(_OWORD *)&v88[8];
        v95 = *(_OWORD *)v89;
        v58 = v18 | v17;
        v94[0] = *(WTF::StringImpl **)v88;
        v96 = v18 | v17;
        LOBYTE(v97[0]) = v19;
        LOBYTE(v97[1]) = 1;
        v59 = v7[8];
        v60 = *a3;
        *a3 = 0;
        ++*((_DWORD *)a1 + 4);
        v61 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
        *v61 = &off_1E34B4490;
        v61[1] = v59;
        v61[2] = v60;
        v61[3] = a1;
        *(_QWORD *)v88 = v61;
        WebPushD::PushClientConnection::unsubscribeFromPushService(a1, (_DWORD **)v94, v58, (char)v97[0], (uint64_t *)v88);
        v62 = *(_QWORD *)v88;
        *(_QWORD *)v88 = 0;
        if (v62)
          (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
        if (!LOBYTE(v97[1]))
          goto LABEL_135;
LABEL_47:
        v39 = v94[0];
        v94[0] = 0;
        if (!v39)
          goto LABEL_135;
LABEL_48:
        if (*(_DWORD *)v39 == 2)
          WTF::StringImpl::destroy(v39, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v39 -= 2;
        goto LABEL_135;
      }
      do
      {
LABEL_118:
        __break(1u);
LABEL_119:
        v72 = *v7;
        v73 = v7[1];
        *v7 = 0;
        v7[1] = 0;
        v74 = v7[3];
        if (v74 && v73 && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v74 + 16))(v74, v72), v100))
        {
LABEL_72:
          v53 = v97[1];
          *(WTF::StringImpl **)&v88[16] = v94[2];
          v54 = *(_OWORD *)v94;
          memset(v94, 0, sizeof(v94));
          *(_OWORD *)v88 = v54;
          *(_OWORD *)v89 = *(_OWORD *)(v8 + 3);
          *(_OWORD *)v90 = *(_OWORD *)(v8 + 5);
          LODWORD(v95) = (uint64_t)v89[0] & 0xFFFFFFFE;
          v97[1] = 0;
          *(_QWORD *)&v90[16] = v53;
          LOBYTE(v91) = v98;
          std::__optional_copy_assign_base<WebCore::NotificationPayload,false>::__optional_copy_assign_base[abi:sn180100]((uint64_t)&v91 + 8, (uint64_t)(v3 + 9));
          v93 = 1;
          if (v100)
          {
            std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(v3 + 9), v55);
            v57 = v97[1];
            v97[1] = 0;
            if (v57)
            {
              if (*(_DWORD *)v57 == 2)
                WTF::StringImpl::destroy(v57, v56);
              else
                *(_DWORD *)v57 -= 2;
            }
            v63 = v94[2];
            v94[2] = 0;
            if (v63)
            {
              if (*(_DWORD *)v63 == 2)
                WTF::StringImpl::destroy(v63, v56);
              else
                *(_DWORD *)v63 -= 2;
            }
            v64 = v94[1];
            v94[1] = 0;
            if (v64)
            {
              if (*(_DWORD *)v64 == 2)
                WTF::StringImpl::destroy(v64, v56);
              else
                *(_DWORD *)v64 -= 2;
            }
            v65 = v94[0];
            v94[0] = 0;
            if (v65)
            {
              if (*(_DWORD *)v65 == 2)
                WTF::StringImpl::destroy(v65, v56);
              else
                *(_DWORD *)v65 -= 2;
            }
          }
        }
        else
        {
          v88[0] = 0;
          v93 = 0;
        }
        if (!v93)
        {
          a2 = *v7;
          v75 = v7[1];
          *v7 = 0;
          v7[1] = 0;
          v76 = v7[3];
          if (!v76)
            goto LABEL_135;
          if (!v75)
            goto LABEL_135;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v76 + 16))(v76, a2);
          if (!v93)
            goto LABEL_135;
        }
        v7 = (uint64_t *)v7[8];
        v8 = *a3;
        *a3 = 0;
        ++*((_DWORD *)a1 + 4);
        v66 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
        *(_QWORD *)v66 = &off_1E34B4418;
        *((_QWORD *)v66 + 1) = v7;
        *((_QWORD *)v66 + 2) = v8;
        *((_QWORD *)v66 + 3) = a1;
        v94[0] = v66;
      }
      while (!v93);
      WebPushD::PushClientConnection::injectPushMessageForTesting((uint64_t)a1, (uint64_t)v88, (WTF::RefCountedBase *)v94);
      v67 = v94[0];
      v94[0] = 0;
      if (v67)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v67 + 8))(v67);
      if (v93)
      {
        std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v91 + 8, (WTF::StringImpl *)a2);
        v68 = *(WTF::StringImpl **)&v90[16];
        *(_QWORD *)&v90[16] = 0;
        if (v68)
        {
          if (*(_DWORD *)v68 == 2)
            WTF::StringImpl::destroy(v68, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v68 -= 2;
        }
        v69 = *(WTF::StringImpl **)&v88[16];
        *(_QWORD *)&v88[16] = 0;
        if (v69)
        {
          if (*(_DWORD *)v69 == 2)
            WTF::StringImpl::destroy(v69, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v69 -= 2;
        }
        v70 = *(WTF::StringImpl **)&v88[8];
        *(_QWORD *)&v88[8] = 0;
        if (v70)
        {
          if (*(_DWORD *)v70 == 2)
            WTF::StringImpl::destroy(v70, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v70 -= 2;
        }
        v39 = *(WTF::StringImpl **)v88;
        *(_QWORD *)v88 = 0;
        if (v39)
          goto LABEL_48;
      }
LABEL_135:
      if (*((_DWORD *)a1 + 4) == 1)
        (*(void (**)(WebPushD::PushClientConnection *, uint64_t))(*(_QWORD *)a1 + 8))(a1, a2);
      else
        --*((_DWORD *)a1 + 4);
      return;
    case 0x298:
      IPC::Decoder::decode<WebKit::WebPushD::WebPushDaemonConnectionConfiguration>((uint64_t *)a2, (uint64_t)v94);
      if (!v99)
      {
        std::__optional_destruct_base<WebKit::WebPushD::WebPushDaemonConnectionConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v94, v30);
        goto LABEL_134;
      }
      v88[0] = v94[0];
      v88[8] = 0;
      LOBYTE(v89[0]) = 0;
      if ((_BYTE)v95)
      {
        *(WTF::StringImpl **)&v88[8] = v94[1];
        v31 = v94[2];
        v94[1] = 0;
        v94[2] = 0;
        *(_QWORD *)&v88[16] = v31;
        LOBYTE(v89[0]) = 1;
      }
      v32 = (WTF::StringImpl *)*((_QWORD *)&v95 + 1);
      *((_QWORD *)&v95 + 1) = 0;
      v89[1] = v32;
      *(_OWORD *)&v90[8] = *(_OWORD *)v97;
      v91 = v98;
      v92 = 1;
      std::__optional_destruct_base<WebKit::WebPushD::WebPushDaemonConnectionConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v94, v30);
      WebPushD::PushClientConnection::updateConnectionConfiguration((uint64_t)a1, (uint64_t)v88, v33);
      if (v92)
      {
        v34 = v89[1];
        v89[1] = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v34 -= 2;
        }
        if (LOBYTE(v89[0]))
        {
          v71 = *(WTF **)&v88[8];
          if (*(_QWORD *)&v88[8])
          {
            *(_QWORD *)&v88[8] = 0;
            *(_DWORD *)&v88[16] = 0;
            WTF::fastFree(v71, (void *)a2);
          }
        }
      }
      goto LABEL_135;
    default:
      goto LABEL_135;
  }
}

uint64_t WebKit::RTCDataChannelRemoteManager::didReceiveMessage(uint64_t this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  int v7[2];
  WTF::StringImpl *v8;
  WTF *v9;
  char v10;

  v3 = (uint64_t *)this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x29F:
      this = IPC::Decoder::decode<std::tuple<WebCore::RTCDataChannelIdentifier,unsigned long>>((uint64_t)&v5, (uint64_t *)a3);
      if ((_BYTE)v8)
        this = WebKit::RTCDataChannelRemoteManager::bufferedAmountIsDecreasing(v3, v5, v6, *(uint64_t *)v7);
      break;
    case 0x2A0:
      this = IPC::Decoder::decode<std::tuple<WebCore::RTCDataChannelIdentifier,WebCore::RTCDataChannelState>>((uint64_t)&v5, (uint64_t *)a3);
      if ((_BYTE)v8)
        this = WebKit::RTCDataChannelRemoteManager::changeReadyState(v3, v5, v6, v7[0]);
      break;
    case 0x2A1:
      this = IPC::Decoder::decode<std::tuple<WebCore::RTCDataChannelIdentifier>>((uint64_t)&v5, (uint64_t *)a3);
      if (LOBYTE(v7[0]))
      {
        this = WebKit::RTCDataChannelRemoteManager::sourceFromIdentifier(v3, v5, v6);
        if (this)
          this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 32) + 40))(*(_QWORD *)(this + 32));
      }
      break;
    case 0x2A2:
      this = (uint64_t)IPC::Decoder::decode<std::tuple<WebCore::RTCDataChannelIdentifier,WebCore::RTCErrorDetailType,WTF::String>>((uint64_t)&v5, (uint64_t *)a3);
      if ((_BYTE)v9)
      {
        this = WebKit::RTCDataChannelRemoteManager::detectError(v3, v5, v6, v7[0], (uint64_t *)&v8);
        if ((_BYTE)v9)
        {
          this = (uint64_t)v8;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2)
              this = WTF::StringImpl::destroy(v8, v4);
            else
              *(_DWORD *)v8 -= 2;
          }
        }
      }
      break;
    case 0x2A3:
      this = (uint64_t)IPC::Decoder::decode<std::tuple<WebCore::RTCDataChannelIdentifier,BOOL,std::span<unsigned char const,18446744073709551615ul>>>((uint64_t)&v5, (uint64_t *)a3);
      if (v10)
        this = (uint64_t)WebKit::RTCDataChannelRemoteManager::receiveData((WTF::StringImpl *)v3, v5, v6, LOBYTE(v7[0]), (uint64_t)v8, v9);
      break;
    case 0x2A4:
      this = (uint64_t)IPC::Decoder::decode<std::tuple<WebCore::RTCDataChannelIdentifier,BOOL,std::span<unsigned char const,18446744073709551615ul>>>((uint64_t)&v5, (uint64_t *)a3);
      if (v10)
        this = (uint64_t)WebKit::RTCDataChannelRemoteManager::sendData(v3, v5, v6, LOBYTE(v7[0]), (uint64_t)v8, (uint64_t)v9);
      break;
    default:
      return this;
  }
  return this;
}

WTF::StringImpl *WebKit::RTCDataChannelRemoteManagerProxy::didReceiveMessage(WTF::StringImpl *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  char v10;

  v3 = (uint64_t)this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x299:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WebCore::RTCDataChannelIdentifier,unsigned long>>((uint64_t)&v5, (uint64_t *)a3);
      if ((_BYTE)v8)
        this = (WTF::StringImpl *)WebKit::RTCDataChannelRemoteManagerProxy::bufferedAmountIsDecreasing(v3, v5, v6, v7);
      break;
    case 0x29A:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WebCore::RTCDataChannelIdentifier,WebCore::RTCDataChannelState>>((uint64_t)&v5, (uint64_t *)a3);
      if ((_BYTE)v8)
        this = (WTF::StringImpl *)WebKit::RTCDataChannelRemoteManagerProxy::changeReadyState(v3, v5, v6, v7);
      break;
    case 0x29B:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WebCore::RTCDataChannelIdentifier>>((uint64_t)&v5, (uint64_t *)a3);
      if ((_BYTE)v7)
        this = (WTF::StringImpl *)WebKit::RTCDataChannelRemoteManagerProxy::close(v3, v5, v6);
      break;
    case 0x29C:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WebCore::RTCDataChannelIdentifier,WebCore::RTCErrorDetailType,WTF::String>>((uint64_t)&v5, (uint64_t *)a3);
      if ((_BYTE)v9)
      {
        this = (WTF::StringImpl *)WebKit::RTCDataChannelRemoteManagerProxy::detectError(v3, v5, v6, v7, (uint64_t)&v8);
        if ((_BYTE)v9)
        {
          this = v8;
          v8 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2)
              this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v4);
            else
              *(_DWORD *)this -= 2;
          }
        }
      }
      break;
    case 0x29D:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WebCore::RTCDataChannelIdentifier,BOOL,std::span<unsigned char const,18446744073709551615ul>>>((uint64_t)&v5, (uint64_t *)a3);
      if (v10)
        this = (WTF::StringImpl *)WebKit::RTCDataChannelRemoteManagerProxy::receiveData(v3, v5, v6, v7, (uint64_t)v8, v9);
      break;
    case 0x29E:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WebCore::RTCDataChannelIdentifier,BOOL,std::span<unsigned char const,18446744073709551615ul>>>((uint64_t)&v5, (uint64_t *)a3);
      if (v10)
        this = (WTF::StringImpl *)WebKit::RTCDataChannelRemoteManagerProxy::sendData(v3, v5, v6, v7, (uint64_t)v8, v9);
      break;
    default:
      return this;
  }
  return this;
}

WTF::StringImpl *WebKit::RemoteAdapter::didReceiveStreamMessage(WTF::StringImpl *this, uint64_t **a2, IPC::Decoder *a3)
{
  WTF::StringImpl *v4;
  int v5;
  char v7;
  char v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27[2];
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  unint64_t v31;
  char v32;
  __int128 v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;

  v4 = this;
  v5 = *((unsigned __int16 *)a3 + 25);
  if (v5 == 3534)
  {
    this = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
    v8 = v7;
    if (v7)
    {
      v9 = this;
      IPC::ArgumentCoder<WebKit::WebGPU::DeviceDescriptor,void>::decode((uint64_t *)a3, (uint64_t)&v33);
      if (v37)
      {
        while (1)
        {
          v10 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          if (!(_BYTE)v11)
            break;
          v12 = v10;
          v13 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          if (!(_BYTE)v11)
            break;
          if (v37)
          {
            v15 = v33;
            v33 = 0uLL;
            *(_OWORD *)v27 = v15;
            *(_QWORD *)&v15 = v34;
            v34 = 0;
            v28 = v15;
            v16 = v35;
            v35 = 0;
            v29[0] = v16;
            *(_QWORD *)&v15 = v36;
            v36 = 0;
            v29[1] = v15;
            v30 = v12;
            v31 = v13;
            v32 = 1;
            std::__optional_destruct_base<WebKit::WebGPU::DeviceDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v33, v11);
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v33, a2 + 4);
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v33);
            *(_QWORD *)&v33 = v9;
            BYTE8(v33) = v8;
            v17 = (unsigned int *)(a2 + 1);
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 + 1, v17));
            v19 = WTF::fastMalloc((WTF *)0x20);
            *(_QWORD *)v19 = off_1E34B4608;
            *(_OWORD *)(v19 + 8) = v33;
            v34 = 0;
            *(_QWORD *)(v19 + 24) = a2;
            v26 = v19;
            WebKit::RemoteAdapter::requestDevice(v4, (uint64_t)v27, v30, v31, &v26);
            v20 = v26;
            v26 = 0;
            if (v20)
              (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
            this = (WTF::StringImpl *)WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(&v34);
            if (v32)
            {
              WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v21);
              v23 = v27[1];
              if (v27[1])
              {
                v27[1] = 0;
                LODWORD(v28) = 0;
                WTF::fastFree(v23, v22);
              }
              this = v27[0];
              v27[0] = 0;
              if (this)
              {
                if (*(_DWORD *)this == 2)
                  return (WTF::StringImpl *)WTF::StringImpl::destroy(this, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)this -= 2;
              }
            }
            return this;
          }
          __break(1u);
LABEL_26:
          if (v14)
          {
            (*(void (**)(unint64_t, void *))(*(_QWORD *)v13 + 16))(v13, v11);
            if (v37)
              continue;
          }
          break;
        }
      }
      else
      {
        v11 = *(void **)a3;
        v14 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v13 = *((_QWORD *)a3 + 3);
        if (v13)
          goto LABEL_26;
      }
      std::__optional_destruct_base<WebKit::WebGPU::DeviceDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v33, v11);
      v24 = *(_QWORD *)a3;
      v25 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      this = (WTF::StringImpl *)*((_QWORD *)a3 + 3);
      if (this && v25)
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)this + 16))(this, v24);
    }
  }
  else if (v5 == 677)
  {
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v27, a2 + 4);
    WebKit::WebGPU::ObjectHeap::removeObject(*(_QWORD *)(*((_QWORD *)v4 + 3) + 8), *((_QWORD *)v4 + 7));
    return (WTF::StringImpl *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v27);
  }
  return this;
}

void WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManager::didReceiveMessage(WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManager *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  unint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  __int128 v37;
  _DWORD v38[2];
  char v39;
  WTF::StringImpl *v40;
  __int128 v41;
  char v42;
  _BYTE v43[4];
  int v44;
  char v45;

  switch(*((_WORD *)a3 + 25))
  {
    case 0x2AE:
      v6 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v7)
      {
        v8 = v6;
        v9 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
        if (v10)
        {
          v35 = v9;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v36, a2);
          v11 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v11 = off_1E34B4630;
          *((_QWORD *)v11 + 1) = v35;
          v12 = v36;
          v36 = 0;
          *((_QWORD *)v11 + 2) = v12;
          v40 = v11;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v36);
          WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManager::createUnit((uint64_t)this, v8, (uint64_t *)&v40);
          v13 = v40;
          v40 = 0;
          if (v13)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v13 + 8))(v13);
        }
      }
      return;
    case 0x2AF:
      v14 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v15)
        WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManager::deleteUnit((uint64_t *)this, v14);
      return;
    case 0x2B0:
      v16 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v17 && (v18 = (WTF::StringImpl *)v16, IPC::Decoder::decode<WTF::String>((uint64_t *)a3, &v40), (_BYTE)v41))
      {
        v36 = v40;
        LOBYTE(v37) = 1;
        v40 = v18;
        v19 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)this + 2, &v40);
        if (!v19
          || ((*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(v19 + 56) + 40))(*(_QWORD *)(v19 + 56), &v36), (_BYTE)v37))
        {
          v21 = v36;
          v36 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v20);
            else
              *(_DWORD *)v21 -= 2;
          }
        }
      }
      else
      {
        v28 = *(_QWORD *)a3;
        v29 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v30 = *((_QWORD *)a3 + 3);
        if (v30 && v29)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, v28);
      }
      return;
    case 0x2B1:
      v22 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v23)
      {
        v24 = v22;
        IPC::Decoder::decode<WebKit::ConsumerSharedCARingBufferHandle>(a3, (uint64_t)&v40);
        if (v42)
        {
          IPC::Decoder::decode<IPC::Semaphore>(a3, v43);
          if (v45)
          {
            if (!v42)
            {
              __break(1u);
              return;
            }
            v34 = v24;
            WTF::MachSendRight::MachSendRight();
            v37 = v41;
            WTF::MachSendRight::MachSendRight();
            v25 = v44;
            v44 = 0;
            v38[1] = v25;
            v39 = 1;
            if (v45)
            {
              IPC::Semaphore::destroy((IPC::Semaphore *)v43);
              WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v43);
            }
          }
          else
          {
            LOBYTE(v34) = 0;
            v39 = 0;
          }
          if (v42)
            WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v40);
        }
        else
        {
          LOBYTE(v34) = 0;
          v39 = 0;
        }
        if (v39)
          goto LABEL_31;
      }
      else
      {
        LOBYTE(v34) = 0;
        v39 = 0;
      }
      v31 = *(_QWORD *)a3;
      v32 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v33 = *((_QWORD *)a3 + 3);
      if (!v33)
        return;
      if (!v32)
        return;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, v31);
      if (!v39)
        return;
LABEL_31:
      WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManager::startUnit((uint64_t)this, v34, (uint64_t)&v36, (IPC::Semaphore *)v38);
      if (v39)
      {
        IPC::Semaphore::destroy((IPC::Semaphore *)v38);
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v38);
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v36);
      }
      return;
    case 0x2B2:
      v26 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v27)
        WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManager::stopUnit((uint64_t)this, v26);
      return;
    default:
      return;
  }
}

void WebPushD::PushClientConnection::~PushClientConnection(WebPushD::PushClientConnection *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = off_1E34B4658;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 80, a2);
  v5 = (void *)*((_QWORD *)this + 4);
  if (v5)
    os_release(v5);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v4);
}

{
  WTF::StringImpl *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = off_1E34B4658;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 80, a2);
  v5 = (void *)*((_QWORD *)this + 4);
  if (v5)
    os_release(v5);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v4);
  WTF::fastFree(this, v6);
}

void WebKit::RTCDataChannelRemoteManager::~RTCDataChannelRemoteManager(WebKit::RTCDataChannelRemoteManager *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 **v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 7);
  if (v3)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::RTCDataChannelRemoteManager::RemoteHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::RTCDataChannelRemoteManager::RemoteHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::RTCDataChannelRemoteManager::RemoteHandler,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::RTCDataChannelRemoteManager::RemoteHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 6);
  if (v4)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
    WTF::ThreadSafeRefCounted<WebCore::RTCDataChannelRemoteSourceConnection,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
    WTF::ThreadSafeRefCounted<WebCore::RTCDataChannelRemoteHandlerConnection,(WTF::DestructionThread)1>::deref((unsigned int *)(v6 + 8));
  v7 = (unsigned __int8 **)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v7);
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 56))(v8);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 **v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 7);
  if (v3)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::RTCDataChannelRemoteManager::RemoteHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::RTCDataChannelRemoteManager::RemoteHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::RTCDataChannelRemoteManager::RemoteHandler,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::RTCDataChannelRemoteManager::RemoteHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 6);
  if (v4)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
    WTF::ThreadSafeRefCounted<WebCore::RTCDataChannelRemoteSourceConnection,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
    WTF::ThreadSafeRefCounted<WebCore::RTCDataChannelRemoteHandlerConnection,(WTF::DestructionThread)1>::deref((unsigned int *)(v6 + 8));
  v7 = (unsigned __int8 **)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v7);
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 56))(v8);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
  JUMPOUT(0x19AEB936CLL);
}

void WebKit::RTCDataChannelRemoteManagerProxy::~RTCDataChannelRemoteManagerProxy(WebKit::RTCDataChannelRemoteManagerProxy *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)this + 4);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *((_QWORD *)this + 4);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
  WTF::fastFree(this, v5);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::RTCDataChannelRemoteManager::RemoteHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::RTCDataChannelRemoteManager::RemoteHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebKit::RTCDataChannelRemoteManager::RemoteHandler,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::RTCDataChannelRemoteManager::RemoteHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      if (*(_QWORD *)(a1 + (i << 6)) != -1)
      {
        v5 = a1 + (i << 6);
        v6 = *(unsigned int **)(v5 + 16);
        *(_QWORD *)(v5 + 16) = 0;
        if (v6)
        {
          do
          {
            v7 = __ldaxr(v6);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, v6));
          if (!v8)
          {
            atomic_store(1u, v6);
            WTF::fastFree((WTF *)v6, a2);
          }
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

unsigned int *WTF::ThreadSafeRefCounted<WebCore::RTCDataChannelRemoteSourceConnection,(WTF::DestructionThread)1>::deref(unsigned int *result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int *v5;

  v1 = result;
  do
  {
    v2 = __ldaxr(result);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, result));
  if (!v3)
  {
    atomic_store(1u, result);
    v4 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v4 = off_1E34B46C8;
    *((_QWORD *)v4 + 1) = v1;
    v5 = v4;
    WTF::ensureOnMainThread();
    result = v5;
    if (v5)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::RTCDataChannelRemoteSourceConnection,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) + 8))(*(_QWORD *)(a1 + 8) - 8);
}

unsigned int *WTF::ThreadSafeRefCounted<WebCore::RTCDataChannelRemoteHandlerConnection,(WTF::DestructionThread)1>::deref(unsigned int *result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int *v5;

  v1 = result;
  do
  {
    v2 = __ldaxr(result);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, result));
  if (!v3)
  {
    atomic_store(1u, result);
    v4 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v4 = off_1E34B46F0;
    *((_QWORD *)v4 + 1) = v1;
    v5 = v4;
    WTF::ensureOnMainThread();
    result = v5;
    if (v5)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::RTCDataChannelRemoteHandlerConnection,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) + 8))(*(_QWORD *)(a1 + 8) - 8);
}

unsigned __int8 **WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(unsigned __int8 **result)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 **v10;

  v1 = *result;
  if (__ldaxr(*result))
  {
    __clrex();
LABEL_3:
    result = (unsigned __int8 **)MEMORY[0x19AEABB3C](v1);
    goto LABEL_4;
  }
  if (__stxr(1u, v1))
    goto LABEL_3;
LABEL_4:
  v3 = *((_QWORD *)v1 + 1);
  v4 = v3 - 1;
  *((_QWORD *)v1 + 1) = v3 - 1;
  if (v3 == 1)
  {
    v9 = *((_QWORD *)v1 + 2);
    v6 = *((_QWORD *)v1 + 3);
    *((_QWORD *)v1 + 3) = 0;
    v5 = v9 == 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = __ldxr(v1);
  if (v7 == 1)
  {
    if (!__stlxr(0, v1))
      goto LABEL_8;
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 **)WTF::Lock::unlockSlow((WTF::Lock *)v1);
LABEL_8:
  if (!v4)
  {
    v8 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v8 = off_1E34ACA48;
    *(_QWORD *)(v8 + 8) = v1;
    *(_QWORD *)(v8 + 16) = v6;
    *(_BYTE *)(v8 + 24) = v5;
    v10 = (unsigned __int8 **)v8;
    WTF::ensureOnMainRunLoop();
    result = v10;
    if (v10)
      return (unsigned __int8 **)(*((uint64_t (**)(unsigned __int8 **))*v10 + 1))(v10);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23NetworkTransportSession12SendDatagramEN6WebKit23NetworkTransportSessionES8_FvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B42D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23NetworkTransportSession12SendDatagramEN6WebKit23NetworkTransportSessionES8_FvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B42D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23NetworkTransportSession12SendDatagramEN6WebKit23NetworkTransportSessionES8_FvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3044;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23NetworkTransportSession34CreateOutgoingUnidirectionalStreamEN6WebKit23NetworkTransportSessionES8_FvONS_17CompletionHandlerIFvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebTransportStreamIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B4300;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23NetworkTransportSession34CreateOutgoingUnidirectionalStreamEN6WebKit23NetworkTransportSessionES8_FvONS_17CompletionHandlerIFvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebTransportStreamIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B4300;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23NetworkTransportSession34CreateOutgoingUnidirectionalStreamEN6WebKit23NetworkTransportSessionES8_FvONS_17CompletionHandlerIFvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebTransportStreamIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  _QWORD v10[2];
  IPC::Encoder *v11;

  v10[0] = a2;
  v10[1] = a3;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3043;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v11 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v5, (uint64_t)v10);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  size_t v12;
  char *v13;
  void *v14;

  v4 = *(unsigned __int8 *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 544);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(a1 + 552);
  if (v7 < v5 + 1)
  {
    v11 = (2 * v7 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v12 = v11;
      v11 *= 2;
    }
    while (v12 < v6);
    v13 = (char *)mmap(0, v12, 3, 4098, -1, 0);
    if (v13 == (char *)-1)
      goto LABEL_14;
    v8 = v13;
    memcpy(v13, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v14 = *(void **)(a1 + 528);
    if (v14 != (void *)(a1 + 16))
      munmap(v14, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v8;
    *(_QWORD *)(a1 + 552) = v12;
    v9 = *(_QWORD *)(a1 + 544);
  }
  else
  {
    v8 = *(char **)(a1 + 528);
    v9 = *(_QWORD *)(a1 + 544);
  }
  bzero(&v8[v9], v5 - v9);
  *(_QWORD *)(a1 + 544) = v6;
  v10 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v5);
  *(_QWORD *)(a1 + 536) = v10 + 1;
  if (!v4)
  {
    *v10 = 0;
    return;
  }
  *v10 = 1;
  if (*(_BYTE *)(a2 + 8))
  {
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)a1, (uint64_t *)a2);
    return;
  }
  std::__throw_bad_optional_access[abi:sn180100]();
LABEL_14:
  __break(0xC471u);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23NetworkTransportSession25CreateBidirectionalStreamEN6WebKit23NetworkTransportSessionES8_FvONS_17CompletionHandlerIFvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebTransportStreamIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B4328;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23NetworkTransportSession25CreateBidirectionalStreamEN6WebKit23NetworkTransportSessionES8_FvONS_17CompletionHandlerIFvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebTransportStreamIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B4328;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23NetworkTransportSession25CreateBidirectionalStreamEN6WebKit23NetworkTransportSessionES8_FvONS_17CompletionHandlerIFvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebTransportStreamIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  _QWORD v10[2];
  IPC::Encoder *v11;

  v10[0] = a2;
  v10[1] = a3;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3042;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v11 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v5, (uint64_t)v10);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

_QWORD *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>,BOOL>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>,BOOL>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[32])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>,BOOL>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[2];

  result = (_QWORD *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6[0] = result;
  v6[1] = v5;
  if ((_BYTE)v5)
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>,BOOL>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1, (uint64_t)v6, a2);
  *a2 = 0;
  a2[32] = 0;
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>,BOOL>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  _QWORD *result;
  _BYTE v7[24];

  result = IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a1, (uint64_t)v7);
  if (v7[16])
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>,BOOL>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>>(a1, a2, (uint64_t)v7, (uint64_t)a3);
  *a3 = 0;
  a3[32] = 0;
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>,BOOL>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::span<unsigned char const,18446744073709551615ul>>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  BOOL v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = result[1];
  v7 = *result;
  v8 = result[2] - *result;
  if (v6 <= v8)
  {
LABEL_9:
    v13 = 0;
    v14 = 0;
    *result = 0;
    result[1] = 0;
    v15 = result[3];
    if (v15)
    {
      v18 = result;
      v21 = a4;
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
        result = v18;
        a4 = v21;
        v14 = *v18;
        v13 = v18[1];
      }
      else
      {
        v13 = 0;
        v14 = 0;
      }
    }
    goto LABEL_10;
  }
  v9 = (unsigned __int8 *)(v7 + v8);
  result[2] = v9 + 1;
  if (!v7)
  {
    v13 = v6;
    v14 = 0;
LABEL_10:
    v6 = 0;
    v7 = 0;
    *result = 0;
    result[1] = 0;
    v16 = result[3];
    if (v16)
    {
      v17 = result;
      v20 = a4;
      if (v13)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v16 + 16))(v16, v14, v13);
        result = v17;
        a4 = v20;
        v7 = *v17;
        v6 = v17[1];
      }
      else
      {
        v6 = 0;
        v7 = 0;
      }
    }
    goto LABEL_11;
  }
  v10 = *v9;
  if (v10 < 2)
  {
    v11 = v10 != 0;
    if (*(_BYTE *)(a2 + 8) && *(_BYTE *)(a3 + 16))
    {
      *(_QWORD *)a4 = *(_QWORD *)a2;
      *(_OWORD *)(a4 + 8) = *(_OWORD *)a3;
      *(_BYTE *)(a4 + 24) = v11;
      v12 = 1;
      goto LABEL_7;
    }
    __break(1u);
    goto LABEL_9;
  }
LABEL_11:
  *result = 0;
  result[1] = 0;
  result = (_QWORD *)result[3];
  if (result && v6)
  {
    v19 = a4;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v7);
    a4 = v19;
  }
  v12 = 0;
  *(_BYTE *)a4 = 0;
LABEL_7:
  *(_BYTE *)(a4 + 32) = v12;
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23NetworkTransportSession19SendStreamSendBytesEN6WebKit23NetworkTransportSessionES8_FvNS_23ObjectIdentifierGenericINS7_32WebTransportStreamIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__14spanIKhLm18446744073709551615EEEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B4350;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23NetworkTransportSession19SendStreamSendBytesEN6WebKit23NetworkTransportSessionES8_FvNS_23ObjectIdentifierGenericINS7_32WebTransportStreamIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__14spanIKhLm18446744073709551615EEEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B4350;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23NetworkTransportSession19SendStreamSendBytesEN6WebKit23NetworkTransportSessionES8_FvNS_23ObjectIdentifierGenericINS7_32WebTransportStreamIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__14spanIKhLm18446744073709551615EEEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3045;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23NetworkTransportSession15StreamSendBytesEN6WebKit23NetworkTransportSessionES8_FvNS_23ObjectIdentifierGenericINS7_32WebTransportStreamIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__14spanIKhLm18446744073709551615EEEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B4378;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23NetworkTransportSession15StreamSendBytesEN6WebKit23NetworkTransportSessionES8_FvNS_23ObjectIdentifierGenericINS7_32WebTransportStreamIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__14spanIKhLm18446744073709551615EEEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B4378;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23NetworkTransportSession15StreamSendBytesEN6WebKit23NetworkTransportSessionES8_FvNS_23ObjectIdentifierGenericINS7_32WebTransportStreamIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__14spanIKhLm18446744073709551615EEEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3046;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<unsigned int,WTF::CString>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<unsigned int,WTF::CString>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<unsigned int,WTF::CString>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int *v8;
  int v9;
  uint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v4 = a1[1];
  v5 = *a1;
  v6 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v4 < v6 || v4 - v6 <= 3)
  {
    v12 = 0;
    v13 = 0;
    *a1 = 0;
    a1[1] = 0;
    v14 = a1[3];
    if (v14)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v14 + 16))(v14, v5, v4);
        v13 = *a1;
        v12 = a1[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
    }
    goto LABEL_12;
  }
  v8 = (int *)(v5 + v6);
  a1[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v12 = v4;
    v13 = 0;
LABEL_12:
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
    {
      if (v12)
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v13);
    }
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return result;
  }
  v9 = *v8;
  result = IPC::ArgumentCoder<WTF::CString,void>::decode(a1, (uint64_t)&v17);
  if (v18)
  {
    *(_DWORD *)a2 = v9;
    *(_QWORD *)(a2 + 8) = v17;
    v11 = 1;
  }
  else
  {
    v15 = *a1;
    v16 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result && v16)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v15);
    v11 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 16) = v11;
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WTF::String,BOOL>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::String,BOOL>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WTF::String,BOOL>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;

  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v6);
  if (v7)
  {
    result = (WTF::StringImpl *)IPC::ArgumentCoder<std::tuple<WTF::String,BOOL>,void>::decode<IPC::Decoder,WTF::String>(a1, (uint64_t *)&v6, a2);
    if (v7)
    {
      result = v6;
      v6 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[16] = 0;
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WTF::String,BOOL>,void>::decode<IPC::Decoder,WTF::String>@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  char v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;

  v4 = result[1];
  v5 = *result;
  v6 = result[2] - *result;
  if (v4 <= v6)
  {
    v13 = 0;
    v14 = 0;
    *result = 0;
    result[1] = 0;
    v15 = result[3];
    if (v15)
    {
      v18 = result;
      v21 = a3;
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
        result = v18;
        a3 = v21;
        v14 = *v18;
        v13 = v18[1];
      }
      else
      {
        v13 = 0;
        v14 = 0;
      }
    }
    goto LABEL_11;
  }
  v7 = (unsigned __int8 *)(v5 + v6);
  result[2] = v7 + 1;
  if (!v5)
  {
    v13 = v4;
    v14 = 0;
LABEL_11:
    v4 = 0;
    v5 = 0;
    *result = 0;
    result[1] = 0;
    v16 = result[3];
    if (v16)
    {
      v17 = result;
      v20 = a3;
      if (v13)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v16 + 16))(v16, v14, v13);
        result = v17;
        a3 = v20;
        v5 = *v17;
        v4 = v17[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
LABEL_12:
    *result = 0;
    result[1] = 0;
    result = (_QWORD *)result[3];
    if (!result)
    {
LABEL_13:
      v12 = 0;
      *a3 = 0;
      goto LABEL_9;
    }
LABEL_15:
    if (v4)
    {
      v19 = a3;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
      a3 = v19;
    }
    goto LABEL_13;
  }
  v8 = *v7;
  if (v8 >= 2)
    goto LABEL_12;
  if (!*((_BYTE *)a2 + 8))
  {
    __break(1u);
    goto LABEL_15;
  }
  v9 = v8 == 0;
  v10 = *a2;
  v11 = !v9;
  *a2 = 0;
  *(_QWORD *)a3 = v10;
  a3[8] = v11;
  v12 = 1;
LABEL_9:
  a3[16] = v12;
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection39SetPushAndNotificationsEnabledForOriginEN8WebPushD20PushClientConnectionES8_FvRKNS_6StringEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(_QWORD *a1)
{
  _DWORD *v2;
  uint64_t v3;

  *a1 = &off_1E34B43A0;
  v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[4];
  }
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection39SetPushAndNotificationsEnabledForOriginEN8WebPushD20PushClientConnectionES8_FvRKNS_6StringEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34B43A0;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection39SetPushAndNotificationsEnabledForOriginEN8WebPushD20PushClientConnectionES8_FvRKNS_6StringEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = WTF::fastMalloc((WTF *)0x240);
  v3 = *(_QWORD *)(a1 + 8);
  *(_WORD *)v2 = 3063;
  *(_QWORD *)(v2 + 8) = v3;
  *(_QWORD *)(v2 + 528) = v2 + 16;
  *(_QWORD *)(v2 + 536) = v2 + 16;
  *(_OWORD *)(v2 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v2 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v2);
  v8 = (IPC::Encoder *)v2;
  (*(void (**)(_QWORD, IPC::Encoder **))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), &v8);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection21GetPendingPushMessageEN8WebPushD20PushClientConnectionES8_FvONS_17CompletionHandlerIFvRKNSt3__18optionalIN6WebKit14WebPushMessageEEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSG_EED1Ev(_QWORD *a1)
{
  _DWORD *v2;
  uint64_t v3;

  *a1 = &off_1E34B43C8;
  v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[4];
  }
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection21GetPendingPushMessageEN8WebPushD20PushClientConnectionES8_FvONS_17CompletionHandlerIFvRKNSt3__18optionalIN6WebKit14WebPushMessageEEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSG_EED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34B43C8;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection21GetPendingPushMessageEN8WebPushD20PushClientConnectionES8_FvONS_17CompletionHandlerIFvRKNSt3__18optionalIN6WebKit14WebPushMessageEEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSG_EE4callESG_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  _QWORD *v12;
  IPC::Encoder *v13;

  v4 = WTF::fastMalloc((WTF *)0x240);
  v5 = *(_QWORD *)(a1 + 8);
  *(_WORD *)v4 = 3052;
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v13 = (IPC::Encoder *)v4;
  v6 = *(unsigned __int8 *)(a2 + 216);
  v7 = IPC::Encoder::grow((IPC::Encoder *)v4, 1uLL, 1);
  if (v6)
  {
    *v7 = 1;
    if (!*(_BYTE *)(a2 + 216))
    {
      v12 = std::__throw_bad_optional_access[abi:sn180100]();
      return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection22GetPendingPushMessagesEN8WebPushD20PushClientConnectionES8_FvONS_17CompletionHandlerIFvRKNS_6VectorIN6WebKit14WebPushMessageELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(v12);
    }
    IPC::ArgumentCoder<WebKit::WebPushMessage,void>::encode((IPC::Encoder *)v4, a2);
  }
  else
  {
    *v7 = 0;
  }
  (*(void (**)(_QWORD, IPC::Encoder **))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), &v13);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection22GetPendingPushMessagesEN8WebPushD20PushClientConnectionES8_FvONS_17CompletionHandlerIFvRKNS_6VectorIN6WebKit14WebPushMessageELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(_QWORD *a1)
{
  _DWORD *v2;
  uint64_t v3;

  *a1 = &off_1E34B43F0;
  v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[4];
  }
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection22GetPendingPushMessagesEN8WebPushD20PushClientConnectionES8_FvONS_17CompletionHandlerIFvRKNS_6VectorIN6WebKit14WebPushMessageELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34B43F0;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection22GetPendingPushMessagesEN8WebPushD20PushClientConnectionES8_FvONS_17CompletionHandlerIFvRKNS_6VectorIN6WebKit14WebPushMessageELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = WTF::fastMalloc((WTF *)0x240);
  v5 = *(_QWORD *)(a1 + 8);
  *(_WORD *)v4 = 3053;
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v10 = (IPC::Encoder *)v4;
  IPC::VectorArgumentCoder<false,WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v4, a2);
  (*(void (**)(_QWORD, IPC::Encoder **))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), &v10);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection27InjectPushMessageForTestingEN8WebPushD20PushClientConnectionES8_FvON6WebKit8WebPushD21PushMessageForTestingEONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSG_EED1Ev(_QWORD *a1)
{
  _DWORD *v2;
  uint64_t v3;

  *a1 = &off_1E34B4418;
  v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[4];
  }
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection27InjectPushMessageForTestingEN8WebPushD20PushClientConnectionES8_FvON6WebKit8WebPushD21PushMessageForTestingEONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSG_EED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34B4418;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection27InjectPushMessageForTestingEN8WebPushD20PushClientConnectionES8_FvON6WebKit8WebPushD21PushMessageForTestingEONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSG_EE4callESG_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = WTF::fastMalloc((WTF *)0x240);
  v5 = *(_QWORD *)(a1 + 8);
  *(_WORD *)v4 = 3059;
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v10 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v4, a2);
  (*(void (**)(_QWORD, IPC::Encoder **))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), &v10);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection36InjectEncryptedPushMessageForTestingEN8WebPushD20PushClientConnectionES8_FvRKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(_QWORD *a1)
{
  _DWORD *v2;
  uint64_t v3;

  *a1 = &off_1E34B4440;
  v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[4];
  }
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection36InjectEncryptedPushMessageForTestingEN8WebPushD20PushClientConnectionES8_FvRKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34B4440;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection36InjectEncryptedPushMessageForTestingEN8WebPushD20PushClientConnectionES8_FvRKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = WTF::fastMalloc((WTF *)0x240);
  v5 = *(_QWORD *)(a1 + 8);
  *(_WORD *)v4 = 3058;
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v19 = (IPC::Encoder *)v4;
  v6 = *(_QWORD *)(v4 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v4 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v4 + 528), *(_QWORD *)(v4 + 544));
    v18 = *(void **)(v4 + 528);
    if (v18 != (void *)(v4 + 16))
      munmap(v18, *(_QWORD *)(v4 + 552));
    *(_QWORD *)(v4 + 528) = v9;
    *(_QWORD *)(v4 + 552) = v17;
    v10 = *(_QWORD *)(v4 + 544);
  }
  else
  {
    v9 = *(char **)(v4 + 528);
    v10 = *(_QWORD *)(v4 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v4 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v4 + 528) + v6);
  *(_QWORD *)(v4 + 536) = v11 + 1;
  *v11 = a2;
  (*(void (**)(_QWORD, IPC::Encoder **))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), &v19);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection22SubscribeToPushServiceEN8WebPushD20PushClientConnectionES8_FvONS_3URLERKNS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore20PushSubscriptionDataENSL_13ExceptionDataEEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(_QWORD *a1)
{
  _DWORD *v2;
  uint64_t v3;

  *a1 = &off_1E34B4468;
  v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[4];
  }
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection22SubscribeToPushServiceEN8WebPushD20PushClientConnectionES8_FvONS_3URLERKNS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore20PushSubscriptionDataENSL_13ExceptionDataEEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34B4468;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection22SubscribeToPushServiceEN8WebPushD20PushClientConnectionES8_FvONS_3URLERKNS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore20PushSubscriptionDataENSL_13ExceptionDataEEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSQ_EE4callESQ_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  _QWORD *v12;
  IPC::Encoder *v13;

  v4 = WTF::fastMalloc((WTF *)0x240);
  v5 = *(_QWORD *)(a1 + 8);
  *(_WORD *)v4 = 3064;
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v13 = (IPC::Encoder *)v4;
  v6 = *(_DWORD *)(a2 + 80);
  v7 = IPC::Encoder::grow((IPC::Encoder *)v4, 1uLL, 1);
  if (v6)
  {
    *v7 = 0;
    if (*(_DWORD *)(a2 + 80) == 1)
    {
      IPC::ArgumentCoder<WebCore::Exception,void>::encode((IPC::Encoder *)v4, (char *)a2);
      goto LABEL_6;
    }
LABEL_9:
    v12 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection26UnsubscribeFromPushServiceEN8WebPushD20PushClientConnectionES8_FvONS_3URLENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore30PushSubscriptionIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIbNSE_13ExceptionDataEEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSR_EED1Ev(v12);
  }
  *v7 = 1;
  if (*(_DWORD *)(a2 + 80))
    goto LABEL_9;
  IPC::ArgumentCoder<WebCore::PushSubscriptionData,void>::encode((IPC::Encoder *)v4, (uint64_t *)a2);
LABEL_6:
  (*(void (**)(_QWORD, IPC::Encoder **))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), &v13);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection26UnsubscribeFromPushServiceEN8WebPushD20PushClientConnectionES8_FvONS_3URLENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore30PushSubscriptionIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIbNSE_13ExceptionDataEEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSR_EED1Ev(_QWORD *a1)
{
  _DWORD *v2;
  uint64_t v3;

  *a1 = &off_1E34B4490;
  v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[4];
  }
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection26UnsubscribeFromPushServiceEN8WebPushD20PushClientConnectionES8_FvONS_3URLENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore30PushSubscriptionIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIbNSE_13ExceptionDataEEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSR_EED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34B4490;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection26UnsubscribeFromPushServiceEN8WebPushD20PushClientConnectionES8_FvONS_3URLENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore30PushSubscriptionIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIbNSE_13ExceptionDataEEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSR_EE4callESR_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  char v8;
  void *v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  _QWORD *v13;
  IPC::Encoder *v14;

  v4 = WTF::fastMalloc((WTF *)0x240);
  v5 = *(_QWORD *)(a1 + 8);
  *(_WORD *)v4 = 3065;
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v14 = (IPC::Encoder *)v4;
  v6 = *(_DWORD *)(a2 + 16);
  v7 = IPC::Encoder::grow((IPC::Encoder *)v4, 1uLL, 1);
  if (v6)
  {
    *v7 = 0;
    if (*(_DWORD *)(a2 + 16) == 1)
    {
      IPC::ArgumentCoder<WebCore::Exception,void>::encode((IPC::Encoder *)v4, (char *)a2);
      goto LABEL_6;
    }
LABEL_9:
    v13 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection19GetPushSubscriptionEN8WebPushD20PushClientConnectionES8_FvONS_3URLEONS_17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedINSt3__18optionalIN7WebCore20PushSubscriptionDataEEENSH_13ExceptionDataEEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(v13);
  }
  *v7 = 1;
  if (*(_DWORD *)(a2 + 16))
    goto LABEL_9;
  v8 = *(_BYTE *)a2;
  *IPC::Encoder::grow((IPC::Encoder *)v4, 1uLL, 1) = v8;
LABEL_6:
  (*(void (**)(_QWORD, IPC::Encoder **))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), &v14);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection19GetPushSubscriptionEN8WebPushD20PushClientConnectionES8_FvONS_3URLEONS_17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedINSt3__18optionalIN7WebCore20PushSubscriptionDataEEENSH_13ExceptionDataEEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(_QWORD *a1)
{
  _DWORD *v2;
  uint64_t v3;

  *a1 = &off_1E34B44B8;
  v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[4];
  }
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection19GetPushSubscriptionEN8WebPushD20PushClientConnectionES8_FvONS_3URLEONS_17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedINSt3__18optionalIN7WebCore20PushSubscriptionDataEEENSH_13ExceptionDataEEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSN_EED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34B44B8;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection19GetPushSubscriptionEN8WebPushD20PushClientConnectionES8_FvONS_3URLEONS_17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedINSt3__18optionalIN7WebCore20PushSubscriptionDataEEENSH_13ExceptionDataEEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSN_EE4callESN_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  int v8;
  char *v9;
  void *v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  _QWORD *v14;
  IPC::Encoder *v15;

  v4 = WTF::fastMalloc((WTF *)0x240);
  v5 = *(_QWORD *)(a1 + 8);
  *(_WORD *)v4 = 3055;
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v15 = (IPC::Encoder *)v4;
  v6 = *(_DWORD *)(a2 + 96);
  v7 = IPC::Encoder::grow((IPC::Encoder *)v4, 1uLL, 1);
  if (v6)
  {
    *v7 = 0;
    if (*(_DWORD *)(a2 + 96) == 1)
    {
      IPC::ArgumentCoder<WebCore::Exception,void>::encode((IPC::Encoder *)v4, (char *)(a2 + 8));
      goto LABEL_9;
    }
    goto LABEL_12;
  }
  *v7 = 1;
  if (*(_DWORD *)(a2 + 96))
  {
LABEL_12:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_13;
  }
  v8 = *(unsigned __int8 *)(a2 + 88);
  v9 = IPC::Encoder::grow((IPC::Encoder *)v4, 1uLL, 1);
  if (v8)
  {
    *v9 = 1;
    if (!*(_BYTE *)(a2 + 88))
    {
LABEL_13:
      v14 = std::__throw_bad_optional_access[abi:sn180100]();
      return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection22GetPushPermissionStateEN8WebPushD20PushClientConnectionES8_FvONS_3URLEONS_17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIhN7WebCore13ExceptionDataEEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED1Ev(v14);
    }
    IPC::ArgumentCoder<WebCore::PushSubscriptionData,void>::encode((IPC::Encoder *)v4, (uint64_t *)(a2 + 8));
  }
  else
  {
    *v9 = 0;
  }
LABEL_9:
  (*(void (**)(_QWORD, IPC::Encoder **))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), &v15);
  result = v15;
  v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection22GetPushPermissionStateEN8WebPushD20PushClientConnectionES8_FvONS_3URLEONS_17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIhN7WebCore13ExceptionDataEEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED1Ev(_QWORD *a1)
{
  _DWORD *v2;
  uint64_t v3;

  *a1 = &off_1E34B44E0;
  v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[4];
  }
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection22GetPushPermissionStateEN8WebPushD20PushClientConnectionES8_FvONS_3URLEONS_17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIhN7WebCore13ExceptionDataEEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34B44E0;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection22GetPushPermissionStateEN8WebPushD20PushClientConnectionES8_FvONS_3URLEONS_17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIhN7WebCore13ExceptionDataEEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_EE4callESJ_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  char v8;
  void *v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  _QWORD *v13;
  IPC::Encoder *v14;

  v4 = WTF::fastMalloc((WTF *)0x240);
  v5 = *(_QWORD *)(a1 + 8);
  *(_WORD *)v4 = 3054;
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v14 = (IPC::Encoder *)v4;
  v6 = *(_DWORD *)(a2 + 16);
  v7 = IPC::Encoder::grow((IPC::Encoder *)v4, 1uLL, 1);
  if (v6)
  {
    *v7 = 0;
    if (*(_DWORD *)(a2 + 16) == 1)
    {
      IPC::ArgumentCoder<WebCore::Exception,void>::encode((IPC::Encoder *)v4, (char *)a2);
      goto LABEL_6;
    }
LABEL_9:
    v13 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection24IncrementSilentPushCountEN8WebPushD20PushClientConnectionES8_FvON7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvjEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJjEED1Ev(v13);
  }
  *v7 = 1;
  if (*(_DWORD *)(a2 + 16))
    goto LABEL_9;
  v8 = *(_BYTE *)a2;
  *IPC::Encoder::grow((IPC::Encoder *)v4, 1uLL, 1) = v8;
LABEL_6:
  (*(void (**)(_QWORD, IPC::Encoder **))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), &v14);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection24IncrementSilentPushCountEN8WebPushD20PushClientConnectionES8_FvON7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvjEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJjEED1Ev(_QWORD *a1)
{
  _DWORD *v2;
  uint64_t v3;

  *a1 = &off_1E34B4518;
  v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[4];
  }
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection24IncrementSilentPushCountEN8WebPushD20PushClientConnectionES8_FvON7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvjEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJjEED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34B4518;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection24IncrementSilentPushCountEN8WebPushD20PushClientConnectionES8_FvON7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvjEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJjEE4callEj(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = WTF::fastMalloc((WTF *)0x240);
  v5 = *(_QWORD *)(a1 + 8);
  *(_WORD *)v4 = 3057;
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v10 = (IPC::Encoder *)v4;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v4, 4uLL, 4) = a2;
  (*(void (**)(_QWORD, IPC::Encoder **))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), &v10);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection26RemoveAllPushSubscriptionsEN8WebPushD20PushClientConnectionES8_FvONS_17CompletionHandlerIFvjEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJjEED1Ev(_QWORD *a1)
{
  _DWORD *v2;
  uint64_t v3;

  *a1 = &off_1E34B4540;
  v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[4];
  }
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection26RemoveAllPushSubscriptionsEN8WebPushD20PushClientConnectionES8_FvONS_17CompletionHandlerIFvjEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJjEED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34B4540;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection26RemoveAllPushSubscriptionsEN8WebPushD20PushClientConnectionES8_FvONS_17CompletionHandlerIFvjEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJjEE4callEj(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = WTF::fastMalloc((WTF *)0x240);
  v5 = *(_QWORD *)(a1 + 8);
  *(_WORD *)v4 = 3060;
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v10 = (IPC::Encoder *)v4;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v4, 4uLL, 4) = a2;
  (*(void (**)(_QWORD, IPC::Encoder **))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), &v10);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection32RemovePushSubscriptionsForOriginEN8WebPushD20PushClientConnectionES8_FvON7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvjEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJjEED1Ev(_QWORD *a1)
{
  _DWORD *v2;
  uint64_t v3;

  *a1 = &off_1E34B4568;
  v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[4];
  }
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection32RemovePushSubscriptionsForOriginEN8WebPushD20PushClientConnectionES8_FvON7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvjEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJjEED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34B4568;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection32RemovePushSubscriptionsForOriginEN8WebPushD20PushClientConnectionES8_FvON7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvjEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJjEE4callEj(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = WTF::fastMalloc((WTF *)0x240);
  v5 = *(_QWORD *)(a1 + 8);
  *(_WORD *)v4 = 3061;
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v10 = (IPC::Encoder *)v4;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v4, 4uLL, 4) = a2;
  (*(void (**)(_QWORD, IPC::Encoder **))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), &v10);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection24SetPublicTokenForTestingEN8WebPushD20PushClientConnectionES8_FvRKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(_QWORD *a1)
{
  _DWORD *v2;
  uint64_t v3;

  *a1 = &off_1E34B4590;
  v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[4];
  }
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection24SetPublicTokenForTestingEN8WebPushD20PushClientConnectionES8_FvRKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34B4590;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection24SetPublicTokenForTestingEN8WebPushD20PushClientConnectionES8_FvRKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = WTF::fastMalloc((WTF *)0x240);
  v3 = *(_QWORD *)(a1 + 8);
  *(_WORD *)v2 = 3062;
  *(_QWORD *)(v2 + 8) = v3;
  *(_QWORD *)(v2 + 528) = v2 + 16;
  *(_QWORD *)(v2 + 536) = v2 + 16;
  *(_OWORD *)(v2 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v2 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v2);
  v8 = (IPC::Encoder *)v2;
  (*(void (**)(_QWORD, IPC::Encoder **))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), &v8);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection23GetPushTopicsForTestingEN8WebPushD20PushClientConnectionES8_FvONS_17CompletionHandlerIFvNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEESE_EEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSE_SE_EED1Ev(_QWORD *a1)
{
  _DWORD *v2;
  uint64_t v3;

  *a1 = &off_1E34B45B8;
  v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[4];
  }
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection23GetPushTopicsForTestingEN8WebPushD20PushClientConnectionES8_FvONS_17CompletionHandlerIFvNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEESE_EEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSE_SE_EED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34B45B8;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection23GetPushTopicsForTestingEN8WebPushD20PushClientConnectionES8_FvONS_17CompletionHandlerIFvNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEESE_EEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSE_SE_EE4callESE_SE_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v6 = WTF::fastMalloc((WTF *)0x240);
  v7 = *(_QWORD *)(a1 + 8);
  *(_WORD *)v6 = 3056;
  *(_QWORD *)(v6 + 8) = v7;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v12 = (IPC::Encoder *)v6;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v6, a2);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v6, a3);
  (*(void (**)(_QWORD, IPC::Encoder **))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), &v12);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection29DidShowNotificationForTestingEN8WebPushD20PushClientConnectionES8_FvONS_3URLEONS_17CompletionHandlerIFvvEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(_QWORD *a1)
{
  _DWORD *v2;
  uint64_t v3;

  *a1 = &off_1E34B45E0;
  v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[4];
  }
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection29DidShowNotificationForTestingEN8WebPushD20PushClientConnectionES8_FvONS_3URLEONS_17CompletionHandlerIFvvEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34B45E0;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection29DidShowNotificationForTestingEN8WebPushD20PushClientConnectionES8_FvONS_3URLEONS_17CompletionHandlerIFvvEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = WTF::fastMalloc((WTF *)0x240);
  v3 = *(_QWORD *)(a1 + 8);
  *(_WORD *)v2 = 3051;
  *(_QWORD *)(v2 + 8) = v3;
  *(_QWORD *)(v2 + 528) = v2 + 16;
  *(_QWORD *)(v2 + 536) = v2 + 16;
  *(_OWORD *)(v2 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v2 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v2);
  v8 = (IPC::Encoder *)v2;
  (*(void (**)(_QWORD, IPC::Encoder **))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), &v8);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

_QWORD *IPC::Decoder::decode<std::tuple<WebCore::RTCDataChannelIdentifier,BOOL,std::span<unsigned char const,18446744073709551615ul>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  BOOL v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  __int128 v18;
  char v19;
  __int128 v20;
  char v21;

  IPC::Decoder::decode<WebCore::RTCDataChannelIdentifier>(a2, (uint64_t)&v18);
  if (!v19)
    goto LABEL_11;
  v4 = a2[1];
  v5 = *a2;
  v6 = a2[2] - *a2;
  if (v4 <= v6)
  {
    v11 = 0;
    v12 = 0;
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
        v12 = *a2;
        v11 = a2[1];
      }
      else
      {
        v11 = 0;
        v12 = 0;
      }
    }
    goto LABEL_9;
  }
  v7 = (unsigned __int8 *)(v5 + v6);
  a2[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v11 = v4;
    v12 = 0;
LABEL_9:
    v4 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14)
    {
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v12, v11);
        v5 = *a2;
        v4 = a2[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
    goto LABEL_10;
  }
  v8 = *v7;
  if (v8 < 2)
  {
    v9 = v8 != 0;
    result = IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a2, (uint64_t)&v20);
    if (v21)
    {
      if (v19)
      {
        *(_OWORD *)a1 = v18;
        *(_BYTE *)(a1 + 16) = v9;
        *(_OWORD *)(a1 + 24) = v20;
        *(_BYTE *)(a1 + 40) = 1;
        return result;
      }
      __break(1u);
      goto LABEL_18;
    }
    goto LABEL_11;
  }
LABEL_10:
  *a2 = 0;
  a2[1] = 0;
  result = (_QWORD *)a2[3];
  if (result)
  {
LABEL_18:
    if (v4)
      (*(void (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
LABEL_11:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 40) = 0;
  v15 = *a2;
  v16 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (_QWORD *)a2[3];
  if (result)
    v17 = v16 == 0;
  else
    v17 = 1;
  if (!v17)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v15);
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WebCore::RTCDataChannelIdentifier>>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  __int128 v8;
  char v9;

  result = IPC::Decoder::decode<WebCore::RTCDataChannelIdentifier>(a2, (uint64_t)&v8);
  if (v9)
  {
    *(_OWORD *)a1 = v8;
    *(_BYTE *)(a1 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::RTCDataChannelIdentifier,WebCore::RTCDataChannelState>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  __int128 v8;
  char v9;

  IPC::Decoder::decode<WebCore::RTCDataChannelIdentifier>(a2, (uint64_t)&v8);
  if (v9
    && (result = IPC::Decoder::decode<WebKit::WebExtensionContentWorldType>(a2), (unsigned __int16)result >= 0x100u))
  {
    if (v9)
    {
      *(_OWORD *)a1 = v8;
      *(_BYTE *)(a1 + 16) = result;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

_QWORD *IPC::Decoder::decode<std::tuple<WebCore::RTCDataChannelIdentifier,WebCore::RTCErrorDetailType,WTF::String>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  __int128 v17;
  unsigned __int8 v18;
  uint64_t v19;
  char v20;

  IPC::Decoder::decode<WebCore::RTCDataChannelIdentifier>(a2, (uint64_t)&v17);
  if (!v18)
    goto LABEL_11;
  v4 = a2[1];
  v5 = *a2;
  v6 = a2[2] - *a2;
  if (v4 <= v6)
  {
    v11 = 0;
    v10 = 0;
    *a2 = 0;
    a2[1] = 0;
    v12 = a2[3];
    if (v12)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        v10 = *a2;
        v11 = a2[1];
      }
      else
      {
        v11 = 0;
        v10 = 0;
      }
    }
LABEL_9:
    v4 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    result = (_QWORD *)a2[3];
    if (!result)
      goto LABEL_10;
    goto LABEL_20;
  }
  v7 = (unsigned __int8 *)(v5 + v6);
  a2[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v11 = v4;
    v10 = 0;
    goto LABEL_9;
  }
  v8 = *v7;
  if (v8 >= 5)
    goto LABEL_10;
  result = IPC::Decoder::decode<WTF::String>(a2, &v19);
  if (v20)
  {
    v11 = v18;
    if (v18)
    {
      *(_OWORD *)a1 = v17;
      *(_BYTE *)(a1 + 16) = v8;
      *(_QWORD *)(a1 + 24) = v19;
      *(_BYTE *)(a1 + 32) = 1;
      return result;
    }
    __break(1u);
LABEL_20:
    if (v11)
    {
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(*result + 16))(result, v10, v11);
      v5 = *a2;
      v4 = a2[1];
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
LABEL_10:
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13 && v4)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v5);
  }
LABEL_11:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 32) = 0;
  v14 = *a2;
  v15 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (_QWORD *)a2[3];
  if (result)
    v16 = v15 == 0;
  else
    v16 = 1;
  if (!v16)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v14);
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WebCore::RTCDataChannelIdentifier,unsigned long>>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  __int128 v18;
  char v19;

  result = IPC::Decoder::decode<WebCore::RTCDataChannelIdentifier>(a2, (uint64_t)&v18);
  if (v19)
  {
    v5 = a2[1];
    v6 = *a2;
    v7 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
    if (v5 >= v7 && v5 - v7 > 7)
    {
      v9 = (uint64_t *)(v6 + v7);
      a2[2] = (uint64_t)(v9 + 1);
      if (v6)
      {
        v10 = *v9;
        *(_OWORD *)a1 = v18;
        *(_QWORD *)(a1 + 16) = v10;
        *(_BYTE *)(a1 + 24) = 1;
        return result;
      }
      v11 = v5;
      v12 = 0;
    }
    else
    {
      v11 = 0;
      v12 = 0;
      *a2 = 0;
      a2[1] = 0;
      v13 = a2[3];
      if (v13)
      {
        if (v5)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v6, v5);
          v12 = *a2;
          v11 = a2[1];
        }
        else
        {
          v11 = 0;
          v12 = 0;
        }
      }
    }
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14 && v11)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v12);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  v15 = *a2;
  v16 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
    v17 = v16 == 0;
  else
    v17 = 1;
  if (!v17)
    return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v15);
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::WebGPU::DeviceDescriptor,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  void *v3;
  WTF *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(a1 + 40))
  {
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 24, a2);
    v4 = *(WTF **)(a1 + 8);
    if (v4)
    {
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
      WTF::fastFree(v4, v3);
    }
    v5 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, (WTF::StringImpl *)v3);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages13RemoteAdapter13RequestDeviceEN6WebKit13RemoteAdapterES8_FvRKNS7_6WebGPU16DeviceDescriptorENS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEESH_ONS_17CompletionHandlerIFvONS9_17SupportedFeaturesEONS9_15SupportedLimitsEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_SM_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B4608;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages13RemoteAdapter13RequestDeviceEN6WebKit13RemoteAdapterES8_FvRKNS7_6WebGPU16DeviceDescriptorENS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEESH_ONS_17CompletionHandlerIFvONS9_17SupportedFeaturesEONS9_15SupportedLimitsEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_SM_EED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B4608;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages13RemoteAdapter13RequestDeviceEN6WebKit13RemoteAdapterES8_FvRKNS7_6WebGPU16DeviceDescriptorENS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEESH_ONS_17CompletionHandlerIFvONS9_17SupportedFeaturesEONS9_15SupportedLimitsEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_SM_EE4callESK_SM_(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  char *v13;
  char *v14;
  unint64_t v15;
  IPC::Encoder *result;
  unint64_t v18;
  uint64_t v20;
  void *v21;
  WTF *v22;
  void *v23;
  IPC::Encoder *v24;
  unint64_t v25;
  unint64_t v26;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v24, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v24);
  v9 = (char *)*(unsigned __int8 *)(a1 + 16);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_8;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v3 + 112))
  {
LABEL_24:
    v20 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v20 = 2823;
    *(_QWORD *)(v20 + 8) = v4;
    *(_QWORD *)(v20 + 528) = v20 + 16;
    *(_QWORD *)(v20 + 536) = v20 + 16;
    *(_OWORD *)(v20 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v20 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v20);
    v24 = (IPC::Encoder *)v20;
    IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v20, a2);
    IPC::ArgumentCoder<WebKit::WebGPU::SupportedLimits,void>::encode((IPC::Encoder *)v20, a3);
    IPC::Connection::sendMessageImpl(*(_QWORD *)(v3 + 32), (uint64_t *)&v24, 0, 0);
    result = v24;
    v24 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v21);
      return (IPC::Encoder *)WTF::fastFree(v22, v23);
    }
    return result;
  }
  v10 = *(_QWORD *)(v3 + 48);
  v9 = *(char **)(v3 + 56);
  v8 = *((_QWORD *)v9 + 1);
  v11 = v10 - 1;
  if (v10 != 1)
  {
    v12 = v8 >= 0x100;
    v8 -= 256;
    if (v12)
    {
      v9 = (char *)*((_QWORD *)v9 + 2);
      if (!v10)
      {
LABEL_9:
        v11 = v8;
        goto LABEL_10;
      }
      if (v8 >= v11)
        goto LABEL_10;
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v8 < 0x100)
    goto LABEL_8;
  v11 = 0;
  v9 = (char *)*((_QWORD *)v9 + 2);
LABEL_10:
  v13 = v9 + 256;
  v24 = (IPC::Encoder *)(v9 + 256);
  v25 = v11;
  v26 = 0;
  v14 = (char *)((unint64_t)(v9 + 257) & 0xFFFFFFFFFFFFFFFELL);
  v12 = v14 >= v9 + 256;
  v15 = v14 - (v9 + 256);
  if (v12)
  {
    if (v15 > 0xFFFFFFFFFFFFFFFDLL || v15 + 2 > v11)
    {
      v25 = 0;
    }
    else
    {
      *(_WORD *)&v13[v15] = 2823;
      v26 = v15 + 2;
    }
  }
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(&v24, a2);
  result = (IPC::Encoder *)IPC::ArgumentCoder<WebKit::WebGPU::SupportedLimits,void>::encode((uint64_t *)&v24, (uint64_t)a3);
  if (!v25)
  {
    v18 = v14 - v13;
    if (v14 >= v13 && v18 <= 0xFFFFFFFFFFFFFFFDLL && v18 + 2 <= v11)
      *(_WORD *)v14 = 2821;
    goto LABEL_24;
  }
  return result;
}

unsigned int **WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v7;
  void *v8;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      IPC::StreamServerConnection::~StreamServerConnection((IPC::StreamServerConnection *)v2);
      WTF::fastFree(v7, v8);
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages54RemoteAudioMediaStreamTrackRendererInternalUnitManager10CreateUnitEN6WebKit54RemoteAudioMediaStreamTrackRendererInternalUnitManagerES8_FvNS_23ObjectIdentifierGenericINS7_55AudioMediaStreamTrackRendererInternalUnitIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvNSt3__18optionalIN7WebCore24CAAudioStreamDescriptionEEEmEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_mEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B4630;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages54RemoteAudioMediaStreamTrackRendererInternalUnitManager10CreateUnitEN6WebKit54RemoteAudioMediaStreamTrackRendererInternalUnitManagerES8_FvNS_23ObjectIdentifierGenericINS7_55AudioMediaStreamTrackRendererInternalUnitIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvNSt3__18optionalIN7WebCore24CAAudioStreamDescriptionEEEmEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_mEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B4630;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages54RemoteAudioMediaStreamTrackRendererInternalUnitManager10CreateUnitEN6WebKit54RemoteAudioMediaStreamTrackRendererInternalUnitManagerES8_FvNS_23ObjectIdentifierGenericINS7_55AudioMediaStreamTrackRendererInternalUnitIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvNSt3__18optionalIN7WebCore24CAAudioStreamDescriptionEEEmEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_mEE4callESJ_m(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  char *v9;
  _QWORD *v10;
  void *v11;
  IPC::Encoder *result;
  WTF *v13;
  void *v14;
  id v15;
  IPC::Encoder *v16;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 3068;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v16 = (IPC::Encoder *)v7;
  v8 = a2[80];
  v9 = IPC::Encoder::grow((IPC::Encoder *)v7, 1uLL, 1);
  if (v8)
  {
    *v9 = 1;
    if (!a2[80])
    {
      v15 = std::__throw_bad_optional_access[abi:sn180100]();
      return (IPC::Encoder *)ModelServiceInitializer(v15);
    }
    v10 = (_QWORD *)WebCore::CAAudioStreamDescription::streamDescription((WebCore::CAAudioStreamDescription *)a2);
    IPC::ArgumentCoder<AudioStreamBasicDescription,void>::encode((IPC::Encoder *)v7, v10);
  }
  else
  {
    *v9 = 0;
  }
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 8uLL, 8) = a3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v16, 0, 0);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteBarcodeDetector::didReceiveStreamMessage(unsigned __int8 ***this, uint64_t **a2, IPC::Decoder *a3)
{
  uint64_t v4;
  unsigned __int8 **v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14[2];
  unsigned __int8 **v15;
  _QWORD *v16;

  if (*((_WORD *)a3 + 25) == 705)
  {
    v4 = (uint64_t)this;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v14, a2 + 4);
    v5 = (unsigned __int8 **)v14[0];
    v6 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
    if (v7)
    {
      v8 = v6;
      v9 = (uint64_t *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v10)
      {
        v11 = v9;
        v14[1] = v9;
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v5);
        v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v12 = off_1E34B4750;
        v12[1] = v11;
        v15 = 0;
        v16 = v12;
        v12[2] = v5;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v15);
        WebKit::RemoteBarcodeDetector::detect(v4, v8, (uint64_t *)&v16);
        v13 = (uint64_t)v16;
        v16 = 0;
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      }
    }
    return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v14);
  }
  return this;
}

unsigned __int8 ***WebKit::RemoteBindGroupLayout::didReceiveStreamMessage(unsigned __int8 ***this, uint64_t **a2, IPC::Decoder *a3)
{
  unsigned __int8 ***v3;
  int v4;
  unsigned __int8 ***v5;
  WTF::StringImpl *v7;
  unsigned __int8 **v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t *v13;
  WTF::StringImpl *v14;
  char v15;

  v3 = this;
  v4 = *((unsigned __int16 *)a3 + 25);
  if (v4 == 707)
  {
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a2 + 4);
    IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)&v14);
    if (v15)
    {
      v8 = v3[2];
      v9 = (WTF::StringImpl *)v8[3];
      v10 = v14;
      v14 = 0;
      v8[3] = (unsigned __int8 *)v10;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v7);
        else
          *(_DWORD *)v9 -= 2;
      }
      (*((void (**)(unsigned __int8 **, unsigned __int8 **))*v8 + 2))(v8, v8 + 3);
      if (v15)
      {
        v12 = v14;
        v14 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v11);
          else
            *(_DWORD *)v12 -= 2;
        }
      }
    }
    v5 = (unsigned __int8 ***)&v13;
  }
  else
  {
    if (v4 != 706)
      return this;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v14, a2 + 4);
    WebKit::WebGPU::ObjectHeap::removeObject((uint64_t)v3[3][1], (uint64_t)v3[5]);
    v5 = (unsigned __int8 ***)&v14;
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v5);
}

unsigned __int8 ***WebKit::RemoteBindGroup::didReceiveStreamMessage(unsigned __int8 ***this, uint64_t **a2, IPC::Decoder *a3)
{
  unsigned __int8 ***v3;
  int v4;
  unsigned __int8 ***v5;
  WTF::StringImpl *v7;
  unsigned __int8 **v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t *v13;
  WTF::StringImpl *v14;
  char v15;

  v3 = this;
  v4 = *((unsigned __int16 *)a3 + 25);
  if (v4 == 709)
  {
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a2 + 4);
    IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)&v14);
    if (v15)
    {
      v8 = v3[2];
      v9 = (WTF::StringImpl *)v8[2];
      v10 = v14;
      v14 = 0;
      v8[2] = (unsigned __int8 *)v10;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v7);
        else
          *(_DWORD *)v9 -= 2;
      }
      (*((void (**)(unsigned __int8 **, unsigned __int8 **))*v8 + 2))(v8, v8 + 2);
      if (v15)
      {
        v12 = v14;
        v14 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v11);
          else
            *(_DWORD *)v12 -= 2;
        }
      }
    }
    v5 = (unsigned __int8 ***)&v13;
  }
  else
  {
    if (v4 != 708)
      return this;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v14, a2 + 4);
    WebKit::WebGPU::ObjectHeap::removeObject((uint64_t)v3[3][1], (uint64_t)v3[5]);
    v5 = (unsigned __int8 ***)&v14;
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v5);
}

unsigned __int8 ***WebKit::RemoteBuffer::didReceiveStreamMessage(unsigned __int8 ***this, uint64_t **a2, IPC::Decoder *a3)
{
  uint64_t *v3;
  uint64_t v5;
  unsigned __int8 **v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  char v15;
  uint64_t *v16;
  uint64_t *v17;
  char v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t *v32;
  WTF::StringImpl *v33;
  _QWORD *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned __int8 **v40;
  unsigned __int8 *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t *v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  char v51;
  WTF::StringImpl *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t **v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned __int8 **v80;
  uint64_t *v81;
  WTF::StringImpl *v82[2];
  unsigned int *v83;
  uint64_t v84;
  unsigned __int8 v85;
  uint64_t *v86;
  unsigned __int8 **v87;
  char v88;
  char v89;

  v3 = (uint64_t *)a3;
  v5 = (uint64_t)this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x2C6:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v80, a2 + 4);
      v6 = v80;
      IPC::Decoder::decode<std::optional<WebCore::SharedMemoryHandle>>(v3, (uint64_t)&v86);
      if (!v89)
      {
        LOBYTE(v82[0]) = 0;
        v85 = 0;
        goto LABEL_62;
      }
      v7 = v3[1];
      v8 = *v3;
      v9 = ((v3[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v3;
      if (v7 >= v9 && v7 - v9 > 7)
      {
        v11 = (uint64_t *)(v8 + v9);
        v3[2] = (uint64_t)(v11 + 1);
        if (!v8)
        {
          v76 = v7;
          v77 = 0;
          goto LABEL_92;
        }
        v12 = *v11;
        LOBYTE(v82[0]) = 0;
        LOBYTE(v83) = 0;
        if (v88)
        {
          WTF::MachSendRight::MachSendRight();
          v82[1] = (WTF::StringImpl *)v87;
          LOBYTE(v83) = 1;
        }
        v84 = v12;
        v13 = 1;
        goto LABEL_12;
      }
      while (1)
      {
        v76 = 0;
        v77 = 0;
        *v3 = 0;
        v3[1] = 0;
        v78 = v3[3];
        if (v78)
        {
          if (v7)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v78 + 16))(v78, v8, v7);
            v77 = *v3;
            v76 = v3[1];
          }
          else
          {
            v76 = 0;
            v77 = 0;
          }
        }
LABEL_92:
        *v3 = 0;
        v3[1] = 0;
        v79 = v3[3];
        if (v79 && v76)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v79 + 16))(v79, v77);
        v13 = 0;
        LOBYTE(v82[0]) = 0;
LABEL_12:
        v85 = v13;
        if (v89 && v88)
        {
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v86);
          v13 = v85;
        }
        if (!v13)
        {
LABEL_62:
          v56 = *v3;
          v57 = v3[1];
          *v3 = 0;
          v3[1] = 0;
          v58 = v3[3];
          if (!v58)
            goto LABEL_63;
          if (!v57)
            goto LABEL_63;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v58 + 16))(v58, v56);
          if (!v85)
            goto LABEL_63;
        }
        v14 = (uint64_t *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3);
        if (!v15)
          goto LABEL_20;
        v3 = v14;
        v86 = v14;
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v6);
        v16 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
        *v16 = (uint64_t)off_1E34B47A0;
        v16[1] = (uint64_t)v3;
        v87 = 0;
        v16[2] = (uint64_t)v6;
        v81 = v16;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v87);
        v8 = v85;
        if (v85)
        {
          WebKit::RemoteBuffer::copy(v5, (uint64_t)v82, v84, (uint64_t *)&v81);
          v17 = v81;
          v81 = 0;
          if (v17)
            (*(void (**)(uint64_t *))(*v17 + 8))(v17);
LABEL_20:
          if (v85)
          {
            if ((_BYTE)v83)
              WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v82);
          }
LABEL_63:
          v55 = (uint64_t **)&v80;
          return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v55);
        }
        __break(1u);
      }
    case 0x2C7:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v82, a2 + 4);
      if (*(_BYTE *)(v5 + 48))
        (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 16) + 32))(*(_QWORD *)(v5 + 16));
      *(_WORD *)(v5 + 48) = 0;
      (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 16) + 40))(*(_QWORD *)(v5 + 16));
      goto LABEL_60;
    case 0x2C8:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v82, a2 + 4);
      WebKit::WebGPU::ObjectHeap::removeObject(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8), *(_QWORD *)(v5 + 40));
      goto LABEL_60;
    case 0x2C9:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v81, a2 + 4);
      v37 = v3[1];
      v38 = *v3;
      v39 = v3[2] - *v3;
      if (v37 <= v39)
      {
        v61 = 0;
        v62 = 0;
        *v3 = 0;
        v3[1] = 0;
        v63 = v3[3];
        if (v63)
        {
          if (v37)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v63 + 16))(v63);
            v62 = *v3;
            v61 = v3[1];
          }
          else
          {
            v61 = 0;
            v62 = 0;
          }
        }
        goto LABEL_75;
      }
      v40 = (unsigned __int8 **)v81;
      v41 = (unsigned __int8 *)(v38 + v39);
      v42 = v38 + v39 + 1;
      v3[2] = v42;
      if (!v38)
      {
        v61 = v37;
        v62 = 0;
LABEL_75:
        v37 = 0;
        v38 = 0;
        *v3 = 0;
        v3[1] = 0;
        v64 = v3[3];
        if (v64)
        {
          if (v61)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v64 + 16))(v64, v62, v61);
            v38 = *v3;
            v37 = v3[1];
          }
          else
          {
            v37 = 0;
            v38 = 0;
          }
        }
LABEL_76:
        *v3 = 0;
        v3[1] = 0;
        v65 = v3[3];
        if (v65)
          goto LABEL_103;
        goto LABEL_84;
      }
      v43 = *v41;
      if (v43 >= 4)
        goto LABEL_76;
      v44 = ((v42 + 7) & 0xFFFFFFFFFFFFFFF8) - v38;
      if (v37 < v44 || v37 - v44 <= 7)
      {
        *v3 = 0;
        v3[1] = 0;
        v72 = v3[3];
        if (v72)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v72 + 16))(v72);
          v38 = *v3;
          v37 = v3[1];
          v65 = v3[3];
          *v3 = 0;
          v3[1] = 0;
          if (v65)
          {
LABEL_103:
            if (v37)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v65 + 16))(v65, v38);
          }
        }
LABEL_84:
        v73 = *v3;
        v74 = v3[1];
        *v3 = 0;
        v3[1] = 0;
        v75 = v3[3];
        if (v75 && v74)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v75 + 16))(v75, v73);
        goto LABEL_85;
      }
      v46 = (uint64_t *)(v38 + v44);
      v47 = *v46;
      v3[2] = (uint64_t)(v46 + 1);
      IPC::Decoder::decode<std::optional<unsigned long long>>(v3, (uint64_t)v82);
      if (!(_BYTE)v83)
        goto LABEL_84;
      v48 = v82[0];
      v49 = v82[1];
      v50 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3);
      if (v51)
      {
        v52 = v50;
        v82[0] = v50;
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v40);
        v53 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
        *v53 = (uint64_t)off_1E34B4778;
        v53[1] = (uint64_t)v52;
        v82[1] = 0;
        v53[2] = (uint64_t)v40;
        v86 = v53;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v82[1]);
        WebKit::RemoteBuffer::mapAsync(v5, v43, v47, (uint64_t)v48, (uint64_t)v49, (uint64_t *)&v86);
        v54 = v86;
        v86 = 0;
        if (v54)
          (*(void (**)(uint64_t *))(*v54 + 8))(v54);
      }
LABEL_85:
      v55 = &v81;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v55);
    case 0x2CA:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v86, a2 + 4);
      IPC::Decoder::decode<std::tuple<WTF::String>>(v3, (uint64_t)v82);
      if (LOBYTE(v82[1]))
      {
        v34 = *(_QWORD **)(v5 + 16);
        v35 = (WTF::StringImpl *)v34[3];
        v36 = v82[0];
        v82[0] = 0;
        v34[3] = v36;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
            WTF::StringImpl::destroy(v35, v33);
          else
            *(_DWORD *)v35 -= 2;
        }
        (*(void (**)(_QWORD *, _QWORD *))(*v34 + 64))(v34, v34 + 3);
        if (LOBYTE(v82[1]))
        {
          v60 = v82[0];
          v82[0] = 0;
          if (v60)
          {
            if (*(_DWORD *)v60 == 2)
              WTF::StringImpl::destroy(v60, v59);
            else
              *(_DWORD *)v60 -= 2;
          }
        }
      }
      v55 = &v86;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v55);
    case 0x2CB:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v82, a2 + 4);
      if (*(_BYTE *)(v5 + 48))
        (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 16) + 32))(*(_QWORD *)(v5 + 16));
      *(_WORD *)(v5 + 48) = 0;
LABEL_60:
      v55 = (uint64_t **)v82;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v55);
    default:
      if (*((_WORD *)a3 + 25) != 3536)
        return this;
      this = (unsigned __int8 ***)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      v19 = v18;
      if (!v18)
        return this;
      v20 = v3[1];
      v21 = *v3;
      v22 = ((v3[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v3;
      if (v20 >= v22 && v20 - v22 > 7)
      {
        v24 = (uint64_t *)(v21 + v22);
        v3[2] = (uint64_t)(v24 + 1);
        if (v21)
        {
          v25 = (WTF::StringImpl *)this;
          v26 = *v24;
          IPC::Decoder::decode<std::optional<unsigned long long>>(v3, (uint64_t)v82);
          if ((_BYTE)v83)
          {
            v27 = v82[0];
            v28 = v82[1];
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v82, a2 + 4);
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v82);
            v82[0] = v25;
            LOBYTE(v82[1]) = v19;
            v29 = (unsigned int *)(a2 + 1);
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 + 1, v29));
            v31 = WTF::fastMalloc((WTF *)0x20);
            *(_QWORD *)v31 = off_1E34B47C8;
            *(_OWORD *)(v31 + 8) = *(_OWORD *)v82;
            v83 = 0;
            *(_QWORD *)(v31 + 24) = a2;
            v86 = (uint64_t *)v31;
            WebKit::RemoteBuffer::getMappedRange(v5, v26, (uint64_t)v27, (uint64_t)v28, (uint64_t)&v86);
            v32 = v86;
            v86 = 0;
            if (v32)
              (*(void (**)(uint64_t *))(*v32 + 8))(v32);
            return (unsigned __int8 ***)WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(&v83);
          }
LABEL_80:
          v70 = *v3;
          v71 = v3[1];
          *v3 = 0;
          v3[1] = 0;
          this = (unsigned __int8 ***)v3[3];
          if (this && v71)
            return (unsigned __int8 ***)((uint64_t (*)(unsigned __int8 ***, uint64_t))(*this)[2])(this, v70);
          return this;
        }
        v66 = v20;
        v67 = 0;
      }
      else
      {
        v66 = 0;
        v67 = 0;
        *v3 = 0;
        v3[1] = 0;
        v68 = v3[3];
        if (v68)
        {
          if (v20)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v68 + 16))(v68, v21, v20);
            v67 = *v3;
            v66 = v3[1];
          }
          else
          {
            v66 = 0;
            v67 = 0;
          }
        }
      }
      *v3 = 0;
      v3[1] = 0;
      v69 = v3[3];
      if (v69 && v66)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v69 + 16))(v69, v67);
      goto LABEL_80;
  }
}

unsigned __int8 ***WebKit::RemoteCommandBuffer::didReceiveStreamMessage(unsigned __int8 ***this, uint64_t **a2, IPC::Decoder *a3)
{
  unsigned __int8 ***v3;
  int v4;
  unsigned __int8 ***v5;
  WTF::StringImpl *v7;
  unsigned __int8 **v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t *v13;
  WTF::StringImpl *v14;
  char v15;

  v3 = this;
  v4 = *((unsigned __int16 *)a3 + 25);
  if (v4 == 739)
  {
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a2 + 4);
    IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)&v14);
    if (v15)
    {
      v8 = v3[2];
      v9 = (WTF::StringImpl *)v8[2];
      v10 = v14;
      v14 = 0;
      v8[2] = (unsigned __int8 *)v10;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v7);
        else
          *(_DWORD *)v9 -= 2;
      }
      (*((void (**)(unsigned __int8 **, unsigned __int8 **))*v8 + 2))(v8, v8 + 2);
      if (v15)
      {
        v12 = v14;
        v14 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v11);
          else
            *(_DWORD *)v12 -= 2;
        }
      }
    }
    v5 = (unsigned __int8 ***)&v13;
  }
  else
  {
    if (v4 != 738)
      return this;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v14, a2 + 4);
    WebKit::WebGPU::ObjectHeap::removeObject((uint64_t)v3[3][1], (uint64_t)v3[5]);
    v5 = (unsigned __int8 ***)&v14;
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v5);
}

unsigned __int8 ***WebKit::RemoteCommandEncoder::didReceiveStreamMessage(unsigned __int8 ***this, uint64_t **a2, IPC::Decoder *a3)
{
  unsigned __int8 ***v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int *v17;
  unsigned __int8 **v18;
  void (*v19)(unsigned __int8 **, _BYTE *);
  unint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int *v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  _BYTE *v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  unint64_t v50;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  __int128 v65;
  void *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  unsigned __int8 **v69;
  WTF::StringImpl *v70;
  unsigned __int8 *v71;
  unint64_t v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  char *v75;
  unint64_t v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  char v79;
  BOOL v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  unsigned __int8 ***v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  _BYTE v137[40];
  __int128 v138;
  __int128 v139;
  __int128 v140;
  _BYTE v141[25];
  unint64_t v142;
  int v143;
  char v144;
  __int128 v145;
  uint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  _OWORD v151[2];
  unsigned __int8 v152;
  __int128 v153;
  __int128 v154;
  int v155;
  char v156;
  unsigned __int8 v157;
  _BYTE v158[16];
  int v159;
  char v160;
  char v161;

  v4 = this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x2E4:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v153, a2 + 4);
      v5 = *((_QWORD *)a3 + 1);
      v6 = *(_QWORD *)a3;
      v7 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
      if (v5 <= v7)
      {
        v97 = 0;
        v98 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v99 = *((_QWORD *)a3 + 3);
        if (v99)
        {
          if (v5)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v99 + 16))(v99);
            v98 = *(_QWORD *)a3;
            v97 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v97 = 0;
            v98 = 0;
          }
        }
      }
      else
      {
        v8 = (_BYTE *)(v6 + v7);
        *((_QWORD *)a3 + 2) = v8 + 1;
        if (v6)
        {
          v9 = *v8;
          if (v9 >= 2)
            goto LABEL_205;
          if (!*v8)
          {
            v10 = 0;
LABEL_119:
            v76 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
            v137[0] = 0;
            v78 = v77;
            if ((_BYTE)v77)
            {
              v137[32] = 0;
              if (v9)
              {
                *(_QWORD *)v137 = v10;
                *(_OWORD *)&v137[8] = v145;
                *(_QWORD *)&v137[24] = v146;
                v137[32] = 1;
                v10 = 0;
              }
              *(_QWORD *)&v138 = v76;
              v79 = 1;
            }
            else
            {
              v79 = 0;
            }
            BYTE8(v138) = v79;
            if (v9)
              v80 = v10 == 0;
            else
              v80 = 1;
            if (!v80)
            {
              if (*(_DWORD *)v10 == 2)
                WTF::StringImpl::destroy(v10, v77);
              else
                *(_DWORD *)v10 -= 2;
            }
            if (v78)
            {
LABEL_152:
              if (!BYTE8(v138))
                goto LABEL_214;
              WebKit::RemoteCommandEncoder::beginComputePass((uint64_t)v4, (uint64_t)v137, v138);
              if (!BYTE8(v138) || !v137[32])
                goto LABEL_214;
              goto LABEL_155;
            }
LABEL_208:
            v105 = *(_QWORD *)a3;
            v106 = *((_QWORD *)a3 + 1);
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v107 = *((_QWORD *)a3 + 3);
            if (v107 && v106)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v107 + 16))(v107, v105);
            goto LABEL_152;
          }
          IPC::ArgumentCoder<WebKit::WebGPU::ComputePassDescriptor,void>::decode((uint64_t *)a3, (uint64_t)v137);
          if (v137[32])
          {
            v10 = *(WTF::StringImpl **)v137;
            v145 = *(_OWORD *)&v137[8];
            v146 = *(_QWORD *)&v137[24];
            goto LABEL_119;
          }
          goto LABEL_204;
        }
        v97 = v5;
        v98 = 0;
      }
      v5 = 0;
      v6 = 0;
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v100 = *((_QWORD *)a3 + 3);
      if (!v100)
        goto LABEL_205;
      if (!v97)
      {
        v5 = 0;
        v6 = 0;
LABEL_205:
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v101 = *((_QWORD *)a3 + 3);
        if (v101 && v5)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v101 + 16))(v101, v6);
        v102 = *(_QWORD *)a3;
        v103 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v104 = *((_QWORD *)a3 + 3);
        if (v104 && v103)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v104 + 16))(v104, v102);
        v137[0] = 0;
        BYTE8(v138) = 0;
        goto LABEL_208;
      }
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v100 + 16))(v100, v98, v97);
LABEL_204:
      v6 = *(_QWORD *)a3;
      v5 = *((_QWORD *)a3 + 1);
      goto LABEL_205;
    case 0x2E5:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v153, a2 + 4);
      IPC::ArgumentCoder<WebKit::WebGPU::RenderPassDescriptor,void>::decode((uint64_t *)a3, (uint64_t)&v145);
      if (!v152
        && ((v63 = *(void **)a3,
             v108 = *((_QWORD *)a3 + 1),
             *(_QWORD *)a3 = 0,
             *((_QWORD *)a3 + 1) = 0,
             (v109 = *((_QWORD *)a3 + 3)) == 0)
         || !v108
         || ((*(void (**)(uint64_t, void *))(*(_QWORD *)v109 + 16))(v109, v63), !v152))
        || (v62 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3),
            !(_BYTE)v63))
      {
        std::__optional_destruct_base<WebKit::WebGPU::RenderPassDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v145, v63);
        goto LABEL_213;
      }
      v14 = v152;
      if (!v152)
        goto LABEL_182;
      v64 = v62;
      v65 = v145;
      v145 = 0uLL;
      *(_OWORD *)v137 = v65;
      *(_QWORD *)&v65 = v146;
      v146 = 0;
      *(_QWORD *)&v137[16] = v65;
      v139 = v149;
      v140 = v150;
      *(_OWORD *)v141 = v151[0];
      *(_OWORD *)&v141[9] = *(_OWORD *)((char *)v151 + 9);
      *(_OWORD *)&v137[24] = v147;
      v138 = v148;
      v142 = v62;
      LOBYTE(v143) = 1;
      std::__optional_destruct_base<WebKit::WebGPU::RenderPassDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v145, v63);
      WebKit::RemoteCommandEncoder::beginRenderPass((uint64_t)v4, (uint64_t)v137, v64);
      if ((_BYTE)v143)
      {
        WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v137[8], v66);
        goto LABEL_155;
      }
      goto LABEL_214;
    case 0x2E6:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v145, a2 + 4);
      v39 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v40)
        goto LABEL_229;
      v41 = *((_QWORD *)a3 + 1);
      v42 = *(_QWORD *)a3;
      v43 = ((*((_QWORD *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a3;
      if (v41 < v43 || v41 - v43 <= 7)
      {
        v122 = 0;
        v123 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v124 = *((_QWORD *)a3 + 3);
        if (v124)
        {
          if (v41)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v124 + 16))(v124, v42, v41);
            v123 = *(_QWORD *)a3;
            v122 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v122 = 0;
            v123 = 0;
          }
        }
        goto LABEL_228;
      }
      v45 = (uint64_t *)(v42 + v43);
      *((_QWORD *)a3 + 2) = v45 + 1;
      if (!v42)
      {
        v122 = v41;
        v123 = 0;
LABEL_228:
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v125 = *((_QWORD *)a3 + 3);
        if (v125 && v122)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v125 + 16))(v125, v123);
        goto LABEL_229;
      }
      v46 = v39;
      v47 = *v45;
      IPC::Decoder::decode<std::optional<unsigned long long>>((uint64_t *)a3, (uint64_t)v137);
      if (v137[16])
      {
        WebKit::RemoteCommandEncoder::clearBuffer((uint64_t)v4, v46, v47, *(uint64_t *)v137, *(uint64_t *)&v137[8]);
        goto LABEL_230;
      }
LABEL_229:
      v126 = *(_QWORD *)a3;
      v127 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v128 = *((_QWORD *)a3 + 3);
      if (v128 && v127)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v128 + 16))(v128, v126);
LABEL_230:
      v84 = (unsigned __int8 ***)&v145;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v84);
    case 0x2E7:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v137, a2 + 4);
      v48 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v49)
        goto LABEL_235;
      v13 = *((_QWORD *)a3 + 1);
      v14 = *(_QWORD *)a3;
      v50 = ((*((_QWORD *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a3;
      if (v13 < v50 || v13 - v50 <= 7)
        goto LABEL_183;
      v52 = (uint64_t *)(v14 + v50);
      *((_QWORD *)a3 + 2) = v52 + 1;
      if (!v14)
        goto LABEL_263;
      v53 = v48;
      v54 = *v52;
      v55 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v56)
        goto LABEL_235;
      v22 = *((_QWORD *)a3 + 1);
      v23 = *(_QWORD *)a3;
      v57 = ((*((_QWORD *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a3;
      if (v22 < v57 || v22 - v57 <= 7)
      {
LABEL_186:
        v89 = 0;
        v90 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v91 = *((_QWORD *)a3 + 3);
        if (v91)
        {
          if (v22)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v91 + 16))(v91);
            v90 = *(_QWORD *)a3;
            v89 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v89 = 0;
            v90 = 0;
          }
        }
        goto LABEL_187;
      }
      v58 = (uint64_t *)(v23 + v57);
      *((_QWORD *)a3 + 2) = v58 + 1;
      if (!v23)
      {
LABEL_264:
        v89 = v22;
        v90 = v23;
LABEL_187:
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v92 = *((_QWORD *)a3 + 3);
        if (v92 && v89)
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v92 + 16))(v92, v90, v89);
        goto LABEL_235;
      }
      v59 = (((unint64_t)v58 + 15) & 0xFFFFFFFFFFFFFFF8) - v23;
      if (v22 >= v59 && v22 - v59 > 7)
      {
        v60 = *v58;
        v61 = *(_QWORD *)(((unint64_t)v58 + 15) & 0xFFFFFFFFFFFFFFF8);
        *((_QWORD *)a3 + 2) = (((unint64_t)v58 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
        WebKit::RemoteCommandEncoder::copyBufferToBuffer((uint64_t)v4, v53, v54, v55, v60, v61);
        goto LABEL_236;
      }
LABEL_190:
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v93 = *((_QWORD *)a3 + 3);
      if (v93)
      {
        if (v22)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v93 + 16))(v93);
          v86 = *(_QWORD *)a3;
          v85 = *((_QWORD *)a3 + 1);
          v88 = *((_QWORD *)a3 + 3);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          if (v88)
          {
LABEL_193:
            if (v85)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v88 + 16))(v88, v86);
          }
        }
      }
LABEL_235:
      v133 = *(_QWORD *)a3;
      v134 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v135 = *((_QWORD *)a3 + 3);
      if (v135 && v134)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v135 + 16))(v135, v133);
LABEL_236:
      v84 = (unsigned __int8 ***)v137;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v84);
    case 0x2E8:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v136, a2 + 4);
      IPC::Decoder::decode<WebKit::WebGPU::ImageCopyBuffer>((uint64_t)&v153, (uint64_t *)a3);
      if ((_BYTE)v155)
      {
        IPC::Decoder::decode<WebKit::WebGPU::ImageCopyTexture>((uint64_t *)a3, (uint64_t)&v145);
        if ((_BYTE)v149)
        {
          IPC::Decoder::decode<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>>((uint64_t *)a3, v158);
          if (v160)
          {
            v14 = v155;
            if (!(_BYTE)v155)
              goto LABEL_182;
            v14 = v149;
            if (!(_BYTE)v149)
              goto LABEL_182;
            *(_OWORD *)v137 = v153;
            *(_OWORD *)&v137[16] = v154;
            std::__tuple_leaf<1ul,WebKit::WebGPU::ImageCopyTexture,false>::__tuple_leaf[abi:sn180100]<WebKit::WebGPU::ImageCopyTexture,void>((uint64_t)&v137[32], (uint64_t *)&v145);
            v141[0] = 0;
            *(_DWORD *)&v141[16] = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>,(std::__variant_detail::_Trait)1>>((uint64_t)v141, (uint64_t)v158);
            v141[24] = 1;
            if (v160 && v159 != -1)
              ((void (*)(char *, _BYTE *))off_1E34B47F0[v159])(&v161, v158);
          }
          else
          {
            v137[0] = 0;
            v141[24] = 0;
          }
          if ((_BYTE)v149 && (_BYTE)v148 && DWORD2(v147) != -1)
            ((void (*)(_BYTE *, uint64_t *))off_1E34B47E0[DWORD2(v147)])(v158, &v146);
        }
        else
        {
          v137[0] = 0;
          v141[24] = 0;
        }
        if (v141[24])
        {
LABEL_144:
          WebKit::RemoteCommandEncoder::copyBufferToTexture((uint64_t)v4, (uint64_t *)v137, (uint64_t)&v137[32], (uint64_t)v141);
          if (v141[24])
          {
            if (*(_DWORD *)&v141[16] != -1)
              ((void (*)(__int128 *, _BYTE *))off_1E34B47F0[*(unsigned int *)&v141[16]])(&v145, v141);
            *(_DWORD *)&v141[16] = -1;
            if ((_BYTE)v140)
            {
              v74 = DWORD2(v139);
              if (DWORD2(v139) != -1)
              {
                v75 = (char *)&v138 + 8;
                goto LABEL_179;
              }
            }
          }
LABEL_180:
          v84 = (unsigned __int8 ***)&v136;
          return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v84);
        }
      }
      else
      {
        v137[0] = 0;
        v141[24] = 0;
      }
      v94 = *(_QWORD *)a3;
      v95 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v96 = *((_QWORD *)a3 + 3);
      if (!v96)
        goto LABEL_180;
      if (!v95)
        goto LABEL_180;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v96 + 16))(v96, v94);
      if (!v141[24])
        goto LABEL_180;
      goto LABEL_144;
    case 0x2E9:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v136, a2 + 4);
      IPC::Decoder::decode<WebKit::WebGPU::ImageCopyTexture>((uint64_t *)a3, (uint64_t)&v145);
      if ((_BYTE)v149)
      {
        IPC::Decoder::decode<WebKit::WebGPU::ImageCopyBuffer>((uint64_t)&v153, (uint64_t *)a3);
        if ((_BYTE)v155
          && (IPC::Decoder::decode<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>>((uint64_t *)a3, v158), v160))
        {
          v14 = v149;
          if (!(_BYTE)v149)
            goto LABEL_182;
          v14 = v155;
          if (!(_BYTE)v155)
            goto LABEL_182;
          std::__tuple_leaf<1ul,WebKit::WebGPU::ImageCopyTexture,false>::__tuple_leaf[abi:sn180100]<WebKit::WebGPU::ImageCopyTexture,void>((uint64_t)v137, (uint64_t *)&v145);
          v139 = v153;
          v140 = v154;
          v141[0] = 0;
          *(_DWORD *)&v141[16] = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>,(std::__variant_detail::_Trait)1>>((uint64_t)v141, (uint64_t)v158);
          v141[24] = 1;
          if (v160 && v159 != -1)
            ((void (*)(char *, _BYTE *))off_1E34B47F0[v159])(&v161, v158);
        }
        else
        {
          v137[0] = 0;
          v141[24] = 0;
        }
        if ((_BYTE)v149 && (_BYTE)v148 && DWORD2(v147) != -1)
          ((void (*)(__int128 *, uint64_t *))off_1E34B47E0[DWORD2(v147)])(&v153, &v146);
      }
      else
      {
        v137[0] = 0;
        v141[24] = 0;
      }
      if (v141[24]
        || (v116 = *(_QWORD *)a3,
            v117 = *((_QWORD *)a3 + 1),
            *(_QWORD *)a3 = 0,
            *((_QWORD *)a3 + 1) = 0,
            (v118 = *((_QWORD *)a3 + 3)) != 0)
        && v117
        && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v118 + 16))(v118, v116), v141[24]))
      {
        WebKit::RemoteCommandEncoder::copyTextureToBuffer((uint64_t)v4, (uint64_t)v137, (uint64_t *)&v139, (uint64_t)v141);
        if (v141[24])
        {
          if (*(_DWORD *)&v141[16] != -1)
            ((void (*)(__int128 *, _BYTE *))off_1E34B47F0[*(unsigned int *)&v141[16]])(&v145, v141);
          *(_DWORD *)&v141[16] = -1;
          if ((_BYTE)v138)
          {
            v74 = *(unsigned int *)&v137[32];
            if (*(_DWORD *)&v137[32] != -1)
            {
              v75 = &v137[16];
              goto LABEL_179;
            }
          }
        }
      }
      goto LABEL_180;
    case 0x2EA:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v136, a2 + 4);
      IPC::Decoder::decode<WebKit::WebGPU::ImageCopyTexture>((uint64_t *)a3, (uint64_t)&v153);
      if (v157)
      {
        IPC::Decoder::decode<WebKit::WebGPU::ImageCopyTexture>((uint64_t *)a3, (uint64_t)&v145);
        if ((_BYTE)v149)
        {
          IPC::Decoder::decode<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>>((uint64_t *)a3, v158);
          if (v160)
          {
            v14 = v157;
            if (!v157 || (v14 = v149, !(_BYTE)v149))
            {
LABEL_182:
              __break(1u);
LABEL_183:
              v85 = 0;
              v86 = 0;
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              v87 = *((_QWORD *)a3 + 3);
              if (v87)
              {
                if (v13)
                {
                  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v87 + 16))(v87, v14, v13);
                  v86 = *(_QWORD *)a3;
                  v85 = *((_QWORD *)a3 + 1);
                }
                else
                {
                  v85 = 0;
                  v86 = 0;
                }
              }
              goto LABEL_184;
            }
            std::__tuple_leaf<1ul,WebKit::WebGPU::ImageCopyTexture,false>::__tuple_leaf[abi:sn180100]<WebKit::WebGPU::ImageCopyTexture,void>((uint64_t)v137, (uint64_t *)&v153);
            std::__tuple_leaf<1ul,WebKit::WebGPU::ImageCopyTexture,false>::__tuple_leaf[abi:sn180100]<WebKit::WebGPU::ImageCopyTexture,void>((uint64_t)&v139, (uint64_t *)&v145);
            v141[24] = 0;
            v143 = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>,(std::__variant_detail::_Trait)1>>((uint64_t)&v141[24], (uint64_t)v158);
            v144 = 1;
            if (v160 && v159 != -1)
              ((void (*)(char *, _BYTE *))off_1E34B47F0[v159])(&v161, v158);
          }
          else
          {
            v137[0] = 0;
            v144 = 0;
          }
          if ((_BYTE)v149 && (_BYTE)v148 && DWORD2(v147) != -1)
            ((void (*)(_BYTE *, uint64_t *))off_1E34B47E0[DWORD2(v147)])(v158, &v146);
        }
        else
        {
          v137[0] = 0;
          v144 = 0;
        }
        if (v157 && v156 && v155 != -1)
          ((void (*)(__int128 *, __int128 *))off_1E34B47E0[v155])(&v145, &v154);
      }
      else
      {
        v137[0] = 0;
        v144 = 0;
      }
      if (v144
        || (v119 = *(_QWORD *)a3,
            v120 = *((_QWORD *)a3 + 1),
            *(_QWORD *)a3 = 0,
            *((_QWORD *)a3 + 1) = 0,
            (v121 = *((_QWORD *)a3 + 3)) != 0)
        && v120
        && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v121 + 16))(v121, v119), v144))
      {
        WebKit::RemoteCommandEncoder::copyTextureToTexture((uint64_t)v4, (uint64_t)v137, (uint64_t)&v139, (uint64_t)&v141[24]);
        if (v144)
        {
          if (v143 != -1)
            ((void (*)(__int128 *, _BYTE *))off_1E34B47F0[v143])(&v145, &v141[24]);
          v143 = -1;
          if (v141[8])
          {
            if (*(_DWORD *)v141 != -1)
              ((void (*)(__int128 *, __int128 *))off_1E34B47E0[*(unsigned int *)v141])(&v145, &v140);
            *(_DWORD *)v141 = -1;
          }
          if ((_BYTE)v138)
          {
            v74 = *(unsigned int *)&v137[32];
            if (*(_DWORD *)&v137[32] != -1)
            {
              v75 = &v137[16];
LABEL_179:
              ((void (*)(__int128 *, char *))off_1E34B47E0[v74])(&v145, v75);
            }
          }
        }
      }
      goto LABEL_180;
    case 0x2EB:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v137, a2 + 4);
      WebKit::WebGPU::ObjectHeap::removeObject((uint64_t)v4[3][1], (uint64_t)v4[5]);
      goto LABEL_236;
    case 0x2EC:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v153, a2 + 4);
      IPC::ArgumentCoder<WebCore::ApplePayAMSUIRequest,void>::decode((uint64_t *)a3, (uint64_t)&v145);
      if (BYTE8(v145))
      {
        v72 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
        if ((_BYTE)v73)
        {
          *(_QWORD *)v137 = v145;
          *(_QWORD *)&v137[8] = v72;
          v137[16] = 1;
          WebKit::RemoteCommandEncoder::finish((uint64_t)v4, (WTF::StringImpl **)v137, v72);
          if (v137[16])
          {
LABEL_155:
            v83 = *(WTF::StringImpl **)v137;
            *(_QWORD *)v137 = 0;
            if (v83)
            {
              if (*(_DWORD *)v83 == 2)
                WTF::StringImpl::destroy(v83, v67);
              else
                *(_DWORD *)v83 -= 2;
            }
          }
LABEL_214:
          v84 = (unsigned __int8 ***)&v153;
          return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v84);
        }
        if ((_QWORD)v145)
        {
          if (*(_DWORD *)v145 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v145, v73);
          else
            *(_DWORD *)v145 -= 2;
        }
      }
      else
      {
        v113 = *(_QWORD *)a3;
        v114 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v115 = *((_QWORD *)a3 + 3);
        if (v115 && v114)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v115 + 16))(v115, v113);
        v137[0] = 0;
      }
LABEL_213:
      v110 = *(_QWORD *)a3;
      v111 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v112 = *((_QWORD *)a3 + 3);
      if (v112 && v111)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v112 + 16))(v112, v110);
      goto LABEL_214;
    case 0x2ED:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v145, a2 + 4);
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)v137);
      if (!v137[8])
        goto LABEL_230;
      v18 = v4[2];
      v19 = (void (*)(unsigned __int8 **, _BYTE *))*((_QWORD *)*v18 + 11);
      goto LABEL_45;
    case 0x2EE:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v137, a2 + 4);
      (*((void (**)(unsigned __int8 **))*v4[2] + 10))(v4[2]);
      goto LABEL_236;
    case 0x2EF:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v145, a2 + 4);
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)v137);
      if (!v137[8])
        goto LABEL_230;
      v18 = v4[2];
      v19 = (void (*)(unsigned __int8 **, _BYTE *))*((_QWORD *)*v18 + 9);
LABEL_45:
      v38 = v137;
      goto LABEL_132;
    case 0x2F0:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v137, a2 + 4);
      v20 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v21)
        goto LABEL_235;
      v22 = *((_QWORD *)a3 + 1);
      v23 = *(_QWORD *)a3;
      v24 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v22 < v24 || v22 - v24 <= 3)
        goto LABEL_186;
      v26 = (unsigned int *)(v23 + v24);
      *((_QWORD *)a3 + 2) = v26 + 1;
      if (!v23)
        goto LABEL_264;
      v27 = (((unint64_t)v26 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v23;
      if (v22 < v27 || v22 - v27 <= 3)
        goto LABEL_190;
      v29 = v20;
      v30 = *v26;
      v31 = *(unsigned int *)(((unint64_t)v26 + 7) & 0xFFFFFFFFFFFFFFFCLL);
      *((_QWORD *)a3 + 2) = (((unint64_t)v26 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
      v32 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v33)
        goto LABEL_235;
      v34 = *((_QWORD *)a3 + 1);
      v35 = *(_QWORD *)a3;
      v36 = ((*((_QWORD *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a3;
      if (v34 < v36 || v34 - v36 <= 7)
      {
        v129 = 0;
        v130 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v131 = *((_QWORD *)a3 + 3);
        if (v131)
        {
          if (v34)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v131 + 16))(v131);
            v130 = *(_QWORD *)a3;
            v129 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v129 = 0;
            v130 = 0;
          }
        }
      }
      else
      {
        v37 = (uint64_t *)(v35 + v36);
        *((_QWORD *)a3 + 2) = v37 + 1;
        if (v35)
        {
          WebKit::RemoteCommandEncoder::resolveQuerySet((uint64_t)v4, v29, v30, v31, v32, *v37);
          goto LABEL_236;
        }
        v129 = v34;
        v130 = 0;
      }
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v132 = *((_QWORD *)a3 + 3);
      if (v132 && v129)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v132 + 16))(v132, v130);
      goto LABEL_235;
    case 0x2F1:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v145, a2 + 4);
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)v137);
      if (!v137[8])
        goto LABEL_230;
      v69 = v4[2];
      v70 = (WTF::StringImpl *)v69[2];
      v71 = *(unsigned __int8 **)v137;
      *(_QWORD *)v137 = 0;
      v69[2] = v71;
      if (v70)
      {
        if (*(_DWORD *)v70 == 2)
          WTF::StringImpl::destroy(v70, v68);
        else
          *(_DWORD *)v70 -= 2;
      }
      v19 = (void (*)(unsigned __int8 **, _BYTE *))*((_QWORD *)*v69 + 15);
      v18 = v69;
      v38 = v69 + 2;
LABEL_132:
      v19(v18, v38);
      if (v137[8])
      {
        v82 = *(WTF::StringImpl **)v137;
        *(_QWORD *)v137 = 0;
        if (v82)
        {
          if (*(_DWORD *)v82 == 2)
            WTF::StringImpl::destroy(v82, v81);
          else
            *(_DWORD *)v82 -= 2;
        }
      }
      goto LABEL_230;
    case 0x2F2:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v137, a2 + 4);
      v11 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v12)
        goto LABEL_235;
      v13 = *((_QWORD *)a3 + 1);
      v14 = *(_QWORD *)a3;
      v15 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v13 < v15 || v13 - v15 <= 3)
        goto LABEL_183;
      v17 = (unsigned int *)(v14 + v15);
      *((_QWORD *)a3 + 2) = v17 + 1;
      if (v14)
      {
        WebKit::RemoteCommandEncoder::writeTimestamp((uint64_t)v4, v11, *v17);
        goto LABEL_236;
      }
LABEL_263:
      v85 = v13;
      v86 = v14;
LABEL_184:
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v88 = *((_QWORD *)a3 + 3);
      if (v88)
        goto LABEL_193;
      goto LABEL_235;
    default:
      return this;
  }
}

void WebKit::RemoteCompositorIntegration::didReceiveStreamMessage(WebKit::RemoteCompositorIntegration *this, uint64_t **a2, IPC::Decoder *a3)
{
  unsigned int v6;
  unint64_t v7;
  char v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  const void *v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  char *v24;
  unint64_t v25;
  char v26;
  char v27;
  const void *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int *v33;
  unint64_t v34;
  unsigned int v36;
  unsigned int v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned __int8 *v41;
  unsigned int v42;
  unsigned __int16 v43;
  char v44;
  unint64_t v45;
  char v46;
  int v47;
  CFTypeRef v48;
  int v49;
  unint64_t v50;
  char v51;
  char v52;
  const void *v53;
  unsigned int *v54;
  unsigned int v55;
  char *v56;
  CFTypeRef v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  CFTypeRef v79;
  unsigned int *v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  CFTypeRef v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  CFTypeRef cf[2];
  unsigned int *v89;
  uint64_t v90;
  CFTypeRef v91[2];
  unsigned int *v92;
  unint64_t v93;
  char v94;

  v6 = *((unsigned __int16 *)a3 + 25);
  if (v6 > 0xDD5)
  {
    if (v6 == 3542)
    {
      v50 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      v52 = v51;
      if (!v51)
        return;
      v53 = (const void *)v50;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v91, a2 + 4);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v91);
      v91[0] = v53;
      LOBYTE(v91[1]) = v52;
      v54 = (unsigned int *)(a2 + 1);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 + 1, v54));
      v56 = (char *)WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v56 = off_1E34B4838;
      *(_OWORD *)(v56 + 8) = *(_OWORD *)v91;
      v92 = 0;
      *((_QWORD *)v56 + 3) = a2;
      cf[0] = v56;
      WebKit::RemoteCompositorIntegration::prepareForDisplay((uint64_t)this, (uint64_t *)cf);
LABEL_47:
      v57 = cf[0];
      cf[0] = 0;
      if (v57)
        (*(void (**)(CFTypeRef))(*(_QWORD *)v57 + 8))(v57);
      WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(&v92);
      return;
    }
    if (v6 != 3543)
      return;
    v25 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
    v27 = v26;
    if (!v26)
      return;
    v28 = (const void *)v25;
    v29 = *((_QWORD *)a3 + 1);
    v30 = *(_QWORD *)a3;
    v31 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
    if (v29 < v31 || v29 - v31 <= 3)
    {
      v62 = 0;
      v63 = 0;
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v64 = *((_QWORD *)a3 + 3);
      if (v64)
      {
        if (v29)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v64 + 16))(v64);
          v63 = *(_QWORD *)a3;
          v62 = *((_QWORD *)a3 + 1);
        }
        else
        {
          v62 = 0;
          v63 = 0;
        }
      }
      goto LABEL_56;
    }
    v33 = (unsigned int *)(v30 + v31);
    *((_QWORD *)a3 + 2) = v33 + 1;
    if (!v30)
    {
      v62 = v29;
      v63 = 0;
LABEL_56:
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v65 = *((_QWORD *)a3 + 3);
      if (v65 && v62)
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v65 + 16))(v65, v63, v62);
      goto LABEL_60;
    }
    v34 = (((unint64_t)v33 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v30;
    if (v29 < v34 || v29 - v34 <= 3)
    {
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v66 = *((_QWORD *)a3 + 3);
      if (v66)
      {
        if (v29)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v66 + 16))(v66);
          v85 = *(_QWORD *)a3;
          v86 = *((_QWORD *)a3 + 1);
          v87 = *((_QWORD *)a3 + 3);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          if (v87)
          {
            if (v86)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v87 + 16))(v87, v85);
          }
        }
      }
      goto LABEL_60;
    }
    v36 = *v33;
    v37 = *(_DWORD *)(((unint64_t)v33 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *((_QWORD *)a3 + 2) = (((unint64_t)v33 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
    IPC::Decoder::decode<WebCore::DestinationColorSpace>((uint64_t *)a3, (uint64_t)cf);
    if (!LOBYTE(cf[1]))
    {
LABEL_60:
      v49 = 0;
      LOBYTE(v91[0]) = 0;
      v94 = 0;
LABEL_61:
      v67 = *(_QWORD *)a3;
      v68 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v69 = *((_QWORD *)a3 + 3);
      if (v69 && v68)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v69 + 16))(v69, v67);
LABEL_76:
      if (v49)
      {
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
        cf[0] = v28;
        LOBYTE(cf[1]) = v27;
        v80 = (unsigned int *)(a2 + 1);
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 + 1, v80));
        v82 = WTF::fastMalloc((WTF *)0x20);
        *(_QWORD *)v82 = off_1E34B4810;
        *(_OWORD *)(v82 + 8) = *(_OWORD *)cf;
        v89 = 0;
        v90 = v82;
        *(_QWORD *)(v82 + 24) = a2;
        WebKit::RemoteCompositorIntegration::recreateRenderBuffers((uint64_t)this, LODWORD(v91[0]), HIDWORD(v91[0]), (uint64_t)&v91[1], v92, BYTE1(v92), v93, &v90);
        v83 = v90;
        v90 = 0;
        if (v83)
          (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
        WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(&v89);
        if (v94)
        {
          v84 = v91[1];
          v91[1] = 0;
          if (v84)
            CFRelease(v84);
        }
      }
      return;
    }
    v38 = *((_QWORD *)a3 + 1);
    v39 = *(_QWORD *)a3;
    v40 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
    if (v38 <= v40)
    {
      v74 = 0;
      v75 = 0;
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v76 = *((_QWORD *)a3 + 3);
      if (v76)
      {
        if (v38)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v76 + 16))(v76);
          v75 = *(_QWORD *)a3;
          v74 = *((_QWORD *)a3 + 1);
        }
        else
        {
          v74 = 0;
          v75 = 0;
        }
      }
    }
    else
    {
      v41 = (unsigned __int8 *)(v39 + v40);
      *((_QWORD *)a3 + 2) = v41 + 1;
      if (v39)
      {
        v42 = *v41;
        if (v42 < 2)
        {
          v43 = IPC::Decoder::decode<WebCore::WebGPU::TextureFormat>((uint64_t *)a3);
          if (v43 > 0xFFu)
          {
            v44 = v43;
            v45 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
            if (v46)
            {
              if (!LOBYTE(cf[1]))
                goto LABEL_87;
              v47 = 0;
              v91[0] = (CFTypeRef)__PAIR64__(v37, v36);
              v48 = cf[0];
              cf[0] = 0;
              v91[1] = v48;
              LOBYTE(v92) = v42;
              BYTE1(v92) = v44;
              v93 = v45;
              v49 = 1;
LABEL_72:
              v94 = v49;
              if (LOBYTE(cf[1]))
              {
                v79 = cf[0];
                cf[0] = 0;
                if (v79)
                  CFRelease(v79);
              }
              if (!v47)
                goto LABEL_76;
              goto LABEL_61;
            }
          }
LABEL_71:
          v49 = 0;
          LOBYTE(v91[0]) = 0;
          v47 = 1;
          goto LABEL_72;
        }
LABEL_70:
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v78 = *((_QWORD *)a3 + 3);
        if (v78 && v38)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v78 + 16))(v78, v39);
        goto LABEL_71;
      }
      v74 = v38;
      v75 = 0;
    }
    v38 = 0;
    v39 = 0;
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    v77 = *((_QWORD *)a3 + 3);
    if (v77)
    {
      if (v74)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v77 + 16))(v77, v75, v74);
        v39 = *(_QWORD *)a3;
        v38 = *((_QWORD *)a3 + 1);
      }
      else
      {
        v38 = 0;
        v39 = 0;
      }
    }
    goto LABEL_70;
  }
  if (v6 == 755)
  {
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v91, a2 + 4);
    WebKit::WebGPU::ObjectHeap::removeObject(*(_QWORD *)(*((_QWORD *)this + 3) + 8), *((_QWORD *)this + 5));
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v91);
    return;
  }
  if (v6 == 3541)
  {
    v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
    v9 = v8;
    if (v8)
    {
      v10 = *((_QWORD *)a3 + 1);
      v11 = *(_QWORD *)a3;
      v12 = ((*((_QWORD *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a3;
      if (v10 < v12 || v10 - v12 <= 7)
      {
        v58 = 0;
        v59 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v45 = *((_QWORD *)a3 + 3);
        if (v45)
          goto LABEL_88;
LABEL_52:
        while (1)
        {
          v10 = 0;
          v11 = 0;
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v60 = *((_QWORD *)a3 + 3);
          if (!v60)
            break;
          if (!v58)
          {
            v10 = 0;
            v11 = 0;
            break;
          }
          v45 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v60 + 16))(v60, v59, v58);
          if (!*(_QWORD *)a3)
          {
            v11 = 0;
            v10 = *((_QWORD *)a3 + 1);
            break;
          }
LABEL_87:
          __break(1u);
LABEL_88:
          if (v10)
          {
            (*(void (**)(unint64_t))(*(_QWORD *)v45 + 16))(v45);
            v59 = *(_QWORD *)a3;
            v58 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v58 = 0;
            v59 = 0;
          }
        }
LABEL_53:
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v61 = *((_QWORD *)a3 + 3);
        if (v61)
          goto LABEL_98;
        goto LABEL_65;
      }
      v14 = (uint64_t *)(v11 + v12);
      v15 = v11 + v12 + 8;
      *((_QWORD *)a3 + 2) = v15;
      if (!v11)
      {
        v58 = v10;
        v59 = 0;
        goto LABEL_52;
      }
      v16 = *v14;
      if ((unint64_t)(*v14 - 1) >= 0xFFFFFFFFFFFFFFFELL)
        goto LABEL_53;
      v17 = ((v15 + 3) & 0xFFFFFFFFFFFFFFFCLL) - v11;
      if (v10 < v17 || v10 - v17 <= 3)
      {
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v70 = *((_QWORD *)a3 + 3);
        if (v70)
        {
          if (v10)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v70 + 16))(v70);
            v11 = *(_QWORD *)a3;
            v10 = *((_QWORD *)a3 + 1);
            v61 = *((_QWORD *)a3 + 3);
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            if (v61)
            {
LABEL_98:
              if (v10)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v61 + 16))(v61, v11);
            }
          }
        }
LABEL_65:
        v71 = *(_QWORD *)a3;
        v72 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v73 = *((_QWORD *)a3 + 3);
        if (v73)
        {
          if (v72)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v73 + 16))(v73, v71);
        }
        return;
      }
      v19 = (const void *)v7;
      v20 = (unsigned int *)(v11 + v17);
      v21 = *v20;
      *((_QWORD *)a3 + 2) = v20 + 1;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v91, a2 + 4);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v91);
      v91[0] = v19;
      LOBYTE(v91[1]) = v9;
      v22 = (unsigned int *)(a2 + 1);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
      v24 = (char *)WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v24 = off_1E34B4860;
      *(_OWORD *)(v24 + 8) = *(_OWORD *)v91;
      v92 = 0;
      *((_QWORD *)v24 + 3) = a2;
      cf[0] = v24;
      WebKit::RemoteCompositorIntegration::paintCompositedResultsToCanvas((uint64_t)this, v16, v21, (uint64_t *)cf);
      goto LABEL_47;
    }
  }
}

unsigned __int8 ***WebKit::RemoteComputePassEncoder::didReceiveStreamMessage(unsigned __int8 ***this, uint64_t **a2, IPC::Decoder *a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  WTF::StringImpl **v8;
  void (*v9)(WTF::StringImpl **, WTF::StringImpl **);
  WTF::StringImpl **v10;
  void *v11;
  WTF *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  char v18;
  unsigned __int8 ***v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF *v25;
  int v26;
  char v27;
  char v28;

  v4 = (uint64_t)this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x2F4:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v23, a2 + 4);
      WebKit::WebGPU::ObjectHeap::removeObject(*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8), *(_QWORD *)(v4 + 40));
      goto LABEL_26;
    case 0x2F5:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v23, a2 + 4);
      v5 = IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,unsigned int>>((uint64_t *)a3);
      if ((v6 & 0xFF00000000) != 0)
        (*(void (**)(_QWORD, unint64_t, unint64_t, uint64_t))(**(_QWORD **)(v4 + 16) + 24))(*(_QWORD *)(v4 + 16), v5, HIDWORD(v5), v6);
      goto LABEL_26;
    case 0x2F6:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v22, a2 + 4);
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>>((uint64_t *)a3, &v23);
      if ((_BYTE)v25)
        WebKit::RemoteComputePassEncoder::dispatchIndirect(v4, (uint64_t)v23, v24);
      goto LABEL_34;
    case 0x2F7:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v23, a2 + 4);
      v7 = *(void (**)(void))(**(_QWORD **)(v4 + 16) + 40);
      goto LABEL_11;
    case 0x2F8:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v22, a2 + 4);
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)&v23);
      if (!(_BYTE)v24)
        goto LABEL_34;
      v8 = *(WTF::StringImpl ***)(v4 + 16);
      v9 = (void (*)(WTF::StringImpl **, WTF::StringImpl **))*((_QWORD *)*v8 + 10);
      goto LABEL_14;
    case 0x2F9:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v23, a2 + 4);
      v7 = *(void (**)(void))(**(_QWORD **)(v4 + 16) + 72);
LABEL_11:
      v7();
      goto LABEL_26;
    case 0x2FA:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v22, a2 + 4);
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)&v23);
      if (!(_BYTE)v24)
        goto LABEL_34;
      v8 = *(WTF::StringImpl ***)(v4 + 16);
      v9 = (void (*)(WTF::StringImpl **, WTF::StringImpl **))*((_QWORD *)*v8 + 8);
LABEL_14:
      v10 = &v23;
      goto LABEL_29;
    case 0x2FB:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v22, a2 + 4);
      IPC::Decoder::decode<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>((uint64_t *)a3, &v23);
      if (v28)
      {
        WebKit::RemoteComputePassEncoder::setBindGroup(v4, v23, v24, (uint64_t)&v25);
        if (v28)
        {
          if (v27)
          {
            v12 = v25;
            if (v25)
            {
              v25 = 0;
              v26 = 0;
              WTF::fastFree(v12, v11);
            }
          }
        }
      }
      goto LABEL_34;
    case 0x2FC:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v22, a2 + 4);
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)&v23);
      if (!(_BYTE)v24)
        goto LABEL_34;
      v14 = *(WTF::StringImpl ***)(v4 + 16);
      v15 = v14[2];
      v16 = v23;
      v23 = 0;
      v14[2] = v16;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v13);
        else
          *(_DWORD *)v15 -= 2;
      }
      v9 = (void (*)(WTF::StringImpl **, WTF::StringImpl **))*((_QWORD *)*v14 + 11);
      v8 = v14;
      v10 = v14 + 2;
LABEL_29:
      v9(v8, v10);
      if ((_BYTE)v24)
      {
        v21 = v23;
        v23 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, v20);
          else
            *(_DWORD *)v21 -= 2;
        }
      }
LABEL_34:
      v19 = (unsigned __int8 ***)&v22;
      goto LABEL_35;
    case 0x2FD:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v23, a2 + 4);
      v17 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v18)
        WebKit::RemoteComputePassEncoder::setPipeline(v4, v17);
LABEL_26:
      v19 = (unsigned __int8 ***)&v23;
LABEL_35:
      this = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v19);
      break;
    default:
      return this;
  }
  return this;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t *a1)
{
  uint64_t result;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::decode<IPC::Decoder>(a1);
  if (!v3)
  {
    v5 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v4 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::decode<IPC::Decoder>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  v1 = a1[1];
  v2 = *a1;
  v3 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v1 < v3 || v1 - v3 <= 7)
  {
    v8 = 0;
    v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10)
    {
      v14 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
        a1 = v14;
        v9 = *v14;
        v8 = v14[1];
      }
      else
      {
        v8 = 0;
        v9 = 0;
      }
    }
    while (1)
    {
      v1 = 0;
      v2 = 0;
      *a1 = 0;
      a1[1] = 0;
      v11 = a1[3];
      if (!v11)
        goto LABEL_11;
      v13 = a1;
      if (!v8)
      {
        v1 = 0;
        v2 = 0;
        goto LABEL_11;
      }
      a1 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v9, v8);
      v2 = *v13;
      if (!*v13)
      {
        a1 = v13;
        v1 = v13[1];
        goto LABEL_11;
      }
      __break(1u);
LABEL_21:
      v8 = v1;
      v9 = v2;
    }
  }
  v5 = (uint64_t *)(v2 + v3);
  a1[2] = v5 + 1;
  if (!v2)
    goto LABEL_21;
  v6 = *v5;
  if ((unint64_t)(v6 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
LABEL_11:
    v6 = 0;
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12)
    {
      if (v1)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v2);
      return 0;
    }
  }
  return v6;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21RemoteBarcodeDetector6DetectEN6WebKit21RemoteBarcodeDetectorES8_FvNS_23ObjectIdentifierGenericIN7WebCore31RenderingResourceIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONS_6VectorINSA_14ShapeDetection15DetectedBarcodeELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B4750;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21RemoteBarcodeDetector6DetectEN6WebKit21RemoteBarcodeDetectorES8_FvNS_23ObjectIdentifierGenericIN7WebCore31RenderingResourceIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONS_6VectorINSA_14ShapeDetection15DetectedBarcodeELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B4750;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21RemoteBarcodeDetector6DetectEN6WebKit21RemoteBarcodeDetectorES8_FvNS_23ObjectIdentifierGenericIN7WebCore31RenderingResourceIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONS_6VectorINSA_14ShapeDetection15DetectedBarcodeELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  IPC::Encoder *v14;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3069;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v14 = (IPC::Encoder *)v5;
  v6 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = v6;
  v7 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)a2;
    v9 = 48 * v7;
    do
    {
      IPC::ArgumentCoder<WebCore::ShapeDetection::DetectedBarcode,void>::encode((IPC::Encoder *)v5, v8);
      v8 += 48;
      v9 -= 48;
    }
    while (v9);
  }
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v14, 0, 0);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteBuffer8MapAsyncEN6WebKit12RemoteBufferES8_FvNS_9OptionSetIN7WebCore6WebGPU7MapModeEEEyNSt3__18optionalIyEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B4778;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteBuffer8MapAsyncEN6WebKit12RemoteBufferES8_FvNS_9OptionSetIN7WebCore6WebGPU7MapModeEEEyNSt3__18optionalIyEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B4778;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteBuffer8MapAsyncEN6WebKit12RemoteBufferES8_FvNS_9OptionSetIN7WebCore6WebGPU7MapModeEEEyNSt3__18optionalIyEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3071;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteBuffer4CopyEN6WebKit12RemoteBufferES8_FvONSt3__18optionalIN7WebCore18SharedMemoryHandleEEEmONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B47A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteBuffer4CopyEN6WebKit12RemoteBufferES8_FvONSt3__18optionalIN7WebCore18SharedMemoryHandleEEEmONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B47A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteBuffer4CopyEN6WebKit12RemoteBufferES8_FvONSt3__18optionalIN7WebCore18SharedMemoryHandleEEEmONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3070;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12RemoteBuffer14GetMappedRangeEN6WebKit12RemoteBufferES8_FvyNSt3__18optionalIyEEONS_17CompletionHandlerIFvONSA_INS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B47C8;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12RemoteBuffer14GetMappedRangeEN6WebKit12RemoteBufferES8_FvyNSt3__18optionalIyEEONS_17CompletionHandlerIFvONSA_INS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B47C8;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12RemoteBuffer14GetMappedRangeEN6WebKit12RemoteBufferES8_FvyNSt3__18optionalIyEEONS_17CompletionHandlerIFvONSA_INS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  IPC::Encoder *v11;
  char *v12;
  unint64_t v13;
  IPC::Encoder *result;
  uint64_t v16;
  void *v17;
  WTF *v18;
  void *v19;
  IPC::Encoder *v20;
  unint64_t v21;
  unint64_t v22;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v20, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v20);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_8;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 112))
  {
    v8 = *(_QWORD *)(v2 + 48);
    v6 = *(unint64_t **)(v2 + 56);
    v7 = v6[1];
    v9 = v8 - 1;
    if (v8 == 1)
    {
      if (v7 >= 0x100)
      {
        v9 = 0;
        v6 = (unint64_t *)v6[2];
LABEL_10:
        v11 = (IPC::Encoder *)(v6 + 32);
        v20 = v11;
        v21 = v9;
        v22 = 0;
        v12 = (char *)(((unint64_t)v6 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v13 = v12 - (char *)v11;
        if (v12 >= (char *)v11)
        {
          if (v13 <= 0xFFFFFFFFFFFFFFFDLL && v13 + 2 <= v9)
          {
            *(_WORD *)v12 = 2823;
            v22 = v13 + 2;
            result = (IPC::Encoder *)IPC::ArgumentCoder<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>&>(&v20, a2);
            if (v21)
              return result;
            *(_WORD *)((char *)v11 + v13) = 2821;
            goto LABEL_17;
          }
          v21 = 0;
        }
        result = (IPC::Encoder *)IPC::ArgumentCoder<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>&>(&v20, a2);
        if (v21)
          return result;
        goto LABEL_17;
      }
    }
    else
    {
      v10 = v7 >= 0x100;
      v7 -= 256;
      if (v10)
      {
        v6 = (unint64_t *)v6[2];
        if (!v8)
        {
LABEL_9:
          v9 = v7;
          goto LABEL_10;
        }
        if (v7 >= v9)
          goto LABEL_10;
      }
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
LABEL_17:
  v16 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v16 = 2823;
  *(_QWORD *)(v16 + 8) = v3;
  *(_QWORD *)(v16 + 528) = v16 + 16;
  *(_QWORD *)(v16 + 536) = v16 + 16;
  *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v16 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
  v20 = (IPC::Encoder *)v16;
  IPC::ArgumentCoder<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((IPC::Encoder *)v16, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v20, 0, 0);
  result = v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v17);
    return (IPC::Encoder *)WTF::fastFree(v18, v19);
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>&>(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  id v4;

  v3 = result[1];
  v2 = result[2];
  if (*(_BYTE *)(a2 + 16))
  {
    if (v2 >= v3)
    {
      result[1] = 0;
      return IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(result, *(const void **)a2, *(unsigned int *)(a2 + 12));
    }
    *(_BYTE *)(*result + v2) = 1;
    result[2] = v2 + 1;
    if (*(_BYTE *)(a2 + 16))
      return IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(result, *(const void **)a2, *(unsigned int *)(a2 + 12));
    v4 = std::__throw_bad_optional_access[abi:sn180100]();
    return (_QWORD *)IPC::ArgumentCoder<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v4);
  }
  else if (v2 >= v3)
  {
    result[1] = 0;
  }
  else
  {
    *(_BYTE *)(*result + v2) = 0;
    result[2] = v2 + 1;
  }
  return result;
}

void IPC::ArgumentCoder<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *v5;
  id v6;
  void *v7;

  v4 = *(unsigned __int8 *)(a2 + 16);
  v5 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *v5 = 1;
    if (*(_BYTE *)(a2 + 16))
    {
      IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)a1, *(const void **)a2, *(unsigned int *)(a2 + 12));
    }
    else
    {
      v6 = std::__throw_bad_optional_access[abi:sn180100]();
      std::__optional_destruct_base<WebKit::WebGPU::RenderPassDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v7);
    }
  }
  else
  {
    *v5 = 0;
  }
}

uint64_t std::__optional_destruct_base<WebKit::WebGPU::RenderPassDescriptor,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 120))
  {
    WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 8, a2);
    v4 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

unint64_t IPC::Decoder::decode<WebKit::WebGPU::ImageCopyBuffer>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyBuffer,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 32))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::WebGPU::ImageCopyTexture>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyTexture,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 56))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t std::__tuple_leaf<1ul,WebKit::WebGPU::ImageCopyTexture,false>::__tuple_leaf[abi:sn180100]<WebKit::WebGPU::ImageCopyTexture,void>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 16) = 0;
  v5 = a1 + 16;
  *(_BYTE *)(a1 + 40) = 0;
  if (*((_BYTE *)a2 + 40))
  {
    *(_DWORD *)(a1 + 32) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,(std::__variant_detail::_Trait)1>>(v5, (uint64_t)(a2 + 2));
    *(_BYTE *)(a1 + 40) = 1;
  }
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteCompositorIntegration21RecreateRenderBuffersEN6WebKit27RemoteCompositorIntegrationES8_FviiON7WebCore21DestinationColorSpaceENS9_22AlphaPremultiplicationENS9_6WebGPU13TextureFormatENS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONS_6VectorINS_13MachSendRightELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B4810;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteCompositorIntegration21RecreateRenderBuffersEN6WebKit27RemoteCompositorIntegrationES8_FviiON7WebCore21DestinationColorSpaceENS9_22AlphaPremultiplicationENS9_6WebGPU13TextureFormatENS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONS_6VectorINS_13MachSendRightELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B4810;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteCompositorIntegration21RecreateRenderBuffersEN6WebKit27RemoteCompositorIntegrationES8_FviiON7WebCore21DestinationColorSpaceENS9_22AlphaPremultiplicationENS9_6WebGPU13TextureFormatENS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONS_6VectorINS_13MachSendRightELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_EE4callESQ_(uint64_t a1, uint64_t a2)
{
  IPC::Encoder *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  void *v14;
  IPC::Encoder *v15;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v15, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v15);
  if (*(_BYTE *)(a1 + 16))
  {
    v5 = *(_QWORD *)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 8);
    v7 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v7 = 2823;
    *(_QWORD *)(v7 + 8) = v6;
    *(_QWORD *)(v7 + 528) = v7 + 16;
    *(_QWORD *)(v7 + 536) = v7 + 16;
    *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v7 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
    v15 = (IPC::Encoder *)v7;
    v8 = *(unsigned int *)(a2 + 12);
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 8uLL, 8) = v8;
    v9 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD *)a2;
      v11 = 4 * v9;
      do
      {
        IPC::Encoder::addAttachment(v7, v10);
        v10 += 4;
        v11 -= 4;
      }
      while (v11);
    }
    IPC::Connection::sendMessageImpl(*(_QWORD *)(v5 + 32), (uint64_t *)&v15, 0, 0);
    result = v15;
    v15 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v12);
      return (IPC::Encoder *)WTF::fastFree(v13, v14);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteCompositorIntegration17PrepareForDisplayEN6WebKit27RemoteCompositorIntegrationES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B4838;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteCompositorIntegration17PrepareForDisplayEN6WebKit27RemoteCompositorIntegrationES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B4838;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteCompositorIntegration17PrepareForDisplayEN6WebKit27RemoteCompositorIntegrationES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  IPC::Encoder *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v11, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v11);
  if (*(_BYTE *)(a1 + 16))
  {
    v5 = *(_QWORD *)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 8);
    v7 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v7 = 2823;
    *(_QWORD *)(v7 + 8) = v6;
    *(_QWORD *)(v7 + 528) = v7 + 16;
    *(_QWORD *)(v7 + 536) = v7 + 16;
    *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v7 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
    v11 = (IPC::Encoder *)v7;
    *IPC::Encoder::grow((IPC::Encoder *)v7, 1uLL, 1) = a2;
    IPC::Connection::sendMessageImpl(*(_QWORD *)(v5 + 32), (uint64_t *)&v11, 0, 0);
    result = v11;
    v11 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v8);
      return (IPC::Encoder *)WTF::fastFree(v9, v10);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteCompositorIntegration30PaintCompositedResultsToCanvasEN6WebKit27RemoteCompositorIntegrationES8_FvNS_23ObjectIdentifierGenericIN7WebCore31RenderingResourceIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEjONS_17CompletionHandlerIFvvEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B4860;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteCompositorIntegration30PaintCompositedResultsToCanvasEN6WebKit27RemoteCompositorIntegrationES8_FvNS_23ObjectIdentifierGenericIN7WebCore31RenderingResourceIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEjONS_17CompletionHandlerIFvvEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B4860;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteCompositorIntegration30PaintCompositedResultsToCanvasEN6WebKit27RemoteCompositorIntegrationES8_FvNS_23ObjectIdentifierGenericIN7WebCore31RenderingResourceIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEjONS_17CompletionHandlerIFvvEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  IPC::Encoder *result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  WTF *v17;
  void *v18;
  IPC::Encoder *v19;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v19, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v19);
  v6 = *(unsigned __int8 *)(a1 + 16);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_8;
  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v1 + 112))
  {
    v7 = *(_QWORD *)(v1 + 48);
    v6 = *(_QWORD *)(v1 + 56);
    v5 = *(_QWORD *)(v6 + 8);
    v8 = v7 - 1;
    if (v7 != 1)
    {
      v9 = v5 >= 0x100;
      v5 -= 256;
      if (v9)
      {
        v6 = *(_QWORD *)(v6 + 16);
        if (!v7)
        {
LABEL_9:
          v8 = v5;
LABEL_10:
          v10 = v6 + 256;
          v11 = (v6 + 257) & 0xFFFFFFFFFFFFFFFELL;
          if (v11 < v6 + 256)
          {
            if (v8)
              return result;
            goto LABEL_17;
          }
          goto LABEL_11;
        }
        if (v5 >= v8)
          goto LABEL_10;
      }
LABEL_8:
      __break(1u);
      goto LABEL_9;
    }
    if (v5 <= 0xFF)
      goto LABEL_8;
    v6 = *(_QWORD *)(v6 + 16);
    v10 = v6 + 256;
    v11 = (v6 + 257) & 0xFFFFFFFFFFFFFFFELL;
    if (v11 >= v6 + 256)
    {
      v8 = 0;
LABEL_11:
      v12 = v11 - v10;
      if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v12 + 2 <= v8)
      {
        v14 = v6 + 256;
        *(_WORD *)(v14 + v12) = 2823;
        if (v8)
          return result;
        *(_WORD *)(v14 + v12) = 2821;
      }
    }
  }
LABEL_17:
  v15 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v15 = 2823;
  *(_QWORD *)(v15 + 8) = v2;
  *(_QWORD *)(v15 + 528) = v15 + 16;
  *(_QWORD *)(v15 + 536) = v15 + 16;
  *(_OWORD *)(v15 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v15 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v15);
  v19 = (IPC::Encoder *)v15;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v1 + 32), (uint64_t *)&v19, 0, 0);
  result = v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v16);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,unsigned int>>(uint64_t *a1)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;

  result = IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int>,void>::decode<IPC::Decoder>(a1);
  if ((v3 & 0xFF00000000) == 0)
  {
    v5 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v4 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int>,void>::decode<IPC::Decoder>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned int *v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v1 = a1[1];
  v2 = *a1;
  v3 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v1 >= v3 && v1 - v3 > 3)
  {
    v5 = (unsigned int *)(v2 + v3);
    a1[2] = v5 + 1;
    if (v2)
    {
      v13 = *v5 | 0x100000000;
      return IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int>,void>::decode<IPC::Decoder,unsigned int>(a1, (unsigned int *)&v13);
    }
    v8 = v1;
    v9 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10)
    {
      v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v10 + 16))(v10, v2, v1);
        a1 = v12;
        v9 = *v12;
        v8 = v12[1];
      }
      else
      {
        v8 = 0;
        v9 = 0;
      }
    }
  }
  v6 = 0;
  *a1 = 0;
  a1[1] = 0;
  v11 = a1[3];
  if (v11)
  {
    if (v8)
      (*(void (**)(uint64_t, uint64_t, unint64_t, _QWORD, _QWORD))(*(_QWORD *)v11 + 16))(v11, v9, v8, 0, 0);
    return 0;
  }
  return v6;
}

unint64_t IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int>,void>::decode<IPC::Decoder,unsigned int>(_QWORD *a1, unsigned int *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int *v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v2 = a1[1];
  v3 = *a1;
  v4 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v2 >= v4 && v2 - v4 > 3)
  {
    v6 = (unsigned int *)(v3 + v4);
    a1[2] = v6 + 1;
    if (v3)
    {
      v14 = *v6 | 0x100000000;
      return IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int>,void>::decode<IPC::Decoder,unsigned int,unsigned int>(a1, a2, (unsigned int *)&v14);
    }
    v9 = v2;
    v10 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11)
    {
      v13 = a1;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v3, v2);
        a1 = v13;
        v10 = *v13;
        v9 = v13[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
  }
  v7 = 0;
  *a1 = 0;
  a1[1] = 0;
  v12 = a1[3];
  if (v12)
  {
    if (v9)
      (*(void (**)(uint64_t, uint64_t, unint64_t, _QWORD, _QWORD))(*(_QWORD *)v12 + 16))(v12, v10, v9, 0, 0);
    return 0;
  }
  return v7;
}

unint64_t IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int>,void>::decode<IPC::Decoder,unsigned int,unsigned int>(_QWORD *a1, unsigned int *a2, unsigned int *a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v3 = a1[1];
  v4 = *a1;
  v5 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v3 < v5 || v3 - v5 <= 3)
  {
LABEL_12:
    v9 = 0;
    v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11)
    {
      v13 = a1;
      if (v3)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v4, v3);
        a1 = v13;
        v10 = *v13;
        v9 = v13[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
    goto LABEL_13;
  }
  a1[2] = v4 + v5 + 4;
  if (v4)
  {
    v4 = *((unsigned __int8 *)a2 + 4);
    if (*((_BYTE *)a2 + 4))
    {
      v4 = *((unsigned __int8 *)a3 + 4);
      if (*((_BYTE *)a3 + 4))
        return *a2 | ((unint64_t)*a3 << 32);
    }
    __break(1u);
    goto LABEL_12;
  }
  v9 = v3;
  v10 = 0;
LABEL_13:
  v7 = 0;
  *a1 = 0;
  a1[1] = 0;
  v12 = a1[3];
  if (v12)
  {
    if (v9)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v10);
    return 0;
  }
  return v7;
}

WTF *IPC::Decoder::decode<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[40])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WTF *IPC::ArgumentCoder<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int *v6;
  WTF *result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;

  v2 = a1[1];
  v3 = *a1;
  v4 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v2 >= v4 && v2 - v4 > 3)
  {
    v6 = (unsigned int *)(v3 + v4);
    a1[2] = (uint64_t)(v6 + 1);
    if (v3)
    {
      v14 = *v6 | 0x100000000;
      return IPC::ArgumentCoder<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,void>::decode<IPC::Decoder,unsigned int>(a1, (uint64_t)&v14, a2);
    }
    v8 = v2;
    v9 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10)
    {
      v11 = a1;
      v13 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v10 + 16))(v10, v3, v2);
        a1 = v11;
        a2 = v13;
        v9 = *v11;
        v8 = v11[1];
      }
      else
      {
        v8 = 0;
        v9 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  result = (WTF *)a1[3];
  if (result)
  {
    if (v8)
    {
      v12 = a2;
      result = (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v9);
      a2 = v12;
    }
  }
  *a2 = 0;
  a2[40] = 0;
  return result;
}

WTF *IPC::ArgumentCoder<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,void>::decode<IPC::Decoder,unsigned int>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  WTF *result;
  uint64_t v7;
  _QWORD v8[2];

  result = (WTF *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v8[0] = result;
  v8[1] = v7;
  if ((_BYTE)v7)
    return IPC::ArgumentCoder<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,void>::decode<IPC::Decoder,unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1, a2, (uint64_t)v8, a3);
  *a3 = 0;
  a3[40] = 0;
  return result;
}

WTF *IPC::ArgumentCoder<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,void>::decode<IPC::Decoder,unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  WTF *result;
  void *v8;
  BOOL v9;
  WTF *v10;
  int v11;
  char v12;
  char v13;

  result = (WTF *)IPC::Decoder::decode<std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a1, (uint64_t)&v10);
  if (v13)
  {
    result = (WTF *)IPC::ArgumentCoder<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,void>::decode<IPC::Decoder,unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, a3, (uint64_t)&v10, (uint64_t)a4);
    if (v13)
      v9 = v12 == 0;
    else
      v9 = 1;
    if (!v9)
    {
      result = v10;
      if (v10)
      {
        v10 = 0;
        v11 = 0;
        return (WTF *)WTF::fastFree(result, v8);
      }
    }
  }
  else
  {
    *a4 = 0;
    a4[40] = 0;
  }
  return result;
}

uint64_t *IPC::Decoder::decode<std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 24))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,void>::decode<IPC::Decoder,unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t result;

  result = a4;
  if (*(_BYTE *)(a1 + 4) && *(_BYTE *)(a2 + 8) && *(_BYTE *)(a3 + 24))
  {
    result = _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJjN3WTF23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS3_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS_8optionalINS3_6VectorIjLm0ENS3_15CrashOnOverflowELm16ENS3_10FastMallocEEEEEEEC2B8sn180100IJLm0ELm1ELm2EEJjS9_SF_EJEJEJjS9_SF_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSJ_IJDpT2_EEEDpOT3_(a4, (_DWORD *)a1, (uint64_t *)a2, (uint64_t *)a3);
    *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  _QWORD v15[2];
  char v16;

  v3 = result[1];
  v4 = *result;
  v5 = result[2] - *result;
  if (v3 <= v5)
  {
    v9 = 0;
    v10 = 0;
    *result = 0;
    result[1] = 0;
    v11 = result[3];
    if (v11)
    {
      v14 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
        result = v14;
        v10 = *v14;
        v9 = v14[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
    goto LABEL_12;
  }
  v6 = (unsigned __int8 *)(v4 + v5);
  result[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    v9 = v3;
    v10 = 0;
LABEL_12:
    v3 = 0;
    v4 = 0;
    *result = 0;
    result[1] = 0;
    v12 = result[3];
    if (v12)
    {
      v13 = result;
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v10, v9);
        result = v13;
        v4 = *v13;
        v3 = v13[1];
      }
      else
      {
        v3 = 0;
        v4 = 0;
      }
    }
    goto LABEL_13;
  }
  v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      result = (uint64_t *)IPC::Decoder::decode<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(result, v15);
      v8 = v16;
      if (v16)
      {
        *(_QWORD *)a2 = v15[0];
        *(_QWORD *)(a2 + 8) = v15[1];
        v8 = 1;
        *(_BYTE *)(a2 + 16) = 1;
      }
      else
      {
        *(_BYTE *)a2 = 0;
      }
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 16) = 0;
      v8 = 1;
    }
    *(_BYTE *)(a2 + 24) = v8;
    return result;
  }
LABEL_13:
  *result = 0;
  result[1] = 0;
  result = (uint64_t *)result[3];
  if (result && v3)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v4);
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  return result;
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJjN3WTF23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS3_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS_8optionalINS3_6VectorIjLm0ENS3_15CrashOnOverflowELm16ENS3_10FastMallocEEEEEEEC2B8sn180100IJLm0ELm1ELm2EEJjS9_SF_EJEJEJjS9_SF_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSJ_IJDpT2_EEEDpOT3_(uint64_t result, _DWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_DWORD *)result = *a2;
  v4 = *a3;
  *(_BYTE *)(result + 16) = 0;
  *(_QWORD *)(result + 8) = v4;
  *(_BYTE *)(result + 32) = 0;
  if (*((_BYTE *)a4 + 16))
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    v5 = *a4;
    *a4 = 0;
    *(_QWORD *)(result + 16) = v5;
    LODWORD(v5) = *((_DWORD *)a4 + 2);
    *((_DWORD *)a4 + 2) = 0;
    *(_DWORD *)(result + 24) = v5;
    LODWORD(v5) = *((_DWORD *)a4 + 3);
    *((_DWORD *)a4 + 3) = 0;
    *(_DWORD *)(result + 28) = v5;
    *(_BYTE *)(result + 32) = 1;
  }
  return result;
}

void WebKit::WebCookieManager::platformSetHTTPCookieAcceptPolicy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  WebCore::NetworkStorageSession *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  CFTypeRef v11;
  CFTypeRef cf;

  WebKit::WebCookieManager::protectedProcess(a1, &cf);
  v6 = (WebCore::NetworkStorageSession *)WebKit::NetworkProcess::storageSession((uint64_t)cf, a2);
  v7 = (unsigned int *)cf;
  cf = 0;
  if (v7)
  {
    v8 = v7 + 30;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 30);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  if (v6)
  {
    WebCore::NetworkStorageSession::nsCookieStorage(v6);
    if (cf)
    {
      objc_msgSend((id)cf, "_cookieStorage");
      CFHTTPCookieStorageSetCookieAcceptPolicy();
      WebKit::saveCookies((void *)cf, a4);
    }
    else
    {
      WTF::CompletionHandler<void ()(void)>::operator()(a4);
    }
    v11 = cf;
    cf = 0;
    if (v11)
      CFRelease(v11);
  }
  else
  {
    WTF::CompletionHandler<void ()(void)>::operator()(a4);
  }
}

void sub_196FC5464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *cf)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (cf)
  {
    v11 = cf + 30;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, cf + 30);
      (*(void (**)(unsigned int *))(*(_QWORD *)cf + 8))(cf);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::LegacyCustomProtocolManager::networkProcessCreated(WebKit::NetworkProcess &)::$_0::operator()<WebKit::LegacyCustomProtocolManager>(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  int v5;

  v1 = a1;
  if (!a1)
    return v1;
  v2 = (unsigned __int8 *)(a1 + 56);
  if (__ldaxr((unsigned __int8 *)(a1 + 56)))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEABB3C](a1 + 56);
    goto LABEL_6;
  }
  if (__stxr(1u, v2))
    goto LABEL_5;
LABEL_6:
  v4 = *(_QWORD *)(v1 + 48);
  if (v4)
    v1 = *(_DWORD *)(v4 - 12) != 0;
  else
    v1 = 0;
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, v2))
      return v1;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v1;
}

void sub_196FC56FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_196FC5798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl **WebKit::LegacyCustomProtocolManager::unregisterScheme(WebKit::LegacyCustomProtocolManager *this, WTF::ASCIICaseInsensitiveHash **a2)
{
  unsigned __int8 *v4;
  uint64_t *v6;
  WTF::StringImpl **result;
  uint64_t v8;
  int v9;

  v4 = (unsigned __int8 *)this + 56;
  if (__ldaxr((unsigned __int8 *)this + 56))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 56);
LABEL_5:
  v6 = (uint64_t *)((char *)this + 48);
  result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(v6, a2);
  if (*v6)
  {
    v8 = *v6 + 8 * *(unsigned int *)(*v6 - 4);
    if ((WTF::StringImpl **)v8 == result)
      goto LABEL_12;
  }
  else
  {
    if (!result)
      goto LABEL_12;
    v8 = 0;
  }
  if ((WTF::StringImpl **)v8 != result)
    result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::remove(v6, result);
LABEL_12:
  v9 = __ldxr(v4);
  if (v9 != 1)
  {
    __clrex();
    return (WTF::StringImpl **)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (WTF::StringImpl **)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

void sub_196FC58CC(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

void WebKit::LegacyCustomProtocolManager::didFailWithError(uint64_t a1, uint64_t a2, WebCore::ResourceError *a3)
{
  void *v6;
  const void *v7;
  const void *v8;
  __CFRunLoop *v9;
  CFTypeRef v10;
  CFTypeRef v11;
  _QWORD block[4];
  CFTypeRef cf;
  CFTypeRef v14;
  void *v15;

  WebKit::LegacyCustomProtocolManager::protocolForID(a1, a2, &v15);
  v6 = v15;
  if (v15)
  {
    v7 = (const void *)WebCore::ResourceError::nsError(a3);
    v8 = v7;
    if (v7)
      CFRetain(v7);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3321888768;
    block[2] = ___ZN6WebKit27LegacyCustomProtocolManager16didFailWithErrorEN3WTF23ObjectIdentifierGenericINS_26LegacyCustomProtocolIDTypeENS1_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKN7WebCore13ResourceErrorE_block_invoke;
    block[3] = &__block_descriptor_48_e8_32c40_ZTSN3WTF9RetainPtrI16WKCustomProtocolEE40c30_ZTSN3WTF9RetainPtrI7NSErrorEE_e5_v8__0l;
    cf = v6;
    CFRetain(v6);
    v14 = v8;
    if (v8)
      CFRetain(v8);
    v9 = (__CFRunLoop *)objc_msgSend(v6, "initializationRunLoop");
    CFRunLoopPerformBlock(v9, (CFTypeRef)*MEMORY[0x1E0C9B280], block);
    CFRunLoopWakeUp(v9);
    WebKit::LegacyCustomProtocolManager::removeCustomProtocol(a1, a2);
    v10 = v14;
    v14 = 0;
    if (v10)
      CFRelease(v10);
    v11 = cf;
    cf = 0;
    if (v11)
      CFRelease(v11);
    if (v8)
      CFRelease(v8);
    CFRelease(v6);
  }
}

void sub_196FC5A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf, CFTypeRef a15)
{
  const void *v15;
  const void *v16;

  if (cf)
    CFRelease(cf);
  if (v16)
    CFRelease(v16);
  CFRelease(v15);
  _Unwind_Resume(a1);
}

_QWORD *WebKit::LegacyCustomProtocolManager::protocolForID@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v5;
  uint64_t *v7;
  _QWORD *result;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v11 = a2;
  v5 = (unsigned __int8 *)(a1 + 40);
  if (__ldaxr((unsigned __int8 *)(a1 + 40)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 40);
LABEL_5:
  v7 = (uint64_t *)(a1 + 32);
  result = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v7, &v11);
  v9 = *v7;
  if (*v7)
    v9 += 16 * *(unsigned int *)(v9 - 4);
  if ((_QWORD *)v9 == result)
  {
    *a3 = 0;
  }
  else
  {
    result = (_QWORD *)result[1];
    *a3 = result;
    if (result)
      result = CFRetain(result);
  }
  v10 = __ldxr(v5);
  if (v10 != 1)
  {
    __clrex();
    return (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  if (__stlxr(0, v5))
    return (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  return result;
}

void sub_196FC5B38(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t ___ZN6WebKit27LegacyCustomProtocolManager16didFailWithErrorEN3WTF23ObjectIdentifierGenericINS_26LegacyCustomProtocolIDTypeENS1_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKN7WebCore13ResourceErrorE_block_invoke(uint64_t a1)
{
  return objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "client"), "URLProtocol:didFailWithError:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

CFTypeRef __copy_helper_block_e8_32c40_ZTSN3WTF9RetainPtrI16WKCustomProtocolEE40c30_ZTSN3WTF9RetainPtrI7NSErrorEE(uint64_t a1, uint64_t a2)
{
  const void *v4;
  CFTypeRef result;

  v4 = *(const void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    CFRetain(v4);
  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void sub_196FC5BD4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c40_ZTSN3WTF9RetainPtrI16WKCustomProtocolEE40c30_ZTSN3WTF9RetainPtrI7NSErrorEE(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    CFRelease(v3);
}

void WebKit::LegacyCustomProtocolManager::didLoadData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  const void *v7;
  __CFRunLoop *v8;
  CFTypeRef v9;
  CFTypeRef v10;
  _QWORD block[4];
  CFTypeRef v12;
  CFTypeRef cf;
  void *v14;

  WebKit::LegacyCustomProtocolManager::protocolForID(a1, a2, &v14);
  v6 = v14;
  if (v14)
  {
    v7 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", a3, a4);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3321888768;
    block[2] = ___ZN6WebKit27LegacyCustomProtocolManager11didLoadDataEN3WTF23ObjectIdentifierGenericINS_26LegacyCustomProtocolIDTypeENS1_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENSt3__14spanIKhLm18446744073709551615EEE_block_invoke;
    block[3] = &__block_descriptor_48_e8_32c40_ZTSN3WTF9RetainPtrI16WKCustomProtocolEE40c29_ZTSN3WTF9RetainPtrI6NSDataEE_e5_v8__0l;
    v12 = v6;
    CFRetain(v6);
    cf = v7;
    if (v7)
      CFRetain(v7);
    v8 = (__CFRunLoop *)objc_msgSend(v6, "initializationRunLoop");
    CFRunLoopPerformBlock(v8, (CFTypeRef)*MEMORY[0x1E0C9B280], block);
    CFRunLoopWakeUp(v8);
    v9 = cf;
    cf = 0;
    if (v9)
      CFRelease(v9);
    v10 = v12;
    v12 = 0;
    if (v10)
      CFRelease(v10);
    if (v7)
      CFRelease(v7);
    CFRelease(v6);
  }
}

void sub_196FC5D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf, CFTypeRef a15)
{
  const void *v15;
  const void *v16;

  if (cf)
    CFRelease(cf);
  if (v16)
    CFRelease(v16);
  CFRelease(v15);
  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebKit27LegacyCustomProtocolManager11didLoadDataEN3WTF23ObjectIdentifierGenericINS_26LegacyCustomProtocolIDTypeENS1_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENSt3__14spanIKhLm18446744073709551615EEE_block_invoke(uint64_t a1)
{
  return objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "client"), "URLProtocol:didLoadData:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

CFTypeRef __copy_helper_block_e8_32c40_ZTSN3WTF9RetainPtrI16WKCustomProtocolEE40c29_ZTSN3WTF9RetainPtrI6NSDataEE(uint64_t a1, uint64_t a2)
{
  const void *v4;
  CFTypeRef result;

  v4 = *(const void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    CFRetain(v4);
  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void sub_196FC5DF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c40_ZTSN3WTF9RetainPtrI16WKCustomProtocolEE40c29_ZTSN3WTF9RetainPtrI6NSDataEE(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    CFRelease(v3);
}

void WebKit::LegacyCustomProtocolManager::didReceiveResponse(uint64_t a1, uint64_t a2, WebCore::ResourceResponse *a3, char a4)
{
  void *v6;
  const void *v7;
  const void *v8;
  __CFRunLoop *v9;
  CFTypeRef v10;
  CFTypeRef v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  void *v15;
  CFTypeRef cf;
  CFTypeRef v17;
  char v18;
  void *v19;

  WebKit::LegacyCustomProtocolManager::protocolForID(a1, a2, &v19);
  v6 = v19;
  if (v19)
  {
    v7 = (const void *)WebCore::ResourceResponse::nsURLResponse(a3);
    v8 = v7;
    if (v7)
      CFRetain(v7);
    v12 = MEMORY[0x1E0C809B0];
    v13 = 3321888768;
    v14 = ___ZN6WebKit27LegacyCustomProtocolManager18didReceiveResponseEN3WTF23ObjectIdentifierGenericINS_26LegacyCustomProtocolIDTypeENS1_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKN7WebCore16ResourceResponseENS_18CacheStoragePolicyE_block_invoke;
    v15 = &__block_descriptor_49_e8_32c40_ZTSN3WTF9RetainPtrI16WKCustomProtocolEE40c37_ZTSN3WTF9RetainPtrI13NSURLResponseEE_e5_v8__0l;
    cf = v6;
    CFRetain(v6);
    v17 = v8;
    if (v8)
      CFRetain(v8);
    v18 = a4;
    v9 = (__CFRunLoop *)objc_msgSend(v6, "initializationRunLoop", v12, v13, v14, v15);
    CFRunLoopPerformBlock(v9, (CFTypeRef)*MEMORY[0x1E0C9B280], &v12);
    CFRunLoopWakeUp(v9);
    v10 = v17;
    v17 = 0;
    if (v10)
      CFRelease(v10);
    v11 = cf;
    cf = 0;
    if (v11)
      CFRelease(v11);
    if (v8)
      CFRelease(v8);
    CFRelease(v6);
  }
}

void sub_196FC5F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf, CFTypeRef a14)
{
  const void *v14;
  const void *v15;

  if (cf)
    CFRelease(cf);
  if (v15)
    CFRelease(v15);
  CFRelease(v14);
  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebKit27LegacyCustomProtocolManager18didReceiveResponseEN3WTF23ObjectIdentifierGenericINS_26LegacyCustomProtocolIDTypeENS1_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKN7WebCore16ResourceResponseENS_18CacheStoragePolicyE_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)objc_msgSend(*(id *)(a1 + 32), "client");
  if (*(unsigned __int8 *)(a1 + 48) >= 2u)
    v3 = 2;
  else
    v3 = *(unsigned __int8 *)(a1 + 48);
  return objc_msgSend(v2, "URLProtocol:didReceiveResponse:cacheStoragePolicy:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v3);
}

CFTypeRef __copy_helper_block_e8_32c40_ZTSN3WTF9RetainPtrI16WKCustomProtocolEE40c37_ZTSN3WTF9RetainPtrI13NSURLResponseEE(uint64_t a1, uint64_t a2)
{
  const void *v4;
  CFTypeRef result;

  v4 = *(const void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    CFRetain(v4);
  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void sub_196FC6038(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c40_ZTSN3WTF9RetainPtrI16WKCustomProtocolEE40c37_ZTSN3WTF9RetainPtrI13NSURLResponseEE(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    CFRelease(v3);
}

void WebKit::LegacyCustomProtocolManager::didFinishLoading(uint64_t a1, uint64_t a2)
{
  void *v4;
  __CFRunLoop *v5;
  CFTypeRef v6;
  uint64_t v7;
  CFTypeRef v8;
  CFTypeRef cf;

  WebKit::LegacyCustomProtocolManager::protocolForID(a1, a2, &cf);
  v4 = (void *)cf;
  if (cf)
  {
    v7 = MEMORY[0x1E0C809B0];
    v8 = cf;
    CFRetain(cf);
    v5 = (__CFRunLoop *)objc_msgSend(v4, "initializationRunLoop", v7, 3321888768, ___ZN6WebKit27LegacyCustomProtocolManager16didFinishLoadingEN3WTF23ObjectIdentifierGenericINS_26LegacyCustomProtocolIDTypeENS1_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEE_block_invoke, &__block_descriptor_40_e8_32c40_ZTSN3WTF9RetainPtrI16WKCustomProtocolEE_e5_v8__0l);
    CFRunLoopPerformBlock(v5, (CFTypeRef)*MEMORY[0x1E0C9B280], &v7);
    CFRunLoopWakeUp(v5);
    WebKit::LegacyCustomProtocolManager::removeCustomProtocol(a1, a2);
    v6 = v8;
    v8 = 0;
    if (v6)
      CFRelease(v6);
    CFRelease(v4);
  }
}

void sub_196FC6160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf)
{
  const void *v13;

  CFRelease(v13);
  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebKit27LegacyCustomProtocolManager16didFinishLoadingEN3WTF23ObjectIdentifierGenericINS_26LegacyCustomProtocolIDTypeENS1_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEE_block_invoke(uint64_t a1)
{
  return objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "client"), "URLProtocolDidFinishLoading:", *(_QWORD *)(a1 + 32));
}

CFTypeRef __copy_helper_block_e8_32c40_ZTSN3WTF9RetainPtrI16WKCustomProtocolEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_32c40_ZTSN3WTF9RetainPtrI16WKCustomProtocolEE(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    CFRelease(v2);
}

void WebKit::LegacyCustomProtocolManager::wasRedirectedToRequest(uint64_t a1, uint64_t a2, uint64_t a3, WebCore::ResourceResponse *a4)
{
  void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  __CFRunLoop *v10;
  CFTypeRef v11;
  CFTypeRef v12;
  CFTypeRef v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  void *v17;
  CFTypeRef cf;
  CFTypeRef v19;
  CFTypeRef v20;
  void *v21;

  WebKit::LegacyCustomProtocolManager::protocolForID(a1, a2, &v21);
  v5 = v21;
  if (v21)
  {
    v6 = (const void *)WebCore::ResourceRequest::nsURLRequest();
    v7 = v6;
    if (v6)
      CFRetain(v6);
    v8 = (const void *)WebCore::ResourceResponse::nsURLResponse(a4);
    v9 = v8;
    if (v8)
      CFRetain(v8);
    v14 = MEMORY[0x1E0C809B0];
    v15 = 3321888768;
    v16 = ___ZN6WebKit27LegacyCustomProtocolManager22wasRedirectedToRequestEN3WTF23ObjectIdentifierGenericINS_26LegacyCustomProtocolIDTypeENS1_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKN7WebCore15ResourceRequestERKNS7_16ResourceResponseE_block_invoke;
    v17 = &__block_descriptor_56_e8_32c241_ZTSKZN6WebKit27LegacyCustomProtocolManager22wasRedirectedToRequestEN3WTF23ObjectIdentifierGenericINS_26LegacyCustomProtocolIDTypeENS1_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKN7WebCore15ResourceRequestERKNS7_16ResourceResponseEE3__0_e5_v8__0l;
    CFRetain(v5);
    if (v7)
      CFRetain(v7);
    if (v9)
      CFRetain(v9);
    cf = v5;
    CFRetain(v5);
    v19 = v7;
    if (v7)
      CFRetain(v7);
    v20 = v9;
    if (v9)
      CFRetain(v9);
    v10 = (__CFRunLoop *)objc_msgSend(v5, "initializationRunLoop", v14, v15, v16, v17);
    CFRunLoopPerformBlock(v10, (CFTypeRef)*MEMORY[0x1E0C9B280], &v14);
    CFRunLoopWakeUp(v10);
    if (v9)
    {
      CFRelease(v9);
      if (!v7)
        goto LABEL_16;
    }
    else if (!v7)
    {
      goto LABEL_16;
    }
    CFRelease(v7);
LABEL_16:
    CFRelease(v5);
    v11 = v20;
    v20 = 0;
    if (v11)
      CFRelease(v11);
    v12 = v19;
    v19 = 0;
    if (v12)
      CFRelease(v12);
    v13 = cf;
    cf = 0;
    if (v13)
      CFRelease(v13);
    if (v9)
    {
      CFRelease(v9);
      if (!v7)
        goto LABEL_24;
    }
    else if (!v7)
    {
LABEL_24:
      CFRelease(v5);
      return;
    }
    CFRelease(v7);
    goto LABEL_24;
  }
}

void sub_196FC638C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf, CFTypeRef a14, CFTypeRef a15)
{
  const void *v15;
  const void *v16;
  const void *v17;

  if (cf)
  {
    CFRelease(cf);
    if (!v17)
    {
LABEL_3:
      if (!v16)
        goto LABEL_4;
LABEL_9:
      CFRelease(v16);
LABEL_4:
      CFRelease(v15);
      if (v17)
      {
        CFRelease(v17);
        if (!v16)
          goto LABEL_6;
      }
      else if (!v16)
      {
        goto LABEL_6;
      }
      CFRelease(v16);
LABEL_6:
      CFRelease(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_3;
  }
  CFRelease(v17);
  if (!v16)
    goto LABEL_4;
  goto LABEL_9;
}

uint64_t ___ZN6WebKit27LegacyCustomProtocolManager22wasRedirectedToRequestEN3WTF23ObjectIdentifierGenericINS_26LegacyCustomProtocolIDTypeENS1_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKN7WebCore15ResourceRequestERKNS7_16ResourceResponseE_block_invoke(uint64_t a1)
{
  return objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "client"), "URLProtocol:wasRedirectedToRequest:redirectResponse:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

CFTypeRef __copy_helper_block_e8_32c241_ZTSKZN6WebKit27LegacyCustomProtocolManager22wasRedirectedToRequestEN3WTF23ObjectIdentifierGenericINS_26LegacyCustomProtocolIDTypeENS1_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKN7WebCore15ResourceRequestERKNS7_16ResourceResponseEE3__0(_QWORD *a1, _QWORD *a2)
{
  const void *v4;
  const void *v5;
  CFTypeRef result;

  v4 = (const void *)a2[4];
  a1[4] = v4;
  if (v4)
    CFRetain(v4);
  v5 = (const void *)a2[5];
  a1[5] = v5;
  if (v5)
    CFRetain(v5);
  result = (CFTypeRef)a2[6];
  a1[6] = result;
  if (result)
    return CFRetain(result);
  return result;
}

void sub_196FC64F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c241_ZTSKZN6WebKit27LegacyCustomProtocolManager22wasRedirectedToRequestEN3WTF23ObjectIdentifierGenericINS_26LegacyCustomProtocolIDTypeENS1_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEERKN7WebCore15ResourceRequestERKNS7_16ResourceResponseEE3__0(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)a1[6];
  a1[6] = 0;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[5];
  a1[5] = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[4];
  a1[4] = 0;
  if (v4)
    CFRelease(v4);
}

void WebKit::Download::resume(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  const char ***v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  void *v17;
  const __CFString *v18;
  void *v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t *v23;
  const __CFString *v24;
  uint64_t v25;
  uint64_t v26;

  if (*a5)
  {
    v10 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v10 = 1;
    v11 = *a5;
    *a5 = 0;
    *(_QWORD *)(v10 + 8) = v11;
    *(_QWORD *)(v10 + 16) = 0;
  }
  else
  {
    v10 = 0;
  }
  v12 = *(const char ****)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  if (v12)
  {
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v12);
    v10 = *(_QWORD *)(a1 + 56);
  }
  if (v10)
  {
    v13 = *(_QWORD *)(v10 + 16);
    *(_QWORD *)(v10 + 16) = v13 + 1;
    if (!v13)
      WebKit::SandboxExtensionImpl::consume(*(WebKit::SandboxExtensionImpl **)(v10 + 8));
  }
  v14 = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 16) + 88))(**(_QWORD **)(a1 + 16), *(_QWORD *)(a1 + 88));
  if (v14)
  {
    v15 = v14;
    v16 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", a2, a3);
    v17 = (void *)objc_msgSend(MEMORY[0x1E0CB38B0], "propertyListWithData:options:format:error:", v16, 2, 0, 0);
    if (*a4)
      v18 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v18 = &stru_1E351F1B8;
    objc_msgSend(v17, "setObject:forKey:", v18, CFSTR("NSURLSessionResumeInfoLocalPath"));
    v19 = (void *)objc_msgSend(*(id *)(*(_QWORD *)(v15 + 864) + 40), "downloadTaskWithResumeData:", objc_msgSend(MEMORY[0x1E0CB38B0], "dataWithPropertyList:format:options:error:", v17, 100, 0, 0));
    v20 = v19;
    if (v19)
      CFRetain(v19);
    v21 = *(const void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v20;
    if (v21)
    {
      CFRelease(v21);
      v20 = *(void **)(a1 + 72);
    }
    v22 = objc_msgSend(v20, "taskIdentifier");
    v23 = (uint64_t *)(*(_QWORD *)(v15 + 864) + 64);
    v26 = v22;
    WTF::HashMap<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::add<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>&>(v23, &v26, (uint64_t *)(a1 + 24), (uint64_t)&v25);
    if (*a4)
      v24 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v24 = &stru_1E351F1B8;
    objc_msgSend(*(id *)(a1 + 72), "set_pathToDownloadTaskFile:", v24);
    objc_msgSend(*(id *)(a1 + 72), "resume");
    if (v16)
      CFRelease(v16);
  }
  else
  {
    WTFLogAlways();
  }
}

void sub_196FC677C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashMap<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::add<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v22 = 0;
        else
          v22 = *(unsigned int *)(v8 - 4);
        v27 = 0;
        v28 = v8 + 16 * v22;
        goto LABEL_29;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  v16[1] = *a3;
  v20 = *v6;
  if (*v6)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v23 = *v6;
  if (*v6)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
    {
LABEL_22:
      result = (uint64_t *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v6, v16);
      v16 = result;
      v23 = *v6;
      if (*v6)
        v26 = *(unsigned int *)(v23 - 4);
      else
        v26 = 0;
    }
  }
  else if (3 * v26 <= 4 * v25)
  {
    goto LABEL_22;
  }
  v28 = v23 + 16 * v26;
  v27 = 1;
LABEL_29:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v28;
  *(_BYTE *)(a4 + 16) = v27;
  return result;
}

void WebKit::Download::platformCancelNetworkLoad(uint64_t a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(void **)(a1 + 72);
  v3 = *a2;
  *a2 = 0;
  v4 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  *v4 = MEMORY[0x1E0C809A0];
  v4[1] = 50331650;
  v4[2] = WTF::BlockPtr<void ()(NSData *)>::fromCallable<WebKit::Download::platformCancelNetworkLoad(WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&)::$_0>(WebKit::Download::platformCancelNetworkLoad(WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&)::$_0)::{lambda(void *,NSData *)#1}::__invoke;
  v4[3] = &WTF::BlockPtr<void ()(NSData *)>::fromCallable<WebKit::Download::platformCancelNetworkLoad(WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&)::$_0>(WebKit::Download::platformCancelNetworkLoad(WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&)::$_0)::descriptor;
  v4[4] = v3;
  objc_msgSend(v2, "cancelByProducingResumeData:", v4);
  _Block_release(v4);
}

void sub_196FC69D4(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

const char ***WebKit::Download::publishProgress(const char ***result, uint64_t a2, uint64_t *a3)
{
  const char ***v4;
  uint64_t v5;
  uint64_t v6;
  WKDownloadProgress *v7;
  const char **v8;
  uint64_t v9;
  uint64_t v10;
  const char **v11;
  const char ***v12;
  const char ***v13;

  if (*a3)
  {
    v4 = result;
    v5 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v5 = 1;
    v6 = *a3;
    *a3 = 0;
    *(_QWORD *)(v5 + 8) = v6;
    *(_QWORD *)(v5 + 16) = 0;
    v7 = [WKDownloadProgress alloc];
    v8 = v4[9];
    v9 = WTF::URL::operator NSURL *();
    ++*(_DWORD *)v5;
    v13 = (const char ***)v5;
    v10 = -[WKDownloadProgress initWithDownloadTask:download:URL:sandboxExtension:](v7, "initWithDownloadTask:download:URL:sandboxExtension:", v8, v4, v9, &v13);
    v11 = v4[10];
    v4[10] = (const char **)v10;
    if (v11)
      CFRelease(v11);
    v12 = v13;
    v13 = 0;
    if (v12)
      WTF::RefCounted<WebKit::SandboxExtension>::deref(v12);
    objc_msgSend(v4[10], "publish");
    return WTF::RefCounted<WebKit::SandboxExtension>::deref((const char ***)v5);
  }
  return result;
}

void sub_196FC6AE0(_Unwind_Exception *a1)
{
  const char ***v1;

  WTF::RefCounted<WebKit::SandboxExtension>::deref(v1);
  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebPushD::Connection::newConnectionWasInitialized(IPC::Encoder *this)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 16) + 24);
  if ((v1 & 0x8000000000000000) == 0 || v1 == -1)
  {
    v2 = (char *)this + 32;
    v3 = (*(uint64_t (**)(uint64_t))(*((_QWORD *)this + 4) + 56))((uint64_t)this + 32);
    v4 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v4 = 664;
    *(_QWORD *)(v4 + 8) = v3;
    *(_QWORD *)(v4 + 528) = v4 + 16;
    *(_QWORD *)(v4 + 536) = v4 + 16;
    *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v4 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
    v8 = (IPC::Encoder *)v4;
    IPC::ArgumentCoder<WebKit::WebPushD::WebPushDaemonConnectionConfiguration,void>::encode((IPC::Encoder *)v4, (uint64_t)(v2 + 16));
    (*(void (**)(char *, IPC::Encoder **))(*(_QWORD *)v2 + 16))(v2, &v8);
    this = v8;
    v8 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder(this, v5);
      return (IPC::Encoder *)WTF::fastFree(v6, v7);
    }
  }
  return this;
}

void sub_196FC6BE0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPushD::Connection::performSendWithoutUsingIPCConnection(uint64_t a1, IPC::Encoder **a2)
{
  xpc_object_t v3;
  xpc_object_t message;

  WebKit::WebPushD::messageDictionaryFromEncoder(&message, a2);
  v3 = message;
  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), message);
  if (v3)

  return 1;
}

void sub_196FC6C48(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)

  _Unwind_Resume(exception_object);
}

void WebKit::WebPushD::messageDictionaryFromEncoder(_QWORD *a1, IPC::Encoder **a2)
{
  xpc_object_t v3;
  id v4;
  xpc_object_t value;

  WebKit::encoderToXPCData(a2, &value);
  v3 = xpc_dictionary_create(0, 0, 0);
  *a1 = v3;
  xpc_dictionary_set_uint64(v3, "protocol version", 4uLL);
  v4 = value;
  xpc_dictionary_set_value(v3, "encoded message", value);
  if (v4)

}

void sub_196FC6CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10)

  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'WebKit::WebPushD::Connection::performSendWithoutUsingIPCConnection(uint64_t a1, IPC::Encoder **a2)
{
  WebKit::WebPushD::Connection::performSendWithoutUsingIPCConnection(a1 - 32, a2);
  return 1;
}

uint64_t WebKit::WebPushD::Connection::performSendWithAsyncReplyWithoutUsingIPCConnection(_QWORD *a1, IPC::Encoder **a2, uint64_t *a3)
{
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v9;
  void *v10;

  WebKit::WebPushD::messageDictionaryFromEncoder(&v10, a2);
  v5 = v10;
  v6 = *a3;
  *a3 = 0;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = &off_1E34B4A90;
  v7[1] = v6;
  v9 = v7;
  WebKit::Daemon::Connection::sendWithReply(a1, v5, (uint64_t *)&v9);
  if (v9)
    (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  if (v5)

  return 1;
}

void sub_196FC6DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  void *v9;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (v9)

  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'WebKit::WebPushD::Connection::performSendWithAsyncReplyWithoutUsingIPCConnection(uint64_t a1, IPC::Encoder **a2, uint64_t *a3)
{
  WebKit::WebPushD::Connection::performSendWithAsyncReplyWithoutUsingIPCConnection((_QWORD *)(a1 - 32), a2, a3);
  return 1;
}

WTF *WebKit::PCM::Connection::newConnectionWasInitialized(WTF *this)
{
  uint64_t v1;
  uint64_t v2;
  xpc_connection_t *v3;
  uint64_t v4;
  void *v5;
  WTF *v6;
  WTF *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = (xpc_connection_t *)this;
      v4 = *(_QWORD *)(v2 + 24);
      if ((v4 & 0x8000000000000000) == 0 || v4 == -1)
      {
        if (*(_BYTE *)(v2 + 160))
        {
          v9 = 0;
          v10 = 0;
          LOBYTE(v7) = 1;
          WebKit::Daemon::Encoder::encodeFixedLengthData((unsigned int *)&v9, &v7, 1uLL);
          v7 = v9;
          v8 = v10;
          v9 = 0;
          v10 = 0;
          WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::send(v3, 5, (uint64_t)&v7);
          v6 = v7;
          if (v7)
          {
            v7 = 0;
            LODWORD(v8) = 0;
            WTF::fastFree(v6, v5);
          }
          this = v9;
          if (v9)
          {
            v9 = 0;
            LODWORD(v10) = 0;
            return (WTF *)WTF::fastFree(this, v5);
          }
        }
      }
    }
  }
  return this;
}

void sub_196FC6EC0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, WTF *a11, int a12)
{
  if (a9)
    WTF::fastFree(a9, a2);
  if (a11)
    WTF::fastFree(a11, a2);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::PCM::Connection::connectionReceivedEvent(uint64_t a1, id a2)
{
  WTF::StringImpl *result;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  result = object_getClass(a2);
  if (result == (WTF::StringImpl *)MEMORY[0x1E0C812F8])
  {
    result = (WTF::StringImpl *)xpc_dictionary_get_string(a2, "debug message");
    if (result)
    {
      v5 = (const char *)result;
      result = (WTF::StringImpl *)xpc_dictionary_get_uint64(a2, "debug message level");
      v6 = *(_QWORD *)(a1 + 32);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          v8 = (char)result;
          v10 = *(_QWORD *)(v7 + 24);
          v9 = *(_QWORD *)(v7 + 32);
          strlen(v5);
          WTF::String::fromUTF8();
          WebKit::NetworkProcess::broadcastConsoleMessage(v9, v10, 14, v8, (uint64_t)&v12);
          result = v12;
          v12 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
            else
              *(_DWORD *)result -= 2;
          }
        }
      }
    }
  }
  return result;
}

void WebKit::PCM::Connection::dictionaryFromMessage(unsigned int a1@<W1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  xpc_object_t v6;

  v6 = xpc_dictionary_create(0, 0, 0);
  *a3 = v6;
  WebKit::PCM::addVersionAndEncodedMessageToDictionary(a2, v6);
  xpc_dictionary_set_uint64(v6, "message type", a1);
}

void sub_196FC7038(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)

  _Unwind_Resume(exception_object);
}

void sub_196FC70D4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PCM::NetworkLoader::allowTLSCertificateChainForLocalPCMTesting(const void **a1)
{
  char ***v1;
  const void *v2;
  char **v3;
  const void *v4;

  v1 = &off_1EE341000;
  {
    allowedLocalTestServerTrust(void)::serverTrust = 0;
  }
  v2 = *a1;
  if (*a1)
  {
    v4 = *a1;
    CFRetain(v2);
    v1 = &off_1EE341000;
    v2 = v4;
  }
  v3 = v1[378];
  v1[378] = (char **)v2;
  if (v3)
    CFRelease(v3);
}

void WebKit::PCM::NetworkLoader::start(WTF::URL *this, WTF::JSONImpl::Value **a2, int a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  WebCore::HTTPHeaderValues *v9;
  const __CFString *v10;
  const __CFString *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  const __CFString *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  char *v18;
  uint64_t v19;
  const void *v20;
  void *v21;
  WTF::StringImpl *v22;
  uint64_t IdentifierInternal;
  char ***v24;
  char **v25;
  uint64_t v26;
  _QWORD *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint16x8_t v47;
  void *v48;
  const void *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;

  {
    allowedLocalTestServerTrust(void)::serverTrust = 0;
LABEL_9:
    v9 = (WebCore::HTTPHeaderValues *)objc_msgSend(objc_alloc(MEMORY[0x1E0C92C28]), "initWithURL:", WTF::URL::operator NSURL *());
    if (*(_QWORD *)WebCore::HTTPHeaderValues::maxAge0(v9))
      v10 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v10 = &stru_1E351F1B8;
    -[WebCore::HTTPHeaderValues setValue:forHTTPHeaderField:](v9, "setValue:forHTTPHeaderField:", v10, CFSTR("Cache-Control"));
    v50 = 0;
    WebCore::standardUserAgentWithApplicationName();
    if (v51)
      v11 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v11 = &stru_1E351F1B8;
    -[WebCore::HTTPHeaderValues setValue:forHTTPHeaderField:](v9, "setValue:forHTTPHeaderField:", v11, CFSTR("User-Agent"), v50);
    v13 = v51;
    v51 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v50;
    v50 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
    if (*a2)
    {
      if (*(_QWORD *)WebCore::HTTPHeaderValues::applicationJSONContentType((WebCore::HTTPHeaderValues *)-[WebCore::HTTPHeaderValues setHTTPMethod:](v9, "setHTTPMethod:", CFSTR("POST"))))
        v15 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v15 = &stru_1E351F1B8;
      -[WebCore::HTTPHeaderValues setValue:forHTTPHeaderField:](v9, "setValue:forHTTPHeaderField:", v15, CFSTR("Content-Type"), v50);
      WTF::JSONImpl::Value::toJSONString(*a2);
      WTF::String::utf8();
      v17 = v50;
      v50 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v16);
        else
          *(_DWORD *)v17 -= 2;
      }
      if (v51)
      {
        v18 = (char *)v51 + 16;
        v19 = *((_QWORD *)v51 + 1);
      }
      else
      {
        v19 = 0;
        v18 = 0;
      }
      v20 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v18, v19, v50);
      -[WebCore::HTTPHeaderValues setHTTPBody:](v9, "setHTTPBody:", v20);
      if (v20)
        CFRelease(v20);
      v22 = v51;
      v51 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
          WTF::fastFree(v22, v21);
        else
          --*(_DWORD *)v22;
      }
    }
    if (((-[WebCore::HTTPHeaderValues _needsNetworkTrackingPrevention](v9, "_needsNetworkTrackingPrevention", v50, v51) | a3) & 1) == 0)-[WebCore::HTTPHeaderValues _setNeedsNetworkTrackingPrevention:](v9, "_setNeedsNetworkTrackingPrevention:", 1);
    IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
    if ((byte_1EE341382 & 1) == 0)
    {
      qword_1EE341390 = objc_opt_new();
      byte_1EE341382 = 1;
    }
    v24 = &off_1EE341000;
    if ((byte_1EE341383 & 1) == 0)
    {
      v48 = (void *)objc_msgSend(MEMORY[0x1E0C92CA0], "ephemeralSessionConfiguration");
      objc_msgSend(v48, "setHTTPCookieAcceptPolicy:", 1);
      objc_msgSend(v48, "setURLCredentialStorage:", 0);
      objc_msgSend(v48, "setURLCache:", 0);
      objc_msgSend(v48, "setHTTPCookieStorage:", 0);
      objc_msgSend(v48, "set_shouldSkipPreferredClientCertificateLookup:", 1);
      v49 = (const void *)objc_msgSend(MEMORY[0x1E0C92C98], "sessionWithConfiguration:delegate:delegateQueue:", v48, qword_1EE341390, objc_msgSend(MEMORY[0x1E0CB3828], "mainQueue"));
      qword_1EE341398 = (uint64_t)v49;
      if (v49)
        CFRetain(v49);
      byte_1EE341383 = 1;
      v24 = &off_1EE341000;
    }
    v25 = v24[115];
    v26 = *a4;
    *a4 = 0;
    v27 = malloc_type_malloc(0x30uLL, 0x10E00408A6C46E4uLL);
    *v27 = MEMORY[0x1E0C809A0];
    v27[1] = 50331650;
    v27[2] = WTF::BlockPtr<void ()(NSData *,NSURLResponse *,NSError *)>::fromCallable<WebKit::PCM::NetworkLoader::start(WTF::URL &&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl>,WTF::DefaultRefDerefTraits<WTF::JSONImpl>> &&,WebCore::PrivateClickMeasurement::PcmDataCarried,WTF::CompletionHandler<void ()(WTF::String const&,WTF::DefaultRefDerefTraits<WTF::JSONImpl> const&)> &&)::$_0>(WebKit::PCM::NetworkLoader::start(WTF::URL &&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl>,WTF::DefaultRefDerefTraits<WTF::JSONImpl>> &&,WebCore::PrivateClickMeasurement::PcmDataCarried,WTF::CompletionHandler<void ()(WTF::String const&,WTF::DefaultRefDerefTraits<WTF::JSONImpl> const&)> &&)::$_0)::{lambda(void *,NSData *,NSURLResponse *,NSError *)#1}::__invoke;
    v27[3] = &WTF::BlockPtr<void ()(NSData *,NSURLResponse *,NSError *)>::fromCallable<WebKit::PCM::NetworkLoader::start(WTF::URL &&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl>,WTF::DefaultRefDerefTraits<WTF::JSONImpl>> &&,WebCore::PrivateClickMeasurement::PcmDataCarried,WTF::CompletionHandler<void ()(WTF::String const&,WTF::DefaultRefDerefTraits<WTF::JSONImpl> const&)> &&)::$_0>(WebKit::PCM::NetworkLoader::start(WTF::URL &&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl>,WTF::DefaultRefDerefTraits<WTF::JSONImpl>> &&,WebCore::PrivateClickMeasurement::PcmDataCarried,WTF::CompletionHandler<void ()(WTF::String const&,WTF::DefaultRefDerefTraits<WTF::JSONImpl> const&)> &&)::$_0)::descriptor;
    v27[4] = v26;
    v27[5] = IdentifierInternal;
    v28 = (WTF::StringImpl *)objc_msgSend(v25, "dataTaskWithRequest:completionHandler:", v9, v27);
    _Block_release(v27);
    v51 = v28;
    -[WTF::StringImpl resume](v28, "resume");
    if ((byte_1EE341384 & 1) != 0)
    {
      v29 = qword_1EE3413A0;
      if (qword_1EE3413A0)
        goto LABEL_44;
    }
    else
    {
      qword_1EE3413A0 = 0;
      byte_1EE341384 = 1;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand();
    v29 = qword_1EE3413A0;
    if (!qword_1EE3413A0)
    {
      v30 = 0;
LABEL_45:
      v31 = (IdentifierInternal + ~(IdentifierInternal << 32)) ^ ((unint64_t)(IdentifierInternal
                                                                                   + ~(IdentifierInternal << 32)) >> 22);
      v32 = 9 * ((v31 + ~(v31 << 13)) ^ ((v31 + ~(v31 << 13)) >> 8));
      v33 = (v32 ^ (v32 >> 15)) + ~((v32 ^ (v32 >> 15)) << 27);
      v34 = v30 & ((v33 >> 31) ^ v33);
      v35 = (uint64_t *)(v29 + 16 * v34);
      v36 = *v35;
      if (*v35)
      {
        v37 = 0;
        v38 = 1;
        while (v36 != IdentifierInternal)
        {
          if (v36 == -1)
            v37 = v35;
          v34 = (v34 + v38) & v30;
          v35 = (uint64_t *)(v29 + 16 * v34);
          v36 = *v35;
          ++v38;
          if (!*v35)
          {
            if (v37)
            {
              *v37 = 0;
              v37[1] = 0;
              --*(_DWORD *)(v29 - 16);
              v35 = v37;
            }
            goto LABEL_53;
          }
        }
        goto LABEL_62;
      }
LABEL_53:
      *v35 = IdentifierInternal;
      WTF::GenericHashTraits<WTF::RetainPtr<NSURLSessionDataTask>>::assignToEmpty<WTF::RetainPtr<NSURLSessionDataTask>,NSURLSessionDataTask*&>((const void **)v35 + 1, (CFTypeRef *)&v51);
      if (qword_1EE3413A0)
        v39 = *(_DWORD *)(qword_1EE3413A0 - 12) + 1;
      else
        v39 = 1;
      *(_DWORD *)(qword_1EE3413A0 - 12) = v39;
      if (qword_1EE3413A0)
        v40 = *(_DWORD *)(qword_1EE3413A0 - 12);
      else
        v40 = 0;
      v41 = (*(_DWORD *)(qword_1EE3413A0 - 16) + v40);
      v42 = *(unsigned int *)(qword_1EE3413A0 - 4);
      if (v42 > 0x400)
      {
        if (v42 > 2 * v41)
        {
LABEL_62:
          if (v9)
            CFRelease(v9);
          return;
        }
      }
      else if (3 * v42 > 4 * v41)
      {
        goto LABEL_62;
      }
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand();
      goto LABEL_62;
    }
LABEL_44:
    v30 = *(_DWORD *)(v29 - 8);
    goto LABEL_45;
  }
  if (!allowedLocalTestServerTrust(void)::serverTrust)
    goto LABEL_9;
  v7 = WTF::URL::host(this);
  if ((char *)v7 == "127.0.0.1" || v8 != 9)
  {
    if ((char *)v7 == "127.0.0.1" && v8 == 9)
      goto LABEL_9;
  }
  else if ((v8 & 0xFF00000000) != 0)
  {
    if (*(_BYTE *)v7 == 49 && *(_DWORD *)(v7 + 1) == 808335154 && *(_DWORD *)(v7 + 5) == 825110574)
      goto LABEL_9;
  }
  else if (*(_WORD *)v7 == 49)
  {
    v47 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v7 + 2), (int16x8_t)xmmword_1978CEF90);
    v47.i16[0] = vminvq_u16(v47);
    if (v47.i32[0])
      goto LABEL_9;
  }
  v50 = 0;
  v51 = 0;
  v43 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v43 + 16))(v43, &v51, &v50);
  (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v45 = v50;
  v50 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v45;
  }
  v46 = v51;
  v51 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, v44);
    else
      *(_DWORD *)v46 -= 2;
  }
}

void sub_196FC78A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  WTF::StringImpl *v12;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (a9)
  {
    if (*(_DWORD *)a9 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)a9;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v12);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

void WebKit::WebPushD::Connection::~Connection(WebKit::WebPushD::Connection *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF *v4;

  *(_QWORD *)this = off_1E34B4B60;
  *((_QWORD *)this + 4) = &unk_1E34B4BC0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  if (*((_BYTE *)this + 72))
  {
    v4 = (WTF *)*((_QWORD *)this + 7);
    if (v4)
    {
      *((_QWORD *)this + 7) = 0;
      *((_DWORD *)this + 16) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  WebKit::Daemon::ConnectionToMachService<WebKit::WebPushD::ConnectionTraits>::~ConnectionToMachService(this, a2);
}

{
  WTF::StringImpl *v3;
  WTF *v4;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = off_1E34B4B60;
  *((_QWORD *)this + 4) = &unk_1E34B4BC0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  if (*((_BYTE *)this + 72))
  {
    v4 = (WTF *)*((_QWORD *)this + 7);
    if (v4)
    {
      *((_QWORD *)this + 7) = 0;
      *((_DWORD *)this + 16) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  WebKit::Daemon::ConnectionToMachService<WebKit::WebPushD::ConnectionTraits>::~ConnectionToMachService(this, a2);
  WTF::fastFree(v5, v6);
}

void WebKit::WebPushD::Connection::dictionaryFromMessage(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebKit::WebPushD::Connection::messageSenderConnection(WebKit::WebPushD::Connection *this)
{
  return 0;
}

uint64_t WebKit::WebPushD::Connection::messageSenderDestinationID(WebKit::WebPushD::Connection *this)
{
  return 0;
}

void `non-virtual thunk to'WebKit::WebPushD::Connection::~Connection(WebKit::WebPushD::Connection *this, WTF::StringImpl *a2)
{
  WebKit::Daemon::Connection *v3;
  WTF::StringImpl *v4;
  WTF *v5;

  *((_QWORD *)this - 4) = off_1E34B4B60;
  v3 = (WebKit::WebPushD::Connection *)((char *)this - 32);
  *(_QWORD *)this = &unk_1E34B4BC0;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  if (*((_BYTE *)this + 40))
  {
    v5 = (WTF *)*((_QWORD *)this + 3);
    if (v5)
    {
      *((_QWORD *)this + 3) = 0;
      *((_DWORD *)this + 8) = 0;
      WTF::fastFree(v5, a2);
    }
  }
  WebKit::Daemon::ConnectionToMachService<WebKit::WebPushD::ConnectionTraits>::~ConnectionToMachService(v3, a2);
}

{
  WebKit::Daemon::Connection *v3;
  WTF::StringImpl *v4;
  WTF *v5;
  WTF *v6;
  void *v7;

  *((_QWORD *)this - 4) = off_1E34B4B60;
  v3 = (WebKit::WebPushD::Connection *)((char *)this - 32);
  *(_QWORD *)this = &unk_1E34B4BC0;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  if (*((_BYTE *)this + 40))
  {
    v5 = (WTF *)*((_QWORD *)this + 3);
    if (v5)
    {
      *((_QWORD *)this + 3) = 0;
      *((_DWORD *)this + 8) = 0;
      WTF::fastFree(v5, a2);
    }
  }
  WebKit::Daemon::ConnectionToMachService<WebKit::WebPushD::ConnectionTraits>::~ConnectionToMachService(v3, a2);
  WTF::fastFree(v6, v7);
}

uint64_t `non-virtual thunk to'WebKit::WebPushD::Connection::messageSenderConnection(WebKit::WebPushD::Connection *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebKit::WebPushD::Connection::messageSenderDestinationID(WebKit::WebPushD::Connection *this)
{
  return 0;
}

void WebKit::PCM::Connection::~Connection(WebKit::PCM::Connection *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34B4C10;
  v3 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::~ConnectionToMachService(this, a2);
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34B4C10;
  v3 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::~ConnectionToMachService(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WTF::BlockPtr<void ()(NSData *)>::fromCallable<WebKit::Download::platformCancelNetworkLoad(WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&)::$_0>(WebKit::Download::platformCancelNetworkLoad(WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(NSData *)>::fromCallable<WebKit::Download::platformCancelNetworkLoad(WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&)::$_0>(WebKit::Download::platformCancelNetworkLoad(WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&)::$_0)::{lambda(void *,NSData *)#1}::__invoke(uint64_t a1, CFTypeRef cf)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;

  if (cf)
    CFRetain(cf);
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v5 = &off_1E34B4998;
  v5[1] = cf;
  v5[2] = v4;
  v7 = (uint64_t)v5;
  WTF::ensureOnMainRunLoop();
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

void sub_196FC804C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::Download::platformCancelNetworkLoad(WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&)::$_0::operator()(NSData *)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;

  *a1 = &off_1E34B4998;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (const void *)a1[1];
  a1[1] = 0;
  if (v3)
    CFRelease(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::Download::platformCancelNetworkLoad(WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&)::$_0::operator()(NSData *)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  const void *v4;

  *(_QWORD *)this = &off_1E34B4998;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    CFRelease(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::Download::platformCancelNetworkLoad(WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&)::$_0::operator()(NSData *)::{lambda(void)#1},void>::call(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    v3 = objc_msgSend(*(id *)(a1 + 8), "bytes");
    v4 = objc_msgSend(v2, "length");
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3, v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

void sub_196FC81B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtr<void ()(NSData *,NSURLResponse *,NSError *)>::fromCallable<WebKit::PCM::NetworkLoader::start(WTF::URL &&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl>,WTF::DefaultRefDerefTraits<WTF::JSONImpl>> &&,WebCore::PrivateClickMeasurement::PcmDataCarried,WTF::CompletionHandler<void ()(WTF::String const&,WTF::DefaultRefDerefTraits<WTF::JSONImpl> const&)> &&)::$_0>(WebKit::PCM::NetworkLoader::start(WTF::URL &&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl>,WTF::DefaultRefDerefTraits<WTF::JSONImpl>> &&,WebCore::PrivateClickMeasurement::PcmDataCarried,WTF::CompletionHandler<void ()(WTF::String const&,WTF::DefaultRefDerefTraits<WTF::JSONImpl> const&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(NSData *,NSURLResponse *,NSError *)>::fromCallable<WebKit::PCM::NetworkLoader::start(WTF::URL &&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl>,WTF::DefaultRefDerefTraits<WTF::JSONImpl>> &&,WebCore::PrivateClickMeasurement::PcmDataCarried,WTF::CompletionHandler<void ()(WTF::String const&,WTF::DefaultRefDerefTraits<WTF::JSONImpl> const&)> &&)::$_0>(WebKit::PCM::NetworkLoader::start(WTF::URL &&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl>,WTF::DefaultRefDerefTraits<WTF::JSONImpl>> &&,WebCore::PrivateClickMeasurement::PcmDataCarried,WTF::CompletionHandler<void ()(WTF::String const&,WTF::DefaultRefDerefTraits<WTF::JSONImpl> const&)> &&)::$_0)::{lambda(void *,NSData *,NSURLResponse *,NSError *)#1}::__invoke(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  const void *v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t result;
  int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  unsigned int v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;

  if ((byte_1EE341384 & 1) != 0)
  {
    if (qword_1EE3413A0)
    {
      v7 = *(_QWORD *)(a1 + 40);
      v8 = *(_DWORD *)(qword_1EE3413A0 - 8);
      v9 = (v7 + ~(v7 << 32)) ^ ((unint64_t)(v7 + ~(v7 << 32)) >> 22);
      v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
      v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
      v12 = v8 & ((v11 >> 31) ^ v11);
      v13 = *(_QWORD *)(qword_1EE3413A0 + 16 * v12);
      if (v13 != v7)
      {
        v14 = 1;
        while (v13)
        {
          v12 = ((_DWORD)v12 + v14) & v8;
          v13 = *(_QWORD *)(qword_1EE3413A0 + 16 * v12);
          ++v14;
          if (v13 == v7)
            goto LABEL_9;
        }
        v12 = *(unsigned int *)(qword_1EE3413A0 - 4);
      }
LABEL_9:
      if (v12 != *(_DWORD *)(qword_1EE3413A0 - 4))
      {
        v15 = (_QWORD *)(qword_1EE3413A0 + 16 * v12);
        v16 = (const void *)v15[1];
        *v15 = -1;
        v15[1] = 0;
        if (v16)
          CFRelease(v16);
        v17 = qword_1EE3413A0;
        ++*(_DWORD *)(qword_1EE3413A0 - 16);
        if (v17)
          v18 = *(_DWORD *)(v17 - 12) - 1;
        else
          v18 = -1;
        *(_DWORD *)(v17 - 12) = v18;
        if (qword_1EE3413A0)
        {
          v19 = *(_DWORD *)(qword_1EE3413A0 - 4);
          if (6 * *(_DWORD *)(qword_1EE3413A0 - 12) < v19 && v19 >= 9)
            WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v19 >> 1);
        }
      }
    }
    if (a4)
      goto LABEL_23;
  }
  else
  {
    qword_1EE3413A0 = 0;
    byte_1EE341384 = 1;
    if (a4)
    {
LABEL_23:
      MEMORY[0x19AEABCC8](&v37, objc_msgSend(a4, "localizedDescription"));
      v36 = 0;
      v21 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v21 + 16))(v21, &v37, &v36);
      goto LABEL_24;
    }
  }
  if (a2)
  {
    objc_msgSend(a2, "bytes");
    objc_msgSend(a2, "length");
  }
  WTF::String::fromUTF8();
  WTF::JSONImpl::Value::parseJSON();
  v27 = v36;
  v36 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v26);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = v37;
  if (!v37)
  {
    v36 = 0;
    v37 = 0;
    v21 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v21 + 16))(v21, &v37, &v36);
LABEL_24:
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    v23 = v36;
    v36 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v23;
    }
    result = (uint64_t)v37;
    v37 = 0;
    if (result)
    {
      v25 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v22);
LABEL_51:
      *(_DWORD *)result = v25;
      return result;
    }
    return result;
  }
  v29 = 0;
  v36 = 0;
  v30 = *((_DWORD *)v37 + 1);
  if (v30 >= 5 && v30 != 6)
  {
    if (v30 != 5)
    {
      result = 490;
      __break(0xC471u);
      return result;
    }
    ++*(_DWORD *)v37;
    v29 = v28;
  }
  v35 = v29;
  v31 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v31 + 16))(v31, &v36, &v35);
  (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v33 = v35;
  v35 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v33;
  }
  v34 = v36;
  v36 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v32);
    else
      *(_DWORD *)v34 -= 2;
  }
  result = (uint64_t)v37;
  v37 = 0;
  if (result)
  {
    v25 = *(_DWORD *)result - 1;
    if (*(_DWORD *)result == 1)
      return WTF::JSONImpl::Value::operator delete();
    goto LABEL_51;
  }
  return result;
}

void sub_196FC8594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  uint64_t v12;
  WTF::StringImpl *v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (a11)
  {
    if (*(_DWORD *)a11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)a11;
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, v14);
    else
      *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(a1);
}

_DWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(unsigned int a1)
{
  uint64_t v2;
  int v3;
  int v4;
  _DWORD *result;
  void *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;

  v2 = qword_1EE3413A0;
  if (qword_1EE3413A0)
  {
    v3 = *(_DWORD *)(qword_1EE3413A0 - 4);
    v4 = *(_DWORD *)(qword_1EE3413A0 - 12);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1EE3413A0 = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *result = 0;
  *(_DWORD *)(qword_1EE3413A0 - 12) = v4;
  if (v3)
  {
    v7 = 0;
    while (1)
    {
      v8 = (uint64_t *)(v2 + 16 * v7);
      v9 = *v8;
      if (*v8 != -1)
      {
        if (v9)
        {
          if (qword_1EE3413A0)
            v12 = *(_DWORD *)(qword_1EE3413A0 - 8);
          else
            v12 = 0;
          v13 = (v9 + ~(v9 << 32)) ^ ((unint64_t)(v9 + ~(v9 << 32)) >> 22);
          v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
          v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
          v16 = v12 & ((v15 >> 31) ^ v15);
          v17 = 1;
          do
          {
            v18 = v16;
            v19 = *(_QWORD *)(qword_1EE3413A0 + 16 * v16);
            v16 = (v16 + v17++) & v12;
          }
          while (v19);
          v20 = (uint64_t *)(qword_1EE3413A0 + 16 * v18);
          v21 = (const void *)v20[1];
          v20[1] = 0;
          if (v21)
            CFRelease(v21);
          *v20 = *v8;
          v22 = v2 + 16 * v7;
          v23 = *(_QWORD *)(v22 + 8);
          *(_QWORD *)(v22 + 8) = 0;
          v20[1] = v23;
          v11 = *(const void **)(v22 + 8);
          *(_QWORD *)(v22 + 8) = 0;
          if (!v11)
            goto LABEL_19;
LABEL_18:
          CFRelease(v11);
          goto LABEL_19;
        }
        v10 = v2 + 16 * v7;
        v11 = *(const void **)(v10 + 8);
        *(_QWORD *)(v10 + 8) = 0;
        if (v11)
          goto LABEL_18;
      }
LABEL_19:
      if (++v7 == v3)
        return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
    }
  }
  if (v2)
    return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
  return result;
}

void WebKit::Daemon::ConnectionToMachService<WebKit::WebPushD::ConnectionTraits>::~ConnectionToMachService(WebKit::Daemon::Connection *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E34B4AF8;
  v3 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  WebKit::Daemon::Connection::~Connection(this, a2);
}

void WebKit::Daemon::Connection::~Connection(WebKit::Daemon::Connection *this, void *a2)
{
  void *v3;

  *(_QWORD *)this = &off_1E34B4B38;
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)

  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WebKit::Daemon::Connection::~Connection(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

void WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::~ConnectionToMachService(WebKit::Daemon::Connection *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E34B4AB8;
  v3 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  WebKit::Daemon::Connection::~Connection(this, a2);
}

const char *WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>(uint64_t *a1, WTF::ASCIILiteralHash *this)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  const char *result;
  const char *v7;
  int v8;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = WTF::ASCIILiteralHash::hash(this, this) & v4;
  result = *(const char **)(v2 + 24 * v5);
  if (result)
  {
    v7 = *(const char **)this;
    v8 = 1;
    while (result == (const char *)-1 || !v7 || strcmp(result, v7))
    {
      v5 = ((_DWORD)v5 + v8) & v4;
      result = *(const char **)(v2 + 24 * v5);
      ++v8;
      if (!result)
        return result;
    }
    return *(const char **)(v2 + 24 * v5 + 16);
  }
  return result;
}

uint64_t WTF::ASCIILiteralHash::hash(WTF::ASCIILiteralHash *this, const WTF::ASCIILiteral *a2)
{
  uint64_t v2;
  int v4;
  __int16 v5;
  char v6;

  v2 = *((_QWORD *)this + 1);
  if (!v2)
    return 0;
  v4 = -1640531527;
  v5 = 0;
  v6 = 0;
  WTF::SuperFastHash::addCharacters<char,WTF::StringHasher::DefaultConverter>((uint64_t)&v4, *(unsigned __int8 **)this, v2 - 1);
  return WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v4);
}

uint64_t WTF::SuperFastHash::addCharacters<char,WTF::StringHasher::DefaultConverter>(uint64_t result, unsigned __int8 *a2, unsigned int a3)
{
  int v3;
  int v4;

  if (a3)
  {
    if (*(_BYTE *)(result + 6))
    {
      *(_BYTE *)(result + 6) = 0;
      v3 = *a2++;
      v4 = *(_DWORD *)result + *(unsigned __int16 *)(result + 4);
      *(_DWORD *)result = ((v3 << 11) ^ (v4 << 16) ^ v4) + (((v3 << 11) ^ (v4 << 16) ^ v4) >> 11);
      --a3;
    }
    return WTF::SuperFastHash::addCharactersAssumingAligned<char,WTF::StringHasher::DefaultConverter>(result, a2, a3);
  }
  return result;
}

uint64_t WTF::SuperFastHash::addCharactersAssumingAligned<char,WTF::StringHasher::DefaultConverter>(uint64_t result, unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  char v8;
  int v9;

  if (a3 >= 2)
  {
    v3 = a3 >> 1;
    v4 = *(_DWORD *)result;
    do
    {
      v5 = v4 + *a2;
      v6 = (v5 << 16) ^ (a2[1] << 11);
      v4 = (v6 ^ v5) + ((v6 ^ v5) >> 11);
      *(_DWORD *)result = v4;
      a2 += 2;
      --v3;
    }
    while (v3);
  }
  if ((a3 & 1) != 0)
  {
    v7 = *a2;
    if (*(_BYTE *)(result + 6))
    {
      v8 = 0;
      v9 = *(_DWORD *)result + *(unsigned __int16 *)(result + 4);
      *(_DWORD *)result = ((v7 << 11) ^ (v9 << 16) ^ v9) + (((v7 << 11) ^ (v9 << 16) ^ v9) >> 11);
    }
    else
    {
      *(_WORD *)(result + 4) = v7;
      v8 = 1;
    }
    *(_BYTE *)(result + 6) = v8;
  }
  return result;
}

BOOL WTF::equalIgnoringASCIICaseWithLength<unsigned char,unsigned char>(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  BOOL v5;
  uint64_t v6;

  if (a5)
  {
    v5 = 0;
    v6 = 0;
    while (a2 != v6 && a4 != v6)
    {
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(result + v6)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(a3 + v6)))
      {
        v5 = ++v6 >= a5;
        if (a5 != v6)
          continue;
      }
      return v5;
    }
    __break(1u);
  }
  else
  {
    return 1;
  }
  return result;
}

BOOL WTF::equalIgnoringASCIICaseWithLength<unsigned char,char16_t>(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  BOOL v5;
  uint64_t v6;

  if (a5)
  {
    v5 = 0;
    v6 = 0;
    while (a2 != v6 && a4 != v6)
    {
      if ((*(unsigned __int16 *)(a3 + 2 * v6) | (32 * (*(unsigned __int16 *)(a3 + 2 * v6) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(result + v6)))
      {
        v5 = ++v6 >= a5;
        if (a5 != v6)
          continue;
      }
      return v5;
    }
    __break(1u);
  }
  else
  {
    return 1;
  }
  return result;
}

BOOL WTF::equalIgnoringASCIICaseWithLength<char16_t,unsigned char>(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  BOOL v5;
  uint64_t v6;

  if (a5)
  {
    v5 = 0;
    v6 = 0;
    while (a2 != v6 && a4 != v6)
    {
      if ((*(unsigned __int16 *)(result + 2 * v6) | (32
                                                    * (*(unsigned __int16 *)(result + 2 * v6) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(a3 + v6)))
      {
        v5 = ++v6 >= a5;
        if (a5 != v6)
          continue;
      }
      return v5;
    }
    __break(1u);
  }
  else
  {
    return 1;
  }
  return result;
}

BOOL WTF::equalIgnoringASCIICaseWithLength<char16_t,char16_t>(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  BOOL v5;
  uint64_t v6;

  if (a5)
  {
    v5 = 0;
    v6 = 0;
    while (a2 != v6 && a4 != v6)
    {
      if ((*(unsigned __int16 *)(result + 2 * v6) | (32
                                                    * (*(unsigned __int16 *)(result + 2 * v6) - 65 < 0x1A))) == (*(unsigned __int16 *)(a3 + 2 * v6) | (32 * (*(unsigned __int16 *)(a3 + 2 * v6) - 65 < 0x1A))))
      {
        v5 = ++v6 >= a5;
        if (a5 != v6)
          continue;
      }
      return v5;
    }
    __break(1u);
  }
  else
  {
    return 1;
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, WTF::StringImpl **a2)
{
  WTF::StringImpl **result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = (WTF::StringImpl **)WTF::HashTraits<WTF::String>::customDeleteBucket(a2, (WTF::StringImpl *)a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t result;
  uint64_t v4;

  if (!*a1)
    return 0;
  result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(a1, a2);
  v4 = *a1;
  if (!result)
  {
    if (v4)
      return v4 + 8 * *(unsigned int *)(v4 - 4);
    else
      return 0;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v2;
  unsigned int v4;
  int v5;
  int i;
  uint64_t v7;
  uint64_t result;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2);
  for (i = 0; ; v5 = i + v7)
  {
    v7 = v5 & v4;
    result = *(_QWORD *)(v2 + 8 * v7);
    if (!result)
      break;
    if (result != -1 && WTF::equalIgnoringASCIICaseCommon<WTF::StringImpl,WTF::StringImpl>(result, (uint64_t)*a2))
      return v2 + 8 * v7;
    ++i;
  }
  return result;
}

_OWORD *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v5, a2);
}

_OWORD *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  _OWORD *v11;
  _QWORD *v12;
  _OWORD *v13;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v12 = (_QWORD *)v6;
    do
    {
      if ((unint64_t)(*v12 + 1) >= 2)
      {
        v13 = (_OWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::lookupForReinsert(a1, v12);
        *v13 = *(_OWORD *)v12;
        if (v12 == a3)
          v11 = v13;
      }
      v12 += 2;
      --v7;
    }
    while (v7);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

void WebKit::NetworkServiceInitializerDelegate::~NetworkServiceInitializerDelegate(WebKit::NetworkServiceInitializerDelegate *this)
{
  void *v1;

  *(_QWORD *)this = &off_1E34B8870;
  v1 = (void *)*((_QWORD *)this + 1);
  if (v1)

}

{
  void *v1;

  *(_QWORD *)this = &off_1E34B8870;
  v1 = (void *)*((_QWORD *)this + 1);
  if (v1)

  JUMPOUT(0x19AEB936CLL);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPushD::Connection::performSendWithAsyncReplyWithoutUsingIPCConnection(WTF::UniqueRef<IPC::Encoder> &&,WTF::CompletionHandler<void ()(IPC::Decoder *)> &&)::$_0,void,NSObject  {objcproto13OS_xpc_object}*>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34B4A90;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPushD::Connection::performSendWithAsyncReplyWithoutUsingIPCConnection(WTF::UniqueRef<IPC::Encoder> &&,WTF::CompletionHandler<void ()(IPC::Decoder *)> &&)::$_0,void,NSObject  {objcproto13OS_xpc_object}*>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34B4A90;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

IPC::Decoder *WTF::Detail::CallableWrapper<WebKit::WebPushD::Connection::performSendWithAsyncReplyWithoutUsingIPCConnection(WTF::UniqueRef<IPC::Encoder> &&,WTF::CompletionHandler<void ()(IPC::Decoder *)> &&)::$_0,void,NSObject  {objcproto13OS_xpc_object}*>::call(uint64_t a1, id a2)
{
  uint64_t v4;
  IPC::Decoder *result;
  const void *data;
  void *v7;
  IPC::Decoder *v8;
  uint64_t v9;
  WTF *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13[2];
  IPC::Decoder *v14;
  size_t length;

  if (object_getClass(a2) == (Class)MEMORY[0x1E0C812F8])
  {
    if (xpc_dictionary_get_uint64(a2, "protocol version") == 4)
    {
      length = 0;
      data = xpc_dictionary_get_data(a2, "encoded message", &length);
      v13[0] = 0;
      v13[1] = 0;
      IPC::Decoder::create((WTF *)length, data, v13, &v14);
      WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v13, v7);
      v8 = v14;
      v9 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, IPC::Decoder *))(*(_QWORD *)v9 + 16))(v9, v8);
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      result = v14;
      v14 = 0;
      if (result)
      {
        IPC::Decoder::~Decoder(result);
        return (IPC::Decoder *)WTF::fastFree(v10, v11);
      }
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 16))(v12, 0);
      return (IPC::Decoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    }
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
    return (IPC::Decoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  return result;
}

void sub_196FC9360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, IPC::Decoder *a11)
{
  uint64_t v11;
  WTF *v13;
  void *v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (a11)
  {
    IPC::Decoder::~Decoder(a11);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(a1);
}

_DWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand()
{
  int v0;

  if (qword_1EE3413A0 && (v0 = *(_DWORD *)(qword_1EE3413A0 - 4)) != 0)
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v0 << (6 * *(_DWORD *)(qword_1EE3413A0 - 12) >= (2 * v0)));
  else
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(8u);
}

void WTF::GenericHashTraits<WTF::RetainPtr<NSURLSessionDataTask>>::assignToEmpty<WTF::RetainPtr<NSURLSessionDataTask>,NSURLSessionDataTask*&>(const void **a1, CFTypeRef *a2)
{
  CFTypeRef v3;
  const void *v4;

  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  v4 = *a1;
  *a1 = v3;
  if (v4)
    CFRelease(v4);
}

unsigned __int8 ***WebKit::RemoteComputePipeline::didReceiveStreamMessage(unsigned __int8 ***this, uint64_t **a2, IPC::Decoder *a3)
{
  unsigned __int8 ***v4;
  int v5;
  unsigned __int8 ***v6;
  WTF::StringImpl *v7;
  unsigned __int8 **v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  char v16;

  v4 = this;
  v5 = *((unsigned __int16 *)a3 + 25);
  if (v5 == 768)
  {
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a2 + 4);
    IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)&v14);
    if ((_BYTE)v15)
    {
      v8 = v4[2];
      v9 = (WTF::StringImpl *)v8[2];
      v10 = v14;
      v14 = 0;
      v8[2] = (unsigned __int8 *)v10;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v7);
        else
          *(_DWORD *)v9 -= 2;
      }
      (*((void (**)(unsigned __int8 **, unsigned __int8 **))*v8 + 3))(v8, v8 + 2);
      if ((_BYTE)v15)
      {
        v12 = v14;
        v14 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v11);
          else
            *(_DWORD *)v12 -= 2;
        }
      }
    }
    goto LABEL_17;
  }
  if (v5 == 767)
  {
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a2 + 4);
    IPC::Decoder::decode<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3, (uint64_t)&v14);
    if (v16)
      WebKit::RemoteComputePipeline::getBindGroupLayout((uint64_t)v4, v14, v15);
LABEL_17:
    v6 = (unsigned __int8 ***)&v13;
    return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v6);
  }
  if (v5 != 766)
    return this;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v14, a2 + 4);
  WebKit::WebGPU::ObjectHeap::removeObject((uint64_t)v4[3][1], (uint64_t)v4[5]);
  v6 = (unsigned __int8 ***)&v14;
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v6);
}

unsigned __int8 ***WebKit::RemoteDevice::didReceiveStreamMessage(unsigned __int8 ***this, uint64_t **a2, IPC::Decoder *a3)
{
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  WTF *v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  void *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  __int128 v23;
  void *v24;
  WTF::StringImpl *v25;
  void *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  unsigned int v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  __int128 v38;
  unsigned __int8 **v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  _QWORD *v43;
  unsigned __int8 **v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  _QWORD *v48;
  unsigned __int8 **v49;
  void *v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  WTF::StringImpl *v54;
  _QWORD *v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int *v62;
  char v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unsigned __int8 *v72;
  unsigned __int8 **v73;
  void *v74;
  unint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t **v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  __int128 v82;
  unsigned __int8 **v83;
  unint64_t v84;
  char v85;
  unint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  unint64_t v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  char v93;
  BOOL v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  WTF *v127;
  WTF::StringImpl *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unsigned __int8 **v152;
  uint64_t *v153;
  _BYTE v154[24];
  unint64_t v155;
  __int128 v156;
  WTF *v157;
  unsigned int *v158;
  uint64_t v159;
  int v160;
  char v161;
  uint64_t v162;
  char v163;
  unsigned int *v164;
  char v165;
  _BYTE v166[24];
  unint64_t v167;
  __int128 v168;
  WTF *v169;
  unsigned int *v170;
  char v171;
  char v172;
  char v173;

  v3 = (uint64_t *)a3;
  v4 = (uint64_t)this;
  v5 = v166;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x301:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v153, a2 + 4);
      IPC::ArgumentCoder<WebKit::WebGPU::BindGroupDescriptor,void>::decode(v3, (uint64_t)v166);
      if (!(_BYTE)v168
        && ((v7 = (void *)*v3, v107 = v3[1], *v3 = 0, v3[1] = 0, (v108 = v3[3]) == 0)
         || !v107
         || ((*(void (**)(uint64_t, void *))(*(_QWORD *)v108 + 16))(v108, v7), !(_BYTE)v168))
        || (v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v3),
            !(_BYTE)v7))
      {
        std::__optional_destruct_base<WebKit::WebGPU::BindGroupDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v166, v7);
        goto LABEL_204;
      }
      if (!(_BYTE)v168)
        goto LABEL_143;
      v8 = v6;
      *(_OWORD *)v154 = *(_OWORD *)v166;
      *(_QWORD *)v166 = 0;
      *(_QWORD *)&v154[16] = *(_QWORD *)&v166[16];
      v9 = v167;
      *(_QWORD *)&v166[16] = 0;
      v167 = 0;
      v155 = v9;
      *(_QWORD *)&v156 = v6;
      BYTE8(v156) = 1;
      std::__optional_destruct_base<WebKit::WebGPU::BindGroupDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v166, v7);
      WebKit::RemoteDevice::createBindGroup(v4, (uint64_t)v154, v8);
      if (!BYTE8(v156))
        goto LABEL_205;
      v11 = *(WTF **)&v154[16];
      if (!*(_QWORD *)&v154[16])
        goto LABEL_188;
      *(_QWORD *)&v154[16] = 0;
      LODWORD(v155) = 0;
      goto LABEL_97;
    case 0x302:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v153, a2 + 4);
      IPC::ArgumentCoder<WebKit::WebGPU::BindGroupLayoutDescriptor,void>::decode(v3, (uint64_t)v166);
      if (!(_BYTE)v167)
      {
        v36 = (void *)*v3;
        v123 = v3[1];
        *v3 = 0;
        v3[1] = 0;
        v124 = v3[3];
        if (v124 && v123)
          (*(void (**)(uint64_t, void *))(*(_QWORD *)v124 + 16))(v124, v36);
        goto LABEL_178;
      }
      v35 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v3);
      if (!(_BYTE)v36)
      {
LABEL_178:
        std::__optional_destruct_base<WebKit::WebGPU::BindGroupLayoutDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v166, v36);
        goto LABEL_204;
      }
      v37 = v35;
      v38 = *(_OWORD *)v166;
      memset(v166, 0, sizeof(v166));
      *(_OWORD *)v154 = v38;
      *(_QWORD *)&v154[16] = *(_QWORD *)&v166[16];
      v155 = v35;
      LOBYTE(v156) = 1;
      std::__optional_destruct_base<WebKit::WebGPU::BindGroupLayoutDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v166, v36);
      WebKit::RemoteDevice::createBindGroupLayout(v4, (uint64_t)v154, v37);
      if ((_BYTE)v156)
        goto LABEL_95;
LABEL_205:
      v78 = &v153;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v78);
    case 0x303:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v153, a2 + 4);
      IPC::ArgumentCoder<WebKit::WebGPU::BufferDescriptor,void>::decode(v3, (uint64_t)v166);
      if (!(_BYTE)v167)
      {
        v104 = *v3;
        v105 = v3[1];
        *v3 = 0;
        v3[1] = 0;
        v106 = v3[3];
        if (!v106)
          goto LABEL_176;
        if (!v105)
          goto LABEL_176;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v106 + 16))(v106, v104);
        if (!(_BYTE)v167)
          goto LABEL_176;
      }
      v27 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v3);
      if (!(_BYTE)v18)
      {
        if ((_BYTE)v167)
          goto LABEL_114;
        goto LABEL_204;
      }
      if (!(_BYTE)v167)
        goto LABEL_143;
      *(_OWORD *)v154 = *(_OWORD *)v166;
      *(_DWORD *)&v154[15] = *(_DWORD *)&v166[15];
      v155 = v27;
      LOBYTE(v156) = 1;
      WebKit::RemoteDevice::createBuffer(v4, (uint64_t)v154, v27);
      if ((_BYTE)v156)
        goto LABEL_188;
      goto LABEL_205;
    case 0x304:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v166, a2 + 4);
      v28 = v3[1];
      v29 = *v3;
      v30 = v3[2] - *v3;
      if (v28 <= v30)
      {
        v109 = 0;
        v110 = 0;
        *v3 = 0;
        v3[1] = 0;
        v111 = v3[3];
        if (v111)
        {
          if (v28)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v111 + 16))(v111);
            v110 = *v3;
            v109 = v3[1];
          }
          else
          {
            v109 = 0;
            v110 = 0;
          }
        }
      }
      else
      {
        v31 = (_BYTE *)(v29 + v30);
        v3[2] = (uint64_t)(v31 + 1);
        if (v29)
        {
          v32 = *v31;
          if (v32 >= 2)
            goto LABEL_169;
          if (!*v31)
          {
            v33 = 0;
LABEL_118:
            v90 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v3);
            v154[0] = 0;
            v92 = v91;
            if ((_BYTE)v91)
            {
              v154[8] = 0;
              if (v32)
              {
                *(_QWORD *)v154 = v33;
                v154[8] = 1;
                v33 = 0;
              }
              *(_QWORD *)&v154[16] = v90;
              v93 = 1;
            }
            else
            {
              v93 = 0;
            }
            LOBYTE(v155) = v93;
            if (v32)
              v94 = v33 == 0;
            else
              v94 = 1;
            if (!v94)
            {
              if (*(_DWORD *)v33 == 2)
                WTF::StringImpl::destroy(v33, v91);
              else
                *(_DWORD *)v33 -= 2;
            }
            if (v92)
            {
LABEL_134:
              if ((_BYTE)v155)
              {
                WebKit::RemoteDevice::createCommandEncoder(v4, (uint64_t)v154, *(uint64_t *)&v154[16]);
                if ((_BYTE)v155)
                {
LABEL_136:
                  if (v154[8])
                  {
                    v96 = *(WTF::StringImpl **)v154;
                    *(_QWORD *)v154 = 0;
                    if (v96)
                    {
                      if (*(_DWORD *)v96 == 2)
                        WTF::StringImpl::destroy(v96, v95);
                      else
                        *(_DWORD *)v96 -= 2;
                    }
                  }
                }
              }
LABEL_141:
              v78 = (uint64_t **)v166;
              return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v78);
            }
LABEL_172:
            v117 = *v3;
            v118 = v3[1];
            *v3 = 0;
            v3[1] = 0;
            v119 = v3[3];
            if (v119 && v118)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v119 + 16))(v119, v117);
            goto LABEL_134;
          }
          IPC::ArgumentCoder<WebCore::ApplePayAMSUIRequest,void>::decode(v3, (uint64_t)v154);
          if (v154[8])
          {
            v33 = *(WTF::StringImpl **)v154;
            goto LABEL_118;
          }
          goto LABEL_168;
        }
        v109 = v28;
        v110 = 0;
      }
      v28 = 0;
      v29 = 0;
      *v3 = 0;
      v3[1] = 0;
      v112 = v3[3];
      if (!v112)
        goto LABEL_169;
      if (!v109)
      {
        v28 = 0;
        v29 = 0;
LABEL_169:
        *v3 = 0;
        v3[1] = 0;
        v113 = v3[3];
        if (v113 && v28)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v113 + 16))(v113, v29);
        v114 = *v3;
        v115 = v3[1];
        *v3 = 0;
        v3[1] = 0;
        v116 = v3[3];
        if (v116 && v115)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v116 + 16))(v116, v114);
        v154[0] = 0;
        LOBYTE(v155) = 0;
        goto LABEL_172;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v112 + 16))(v112, v110, v109);
LABEL_168:
      v29 = *v3;
      v28 = v3[1];
      goto LABEL_169;
    case 0x305:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v166, a2 + 4);
      IPC::Decoder::decode<std::tuple<WebKit::WebGPU::ComputePipelineDescriptor,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t)v154, v3);
      if ((_BYTE)v159)
        WebKit::RemoteDevice::createComputePipeline(v4, (uint64_t)v154, (uint64_t)v158);
      std::__optional_destruct_base<std::tuple<WebKit::WebGPU::ComputePipelineDescriptor,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v154, v19);
      goto LABEL_141;
    case 0x306:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v152, a2 + 4);
      v49 = v152;
      IPC::Decoder::decode<std::tuple<WebKit::WebGPU::ComputePipelineDescriptor,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t)v154, v3);
      if (!(_BYTE)v159)
        goto LABEL_63;
      v51 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3);
      if (!(_BYTE)v50)
        goto LABEL_63;
      v3 = (uint64_t *)v51;
      *(_QWORD *)v166 = v51;
      v5 = &v166[8];
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v49);
      v52 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
      *v52 = (uint64_t)off_1E34B4C60;
      v52[1] = (uint64_t)v3;
      *(_QWORD *)&v166[8] = 0;
      v52[2] = (uint64_t)v49;
      v153 = v52;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v166[8]);
      if (!(_BYTE)v159)
        goto LABEL_143;
      WebKit::RemoteDevice::createComputePipelineAsync((_QWORD *)v4, (uint64_t)v154, v158, (WTF::StringImpl **)&v153);
      v53 = v153;
      v153 = 0;
      if (v53)
        (*(void (**)(uint64_t *))(*v53 + 8))(v53);
LABEL_63:
      std::__optional_destruct_base<std::tuple<WebKit::WebGPU::ComputePipelineDescriptor,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v154, v50);
      goto LABEL_90;
    case 0x307:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v153, a2 + 4);
      IPC::ArgumentCoder<WebKit::WebGPU::PipelineLayoutDescriptor,void>::decode(v3, (uint64_t)v166);
      if (!(_BYTE)v168
        && ((v65 = (void *)*v3, v129 = v3[1], *v3 = 0, v3[1] = 0, (v130 = v3[3]) == 0)
         || !v129
         || ((*(void (**)(uint64_t, void *))(*(_QWORD *)v130 + 16))(v130, v65), !(_BYTE)v168))
        || (v64 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v3),
            !(_BYTE)v65))
      {
        std::__optional_destruct_base<WebKit::WebGPU::PipelineLayoutDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v166, v65);
        goto LABEL_204;
      }
      if (!(_BYTE)v168)
        goto LABEL_143;
      v66 = v64;
      v67 = *(_QWORD *)v166;
      *(_QWORD *)v166 = 0;
      *(_QWORD *)v154 = v67;
      v154[8] = 0;
      LOBYTE(v155) = 0;
      if ((_BYTE)v167)
      {
        *(_QWORD *)&v154[8] = *(_QWORD *)&v166[8];
        v68 = *(_QWORD *)&v166[16];
        *(_QWORD *)&v166[8] = 0;
        *(_QWORD *)&v166[16] = 0;
        *(_QWORD *)&v154[16] = v68;
        LOBYTE(v155) = 1;
      }
      *(_QWORD *)&v156 = v64;
      BYTE8(v156) = 1;
      std::__optional_destruct_base<WebKit::WebGPU::PipelineLayoutDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v166, v65);
      WebKit::RemoteDevice::createPipelineLayout(v4, (WTF::StringImpl **)v154, v66);
      if (!BYTE8(v156))
        goto LABEL_205;
      if ((_BYTE)v155)
        goto LABEL_95;
      goto LABEL_188;
    case 0x308:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v153, a2 + 4);
      IPC::ArgumentCoder<WebKit::WebGPU::QuerySetDescriptor,void>::decode(v3, (uint64_t)v166);
      if (!v166[16])
      {
        v120 = *v3;
        v121 = v3[1];
        *v3 = 0;
        v3[1] = 0;
        v122 = v3[3];
        if (!v122)
          goto LABEL_176;
        if (!v121)
          goto LABEL_176;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v122 + 16))(v122, v120);
        if (!v166[16])
          goto LABEL_176;
      }
      v34 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v3);
      if (!(_BYTE)v18)
      {
        if (!v166[16])
          goto LABEL_204;
        goto LABEL_114;
      }
      if (!v166[16])
        goto LABEL_143;
      *(_OWORD *)v154 = *(_OWORD *)v166;
      *(_QWORD *)&v154[16] = v34;
      LOBYTE(v155) = 1;
      WebKit::RemoteDevice::createQuerySet(v4, (uint64_t)v154, v34);
      if ((_BYTE)v155)
        goto LABEL_188;
      goto LABEL_205;
    case 0x309:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v153, a2 + 4);
      IPC::ArgumentCoder<WebKit::WebGPU::RenderBundleEncoderDescriptor,void>::decode(v3, (uint64_t)v166);
      if (!BYTE8(v168)
        && ((v80 = (void *)*v3, v141 = v3[1], *v3 = 0, v3[1] = 0, (v142 = v3[3]) == 0)
         || !v141
         || ((*(void (**)(uint64_t, void *))(*(_QWORD *)v142 + 16))(v142, v80), !BYTE8(v168)))
        || (v79 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v3),
            !(_BYTE)v80))
      {
        std::__optional_destruct_base<WebKit::WebGPU::RenderBundleEncoderDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v166, v80);
        goto LABEL_204;
      }
      if (!BYTE8(v168))
        goto LABEL_143;
      v81 = v79;
      v82 = *(_OWORD *)v166;
      memset(v166, 0, sizeof(v166));
      *(_OWORD *)v154 = v82;
      *(_QWORD *)&v154[16] = *(_QWORD *)&v166[16];
      v155 = v167;
      LOWORD(v156) = v168;
      *((_QWORD *)&v156 + 1) = v79;
      LOBYTE(v157) = 1;
      std::__optional_destruct_base<WebKit::WebGPU::RenderBundleEncoderDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v166, v80);
      WebKit::RemoteDevice::createRenderBundleEncoder(v4, (uint64_t)v154, v81);
      if (!(_BYTE)v157)
        goto LABEL_205;
LABEL_95:
      v11 = *(WTF **)&v154[8];
      if (*(_QWORD *)&v154[8])
      {
        *(_QWORD *)&v154[8] = 0;
        *(_DWORD *)&v154[16] = 0;
LABEL_97:
        WTF::fastFree(v11, v10);
      }
      goto LABEL_188;
    case 0x30A:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v166, a2 + 4);
      IPC::Decoder::decode<std::tuple<WebKit::WebGPU::RenderPipelineDescriptor,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t)v154, v3);
      if (v165)
        WebKit::RemoteDevice::createRenderPipeline(v4, (uint64_t)v154, (uint64_t)v164);
      std::__optional_destruct_base<std::tuple<WebKit::WebGPU::RenderPipelineDescriptor,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v154, v26);
      goto LABEL_141;
    case 0x30B:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v152, a2 + 4);
      v73 = v152;
      IPC::Decoder::decode<std::tuple<WebKit::WebGPU::RenderPipelineDescriptor,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t)v154, v3);
      if (!v165)
        goto LABEL_89;
      v75 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3);
      if (!(_BYTE)v74)
        goto LABEL_89;
      v3 = (uint64_t *)v75;
      *(_QWORD *)v166 = v75;
      v5 = &v166[8];
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v73);
      v76 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
      *v76 = (uint64_t)off_1E34B4C88;
      v76[1] = (uint64_t)v3;
      *(_QWORD *)&v166[8] = 0;
      v76[2] = (uint64_t)v73;
      v153 = v76;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v166[8]);
      if (!v165)
        goto LABEL_143;
      WebKit::RemoteDevice::createRenderPipelineAsync((_QWORD *)v4, (uint64_t)v154, v164, (WTF::StringImpl **)&v153);
      v77 = v153;
      v153 = 0;
      if (v77)
        (*(void (**)(uint64_t *))(*v77 + 8))(v77);
LABEL_89:
      std::__optional_destruct_base<std::tuple<WebKit::WebGPU::RenderPipelineDescriptor,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v154, v74);
LABEL_90:
      v78 = (uint64_t **)&v152;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v78);
    case 0x30C:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v153, a2 + 4);
      IPC::ArgumentCoder<WebKit::WebGPU::SamplerDescriptor,void>::decode(v3, (uint64_t)v166);
      if (!(_BYTE)v168)
      {
        v99 = *v3;
        v100 = v3[1];
        *v3 = 0;
        v3[1] = 0;
        v101 = v3[3];
        if (!v101
          || !v100
          || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v101 + 16))(v101, v99), !(_BYTE)v168))
        {
LABEL_176:
          v154[0] = 0;
          goto LABEL_204;
        }
      }
      v17 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v3);
      if (!(_BYTE)v18)
      {
        if ((_BYTE)v168)
        {
LABEL_114:
          v89 = *(WTF::StringImpl **)v166;
          *(_QWORD *)v166 = 0;
          if (v89)
          {
            if (*(_DWORD *)v89 == 2)
              WTF::StringImpl::destroy(v89, v18);
            else
              *(_DWORD *)v89 -= 2;
          }
        }
        goto LABEL_204;
      }
      if (!(_BYTE)v168)
        goto LABEL_143;
      *(_QWORD *)v154 = *(_QWORD *)v166;
      *(_OWORD *)&v154[8] = *(_OWORD *)&v166[8];
      LODWORD(v155) = v167;
      *(_QWORD *)&v156 = v17;
      BYTE8(v156) = 1;
      WebKit::RemoteDevice::createSampler(v4, (uint64_t)v154, v17);
      if (!BYTE8(v156))
        goto LABEL_205;
      goto LABEL_188;
    case 0x30D:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v153, a2 + 4);
      IPC::ArgumentCoder<WebKit::WebGPU::ShaderModuleDescriptor,void>::decode(v3, (uint64_t)v166);
      if (((_BYTE)v168
         || (v21 = (void *)*v3, v102 = v3[1], *v3 = 0, v3[1] = 0, (v103 = v3[3]) != 0)
         && v102
         && ((*(void (**)(uint64_t, void *))(*(_QWORD *)v103 + 16))(v103, v21), (_BYTE)v168))
        && (v20 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v3),
            (_BYTE)v21))
      {
        if (!(_BYTE)v168)
          goto LABEL_143;
        v22 = v20;
        v23 = *(_OWORD *)v166;
        memset(v166, 0, sizeof(v166));
        *(_OWORD *)v154 = v23;
        *(_QWORD *)&v154[16] = *(_QWORD *)&v166[16];
        *(_QWORD *)&v23 = v167;
        v167 = 0;
        v155 = v23;
        *(_QWORD *)&v156 = v20;
        BYTE8(v156) = 1;
        std::__optional_destruct_base<WebKit::WebGPU::ShaderModuleDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v166, v21);
        WebKit::RemoteDevice::createShaderModule(v4, (uint64_t)v154, v22);
        if (BYTE8(v156))
        {
          WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v154[16], v24);
          v25 = *(WTF::StringImpl **)&v154[8];
          *(_QWORD *)&v154[8] = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v10);
            else
              *(_DWORD *)v25 -= 2;
          }
          goto LABEL_188;
        }
      }
      else
      {
        std::__optional_destruct_base<WebKit::WebGPU::ShaderModuleDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v166, v21);
LABEL_204:
        v143 = *v3;
        v144 = v3[1];
        *v3 = 0;
        v3[1] = 0;
        v145 = v3[3];
        if (v145 && v144)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v145 + 16))(v145, v143);
      }
      goto LABEL_205;
    case 0x30E:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v153, a2 + 4);
      IPC::ArgumentCoder<WebKit::WebGPU::TextureDescriptor,void>::decode(v3, v166);
      if ((v171
         || (v59 = (void *)*v3, v125 = v3[1], *v3 = 0, v3[1] = 0, (v126 = v3[3]) != 0)
         && v125
         && ((*(void (**)(uint64_t, void *))(*(_QWORD *)v126 + 16))(v126, v59), v171))
        && (v58 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v3),
            (_BYTE)v59))
      {
        if (!v171)
        {
LABEL_143:
          while (1)
          {
            __break(1u);
LABEL_144:
            v13 = (WTF::StringImpl *)*v3;
            v97 = v3[1];
            *v3 = 0;
            v3[1] = 0;
            v98 = v3[3];
            if (!v98)
              break;
            if (!v97)
              break;
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v98 + 16))(v98, v13);
            if (!v173)
              break;
LABEL_9:
            v12 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v3);
            if (!(_BYTE)v13)
              break;
            if (v173)
            {
              v14 = v12;
              v15 = *(_QWORD *)v166;
              *(_QWORD *)v166 = 0;
              *(_QWORD *)v154 = v15;
              *(_OWORD *)&v154[8] = *(_OWORD *)(v5 + 8);
              LOBYTE(v155) = v167;
              LOBYTE(v156) = 0;
              v161 = 0;
              if (v172)
              {
                v156 = v168;
                LODWORD(v157) = (_DWORD)v169;
                LOBYTE(v158) = 0;
                v160 = -1;
                std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,(std::__variant_detail::_Trait)1>>((uint64_t)&v158, (uint64_t)&v170);
                v161 = 1;
              }
              v162 = v14;
              v16 = 1;
              goto LABEL_146;
            }
          }
          v16 = 0;
          v154[0] = 0;
LABEL_146:
          v163 = v16;
          std::__optional_destruct_base<WebKit::WebGPU::ExternalTextureDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v166, v13);
          if (!v163)
          {
            v146 = *v3;
            v147 = v3[1];
            *v3 = 0;
            v3[1] = 0;
            v148 = v3[3];
            if (!v148)
              goto LABEL_205;
            if (!v147)
              goto LABEL_205;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v148 + 16))(v148, v146);
            if (!v163)
              goto LABEL_205;
          }
          WebKit::RemoteDevice::importExternalTextureFromVideoFrame(v4, (uint64_t)v154, v162);
          if (!v163)
            goto LABEL_205;
          if (v161)
          {
            if (v160 != -1)
              ((void (*)(_BYTE *, unsigned int **))off_1E34B4D18[v160])(v166, &v158);
            v160 = -1;
          }
          goto LABEL_188;
        }
        v60 = v58;
        v61 = *(_QWORD *)v166;
        *(_QWORD *)v166 = 0;
        *(_QWORD *)v154 = v61;
        v154[8] = 0;
        LODWORD(v155) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>,(std::__variant_detail::_Trait)1>>((uint64_t)&v154[8], (uint64_t)&v166[8]);
        *(_QWORD *)&v156 = v168;
        *(_DWORD *)((char *)&v156 + 7) = *(_DWORD *)((char *)&v168 + 7);
        v157 = v169;
        v62 = v170;
        v169 = 0;
        v170 = 0;
        v158 = v62;
        v63 = 1;
        v159 = v60;
      }
      else
      {
        v63 = 0;
        v154[0] = 0;
      }
      LOBYTE(v160) = v63;
      std::__optional_destruct_base<WebKit::WebGPU::TextureDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v166, v59);
      if (!(_BYTE)v160)
      {
        v149 = *v3;
        v150 = v3[1];
        *v3 = 0;
        v3[1] = 0;
        v151 = v3[3];
        if (!v151)
          goto LABEL_205;
        if (!v150)
          goto LABEL_205;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v151 + 16))(v151, v149);
        if (!(_BYTE)v160)
          goto LABEL_205;
      }
      WebKit::RemoteDevice::createTexture(v4, (uint64_t)v154, v159);
      if (!(_BYTE)v160)
        goto LABEL_205;
      v127 = v157;
      if (v157)
      {
        v157 = 0;
        LODWORD(v158) = 0;
        WTF::fastFree(v127, v10);
      }
      if ((_DWORD)v155 != -1)
        ((void (*)(_BYTE *, _BYTE *))off_1E34B4C40[v155])(v166, &v154[8]);
      LODWORD(v155) = -1;
LABEL_188:
      v128 = *(WTF::StringImpl **)v154;
      *(_QWORD *)v154 = 0;
      if (v128)
      {
        if (*(_DWORD *)v128 == 2)
          WTF::StringImpl::destroy(v128, (WTF::StringImpl *)v10);
        else
          *(_DWORD *)v128 -= 2;
      }
      goto LABEL_205;
    case 0x30F:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v154, a2 + 4);
      (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 16) + 24))(*(_QWORD *)(v4 + 16));
      goto LABEL_197;
    case 0x310:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v154, a2 + 4);
      WebKit::WebGPU::ObjectHeap::removeObject(*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8), *(_QWORD *)(v4 + 40));
      goto LABEL_197;
    case 0x311:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v153, a2 + 4);
      IPC::ArgumentCoder<WebKit::WebGPU::ExternalTextureDescriptor,void>::decode(v3, v166);
      if (v173)
        goto LABEL_9;
      goto LABEL_144;
    case 0x312:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v153, a2 + 4);
      v39 = (unsigned __int8 **)v153;
      v40 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3);
      if (!v41)
        goto LABEL_205;
      v42 = v40;
      *(_QWORD *)v154 = v40;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v39);
      v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v43 = off_1E34B4CB0;
      v43[1] = v42;
      *(_QWORD *)&v154[8] = 0;
      v43[2] = v39;
      *(_QWORD *)v166 = v43;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v154[8]);
      WebKit::RemoteDevice::popErrorScope(v4, (uint64_t *)v166);
      goto LABEL_103;
    case 0x313:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v154, a2 + 4);
      v69 = v3[1];
      v70 = *v3;
      v71 = v3[2] - *v3;
      if (v69 <= v71)
      {
        v131 = 0;
        v132 = 0;
        *v3 = 0;
        v3[1] = 0;
        v133 = v3[3];
        if (v133)
        {
          if (v69)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v133 + 16))(v133, v70, v69);
            v132 = *v3;
            v131 = v3[1];
          }
          else
          {
            v131 = 0;
            v132 = 0;
          }
        }
      }
      else
      {
        v72 = (unsigned __int8 *)(v70 + v71);
        v3[2] = (uint64_t)(v72 + 1);
        if (v70)
        {
          if (*v72 < 3u)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 16) + 152))(*(_QWORD *)(v4 + 16));
            goto LABEL_197;
          }
LABEL_196:
          v135 = *v3;
          v136 = v3[1];
          *v3 = 0;
          v3[1] = 0;
          v137 = v3[3];
          if (v137)
          {
            if (v136)
            {
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v137 + 16))(v137, v135);
              v138 = *v3;
              v139 = v3[1];
              v140 = v3[3];
              *v3 = 0;
              v3[1] = 0;
              if (v140)
              {
                if (v139)
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v140 + 16))(v140, v138);
              }
            }
          }
LABEL_197:
          v78 = (uint64_t **)v154;
          return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v78);
        }
        v131 = v69;
        v132 = 0;
      }
      *v3 = 0;
      v3[1] = 0;
      v134 = v3[3];
      if (v134 && v131)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v134 + 16))(v134, v132);
      goto LABEL_196;
    case 0x314:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v153, a2 + 4);
      v83 = (unsigned __int8 **)v153;
      v84 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3);
      if (!v85)
        goto LABEL_205;
      v86 = v84;
      *(_QWORD *)v154 = v84;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v83);
      v87 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v87 = off_1E34B4D00;
      v87[1] = v86;
      *(_QWORD *)&v154[8] = 0;
      v87[2] = v83;
      *(_QWORD *)v166 = v87;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v154[8]);
      WebKit::RemoteDevice::resolveDeviceLostPromise(v4, (uint64_t *)v166);
      goto LABEL_103;
    case 0x315:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v153, a2 + 4);
      v44 = (unsigned __int8 **)v153;
      v45 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3);
      if (!v46)
        goto LABEL_205;
      v47 = v45;
      *(_QWORD *)v154 = v45;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v44);
      v48 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v48 = off_1E34B4CD8;
      v48[1] = v47;
      *(_QWORD *)&v154[8] = 0;
      v48[2] = v44;
      *(_QWORD *)v166 = v48;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v154[8]);
      WebKit::RemoteDevice::resolveUncapturedErrorEvent(v4, (uint64_t *)v166);
LABEL_103:
      v88 = *(_QWORD *)v166;
      *(_QWORD *)v166 = 0;
      if (v88)
        (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
      goto LABEL_205;
    case 0x316:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v166, a2 + 4);
      IPC::Decoder::decode<std::tuple<WTF::String>>(v3, (uint64_t)v154);
      if (!v154[8])
        goto LABEL_141;
      v55 = *(_QWORD **)(v4 + 16);
      v56 = (WTF::StringImpl *)v55[3];
      v57 = *(_QWORD *)v154;
      *(_QWORD *)v154 = 0;
      v55[3] = v57;
      if (v56)
      {
        if (*(_DWORD *)v56 == 2)
          WTF::StringImpl::destroy(v56, v54);
        else
          *(_DWORD *)v56 -= 2;
      }
      (*(void (**)(_QWORD *, _QWORD *))(*v55 + 184))(v55, v55 + 3);
      goto LABEL_136;
    case 0x317:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v166, a2 + 4);
      IPC::Decoder::decode<std::tuple<WebCore::SharedMemoryHandle>>((IPC::Decoder *)v3, (uint64_t)v154);
      if (!v154[16])
        goto LABEL_141;
      WebKit::SharedVideoFrameReader::setSharedMemory(v4 + 64);
      if (!v154[16])
        goto LABEL_141;
      goto LABEL_108;
    case 0x318:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v166, a2 + 4);
      IPC::Decoder::decode<std::tuple<IPC::Semaphore>>((IPC::Decoder *)v3, (uint64_t)v154);
      if (!v154[8])
        goto LABEL_141;
      std::optional<IPC::Semaphore>::operator=[abi:sn180100]<IPC::Semaphore,void>((IPC::Semaphore *)(v4 + 80), (IPC::Semaphore *)v154);
      if (!v154[8])
        goto LABEL_141;
      IPC::Semaphore::destroy((IPC::Semaphore *)v154);
LABEL_108:
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v154);
      goto LABEL_141;
    default:
      return this;
  }
}

_DWORD *IPC::handleMessage<Messages::RemoteDisplayListRecorder::DrawSystemImage,WebKit::RemoteDisplayListRecorder,WebKit::RemoteDisplayListRecorder,void ()(WTF::Ref<WebCore::SystemImage,WTF::RawPtrTraits<WebCore::SystemImage>,WTF::DefaultRefDerefTraits<WebCore::SystemImage>>,WebCore::FloatRect const&)>(unint64_t *a1, uint64_t a2)
{
  _DWORD *v4;
  _DWORD *result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  __int128 v12;
  char v13;
  _DWORD *v14;
  char v15;
  __int128 v16;
  char v17;

  IPC::Decoder::decode<WTF::Ref<WebCore::SystemImage,WTF::RawPtrTraits<WebCore::SystemImage>,WTF::DefaultRefDerefTraits<WebCore::SystemImage>>>(a1, &v14);
  if (!v15)
    goto LABEL_17;
  v4 = (_DWORD *)IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode(a1, (uint64_t)&v16);
  if (v17)
  {
    if (v15)
    {
      v12 = v16;
      v13 = 1;
      *(_QWORD *)&v16 = v14;
      WebKit::RemoteDisplayListRecorder::drawSystemImage(a2, (WebCore::ARKitBadgeSystemImage **)&v16, &v12);
      result = (_DWORD *)v16;
      *(_QWORD *)&v16 = 0;
      if (result)
      {
        if (result[2] == 1)
          result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
        else
          --result[2];
      }
      if (v13)
        return 0;
      return result;
    }
    __break(1u);
  }
  else
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v8 = a1[3];
    if (v8 && v7)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v8 + 16))(v8, v6);
    if (!v15)
      goto LABEL_17;
    v4 = v14;
    v14 = 0;
    if (!v4)
      goto LABEL_17;
    if (v4[2] != 1)
    {
      --v4[2];
      goto LABEL_17;
    }
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
LABEL_17:
  v9 = *a1;
  v10 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  result = (_DWORD *)a1[3];
  if (result)
    v11 = v10 == 0;
  else
    v11 = 1;
  if (!v11)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *, unint64_t))(*(_QWORD *)result + 16))(result, v9);
  return result;
}

_QWORD *IPC::handleMessage<Messages::RemoteDisplayListRecorder::DrawPattern,WebKit::RemoteDisplayListRecorder,WebKit::RemoteDisplayListRecorder,void ()(WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect const&,WebCore::FloatRect const&,WebCore::AffineTransform const&,WebCore::FloatPoint const&,WebCore::FloatSize const&,WebCore::ImagePaintingOptions)>(unint64_t *a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4[13];
  char v5;

  result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize,WebCore::ImagePaintingOptions>>(v4, a1);
  if (v5)
    return (_QWORD *)WebKit::RemoteDisplayListRecorder::drawPattern(a2, v4[0]);
  return result;
}

unsigned int *IPC::handleMessage<Messages::RemoteDisplayListRecorder::DrawDotsForDocumentMarker,WebKit::RemoteDisplayListRecorder,WebKit::RemoteDisplayListRecorder,void ()(WebCore::FloatRect const&,WebCore::DocumentMarkerLineStyle const&)>(unint64_t *a1, uint64_t a2)
{
  void *v4;
  char v5;
  unsigned int *result;
  void *v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  Color v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  char v21;
  _BYTE v22[16];
  char v23;

  IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode(a1, (uint64_t)&v20);
  if (!v21)
  {
    v10 = *a1;
    v11 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12)
      v13 = v11 == 0;
    else
      v13 = 1;
    if (!v13)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v10);
    LOBYTE(v16) = 0;
    v19 = 0;
LABEL_19:
    v14 = *a1;
    v15 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (unsigned int *)a1[3];
    if (!result)
      return result;
    if (!v15)
      return result;
    result = (unsigned int *)(*(uint64_t (**)(unsigned int *, unint64_t))(*(_QWORD *)result + 16))(result, v14);
    if (!v19)
      return result;
    goto LABEL_6;
  }
  IPC::Decoder::decode<WebCore::DocumentMarkerLineStyle>((uint64_t *)a1, v22);
  v5 = v23;
  if (v23)
  {
    v16 = v20;
    LOBYTE(v17.m_colorAndFlags) = v22[0];
    WebCore::Color::Color();
    v5 = 1;
  }
  else
  {
    LOBYTE(v16) = 0;
  }
  v19 = v5;
  std::__optional_destruct_base<WebCore::DocumentMarkerLineStyle,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v22, v4);
  if (!v19)
    goto LABEL_19;
LABEL_6:
  result = WebKit::RemoteDisplayListRecorder::drawDotsForDocumentMarker(a2, &v16, &v17);
  if (v19 && (v18 & 0x8000000000000) != 0)
  {
    result = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
    do
    {
      v8 = __ldaxr(result);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, result));
    if (!v9)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v7);
    }
  }
  return result;
}

uint64_t IPC::handleMessage<Messages::RemoteDisplayListRecorder::DrawEllipse,WebKit::RemoteDisplayListRecorder,WebKit::RemoteDisplayListRecorder,void ()(WebCore::FloatRect const&)>(unint64_t *a1, WebKit::RemoteDisplayListRecorder *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  char v10;
  __int128 v11;
  char v12;

  IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode(a1, (uint64_t)&v11);
  if (v12)
  {
    v9 = v11;
    v10 = 1;
    return WebKit::RemoteDisplayListRecorder::drawEllipse(a2, (const WebCore::FloatRect *)&v9);
  }
  else
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result && v6)
    {
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v5);
      v7 = *a1;
      v8 = a1[1];
      result = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (result)
      {
        if (v8)
          return (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v7);
      }
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
    }
  }
  return result;
}

unsigned int *IPC::handleMessage<Messages::RemoteDisplayListRecorder::DrawFocusRingPath,WebKit::RemoteDisplayListRecorder,WebKit::RemoteDisplayListRecorder,void ()(WebCore::Path const&,float,WebCore::Color const&)>(unint64_t *a1, WebKit::RemoteDisplayListRecorder *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  float *v8;
  float v9;
  void *v10;
  char v11;
  unsigned int *result;
  void *v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE v24[8];
  char v25;
  _BYTE v26[8];
  _BYTE v27[56];
  int v28;
  float v29;
  Color v30;
  char v31;
  _BYTE v32[8];
  _BYTE v33[56];
  int v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebCore::Path>(v32, a1);
  if (!v35)
  {
    v26[0] = 0;
    v31 = 0;
    goto LABEL_16;
  }
  v4 = a1[1];
  v5 = *a1;
  v6 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v4 >= v6 && v4 - v6 > 3)
  {
    v8 = (float *)(v5 + v6);
    a1[2] = (unint64_t)(v8 + 1);
    if (v5)
    {
      v9 = *v8;
      IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)a1, v24);
      if (v25
        || (v10 = (void *)*a1, v22 = a1[1], *a1 = 0, a1[1] = 0, (v23 = a1[3]) != 0)
        && v22
        && ((*(void (**)(unint64_t, void *))(*(_QWORD *)v23 + 16))(v23, v10), v25))
      {
        if (!v35)
          __break(1u);
        v27[0] = 0;
        v28 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>,(std::__variant_detail::_Trait)1>>((uint64_t)v27, (uint64_t)v33);
        v29 = v9;
        WebCore::Color::Color();
        v11 = 1;
      }
      else
      {
        v11 = 0;
        v26[0] = 0;
      }
      v31 = v11;
      std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v24, v10);
      goto LABEL_12;
    }
    v18 = v4;
    v19 = 0;
  }
  else
  {
    v18 = 0;
    v19 = 0;
    *a1 = 0;
    a1[1] = 0;
    v20 = a1[3];
    if (v20)
    {
      if (v4)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v20 + 16))(v20, v5, v4);
        v19 = *a1;
        v18 = a1[1];
      }
      else
      {
        v18 = 0;
        v19 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  v21 = a1[3];
  if (v21 && v18)
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v21 + 16))(v21, v19);
  v26[0] = 0;
  v31 = 0;
LABEL_12:
  if (v35 && v34 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E34B4D38[v34])(v24, v33);
LABEL_16:
  if (v31
    || (v16 = *a1, v17 = a1[1], *a1 = 0, a1[1] = 0, (result = (unsigned int *)a1[3]) != 0)
    && v17
    && (result = (unsigned int *)(*(uint64_t (**)(unsigned int *, unint64_t))(*(_QWORD *)result + 16))(result, v16), v31))
  {
    result = WebKit::RemoteDisplayListRecorder::drawFocusRingPath(a2, (const WebCore::Path *)v26, v29, &v30);
    if (v31)
    {
      if ((v30.m_colorAndFlags & 0x8000000000000) != 0)
      {
        result = (unsigned int *)(v30.m_colorAndFlags & 0xFFFFFFFFFFFFLL);
        do
        {
          v14 = __ldaxr(result);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, result));
        if (!v15)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, v13);
        }
      }
      if (v28 != -1)
        return (unsigned int *)((uint64_t (*)(_BYTE *, _BYTE *))off_1E34B4D38[v28])(v32, v27);
    }
  }
  return result;
}

uint64_t IPC::handleMessage<Messages::RemoteDisplayListRecorder::FillQuadCurve,WebKit::RemoteDisplayListRecorder,WebKit::RemoteDisplayListRecorder,void ()(WebCore::PathDataQuadCurve const&)>(unint64_t *a1, WebKit::RemoteDisplayListRecorder *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  PathDataQuadCurve v9;
  char v10;
  PathDataQuadCurve v11;
  char v12;

  IPC::ArgumentCoder<WebCore::PathBezierCurveTo,void>::decode(a1, (uint64_t)&v11);
  if (v12)
  {
    v9 = v11;
    v10 = 1;
    return WebKit::RemoteDisplayListRecorder::fillQuadCurve(a2, &v9);
  }
  else
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result && v6)
    {
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v5);
      v7 = *a1;
      v8 = a1[1];
      result = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (result)
      {
        if (v8)
          return (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v7);
      }
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
    }
  }
  return result;
}

uint64_t IPC::handleMessage<Messages::RemoteDisplayListRecorder::FillBezierCurve,WebKit::RemoteDisplayListRecorder,WebKit::RemoteDisplayListRecorder,void ()(WebCore::PathDataBezierCurve const&)>(unint64_t *a1, WebKit::RemoteDisplayListRecorder *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  PathDataBezierCurve v9;
  char v10;
  PathDataBezierCurve v11;
  char v12;

  IPC::ArgumentCoder<WebCore::PathDataBezierCurve,void>::decode(a1, (uint64_t)&v11);
  if (v12)
  {
    v9 = v11;
    v10 = 1;
    return WebKit::RemoteDisplayListRecorder::fillBezierCurve(a2, &v9);
  }
  else
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result && v6)
    {
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v5);
      v7 = *a1;
      v8 = a1[1];
      result = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (result)
      {
        if (v8)
          return (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v7);
      }
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
    }
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteExternalTexture::didReceiveStreamMessage(unsigned __int8 ***this, uint64_t **a2, IPC::Decoder *a3)
{
  uint64_t v3;
  void (*v4)(void);
  WTF::StringImpl *v6;
  _QWORD *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  unsigned __int8 ***v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t *v13;
  WTF::StringImpl *v14;
  char v15;

  v3 = (uint64_t)this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x365:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v14, a2 + 4);
      v4 = *(void (**)(void))(**(_QWORD **)(v3 + 16) + 16);
      goto LABEL_9;
    case 0x366:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v14, a2 + 4);
      WebKit::WebGPU::ObjectHeap::removeObject(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8), *(_QWORD *)(v3 + 40));
      goto LABEL_10;
    case 0x367:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, a2 + 4);
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)&v14);
      if (v15)
      {
        v7 = *(_QWORD **)(v3 + 16);
        v8 = (WTF::StringImpl *)v7[2];
        v9 = v14;
        v14 = 0;
        v7[2] = v9;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v6);
          else
            *(_DWORD *)v8 -= 2;
        }
        (*(void (**)(_QWORD *, _QWORD *))(*v7 + 32))(v7, v7 + 2);
        if (v15)
        {
          v12 = v14;
          v14 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v11);
            else
              *(_DWORD *)v12 -= 2;
          }
        }
      }
      v10 = (unsigned __int8 ***)&v13;
      goto LABEL_18;
    case 0x368:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v14, a2 + 4);
      v4 = *(void (**)(void))(**(_QWORD **)(v3 + 16) + 24);
LABEL_9:
      v4();
LABEL_10:
      v10 = (unsigned __int8 ***)&v14;
LABEL_18:
      this = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v10);
      break;
    default:
      return this;
  }
  return this;
}

unsigned __int8 ***WebKit::RemoteFaceDetector::didReceiveStreamMessage(unsigned __int8 ***this, uint64_t **a2, IPC::Decoder *a3)
{
  uint64_t v4;
  unsigned __int8 **v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14[2];
  unsigned __int8 **v15;
  _QWORD *v16;

  if (*((_WORD *)a3 + 25) == 873)
  {
    v4 = (uint64_t)this;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v14, a2 + 4);
    v5 = (unsigned __int8 **)v14[0];
    v6 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
    if (v7)
    {
      v8 = v6;
      v9 = (uint64_t *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v10)
      {
        v11 = v9;
        v14[1] = v9;
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v5);
        v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v12 = off_1E34B4D60;
        v12[1] = v11;
        v15 = 0;
        v16 = v12;
        v12[2] = v5;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v15);
        WebKit::RemoteFaceDetector::detect(v4, v8, (uint64_t *)&v16);
        v13 = (uint64_t)v16;
        v16 = 0;
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      }
    }
    return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v14);
  }
  return this;
}

unsigned int **WebKit::RemoteGPU::didReceiveStreamMessage(unsigned int **this, uint64_t **a2, IPC::Decoder *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  char v12;
  char v13;
  char v14;
  unsigned int **v15;
  int v16;
  int v17;
  unint64_t v18;
  char v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int **v24;
  unint64_t v25;
  char v26;
  unsigned __int8 ***v27;
  char v28;
  char v29;
  unsigned int **v30;
  char v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;

  v5 = (uint64_t)this;
  v6 = *((unsigned __int16 *)a3 + 25);
  if (v6 <= 0xDD7)
  {
    if (v6 == 875)
    {
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v50, a2 + 4);
      v25 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v26)
        WebKit::RemoteGPU::createCompositorIntegration(v5, v25);
      v27 = (unsigned __int8 ***)&v50;
      return (unsigned int **)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v27);
    }
    if (v6 != 876)
      return this;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v47, a2 + 4);
    v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
    if (!*(_QWORD *)a3)
    {
      v40 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v41 = *((_QWORD *)a3 + 3);
      if (v41 && v40)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 16))(v41, 0);
      v9 = 0;
      v10 = 0;
      goto LABEL_7;
    }
    if (v8)
    {
      v9 = v7;
      v10 = 1;
LABEL_7:
      if (v10
        && (v11 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3),
            v12))
      {
        *(_QWORD *)&v50 = v9;
        *((_QWORD *)&v50 + 1) = v11;
        LOBYTE(v51) = 1;
        WebKit::RemoteGPU::createPresentationContext(v5, &v50, v11);
      }
      else
      {
        v37 = *(_QWORD *)a3;
        v38 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v39 = *((_QWORD *)a3 + 3);
        if (v39)
        {
          if (v38)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 16))(v39, v37);
        }
      }
      v27 = (unsigned __int8 ***)&v47;
      return (unsigned int **)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v27);
    }
    __break(1u);
LABEL_40:
    v42 = *(_QWORD *)a3;
    v43 = *((_QWORD *)a3 + 1);
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    v44 = *((_QWORD *)a3 + 3);
    if (v44 && v43)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 16))(v44, v42);
    goto LABEL_41;
  }
  if (v6 == 3544)
  {
    this = (unsigned int **)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
    v29 = v28;
    if (!v28)
      return this;
    v30 = this;
    this = (unsigned int **)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
    if (!v31)
      return this;
    v32 = (uint64_t)this;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v50, a2 + 4);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v50);
    *(_QWORD *)&v50 = v30;
    BYTE8(v50) = v29;
    v33 = (unsigned int *)(a2 + 1);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 + 1, v33));
    v35 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v35 = off_1E34B4DB0;
    *(_OWORD *)(v35 + 8) = v50;
    v51 = 0;
    *(_QWORD *)(v35 + 24) = a2;
    *(_QWORD *)&v47 = v35;
    WebKit::RemoteGPU::isValid(v5, v32, (uint64_t *)&v47);
    v36 = v47;
    *(_QWORD *)&v47 = 0;
    if (v36)
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
    v24 = (unsigned int **)&v51;
    return WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(v24);
  }
  if (v6 != 3545)
    return this;
  this = (unsigned int **)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
  v14 = v13;
  if (!v13)
    return this;
  v15 = this;
  v16 = IPC::ArgumentCoder<WebKit::WebGPU::RequestAdapterOptions,void>::decode((uint64_t *)a3);
  if ((v16 & 0xFF000000) == 0)
    goto LABEL_40;
  v17 = v16;
  v18 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
  if (v19)
  {
    LOWORD(v50) = v17;
    BYTE2(v50) = BYTE2(v17);
    *((_QWORD *)&v50 + 1) = v18;
    LOBYTE(v51) = 1;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v47, a2 + 4);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v47);
    *(_QWORD *)&v47 = v15;
    BYTE8(v47) = v14;
    v20 = (unsigned int *)(a2 + 1);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
    v22 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v22 = off_1E34B4D88;
    *(_OWORD *)(v22 + 8) = v47;
    v48 = 0;
    v49 = v22;
    *(_QWORD *)(v22 + 24) = a2;
    WebKit::RemoteGPU::requestAdapter(v5, (unsigned __int16 *)&v50, *((uint64_t *)&v50 + 1), &v49);
    v23 = v49;
    v49 = 0;
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    v24 = (unsigned int **)&v48;
    return WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(v24);
  }
LABEL_41:
  v45 = *(_QWORD *)a3;
  v46 = *((_QWORD *)a3 + 1);
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  this = (unsigned int **)*((_QWORD *)a3 + 3);
  if (this && v46)
    return (unsigned int **)(*((uint64_t (**)(unsigned int **, uint64_t))*this + 2))(this, v45);
  return this;
}

_BYTE *WebKit::RemoteGPUProxy::didReceiveMessage(_BYTE *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v3;
  _BYTE v4[4];
  int v5;
  _BYTE v6[12];

  if (*((_WORD *)a3 + 25) == 874)
  {
    v3 = (uint64_t)this;
    IPC::Decoder::decode<std::tuple<BOOL,IPC::Semaphore,IPC::Semaphore>>(a3, (uint64_t)v4);
    if (v6[8])
      WebKit::RemoteGPUProxy::wasCreated(v3, v4[0], (uint64_t)&v5, (uint64_t)v6);
    return std::__optional_destruct_base<std::tuple<BOOL,IPC::Semaphore,IPC::Semaphore>,false>::~__optional_destruct_base[abi:sn180100](v4);
  }
  return this;
}

_BYTE *`non-virtual thunk to'WebKit::RemoteGPUProxy::didReceiveMessage(WebKit::RemoteGPUProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  return WebKit::RemoteGPUProxy::didReceiveMessage((_BYTE *)this - 8, a2, a3);
}

void WebKit::RemoteGraphicsContextGL::didReceiveStreamMessage(WebKit::RemoteGraphicsContextGL *this, uint64_t **a2, IPC::Decoder *a3)
{
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  unint64_t v25;
  unint64_t v27;
  unint64_t v28;
  unint64_t v30;
  unint64_t v31;
  unint64_t v33;
  unint64_t v34;
  unint64_t v36;
  unint64_t v37;
  uint64_t v39;
  uint64_t v40;
  int Buffer;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned __int8 *v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  int v54;
  char v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v63;
  unint64_t v64;
  unint64_t v66;
  unint64_t v67;
  unsigned int *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v74;
  unint64_t v75;
  unint64_t v77;
  unint64_t v79;
  unint64_t v80;
  unint64_t v82;
  unint64_t v83;
  unint64_t v85;
  unint64_t v86;
  unint64_t v88;
  unint64_t v89;
  unint64_t v91;
  unint64_t v92;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  int *v98;
  unint64_t v99;
  int v101;
  int v102;
  uint64_t v103;
  unint64_t v104;
  int *v106;
  int v107;
  unint64_t v108;
  int *v110;
  int v111;
  unint64_t v112;
  int *v114;
  int v115;
  unint64_t v116;
  int *v118;
  int v119;
  unint64_t v120;
  int *v122;
  int v123;
  unint64_t v124;
  int v126;
  uint64_t v127;
  unint64_t v128;
  unsigned int *v130;
  unint64_t v131;
  unsigned int v133;
  unsigned int *v134;
  unsigned int v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v139;
  unint64_t v140;
  unint64_t v142;
  unint64_t v143;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v149;
  unint64_t v150;
  unint64_t v152;
  unint64_t v154;
  unint64_t v155;
  int *v157;
  unint64_t v158;
  int v160;
  uint64_t v161;
  char v162;
  unint64_t v163;
  unint64_t v165;
  unint64_t v166;
  unint64_t v168;
  unint64_t v170;
  unint64_t v171;
  unint64_t v173;
  unint64_t v174;
  unint64_t v176;
  unint64_t v177;
  unint64_t v179;
  unint64_t v180;
  unint64_t v182;
  unint64_t v183;
  uint64_t v185;
  char v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unsigned int *v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  int *v196;
  int v197;
  unint64_t v198;
  unint64_t v200;
  unint64_t v201;
  unint64_t v203;
  unint64_t v205;
  unint64_t v206;
  uint64_t v208;
  unint64_t v209;
  unsigned int *v211;
  unint64_t v212;
  unsigned int v214;
  int v215;
  uint64_t v216;
  unint64_t v217;
  unsigned int *v219;
  unsigned int v220;
  unint64_t v221;
  int *v223;
  int v224;
  unint64_t v225;
  int *v227;
  int v228;
  unint64_t v229;
  int *v231;
  int v232;
  unint64_t v233;
  unsigned int *v235;
  unsigned int v236;
  unint64_t v237;
  unsigned int *v239;
  unint64_t v240;
  unsigned int v242;
  uint64_t *v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  unint64_t v247;
  unsigned int *v249;
  unint64_t v250;
  uint64_t v252;
  unsigned int *v253;
  unint64_t v254;
  unsigned int *v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  unint64_t v263;
  unsigned __int8 *v264;
  unsigned int v265;
  unint64_t v266;
  unint64_t v268;
  unint64_t v269;
  unint64_t v271;
  unint64_t v273;
  unint64_t v274;
  unint64_t v276;
  unint64_t v277;
  unint64_t v279;
  unint64_t v280;
  unint64_t v282;
  unint64_t v283;
  unint64_t v285;
  unint64_t v286;
  char v288;
  unint64_t v289;
  unsigned int *v291;
  unint64_t v292;
  uint64_t v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  char v305;
  unint64_t v306;
  uint64_t v307;
  unint64_t v308;
  unint64_t v310;
  float v311;
  unint64_t v312;
  unint64_t v314;
  unint64_t v315;
  float *v317;
  float v318;
  unint64_t v319;
  float *v321;
  float v322;
  unint64_t v323;
  float *v325;
  unint64_t v326;
  float v328;
  float v329;
  char v330;
  unint64_t v331;
  unsigned int *v333;
  uint64_t v334;
  unint64_t v335;
  char v336;
  unint64_t v337;
  uint64_t v338;
  unint64_t v339;
  unint64_t v341;
  unint64_t v342;
  char v344;
  unint64_t v345;
  uint64_t v346;
  unint64_t v347;
  unint64_t v349;
  unint64_t v350;
  unint64_t v352;
  unint64_t v353;
  unsigned int *v355;
  uint64_t v356;
  uint64_t v357;
  char v358;
  unint64_t v359;
  uint64_t v360;
  unint64_t v361;
  int *v363;
  unint64_t v364;
  int v366;
  uint64_t v367;
  uint64_t v368;
  char v369;
  unint64_t v370;
  unint64_t v372;
  unint64_t v373;
  char v375;
  unint64_t v376;
  unint64_t v378;
  unint64_t v379;
  char v381;
  unint64_t v382;
  unint64_t v384;
  unint64_t v385;
  BOOL v386;
  unint64_t v387;
  BOOL v388;
  unint64_t v389;
  unint64_t v390;
  unint64_t v391;
  unint64_t v393;
  unint64_t v394;
  uint64_t v396;
  unint64_t v397;
  uint64_t v398;
  unint64_t v399;
  unsigned int *v401;
  unint64_t v402;
  unsigned int v404;
  int v405;
  uint64_t v406;
  unint64_t v407;
  int *v409;
  int v410;
  unint64_t v411;
  int *v413;
  int v414;
  unint64_t v415;
  int *v417;
  int v418;
  unint64_t v419;
  int *v421;
  int v422;
  unint64_t v423;
  int *v425;
  unint64_t v426;
  int v428;
  int v429;
  unint64_t v430;
  uint64_t v431;
  unint64_t v432;
  unint64_t v434;
  unint64_t v435;
  float *v437;
  float v438;
  unint64_t v439;
  unint64_t v441;
  unint64_t v442;
  unint64_t v444;
  unint64_t v446;
  unint64_t v447;
  unint64_t v449;
  unint64_t v450;
  uint64_t v452;
  unint64_t v453;
  uint64_t v454;
  unint64_t v455;
  unint64_t v457;
  unint64_t v458;
  unint64_t v460;
  unint64_t v461;
  unsigned int *v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  unint64_t v467;
  unint64_t v469;
  unint64_t v470;
  char v472;
  uint64_t v473;
  unint64_t v474;
  unint64_t v476;
  unint64_t v477;
  float *v479;
  float v480;
  unint64_t v481;
  float *v483;
  unint64_t v484;
  float v486;
  float v487;
  unint64_t v488;
  unint64_t v490;
  unint64_t v491;
  float *v493;
  float v494;
  unint64_t v495;
  uint64_t v496;
  unint64_t v497;
  unsigned int *v499;
  unint64_t v500;
  uint64_t v502;
  unsigned int *v503;
  unint64_t v504;
  unsigned int *v506;
  uint64_t v507;
  uint64_t v508;
  unint64_t v509;
  unint64_t v510;
  unsigned int *v512;
  unint64_t v513;
  unsigned int v515;
  int v516;
  uint64_t v517;
  unint64_t v518;
  int *v520;
  int v521;
  unint64_t v522;
  int *v524;
  int v525;
  unint64_t v526;
  int *v528;
  int v529;
  unint64_t v530;
  int *v532;
  int v533;
  unint64_t v534;
  unsigned int *v536;
  unsigned int v537;
  unint64_t v538;
  unsigned int *v540;
  unint64_t v541;
  unsigned int v543;
  uint64_t *v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  unint64_t v549;
  uint64_t v550;
  unint64_t v551;
  unint64_t v553;
  uint64_t v554;
  unint64_t v555;
  uint64_t v556;
  unint64_t v557;
  uint64_t v558;
  unint64_t v559;
  unint64_t v561;
  unint64_t v562;
  float *v564;
  float v565;
  unint64_t v566;
  float *v568;
  float v569;
  unint64_t v570;
  float *v572;
  unint64_t v573;
  float v575;
  float v576;
  unint64_t v577;
  unsigned int *v579;
  uint64_t v580;
  unint64_t v581;
  int *v582;
  int v583;
  unint64_t v584;
  uint64_t v585;
  unint64_t v586;
  unint64_t v588;
  unint64_t v589;
  unint64_t v591;
  unint64_t v593;
  unint64_t v594;
  unint64_t v596;
  unsigned int *v598;
  uint64_t v599;
  unint64_t v600;
  uint64_t v601;
  unint64_t v602;
  unint64_t v604;
  unint64_t v605;
  float *v607;
  float v608;
  unint64_t v609;
  float *v611;
  unint64_t v612;
  float v614;
  float v615;
  char v616;
  char v617;
  unint64_t v618;
  uint64_t v619;
  unint64_t v620;
  unint64_t v622;
  unint64_t v623;
  unint64_t v625;
  unint64_t v627;
  unint64_t v628;
  unint64_t v630;
  unsigned int *v632;
  unint64_t v633;
  uint64_t v635;
  unint64_t v636;
  unint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  WTF::StringImpl *v645;
  uint64_t v646;
  unint64_t v647;
  uint64_t v648;
  unint64_t v649;
  unsigned int *v651;
  unint64_t v652;
  uint64_t v653;
  unsigned int v654;
  uint64_t v655;
  char v656;
  unint64_t v657;
  unint64_t v659;
  unint64_t v660;
  unint64_t v662;
  unint64_t v664;
  unint64_t v665;
  unint64_t v667;
  unint64_t v668;
  unint64_t v670;
  unint64_t v672;
  unint64_t v673;
  unint64_t v675;
  unint64_t v677;
  unint64_t v678;
  unint64_t v680;
  unint64_t v681;
  uint64_t v683;
  unint64_t v684;
  uint64_t v685;
  unint64_t v686;
  unint64_t v688;
  unint64_t v689;
  unint64_t v691;
  unint64_t v693;
  unint64_t v694;
  unint64_t v696;
  unint64_t v698;
  unint64_t v699;
  unint64_t v701;
  unint64_t v703;
  unint64_t v704;
  unint64_t v706;
  unint64_t v707;
  unint64_t v709;
  unint64_t v710;
  unint64_t v712;
  unint64_t v713;
  unint64_t v715;
  uint64_t v716;
  unint64_t v717;
  unint64_t v719;
  unint64_t v720;
  unint64_t v722;
  unint64_t v724;
  unint64_t v725;
  unint64_t v727;
  unsigned int *v729;
  unint64_t v730;
  unsigned int v732;
  int v733;
  uint64_t v734;
  unint64_t v735;
  unsigned int *v737;
  unsigned int v738;
  unint64_t v739;
  int *v741;
  int v742;
  unint64_t v743;
  int *v745;
  int v746;
  unint64_t v747;
  int *v749;
  int v750;
  unint64_t v751;
  int *v753;
  unint64_t v754;
  int v756;
  uint64_t v757;
  unint64_t v758;
  unsigned int *v760;
  unint64_t v761;
  unsigned int v763;
  int v764;
  uint64_t v765;
  unint64_t v766;
  int *v768;
  int v769;
  unint64_t v770;
  int *v772;
  int v773;
  unint64_t v774;
  int *v776;
  int v777;
  unint64_t v778;
  int *v780;
  int v781;
  unint64_t v782;
  unsigned int *v784;
  unsigned int v785;
  unint64_t v786;
  int *v788;
  unint64_t v789;
  int v791;
  uint64_t *v792;
  uint64_t v793;
  uint64_t v794;
  unint64_t v795;
  unint64_t v797;
  unint64_t v798;
  unint64_t v800;
  unint64_t v802;
  unint64_t v803;
  unint64_t v805;
  unint64_t v806;
  uint64_t v808;
  uint64_t v809;
  unint64_t v810;
  uint64_t v811;
  unint64_t v812;
  unsigned int *v814;
  unint64_t v815;
  unsigned int v817;
  int v818;
  uint64_t v819;
  unint64_t v820;
  unsigned int *v822;
  unsigned int v823;
  unint64_t v824;
  int *v826;
  int v827;
  unint64_t v828;
  int *v830;
  int v831;
  unint64_t v832;
  int *v834;
  int v835;
  unint64_t v836;
  int *v838;
  unint64_t v839;
  int v841;
  int v842;
  uint64_t v843;
  char v844;
  WTF::StringImpl *v845;
  WTF::StringImpl *v846;
  unint64_t v847;
  unint64_t v848;
  unint64_t v849;
  unint64_t v850;
  unint64_t v851;
  unint64_t v852;
  unint64_t v853;
  unint64_t v854;
  unint64_t v856;
  unint64_t v857;
  unint64_t v859;
  unint64_t v861;
  unint64_t v862;
  unint64_t v864;
  unint64_t v865;
  unint64_t v867;
  unint64_t v868;
  unint64_t v870;
  unint64_t v871;
  unint64_t v873;
  unint64_t v874;
  unint64_t v876;
  uint64_t v877;
  unint64_t v878;
  unint64_t v879;
  unint64_t v880;
  unint64_t v881;
  float *v883;
  unint64_t v884;
  float v886;
  unint64_t v887;
  unint64_t v889;
  unint64_t v891;
  unint64_t v892;
  unint64_t v894;
  int v896;
  uint64_t v897;
  unint64_t v898;
  unint64_t v900;
  unint64_t v901;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  unint64_t v906;
  unint64_t v908;
  unint64_t v909;
  unint64_t v911;
  unint64_t v913;
  unint64_t v914;
  unint64_t v916;
  unint64_t v917;
  unint64_t v919;
  unint64_t v920;
  unint64_t v922;
  unint64_t v923;
  unint64_t v925;
  unint64_t v926;
  unint64_t v928;
  unint64_t v929;
  unint64_t v931;
  unint64_t v932;
  unint64_t v934;
  unsigned int *v936;
  unint64_t v937;
  unsigned int v939;
  int v940;
  uint64_t v941;
  unint64_t v942;
  int *v944;
  int v945;
  unint64_t v946;
  int *v948;
  int v949;
  unint64_t v950;
  int *v952;
  int v953;
  unint64_t v954;
  int *v956;
  int v957;
  unint64_t v958;
  int *v960;
  int v961;
  unint64_t v962;
  int *v964;
  unint64_t v965;
  int v967;
  int *v968;
  int v969;
  uint64_t v970;
  uint64_t v971;
  unint64_t v972;
  unsigned int *v974;
  unint64_t v975;
  unsigned int v977;
  int v978;
  uint64_t v979;
  unint64_t v980;
  unsigned int *v982;
  unsigned int v983;
  unint64_t v984;
  int *v986;
  int v987;
  unint64_t v988;
  int *v990;
  int v991;
  unint64_t v992;
  int *v994;
  int v995;
  unint64_t v996;
  int *v998;
  int v999;
  unint64_t v1000;
  int *v1002;
  unint64_t v1003;
  int v1005;
  uint64_t *v1006;
  uint64_t v1007;
  unint64_t v1008;
  unsigned int *v1010;
  unint64_t v1011;
  unsigned int v1013;
  int v1014;
  uint64_t v1015;
  unint64_t v1016;
  int *v1018;
  int v1019;
  unint64_t v1020;
  int *v1022;
  int v1023;
  unint64_t v1024;
  int *v1026;
  int v1027;
  unint64_t v1028;
  int *v1030;
  int v1031;
  unint64_t v1032;
  int *v1034;
  int v1035;
  unint64_t v1036;
  int v1038;
  uint64_t v1039;
  unint64_t v1040;
  unsigned int v1042;
  uint64_t v1043;
  unint64_t v1044;
  int *v1046;
  unint64_t v1047;
  int v1049;
  uint64_t *v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  char v1054;
  unint64_t v1055;
  unint64_t v1056;
  unint64_t v1057;
  unint64_t v1059;
  int v1061;
  uint64_t v1062;
  unint64_t v1063;
  unint64_t v1065;
  unint64_t v1066;
  uint64_t v1068;
  char v1069;
  unint64_t v1070;
  unint64_t v1071;
  unint64_t v1072;
  unint64_t v1073;
  unint64_t v1074;
  unint64_t v1075;
  unint64_t v1076;
  unint64_t v1077;
  unint64_t v1078;
  int v1079;
  uint64_t v1080;
  float v1081;
  int v1082;
  uint64_t v1083;
  unint64_t v1084;
  uint64_t v1085;
  unint64_t v1086;
  char v1088;
  unint64_t v1089;
  unint64_t v1091;
  unint64_t v1092;
  char v1094;
  unint64_t v1095;
  void **v1097;
  unint64_t v1098;
  void *v1100;
  char v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  unint64_t v1106;
  uint64_t v1107;
  unint64_t v1108;
  unint64_t v1110;
  unint64_t v1111;
  unint64_t v1113;
  unint64_t v1114;
  unsigned int *v1116;
  uint64_t v1117;
  uint64_t v1118;
  unint64_t v1119;
  unint64_t v1121;
  unint64_t v1122;
  unint64_t v1124;
  unint64_t v1126;
  unint64_t v1127;
  unint64_t v1129;
  unint64_t v1130;
  unint64_t v1132;
  unint64_t v1134;
  unint64_t v1135;
  unint64_t v1137;
  unint64_t v1139;
  unint64_t v1140;
  unint64_t v1142;
  unint64_t v1144;
  unint64_t v1145;
  unint64_t v1147;
  unint64_t v1148;
  unint64_t v1150;
  unint64_t v1151;
  unint64_t v1153;
  unint64_t v1155;
  unint64_t v1156;
  unint64_t v1158;
  unint64_t v1160;
  unint64_t v1161;
  unint64_t v1163;
  unint64_t v1164;
  void *v1166;
  unint64_t v1167;
  int *v1169;
  int v1170;
  unint64_t v1171;
  char *v1172;
  unint64_t v1173;
  char *v1174;
  int v1175;
  WTF::StringImpl *v1176;
  unint64_t v1177;
  unsigned int *v1179;
  unint64_t v1180;
  unsigned int v1182;
  int v1183;
  uint64_t v1184;
  unint64_t v1185;
  int *v1187;
  int v1188;
  unint64_t v1189;
  int *v1191;
  int v1192;
  unint64_t v1193;
  int *v1195;
  int v1196;
  unint64_t v1197;
  int *v1199;
  int v1200;
  unint64_t v1201;
  int *v1203;
  int v1204;
  unint64_t v1205;
  unsigned int v1207;
  uint64_t v1208;
  unint64_t v1209;
  unsigned int *v1211;
  unint64_t v1212;
  unsigned int v1214;
  uint64_t *v1215;
  uint64_t v1216;
  int v1217;
  uint64_t v1218;
  unint64_t v1219;
  unint64_t v1221;
  unint64_t v1222;
  unint64_t v1224;
  unint64_t v1226;
  unint64_t v1227;
  unint64_t v1229;
  unint64_t v1230;
  unint64_t v1232;
  unint64_t v1233;
  unint64_t v1235;
  unint64_t v1236;
  unint64_t v1238;
  unint64_t v1239;
  unint64_t v1241;
  unint64_t v1242;
  unint64_t v1244;
  unint64_t v1245;
  uint64_t v1247;
  uint64_t v1248;
  unint64_t v1249;
  uint64_t v1250;
  unint64_t v1251;
  unint64_t v1253;
  unint64_t v1254;
  unint64_t v1256;
  unint64_t v1258;
  unint64_t v1259;
  unint64_t v1261;
  unsigned int *v1263;
  unint64_t v1264;
  unsigned int v1266;
  int v1267;
  uint64_t v1268;
  unint64_t v1269;
  int *v1271;
  int v1272;
  unint64_t v1273;
  int *v1275;
  int v1276;
  unint64_t v1277;
  int *v1279;
  int v1280;
  unint64_t v1281;
  int *v1283;
  int v1284;
  unint64_t v1285;
  int *v1287;
  int v1288;
  unint64_t v1289;
  int v1291;
  uint64_t v1292;
  unint64_t v1293;
  unsigned int v1295;
  uint64_t v1296;
  unint64_t v1297;
  unsigned int *v1299;
  unint64_t v1300;
  unsigned int v1302;
  uint64_t *v1303;
  uint64_t v1304;
  unint64_t v1305;
  unint64_t v1307;
  unint64_t v1308;
  unint64_t v1310;
  unint64_t v1312;
  unint64_t v1313;
  unint64_t v1315;
  unint64_t v1316;
  unint64_t v1318;
  uint64_t v1319;
  uint64_t v1320;
  uint64_t v1321;
  uint64_t v1322;
  uint64_t v1323;
  uint64_t v1324;
  char v1325;
  unint64_t v1326;
  unint64_t v1327;
  unint64_t v1328;
  unint64_t v1330;
  unint64_t v1332;
  unint64_t v1333;
  unint64_t v1335;
  unint64_t v1336;
  unint64_t v1338;
  unint64_t v1339;
  void (*v1341)(void);
  uint64_t v1342;
  void *v1343;
  char v1344;
  uint64_t v1345;
  char v1346;
  uint64_t v1347;
  uint64_t v1348;
  void *v1349;
  uint64_t v1350;
  uint64_t v1351;
  uint64_t v1352;
  char v1353;
  unint64_t v1354;
  uint64_t v1355;
  uint64_t v1356;
  uint64_t v1357;
  uint64_t v1358;
  uint64_t v1359;
  uint64_t v1360;
  uint64_t v1361;
  uint64_t v1362;
  uint64_t v1363;
  uint64_t v1364;
  uint64_t v1365;
  char v1366;
  uint64_t v1367;
  const void *v1368;
  unint64_t v1369;
  uint64_t v1370;
  uint64_t v1371;
  uint64_t v1372;
  uint64_t v1373;
  uint64_t v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  uint64_t v1378;
  uint64_t v1379;
  uint64_t v1380;
  uint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  uint64_t v1384;
  uint64_t v1385;
  uint64_t v1386;
  uint64_t v1387;
  uint64_t v1388;
  unint64_t v1389;
  unint64_t v1390;
  unint64_t v1391;
  unint64_t v1393;
  unint64_t v1395;
  unint64_t v1396;
  unint64_t v1398;
  unint64_t v1399;
  unint64_t v1401;
  unint64_t v1402;
  unint64_t v1403;
  unint64_t v1404;
  unint64_t v1406;
  unint64_t v1407;
  unint64_t v1409;
  unint64_t v1410;
  unint64_t v1412;
  unint64_t v1413;
  unint64_t v1415;
  unint64_t v1416;
  uint64_t v1418;
  uint64_t v1419;
  uint64_t v1420;
  unsigned __int8 ***v1421;
  uint64_t v1422;
  uint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  uint64_t v1426;
  uint64_t v1427;
  uint64_t v1428;
  uint64_t v1429;
  uint64_t v1430;
  uint64_t v1431;
  uint64_t v1432;
  uint64_t v1433;
  uint64_t v1434;
  uint64_t v1435;
  uint64_t v1436;
  uint64_t v1437;
  uint64_t v1438;
  uint64_t v1439;
  uint64_t v1440;
  uint64_t v1441;
  uint64_t v1442;
  char v1443;
  uint64_t v1444;
  uint64_t v1445;
  unint64_t v1446;
  unsigned __int8 *v1447;
  uint64_t v1448;
  uint64_t v1449;
  char v1450;
  unint64_t v1451;
  uint64_t v1452;
  unint64_t v1453;
  unsigned int *v1454;
  unint64_t v1455;
  uint64_t v1456;
  unsigned int *v1457;
  unint64_t v1458;
  unsigned int *v1460;
  uint64_t v1461;
  uint64_t v1462;
  unint64_t v1463;
  int v1464;
  char v1465;
  uint64_t v1466;
  uint64_t v1467;
  unint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  unint64_t v1472;
  uint64_t v1473;
  uint64_t v1474;
  uint64_t v1475;
  uint64_t v1476;
  unint64_t v1477;
  uint64_t v1478;
  uint64_t v1479;
  uint64_t v1480;
  uint64_t v1481;
  uint64_t v1482;
  uint64_t v1483;
  unint64_t v1484;
  uint64_t v1485;
  uint64_t v1486;
  uint64_t v1487;
  uint64_t v1488;
  uint64_t v1489;
  uint64_t v1490;
  unint64_t v1491;
  uint64_t v1492;
  uint64_t v1493;
  uint64_t v1494;
  unint64_t v1495;
  uint64_t v1496;
  uint64_t v1497;
  uint64_t v1498;
  uint64_t v1499;
  uint64_t v1500;
  uint64_t v1501;
  unint64_t v1502;
  uint64_t v1503;
  uint64_t v1504;
  unint64_t v1505;
  uint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  uint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  unint64_t v1512;
  uint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  unint64_t v1516;
  uint64_t v1517;
  uint64_t v1518;
  uint64_t v1519;
  unint64_t v1520;
  uint64_t v1521;
  uint64_t v1522;
  uint64_t v1523;
  unint64_t v1524;
  uint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  uint64_t v1529;
  uint64_t v1530;
  unint64_t v1531;
  uint64_t v1532;
  uint64_t v1533;
  uint64_t v1534;
  uint64_t v1535;
  uint64_t v1536;
  uint64_t v1537;
  uint64_t v1538;
  unint64_t v1539;
  uint64_t v1540;
  uint64_t v1541;
  uint64_t v1542;
  unint64_t v1543;
  uint64_t v1544;
  uint64_t v1545;
  uint64_t v1546;
  unint64_t v1547;
  uint64_t v1548;
  uint64_t v1549;
  uint64_t v1550;
  unint64_t v1551;
  uint64_t v1552;
  uint64_t v1553;
  uint64_t v1554;
  unint64_t v1555;
  uint64_t v1556;
  uint64_t v1557;
  uint64_t v1558;
  unint64_t v1559;
  uint64_t v1560;
  uint64_t v1561;
  uint64_t v1562;
  unint64_t v1563;
  uint64_t v1564;
  uint64_t v1565;
  uint64_t v1566;
  uint64_t v1567;
  uint64_t v1568;
  uint64_t v1569;
  uint64_t v1570;
  uint64_t v1571;
  uint64_t v1572;
  uint64_t v1573;
  uint64_t v1574;
  uint64_t v1575;
  uint64_t v1576;
  uint64_t v1577;
  uint64_t v1578;
  uint64_t v1579;
  uint64_t v1580;
  unint64_t v1581;
  char v1582;
  char v1583;
  unint64_t v1584;
  unsigned int *v1585;
  unsigned int v1586;
  uint64_t v1587;
  uint64_t BufferParameteri;
  unint64_t v1589;
  uint64_t v1590;
  uint64_t v1591;
  uint64_t v1592;
  unint64_t v1593;
  uint64_t v1594;
  uint64_t v1595;
  uint64_t v1596;
  unint64_t v1597;
  char v1598;
  char v1599;
  unint64_t v1600;
  uint64_t v1601;
  unint64_t v1602;
  void **v1603;
  unint64_t v1604;
  void *v1605;
  unint64_t v1606;
  unint64_t v1607;
  unsigned int **v1608;
  unsigned int *v1609;
  unsigned int v1610;
  uint64_t v1611;
  uint64_t Synci;
  unint64_t v1613;
  char v1614;
  char v1615;
  unint64_t v1616;
  unint64_t v1617;
  uint64_t v1618;
  unint64_t v1619;
  unsigned int *v1620;
  unint64_t v1621;
  WebCore::GraphicsContextGL *v1622;
  unint64_t v1623;
  unsigned int *v1624;
  unsigned int v1625;
  unsigned int v1626;
  unsigned int v1627;
  int v1628;
  unint64_t v1629;
  unsigned int *v1630;
  unsigned int v1631;
  uint64_t v1632;
  WTF::StringImpl *v1633;
  unint64_t v1634;
  char v1635;
  char v1636;
  unint64_t v1637;
  void *v1638;
  uint64_t v1639;
  uint64_t v1640;
  unsigned int *v1641;
  unsigned int v1642;
  uint64_t v1643;
  uint64_t v1644;
  WTF::StringImpl **v1645;
  unint64_t v1646;
  char v1647;
  char v1648;
  unint64_t v1649;
  uint64_t v1650;
  int v1651;
  unsigned int *v1652;
  unsigned int v1653;
  uint64_t v1654;
  unint64_t v1655;
  char v1656;
  char v1657;
  unint64_t v1658;
  int v1659;
  char v1660;
  int v1661;
  unsigned int *v1662;
  unsigned int v1663;
  unint64_t v1664;
  char v1665;
  char v1666;
  unint64_t v1667;
  char v1668;
  unsigned int *v1669;
  unsigned int v1670;
  unint64_t v1671;
  char v1672;
  char v1673;
  unint64_t v1674;
  char v1675;
  unsigned int *v1676;
  unsigned int v1677;
  unint64_t v1678;
  char v1679;
  char v1680;
  unint64_t v1681;
  int v1682;
  char v1683;
  int v1684;
  unsigned int *v1685;
  unsigned int v1686;
  unint64_t v1687;
  char v1688;
  char v1689;
  unint64_t v1690;
  unsigned int *v1691;
  unsigned int v1692;
  _BOOL8 v1693;
  unint64_t v1694;
  char v1695;
  char v1696;
  unint64_t v1697;
  unsigned int *v1698;
  unsigned int v1699;
  uint64_t v1700;
  unint64_t v1701;
  _BYTE *v1702;
  unint64_t v1703;
  char v1704;
  char v1705;
  unint64_t v1706;
  uint64_t v1707;
  unsigned int *v1708;
  unsigned int v1709;
  uint64_t v1710;
  uint64_t FramebufferAttachmentParameteri;
  unsigned int **v1712;
  unint64_t v1713;
  char v1714;
  char v1715;
  WTF::StringImpl *v1716;
  unint64_t v1717;
  uint64_t v1718;
  unint64_t v1719;
  int *v1720;
  unint64_t v1721;
  int v1722;
  unint64_t v1723;
  int *v1724;
  int v1725;
  int v1726;
  unsigned int v1727;
  BOOL v1728;
  unsigned int *v1729;
  unsigned int v1730;
  uint64_t v1731;
  WTF::StringImpl **v1732;
  uint64_t v1733;
  unint64_t v1734;
  char v1735;
  char v1736;
  unint64_t v1737;
  unsigned int *v1738;
  unsigned int v1739;
  unsigned int v1740;
  _BYTE *v1741;
  unint64_t v1742;
  char v1743;
  char v1744;
  unint64_t v1745;
  uint64_t v1746;
  int v1747;
  unsigned int *v1748;
  unsigned int v1749;
  uint64_t v1750;
  unint64_t v1751;
  char v1752;
  char v1753;
  unint64_t v1754;
  char v1755;
  unsigned int *v1756;
  unsigned int v1757;
  unint64_t v1758;
  char v1759;
  char v1760;
  unint64_t v1761;
  unsigned int *v1762;
  unsigned int v1763;
  uint64_t v1764;
  unint64_t v1765;
  _BYTE *v1766;
  unint64_t v1767;
  char v1768;
  char v1769;
  unint64_t v1770;
  char v1771;
  unsigned int *v1772;
  unsigned int v1773;
  uint64_t Integer64;
  unint64_t v1775;
  char v1776;
  char v1777;
  unint64_t v1778;
  unsigned int *v1779;
  unsigned int v1780;
  unsigned int v1781;
  _BYTE *v1782;
  unint64_t v1783;
  char v1784;
  char v1785;
  unint64_t v1786;
  char v1787;
  unsigned int *v1788;
  unsigned int v1789;
  unint64_t v1790;
  char v1791;
  char v1792;
  unint64_t v1793;
  uint64_t v1794;
  char v1795;
  unint64_t v1796;
  unsigned int *v1797;
  unsigned int v1798;
  uint64_t v1799;
  uint64_t v1800;
  unint64_t v1801;
  char v1802;
  char v1803;
  unint64_t v1804;
  unsigned int *v1805;
  unsigned int v1806;
  unint64_t v1807;
  char v1808;
  char v1809;
  unint64_t v1810;
  unsigned __int16 v1811;
  unsigned __int16 v1812;
  unsigned int *v1813;
  unsigned int v1814;
  uint64_t v1815;
  unint64_t v1816;
  char v1817;
  char v1818;
  unint64_t v1819;
  unsigned __int16 v1820;
  uint64_t v1821;
  uint64_t v1822;
  uint64_t v1823;
  unint64_t v1824;
  char v1825;
  unint64_t v1826;
  uint64_t v1827;
  unint64_t v1828;
  unsigned int *v1829;
  unint64_t v1830;
  unsigned int v1831;
  unint64_t v1832;
  unsigned int *v1833;
  unsigned int v1834;
  unint64_t v1835;
  unsigned int *v1836;
  unsigned int v1837;
  unint64_t v1838;
  unsigned int *v1839;
  unsigned int v1840;
  unint64_t v1841;
  unint64_t v1843;
  unsigned int v1844;
  unsigned int v1845;
  BOOL v1846;
  unsigned int v1847;
  BOOL v1848;
  int v1849;
  unsigned int *v1850;
  unsigned int v1851;
  uint64_t v1852;
  uint64_t v1853;
  unint64_t v1854;
  char v1855;
  char v1856;
  WTF::StringImpl *v1857;
  unint64_t v1858;
  uint64_t v1859;
  unint64_t v1860;
  int *v1861;
  unint64_t v1862;
  int v1863;
  uint64_t v1864;
  unint64_t v1865;
  uint64_t *v1866;
  uint64_t v1867;
  unsigned int *v1868;
  unsigned int v1869;
  uint64_t v1870;
  uint64_t v1871;
  unint64_t v1872;
  char v1873;
  char v1874;
  unint64_t v1875;
  int *v1876;
  unint64_t v1877;
  int v1878;
  uint64_t *v1879;
  unint64_t v1880;
  unint64_t v1881;
  uint64_t v1882;
  WTF *v1883;
  unsigned int *v1884;
  unsigned int v1885;
  uint64_t v1886;
  unint64_t v1887;
  char v1888;
  char v1889;
  unint64_t v1890;
  char v1891;
  unsigned int *v1892;
  unsigned int v1893;
  unint64_t v1894;
  char v1895;
  char v1896;
  unint64_t v1897;
  char v1898;
  unsigned int *v1899;
  unsigned int v1900;
  unint64_t v1901;
  char v1902;
  char v1903;
  unint64_t v1904;
  unsigned int *v1905;
  unsigned int v1906;
  unint64_t v1907;
  _BYTE *v1908;
  unint64_t v1909;
  char v1910;
  char v1911;
  WTF::StringImpl *v1912;
  unsigned int *v1913;
  unsigned int v1914;
  uint64_t v1915;
  uint64_t v1916;
  unint64_t v1917;
  char v1918;
  char v1919;
  unint64_t v1920;
  uint64_t v1921;
  int v1922;
  unsigned int *v1923;
  unsigned int v1924;
  unint64_t v1925;
  char v1926;
  char v1927;
  unint64_t v1928;
  uint64_t v1929;
  char v1930;
  unint64_t v1931;
  unsigned int *v1932;
  unsigned int v1933;
  uint64_t v1934;
  unint64_t v1935;
  char v1936;
  char v1937;
  unint64_t v1938;
  uint64_t v1939;
  int v1940;
  unsigned int *v1941;
  unsigned int v1942;
  unint64_t v1943;
  char v1944;
  char v1945;
  unint64_t v1946;
  uint64_t v1947;
  int v1948;
  unsigned int *v1949;
  unsigned int v1950;
  unint64_t v1951;
  char v1952;
  char v1953;
  unint64_t v1954;
  unsigned int *v1955;
  unsigned int v1956;
  uint64_t v1957;
  unint64_t v1958;
  char v1959;
  char v1960;
  unint64_t v1961;
  unsigned int *v1962;
  unsigned int v1963;
  unsigned int v1964;
  _BYTE *v1965;
  unint64_t v1966;
  char v1967;
  char v1968;
  unint64_t v1969;
  unsigned int *v1970;
  unsigned int v1971;
  unint64_t v1972;
  char v1973;
  char v1974;
  unint64_t v1975;
  uint64_t v1976;
  int v1977;
  unsigned int *v1978;
  unsigned int v1979;
  unint64_t v1980;
  char v1981;
  char v1982;
  WTF::StringImpl *v1983;
  unsigned int *v1984;
  unsigned int v1985;
  uint64_t v1986;
  uint64_t v1987;
  unint64_t v1988;
  char v1989;
  char v1990;
  unint64_t v1991;
  char v1992;
  unsigned int *v1993;
  unsigned int v1994;
  unint64_t v1995;
  char v1996;
  char v1997;
  unint64_t v1998;
  uint64_t v1999;
  int v2000;
  unsigned int *v2001;
  unsigned int v2002;
  unint64_t v2003;
  char v2004;
  char v2005;
  unint64_t v2006;
  uint64_t v2007;
  int v2008;
  unsigned int *v2009;
  unsigned int v2010;
  uint64_t v2011;
  uint64_t v2012;
  uint64_t v2013;
  uint64_t v2014;
  char v2015;
  unint64_t v2016;
  char v2017;
  uint64_t v2018;
  unsigned int *v2019;
  unsigned int v2020;
  uint64_t v2021;
  WTF::StringImpl *v2022;
  void (*v2023)(void);
  void *v2024;
  WTF *v2025;
  uint64_t v2026;
  uint64_t v2027;
  uint64_t v2028;
  int isBuffer;
  uint64_t Programi;
  _BOOL8 v2031;
  uint64_t v2032;
  WTF::StringImpl *v2033;
  WTF::StringImpl *v2034;
  uint64_t AttribLocation;
  WTF::StringImpl *v2036;
  WTF::StringImpl *v2037;
  uint64_t UniformLocation;
  uint64_t v2039;
  uint64_t v2040;
  uint64_t v2041;
  uint64_t v2042;
  uint64_t v2043;
  uint64_t v2044;
  unint64_t v2045;
  uint64_t v2046;
  uint64_t v2047;
  uint64_t v2048;
  unint64_t v2049;
  uint64_t v2050;
  uint64_t v2051;
  uint64_t v2052;
  uint64_t v2053;
  unint64_t v2054;
  uint64_t v2055;
  uint64_t v2056;
  uint64_t v2057;
  uint64_t v2058;
  uint64_t v2059;
  uint64_t v2060;
  uint64_t v2061;
  uint64_t v2062;
  uint64_t v2063;
  uint64_t v2064;
  uint64_t v2065;
  uint64_t v2066;
  uint64_t v2067;
  uint64_t v2068;
  uint64_t v2069;
  uint64_t v2070;
  uint64_t v2071;
  uint64_t v2072;
  uint64_t v2073;
  uint64_t v2074;
  uint64_t v2075;
  uint64_t v2076;
  uint64_t v2077;
  uint64_t v2078;
  uint64_t v2079;
  uint64_t v2080;
  uint64_t v2081;
  uint64_t v2082;
  uint64_t v2083;
  unint64_t v2084;
  char v2085;
  char v2086;
  WTF::StringImpl *v2087;
  unsigned int *v2088;
  unsigned int v2089;
  uint64_t v2090;
  unint64_t v2091;
  char v2092;
  char v2093;
  unint64_t v2094;
  uint64_t v2095;
  int v2096;
  unsigned int *v2097;
  unsigned int v2098;
  uint64_t v2099;
  unint64_t v2100;
  char v2101;
  char v2102;
  unint64_t v2103;
  int v2104;
  char v2105;
  int v2106;
  unsigned int *v2107;
  unsigned int v2108;
  unint64_t v2109;
  char v2110;
  char v2111;
  unint64_t v2112;
  uint64_t v2113;
  int v2114;
  unsigned int *v2115;
  unsigned int v2116;
  unint64_t v2117;
  char v2118;
  char v2119;
  unint64_t v2120;
  unint64_t v2121;
  char v2122;
  void *v2123;
  unsigned int *v2124;
  unsigned int v2125;
  uint64_t v2126;
  _BOOL8 v2127;
  unint64_t v2128;
  char v2129;
  char v2130;
  unint64_t v2131;
  int v2132;
  char v2133;
  int v2134;
  unsigned int *v2135;
  unsigned int v2136;
  unint64_t v2137;
  char v2138;
  char v2139;
  unint64_t v2140;
  uint64_t v2141;
  int v2142;
  unsigned int *v2143;
  unsigned int v2144;
  unint64_t v2145;
  char v2146;
  char v2147;
  unint64_t v2148;
  char v2149;
  unsigned int *v2150;
  unsigned int v2151;
  uint64_t Query;
  unint64_t v2153;
  char v2154;
  char v2155;
  unint64_t v2156;
  char *v2157;
  unint64_t v2158;
  char *v2159;
  WTF::StringImpl *v2160;
  int v2161;
  void *v2162;
  WTF::StringImpl *v2163;
  unsigned int *v2164;
  unsigned int v2165;
  uint64_t v2166;
  unint64_t v2167;
  char v2168;
  char v2169;
  unint64_t v2170;
  int v2171;
  char v2172;
  int v2173;
  unsigned int *v2174;
  unsigned int v2175;
  uint64_t v2176;
  unint64_t v2177;
  char v2178;
  char v2179;
  WTF::StringImpl *v2180;
  unsigned int *v2181;
  unsigned int v2182;
  uint64_t v2183;
  unint64_t v2184;
  char v2185;
  char v2186;
  unint64_t v2187;
  int v2188;
  char v2189;
  int v2190;
  unsigned int *v2191;
  unsigned int v2192;
  unint64_t v2193;
  char v2194;
  char v2195;
  unint64_t v2196;
  uint64_t v2197;
  int v2198;
  unsigned int *v2199;
  unsigned int v2200;
  unint64_t v2201;
  char v2202;
  char v2203;
  unint64_t v2204;
  char v2205;
  unsigned int *v2206;
  unsigned int v2207;
  uint64_t Integer64EXT;
  unint64_t v2209;
  char v2210;
  char v2211;
  unint64_t v2212;
  unsigned int *v2213;
  unsigned int v2214;
  unint64_t v2215;
  char v2216;
  char v2217;
  unint64_t v2218;
  unsigned int *v2219;
  unsigned int v2220;
  uint64_t v2221;
  unsigned int v2222;
  _BYTE *v2223;
  unint64_t v2224;
  char v2225;
  char v2226;
  unint64_t v2227;
  int v2228;
  char v2229;
  int v2230;
  unsigned int *v2231;
  unsigned int v2232;
  unint64_t v2233;
  char v2234;
  char v2235;
  unint64_t v2236;
  void **v2237;
  unint64_t v2238;
  unint64_t v2239;
  void *v2240;
  unsigned int *v2241;
  unsigned int v2242;
  unint64_t v2243;
  char v2244;
  char v2245;
  unint64_t v2246;
  unsigned int *v2247;
  unsigned int v2248;
  unint64_t v2249;
  _BYTE *v2250;
  unint64_t v2251;
  char v2252;
  char v2253;
  unint64_t v2254;
  char *v2255;
  WTF::StringImpl *v2256;
  int v2257;
  unint64_t v2258;
  char *v2259;
  unint64_t v2260;
  char *v2261;
  int v2262;
  unsigned int *v2263;
  unsigned int v2264;
  uint64_t v2265;
  unint64_t v2266;
  char v2267;
  char v2268;
  unint64_t v2269;
  int v2270;
  char v2271;
  int v2272;
  unsigned int *v2273;
  unsigned int v2274;
  unint64_t v2275;
  char v2276;
  char v2277;
  unint64_t v2278;
  char v2279;
  unsigned int *v2280;
  unsigned int v2281;
  unint64_t v2282;
  char v2283;
  char v2284;
  unint64_t v2285;
  uint64_t v2286;
  int v2287;
  unsigned int *v2288;
  unsigned int v2289;
  unint64_t v2290;
  char v2291;
  char v2292;
  unint64_t v2293;
  int v2294;
  char v2295;
  int v2296;
  unsigned int *v2297;
  unsigned int v2298;
  uint64_t v2299;
  unint64_t v2300;
  char v2301;
  char v2302;
  unint64_t v2303;
  uint64_t v2304;
  int v2305;
  unsigned int *v2306;
  unsigned int v2307;
  unint64_t v2308;
  char v2309;
  char v2310;
  unint64_t v2311;
  uint64_t v2312;
  int v2313;
  unsigned int *v2314;
  unsigned int v2315;
  uint64_t v2316;
  uint64_t v2317;
  uint64_t v2318;
  uint64_t v2319;
  uint64_t v2320;
  int isQuery;
  uint64_t QueryObjectiEXT;
  uint64_t QueryObjectui64EXT;
  _BOOL8 v2324;
  WTF::StringImpl *v2325;
  WTF::StringImpl *v2326;
  unint64_t v2327;
  uint64_t v2328;
  uint64_t v2329;
  uint64_t v2330;
  uint64_t v2331;
  uint64_t v2332;
  uint64_t v2333;
  void *v2334;
  WTF *v2335;
  void *v2336;
  void *v2337;
  WTF *v2338;
  void *v2339;
  WTF *v2340;
  uint64_t v2341;
  uint64_t v2342;
  uint64_t v2343;
  uint64_t v2344;
  uint64_t v2345;
  uint64_t v2346;
  uint64_t v2347;
  uint64_t v2348;
  uint64_t v2349;
  uint64_t v2350;
  uint64_t v2351;
  uint64_t v2352;
  uint64_t v2353;
  uint64_t v2354;
  uint64_t v2355;
  unint64_t v2356;
  uint64_t v2357;
  uint64_t v2358;
  uint64_t v2359;
  unint64_t v2360;
  uint64_t v2361;
  uint64_t v2362;
  uint64_t v2363;
  uint64_t v2364;
  uint64_t v2365;
  uint64_t v2366;
  unint64_t v2367;
  uint64_t v2368;
  uint64_t v2369;
  unint64_t v2370;
  uint64_t v2371;
  uint64_t v2372;
  unint64_t v2373;
  uint64_t v2374;
  uint64_t v2375;
  uint64_t v2376;
  uint64_t v2377;
  uint64_t v2378;
  uint64_t v2379;
  uint64_t v2380;
  uint64_t v2381;
  uint64_t v2382;
  uint64_t v2383;
  uint64_t v2384;
  uint64_t v2385;
  uint64_t v2386;
  uint64_t v2387;
  uint64_t v2388;
  uint64_t v2389;
  uint64_t v2390;
  uint64_t v2391;
  uint64_t v2392;
  uint64_t v2393;
  uint64_t v2394;
  uint64_t v2395;
  unint64_t v2396;
  uint64_t v2397;
  uint64_t v2398;
  uint64_t v2399;
  uint64_t v2400;
  unint64_t v2401;
  uint64_t v2402;
  uint64_t v2403;
  uint64_t v2404;
  WTF *v2405;
  uint64_t v2406;
  uint64_t v2407;
  uint64_t v2408;
  unsigned int v2409;
  char v2410;
  WTF::StringImpl *v2411;
  _BYTE cf[24];
  __int128 v2413;
  uint64_t v2414;
  unint64_t v2415;
  unsigned int v2416;
  unsigned int v2417;
  unsigned int v2418;
  unsigned int v2419;
  char v2420;
  unsigned __int8 v2421;
  unsigned __int8 v2422;
  WTF::StringImpl *v2423[2];
  __int128 v2424;
  char v2425;
  int v2426;
  char v2427;
  __int128 v2428;
  uint64_t v2429;
  __int128 v2430;
  int v2431[3];

  v6 = *((unsigned __int16 *)a3 + 25);
  switch(*((_WORD *)a3 + 25))
  {
    case 0x370:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3) & 0xFF00000000) != 0)
        WebCore::GraphicsContextGLANGLE::activeTexture(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_2564;
    case 0x371:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v335 = IPC::Decoder::decode<std::tuple<float,float>>(a3);
      if (v336)
      {
        v337 = HIDWORD(v335);
        LODWORD(v2428) = HIDWORD(v335);
        LODWORD(v2423[0]) = v335;
        if ((_DWORD)v335)
          LODWORD(v2423[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
        if ((_DWORD)v337)
          LODWORD(v2428) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)&v2428);
        WebCore::GraphicsContextGLANGLE::attachShader(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_2564;
    case 0x375:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v2428, a2 + 4);
      v359 = *((_QWORD *)a3 + 1);
      v360 = *(_QWORD *)a3;
      v361 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v359 < v361 || v359 - v361 <= 3)
      {
        v1512 = 0;
        v1513 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v1514 = *((_QWORD *)a3 + 3);
        if (v1514)
        {
          if (v359)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v1514 + 16))(v1514);
            v1513 = *(_QWORD *)a3;
            v1512 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v1512 = 0;
            v1513 = 0;
          }
        }
        goto LABEL_2591;
      }
      v363 = (int *)(v360 + v361);
      *((_QWORD *)a3 + 2) = v363 + 1;
      if (!v360)
      {
        v1512 = v359;
        v1513 = 0;
LABEL_2591:
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v1515 = *((_QWORD *)a3 + 3);
        if (v1515 && v1512)
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v1515 + 16))(v1515, v1513, v1512);
        goto LABEL_2648;
      }
      v364 = (((unint64_t)v363 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v360;
      if (v359 >= v364 && v359 - v364 > 3)
      {
        v366 = *v363;
        v367 = *(unsigned int *)(((unint64_t)v363 + 7) & 0xFFFFFFFFFFFFFFFCLL);
        *((_QWORD *)a3 + 2) = (((unint64_t)v363 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
        IPC::Decoder::decode<WTF::String>((uint64_t *)a3, v2423);
        if (!LOBYTE(v2423[1]))
          goto LABEL_2648;
        *(_DWORD *)cf = v366;
        *(_DWORD *)&cf[4] = v367;
        *(WTF::StringImpl **)&cf[8] = v2423[0];
        cf[16] = 1;
        LODWORD(v2423[0]) = v366;
        if (v366)
        {
          v368 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
          LODWORD(v2423[0]) = v368;
        }
        else
        {
          v368 = 0;
        }
        WebCore::GraphicsContextGLANGLE::bindAttribLocation(*((WebCore::GraphicsContextGLANGLE **)this + 7), v368, v367, (const WTF::String *)&cf[8]);
        if (cf[16])
        {
          v846 = *(WTF::StringImpl **)&cf[8];
          *(_QWORD *)&cf[8] = 0;
          if (v846)
          {
            if (*(_DWORD *)v846 == 2)
              WTF::StringImpl::destroy(v846, v845);
            else
              *(_DWORD *)v846 -= 2;
          }
        }
        goto LABEL_2649;
      }
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v1570 = *((_QWORD *)a3 + 3);
      if (v1570)
      {
        if (v359)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v1570 + 16))(v1570);
          v1355 = *(_QWORD *)a3;
          v1354 = *((_QWORD *)a3 + 1);
          v1357 = *((_QWORD *)a3 + 3);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          if (v1357)
            goto LABEL_2356;
        }
      }
      goto LABEL_2648;
    case 0x376:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v655 = IPC::Decoder::decode<std::tuple<float,float>>(a3);
      if (v656)
      {
        LODWORD(v2423[0]) = HIDWORD(v655);
        if (HIDWORD(v655))
          LODWORD(v2423[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
        WebCore::GraphicsContextGLANGLE::bindBuffer(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_2564;
    case 0x379:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v7 = IPC::Decoder::decode<std::tuple<float,float>>(a3);
      if (v8)
      {
        LODWORD(v2423[0]) = HIDWORD(v7);
        if (HIDWORD(v7))
          LODWORD(v2423[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
        WebCore::GraphicsContextGLANGLE::bindFramebuffer(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_2564;
    case 0x37A:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v9 = IPC::Decoder::decode<std::tuple<float,float>>(a3);
      if (v10)
      {
        LODWORD(v2423[0]) = HIDWORD(v9);
        if (HIDWORD(v9))
          LODWORD(v2423[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
        WebCore::GraphicsContextGLANGLE::bindRenderbuffer(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_2564;
    case 0x37C:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v304 = IPC::Decoder::decode<std::tuple<float,float>>(a3);
      if (v305)
      {
        LODWORD(v2423[0]) = HIDWORD(v304);
        if (HIDWORD(v304))
          LODWORD(v2423[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
        WebCore::GraphicsContextGLANGLE::bindTexture(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_2564;
    case 0x37E:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v49 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v49 & 0xFF00000000) != 0)
      {
        LODWORD(v2423[0]) = v49;
        if ((_DWORD)v49)
          LODWORD(v2423[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
        WebCore::GraphicsContextGLANGLE::bindVertexArray(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_2564;
    case 0x37F:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
      IPC::Decoder::decode<std::tuple<float,float,float,float>>((uint64_t)cf, a3);
      if (cf[16])
        WebCore::GraphicsContextGLANGLE::blendColor(*((WebCore::GraphicsContextGLANGLE **)this + 7), *(float *)cf, *(float *)&cf[4], *(float *)&cf[8], *(float *)&cf[12]);
      goto LABEL_2465;
    case 0x380:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3) & 0xFF00000000) != 0)
        WebCore::GraphicsContextGLANGLE::blendEquation(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_2564;
    case 0x381:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      IPC::Decoder::decode<std::tuple<float,float>>(a3);
      if (v288)
        WebCore::GraphicsContextGLANGLE::blendEquationSeparate(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_2564;
    case 0x384:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      IPC::Decoder::decode<std::tuple<float,float>>(a3);
      if (v617)
        WebCore::GraphicsContextGLANGLE::blendFunc(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_2564;
    case 0x385:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
      IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>((uint64_t *)a3, cf);
      if (cf[16])
        WebCore::GraphicsContextGLANGLE::blendFuncSeparate(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_2465;
    case 0x388:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v94 = *((_QWORD *)a3 + 1);
      v95 = *(_QWORD *)a3;
      v96 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v94 < v96 || v94 - v96 <= 3)
        goto LABEL_2273;
      v98 = (int *)(v95 + v96);
      *((_QWORD *)a3 + 2) = v98 + 1;
      if (!v95)
        goto LABEL_3574;
      v99 = (((unint64_t)v98 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v99 || v94 - v99 <= 3)
        goto LABEL_1897;
      v101 = *v98;
      *((_QWORD *)a3 + 2) = v95 + v99 + 4;
      v103 = v95 + v99 + 7;
      v102 = *(_DWORD *)(v95 + v99);
      v104 = (v103 & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v104 || v94 - v104 <= 3)
        goto LABEL_1897;
      v106 = (int *)(v95 + v104);
      *((_QWORD *)a3 + 2) = v106 + 1;
      v107 = *v106;
      v108 = (((unint64_t)v106 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v108 || v94 - v108 <= 3)
        goto LABEL_1897;
      v110 = (int *)(v95 + v108);
      *((_QWORD *)a3 + 2) = v110 + 1;
      v111 = *v110;
      v112 = (((unint64_t)v110 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v112 || v94 - v112 <= 3)
        goto LABEL_1897;
      v114 = (int *)(v95 + v112);
      *((_QWORD *)a3 + 2) = v114 + 1;
      v115 = *v114;
      v116 = (((unint64_t)v114 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v116 || v94 - v116 <= 3)
        goto LABEL_1897;
      v118 = (int *)(v95 + v116);
      *((_QWORD *)a3 + 2) = v118 + 1;
      v119 = *v118;
      v120 = (((unint64_t)v118 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v120 || v94 - v120 <= 3)
        goto LABEL_1897;
      v122 = (int *)(v95 + v120);
      *((_QWORD *)a3 + 2) = v122 + 1;
      v123 = *v122;
      v124 = (((unint64_t)v122 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v124 || v94 - v124 <= 3)
        goto LABEL_1897;
      *((_QWORD *)a3 + 2) = v95 + v124 + 4;
      v127 = v95 + v124 + 7;
      v126 = *(_DWORD *)(v95 + v124);
      v128 = (v127 & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v128 || v94 - v128 <= 3)
        goto LABEL_1897;
      v130 = (unsigned int *)(v95 + v128);
      *((_QWORD *)a3 + 2) = v130 + 1;
      v131 = (((unint64_t)v130 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v131 || v94 - v131 <= 3)
        goto LABEL_1897;
      v133 = *v130;
      v134 = (unsigned int *)(v95 + v131);
      v135 = *v134;
      *((_QWORD *)a3 + 2) = v134 + 1;
      WebCore::GraphicsContextGLANGLE::blitFramebuffer(*((WebCore::GraphicsContextGLANGLE **)this + 7), v101, v102, v107, v111, v115, v119, v123, v126, v133, v135);
      goto LABEL_2564;
    case 0x389:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v94 = *((_QWORD *)a3 + 1);
      v95 = *(_QWORD *)a3;
      v137 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v94 < v137 || v94 - v137 <= 3)
        goto LABEL_2273;
      v139 = v95 + v137;
      *((_QWORD *)a3 + 2) = v139 + 4;
      if (!v95)
        goto LABEL_3574;
      v140 = ((v139 + 11) & 0xFFFFFFFFFFFFFFF8) - v95;
      if (v94 < v140 || v94 - v140 <= 7)
        goto LABEL_1897;
      v142 = (v139 + 11) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a3 + 2) = v142 + 8;
      v143 = ((v142 + 11) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v143 || v94 - v143 <= 3)
        goto LABEL_1897;
      *((_QWORD *)a3 + 2) = ((v142 + 11) & 0xFFFFFFFFFFFFFFFCLL) + 4;
      WebCore::GraphicsContextGLANGLE::bufferData(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_2564;
    case 0x38A:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
      v549 = *((_QWORD *)a3 + 1);
      v550 = *(_QWORD *)a3;
      v551 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v549 >= v551 && v549 - v551 > 3)
      {
        *((_QWORD *)a3 + 2) = v550 + v551 + 4;
        if (!v550)
          goto LABEL_3593;
        IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>((uint64_t *)a3, (uint64_t)cf);
        if (!cf[16])
          goto LABEL_2464;
        v553 = *((_QWORD *)a3 + 1);
        v554 = *(_QWORD *)a3;
        v555 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
        if (v553 < v555 || v553 - v555 <= 3)
          goto LABEL_2678;
        *((_QWORD *)a3 + 2) = v554 + v555 + 4;
        if (!v554)
          goto LABEL_3617;
        WebCore::GraphicsContextGLANGLE::bufferData();
        goto LABEL_2465;
      }
      v1249 = 0;
      v1248 = 0;
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v1538 = *((_QWORD *)a3 + 3);
      if (!v1538)
        goto LABEL_2463;
      if (!v549)
        goto LABEL_3028;
      goto LABEL_2612;
    case 0x38B:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
      v12 = *((_QWORD *)a3 + 1);
      v13 = *(_QWORD *)a3;
      v625 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v12 < v625 || v12 - v625 <= 3)
        goto LABEL_2338;
      v627 = v13 + v625;
      *((_QWORD *)a3 + 2) = v627 + 4;
      if (!v13)
        goto LABEL_3577;
      v628 = ((v627 + 11) & 0xFFFFFFFFFFFFFFF8) - v13;
      if (v12 < v628 || v12 - v628 <= 7)
        goto LABEL_2159;
      *((_QWORD *)a3 + 2) = ((v627 + 11) & 0xFFFFFFFFFFFFFFF8) + 8;
      IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>((uint64_t *)a3, (uint64_t)cf);
      if (!cf[16])
        goto LABEL_2464;
      WebCore::GraphicsContextGLANGLE::bufferSubData();
      goto LABEL_2465;
    case 0x38C:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3) & 0xFF00000000) != 0)
        WebCore::GraphicsContextGLANGLE::clear(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_2564;
    case 0x391:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
      IPC::Decoder::decode<std::tuple<float,float,float,float>>((uint64_t)cf, a3);
      if (cf[16])
        WebCore::GraphicsContextGLANGLE::clearColor(*((WebCore::GraphicsContextGLANGLE **)this + 7), *(float *)cf, *(float *)&cf[4], *(float *)&cf[8], *(float *)&cf[12]);
      goto LABEL_2465;
    case 0x392:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v136 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v136 & 0xFF00000000) != 0)
        WebCore::GraphicsContextGLANGLE::clearDepth(*((WebCore::GraphicsContextGLANGLE **)this + 7), *(float *)&v136);
      goto LABEL_2564;
    case 0x393:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3) & 0xFF00000000) != 0)
        WebCore::GraphicsContextGLANGLE::clearStencil(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_2564;
    case 0x395:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v42 = *((_QWORD *)a3 + 1);
      v43 = *(_QWORD *)a3;
      v44 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
      if (v42 <= v44)
      {
        v1472 = 0;
        v1473 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v1474 = *((_QWORD *)a3 + 3);
        if (v1474)
        {
          if (v42)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v1474 + 16))(v1474);
            v1473 = *(_QWORD *)a3;
            v1472 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v1472 = 0;
            v1473 = 0;
          }
        }
      }
      else
      {
        v45 = (unsigned __int8 *)(v43 + v44);
        *((_QWORD *)a3 + 2) = v43 + v44 + 1;
        if (v43)
        {
          if (*v45 < 2u)
          {
            if (v42 > v44 + 1)
            {
              *((_QWORD *)a3 + 2) = v45 + 2;
              if (v45[1] >= 2u)
                goto LABEL_3581;
              if (v42 <= v44 + 2)
                goto LABEL_2382;
              *((_QWORD *)a3 + 2) = v45 + 3;
              if (v45[2] >= 2u)
              {
LABEL_3581:
                v1369 = v42;
                v1370 = v43;
LABEL_2383:
                *(_QWORD *)a3 = 0;
                *((_QWORD *)a3 + 1) = 0;
                v1372 = *((_QWORD *)a3 + 3);
                if (v1372 && v1369)
                  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v1372 + 16))(v1372, v1370, v1369);
                goto LABEL_2559;
              }
              if (v42 > v44 + 3)
              {
                *((_QWORD *)a3 + 2) = v45 + 4;
                if (v45[3] < 2u)
                {
                  WebCore::GraphicsContextGLANGLE::colorMask(*((WebCore::GraphicsContextGLANGLE **)this + 7));
                  goto LABEL_2564;
                }
                goto LABEL_3581;
              }
            }
LABEL_2382:
            v1369 = 0;
            v1370 = 0;
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v1371 = *((_QWORD *)a3 + 3);
            if (v1371)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v1371 + 16))(v1371);
              v1369 = 0;
              v2058 = *(_QWORD *)a3;
              v2059 = *((_QWORD *)a3 + 1);
              v2060 = *((_QWORD *)a3 + 3);
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              v1370 = 0;
              if (v2060)
              {
                if (v2059)
                {
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2060 + 16))(v2060, v2058);
                  v1370 = *(_QWORD *)a3;
                  v1369 = *((_QWORD *)a3 + 1);
                }
              }
            }
            goto LABEL_2383;
          }
LABEL_2558:
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v1476 = *((_QWORD *)a3 + 3);
          if (v1476 && v42)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1476 + 16))(v1476, v43);
LABEL_2559:
          v1322 = *(_QWORD *)a3;
          v1351 = *((_QWORD *)a3 + 1);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v1324 = *((_QWORD *)a3 + 3);
          if (!v1324)
            goto LABEL_2564;
          goto LABEL_2569;
        }
        v1472 = v42;
        v1473 = 0;
      }
      v42 = 0;
      v43 = 0;
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v1475 = *((_QWORD *)a3 + 3);
      if (v1475)
      {
        if (v1472)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v1475 + 16))(v1475, v1473, v1472);
          v43 = *(_QWORD *)a3;
          v42 = *((_QWORD *)a3 + 1);
        }
        else
        {
          v42 = 0;
          v43 = 0;
        }
      }
      goto LABEL_2558;
    case 0x397:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v51 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v51 & 0xFF00000000) != 0)
      {
        LODWORD(v2423[0]) = v51;
        if ((_DWORD)v51)
          LODWORD(v2423[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
        WebCore::GraphicsContextGLANGLE::compileShader(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_2564;
    case 0x398:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
      v12 = *((_QWORD *)a3 + 1);
      v13 = *(_QWORD *)a3;
      v696 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v12 < v696 || v12 - v696 <= 3)
        goto LABEL_2338;
      v698 = v13 + v696;
      *((_QWORD *)a3 + 2) = v698 + 4;
      if (!v13)
        goto LABEL_3577;
      v699 = ((v698 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
      if (v12 < v699 || v12 - v699 <= 3)
        goto LABEL_2159;
      *((_QWORD *)a3 + 2) = ((v698 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
      v701 = ((((v698 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
      if (v12 < v701 || v12 - v701 <= 3)
        goto LABEL_2159;
      v703 = v13 + v701;
      *((_QWORD *)a3 + 2) = v703 + 4;
      v704 = ((v703 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
      if (v12 < v704 || v12 - v704 <= 3)
        goto LABEL_2159;
      v706 = v13 + v704;
      *((_QWORD *)a3 + 2) = v706 + 4;
      v707 = ((v706 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
      if (v12 < v707 || v12 - v707 <= 3)
        goto LABEL_2159;
      v709 = v13 + v707;
      *((_QWORD *)a3 + 2) = v709 + 4;
      v710 = ((v709 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
      if (v12 < v710 || v12 - v710 <= 3)
        goto LABEL_2159;
      v712 = v13 + v710;
      *((_QWORD *)a3 + 2) = v712 + 4;
      v713 = ((v712 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
      if (v12 < v713 || v12 - v713 <= 3)
        goto LABEL_2159;
      *((_QWORD *)a3 + 2) = v13 + v713 + 4;
      IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>((uint64_t *)a3, (uint64_t)cf);
      if (!cf[16])
        goto LABEL_2464;
      WebCore::GraphicsContextGLANGLE::compressedTexImage2D();
      goto LABEL_2465;
    case 0x399:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v94 = *((_QWORD *)a3 + 1);
      v95 = *(_QWORD *)a3;
      v727 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v94 < v727 || v94 - v727 <= 3)
        goto LABEL_2273;
      v729 = (unsigned int *)(v95 + v727);
      *((_QWORD *)a3 + 2) = v729 + 1;
      if (!v95)
        goto LABEL_3574;
      v730 = (((unint64_t)v729 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v730 || v94 - v730 <= 3)
        goto LABEL_1897;
      v732 = *v729;
      *((_QWORD *)a3 + 2) = v95 + v730 + 4;
      v734 = v95 + v730 + 7;
      v733 = *(_DWORD *)(v95 + v730);
      v735 = (v734 & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v735 || v94 - v735 <= 3)
        goto LABEL_1897;
      v737 = (unsigned int *)(v95 + v735);
      *((_QWORD *)a3 + 2) = v737 + 1;
      v738 = *v737;
      v739 = (((unint64_t)v737 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v739 || v94 - v739 <= 3)
        goto LABEL_1897;
      v741 = (int *)(v95 + v739);
      *((_QWORD *)a3 + 2) = v741 + 1;
      v742 = *v741;
      v743 = (((unint64_t)v741 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v743 || v94 - v743 <= 3)
        goto LABEL_1897;
      v745 = (int *)(v95 + v743);
      *((_QWORD *)a3 + 2) = v745 + 1;
      v746 = *v745;
      v747 = (((unint64_t)v745 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v747 || v94 - v747 <= 3)
        goto LABEL_1897;
      v749 = (int *)(v95 + v747);
      *((_QWORD *)a3 + 2) = v749 + 1;
      v750 = *v749;
      v751 = (((unint64_t)v749 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v751 || v94 - v751 <= 3)
        goto LABEL_1897;
      v753 = (int *)(v95 + v751);
      *((_QWORD *)a3 + 2) = v753 + 1;
      v754 = (((unint64_t)v753 + 11) & 0xFFFFFFFFFFFFFFF8) - v95;
      if (v94 < v754 || v94 - v754 <= 7)
        goto LABEL_1897;
      v756 = *v753;
      v757 = *(_QWORD *)(((unint64_t)v753 + 11) & 0xFFFFFFFFFFFFFFF8);
      *((_QWORD *)a3 + 2) = (((unint64_t)v753 + 11) & 0xFFFFFFFFFFFFFFF8) + 8;
      WebCore::GraphicsContextGLANGLE::compressedTexImage2D(*((WebCore::GraphicsContextGLANGLE **)this + 7), v732, v733, v738, v742, v746, v750, v756, v757);
      goto LABEL_2564;
    case 0x39C:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
      v12 = *((_QWORD *)a3 + 1);
      v13 = *(_QWORD *)a3;
      v72 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v12 < v72 || v12 - v72 <= 3)
        goto LABEL_2338;
      v74 = v13 + v72;
      *((_QWORD *)a3 + 2) = v74 + 4;
      if (!v13)
        goto LABEL_3577;
      v75 = ((v74 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
      if (v12 < v75 || v12 - v75 <= 3)
        goto LABEL_2159;
      *((_QWORD *)a3 + 2) = ((v74 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
      v77 = ((((v74 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
      if (v12 < v77 || v12 - v77 <= 3)
        goto LABEL_2159;
      v79 = v13 + v77;
      *((_QWORD *)a3 + 2) = v79 + 4;
      v80 = ((v79 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
      if (v12 < v80 || v12 - v80 <= 3)
        goto LABEL_2159;
      v82 = v13 + v80;
      *((_QWORD *)a3 + 2) = v82 + 4;
      v83 = ((v82 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
      if (v12 < v83 || v12 - v83 <= 3)
        goto LABEL_2159;
      v85 = v13 + v83;
      *((_QWORD *)a3 + 2) = v85 + 4;
      v86 = ((v85 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
      if (v12 < v86 || v12 - v86 <= 3)
        goto LABEL_2159;
      v88 = v13 + v86;
      *((_QWORD *)a3 + 2) = v88 + 4;
      v89 = ((v88 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
      if (v12 < v89 || v12 - v89 <= 3)
        goto LABEL_2159;
      v91 = v13 + v89;
      *((_QWORD *)a3 + 2) = v91 + 4;
      v92 = ((v91 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
      if (v12 < v92 || v12 - v92 <= 3)
        goto LABEL_2159;
      *((_QWORD *)a3 + 2) = v13 + v92 + 4;
      IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>((uint64_t *)a3, (uint64_t)cf);
      if (!cf[16])
        goto LABEL_2464;
      WebCore::GraphicsContextGLANGLE::compressedTexSubImage2D();
      goto LABEL_2465;
    case 0x39D:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v94 = *((_QWORD *)a3 + 1);
      v95 = *(_QWORD *)a3;
      v758 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v94 < v758 || v94 - v758 <= 3)
        goto LABEL_2273;
      v760 = (unsigned int *)(v95 + v758);
      *((_QWORD *)a3 + 2) = v760 + 1;
      if (!v95)
        goto LABEL_3574;
      v761 = (((unint64_t)v760 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v761 || v94 - v761 <= 3)
        goto LABEL_1897;
      v763 = *v760;
      *((_QWORD *)a3 + 2) = v95 + v761 + 4;
      v765 = v95 + v761 + 7;
      v764 = *(_DWORD *)(v95 + v761);
      v766 = (v765 & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v766 || v94 - v766 <= 3)
        goto LABEL_1897;
      v768 = (int *)(v95 + v766);
      *((_QWORD *)a3 + 2) = v768 + 1;
      v769 = *v768;
      v770 = (((unint64_t)v768 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v770 || v94 - v770 <= 3)
        goto LABEL_1897;
      v772 = (int *)(v95 + v770);
      *((_QWORD *)a3 + 2) = v772 + 1;
      v773 = *v772;
      v774 = (((unint64_t)v772 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v774 || v94 - v774 <= 3)
        goto LABEL_1897;
      v776 = (int *)(v95 + v774);
      *((_QWORD *)a3 + 2) = v776 + 1;
      v777 = *v776;
      v778 = (((unint64_t)v776 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v778 || v94 - v778 <= 3)
        goto LABEL_1897;
      v780 = (int *)(v95 + v778);
      *((_QWORD *)a3 + 2) = v780 + 1;
      v781 = *v780;
      v782 = (((unint64_t)v780 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v782 || v94 - v782 <= 3)
        goto LABEL_1897;
      v784 = (unsigned int *)(v95 + v782);
      *((_QWORD *)a3 + 2) = v784 + 1;
      v785 = *v784;
      v786 = (((unint64_t)v784 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v786 || v94 - v786 <= 3)
        goto LABEL_1897;
      v788 = (int *)(v95 + v786);
      *((_QWORD *)a3 + 2) = v788 + 1;
      v789 = (((unint64_t)v788 + 11) & 0xFFFFFFFFFFFFFFF8) - v95;
      if (v94 < v789 || v94 - v789 <= 7)
        goto LABEL_1897;
      v791 = *v788;
      v792 = (uint64_t *)(v95 + v789);
      v793 = *v792;
      *((_QWORD *)a3 + 2) = v792 + 1;
      WebCore::GraphicsContextGLANGLE::compressedTexSubImage2D(*((WebCore::GraphicsContextGLANGLE **)this + 7), v763, v764, v769, v773, v777, v781, v785, v791, v793);
      goto LABEL_2564;
    case 0x3A0:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v94 = *((_QWORD *)a3 + 1);
      v95 = *(_QWORD *)a3;
      v795 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v94 < v795 || v94 - v795 <= 3)
        goto LABEL_2273;
      v797 = v95 + v795;
      *((_QWORD *)a3 + 2) = v797 + 4;
      if (!v95)
        goto LABEL_3574;
      v798 = ((v797 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v798 || v94 - v798 <= 3)
        goto LABEL_1897;
      *((_QWORD *)a3 + 2) = ((v797 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
      v800 = ((((v797 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) - v95;
      if (v94 < v800 || v94 - v800 <= 7)
        goto LABEL_1897;
      v802 = (((v797 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)a3 + 2) = v802 + 8;
      v803 = ((v802 + 15) & 0xFFFFFFFFFFFFFFF8) - v95;
      if (v94 < v803 || v94 - v803 <= 7)
        goto LABEL_1897;
      v805 = v95 + v803;
      *((_QWORD *)a3 + 2) = v805 + 8;
      v806 = ((v805 + 15) & 0xFFFFFFFFFFFFFFF8) - v95;
      if (v94 < v806 || v94 - v806 <= 7)
        goto LABEL_1897;
      *((_QWORD *)a3 + 2) = ((v805 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
      WebCore::GraphicsContextGLANGLE::copyBufferSubData(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_2564;
    case 0x3A1:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v810 = *((_QWORD *)a3 + 1);
      v811 = *(_QWORD *)a3;
      v812 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v810 < v812 || v810 - v812 <= 3)
      {
        v1563 = 0;
        v1564 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v1565 = *((_QWORD *)a3 + 3);
        if (v1565)
        {
          if (v810)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v1565 + 16))(v1565);
            v1564 = *(_QWORD *)a3;
            v1563 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v1563 = 0;
            v1564 = 0;
          }
        }
        goto LABEL_2638;
      }
      v814 = (unsigned int *)(v811 + v812);
      *((_QWORD *)a3 + 2) = v814 + 1;
      if (!v811)
      {
        v1563 = v810;
        v1564 = 0;
LABEL_2638:
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v1566 = *((_QWORD *)a3 + 3);
        if (v1566 && v1563)
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v1566 + 16))(v1566, v1564, v1563);
        goto LABEL_2347;
      }
      v815 = (((unint64_t)v814 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v811;
      if (v810 >= v815 && v810 - v815 > 3)
      {
        v817 = *v814;
        *((_QWORD *)a3 + 2) = v811 + v815 + 4;
        v819 = v811 + v815 + 7;
        v818 = *(_DWORD *)(v811 + v815);
        v820 = (v819 & 0xFFFFFFFFFFFFFFFCLL) - v811;
        if (v810 >= v820 && v810 - v820 > 3)
        {
          v822 = (unsigned int *)(v811 + v820);
          *((_QWORD *)a3 + 2) = v822 + 1;
          v823 = *v822;
          v824 = (((unint64_t)v822 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v811;
          if (v810 >= v824 && v810 - v824 > 3)
          {
            v826 = (int *)(v811 + v824);
            *((_QWORD *)a3 + 2) = v826 + 1;
            v827 = *v826;
            v828 = (((unint64_t)v826 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v811;
            if (v810 >= v828 && v810 - v828 > 3)
            {
              v830 = (int *)(v811 + v828);
              *((_QWORD *)a3 + 2) = v830 + 1;
              v831 = *v830;
              v832 = (((unint64_t)v830 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v811;
              if (v810 >= v832 && v810 - v832 > 3)
              {
                v834 = (int *)(v811 + v832);
                *((_QWORD *)a3 + 2) = v834 + 1;
                v835 = *v834;
                v836 = (((unint64_t)v834 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v811;
                if (v810 >= v836 && v810 - v836 > 3)
                {
                  v838 = (int *)(v811 + v836);
                  *((_QWORD *)a3 + 2) = v838 + 1;
                  v839 = (((unint64_t)v838 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v811;
                  if (v810 >= v839 && v810 - v839 > 3)
                  {
                    v841 = *v838;
                    v842 = *(_DWORD *)(((unint64_t)v838 + 7) & 0xFFFFFFFFFFFFFFFCLL);
                    *((_QWORD *)a3 + 2) = (((unint64_t)v838 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
                    WebCore::GraphicsContextGLANGLE::copyTexImage2D(*((WebCore::GraphicsContextGLANGLE **)this + 7), v817, v818, v823, v827, v831, v835, v841, v842);
                    goto LABEL_2564;
                  }
                }
              }
            }
          }
        }
      }
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v1352 = *((_QWORD *)a3 + 3);
      if (v1352)
      {
        if (v810)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v1352 + 16))(v1352);
          v2042 = *(_QWORD *)a3;
          v2043 = *((_QWORD *)a3 + 1);
          v2044 = *((_QWORD *)a3 + 3);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          if (v2044)
          {
            if (v2043)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2044 + 16))(v2044, v2042);
          }
        }
      }
LABEL_2347:
      v1322 = *(_QWORD *)a3;
      v1351 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v1324 = *((_QWORD *)a3 + 3);
      if (!v1324)
        goto LABEL_2564;
      goto LABEL_2569;
    case 0x3A2:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v397 = *((_QWORD *)a3 + 1);
      v398 = *(_QWORD *)a3;
      v399 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v397 < v399 || v397 - v399 <= 3)
      {
        v1516 = 0;
        v1517 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v1518 = *((_QWORD *)a3 + 3);
        if (v1518)
        {
          if (v397)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v1518 + 16))(v1518);
            v1517 = *(_QWORD *)a3;
            v1516 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v1516 = 0;
            v1517 = 0;
          }
        }
        goto LABEL_2595;
      }
      v401 = (unsigned int *)(v398 + v399);
      *((_QWORD *)a3 + 2) = v401 + 1;
      if (!v398)
      {
        v1516 = v397;
        v1517 = 0;
LABEL_2595:
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v1519 = *((_QWORD *)a3 + 3);
        if (v1519 && v1516)
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v1519 + 16))(v1519, v1517, v1516);
        goto LABEL_2344;
      }
      v402 = (((unint64_t)v401 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v398;
      if (v397 >= v402 && v397 - v402 > 3)
      {
        v404 = *v401;
        *((_QWORD *)a3 + 2) = v398 + v402 + 4;
        v406 = v398 + v402 + 7;
        v405 = *(_DWORD *)(v398 + v402);
        v407 = (v406 & 0xFFFFFFFFFFFFFFFCLL) - v398;
        if (v397 >= v407 && v397 - v407 > 3)
        {
          v409 = (int *)(v398 + v407);
          *((_QWORD *)a3 + 2) = v409 + 1;
          v410 = *v409;
          v411 = (((unint64_t)v409 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v398;
          if (v397 >= v411 && v397 - v411 > 3)
          {
            v413 = (int *)(v398 + v411);
            *((_QWORD *)a3 + 2) = v413 + 1;
            v414 = *v413;
            v415 = (((unint64_t)v413 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v398;
            if (v397 >= v415 && v397 - v415 > 3)
            {
              v417 = (int *)(v398 + v415);
              *((_QWORD *)a3 + 2) = v417 + 1;
              v418 = *v417;
              v419 = (((unint64_t)v417 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v398;
              if (v397 >= v419 && v397 - v419 > 3)
              {
                v421 = (int *)(v398 + v419);
                *((_QWORD *)a3 + 2) = v421 + 1;
                v422 = *v421;
                v423 = (((unint64_t)v421 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v398;
                if (v397 >= v423 && v397 - v423 > 3)
                {
                  v425 = (int *)(v398 + v423);
                  *((_QWORD *)a3 + 2) = v425 + 1;
                  v426 = (((unint64_t)v425 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v398;
                  if (v397 >= v426 && v397 - v426 > 3)
                  {
                    v428 = *v425;
                    v429 = *(_DWORD *)(((unint64_t)v425 + 7) & 0xFFFFFFFFFFFFFFFCLL);
                    *((_QWORD *)a3 + 2) = (((unint64_t)v425 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
                    WebCore::GraphicsContextGLANGLE::copyTexSubImage2D(*((WebCore::GraphicsContextGLANGLE **)this + 7), v404, v405, v410, v414, v418, v422, v428, v429);
                    goto LABEL_2564;
                  }
                }
              }
            }
          }
        }
      }
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v1350 = *((_QWORD *)a3 + 3);
      if (v1350)
      {
        if (v397)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v1350 + 16))(v1350);
          v2039 = *(_QWORD *)a3;
          v2040 = *((_QWORD *)a3 + 1);
          v2041 = *((_QWORD *)a3 + 3);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          if (v2041)
          {
            if (v2040)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2041 + 16))(v2041, v2039);
          }
        }
      }
LABEL_2344:
      v1322 = *(_QWORD *)a3;
      v1351 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v1324 = *((_QWORD *)a3 + 3);
      if (!v1324)
        goto LABEL_2564;
      goto LABEL_2569;
    case 0x3A4:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
      v809 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v809 & 0xFF00000000) == 0)
        goto LABEL_2465;
      LODWORD(v2428) = v809;
      Buffer = WebCore::GraphicsContextGLANGLE::createBuffer(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_1374;
    case 0x3A5:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
      v50 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v50 & 0xFF00000000) == 0)
        goto LABEL_2465;
      LODWORD(v2428) = v50;
      Buffer = WebCore::GraphicsContextGLANGLE::createFramebuffer(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_1374;
    case 0x3A6:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
      v794 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v794 & 0xFF00000000) == 0)
        goto LABEL_2465;
      LODWORD(v2428) = v794;
      Buffer = WebCore::GraphicsContextGLANGLE::createProgram(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_1374;
    case 0x3A9:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
      v452 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v452 & 0xFF00000000) == 0)
        goto LABEL_2465;
      LODWORD(v2428) = v452;
      Buffer = WebCore::GraphicsContextGLANGLE::createRenderbuffer(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_1374;
    case 0x3AB:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
      v54 = IPC::Decoder::decode<std::tuple<float,float>>(a3);
      if (!v55)
        goto LABEL_2465;
      LODWORD(v2428) = v54;
      Buffer = WebCore::GraphicsContextGLANGLE::createShader(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_1374;
    case 0x3AC:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
      v396 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v396 & 0xFF00000000) == 0)
        goto LABEL_2465;
      LODWORD(v2428) = v396;
      Buffer = WebCore::GraphicsContextGLANGLE::createTexture(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_1374;
    case 0x3AE:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
      v40 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v40 & 0xFF00000000) == 0)
        goto LABEL_2465;
      LODWORD(v2428) = v40;
      Buffer = WebCore::GraphicsContextGLANGLE::createVertexArray(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_1374;
    case 0x3AF:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3) & 0xFF00000000) != 0)
        WebCore::GraphicsContextGLANGLE::cullFace(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_2564;
    case 0x3B0:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v808 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v808 & 0xFF00000000) != 0 && (_DWORD)v808)
      {
        WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::take((uint64_t *)this + 24, v808);
        WebCore::GraphicsContextGLANGLE::deleteBuffer(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_2564;
    case 0x3B2:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v58 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v58 & 0xFF00000000) != 0 && (_DWORD)v58)
      {
        WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::take((uint64_t *)this + 24, v58);
        WebCore::GraphicsContextGLANGLE::deleteFramebuffer(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_2564;
    case 0x3B3:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v683 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v683 & 0xFF00000000) != 0 && (_DWORD)v683)
      {
        WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::take((uint64_t *)this + 24, v683);
        WebCore::GraphicsContextGLANGLE::deleteProgram(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_2564;
    case 0x3B6:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v548 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v548 & 0xFF00000000) != 0 && (_DWORD)v548)
      {
        WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::take((uint64_t *)this + 24, v548);
        WebCore::GraphicsContextGLANGLE::deleteRenderbuffer(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_2564;
    case 0x3B8:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v547 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v547 & 0xFF00000000) != 0 && (_DWORD)v547)
      {
        WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::take((uint64_t *)this + 24, v547);
        WebCore::GraphicsContextGLANGLE::deleteShader(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_2564;
    case 0x3BA:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v11 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v11 & 0xFF00000000) != 0 && (_DWORD)v11)
      {
        WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::take((uint64_t *)this + 24, v11);
        WebCore::GraphicsContextGLANGLE::deleteTexture(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_2564;
    case 0x3BC:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v39 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v39 & 0xFF00000000) != 0 && (_DWORD)v39)
      {
        WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::take((uint64_t *)this + 24, v39);
        WebCore::GraphicsContextGLANGLE::deleteVertexArray(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_2564;
    case 0x3BD:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3) & 0xFF00000000) != 0)
        WebCore::GraphicsContextGLANGLE::depthFunc(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_2564;
    case 0x3BE:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      if ((unsigned __int16)IPC::Decoder::decode<std::tuple<BOOL>>((uint64_t *)a3) >= 0x100u)
        WebCore::GraphicsContextGLANGLE::depthMask(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_2564;
    case 0x3BF:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v161 = IPC::Decoder::decode<std::tuple<float,float>>(a3);
      if (v162)
        WebCore::GraphicsContextGLANGLE::depthRange(*((WebCore::GraphicsContextGLANGLE **)this + 7), *(float *)&v161, *((float *)&v161 + 1));
      goto LABEL_2564;
    case 0x3C0:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v46 = IPC::Decoder::decode<std::tuple<float,float>>(a3);
      if (v47)
      {
        v48 = HIDWORD(v46);
        LODWORD(v2428) = HIDWORD(v46);
        LODWORD(v2423[0]) = v46;
        if ((_DWORD)v46)
          LODWORD(v2423[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
        if ((_DWORD)v48)
          LODWORD(v2428) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)&v2428);
        WebCore::GraphicsContextGLANGLE::detachShader(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_2564;
    case 0x3C1:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3) & 0xFF00000000) != 0)
        WebCore::GraphicsContextGLANGLE::disable(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_2564;
    case 0x3C2:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3) & 0xFF00000000) != 0)
        WebCore::GraphicsContextGLANGLE::disableVertexAttribArray(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_2564;
    case 0x3C4:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v453 = *((_QWORD *)a3 + 1);
      v454 = *(_QWORD *)a3;
      v455 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v453 >= v455 && v453 - v455 > 3)
      {
        v457 = v454 + v455;
        *((_QWORD *)a3 + 2) = v457 + 4;
        if (v454)
        {
          v458 = ((v457 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v454;
          if (v453 >= v458 && v453 - v458 > 3)
          {
            v460 = (v457 + 7) & 0xFFFFFFFFFFFFFFFCLL;
            *((_QWORD *)a3 + 2) = v460 + 4;
            v461 = ((v460 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v454;
            if (v453 >= v461 && v453 - v461 > 3)
            {
              v463 = (unsigned int *)((v460 + 7) & 0xFFFFFFFFFFFFFFFCLL);
              v464 = *v463;
              *((_QWORD *)a3 + 2) = v463 + 1;
              v465 = v464 | 0x100000000;
              goto LABEL_783;
            }
          }
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v1434 = *((_QWORD *)a3 + 3);
          if (v1434)
          {
            if (v453)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v1434 + 16))(v1434);
              v1435 = *(_QWORD *)a3;
              v1436 = *((_QWORD *)a3 + 1);
              v1437 = *((_QWORD *)a3 + 3);
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              if (v1437)
              {
                if (v1436)
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1437 + 16))(v1437, v1435);
              }
            }
          }
LABEL_2604:
          v1528 = *(_QWORD *)a3;
          v1529 = *((_QWORD *)a3 + 1);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v1530 = *((_QWORD *)a3 + 3);
          if (v1530 && v1529)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1530 + 16))(v1530, v1528);
          v465 = 0;
LABEL_783:
          if ((v465 & 0xFF00000000) != 0)
            WebCore::GraphicsContextGLANGLE::drawArrays(*((WebCore::GraphicsContextGLANGLE **)this + 7));
          goto LABEL_2564;
        }
        v1524 = v453;
        v1525 = 0;
      }
      else
      {
        v1524 = 0;
        v1525 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v1526 = *((_QWORD *)a3 + 3);
        if (v1526)
        {
          if (v453)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v1526 + 16))(v1526);
            v1525 = *(_QWORD *)a3;
            v1524 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v1524 = 0;
            v1525 = 0;
          }
        }
      }
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v1527 = *((_QWORD *)a3 + 3);
      if (v1527 && v1524)
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v1527 + 16))(v1527, v1525, v1524);
      goto LABEL_2604;
    case 0x3C5:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v94 = *((_QWORD *)a3 + 1);
      v95 = *(_QWORD *)a3;
      v198 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v94 < v198 || v94 - v198 <= 3)
        goto LABEL_2273;
      v200 = v95 + v198;
      *((_QWORD *)a3 + 2) = v200 + 4;
      if (!v95)
        goto LABEL_3574;
      v201 = ((v200 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v201 || v94 - v201 <= 3)
        goto LABEL_1897;
      *((_QWORD *)a3 + 2) = ((v200 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
      v203 = ((((v200 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v203 || v94 - v203 <= 3)
        goto LABEL_1897;
      v205 = (((v200 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
      *((_QWORD *)a3 + 2) = v205 + 4;
      v206 = ((v205 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v206 || v94 - v206 <= 3)
        goto LABEL_1897;
      *((_QWORD *)a3 + 2) = ((v205 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
      WebCore::GraphicsContextGLANGLE::drawArraysInstanced(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_2564;
    case 0x3C9:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v684 = *((_QWORD *)a3 + 1);
      v685 = *(_QWORD *)a3;
      v686 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v684 < v686 || v684 - v686 <= 3)
      {
        v1555 = 0;
        v1556 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v1557 = *((_QWORD *)a3 + 3);
        if (v1557)
        {
          if (v684)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v1557 + 16))(v1557);
            v1556 = *(_QWORD *)a3;
            v1555 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v1555 = 0;
            v1556 = 0;
          }
        }
        goto LABEL_2630;
      }
      v688 = v685 + v686;
      *((_QWORD *)a3 + 2) = v688 + 4;
      if (!v685)
      {
        v1555 = v684;
        v1556 = 0;
LABEL_2630:
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v1558 = *((_QWORD *)a3 + 3);
        if (v1558 && v1555)
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v1558 + 16))(v1558, v1556, v1555);
        goto LABEL_2631;
      }
      v689 = ((v688 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v685;
      if (v684 >= v689 && v684 - v689 > 3)
      {
        *((_QWORD *)a3 + 2) = ((v688 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
        v691 = ((((v688 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v685;
        if (v684 >= v691 && v684 - v691 > 3)
        {
          v693 = (((v688 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
          *((_QWORD *)a3 + 2) = v693 + 4;
          v694 = ((v693 + 11) & 0xFFFFFFFFFFFFFFF8) - v685;
          if (v684 >= v694 && v684 - v694 > 7)
          {
            *((_QWORD *)a3 + 2) = ((v693 + 11) & 0xFFFFFFFFFFFFFFF8) + 8;
            WebCore::GraphicsContextGLANGLE::drawElements(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            goto LABEL_2564;
          }
        }
      }
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v1381 = *((_QWORD *)a3 + 3);
      if (v1381)
      {
        if (v684)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v1381 + 16))(v1381);
          v1382 = *(_QWORD *)a3;
          v1383 = *((_QWORD *)a3 + 1);
          v1384 = *((_QWORD *)a3 + 3);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          if (v1384)
          {
            if (v1383)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1384 + 16))(v1384, v1382);
          }
        }
      }
LABEL_2631:
      v1322 = *(_QWORD *)a3;
      v1351 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v1324 = *((_QWORD *)a3 + 3);
      if (!v1324)
        goto LABEL_2564;
      goto LABEL_2569;
    case 0x3CA:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v94 = *((_QWORD *)a3 + 1);
      v95 = *(_QWORD *)a3;
      v670 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v94 < v670 || v94 - v670 <= 3)
        goto LABEL_2273;
      v672 = v95 + v670;
      *((_QWORD *)a3 + 2) = v672 + 4;
      if (!v95)
        goto LABEL_3574;
      v673 = ((v672 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v673 || v94 - v673 <= 3)
        goto LABEL_1897;
      *((_QWORD *)a3 + 2) = ((v672 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
      v675 = ((((v672 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v675 || v94 - v675 <= 3)
        goto LABEL_1897;
      v677 = (((v672 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
      *((_QWORD *)a3 + 2) = v677 + 4;
      v678 = ((v677 + 11) & 0xFFFFFFFFFFFFFFF8) - v95;
      if (v94 < v678 || v94 - v678 <= 7)
        goto LABEL_1897;
      v680 = v95 + v678;
      *((_QWORD *)a3 + 2) = v680 + 8;
      v681 = ((v680 + 11) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v681 || v94 - v681 <= 3)
        goto LABEL_1897;
      *((_QWORD *)a3 + 2) = ((v680 + 11) & 0xFFFFFFFFFFFFFFFCLL) + 4;
      WebCore::GraphicsContextGLANGLE::drawElementsInstanced(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_2564;
    case 0x3CD:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3) & 0xFF00000000) != 0)
        WebCore::GraphicsContextGLANGLE::enable(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_2564;
    case 0x3CE:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3) & 0xFF00000000) != 0)
        WebCore::GraphicsContextGLANGLE::enableVertexAttribArray(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_2564;
    case 0x3D3:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)cf);
      if (!cf[8])
        goto LABEL_2465;
      (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 7) + 1968))(*((_QWORD *)this + 7), cf);
      if (!cf[8])
        goto LABEL_2465;
      v53 = *(WTF::StringImpl **)cf;
      *(_QWORD *)cf = 0;
      if (!v53)
        goto LABEL_2465;
      goto LABEL_1442;
    case 0x3D4:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      WebCore::GraphicsContextGLANGLE::finish(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_2564;
    case 0x3D5:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      WebCore::GraphicsContextGLANGLE::flush(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_2564;
    case 0x3D6:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
      IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>((uint64_t *)a3, cf);
      if (cf[16])
      {
        LODWORD(v2428) = *(_DWORD *)&cf[12];
        if (*(_DWORD *)&cf[12])
          LODWORD(v2428) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)&v2428);
        WebCore::GraphicsContextGLANGLE::framebufferRenderbuffer(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_2465;
    case 0x3D7:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v145 = *((_QWORD *)a3 + 1);
      v146 = *(_QWORD *)a3;
      v147 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v145 >= v147 && v145 - v147 > 3)
      {
        v149 = v146 + v147;
        *((_QWORD *)a3 + 2) = v149 + 4;
        if (v146)
        {
          v150 = ((v149 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v146;
          if (v145 >= v150 && v145 - v150 > 3)
          {
            *((_QWORD *)a3 + 2) = ((v149 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
            v152 = ((((v149 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v146;
            if (v145 >= v152 && v145 - v152 > 3)
            {
              v154 = v146 + v152;
              *((_QWORD *)a3 + 2) = v154 + 4;
              v155 = ((v154 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v146;
              if (v145 >= v155 && v145 - v155 > 3)
              {
                v157 = (int *)(v146 + v155);
                *((_QWORD *)a3 + 2) = v157 + 1;
                v158 = (((unint64_t)v157 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v146;
                if (v145 >= v158 && v145 - v158 > 3)
                {
                  v160 = *v157;
                  *((_QWORD *)a3 + 2) = v146 + v158 + 4;
                  LODWORD(v2423[0]) = v160;
                  if (v160)
                    LODWORD(v2423[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
                  WebCore::GraphicsContextGLANGLE::framebufferTexture2D(*((WebCore::GraphicsContextGLANGLE **)this + 7));
                  goto LABEL_2564;
                }
              }
            }
          }
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v1358 = *((_QWORD *)a3 + 3);
          if (v1358)
          {
            if (v145)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v1358 + 16))(v1358);
              v1359 = *(_QWORD *)a3;
              v1360 = *((_QWORD *)a3 + 1);
              v1361 = *((_QWORD *)a3 + 3);
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              if (v1361)
              {
                if (v1360)
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1361 + 16))(v1361, v1359);
              }
            }
          }
LABEL_2577:
          v1322 = *(_QWORD *)a3;
          v1351 = *((_QWORD *)a3 + 1);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v1324 = *((_QWORD *)a3 + 3);
          if (!v1324)
            goto LABEL_2564;
          goto LABEL_2569;
        }
        v1491 = v145;
        v1492 = 0;
      }
      else
      {
        v1491 = 0;
        v1492 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v1493 = *((_QWORD *)a3 + 3);
        if (v1493)
        {
          if (v145)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v1493 + 16))(v1493);
            v1492 = *(_QWORD *)a3;
            v1491 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v1491 = 0;
            v1492 = 0;
          }
        }
      }
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v1494 = *((_QWORD *)a3 + 3);
      if (v1494 && v1491)
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v1494 + 16))(v1494, v1492, v1491);
      goto LABEL_2577;
    case 0x3D9:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3) & 0xFF00000000) != 0)
        WebCore::GraphicsContextGLANGLE::frontFace(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_2564;
    case 0x3DA:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3) & 0xFF00000000) != 0)
        WebCore::GraphicsContextGLANGLE::generateMipmap(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_2564;
    case 0x3DB:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      IPC::Decoder::decode<std::tuple<float,float>>(a3);
      if (v369)
        WebCore::GraphicsContextGLANGLE::hint(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_2564;
    case 0x3DE:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v473 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v473 & 0xFF00000000) != 0)
        WebCore::GraphicsContextGLANGLE::lineWidth(*((WebCore::GraphicsContextGLANGLE **)this + 7), *(float *)&v473);
      goto LABEL_2564;
    case 0x3DF:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v466 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v466 & 0xFF00000000) != 0)
      {
        LODWORD(v2423[0]) = v466;
        if ((_DWORD)v466)
          LODWORD(v2423[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
        WebCore::GraphicsContextGLANGLE::linkProgram(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_2564;
    case 0x3E0:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v2428, a2 + 4);
      v187 = *((_QWORD *)a3 + 1);
      v188 = *(_QWORD *)a3;
      v331 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v187 < v331 || v187 - v331 <= 3)
        goto LABEL_2354;
      v333 = (unsigned int *)(v188 + v331);
      *((_QWORD *)a3 + 2) = v333 + 1;
      if (!v188)
        goto LABEL_3580;
      v334 = *v333;
      IPC::Decoder::decode<IPC::ArrayReferenceTuple<int,int>>((unint64_t *)v2423, (uint64_t *)a3);
      if (!BYTE8(v2424))
        goto LABEL_2648;
      *(_DWORD *)cf = v334;
      *(_OWORD *)&cf[8] = *(_OWORD *)v2423;
      *(_QWORD *)&v2413 = v2424;
      BYTE8(v2413) = 1;
      WebKit::RemoteGraphicsContextGL::multiDrawArraysANGLE((uint64_t)this, v334, (uint64_t)&cf[8]);
      goto LABEL_2649;
    case 0x3E1:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v2428, a2 + 4);
      v187 = *((_QWORD *)a3 + 1);
      v188 = *(_QWORD *)a3;
      v596 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v187 < v596 || v187 - v596 <= 3)
        goto LABEL_2354;
      v598 = (unsigned int *)(v188 + v596);
      *((_QWORD *)a3 + 2) = v598 + 1;
      if (!v188)
        goto LABEL_3580;
      v599 = *v598;
      IPC::Decoder::decode<IPC::ArrayReferenceTuple<int,int,int>>(v2423, (uint64_t *)a3);
      if (!v2425)
        goto LABEL_2648;
      *(_DWORD *)cf = v599;
      *(_OWORD *)&cf[8] = *(_OWORD *)v2423;
      v2413 = v2424;
      LOBYTE(v2414) = 1;
      WebKit::RemoteGraphicsContextGL::multiDrawArraysInstancedANGLE((uint64_t)this, v599, (uint64_t)&cf[8]);
      goto LABEL_2649;
    case 0x3E2:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
      v12 = *((_QWORD *)a3 + 1);
      v13 = *(_QWORD *)a3;
      v289 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v12 < v289 || v12 - v289 <= 3)
        goto LABEL_2338;
      v291 = (unsigned int *)(v13 + v289);
      *((_QWORD *)a3 + 2) = v291 + 1;
      if (!v13)
        goto LABEL_3577;
      v292 = (((unint64_t)v291 + 11) & 0xFFFFFFFFFFFFFFF8) - v13;
      if (v12 < v292 || v12 - v292 <= 7)
        goto LABEL_2461;
      v294 = *v291;
      v295 = *(_QWORD *)(((unint64_t)v291 + 11) & 0xFFFFFFFFFFFFFFF8);
      *((_QWORD *)a3 + 2) = (((unint64_t)v291 + 11) & 0xFFFFFFFFFFFFFFF8) + 8;
      if (!v295)
      {
        v297 = 0;
        v299 = 0;
        v301 = 0;
        v302 = 0;
LABEL_500:
        *(_DWORD *)cf = v294;
        *(_QWORD *)&cf[8] = v295;
        *(_QWORD *)&cf[16] = v297;
        *(_QWORD *)&v2413 = v299;
        *((_QWORD *)&v2413 + 1) = v301;
        v2414 = v302;
        LOBYTE(v2415) = 1;
        WebKit::RemoteGraphicsContextGL::multiDrawArraysInstancedBaseInstanceANGLE((uint64_t)this, v294, (uint64_t)&cf[8]);
        goto LABEL_2465;
      }
      if (!(v295 >> 62))
      {
        v296 = IPC::Decoder::decodeSpan<unsigned int>((uint64_t *)a3, v295);
        if (v296)
        {
          v297 = v296;
          v298 = IPC::Decoder::decodeSpan<unsigned int>((uint64_t *)a3, v295);
          if (v298)
          {
            v299 = v298;
            v300 = IPC::Decoder::decodeSpan<unsigned int>((uint64_t *)a3, v295);
            if (v300)
            {
              v301 = v300;
              v302 = IPC::Decoder::decodeSpan<unsigned int>((uint64_t *)a3, v295);
              if (v302)
                goto LABEL_500;
            }
          }
        }
      }
      goto LABEL_2462;
    case 0x3E3:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v2428, a2 + 4);
      v187 = *((_QWORD *)a3 + 1);
      v188 = *(_QWORD *)a3;
      v577 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v187 < v577 || v187 - v577 <= 3)
        goto LABEL_2354;
      v579 = (unsigned int *)(v188 + v577);
      *((_QWORD *)a3 + 2) = v579 + 1;
      if (!v188)
        goto LABEL_3580;
      v580 = *v579;
      IPC::Decoder::decode<IPC::ArrayReferenceTuple<int,int>>((unint64_t *)v2423, (uint64_t *)a3);
      if (!BYTE8(v2424))
        goto LABEL_2648;
      v193 = *((_QWORD *)a3 + 1);
      v194 = *(_QWORD *)a3;
      v581 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v193 < v581 || v193 - v581 <= 3)
        goto LABEL_2552;
      v582 = (int *)(v194 + v581);
      *((_QWORD *)a3 + 2) = v582 + 1;
      if (!v194)
        goto LABEL_3592;
      v583 = *v582;
      *(_DWORD *)cf = v580;
      *(_OWORD *)&cf[8] = *(_OWORD *)v2423;
      *(_QWORD *)&v2413 = v2424;
      DWORD2(v2413) = v583;
      LOBYTE(v2414) = 1;
      WebKit::RemoteGraphicsContextGL::multiDrawElementsANGLE((uint64_t)this, v580, (uint64_t)&cf[8]);
      goto LABEL_2649;
    case 0x3E4:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v2428, a2 + 4);
      v187 = *((_QWORD *)a3 + 1);
      v188 = *(_QWORD *)a3;
      v189 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v187 >= v189 && v187 - v189 > 3)
      {
        v191 = (unsigned int *)(v188 + v189);
        *((_QWORD *)a3 + 2) = v191 + 1;
        if (v188)
        {
          v192 = *v191;
          IPC::Decoder::decode<IPC::ArrayReferenceTuple<int,int,int>>(v2423, (uint64_t *)a3);
          if (!v2425)
            goto LABEL_2648;
          v193 = *((_QWORD *)a3 + 1);
          v194 = *(_QWORD *)a3;
          v195 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
          if (v193 < v195 || v193 - v195 <= 3)
          {
LABEL_2552:
            v1468 = 0;
            v1469 = 0;
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v1470 = *((_QWORD *)a3 + 3);
            if (v1470)
            {
              if (v193)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v1470 + 16))(v1470);
                v1469 = *(_QWORD *)a3;
                v1468 = *((_QWORD *)a3 + 1);
              }
              else
              {
                v1468 = 0;
                v1469 = 0;
              }
            }
          }
          else
          {
            v196 = (int *)(v194 + v195);
            *((_QWORD *)a3 + 2) = v196 + 1;
            if (v194)
            {
              v197 = *v196;
              *(_DWORD *)cf = v192;
              *(_OWORD *)&cf[8] = *(_OWORD *)v2423;
              v2413 = v2424;
              LODWORD(v2414) = v197;
              LOBYTE(v2415) = 1;
              WebKit::RemoteGraphicsContextGL::multiDrawElementsInstancedANGLE((uint64_t)this, v192, (uint64_t)&cf[8]);
              goto LABEL_2649;
            }
LABEL_3592:
            v1468 = v193;
            v1469 = v194;
          }
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v1471 = *((_QWORD *)a3 + 3);
          if (v1471 && v1468)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1471 + 16))(v1471, v1469);
LABEL_2648:
          v1571 = *(_QWORD *)a3;
          v1572 = *((_QWORD *)a3 + 1);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v1573 = *((_QWORD *)a3 + 3);
          if (v1573 && v1572)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1573 + 16))(v1573, v1571);
LABEL_2649:
          v1421 = (unsigned __int8 ***)&v2428;
          goto LABEL_2565;
        }
LABEL_3580:
        v1354 = v187;
        v1355 = v188;
      }
      else
      {
LABEL_2354:
        v1354 = 0;
        v1355 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v1356 = *((_QWORD *)a3 + 3);
        if (v1356)
        {
          if (v187)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v1356 + 16))(v1356, v188, v187);
            v1355 = *(_QWORD *)a3;
            v1354 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v1354 = 0;
            v1355 = 0;
          }
        }
      }
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v1357 = *((_QWORD *)a3 + 3);
      if (v1357)
      {
LABEL_2356:
        if (v1354)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1357 + 16))(v1357, v1355);
      }
      goto LABEL_2648;
    case 0x3E5:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
      v12 = *((_QWORD *)a3 + 1);
      v13 = *(_QWORD *)a3;
      v630 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v12 < v630 || v12 - v630 <= 3)
        goto LABEL_2338;
      v632 = (unsigned int *)(v13 + v630);
      *((_QWORD *)a3 + 2) = v632 + 1;
      if (!v13)
        goto LABEL_3577;
      v633 = (((unint64_t)v632 + 11) & 0xFFFFFFFFFFFFFFF8) - v13;
      if (v12 < v633 || v12 - v633 <= 7)
      {
LABEL_2461:
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v1418 = *((_QWORD *)a3 + 3);
        if (v1418)
        {
          if (v12)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v1418 + 16))(v1418);
            v2061 = *(_QWORD *)a3;
            v2062 = *((_QWORD *)a3 + 1);
            v2063 = *((_QWORD *)a3 + 3);
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            if (v2063)
            {
              if (v2062)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2063 + 16))(v2063, v2061);
            }
          }
        }
        goto LABEL_2462;
      }
      v635 = *v632;
      v636 = (((unint64_t)v632 + 11) & 0xFFFFFFFFFFFFFFF8) + 8;
      v637 = *(_QWORD *)(v13 + v633);
      *((_QWORD *)a3 + 2) = v636;
      if (v637)
      {
        if (v637 >> 62)
          goto LABEL_2462;
        v638 = IPC::Decoder::decodeSpan<unsigned int>((uint64_t *)a3, v637);
        if (!v638)
          goto LABEL_2462;
        v639 = v638;
        v640 = IPC::Decoder::decodeSpan<unsigned int>((uint64_t *)a3, v637);
        if (!v640)
          goto LABEL_2462;
        v641 = v640;
        v642 = IPC::Decoder::decodeSpan<unsigned int>((uint64_t *)a3, v637);
        if (!v642)
          goto LABEL_2462;
        v643 = v642;
        v644 = IPC::Decoder::decodeSpan<unsigned int>((uint64_t *)a3, v637);
        if (!v644)
          goto LABEL_2462;
        v645 = (WTF::StringImpl *)v644;
        v646 = IPC::Decoder::decodeSpan<unsigned int>((uint64_t *)a3, v637);
        if (!v646)
          goto LABEL_2462;
        v647 = v637 & 0xFFFFFFFFFFFFFF00;
        v648 = v637;
        v12 = *((_QWORD *)a3 + 1);
        v636 = *((_QWORD *)a3 + 2);
        v13 = *(_QWORD *)a3;
      }
      else
      {
        v647 = 0;
        v639 = 0;
        v641 = 0;
        v643 = 0;
        v645 = 0;
        v648 = 0;
        v646 = 0;
      }
      v649 = ((v636 + 3) & 0xFFFFFFFFFFFFFFFCLL) - v13;
      if (v12 < v649 || v12 - v649 <= 3)
        goto LABEL_2338;
      v651 = (unsigned int *)(v13 + v649);
      *((_QWORD *)a3 + 2) = v13 + v649 + 4;
      v652 = v12;
      v653 = v13;
      if (!v13)
        goto LABEL_2339;
      v654 = *v651;
      *(_DWORD *)cf = v635;
      *(_QWORD *)&cf[8] = v648 | v647;
      *(_QWORD *)&cf[16] = v639;
      *(_QWORD *)&v2413 = v641;
      *((_QWORD *)&v2413 + 1) = v643;
      v2414 = (uint64_t)v645;
      v2415 = v646;
      v2416 = v654;
      LOBYTE(v2418) = 1;
      WebKit::RemoteGraphicsContextGL::multiDrawElementsInstancedBaseVertexBaseInstanceANGLE((uint64_t)this, v635, (uint64_t)&cf[8]);
      goto LABEL_2465;
    case 0x3E7:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v618 = *((_QWORD *)a3 + 1);
      v619 = *(_QWORD *)a3;
      v620 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v618 < v620 || v618 - v620 <= 3)
      {
        v1551 = 0;
        v1552 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v1553 = *((_QWORD *)a3 + 3);
        if (v1553)
        {
          if (v618)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v1553 + 16))(v1553);
            v1552 = *(_QWORD *)a3;
            v1551 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v1551 = 0;
            v1552 = 0;
          }
        }
        goto LABEL_2626;
      }
      v622 = v619 + v620;
      *((_QWORD *)a3 + 2) = v622 + 4;
      if (!v619)
      {
        v1551 = v618;
        v1552 = 0;
LABEL_2626:
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v1554 = *((_QWORD *)a3 + 3);
        if (v1554 && v1551)
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v1554 + 16))(v1554, v1552, v1551);
        goto LABEL_2662;
      }
      v623 = ((v622 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v619;
      if (v618 >= v623 && v618 - v623 > 3)
      {
        *((_QWORD *)a3 + 2) = ((v622 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
        WebCore::GraphicsContextGLANGLE::pixelStorei(*((WebCore::GraphicsContextGLANGLE **)this + 7));
        goto LABEL_2564;
      }
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v1578 = *((_QWORD *)a3 + 3);
      if (v1578)
      {
        if (v618)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v1578 + 16))(v1578);
          v2080 = *(_QWORD *)a3;
          v2081 = *((_QWORD *)a3 + 1);
          v2082 = *((_QWORD *)a3 + 3);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          if (v2082)
          {
            if (v2081)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2082 + 16))(v2082, v2080);
          }
        }
      }
LABEL_2662:
      v1322 = *(_QWORD *)a3;
      v1351 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v1324 = *((_QWORD *)a3 + 3);
      if (!v1324)
        goto LABEL_2564;
      goto LABEL_2569;
    case 0x3E9:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v185 = IPC::Decoder::decode<std::tuple<float,float>>(a3);
      if (v186)
        WebCore::GraphicsContextGLANGLE::polygonOffset(*((WebCore::GraphicsContextGLANGLE **)this + 7), *(float *)&v185, *((float *)&v185 + 1));
      goto LABEL_2564;
    case 0x3EE:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
      IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)a3, (uint64_t)cf);
      if (!cf[16])
        goto LABEL_2464;
      v12 = *((_QWORD *)a3 + 1);
      v13 = *(_QWORD *)a3;
      v657 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v12 < v657 || v12 - v657 <= 3)
        goto LABEL_2338;
      v659 = v13 + v657;
      *((_QWORD *)a3 + 2) = v659 + 4;
      if (!v13)
        goto LABEL_3577;
      v660 = ((v659 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
      if (v12 < v660 || v12 - v660 <= 3)
        goto LABEL_2159;
      *((_QWORD *)a3 + 2) = ((v659 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
      v662 = ((((v659 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) - v13;
      if (v12 < v662 || v12 - v662 <= 7)
        goto LABEL_2159;
      v664 = v13 + v662;
      *((_QWORD *)a3 + 2) = v664 + 8;
      v665 = ((v664 + 11) & 0xFFFFFFFFFFFFFFFCLL) - v13;
      if (v12 < v665 || v12 - v665 <= 3)
        goto LABEL_2159;
      v667 = v13 + v665;
      *((_QWORD *)a3 + 2) = v667 + 4;
      v668 = ((v667 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
      if (v12 < v668 || v12 - v668 <= 3)
        goto LABEL_2159;
      *((_QWORD *)a3 + 2) = ((v667 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
      WebCore::GraphicsContextGLANGLE::readPixelsBufferObject(*((WebCore::GraphicsContextGLANGLE **)this + 7), *(IntRect *)cf);
      goto LABEL_2465;
    case 0x3EF:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v715 = *((_QWORD *)a3 + 1);
      v716 = *(_QWORD *)a3;
      v717 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v715 < v717 || v715 - v717 <= 3)
      {
        v1559 = 0;
        v1560 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v1561 = *((_QWORD *)a3 + 3);
        if (v1561)
        {
          if (v715)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v1561 + 16))(v1561);
            v1560 = *(_QWORD *)a3;
            v1559 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v1559 = 0;
            v1560 = 0;
          }
        }
        goto LABEL_2634;
      }
      v719 = v716 + v717;
      *((_QWORD *)a3 + 2) = v719 + 4;
      if (!v716)
      {
        v1559 = v715;
        v1560 = 0;
LABEL_2634:
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v1562 = *((_QWORD *)a3 + 3);
        if (v1562 && v1559)
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v1562 + 16))(v1562, v1560, v1559);
        goto LABEL_2635;
      }
      v720 = ((v719 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v716;
      if (v715 >= v720 && v715 - v720 > 3)
      {
        *((_QWORD *)a3 + 2) = ((v719 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
        v722 = ((((v719 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v716;
        if (v715 >= v722 && v715 - v722 > 3)
        {
          v724 = (((v719 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
          *((_QWORD *)a3 + 2) = v724 + 4;
          v725 = ((v724 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v716;
          if (v715 >= v725 && v715 - v725 > 3)
          {
            *((_QWORD *)a3 + 2) = ((v724 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
            WebCore::GraphicsContextGLANGLE::renderbufferStorage(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            goto LABEL_2564;
          }
        }
      }
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v1385 = *((_QWORD *)a3 + 3);
      if (v1385)
      {
        if (v715)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v1385 + 16))(v1385);
          v1386 = *(_QWORD *)a3;
          v1387 = *((_QWORD *)a3 + 1);
          v1388 = *((_QWORD *)a3 + 3);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          if (v1388)
          {
            if (v1387)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1388 + 16))(v1388, v1386);
          }
        }
      }
LABEL_2635:
      v1322 = *(_QWORD *)a3;
      v1351 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v1324 = *((_QWORD *)a3 + 3);
      if (!v1324)
        goto LABEL_2564;
      goto LABEL_2569;
    case 0x3F2:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v56 = IPC::Decoder::decode<std::tuple<int,int>>((uint64_t *)a3);
      if (v57)
        WebKit::RemoteGraphicsContextGL::reshape(this, v56, SHIDWORD(v56));
      goto LABEL_2564;
    case 0x3F4:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v306 = *((_QWORD *)a3 + 1);
      v307 = *(_QWORD *)a3;
      v308 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v306 < v308 || v306 - v308 <= 3)
      {
        v1502 = 0;
        v1503 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v1504 = *((_QWORD *)a3 + 3);
        if (!v1504)
          goto LABEL_2642;
        if (!v306)
        {
LABEL_3645:
          v1502 = 0;
          v1503 = 0;
          goto LABEL_2642;
        }
        goto LABEL_3227;
      }
      v310 = v307 + v308;
      *((_QWORD *)a3 + 2) = v310 + 4;
      if (!v307)
        goto LABEL_3591;
      if (v306 <= v310 + 4 - v307)
      {
        v1502 = 0;
        v1503 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v1567 = *((_QWORD *)a3 + 3);
        if (!v1567)
          goto LABEL_2642;
        if (!v306)
          goto LABEL_3645;
        (*(void (**)(uint64_t))(*(_QWORD *)v1567 + 16))(v1567);
        v1502 = 0;
        v2064 = *((_QWORD *)a3 + 1);
        v1504 = *((_QWORD *)a3 + 3);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v1503 = 0;
        if (v1504 && v2064)
        {
LABEL_3227:
          (*(void (**)(uint64_t))(*(_QWORD *)v1504 + 16))(v1504);
          v1503 = *(_QWORD *)a3;
          v1502 = *((_QWORD *)a3 + 1);
        }
      }
      else
      {
        v311 = *(float *)v310;
        *((_QWORD *)a3 + 2) = v310 + 5;
        if (*(unsigned __int8 *)(v310 + 4) < 2u)
        {
          WebCore::GraphicsContextGLANGLE::sampleCoverage(*((WebCore::GraphicsContextGLANGLE **)this + 7), v311);
          goto LABEL_2564;
        }
LABEL_3591:
        v1502 = v306;
        v1503 = v307;
      }
LABEL_2642:
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v1568 = *((_QWORD *)a3 + 3);
      if (v1568 && v1502)
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v1568 + 16))(v1568, v1503, v1502);
      v1322 = *(_QWORD *)a3;
      v1351 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v1324 = *((_QWORD *)a3 + 3);
      if (!v1324)
        goto LABEL_2564;
LABEL_2569:
      if (!v1351)
        goto LABEL_2564;
      goto LABEL_2551;
    case 0x3F7:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
      IPC::Decoder::decode<std::tuple<int,int,int,int>>((uint64_t)cf, a3);
      if (cf[16])
        WebCore::GraphicsContextGLANGLE::scissor(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_2465;
    case 0x3F9:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
      IPC::Decoder::decode<std::tuple<WebCore::SharedMemoryHandle>>(a3, (uint64_t)cf);
      if (!cf[16])
        goto LABEL_2465;
      WebKit::SharedVideoFrameReader::setSharedMemory((uint64_t)this + 96);
      if (!cf[16])
        goto LABEL_2465;
      goto LABEL_1133;
    case 0x3FA:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
      IPC::Decoder::decode<std::tuple<IPC::Semaphore>>(a3, (uint64_t)cf);
      if (!cf[8])
        goto LABEL_2465;
      std::optional<IPC::Semaphore>::operator=[abi:sn180100]<IPC::Semaphore,void>((WebKit::RemoteGraphicsContextGL *)((char *)this + 112), (IPC::Semaphore *)cf);
      if (!cf[8])
        goto LABEL_2465;
      IPC::Semaphore::destroy((IPC::Semaphore *)cf);
LABEL_1133:
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)cf);
      goto LABEL_2465;
    case 0x3FB:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
      IPC::Decoder::decode<std::tuple<int,WTF::String>>((uint64_t *)a3, cf);
      if (cf[16])
      {
        LODWORD(v2428) = *(_DWORD *)cf;
        if (*(_DWORD *)cf)
        {
          v546 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)&v2428);
          LODWORD(v2428) = v546;
        }
        else
        {
          v546 = 0;
        }
        WebCore::GraphicsContextGLANGLE::shaderSource(*((WebCore::GraphicsContextGLANGLE **)this + 7), v546, (const WTF::String *)&cf[8]);
        if (cf[16])
        {
          v53 = *(WTF::StringImpl **)&cf[8];
          *(_QWORD *)&cf[8] = 0;
          if (v53)
          {
LABEL_1442:
            if (*(_DWORD *)v53 == 2)
              WTF::StringImpl::destroy(v53, v52);
            else
              *(_DWORD *)v53 -= 2;
          }
        }
      }
      goto LABEL_2465;
    case 0x3FC:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v261 = *((_QWORD *)a3 + 1);
      v262 = *(_QWORD *)a3;
      v263 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
      if (v261 <= v263)
      {
        v1477 = 0;
        v1478 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v1479 = *((_QWORD *)a3 + 3);
        if (v1479)
        {
          if (v261)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v1479 + 16))(v1479, v262, v261);
            v1478 = *(_QWORD *)a3;
            v1477 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v1477 = 0;
            v1478 = 0;
          }
        }
      }
      else
      {
        v264 = (unsigned __int8 *)(v262 + v263);
        *((_QWORD *)a3 + 2) = v264 + 1;
        if (v262)
        {
          v265 = *v264;
          if (v265 < 3)
          {
            WebKit::RemoteGraphicsContextGL::simulateEventForTesting((uint64_t)this, v265);
            goto LABEL_2564;
          }
LABEL_2563:
          v1481 = *(_QWORD *)a3;
          v1482 = *((_QWORD *)a3 + 1);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v1483 = *((_QWORD *)a3 + 3);
          if (!v1483)
            goto LABEL_2564;
          if (!v1482)
            goto LABEL_2564;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1483 + 16))(v1483, v1481);
          v1322 = *(_QWORD *)a3;
          v1351 = *((_QWORD *)a3 + 1);
          v1324 = *((_QWORD *)a3 + 3);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          if (!v1324)
            goto LABEL_2564;
          goto LABEL_2569;
        }
        v1477 = v261;
        v1478 = 0;
      }
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v1480 = *((_QWORD *)a3 + 3);
      if (v1480 && v1477)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1480 + 16))(v1480, v1478);
      goto LABEL_2563;
    case 0x3FD:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v59 = *((_QWORD *)a3 + 1);
      v60 = *(_QWORD *)a3;
      v61 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v59 >= v61 && v59 - v61 > 3)
      {
        v63 = v60 + v61;
        *((_QWORD *)a3 + 2) = v63 + 4;
        if (v60)
        {
          v64 = ((v63 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v60;
          if (v59 >= v64 && v59 - v64 > 3)
          {
            v66 = (v63 + 7) & 0xFFFFFFFFFFFFFFFCLL;
            *((_QWORD *)a3 + 2) = v66 + 4;
            v67 = ((v66 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v60;
            if (v59 >= v67 && v59 - v67 > 3)
            {
              v69 = (unsigned int *)((v66 + 7) & 0xFFFFFFFFFFFFFFFCLL);
              v70 = *v69;
              *((_QWORD *)a3 + 2) = v69 + 1;
              v71 = v70 | 0x100000000;
              goto LABEL_123;
            }
          }
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v1422 = *((_QWORD *)a3 + 3);
          if (v1422)
          {
            if (v59)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v1422 + 16))(v1422);
              v1423 = *(_QWORD *)a3;
              v1424 = *((_QWORD *)a3 + 1);
              v1425 = *((_QWORD *)a3 + 3);
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              if (v1425)
              {
                if (v1424)
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1425 + 16))(v1425, v1423);
              }
            }
          }
LABEL_2573:
          v1488 = *(_QWORD *)a3;
          v1489 = *((_QWORD *)a3 + 1);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v1490 = *((_QWORD *)a3 + 3);
          if (v1490 && v1489)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1490 + 16))(v1490, v1488);
          v71 = 0;
LABEL_123:
          if ((v71 & 0xFF00000000) != 0)
            WebCore::GraphicsContextGLANGLE::stencilFunc(*((WebCore::GraphicsContextGLANGLE **)this + 7));
          goto LABEL_2564;
        }
        v1484 = v59;
        v1485 = 0;
      }
      else
      {
        v1484 = 0;
        v1485 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v1486 = *((_QWORD *)a3 + 3);
        if (v1486)
        {
          if (v59)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v1486 + 16))(v1486);
            v1485 = *(_QWORD *)a3;
            v1484 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v1484 = 0;
            v1485 = 0;
          }
        }
      }
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v1487 = *((_QWORD *)a3 + 3);
      if (v1487 && v1484)
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v1487 + 16))(v1487, v1485, v1484);
      goto LABEL_2573;
    case 0x3FE:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v584 = *((_QWORD *)a3 + 1);
      v585 = *(_QWORD *)a3;
      v586 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v584 >= v586 && v584 - v586 > 3)
      {
        v588 = v585 + v586;
        *((_QWORD *)a3 + 2) = v588 + 4;
        if (v585)
        {
          v589 = ((v588 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v585;
          if (v584 >= v589 && v584 - v589 > 3)
          {
            *((_QWORD *)a3 + 2) = ((v588 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
            v591 = ((((v588 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v585;
            if (v584 >= v591 && v584 - v591 > 3)
            {
              v593 = (((v588 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
              *((_QWORD *)a3 + 2) = v593 + 4;
              v594 = ((v593 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v585;
              if (v584 >= v594 && v584 - v594 > 3)
              {
                *((_QWORD *)a3 + 2) = ((v593 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
                WebCore::GraphicsContextGLANGLE::stencilFuncSeparate(*((WebCore::GraphicsContextGLANGLE **)this + 7));
                goto LABEL_2564;
              }
            }
          }
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v1373 = *((_QWORD *)a3 + 3);
          if (v1373)
          {
            if (v584)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v1373 + 16))(v1373);
              v1374 = *(_QWORD *)a3;
              v1375 = *((_QWORD *)a3 + 1);
              v1376 = *((_QWORD *)a3 + 3);
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              if (v1376)
              {
                if (v1375)
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1376 + 16))(v1376, v1374);
              }
            }
          }
LABEL_2619:
          v1322 = *(_QWORD *)a3;
          v1351 = *((_QWORD *)a3 + 1);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v1324 = *((_QWORD *)a3 + 3);
          if (!v1324)
            goto LABEL_2564;
          goto LABEL_2569;
        }
        v1543 = v584;
        v1544 = 0;
      }
      else
      {
        v1543 = 0;
        v1544 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v1545 = *((_QWORD *)a3 + 3);
        if (v1545)
        {
          if (v584)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v1545 + 16))(v1545);
            v1544 = *(_QWORD *)a3;
            v1543 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v1543 = 0;
            v1544 = 0;
          }
        }
      }
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v1546 = *((_QWORD *)a3 + 3);
      if (v1546 && v1543)
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v1546 + 16))(v1546, v1544, v1543);
      goto LABEL_2619;
    case 0x3FF:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3) & 0xFF00000000) != 0)
        WebCore::GraphicsContextGLANGLE::stencilMask(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_2564;
    case 0x400:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      IPC::Decoder::decode<std::tuple<float,float>>(a3);
      if (v330)
        WebCore::GraphicsContextGLANGLE::stencilMaskSeparate(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_2564;
    case 0x401:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,unsigned int>>((uint64_t *)a3);
      if ((v556 & 0xFF00000000) != 0)
        WebCore::GraphicsContextGLANGLE::stencilOp(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_2564;
    case 0x402:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
      IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>((uint64_t *)a3, cf);
      if (cf[16])
        WebCore::GraphicsContextGLANGLE::stencilOpSeparate(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_2465;
    case 0x403:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
      v12 = *((_QWORD *)a3 + 1);
      v13 = *(_QWORD *)a3;
      v163 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v12 < v163 || v12 - v163 <= 3)
        goto LABEL_2338;
      v165 = v13 + v163;
      *((_QWORD *)a3 + 2) = v165 + 4;
      if (!v13)
        goto LABEL_3577;
      v166 = ((v165 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
      if (v12 < v166 || v12 - v166 <= 3)
        goto LABEL_2159;
      *((_QWORD *)a3 + 2) = ((v165 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
      v168 = ((((v165 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
      if (v12 < v168 || v12 - v168 <= 3)
        goto LABEL_2159;
      v170 = v13 + v168;
      *((_QWORD *)a3 + 2) = v170 + 4;
      v171 = ((v170 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
      if (v12 < v171 || v12 - v171 <= 3)
        goto LABEL_2159;
      v173 = v13 + v171;
      *((_QWORD *)a3 + 2) = v173 + 4;
      v174 = ((v173 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
      if (v12 < v174 || v12 - v174 <= 3)
        goto LABEL_2159;
      v176 = v13 + v174;
      *((_QWORD *)a3 + 2) = v176 + 4;
      v177 = ((v176 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
      if (v12 < v177 || v12 - v177 <= 3)
        goto LABEL_2159;
      v179 = v13 + v177;
      *((_QWORD *)a3 + 2) = v179 + 4;
      v180 = ((v179 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
      if (v12 < v180 || v12 - v180 <= 3)
        goto LABEL_2159;
      v182 = v13 + v180;
      *((_QWORD *)a3 + 2) = v182 + 4;
      v183 = ((v182 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
      if (v12 < v183 || v12 - v183 <= 3)
        goto LABEL_2159;
      *((_QWORD *)a3 + 2) = v13 + v183 + 4;
      IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>((uint64_t *)a3, (uint64_t)cf);
      if (!cf[16])
        goto LABEL_2464;
      WebCore::GraphicsContextGLANGLE::texImage2D();
      goto LABEL_2465;
    case 0x404:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v94 = *((_QWORD *)a3 + 1);
      v95 = *(_QWORD *)a3;
      v209 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v94 < v209 || v94 - v209 <= 3)
        goto LABEL_2273;
      v211 = (unsigned int *)(v95 + v209);
      *((_QWORD *)a3 + 2) = v211 + 1;
      if (!v95)
        goto LABEL_3574;
      v212 = (((unint64_t)v211 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v212 || v94 - v212 <= 3)
        goto LABEL_1897;
      v214 = *v211;
      *((_QWORD *)a3 + 2) = v95 + v212 + 4;
      v216 = v95 + v212 + 7;
      v215 = *(_DWORD *)(v95 + v212);
      v217 = (v216 & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v217 || v94 - v217 <= 3)
        goto LABEL_1897;
      v219 = (unsigned int *)(v95 + v217);
      *((_QWORD *)a3 + 2) = v219 + 1;
      v220 = *v219;
      v221 = (((unint64_t)v219 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v221 || v94 - v221 <= 3)
        goto LABEL_1897;
      v223 = (int *)(v95 + v221);
      *((_QWORD *)a3 + 2) = v223 + 1;
      v224 = *v223;
      v225 = (((unint64_t)v223 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v225 || v94 - v225 <= 3)
        goto LABEL_1897;
      v227 = (int *)(v95 + v225);
      *((_QWORD *)a3 + 2) = v227 + 1;
      v228 = *v227;
      v229 = (((unint64_t)v227 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v229 || v94 - v229 <= 3)
        goto LABEL_1897;
      v231 = (int *)(v95 + v229);
      *((_QWORD *)a3 + 2) = v231 + 1;
      v232 = *v231;
      v233 = (((unint64_t)v231 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v233 || v94 - v233 <= 3)
        goto LABEL_1897;
      v235 = (unsigned int *)(v95 + v233);
      *((_QWORD *)a3 + 2) = v235 + 1;
      v236 = *v235;
      v237 = (((unint64_t)v235 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v237 || v94 - v237 <= 3)
        goto LABEL_1897;
      v239 = (unsigned int *)(v95 + v237);
      *((_QWORD *)a3 + 2) = v239 + 1;
      v240 = (((unint64_t)v239 + 11) & 0xFFFFFFFFFFFFFFF8) - v95;
      if (v94 < v240 || v94 - v240 <= 7)
        goto LABEL_1897;
      v242 = *v239;
      v243 = (uint64_t *)(v95 + v240);
      v244 = *v243;
      *((_QWORD *)a3 + 2) = v243 + 1;
      WebCore::GraphicsContextGLANGLE::texImage2D(*((WebCore::GraphicsContextGLANGLE **)this + 7), v214, v215, v220, v224, v228, v232, v236, v242, v244);
      goto LABEL_2564;
    case 0x407:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,float>>(a3);
      if ((v208 & 0xFF00000000) != 0)
        WebCore::GraphicsContextGLANGLE::texParameterf(*((WebCore::GraphicsContextGLANGLE **)this + 7), *(float *)&v208);
      goto LABEL_2564;
    case 0x408:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,int>>(a3);
      if ((v260 & 0xFF00000000) != 0)
        WebCore::GraphicsContextGLANGLE::texParameteri(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_2564;
    case 0x40B:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
      v12 = *((_QWORD *)a3 + 1);
      v13 = *(_QWORD *)a3;
      v266 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v12 < v266 || v12 - v266 <= 3)
        goto LABEL_2338;
      v268 = v13 + v266;
      *((_QWORD *)a3 + 2) = v268 + 4;
      if (!v13)
        goto LABEL_3577;
      v269 = ((v268 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
      if (v12 < v269 || v12 - v269 <= 3)
        goto LABEL_2159;
      *((_QWORD *)a3 + 2) = ((v268 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
      v271 = ((((v268 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
      if (v12 < v271 || v12 - v271 <= 3)
        goto LABEL_2159;
      v273 = v13 + v271;
      *((_QWORD *)a3 + 2) = v273 + 4;
      v274 = ((v273 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
      if (v12 < v274 || v12 - v274 <= 3)
        goto LABEL_2159;
      v276 = v13 + v274;
      *((_QWORD *)a3 + 2) = v276 + 4;
      v277 = ((v276 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
      if (v12 < v277 || v12 - v277 <= 3)
        goto LABEL_2159;
      v279 = v13 + v277;
      *((_QWORD *)a3 + 2) = v279 + 4;
      v280 = ((v279 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
      if (v12 < v280 || v12 - v280 <= 3)
        goto LABEL_2159;
      v282 = v13 + v280;
      *((_QWORD *)a3 + 2) = v282 + 4;
      v283 = ((v282 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
      if (v12 < v283 || v12 - v283 <= 3)
        goto LABEL_2159;
      v285 = v13 + v283;
      *((_QWORD *)a3 + 2) = v285 + 4;
      v286 = ((v285 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
      if (v12 < v286 || v12 - v286 <= 3)
        goto LABEL_2159;
      *((_QWORD *)a3 + 2) = v13 + v286 + 4;
      IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>((uint64_t *)a3, (uint64_t)cf);
      if (!cf[16])
        goto LABEL_2464;
      WebCore::GraphicsContextGLANGLE::texSubImage2D();
      goto LABEL_2465;
    case 0x40C:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v94 = *((_QWORD *)a3 + 1);
      v95 = *(_QWORD *)a3;
      v510 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v94 < v510 || v94 - v510 <= 3)
        goto LABEL_2273;
      v512 = (unsigned int *)(v95 + v510);
      *((_QWORD *)a3 + 2) = v512 + 1;
      if (!v95)
        goto LABEL_3574;
      v513 = (((unint64_t)v512 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v513 || v94 - v513 <= 3)
        goto LABEL_1897;
      v515 = *v512;
      *((_QWORD *)a3 + 2) = v95 + v513 + 4;
      v517 = v95 + v513 + 7;
      v516 = *(_DWORD *)(v95 + v513);
      v518 = (v517 & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v518 || v94 - v518 <= 3)
        goto LABEL_1897;
      v520 = (int *)(v95 + v518);
      *((_QWORD *)a3 + 2) = v520 + 1;
      v521 = *v520;
      v522 = (((unint64_t)v520 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v522 || v94 - v522 <= 3)
        goto LABEL_1897;
      v524 = (int *)(v95 + v522);
      *((_QWORD *)a3 + 2) = v524 + 1;
      v525 = *v524;
      v526 = (((unint64_t)v524 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v526 || v94 - v526 <= 3)
        goto LABEL_1897;
      v528 = (int *)(v95 + v526);
      *((_QWORD *)a3 + 2) = v528 + 1;
      v529 = *v528;
      v530 = (((unint64_t)v528 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v530 || v94 - v530 <= 3)
        goto LABEL_1897;
      v532 = (int *)(v95 + v530);
      *((_QWORD *)a3 + 2) = v532 + 1;
      v533 = *v532;
      v534 = (((unint64_t)v532 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v534 || v94 - v534 <= 3)
        goto LABEL_1897;
      v536 = (unsigned int *)(v95 + v534);
      *((_QWORD *)a3 + 2) = v536 + 1;
      v537 = *v536;
      v538 = (((unint64_t)v536 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v538 || v94 - v538 <= 3)
        goto LABEL_1897;
      v540 = (unsigned int *)(v95 + v538);
      *((_QWORD *)a3 + 2) = v540 + 1;
      v541 = (((unint64_t)v540 + 11) & 0xFFFFFFFFFFFFFFF8) - v95;
      if (v94 < v541 || v94 - v541 <= 7)
        goto LABEL_1897;
      v543 = *v540;
      v544 = (uint64_t *)(v95 + v541);
      v545 = *v544;
      *((_QWORD *)a3 + 2) = v544 + 1;
      WebCore::GraphicsContextGLANGLE::texSubImage2D(*((WebCore::GraphicsContextGLANGLE **)this + 7), v515, v516, v521, v525, v529, v533, v537, v543, v545);
      goto LABEL_2564;
    case 0x410:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v430 = *((_QWORD *)a3 + 1);
      v431 = *(_QWORD *)a3;
      v432 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v430 >= v432 && v430 - v432 > 3)
      {
        v434 = v431 + v432;
        *((_QWORD *)a3 + 2) = v434 + 4;
        if (v431)
        {
          v435 = ((v434 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v431;
          if (v430 >= v435 && v430 - v435 > 3)
          {
            v437 = (float *)((v434 + 7) & 0xFFFFFFFFFFFFFFFCLL);
            v438 = *v437;
            *((_QWORD *)a3 + 2) = v437 + 1;
            WebCore::GraphicsContextGLANGLE::uniform1f(*((WebCore::GraphicsContextGLANGLE **)this + 7), v438);
            goto LABEL_2564;
          }
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v1576 = *((_QWORD *)a3 + 3);
          if (v1576)
          {
            if (v430)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v1576 + 16))(v1576);
              v2074 = *(_QWORD *)a3;
              v2075 = *((_QWORD *)a3 + 1);
              v2076 = *((_QWORD *)a3 + 3);
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              if (v2076)
              {
                if (v2075)
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2076 + 16))(v2076, v2074);
              }
            }
          }
LABEL_2657:
          v1322 = *(_QWORD *)a3;
          v1351 = *((_QWORD *)a3 + 1);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v1324 = *((_QWORD *)a3 + 3);
          if (!v1324)
            goto LABEL_2564;
          goto LABEL_2569;
        }
        v1520 = v430;
        v1521 = 0;
      }
      else
      {
        v1520 = 0;
        v1521 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v1522 = *((_QWORD *)a3 + 3);
        if (v1522)
        {
          if (v430)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v1522 + 16))(v1522);
            v1521 = *(_QWORD *)a3;
            v1520 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v1520 = 0;
            v1521 = 0;
          }
        }
      }
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v1523 = *((_QWORD *)a3 + 3);
      if (v1523 && v1520)
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v1523 + 16))(v1523, v1521, v1520);
      goto LABEL_2657;
    case 0x411:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
      IPC::Decoder::decode<std::tuple<int,std::span<float const,18446744073709551615ul>>>((uint64_t)cf, (uint64_t *)a3);
      if ((_BYTE)v2413)
        WebCore::GraphicsContextGLANGLE::uniform1fv();
      goto LABEL_2465;
    case 0x412:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      IPC::Decoder::decode<std::tuple<int,int>>((uint64_t *)a3);
      if (v616)
        WebCore::GraphicsContextGLANGLE::uniform1i(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_2564;
    case 0x413:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
      IPC::Decoder::decode<std::tuple<int,std::span<int const,18446744073709551615ul>>>((uint64_t)cf, (uint64_t *)a3);
      if ((_BYTE)v2413)
        WebCore::GraphicsContextGLANGLE::uniform1iv();
      goto LABEL_2465;
    case 0x416:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v245 = *((_QWORD *)a3 + 1);
      v246 = *(_QWORD *)a3;
      v247 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v245 >= v247 && v245 - v247 > 3)
      {
        v249 = (unsigned int *)(v246 + v247);
        *((_QWORD *)a3 + 2) = v249 + 1;
        if (v246)
        {
          v250 = (((unint64_t)v249 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v246;
          if (v245 >= v250 && v245 - v250 > 3)
          {
            v252 = *v249;
            v253 = (unsigned int *)(((unint64_t)v249 + 7) & 0xFFFFFFFFFFFFFFFCLL);
            *((_QWORD *)a3 + 2) = v253 + 1;
            v254 = (((unint64_t)v253 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v246;
            if (v245 >= v254 && v245 - v254 > 3)
            {
              v256 = (unsigned int *)(((unint64_t)v253 + 7) & 0xFFFFFFFFFFFFFFFCLL);
              v257 = *v256;
              *((_QWORD *)a3 + 2) = v256 + 1;
              v258 = v257 | 0x100000000;
              v259 = v252 | ((unint64_t)*v253 << 32);
              goto LABEL_421;
            }
          }
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v1426 = *((_QWORD *)a3 + 3);
          if (v1426)
          {
            if (v245)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v1426 + 16))(v1426);
              v1427 = *(_QWORD *)a3;
              v1428 = *((_QWORD *)a3 + 1);
              v1429 = *((_QWORD *)a3 + 3);
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              if (v1429)
              {
                if (v1428)
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1429 + 16))(v1429, v1427);
              }
            }
          }
LABEL_2581:
          v1499 = *(_QWORD *)a3;
          v1500 = *((_QWORD *)a3 + 1);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v1501 = *((_QWORD *)a3 + 3);
          if (v1501 && v1500)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1501 + 16))(v1501, v1499);
          HIDWORD(v259) = 0;
          v258 = 0;
LABEL_421:
          if ((v258 & 0xFF00000000) != 0)
            WebCore::GraphicsContextGLANGLE::uniform2f(*((WebCore::GraphicsContextGLANGLE **)this + 7), *((float *)&v259 + 1), *(float *)&v258);
          goto LABEL_2564;
        }
        v1495 = v245;
        v1496 = 0;
      }
      else
      {
        v1495 = 0;
        v1496 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v1497 = *((_QWORD *)a3 + 3);
        if (v1497)
        {
          if (v245)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v1497 + 16))(v1497);
            v1496 = *(_QWORD *)a3;
            v1495 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v1495 = 0;
            v1496 = 0;
          }
        }
      }
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v1498 = *((_QWORD *)a3 + 3);
      if (v1498 && v1495)
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v1498 + 16))(v1498, v1496, v1495);
      goto LABEL_2581;
    case 0x417:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
      IPC::Decoder::decode<std::tuple<int,std::span<float const,18446744073709551615ul>>>((uint64_t)cf, (uint64_t *)a3);
      if ((_BYTE)v2413)
        WebCore::GraphicsContextGLANGLE::uniform2fv();
      goto LABEL_2465;
    case 0x418:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v345 = *((_QWORD *)a3 + 1);
      v346 = *(_QWORD *)a3;
      v347 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v345 >= v347 && v345 - v347 > 3)
      {
        v349 = v346 + v347;
        *((_QWORD *)a3 + 2) = v349 + 4;
        if (v346)
        {
          v350 = ((v349 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v346;
          if (v345 >= v350 && v345 - v350 > 3)
          {
            v352 = (v349 + 7) & 0xFFFFFFFFFFFFFFFCLL;
            *((_QWORD *)a3 + 2) = v352 + 4;
            v353 = ((v352 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v346;
            if (v345 >= v353 && v345 - v353 > 3)
            {
              v355 = (unsigned int *)((v352 + 7) & 0xFFFFFFFFFFFFFFFCLL);
              v356 = *v355;
              *((_QWORD *)a3 + 2) = v355 + 1;
              v357 = v356 | 0x100000000;
              goto LABEL_596;
            }
          }
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v1430 = *((_QWORD *)a3 + 3);
          if (v1430)
          {
            if (v345)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v1430 + 16))(v1430);
              v1431 = *(_QWORD *)a3;
              v1432 = *((_QWORD *)a3 + 1);
              v1433 = *((_QWORD *)a3 + 3);
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              if (v1433)
              {
                if (v1432)
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1433 + 16))(v1433, v1431);
              }
            }
          }
LABEL_2588:
          v1509 = *(_QWORD *)a3;
          v1510 = *((_QWORD *)a3 + 1);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v1511 = *((_QWORD *)a3 + 3);
          if (v1511 && v1510)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1511 + 16))(v1511, v1509);
          v357 = 0;
LABEL_596:
          if ((v357 & 0xFF00000000) != 0)
            WebCore::GraphicsContextGLANGLE::uniform2i(*((WebCore::GraphicsContextGLANGLE **)this + 7));
          goto LABEL_2564;
        }
        v1505 = v345;
        v1506 = 0;
      }
      else
      {
        v1505 = 0;
        v1506 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v1507 = *((_QWORD *)a3 + 3);
        if (v1507)
        {
          if (v345)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v1507 + 16))(v1507);
            v1506 = *(_QWORD *)a3;
            v1505 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v1505 = 0;
            v1506 = 0;
          }
        }
      }
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v1508 = *((_QWORD *)a3 + 3);
      if (v1508 && v1505)
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v1508 + 16))(v1508, v1506, v1505);
      goto LABEL_2588;
    case 0x419:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
      IPC::Decoder::decode<std::tuple<int,std::span<int const,18446744073709551615ul>>>((uint64_t)cf, (uint64_t *)a3);
      if ((_BYTE)v2413)
        WebCore::GraphicsContextGLANGLE::uniform2iv();
      goto LABEL_2465;
    case 0x41C:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v600 = *((_QWORD *)a3 + 1);
      v601 = *(_QWORD *)a3;
      v602 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v600 >= v602 && v600 - v602 > 3)
      {
        v604 = v601 + v602;
        *((_QWORD *)a3 + 2) = v604 + 4;
        if (v601)
        {
          v605 = ((v604 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v601;
          if (v600 >= v605 && v600 - v605 > 3)
          {
            v607 = (float *)((v604 + 7) & 0xFFFFFFFFFFFFFFFCLL);
            *((_QWORD *)a3 + 2) = v607 + 1;
            v608 = *v607;
            v609 = (((unint64_t)v607 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v601;
            if (v600 >= v609 && v600 - v609 > 3)
            {
              v611 = (float *)(v601 + v609);
              *((_QWORD *)a3 + 2) = v611 + 1;
              v612 = (((unint64_t)v611 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v601;
              if (v600 >= v612 && v600 - v612 > 3)
              {
                v614 = *v611;
                v615 = *(float *)(((unint64_t)v611 + 7) & 0xFFFFFFFFFFFFFFFCLL);
                *((_QWORD *)a3 + 2) = (((unint64_t)v611 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
                WebCore::GraphicsContextGLANGLE::uniform3f(*((WebCore::GraphicsContextGLANGLE **)this + 7), v608, v614, v615);
                goto LABEL_2564;
              }
            }
          }
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v1377 = *((_QWORD *)a3 + 3);
          if (v1377)
          {
            if (v600)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v1377 + 16))(v1377);
              v1378 = *(_QWORD *)a3;
              v1379 = *((_QWORD *)a3 + 1);
              v1380 = *((_QWORD *)a3 + 3);
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              if (v1380)
              {
                if (v1379)
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1380 + 16))(v1380, v1378);
              }
            }
          }
LABEL_2623:
          v1322 = *(_QWORD *)a3;
          v1351 = *((_QWORD *)a3 + 1);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v1324 = *((_QWORD *)a3 + 3);
          if (!v1324)
            goto LABEL_2564;
          goto LABEL_2569;
        }
        v1547 = v600;
        v1548 = 0;
      }
      else
      {
        v1547 = 0;
        v1548 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v1549 = *((_QWORD *)a3 + 3);
        if (v1549)
        {
          if (v600)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v1549 + 16))(v1549);
            v1548 = *(_QWORD *)a3;
            v1547 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v1547 = 0;
            v1548 = 0;
          }
        }
      }
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v1550 = *((_QWORD *)a3 + 3);
      if (v1550 && v1547)
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v1550 + 16))(v1550, v1548, v1547);
      goto LABEL_2623;
    case 0x41D:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
      IPC::Decoder::decode<std::tuple<int,std::span<float const,18446744073709551615ul>>>((uint64_t)cf, (uint64_t *)a3);
      if ((_BYTE)v2413)
        WebCore::GraphicsContextGLANGLE::uniform3fv();
      goto LABEL_2465;
    case 0x41E:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
      IPC::Decoder::decode<std::tuple<int,int,int,int>>((uint64_t)cf, a3);
      if (cf[16])
        WebCore::GraphicsContextGLANGLE::uniform3i(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_2465;
    case 0x41F:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
      IPC::Decoder::decode<std::tuple<int,std::span<int const,18446744073709551615ul>>>((uint64_t)cf, (uint64_t *)a3);
      if ((_BYTE)v2413)
        WebCore::GraphicsContextGLANGLE::uniform3iv();
      goto LABEL_2465;
    case 0x422:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v557 = *((_QWORD *)a3 + 1);
      v558 = *(_QWORD *)a3;
      v559 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v557 >= v559 && v557 - v559 > 3)
      {
        v561 = v558 + v559;
        *((_QWORD *)a3 + 2) = v561 + 4;
        if (v558)
        {
          v562 = ((v561 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v558;
          if (v557 >= v562 && v557 - v562 > 3)
          {
            v564 = (float *)((v561 + 7) & 0xFFFFFFFFFFFFFFFCLL);
            *((_QWORD *)a3 + 2) = v564 + 1;
            v565 = *v564;
            v566 = (((unint64_t)v564 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v558;
            if (v557 >= v566 && v557 - v566 > 3)
            {
              v568 = (float *)(v558 + v566);
              *((_QWORD *)a3 + 2) = v568 + 1;
              v569 = *v568;
              v570 = (((unint64_t)v568 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v558;
              if (v557 >= v570 && v557 - v570 > 3)
              {
                v572 = (float *)(v558 + v570);
                *((_QWORD *)a3 + 2) = v572 + 1;
                v573 = (((unint64_t)v572 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v558;
                if (v557 >= v573 && v557 - v573 > 3)
                {
                  v575 = *v572;
                  v576 = *(float *)(((unint64_t)v572 + 7) & 0xFFFFFFFFFFFFFFFCLL);
                  *((_QWORD *)a3 + 2) = (((unint64_t)v572 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
                  WebCore::GraphicsContextGLANGLE::uniform4f(*((WebCore::GraphicsContextGLANGLE **)this + 7), v565, v569, v575, v576);
                  goto LABEL_2564;
                }
              }
            }
          }
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v1362 = *((_QWORD *)a3 + 3);
          if (v1362)
          {
            if (v557)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v1362 + 16))(v1362);
              v1363 = *(_QWORD *)a3;
              v1364 = *((_QWORD *)a3 + 1);
              v1365 = *((_QWORD *)a3 + 3);
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              if (v1365)
              {
                if (v1364)
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1365 + 16))(v1365, v1363);
              }
            }
          }
LABEL_2615:
          v1322 = *(_QWORD *)a3;
          v1351 = *((_QWORD *)a3 + 1);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v1324 = *((_QWORD *)a3 + 3);
          if (!v1324)
            goto LABEL_2564;
          goto LABEL_2569;
        }
        v1539 = v557;
        v1540 = 0;
      }
      else
      {
        v1539 = 0;
        v1540 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v1541 = *((_QWORD *)a3 + 3);
        if (v1541)
        {
          if (v557)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v1541 + 16))(v1541);
            v1540 = *(_QWORD *)a3;
            v1539 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v1539 = 0;
            v1540 = 0;
          }
        }
      }
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v1542 = *((_QWORD *)a3 + 3);
      if (v1542 && v1539)
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v1542 + 16))(v1542, v1540, v1539);
      goto LABEL_2615;
    case 0x423:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
      IPC::Decoder::decode<std::tuple<int,std::span<float const,18446744073709551615ul>>>((uint64_t)cf, (uint64_t *)a3);
      if ((_BYTE)v2413)
        WebCore::GraphicsContextGLANGLE::uniform4fv();
      goto LABEL_2465;
    case 0x424:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v94 = *((_QWORD *)a3 + 1);
      v95 = *(_QWORD *)a3;
      v439 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v94 < v439 || v94 - v439 <= 3)
        goto LABEL_2273;
      v441 = v95 + v439;
      *((_QWORD *)a3 + 2) = v441 + 4;
      if (!v95)
        goto LABEL_3574;
      v442 = ((v441 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v442 || v94 - v442 <= 3)
        goto LABEL_1897;
      *((_QWORD *)a3 + 2) = ((v441 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
      v444 = ((((v441 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v444 || v94 - v444 <= 3)
        goto LABEL_1897;
      v446 = (((v441 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
      *((_QWORD *)a3 + 2) = v446 + 4;
      v447 = ((v446 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v447 || v94 - v447 <= 3)
        goto LABEL_1897;
      v449 = v95 + v447;
      *((_QWORD *)a3 + 2) = v449 + 4;
      v450 = ((v449 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v450 || v94 - v450 <= 3)
        goto LABEL_1897;
      *((_QWORD *)a3 + 2) = ((v449 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
      WebCore::GraphicsContextGLANGLE::uniform4i(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_2564;
    case 0x425:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
      IPC::Decoder::decode<std::tuple<int,std::span<int const,18446744073709551615ul>>>((uint64_t)cf, (uint64_t *)a3);
      if ((_BYTE)v2413)
        WebCore::GraphicsContextGLANGLE::uniform4iv();
      goto LABEL_2465;
    case 0x429:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
      IPC::Decoder::decode<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul>>>((uint64_t)cf, (uint64_t *)a3);
      if ((_BYTE)v2413)
        WebCore::GraphicsContextGLANGLE::uniformMatrix2fv();
      goto LABEL_2465;
    case 0x42C:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
      IPC::Decoder::decode<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul>>>((uint64_t)cf, (uint64_t *)a3);
      if ((_BYTE)v2413)
        WebCore::GraphicsContextGLANGLE::uniformMatrix3fv();
      goto LABEL_2465;
    case 0x42F:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
      IPC::Decoder::decode<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul>>>((uint64_t)cf, (uint64_t *)a3);
      if ((_BYTE)v2413)
        WebCore::GraphicsContextGLANGLE::uniformMatrix4fv();
      goto LABEL_2465;
    case 0x432:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v338 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v338 & 0xFF00000000) != 0)
      {
        LODWORD(v2423[0]) = v338;
        if ((_DWORD)v338)
          LODWORD(v2423[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
        WebCore::GraphicsContextGLANGLE::useProgram(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_2564;
    case 0x433:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v303 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v303 & 0xFF00000000) != 0)
      {
        LODWORD(v2423[0]) = v303;
        if ((_DWORD)v303)
          LODWORD(v2423[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
        WebCore::GraphicsContextGLANGLE::validateProgram(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_2564;
    case 0x434:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v94 = *((_QWORD *)a3 + 1);
      v95 = *(_QWORD *)a3;
      v488 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v94 < v488 || v94 - v488 <= 3)
        goto LABEL_2273;
      v490 = v95 + v488;
      *((_QWORD *)a3 + 2) = v490 + 4;
      if (!v95)
        goto LABEL_3574;
      v491 = ((v490 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v491 || v94 - v491 <= 3)
        goto LABEL_1897;
      v493 = (float *)((v490 + 7) & 0xFFFFFFFFFFFFFFFCLL);
      v494 = *v493;
      *((_QWORD *)a3 + 2) = v493 + 1;
      WebCore::GraphicsContextGLANGLE::vertexAttrib1f(*((WebCore::GraphicsContextGLANGLE **)this + 7), v494);
      goto LABEL_2564;
    case 0x435:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v94 = *((_QWORD *)a3 + 1);
      v95 = *(_QWORD *)a3;
      v339 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v94 < v339 || v94 - v339 <= 3)
        goto LABEL_2273;
      v341 = v95 + v339;
      *((_QWORD *)a3 + 2) = v341 + 4;
      if (!v95)
        goto LABEL_3574;
      v342 = ((v341 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 >= v342 && v94 - v342 > 3)
      {
        *((_QWORD *)a3 + 2) = v95 + v342 + 4;
        v344 = 1;
        goto LABEL_577;
      }
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v1569 = *((_QWORD *)a3 + 3);
      if (!v1569 || !v94)
        goto LABEL_2646;
      (*(void (**)(uint64_t))(*(_QWORD *)v1569 + 16))(v1569);
      v2065 = *(_QWORD *)a3;
      v2066 = *((_QWORD *)a3 + 1);
      v2067 = *((_QWORD *)a3 + 3);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v344 = 0;
      if (v2067 && v2066)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2067 + 16))(v2067, v2065, v2066);
LABEL_2646:
        v344 = 0;
      }
LABEL_577:
      if (!v344)
        goto LABEL_2275;
      WebCore::GraphicsContextGLANGLE::vertexAttrib1fv();
      goto LABEL_2564;
    case 0x436:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v495 = *((_QWORD *)a3 + 1);
      v496 = *(_QWORD *)a3;
      v497 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v495 >= v497 && v495 - v497 > 3)
      {
        v499 = (unsigned int *)(v496 + v497);
        *((_QWORD *)a3 + 2) = v499 + 1;
        if (v496)
        {
          v500 = (((unint64_t)v499 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v496;
          if (v495 >= v500 && v495 - v500 > 3)
          {
            v502 = *v499;
            v503 = (unsigned int *)(((unint64_t)v499 + 7) & 0xFFFFFFFFFFFFFFFCLL);
            *((_QWORD *)a3 + 2) = v503 + 1;
            v504 = (((unint64_t)v503 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v496;
            if (v495 >= v504 && v495 - v504 > 3)
            {
              v506 = (unsigned int *)(((unint64_t)v503 + 7) & 0xFFFFFFFFFFFFFFFCLL);
              v507 = *v506;
              *((_QWORD *)a3 + 2) = v506 + 1;
              v508 = v507 | 0x100000000;
              v509 = v502 | ((unint64_t)*v503 << 32);
              goto LABEL_865;
            }
          }
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v1438 = *((_QWORD *)a3 + 3);
          if (v1438)
          {
            if (v495)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v1438 + 16))(v1438);
              v1439 = *(_QWORD *)a3;
              v1440 = *((_QWORD *)a3 + 1);
              v1441 = *((_QWORD *)a3 + 3);
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              if (v1441)
              {
                if (v1440)
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1441 + 16))(v1441, v1439);
              }
            }
          }
LABEL_2608:
          v1535 = *(_QWORD *)a3;
          v1536 = *((_QWORD *)a3 + 1);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v1537 = *((_QWORD *)a3 + 3);
          if (v1537 && v1536)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1537 + 16))(v1537, v1535);
          HIDWORD(v509) = 0;
          v508 = 0;
LABEL_865:
          if ((v508 & 0xFF00000000) != 0)
            WebCore::GraphicsContextGLANGLE::vertexAttrib2f(*((WebCore::GraphicsContextGLANGLE **)this + 7), *((float *)&v509 + 1), *(float *)&v508);
          goto LABEL_2564;
        }
        v1531 = v495;
        v1532 = 0;
      }
      else
      {
        v1531 = 0;
        v1532 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v1533 = *((_QWORD *)a3 + 3);
        if (v1533)
        {
          if (v495)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v1533 + 16))(v1533);
            v1532 = *(_QWORD *)a3;
            v1531 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v1531 = 0;
            v1532 = 0;
          }
        }
      }
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v1534 = *((_QWORD *)a3 + 3);
      if (v1534 && v1531)
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v1534 + 16))(v1534, v1532, v1531);
      goto LABEL_2608;
    case 0x437:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v94 = *((_QWORD *)a3 + 1);
      v95 = *(_QWORD *)a3;
      v376 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v94 < v376 || v94 - v376 <= 3)
        goto LABEL_2273;
      v378 = v95 + v376;
      *((_QWORD *)a3 + 2) = v378 + 4;
      if (!v95)
        goto LABEL_3574;
      v379 = ((v378 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 >= v379 && v94 - v379 > 7)
      {
        *((_QWORD *)a3 + 2) = v95 + v379 + 8;
        v381 = 1;
        goto LABEL_646;
      }
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v1575 = *((_QWORD *)a3 + 3);
      if (!v1575 || !v94)
        goto LABEL_2655;
      (*(void (**)(uint64_t))(*(_QWORD *)v1575 + 16))(v1575);
      v2071 = *(_QWORD *)a3;
      v2072 = *((_QWORD *)a3 + 1);
      v2073 = *((_QWORD *)a3 + 3);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v381 = 0;
      if (v2073 && v2072)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2073 + 16))(v2073, v2071, v2072);
LABEL_2655:
        v381 = 0;
      }
LABEL_646:
      if (!v381)
        goto LABEL_2275;
      WebCore::GraphicsContextGLANGLE::vertexAttrib2fv();
      goto LABEL_2564;
    case 0x438:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v94 = *((_QWORD *)a3 + 1);
      v95 = *(_QWORD *)a3;
      v474 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v94 < v474 || v94 - v474 <= 3)
        goto LABEL_2273;
      v476 = v95 + v474;
      *((_QWORD *)a3 + 2) = v476 + 4;
      if (!v95)
        goto LABEL_3574;
      v477 = ((v476 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v477 || v94 - v477 <= 3)
        goto LABEL_1897;
      v479 = (float *)((v476 + 7) & 0xFFFFFFFFFFFFFFFCLL);
      *((_QWORD *)a3 + 2) = v479 + 1;
      v480 = *v479;
      v481 = (((unint64_t)v479 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v481 || v94 - v481 <= 3)
        goto LABEL_1897;
      v483 = (float *)(v95 + v481);
      *((_QWORD *)a3 + 2) = v483 + 1;
      v484 = (((unint64_t)v483 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v484 || v94 - v484 <= 3)
        goto LABEL_1897;
      v486 = *v483;
      v487 = *(float *)(((unint64_t)v483 + 7) & 0xFFFFFFFFFFFFFFFCLL);
      *((_QWORD *)a3 + 2) = (((unint64_t)v483 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
      WebCore::GraphicsContextGLANGLE::vertexAttrib3f(*((WebCore::GraphicsContextGLANGLE **)this + 7), v480, v486, v487);
      goto LABEL_2564;
    case 0x439:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v94 = *((_QWORD *)a3 + 1);
      v95 = *(_QWORD *)a3;
      v467 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v94 < v467 || v94 - v467 <= 3)
        goto LABEL_2273;
      v469 = v95 + v467;
      *((_QWORD *)a3 + 2) = v469 + 4;
      if (!v95)
        goto LABEL_3574;
      v470 = ((v469 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 >= v470 && v94 - v470 > 0xB)
      {
        *((_QWORD *)a3 + 2) = v95 + v470 + 12;
        v472 = 1;
        goto LABEL_802;
      }
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v1577 = *((_QWORD *)a3 + 3);
      if (!v1577 || !v94)
        goto LABEL_2660;
      (*(void (**)(uint64_t))(*(_QWORD *)v1577 + 16))(v1577);
      v2077 = *(_QWORD *)a3;
      v2078 = *((_QWORD *)a3 + 1);
      v2079 = *((_QWORD *)a3 + 3);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v472 = 0;
      if (v2079 && v2078)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2079 + 16))(v2079, v2077, v2078);
LABEL_2660:
        v472 = 0;
      }
LABEL_802:
      if (!v472)
        goto LABEL_2275;
      WebCore::GraphicsContextGLANGLE::vertexAttrib3fv();
      goto LABEL_2564;
    case 0x43A:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v94 = *((_QWORD *)a3 + 1);
      v95 = *(_QWORD *)a3;
      v312 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v94 < v312 || v94 - v312 <= 3)
        goto LABEL_2273;
      v314 = v95 + v312;
      *((_QWORD *)a3 + 2) = v314 + 4;
      if (!v95)
        goto LABEL_3574;
      v315 = ((v314 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v315 || v94 - v315 <= 3)
        goto LABEL_1897;
      v317 = (float *)((v314 + 7) & 0xFFFFFFFFFFFFFFFCLL);
      *((_QWORD *)a3 + 2) = v317 + 1;
      v318 = *v317;
      v319 = (((unint64_t)v317 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v319 || v94 - v319 <= 3)
        goto LABEL_1897;
      v321 = (float *)(v95 + v319);
      *((_QWORD *)a3 + 2) = v321 + 1;
      v322 = *v321;
      v323 = (((unint64_t)v321 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v323 || v94 - v323 <= 3)
        goto LABEL_1897;
      v325 = (float *)(v95 + v323);
      *((_QWORD *)a3 + 2) = v325 + 1;
      v326 = (((unint64_t)v325 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 < v326 || v94 - v326 <= 3)
        goto LABEL_1897;
      v328 = *v325;
      v329 = *(float *)(((unint64_t)v325 + 7) & 0xFFFFFFFFFFFFFFFCLL);
      *((_QWORD *)a3 + 2) = (((unint64_t)v325 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
      WebCore::GraphicsContextGLANGLE::vertexAttrib4f(*((WebCore::GraphicsContextGLANGLE **)this + 7), v318, v322, v328, v329);
      goto LABEL_2564;
    case 0x43B:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v94 = *((_QWORD *)a3 + 1);
      v95 = *(_QWORD *)a3;
      v370 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v94 < v370 || v94 - v370 <= 3)
        goto LABEL_2273;
      v372 = v95 + v370;
      *((_QWORD *)a3 + 2) = v372 + 4;
      if (!v95)
        goto LABEL_3574;
      v373 = ((v372 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      if (v94 >= v373 && v94 - v373 > 0xF)
      {
        *((_QWORD *)a3 + 2) = v95 + v373 + 16;
        v375 = 1;
        goto LABEL_632;
      }
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v1574 = *((_QWORD *)a3 + 3);
      if (!v1574 || !v94)
        goto LABEL_2653;
      (*(void (**)(uint64_t))(*(_QWORD *)v1574 + 16))(v1574);
      v2068 = *(_QWORD *)a3;
      v2069 = *((_QWORD *)a3 + 1);
      v2070 = *((_QWORD *)a3 + 3);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v375 = 0;
      if (v2070 && v2069)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2070 + 16))(v2070, v2068, v2069);
LABEL_2653:
        v375 = 0;
      }
LABEL_632:
      if (!v375)
        goto LABEL_2275;
      WebCore::GraphicsContextGLANGLE::vertexAttrib4fv();
      goto LABEL_2564;
    case 0x43C:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      IPC::Decoder::decode<std::tuple<float,float>>(a3);
      if (v358)
        WebCore::GraphicsContextGLANGLE::vertexAttribDivisor(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_2564;
    case 0x442:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
      v94 = *((_QWORD *)a3 + 1);
      v95 = *(_QWORD *)a3;
      v382 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
      if (v94 < v382 || v94 - v382 <= 3)
      {
LABEL_2273:
        v1318 = 0;
        v1319 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v1320 = *((_QWORD *)a3 + 3);
        if (!v1320)
          goto LABEL_2274;
        if (v94)
          goto LABEL_3025;
        goto LABEL_3618;
      }
      v384 = v95 + v382;
      *((_QWORD *)a3 + 2) = v384 + 4;
      if (!v95)
        goto LABEL_3574;
      v385 = ((v384 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
      v386 = v94 >= v385 && v94 - v385 > 3;
      if (v386
        && ((*((_QWORD *)a3 + 2) = ((v384 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4,
             v387 = ((((v384 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95,
             v94 >= v387)
          ? (v388 = v94 - v387 > 3)
          : (v388 = 0),
            v388))
      {
        v389 = (((v384 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
        *((_QWORD *)a3 + 2) = v389 + 4;
        if (v94 <= v389 + 4 - v95)
        {
          v1318 = 0;
          v1319 = 0;
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v1579 = *((_QWORD *)a3 + 3);
          if (!v1579)
            goto LABEL_2274;
          if (v94)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v1579 + 16))(v1579);
            v1318 = 0;
            v95 = *(_QWORD *)a3;
            v1580 = *((_QWORD *)a3 + 1);
            v1320 = *((_QWORD *)a3 + 3);
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v1319 = 0;
            if (!v1320 || !v1580)
            {
LABEL_2274:
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              v1321 = *((_QWORD *)a3 + 3);
              if (v1321 && v1318)
                (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v1321 + 16))(v1321, v1319, v1318);
              goto LABEL_2275;
            }
LABEL_3025:
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1320 + 16))(v1320, v95);
            v1319 = *(_QWORD *)a3;
            v1318 = *((_QWORD *)a3 + 1);
            goto LABEL_2274;
          }
LABEL_3618:
          v1318 = 0;
          v1319 = 0;
          goto LABEL_2274;
        }
        v390 = v389 + 5;
        *((_QWORD *)a3 + 2) = v389 + 5;
        if (*(unsigned __int8 *)(v389 + 4) >= 2u)
        {
LABEL_3574:
          v1318 = v94;
          v1319 = v95;
          goto LABEL_2274;
        }
        v391 = ((v389 + 8) & 0xFFFFFFFFFFFFFFFCLL) - v95;
        if (v94 >= v391 && v94 - v391 > 3)
        {
          v393 = (v390 + 3) & 0xFFFFFFFFFFFFFFFCLL;
          *((_QWORD *)a3 + 2) = v393 + 4;
          v394 = ((v393 + 11) & 0xFFFFFFFFFFFFFFF8) - v95;
          if (v94 >= v394 && v94 - v394 > 7)
          {
            *((_QWORD *)a3 + 2) = ((v393 + 11) & 0xFFFFFFFFFFFFFFF8) + 8;
            WebCore::GraphicsContextGLANGLE::vertexAttribPointer(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            goto LABEL_2564;
          }
        }
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v1102 = *((_QWORD *)a3 + 3);
        if (!v1102)
          goto LABEL_2275;
      }
      else
      {
LABEL_1897:
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v1102 = *((_QWORD *)a3 + 3);
        if (!v1102 || !v94)
          goto LABEL_2275;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v1102 + 16))(v1102);
      v1103 = *(_QWORD *)a3;
      v1104 = *((_QWORD *)a3 + 1);
      v1105 = *((_QWORD *)a3 + 3);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      if (v1105 && v1104)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1105 + 16))(v1105, v1103);
LABEL_2275:
      v1322 = *(_QWORD *)a3;
      v1323 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v1324 = *((_QWORD *)a3 + 3);
      if (!v1324 || !v1323)
        goto LABEL_2564;
      goto LABEL_2551;
    case 0x443:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
      IPC::Decoder::decode<std::tuple<int,int,int,int>>((uint64_t)cf, a3);
      if (cf[16])
        WebCore::GraphicsContextGLANGLE::viewport(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_2465;
    default:
      if (*((unsigned __int16 *)a3 + 25) > 0x3E5u)
      {
        switch(*((_WORD *)a3 + 25))
        {
          case 0x405:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
            v12 = *((_QWORD *)a3 + 1);
            v13 = *(_QWORD *)a3;
            v14 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
            if (v12 < v14 || v12 - v14 <= 3)
              goto LABEL_2338;
            v16 = v13 + v14;
            *((_QWORD *)a3 + 2) = v16 + 4;
            if (!v13)
              goto LABEL_3577;
            v17 = ((v16 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
            if (v12 < v17 || v12 - v17 <= 3)
              goto LABEL_2159;
            *((_QWORD *)a3 + 2) = ((v16 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
            v19 = ((((v16 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
            if (v12 < v19 || v12 - v19 <= 3)
              goto LABEL_2159;
            v21 = v13 + v19;
            *((_QWORD *)a3 + 2) = v21 + 4;
            v22 = ((v21 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
            if (v12 < v22 || v12 - v22 <= 3)
              goto LABEL_2159;
            v24 = v13 + v22;
            *((_QWORD *)a3 + 2) = v24 + 4;
            v25 = ((v24 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
            if (v12 < v25 || v12 - v25 <= 3)
              goto LABEL_2159;
            v27 = v13 + v25;
            *((_QWORD *)a3 + 2) = v27 + 4;
            v28 = ((v27 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
            if (v12 < v28 || v12 - v28 <= 3)
              goto LABEL_2159;
            v30 = v13 + v28;
            *((_QWORD *)a3 + 2) = v30 + 4;
            v31 = ((v30 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
            if (v12 < v31 || v12 - v31 <= 3)
              goto LABEL_2159;
            v33 = v13 + v31;
            *((_QWORD *)a3 + 2) = v33 + 4;
            v34 = ((v33 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
            if (v12 < v34 || v12 - v34 <= 3)
              goto LABEL_2159;
            v36 = v13 + v34;
            *((_QWORD *)a3 + 2) = v36 + 4;
            v37 = ((v36 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
            if (v12 < v37 || v12 - v37 <= 3)
              goto LABEL_2159;
            *((_QWORD *)a3 + 2) = v13 + v37 + 4;
            IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>((uint64_t *)a3, (uint64_t)cf);
            if (!cf[16])
              goto LABEL_2464;
            WebCore::GraphicsContextGLANGLE::texImage3D();
            goto LABEL_2465;
          case 0x406:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
            v876 = *((_QWORD *)a3 + 1);
            v877 = *(_QWORD *)a3;
            v1177 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
            if (v876 < v1177 || v876 - v1177 <= 3)
              goto LABEL_2684;
            v1179 = (unsigned int *)(v877 + v1177);
            *((_QWORD *)a3 + 2) = v1179 + 1;
            if (!v877)
              goto LABEL_3619;
            v1180 = (((unint64_t)v1179 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1180 || v876 - v1180 <= 3)
              goto LABEL_2548;
            v1182 = *v1179;
            *((_QWORD *)a3 + 2) = v877 + v1180 + 4;
            v1184 = v877 + v1180 + 7;
            v1183 = *(_DWORD *)(v877 + v1180);
            v1185 = (v1184 & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1185 || v876 - v1185 <= 3)
              goto LABEL_2548;
            v1187 = (int *)(v877 + v1185);
            *((_QWORD *)a3 + 2) = v1187 + 1;
            v1188 = *v1187;
            v1189 = (((unint64_t)v1187 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1189 || v876 - v1189 <= 3)
              goto LABEL_2548;
            v1191 = (int *)(v877 + v1189);
            *((_QWORD *)a3 + 2) = v1191 + 1;
            v1192 = *v1191;
            v1193 = (((unint64_t)v1191 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1193 || v876 - v1193 <= 3)
              goto LABEL_2548;
            v1195 = (int *)(v877 + v1193);
            *((_QWORD *)a3 + 2) = v1195 + 1;
            v1196 = *v1195;
            v1197 = (((unint64_t)v1195 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1197 || v876 - v1197 <= 3)
              goto LABEL_2548;
            v1199 = (int *)(v877 + v1197);
            *((_QWORD *)a3 + 2) = v1199 + 1;
            v1200 = *v1199;
            v1201 = (((unint64_t)v1199 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1201 || v876 - v1201 <= 3)
              goto LABEL_2548;
            v1203 = (int *)(v877 + v1201);
            *((_QWORD *)a3 + 2) = v1203 + 1;
            v1204 = *v1203;
            v1205 = (((unint64_t)v1203 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1205 || v876 - v1205 <= 3)
              goto LABEL_2548;
            *((_QWORD *)a3 + 2) = v877 + v1205 + 4;
            v1208 = v877 + v1205 + 7;
            v1207 = *(_DWORD *)(v877 + v1205);
            v1209 = (v1208 & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1209 || v876 - v1209 <= 3)
              goto LABEL_2548;
            v1211 = (unsigned int *)(v877 + v1209);
            *((_QWORD *)a3 + 2) = v1211 + 1;
            v1212 = (((unint64_t)v1211 + 11) & 0xFFFFFFFFFFFFFFF8) - v877;
            if (v876 < v1212 || v876 - v1212 <= 7)
              goto LABEL_2548;
            v1214 = *v1211;
            v1215 = (uint64_t *)(v877 + v1212);
            v1216 = *v1215;
            *((_QWORD *)a3 + 2) = v1215 + 1;
            WebCore::GraphicsContextGLANGLE::texImage3D(*((WebCore::GraphicsContextGLANGLE **)this + 7), v1182, v1183, v1188, v1192, v1196, v1200, v1204, v1207, v1214, v1216);
            goto LABEL_2564;
          case 0x407:
          case 0x408:
          case 0x40B:
          case 0x40C:
          case 0x410:
          case 0x411:
          case 0x412:
          case 0x413:
          case 0x416:
          case 0x417:
          case 0x418:
          case 0x419:
          case 0x41C:
          case 0x41D:
          case 0x41E:
          case 0x41F:
          case 0x422:
          case 0x423:
          case 0x424:
          case 0x425:
          case 0x429:
          case 0x42C:
          case 0x42F:
          case 0x432:
          case 0x433:
          case 0x434:
          case 0x435:
          case 0x436:
          case 0x437:
          case 0x438:
          case 0x439:
          case 0x43A:
          case 0x43B:
          case 0x43C:
          case 0x442:
          case 0x443:
            goto LABEL_1580;
          case 0x409:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
            IPC::Decoder::decode<std::tuple<unsigned int,int,unsigned int,int,int>>((uint64_t)cf, a3);
            if (cf[20])
              WebCore::GraphicsContextGLANGLE::texStorage2D(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            goto LABEL_2465;
          case 0x40A:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
            v876 = *((_QWORD *)a3 + 1);
            v877 = *(_QWORD *)a3;
            v1137 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
            if (v876 < v1137 || v876 - v1137 <= 3)
              goto LABEL_2684;
            v1139 = v877 + v1137;
            *((_QWORD *)a3 + 2) = v1139 + 4;
            if (!v877)
              goto LABEL_3619;
            v1140 = ((v1139 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1140 || v876 - v1140 <= 3)
              goto LABEL_2548;
            *((_QWORD *)a3 + 2) = ((v1139 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
            v1142 = ((((v1139 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1142 || v876 - v1142 <= 3)
              goto LABEL_2548;
            v1144 = (((v1139 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
            *((_QWORD *)a3 + 2) = v1144 + 4;
            v1145 = ((v1144 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1145 || v876 - v1145 <= 3)
              goto LABEL_2548;
            v1147 = v877 + v1145;
            *((_QWORD *)a3 + 2) = v1147 + 4;
            v1148 = ((v1147 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1148 || v876 - v1148 <= 3)
              goto LABEL_2548;
            v1150 = v877 + v1148;
            *((_QWORD *)a3 + 2) = v1150 + 4;
            v1151 = ((v1150 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1151 || v876 - v1151 <= 3)
              goto LABEL_2548;
            *((_QWORD *)a3 + 2) = ((v1150 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
            WebCore::GraphicsContextGLANGLE::texStorage3D(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            goto LABEL_2564;
          case 0x40D:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
            v12 = *((_QWORD *)a3 + 1);
            v13 = *(_QWORD *)a3;
            v1219 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
            if (v12 < v1219 || v12 - v1219 <= 3)
              goto LABEL_2338;
            v1221 = v13 + v1219;
            *((_QWORD *)a3 + 2) = v1221 + 4;
            if (!v13)
              goto LABEL_3577;
            v1222 = ((v1221 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
            if (v12 < v1222 || v12 - v1222 <= 3)
              goto LABEL_2159;
            *((_QWORD *)a3 + 2) = ((v1221 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
            v1224 = ((((v1221 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
            if (v12 < v1224 || v12 - v1224 <= 3)
              goto LABEL_2159;
            v1226 = v13 + v1224;
            *((_QWORD *)a3 + 2) = v1226 + 4;
            v1227 = ((v1226 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
            if (v12 < v1227 || v12 - v1227 <= 3)
              goto LABEL_2159;
            v1229 = v13 + v1227;
            *((_QWORD *)a3 + 2) = v1229 + 4;
            v1230 = ((v1229 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
            if (v12 < v1230 || v12 - v1230 <= 3)
              goto LABEL_2159;
            v1232 = v13 + v1230;
            *((_QWORD *)a3 + 2) = v1232 + 4;
            v1233 = ((v1232 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
            if (v12 < v1233 || v12 - v1233 <= 3)
              goto LABEL_2159;
            v1235 = v13 + v1233;
            *((_QWORD *)a3 + 2) = v1235 + 4;
            v1236 = ((v1235 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
            if (v12 < v1236 || v12 - v1236 <= 3)
              goto LABEL_2159;
            v1238 = v13 + v1236;
            *((_QWORD *)a3 + 2) = v1238 + 4;
            v1239 = ((v1238 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
            if (v12 < v1239 || v12 - v1239 <= 3)
              goto LABEL_2159;
            v1241 = v13 + v1239;
            *((_QWORD *)a3 + 2) = v1241 + 4;
            v1242 = ((v1241 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
            if (v12 < v1242 || v12 - v1242 <= 3)
              goto LABEL_2159;
            v1244 = v13 + v1242;
            *((_QWORD *)a3 + 2) = v1244 + 4;
            v1245 = ((v1244 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
            if (v12 < v1245 || v12 - v1245 <= 3)
              goto LABEL_2159;
            *((_QWORD *)a3 + 2) = v13 + v1245 + 4;
            IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>((uint64_t *)a3, (uint64_t)cf);
            if (!cf[16])
              goto LABEL_2464;
            WebCore::GraphicsContextGLANGLE::texSubImage3D();
            goto LABEL_2465;
          case 0x40E:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
            v876 = *((_QWORD *)a3 + 1);
            v877 = *(_QWORD *)a3;
            v1261 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
            if (v876 < v1261 || v876 - v1261 <= 3)
              goto LABEL_2684;
            v1263 = (unsigned int *)(v877 + v1261);
            *((_QWORD *)a3 + 2) = v1263 + 1;
            if (!v877)
              goto LABEL_3619;
            v1264 = (((unint64_t)v1263 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1264 || v876 - v1264 <= 3)
              goto LABEL_2548;
            v1266 = *v1263;
            *((_QWORD *)a3 + 2) = v877 + v1264 + 4;
            v1268 = v877 + v1264 + 7;
            v1267 = *(_DWORD *)(v877 + v1264);
            v1269 = (v1268 & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1269 || v876 - v1269 <= 3)
              goto LABEL_2548;
            v1271 = (int *)(v877 + v1269);
            *((_QWORD *)a3 + 2) = v1271 + 1;
            v1272 = *v1271;
            v1273 = (((unint64_t)v1271 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1273 || v876 - v1273 <= 3)
              goto LABEL_2548;
            v1275 = (int *)(v877 + v1273);
            *((_QWORD *)a3 + 2) = v1275 + 1;
            v1276 = *v1275;
            v1277 = (((unint64_t)v1275 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1277 || v876 - v1277 <= 3)
              goto LABEL_2548;
            v1279 = (int *)(v877 + v1277);
            *((_QWORD *)a3 + 2) = v1279 + 1;
            v1280 = *v1279;
            v1281 = (((unint64_t)v1279 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1281 || v876 - v1281 <= 3)
              goto LABEL_2548;
            v1283 = (int *)(v877 + v1281);
            *((_QWORD *)a3 + 2) = v1283 + 1;
            v1284 = *v1283;
            v1285 = (((unint64_t)v1283 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1285 || v876 - v1285 <= 3)
              goto LABEL_2548;
            v1287 = (int *)(v877 + v1285);
            *((_QWORD *)a3 + 2) = v1287 + 1;
            v1288 = *v1287;
            v1289 = (((unint64_t)v1287 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1289 || v876 - v1289 <= 3)
              goto LABEL_2548;
            *((_QWORD *)a3 + 2) = v877 + v1289 + 4;
            v1292 = v877 + v1289 + 7;
            v1291 = *(_DWORD *)(v877 + v1289);
            v1293 = (v1292 & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1293 || v876 - v1293 <= 3)
              goto LABEL_2548;
            *((_QWORD *)a3 + 2) = v877 + v1293 + 4;
            v1296 = v877 + v1293 + 7;
            v1295 = *(_DWORD *)(v877 + v1293);
            v1297 = (v1296 & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1297 || v876 - v1297 <= 3)
              goto LABEL_2548;
            v1299 = (unsigned int *)(v877 + v1297);
            *((_QWORD *)a3 + 2) = v1299 + 1;
            v1300 = (((unint64_t)v1299 + 11) & 0xFFFFFFFFFFFFFFF8) - v877;
            if (v876 < v1300 || v876 - v1300 <= 7)
              goto LABEL_2548;
            v1302 = *v1299;
            v1303 = (uint64_t *)(v877 + v1300);
            v1304 = *v1303;
            *((_QWORD *)a3 + 2) = v1303 + 1;
            WebCore::GraphicsContextGLANGLE::texSubImage3D(*((WebCore::GraphicsContextGLANGLE **)this + 7), v1266, v1267, v1272, v1276, v1280, v1284, v1288, v1291, v1295, v1302, v1304);
            goto LABEL_2564;
          case 0x40F:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v2428, a2 + 4);
            v187 = *((_QWORD *)a3 + 1);
            v188 = *(_QWORD *)a3;
            v1167 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
            if (v187 < v1167 || v187 - v1167 <= 3)
              goto LABEL_2354;
            v1169 = (int *)(v188 + v1167);
            *((_QWORD *)a3 + 2) = v1169 + 1;
            if (!v188)
              goto LABEL_3580;
            v1170 = *v1169;
            IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a3, v1166, (uint64_t)v2423);
            if (!(_BYTE)v2424)
              goto LABEL_2648;
            v1171 = *((_QWORD *)a3 + 1);
            v1172 = *(char **)a3;
            v1173 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
            if (v1171 < v1173 || v1171 - v1173 <= 3)
            {
              v2054 = 0;
              v2055 = 0;
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              v2056 = *((_QWORD *)a3 + 3);
              if (v2056)
              {
                if (v1171)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v2056 + 16))(v2056);
                  v2055 = *(_QWORD *)a3;
                  v2054 = *((_QWORD *)a3 + 1);
                }
                else
                {
                  v2054 = 0;
                  v2055 = 0;
                }
              }
            }
            else
            {
              v1174 = &v1172[v1173];
              *((_QWORD *)a3 + 2) = v1174 + 4;
              if (v1172)
              {
                v1175 = *(_DWORD *)v1174;
                *(_DWORD *)cf = v1170;
                *(WTF::StringImpl **)&cf[8] = v2423[0];
                v1176 = v2423[1];
                v2423[0] = 0;
                v2423[1] = 0;
                *(_QWORD *)&cf[16] = v1176;
                LODWORD(v2413) = v1175;
                BYTE8(v2413) = 1;
                WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v2423, v1172);
                LODWORD(v2423[0]) = v1170;
                if (v1170)
                  LODWORD(v2423[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
                WebCore::GraphicsContextGLANGLE::transformFeedbackVaryings();
                WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&cf[8], v1349);
                goto LABEL_2649;
              }
              v2054 = v1171;
              v2055 = 0;
            }
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v2057 = *((_QWORD *)a3 + 3);
            if (v2057 && v2054)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2057 + 16))(v2057, v2055);
            if ((_BYTE)v2424)
              WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v2423, v1172);
            goto LABEL_2648;
          case 0x414:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
            v876 = *((_QWORD *)a3 + 1);
            v877 = *(_QWORD *)a3;
            v1132 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
            if (v876 < v1132 || v876 - v1132 <= 3)
              goto LABEL_2684;
            v1134 = v877 + v1132;
            *((_QWORD *)a3 + 2) = v1134 + 4;
            if (!v877)
              goto LABEL_3619;
            v1135 = ((v1134 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1135 || v876 - v1135 <= 3)
              goto LABEL_2548;
            *((_QWORD *)a3 + 2) = ((v1134 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
            WebCore::GraphicsContextGLANGLE::uniform1ui(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            goto LABEL_2564;
          case 0x415:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
            IPC::Decoder::decode<std::tuple<int,std::span<unsigned int const,18446744073709551615ul>>>((uint64_t)cf, (uint64_t *)a3);
            if ((_BYTE)v2413)
              WebCore::GraphicsContextGLANGLE::uniform1uiv();
            goto LABEL_2465;
          case 0x41A:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
            v1106 = *((_QWORD *)a3 + 1);
            v1107 = *(_QWORD *)a3;
            v1108 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
            if (v1106 >= v1108 && v1106 - v1108 > 3)
            {
              v1110 = v1107 + v1108;
              *((_QWORD *)a3 + 2) = v1110 + 4;
              if (v1107)
              {
                v1111 = ((v1110 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v1107;
                if (v1106 >= v1111 && v1106 - v1111 > 3)
                {
                  v1113 = (v1110 + 7) & 0xFFFFFFFFFFFFFFFCLL;
                  *((_QWORD *)a3 + 2) = v1113 + 4;
                  v1114 = ((v1113 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v1107;
                  if (v1106 >= v1114 && v1106 - v1114 > 3)
                  {
                    v1116 = (unsigned int *)((v1113 + 7) & 0xFFFFFFFFFFFFFFFCLL);
                    v1117 = *v1116;
                    *((_QWORD *)a3 + 2) = v1116 + 1;
                    v1118 = v1117 | 0x100000000;
                    goto LABEL_1923;
                  }
                }
                *(_QWORD *)a3 = 0;
                *((_QWORD *)a3 + 1) = 0;
                v2011 = *((_QWORD *)a3 + 3);
                if (v2011)
                {
                  if (v1106)
                  {
                    (*(void (**)(uint64_t))(*(_QWORD *)v2011 + 16))(v2011);
                    v2012 = *(_QWORD *)a3;
                    v2013 = *((_QWORD *)a3 + 1);
                    v2014 = *((_QWORD *)a3 + 3);
                    *(_QWORD *)a3 = 0;
                    *((_QWORD *)a3 + 1) = 0;
                    if (v2014)
                    {
                      if (v2013)
                        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2014 + 16))(v2014, v2012);
                    }
                  }
                }
LABEL_3125:
                v1639 = *(_QWORD *)a3;
                v1640 = *((_QWORD *)a3 + 1);
                *(_QWORD *)a3 = 0;
                *((_QWORD *)a3 + 1) = 0;
                v1638 = (void *)*((_QWORD *)a3 + 3);
                if (v1638)
                {
LABEL_3497:
                  if (v1640)
                    (*(void (**)(void *, uint64_t))(*(_QWORD *)v1638 + 16))(v1638, v1639);
                }
                v1118 = 0;
LABEL_1923:
                if ((v1118 & 0xFF00000000) != 0)
                  WebCore::GraphicsContextGLANGLE::uniform2ui(*((WebCore::GraphicsContextGLANGLE **)this + 7));
                goto LABEL_2564;
              }
              v2049 = v1106;
              v2050 = 0;
            }
            else
            {
              v2049 = 0;
              v2050 = 0;
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              v2051 = *((_QWORD *)a3 + 3);
              if (v2051)
              {
                if (v1106)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v2051 + 16))(v2051);
                  v2050 = *(_QWORD *)a3;
                  v2049 = *((_QWORD *)a3 + 1);
                }
                else
                {
                  v2049 = 0;
                  v2050 = 0;
                }
              }
            }
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v2052 = *((_QWORD *)a3 + 3);
            if (v2052 && v2049)
              (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v2052 + 16))(v2052, v2050, v2049);
            goto LABEL_3125;
          case 0x41B:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
            IPC::Decoder::decode<std::tuple<int,std::span<unsigned int const,18446744073709551615ul>>>((uint64_t)cf, (uint64_t *)a3);
            if ((_BYTE)v2413)
              WebCore::GraphicsContextGLANGLE::uniform2uiv();
            goto LABEL_2465;
          case 0x420:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
            v876 = *((_QWORD *)a3 + 1);
            v877 = *(_QWORD *)a3;
            v1251 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
            if (v876 < v1251 || v876 - v1251 <= 3)
              goto LABEL_2684;
            v1253 = v877 + v1251;
            *((_QWORD *)a3 + 2) = v1253 + 4;
            if (!v877)
              goto LABEL_3619;
            v1254 = ((v1253 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1254 || v876 - v1254 <= 3)
              goto LABEL_2548;
            *((_QWORD *)a3 + 2) = ((v1253 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
            v1256 = ((((v1253 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1256 || v876 - v1256 <= 3)
              goto LABEL_2548;
            v1258 = (((v1253 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
            *((_QWORD *)a3 + 2) = v1258 + 4;
            v1259 = ((v1258 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1259 || v876 - v1259 <= 3)
              goto LABEL_2548;
            *((_QWORD *)a3 + 2) = ((v1258 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
            WebCore::GraphicsContextGLANGLE::uniform3ui(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            goto LABEL_2564;
          case 0x421:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
            IPC::Decoder::decode<std::tuple<int,std::span<unsigned int const,18446744073709551615ul>>>((uint64_t)cf, (uint64_t *)a3);
            if ((_BYTE)v2413)
              WebCore::GraphicsContextGLANGLE::uniform3uiv();
            goto LABEL_2465;
          case 0x426:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
            v876 = *((_QWORD *)a3 + 1);
            v877 = *(_QWORD *)a3;
            v1153 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
            if (v876 < v1153 || v876 - v1153 <= 3)
              goto LABEL_2684;
            v1155 = v877 + v1153;
            *((_QWORD *)a3 + 2) = v1155 + 4;
            if (!v877)
              goto LABEL_3619;
            v1156 = ((v1155 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1156 || v876 - v1156 <= 3)
              goto LABEL_2548;
            *((_QWORD *)a3 + 2) = ((v1155 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
            v1158 = ((((v1155 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1158 || v876 - v1158 <= 3)
              goto LABEL_2548;
            v1160 = (((v1155 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
            *((_QWORD *)a3 + 2) = v1160 + 4;
            v1161 = ((v1160 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1161 || v876 - v1161 <= 3)
              goto LABEL_2548;
            v1163 = v877 + v1161;
            *((_QWORD *)a3 + 2) = v1163 + 4;
            v1164 = ((v1163 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1164 || v876 - v1164 <= 3)
              goto LABEL_2548;
            *((_QWORD *)a3 + 2) = ((v1163 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
            WebCore::GraphicsContextGLANGLE::uniform4ui(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            goto LABEL_2564;
          case 0x427:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
            IPC::Decoder::decode<std::tuple<int,std::span<unsigned int const,18446744073709551615ul>>>((uint64_t)cf, (uint64_t *)a3);
            if ((_BYTE)v2413)
              WebCore::GraphicsContextGLANGLE::uniform4uiv();
            goto LABEL_2465;
          case 0x428:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
            v1217 = IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,unsigned int>>((uint64_t *)a3);
            if ((v1218 & 0xFF00000000) != 0)
            {
              LODWORD(v2423[0]) = v1217;
              if (v1217)
                LODWORD(v2423[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
              WebCore::GraphicsContextGLANGLE::uniformBlockBinding(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            }
            goto LABEL_2564;
          case 0x42A:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
            IPC::Decoder::decode<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul>>>((uint64_t)cf, (uint64_t *)a3);
            if ((_BYTE)v2413)
              WebCore::GraphicsContextGLANGLE::uniformMatrix2x3fv();
            goto LABEL_2465;
          case 0x42B:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
            IPC::Decoder::decode<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul>>>((uint64_t)cf, (uint64_t *)a3);
            if ((_BYTE)v2413)
              WebCore::GraphicsContextGLANGLE::uniformMatrix2x4fv();
            goto LABEL_2465;
          case 0x42D:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
            IPC::Decoder::decode<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul>>>((uint64_t)cf, (uint64_t *)a3);
            if ((_BYTE)v2413)
              WebCore::GraphicsContextGLANGLE::uniformMatrix3x2fv();
            goto LABEL_2465;
          case 0x42E:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
            IPC::Decoder::decode<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul>>>((uint64_t)cf, (uint64_t *)a3);
            if ((_BYTE)v2413)
              WebCore::GraphicsContextGLANGLE::uniformMatrix3x4fv();
            goto LABEL_2465;
          case 0x430:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
            IPC::Decoder::decode<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul>>>((uint64_t)cf, (uint64_t *)a3);
            if ((_BYTE)v2413)
              WebCore::GraphicsContextGLANGLE::uniformMatrix4x2fv();
            goto LABEL_2465;
          case 0x431:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
            IPC::Decoder::decode<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul>>>((uint64_t)cf, (uint64_t *)a3);
            if ((_BYTE)v2413)
              WebCore::GraphicsContextGLANGLE::uniformMatrix4x3fv();
            goto LABEL_2465;
          case 0x43D:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
            v876 = *((_QWORD *)a3 + 1);
            v877 = *(_QWORD *)a3;
            v1305 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
            if (v876 < v1305 || v876 - v1305 <= 3)
              goto LABEL_2684;
            v1307 = v877 + v1305;
            *((_QWORD *)a3 + 2) = v1307 + 4;
            if (!v877)
              goto LABEL_3619;
            v1308 = ((v1307 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1308 || v876 - v1308 <= 3)
              goto LABEL_2548;
            *((_QWORD *)a3 + 2) = ((v1307 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
            v1310 = ((((v1307 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1310 || v876 - v1310 <= 3)
              goto LABEL_2548;
            v1312 = (((v1307 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
            *((_QWORD *)a3 + 2) = v1312 + 4;
            v1313 = ((v1312 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1313 || v876 - v1313 <= 3)
              goto LABEL_2548;
            v1315 = v877 + v1313;
            *((_QWORD *)a3 + 2) = v1315 + 4;
            v1316 = ((v1315 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1316 || v876 - v1316 <= 3)
              goto LABEL_2548;
            *((_QWORD *)a3 + 2) = ((v1315 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
            WebCore::GraphicsContextGLANGLE::vertexAttribI4i(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            goto LABEL_2564;
          case 0x43E:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
            v1084 = *((_QWORD *)a3 + 1);
            v1085 = *(_QWORD *)a3;
            v1086 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
            if (v1084 >= v1086 && v1084 - v1086 > 3)
            {
              *((_QWORD *)a3 + 2) = v1085 + v1086 + 4;
              if (v1085)
              {
                IPC::Decoder::decode<std::span<int const,4ul>>((uint64_t *)a3);
                if (!v1088)
                  goto LABEL_2549;
                WebCore::GraphicsContextGLANGLE::vertexAttribI4iv();
                goto LABEL_2564;
              }
              v2045 = v1084;
              v2046 = 0;
            }
            else
            {
              v2045 = 0;
              v2046 = 0;
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              v2047 = *((_QWORD *)a3 + 3);
              if (v2047)
              {
                if (v1084)
                {
                  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v2047 + 16))(v2047, v1085, v1084);
                  v2046 = *(_QWORD *)a3;
                  v2045 = *((_QWORD *)a3 + 1);
                }
                else
                {
                  v2045 = 0;
                  v2046 = 0;
                }
              }
            }
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v2048 = *((_QWORD *)a3 + 3);
            if (!v2048)
              goto LABEL_2549;
            goto LABEL_3156;
          case 0x43F:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
            IPC::Decoder::decode<std::tuple<unsigned int,int,unsigned int,int,int>>((uint64_t)cf, a3);
            if (cf[20])
              WebCore::GraphicsContextGLANGLE::vertexAttribI4ui(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            goto LABEL_2465;
          case 0x440:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
            v876 = *((_QWORD *)a3 + 1);
            v877 = *(_QWORD *)a3;
            v1089 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
            if (v876 < v1089 || v876 - v1089 <= 3)
              goto LABEL_2684;
            v1091 = v877 + v1089;
            *((_QWORD *)a3 + 2) = v1091 + 4;
            if (!v877)
              goto LABEL_3619;
            v1092 = ((v1091 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 >= v1092 && v876 - v1092 > 0xF)
            {
              *((_QWORD *)a3 + 2) = v877 + v1092 + 16;
              v1094 = 1;
              goto LABEL_1882;
            }
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v2053 = *((_QWORD *)a3 + 3);
            if (!v2053 || !v876)
              goto LABEL_3128;
            (*(void (**)(uint64_t))(*(_QWORD *)v2053 + 16))(v2053);
            v2353 = *(_QWORD *)a3;
            v2354 = *((_QWORD *)a3 + 1);
            v2355 = *((_QWORD *)a3 + 3);
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v1094 = 0;
            if (v2355 && v2354)
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2355 + 16))(v2355, v2353, v2354);
LABEL_3128:
              v1094 = 0;
            }
LABEL_1882:
            if (!v1094)
              goto LABEL_2549;
            WebCore::GraphicsContextGLANGLE::vertexAttribI4uiv();
            goto LABEL_2564;
          case 0x441:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
            v876 = *((_QWORD *)a3 + 1);
            v877 = *(_QWORD *)a3;
            v1119 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
            if (v876 < v1119 || v876 - v1119 <= 3)
              goto LABEL_2684;
            v1121 = v877 + v1119;
            *((_QWORD *)a3 + 2) = v1121 + 4;
            if (!v877)
              goto LABEL_3619;
            v1122 = ((v1121 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1122 || v876 - v1122 <= 3)
              goto LABEL_2548;
            *((_QWORD *)a3 + 2) = ((v1121 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
            v1124 = ((((v1121 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1124 || v876 - v1124 <= 3)
              goto LABEL_2548;
            v1126 = (((v1121 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
            *((_QWORD *)a3 + 2) = v1126 + 4;
            v1127 = ((v1126 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1127 || v876 - v1127 <= 3)
              goto LABEL_2548;
            v1129 = v877 + v1127;
            *((_QWORD *)a3 + 2) = v1129 + 4;
            v1130 = ((v1129 + 11) & 0xFFFFFFFFFFFFFFF8) - v877;
            if (v876 < v1130 || v876 - v1130 <= 7)
              goto LABEL_2548;
            *((_QWORD *)a3 + 2) = ((v1129 + 11) & 0xFFFFFFFFFFFFFFF8) + 8;
            WebCore::GraphicsContextGLANGLE::vertexAttribIPointer(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            goto LABEL_2564;
          case 0x444:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
            v94 = *((_QWORD *)a3 + 1);
            v95 = *(_QWORD *)a3;
            v1095 = ((*((_QWORD *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a3;
            if (v94 < v1095 || v94 - v1095 <= 7)
              goto LABEL_2273;
            v1097 = (void **)(v95 + v1095);
            *((_QWORD *)a3 + 2) = v1097 + 1;
            if (!v95)
              goto LABEL_3574;
            v1098 = (((unint64_t)v1097 + 11) & 0xFFFFFFFFFFFFFFFCLL) - v95;
            if (v94 < v1098 || v94 - v1098 <= 3)
              goto LABEL_1897;
            v1100 = *v1097;
            *((_QWORD *)a3 + 2) = (((unint64_t)v1097 + 11) & 0xFFFFFFFFFFFFFFFCLL) + 4;
            IPC::Decoder::decode<long long>((uint64_t *)a3);
            if (!v1101)
              goto LABEL_2275;
            WebCore::GraphicsContextGLANGLE::waitSync(*((WebCore::GraphicsContextGLANGLE **)this + 7), v1100);
            goto LABEL_2564;
          default:
            switch(*((_WORD *)a3 + 25))
            {
              case 0x3ED:
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
                if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3) & 0xFF00000000) != 0)
                  WebCore::GraphicsContextGLANGLE::readBuffer(*((WebCore::GraphicsContextGLANGLE **)this + 7));
                goto LABEL_2564;
              case 0x3EE:
              case 0x3EF:
              case 0x3F1:
              case 0x3F2:
              case 0x3F4:
                goto LABEL_1580;
              case 0x3F0:
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
                IPC::Decoder::decode<std::tuple<unsigned int,int,unsigned int,int,int>>((uint64_t)cf, a3);
                if (cf[20])
                  WebCore::GraphicsContextGLANGLE::renderbufferStorageMultisample(*((WebCore::GraphicsContextGLANGLE **)this
                                                                                  + 7));
                goto LABEL_2465;
              case 0x3F3:
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
                WebCore::GraphicsContextGLANGLE::resumeTransformFeedback(*((WebCore::GraphicsContextGLANGLE **)this + 7));
                goto LABEL_2564;
              case 0x3F5:
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
                v1079 = IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,float>>(a3);
                if ((v1080 & 0xFF00000000) != 0)
                {
                  v1081 = *(float *)&v1080;
                  LODWORD(v2423[0]) = v1079;
                  if (v1079)
                    LODWORD(v2423[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
                  WebCore::GraphicsContextGLANGLE::samplerParameterf(*((WebCore::GraphicsContextGLANGLE **)this + 7), v1081);
                }
                goto LABEL_2564;
              case 0x3F6:
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
                v1082 = IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,int>>(a3);
                if ((v1083 & 0xFF00000000) != 0)
                {
                  LODWORD(v2423[0]) = v1082;
                  if (v1082)
                    LODWORD(v2423[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
                  WebCore::GraphicsContextGLANGLE::samplerParameteri(*((WebCore::GraphicsContextGLANGLE **)this + 7));
                }
                goto LABEL_2564;
              default:
                if (v6 != 998)
                  goto LABEL_1580;
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
                WebCore::GraphicsContextGLANGLE::pauseTransformFeedback(*((WebCore::GraphicsContextGLANGLE **)this + 7));
                break;
            }
            goto LABEL_2564;
        }
      }
      if (*((unsigned __int16 *)a3 + 25) <= 0x3B3u)
      {
        switch(*((_WORD *)a3 + 25))
        {
          case 0x39A:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
            v12 = *((_QWORD *)a3 + 1);
            v13 = *(_QWORD *)a3;
            v854 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
            if (v12 < v854 || v12 - v854 <= 3)
              goto LABEL_2338;
            v856 = v13 + v854;
            *((_QWORD *)a3 + 2) = v856 + 4;
            if (!v13)
              goto LABEL_3577;
            v857 = ((v856 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
            if (v12 < v857 || v12 - v857 <= 3)
              goto LABEL_2159;
            *((_QWORD *)a3 + 2) = ((v856 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
            v859 = ((((v856 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
            if (v12 < v859 || v12 - v859 <= 3)
              goto LABEL_2159;
            v861 = v13 + v859;
            *((_QWORD *)a3 + 2) = v861 + 4;
            v862 = ((v861 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
            if (v12 < v862 || v12 - v862 <= 3)
              goto LABEL_2159;
            v864 = v13 + v862;
            *((_QWORD *)a3 + 2) = v864 + 4;
            v865 = ((v864 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
            if (v12 < v865 || v12 - v865 <= 3)
              goto LABEL_2159;
            v867 = v13 + v865;
            *((_QWORD *)a3 + 2) = v867 + 4;
            v868 = ((v867 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
            if (v12 < v868 || v12 - v868 <= 3)
              goto LABEL_2159;
            v870 = v13 + v868;
            *((_QWORD *)a3 + 2) = v870 + 4;
            v871 = ((v870 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
            if (v12 < v871 || v12 - v871 <= 3)
              goto LABEL_2159;
            v873 = v13 + v871;
            *((_QWORD *)a3 + 2) = v873 + 4;
            v874 = ((v873 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
            if (v12 < v874 || v12 - v874 <= 3)
              goto LABEL_2159;
            *((_QWORD *)a3 + 2) = v13 + v874 + 4;
            IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>((uint64_t *)a3, (uint64_t)cf);
            if (!cf[16])
              goto LABEL_2464;
            WebCore::GraphicsContextGLANGLE::compressedTexImage3D();
            break;
          case 0x39B:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
            v876 = *((_QWORD *)a3 + 1);
            v877 = *(_QWORD *)a3;
            v972 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
            if (v876 < v972 || v876 - v972 <= 3)
              goto LABEL_2684;
            v974 = (unsigned int *)(v877 + v972);
            *((_QWORD *)a3 + 2) = v974 + 1;
            if (!v877)
              goto LABEL_3619;
            v975 = (((unint64_t)v974 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v975 || v876 - v975 <= 3)
              goto LABEL_2548;
            v977 = *v974;
            *((_QWORD *)a3 + 2) = v877 + v975 + 4;
            v979 = v877 + v975 + 7;
            v978 = *(_DWORD *)(v877 + v975);
            v980 = (v979 & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v980 || v876 - v980 <= 3)
              goto LABEL_2548;
            v982 = (unsigned int *)(v877 + v980);
            *((_QWORD *)a3 + 2) = v982 + 1;
            v983 = *v982;
            v984 = (((unint64_t)v982 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v984 || v876 - v984 <= 3)
              goto LABEL_2548;
            v986 = (int *)(v877 + v984);
            *((_QWORD *)a3 + 2) = v986 + 1;
            v987 = *v986;
            v988 = (((unint64_t)v986 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v988 || v876 - v988 <= 3)
              goto LABEL_2548;
            v990 = (int *)(v877 + v988);
            *((_QWORD *)a3 + 2) = v990 + 1;
            v991 = *v990;
            v992 = (((unint64_t)v990 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v992 || v876 - v992 <= 3)
              goto LABEL_2548;
            v994 = (int *)(v877 + v992);
            *((_QWORD *)a3 + 2) = v994 + 1;
            v995 = *v994;
            v996 = (((unint64_t)v994 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v996 || v876 - v996 <= 3)
              goto LABEL_2548;
            v998 = (int *)(v877 + v996);
            *((_QWORD *)a3 + 2) = v998 + 1;
            v999 = *v998;
            v1000 = (((unint64_t)v998 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1000 || v876 - v1000 <= 3)
              goto LABEL_2548;
            v1002 = (int *)(v877 + v1000);
            *((_QWORD *)a3 + 2) = v1002 + 1;
            v1003 = (((unint64_t)v1002 + 11) & 0xFFFFFFFFFFFFFFF8) - v877;
            if (v876 < v1003 || v876 - v1003 <= 7)
              goto LABEL_2548;
            v1005 = *v1002;
            v1006 = (uint64_t *)(v877 + v1003);
            v1007 = *v1006;
            *((_QWORD *)a3 + 2) = v1006 + 1;
            WebCore::GraphicsContextGLANGLE::compressedTexImage3D(*((WebCore::GraphicsContextGLANGLE **)this + 7), v977, v978, v983, v987, v991, v995, v999, v1005, v1007);
            goto LABEL_2564;
          case 0x39C:
          case 0x39D:
          case 0x3A0:
          case 0x3A1:
          case 0x3A2:
          case 0x3A4:
          case 0x3A5:
          case 0x3A6:
          case 0x3A8:
          case 0x3A9:
          case 0x3AB:
          case 0x3AC:
            goto LABEL_1580;
          case 0x39E:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
            v12 = *((_QWORD *)a3 + 1);
            v13 = *(_QWORD *)a3;
            v906 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
            if (v12 < v906 || v12 - v906 <= 3)
              goto LABEL_2338;
            v908 = v13 + v906;
            *((_QWORD *)a3 + 2) = v908 + 4;
            if (!v13)
              goto LABEL_3577;
            v909 = ((v908 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
            if (v12 < v909 || v12 - v909 <= 3)
              goto LABEL_2159;
            *((_QWORD *)a3 + 2) = ((v908 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
            v911 = ((((v908 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
            if (v12 < v911 || v12 - v911 <= 3)
              goto LABEL_2159;
            v913 = v13 + v911;
            *((_QWORD *)a3 + 2) = v913 + 4;
            v914 = ((v913 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
            if (v12 < v914 || v12 - v914 <= 3)
              goto LABEL_2159;
            v916 = v13 + v914;
            *((_QWORD *)a3 + 2) = v916 + 4;
            v917 = ((v916 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
            if (v12 < v917 || v12 - v917 <= 3)
              goto LABEL_2159;
            v919 = v13 + v917;
            *((_QWORD *)a3 + 2) = v919 + 4;
            v920 = ((v919 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
            if (v12 < v920 || v12 - v920 <= 3)
              goto LABEL_2159;
            v922 = v13 + v920;
            *((_QWORD *)a3 + 2) = v922 + 4;
            v923 = ((v922 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
            if (v12 < v923 || v12 - v923 <= 3)
              goto LABEL_2159;
            v925 = v13 + v923;
            *((_QWORD *)a3 + 2) = v925 + 4;
            v926 = ((v925 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
            if (v12 < v926 || v12 - v926 <= 3)
              goto LABEL_2159;
            v928 = v13 + v926;
            *((_QWORD *)a3 + 2) = v928 + 4;
            v929 = ((v928 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
            if (v12 < v929 || v12 - v929 <= 3)
              goto LABEL_2159;
            v931 = v13 + v929;
            *((_QWORD *)a3 + 2) = v931 + 4;
            v932 = ((v931 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
            if (v12 < v932 || v12 - v932 <= 3)
              goto LABEL_2159;
            *((_QWORD *)a3 + 2) = v13 + v932 + 4;
            IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>((uint64_t *)a3, (uint64_t)cf);
            if (!cf[16])
              goto LABEL_2464;
            WebCore::GraphicsContextGLANGLE::compressedTexSubImage3D();
            break;
          case 0x39F:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
            v876 = *((_QWORD *)a3 + 1);
            v877 = *(_QWORD *)a3;
            v1008 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
            if (v876 < v1008 || v876 - v1008 <= 3)
              goto LABEL_2684;
            v1010 = (unsigned int *)(v877 + v1008);
            *((_QWORD *)a3 + 2) = v1010 + 1;
            if (!v877)
              goto LABEL_3619;
            v1011 = (((unint64_t)v1010 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1011 || v876 - v1011 <= 3)
              goto LABEL_2548;
            v1013 = *v1010;
            *((_QWORD *)a3 + 2) = v877 + v1011 + 4;
            v1015 = v877 + v1011 + 7;
            v1014 = *(_DWORD *)(v877 + v1011);
            v1016 = (v1015 & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1016 || v876 - v1016 <= 3)
              goto LABEL_2548;
            v1018 = (int *)(v877 + v1016);
            *((_QWORD *)a3 + 2) = v1018 + 1;
            v1019 = *v1018;
            v1020 = (((unint64_t)v1018 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1020 || v876 - v1020 <= 3)
              goto LABEL_2548;
            v1022 = (int *)(v877 + v1020);
            *((_QWORD *)a3 + 2) = v1022 + 1;
            v1023 = *v1022;
            v1024 = (((unint64_t)v1022 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1024 || v876 - v1024 <= 3)
              goto LABEL_2548;
            v1026 = (int *)(v877 + v1024);
            *((_QWORD *)a3 + 2) = v1026 + 1;
            v1027 = *v1026;
            v1028 = (((unint64_t)v1026 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1028 || v876 - v1028 <= 3)
              goto LABEL_2548;
            v1030 = (int *)(v877 + v1028);
            *((_QWORD *)a3 + 2) = v1030 + 1;
            v1031 = *v1030;
            v1032 = (((unint64_t)v1030 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1032 || v876 - v1032 <= 3)
              goto LABEL_2548;
            v1034 = (int *)(v877 + v1032);
            *((_QWORD *)a3 + 2) = v1034 + 1;
            v1035 = *v1034;
            v1036 = (((unint64_t)v1034 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1036 || v876 - v1036 <= 3)
              goto LABEL_2548;
            *((_QWORD *)a3 + 2) = v877 + v1036 + 4;
            v1039 = v877 + v1036 + 7;
            v1038 = *(_DWORD *)(v877 + v1036);
            v1040 = (v1039 & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1040 || v876 - v1040 <= 3)
              goto LABEL_2548;
            *((_QWORD *)a3 + 2) = v877 + v1040 + 4;
            v1043 = v877 + v1040 + 7;
            v1042 = *(_DWORD *)(v877 + v1040);
            v1044 = (v1043 & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1044 || v876 - v1044 <= 3)
              goto LABEL_2548;
            v1046 = (int *)(v877 + v1044);
            *((_QWORD *)a3 + 2) = v1046 + 1;
            v1047 = (((unint64_t)v1046 + 11) & 0xFFFFFFFFFFFFFFF8) - v877;
            if (v876 < v1047 || v876 - v1047 <= 7)
              goto LABEL_2548;
            v1049 = *v1046;
            v1050 = (uint64_t *)(v877 + v1047);
            v1051 = *v1050;
            *((_QWORD *)a3 + 2) = v1050 + 1;
            WebCore::GraphicsContextGLANGLE::compressedTexSubImage3D(*((WebCore::GraphicsContextGLANGLE **)this + 7), v1013, v1014, v1019, v1023, v1027, v1031, v1035, v1038, v1042, v1049, v1051);
            goto LABEL_2564;
          case 0x3A3:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
            v876 = *((_QWORD *)a3 + 1);
            v877 = *(_QWORD *)a3;
            v934 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
            if (v876 < v934 || v876 - v934 <= 3)
              goto LABEL_2684;
            v936 = (unsigned int *)(v877 + v934);
            *((_QWORD *)a3 + 2) = v936 + 1;
            if (!v877)
              goto LABEL_3619;
            v937 = (((unint64_t)v936 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v937 || v876 - v937 <= 3)
              goto LABEL_2548;
            v939 = *v936;
            *((_QWORD *)a3 + 2) = v877 + v937 + 4;
            v941 = v877 + v937 + 7;
            v940 = *(_DWORD *)(v877 + v937);
            v942 = (v941 & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v942 || v876 - v942 <= 3)
              goto LABEL_2548;
            v944 = (int *)(v877 + v942);
            *((_QWORD *)a3 + 2) = v944 + 1;
            v945 = *v944;
            v946 = (((unint64_t)v944 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v946 || v876 - v946 <= 3)
              goto LABEL_2548;
            v948 = (int *)(v877 + v946);
            *((_QWORD *)a3 + 2) = v948 + 1;
            v949 = *v948;
            v950 = (((unint64_t)v948 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v950 || v876 - v950 <= 3)
              goto LABEL_2548;
            v952 = (int *)(v877 + v950);
            *((_QWORD *)a3 + 2) = v952 + 1;
            v953 = *v952;
            v954 = (((unint64_t)v952 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v954 || v876 - v954 <= 3)
              goto LABEL_2548;
            v956 = (int *)(v877 + v954);
            *((_QWORD *)a3 + 2) = v956 + 1;
            v957 = *v956;
            v958 = (((unint64_t)v956 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v958 || v876 - v958 <= 3)
              goto LABEL_2548;
            v960 = (int *)(v877 + v958);
            *((_QWORD *)a3 + 2) = v960 + 1;
            v961 = *v960;
            v962 = (((unint64_t)v960 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v962 || v876 - v962 <= 3)
              goto LABEL_2548;
            v964 = (int *)(v877 + v962);
            *((_QWORD *)a3 + 2) = v964 + 1;
            v965 = (((unint64_t)v964 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v965 || v876 - v965 <= 3)
              goto LABEL_2548;
            v967 = *v964;
            v968 = (int *)(v877 + v965);
            v969 = *v968;
            *((_QWORD *)a3 + 2) = v968 + 1;
            WebCore::GraphicsContextGLANGLE::copyTexSubImage3D(*((WebCore::GraphicsContextGLANGLE **)this + 7), v939, v940, v945, v949, v953, v957, v961, v967, v969);
            goto LABEL_2564;
          case 0x3A7:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
            v971 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
            if ((v971 & 0xFF00000000) == 0)
              goto LABEL_2465;
            LODWORD(v2428) = v971;
            Buffer = WebCore::GraphicsContextGLANGLE::createQuery(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            goto LABEL_1374;
          case 0x3AA:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
            v905 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
            if ((v905 & 0xFF00000000) == 0)
              goto LABEL_2465;
            LODWORD(v2428) = v905;
            Buffer = WebCore::GraphicsContextGLANGLE::createSampler(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            goto LABEL_1374;
          case 0x3AD:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
            v970 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
            if ((v970 & 0xFF00000000) == 0)
              goto LABEL_2465;
            LODWORD(v2428) = v970;
            Buffer = WebCore::GraphicsContextGLANGLE::createTransformFeedback(*((WebCore::GraphicsContextGLANGLE **)this
                                                                              + 7));
            goto LABEL_1374;
          default:
            switch(*((_WORD *)a3 + 25))
            {
              case 0x372:
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
                v843 = IPC::Decoder::decode<std::tuple<float,float>>(a3);
                if (v844)
                {
                  LODWORD(v2423[0]) = HIDWORD(v843);
                  if (HIDWORD(v843))
                    LODWORD(v2423[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
                  WebCore::GraphicsContextGLANGLE::beginQuery(*((WebCore::GraphicsContextGLANGLE **)this + 7));
                }
                goto LABEL_2564;
              case 0x373:
              case 0x375:
              case 0x376:
              case 0x379:
              case 0x37A:
              case 0x37C:
                goto LABEL_1580;
              case 0x374:
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
                if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3) & 0xFF00000000) != 0)
                  WebCore::GraphicsContextGLANGLE::beginTransformFeedback(*((WebCore::GraphicsContextGLANGLE **)this + 7));
                goto LABEL_2564;
              case 0x377:
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
                IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,unsigned int>>((uint64_t *)a3);
                if ((v1052 & 0xFF00000000) != 0)
                {
                  LODWORD(v2423[0]) = v1052;
                  if ((_DWORD)v1052)
                    LODWORD(v2423[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
                  WebCore::GraphicsContextGLANGLE::bindBufferBase(*((WebCore::GraphicsContextGLANGLE **)this + 7));
                }
                goto LABEL_2564;
              case 0x378:
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
                v94 = *((_QWORD *)a3 + 1);
                v95 = *(_QWORD *)a3;
                v1055 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
                if (v94 < v1055 || v94 - v1055 <= 3)
                  goto LABEL_2273;
                v1056 = v95 + v1055;
                *((_QWORD *)a3 + 2) = v1056 + 4;
                if (!v95)
                  goto LABEL_3574;
                v1057 = ((v1056 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
                if (v94 < v1057 || v94 - v1057 <= 3)
                  goto LABEL_1897;
                *((_QWORD *)a3 + 2) = ((v1056 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
                v1059 = ((((v1056 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v95;
                if (v94 < v1059 || v94 - v1059 <= 3)
                  goto LABEL_1897;
                *((_QWORD *)a3 + 2) = v95 + v1059 + 4;
                v1062 = v95 + v1059 + 11;
                v1061 = *(_DWORD *)(v95 + v1059);
                v1063 = (v1062 & 0xFFFFFFFFFFFFFFF8) - v95;
                if (v94 < v1063 || v94 - v1063 <= 7)
                  goto LABEL_1897;
                v1065 = v95 + v1063;
                *((_QWORD *)a3 + 2) = v1065 + 8;
                v1066 = ((v1065 + 15) & 0xFFFFFFFFFFFFFFF8) - v95;
                if (v94 < v1066 || v94 - v1066 <= 7)
                  goto LABEL_1897;
                *((_QWORD *)a3 + 2) = ((v1065 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
                LODWORD(v2423[0]) = v1061;
                if (v1061)
                  LODWORD(v2423[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
                WebCore::GraphicsContextGLANGLE::bindBufferRange(*((WebCore::GraphicsContextGLANGLE **)this + 7));
                break;
              case 0x37B:
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
                v1068 = IPC::Decoder::decode<std::tuple<float,float>>(a3);
                if (v1069)
                {
                  LODWORD(v2423[0]) = HIDWORD(v1068);
                  if (HIDWORD(v1068))
                    LODWORD(v2423[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
                  WebCore::GraphicsContextGLANGLE::bindSampler(*((WebCore::GraphicsContextGLANGLE **)this + 7));
                }
                goto LABEL_2564;
              case 0x37D:
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
                v1053 = IPC::Decoder::decode<std::tuple<float,float>>(a3);
                if (v1054)
                {
                  LODWORD(v2423[0]) = HIDWORD(v1053);
                  if (HIDWORD(v1053))
                    LODWORD(v2423[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
                  WebCore::GraphicsContextGLANGLE::bindTransformFeedback(*((WebCore::GraphicsContextGLANGLE **)this + 7));
                }
                goto LABEL_2564;
              default:
                switch(*((_WORD *)a3 + 25))
                {
                  case 0x38D:
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
                    v876 = *((_QWORD *)a3 + 1);
                    v877 = *(_QWORD *)a3;
                    v878 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
                    if (v876 < v878 || v876 - v878 <= 3)
                      goto LABEL_2684;
                    v879 = v877 + v878;
                    *((_QWORD *)a3 + 2) = v879 + 4;
                    if (!v877)
                      goto LABEL_3619;
                    v880 = ((v879 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
                    if (v876 < v880 || v876 - v880 <= 3)
                      goto LABEL_2548;
                    *((_QWORD *)a3 + 2) = ((v879 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
                    v881 = ((((v879 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
                    if (v876 < v881 || v876 - v881 <= 3)
                      goto LABEL_2548;
                    v883 = (float *)((((v879 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
                    *((_QWORD *)a3 + 2) = v883 + 1;
                    v884 = (((unint64_t)v883 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
                    if (v876 < v884 || v876 - v884 <= 3)
                      goto LABEL_2548;
                    v886 = *v883;
                    *((_QWORD *)a3 + 2) = (((unint64_t)v883 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
                    WebCore::GraphicsContextGLANGLE::clearBufferfi(*((WebCore::GraphicsContextGLANGLE **)this + 7), v886);
                    goto LABEL_2564;
                  case 0x38E:
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
                    v12 = *((_QWORD *)a3 + 1);
                    v13 = *(_QWORD *)a3;
                    v1076 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
                    if (v12 < v1076 || v12 - v1076 <= 3)
                      goto LABEL_2338;
                    v1077 = v13 + v1076;
                    *((_QWORD *)a3 + 2) = v1077 + 4;
                    if (!v13)
                      goto LABEL_3577;
                    v1078 = ((v1077 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
                    if (v12 < v1078 || v12 - v1078 <= 3)
                      goto LABEL_2159;
                    *((_QWORD *)a3 + 2) = ((v1077 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
                    IPC::Decoder::decode<std::span<float const,18446744073709551615ul>>((uint64_t *)a3, (uint64_t)cf);
                    if (!cf[16])
                      goto LABEL_2464;
                    WebCore::GraphicsContextGLANGLE::clearBufferfv();
                    break;
                  case 0x38F:
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
                    v12 = *((_QWORD *)a3 + 1);
                    v13 = *(_QWORD *)a3;
                    v1070 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
                    if (v12 < v1070 || v12 - v1070 <= 3)
                      goto LABEL_2338;
                    v1071 = v13 + v1070;
                    *((_QWORD *)a3 + 2) = v1071 + 4;
                    if (!v13)
                      goto LABEL_3577;
                    v1072 = ((v1071 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
                    if (v12 < v1072 || v12 - v1072 <= 3)
                      goto LABEL_2159;
                    *((_QWORD *)a3 + 2) = ((v1071 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
                    IPC::Decoder::decode<std::span<int const,18446744073709551615ul>>((uint64_t *)a3, (uint64_t)cf);
                    if (!cf[16])
                      goto LABEL_2464;
                    WebCore::GraphicsContextGLANGLE::clearBufferiv();
                    break;
                  case 0x390:
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
                    v12 = *((_QWORD *)a3 + 1);
                    v13 = *(_QWORD *)a3;
                    v1073 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
                    if (v12 < v1073 || v12 - v1073 <= 3)
                      goto LABEL_2338;
                    v1074 = v13 + v1073;
                    *((_QWORD *)a3 + 2) = v1074 + 4;
                    if (!v13)
                      goto LABEL_3577;
                    v1075 = ((v1074 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
                    if (v12 < v1075 || v12 - v1075 <= 3)
                      goto LABEL_2159;
                    *((_QWORD *)a3 + 2) = ((v1074 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
                    IPC::Decoder::decode<std::span<unsigned int const,18446744073709551615ul>>((uint64_t *)a3, (uint64_t)cf);
                    if (!cf[16])
                      goto LABEL_2464;
                    WebCore::GraphicsContextGLANGLE::clearBufferuiv();
                    break;
                  default:
                    goto LABEL_1580;
                }
                goto LABEL_2465;
            }
            goto LABEL_2564;
        }
        goto LABEL_2465;
      }
      if (*((unsigned __int16 *)a3 + 25) <= 0x3D7u)
      {
        switch(*((_WORD *)a3 + 25))
        {
          case 0x3C7:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
            IPC::Decoder::decode<std::tuple<std::span<unsigned int const,18446744073709551615ul>>>((uint64_t *)a3, (uint64_t)cf);
            if (cf[16])
              WebCore::GraphicsContextGLANGLE::drawBuffers();
            goto LABEL_2465;
          case 0x3C8:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
            IPC::Decoder::decode<std::tuple<std::span<unsigned int const,18446744073709551615ul>>>((uint64_t *)a3, (uint64_t)cf);
            if (!cf[16])
              goto LABEL_2465;
            v1341 = *(void (**)(void))(**((_QWORD **)this + 7) + 1992);
            goto LABEL_2468;
          case 0x3C9:
          case 0x3CA:
          case 0x3CB:
          case 0x3CD:
          case 0x3CE:
          case 0x3CF:
          case 0x3D1:
            goto LABEL_1580;
          case 0x3CC:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
            v876 = *((_QWORD *)a3 + 1);
            v877 = *(_QWORD *)a3;
            v1326 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
            if (v876 < v1326 || v876 - v1326 <= 3)
              goto LABEL_2684;
            v1327 = v877 + v1326;
            *((_QWORD *)a3 + 2) = v1327 + 4;
            if (!v877)
              goto LABEL_3619;
            v1328 = ((v1327 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1328 || v876 - v1328 <= 3)
              goto LABEL_2548;
            *((_QWORD *)a3 + 2) = ((v1327 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
            v1330 = ((((v1327 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1330 || v876 - v1330 <= 3)
              goto LABEL_2548;
            v1332 = (((v1327 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
            *((_QWORD *)a3 + 2) = v1332 + 4;
            v1333 = ((v1332 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1333 || v876 - v1333 <= 3)
              goto LABEL_2548;
            v1335 = v877 + v1333;
            *((_QWORD *)a3 + 2) = v1335 + 4;
            v1336 = ((v1335 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 < v1336 || v876 - v1336 <= 3)
              goto LABEL_2548;
            v1338 = v877 + v1336;
            *((_QWORD *)a3 + 2) = v1338 + 4;
            v1339 = ((v1338 + 11) & 0xFFFFFFFFFFFFFFF8) - v877;
            if (v876 < v1339 || v876 - v1339 <= 7)
              goto LABEL_2548;
            *((_QWORD *)a3 + 2) = ((v1338 + 11) & 0xFFFFFFFFFFFFFFF8) + 8;
            WebCore::GraphicsContextGLANGLE::drawRangeElements(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            break;
          case 0x3D0:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
            if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3) & 0xFF00000000) != 0)
              WebCore::GraphicsContextGLANGLE::endQuery(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            goto LABEL_2564;
          case 0x3D2:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
            WebCore::GraphicsContextGLANGLE::endTransformFeedback(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            goto LABEL_2564;
          default:
            switch(*((_WORD *)a3 + 25))
            {
              case 0x3B4:
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
                v903 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
                if ((v903 & 0xFF00000000) != 0 && (_DWORD)v903)
                {
                  WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::take((uint64_t *)this + 24, v903);
                  WebCore::GraphicsContextGLANGLE::deleteQuery(*((WebCore::GraphicsContextGLANGLE **)this + 7));
                }
                goto LABEL_2564;
              case 0x3B7:
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
                v1342 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
                if ((v1342 & 0xFF00000000) != 0 && (_DWORD)v1342)
                {
                  WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::take((uint64_t *)this + 24, v1342);
                  WebCore::GraphicsContextGLANGLE::deleteSampler(*((WebCore::GraphicsContextGLANGLE **)this + 7));
                }
                goto LABEL_2564;
              case 0x3B9:
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
                v1343 = (void *)IPC::Decoder::decode<std::tuple<double>>((uint64_t *)a3);
                if (v1344)
                  WebCore::GraphicsContextGLANGLE::deleteSync(*((WebCore::GraphicsContextGLANGLE **)this + 7), v1343);
                goto LABEL_2564;
              case 0x3BB:
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
                v1345 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
                if ((v1345 & 0xFF00000000) != 0 && (_DWORD)v1345)
                {
                  WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::take((uint64_t *)this + 24, v1345);
                  WebCore::GraphicsContextGLANGLE::deleteTransformFeedback(*((WebCore::GraphicsContextGLANGLE **)this + 7));
                }
                goto LABEL_2564;
              default:
                goto LABEL_1580;
            }
        }
        goto LABEL_2564;
      }
      switch(v6)
      {
        case 984:
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
          v876 = *((_QWORD *)a3 + 1);
          v877 = *(_QWORD *)a3;
          v889 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
          if (v876 < v889 || v876 - v889 <= 3)
            goto LABEL_2684;
          v891 = v877 + v889;
          *((_QWORD *)a3 + 2) = v891 + 4;
          if (!v877)
            goto LABEL_3619;
          v892 = ((v891 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
          if (v876 >= v892 && v876 - v892 > 3)
          {
            *((_QWORD *)a3 + 2) = ((v891 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
            v894 = ((((v891 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 >= v894 && v876 - v894 > 3)
            {
              *((_QWORD *)a3 + 2) = v877 + v894 + 4;
              v897 = v877 + v894 + 7;
              v896 = *(_DWORD *)(v877 + v894);
              v898 = (v897 & 0xFFFFFFFFFFFFFFFCLL) - v877;
              if (v876 >= v898 && v876 - v898 > 3)
              {
                v900 = v877 + v898;
                *((_QWORD *)a3 + 2) = v900 + 4;
                v901 = ((v900 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
                if (v876 >= v901 && v876 - v901 > 3)
                {
                  *((_QWORD *)a3 + 2) = ((v900 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
                  LODWORD(v2423[0]) = v896;
                  if (v896)
                    LODWORD(v2423[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
                  WebCore::GraphicsContextGLANGLE::framebufferTextureLayer(*((WebCore::GraphicsContextGLANGLE **)this + 7));
                  goto LABEL_2564;
                }
              }
            }
          }
LABEL_2548:
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v1466 = *((_QWORD *)a3 + 3);
          if (v1466)
          {
            if (v876)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v1466 + 16))(v1466);
              v2046 = *(_QWORD *)a3;
              v2045 = *((_QWORD *)a3 + 1);
              v2048 = *((_QWORD *)a3 + 3);
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              if (v2048)
              {
LABEL_3156:
                if (v2045)
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2048 + 16))(v2048, v2046);
              }
            }
          }
LABEL_2549:
          v1322 = *(_QWORD *)a3;
          v1467 = *((_QWORD *)a3 + 1);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v1324 = *((_QWORD *)a3 + 3);
          if (!v1324 || !v1467)
            goto LABEL_2564;
LABEL_2551:
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1324 + 16))(v1324, v1322);
          goto LABEL_2564;
        case 988:
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
          v549 = *((_QWORD *)a3 + 1);
          v550 = *(_QWORD *)a3;
          v887 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
          if (v549 >= v887 && v549 - v887 > 3)
          {
            *((_QWORD *)a3 + 2) = v550 + v887 + 4;
            if (v550)
            {
              IPC::Decoder::decode<std::span<unsigned int const,18446744073709551615ul>>((uint64_t *)a3, (uint64_t)cf);
              if (cf[16])
              {
                WebCore::GraphicsContextGLANGLE::invalidateFramebuffer();
                goto LABEL_2465;
              }
              goto LABEL_2464;
            }
LABEL_3593:
            v1249 = v549;
            v1248 = v550;
          }
          else
          {
            v1249 = 0;
            v1248 = 0;
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v1538 = *((_QWORD *)a3 + 3);
            if (v1538)
            {
              if (v549)
              {
LABEL_2612:
                (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v1538 + 16))(v1538, v550, v549);
LABEL_2462:
                v1248 = *(_QWORD *)a3;
                v1249 = *((_QWORD *)a3 + 1);
              }
              else
              {
LABEL_3028:
                v1249 = 0;
                v1248 = 0;
              }
            }
          }
LABEL_2463:
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v1250 = *((_QWORD *)a3 + 3);
          if (!v1250)
            goto LABEL_2464;
LABEL_2469:
          if (v1249)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1250 + 16))(v1250, v1248);
          goto LABEL_2464;
        case 989:
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
          v553 = *((_QWORD *)a3 + 1);
          v554 = *(_QWORD *)a3;
          v847 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
          if (v553 < v847 || v553 - v847 <= 3)
          {
LABEL_2678:
            v1589 = 0;
            v1590 = 0;
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v1591 = *((_QWORD *)a3 + 3);
            if (v1591)
            {
              if (v553)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v1591 + 16))(v1591);
                v1590 = *(_QWORD *)a3;
                v1589 = *((_QWORD *)a3 + 1);
              }
              else
              {
                v1589 = 0;
                v1590 = 0;
              }
            }
          }
          else
          {
            *((_QWORD *)a3 + 2) = v554 + v847 + 4;
            if (v554)
            {
              IPC::Decoder::decode<std::span<unsigned int const,18446744073709551615ul>>((uint64_t *)a3, (uint64_t)cf);
              if (!cf[16])
                goto LABEL_2464;
              v12 = *((_QWORD *)a3 + 1);
              v13 = *(_QWORD *)a3;
              v848 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
              if (v12 < v848 || v12 - v848 <= 3)
              {
LABEL_2338:
                v652 = 0;
                v653 = 0;
                *(_QWORD *)a3 = 0;
                *((_QWORD *)a3 + 1) = 0;
                v1347 = *((_QWORD *)a3 + 3);
                if (v1347)
                {
                  if (v12)
                  {
                    (*(void (**)(uint64_t))(*(_QWORD *)v1347 + 16))(v1347);
                    v653 = *(_QWORD *)a3;
                    v652 = *((_QWORD *)a3 + 1);
                  }
                  else
                  {
                    v652 = 0;
                    v653 = 0;
                  }
                }
              }
              else
              {
                v849 = v13 + v848;
                *((_QWORD *)a3 + 2) = v849 + 4;
                if (v13)
                {
                  v850 = ((v849 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
                  if (v12 >= v850 && v12 - v850 > 3)
                  {
                    *((_QWORD *)a3 + 2) = ((v849 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
                    v851 = ((((v849 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
                    if (v12 >= v851 && v12 - v851 > 3)
                    {
                      v852 = v13 + v851;
                      *((_QWORD *)a3 + 2) = v852 + 4;
                      v853 = ((v852 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v13;
                      if (v12 >= v853 && v12 - v853 > 3)
                      {
                        *((_QWORD *)a3 + 2) = ((v852 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
                        WebCore::GraphicsContextGLANGLE::invalidateSubFramebuffer();
                        goto LABEL_2465;
                      }
                    }
                  }
LABEL_2159:
                  *(_QWORD *)a3 = 0;
                  *((_QWORD *)a3 + 1) = 0;
                  v1247 = *((_QWORD *)a3 + 3);
                  if (!v1247
                    || !v12
                    || ((*(void (**)(uint64_t))(*(_QWORD *)v1247 + 16))(v1247),
                        v1248 = *(_QWORD *)a3,
                        v1249 = *((_QWORD *)a3 + 1),
                        v1250 = *((_QWORD *)a3 + 3),
                        *(_QWORD *)a3 = 0,
                        *((_QWORD *)a3 + 1) = 0,
                        !v1250))
                  {
LABEL_2464:
                    v1419 = *((_QWORD *)a3 + 1);
                    *(_QWORD *)a3 = 0;
                    *((_QWORD *)a3 + 1) = 0;
                    v1420 = *((_QWORD *)a3 + 3);
                    if (v1420 && v1419)
                    {
                      v1341 = *(void (**)(void))(*(_QWORD *)v1420 + 16);
LABEL_2468:
                      v1341();
                    }
                    goto LABEL_2465;
                  }
                  goto LABEL_2469;
                }
LABEL_3577:
                v652 = v12;
                v653 = v13;
              }
LABEL_2339:
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              v1348 = *((_QWORD *)a3 + 3);
              if (v1348 && v652)
                (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v1348 + 16))(v1348, v653, v652);
              goto LABEL_2464;
            }
LABEL_3617:
            v1589 = v553;
            v1590 = v554;
          }
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v1592 = *((_QWORD *)a3 + 3);
          if (v1592 && v1589)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1592 + 16))(v1592, v1590);
          goto LABEL_2464;
      }
LABEL_1580:
      if (*((unsigned __int16 *)a3 + 25) <= 0x3C5u)
      {
        if (*((unsigned __int16 *)a3 + 25) <= 0x395u)
        {
          switch(*((_WORD *)a3 + 25))
          {
            case 0x382:
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
              IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,unsigned int>>((uint64_t *)a3);
              if ((v904 & 0xFF00000000) != 0)
                WebCore::GraphicsContextGLANGLE::blendEquationSeparateiOES(*((WebCore::GraphicsContextGLANGLE **)this + 7));
              break;
            case 0x383:
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
              IPC::Decoder::decode<std::tuple<float,float>>(a3);
              if (v1443)
                WebCore::GraphicsContextGLANGLE::blendEquationiOES(*((WebCore::GraphicsContextGLANGLE **)this + 7));
              break;
            case 0x384:
            case 0x385:
              goto LABEL_2672;
            case 0x386:
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
              IPC::Decoder::decode<std::tuple<unsigned int,int,unsigned int,int,int>>((uint64_t)cf, a3);
              if (cf[20])
                WebCore::GraphicsContextGLANGLE::blendFuncSeparateiOES(*((WebCore::GraphicsContextGLANGLE **)this + 7));
              goto LABEL_2465;
            case 0x387:
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
              IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,unsigned int>>((uint64_t *)a3);
              if ((v1442 & 0xFF00000000) != 0)
                WebCore::GraphicsContextGLANGLE::blendFunciOES(*((WebCore::GraphicsContextGLANGLE **)this + 7));
              break;
            default:
              if (v6 == 883)
              {
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
                v1449 = IPC::Decoder::decode<std::tuple<float,float>>(a3);
                if (v1450)
                {
                  LODWORD(v2423[0]) = HIDWORD(v1449);
                  if (HIDWORD(v1449))
                    LODWORD(v2423[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
                  WebCore::GraphicsContextGLANGLE::beginQueryEXT(*((WebCore::GraphicsContextGLANGLE **)this + 7));
                }
                break;
              }
              if (v6 != 916)
                goto LABEL_2672;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
              IPC::Decoder::decode<std::tuple<float,float>>(a3);
              if (v1366)
                WebCore::GraphicsContextGLANGLE::clipControlEXT(*((WebCore::GraphicsContextGLANGLE **)this + 7));
              break;
          }
LABEL_2564:
          v1421 = (unsigned __int8 ***)cf;
          goto LABEL_2565;
        }
        if (*((unsigned __int16 *)a3 + 25) > 0x3B0u)
        {
          switch(v6)
          {
            case 945:
              if (WebKit::RemoteGraphicsContextGL::webXREnabled(this))
              {
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
                v1444 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
                if ((v1444 & 0xFF00000000) != 0 && (_DWORD)v1444)
                {
                  WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::take((uint64_t *)this + 24, v1444);
                  WebCore::GraphicsContextGLANGLE::deleteExternalSync(*((WebCore::GraphicsContextGLANGLE **)this + 7));
                }
                goto LABEL_2564;
              }
              v6 = *((unsigned __int16 *)a3 + 25);
              break;
            case 949:
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
              v1445 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
              if ((v1445 & 0xFF00000000) != 0 && (_DWORD)v1445)
              {
                WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::take((uint64_t *)this + 24, v1445);
                WebCore::GraphicsContextGLANGLE::deleteQueryEXT(*((WebCore::GraphicsContextGLANGLE **)this + 7));
              }
              goto LABEL_2564;
            case 963:
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
              IPC::Decoder::decode<std::tuple<float,float>>(a3);
              if (v1346)
                WebCore::GraphicsContextGLANGLE::disableiOES(*((WebCore::GraphicsContextGLANGLE **)this + 7));
              goto LABEL_2564;
          }
          goto LABEL_2672;
        }
        if (v6 != 918)
        {
          if (v6 == 936)
          {
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
            v1367 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
            if ((v1367 & 0xFF00000000) != 0)
            {
              LODWORD(v2428) = v1367;
              Buffer = WebCore::GraphicsContextGLANGLE::createQueryEXT(*((WebCore::GraphicsContextGLANGLE **)this + 7));
LABEL_1374:
              LODWORD(v2430) = Buffer;
              if (Buffer)
                WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned int &>(cf, (uint64_t *)this + 24, (int *)&v2428, &v2430);
            }
            goto LABEL_2465;
          }
          goto LABEL_2672;
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
        v876 = *((_QWORD *)a3 + 1);
        v877 = *(_QWORD *)a3;
        v1446 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
        if (v876 >= v1446 && v876 - v1446 > 3)
        {
          v1447 = (unsigned __int8 *)(v877 + v1446);
          v1448 = v877 + v1446 + 4;
          *((_QWORD *)a3 + 2) = v1448;
          if (!v877)
            goto LABEL_3619;
          if (v876 > v1448 - v877)
          {
            *((_QWORD *)a3 + 2) = v1447 + 5;
            if (v1447[4] < 2u)
            {
              if (v876 <= (unint64_t)&v1447[-v877 + 5])
                goto LABEL_3255;
              *((_QWORD *)a3 + 2) = v1447 + 6;
              if (v1447[5] < 2u)
              {
                if (v876 <= (unint64_t)&v1447[-v877 + 6])
                  goto LABEL_3255;
                *((_QWORD *)a3 + 2) = v1447 + 7;
                if (v1447[6] < 2u)
                {
                  if (v876 > (unint64_t)&v1447[-v877 + 7])
                  {
                    *((_QWORD *)a3 + 2) = v1447 + 8;
                    if (v1447[7] < 2u)
                    {
                      WebCore::GraphicsContextGLANGLE::colorMaskiOES(*((WebCore::GraphicsContextGLANGLE **)this + 7));
                      goto LABEL_2564;
                    }
                    goto LABEL_3619;
                  }
LABEL_3255:
                  v1593 = 0;
                  v1594 = 0;
                  *(_QWORD *)a3 = 0;
                  *((_QWORD *)a3 + 1) = 0;
                  v2083 = *((_QWORD *)a3 + 3);
                  if (!v2083)
                    goto LABEL_2685;
LABEL_3448:
                  (*(void (**)(uint64_t))(*(_QWORD *)v2083 + 16))(v2083);
                  v1593 = 0;
                  v877 = *(_QWORD *)a3;
                  v2320 = *((_QWORD *)a3 + 1);
                  v1595 = *((_QWORD *)a3 + 3);
                  *(_QWORD *)a3 = 0;
                  *((_QWORD *)a3 + 1) = 0;
                  v1594 = 0;
                  if (!v1595 || !v2320)
                  {
LABEL_2685:
                    *(_QWORD *)a3 = 0;
                    *((_QWORD *)a3 + 1) = 0;
                    v1596 = *((_QWORD *)a3 + 3);
                    if (v1596 && v1593)
                      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v1596 + 16))(v1596, v1594, v1593);
                    goto LABEL_2549;
                  }
                  goto LABEL_3482;
                }
              }
            }
LABEL_3619:
            v1593 = v876;
            v1594 = v877;
            goto LABEL_2685;
          }
          v1593 = 0;
          v1594 = 0;
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v2083 = *((_QWORD *)a3 + 3);
          if (!v2083)
            goto LABEL_2685;
          if (v876)
            goto LABEL_3448;
LABEL_3674:
          v1593 = 0;
          v1594 = 0;
          goto LABEL_2685;
        }
LABEL_2684:
        v1593 = 0;
        v1594 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v1595 = *((_QWORD *)a3 + 3);
        if (!v1595)
          goto LABEL_2685;
        if (v876)
        {
LABEL_3482:
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1595 + 16))(v1595, v877);
          v1594 = *(_QWORD *)a3;
          v1593 = *((_QWORD *)a3 + 1);
          goto LABEL_2685;
        }
        goto LABEL_3674;
      }
      if (*((unsigned __int16 *)a3 + 25) > 0x3D0u)
      {
        switch(*((_WORD *)a3 + 25))
        {
          case 0x3E8:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
            IPC::Decoder::decode<std::tuple<float,float>>(a3);
            if (v1325)
              WebCore::GraphicsContextGLANGLE::polygonModeANGLE(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            goto LABEL_2564;
          case 0x3E9:
          case 0x3ED:
          case 0x3EE:
          case 0x3EF:
          case 0x3F0:
            goto LABEL_2672;
          case 0x3EA:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
            v1451 = *((_QWORD *)a3 + 1);
            v1452 = *(_QWORD *)a3;
            v1453 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
            if (v1451 < v1453 || v1451 - v1453 <= 3)
            {
              v2327 = 0;
              v2328 = 0;
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              v2329 = *((_QWORD *)a3 + 3);
              if (v2329)
              {
                if (v1451)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v2329 + 16))(v2329);
                  v2328 = *(_QWORD *)a3;
                  v2327 = *((_QWORD *)a3 + 1);
                }
                else
                {
                  v2327 = 0;
                  v2328 = 0;
                }
              }
            }
            else
            {
              v1454 = (unsigned int *)(v1452 + v1453);
              *((_QWORD *)a3 + 2) = v1454 + 1;
              if (v1452)
              {
                v1455 = (((unint64_t)v1454 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v1452;
                if (v1451 >= v1455 && v1451 - v1455 > 3)
                {
                  v1456 = *v1454;
                  v1457 = (unsigned int *)(v1452 + v1455);
                  *((_QWORD *)a3 + 2) = v1452 + v1455 + 4;
                  v1458 = ((v1452 + v1455 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v1452;
                  if (v1451 >= v1458 && v1451 - v1458 > 3)
                  {
                    v1460 = (unsigned int *)(v1452 + v1458);
                    v1461 = *v1460;
                    *((_QWORD *)a3 + 2) = v1460 + 1;
                    v1462 = v1461 | 0x100000000;
                    v1463 = v1456 | ((unint64_t)*v1457 << 32);
                    goto LABEL_2537;
                  }
                }
                *(_QWORD *)a3 = 0;
                *((_QWORD *)a3 + 1) = 0;
                v2316 = *((_QWORD *)a3 + 3);
                if (v2316)
                {
                  if (v1451)
                  {
                    (*(void (**)(uint64_t))(*(_QWORD *)v2316 + 16))(v2316);
                    v2317 = *(_QWORD *)a3;
                    v2318 = *((_QWORD *)a3 + 1);
                    v2319 = *((_QWORD *)a3 + 3);
                    *(_QWORD *)a3 = 0;
                    *((_QWORD *)a3 + 1) = 0;
                    if (v2319)
                    {
                      if (v2318)
                        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2319 + 16))(v2319, v2317);
                    }
                  }
                }
LABEL_3485:
                v2331 = *(_QWORD *)a3;
                v2332 = *((_QWORD *)a3 + 1);
                *(_QWORD *)a3 = 0;
                *((_QWORD *)a3 + 1) = 0;
                v2333 = *((_QWORD *)a3 + 3);
                if (v2333 && v2332)
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2333 + 16))(v2333, v2331);
                v1463 = 0;
                v1462 = 0;
LABEL_2537:
                if ((v1462 & 0xFF00000000) != 0)
                  WebCore::GraphicsContextGLANGLE::polygonOffsetClampEXT(*((WebCore::GraphicsContextGLANGLE **)this + 7), *(float *)&v1463, *((float *)&v1463 + 1), *(float *)&v1462);
                goto LABEL_2564;
              }
              v2327 = v1451;
              v2328 = 0;
            }
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v2330 = *((_QWORD *)a3 + 3);
            if (v2330 && v2327)
              (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v2330 + 16))(v2330, v2328, v2327);
            goto LABEL_3485;
          case 0x3EB:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
            if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3) & 0xFF00000000) != 0)
              WebCore::GraphicsContextGLANGLE::provokingVertexANGLE(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            goto LABEL_2564;
          case 0x3EC:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
            v1464 = IPC::Decoder::decode<std::tuple<float,float>>(a3);
            if (v1465)
            {
              LODWORD(v2423[0]) = v1464;
              if (v1464)
                LODWORD(v2423[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
              WebCore::GraphicsContextGLANGLE::queryCounterEXT(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            }
            goto LABEL_2564;
          case 0x3F1:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
            IPC::Decoder::decode<std::tuple<unsigned int,int,unsigned int,int,int>>((uint64_t)cf, a3);
            if (cf[20])
              WebCore::GraphicsContextGLANGLE::renderbufferStorageMultisampleANGLE(*((WebCore::GraphicsContextGLANGLE **)this
                                                                                   + 7));
            break;
          default:
            if (v6 == 977)
            {
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
              if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3) & 0xFF00000000) != 0)
                WebCore::GraphicsContextGLANGLE::endQueryEXT(*((WebCore::GraphicsContextGLANGLE **)this + 7));
              goto LABEL_2564;
            }
            if (v6 != 1016)
              goto LABEL_2672;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
            IPC::Decoder::decode<std::tuple<WebCore::DestinationColorSpace>>((uint64_t *)a3, (uint64_t)cf);
            if (cf[8])
            {
              WebCore::GraphicsContextGLCocoa::setDrawingBufferColorSpace(*((WebCore::GraphicsContextGLCocoa **)this + 7), (const WebCore::DestinationColorSpace *)cf);
              if (cf[8])
              {
                v1368 = *(const void **)cf;
                *(_QWORD *)cf = 0;
                if (v1368)
                  CFRelease(v1368);
              }
            }
            break;
        }
LABEL_2465:
        v1421 = (unsigned __int8 ***)v2423;
LABEL_2565:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v1421);
        return;
      }
      switch(v6)
      {
        case 966:
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
          v876 = *((_QWORD *)a3 + 1);
          v877 = *(_QWORD *)a3;
          v1389 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
          if (v876 < v1389 || v876 - v1389 <= 3)
            goto LABEL_2684;
          v1390 = v877 + v1389;
          *((_QWORD *)a3 + 2) = v1390 + 4;
          if (!v877)
            goto LABEL_3619;
          v1391 = ((v1390 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
          if (v876 >= v1391 && v876 - v1391 > 3)
          {
            *((_QWORD *)a3 + 2) = ((v1390 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
            v1393 = ((((v1390 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 >= v1393 && v876 - v1393 > 3)
            {
              v1395 = (((v1390 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
              *((_QWORD *)a3 + 2) = v1395 + 4;
              v1396 = ((v1395 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
              if (v876 >= v1396 && v876 - v1396 > 3)
              {
                v1398 = v877 + v1396;
                *((_QWORD *)a3 + 2) = v1398 + 4;
                v1399 = ((v1398 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
                if (v876 >= v1399 && v876 - v1399 > 3)
                {
                  *((_QWORD *)a3 + 2) = ((v1398 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
                  WebCore::GraphicsContextGLANGLE::drawArraysInstancedBaseInstanceANGLE(*((WebCore::GraphicsContextGLANGLE **)this
                                                                                        + 7));
                  goto LABEL_2564;
                }
              }
            }
          }
          goto LABEL_2548;
        case 971:
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
          v876 = *((_QWORD *)a3 + 1);
          v877 = *(_QWORD *)a3;
          v1401 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
          if (v876 < v1401 || v876 - v1401 <= 3)
            goto LABEL_2684;
          v1402 = v877 + v1401;
          *((_QWORD *)a3 + 2) = v1402 + 4;
          if (!v877)
            goto LABEL_3619;
          v1403 = ((v1402 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
          if (v876 >= v1403 && v876 - v1403 > 3)
          {
            *((_QWORD *)a3 + 2) = ((v1402 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
            v1404 = ((((v1402 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
            if (v876 >= v1404 && v876 - v1404 > 3)
            {
              v1406 = (((v1402 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
              *((_QWORD *)a3 + 2) = v1406 + 4;
              v1407 = ((v1406 + 11) & 0xFFFFFFFFFFFFFFF8) - v877;
              if (v876 >= v1407 && v876 - v1407 > 7)
              {
                v1409 = v877 + v1407;
                *((_QWORD *)a3 + 2) = v1409 + 8;
                v1410 = ((v1409 + 11) & 0xFFFFFFFFFFFFFFFCLL) - v877;
                if (v876 >= v1410 && v876 - v1410 > 3)
                {
                  v1412 = v877 + v1410;
                  *((_QWORD *)a3 + 2) = v1412 + 4;
                  v1413 = ((v1412 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
                  if (v876 >= v1413 && v876 - v1413 > 3)
                  {
                    v1415 = v877 + v1413;
                    *((_QWORD *)a3 + 2) = v1415 + 4;
                    v1416 = ((v1415 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v877;
                    if (v876 >= v1416 && v876 - v1416 > 3)
                    {
                      *((_QWORD *)a3 + 2) = ((v1415 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
                      WebCore::GraphicsContextGLANGLE::drawElementsInstancedBaseVertexBaseInstanceANGLE(*((WebCore::GraphicsContextGLANGLE **)this + 7));
                      goto LABEL_2564;
                    }
                  }
                }
              }
            }
          }
          goto LABEL_2548;
        case 975:
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
          IPC::Decoder::decode<std::tuple<float,float>>(a3);
          if (v1353)
            WebCore::GraphicsContextGLANGLE::enableiOES(*((WebCore::GraphicsContextGLANGLE **)this + 7));
          goto LABEL_2564;
      }
LABEL_2672:
      switch(v6)
      {
        case 3546:
          v1581 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v1583 = v1582;
          if (!v1582)
            return;
          v1584 = v1581;
          if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3) & 0xFF00000000) == 0)
            return;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
          *(_QWORD *)cf = v1584;
          cf[8] = v1583;
          v1585 = (unsigned int *)(a2 + 1);
          do
            v1586 = __ldaxr(v1585);
          while (__stlxr(v1586 + 1, v1585));
          v1587 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v1587 = off_1E34B4F40;
          *(_OWORD *)(v1587 + 8) = *(_OWORD *)cf;
          *(_QWORD *)&cf[16] = 0;
          *(_QWORD *)(v1587 + 24) = a2;
          BufferParameteri = WebCore::GraphicsContextGLANGLE::checkFramebufferStatus(*((WebCore::GraphicsContextGLANGLE **)this
                                                                                     + 7));
          goto LABEL_3006;
        case 3548:
          v1824 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v2410 = v1825;
          v2411 = (WTF::StringImpl *)v1824;
          if (!v1825)
            return;
          IPC::Decoder::decode<WebKit::SharedVideoFrame>((uint64_t *)a3, (uint64_t)v2423);
          if (!v2427)
          {
            cf[0] = 0;
            v2422 = 0;
            goto LABEL_3065;
          }
          v1826 = *((_QWORD *)a3 + 1);
          v1827 = *(_QWORD *)a3;
          v1828 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
          if (v1826 < v1828 || v1826 - v1828 <= 3)
          {
            v2373 = 0;
            v2374 = 0;
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v2375 = *((_QWORD *)a3 + 3);
            if (!v2375)
              goto LABEL_3572;
            if (v1826)
            {
LABEL_3629:
              (*(void (**)(uint64_t))(*(_QWORD *)v2375 + 16))(v2375);
              v2374 = *(_QWORD *)a3;
              v2373 = *((_QWORD *)a3 + 1);
              goto LABEL_3572;
            }
          }
          else
          {
            v1829 = (unsigned int *)(v1827 + v1828);
            *((_QWORD *)a3 + 2) = v1829 + 1;
            if (!v1827)
              goto LABEL_3683;
            v1830 = (((unint64_t)v1829 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v1827;
            if (v1826 < v1830)
              goto LABEL_3499;
            if (v1826 - v1830 <= 3)
              goto LABEL_3499;
            v2409 = *v1829;
            *((_QWORD *)a3 + 2) = (((unint64_t)v1829 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
            v1831 = *(_DWORD *)(((unint64_t)v1829 + 7) & 0xFFFFFFFFFFFFFFFCLL);
            v1832 = (((((unint64_t)v1829 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v1827;
            if (v1826 < v1832)
              goto LABEL_3499;
            if (v1826 - v1832 <= 3)
              goto LABEL_3499;
            v1833 = (unsigned int *)(v1827 + v1832);
            *((_QWORD *)a3 + 2) = v1833 + 1;
            v1834 = *v1833;
            v1835 = (((unint64_t)v1833 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v1827;
            if (v1826 < v1835)
              goto LABEL_3499;
            if (v1826 - v1835 <= 3)
              goto LABEL_3499;
            v1836 = (unsigned int *)(v1827 + v1835);
            *((_QWORD *)a3 + 2) = v1836 + 1;
            v1837 = *v1836;
            v1838 = (((unint64_t)v1836 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v1827;
            if (v1826 < v1838 || v1826 - v1838 <= 3)
              goto LABEL_3499;
            v1839 = (unsigned int *)(v1827 + v1838);
            *((_QWORD *)a3 + 2) = v1839 + 1;
            v1840 = *v1839;
            v1841 = (((unint64_t)v1839 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v1827;
            if (v1826 < v1841 || v1826 - v1841 <= 3)
            {
LABEL_3499:
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              v2341 = *((_QWORD *)a3 + 3);
              if (v2341)
              {
                if (v1826)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v2341 + 16))(v2341);
                  v2342 = *(_QWORD *)a3;
                  v2343 = *((_QWORD *)a3 + 1);
                  v2344 = *((_QWORD *)a3 + 3);
                  *(_QWORD *)a3 = 0;
                  *((_QWORD *)a3 + 1) = 0;
                  if (v2344)
                  {
                    if (v2343)
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2344 + 16))(v2344, v2342);
                  }
                }
              }
              goto LABEL_3573;
            }
            v1843 = v1827 + v1841;
            v1844 = *(_DWORD *)v1843;
            *((_QWORD *)a3 + 2) = v1843 + 4;
            if (v1826 > v1843 + 4 - v1827)
            {
              *((_QWORD *)a3 + 2) = v1843 + 5;
              v1845 = *(unsigned __int8 *)(v1843 + 4);
              if (v1845 < 2)
              {
                v1846 = v1845 != 0;
                if (v1826 > v1843 + 5 - v1827)
                {
                  *((_QWORD *)a3 + 2) = v1843 + 6;
                  v1847 = *(unsigned __int8 *)(v1843 + 5);
                  if (v1847 < 2)
                  {
                    v1848 = v1847 != 0;
                    *(_OWORD *)cf = *(_OWORD *)v2423;
                    *(_DWORD *)&cf[16] = v2424;
                    LOBYTE(v2413) = 0;
                    LODWORD(v2414) = -1;
                    std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,(std::__variant_detail::_Trait)1>>((uint64_t)&v2413, (uint64_t)&v2424 + 8);
                    v2415 = __PAIR64__(v1831, v2409);
                    v2416 = v1834;
                    v2417 = v1837;
                    v2418 = v1840;
                    v2419 = v1844;
                    v2420 = v1846;
                    v1849 = 1;
                    v2421 = v1848;
                    goto LABEL_2877;
                  }
                  goto LABEL_3683;
                }
                v2373 = 0;
                v2374 = 0;
                *(_QWORD *)a3 = 0;
                *((_QWORD *)a3 + 1) = 0;
                v2394 = *((_QWORD *)a3 + 3);
                if (!v2394)
                  goto LABEL_3572;
                goto LABEL_3627;
              }
LABEL_3683:
              v2373 = v1826;
              v2374 = v1827;
LABEL_3572:
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              v2395 = *((_QWORD *)a3 + 3);
              if (v2395 && v2373)
                (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v2395 + 16))(v2395, v2374, v2373);
LABEL_3573:
              v1849 = 0;
              cf[0] = 0;
LABEL_2877:
              v2422 = v1849;
              if (v2427 && v2426 != -1)
              {
                ((void (*)(__int128 *, char *))off_1E34B4D18[v2426])(&v2428, (char *)&v2424 + 8);
                v1849 = v2422;
              }
              if (v1849)
                goto LABEL_2881;
LABEL_3065:
              v2026 = *(_QWORD *)a3;
              v2027 = *((_QWORD *)a3 + 1);
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              v2028 = *((_QWORD *)a3 + 3);
              if (!v2028)
                return;
              if (!v2027)
                return;
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2028 + 16))(v2028, v2026);
              if (!v2422)
                return;
LABEL_2881:
              v1638 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
              if (!v2422)
                goto LABEL_3496;
              v1638 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v2423);
              if (!v2422)
                goto LABEL_3496;
              v2423[0] = v2411;
              LOBYTE(v2423[1]) = v2410;
              v1850 = (unsigned int *)(a2 + 1);
              do
                v1851 = __ldaxr(v1850);
              while (__stlxr(v1851 + 1, v1850));
              v1852 = WTF::fastMalloc((WTF *)0x20);
              *(_QWORD *)v1852 = off_1E34B4E78;
              *(_OWORD *)(v1852 + 8) = *(_OWORD *)v2423;
              *(_QWORD *)&v2424 = 0;
              *(_QWORD *)(v1852 + 24) = a2;
              *(_QWORD *)&v2428 = v1852;
              WebKit::RemoteGraphicsContextGL::copyTextureFromVideoFrame((uint64_t)this, (uint64_t)cf, v2415, HIDWORD(v2415), v2416, v2417, v2418, v2419, v2420, v2421, (uint64_t *)&v2428);
              v1853 = v2428;
              *(_QWORD *)&v2428 = 0;
              if (v1853)
                (*(void (**)(uint64_t))(*(_QWORD *)v1853 + 8))(v1853);
              WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)&v2424);
              if (v2422 && (_DWORD)v2414 != -1)
                ((void (*)(WTF::StringImpl **, __int128 *))off_1E34B4D18[v2414])(v2423, &v2413);
              return;
            }
            v2373 = 0;
            v2374 = 0;
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v2394 = *((_QWORD *)a3 + 3);
            if (!v2394)
              goto LABEL_3572;
            if (v1826)
            {
LABEL_3627:
              (*(void (**)(uint64_t))(*(_QWORD *)v2394 + 16))(v2394);
              v2373 = 0;
              v2406 = *((_QWORD *)a3 + 1);
              v2375 = *((_QWORD *)a3 + 3);
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              v2374 = 0;
              if (!v2375 || !v2406)
                goto LABEL_3572;
              goto LABEL_3629;
            }
          }
          v2373 = 0;
          v2374 = 0;
          goto LABEL_3572;
        case 3549:
          v1816 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v1818 = v1817;
          if (!v1817)
            return;
          v1819 = v1816;
          v1820 = IPC::Decoder::decode<WebCore::ApplyTrackingPrevention>(a3);
          if (v1820 < 0x100u)
            goto LABEL_2851;
          v2015 = v1820;
          v2016 = IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,void>::decode(a3);
          if (v2017)
          {
            v2018 = v2016;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
            *(_QWORD *)cf = v1819;
            cf[8] = v1818;
            v1608 = (unsigned int **)&cf[16];
            v2019 = (unsigned int *)(a2 + 1);
            do
              v2020 = __ldaxr(v2019);
            while (__stlxr(v2020 + 1, v2019));
            v2021 = WTF::fastMalloc((WTF *)0x20);
            *(_QWORD *)v2021 = off_1E34B4E28;
            *(_OWORD *)(v2021 + 8) = *(_OWORD *)cf;
            *(_QWORD *)&cf[16] = 0;
            *(_QWORD *)(v2021 + 24) = a2;
            v2423[0] = (WTF::StringImpl *)v2021;
            WebKit::RemoteGraphicsContextGL::drawSurfaceBufferToImageBuffer((uint64_t)this, v2015 != 0, v2018, (uint64_t *)v2423);
            goto LABEL_3038;
          }
          v2346 = *(_QWORD *)a3;
          v2347 = *((_QWORD *)a3 + 1);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v2348 = *((_QWORD *)a3 + 3);
          if (!v2348)
            goto LABEL_2851;
          goto LABEL_3507;
        case 3551:
          v1925 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v1927 = v1926;
          if (!v1926)
            return;
          v1928 = v1925;
          v1929 = IPC::Decoder::decode<std::tuple<float,float>>(a3);
          if (!v1930)
            return;
          v1931 = v1929;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
          *(_QWORD *)cf = v1928;
          cf[8] = v1927;
          v1932 = (unsigned int *)(a2 + 1);
          do
            v1933 = __ldaxr(v1932);
          while (__stlxr(v1933 + 1, v1932));
          v1799 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v1799 = off_1E34B4F68;
          *(_OWORD *)(v1799 + 8) = *(_OWORD *)cf;
          *(_QWORD *)&cf[16] = 0;
          *(_QWORD *)(v1799 + 24) = a2;
          LODWORD(v2428) = v1931;
          if ((_DWORD)v1931)
          {
            v1934 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)&v2428);
            LODWORD(v2428) = v1934;
          }
          else
          {
            v1934 = 0;
          }
          v2423[0] = 0;
          v2423[1] = 0;
          v2032 = MEMORY[0x19AEB1C74](*((_QWORD *)this + 7), v1934, HIDWORD(v1931), v2423);
          goto LABEL_3081;
        case 3552:
          v1790 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v1792 = v1791;
          if (!v1791)
            return;
          v1793 = v1790;
          v1794 = IPC::Decoder::decode<std::tuple<float,float>>(a3);
          if (!v1795)
            return;
          v1796 = v1794;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
          *(_QWORD *)cf = v1793;
          cf[8] = v1792;
          v1797 = (unsigned int *)(a2 + 1);
          do
            v1798 = __ldaxr(v1797);
          while (__stlxr(v1798 + 1, v1797));
          v1799 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v1799 = off_1E34B4F90;
          *(_OWORD *)(v1799 + 8) = *(_OWORD *)cf;
          *(_QWORD *)&cf[16] = 0;
          *(_QWORD *)(v1799 + 24) = a2;
          LODWORD(v2428) = v1796;
          if ((_DWORD)v1796)
          {
            v1800 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)&v2428);
            LODWORD(v2428) = v1800;
          }
          else
          {
            v1800 = 0;
          }
          v2423[0] = 0;
          v2423[1] = 0;
          v2032 = MEMORY[0x19AEB1CF8](*((_QWORD *)this + 7), v1800, HIDWORD(v1796), v2423);
LABEL_3081:
          (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v1799 + 16))(v1799, v2032, v2423);
          (*(void (**)(uint64_t))(*(_QWORD *)v1799 + 8))(v1799);
          goto LABEL_3091;
        case 3556:
          v1909 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v1911 = v1910;
          if (!v1910)
            return;
          v1912 = (WTF::StringImpl *)v1909;
          IPC::Decoder::decode<std::tuple<int,WTF::String>>((uint64_t *)a3, cf);
          if (!cf[16])
            return;
          v1638 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
          if (!cf[16])
            goto LABEL_3496;
          v1638 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v2423);
          if (!cf[16])
            goto LABEL_3496;
          v2423[0] = v1912;
          LOBYTE(v2423[1]) = v1911;
          v1913 = (unsigned int *)(a2 + 1);
          do
            v1914 = __ldaxr(v1913);
          while (__stlxr(v1914 + 1, v1913));
          v1915 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v1915 = off_1E34B4FB8;
          *(_OWORD *)(v1915 + 8) = *(_OWORD *)v2423;
          *(_QWORD *)&v2424 = 0;
          *(_QWORD *)(v1915 + 24) = a2;
          LODWORD(v2428) = *(_DWORD *)cf;
          if (*(_DWORD *)cf)
          {
            v1916 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)&v2428);
            LODWORD(v2428) = v1916;
          }
          else
          {
            v1916 = 0;
          }
          AttribLocation = WebCore::GraphicsContextGLANGLE::getAttribLocation(*((WebCore::GraphicsContextGLANGLE **)this + 7), v1916, (const WTF::String *)&cf[8]);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1915 + 16))(v1915, AttribLocation);
          (*(void (**)(uint64_t))(*(_QWORD *)v1915 + 8))(v1915);
          WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)&v2424);
          if (!cf[16])
            return;
          v2037 = *(WTF::StringImpl **)&cf[8];
          *(_QWORD *)&cf[8] = 0;
          if (!v2037)
            return;
          goto LABEL_3109;
        case 3557:
          v1775 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v1777 = v1776;
          if (!v1776)
            return;
          v1778 = v1775;
          IPC::Decoder::decode<std::tuple<unsigned int,unsigned long>>((uint64_t)v2423, a3);
          if (!(_BYTE)v2424)
            return;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
          *(_QWORD *)&v2428 = v1778;
          BYTE8(v2428) = v1777;
          v1608 = (unsigned int **)&v2429;
          v1779 = (unsigned int *)(a2 + 1);
          do
            v1780 = __ldaxr(v1779);
          while (__stlxr(v1780 + 1, v1779));
          v1764 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v1764 = off_1E34B5120;
          *(_OWORD *)(v1764 + 8) = v2428;
          v2429 = 0;
          *(_QWORD *)(v1764 + 24) = a2;
          v1781 = v2423[1];
          *(_QWORD *)cf = &cf[16];
          *(_DWORD *)&cf[8] = 4;
          *(_DWORD *)&cf[12] = v2423[1];
          if (v2423[1] < (WTF::StringImpl *)5)
          {
            v1782 = &cf[16];
          }
          else
          {
            if ((unint64_t)v2423[1] >> 32)
            {
              __break(0xC471u);
              JUMPOUT(0x196FD82C4);
            }
            v1782 = (_BYTE *)WTF::fastMalloc(v2423[1]);
            *(_DWORD *)&cf[8] = v1781;
            *(_QWORD *)cf = v1782;
            v1781 = *(_DWORD *)&cf[12];
          }
          bzero(v1782, v1781);
          WebCore::GraphicsContextGLANGLE::getBooleanv();
          goto LABEL_3085;
        case 3558:
          v1783 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v1785 = v1784;
          if (!v1784)
            return;
          v1786 = v1783;
          IPC::Decoder::decode<std::tuple<float,float>>(a3);
          if (!v1787)
            return;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
          *(_QWORD *)cf = v1786;
          cf[8] = v1785;
          v1788 = (unsigned int *)(a2 + 1);
          do
            v1789 = __ldaxr(v1788);
          while (__stlxr(v1789 + 1, v1788));
          v1587 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v1587 = off_1E34B4FE0;
          *(_OWORD *)(v1587 + 8) = *(_OWORD *)cf;
          *(_QWORD *)&cf[16] = 0;
          *(_QWORD *)(v1587 + 24) = a2;
          BufferParameteri = WebCore::GraphicsContextGLANGLE::getBufferParameteri(*((WebCore::GraphicsContextGLANGLE **)this
                                                                                  + 7));
          goto LABEL_3006;
        case 3559:
          v1872 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v1874 = v1873;
          if (!v1873)
            return;
          v1600 = *((_QWORD *)a3 + 1);
          v1601 = *(_QWORD *)a3;
          v1875 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
          if (v1600 < v1875 || v1600 - v1875 <= 3)
          {
LABEL_3524:
            v2356 = 0;
            v2357 = 0;
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v2358 = *((_QWORD *)a3 + 3);
            if (v2358)
            {
              if (v1600)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v2358 + 16))(v2358);
                v2357 = *(_QWORD *)a3;
                v2356 = *((_QWORD *)a3 + 1);
              }
              else
              {
                v2356 = 0;
                v2357 = 0;
              }
            }
          }
          else
          {
            v1876 = (int *)(v1601 + v1875);
            *((_QWORD *)a3 + 2) = v1876 + 1;
            if (v1601)
            {
              v1877 = (((unint64_t)v1876 + 11) & 0xFFFFFFFFFFFFFFF8) - v1601;
              if (v1600 >= v1877 && v1600 - v1877 > 7)
              {
                v1878 = *v1876;
                v1879 = (uint64_t *)(((unint64_t)v1876 + 11) & 0xFFFFFFFFFFFFFFF8);
                *((_QWORD *)a3 + 2) = v1601 + v1877 + 8;
                v1880 = ((v1601 + v1877 + 15) & 0xFFFFFFFFFFFFFFF8) - v1601;
                if (v1600 >= v1880 && v1600 - v1880 > 7)
                {
                  v1881 = v1872;
                  v1882 = *v1879;
                  v1883 = *(WTF **)(v1601 + v1880);
                  *((_QWORD *)a3 + 2) = v1601 + v1880 + 8;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
                  *(_QWORD *)cf = v1881;
                  cf[8] = v1874;
                  v1608 = (unsigned int **)&cf[16];
                  v1884 = (unsigned int *)(a2 + 1);
                  do
                    v1885 = __ldaxr(v1884);
                  while (__stlxr(v1885 + 1, v1884));
                  v1886 = WTF::fastMalloc((WTF *)0x20);
                  *(_QWORD *)v1886 = off_1E34B4EA0;
                  *(_OWORD *)(v1886 + 8) = *(_OWORD *)cf;
                  *(_QWORD *)&cf[16] = 0;
                  *(_QWORD *)(v1886 + 24) = a2;
                  v2423[0] = (WTF::StringImpl *)v1886;
                  WebKit::RemoteGraphicsContextGL::getBufferSubDataInline((int)this, v1878, v1882, v1883, (uint64_t *)v2423);
LABEL_3038:
                  v2022 = v2423[0];
                  v2423[0] = 0;
                  if (v2022)
                  {
                    v2023 = *(void (**)(void))(*(_QWORD *)v2022 + 8);
LABEL_3040:
                    v2023();
                  }
LABEL_3088:
                  v1712 = v1608;
                  goto LABEL_3100;
                }
              }
LABEL_3504:
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              v2345 = *((_QWORD *)a3 + 3);
              if (v2345)
              {
                if (v1600)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v2345 + 16))(v2345);
                  v2346 = *(_QWORD *)a3;
                  v2347 = *((_QWORD *)a3 + 1);
                  v2348 = *((_QWORD *)a3 + 3);
                  *(_QWORD *)a3 = 0;
                  *((_QWORD *)a3 + 1) = 0;
                  if (v2348)
                  {
LABEL_3507:
                    if (v2347)
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2348 + 16))(v2348, v2346);
                  }
                }
              }
LABEL_2851:
              v1821 = *(_QWORD *)a3;
              v1822 = *((_QWORD *)a3 + 1);
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              v1823 = *((_QWORD *)a3 + 3);
              if (v1823 && v1822)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1823 + 16))(v1823, v1821);
              return;
            }
LABEL_3686:
            v2356 = v1600;
            v2357 = v1601;
          }
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v2359 = *((_QWORD *)a3 + 3);
          if (v2359 && v2356)
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v2359 + 16))(v2359, v2357, v2356);
          goto LABEL_2851;
        case 3560:
          v1854 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v1856 = v1855;
          if (!v1855)
            return;
          v1857 = (WTF::StringImpl *)v1854;
          v1858 = *((_QWORD *)a3 + 1);
          v1859 = *(_QWORD *)a3;
          v1860 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
          if (v1858 < v1860 || v1858 - v1860 <= 3)
          {
            v2360 = 0;
            v2361 = 0;
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v2362 = *((_QWORD *)a3 + 3);
            if (v2362)
            {
              if (v1858)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v2362 + 16))(v2362);
                v2361 = *(_QWORD *)a3;
                v2360 = *((_QWORD *)a3 + 1);
              }
              else
              {
                v2360 = 0;
                v2361 = 0;
              }
            }
            goto LABEL_3529;
          }
          v1861 = (int *)(v1859 + v1860);
          *((_QWORD *)a3 + 2) = v1861 + 1;
          if (!v1859)
          {
            v2360 = v1858;
            v2361 = 0;
LABEL_3529:
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v2363 = *((_QWORD *)a3 + 3);
            if (v2363 && v2360)
              (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v2363 + 16))(v2363, v2361, v2360);
            goto LABEL_3530;
          }
          v1862 = (((unint64_t)v1861 + 11) & 0xFFFFFFFFFFFFFFF8) - v1859;
          if (v1858 < v1862
            || v1858 - v1862 <= 7
            || (v1863 = *v1861,
                *((_QWORD *)a3 + 2) = (((unint64_t)v1861 + 11) & 0xFFFFFFFFFFFFFFF8) + 8,
                v1864 = *(_QWORD *)(((unint64_t)v1861 + 11) & 0xFFFFFFFFFFFFFFF8),
                v1865 = (((((unint64_t)v1861 + 11) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) - v1859,
                v1858 < v1865)
            || v1858 - v1865 <= 7)
          {
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v2349 = *((_QWORD *)a3 + 3);
            if (v2349)
            {
              if (v1858)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v2349 + 16))(v2349);
                v2350 = *(_QWORD *)a3;
                v2351 = *((_QWORD *)a3 + 1);
                v2352 = *((_QWORD *)a3 + 3);
                *(_QWORD *)a3 = 0;
                *((_QWORD *)a3 + 1) = 0;
                if (v2352)
                {
                  if (v2351)
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2352 + 16))(v2352, v2350);
                }
              }
            }
          }
          else
          {
            v1866 = (uint64_t *)(v1859 + v1865);
            v1867 = *v1866;
            *((_QWORD *)a3 + 2) = v1866 + 1;
            IPC::Decoder::decode<WebCore::SharedMemoryHandle>(a3, (uint64_t)v2423);
            if ((_BYTE)v2424)
            {
              *(_DWORD *)cf = v1863;
              *(_QWORD *)&cf[8] = v1864;
              *(_QWORD *)&cf[16] = v1867;
              WTF::MachSendRight::MachSendRight();
              *((WTF::StringImpl **)&v2413 + 1) = v2423[1];
              LOBYTE(v2414) = 1;
              if ((_BYTE)v2424)
                WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v2423);
              goto LABEL_2901;
            }
          }
LABEL_3530:
          cf[0] = 0;
          LOBYTE(v2414) = 0;
          v2364 = *(_QWORD *)a3;
          v2365 = *((_QWORD *)a3 + 1);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v2366 = *((_QWORD *)a3 + 3);
          if (!v2366)
            return;
          if (!v2365)
            return;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2366 + 16))(v2366, v2364);
          if (!(_BYTE)v2414)
            return;
LABEL_2901:
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v2423);
          v2423[0] = v1857;
          LOBYTE(v2423[1]) = v1856;
          v1868 = (unsigned int *)(a2 + 1);
          do
            v1869 = __ldaxr(v1868);
          while (__stlxr(v1869 + 1, v1868));
          v1870 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v1870 = off_1E34B4EC8;
          *(_OWORD *)(v1870 + 8) = *(_OWORD *)v2423;
          *(_QWORD *)&v2424 = 0;
          *(_QWORD *)(v1870 + 24) = a2;
          *(_QWORD *)&v2430 = v1870;
          v1732 = (WTF::StringImpl **)&v2413;
          WTF::MachSendRight::MachSendRight();
          *((_QWORD *)&v2428 + 1) = *((_QWORD *)&v2413 + 1);
          WebKit::RemoteGraphicsContextGL::getBufferSubDataSharedMemory((uint64_t)this, *(unsigned int *)cf, *(uint64_t *)&cf[8], *(unint64_t *)&cf[16], (uint64_t)&v2428, (uint64_t *)&v2430);
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v2428);
          v1871 = v2430;
          *(_QWORD *)&v2430 = 0;
          if (v1871)
            (*(void (**)(uint64_t))(*(_QWORD *)v1871 + 8))(v1871);
          WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)&v2424);
          if ((_BYTE)v2414)
          {
LABEL_2906:
            v1645 = v1732;
LABEL_2907:
            WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v1645);
          }
          return;
        case 3561:
          v1951 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v1953 = v1952;
          if (!v1952)
            return;
          v1954 = v1951;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
          *(_QWORD *)cf = v1954;
          cf[8] = v1953;
          v1608 = (unsigned int **)&cf[16];
          v1955 = (unsigned int *)(a2 + 1);
          do
            v1956 = __ldaxr(v1955);
          while (__stlxr(v1956 + 1, v1955));
          v1957 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v1957 = off_1E34B4E00;
          *(_OWORD *)(v1957 + 8) = *(_OWORD *)cf;
          *(_QWORD *)&cf[16] = 0;
          *(_QWORD *)(v1957 + 24) = a2;
          v2423[0] = (WTF::StringImpl *)v1957;
          WebKit::RemoteGraphicsContextGL::getErrors((uint64_t)this, (uint64_t *)v2423);
          goto LABEL_3038;
        case 3562:
          v1734 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v1736 = v1735;
          if (!v1735)
            return;
          v1737 = v1734;
          IPC::Decoder::decode<std::tuple<unsigned int,unsigned long>>((uint64_t)v2423, a3);
          if (!(_BYTE)v2424)
            return;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
          *(_QWORD *)&v2428 = v1737;
          BYTE8(v2428) = v1736;
          v1608 = (unsigned int **)&v2429;
          v1738 = (unsigned int *)(a2 + 1);
          do
            v1739 = __ldaxr(v1738);
          while (__stlxr(v1739 + 1, v1738));
          v1700 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v1700 = off_1E34B5030;
          *(_OWORD *)(v1700 + 8) = v2428;
          v2429 = 0;
          *(_QWORD *)(v1700 + 24) = a2;
          v1740 = v2423[1];
          *(_QWORD *)cf = &cf[16];
          *(_DWORD *)&cf[8] = 16;
          *(_DWORD *)&cf[12] = v2423[1];
          if (v2423[1] < (WTF::StringImpl *)0x11)
          {
            v1741 = &cf[16];
          }
          else
          {
            if ((unint64_t)v2423[1] >> 30)
            {
              __break(0xC471u);
              JUMPOUT(0x196FD82B4);
            }
            v1741 = (_BYTE *)WTF::fastMalloc((WTF *)(4 * (uint64_t)v2423[1]));
            *(_DWORD *)&cf[8] = v1740;
            *(_QWORD *)cf = v1741;
            v1740 = *(_DWORD *)&cf[12];
          }
          if (v1740)
            bzero(v1741, 4 * v1740);
          WebCore::GraphicsContextGLANGLE::getFloatv();
          goto LABEL_3049;
        case 3564:
          v1703 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v1705 = v1704;
          if (!v1704)
            return;
          v1706 = v1703;
          IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,unsigned int>>((uint64_t *)a3);
          if ((v1707 & 0xFF00000000) == 0)
            return;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
          *(_QWORD *)cf = v1706;
          cf[8] = v1705;
          v1708 = (unsigned int *)(a2 + 1);
          do
            v1709 = __ldaxr(v1708);
          while (__stlxr(v1709 + 1, v1708));
          v1710 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v1710 = off_1E34B5148;
          *(_OWORD *)(v1710 + 8) = *(_OWORD *)cf;
          *(_QWORD *)&cf[16] = 0;
          *(_QWORD *)(v1710 + 24) = a2;
          FramebufferAttachmentParameteri = WebCore::GraphicsContextGLANGLE::getFramebufferAttachmentParameteri(*((WebCore::GraphicsContextGLANGLE **)this + 7));
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1710 + 16))(v1710, FramebufferAttachmentParameteri);
          (*(void (**)(uint64_t))(*(_QWORD *)v1710 + 8))(v1710);
          v1712 = (unsigned int **)&cf[16];
          goto LABEL_3100;
        case 3565:
          v1966 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v1968 = v1967;
          if (!v1967)
            return;
          v1969 = v1966;
          if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3) & 0xFF00000000) == 0)
            return;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
          *(_QWORD *)cf = v1969;
          cf[8] = v1968;
          v1970 = (unsigned int *)(a2 + 1);
          do
            v1971 = __ldaxr(v1970);
          while (__stlxr(v1971 + 1, v1970));
          v1587 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v1587 = off_1E34B50A8;
          *(_OWORD *)(v1587 + 8) = *(_OWORD *)cf;
          *(_QWORD *)&cf[16] = 0;
          *(_QWORD *)(v1587 + 24) = a2;
          Integer64 = WebCore::GraphicsContextGLANGLE::getInteger64(*((WebCore::GraphicsContextGLANGLE **)this + 7));
          goto LABEL_2986;
        case 3567:
          v1887 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v1889 = v1888;
          if (!v1888)
            return;
          v1890 = v1887;
          IPC::Decoder::decode<std::tuple<float,float>>(a3);
          if (!v1891)
            return;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
          *(_QWORD *)cf = v1890;
          cf[8] = v1889;
          v1892 = (unsigned int *)(a2 + 1);
          do
            v1893 = __ldaxr(v1892);
          while (__stlxr(v1893 + 1, v1892));
          v1587 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v1587 = off_1E34B50D0;
          *(_OWORD *)(v1587 + 8) = *(_OWORD *)cf;
          *(_QWORD *)&cf[16] = 0;
          *(_QWORD *)(v1587 + 24) = a2;
          Integer64 = WebCore::GraphicsContextGLANGLE::getInteger64i(*((WebCore::GraphicsContextGLANGLE **)this + 7));
          goto LABEL_2986;
        case 3568:
          v1894 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v1896 = v1895;
          if (!v1895)
            return;
          v1897 = v1894;
          IPC::Decoder::decode<std::tuple<float,float>>(a3);
          if (!v1898)
            return;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
          *(_QWORD *)cf = v1897;
          cf[8] = v1896;
          v1899 = (unsigned int *)(a2 + 1);
          do
            v1900 = __ldaxr(v1899);
          while (__stlxr(v1900 + 1, v1899));
          v1587 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v1587 = off_1E34B5080;
          *(_OWORD *)(v1587 + 8) = *(_OWORD *)cf;
          *(_QWORD *)&cf[16] = 0;
          *(_QWORD *)(v1587 + 24) = a2;
          v2423[0] = 0;
          v2423[1] = 0;
          WebCore::GraphicsContextGLANGLE::getIntegeri_v();
          (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v1587 + 16))(v1587, v2423);
          goto LABEL_3008;
        case 3569:
          v1958 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v1960 = v1959;
          if (!v1959)
            return;
          v1961 = v1958;
          IPC::Decoder::decode<std::tuple<unsigned int,unsigned long>>((uint64_t)v2423, a3);
          if (!(_BYTE)v2424)
            return;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
          *(_QWORD *)&v2428 = v1961;
          BYTE8(v2428) = v1960;
          v1608 = (unsigned int **)&v2429;
          v1962 = (unsigned int *)(a2 + 1);
          do
            v1963 = __ldaxr(v1962);
          while (__stlxr(v1963 + 1, v1962));
          v1764 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v1764 = off_1E34B5058;
          *(_OWORD *)(v1764 + 8) = v2428;
          v2429 = 0;
          *(_QWORD *)(v1764 + 24) = a2;
          v1964 = v2423[1];
          *(_QWORD *)cf = &cf[16];
          *(_DWORD *)&cf[8] = 4;
          *(_DWORD *)&cf[12] = v2423[1];
          if (v2423[1] < (WTF::StringImpl *)5)
          {
            v1965 = &cf[16];
          }
          else
          {
            if ((unint64_t)v2423[1] >> 30)
            {
              __break(0xC471u);
              JUMPOUT(0x196FD82D4);
            }
            v1965 = (_BYTE *)WTF::fastMalloc((WTF *)(4 * (uint64_t)v2423[1]));
            *(_DWORD *)&cf[8] = v1964;
            *(_QWORD *)cf = v1965;
            v1964 = *(_DWORD *)&cf[12];
          }
          if (v1964)
            bzero(v1965, 4 * v1964);
          WebCore::GraphicsContextGLANGLE::getIntegerv();
          goto LABEL_3085;
        case 3571:
          v1935 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v1937 = v1936;
          if (!v1936)
            return;
          v1938 = v1935;
          v1939 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
          if ((v1939 & 0xFF00000000) == 0)
            return;
          v1940 = v1939;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
          *(_QWORD *)cf = v1938;
          cf[8] = v1937;
          v1941 = (unsigned int *)(a2 + 1);
          do
            v1942 = __ldaxr(v1941);
          while (__stlxr(v1942 + 1, v1941));
          v1750 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v1750 = off_1E34B5170;
          *(_OWORD *)(v1750 + 8) = *(_OWORD *)cf;
          *(_QWORD *)&cf[16] = 0;
          *(_QWORD *)(v1750 + 24) = a2;
          LODWORD(v2428) = v1940;
          if (v1940)
            LODWORD(v2428) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)&v2428);
          WebCore::GraphicsContextGLANGLE::getProgramInfoLog(*((WebCore::GraphicsContextGLANGLE **)this + 7));
          goto LABEL_3090;
        case 3572:
          v1655 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v1657 = v1656;
          if (!v1656)
            return;
          v1658 = v1655;
          v1659 = IPC::Decoder::decode<std::tuple<float,float>>(a3);
          if (!v1660)
            return;
          v1661 = v1659;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
          *(_QWORD *)cf = v1658;
          cf[8] = v1657;
          v1662 = (unsigned int *)(a2 + 1);
          do
            v1663 = __ldaxr(v1662);
          while (__stlxr(v1663 + 1, v1662));
          v1654 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v1654 = off_1E34B50F8;
          *(_OWORD *)(v1654 + 8) = *(_OWORD *)cf;
          *(_QWORD *)&cf[16] = 0;
          *(_QWORD *)(v1654 + 24) = a2;
          LODWORD(v2423[0]) = v1661;
          if (v1661)
            LODWORD(v2423[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
          Programi = WebCore::GraphicsContextGLANGLE::getProgrami(*((WebCore::GraphicsContextGLANGLE **)this + 7));
          goto LABEL_3072;
        case 3578:
          v1751 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v1753 = v1752;
          if (!v1752)
            return;
          v1754 = v1751;
          IPC::Decoder::decode<std::tuple<float,float>>(a3);
          if (!v1755)
            return;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
          *(_QWORD *)cf = v1754;
          cf[8] = v1753;
          v1756 = (unsigned int *)(a2 + 1);
          do
            v1757 = __ldaxr(v1756);
          while (__stlxr(v1757 + 1, v1756));
          v1587 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v1587 = off_1E34B5198;
          *(_OWORD *)(v1587 + 8) = *(_OWORD *)cf;
          *(_QWORD *)&cf[16] = 0;
          *(_QWORD *)(v1587 + 24) = a2;
          BufferParameteri = WebCore::GraphicsContextGLANGLE::getRenderbufferParameteri(*((WebCore::GraphicsContextGLANGLE **)this
                                                                                        + 7));
          goto LABEL_3006;
        case 3581:
          v1972 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v1974 = v1973;
          if (!v1973)
            return;
          v1975 = v1972;
          v1976 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
          if ((v1976 & 0xFF00000000) == 0)
            return;
          v1977 = v1976;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
          *(_QWORD *)cf = v1975;
          cf[8] = v1974;
          v1978 = (unsigned int *)(a2 + 1);
          do
            v1979 = __ldaxr(v1978);
          while (__stlxr(v1979 + 1, v1978));
          v1750 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v1750 = off_1E34B51E8;
          *(_OWORD *)(v1750 + 8) = *(_OWORD *)cf;
          *(_QWORD *)&cf[16] = 0;
          *(_QWORD *)(v1750 + 24) = a2;
          LODWORD(v2428) = v1977;
          if (v1977)
            LODWORD(v2428) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)&v2428);
          WebCore::GraphicsContextGLANGLE::getShaderInfoLog(*((WebCore::GraphicsContextGLANGLE **)this + 7));
          goto LABEL_3090;
        case 3582:
          v1664 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v1666 = v1665;
          if (!v1665)
            return;
          v1667 = v1664;
          IPC::Decoder::decode<std::tuple<float,float>>(a3);
          if (!v1668)
            return;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
          *(_QWORD *)cf = v1667;
          cf[8] = v1666;
          v1669 = (unsigned int *)(a2 + 1);
          do
            v1670 = __ldaxr(v1669);
          while (__stlxr(v1670 + 1, v1669));
          v1587 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v1587 = off_1E34B5210;
          *(_OWORD *)(v1587 + 8) = *(_OWORD *)cf;
          *(_QWORD *)&cf[16] = 0;
          *(_QWORD *)(v1587 + 24) = a2;
          v2423[0] = 0;
          LODWORD(v2428) = 0;
          WebCore::GraphicsContextGLANGLE::getShaderPrecisionFormat();
          (*(void (**)(uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)v1587 + 16))(v1587, v2423, v2428);
          goto LABEL_3008;
        case 3583:
          v1742 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v1744 = v1743;
          if (!v1743)
            return;
          v1745 = v1742;
          v1746 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
          if ((v1746 & 0xFF00000000) == 0)
            return;
          v1747 = v1746;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
          *(_QWORD *)cf = v1745;
          cf[8] = v1744;
          v1748 = (unsigned int *)(a2 + 1);
          do
            v1749 = __ldaxr(v1748);
          while (__stlxr(v1749 + 1, v1748));
          v1750 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v1750 = off_1E34B5238;
          *(_OWORD *)(v1750 + 8) = *(_OWORD *)cf;
          *(_QWORD *)&cf[16] = 0;
          *(_QWORD *)(v1750 + 24) = a2;
          LODWORD(v2428) = v1747;
          if (v1747)
            LODWORD(v2428) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)&v2428);
          WebCore::GraphicsContextGLANGLE::getShaderSource(*((WebCore::GraphicsContextGLANGLE **)this + 7));
          goto LABEL_3090;
        case 3584:
          v1678 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v1680 = v1679;
          if (!v1679)
            return;
          v1681 = v1678;
          v1682 = IPC::Decoder::decode<std::tuple<float,float>>(a3);
          if (!v1683)
            return;
          v1684 = v1682;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
          *(_QWORD *)cf = v1681;
          cf[8] = v1680;
          v1685 = (unsigned int *)(a2 + 1);
          do
            v1686 = __ldaxr(v1685);
          while (__stlxr(v1686 + 1, v1685));
          v1654 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v1654 = off_1E34B51C0;
          *(_OWORD *)(v1654 + 8) = *(_OWORD *)cf;
          *(_QWORD *)&cf[16] = 0;
          *(_QWORD *)(v1654 + 24) = a2;
          LODWORD(v2423[0]) = v1684;
          if (v1684)
            LODWORD(v2423[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
          Programi = WebCore::GraphicsContextGLANGLE::getShaderi(*((WebCore::GraphicsContextGLANGLE **)this + 7));
LABEL_3072:
          v2031 = Programi;
          goto LABEL_3098;
        case 3585:
          v1801 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v1803 = v1802;
          if (!v1802)
            return;
          v1804 = v1801;
          if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3) & 0xFF00000000) == 0)
            return;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
          *(_QWORD *)cf = v1804;
          cf[8] = v1803;
          v1805 = (unsigned int *)(a2 + 1);
          do
            v1806 = __ldaxr(v1805);
          while (__stlxr(v1806 + 1, v1805));
          v1750 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v1750 = off_1E34B5008;
          *(_OWORD *)(v1750 + 8) = *(_OWORD *)cf;
          *(_QWORD *)&cf[16] = 0;
          *(_QWORD *)(v1750 + 24) = a2;
          WebCore::GraphicsContextGLANGLE::getString(*((WebCore::GraphicsContextGLANGLE **)this + 7));
LABEL_3090:
          (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v1750 + 16))(v1750, v2423);
          (*(void (**)(uint64_t))(*(_QWORD *)v1750 + 8))(v1750);
LABEL_3091:
          v2034 = v2423[0];
          v2423[0] = 0;
          if (v2034)
          {
            if (*(_DWORD *)v2034 == 2)
              WTF::StringImpl::destroy(v2034, v2033);
            else
              *(_DWORD *)v2034 -= 2;
          }
          goto LABEL_3099;
        case 3587:
          v1671 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v1673 = v1672;
          if (!v1672)
            return;
          v1674 = v1671;
          IPC::Decoder::decode<std::tuple<float,float>>(a3);
          if (!v1675)
            return;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
          *(_QWORD *)cf = v1674;
          cf[8] = v1673;
          v1676 = (unsigned int *)(a2 + 1);
          do
            v1677 = __ldaxr(v1676);
          while (__stlxr(v1677 + 1, v1676));
          v1587 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v1587 = off_1E34B5260;
          *(_OWORD *)(v1587 + 8) = *(_OWORD *)cf;
          *(_QWORD *)&cf[16] = 0;
          *(_QWORD *)(v1587 + 24) = a2;
          WebCore::GraphicsContextGLANGLE::getTexParameterf(*((WebCore::GraphicsContextGLANGLE **)this + 7));
          (*(void (**)(uint64_t))(*(_QWORD *)v1587 + 16))(v1587);
          goto LABEL_3008;
        case 3588:
          v1988 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v1990 = v1989;
          if (!v1989)
            return;
          v1991 = v1988;
          IPC::Decoder::decode<std::tuple<float,float>>(a3);
          if (!v1992)
            return;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
          *(_QWORD *)cf = v1991;
          cf[8] = v1990;
          v1993 = (unsigned int *)(a2 + 1);
          do
            v1994 = __ldaxr(v1993);
          while (__stlxr(v1994 + 1, v1993));
          v1587 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v1587 = off_1E34B5288;
          *(_OWORD *)(v1587 + 8) = *(_OWORD *)cf;
          *(_QWORD *)&cf[16] = 0;
          *(_QWORD *)(v1587 + 24) = a2;
          BufferParameteri = WebCore::GraphicsContextGLANGLE::getTexParameteri(*((WebCore::GraphicsContextGLANGLE **)this
                                                                               + 7));
LABEL_3006:
          v1693 = BufferParameteri;
          goto LABEL_3007;
        case 3593:
          v1980 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v1982 = v1981;
          if (!v1981)
            return;
          v1983 = (WTF::StringImpl *)v1980;
          IPC::Decoder::decode<std::tuple<int,WTF::String>>((uint64_t *)a3, cf);
          if (!cf[16])
            return;
          v1638 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
          if (!cf[16])
            goto LABEL_3496;
          v1638 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v2423);
          if (!cf[16])
            goto LABEL_3496;
          v2423[0] = v1983;
          LOBYTE(v2423[1]) = v1982;
          v1984 = (unsigned int *)(a2 + 1);
          do
            v1985 = __ldaxr(v1984);
          while (__stlxr(v1985 + 1, v1984));
          v1986 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v1986 = off_1E34B5328;
          *(_OWORD *)(v1986 + 8) = *(_OWORD *)v2423;
          *(_QWORD *)&v2424 = 0;
          *(_QWORD *)(v1986 + 24) = a2;
          LODWORD(v2428) = *(_DWORD *)cf;
          if (*(_DWORD *)cf)
          {
            v1987 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)&v2428);
            LODWORD(v2428) = v1987;
          }
          else
          {
            v1987 = 0;
          }
          UniformLocation = WebCore::GraphicsContextGLANGLE::getUniformLocation(*((WebCore::GraphicsContextGLANGLE **)this + 7), v1987, (const WTF::String *)&cf[8]);
LABEL_3107:
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1986 + 16))(v1986, UniformLocation);
          (*(void (**)(uint64_t))(*(_QWORD *)v1986 + 8))(v1986);
          WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)&v2424);
          if (cf[16])
          {
            v2037 = *(WTF::StringImpl **)&cf[8];
            *(_QWORD *)&cf[8] = 0;
            if (v2037)
            {
LABEL_3109:
              if (*(_DWORD *)v2037 == 2)
                WTF::StringImpl::destroy(v2037, v2036);
              else
                *(_DWORD *)v2037 -= 2;
            }
          }
          return;
        case 3594:
          v1694 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v1696 = v1695;
          if (!v1695)
            return;
          v1697 = v1694;
          IPC::Decoder::decode<std::tuple<unsigned int,int,unsigned long>>((uint64_t)v2423, a3);
          if (!(_BYTE)v2424)
            return;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
          *(_QWORD *)&v2428 = v1697;
          BYTE8(v2428) = v1696;
          v1608 = (unsigned int **)&v2429;
          v1698 = (unsigned int *)(a2 + 1);
          do
            v1699 = __ldaxr(v1698);
          while (__stlxr(v1699 + 1, v1698));
          v1700 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v1700 = off_1E34B52B0;
          *(_OWORD *)(v1700 + 8) = v2428;
          v2429 = 0;
          *(_QWORD *)(v1700 + 24) = a2;
          v1701 = (unint64_t)v2423[1];
          LODWORD(v2430) = v2423[0];
          if (LODWORD(v2423[0]))
            LODWORD(v2430) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)&v2430);
          *(_QWORD *)cf = &cf[16];
          *(_DWORD *)&cf[8] = 16;
          *(_DWORD *)&cf[12] = v1701;
          if (v1701 < 0x11)
          {
            v1702 = &cf[16];
          }
          else
          {
            if (v1701 >> 30)
            {
              __break(0xC471u);
              JUMPOUT(0x196FD82ACLL);
            }
            v1702 = (_BYTE *)WTF::fastMalloc((WTF *)(4 * v1701));
            *(_DWORD *)&cf[8] = v1701;
            *(_QWORD *)cf = v1702;
            LODWORD(v1701) = *(_DWORD *)&cf[12];
          }
          if ((_DWORD)v1701)
            bzero(v1702, 4 * v1701);
          WebCore::GraphicsContextGLANGLE::getUniformfv();
LABEL_3049:
          (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v1700 + 16))(v1700, *(_QWORD *)cf, *(unsigned int *)&cf[12]);
          (*(void (**)(uint64_t))(*(_QWORD *)v1700 + 8))(v1700);
          v2025 = *(WTF **)cf;
          if (&cf[16] == *(_BYTE **)cf)
            goto LABEL_3088;
          goto LABEL_3086;
        case 3595:
          v1758 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v1760 = v1759;
          if (!v1759)
            return;
          v1761 = v1758;
          IPC::Decoder::decode<std::tuple<unsigned int,int,unsigned long>>((uint64_t)v2423, a3);
          if (!(_BYTE)v2424)
            return;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
          *(_QWORD *)&v2428 = v1761;
          BYTE8(v2428) = v1760;
          v1608 = (unsigned int **)&v2429;
          v1762 = (unsigned int *)(a2 + 1);
          do
            v1763 = __ldaxr(v1762);
          while (__stlxr(v1763 + 1, v1762));
          v1764 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v1764 = off_1E34B52D8;
          *(_OWORD *)(v1764 + 8) = v2428;
          v2429 = 0;
          *(_QWORD *)(v1764 + 24) = a2;
          v1765 = (unint64_t)v2423[1];
          LODWORD(v2430) = v2423[0];
          if (LODWORD(v2423[0]))
            LODWORD(v2430) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)&v2430);
          *(_QWORD *)cf = &cf[16];
          *(_DWORD *)&cf[8] = 4;
          *(_DWORD *)&cf[12] = v1765;
          if (v1765 < 5)
          {
            v1766 = &cf[16];
          }
          else
          {
            if (v1765 >> 30)
            {
              __break(0xC471u);
              JUMPOUT(0x196FD82BCLL);
            }
            v1766 = (_BYTE *)WTF::fastMalloc((WTF *)(4 * v1765));
            *(_DWORD *)&cf[8] = v1765;
            *(_QWORD *)cf = v1766;
            LODWORD(v1765) = *(_DWORD *)&cf[12];
          }
          if ((_DWORD)v1765)
            bzero(v1766, 4 * v1765);
          WebCore::GraphicsContextGLANGLE::getUniformiv();
          goto LABEL_3085;
        case 3596:
          v1901 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v1903 = v1902;
          if (!v1902)
            return;
          v1904 = v1901;
          IPC::Decoder::decode<std::tuple<unsigned int,int,unsigned long>>((uint64_t)v2423, a3);
          if (!(_BYTE)v2424)
            return;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
          *(_QWORD *)&v2428 = v1904;
          BYTE8(v2428) = v1903;
          v1608 = (unsigned int **)&v2429;
          v1905 = (unsigned int *)(a2 + 1);
          do
            v1906 = __ldaxr(v1905);
          while (__stlxr(v1906 + 1, v1905));
          v1764 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v1764 = off_1E34B5300;
          *(_OWORD *)(v1764 + 8) = v2428;
          v2429 = 0;
          *(_QWORD *)(v1764 + 24) = a2;
          v1907 = (unint64_t)v2423[1];
          LODWORD(v2430) = v2423[0];
          if (LODWORD(v2423[0]))
            LODWORD(v2430) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)&v2430);
          *(_QWORD *)cf = &cf[16];
          *(_DWORD *)&cf[8] = 4;
          *(_DWORD *)&cf[12] = v1907;
          if (v1907 < 5)
          {
            v1908 = &cf[16];
          }
          else
          {
            if (v1907 >> 30)
            {
              __break(0xC471u);
              JUMPOUT(0x196FD82CCLL);
            }
            v1908 = (_BYTE *)WTF::fastMalloc((WTF *)(4 * v1907));
            *(_DWORD *)&cf[8] = v1907;
            *(_QWORD *)cf = v1908;
            LODWORD(v1907) = *(_DWORD *)&cf[12];
          }
          if ((_DWORD)v1907)
            bzero(v1908, 4 * v1907);
          WebCore::GraphicsContextGLANGLE::getUniformuiv();
LABEL_3085:
          (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v1764 + 16))(v1764, *(_QWORD *)cf, *(unsigned int *)&cf[12]);
          (*(void (**)(uint64_t))(*(_QWORD *)v1764 + 8))(v1764);
          v2025 = *(WTF **)cf;
          if (&cf[16] != *(_BYTE **)cf)
          {
LABEL_3086:
            if (v2025)
            {
              *(_QWORD *)cf = 0;
              *(_DWORD *)&cf[8] = 0;
              WTF::fastFree(v2025, v2024);
            }
          }
          goto LABEL_3088;
        case 3597:
          v1767 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v1769 = v1768;
          if (!v1768)
            return;
          v1770 = v1767;
          IPC::Decoder::decode<std::tuple<float,float>>(a3);
          if (!v1771)
            return;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
          *(_QWORD *)cf = v1770;
          cf[8] = v1769;
          v1772 = (unsigned int *)(a2 + 1);
          do
            v1773 = __ldaxr(v1772);
          while (__stlxr(v1773 + 1, v1772));
          v1587 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v1587 = off_1E34B5350;
          *(_OWORD *)(v1587 + 8) = *(_OWORD *)cf;
          *(_QWORD *)&cf[16] = 0;
          *(_QWORD *)(v1587 + 24) = a2;
          Integer64 = WebCore::GraphicsContextGLANGLE::getVertexAttribOffset(*((WebCore::GraphicsContextGLANGLE **)this
                                                                             + 7));
LABEL_2986:
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1587 + 16))(v1587, Integer64);
          goto LABEL_3008;
        case 3598:
          v2003 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v2005 = v2004;
          if (!v2004)
            return;
          v2006 = v2003;
          v2007 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
          if ((v2007 & 0xFF00000000) == 0)
            return;
          v2008 = v2007;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
          *(_QWORD *)cf = v2006;
          cf[8] = v2005;
          v2009 = (unsigned int *)(a2 + 1);
          do
            v2010 = __ldaxr(v2009);
          while (__stlxr(v2010 + 1, v2009));
          v1654 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v1654 = off_1E34B5378;
          *(_OWORD *)(v1654 + 8) = *(_OWORD *)cf;
          *(_QWORD *)&cf[16] = 0;
          *(_QWORD *)(v1654 + 24) = a2;
          LODWORD(v2423[0]) = v2008;
          if (v2008)
            LODWORD(v2423[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
          isBuffer = WebCore::GraphicsContextGLANGLE::isBuffer(*((WebCore::GraphicsContextGLANGLE **)this + 7));
          goto LABEL_3097;
        case 3599:
          v1687 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v1689 = v1688;
          if (!v1688)
            return;
          v1690 = v1687;
          if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3) & 0xFF00000000) == 0)
            return;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
          *(_QWORD *)cf = v1690;
          cf[8] = v1689;
          v1691 = (unsigned int *)(a2 + 1);
          do
            v1692 = __ldaxr(v1691);
          while (__stlxr(v1692 + 1, v1691));
          v1587 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v1587 = off_1E34B53A0;
          *(_OWORD *)(v1587 + 8) = *(_OWORD *)cf;
          *(_QWORD *)&cf[16] = 0;
          *(_QWORD *)(v1587 + 24) = a2;
          v1693 = WebCore::GraphicsContextGLANGLE::isEnabled(*((WebCore::GraphicsContextGLANGLE **)this + 7)) != 0;
LABEL_3007:
          (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v1587 + 16))(v1587, v1693);
LABEL_3008:
          (*(void (**)(uint64_t))(*(_QWORD *)v1587 + 8))(v1587);
          goto LABEL_3009;
        case 3600:
          v1943 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v1945 = v1944;
          if (!v1944)
            return;
          v1946 = v1943;
          v1947 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
          if ((v1947 & 0xFF00000000) == 0)
            return;
          v1948 = v1947;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
          *(_QWORD *)cf = v1946;
          cf[8] = v1945;
          v1949 = (unsigned int *)(a2 + 1);
          do
            v1950 = __ldaxr(v1949);
          while (__stlxr(v1950 + 1, v1949));
          v1654 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v1654 = off_1E34B53C8;
          *(_OWORD *)(v1654 + 8) = *(_OWORD *)cf;
          *(_QWORD *)&cf[16] = 0;
          *(_QWORD *)(v1654 + 24) = a2;
          LODWORD(v2423[0]) = v1948;
          if (v1948)
            LODWORD(v2423[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
          isBuffer = WebCore::GraphicsContextGLANGLE::isFramebuffer(*((WebCore::GraphicsContextGLANGLE **)this + 7));
          goto LABEL_3097;
        case 3601:
          v1995 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v1997 = v1996;
          if (!v1996)
            return;
          v1998 = v1995;
          v1999 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
          if ((v1999 & 0xFF00000000) == 0)
            return;
          v2000 = v1999;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
          *(_QWORD *)cf = v1998;
          cf[8] = v1997;
          v2001 = (unsigned int *)(a2 + 1);
          do
            v2002 = __ldaxr(v2001);
          while (__stlxr(v2002 + 1, v2001));
          v1654 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v1654 = off_1E34B53F0;
          *(_OWORD *)(v1654 + 8) = *(_OWORD *)cf;
          *(_QWORD *)&cf[16] = 0;
          *(_QWORD *)(v1654 + 24) = a2;
          LODWORD(v2423[0]) = v2000;
          if (v2000)
            LODWORD(v2423[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
          isBuffer = WebCore::GraphicsContextGLANGLE::isProgram(*((WebCore::GraphicsContextGLANGLE **)this + 7));
          goto LABEL_3097;
        case 3604:
          v1646 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v1648 = v1647;
          if (!v1647)
            return;
          v1649 = v1646;
          v1650 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
          if ((v1650 & 0xFF00000000) == 0)
            return;
          v1651 = v1650;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
          *(_QWORD *)cf = v1649;
          cf[8] = v1648;
          v1652 = (unsigned int *)(a2 + 1);
          do
            v1653 = __ldaxr(v1652);
          while (__stlxr(v1653 + 1, v1652));
          v1654 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v1654 = off_1E34B5418;
          *(_OWORD *)(v1654 + 8) = *(_OWORD *)cf;
          *(_QWORD *)&cf[16] = 0;
          *(_QWORD *)(v1654 + 24) = a2;
          LODWORD(v2423[0]) = v1651;
          if (v1651)
            LODWORD(v2423[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
          isBuffer = WebCore::GraphicsContextGLANGLE::isRenderbuffer(*((WebCore::GraphicsContextGLANGLE **)this + 7));
          goto LABEL_3097;
        case 3606:
          v1917 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v1919 = v1918;
          if (!v1918)
            return;
          v1920 = v1917;
          v1921 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
          if ((v1921 & 0xFF00000000) == 0)
            return;
          v1922 = v1921;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
          *(_QWORD *)cf = v1920;
          cf[8] = v1919;
          v1923 = (unsigned int *)(a2 + 1);
          do
            v1924 = __ldaxr(v1923);
          while (__stlxr(v1924 + 1, v1923));
          v1654 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v1654 = off_1E34B5440;
          *(_OWORD *)(v1654 + 8) = *(_OWORD *)cf;
          *(_QWORD *)&cf[16] = 0;
          *(_QWORD *)(v1654 + 24) = a2;
          LODWORD(v2423[0]) = v1922;
          if (v1922)
            LODWORD(v2423[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
          isBuffer = WebCore::GraphicsContextGLANGLE::isShader(*((WebCore::GraphicsContextGLANGLE **)this + 7));
LABEL_3097:
          v2031 = isBuffer != 0;
LABEL_3098:
          (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v1654 + 16))(v1654, v2031);
          (*(void (**)(uint64_t))(*(_QWORD *)v1654 + 8))(v1654);
LABEL_3099:
          v1712 = (unsigned int **)&cf[16];
          goto LABEL_3100;
        case 3611:
          v1634 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v1636 = v1635;
          if (!v1635)
            return;
          v1637 = v1634;
          IPC::Decoder::decode<std::tuple<IPC::Semaphore>>(a3, (uint64_t)v2423);
          if (!LOBYTE(v2423[1]))
            return;
          v1638 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
          if (!LOBYTE(v2423[1]))
            goto LABEL_3496;
          v1638 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
          if (!LOBYTE(v2423[1]))
            goto LABEL_3496;
          *(_QWORD *)cf = v1637;
          cf[8] = v1636;
          v1641 = (unsigned int *)(a2 + 1);
          do
            v1642 = __ldaxr(v1641);
          while (__stlxr(v1642 + 1, v1641));
          v1643 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v1643 = off_1E34B4DD8;
          *(_OWORD *)(v1643 + 8) = *(_OWORD *)cf;
          *(_QWORD *)&cf[16] = 0;
          *(_QWORD *)(v1643 + 24) = a2;
          *(_QWORD *)&v2428 = v1643;
          (*(void (**)(WebKit::RemoteGraphicsContextGL *, WTF::StringImpl **, __int128 *))(*(_QWORD *)this + 48))(this, v2423, &v2428);
          v1644 = v2428;
          *(_QWORD *)&v2428 = 0;
          if (v1644)
            (*(void (**)(uint64_t))(*(_QWORD *)v1644 + 8))(v1644);
          WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)&cf[16]);
          if (!LOBYTE(v2423[1]))
            return;
          IPC::Semaphore::destroy((IPC::Semaphore *)v2423);
          v1645 = v2423;
          goto LABEL_2907;
        case 3612:
          v1613 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v1615 = v1614;
          if (!v1614)
            return;
          v1616 = v1613;
          IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)a3, (uint64_t)cf);
          if (!cf[16])
            goto LABEL_3559;
          v1617 = *((_QWORD *)a3 + 1);
          v1618 = *(_QWORD *)a3;
          v1619 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
          if (v1617 < v1619 || v1617 - v1619 <= 3)
          {
            v2367 = 0;
            v2368 = 0;
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v2369 = *((_QWORD *)a3 + 3);
            if (!v2369)
              goto LABEL_3558;
            if (v1617)
              goto LABEL_3640;
          }
          else
          {
            v1620 = (unsigned int *)(v1618 + v1619);
            *((_QWORD *)a3 + 2) = v1620 + 1;
            if (!v1618)
            {
LABEL_3684:
              v2367 = v1617;
              v2368 = v1618;
              goto LABEL_3558;
            }
            v1621 = (((unint64_t)v1620 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v1618;
            if (v1617 < v1621 || v1617 - v1621 <= 3)
            {
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              v2376 = *((_QWORD *)a3 + 3);
              if (v2376)
              {
                if (v1617)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v2376 + 16))(v2376);
                  v2377 = *(_QWORD *)a3;
                  v2378 = *((_QWORD *)a3 + 1);
                  v2379 = *((_QWORD *)a3 + 3);
                  *(_QWORD *)a3 = 0;
                  *((_QWORD *)a3 + 1) = 0;
                  if (v2379)
                  {
                    if (v2378)
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2379 + 16))(v2379, v2377);
                  }
                }
              }
LABEL_3559:
              v2386 = *(_QWORD *)a3;
              v2387 = *((_QWORD *)a3 + 1);
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              v2388 = *((_QWORD *)a3 + 3);
              if (v2388 && v2387)
LABEL_3561:
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2388 + 16))(v2388, v2386);
              return;
            }
            v1622 = (WebCore::GraphicsContextGL *)*v1620;
            v1623 = ((unint64_t)v1620 + 7) & 0xFFFFFFFFFFFFFFFCLL;
            v1624 = (unsigned int *)(v1618 + v1621);
            v1626 = *v1624++;
            v1625 = v1626;
            *((_QWORD *)a3 + 2) = v1624;
            if (v1617 > (unint64_t)v1624 - v1618)
            {
              *((_QWORD *)a3 + 2) = v1623 + 5;
              v1627 = *(unsigned __int8 *)(v1623 + 4);
              if (v1627 < 2)
              {
                v1628 = *(_DWORD *)cf;
                v1629 = *(_QWORD *)&cf[8];
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
                *(_QWORD *)cf = v1616;
                cf[8] = v1615;
                v1630 = (unsigned int *)(a2 + 1);
                do
                  v1631 = __ldaxr(v1630);
                while (__stlxr(v1631 + 1, v1630));
                v1632 = WTF::fastMalloc((WTF *)0x20);
                *(_QWORD *)v1632 = off_1E34B4EF0;
                *(_OWORD *)(v1632 + 8) = *(_OWORD *)cf;
                *(_QWORD *)&cf[16] = 0;
                *(_QWORD *)(v1632 + 24) = a2;
                v2423[0] = (WTF::StringImpl *)v1632;
                WebKit::RemoteGraphicsContextGL::readPixelsInline((int)this, v1628, v1629, v1622, v1625, v1627 != 0, (uint64_t *)v2423);
                v1633 = v2423[0];
                v2423[0] = 0;
                if (v1633)
                  (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v1633 + 8))(v1633);
LABEL_3009:
                v1712 = (unsigned int **)&cf[16];
LABEL_3100:
                WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(v1712);
                return;
              }
              goto LABEL_3684;
            }
            v2367 = 0;
            v2368 = 0;
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v2384 = *((_QWORD *)a3 + 3);
            if (!v2384)
            {
LABEL_3558:
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              v2385 = *((_QWORD *)a3 + 3);
              if (v2385 && v2367)
                (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v2385 + 16))(v2385, v2368, v2367);
              goto LABEL_3559;
            }
            if (v1617)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v2384 + 16))(v2384);
              v2367 = 0;
              v2407 = *((_QWORD *)a3 + 1);
              v2369 = *((_QWORD *)a3 + 3);
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              v2368 = 0;
              if (!v2369 || !v2407)
                goto LABEL_3558;
LABEL_3640:
              (*(void (**)(uint64_t))(*(_QWORD *)v2369 + 16))(v2369);
              v2368 = *(_QWORD *)a3;
              v2367 = *((_QWORD *)a3 + 1);
              goto LABEL_3558;
            }
          }
          v2367 = 0;
          v2368 = 0;
          goto LABEL_3558;
        case 3613:
          v1713 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v1715 = v1714;
          if (!v1714)
            return;
          v1716 = (WTF::StringImpl *)v1713;
          IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)a3, (uint64_t)&v2428);
          if (!(_BYTE)v2429)
            goto LABEL_3564;
          v1717 = *((_QWORD *)a3 + 1);
          v1718 = *(_QWORD *)a3;
          v1719 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
          if (v1717 < v1719 || v1717 - v1719 <= 3)
          {
            v2370 = 0;
            v2371 = 0;
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v2372 = *((_QWORD *)a3 + 3);
            if (!v2372)
              goto LABEL_3563;
            if (v1717)
              goto LABEL_3644;
          }
          else
          {
            v1720 = (int *)(v1718 + v1719);
            *((_QWORD *)a3 + 2) = v1720 + 1;
            if (!v1718)
            {
LABEL_3685:
              v2370 = v1717;
              v2371 = v1718;
              goto LABEL_3563;
            }
            v1721 = (((unint64_t)v1720 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v1718;
            if (v1717 < v1721 || v1717 - v1721 <= 3)
            {
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              v2380 = *((_QWORD *)a3 + 3);
              if (v2380)
              {
                if (v1717)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v2380 + 16))(v2380);
                  v2381 = *(_QWORD *)a3;
                  v2382 = *((_QWORD *)a3 + 1);
                  v2383 = *((_QWORD *)a3 + 3);
                  *(_QWORD *)a3 = 0;
                  *((_QWORD *)a3 + 1) = 0;
                  if (v2383)
                  {
                    if (v2382)
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2383 + 16))(v2383, v2381);
                  }
                }
              }
              goto LABEL_3564;
            }
            v1722 = *v1720;
            v1723 = ((unint64_t)v1720 + 7) & 0xFFFFFFFFFFFFFFFCLL;
            v1724 = (int *)(v1718 + v1721);
            v1726 = *v1724++;
            v1725 = v1726;
            *((_QWORD *)a3 + 2) = v1724;
            if (v1717 > (unint64_t)v1724 - v1718)
            {
              *((_QWORD *)a3 + 2) = v1723 + 5;
              v1727 = *(unsigned __int8 *)(v1723 + 4);
              if (v1727 < 2)
              {
                v1728 = v1727 != 0;
                IPC::Decoder::decode<WebCore::SharedMemoryHandle>(a3, (uint64_t)v2423);
                if ((_BYTE)v2424)
                {
                  if (!(_BYTE)v2429)
                  {
LABEL_3496:
                    __break(1u);
                    goto LABEL_3497;
                  }
                  *(_OWORD *)cf = v2428;
                  *(_DWORD *)&cf[16] = v1722;
                  *(_DWORD *)&cf[20] = v1725;
                  LOBYTE(v2413) = v1728;
                  WTF::MachSendRight::MachSendRight();
                  v2414 = (uint64_t)v2423[1];
                  LOBYTE(v2415) = 1;
                  if ((_BYTE)v2424)
                    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v2423);
                  goto LABEL_2783;
                }
LABEL_3564:
                cf[0] = 0;
                LOBYTE(v2415) = 0;
                v2391 = *(_QWORD *)a3;
                v2392 = *((_QWORD *)a3 + 1);
                *(_QWORD *)a3 = 0;
                *((_QWORD *)a3 + 1) = 0;
                v2393 = *((_QWORD *)a3 + 3);
                if (!v2393)
                  return;
                if (!v2392)
                  return;
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2393 + 16))(v2393, v2391);
                if (!(_BYTE)v2415)
                  return;
LABEL_2783:
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v2423);
                v2423[0] = v1716;
                LOBYTE(v2423[1]) = v1715;
                v1729 = (unsigned int *)(a2 + 1);
                do
                  v1730 = __ldaxr(v1729);
                while (__stlxr(v1730 + 1, v1729));
                v1731 = WTF::fastMalloc((WTF *)0x20);
                *(_QWORD *)v1731 = off_1E34B4F18;
                *(_OWORD *)(v1731 + 8) = *(_OWORD *)v2423;
                *(_QWORD *)&v2424 = 0;
                *(_QWORD *)(v1731 + 24) = a2;
                *(_QWORD *)&v2430 = v1731;
                v1732 = (WTF::StringImpl **)&v2413 + 1;
                WTF::MachSendRight::MachSendRight();
                *((_QWORD *)&v2428 + 1) = v2414;
                WebKit::RemoteGraphicsContextGL::readPixelsSharedMemory((uint64_t)this, *(uint64_t *)cf, *(uint64_t *)&cf[8], *(unsigned int *)&cf[16], *(unsigned int *)&cf[20], v2413, (uint64_t)&v2428, (uint64_t *)&v2430);
                WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v2428);
                v1733 = v2430;
                *(_QWORD *)&v2430 = 0;
                if (v1733)
                  (*(void (**)(uint64_t))(*(_QWORD *)v1733 + 8))(v1733);
                WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)&v2424);
                if ((_BYTE)v2415)
                  goto LABEL_2906;
                return;
              }
              goto LABEL_3685;
            }
            v2370 = 0;
            v2371 = 0;
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v2389 = *((_QWORD *)a3 + 3);
            if (!v2389)
            {
LABEL_3563:
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              v2390 = *((_QWORD *)a3 + 3);
              if (v2390 && v2370)
                (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v2390 + 16))(v2390, v2371, v2370);
              goto LABEL_3564;
            }
            if (v1717)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v2389 + 16))(v2389);
              v2370 = 0;
              v2408 = *((_QWORD *)a3 + 1);
              v2372 = *((_QWORD *)a3 + 3);
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              v2371 = 0;
              if (!v2372 || !v2408)
                goto LABEL_3563;
LABEL_3644:
              (*(void (**)(uint64_t))(*(_QWORD *)v2372 + 16))(v2372);
              v2371 = *(_QWORD *)a3;
              v2370 = *((_QWORD *)a3 + 1);
              goto LABEL_3563;
            }
          }
          v2370 = 0;
          v2371 = 0;
          goto LABEL_3563;
        case 3614:
          v1807 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          v1809 = v1808;
          if (!v1808)
            return;
          v1810 = v1807;
          v1811 = IPC::Decoder::decode<WebCore::ApplyTrackingPrevention>(a3);
          if (v1811 <= 0xFFu)
            goto LABEL_2851;
          v1812 = v1811;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
          *(_QWORD *)cf = v1810;
          cf[8] = v1809;
          v1608 = (unsigned int **)&cf[16];
          v1813 = (unsigned int *)(a2 + 1);
          do
            v1814 = __ldaxr(v1813);
          while (__stlxr(v1814 + 1, v1813));
          v1815 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v1815 = off_1E34B4E50;
          *(_OWORD *)(v1815 + 8) = *(_OWORD *)cf;
          *(_QWORD *)&cf[16] = 0;
          *(_QWORD *)(v1815 + 24) = a2;
          v2423[0] = (WTF::StringImpl *)v1815;
          WebKit::RemoteGraphicsContextGL::surfaceBufferToVideoFrame((uint64_t)this, v1812 != 256, (uint64_t *)v2423);
          goto LABEL_3038;
        default:
          switch(v6)
          {
            case 3547:
              v1597 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
              v1599 = v1598;
              if (v1598)
              {
                v1600 = *((_QWORD *)a3 + 1);
                v1601 = *(_QWORD *)a3;
                v1602 = ((*((_QWORD *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a3;
                if (v1600 < v1602 || v1600 - v1602 <= 7)
                  goto LABEL_3524;
                v1603 = (void **)(v1601 + v1602);
                *((_QWORD *)a3 + 2) = v1603 + 1;
                if (!v1601)
                  goto LABEL_3686;
                v1604 = (((unint64_t)v1603 + 11) & 0xFFFFFFFFFFFFFFFCLL) - v1601;
                if (v1600 >= v1604 && v1600 - v1604 > 3)
                {
                  v1605 = *v1603;
                  *((_QWORD *)a3 + 2) = (((unint64_t)v1603 + 11) & 0xFFFFFFFFFFFFFFFCLL) + 4;
                  v1606 = (((((unint64_t)v1603 + 11) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8)
                        - v1601;
                  if (v1600 >= v1606 && v1600 - v1606 > 7)
                  {
                    v1607 = v1597;
                    *((_QWORD *)a3 + 2) = (((((unint64_t)v1603 + 11) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8)
                                        + 8;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
                    *(_QWORD *)cf = v1607;
                    cf[8] = v1599;
                    v1608 = (unsigned int **)&cf[16];
                    v1609 = (unsigned int *)(a2 + 1);
                    do
                      v1610 = __ldaxr(v1609);
                    while (__stlxr(v1610 + 1, v1609));
                    v1611 = WTF::fastMalloc((WTF *)0x20);
                    *(_QWORD *)v1611 = off_1E34B5620;
                    *(_OWORD *)(v1611 + 8) = *(_OWORD *)cf;
                    *(_QWORD *)&cf[16] = 0;
                    *(_QWORD *)(v1611 + 24) = a2;
                    Synci = WebCore::GraphicsContextGLANGLE::clientWaitSync(*((WebCore::GraphicsContextGLANGLE **)this + 7), v1605);
                    goto LABEL_3373;
                  }
                }
                goto LABEL_3504;
              }
              return;
            case 3550:
              v2201 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
              v2203 = v2202;
              if (v2202)
              {
                v2204 = v2201;
                IPC::Decoder::decode<std::tuple<float,float>>(a3);
                if (v2205)
                {
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
                  *(_QWORD *)cf = v2204;
                  cf[8] = v2203;
                  v2206 = (unsigned int *)(a2 + 1);
                  do
                    v2207 = __ldaxr(v2206);
                  while (__stlxr(v2207 + 1, v2206));
                  v2126 = WTF::fastMalloc((WTF *)0x20);
                  *(_QWORD *)v2126 = off_1E34B55D0;
                  *(_OWORD *)(v2126 + 8) = *(_OWORD *)cf;
                  *(_QWORD *)&cf[16] = 0;
                  *(_QWORD *)(v2126 + 24) = a2;
                  Integer64EXT = WebCore::GraphicsContextGLANGLE::fenceSync(*((WebCore::GraphicsContextGLANGLE **)this
                                                                            + 7));
                  goto LABEL_3350;
                }
              }
              return;
            case 3553:
              v2167 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
              v2169 = v2168;
              if (v2168)
              {
                v2170 = v2167;
                v2171 = IPC::Decoder::decode<std::tuple<float,float>>(a3);
                if (v2172)
                {
                  v2173 = v2171;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
                  *(_QWORD *)cf = v2170;
                  cf[8] = v2169;
                  v1608 = (unsigned int **)&cf[16];
                  v2174 = (unsigned int *)(a2 + 1);
                  do
                    v2175 = __ldaxr(v2174);
                  while (__stlxr(v2175 + 1, v2174));
                  v2176 = WTF::fastMalloc((WTF *)0x20);
                  *(_QWORD *)v2176 = off_1E34B5738;
                  *(_OWORD *)(v2176 + 8) = *(_OWORD *)cf;
                  *(_QWORD *)&cf[16] = 0;
                  *(_QWORD *)(v2176 + 24) = a2;
                  LODWORD(v2428) = v2173;
                  if (v2173)
                    LODWORD(v2428) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)&v2428);
                  WebCore::GraphicsContextGLANGLE::getActiveUniformBlockName(*((WebCore::GraphicsContextGLANGLE **)this
                                                                             + 7));
                  goto LABEL_3466;
                }
              }
              return;
            case 3554:
              v2243 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
              v2245 = v2244;
              if (v2244)
              {
                v2246 = v2243;
                IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,unsigned int,unsigned long>>((uint64_t)v2423, a3);
                if (BYTE8(v2424))
                {
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
                  *(_QWORD *)&v2428 = v2246;
                  BYTE8(v2428) = v2245;
                  v1608 = (unsigned int **)&v2429;
                  v2247 = (unsigned int *)(a2 + 1);
                  do
                    v2248 = __ldaxr(v2247);
                  while (__stlxr(v2248 + 1, v2247));
                  v1700 = WTF::fastMalloc((WTF *)0x20);
                  *(_QWORD *)v1700 = off_1E34B5760;
                  *(_OWORD *)(v1700 + 8) = v2428;
                  v2429 = 0;
                  *(_QWORD *)(v1700 + 24) = a2;
                  v2249 = v2424;
                  LODWORD(v2430) = v2423[0];
                  if (LODWORD(v2423[0]))
                    LODWORD(v2430) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)&v2430);
                  *(_QWORD *)cf = &cf[16];
                  *(_DWORD *)&cf[8] = 4;
                  *(_DWORD *)&cf[12] = v2249;
                  if (v2249 < 5)
                  {
                    v2250 = &cf[16];
                  }
                  else
                  {
                    if (v2249 >> 30)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x196FD832CLL);
                    }
                    v2250 = (_BYTE *)WTF::fastMalloc((WTF *)(4 * v2249));
                    *(_DWORD *)&cf[8] = v2249;
                    *(_QWORD *)cf = v2250;
                    LODWORD(v2249) = *(_DWORD *)&cf[12];
                  }
                  if ((_DWORD)v2249)
                    bzero(v2250, 4 * v2249);
                  WebCore::GraphicsContextGLANGLE::getActiveUniformBlockiv();
                  goto LABEL_3049;
                }
              }
              return;
            case 3555:
              v2251 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
              v2253 = v2252;
              if (!v2252)
                return;
              v2156 = *((_QWORD *)a3 + 1);
              v2157 = *(char **)a3;
              v2254 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
              if (v2156 < v2254 || v2156 - v2254 <= 3)
                goto LABEL_3582;
              v2255 = &v2157[v2254];
              *((_QWORD *)a3 + 2) = v2255 + 4;
              if (!v2157)
                goto LABEL_3695;
              v2256 = (WTF::StringImpl *)v2251;
              v2257 = *(_DWORD *)v2255;
              IPC::Decoder::decode<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a3, v2423);
              if (!(_BYTE)v2424)
                goto LABEL_3584;
              v2258 = *((_QWORD *)a3 + 1);
              v2259 = *(char **)a3;
              v2260 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
              if (v2258 < v2260 || v2258 - v2260 <= 3)
              {
                v2401 = 0;
                v2402 = 0;
                *(_QWORD *)a3 = 0;
                *((_QWORD *)a3 + 1) = 0;
                v2403 = *((_QWORD *)a3 + 3);
                if (v2403)
                {
                  if (v2258)
                  {
                    (*(void (**)(uint64_t))(*(_QWORD *)v2403 + 16))(v2403);
                    v2402 = *(_QWORD *)a3;
                    v2401 = *((_QWORD *)a3 + 1);
                  }
                  else
                  {
                    v2401 = 0;
                    v2402 = 0;
                  }
                }
              }
              else
              {
                v2261 = &v2259[v2260];
                *((_QWORD *)a3 + 2) = v2261 + 4;
                if (v2259)
                {
                  v2262 = *(_DWORD *)v2261;
                  *(_DWORD *)cf = v2257;
                  *(WTF::StringImpl **)&cf[8] = v2423[0];
                  *(WTF::StringImpl **)&cf[16] = v2423[1];
                  LODWORD(v2413) = v2262;
                  BYTE8(v2413) = 1;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v2423);
                  v2423[0] = v2256;
                  LOBYTE(v2423[1]) = v2253;
                  v2263 = (unsigned int *)(a2 + 1);
                  do
                    v2264 = __ldaxr(v2263);
                  while (__stlxr(v2264 + 1, v2263));
                  v2265 = WTF::fastMalloc((WTF *)0x20);
                  *(_QWORD *)v2265 = off_1E34B56E8;
                  *(_OWORD *)(v2265 + 8) = *(_OWORD *)v2423;
                  *(_QWORD *)&v2424 = 0;
                  *(_QWORD *)(v2265 + 24) = a2;
                  v2431[0] = *(_DWORD *)cf;
                  if (*(_DWORD *)cf)
                    v2431[0] = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, v2431);
                  WebCore::GraphicsContextGLANGLE::getActiveUniforms();
                  v2428 = v2430;
                  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v2265 + 16))(v2265, &v2428);
                  (*(void (**)(uint64_t))(*(_QWORD *)v2265 + 8))(v2265);
                  v2338 = (WTF *)v2428;
                  if ((_QWORD)v2428)
                  {
                    *(_QWORD *)&v2428 = 0;
                    DWORD2(v2428) = 0;
                    WTF::fastFree(v2338, v2337);
                  }
                  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)&v2424);
                  if (BYTE8(v2413))
                  {
                    v2340 = *(WTF **)&cf[8];
                    if (*(_QWORD *)&cf[8])
                    {
                      *(_QWORD *)&cf[8] = 0;
                      *(_DWORD *)&cf[16] = 0;
                      WTF::fastFree(v2340, v2339);
                    }
                  }
                  return;
                }
                v2401 = v2258;
                v2402 = 0;
              }
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              v2404 = *((_QWORD *)a3 + 3);
              if (v2404 && v2401)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2404 + 16))(v2404, v2402);
              if ((_BYTE)v2424)
              {
                v2405 = v2423[0];
                if (v2423[0])
                {
                  v2423[0] = 0;
                  LODWORD(v2423[1]) = 0;
                  WTF::fastFree(v2405, v2259);
                }
              }
              goto LABEL_3584;
            case 3563:
              v2177 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
              v2179 = v2178;
              if (!v2178)
                return;
              v2180 = (WTF::StringImpl *)v2177;
              IPC::Decoder::decode<std::tuple<int,WTF::String>>((uint64_t *)a3, cf);
              if (!cf[16])
                return;
              v1638 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
              if (!cf[16])
                goto LABEL_3496;
              v1638 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v2423);
              if (!cf[16])
                goto LABEL_3496;
              v2423[0] = v2180;
              LOBYTE(v2423[1]) = v2179;
              v2181 = (unsigned int *)(a2 + 1);
              do
                v2182 = __ldaxr(v2181);
              while (__stlxr(v2182 + 1, v2181));
              v1986 = WTF::fastMalloc((WTF *)0x20);
              *(_QWORD *)v1986 = off_1E34B54B8;
              *(_OWORD *)(v1986 + 8) = *(_OWORD *)v2423;
              *(_QWORD *)&v2424 = 0;
              *(_QWORD *)(v1986 + 24) = a2;
              LODWORD(v2428) = *(_DWORD *)cf;
              if (*(_DWORD *)cf)
              {
                v2183 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)&v2428);
                LODWORD(v2428) = v2183;
              }
              else
              {
                v2183 = 0;
              }
              UniformLocation = WebCore::GraphicsContextGLANGLE::getFragDataLocation(*((WebCore::GraphicsContextGLANGLE **)this + 7), v2183, (const WTF::String *)&cf[8]);
              goto LABEL_3107;
            case 3566:
              v2209 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
              v2211 = v2210;
              if (!v2210)
                return;
              v2212 = v2209;
              if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3) & 0xFF00000000) == 0)
                return;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
              *(_QWORD *)cf = v2212;
              cf[8] = v2211;
              v2213 = (unsigned int *)(a2 + 1);
              do
                v2214 = __ldaxr(v2213);
              while (__stlxr(v2214 + 1, v2213));
              v2126 = WTF::fastMalloc((WTF *)0x20);
              *(_QWORD *)v2126 = off_1E34B5850;
              *(_OWORD *)(v2126 + 8) = *(_OWORD *)cf;
              *(_QWORD *)&cf[16] = 0;
              *(_QWORD *)(v2126 + 24) = a2;
              Integer64EXT = WebCore::GraphicsContextGLANGLE::getInteger64EXT(*((WebCore::GraphicsContextGLANGLE **)this
                                                                              + 7));
LABEL_3350:
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2126 + 16))(v2126, Integer64EXT);
              goto LABEL_3408;
            case 3570:
              v2215 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
              v2217 = v2216;
              if (!v2216)
                return;
              v2218 = v2215;
              IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,unsigned int,unsigned long>>((uint64_t)v2423, a3);
              if (!BYTE8(v2424))
                return;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
              *(_QWORD *)&v2428 = v2218;
              BYTE8(v2428) = v2217;
              v1608 = (unsigned int **)&v2429;
              v2219 = (unsigned int *)(a2 + 1);
              do
                v2220 = __ldaxr(v2219);
              while (__stlxr(v2220 + 1, v2219));
              v2221 = WTF::fastMalloc((WTF *)0x20);
              *(_QWORD *)v2221 = off_1E34B5878;
              *(_OWORD *)(v2221 + 8) = v2428;
              v2429 = 0;
              *(_QWORD *)(v2221 + 24) = a2;
              v2222 = v2424;
              *(_QWORD *)cf = &cf[16];
              *(_DWORD *)&cf[8] = 4;
              *(_DWORD *)&cf[12] = v2424;
              if ((unint64_t)v2424 < 5)
              {
                v2223 = &cf[16];
              }
              else
              {
                if ((unint64_t)v2424 >> 30)
                {
                  __break(0xC471u);
                  JUMPOUT(0x196FD8324);
                }
                v2223 = (_BYTE *)WTF::fastMalloc((WTF *)(4 * v2424));
                *(_DWORD *)&cf[8] = v2222;
                *(_QWORD *)cf = v2223;
                v2222 = *(_DWORD *)&cf[12];
              }
              if (v2222)
                bzero(v2223, 4 * v2222);
              WebCore::GraphicsContextGLANGLE::getInternalformativ();
              (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v2221 + 16))(v2221, *(_QWORD *)cf, *(unsigned int *)&cf[12]);
              (*(void (**)(uint64_t))(*(_QWORD *)v2221 + 8))(v2221);
              v2025 = *(WTF **)cf;
              if (&cf[16] == *(_BYTE **)cf)
                goto LABEL_3088;
              goto LABEL_3086;
            case 3573:
              v2275 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
              v2277 = v2276;
              if (!v2276)
                return;
              v2278 = v2275;
              IPC::Decoder::decode<std::tuple<float,float>>(a3);
              if (!v2279)
                return;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
              *(_QWORD *)cf = v2278;
              cf[8] = v2277;
              v2280 = (unsigned int *)(a2 + 1);
              do
                v2281 = __ldaxr(v2280);
              while (__stlxr(v2281 + 1, v2280));
              v2126 = WTF::fastMalloc((WTF *)0x20);
              *(_QWORD *)v2126 = off_1E34B5508;
              *(_OWORD *)(v2126 + 8) = *(_OWORD *)cf;
              *(_QWORD *)&cf[16] = 0;
              *(_QWORD *)(v2126 + 24) = a2;
              Query = WebCore::GraphicsContextGLANGLE::getQuery(*((WebCore::GraphicsContextGLANGLE **)this + 7));
              goto LABEL_3406;
            case 3574:
              v2266 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
              v2268 = v2267;
              if (!v2267)
                return;
              v2269 = v2266;
              v2270 = IPC::Decoder::decode<std::tuple<float,float>>(a3);
              if (!v2271)
                return;
              v2272 = v2270;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
              *(_QWORD *)cf = v2269;
              cf[8] = v2268;
              v1608 = (unsigned int **)&cf[16];
              v2273 = (unsigned int *)(a2 + 1);
              do
                v2274 = __ldaxr(v2273);
              while (__stlxr(v2274 + 1, v2273));
              v2099 = WTF::fastMalloc((WTF *)0x20);
              *(_QWORD *)v2099 = off_1E34B5800;
              *(_OWORD *)(v2099 + 8) = *(_OWORD *)cf;
              *(_QWORD *)&cf[16] = 0;
              *(_QWORD *)(v2099 + 24) = a2;
              LODWORD(v2423[0]) = v2272;
              if (v2272)
                LODWORD(v2423[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
              QueryObjectiEXT = WebCore::GraphicsContextGLANGLE::getQueryObjectiEXT(*((WebCore::GraphicsContextGLANGLE **)this
                                                                                    + 7));
              goto LABEL_3464;
            case 3575:
              v2128 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
              v2130 = v2129;
              if (!v2129)
                return;
              v2131 = v2128;
              v2132 = IPC::Decoder::decode<std::tuple<float,float>>(a3);
              if (!v2133)
                return;
              v2134 = v2132;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
              *(_QWORD *)cf = v2131;
              cf[8] = v2130;
              v1608 = (unsigned int **)&cf[16];
              v2135 = (unsigned int *)(a2 + 1);
              do
                v2136 = __ldaxr(v2135);
              while (__stlxr(v2136 + 1, v2135));
              v2099 = WTF::fastMalloc((WTF *)0x20);
              *(_QWORD *)v2099 = off_1E34B5530;
              *(_OWORD *)(v2099 + 8) = *(_OWORD *)cf;
              *(_QWORD *)&cf[16] = 0;
              *(_QWORD *)(v2099 + 24) = a2;
              LODWORD(v2423[0]) = v2134;
              if (v2134)
                LODWORD(v2423[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
              QueryObjectiEXT = WebCore::GraphicsContextGLANGLE::getQueryObjectui(*((WebCore::GraphicsContextGLANGLE **)this
                                                                                  + 7));
              goto LABEL_3464;
            case 3576:
              v2184 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
              v2186 = v2185;
              if (!v2185)
                return;
              v2187 = v2184;
              v2188 = IPC::Decoder::decode<std::tuple<float,float>>(a3);
              if (!v2189)
                return;
              v2190 = v2188;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
              *(_QWORD *)cf = v2187;
              cf[8] = v2186;
              v1608 = (unsigned int **)&cf[16];
              v2191 = (unsigned int *)(a2 + 1);
              do
                v2192 = __ldaxr(v2191);
              while (__stlxr(v2192 + 1, v2191));
              v2099 = WTF::fastMalloc((WTF *)0x20);
              *(_QWORD *)v2099 = off_1E34B5828;
              *(_OWORD *)(v2099 + 8) = *(_OWORD *)cf;
              *(_QWORD *)&cf[16] = 0;
              *(_QWORD *)(v2099 + 24) = a2;
              LODWORD(v2423[0]) = v2190;
              if (v2190)
                LODWORD(v2423[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
              QueryObjectui64EXT = WebCore::GraphicsContextGLANGLE::getQueryObjectui64EXT(*((WebCore::GraphicsContextGLANGLE **)this
                                                                                          + 7));
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2099 + 16))(v2099, QueryObjectui64EXT);
              goto LABEL_3476;
            case 3577:
              v2145 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
              v2147 = v2146;
              if (!v2146)
                return;
              v2148 = v2145;
              IPC::Decoder::decode<std::tuple<float,float>>(a3);
              if (!v2149)
                return;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
              *(_QWORD *)cf = v2148;
              cf[8] = v2147;
              v2150 = (unsigned int *)(a2 + 1);
              do
                v2151 = __ldaxr(v2150);
              while (__stlxr(v2151 + 1, v2150));
              v2126 = WTF::fastMalloc((WTF *)0x20);
              *(_QWORD *)v2126 = off_1E34B57D8;
              *(_OWORD *)(v2126 + 8) = *(_OWORD *)cf;
              *(_QWORD *)&cf[16] = 0;
              *(_QWORD *)(v2126 + 24) = a2;
              Query = WebCore::GraphicsContextGLANGLE::getQueryiEXT(*((WebCore::GraphicsContextGLANGLE **)this + 7));
LABEL_3406:
              v2127 = Query;
              goto LABEL_3407;
            case 3579:
              v2100 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
              v2102 = v2101;
              if (!v2101)
                return;
              v2103 = v2100;
              v2104 = IPC::Decoder::decode<std::tuple<float,float>>(a3);
              if (!v2105)
                return;
              v2106 = v2104;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
              *(_QWORD *)cf = v2103;
              cf[8] = v2102;
              v1608 = (unsigned int **)&cf[16];
              v2107 = (unsigned int *)(a2 + 1);
              do
                v2108 = __ldaxr(v2107);
              while (__stlxr(v2108 + 1, v2107));
              v2099 = WTF::fastMalloc((WTF *)0x20);
              *(_QWORD *)v2099 = off_1E34B5580;
              *(_OWORD *)(v2099 + 8) = *(_OWORD *)cf;
              *(_QWORD *)&cf[16] = 0;
              *(_QWORD *)(v2099 + 24) = a2;
              LODWORD(v2423[0]) = v2106;
              if (v2106)
                LODWORD(v2423[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
              WebCore::GraphicsContextGLANGLE::getSamplerParameterf(*((WebCore::GraphicsContextGLANGLE **)this + 7));
              (*(void (**)(uint64_t))(*(_QWORD *)v2099 + 16))(v2099);
              goto LABEL_3476;
            case 3580:
              v2224 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
              v2226 = v2225;
              if (!v2225)
                return;
              v2227 = v2224;
              v2228 = IPC::Decoder::decode<std::tuple<float,float>>(a3);
              if (!v2229)
                return;
              v2230 = v2228;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
              *(_QWORD *)cf = v2227;
              cf[8] = v2226;
              v1608 = (unsigned int **)&cf[16];
              v2231 = (unsigned int *)(a2 + 1);
              do
                v2232 = __ldaxr(v2231);
              while (__stlxr(v2232 + 1, v2231));
              v2099 = WTF::fastMalloc((WTF *)0x20);
              *(_QWORD *)v2099 = off_1E34B55A8;
              *(_OWORD *)(v2099 + 8) = *(_OWORD *)cf;
              *(_QWORD *)&cf[16] = 0;
              *(_QWORD *)(v2099 + 24) = a2;
              LODWORD(v2423[0]) = v2230;
              if (v2230)
                LODWORD(v2423[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
              QueryObjectiEXT = WebCore::GraphicsContextGLANGLE::getSamplerParameteri(*((WebCore::GraphicsContextGLANGLE **)this
                                                                                      + 7));
LABEL_3464:
              v2324 = QueryObjectiEXT;
              goto LABEL_3475;
            case 3586:
              v2233 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
              v2235 = v2234;
              if (!v2234)
                return;
              v1600 = *((_QWORD *)a3 + 1);
              v1601 = *(_QWORD *)a3;
              v2236 = ((*((_QWORD *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a3;
              if (v1600 < v2236 || v1600 - v2236 <= 7)
                goto LABEL_3524;
              v2237 = (void **)(v1601 + v2236);
              *((_QWORD *)a3 + 2) = v2237 + 1;
              if (!v1601)
                goto LABEL_3686;
              v2238 = (((unint64_t)v2237 + 11) & 0xFFFFFFFFFFFFFFFCLL) - v1601;
              if (v1600 < v2238 || v1600 - v2238 <= 3)
                goto LABEL_3504;
              v2239 = v2233;
              v2240 = *v2237;
              *((_QWORD *)a3 + 2) = (((unint64_t)v2237 + 11) & 0xFFFFFFFFFFFFFFFCLL) + 4;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
              *(_QWORD *)cf = v2239;
              cf[8] = v2235;
              v1608 = (unsigned int **)&cf[16];
              v2241 = (unsigned int *)(a2 + 1);
              do
                v2242 = __ldaxr(v2241);
              while (__stlxr(v2242 + 1, v2241));
              v1611 = WTF::fastMalloc((WTF *)0x20);
              *(_QWORD *)v1611 = off_1E34B5648;
              *(_OWORD *)(v1611 + 8) = *(_OWORD *)cf;
              *(_QWORD *)&cf[16] = 0;
              *(_QWORD *)(v1611 + 24) = a2;
              Synci = WebCore::GraphicsContextGLANGLE::getSynci(*((WebCore::GraphicsContextGLANGLE **)this + 7), v2240);
LABEL_3373:
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1611 + 16))(v1611, Synci);
              v2023 = *(void (**)(void))(*(_QWORD *)v1611 + 8);
              goto LABEL_3040;
            case 3589:
              v2290 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
              v2292 = v2291;
              if (!v2291)
                return;
              v2293 = v2290;
              v2294 = IPC::Decoder::decode<std::tuple<float,float>>(a3);
              if (!v2295)
                return;
              v2296 = v2294;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
              *(_QWORD *)cf = v2293;
              cf[8] = v2292;
              v1608 = (unsigned int **)&cf[16];
              v2297 = (unsigned int *)(a2 + 1);
              do
                v2298 = __ldaxr(v2297);
              while (__stlxr(v2298 + 1, v2297));
              v2299 = WTF::fastMalloc((WTF *)0x20);
              *(_QWORD *)v2299 = off_1E34B5698;
              *(_OWORD *)(v2299 + 8) = *(_OWORD *)cf;
              *(_QWORD *)&cf[16] = 0;
              *(_QWORD *)(v2299 + 24) = a2;
              LODWORD(v2428) = v2296;
              if (v2296)
                LODWORD(v2428) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)&v2428);
              v2423[0] = 0;
              v2423[1] = 0;
              WebCore::GraphicsContextGLANGLE::getTransformFeedbackVarying();
              (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v2299 + 16))(v2299, v2423);
              (*(void (**)(uint64_t))(*(_QWORD *)v2299 + 8))(v2299);
              goto LABEL_3468;
            case 3590:
              v2282 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
              v2284 = v2283;
              if (!v2283)
                return;
              v2285 = v2282;
              v2286 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
              if ((v2286 & 0xFF00000000) == 0)
                return;
              v2287 = v2286;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
              *(_QWORD *)cf = v2285;
              cf[8] = v2284;
              v1608 = (unsigned int **)&cf[16];
              v2288 = (unsigned int *)(a2 + 1);
              do
                v2289 = __ldaxr(v2288);
              while (__stlxr(v2289 + 1, v2288));
              v2176 = WTF::fastMalloc((WTF *)0x20);
              *(_QWORD *)v2176 = off_1E34B5788;
              *(_OWORD *)(v2176 + 8) = *(_OWORD *)cf;
              *(_QWORD *)&cf[16] = 0;
              *(_QWORD *)(v2176 + 24) = a2;
              LODWORD(v2428) = v2287;
              if (v2287)
                LODWORD(v2428) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)&v2428);
              (*(void (**)(WTF::StringImpl **__return_ptr))(**((_QWORD **)this + 7) + 1984))(v2423);
LABEL_3466:
              (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v2176 + 16))(v2176, v2423);
              (*(void (**)(uint64_t))(*(_QWORD *)v2176 + 8))(v2176);
LABEL_3468:
              v2326 = v2423[0];
              v2423[0] = 0;
              if (v2326)
              {
                if (*(_DWORD *)v2326 == 2)
                  WTF::StringImpl::destroy(v2326, v2325);
                else
                  *(_DWORD *)v2326 -= 2;
              }
              goto LABEL_3088;
            case 3591:
              v2084 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
              v2086 = v2085;
              if (!v2085)
                return;
              v2087 = (WTF::StringImpl *)v2084;
              IPC::Decoder::decode<std::tuple<int,WTF::String>>((uint64_t *)a3, cf);
              if (!cf[16])
                return;
              v1638 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
              if (!cf[16])
                goto LABEL_3496;
              v1638 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v2423);
              if (!cf[16])
                goto LABEL_3496;
              v2423[0] = v2087;
              LOBYTE(v2423[1]) = v2086;
              v2088 = (unsigned int *)(a2 + 1);
              do
                v2089 = __ldaxr(v2088);
              while (__stlxr(v2089 + 1, v2088));
              v1986 = WTF::fastMalloc((WTF *)0x20);
              *(_QWORD *)v1986 = off_1E34B5710;
              *(_OWORD *)(v1986 + 8) = *(_OWORD *)v2423;
              *(_QWORD *)&v2424 = 0;
              *(_QWORD *)(v1986 + 24) = a2;
              LODWORD(v2428) = *(_DWORD *)cf;
              if (*(_DWORD *)cf)
              {
                v2090 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)&v2428);
                LODWORD(v2428) = v2090;
              }
              else
              {
                v2090 = 0;
              }
              UniformLocation = WebCore::GraphicsContextGLANGLE::getUniformBlockIndex(*((WebCore::GraphicsContextGLANGLE **)this + 7), v2090, (const WTF::String *)&cf[8]);
              goto LABEL_3107;
            case 3592:
              v2153 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
              v2155 = v2154;
              if (!v2154)
                return;
              v2156 = *((_QWORD *)a3 + 1);
              v2157 = *(char **)a3;
              v2158 = ((*((_QWORD *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(_QWORD *)a3;
              if (v2156 < v2158 || v2156 - v2158 <= 3)
              {
LABEL_3582:
                v2396 = 0;
                v2397 = 0;
                *(_QWORD *)a3 = 0;
                *((_QWORD *)a3 + 1) = 0;
                v2398 = *((_QWORD *)a3 + 3);
                if (v2398)
                {
                  if (v2156)
                  {
                    (*(void (**)(uint64_t))(*(_QWORD *)v2398 + 16))(v2398);
                    v2397 = *(_QWORD *)a3;
                    v2396 = *((_QWORD *)a3 + 1);
                  }
                  else
                  {
                    v2396 = 0;
                    v2397 = 0;
                  }
                }
              }
              else
              {
                v2159 = &v2157[v2158];
                *((_QWORD *)a3 + 2) = v2159 + 4;
                if (v2157)
                {
                  v2160 = (WTF::StringImpl *)v2153;
                  v2161 = *(_DWORD *)v2159;
                  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a3, v2157, (uint64_t)v2423);
                  if ((_BYTE)v2424)
                  {
                    *(_DWORD *)cf = v2161;
                    *(WTF::StringImpl **)&cf[8] = v2423[0];
                    v2163 = v2423[1];
                    v2423[0] = 0;
                    v2423[1] = 0;
                    *(_QWORD *)&cf[16] = v2163;
                    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v2423, v2162);
                    LOBYTE(v2413) = 1;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2423, a2 + 4);
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v2423);
                    v2423[0] = v2160;
                    LOBYTE(v2423[1]) = v2155;
                    v2164 = (unsigned int *)(a2 + 1);
                    do
                      v2165 = __ldaxr(v2164);
                    while (__stlxr(v2165 + 1, v2164));
                    v2166 = WTF::fastMalloc((WTF *)0x20);
                    *(_QWORD *)v2166 = off_1E34B56C0;
                    *(_OWORD *)(v2166 + 8) = *(_OWORD *)v2423;
                    *(_QWORD *)&v2424 = 0;
                    *(_QWORD *)(v2166 + 24) = a2;
                    v2431[0] = *(_DWORD *)cf;
                    if (*(_DWORD *)cf)
                      v2431[0] = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, v2431);
                    WebCore::GraphicsContextGLANGLE::getUniformIndices();
                    v2428 = v2430;
                    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v2166 + 16))(v2166, &v2428);
                    (*(void (**)(uint64_t))(*(_QWORD *)v2166 + 8))(v2166);
                    v2335 = (WTF *)v2428;
                    if ((_QWORD)v2428)
                    {
                      *(_QWORD *)&v2428 = 0;
                      DWORD2(v2428) = 0;
                      WTF::fastFree(v2335, v2334);
                    }
                    WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)&v2424);
                    if ((_BYTE)v2413)
                      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&cf[8], v2336);
                    return;
                  }
LABEL_3584:
                  v2386 = *(_QWORD *)a3;
                  v2400 = *((_QWORD *)a3 + 1);
                  *(_QWORD *)a3 = 0;
                  *((_QWORD *)a3 + 1) = 0;
                  v2388 = *((_QWORD *)a3 + 3);
                  if (v2388 && v2400)
                    goto LABEL_3561;
                  return;
                }
LABEL_3695:
                v2396 = v2156;
                v2397 = (uint64_t)v2157;
              }
              *(_QWORD *)a3 = 0;
              *((_QWORD *)a3 + 1) = 0;
              v2399 = *((_QWORD *)a3 + 3);
              if (v2399 && v2396)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2399 + 16))(v2399, v2397);
              goto LABEL_3584;
            case 3602:
              v2300 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
              v2302 = v2301;
              if (!v2301)
                return;
              v2303 = v2300;
              v2304 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
              if ((v2304 & 0xFF00000000) == 0)
                return;
              v2305 = v2304;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
              *(_QWORD *)cf = v2303;
              cf[8] = v2302;
              v1608 = (unsigned int **)&cf[16];
              v2306 = (unsigned int *)(a2 + 1);
              do
                v2307 = __ldaxr(v2306);
              while (__stlxr(v2307 + 1, v2306));
              v2099 = WTF::fastMalloc((WTF *)0x20);
              *(_QWORD *)v2099 = off_1E34B54E0;
              *(_OWORD *)(v2099 + 8) = *(_OWORD *)cf;
              *(_QWORD *)&cf[16] = 0;
              *(_QWORD *)(v2099 + 24) = a2;
              LODWORD(v2423[0]) = v2305;
              if (v2305)
                LODWORD(v2423[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
              isQuery = WebCore::GraphicsContextGLANGLE::isQuery(*((WebCore::GraphicsContextGLANGLE **)this + 7));
              goto LABEL_3474;
            case 3603:
              v2091 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
              v2093 = v2092;
              if (!v2092)
                return;
              v2094 = v2091;
              v2095 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
              if ((v2095 & 0xFF00000000) == 0)
                return;
              v2096 = v2095;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
              *(_QWORD *)cf = v2094;
              cf[8] = v2093;
              v1608 = (unsigned int **)&cf[16];
              v2097 = (unsigned int *)(a2 + 1);
              do
                v2098 = __ldaxr(v2097);
              while (__stlxr(v2098 + 1, v2097));
              v2099 = WTF::fastMalloc((WTF *)0x20);
              *(_QWORD *)v2099 = off_1E34B57B0;
              *(_OWORD *)(v2099 + 8) = *(_OWORD *)cf;
              *(_QWORD *)&cf[16] = 0;
              *(_QWORD *)(v2099 + 24) = a2;
              LODWORD(v2423[0]) = v2096;
              if (v2096)
                LODWORD(v2423[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
              isQuery = WebCore::GraphicsContextGLANGLE::isQueryEXT(*((WebCore::GraphicsContextGLANGLE **)this + 7));
              goto LABEL_3474;
            case 3605:
              v2137 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
              v2139 = v2138;
              if (!v2138)
                return;
              v2140 = v2137;
              v2141 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
              if ((v2141 & 0xFF00000000) == 0)
                return;
              v2142 = v2141;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
              *(_QWORD *)cf = v2140;
              cf[8] = v2139;
              v1608 = (unsigned int **)&cf[16];
              v2143 = (unsigned int *)(a2 + 1);
              do
                v2144 = __ldaxr(v2143);
              while (__stlxr(v2144 + 1, v2143));
              v2099 = WTF::fastMalloc((WTF *)0x20);
              *(_QWORD *)v2099 = off_1E34B5558;
              *(_OWORD *)(v2099 + 8) = *(_OWORD *)cf;
              *(_QWORD *)&cf[16] = 0;
              *(_QWORD *)(v2099 + 24) = a2;
              LODWORD(v2423[0]) = v2142;
              if (v2142)
                LODWORD(v2423[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
              isQuery = WebCore::GraphicsContextGLANGLE::isSampler(*((WebCore::GraphicsContextGLANGLE **)this + 7));
              goto LABEL_3474;
            case 3607:
              v2117 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
              v2119 = v2118;
              if (!v2118)
                return;
              v2120 = v2117;
              v2121 = IPC::Decoder::decode<std::tuple<double>>((uint64_t *)a3);
              if (!v2122)
                return;
              v2123 = (void *)v2121;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
              *(_QWORD *)cf = v2120;
              cf[8] = v2119;
              v2124 = (unsigned int *)(a2 + 1);
              do
                v2125 = __ldaxr(v2124);
              while (__stlxr(v2125 + 1, v2124));
              v2126 = WTF::fastMalloc((WTF *)0x20);
              *(_QWORD *)v2126 = off_1E34B55F8;
              *(_OWORD *)(v2126 + 8) = *(_OWORD *)cf;
              *(_QWORD *)&cf[16] = 0;
              *(_QWORD *)(v2126 + 24) = a2;
              v2127 = WebCore::GraphicsContextGLANGLE::isSync(*((WebCore::GraphicsContextGLANGLE **)this + 7), v2123) != 0;
LABEL_3407:
              (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v2126 + 16))(v2126, v2127);
LABEL_3408:
              (*(void (**)(uint64_t))(*(_QWORD *)v2126 + 8))(v2126);
              v1712 = (unsigned int **)&cf[16];
              goto LABEL_3100;
            case 3608:
              v2193 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
              v2195 = v2194;
              if (!v2194)
                return;
              v2196 = v2193;
              v2197 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
              if ((v2197 & 0xFF00000000) == 0)
                return;
              v2198 = v2197;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
              *(_QWORD *)cf = v2196;
              cf[8] = v2195;
              v1608 = (unsigned int **)&cf[16];
              v2199 = (unsigned int *)(a2 + 1);
              do
                v2200 = __ldaxr(v2199);
              while (__stlxr(v2200 + 1, v2199));
              v2099 = WTF::fastMalloc((WTF *)0x20);
              *(_QWORD *)v2099 = off_1E34B5468;
              *(_OWORD *)(v2099 + 8) = *(_OWORD *)cf;
              *(_QWORD *)&cf[16] = 0;
              *(_QWORD *)(v2099 + 24) = a2;
              LODWORD(v2423[0]) = v2198;
              if (v2198)
                LODWORD(v2423[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
              isQuery = WebCore::GraphicsContextGLANGLE::isTexture(*((WebCore::GraphicsContextGLANGLE **)this + 7));
              goto LABEL_3474;
            case 3609:
              v2109 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
              v2111 = v2110;
              if (!v2110)
                return;
              v2112 = v2109;
              v2113 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
              if ((v2113 & 0xFF00000000) == 0)
                return;
              v2114 = v2113;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
              *(_QWORD *)cf = v2112;
              cf[8] = v2111;
              v1608 = (unsigned int **)&cf[16];
              v2115 = (unsigned int *)(a2 + 1);
              do
                v2116 = __ldaxr(v2115);
              while (__stlxr(v2116 + 1, v2115));
              v2099 = WTF::fastMalloc((WTF *)0x20);
              *(_QWORD *)v2099 = off_1E34B5670;
              *(_OWORD *)(v2099 + 8) = *(_OWORD *)cf;
              *(_QWORD *)&cf[16] = 0;
              *(_QWORD *)(v2099 + 24) = a2;
              LODWORD(v2423[0]) = v2114;
              if (v2114)
                LODWORD(v2423[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
              isQuery = WebCore::GraphicsContextGLANGLE::isTransformFeedback(*((WebCore::GraphicsContextGLANGLE **)this
                                                                             + 7));
              goto LABEL_3474;
            case 3610:
              v2308 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
              v2310 = v2309;
              if (!v2309)
                return;
              v2311 = v2308;
              v2312 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
              if ((v2312 & 0xFF00000000) == 0)
                return;
              v2313 = v2312;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, a2 + 4);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)cf);
              *(_QWORD *)cf = v2311;
              cf[8] = v2310;
              v1608 = (unsigned int **)&cf[16];
              v2314 = (unsigned int *)(a2 + 1);
              do
                v2315 = __ldaxr(v2314);
              while (__stlxr(v2315 + 1, v2314));
              v2099 = WTF::fastMalloc((WTF *)0x20);
              *(_QWORD *)v2099 = off_1E34B5490;
              *(_OWORD *)(v2099 + 8) = *(_OWORD *)cf;
              *(_QWORD *)&cf[16] = 0;
              *(_QWORD *)(v2099 + 24) = a2;
              LODWORD(v2423[0]) = v2313;
              if (v2313)
                LODWORD(v2423[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 24, (int *)v2423);
              isQuery = WebCore::GraphicsContextGLANGLE::isVertexArray(*((WebCore::GraphicsContextGLANGLE **)this + 7));
LABEL_3474:
              v2324 = isQuery != 0;
LABEL_3475:
              (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v2099 + 16))(v2099, v2324);
LABEL_3476:
              v2023 = *(void (**)(void))(*(_QWORD *)v2099 + 8);
              goto LABEL_3040;
            default:
              return;
          }
      }
  }
}

void `non-virtual thunk to'WebKit::RemoteGraphicsContextGL::didReceiveStreamMessage(WebKit::RemoteGraphicsContextGL *this, uint64_t **a2, IPC::Decoder *a3)
{
  WebKit::RemoteGraphicsContextGL::didReceiveStreamMessage((WebKit::RemoteGraphicsContextGL *)((char *)this - 8), a2, a3);
}

uint64_t WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>(uint64_t *a1, int *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = *a2;
    v5 = 9 * ((v4 + ~(v4 << 15)) ^ ((v4 + ~(v4 << 15)) >> 10));
    v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
    v7 = (v6 ^ HIWORD(v6)) & v3;
    v8 = *(_DWORD *)(v2 + 8 * v7);
    if (v8 == *a2)
      return *(unsigned int *)(v2 + 8 * v7 + 4);
    v9 = 1;
    while (v8 != -1)
    {
      v7 = ((_DWORD)v7 + v9) & v3;
      v8 = *(_DWORD *)(v2 + 8 * v7);
      ++v9;
      if (v8 == v4)
        return *(unsigned int *)(v2 + 8 * v7 + 4);
    }
  }
  return 0;
}

_QWORD *WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned int &>(_QWORD *result, uint64_t *a2, int *a3, _DWORD *a4)
{
  _QWORD *v7;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned int>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = (v13 ^ HIWORD(v13)) & v10;
  v15 = (_DWORD *)(v8 + 8 * v14);
  v16 = *v15;
  if (*v15 != -1)
  {
    v17 = 0;
    v18 = 1;
    do
    {
      if (v16 == v11)
      {
        if ((v9 & 1) != 0)
          v21 = 0;
        else
          v21 = *(unsigned int *)(v8 - 4);
        v26 = 0;
        v27 = v8 + 8 * v21;
        goto LABEL_29;
      }
      if (v16 == -2)
        v17 = v15;
      v14 = (v14 + v18) & v10;
      v15 = (_DWORD *)(v8 + 8 * v14);
      v16 = *v15;
      ++v18;
    }
    while (*v15 != -1);
    if (v17)
    {
      *v17 = 0xFFFFFFFFLL;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v15 = v17;
    }
  }
  *v15 = v11;
  v15[1] = *a4;
  v19 = *a2;
  if (*a2)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v22 = *a2;
  if (*a2)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24)
    {
LABEL_22:
      result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned int>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::expand(a2, v15);
      v15 = result;
      v22 = *a2;
      if (*a2)
        v25 = *(unsigned int *)(v22 - 4);
      else
        v25 = 0;
    }
  }
  else if (3 * v25 <= 4 * v24)
  {
    goto LABEL_22;
  }
  v27 = v22 + 8 * v25;
  v26 = 1;
LABEL_29:
  *v7 = v15;
  v7[1] = v27;
  *((_BYTE *)v7 + 16) = v26;
  return result;
}

_QWORD *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned int>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::expand(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned int>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned int>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(8 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (_QWORD *)(v9 + 16);
    do
    {
      *v12++ = 0xFFFFFFFFLL;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (_DWORD *)(v6 + 8 * v13);
      if (*v15 <= 0xFFFFFFFD)
      {
        v16 = *a1;
        if (*a1)
          v17 = *(_DWORD *)(v16 - 8);
        else
          v17 = 0;
        v18 = 0;
        v19 = 9 * ((*v15 + ~(*v15 << 15)) ^ ((*v15 + ~(*v15 << 15)) >> 10));
        v20 = ((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) ^ (((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) >> 16);
        do
        {
          v21 = v20 & v17;
          v20 = ++v18 + v21;
        }
        while (*(_DWORD *)(v16 + 8 * v21) != -1);
        v22 = (_QWORD *)(v16 + 8 * v21);
        *v22 = *(_QWORD *)v15;
        if (v15 == a3)
          v14 = v22;
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::take(uint64_t *a1, int a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v5 = (v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11);
  v6 = v3 & (v5 ^ HIWORD(v5));
  v7 = *(_DWORD *)(v2 + 8 * v6);
  if (v7 != a2)
  {
    v8 = 1;
    while (v7 != -1)
    {
      v6 = ((_DWORD)v6 + v8) & v3;
      v7 = *(_DWORD *)(v2 + 8 * v6);
      ++v8;
      if (v7 == a2)
        goto LABEL_8;
    }
    v6 = *(unsigned int *)(v2 - 4);
  }
LABEL_8:
  if (v6 == *(_DWORD *)(v2 - 4))
    return 0;
  v11 = (_DWORD *)(v2 + 8 * v6);
  v9 = v11[1];
  *v11 = -2;
  ++*(_DWORD *)(*a1 - 16);
  v12 = *a1;
  if (*a1)
    v13 = *(_DWORD *)(v12 - 12) - 1;
  else
    v13 = -1;
  *(_DWORD *)(v12 - 12) = v13;
  v14 = *a1;
  if (*a1)
  {
    v15 = 6 * *(_DWORD *)(v14 - 12);
    v16 = *(_DWORD *)(v14 - 4);
    if (v15 < v16 && v16 >= 9)
      WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned int>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a1, v16 >> 1, 0);
  }
  return v9;
}

unint64_t IPC::Decoder::decode<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int *v7;
  int v8;
  unint64_t result;
  char v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;

  v3 = a1[1];
  v4 = *a1;
  v5 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v3 < v5 || v3 - v5 <= 3)
  {
    v12 = 0;
    v13 = 0;
    *a1 = 0;
    a1[1] = 0;
    v14 = a1[3];
    if (v14)
    {
      v15 = a1;
      if (v3)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v14 + 16))(v14, v4, v3);
        a1 = v15;
        v13 = *v15;
        v12 = v15[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
    }
    goto LABEL_10;
  }
  v7 = (int *)(v4 + v5);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v4)
  {
    v12 = v3;
    v13 = 0;
LABEL_10:
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result && v12)
      result = (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v13);
    goto LABEL_11;
  }
  v8 = *v7;
  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  if (!v10)
  {
LABEL_11:
    v11 = 0;
    *(_BYTE *)a2 = 0;
    goto LABEL_12;
  }
  *(_DWORD *)a2 = v8;
  *(_QWORD *)(a2 + 8) = result;
  v11 = 1;
LABEL_12:
  *(_BYTE *)(a2 + 16) = v11;
  return result;
}

uint64_t IPC::Decoder::decodeSpan<unsigned int>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v10;

  v3 = a1[1];
  v4 = *a1;
  v5 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  v6 = 4 * a2;
  if (v3 >= v5 && v3 - v5 >= v6)
  {
    v8 = v4 + v5;
    a1[2] = v4 + v5 + v6;
  }
  else
  {
    v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10)
    {
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      return 0;
    }
  }
  return v8;
}

uint64_t std::__optional_destruct_base<WebKit::WebGPU::TextureDescriptor,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  char v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v3 = *(WTF **)(a1 + 48);
    if (v3)
    {
      *(_QWORD *)(a1 + 48) = 0;
      *(_DWORD *)(a1 + 56) = 0;
      WTF::fastFree(v3, a2);
    }
    v4 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, uint64_t))off_1E34B4C40[v4])(&v7, a1 + 8);
    *(_DWORD *)(a1 + 24) = -1;
    v5 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebKit::WebGPU::BindGroupLayoutDescriptor,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(WTF **)(a1 + 8);
    if (v3)
    {
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
      WTF::fastFree(v3, a2);
    }
    v4 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebKit::WebGPU::PipelineLayoutDescriptor,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 32))
  {
    if (*(_BYTE *)(a1 + 24))
    {
      v3 = *(WTF **)(a1 + 8);
      if (v3)
      {
        *(_QWORD *)(a1 + 8) = 0;
        *(_DWORD *)(a1 + 16) = 0;
        WTF::fastFree(v3, a2);
      }
    }
    v4 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebKit::WebGPU::BindGroupDescriptor,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(WTF **)(a1 + 16);
    if (v3)
    {
      *(_QWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = 0;
      WTF::fastFree(v3, a2);
    }
    v4 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebKit::WebGPU::ShaderModuleDescriptor,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(a1 + 32))
  {
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 16, a2);
    v4 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v3);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t IPC::Decoder::decode<std::tuple<WebKit::WebGPU::ComputePipelineDescriptor,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  IPC::ArgumentCoder<WebKit::WebGPU::ComputePipelineDescriptor,void>::decode(a2, (uint64_t)&v14);
  if (v20)
  {
    do
    {
      v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
      if (!(_BYTE)v5)
        break;
      if (v20)
      {
        v6 = v14;
        v14 = 0;
        *(_QWORD *)a1 = v6;
        *(_OWORD *)(a1 + 8) = v15;
        *(_BYTE *)(a1 + 24) = 0;
        *(_BYTE *)(a1 + 32) = 0;
        if (v17)
        {
          v7 = v16;
          v16 = 0;
          *(_QWORD *)(a1 + 24) = v7;
          *(_BYTE *)(a1 + 32) = 1;
        }
        *(_QWORD *)(a1 + 40) = v18;
        v8 = v19;
        v18 = 0;
        v19 = 0;
        *(_QWORD *)(a1 + 48) = v8;
        *(_QWORD *)(a1 + 56) = v4;
        *(_BYTE *)(a1 + 64) = 1;
        return std::__optional_destruct_base<WebKit::WebGPU::ComputePipelineDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v14, v5);
      }
      __break(1u);
LABEL_17:
      (*(void (**)(unint64_t, void *))(*(_QWORD *)v4 + 16))(v4, v5);
    }
    while (v20);
  }
  else
  {
    v5 = (void *)*a2;
    v10 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v4 = a2[3];
    if (v4)
      v11 = v10 == 0;
    else
      v11 = 1;
    if (!v11)
      goto LABEL_17;
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 64) = 0;
  std::__optional_destruct_base<WebKit::WebGPU::ComputePipelineDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v14, v5);
  v12 = *a2;
  v13 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result && v13)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v12);
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::WebGPU::ComputePipelineDescriptor,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(a1 + 56))
  {
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 40, a2);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 24, v3);
    v5 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<std::tuple<WebKit::WebGPU::ComputePipelineDescriptor,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(a1 + 64))
  {
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 40, a2);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 24, v3);
    v5 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t IPC::Decoder::decode<std::tuple<WebKit::WebGPU::RenderPipelineDescriptor,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[21];
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;

  IPC::ArgumentCoder<WebKit::WebGPU::RenderPipelineDescriptor,void>::decode(a2, (uint64_t)&v22);
  if (v42)
  {
    do
    {
      v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
      if (!(_BYTE)v5)
        break;
      if (v42)
      {
        v6 = v22;
        v22 = 0;
        *(_QWORD *)a1 = v6;
        *(_OWORD *)(a1 + 8) = v23;
        *(_BYTE *)(a1 + 24) = 0;
        *(_BYTE *)(a1 + 32) = 0;
        if (v25)
        {
          v7 = v24;
          v24 = 0;
          *(_QWORD *)(a1 + 24) = v7;
          *(_BYTE *)(a1 + 32) = 1;
        }
        v8 = v26;
        v26 = 0;
        *(_QWORD *)(a1 + 40) = v8;
        v9 = v27;
        v27 = 0;
        *(_QWORD *)(a1 + 48) = v9;
        v10 = v28;
        v28 = 0;
        *(_QWORD *)(a1 + 56) = v10;
        v11 = v29;
        v29 = 0;
        *(_QWORD *)(a1 + 64) = v11;
        *(_OWORD *)(a1 + 88) = v31;
        *(_OWORD *)(a1 + 104) = v32;
        *(_OWORD *)(a1 + 120) = *(_OWORD *)v33;
        *(_QWORD *)(a1 + 133) = *(_QWORD *)&v33[13];
        *(_OWORD *)(a1 + 72) = v30;
        *(_BYTE *)(a1 + 144) = 0;
        *(_BYTE *)(a1 + 200) = 0;
        if (v41)
        {
          *(_QWORD *)(a1 + 144) = v34;
          *(_BYTE *)(a1 + 152) = 0;
          *(_BYTE *)(a1 + 160) = 0;
          if (v36)
          {
            v12 = v35;
            v35 = 0;
            *(_QWORD *)(a1 + 152) = v12;
            *(_BYTE *)(a1 + 160) = 1;
          }
          v13 = v37;
          v37 = 0;
          *(_QWORD *)(a1 + 168) = v13;
          v14 = v38;
          v38 = 0;
          *(_QWORD *)(a1 + 176) = v14;
          v15 = v39;
          v39 = 0;
          *(_QWORD *)(a1 + 184) = v15;
          v16 = v40;
          v40 = 0;
          *(_QWORD *)(a1 + 192) = v16;
          *(_BYTE *)(a1 + 200) = 1;
        }
        *(_QWORD *)(a1 + 208) = v4;
        *(_BYTE *)(a1 + 216) = 1;
        return std::__optional_destruct_base<WebKit::WebGPU::RenderPipelineDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v22, v5);
      }
      __break(1u);
LABEL_21:
      (*(void (**)(unint64_t, void *))(*(_QWORD *)v4 + 16))(v4, v5);
    }
    while (v42);
  }
  else
  {
    v5 = (void *)*a2;
    v18 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v4 = a2[3];
    if (v4)
      v19 = v18 == 0;
    else
      v19 = 1;
    if (!v19)
      goto LABEL_21;
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 216) = 0;
  std::__optional_destruct_base<WebKit::WebGPU::RenderPipelineDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v22, v5);
  v20 = *a2;
  v21 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result && v21)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v20);
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::WebGPU::RenderPipelineDescriptor,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  if (*(_BYTE *)(a1 + 208))
  {
    std::__optional_destruct_base<WebKit::WebGPU::FragmentState,false>::~__optional_destruct_base[abi:sn180100](a1 + 144, a2);
    WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 56, v3);
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 40, v4);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 24, v5);
    v7 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<std::tuple<WebKit::WebGPU::RenderPipelineDescriptor,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  if (*(_BYTE *)(a1 + 216))
  {
    std::__optional_destruct_base<WebKit::WebGPU::FragmentState,false>::~__optional_destruct_base[abi:sn180100](a1 + 144, a2);
    WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 56, v3);
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 40, v4);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 24, v5);
    v7 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteDevice26CreateComputePipelineAsyncEN6WebKit12RemoteDeviceES8_FvRKNS7_6WebGPU25ComputePipelineDescriptorENS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvbONS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSK_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B4C60;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteDevice26CreateComputePipelineAsyncEN6WebKit12RemoteDeviceES8_FvRKNS7_6WebGPU25ComputePipelineDescriptorENS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvbONS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSK_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B4C60;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteDevice26CreateComputePipelineAsyncEN6WebKit12RemoteDeviceES8_FvRKNS7_6WebGPU25ComputePipelineDescriptorENS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvbONS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSK_EE4callEbSK_(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE *v13;
  void *v14;
  char *result;
  WTF *v16;
  void *v17;
  unint64_t v18;
  size_t v19;
  void *v20;
  IPC::Encoder *v21;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 3080;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v21 = (IPC::Encoder *)v7;
  v8 = *(_QWORD *)(v7 + 544);
  v9 = v8 + 1;
  v10 = *(_QWORD *)(v7 + 552);
  if (v10 < v8 + 1)
  {
    v18 = (2 * v10 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v19 = v18;
      v18 *= 2;
    }
    while (v19 < v9);
    result = (char *)mmap(0, v19, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v11 = result;
    memcpy(result, *(const void **)(v7 + 528), *(_QWORD *)(v7 + 544));
    v20 = *(void **)(v7 + 528);
    if (v20 != (void *)(v7 + 16))
      munmap(v20, *(_QWORD *)(v7 + 552));
    *(_QWORD *)(v7 + 528) = v11;
    *(_QWORD *)(v7 + 552) = v19;
    v12 = *(_QWORD *)(v7 + 544);
  }
  else
  {
    v11 = *(char **)(v7 + 528);
    v12 = *(_QWORD *)(v7 + 544);
  }
  bzero(&v11[v12], v8 - v12);
  *(_QWORD *)(v7 + 544) = v9;
  v13 = (_BYTE *)(*(_QWORD *)(v7 + 528) + v8);
  *(_QWORD *)(v7 + 536) = v13 + 1;
  *v13 = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, a3);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v21, 0, 0);
  result = (char *)v21;
  v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v14);
    return (char *)WTF::fastFree(v16, v17);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteDevice25CreateRenderPipelineAsyncEN6WebKit12RemoteDeviceES8_FvRKNS7_6WebGPU24RenderPipelineDescriptorENS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvbONS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSK_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B4C88;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteDevice25CreateRenderPipelineAsyncEN6WebKit12RemoteDeviceES8_FvRKNS7_6WebGPU24RenderPipelineDescriptorENS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvbONS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSK_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B4C88;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteDevice25CreateRenderPipelineAsyncEN6WebKit12RemoteDeviceES8_FvRKNS7_6WebGPU24RenderPipelineDescriptorENS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvbONS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSK_EE4callEbSK_(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE *v13;
  void *v14;
  char *result;
  WTF *v16;
  void *v17;
  unint64_t v18;
  size_t v19;
  void *v20;
  IPC::Encoder *v21;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 3081;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v21 = (IPC::Encoder *)v7;
  v8 = *(_QWORD *)(v7 + 544);
  v9 = v8 + 1;
  v10 = *(_QWORD *)(v7 + 552);
  if (v10 < v8 + 1)
  {
    v18 = (2 * v10 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v19 = v18;
      v18 *= 2;
    }
    while (v19 < v9);
    result = (char *)mmap(0, v19, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v11 = result;
    memcpy(result, *(const void **)(v7 + 528), *(_QWORD *)(v7 + 544));
    v20 = *(void **)(v7 + 528);
    if (v20 != (void *)(v7 + 16))
      munmap(v20, *(_QWORD *)(v7 + 552));
    *(_QWORD *)(v7 + 528) = v11;
    *(_QWORD *)(v7 + 552) = v19;
    v12 = *(_QWORD *)(v7 + 544);
  }
  else
  {
    v11 = *(char **)(v7 + 528);
    v12 = *(_QWORD *)(v7 + 544);
  }
  bzero(&v11[v12], v8 - v12);
  *(_QWORD *)(v7 + 544) = v9;
  v13 = (_BYTE *)(*(_QWORD *)(v7 + 528) + v8);
  *(_QWORD *)(v7 + 536) = v13 + 1;
  *v13 = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, a3);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v21, 0, 0);
  result = (char *)v21;
  v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v14);
    return (char *)WTF::fastFree(v16, v17);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::WebGPU::RenderBundleEncoderDescriptor,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 40))
  {
    v3 = *(WTF **)(a1 + 8);
    if (v3)
    {
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
      WTF::fastFree(v3, a2);
    }
    v4 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteDevice13PopErrorScopeEN6WebKit12RemoteDeviceES8_FvONS_17CompletionHandlerIFvbONSt3__18optionalINSA_7variantIJNS7_6WebGPU16OutOfMemoryErrorENSD_15ValidationErrorENSD_13InternalErrorEEEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSJ_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B4CB0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteDevice13PopErrorScopeEN6WebKit12RemoteDeviceES8_FvONS_17CompletionHandlerIFvbONSt3__18optionalINSA_7variantIJNS7_6WebGPU16OutOfMemoryErrorENSD_15ValidationErrorENSD_13InternalErrorEEEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSJ_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B4CB0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteDevice13PopErrorScopeEN6WebKit12RemoteDeviceES8_FvONS_17CompletionHandlerIFvbONSt3__18optionalINSA_7variantIJNS7_6WebGPU16OutOfMemoryErrorENSD_15ValidationErrorENSD_13InternalErrorEEEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSJ_EE4callEbSJ_(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE *v13;
  void *v14;
  char *result;
  WTF *v16;
  void *v17;
  unint64_t v18;
  size_t v19;
  void *v20;
  IPC::Encoder *v21;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 3082;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v21 = (IPC::Encoder *)v7;
  v8 = *(_QWORD *)(v7 + 544);
  v9 = v8 + 1;
  v10 = *(_QWORD *)(v7 + 552);
  if (v10 < v8 + 1)
  {
    v18 = (2 * v10 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v19 = v18;
      v18 *= 2;
    }
    while (v19 < v9);
    result = (char *)mmap(0, v19, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v11 = result;
    memcpy(result, *(const void **)(v7 + 528), *(_QWORD *)(v7 + 544));
    v20 = *(void **)(v7 + 528);
    if (v20 != (void *)(v7 + 16))
      munmap(v20, *(_QWORD *)(v7 + 552));
    *(_QWORD *)(v7 + 528) = v11;
    *(_QWORD *)(v7 + 552) = v19;
    v12 = *(_QWORD *)(v7 + 544);
  }
  else
  {
    v11 = *(char **)(v7 + 528);
    v12 = *(_QWORD *)(v7 + 544);
  }
  bzero(&v11[v12], v8 - v12);
  *(_QWORD *)(v7 + 544) = v9;
  v13 = (_BYTE *)(*(_QWORD *)(v7 + 528) + v8);
  *(_QWORD *)(v7 + 536) = v13 + 1;
  *v13 = a2;
  IPC::ArgumentCoder<std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>>,void>::encode<IPC::Encoder,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>>>(v7, a3);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v21, 0, 0);
  result = (char *)v21;
  v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v14);
    return (char *)WTF::fastFree(v16, v17);
  }
  return result;
}

void IPC::ArgumentCoder<std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>>,void>::encode<IPC::Encoder,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>>>(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  char *v8;
  uint64_t i;
  _BYTE *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  void *v18;
  unint64_t v19;
  size_t v20;
  char *v21;
  void *v22;

  v4 = *(unsigned __int8 *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 544);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(a1 + 552);
  if (v7 < v5 + 1)
    goto LABEL_18;
  v8 = *(char **)(a1 + 528);
  for (i = *(_QWORD *)(a1 + 544); ; i = *(_QWORD *)(a1 + 544))
  {
    bzero(&v8[i], v5 - i);
    *(_QWORD *)(a1 + 544) = v6;
    v10 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v5);
    *(_QWORD *)(a1 + 536) = v10 + 1;
    if (!v4)
    {
      *v10 = 0;
      return;
    }
    *v10 = 1;
    if (!*(_BYTE *)(a2 + 16))
    {
      std::__throw_bad_optional_access[abi:sn180100]();
LABEL_31:
      __break(0xC471u);
      JUMPOUT(0x196FDA098);
    }
    v4 = *(_DWORD *)(a2 + 8);
    v5 = *(_QWORD *)(a1 + 544);
    v6 = v5 + 1;
    v11 = *(_QWORD *)(a1 + 552);
    if (v11 < v5 + 1)
    {
      v19 = (2 * v11 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v20 = v19;
        v19 *= 2;
      }
      while (v20 < v6);
      v21 = (char *)mmap(0, v20, 3, 4098, -1, 0);
      if (v21 == (char *)-1)
        goto LABEL_31;
      v12 = v21;
      memcpy(v21, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
      v22 = *(void **)(a1 + 528);
      if (v22 != (void *)(a1 + 16))
        munmap(v22, *(_QWORD *)(a1 + 552));
      *(_QWORD *)(a1 + 528) = v12;
      *(_QWORD *)(a1 + 552) = v20;
      v13 = *(_QWORD *)(a1 + 544);
    }
    else
    {
      v12 = *(char **)(a1 + 528);
      v13 = *(_QWORD *)(a1 + 544);
    }
    bzero(&v12[v13], v5 - v13);
    *(_QWORD *)(a1 + 544) = v6;
    v14 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v5);
    *(_QWORD *)(a1 + 536) = v14 + 1;
    *v14 = v4;
    if (v4 == 2)
      break;
    if (v4 == 1)
    {
      if (*(_DWORD *)(a2 + 8) == 1)
        goto LABEL_15;
    }
    else if ((_BYTE)v4 || !*(_DWORD *)(a2 + 8))
    {
      return;
    }
LABEL_17:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_18:
    v15 = (2 * v7 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v16 = v15;
      v15 *= 2;
    }
    while (v16 < v6);
    v17 = (char *)mmap(0, v16, 3, 4098, -1, 0);
    if (v17 == (char *)-1)
      goto LABEL_31;
    v8 = v17;
    memcpy(v17, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v18 = *(void **)(a1 + 528);
    if (v18 != (void *)(a1 + 16))
      munmap(v18, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v8;
    *(_QWORD *)(a1 + 552) = v16;
  }
  if (*(_DWORD *)(a2 + 8) != 2)
    goto LABEL_17;
LABEL_15:
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteDevice27ResolveUncapturedErrorEventEN6WebKit12RemoteDeviceES8_FvONS_17CompletionHandlerIFvbONSt3__18optionalINSA_7variantIJNS7_6WebGPU16OutOfMemoryErrorENSD_15ValidationErrorENSD_13InternalErrorEEEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSJ_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B4CD8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteDevice27ResolveUncapturedErrorEventEN6WebKit12RemoteDeviceES8_FvONS_17CompletionHandlerIFvbONSt3__18optionalINSA_7variantIJNS7_6WebGPU16OutOfMemoryErrorENSD_15ValidationErrorENSD_13InternalErrorEEEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSJ_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B4CD8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteDevice27ResolveUncapturedErrorEventEN6WebKit12RemoteDeviceES8_FvONS_17CompletionHandlerIFvbONSt3__18optionalINSA_7variantIJNS7_6WebGPU16OutOfMemoryErrorENSD_15ValidationErrorENSD_13InternalErrorEEEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSJ_EE4callEbSJ_(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE *v13;
  void *v14;
  char *result;
  WTF *v16;
  void *v17;
  unint64_t v18;
  size_t v19;
  void *v20;
  IPC::Encoder *v21;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 3084;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v21 = (IPC::Encoder *)v7;
  v8 = *(_QWORD *)(v7 + 544);
  v9 = v8 + 1;
  v10 = *(_QWORD *)(v7 + 552);
  if (v10 < v8 + 1)
  {
    v18 = (2 * v10 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v19 = v18;
      v18 *= 2;
    }
    while (v19 < v9);
    result = (char *)mmap(0, v19, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v11 = result;
    memcpy(result, *(const void **)(v7 + 528), *(_QWORD *)(v7 + 544));
    v20 = *(void **)(v7 + 528);
    if (v20 != (void *)(v7 + 16))
      munmap(v20, *(_QWORD *)(v7 + 552));
    *(_QWORD *)(v7 + 528) = v11;
    *(_QWORD *)(v7 + 552) = v19;
    v12 = *(_QWORD *)(v7 + 544);
  }
  else
  {
    v11 = *(char **)(v7 + 528);
    v12 = *(_QWORD *)(v7 + 544);
  }
  bzero(&v11[v12], v8 - v12);
  *(_QWORD *)(v7 + 544) = v9;
  v13 = (_BYTE *)(*(_QWORD *)(v7 + 528) + v8);
  *(_QWORD *)(v7 + 536) = v13 + 1;
  *v13 = a2;
  IPC::ArgumentCoder<std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>>,void>::encode<IPC::Encoder,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>>>(v7, a3);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v21, 0, 0);
  result = (char *)v21;
  v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v14);
    return (char *)WTF::fastFree(v16, v17);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteDevice24ResolveDeviceLostPromiseEN6WebKit12RemoteDeviceES8_FvONS_17CompletionHandlerIFvN7WebCore6WebGPU16DeviceLostReasonEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B4D00;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteDevice24ResolveDeviceLostPromiseEN6WebKit12RemoteDeviceES8_FvONS_17CompletionHandlerIFvN7WebCore6WebGPU16DeviceLostReasonEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B4D00;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteDevice24ResolveDeviceLostPromiseEN6WebKit12RemoteDeviceES8_FvONS_17CompletionHandlerIFvN7WebCore6WebGPU16DeviceLostReasonEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EE4callESC_(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3083;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<IPC::Semaphore>>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<IPC::Semaphore>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 8))
  {
    v4 = *(_QWORD *)a1;
    v5 = *((_QWORD *)a1 + 1);
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    v6 = *((_QWORD *)a1 + 3);
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<std::tuple<IPC::Semaphore>,void>::decode<IPC::Decoder>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  int v4;
  _BYTE v5[4];
  int v6;
  unsigned __int8 v7;

  IPC::Decoder::decode<IPC::Semaphore>(a1, v5);
  if (v7)
  {
    WTF::MachSendRight::MachSendRight();
    v3 = v6;
    v6 = 0;
    *(_DWORD *)(a2 + 4) = v3;
    v4 = v7;
    *(_BYTE *)(a2 + 8) = 1;
    if (v4)
    {
      IPC::Semaphore::destroy((IPC::Semaphore *)v5);
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v5);
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
  }
}

uint64_t std::__optional_destruct_base<WebKit::WebGPU::ExternalTextureDescriptor,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  char v6;

  if (*(_BYTE *)(a1 + 88))
  {
    if (*(_BYTE *)(a1 + 80))
    {
      v3 = *(unsigned int *)(a1 + 72);
      if ((_DWORD)v3 != -1)
        ((void (*)(char *, uint64_t))off_1E34B4D18[v3])(&v6, a1 + 56);
      *(_DWORD *)(a1 + 72) = -1;
    }
    v4 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

_QWORD *IPC::Decoder::decode<WebCore::AffineTransform>(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::AffineTransform,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 48))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (_QWORD *)a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect>>(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  unint64_t result;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  char v20;

  v4 = (a2[2] + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 >= v7 && v6 - v7 > 7)
  {
    v9 = (uint64_t *)(v5 + v7);
    a2[2] = (unint64_t)(v9 + 1);
    if (!v5)
      goto LABEL_26;
    v10 = *v9;
    if ((unint64_t)(*v9 - 1) < 0xFFFFFFFFFFFFFFFELL)
    {
      result = IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode(a2, (uint64_t)&v19);
      if (v20)
      {
        *(_QWORD *)a1 = v10;
        *(_OWORD *)(a1 + 8) = v19;
        *(_BYTE *)(a1 + 24) = 1;
        return result;
      }
      v5 = *a2;
      v6 = a2[1];
    }
  }
  else
  {
    v12 = 0;
    v13 = 0;
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14)
    {
      if (v6)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v14 + 16))(v14);
        v13 = *a2;
        v12 = a2[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
    }
    while (1)
    {
      v6 = 0;
      v5 = 0;
      *a2 = 0;
      a2[1] = 0;
      v15 = a2[3];
      if (!v15)
        break;
      if (!v12)
      {
        v6 = 0;
        v5 = 0;
        break;
      }
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v15 + 16))(v15, v13, v12);
      if (!*a2)
      {
        v5 = 0;
        v6 = a2[1];
        break;
      }
      __break(1u);
LABEL_26:
      v12 = v6;
      v13 = v5;
    }
  }
  *a2 = 0;
  a2[1] = 0;
  v16 = a2[3];
  if (v16 && v6)
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v16 + 16))(v16, v5);
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  v17 = *a2;
  v18 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v18)
      return (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v17);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  v1 = a1[1];
  v2 = *a1;
  v3 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v1 < v3 || v1 - v3 <= 7)
  {
    v8 = 0;
    v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10)
    {
      v14 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
        a1 = v14;
        v9 = *v14;
        v8 = v14[1];
      }
      else
      {
        v8 = 0;
        v9 = 0;
      }
    }
    while (1)
    {
      v1 = 0;
      v2 = 0;
      *a1 = 0;
      a1[1] = 0;
      v11 = a1[3];
      if (!v11)
        goto LABEL_11;
      v13 = a1;
      if (!v8)
      {
        v1 = 0;
        v2 = 0;
        goto LABEL_11;
      }
      a1 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v9, v8);
      v2 = *v13;
      if (!*v13)
      {
        a1 = v13;
        v1 = v13[1];
        goto LABEL_11;
      }
      __break(1u);
LABEL_21:
      v8 = v1;
      v9 = v2;
    }
  }
  v5 = (uint64_t *)(v2 + v3);
  a1[2] = v5 + 1;
  if (!v2)
    goto LABEL_21;
  v6 = *v5;
  if ((unint64_t)(v6 - 1) > 0xFFFFFFFFFFFFFFFDLL)
  {
LABEL_11:
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12 && v1)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v2);
    return 0;
  }
  return v6;
}

WTF *IPC::Decoder::decode<WebCore::Path>(_BYTE *a1, unint64_t *a2)
{
  WTF *result;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::Path,void>::decode(a2, a2, a1);
  if (!a1[72])
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF *)a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF *)(*(uint64_t (**)(WTF *, unint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t result, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;

  v2 = a2[1];
  v3 = *a2;
  v4 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v2 < v4 || v2 - v4 <= 7)
  {
    v13 = 0;
    v14 = 0;
    *a2 = 0;
    a2[1] = 0;
    v15 = a2[3];
    if (v15)
    {
      v29 = result;
      v33 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v3);
        result = v29;
        a2 = v33;
        v14 = *v33;
        v13 = v33[1];
      }
      else
      {
        v13 = 0;
        v14 = 0;
      }
    }
    goto LABEL_17;
  }
  v6 = (uint64_t *)(v3 + v4);
  v7 = v6 + 1;
  a2[2] = v6 + 1;
  if (!v3)
  {
    v13 = v2;
    v14 = 0;
LABEL_17:
    v2 = 0;
    v3 = 0;
    *a2 = 0;
    a2[1] = 0;
    v16 = a2[3];
    if (!v16)
      goto LABEL_18;
    v28 = result;
    v32 = a2;
    if (!v13)
    {
      v2 = 0;
      v3 = 0;
      goto LABEL_18;
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v16 + 16))(v16, v14, v13);
    v3 = *v32;
    if (!*v32)
    {
      result = v28;
      a2 = v32;
      v2 = v32[1];
      goto LABEL_18;
    }
    goto LABEL_39;
  }
  v8 = *v6;
  if ((unint64_t)(v8 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
LABEL_18:
    *a2 = 0;
    a2[1] = 0;
    v17 = a2[3];
    if (v17 && v2)
    {
      v27 = result;
      v31 = a2;
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v17 + 16))(v17, v3, v2);
LABEL_33:
      result = v27;
      a2 = v31;
      goto LABEL_23;
    }
    goto LABEL_23;
  }
  v9 = (((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
  if (v2 >= v9 && v2 - v9 > 7)
  {
    v12 = v3 + v9 + 8;
    v11 = *(_QWORD *)(v3 + v9);
    a2[2] = v12;
    if ((unint64_t)(v11 - 1) < 0xFFFFFFFFFFFFFFFELL)
    {
      *(_QWORD *)result = v8;
      *(_QWORD *)(result + 8) = v11;
      *(_BYTE *)(result + 16) = 1;
      return result;
    }
    goto LABEL_40;
  }
  v18 = 0;
  v19 = 0;
  *a2 = 0;
  a2[1] = 0;
  v20 = a2[3];
  if (v20)
  {
    v30 = result;
    v34 = a2;
    if (v2)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t, _QWORD))(*(_QWORD *)v20 + 16))(v20, v3, v2, 0);
      v18 = 0;
      v25 = *v34;
      v24 = v34[1];
      v26 = v34[3];
      *v34 = 0;
      v34[1] = 0;
      v19 = 0;
      if (v26)
      {
        result = v30;
        a2 = v34;
        if (v24)
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v26 + 16))(v26, v25, v24, 0);
          v3 = *v34;
          if (*v34)
          {
LABEL_39:
            __break(1u);
LABEL_40:
            v18 = v2;
            v19 = v3;
            goto LABEL_22;
          }
          v19 = 0;
          result = v30;
          a2 = v34;
          v18 = v34[1];
        }
        goto LABEL_22;
      }
    }
    else
    {
      v18 = 0;
      v19 = 0;
    }
    result = v30;
    a2 = v34;
  }
LABEL_22:
  *a2 = 0;
  a2[1] = 0;
  v21 = a2[3];
  if (v21 && v18)
  {
    v27 = result;
    v31 = a2;
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v21 + 16))(v21, v19, v18);
    goto LABEL_33;
  }
LABEL_23:
  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 16) = 0;
  v23 = *a2;
  v22 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v22)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v23);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect,WebCore::FloatRect,WebCore::ImagePaintingOptions>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  __int128 v13;
  char v14;
  __int128 v15;
  char v16;

  IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode(a2, (uint64_t)&v13);
  if (v14)
  {
    IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode(a2, (uint64_t)&v15);
    if (v16 && (result = IPC::ArgumentCoder<WebCore::ImagePaintingOptions,void>::decode(a2), BYTE3(result)))
    {
      if (*(_BYTE *)(a3 + 8))
      {
        *(_QWORD *)a1 = *(_QWORD *)a3;
        *(_OWORD *)(a1 + 8) = v13;
        *(_OWORD *)(a1 + 24) = v15;
        *(_WORD *)(a1 + 40) = result;
        *(_BYTE *)(a1 + 42) = BYTE2(result);
        v9 = 1;
LABEL_6:
        *(_BYTE *)(a1 + 48) = v9;
        return result;
      }
      __break(1u);
    }
    else
    {
      v7 = *a2;
      v8 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      result = a2[3];
      if (!result)
      {
LABEL_9:
        v9 = 0;
        *(_BYTE *)a1 = 0;
        goto LABEL_6;
      }
    }
    if (v8)
      result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v7);
    goto LABEL_9;
  }
  v10 = *a2;
  v11 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
    v12 = v11 == 0;
  else
    v12 = 1;
  if (!v12)
    result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v10);
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 48) = 0;
  return result;
}

_QWORD *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize,WebCore::ImagePaintingOptions>>(_BYTE *a1, unint64_t *a2)
{
  _QWORD *result;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize,WebCore::ImagePaintingOptions>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[112])
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (_QWORD *)a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t))(*result + 16))(result, v5);
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize,WebCore::ImagePaintingOptions>,void>::decode<IPC::Decoder>(_BYTE *a1, unint64_t *a2)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[2];

  result = (_QWORD *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  v6[0] = result;
  v6[1] = v5;
  if ((_BYTE)v5)
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize,WebCore::ImagePaintingOptions>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1, a2, (uint64_t)v6);
  *a1 = 0;
  a1[112] = 0;
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize,WebCore::ImagePaintingOptions>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(_BYTE *a1, unint64_t *a2, uint64_t a3)
{
  _QWORD *result;
  _BYTE v7[20];

  result = (_QWORD *)IPC::Decoder::decode<WebCore::FloatRect>(a2, (uint64_t)v7);
  if (v7[16])
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize,WebCore::ImagePaintingOptions>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect>(a1, a2, a3, (uint64_t)v7);
  *a1 = 0;
  a1[112] = 0;
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize,WebCore::ImagePaintingOptions>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect>(_BYTE *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  _BYTE v9[20];

  result = (_QWORD *)IPC::Decoder::decode<WebCore::FloatRect>(a2, (uint64_t)v9);
  if (v9[16])
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize,WebCore::ImagePaintingOptions>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect,WebCore::FloatRect>(a1, (uint64_t *)a2, a3, a4, (uint64_t)v9);
  *a1 = 0;
  a1[112] = 0;
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize,WebCore::ImagePaintingOptions>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect,WebCore::FloatRect>(_BYTE *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *result;
  _BYTE v11[56];

  result = IPC::Decoder::decode<WebCore::AffineTransform>((uint64_t)v11, a2);
  if (v11[48])
    return (_QWORD *)IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize,WebCore::ImagePaintingOptions>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform>(a1, (unint64_t *)a2, a3, a4, a5, (uint64_t)v11);
  *a1 = 0;
  a1[112] = 0;
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize,WebCore::ImagePaintingOptions>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform>(_BYTE *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t result;
  int v13;
  unint64_t v14;
  int v15;

  result = IPC::Decoder::decode<WebCore::FloatPoint>(a2);
  v14 = result;
  v15 = v13;
  if ((_BYTE)v13)
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize,WebCore::ImagePaintingOptions>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint>(a1, a2, a3, a4, a5, a6, (uint64_t)&v14);
  *a1 = 0;
  a1[112] = 0;
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize,WebCore::ImagePaintingOptions>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint>(_BYTE *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t result;
  int v15;
  unint64_t v16;
  int v17;

  result = IPC::Decoder::decode<WebCore::FloatPoint>(a2);
  v16 = result;
  v17 = v15;
  if ((_BYTE)v15)
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize,WebCore::ImagePaintingOptions>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize>(a1, (uint64_t *)a2, a3, a4, a5, a6, a7, (uint64_t)&v16);
  *a1 = 0;
  a1[112] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize,WebCore::ImagePaintingOptions>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize>(_BYTE *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  int v16;

  result = IPC::Decoder::decode<WebCore::ImagePaintingOptions>(a2);
  v16 = result;
  if (BYTE3(result))
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize,WebCore::ImagePaintingOptions>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize,WebCore::ImagePaintingOptions>((uint64_t)a1, *(_QWORD *)a3, *(_BYTE *)(a3 + 8), a4, a5, a6, *(_QWORD *)a7, *(_BYTE *)(a7 + 8), *(_QWORD *)a8, *(_BYTE *)(a8 + 8), (uint64_t)&v16);
  *a1 = 0;
  a1[112] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize,WebCore::ImagePaintingOptions>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize,WebCore::ImagePaintingOptions>(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, char a10, uint64_t a11)
{
  __int128 v11;

  if (a3 && *(_BYTE *)(a4 + 16) && *(_BYTE *)(a5 + 16) && *(_BYTE *)(a6 + 48) && a8 && a10 && *(_BYTE *)(a11 + 3))
  {
    *(_OWORD *)(result + 8) = *(_OWORD *)a4;
    *(_OWORD *)(result + 24) = *(_OWORD *)a5;
    v11 = *(_OWORD *)(a6 + 16);
    *(_OWORD *)(result + 40) = *(_OWORD *)a6;
    *(_QWORD *)result = a2;
    *(_OWORD *)(result + 56) = v11;
    *(_OWORD *)(result + 72) = *(_OWORD *)(a6 + 32);
    *(_QWORD *)(result + 88) = a7;
    *(_QWORD *)(result + 96) = a9;
    *(_BYTE *)(result + 106) = *(_BYTE *)(a11 + 2);
    *(_WORD *)(result + 104) = *(_WORD *)a11;
    *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::CompositeMode>>(uint64_t *a1)
{
  int v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v2 = IPC::ArgumentCoder<WebCore::CompositeMode,void>::decode(a1);
  LODWORD(v3) = 0x10000;
  if ((v2 & 0xFF0000) == 0)
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v3 = a1[3];
    if (v3)
    {
      v12 = v2;
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, v6);
      LODWORD(v3) = 0;
      v2 = v12;
    }
  }
  if ((v2 & 0xFFFFFFu) <= 0x10000)
    v4 = 0;
  else
    v4 = v2;
  result = v2 & 0xFF00 | v4 | v3;
  if ((v3 & 0x10000) == 0)
  {
    v8 = *a1;
    v9 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10)
    {
      if (v9)
      {
        v11 = result;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v8);
        return v11;
      }
    }
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WebCore::FloatPoint,WebCore::FloatPoint>>(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  unint64_t result;
  char v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v4 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a2);
  if (!v5)
  {
    v9 = *a2;
    v10 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v11 = a2[3];
    if (v11)
      v12 = v10 == 0;
    else
      v12 = 1;
    if (v12)
      goto LABEL_11;
    goto LABEL_15;
  }
  v6 = v4;
  result = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a2);
  if (v8)
  {
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = result;
    *(_BYTE *)(a1 + 16) = 1;
    return result;
  }
  v9 = *a2;
  v13 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v11 = a2[3];
  if (v11 && v13)
LABEL_15:
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v9);
LABEL_11:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v14 = *a2;
  v15 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v15)
      return (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v14);
  }
  return result;
}

uint64_t *IPC::Decoder::decode<std::tuple<WebCore::DisplayList::FillRectWithGradientAndSpaceTransform>>(uint64_t a1, unint64_t *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t *result;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  char v16;

  IPC::Decoder::decode<WebCore::DisplayList::FillRectWithGradientAndSpaceTransform>(a2, (uint64_t)&v10);
  if (v16)
  {
    *(_OWORD *)a1 = v10;
    v5 = v11;
    v11 = 0;
    *(_QWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 24) = v12;
    *(_OWORD *)(a1 + 40) = v13;
    *(_OWORD *)(a1 + 56) = v14;
    *(_BYTE *)(a1 + 72) = v15;
    result = WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v11, v4);
    *(_BYTE *)(a1 + 80) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 80) = 0;
    v7 = *a2;
    v8 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (uint64_t *)a2[3];
    if (result)
      v9 = v8 == 0;
    else
      v9 = 1;
    if (!v9)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, unint64_t))(*result + 16))(result, v7);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WebCore::PathDataLine>>(uint64_t a1, unint64_t *a2)
{
  unint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  char v9;

  result = IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode(a2, (uint64_t)&v8);
  if (v9)
  {
    *(_OWORD *)a1 = v8;
    *(_BYTE *)(a1 + 16) = 1;
    return result;
  }
  v5 = *a2;
  v6 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (!result)
  {
    v6 = 0;
LABEL_6:
    v7 = 0;
    goto LABEL_7;
  }
  if (!v6)
    goto LABEL_6;
  (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v5);
  v7 = *a2;
  v6 = a2[1];
  result = a2[3];
LABEL_7:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *a2 = 0;
  a2[1] = 0;
  if (result)
  {
    if (v6)
      return (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::PathSegment>>(uint64_t a1, unint64_t *a2)
{
  uint64_t result;
  __int128 v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _OWORD v9[3];
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  result = IPC::ArgumentCoder<WebCore::PathSegment,void>::decode(a2, (uint64_t)v9);
  if (v11)
  {
    v5 = v9[1];
    *(_OWORD *)a1 = v9[0];
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 32) = v9[2];
    *(_QWORD *)(a1 + 48) = v10;
    *(_BYTE *)(a1 + 56) = 1;
    return result;
  }
  v6 = *a2;
  v7 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (!result)
  {
    v7 = 0;
LABEL_6:
    v8 = 0;
    goto LABEL_7;
  }
  if (!v7)
    goto LABEL_6;
  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v6);
  v8 = *a2;
  v7 = a2[1];
  result = a2[3];
LABEL_7:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *a2 = 0;
  a2[1] = 0;
  if (result)
  {
    if (v7)
      return (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v8);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[24])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  _QWORD v6[2];

  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v6[0] = result;
  v6[1] = v5;
  if ((_BYTE)v5)
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((unint64_t *)a1, (uint64_t)v6, (uint64_t)a2);
  *a2 = 0;
  a2[24] = 0;
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::FloatRect>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result;
  unint64_t v7;
  char v8;
  unint64_t v9;
  BOOL v10;
  __int128 v11;
  char v12;

  result = IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode(a1, (uint64_t)&v11);
  if (!v12)
  {
    v7 = *a1;
    v9 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v10 = v9 == 0;
    else
      v10 = 1;
    if (v10)
      goto LABEL_10;
    goto LABEL_12;
  }
  if (!*(_BYTE *)(a2 + 8))
  {
    __break(1u);
LABEL_12:
    result = (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v7);
LABEL_10:
    v8 = 0;
    *(_BYTE *)a3 = 0;
    goto LABEL_4;
  }
  *(_QWORD *)a3 = *(_QWORD *)a2;
  *(_OWORD *)(a3 + 8) = v11;
  v8 = 1;
LABEL_4:
  *(_BYTE *)(a3 + 24) = v8;
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebKit::SharedVideoFrame,WebCore::FloatRect,BOOL>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int v20;
  _BYTE v21[16];
  int v22;
  char v23;
  __int128 v24;
  char v25;

  IPC::Decoder::decode<WebKit::SharedVideoFrame>(a2, (uint64_t)&v19);
  if (!v23)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 72) = 0;
LABEL_14:
    v12 = *a2;
    v13 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v14 = v13 == 0;
    else
      v14 = 1;
    if (!v14)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v12);
    return result;
  }
  result = IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)a2, (uint64_t)&v24);
  if (!v25)
    goto LABEL_24;
  v5 = a2[1];
  v6 = *a2;
  v7 = a2[2] - *a2;
  if (v5 <= v7)
  {
    v15 = 0;
    v16 = 0;
    *a2 = 0;
    a2[1] = 0;
    v17 = a2[3];
    if (v17)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
        v16 = *a2;
        v15 = a2[1];
      }
      else
      {
        v15 = 0;
        v16 = 0;
      }
    }
    goto LABEL_21;
  }
  v8 = (unsigned __int8 *)(v6 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v6)
  {
    v15 = v5;
    v16 = 0;
LABEL_21:
    v5 = 0;
    v6 = 0;
    *a2 = 0;
    a2[1] = 0;
    v18 = a2[3];
    if (!v18)
      goto LABEL_25;
    if (!v15)
    {
      v5 = 0;
      v6 = 0;
LABEL_25:
      *a2 = 0;
      a2[1] = 0;
      result = a2[3];
      if (!result)
      {
LABEL_26:
        v11 = 0;
        *(_BYTE *)a1 = 0;
        goto LABEL_8;
      }
LABEL_28:
      if (v5)
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
      goto LABEL_26;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v16, v15);
LABEL_24:
    v6 = *a2;
    v5 = a2[1];
    goto LABEL_25;
  }
  v9 = *v8;
  if (v9 >= 2)
    goto LABEL_25;
  if (!v23)
  {
    __break(1u);
    goto LABEL_28;
  }
  v10 = v9 != 0;
  *(_OWORD *)a1 = v19;
  *(_DWORD *)(a1 + 16) = v20;
  *(_BYTE *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 40) = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,(std::__variant_detail::_Trait)1>>(a1 + 24, (uint64_t)v21);
  *(_OWORD *)(a1 + 48) = v24;
  *(_BYTE *)(a1 + 64) = v10;
  v11 = 1;
LABEL_8:
  *(_BYTE *)(a1 + 72) = v11;
  if (v23 && v22 != -1)
  {
    result = ((uint64_t (*)(__int128 *, _BYTE *))off_1E34B4D18[v22])(&v24, v21);
    v11 = *(unsigned __int8 *)(a1 + 72);
  }
  if (!v11)
    goto LABEL_14;
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages18RemoteFaceDetector6DetectEN6WebKit18RemoteFaceDetectorES8_FvNS_23ObjectIdentifierGenericIN7WebCore31RenderingResourceIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONS_6VectorINSA_14ShapeDetection12DetectedFaceELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B4D60;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages18RemoteFaceDetector6DetectEN6WebKit18RemoteFaceDetectorES8_FvNS_23ObjectIdentifierGenericIN7WebCore31RenderingResourceIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONS_6VectorINSA_14ShapeDetection12DetectedFaceELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B4D60;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages18RemoteFaceDetector6DetectEN6WebKit18RemoteFaceDetectorES8_FvNS_23ObjectIdentifierGenericIN7WebCore31RenderingResourceIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONS_6VectorINSA_14ShapeDetection12DetectedFaceELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int *v8;
  int *v9;
  void *v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  IPC::Encoder *v14;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3085;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v14 = (IPC::Encoder *)v5;
  v6 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = v6;
  v7 = *(_DWORD *)(a2 + 12);
  if (v7)
  {
    v8 = *(int **)a2;
    v9 = &v8[10 * v7];
    do
    {
      IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v5, v8);
      IPC::ArgumentCoder<std::optional<WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>((IPC::Encoder *)v5, (uint64_t)(v8 + 4));
      v8 += 10;
    }
    while (v8 != v9);
  }
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v14, 0, 0);
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages9RemoteGPU14RequestAdapterEN6WebKit9RemoteGPUES8_FvRKNS7_6WebGPU21RequestAdapterOptionsENS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt3__18optionalINS7_31RemoteGPURequestAdapterResponseEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B4D88;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages9RemoteGPU14RequestAdapterEN6WebKit9RemoteGPUES8_FvRKNS7_6WebGPU21RequestAdapterOptionsENS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt3__18optionalINS7_31RemoteGPURequestAdapterResponseEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B4D88;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages9RemoteGPU14RequestAdapterEN6WebKit9RemoteGPUES8_FvRKNS7_6WebGPU21RequestAdapterOptionsENS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt3__18optionalINS7_31RemoteGPURequestAdapterResponseEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EE4callESN_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  IPC::Encoder *v11;
  char *v12;
  unint64_t v13;
  uint64_t *result;
  uint64_t v16;
  int v17;
  char *v18;
  void *v19;
  WTF *v20;
  void *v21;
  uint64_t *v22;
  uint64_t v23;
  IPC::Encoder *v24;
  unint64_t v25;
  unint64_t v26;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v24, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v24);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_8;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 112))
  {
    v8 = *(_QWORD *)(v2 + 48);
    v6 = *(unint64_t **)(v2 + 56);
    v7 = v6[1];
    v9 = v8 - 1;
    if (v8 == 1)
    {
      if (v7 >= 0x100)
      {
        v9 = 0;
        v6 = (unint64_t *)v6[2];
LABEL_10:
        v11 = (IPC::Encoder *)(v6 + 32);
        v24 = v11;
        v25 = v9;
        v26 = 0;
        v12 = (char *)(((unint64_t)v6 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v13 = v12 - (char *)v11;
        if (v12 >= (char *)v11)
        {
          if (v13 <= 0xFFFFFFFFFFFFFFFDLL && v13 + 2 <= v9)
          {
            *(_WORD *)v12 = 2823;
            v26 = v13 + 2;
            result = IPC::ArgumentCoder<std::optional<WebKit::RemoteGPURequestAdapterResponse>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::RemoteGPURequestAdapterResponse>&>((uint64_t *)&v24, a2);
            if (v25)
              return result;
            *(_WORD *)((char *)v11 + v13) = 2821;
            goto LABEL_17;
          }
          v25 = 0;
        }
        result = IPC::ArgumentCoder<std::optional<WebKit::RemoteGPURequestAdapterResponse>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::RemoteGPURequestAdapterResponse>&>((uint64_t *)&v24, a2);
        if (v25)
          return result;
        goto LABEL_17;
      }
    }
    else
    {
      v10 = v7 >= 0x100;
      v7 -= 256;
      if (v10)
      {
        v6 = (unint64_t *)v6[2];
        if (!v8)
        {
LABEL_9:
          v9 = v7;
          goto LABEL_10;
        }
        if (v7 >= v9)
          goto LABEL_10;
      }
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
LABEL_17:
  v16 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v16 = 2823;
  *(_QWORD *)(v16 + 8) = v3;
  *(_QWORD *)(v16 + 528) = v16 + 16;
  *(_QWORD *)(v16 + 536) = v16 + 16;
  *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v16 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
  v24 = (IPC::Encoder *)v16;
  v17 = *(unsigned __int8 *)(a2 + 176);
  v18 = IPC::Encoder::grow((IPC::Encoder *)v16, 1uLL, 1);
  if (v17)
  {
    *v18 = 1;
    if (!*(_BYTE *)(a2 + 176))
    {
      v22 = (uint64_t *)std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::optional<WebKit::RemoteGPURequestAdapterResponse>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::RemoteGPURequestAdapterResponse>&>(v22, v23);
    }
    IPC::ArgumentCoder<WebKit::RemoteGPURequestAdapterResponse,void>::encode((IPC::Encoder *)v16, (uint64_t *)a2);
  }
  else
  {
    *v18 = 0;
  }
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v24, 0, 0);
  result = (uint64_t *)v24;
  v24 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v19);
    return (uint64_t *)WTF::fastFree(v20, v21);
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::optional<WebKit::RemoteGPURequestAdapterResponse>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::RemoteGPURequestAdapterResponse>&>(uint64_t *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  id v4;

  v3 = result[1];
  v2 = result[2];
  if (*(_BYTE *)(a2 + 176))
  {
    if (v2 >= v3)
    {
      result[1] = 0;
      return IPC::ArgumentCoder<WebKit::RemoteGPURequestAdapterResponse,void>::encode(result, a2);
    }
    *(_BYTE *)(*result + v2) = 1;
    result[2] = v2 + 1;
    if (*(_BYTE *)(a2 + 176))
      return IPC::ArgumentCoder<WebKit::RemoteGPURequestAdapterResponse,void>::encode(result, a2);
    v4 = std::__throw_bad_optional_access[abi:sn180100]();
    return (uint64_t *)_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages9RemoteGPU7IsValidEN6WebKit9RemoteGPUES8_FvNS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvbbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbbEED1Ev(v4);
  }
  else if (v2 >= v3)
  {
    result[1] = 0;
  }
  else
  {
    *(_BYTE *)(*result + v2) = 0;
    result[2] = v2 + 1;
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages9RemoteGPU7IsValidEN6WebKit9RemoteGPUES8_FvNS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvbbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B4DB0;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages9RemoteGPU7IsValidEN6WebKit9RemoteGPUES8_FvNS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvbbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbbEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B4DB0;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages9RemoteGPU7IsValidEN6WebKit9RemoteGPUES8_FvNS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvbbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbbEE4callEbb(uint64_t a1, char a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  IPC::Encoder *result;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _WORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v23;
  void *v24;
  WTF *v25;
  void *v26;
  IPC::Encoder *v27;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v27, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v27);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v3 + 112))
    goto LABEL_28;
  v12 = *(_QWORD *)(v3 + 48);
  v11 = *(_QWORD *)(v3 + 56);
  v9 = *(_QWORD *)(v11 + 8);
  v13 = v12 - 1;
  if (v12 != 1)
  {
    v10 = v9 - 256;
    if (v9 >= 0x100)
    {
      v9 = *(_QWORD *)(v11 + 16);
      if (!v12)
      {
LABEL_8:
        v13 = v10;
        goto LABEL_9;
      }
      if (v10 >= v13)
        goto LABEL_9;
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v9 < 0x100)
    goto LABEL_7;
  v13 = 0;
  v9 = *(_QWORD *)(v11 + 16);
LABEL_9:
  v14 = v9 + 256;
  v15 = (_WORD *)((v9 + 257) & 0xFFFFFFFFFFFFFFFELL);
  v16 = (unint64_t)v15 - v14;
  if ((unint64_t)v15 < v14)
  {
    v17 = 0;
    goto LABEL_15;
  }
  v17 = v16 + 2;
  if (v16 <= 0xFFFFFFFFFFFFFFFDLL && v17 <= v13)
  {
    *v15 = 2823;
LABEL_15:
    v19 = v13;
    goto LABEL_16;
  }
  v19 = 0;
  v17 = 0;
LABEL_16:
  if (v17 < v19)
  {
    *(_BYTE *)(v14 + v17) = a2;
    if (v17 + 1 < v19)
    {
      *(_BYTE *)(v14 + v17 + 1) = a3;
      return result;
    }
  }
  v20 = (unint64_t)v15 >= v14;
  v21 = (unint64_t)v15 - v14;
  if (v20 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v13)
    *(_WORD *)(v14 + v21) = 2821;
LABEL_28:
  v23 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v23 = 2823;
  *(_QWORD *)(v23 + 8) = v4;
  *(_QWORD *)(v23 + 528) = v23 + 16;
  *(_QWORD *)(v23 + 536) = v23 + 16;
  *(_OWORD *)(v23 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v23 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v23);
  v27 = (IPC::Encoder *)v23;
  *IPC::Encoder::grow((IPC::Encoder *)v23, 1uLL, 1) = a2;
  *IPC::Encoder::grow((IPC::Encoder *)v23, 1uLL, 1) = a3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v3 + 32), (uint64_t *)&v27, 0, 0);
  result = v27;
  v27 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v24);
    return (IPC::Encoder *)WTF::fastFree(v25, v26);
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<BOOL,IPC::Semaphore,IPC::Semaphore>>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<BOOL,IPC::Semaphore,IPC::Semaphore>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 20))
  {
    v4 = *(_QWORD *)a1;
    v5 = *((_QWORD *)a1 + 1);
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    v6 = *((_QWORD *)a1 + 3);
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<std::tuple<BOOL,IPC::Semaphore,IPC::Semaphore>,void>::decode<IPC::Decoder>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[4];
  int v18;
  char v19;
  _BYTE v20[4];
  int v21;
  char v22;

  v4 = *((_QWORD *)a1 + 1);
  v5 = *(_QWORD *)a1;
  v6 = *((_QWORD *)a1 + 2) - *(_QWORD *)a1;
  if (v4 <= v6)
  {
    v13 = 0;
    v14 = 0;
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    v15 = *((_QWORD *)a1 + 3);
    if (v15)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
        v14 = *(_QWORD *)a1;
        v13 = *((_QWORD *)a1 + 1);
      }
      else
      {
        v13 = 0;
        v14 = 0;
      }
    }
    goto LABEL_13;
  }
  v7 = (unsigned __int8 *)(v5 + v6);
  *((_QWORD *)a1 + 2) = v7 + 1;
  if (!v5)
  {
    v13 = v4;
    v14 = 0;
LABEL_13:
    v4 = 0;
    v5 = 0;
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    v16 = *((_QWORD *)a1 + 3);
    if (v16)
    {
      if (v13)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v16 + 16))(v16, v14, v13);
        v5 = *(_QWORD *)a1;
        v4 = *((_QWORD *)a1 + 1);
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
LABEL_14:
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    v10 = *((_QWORD *)a1 + 3);
    if (v10)
    {
LABEL_18:
      if (v4)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v5);
    }
LABEL_15:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 20) = 0;
    return;
  }
  v8 = *v7;
  if (v8 >= 2)
    goto LABEL_14;
  v9 = v8 != 0;
  IPC::Decoder::decode<IPC::Semaphore>(a1, v17);
  if (!v19)
    goto LABEL_15;
  IPC::Decoder::decode<IPC::Semaphore>(a1, v20);
  if (v22)
  {
    if (v19)
    {
      *(_BYTE *)a2 = v9;
      WTF::MachSendRight::MachSendRight();
      v11 = v18;
      v18 = 0;
      *(_DWORD *)(a2 + 8) = v11;
      WTF::MachSendRight::MachSendRight();
      v12 = v21;
      v21 = 0;
      *(_DWORD *)(a2 + 16) = v12;
      *(_BYTE *)(a2 + 20) = 1;
      if (v22)
      {
        IPC::Semaphore::destroy((IPC::Semaphore *)v20);
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v20);
      }
      goto LABEL_10;
    }
    __break(1u);
    goto LABEL_18;
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 20) = 0;
LABEL_10:
  if (v19)
  {
    IPC::Semaphore::destroy((IPC::Semaphore *)v17);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v17);
  }
}

_BYTE *std::__optional_destruct_base<std::tuple<BOOL,IPC::Semaphore,IPC::Semaphore>,false>::~__optional_destruct_base[abi:sn180100](_BYTE *a1)
{
  if (a1[20])
  {
    IPC::Semaphore::destroy((IPC::Semaphore *)(a1 + 12));
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a1 + 12));
    IPC::Semaphore::destroy((IPC::Semaphore *)(a1 + 4));
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a1 + 4));
  }
  return a1;
}

unint64_t IPC::Decoder::decode<std::tuple<int,int>>(uint64_t *a1)
{
  unint64_t result;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;

  result = IPC::ArgumentCoder<std::tuple<int,int>,void>::decode<IPC::Decoder>(a1);
  if (!v3)
  {
    v5 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v4 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<int,int>,void>::decode<IPC::Decoder>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned int *v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v1 = a1[1];
  v2 = *a1;
  v3 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v1 >= v3 && v1 - v3 > 3)
  {
    v5 = (unsigned int *)(v2 + v3);
    a1[2] = v5 + 1;
    if (v2)
    {
      v13 = *v5 | 0x100000000;
      return IPC::ArgumentCoder<std::tuple<int,int>,void>::decode<IPC::Decoder,int>(a1, (unsigned int *)&v13);
    }
    v8 = v1;
    v9 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10)
    {
      v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v10 + 16))(v10, v2, v1);
        a1 = v12;
        v9 = *v12;
        v8 = v12[1];
      }
      else
      {
        v8 = 0;
        v9 = 0;
      }
    }
  }
  v6 = 0;
  *a1 = 0;
  a1[1] = 0;
  v11 = a1[3];
  if (v11)
  {
    if (v8)
      (*(void (**)(uint64_t, uint64_t, unint64_t, _QWORD))(*(_QWORD *)v11 + 16))(v11, v9, v8, 0);
    return 0;
  }
  return v6;
}

unint64_t IPC::ArgumentCoder<std::tuple<int,int>,void>::decode<IPC::Decoder,int>(_QWORD *a1, unsigned int *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int *v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v2 = a1[1];
  v3 = *a1;
  v4 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v2 >= v4 && v2 - v4 > 3)
  {
    v6 = (unsigned int *)(v3 + v4);
    a1[2] = v6 + 1;
    if (!v3)
    {
      v9 = v2;
      v10 = 0;
      goto LABEL_11;
    }
    v3 = *((unsigned __int8 *)a2 + 4);
    if (*((_BYTE *)a2 + 4))
      return *a2 | ((unint64_t)*v6 << 32);
    __break(1u);
  }
  else
  {
    v9 = 0;
    v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    v6 = (unsigned int *)a1[3];
    if (!v6)
      goto LABEL_11;
  }
  v12 = a1;
  if (v2)
  {
    (*(void (**)(unsigned int *, uint64_t, unint64_t))(*(_QWORD *)v6 + 16))(v6, v3, v2);
    a1 = v12;
    v10 = *v12;
    v9 = v12[1];
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
LABEL_11:
  v7 = 0;
  *a1 = 0;
  a1[1] = 0;
  v11 = a1[3];
  if (v11)
  {
    if (v9)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v10);
    return 0;
  }
  return v7;
}

unint64_t *IPC::Decoder::decode<IPC::ArrayReferenceTuple<int,int>>(unint64_t *result, uint64_t *a2)
{
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = result;
  v4 = a2[1];
  v5 = *a2;
  v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    v12 = 0;
    v13 = 0;
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v14 + 16))(v14, v5, v4);
        v13 = *a2;
        v12 = a2[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
    }
    goto LABEL_14;
  }
  v8 = (uint64_t *)(v5 + v6);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v12 = v4;
    v13 = 0;
LABEL_14:
    *a2 = 0;
    a2[1] = 0;
    v15 = a2[3];
    if (v15 && v12)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13);
    goto LABEL_15;
  }
  v9 = *v8;
  if (!*v8)
  {
    *result = 0;
    result[1] = 0;
    result[2] = 0;
    goto LABEL_12;
  }
  if (!(v9 >> 62))
  {
    v10 = IPC::Decoder::decodeSpan<unsigned int>(a2, *v8);
    if (v10)
    {
      v11 = v10;
      result = (unint64_t *)IPC::Decoder::decodeSpan<unsigned int>(a2, v9);
      if (result)
      {
        *v3 = v9;
        v3[1] = v11;
        v3[2] = (unint64_t)result;
LABEL_12:
        *((_BYTE *)v3 + 24) = 1;
        return result;
      }
    }
  }
LABEL_15:
  *(_BYTE *)v3 = 0;
  *((_BYTE *)v3 + 24) = 0;
  v16 = *a2;
  v17 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (unint64_t *)a2[3];
  if (result)
  {
    if (v17)
      return (unint64_t *)(*(uint64_t (**)(unint64_t *, uint64_t))(*result + 16))(result, v16);
  }
  return result;
}

_OWORD *IPC::Decoder::decode<IPC::ArrayReferenceTuple<int,int,int>>(_OWORD *result, uint64_t *a2)
{
  _OWORD *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = result;
  v4 = a2[1];
  v5 = *a2;
  v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    v14 = 0;
    v15 = 0;
    *a2 = 0;
    a2[1] = 0;
    v16 = a2[3];
    if (v16)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v16 + 16))(v16, v5, v4);
        v15 = *a2;
        v14 = a2[1];
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
    }
    goto LABEL_15;
  }
  v8 = (uint64_t *)(v5 + v6);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v14 = v4;
    v15 = 0;
LABEL_15:
    *a2 = 0;
    a2[1] = 0;
    v17 = a2[3];
    if (v17 && v14)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v15);
    goto LABEL_16;
  }
  v9 = *v8;
  if (!*v8)
  {
    *result = 0u;
    result[1] = 0u;
    goto LABEL_13;
  }
  if (!(v9 >> 62))
  {
    v10 = IPC::Decoder::decodeSpan<unsigned int>(a2, *v8);
    if (v10)
    {
      v11 = v10;
      v12 = IPC::Decoder::decodeSpan<unsigned int>(a2, v9);
      if (v12)
      {
        v13 = v12;
        result = (_OWORD *)IPC::Decoder::decodeSpan<unsigned int>(a2, v9);
        if (result)
        {
          *(_QWORD *)v3 = v9;
          *((_QWORD *)v3 + 1) = v11;
          *((_QWORD *)v3 + 2) = v13;
          *((_QWORD *)v3 + 3) = result;
LABEL_13:
          *((_BYTE *)v3 + 32) = 1;
          return result;
        }
      }
    }
  }
LABEL_16:
  *(_BYTE *)v3 = 0;
  *((_BYTE *)v3 + 32) = 0;
  v18 = *a2;
  v19 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (_OWORD *)a2[3];
  if (result)
  {
    if (v19)
      return (_OWORD *)(*(uint64_t (**)(_OWORD *, uint64_t))(*(_QWORD *)result + 16))(result, v18);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<float,float,float,float>>(uint64_t result, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int *v6;
  unint64_t v7;
  int v9;
  int v10;
  unint64_t v11;
  int *v13;
  int v14;
  unint64_t v15;
  int *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;

  v2 = a2[1];
  v3 = *a2;
  v4 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v2 < v4 || v2 - v4 <= 3)
  {
    v23 = 0;
    v24 = 0;
    *a2 = 0;
    a2[1] = 0;
    v25 = a2[3];
    if (v25)
    {
      v30 = a2;
      v32 = result;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v3);
        a2 = v30;
        result = v32;
        v24 = *v30;
        v23 = v30[1];
      }
      else
      {
        v23 = 0;
        v24 = 0;
      }
    }
LABEL_30:
    *a2 = 0;
    a2[1] = 0;
    v26 = a2[3];
    if (v26 && v23)
    {
      v29 = a2;
      v31 = result;
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v26 + 16))(v26, v24, v23);
      goto LABEL_36;
    }
    goto LABEL_31;
  }
  v6 = (int *)(v3 + v4);
  a2[2] = v6 + 1;
  if (!v3)
  {
    v23 = v2;
    v24 = 0;
    goto LABEL_30;
  }
  v7 = (((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v3;
  if (v2 >= v7 && v2 - v7 > 3)
  {
    v9 = *v6;
    a2[2] = (((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
    v10 = *(_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v11 = (((((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 >= v11 && v2 - v11 > 3)
    {
      v13 = (int *)(v3 + v11);
      a2[2] = v13 + 1;
      v14 = *v13;
      v15 = (((unint64_t)v13 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v3;
      if (v2 >= v15 && v2 - v15 > 3)
      {
        v17 = (int *)(v3 + v15);
        v18 = *v17;
        a2[2] = v17 + 1;
        *(_DWORD *)result = v9;
        *(_DWORD *)(result + 4) = v10;
        *(_DWORD *)(result + 8) = v14;
        *(_DWORD *)(result + 12) = v18;
        *(_BYTE *)(result + 16) = 1;
        return result;
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
  v19 = a2[3];
  if (v19)
  {
    if (v2)
    {
      v29 = a2;
      v31 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v3);
      a2 = v29;
      result = v31;
      v21 = *v29;
      v20 = v29[1];
      v22 = v29[3];
      *v29 = 0;
      v29[1] = 0;
      if (v22)
      {
        if (v20)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, v21);
LABEL_36:
          a2 = v29;
          result = v31;
        }
      }
    }
  }
LABEL_31:
  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 16) = 0;
  v28 = *a2;
  v27 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v27)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v28);
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,void>::decode<IPC::Decoder>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;

  v2 = a1[1];
  v3 = *a1;
  v4 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v2 >= v4 && v2 - v4 > 3)
  {
    v6 = (unsigned int *)(v3 + v4);
    a1[2] = v6 + 1;
    if (v3)
    {
      v14 = *v6 | 0x100000000;
      IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,void>::decode<IPC::Decoder,unsigned int>(a1, (uint64_t)&v14, a2);
      return;
    }
    v7 = v2;
    v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9)
    {
      v11 = a1;
      v13 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v9 + 16))(v9, v3, v2);
        a1 = v11;
        a2 = v13;
        v8 = *v11;
        v7 = v11[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  v10 = a1[3];
  if (v10)
  {
    if (v7)
    {
      v12 = a2;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v8);
      a2 = v12;
    }
  }
  *a2 = 0;
  a2[16] = 0;
}

void IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,void>::decode<IPC::Decoder,unsigned int>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;

  v3 = a1[1];
  v4 = *a1;
  v5 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v3 >= v5 && v3 - v5 > 3)
  {
    v7 = (unsigned int *)(v4 + v5);
    a1[2] = v7 + 1;
    if (v4)
    {
      v15 = *v7 | 0x100000000;
      IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,void>::decode<IPC::Decoder,unsigned int,unsigned int>(a1, a2, (int *)&v15, a3);
      return;
    }
    v8 = v3;
    v9 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10)
    {
      v12 = a1;
      v14 = a3;
      if (v3)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v10 + 16))(v10, v4, v3);
        a1 = v12;
        a3 = v14;
        v9 = *v12;
        v8 = v12[1];
      }
      else
      {
        v8 = 0;
        v9 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  v11 = a1[3];
  if (v11)
  {
    if (v8)
    {
      v13 = a3;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v9);
      a3 = v13;
    }
  }
  *a3 = 0;
  a3[16] = 0;
}

void IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,void>::decode<IPC::Decoder,unsigned int,unsigned int>(_QWORD *a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, _BYTE *a4@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;

  v4 = a1[1];
  v5 = *a1;
  v6 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v4 >= v6 && v4 - v6 > 3)
  {
    v8 = (unsigned int *)(v5 + v6);
    a1[2] = v8 + 1;
    if (v5)
    {
      v16 = *v8 | 0x100000000;
      IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,void>::decode<IPC::Decoder,unsigned int,unsigned int,unsigned int>(a1, a2, a3, (uint64_t)&v16, a4);
      return;
    }
    v9 = v4;
    v10 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11)
    {
      v13 = a1;
      v15 = a4;
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v5, v4);
        a1 = v13;
        a4 = v15;
        v10 = *v13;
        v9 = v13[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  v12 = a1[3];
  if (v12)
  {
    if (v9)
    {
      v14 = a4;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v10);
      a4 = v14;
    }
  }
  *a4 = 0;
  a4[16] = 0;
}

void IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,void>::decode<IPC::Decoder,unsigned int,unsigned int,unsigned int>(_QWORD *a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;

  v5 = a1[1];
  v6 = *a1;
  v7 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v5 >= v7 && v5 - v7 > 3)
  {
    v9 = (unsigned int *)(v6 + v7);
    a1[2] = v9 + 1;
    if (v6)
    {
      v17 = *v9 | 0x100000000;
      IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,void>::decode<IPC::Decoder,unsigned int,unsigned int,unsigned int,unsigned int>(a2, a3, a4, (int *)&v17, (uint64_t)a5);
      return;
    }
    v10 = v5;
    v11 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12)
    {
      v14 = a1;
      v16 = a5;
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v6, v5);
        a1 = v14;
        a5 = v16;
        v11 = *v14;
        v10 = v14[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  v13 = a1[3];
  if (v13)
  {
    if (v10)
    {
      v15 = a5;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v11);
      a5 = v15;
    }
  }
  *a5 = 0;
  a5[16] = 0;
}

void IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,void>::decode<IPC::Decoder,unsigned int,unsigned int,unsigned int,unsigned int>(uint64_t a1@<X1>, int *a2@<X2>, uint64_t a3@<X3>, int *a4@<X4>, uint64_t a5@<X8>)
{
  int v5;
  int v6;

  if (*(_BYTE *)(a1 + 4) && *((_BYTE *)a2 + 4) && *(_BYTE *)(a3 + 4) && *((_BYTE *)a4 + 4))
  {
    v5 = *a2;
    *(_DWORD *)a5 = *(_DWORD *)a1;
    *(_DWORD *)(a5 + 4) = v5;
    v6 = *a4;
    *(_DWORD *)(a5 + 8) = *(_DWORD *)a3;
    *(_DWORD *)(a5 + 12) = v6;
    *(_BYTE *)(a5 + 16) = 1;
  }
  else
  {
    __break(1u);
  }
}

uint64_t IPC::Decoder::decode<std::tuple<int,int,int,int>>(uint64_t result, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int *v6;
  unint64_t v7;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  int v14;
  uint64_t v15;
  unint64_t v16;
  int *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;

  v2 = a2[1];
  v3 = *a2;
  v4 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v2 < v4 || v2 - v4 <= 3)
  {
    v24 = 0;
    v25 = 0;
    *a2 = 0;
    a2[1] = 0;
    v26 = a2[3];
    if (v26)
    {
      v31 = a2;
      v33 = result;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, v3);
        a2 = v31;
        result = v33;
        v25 = *v31;
        v24 = v31[1];
      }
      else
      {
        v24 = 0;
        v25 = 0;
      }
    }
LABEL_30:
    *a2 = 0;
    a2[1] = 0;
    v27 = a2[3];
    if (v27 && v24)
    {
      v30 = a2;
      v32 = result;
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v27 + 16))(v27, v25, v24);
      goto LABEL_36;
    }
    goto LABEL_31;
  }
  v6 = (int *)(v3 + v4);
  a2[2] = v6 + 1;
  if (!v3)
  {
    v24 = v2;
    v25 = 0;
    goto LABEL_30;
  }
  v7 = (((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v3;
  if (v2 >= v7 && v2 - v7 > 3)
  {
    v9 = *v6;
    a2[2] = v3 + v7 + 4;
    v11 = v3 + v7 + 7;
    v10 = *(_DWORD *)(v3 + v7);
    v12 = (v11 & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 >= v12 && v2 - v12 > 3)
    {
      a2[2] = v3 + v12 + 4;
      v15 = v3 + v12 + 7;
      v14 = *(_DWORD *)(v3 + v12);
      v16 = (v15 & 0xFFFFFFFFFFFFFFFCLL) - v3;
      if (v2 >= v16 && v2 - v16 > 3)
      {
        v18 = (int *)(v3 + v16);
        v19 = *v18;
        a2[2] = v18 + 1;
        *(_DWORD *)result = v9;
        *(_DWORD *)(result + 4) = v10;
        *(_DWORD *)(result + 8) = v14;
        *(_DWORD *)(result + 12) = v19;
        *(_BYTE *)(result + 16) = 1;
        return result;
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
  v20 = a2[3];
  if (v20)
  {
    if (v2)
    {
      v30 = a2;
      v32 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v3);
      a2 = v30;
      result = v32;
      v22 = *v30;
      v21 = v30[1];
      v23 = v30[3];
      *v30 = 0;
      v30[1] = 0;
      if (v23)
      {
        if (v21)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v22);
LABEL_36:
          a2 = v30;
          result = v32;
        }
      }
    }
  }
LABEL_31:
  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 16) = 0;
  v29 = *a2;
  v28 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v28)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v29);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,float>>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned int *v5;
  unint64_t v6;
  uint64_t v8;
  unsigned int *v9;
  unint64_t v10;
  unint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;

  v1 = a1[1];
  v2 = *a1;
  v3 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v1 < v3 || v1 - v3 <= 3)
  {
    v17 = 0;
    v18 = 0;
    *a1 = 0;
    a1[1] = 0;
    v19 = a1[3];
    if (v19)
    {
      v24 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
        a1 = v24;
        v18 = *v24;
        v17 = v24[1];
      }
      else
      {
        v17 = 0;
        v18 = 0;
      }
    }
LABEL_24:
    *a1 = 0;
    a1[1] = 0;
    v20 = a1[3];
    if (v20 && v17)
    {
      v23 = a1;
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v20 + 16))(v20, v18, v17);
      goto LABEL_31;
    }
    goto LABEL_25;
  }
  v5 = (unsigned int *)(v2 + v3);
  a1[2] = v5 + 1;
  if (!v2)
  {
    v17 = v1;
    v18 = 0;
    goto LABEL_24;
  }
  v6 = (((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v2;
  if (v1 >= v6 && v1 - v6 > 3)
  {
    v8 = *v5;
    v9 = (unsigned int *)(v2 + v6);
    a1[2] = v9 + 1;
    v10 = (((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v2;
    if (v1 >= v10 && v1 - v10 > 3)
    {
      a1[2] = (((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
      return v8 | ((unint64_t)*v9 << 32);
    }
  }
  *a1 = 0;
  a1[1] = 0;
  v13 = a1[3];
  if (v13)
  {
    if (v1)
    {
      v23 = a1;
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
      a1 = v23;
      v14 = *v23;
      v15 = v23[1];
      v16 = v23[3];
      *v23 = 0;
      v23[1] = 0;
      if (v16)
      {
        if (v15)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v14);
LABEL_31:
          a1 = v23;
        }
      }
    }
  }
LABEL_25:
  v21 = *a1;
  v22 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v22)
      (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v21);
    return 0;
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,int>>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned int *v5;
  unint64_t v6;
  uint64_t v8;
  unsigned int *v9;
  unint64_t v10;
  unint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;

  v1 = a1[1];
  v2 = *a1;
  v3 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v1 < v3 || v1 - v3 <= 3)
  {
    v17 = 0;
    v18 = 0;
    *a1 = 0;
    a1[1] = 0;
    v19 = a1[3];
    if (v19)
    {
      v24 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
        a1 = v24;
        v18 = *v24;
        v17 = v24[1];
      }
      else
      {
        v17 = 0;
        v18 = 0;
      }
    }
LABEL_24:
    *a1 = 0;
    a1[1] = 0;
    v20 = a1[3];
    if (v20 && v17)
    {
      v23 = a1;
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v20 + 16))(v20, v18, v17);
      goto LABEL_31;
    }
    goto LABEL_25;
  }
  v5 = (unsigned int *)(v2 + v3);
  a1[2] = v5 + 1;
  if (!v2)
  {
    v17 = v1;
    v18 = 0;
    goto LABEL_24;
  }
  v6 = (((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v2;
  if (v1 >= v6 && v1 - v6 > 3)
  {
    v8 = *v5;
    v9 = (unsigned int *)(v2 + v6);
    a1[2] = v9 + 1;
    v10 = (((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v2;
    if (v1 >= v10 && v1 - v10 > 3)
    {
      a1[2] = (((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
      return v8 | ((unint64_t)*v9 << 32);
    }
  }
  *a1 = 0;
  a1[1] = 0;
  v13 = a1[3];
  if (v13)
  {
    if (v1)
    {
      v23 = a1;
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
      a1 = v23;
      v14 = *v23;
      v15 = v23[1];
      v16 = v23[3];
      *v23 = 0;
      v23[1] = 0;
      if (v16)
      {
        if (v15)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v14);
LABEL_31:
          a1 = v23;
        }
      }
    }
  }
LABEL_25:
  v21 = *a1;
  v22 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v22)
      (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v21);
    return 0;
  }
  return result;
}

_QWORD *IPC::Decoder::decode<std::tuple<int,std::span<float const,18446744073709551615ul>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int *v8;
  int v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  char v18;

  v4 = a2[1];
  v5 = *a2;
  v6 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v4 < v6 || v4 - v6 <= 3)
  {
    v11 = 0;
    v12 = 0;
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v5, v4);
        v12 = *a2;
        v11 = a2[1];
      }
      else
      {
        v11 = 0;
        v12 = 0;
      }
    }
    goto LABEL_10;
  }
  v8 = (int *)(v5 + v6);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v11 = v4;
    v12 = 0;
LABEL_10:
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14 && v11)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v12);
    goto LABEL_11;
  }
  v9 = *v8;
  result = IPC::Decoder::decode<std::span<float const,18446744073709551615ul>>(a2, (uint64_t)&v17);
  if (v18)
  {
    *(_DWORD *)a1 = v9;
    *(_OWORD *)(a1 + 8) = v17;
    *(_BYTE *)(a1 + 24) = 1;
    return result;
  }
LABEL_11:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  v15 = *a2;
  v16 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (_QWORD *)a2[3];
  if (result)
  {
    if (v16)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v15);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<int,std::span<int const,18446744073709551615ul>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int *v8;
  int v9;
  unint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  char v18;

  v4 = a2[1];
  v5 = *a2;
  v6 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v4 < v6 || v4 - v6 <= 3)
  {
    v11 = 0;
    v12 = 0;
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v5, v4);
        v12 = *a2;
        v11 = a2[1];
      }
      else
      {
        v11 = 0;
        v12 = 0;
      }
    }
    goto LABEL_10;
  }
  v8 = (int *)(v5 + v6);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v11 = v4;
    v12 = 0;
LABEL_10:
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14 && v11)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v12);
    goto LABEL_11;
  }
  v9 = *v8;
  result = IPC::Decoder::decode<std::span<int const,18446744073709551615ul>>(a2, (uint64_t)&v17);
  if (v18)
  {
    *(_DWORD *)a1 = v9;
    *(_OWORD *)(a1 + 8) = v17;
    *(_BYTE *)(a1 + 24) = 1;
    return result;
  }
LABEL_11:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  v15 = *a2;
  v16 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v16)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v15);
  }
  return result;
}

_QWORD *IPC::Decoder::decode<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  int v10;
  unsigned int v11;
  _QWORD *result;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  char v22;

  v4 = (a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 < v7 || v6 - v7 <= 3)
  {
    v13 = 0;
    v14 = 0;
    *a2 = 0;
    a2[1] = 0;
    v15 = a2[3];
    if (v15)
    {
      if (!v6)
        goto LABEL_27;
LABEL_25:
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
      v14 = *a2;
      v13 = a2[1];
    }
LABEL_15:
    *a2 = 0;
    a2[1] = 0;
    v17 = a2[3];
    if (v17 && v13)
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v17 + 16))(v17, v14, v13);
    goto LABEL_16;
  }
  v9 = v5 + v7;
  a2[2] = v9 + 4;
  if (!v5)
    goto LABEL_26;
  if (v6 <= v9 + 4 - v5)
  {
    v13 = 0;
    v14 = 0;
    *a2 = 0;
    a2[1] = 0;
    v16 = a2[3];
    if (v16)
    {
      if (!v6)
      {
LABEL_27:
        v13 = 0;
        v14 = 0;
        goto LABEL_15;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
      v13 = 0;
      v20 = a2[1];
      v15 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      v14 = 0;
      if (v15)
      {
        if (v20)
          goto LABEL_25;
      }
    }
    goto LABEL_15;
  }
  v10 = *(_DWORD *)v9;
  a2[2] = v9 + 5;
  v11 = *(unsigned __int8 *)(v9 + 4);
  if (v11 >= 2)
  {
LABEL_26:
    v13 = v6;
    v14 = v5;
    goto LABEL_15;
  }
  result = IPC::Decoder::decode<std::span<float const,18446744073709551615ul>>(a2, (uint64_t)&v21);
  if (v22)
  {
    *(_DWORD *)a1 = v10;
    *(_BYTE *)(a1 + 4) = v11 != 0;
    *(_OWORD *)(a1 + 8) = v21;
    *(_BYTE *)(a1 + 24) = 1;
    return result;
  }
LABEL_16:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  v18 = *a2;
  v19 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = (_QWORD *)a2[3];
  if (result)
  {
    if (v19)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v18);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<unsigned int,int,unsigned int,int,int>>(uint64_t result, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int *v6;
  unint64_t v7;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  int v14;
  uint64_t v15;
  unint64_t v16;
  int v18;
  uint64_t v19;
  unint64_t v20;
  int *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;

  v2 = a2[1];
  v3 = *a2;
  v4 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v2 < v4 || v2 - v4 <= 3)
  {
    v28 = 0;
    v29 = 0;
    *a2 = 0;
    a2[1] = 0;
    v30 = a2[3];
    if (v30)
    {
      v35 = a2;
      v37 = result;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, v3);
        a2 = v35;
        result = v37;
        v29 = *v35;
        v28 = v35[1];
      }
      else
      {
        v28 = 0;
        v29 = 0;
      }
    }
LABEL_35:
    *a2 = 0;
    a2[1] = 0;
    v31 = a2[3];
    if (v31 && v28)
    {
      v34 = a2;
      v36 = result;
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v31 + 16))(v31, v29, v28);
      goto LABEL_41;
    }
    goto LABEL_36;
  }
  v6 = (int *)(v3 + v4);
  a2[2] = v6 + 1;
  if (!v3)
  {
    v28 = v2;
    v29 = 0;
    goto LABEL_35;
  }
  v7 = (((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v3;
  if (v2 >= v7 && v2 - v7 > 3)
  {
    v9 = *v6;
    a2[2] = v3 + v7 + 4;
    v11 = v3 + v7 + 7;
    v10 = *(_DWORD *)(v3 + v7);
    v12 = (v11 & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 >= v12 && v2 - v12 > 3)
    {
      a2[2] = v3 + v12 + 4;
      v15 = v3 + v12 + 7;
      v14 = *(_DWORD *)(v3 + v12);
      v16 = (v15 & 0xFFFFFFFFFFFFFFFCLL) - v3;
      if (v2 >= v16 && v2 - v16 > 3)
      {
        a2[2] = v3 + v16 + 4;
        v19 = v3 + v16 + 7;
        v18 = *(_DWORD *)(v3 + v16);
        v20 = (v19 & 0xFFFFFFFFFFFFFFFCLL) - v3;
        if (v2 >= v20 && v2 - v20 > 3)
        {
          v22 = (int *)(v3 + v20);
          v23 = *v22;
          a2[2] = v22 + 1;
          *(_DWORD *)result = v9;
          *(_DWORD *)(result + 4) = v10;
          *(_DWORD *)(result + 8) = v14;
          *(_DWORD *)(result + 12) = v18;
          *(_DWORD *)(result + 16) = v23;
          *(_BYTE *)(result + 20) = 1;
          return result;
        }
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
  v24 = a2[3];
  if (v24)
  {
    if (v2)
    {
      v34 = a2;
      v36 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, v3);
      a2 = v34;
      result = v36;
      v26 = *v34;
      v25 = v34[1];
      v27 = v34[3];
      *v34 = 0;
      v34[1] = 0;
      if (v27)
      {
        if (v25)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, v26);
LABEL_41:
          a2 = v34;
          result = v36;
        }
      }
    }
  }
LABEL_36:
  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 20) = 0;
  v33 = *a2;
  v32 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v32)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v33);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<int,std::span<unsigned int const,18446744073709551615ul>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int *v8;
  int v9;
  unint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  char v18;

  v4 = a2[1];
  v5 = *a2;
  v6 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v4 < v6 || v4 - v6 <= 3)
  {
    v11 = 0;
    v12 = 0;
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v5, v4);
        v12 = *a2;
        v11 = a2[1];
      }
      else
      {
        v11 = 0;
        v12 = 0;
      }
    }
    goto LABEL_10;
  }
  v8 = (int *)(v5 + v6);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v11 = v4;
    v12 = 0;
LABEL_10:
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14 && v11)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v12);
    goto LABEL_11;
  }
  v9 = *v8;
  result = IPC::Decoder::decode<std::span<unsigned int const,18446744073709551615ul>>(a2, (uint64_t)&v17);
  if (v18)
  {
    *(_DWORD *)a1 = v9;
    *(_OWORD *)(a1 + 8) = v17;
    *(_BYTE *)(a1 + 24) = 1;
    return result;
  }
LABEL_11:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  v15 = *a2;
  v16 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v16)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v15);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::span<int const,4ul>>(uint64_t *a1)
{
  unint64_t result;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;

  result = IPC::ArgumentCoder<std::span<int const,4ul>,void>::decode<IPC::Decoder>(a1);
  if (!v3)
  {
    v5 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v4 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::span<int const,4ul>,void>::decode<IPC::Decoder>(uint64_t *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = a1[1];
  v2 = *a1;
  v3 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v1 >= v3 && v1 - v3 > 0xF)
  {
    v5 = v2 + v3;
    a1[2] = v5 + 16;
    if (!v2)
    {
LABEL_11:
      v7 = 0;
      v6 = 0;
      return v6 | v7;
    }
    v6 = v5 & 0xFFFFFFFFFFFFFF00;
    v7 = v5;
  }
  else
  {
    v7 = 0;
    v6 = 0;
    *a1 = 0;
    a1[1] = 0;
    v8 = a1[3];
    if (v8)
    {
      if (v1)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      goto LABEL_11;
    }
  }
  return v6 | v7;
}

unint64_t IPC::Decoder::decode<std::tuple<std::span<unsigned int const,18446744073709551615ul>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  __int128 v8;
  char v9;

  result = IPC::Decoder::decode<std::span<unsigned int const,18446744073709551615ul>>(a1, (uint64_t)&v8);
  if (v9)
  {
    *(_OWORD *)a2 = v8;
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<WebCore::DestinationColorSpace>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  char v9;

  IPC::Decoder::decode<WebCore::DestinationColorSpace>(a1, (uint64_t)&v8);
  if (v9)
  {
    *(_QWORD *)a2 = v8;
    *(_BYTE *)(a2 + 8) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL17PrepareForDisplayEN6WebKit23RemoteGraphicsContextGLES8_FvONS2_9SemaphoreEONS_17CompletionHandlerIFvONS_13MachSendRightEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B4DD8;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL17PrepareForDisplayEN6WebKit23RemoteGraphicsContextGLES8_FvONS2_9SemaphoreEONS_17CompletionHandlerIFvONS_13MachSendRightEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B4DD8;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL17PrepareForDisplayEN6WebKit23RemoteGraphicsContextGLES8_FvONS2_9SemaphoreEONS_17CompletionHandlerIFvONS_13MachSendRightEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, unint64_t a2)
{
  IPC::Encoder *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v11, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v11);
  if (*(_BYTE *)(a1 + 16))
  {
    v5 = *(_QWORD *)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 8);
    v7 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v7 = 2823;
    *(_QWORD *)(v7 + 8) = v6;
    *(_QWORD *)(v7 + 528) = v7 + 16;
    *(_QWORD *)(v7 + 536) = v7 + 16;
    *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v7 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
    v11 = (IPC::Encoder *)v7;
    IPC::Encoder::addAttachment(v7, a2);
    IPC::Connection::sendMessageImpl(*(_QWORD *)(v5 + 32), (uint64_t *)&v11, 0, 0);
    result = v11;
    v11 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v8);
      return (IPC::Encoder *)WTF::fastFree(v9, v10);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9GetErrorsEN6WebKit23RemoteGraphicsContextGLES8_FvONS_17CompletionHandlerIFvNS_9OptionSetI13GCGLErrorCodeEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B4E00;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9GetErrorsEN6WebKit23RemoteGraphicsContextGLES8_FvONS_17CompletionHandlerIFvNS_9OptionSetI13GCGLErrorCodeEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B4E00;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9GetErrorsEN6WebKit23RemoteGraphicsContextGLES8_FvONS_17CompletionHandlerIFvNS_9OptionSetI13GCGLErrorCodeEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EE4callESC_(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  void *v19;
  WTF *v20;
  void *v21;
  IPC::Encoder *v22;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v22, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v22);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v2 + 112))
    goto LABEL_20;
  v10 = *(_QWORD *)(v2 + 48);
  v9 = *(_QWORD *)(v2 + 56);
  v7 = *(_QWORD *)(v9 + 8);
  v11 = v10 - 1;
  if (v10 != 1)
  {
    v8 = v7 - 256;
    if (v7 >= 0x100)
    {
      v7 = *(_QWORD *)(v9 + 16);
      if (!v10)
      {
LABEL_8:
        v11 = v8;
        goto LABEL_9;
      }
      if (v8 >= v11)
        goto LABEL_9;
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v7 < 0x100)
    goto LABEL_7;
  v11 = 0;
  v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
  v12 = v7 + 256;
  v13 = (v7 + 257) & 0xFFFFFFFFFFFFFFFELL;
  v14 = v13 >= v12;
  v15 = v13 - v12;
  if (v14)
  {
    v16 = v15 + 2;
    if (v15 <= 0xFFFFFFFFFFFFFFFDLL && v16 <= v11)
    {
      *(_WORD *)(v12 + v15) = 2823;
      if (v16 < v11)
      {
LABEL_16:
        *(_BYTE *)(v12 + v16) = a2;
        return result;
      }
      *(_WORD *)(v12 + v15) = 2821;
    }
  }
  else if (v11)
  {
    v16 = 0;
    goto LABEL_16;
  }
LABEL_20:
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 2823;
  *(_QWORD *)(v18 + 8) = v3;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  v22 = (IPC::Encoder *)v18;
  *IPC::Encoder::grow((IPC::Encoder *)v18, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v22, 0, 0);
  result = v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL30DrawSurfaceBufferToImageBufferEN6WebKit23RemoteGraphicsContextGLES8_FvN7WebCore30GraphicsContextGLSurfaceBufferENS_23ObjectIdentifierGenericINS9_31RenderingResourceIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B4E28;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL30DrawSurfaceBufferToImageBufferEN6WebKit23RemoteGraphicsContextGLES8_FvN7WebCore30GraphicsContextGLSurfaceBufferENS_23ObjectIdentifierGenericINS9_31RenderingResourceIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B4E28;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL30DrawSurfaceBufferToImageBufferEN6WebKit23RemoteGraphicsContextGLES8_FvN7WebCore30GraphicsContextGLSurfaceBufferENS_23ObjectIdentifierGenericINS9_31RenderingResourceIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  IPC::Encoder *result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  WTF *v17;
  void *v18;
  IPC::Encoder *v19;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v19, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v19);
  v6 = *(unsigned __int8 *)(a1 + 16);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_8;
  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v1 + 112))
  {
    v7 = *(_QWORD *)(v1 + 48);
    v6 = *(_QWORD *)(v1 + 56);
    v5 = *(_QWORD *)(v6 + 8);
    v8 = v7 - 1;
    if (v7 != 1)
    {
      v9 = v5 >= 0x100;
      v5 -= 256;
      if (v9)
      {
        v6 = *(_QWORD *)(v6 + 16);
        if (!v7)
        {
LABEL_9:
          v8 = v5;
LABEL_10:
          v10 = v6 + 256;
          v11 = (v6 + 257) & 0xFFFFFFFFFFFFFFFELL;
          if (v11 < v6 + 256)
          {
            if (v8)
              return result;
            goto LABEL_17;
          }
          goto LABEL_11;
        }
        if (v5 >= v8)
          goto LABEL_10;
      }
LABEL_8:
      __break(1u);
      goto LABEL_9;
    }
    if (v5 <= 0xFF)
      goto LABEL_8;
    v6 = *(_QWORD *)(v6 + 16);
    v10 = v6 + 256;
    v11 = (v6 + 257) & 0xFFFFFFFFFFFFFFFELL;
    if (v11 >= v6 + 256)
    {
      v8 = 0;
LABEL_11:
      v12 = v11 - v10;
      if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v12 + 2 <= v8)
      {
        v14 = v6 + 256;
        *(_WORD *)(v14 + v12) = 2823;
        if (v8)
          return result;
        *(_WORD *)(v14 + v12) = 2821;
      }
    }
  }
LABEL_17:
  v15 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v15 = 2823;
  *(_QWORD *)(v15 + 8) = v2;
  *(_QWORD *)(v15 + 528) = v15 + 16;
  *(_QWORD *)(v15 + 536) = v15 + 16;
  *(_OWORD *)(v15 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v15 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v15);
  v19 = (IPC::Encoder *)v15;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v1 + 32), (uint64_t *)&v19, 0, 0);
  result = v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v16);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL25SurfaceBufferToVideoFrameEN6WebKit23RemoteGraphicsContextGLES8_FvN7WebCore30GraphicsContextGLSurfaceBufferEONS_17CompletionHandlerIFvONSt3__18optionalINS7_31RemoteVideoFrameProxyPropertiesEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B4E50;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL25SurfaceBufferToVideoFrameEN6WebKit23RemoteGraphicsContextGLES8_FvN7WebCore30GraphicsContextGLSurfaceBufferEONS_17CompletionHandlerIFvONSt3__18optionalINS7_31RemoteVideoFrameProxyPropertiesEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B4E50;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL25SurfaceBufferToVideoFrameEN6WebKit23RemoteGraphicsContextGLES8_FvN7WebCore30GraphicsContextGLSurfaceBufferEONS_17CompletionHandlerIFvONSt3__18optionalINS7_31RemoteVideoFrameProxyPropertiesEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EE4callESG_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  IPC::Encoder *v11;
  char *v12;
  unint64_t v13;
  IPC::Encoder *result;
  uint64_t v16;
  void *v17;
  WTF *v18;
  void *v19;
  IPC::Encoder *v20;
  unint64_t v21;
  unint64_t v22;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v20, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v20);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_8;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 112))
  {
    v8 = *(_QWORD *)(v2 + 48);
    v6 = *(unint64_t **)(v2 + 56);
    v7 = v6[1];
    v9 = v8 - 1;
    if (v8 == 1)
    {
      if (v7 >= 0x100)
      {
        v9 = 0;
        v6 = (unint64_t *)v6[2];
LABEL_10:
        v11 = (IPC::Encoder *)(v6 + 32);
        v20 = v11;
        v21 = v9;
        v22 = 0;
        v12 = (char *)(((unint64_t)v6 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v13 = v12 - (char *)v11;
        if (v12 >= (char *)v11)
        {
          if (v13 <= 0xFFFFFFFFFFFFFFFDLL && v13 + 2 <= v9)
          {
            *(_WORD *)v12 = 2823;
            v22 = v13 + 2;
            result = (IPC::Encoder *)IPC::ArgumentCoder<std::optional<WebKit::RemoteVideoFrameProxyProperties>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::RemoteVideoFrameProxyProperties>&>((uint64_t *)&v20, a2);
            if (v21)
              return result;
            *(_WORD *)((char *)v11 + v13) = 2821;
            goto LABEL_17;
          }
          v21 = 0;
        }
        result = (IPC::Encoder *)IPC::ArgumentCoder<std::optional<WebKit::RemoteVideoFrameProxyProperties>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::RemoteVideoFrameProxyProperties>&>((uint64_t *)&v20, a2);
        if (v21)
          return result;
        goto LABEL_17;
      }
    }
    else
    {
      v10 = v7 >= 0x100;
      v7 -= 256;
      if (v10)
      {
        v6 = (unint64_t *)v6[2];
        if (!v8)
        {
LABEL_9:
          v9 = v7;
          goto LABEL_10;
        }
        if (v7 >= v9)
          goto LABEL_10;
      }
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
LABEL_17:
  v16 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v16 = 2823;
  *(_QWORD *)(v16 + 8) = v3;
  *(_QWORD *)(v16 + 528) = v16 + 16;
  *(_QWORD *)(v16 + 536) = v16 + 16;
  *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v16 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
  v20 = (IPC::Encoder *)v16;
  IPC::ArgumentCoder<std::optional<WebKit::RemoteVideoFrameProxyProperties>,void>::encode<IPC::Encoder,std::optional<WebKit::RemoteVideoFrameProxyProperties>>((IPC::Encoder *)v16, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v20, 0, 0);
  result = v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v17);
    return (IPC::Encoder *)WTF::fastFree(v18, v19);
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::optional<WebKit::RemoteVideoFrameProxyProperties>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::RemoteVideoFrameProxyProperties>&>(uint64_t *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  id v4;

  v3 = result[1];
  v2 = result[2];
  if (*(_BYTE *)(a2 + 56))
  {
    if (v2 >= v3)
    {
      result[1] = 0;
      return IPC::ArgumentCoder<WebKit::RemoteVideoFrameProxyProperties,void>::encode(result, a2);
    }
    *(_BYTE *)(*result + v2) = 1;
    result[2] = v2 + 1;
    if (*(_BYTE *)(a2 + 56))
      return IPC::ArgumentCoder<WebKit::RemoteVideoFrameProxyProperties,void>::encode(result, a2);
    v4 = std::__throw_bad_optional_access[abi:sn180100]();
    return (uint64_t *)_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL25CopyTextureFromVideoFrameEN6WebKit23RemoteGraphicsContextGLES8_FvONS7_16SharedVideoFrameEjjijjjbbONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(v4);
  }
  else if (v2 >= v3)
  {
    result[1] = 0;
  }
  else
  {
    *(_BYTE *)(*result + v2) = 0;
    result[2] = v2 + 1;
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL25CopyTextureFromVideoFrameEN6WebKit23RemoteGraphicsContextGLES8_FvONS7_16SharedVideoFrameEjjijjjbbONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B4E78;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL25CopyTextureFromVideoFrameEN6WebKit23RemoteGraphicsContextGLES8_FvONS7_16SharedVideoFrameEjjijjjbbONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B4E78;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL25CopyTextureFromVideoFrameEN6WebKit23RemoteGraphicsContextGLES8_FvONS7_16SharedVideoFrameEjjijjjbbONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  void *v19;
  WTF *v20;
  void *v21;
  IPC::Encoder *v22;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v22, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v22);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v2 + 112))
    goto LABEL_20;
  v10 = *(_QWORD *)(v2 + 48);
  v9 = *(_QWORD *)(v2 + 56);
  v7 = *(_QWORD *)(v9 + 8);
  v11 = v10 - 1;
  if (v10 != 1)
  {
    v8 = v7 - 256;
    if (v7 >= 0x100)
    {
      v7 = *(_QWORD *)(v9 + 16);
      if (!v10)
      {
LABEL_8:
        v11 = v8;
        goto LABEL_9;
      }
      if (v8 >= v11)
        goto LABEL_9;
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v7 < 0x100)
    goto LABEL_7;
  v11 = 0;
  v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
  v12 = v7 + 256;
  v13 = (v7 + 257) & 0xFFFFFFFFFFFFFFFELL;
  v14 = v13 >= v12;
  v15 = v13 - v12;
  if (v14)
  {
    v16 = v15 + 2;
    if (v15 <= 0xFFFFFFFFFFFFFFFDLL && v16 <= v11)
    {
      *(_WORD *)(v12 + v15) = 2823;
      if (v16 < v11)
      {
LABEL_16:
        *(_BYTE *)(v12 + v16) = a2;
        return result;
      }
      *(_WORD *)(v12 + v15) = 2821;
    }
  }
  else if (v11)
  {
    v16 = 0;
    goto LABEL_16;
  }
LABEL_20:
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 2823;
  *(_QWORD *)(v18 + 8) = v3;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  v22 = (IPC::Encoder *)v18;
  *IPC::Encoder::grow((IPC::Encoder *)v18, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v22, 0, 0);
  result = v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL22GetBufferSubDataInlineEN6WebKit23RemoteGraphicsContextGLES8_FvjymONS_17CompletionHandlerIFvNSt3__14spanIKhLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B4EA0;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL22GetBufferSubDataInlineEN6WebKit23RemoteGraphicsContextGLES8_FvjymONS_17CompletionHandlerIFvNSt3__14spanIKhLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B4EA0;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL22GetBufferSubDataInlineEN6WebKit23RemoteGraphicsContextGLES8_FvjymONS_17CompletionHandlerIFvNSt3__14spanIKhLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  IPC::Encoder *v13;
  char *v14;
  unint64_t v15;
  IPC::Encoder *result;
  uint64_t v18;
  void *v19;
  WTF *v20;
  void *v21;
  IPC::Encoder *v22;
  unint64_t v23;
  unint64_t v24;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v22, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v22);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_8;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v3 + 112))
  {
    v10 = *(_QWORD *)(v3 + 48);
    v8 = *(unint64_t **)(v3 + 56);
    v9 = v8[1];
    v11 = v10 - 1;
    if (v10 == 1)
    {
      if (v9 >= 0x100)
      {
        v11 = 0;
        v8 = (unint64_t *)v8[2];
LABEL_10:
        v13 = (IPC::Encoder *)(v8 + 32);
        v22 = v13;
        v23 = v11;
        v24 = 0;
        v14 = (char *)(((unint64_t)v8 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v15 = v14 - (char *)v13;
        if (v14 >= (char *)v13)
        {
          if (v15 <= 0xFFFFFFFFFFFFFFFDLL && v15 + 2 <= v11)
          {
            *(_WORD *)v14 = 2823;
            v24 = v15 + 2;
            result = (IPC::Encoder *)IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v22, a2, a3);
            if (v23)
              return result;
            *(_WORD *)((char *)v13 + v15) = 2821;
            goto LABEL_17;
          }
          v23 = 0;
        }
        result = (IPC::Encoder *)IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v22, a2, a3);
        if (v23)
          return result;
        goto LABEL_17;
      }
    }
    else
    {
      v12 = v9 >= 0x100;
      v9 -= 256;
      if (v12)
      {
        v8 = (unint64_t *)v8[2];
        if (!v10)
        {
LABEL_9:
          v11 = v9;
          goto LABEL_10;
        }
        if (v9 >= v11)
          goto LABEL_10;
      }
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
LABEL_17:
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 2823;
  *(_QWORD *)(v18 + 8) = v4;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  v22 = (IPC::Encoder *)v18;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v18, a2, a3);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v3 + 32), (uint64_t *)&v22, 0, 0);
  result = v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL28GetBufferSubDataSharedMemoryEN6WebKit23RemoteGraphicsContextGLES8_FvjymN7WebCore18SharedMemoryHandleEONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B4EC8;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL28GetBufferSubDataSharedMemoryEN6WebKit23RemoteGraphicsContextGLES8_FvjymN7WebCore18SharedMemoryHandleEONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B4EC8;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL28GetBufferSubDataSharedMemoryEN6WebKit23RemoteGraphicsContextGLES8_FvjymN7WebCore18SharedMemoryHandleEONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  void *v19;
  WTF *v20;
  void *v21;
  IPC::Encoder *v22;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v22, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v22);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v2 + 112))
    goto LABEL_20;
  v10 = *(_QWORD *)(v2 + 48);
  v9 = *(_QWORD *)(v2 + 56);
  v7 = *(_QWORD *)(v9 + 8);
  v11 = v10 - 1;
  if (v10 != 1)
  {
    v8 = v7 - 256;
    if (v7 >= 0x100)
    {
      v7 = *(_QWORD *)(v9 + 16);
      if (!v10)
      {
LABEL_8:
        v11 = v8;
        goto LABEL_9;
      }
      if (v8 >= v11)
        goto LABEL_9;
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v7 < 0x100)
    goto LABEL_7;
  v11 = 0;
  v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
  v12 = v7 + 256;
  v13 = (v7 + 257) & 0xFFFFFFFFFFFFFFFELL;
  v14 = v13 >= v12;
  v15 = v13 - v12;
  if (v14)
  {
    v16 = v15 + 2;
    if (v15 <= 0xFFFFFFFFFFFFFFFDLL && v16 <= v11)
    {
      *(_WORD *)(v12 + v15) = 2823;
      if (v16 < v11)
      {
LABEL_16:
        *(_BYTE *)(v12 + v16) = a2;
        return result;
      }
      *(_WORD *)(v12 + v15) = 2821;
    }
  }
  else if (v11)
  {
    v16 = 0;
    goto LABEL_16;
  }
LABEL_20:
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 2823;
  *(_QWORD *)(v18 + 8) = v3;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  v22 = (IPC::Encoder *)v18;
  *IPC::Encoder::grow((IPC::Encoder *)v18, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v22, 0, 0);
  result = v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL16ReadPixelsInlineEN6WebKit23RemoteGraphicsContextGLES8_FvN7WebCore7IntRectEjjbONS_17CompletionHandlerIFvNSt3__18optionalINS9_7IntSizeEEENSC_4spanIKhLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_SI_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B4EF0;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL16ReadPixelsInlineEN6WebKit23RemoteGraphicsContextGLES8_FvN7WebCore7IntRectEjjbONS_17CompletionHandlerIFvNSt3__18optionalINS9_7IntSizeEEENSC_4spanIKhLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_SI_EED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B4EF0;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL16ReadPixelsInlineEN6WebKit23RemoteGraphicsContextGLES8_FvN7WebCore7IntRectEjjbONS_17CompletionHandlerIFvNSt3__18optionalINS9_7IntSizeEEENSC_4spanIKhLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_SI_EE4callESF_SI_(uint64_t a1, uint64_t a2, int a3, const void *a4, size_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  char *v15;
  char *v16;
  unint64_t v17;
  IPC::Encoder *result;
  unint64_t v20;
  uint64_t v22;
  void *v23;
  WTF *v24;
  void *v25;
  uint64_t v26;
  int v27;
  IPC::Encoder *v28;
  unint64_t v29;
  unint64_t v30;

  v26 = a2;
  v27 = a3;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v28, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v28);
  v11 = (char *)*(unsigned __int8 *)(a1 + 16);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_8;
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v5 + 112))
  {
LABEL_24:
    v22 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v22 = 2823;
    *(_QWORD *)(v22 + 8) = v6;
    *(_QWORD *)(v22 + 528) = v22 + 16;
    *(_QWORD *)(v22 + 536) = v22 + 16;
    *(_OWORD *)(v22 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v22 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v22);
    v28 = (IPC::Encoder *)v22;
    IPC::ArgumentCoder<std::optional<WebCore::IntSize>,void>::encode<IPC::Encoder,std::optional<WebCore::IntSize>>((IPC::Encoder *)v22, (uint64_t)&v26);
    IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v22, a4, a5);
    IPC::Connection::sendMessageImpl(*(_QWORD *)(v5 + 32), (uint64_t *)&v28, 0, 0);
    result = v28;
    v28 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v23);
      return (IPC::Encoder *)WTF::fastFree(v24, v25);
    }
    return result;
  }
  v12 = *(_QWORD *)(v5 + 48);
  v11 = *(char **)(v5 + 56);
  v10 = *((_QWORD *)v11 + 1);
  v13 = v12 - 1;
  if (v12 != 1)
  {
    v14 = v10 >= 0x100;
    v10 -= 256;
    if (v14)
    {
      v11 = (char *)*((_QWORD *)v11 + 2);
      if (!v12)
      {
LABEL_9:
        v13 = v10;
        goto LABEL_10;
      }
      if (v10 >= v13)
        goto LABEL_10;
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v10 < 0x100)
    goto LABEL_8;
  v13 = 0;
  v11 = (char *)*((_QWORD *)v11 + 2);
LABEL_10:
  v15 = v11 + 256;
  v28 = (IPC::Encoder *)(v11 + 256);
  v29 = v13;
  v30 = 0;
  v16 = (char *)((unint64_t)(v11 + 257) & 0xFFFFFFFFFFFFFFFELL);
  v14 = v16 >= v11 + 256;
  v17 = v16 - (v11 + 256);
  if (v14)
  {
    if (v17 > 0xFFFFFFFFFFFFFFFDLL || v17 + 2 > v13)
    {
      v29 = 0;
    }
    else
    {
      *(_WORD *)&v15[v17] = 2823;
      v30 = v17 + 2;
    }
  }
  IPC::ArgumentCoder<std::optional<WebCore::IntSize>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebCore::IntSize>&>((uint64_t *)&v28, (uint64_t)&v26);
  result = (IPC::Encoder *)IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v28, a4, a5);
  if (!v29)
  {
    v20 = v16 - v15;
    if (v16 >= v15 && v20 <= 0xFFFFFFFFFFFFFFFDLL && v20 + 2 <= v13)
      *(_WORD *)v16 = 2821;
    goto LABEL_24;
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::optional<WebCore::IntSize>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebCore::IntSize>&>(uint64_t *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  id v4;

  v3 = result[1];
  v2 = result[2];
  if (*(_BYTE *)(a2 + 8))
  {
    if (v2 >= v3)
    {
      result[1] = 0;
      return IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(result, (_DWORD *)a2);
    }
    *(_BYTE *)(*result + v2) = 1;
    result[2] = v2 + 1;
    if (*(_BYTE *)(a2 + 8))
      return IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(result, (_DWORD *)a2);
    v4 = std::__throw_bad_optional_access[abi:sn180100]();
    return (uint64_t *)IPC::ArgumentCoder<std::optional<WebCore::IntSize>,void>::encode<IPC::Encoder,std::optional<WebCore::IntSize>>(v4);
  }
  else if (v2 >= v3)
  {
    result[1] = 0;
  }
  else
  {
    *(_BYTE *)(*result + v2) = 0;
    result[2] = v2 + 1;
  }
  return result;
}

char *IPC::ArgumentCoder<std::optional<WebCore::IntSize>,void>::encode<IPC::Encoder,std::optional<WebCore::IntSize>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  id v6;

  v4 = *(unsigned __int8 *)(a2 + 8);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 8))
    {
      return IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode(a1, (_DWORD *)a2);
    }
    else
    {
      v6 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL22ReadPixelsSharedMemoryEN6WebKit23RemoteGraphicsContextGLES8_FvN7WebCore7IntRectEjjbNS9_18SharedMemoryHandleEONS_17CompletionHandlerIFvNSt3__18optionalINS9_7IntSizeEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED1Ev(v6);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL22ReadPixelsSharedMemoryEN6WebKit23RemoteGraphicsContextGLES8_FvN7WebCore7IntRectEjjbNS9_18SharedMemoryHandleEONS_17CompletionHandlerIFvNSt3__18optionalINS9_7IntSizeEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B4F18;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL22ReadPixelsSharedMemoryEN6WebKit23RemoteGraphicsContextGLES8_FvN7WebCore7IntRectEjjbNS9_18SharedMemoryHandleEONS_17CompletionHandlerIFvNSt3__18optionalINS9_7IntSizeEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B4F18;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL22ReadPixelsSharedMemoryEN6WebKit23RemoteGraphicsContextGLES8_FvN7WebCore7IntRectEjjbNS9_18SharedMemoryHandleEONS_17CompletionHandlerIFvNSt3__18optionalINS9_7IntSizeEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EE4callESG_(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  IPC::Encoder *v11;
  char *v12;
  unint64_t v13;
  IPC::Encoder *result;
  uint64_t v16;
  void *v17;
  WTF *v18;
  void *v19;
  uint64_t v20;
  int v21;
  IPC::Encoder *v22;
  unint64_t v23;
  unint64_t v24;

  v20 = a2;
  v21 = a3;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v22, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v22);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_8;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v3 + 112))
  {
    v8 = *(_QWORD *)(v3 + 48);
    v6 = *(unint64_t **)(v3 + 56);
    v7 = v6[1];
    v9 = v8 - 1;
    if (v8 == 1)
    {
      if (v7 >= 0x100)
      {
        v9 = 0;
        v6 = (unint64_t *)v6[2];
LABEL_10:
        v11 = (IPC::Encoder *)(v6 + 32);
        v22 = v11;
        v23 = v9;
        v24 = 0;
        v12 = (char *)(((unint64_t)v6 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v13 = v12 - (char *)v11;
        if (v12 >= (char *)v11)
        {
          if (v13 <= 0xFFFFFFFFFFFFFFFDLL && v13 + 2 <= v9)
          {
            *(_WORD *)v12 = 2823;
            v24 = v13 + 2;
            result = (IPC::Encoder *)IPC::ArgumentCoder<std::optional<WebCore::IntSize>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebCore::IntSize>&>((uint64_t *)&v22, (uint64_t)&v20);
            if (v23)
              return result;
            *(_WORD *)((char *)v11 + v13) = 2821;
            goto LABEL_17;
          }
          v23 = 0;
        }
        result = (IPC::Encoder *)IPC::ArgumentCoder<std::optional<WebCore::IntSize>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebCore::IntSize>&>((uint64_t *)&v22, (uint64_t)&v20);
        if (v23)
          return result;
        goto LABEL_17;
      }
    }
    else
    {
      v10 = v7 >= 0x100;
      v7 -= 256;
      if (v10)
      {
        v6 = (unint64_t *)v6[2];
        if (!v8)
        {
LABEL_9:
          v9 = v7;
          goto LABEL_10;
        }
        if (v7 >= v9)
          goto LABEL_10;
      }
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
LABEL_17:
  v16 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v16 = 2823;
  *(_QWORD *)(v16 + 8) = v4;
  *(_QWORD *)(v16 + 528) = v16 + 16;
  *(_QWORD *)(v16 + 536) = v16 + 16;
  *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v16 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
  v22 = (IPC::Encoder *)v16;
  IPC::ArgumentCoder<std::optional<WebCore::IntSize>,void>::encode<IPC::Encoder,std::optional<WebCore::IntSize>>((IPC::Encoder *)v16, (uint64_t)&v20);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v3 + 32), (uint64_t *)&v22, 0, 0);
  result = v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v17);
    return (IPC::Encoder *)WTF::fastFree(v18, v19);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL22CheckFramebufferStatusEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvjEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJjEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B4F40;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL22CheckFramebufferStatusEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvjEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJjEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B4F40;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL22CheckFramebufferStatusEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvjEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJjEE4callEj(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _WORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  _DWORD *v18;
  BOOL v20;
  unint64_t v21;
  uint64_t v23;
  void *v24;
  WTF *v25;
  void *v26;
  IPC::Encoder *v27;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v27, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v27);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 112))
  {
    v10 = *(_QWORD *)(v2 + 48);
    v9 = *(_QWORD *)(v2 + 56);
    v7 = *(_QWORD *)(v9 + 8);
    v11 = v10 - 1;
    if (v10 == 1)
    {
      if (v7 >= 0x100)
      {
        v11 = 0;
        v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
        v12 = v7 + 256;
        v13 = (_WORD *)((v7 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v14 = (unint64_t)v13 - v12;
        if ((unint64_t)v13 < v12)
        {
          v15 = 0;
        }
        else
        {
          v15 = v14 + 2;
          if (v14 > 0xFFFFFFFFFFFFFFFDLL || v15 > v11)
          {
            v17 = 0;
            v15 = 0;
LABEL_16:
            v18 = (_DWORD *)((v12 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL);
            if ((unint64_t)v18 >= v12 + v15)
            {
              if ((unint64_t)v18 - v12 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)v18 - v12 + 4 > v17)
              {
LABEL_23:
                v20 = (unint64_t)v13 >= v12;
                v21 = (unint64_t)v13 - v12;
                if (v20 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11)
                  *(_WORD *)(v12 + v21) = 2821;
                goto LABEL_30;
              }
              *v18 = a2;
            }
            if (v17)
              return result;
            goto LABEL_23;
          }
          *v13 = 2823;
        }
        v17 = v11;
        goto LABEL_16;
      }
    }
    else
    {
      v8 = v7 - 256;
      if (v7 >= 0x100)
      {
        v7 = *(_QWORD *)(v9 + 16);
        if (!v10)
        {
LABEL_8:
          v11 = v8;
          goto LABEL_9;
        }
        if (v8 >= v11)
          goto LABEL_9;
      }
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
LABEL_30:
  v23 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v23 = 2823;
  *(_QWORD *)(v23 + 8) = v3;
  *(_QWORD *)(v23 + 528) = v23 + 16;
  *(_QWORD *)(v23 + 536) = v23 + 16;
  *(_OWORD *)(v23 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v23 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v23);
  v27 = (IPC::Encoder *)v23;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v23, 4uLL, 4) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v27, 0, 0);
  result = v27;
  v27 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v24);
    return (IPC::Encoder *)WTF::fastFree(v25, v26);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL15GetActiveAttribEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvbON7WebCore27GraphicsContextGLActiveInfoEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSC_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B4F68;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL15GetActiveAttribEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvbON7WebCore27GraphicsContextGLActiveInfoEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSC_EED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B4F68;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL15GetActiveAttribEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvbON7WebCore27GraphicsContextGLActiveInfoEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSC_EE4callEbSC_(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  IPC::Encoder *result;
  unint64_t v20;
  uint64_t v22;
  void *v23;
  WTF *v24;
  void *v25;
  IPC::Encoder *v26;
  unint64_t v27;
  unint64_t v28;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v26, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v26);
  v9 = (_QWORD *)*(unsigned __int8 *)(a1 + 16);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_8;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v3 + 112))
  {
LABEL_26:
    v22 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v22 = 2823;
    *(_QWORD *)(v22 + 8) = v4;
    *(_QWORD *)(v22 + 528) = v22 + 16;
    *(_QWORD *)(v22 + 536) = v22 + 16;
    *(_OWORD *)(v22 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v22 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v22);
    v26 = (IPC::Encoder *)v22;
    *IPC::Encoder::grow((IPC::Encoder *)v22, 1uLL, 1) = a2;
    IPC::ArgumentCoder<WebCore::GraphicsContextGLActiveInfo,void>::encode((IPC::Encoder *)v22, a3);
    IPC::Connection::sendMessageImpl(*(_QWORD *)(v3 + 32), (uint64_t *)&v26, 0, 0);
    result = v26;
    v26 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v23);
      return (IPC::Encoder *)WTF::fastFree(v24, v25);
    }
    return result;
  }
  v10 = *(_QWORD *)(v3 + 48);
  v9 = *(_QWORD **)(v3 + 56);
  v8 = v9[1];
  v11 = v10 - 1;
  if (v10 != 1)
  {
    v12 = v8 >= 0x100;
    v8 -= 256;
    if (v12)
    {
      v9 = (_QWORD *)v9[2];
      if (!v10)
      {
LABEL_9:
        v11 = v8;
        goto LABEL_10;
      }
      if (v8 >= v11)
        goto LABEL_10;
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v8 < 0x100)
    goto LABEL_8;
  v11 = 0;
  v9 = (_QWORD *)v9[2];
LABEL_10:
  v13 = v9 + 32;
  v26 = (IPC::Encoder *)(v9 + 32);
  v27 = v11;
  v28 = 0;
  v14 = (char *)(((unint64_t)v9 + 257) & 0xFFFFFFFFFFFFFFFELL);
  v15 = v14 - (char *)(v9 + 32);
  if (v14 < (char *)v9 + 256)
  {
    v16 = 0;
    goto LABEL_16;
  }
  v16 = v15 + 2;
  if (v15 <= 0xFFFFFFFFFFFFFFFDLL && v16 <= v11)
  {
    *(_WORD *)((char *)v13 + v15) = 2823;
    v28 = v15 + 2;
LABEL_16:
    v18 = v11;
    goto LABEL_17;
  }
  v18 = 0;
  v16 = 0;
  v27 = 0;
LABEL_17:
  if (v16 >= v18)
  {
    v27 = 0;
  }
  else
  {
    *((_BYTE *)v13 + v16) = a2;
    v28 = v16 + 1;
  }
  result = (IPC::Encoder *)IPC::ArgumentCoder<WebCore::GraphicsContextGLActiveInfo,void>::encode(&v26, (uint64_t)a3);
  if (!v27)
  {
    v20 = v14 - (char *)v13;
    if (v14 >= (char *)v13 && v20 <= 0xFFFFFFFFFFFFFFFDLL && v20 + 2 <= v11)
      *(_WORD *)v14 = 2821;
    goto LABEL_26;
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL16GetActiveUniformEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvbON7WebCore27GraphicsContextGLActiveInfoEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSC_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B4F90;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL16GetActiveUniformEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvbON7WebCore27GraphicsContextGLActiveInfoEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSC_EED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B4F90;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL16GetActiveUniformEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvbON7WebCore27GraphicsContextGLActiveInfoEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSC_EE4callEbSC_(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  IPC::Encoder *result;
  unint64_t v20;
  uint64_t v22;
  void *v23;
  WTF *v24;
  void *v25;
  IPC::Encoder *v26;
  unint64_t v27;
  unint64_t v28;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v26, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v26);
  v9 = (_QWORD *)*(unsigned __int8 *)(a1 + 16);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_8;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v3 + 112))
  {
LABEL_26:
    v22 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v22 = 2823;
    *(_QWORD *)(v22 + 8) = v4;
    *(_QWORD *)(v22 + 528) = v22 + 16;
    *(_QWORD *)(v22 + 536) = v22 + 16;
    *(_OWORD *)(v22 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v22 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v22);
    v26 = (IPC::Encoder *)v22;
    *IPC::Encoder::grow((IPC::Encoder *)v22, 1uLL, 1) = a2;
    IPC::ArgumentCoder<WebCore::GraphicsContextGLActiveInfo,void>::encode((IPC::Encoder *)v22, a3);
    IPC::Connection::sendMessageImpl(*(_QWORD *)(v3 + 32), (uint64_t *)&v26, 0, 0);
    result = v26;
    v26 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v23);
      return (IPC::Encoder *)WTF::fastFree(v24, v25);
    }
    return result;
  }
  v10 = *(_QWORD *)(v3 + 48);
  v9 = *(_QWORD **)(v3 + 56);
  v8 = v9[1];
  v11 = v10 - 1;
  if (v10 != 1)
  {
    v12 = v8 >= 0x100;
    v8 -= 256;
    if (v12)
    {
      v9 = (_QWORD *)v9[2];
      if (!v10)
      {
LABEL_9:
        v11 = v8;
        goto LABEL_10;
      }
      if (v8 >= v11)
        goto LABEL_10;
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v8 < 0x100)
    goto LABEL_8;
  v11 = 0;
  v9 = (_QWORD *)v9[2];
LABEL_10:
  v13 = v9 + 32;
  v26 = (IPC::Encoder *)(v9 + 32);
  v27 = v11;
  v28 = 0;
  v14 = (char *)(((unint64_t)v9 + 257) & 0xFFFFFFFFFFFFFFFELL);
  v15 = v14 - (char *)(v9 + 32);
  if (v14 < (char *)v9 + 256)
  {
    v16 = 0;
    goto LABEL_16;
  }
  v16 = v15 + 2;
  if (v15 <= 0xFFFFFFFFFFFFFFFDLL && v16 <= v11)
  {
    *(_WORD *)((char *)v13 + v15) = 2823;
    v28 = v15 + 2;
LABEL_16:
    v18 = v11;
    goto LABEL_17;
  }
  v18 = 0;
  v16 = 0;
  v27 = 0;
LABEL_17:
  if (v16 >= v18)
  {
    v27 = 0;
  }
  else
  {
    *((_BYTE *)v13 + v16) = a2;
    v28 = v16 + 1;
  }
  result = (IPC::Encoder *)IPC::ArgumentCoder<WebCore::GraphicsContextGLActiveInfo,void>::encode(&v26, (uint64_t)a3);
  if (!v27)
  {
    v20 = v14 - (char *)v13;
    if (v14 >= (char *)v13 && v20 <= 0xFFFFFFFFFFFFFFFDLL && v20 + 2 <= v11)
      *(_WORD *)v14 = 2821;
    goto LABEL_26;
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL17GetAttribLocationEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_6StringEONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B4FB8;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL17GetAttribLocationEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_6StringEONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B4FB8;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL17GetAttribLocationEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_6StringEONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEE4callEi(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _WORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  _DWORD *v18;
  BOOL v20;
  unint64_t v21;
  uint64_t v23;
  void *v24;
  WTF *v25;
  void *v26;
  IPC::Encoder *v27;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v27, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v27);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 112))
  {
    v10 = *(_QWORD *)(v2 + 48);
    v9 = *(_QWORD *)(v2 + 56);
    v7 = *(_QWORD *)(v9 + 8);
    v11 = v10 - 1;
    if (v10 == 1)
    {
      if (v7 >= 0x100)
      {
        v11 = 0;
        v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
        v12 = v7 + 256;
        v13 = (_WORD *)((v7 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v14 = (unint64_t)v13 - v12;
        if ((unint64_t)v13 < v12)
        {
          v15 = 0;
        }
        else
        {
          v15 = v14 + 2;
          if (v14 > 0xFFFFFFFFFFFFFFFDLL || v15 > v11)
          {
            v17 = 0;
            v15 = 0;
LABEL_16:
            v18 = (_DWORD *)((v12 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL);
            if ((unint64_t)v18 >= v12 + v15)
            {
              if ((unint64_t)v18 - v12 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)v18 - v12 + 4 > v17)
              {
LABEL_23:
                v20 = (unint64_t)v13 >= v12;
                v21 = (unint64_t)v13 - v12;
                if (v20 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11)
                  *(_WORD *)(v12 + v21) = 2821;
                goto LABEL_30;
              }
              *v18 = a2;
            }
            if (v17)
              return result;
            goto LABEL_23;
          }
          *v13 = 2823;
        }
        v17 = v11;
        goto LABEL_16;
      }
    }
    else
    {
      v8 = v7 - 256;
      if (v7 >= 0x100)
      {
        v7 = *(_QWORD *)(v9 + 16);
        if (!v10)
        {
LABEL_8:
          v11 = v8;
          goto LABEL_9;
        }
        if (v8 >= v11)
          goto LABEL_9;
      }
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
LABEL_30:
  v23 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v23 = 2823;
  *(_QWORD *)(v23 + 8) = v3;
  *(_QWORD *)(v23 + 528) = v23 + 16;
  *(_QWORD *)(v23 + 536) = v23 + 16;
  *(_OWORD *)(v23 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v23 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v23);
  v27 = (IPC::Encoder *)v23;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v23, 4uLL, 4) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v27, 0, 0);
  result = v27;
  v27 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v24);
    return (IPC::Encoder *)WTF::fastFree(v25, v26);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL19GetBufferParameteriEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B4FE0;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL19GetBufferParameteriEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B4FE0;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL19GetBufferParameteriEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEE4callEi(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _WORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  _DWORD *v18;
  BOOL v20;
  unint64_t v21;
  uint64_t v23;
  void *v24;
  WTF *v25;
  void *v26;
  IPC::Encoder *v27;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v27, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v27);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 112))
  {
    v10 = *(_QWORD *)(v2 + 48);
    v9 = *(_QWORD *)(v2 + 56);
    v7 = *(_QWORD *)(v9 + 8);
    v11 = v10 - 1;
    if (v10 == 1)
    {
      if (v7 >= 0x100)
      {
        v11 = 0;
        v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
        v12 = v7 + 256;
        v13 = (_WORD *)((v7 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v14 = (unint64_t)v13 - v12;
        if ((unint64_t)v13 < v12)
        {
          v15 = 0;
        }
        else
        {
          v15 = v14 + 2;
          if (v14 > 0xFFFFFFFFFFFFFFFDLL || v15 > v11)
          {
            v17 = 0;
            v15 = 0;
LABEL_16:
            v18 = (_DWORD *)((v12 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL);
            if ((unint64_t)v18 >= v12 + v15)
            {
              if ((unint64_t)v18 - v12 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)v18 - v12 + 4 > v17)
              {
LABEL_23:
                v20 = (unint64_t)v13 >= v12;
                v21 = (unint64_t)v13 - v12;
                if (v20 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11)
                  *(_WORD *)(v12 + v21) = 2821;
                goto LABEL_30;
              }
              *v18 = a2;
            }
            if (v17)
              return result;
            goto LABEL_23;
          }
          *v13 = 2823;
        }
        v17 = v11;
        goto LABEL_16;
      }
    }
    else
    {
      v8 = v7 - 256;
      if (v7 >= 0x100)
      {
        v7 = *(_QWORD *)(v9 + 16);
        if (!v10)
        {
LABEL_8:
          v11 = v8;
          goto LABEL_9;
        }
        if (v8 >= v11)
          goto LABEL_9;
      }
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
LABEL_30:
  v23 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v23 = 2823;
  *(_QWORD *)(v23 + 8) = v3;
  *(_QWORD *)(v23 + 528) = v23 + 16;
  *(_QWORD *)(v23 + 536) = v23 + 16;
  *(_OWORD *)(v23 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v23 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v23);
  v27 = (IPC::Encoder *)v23;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v23, 4uLL, 4) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v27, 0, 0);
  result = v27;
  v27 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v24);
    return (IPC::Encoder *)WTF::fastFree(v25, v26);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9GetStringEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B5008;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9GetStringEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B5008;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9GetStringEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EE4callESB_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  IPC::Encoder *v11;
  char *v12;
  unint64_t v13;
  IPC::Encoder *result;
  uint64_t v16;
  void *v17;
  WTF *v18;
  void *v19;
  IPC::Encoder *v20;
  unint64_t v21;
  unint64_t v22;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v20, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v20);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_8;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 112))
  {
    v8 = *(_QWORD *)(v2 + 48);
    v6 = *(unint64_t **)(v2 + 56);
    v7 = v6[1];
    v9 = v8 - 1;
    if (v8 == 1)
    {
      if (v7 >= 0x100)
      {
        v9 = 0;
        v6 = (unint64_t *)v6[2];
LABEL_10:
        v11 = (IPC::Encoder *)(v6 + 32);
        v20 = v11;
        v21 = v9;
        v22 = 0;
        v12 = (char *)(((unint64_t)v6 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v13 = v12 - (char *)v11;
        if (v12 >= (char *)v11)
        {
          if (v13 <= 0xFFFFFFFFFFFFFFFDLL && v13 + 2 <= v9)
          {
            *(_WORD *)v12 = 2823;
            v22 = v13 + 2;
            result = (IPC::Encoder *)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v20, a2);
            if (v21)
              return result;
            *(_WORD *)((char *)v11 + v13) = 2821;
            goto LABEL_17;
          }
          v21 = 0;
        }
        result = (IPC::Encoder *)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v20, a2);
        if (v21)
          return result;
        goto LABEL_17;
      }
    }
    else
    {
      v10 = v7 >= 0x100;
      v7 -= 256;
      if (v10)
      {
        v6 = (unint64_t *)v6[2];
        if (!v8)
        {
LABEL_9:
          v9 = v7;
          goto LABEL_10;
        }
        if (v7 >= v9)
          goto LABEL_10;
      }
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
LABEL_17:
  v16 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v16 = 2823;
  *(_QWORD *)(v16 + 8) = v3;
  *(_QWORD *)(v16 + 528) = v16 + 16;
  *(_QWORD *)(v16 + 536) = v16 + 16;
  *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v16 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
  v20 = (IPC::Encoder *)v16;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v16, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v20, 0, 0);
  result = v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v17);
    return (IPC::Encoder *)WTF::fastFree(v18, v19);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<unsigned int,unsigned long>>(uint64_t result, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int *v6;
  unint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  v2 = a2[1];
  v3 = *a2;
  v4 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v2 < v4 || v2 - v4 <= 3)
  {
    v12 = 0;
    v13 = 0;
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14)
    {
      v23 = a2;
      v25 = result;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v3);
        a2 = v23;
        result = v25;
        v13 = *v23;
        v12 = v23[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
    }
LABEL_15:
    *a2 = 0;
    a2[1] = 0;
    v15 = a2[3];
    if (v15 && v12)
    {
      v22 = a2;
      v24 = result;
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v15 + 16))(v15, v13, v12);
LABEL_28:
      a2 = v22;
      result = v24;
      goto LABEL_19;
    }
    goto LABEL_19;
  }
  v6 = (int *)(v3 + v4);
  a2[2] = v6 + 1;
  if (!v3)
  {
    v12 = v2;
    v13 = 0;
    goto LABEL_15;
  }
  v7 = (((unint64_t)v6 + 11) & 0xFFFFFFFFFFFFFFF8) - v3;
  if (v2 >= v7 && v2 - v7 > 7)
  {
    v9 = (uint64_t *)(((unint64_t)v6 + 11) & 0xFFFFFFFFFFFFFFF8);
    v10 = *v9;
    v11 = *v6;
    a2[2] = v9 + 1;
    *(_DWORD *)result = v11;
    *(_QWORD *)(result + 8) = v10;
    *(_BYTE *)(result + 16) = 1;
    return result;
  }
  *a2 = 0;
  a2[1] = 0;
  v16 = a2[3];
  if (v16)
  {
    if (v2)
    {
      v22 = a2;
      v24 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v3);
      a2 = v22;
      result = v24;
      v20 = *v22;
      v19 = v22[1];
      v21 = v22[3];
      *v22 = 0;
      v22[1] = 0;
      if (v21)
      {
        if (v19)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v20);
          goto LABEL_28;
        }
      }
    }
  }
LABEL_19:
  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 16) = 0;
  v18 = *a2;
  v17 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v17)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v18);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9GetFloatvEN6WebKit23RemoteGraphicsContextGLES8_FvjmONS_17CompletionHandlerIFvNSt3__14spanIKfLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B5030;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9GetFloatvEN6WebKit23RemoteGraphicsContextGLES8_FvjmONS_17CompletionHandlerIFvNSt3__14spanIKfLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B5030;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9GetFloatvEN6WebKit23RemoteGraphicsContextGLES8_FvjmONS_17CompletionHandlerIFvNSt3__14spanIKfLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  IPC::Encoder *v13;
  char *v14;
  unint64_t v15;
  IPC::Encoder *result;
  uint64_t v18;
  void *v19;
  WTF *v20;
  void *v21;
  IPC::Encoder *v22;
  unint64_t v23;
  unint64_t v24;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v22, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v22);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_8;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v3 + 112))
  {
    v10 = *(_QWORD *)(v3 + 48);
    v8 = *(unint64_t **)(v3 + 56);
    v9 = v8[1];
    v11 = v10 - 1;
    if (v10 == 1)
    {
      if (v9 >= 0x100)
      {
        v11 = 0;
        v8 = (unint64_t *)v8[2];
LABEL_10:
        v13 = (IPC::Encoder *)(v8 + 32);
        v22 = v13;
        v23 = v11;
        v24 = 0;
        v14 = (char *)(((unint64_t)v8 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v15 = v14 - (char *)v13;
        if (v14 >= (char *)v13)
        {
          if (v15 <= 0xFFFFFFFFFFFFFFFDLL && v15 + 2 <= v11)
          {
            *(_WORD *)v14 = 2823;
            v24 = v15 + 2;
            result = (IPC::Encoder *)IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v22, a2, a3);
            if (v23)
              return result;
            *(_WORD *)((char *)v13 + v15) = 2821;
            goto LABEL_17;
          }
          v23 = 0;
        }
        result = (IPC::Encoder *)IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v22, a2, a3);
        if (v23)
          return result;
        goto LABEL_17;
      }
    }
    else
    {
      v12 = v9 >= 0x100;
      v9 -= 256;
      if (v12)
      {
        v8 = (unint64_t *)v8[2];
        if (!v10)
        {
LABEL_9:
          v11 = v9;
          goto LABEL_10;
        }
        if (v9 >= v11)
          goto LABEL_10;
      }
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
LABEL_17:
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 2823;
  *(_QWORD *)(v18 + 8) = v4;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  v22 = (IPC::Encoder *)v18;
  IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>((IPC::Encoder *)v18, a2, a3);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v3 + 32), (uint64_t *)&v22, 0, 0);
  result = v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL11GetIntegervEN6WebKit23RemoteGraphicsContextGLES8_FvjmONS_17CompletionHandlerIFvNSt3__14spanIKiLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B5058;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL11GetIntegervEN6WebKit23RemoteGraphicsContextGLES8_FvjmONS_17CompletionHandlerIFvNSt3__14spanIKiLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B5058;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL11GetIntegervEN6WebKit23RemoteGraphicsContextGLES8_FvjmONS_17CompletionHandlerIFvNSt3__14spanIKiLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  IPC::Encoder *v13;
  char *v14;
  unint64_t v15;
  IPC::Encoder *result;
  uint64_t v18;
  void *v19;
  WTF *v20;
  void *v21;
  IPC::Encoder *v22;
  unint64_t v23;
  unint64_t v24;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v22, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v22);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_8;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v3 + 112))
  {
    v10 = *(_QWORD *)(v3 + 48);
    v8 = *(unint64_t **)(v3 + 56);
    v9 = v8[1];
    v11 = v10 - 1;
    if (v10 == 1)
    {
      if (v9 >= 0x100)
      {
        v11 = 0;
        v8 = (unint64_t *)v8[2];
LABEL_10:
        v13 = (IPC::Encoder *)(v8 + 32);
        v22 = v13;
        v23 = v11;
        v24 = 0;
        v14 = (char *)(((unint64_t)v8 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v15 = v14 - (char *)v13;
        if (v14 >= (char *)v13)
        {
          if (v15 <= 0xFFFFFFFFFFFFFFFDLL && v15 + 2 <= v11)
          {
            *(_WORD *)v14 = 2823;
            v24 = v15 + 2;
            result = (IPC::Encoder *)IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v22, a2, a3);
            if (v23)
              return result;
            *(_WORD *)((char *)v13 + v15) = 2821;
            goto LABEL_17;
          }
          v23 = 0;
        }
        result = (IPC::Encoder *)IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v22, a2, a3);
        if (v23)
          return result;
        goto LABEL_17;
      }
    }
    else
    {
      v12 = v9 >= 0x100;
      v9 -= 256;
      if (v12)
      {
        v8 = (unint64_t *)v8[2];
        if (!v10)
        {
LABEL_9:
          v11 = v9;
          goto LABEL_10;
        }
        if (v9 >= v11)
          goto LABEL_10;
      }
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
LABEL_17:
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 2823;
  *(_QWORD *)(v18 + 8) = v4;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  v22 = (IPC::Encoder *)v18;
  IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>((IPC::Encoder *)v18, a2, a3);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v3 + 32), (uint64_t *)&v22, 0, 0);
  result = v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL13GetIntegeri_vEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvNSt3__14spanIKiLm4EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B5080;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL13GetIntegeri_vEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvNSt3__14spanIKiLm4EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B5080;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL13GetIntegeri_vEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvNSt3__14spanIKiLm4EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, _OWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _WORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  _OWORD *v18;
  BOOL v20;
  unint64_t v21;
  uint64_t v23;
  void *v24;
  WTF *v25;
  void *v26;
  IPC::Encoder *v27;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v27, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v27);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 112))
  {
    v10 = *(_QWORD *)(v2 + 48);
    v9 = *(_QWORD *)(v2 + 56);
    v7 = *(_QWORD *)(v9 + 8);
    v11 = v10 - 1;
    if (v10 == 1)
    {
      if (v7 >= 0x100)
      {
        v11 = 0;
        v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
        v12 = v7 + 256;
        v13 = (_WORD *)((v7 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v14 = (unint64_t)v13 - v12;
        if ((unint64_t)v13 < v12)
        {
          v15 = 0;
        }
        else
        {
          v15 = v14 + 2;
          if (v14 > 0xFFFFFFFFFFFFFFFDLL || v15 > v11)
          {
            v17 = 0;
            v15 = 0;
LABEL_16:
            v18 = (_OWORD *)((v12 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL);
            if ((unint64_t)v18 >= v12 + v15)
            {
              if ((unint64_t)v18 - v12 > 0xFFFFFFFFFFFFFFEFLL || (unint64_t)v18 - v12 + 16 > v17)
              {
LABEL_23:
                v20 = (unint64_t)v13 >= v12;
                v21 = (unint64_t)v13 - v12;
                if (v20 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11)
                  *(_WORD *)(v12 + v21) = 2821;
                goto LABEL_30;
              }
              *v18 = *a2;
            }
            if (v17)
              return result;
            goto LABEL_23;
          }
          *v13 = 2823;
        }
        v17 = v11;
        goto LABEL_16;
      }
    }
    else
    {
      v8 = v7 - 256;
      if (v7 >= 0x100)
      {
        v7 = *(_QWORD *)(v9 + 16);
        if (!v10)
        {
LABEL_8:
          v11 = v8;
          goto LABEL_9;
        }
        if (v8 >= v11)
          goto LABEL_9;
      }
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
LABEL_30:
  v23 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v23 = 2823;
  *(_QWORD *)(v23 + 8) = v3;
  *(_QWORD *)(v23 + 528) = v23 + 16;
  *(_QWORD *)(v23 + 536) = v23 + 16;
  *(_OWORD *)(v23 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v23 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v23);
  v27 = (IPC::Encoder *)v23;
  *(_OWORD *)IPC::Encoder::grow((IPC::Encoder *)v23, 4uLL, 16) = *a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v27, 0, 0);
  result = v27;
  v27 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v24);
    return (IPC::Encoder *)WTF::fastFree(v25, v26);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL12GetInteger64EN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvxEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJxEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B50A8;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL12GetInteger64EN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvxEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJxEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B50A8;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL12GetInteger64EN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvxEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJxEE4callEx(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _WORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  _QWORD *v18;
  BOOL v20;
  unint64_t v21;
  uint64_t v23;
  void *v24;
  WTF *v25;
  void *v26;
  IPC::Encoder *v27;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v27, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v27);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 112))
  {
    v10 = *(_QWORD *)(v2 + 48);
    v9 = *(_QWORD *)(v2 + 56);
    v7 = *(_QWORD *)(v9 + 8);
    v11 = v10 - 1;
    if (v10 == 1)
    {
      if (v7 >= 0x100)
      {
        v11 = 0;
        v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
        v12 = v7 + 256;
        v13 = (_WORD *)((v7 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v14 = (unint64_t)v13 - v12;
        if ((unint64_t)v13 < v12)
        {
          v15 = 0;
        }
        else
        {
          v15 = v14 + 2;
          if (v14 > 0xFFFFFFFFFFFFFFFDLL || v15 > v11)
          {
            v17 = 0;
            v15 = 0;
LABEL_16:
            v18 = (_QWORD *)((v12 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
            if ((unint64_t)v18 >= v12 + v15)
            {
              if ((unint64_t)v18 - v12 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v18 - v12 + 8 > v17)
              {
LABEL_23:
                v20 = (unint64_t)v13 >= v12;
                v21 = (unint64_t)v13 - v12;
                if (v20 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11)
                  *(_WORD *)(v12 + v21) = 2821;
                goto LABEL_30;
              }
              *v18 = a2;
            }
            if (v17)
              return result;
            goto LABEL_23;
          }
          *v13 = 2823;
        }
        v17 = v11;
        goto LABEL_16;
      }
    }
    else
    {
      v8 = v7 - 256;
      if (v7 >= 0x100)
      {
        v7 = *(_QWORD *)(v9 + 16);
        if (!v10)
        {
LABEL_8:
          v11 = v8;
          goto LABEL_9;
        }
        if (v8 >= v11)
          goto LABEL_9;
      }
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
LABEL_30:
  v23 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v23 = 2823;
  *(_QWORD *)(v23 + 8) = v3;
  *(_QWORD *)(v23 + 528) = v23 + 16;
  *(_QWORD *)(v23 + 536) = v23 + 16;
  *(_OWORD *)(v23 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v23 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v23);
  v27 = (IPC::Encoder *)v23;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v23, 8uLL, 8) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v27, 0, 0);
  result = v27;
  v27 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v24);
    return (IPC::Encoder *)WTF::fastFree(v25, v26);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL13GetInteger64iEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvxEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJxEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B50D0;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL13GetInteger64iEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvxEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJxEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B50D0;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL13GetInteger64iEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvxEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJxEE4callEx(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _WORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  _QWORD *v18;
  BOOL v20;
  unint64_t v21;
  uint64_t v23;
  void *v24;
  WTF *v25;
  void *v26;
  IPC::Encoder *v27;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v27, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v27);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 112))
  {
    v10 = *(_QWORD *)(v2 + 48);
    v9 = *(_QWORD *)(v2 + 56);
    v7 = *(_QWORD *)(v9 + 8);
    v11 = v10 - 1;
    if (v10 == 1)
    {
      if (v7 >= 0x100)
      {
        v11 = 0;
        v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
        v12 = v7 + 256;
        v13 = (_WORD *)((v7 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v14 = (unint64_t)v13 - v12;
        if ((unint64_t)v13 < v12)
        {
          v15 = 0;
        }
        else
        {
          v15 = v14 + 2;
          if (v14 > 0xFFFFFFFFFFFFFFFDLL || v15 > v11)
          {
            v17 = 0;
            v15 = 0;
LABEL_16:
            v18 = (_QWORD *)((v12 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
            if ((unint64_t)v18 >= v12 + v15)
            {
              if ((unint64_t)v18 - v12 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v18 - v12 + 8 > v17)
              {
LABEL_23:
                v20 = (unint64_t)v13 >= v12;
                v21 = (unint64_t)v13 - v12;
                if (v20 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11)
                  *(_WORD *)(v12 + v21) = 2821;
                goto LABEL_30;
              }
              *v18 = a2;
            }
            if (v17)
              return result;
            goto LABEL_23;
          }
          *v13 = 2823;
        }
        v17 = v11;
        goto LABEL_16;
      }
    }
    else
    {
      v8 = v7 - 256;
      if (v7 >= 0x100)
      {
        v7 = *(_QWORD *)(v9 + 16);
        if (!v10)
        {
LABEL_8:
          v11 = v8;
          goto LABEL_9;
        }
        if (v8 >= v11)
          goto LABEL_9;
      }
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
LABEL_30:
  v23 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v23 = 2823;
  *(_QWORD *)(v23 + 8) = v3;
  *(_QWORD *)(v23 + 528) = v23 + 16;
  *(_QWORD *)(v23 + 536) = v23 + 16;
  *(_OWORD *)(v23 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v23 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v23);
  v27 = (IPC::Encoder *)v23;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v23, 8uLL, 8) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v27, 0, 0);
  result = v27;
  v27 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v24);
    return (IPC::Encoder *)WTF::fastFree(v25, v26);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL11GetProgramiEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B50F8;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL11GetProgramiEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B50F8;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL11GetProgramiEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEE4callEi(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _WORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  _DWORD *v18;
  BOOL v20;
  unint64_t v21;
  uint64_t v23;
  void *v24;
  WTF *v25;
  void *v26;
  IPC::Encoder *v27;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v27, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v27);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 112))
  {
    v10 = *(_QWORD *)(v2 + 48);
    v9 = *(_QWORD *)(v2 + 56);
    v7 = *(_QWORD *)(v9 + 8);
    v11 = v10 - 1;
    if (v10 == 1)
    {
      if (v7 >= 0x100)
      {
        v11 = 0;
        v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
        v12 = v7 + 256;
        v13 = (_WORD *)((v7 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v14 = (unint64_t)v13 - v12;
        if ((unint64_t)v13 < v12)
        {
          v15 = 0;
        }
        else
        {
          v15 = v14 + 2;
          if (v14 > 0xFFFFFFFFFFFFFFFDLL || v15 > v11)
          {
            v17 = 0;
            v15 = 0;
LABEL_16:
            v18 = (_DWORD *)((v12 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL);
            if ((unint64_t)v18 >= v12 + v15)
            {
              if ((unint64_t)v18 - v12 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)v18 - v12 + 4 > v17)
              {
LABEL_23:
                v20 = (unint64_t)v13 >= v12;
                v21 = (unint64_t)v13 - v12;
                if (v20 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11)
                  *(_WORD *)(v12 + v21) = 2821;
                goto LABEL_30;
              }
              *v18 = a2;
            }
            if (v17)
              return result;
            goto LABEL_23;
          }
          *v13 = 2823;
        }
        v17 = v11;
        goto LABEL_16;
      }
    }
    else
    {
      v8 = v7 - 256;
      if (v7 >= 0x100)
      {
        v7 = *(_QWORD *)(v9 + 16);
        if (!v10)
        {
LABEL_8:
          v11 = v8;
          goto LABEL_9;
        }
        if (v8 >= v11)
          goto LABEL_9;
      }
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
LABEL_30:
  v23 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v23 = 2823;
  *(_QWORD *)(v23 + 8) = v3;
  *(_QWORD *)(v23 + 528) = v23 + 16;
  *(_QWORD *)(v23 + 536) = v23 + 16;
  *(_OWORD *)(v23 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v23 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v23);
  v27 = (IPC::Encoder *)v23;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v23, 4uLL, 4) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v27, 0, 0);
  result = v27;
  v27 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v24);
    return (IPC::Encoder *)WTF::fastFree(v25, v26);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL11GetBooleanvEN6WebKit23RemoteGraphicsContextGLES8_FvjmONS_17CompletionHandlerIFvNSt3__14spanIKbLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B5120;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL11GetBooleanvEN6WebKit23RemoteGraphicsContextGLES8_FvjmONS_17CompletionHandlerIFvNSt3__14spanIKbLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B5120;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL11GetBooleanvEN6WebKit23RemoteGraphicsContextGLES8_FvjmONS_17CompletionHandlerIFvNSt3__14spanIKbLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v3;
  uint64_t v4;
  IPC::Encoder *result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  _WORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v25;
  uint64_t v27;
  char *v28;
  void *v29;
  WTF *v30;
  void *v31;
  IPC::Encoder *v32;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v32, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v32);
  v10 = *(unsigned __int8 *)(a1 + 16);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_8;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v3 + 112))
  {
    v11 = *(_QWORD *)(v3 + 48);
    v10 = *(_QWORD *)(v3 + 56);
    v9 = *(_QWORD *)(v10 + 8);
    v12 = v11 - 1;
    if (v11 == 1)
    {
      if (v9 >= 0x100)
      {
        v12 = 0;
        v10 = *(_QWORD *)(v10 + 16);
LABEL_10:
        v14 = v10 + 256;
        v15 = (_WORD *)((v10 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v16 = (unint64_t)v15 - v10 - 256;
        if ((unint64_t)v15 < v10 + 256)
        {
          v17 = 0;
        }
        else
        {
          v17 = v16 + 2;
          if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
          {
            v19 = 0;
            v17 = 0;
LABEL_17:
            v20 = (v14 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
            v21 = v20 - (v14 + v17);
            if (v20 >= v14 + v17)
            {
              v22 = v20 - v14;
              v23 = v21 + v17 + 8;
              if (v22 > 0xFFFFFFFFFFFFFFF7 || v23 > v19)
              {
                v19 = 0;
                if (!a3)
                  goto LABEL_27;
                goto LABEL_24;
              }
              *(_QWORD *)(v14 + v22) = a3;
              v17 = v23;
            }
            if (!a3)
              goto LABEL_27;
LABEL_24:
            if (__CFADD__(v17, a3) || v17 + a3 > v19)
            {
LABEL_28:
              v25 = (unint64_t)v15 - v14;
              if ((unint64_t)v15 >= v14 && v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v12)
                *v15 = 2821;
              goto LABEL_34;
            }
            result = (IPC::Encoder *)memcpy((void *)(v14 + v17), a2, a3);
LABEL_27:
            if (v19)
              return result;
            goto LABEL_28;
          }
          *(_WORD *)(v14 + v16) = 2823;
        }
        v19 = v12;
        goto LABEL_17;
      }
    }
    else
    {
      v13 = v9 >= 0x100;
      v9 -= 256;
      if (v13)
      {
        v10 = *(_QWORD *)(v10 + 16);
        if (!v11)
        {
LABEL_9:
          v12 = v9;
          goto LABEL_10;
        }
        if (v9 >= v12)
          goto LABEL_10;
      }
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
LABEL_34:
  v27 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v27 = 2823;
  *(_QWORD *)(v27 + 8) = v4;
  *(_QWORD *)(v27 + 528) = v27 + 16;
  *(_QWORD *)(v27 + 536) = v27 + 16;
  *(_OWORD *)(v27 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v27 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v27);
  v32 = (IPC::Encoder *)v27;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v27, 8uLL, 8) = a3;
  if (a3)
  {
    v28 = IPC::Encoder::grow((IPC::Encoder *)v27, 1uLL, a3);
    memcpy(v28, a2, a3);
  }
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v3 + 32), (uint64_t *)&v32, 0, 0);
  result = v32;
  v32 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v29);
    return (IPC::Encoder *)WTF::fastFree(v30, v31);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL34GetFramebufferAttachmentParameteriEN6WebKit23RemoteGraphicsContextGLES8_FvjjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B5148;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL34GetFramebufferAttachmentParameteriEN6WebKit23RemoteGraphicsContextGLES8_FvjjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B5148;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL34GetFramebufferAttachmentParameteriEN6WebKit23RemoteGraphicsContextGLES8_FvjjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEE4callEi(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _WORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  _DWORD *v18;
  BOOL v20;
  unint64_t v21;
  uint64_t v23;
  void *v24;
  WTF *v25;
  void *v26;
  IPC::Encoder *v27;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v27, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v27);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 112))
  {
    v10 = *(_QWORD *)(v2 + 48);
    v9 = *(_QWORD *)(v2 + 56);
    v7 = *(_QWORD *)(v9 + 8);
    v11 = v10 - 1;
    if (v10 == 1)
    {
      if (v7 >= 0x100)
      {
        v11 = 0;
        v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
        v12 = v7 + 256;
        v13 = (_WORD *)((v7 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v14 = (unint64_t)v13 - v12;
        if ((unint64_t)v13 < v12)
        {
          v15 = 0;
        }
        else
        {
          v15 = v14 + 2;
          if (v14 > 0xFFFFFFFFFFFFFFFDLL || v15 > v11)
          {
            v17 = 0;
            v15 = 0;
LABEL_16:
            v18 = (_DWORD *)((v12 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL);
            if ((unint64_t)v18 >= v12 + v15)
            {
              if ((unint64_t)v18 - v12 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)v18 - v12 + 4 > v17)
              {
LABEL_23:
                v20 = (unint64_t)v13 >= v12;
                v21 = (unint64_t)v13 - v12;
                if (v20 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11)
                  *(_WORD *)(v12 + v21) = 2821;
                goto LABEL_30;
              }
              *v18 = a2;
            }
            if (v17)
              return result;
            goto LABEL_23;
          }
          *v13 = 2823;
        }
        v17 = v11;
        goto LABEL_16;
      }
    }
    else
    {
      v8 = v7 - 256;
      if (v7 >= 0x100)
      {
        v7 = *(_QWORD *)(v9 + 16);
        if (!v10)
        {
LABEL_8:
          v11 = v8;
          goto LABEL_9;
        }
        if (v8 >= v11)
          goto LABEL_9;
      }
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
LABEL_30:
  v23 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v23 = 2823;
  *(_QWORD *)(v23 + 8) = v3;
  *(_QWORD *)(v23 + 528) = v23 + 16;
  *(_QWORD *)(v23 + 536) = v23 + 16;
  *(_OWORD *)(v23 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v23 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v23);
  v27 = (IPC::Encoder *)v23;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v23, 4uLL, 4) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v27, 0, 0);
  result = v27;
  v27 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v24);
    return (IPC::Encoder *)WTF::fastFree(v25, v26);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL17GetProgramInfoLogEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B5170;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL17GetProgramInfoLogEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B5170;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL17GetProgramInfoLogEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EE4callESB_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  IPC::Encoder *v11;
  char *v12;
  unint64_t v13;
  IPC::Encoder *result;
  uint64_t v16;
  void *v17;
  WTF *v18;
  void *v19;
  IPC::Encoder *v20;
  unint64_t v21;
  unint64_t v22;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v20, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v20);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_8;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 112))
  {
    v8 = *(_QWORD *)(v2 + 48);
    v6 = *(unint64_t **)(v2 + 56);
    v7 = v6[1];
    v9 = v8 - 1;
    if (v8 == 1)
    {
      if (v7 >= 0x100)
      {
        v9 = 0;
        v6 = (unint64_t *)v6[2];
LABEL_10:
        v11 = (IPC::Encoder *)(v6 + 32);
        v20 = v11;
        v21 = v9;
        v22 = 0;
        v12 = (char *)(((unint64_t)v6 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v13 = v12 - (char *)v11;
        if (v12 >= (char *)v11)
        {
          if (v13 <= 0xFFFFFFFFFFFFFFFDLL && v13 + 2 <= v9)
          {
            *(_WORD *)v12 = 2823;
            v22 = v13 + 2;
            result = (IPC::Encoder *)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v20, a2);
            if (v21)
              return result;
            *(_WORD *)((char *)v11 + v13) = 2821;
            goto LABEL_17;
          }
          v21 = 0;
        }
        result = (IPC::Encoder *)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v20, a2);
        if (v21)
          return result;
        goto LABEL_17;
      }
    }
    else
    {
      v10 = v7 >= 0x100;
      v7 -= 256;
      if (v10)
      {
        v6 = (unint64_t *)v6[2];
        if (!v8)
        {
LABEL_9:
          v9 = v7;
          goto LABEL_10;
        }
        if (v7 >= v9)
          goto LABEL_10;
      }
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
LABEL_17:
  v16 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v16 = 2823;
  *(_QWORD *)(v16 + 8) = v3;
  *(_QWORD *)(v16 + 528) = v16 + 16;
  *(_QWORD *)(v16 + 536) = v16 + 16;
  *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v16 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
  v20 = (IPC::Encoder *)v16;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v16, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v20, 0, 0);
  result = v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v17);
    return (IPC::Encoder *)WTF::fastFree(v18, v19);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL25GetRenderbufferParameteriEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B5198;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL25GetRenderbufferParameteriEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B5198;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL25GetRenderbufferParameteriEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEE4callEi(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _WORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  _DWORD *v18;
  BOOL v20;
  unint64_t v21;
  uint64_t v23;
  void *v24;
  WTF *v25;
  void *v26;
  IPC::Encoder *v27;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v27, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v27);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 112))
  {
    v10 = *(_QWORD *)(v2 + 48);
    v9 = *(_QWORD *)(v2 + 56);
    v7 = *(_QWORD *)(v9 + 8);
    v11 = v10 - 1;
    if (v10 == 1)
    {
      if (v7 >= 0x100)
      {
        v11 = 0;
        v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
        v12 = v7 + 256;
        v13 = (_WORD *)((v7 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v14 = (unint64_t)v13 - v12;
        if ((unint64_t)v13 < v12)
        {
          v15 = 0;
        }
        else
        {
          v15 = v14 + 2;
          if (v14 > 0xFFFFFFFFFFFFFFFDLL || v15 > v11)
          {
            v17 = 0;
            v15 = 0;
LABEL_16:
            v18 = (_DWORD *)((v12 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL);
            if ((unint64_t)v18 >= v12 + v15)
            {
              if ((unint64_t)v18 - v12 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)v18 - v12 + 4 > v17)
              {
LABEL_23:
                v20 = (unint64_t)v13 >= v12;
                v21 = (unint64_t)v13 - v12;
                if (v20 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11)
                  *(_WORD *)(v12 + v21) = 2821;
                goto LABEL_30;
              }
              *v18 = a2;
            }
            if (v17)
              return result;
            goto LABEL_23;
          }
          *v13 = 2823;
        }
        v17 = v11;
        goto LABEL_16;
      }
    }
    else
    {
      v8 = v7 - 256;
      if (v7 >= 0x100)
      {
        v7 = *(_QWORD *)(v9 + 16);
        if (!v10)
        {
LABEL_8:
          v11 = v8;
          goto LABEL_9;
        }
        if (v8 >= v11)
          goto LABEL_9;
      }
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
LABEL_30:
  v23 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v23 = 2823;
  *(_QWORD *)(v23 + 8) = v3;
  *(_QWORD *)(v23 + 528) = v23 + 16;
  *(_QWORD *)(v23 + 536) = v23 + 16;
  *(_OWORD *)(v23 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v23 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v23);
  v27 = (IPC::Encoder *)v23;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v23, 4uLL, 4) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v27, 0, 0);
  result = v27;
  v27 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v24);
    return (IPC::Encoder *)WTF::fastFree(v25, v26);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL10GetShaderiEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B51C0;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL10GetShaderiEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B51C0;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL10GetShaderiEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEE4callEi(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _WORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  _DWORD *v18;
  BOOL v20;
  unint64_t v21;
  uint64_t v23;
  void *v24;
  WTF *v25;
  void *v26;
  IPC::Encoder *v27;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v27, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v27);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 112))
  {
    v10 = *(_QWORD *)(v2 + 48);
    v9 = *(_QWORD *)(v2 + 56);
    v7 = *(_QWORD *)(v9 + 8);
    v11 = v10 - 1;
    if (v10 == 1)
    {
      if (v7 >= 0x100)
      {
        v11 = 0;
        v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
        v12 = v7 + 256;
        v13 = (_WORD *)((v7 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v14 = (unint64_t)v13 - v12;
        if ((unint64_t)v13 < v12)
        {
          v15 = 0;
        }
        else
        {
          v15 = v14 + 2;
          if (v14 > 0xFFFFFFFFFFFFFFFDLL || v15 > v11)
          {
            v17 = 0;
            v15 = 0;
LABEL_16:
            v18 = (_DWORD *)((v12 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL);
            if ((unint64_t)v18 >= v12 + v15)
            {
              if ((unint64_t)v18 - v12 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)v18 - v12 + 4 > v17)
              {
LABEL_23:
                v20 = (unint64_t)v13 >= v12;
                v21 = (unint64_t)v13 - v12;
                if (v20 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11)
                  *(_WORD *)(v12 + v21) = 2821;
                goto LABEL_30;
              }
              *v18 = a2;
            }
            if (v17)
              return result;
            goto LABEL_23;
          }
          *v13 = 2823;
        }
        v17 = v11;
        goto LABEL_16;
      }
    }
    else
    {
      v8 = v7 - 256;
      if (v7 >= 0x100)
      {
        v7 = *(_QWORD *)(v9 + 16);
        if (!v10)
        {
LABEL_8:
          v11 = v8;
          goto LABEL_9;
        }
        if (v8 >= v11)
          goto LABEL_9;
      }
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
LABEL_30:
  v23 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v23 = 2823;
  *(_QWORD *)(v23 + 8) = v3;
  *(_QWORD *)(v23 + 528) = v23 + 16;
  *(_QWORD *)(v23 + 536) = v23 + 16;
  *(_OWORD *)(v23 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v23 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v23);
  v27 = (IPC::Encoder *)v23;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v23, 4uLL, 4) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v27, 0, 0);
  result = v27;
  v27 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v24);
    return (IPC::Encoder *)WTF::fastFree(v25, v26);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL16GetShaderInfoLogEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B51E8;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL16GetShaderInfoLogEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B51E8;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL16GetShaderInfoLogEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EE4callESB_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  IPC::Encoder *v11;
  char *v12;
  unint64_t v13;
  IPC::Encoder *result;
  uint64_t v16;
  void *v17;
  WTF *v18;
  void *v19;
  IPC::Encoder *v20;
  unint64_t v21;
  unint64_t v22;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v20, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v20);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_8;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 112))
  {
    v8 = *(_QWORD *)(v2 + 48);
    v6 = *(unint64_t **)(v2 + 56);
    v7 = v6[1];
    v9 = v8 - 1;
    if (v8 == 1)
    {
      if (v7 >= 0x100)
      {
        v9 = 0;
        v6 = (unint64_t *)v6[2];
LABEL_10:
        v11 = (IPC::Encoder *)(v6 + 32);
        v20 = v11;
        v21 = v9;
        v22 = 0;
        v12 = (char *)(((unint64_t)v6 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v13 = v12 - (char *)v11;
        if (v12 >= (char *)v11)
        {
          if (v13 <= 0xFFFFFFFFFFFFFFFDLL && v13 + 2 <= v9)
          {
            *(_WORD *)v12 = 2823;
            v22 = v13 + 2;
            result = (IPC::Encoder *)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v20, a2);
            if (v21)
              return result;
            *(_WORD *)((char *)v11 + v13) = 2821;
            goto LABEL_17;
          }
          v21 = 0;
        }
        result = (IPC::Encoder *)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v20, a2);
        if (v21)
          return result;
        goto LABEL_17;
      }
    }
    else
    {
      v10 = v7 >= 0x100;
      v7 -= 256;
      if (v10)
      {
        v6 = (unint64_t *)v6[2];
        if (!v8)
        {
LABEL_9:
          v9 = v7;
          goto LABEL_10;
        }
        if (v7 >= v9)
          goto LABEL_10;
      }
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
LABEL_17:
  v16 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v16 = 2823;
  *(_QWORD *)(v16 + 8) = v3;
  *(_QWORD *)(v16 + 528) = v16 + 16;
  *(_QWORD *)(v16 + 536) = v16 + 16;
  *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v16 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
  v20 = (IPC::Encoder *)v16;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v16, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v20, 0, 0);
  result = v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v17);
    return (IPC::Encoder *)WTF::fastFree(v18, v19);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL24GetShaderPrecisionFormatEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvNSt3__14spanIKiLm2EEEiEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_iEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B5210;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL24GetShaderPrecisionFormatEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvNSt3__14spanIKiLm2EEEiEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_iEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B5210;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL24GetShaderPrecisionFormatEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvNSt3__14spanIKiLm2EEEiEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_iEE4callESD_i(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  IPC::Encoder *result;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _WORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _DWORD *v25;
  BOOL v27;
  unint64_t v28;
  uint64_t v30;
  void *v31;
  WTF *v32;
  void *v33;
  IPC::Encoder *v34;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v34, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v34);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v3 + 112))
  {
    v12 = *(_QWORD *)(v3 + 48);
    v11 = *(_QWORD *)(v3 + 56);
    v9 = *(_QWORD *)(v11 + 8);
    v13 = v12 - 1;
    if (v12 == 1)
    {
      if (v9 >= 0x100)
      {
        v13 = 0;
        v9 = *(_QWORD *)(v11 + 16);
LABEL_9:
        v14 = v9 + 256;
        v15 = (_WORD *)((v9 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v16 = (unint64_t)v15 - v14;
        if ((unint64_t)v15 < v14)
        {
          v17 = 0;
        }
        else
        {
          v17 = v16 + 2;
          if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v13)
          {
            v19 = 0;
            v17 = 0;
LABEL_16:
            v20 = (v14 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
            v21 = v20 - (v14 + v17);
            if (v20 >= v14 + v17)
            {
              v22 = v20 - v14;
              v23 = v21 + v17 + 8;
              if (v22 > 0xFFFFFFFFFFFFFFF7 || v23 > v19)
              {
                v19 = 0;
              }
              else
              {
                *(_QWORD *)(v14 + v22) = *a2;
                v17 = v23;
              }
            }
            v25 = (_DWORD *)((v14 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
            if ((unint64_t)v25 >= v14 + v17)
            {
              if ((unint64_t)v25 - v14 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)v25 - v14 + 4 > v19)
              {
LABEL_29:
                v27 = (unint64_t)v15 >= v14;
                v28 = (unint64_t)v15 - v14;
                if (v27 && v28 <= 0xFFFFFFFFFFFFFFFDLL && v28 + 2 <= v13)
                  *(_WORD *)(v14 + v28) = 2821;
                goto LABEL_36;
              }
              *v25 = a3;
            }
            if (v19)
              return result;
            goto LABEL_29;
          }
          *v15 = 2823;
        }
        v19 = v13;
        goto LABEL_16;
      }
    }
    else
    {
      v10 = v9 - 256;
      if (v9 >= 0x100)
      {
        v9 = *(_QWORD *)(v11 + 16);
        if (!v12)
        {
LABEL_8:
          v13 = v10;
          goto LABEL_9;
        }
        if (v10 >= v13)
          goto LABEL_9;
      }
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
LABEL_36:
  v30 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v30 = 2823;
  *(_QWORD *)(v30 + 8) = v4;
  *(_QWORD *)(v30 + 528) = v30 + 16;
  *(_QWORD *)(v30 + 536) = v30 + 16;
  *(_OWORD *)(v30 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v30 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v30);
  v34 = (IPC::Encoder *)v30;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v30, 4uLL, 8) = *a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v30, 4uLL, 4) = a3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v3 + 32), (uint64_t *)&v34, 0, 0);
  result = v34;
  v34 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v31);
    return (IPC::Encoder *)WTF::fastFree(v32, v33);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL15GetShaderSourceEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B5238;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL15GetShaderSourceEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B5238;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL15GetShaderSourceEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EE4callESB_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  IPC::Encoder *v11;
  char *v12;
  unint64_t v13;
  IPC::Encoder *result;
  uint64_t v16;
  void *v17;
  WTF *v18;
  void *v19;
  IPC::Encoder *v20;
  unint64_t v21;
  unint64_t v22;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v20, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v20);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_8;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 112))
  {
    v8 = *(_QWORD *)(v2 + 48);
    v6 = *(unint64_t **)(v2 + 56);
    v7 = v6[1];
    v9 = v8 - 1;
    if (v8 == 1)
    {
      if (v7 >= 0x100)
      {
        v9 = 0;
        v6 = (unint64_t *)v6[2];
LABEL_10:
        v11 = (IPC::Encoder *)(v6 + 32);
        v20 = v11;
        v21 = v9;
        v22 = 0;
        v12 = (char *)(((unint64_t)v6 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v13 = v12 - (char *)v11;
        if (v12 >= (char *)v11)
        {
          if (v13 <= 0xFFFFFFFFFFFFFFFDLL && v13 + 2 <= v9)
          {
            *(_WORD *)v12 = 2823;
            v22 = v13 + 2;
            result = (IPC::Encoder *)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v20, a2);
            if (v21)
              return result;
            *(_WORD *)((char *)v11 + v13) = 2821;
            goto LABEL_17;
          }
          v21 = 0;
        }
        result = (IPC::Encoder *)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v20, a2);
        if (v21)
          return result;
        goto LABEL_17;
      }
    }
    else
    {
      v10 = v7 >= 0x100;
      v7 -= 256;
      if (v10)
      {
        v6 = (unint64_t *)v6[2];
        if (!v8)
        {
LABEL_9:
          v9 = v7;
          goto LABEL_10;
        }
        if (v7 >= v9)
          goto LABEL_10;
      }
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
LABEL_17:
  v16 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v16 = 2823;
  *(_QWORD *)(v16 + 8) = v3;
  *(_QWORD *)(v16 + 528) = v16 + 16;
  *(_QWORD *)(v16 + 536) = v16 + 16;
  *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v16 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
  v20 = (IPC::Encoder *)v16;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v16, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v20, 0, 0);
  result = v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v17);
    return (IPC::Encoder *)WTF::fastFree(v18, v19);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL16GetTexParameterfEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvfEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJfEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B5260;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL16GetTexParameterfEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvfEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJfEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B5260;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL16GetTexParameterfEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvfEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJfEE4callEf(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _WORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  float *v18;
  BOOL v20;
  unint64_t v21;
  uint64_t v23;
  void *v24;
  WTF *v25;
  void *v26;
  IPC::Encoder *v27;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v27, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v27);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 112))
  {
    v10 = *(_QWORD *)(v2 + 48);
    v9 = *(_QWORD *)(v2 + 56);
    v7 = *(_QWORD *)(v9 + 8);
    v11 = v10 - 1;
    if (v10 == 1)
    {
      if (v7 >= 0x100)
      {
        v11 = 0;
        v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
        v12 = v7 + 256;
        v13 = (_WORD *)((v7 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v14 = (unint64_t)v13 - v12;
        if ((unint64_t)v13 < v12)
        {
          v15 = 0;
        }
        else
        {
          v15 = v14 + 2;
          if (v14 > 0xFFFFFFFFFFFFFFFDLL || v15 > v11)
          {
            v17 = 0;
            v15 = 0;
LABEL_16:
            v18 = (float *)((v12 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL);
            if ((unint64_t)v18 >= v12 + v15)
            {
              if ((unint64_t)v18 - v12 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)v18 - v12 + 4 > v17)
              {
LABEL_23:
                v20 = (unint64_t)v13 >= v12;
                v21 = (unint64_t)v13 - v12;
                if (v20 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11)
                  *(_WORD *)(v12 + v21) = 2821;
                goto LABEL_30;
              }
              *v18 = a2;
            }
            if (v17)
              return result;
            goto LABEL_23;
          }
          *v13 = 2823;
        }
        v17 = v11;
        goto LABEL_16;
      }
    }
    else
    {
      v8 = v7 - 256;
      if (v7 >= 0x100)
      {
        v7 = *(_QWORD *)(v9 + 16);
        if (!v10)
        {
LABEL_8:
          v11 = v8;
          goto LABEL_9;
        }
        if (v8 >= v11)
          goto LABEL_9;
      }
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
LABEL_30:
  v23 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v23 = 2823;
  *(_QWORD *)(v23 + 8) = v3;
  *(_QWORD *)(v23 + 528) = v23 + 16;
  *(_QWORD *)(v23 + 536) = v23 + 16;
  *(_OWORD *)(v23 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v23 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v23);
  v27 = (IPC::Encoder *)v23;
  *(float *)IPC::Encoder::grow((IPC::Encoder *)v23, 4uLL, 4) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v27, 0, 0);
  result = v27;
  v27 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v24);
    return (IPC::Encoder *)WTF::fastFree(v25, v26);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL16GetTexParameteriEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B5288;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL16GetTexParameteriEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B5288;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL16GetTexParameteriEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEE4callEi(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _WORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  _DWORD *v18;
  BOOL v20;
  unint64_t v21;
  uint64_t v23;
  void *v24;
  WTF *v25;
  void *v26;
  IPC::Encoder *v27;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v27, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v27);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 112))
  {
    v10 = *(_QWORD *)(v2 + 48);
    v9 = *(_QWORD *)(v2 + 56);
    v7 = *(_QWORD *)(v9 + 8);
    v11 = v10 - 1;
    if (v10 == 1)
    {
      if (v7 >= 0x100)
      {
        v11 = 0;
        v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
        v12 = v7 + 256;
        v13 = (_WORD *)((v7 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v14 = (unint64_t)v13 - v12;
        if ((unint64_t)v13 < v12)
        {
          v15 = 0;
        }
        else
        {
          v15 = v14 + 2;
          if (v14 > 0xFFFFFFFFFFFFFFFDLL || v15 > v11)
          {
            v17 = 0;
            v15 = 0;
LABEL_16:
            v18 = (_DWORD *)((v12 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL);
            if ((unint64_t)v18 >= v12 + v15)
            {
              if ((unint64_t)v18 - v12 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)v18 - v12 + 4 > v17)
              {
LABEL_23:
                v20 = (unint64_t)v13 >= v12;
                v21 = (unint64_t)v13 - v12;
                if (v20 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11)
                  *(_WORD *)(v12 + v21) = 2821;
                goto LABEL_30;
              }
              *v18 = a2;
            }
            if (v17)
              return result;
            goto LABEL_23;
          }
          *v13 = 2823;
        }
        v17 = v11;
        goto LABEL_16;
      }
    }
    else
    {
      v8 = v7 - 256;
      if (v7 >= 0x100)
      {
        v7 = *(_QWORD *)(v9 + 16);
        if (!v10)
        {
LABEL_8:
          v11 = v8;
          goto LABEL_9;
        }
        if (v8 >= v11)
          goto LABEL_9;
      }
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
LABEL_30:
  v23 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v23 = 2823;
  *(_QWORD *)(v23 + 8) = v3;
  *(_QWORD *)(v23 + 528) = v23 + 16;
  *(_QWORD *)(v23 + 536) = v23 + 16;
  *(_OWORD *)(v23 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v23 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v23);
  v27 = (IPC::Encoder *)v23;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v23, 4uLL, 4) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v27, 0, 0);
  result = v27;
  v27 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v24);
    return (IPC::Encoder *)WTF::fastFree(v25, v26);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<unsigned int,int,unsigned long>>(uint64_t result, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int *v6;
  unint64_t v7;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;

  v2 = a2[1];
  v3 = *a2;
  v4 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v2 < v4 || v2 - v4 <= 3)
  {
    v20 = 0;
    v21 = 0;
    *a2 = 0;
    a2[1] = 0;
    v22 = a2[3];
    if (v22)
    {
      v27 = a2;
      v29 = result;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, v3);
        a2 = v27;
        result = v29;
        v21 = *v27;
        v20 = v27[1];
      }
      else
      {
        v20 = 0;
        v21 = 0;
      }
    }
LABEL_25:
    *a2 = 0;
    a2[1] = 0;
    v23 = a2[3];
    if (v23 && v20)
    {
      v26 = a2;
      v28 = result;
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v23 + 16))(v23, v21, v20);
      goto LABEL_31;
    }
    goto LABEL_26;
  }
  v6 = (int *)(v3 + v4);
  a2[2] = v6 + 1;
  if (!v3)
  {
    v20 = v2;
    v21 = 0;
    goto LABEL_25;
  }
  v7 = (((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v3;
  if (v2 >= v7 && v2 - v7 > 3)
  {
    v9 = *v6;
    a2[2] = v3 + v7 + 4;
    v11 = v3 + v7 + 11;
    v10 = *(_DWORD *)(v3 + v7);
    v12 = (v11 & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 >= v12 && v2 - v12 > 7)
    {
      v14 = (uint64_t *)(v3 + v12);
      v15 = *v14;
      a2[2] = v14 + 1;
      *(_DWORD *)result = v9;
      *(_DWORD *)(result + 4) = v10;
      *(_QWORD *)(result + 8) = v15;
      *(_BYTE *)(result + 16) = 1;
      return result;
    }
  }
  *a2 = 0;
  a2[1] = 0;
  v16 = a2[3];
  if (v16)
  {
    if (v2)
    {
      v26 = a2;
      v28 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v3);
      a2 = v26;
      result = v28;
      v18 = *v26;
      v17 = v26[1];
      v19 = v26[3];
      *v26 = 0;
      v26[1] = 0;
      if (v19)
      {
        if (v17)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v18);
LABEL_31:
          a2 = v26;
          result = v28;
        }
      }
    }
  }
LABEL_26:
  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 16) = 0;
  v25 = *a2;
  v24 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v24)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v25);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL12GetUniformfvEN6WebKit23RemoteGraphicsContextGLES8_FvjimONS_17CompletionHandlerIFvNSt3__14spanIKfLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B52B0;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL12GetUniformfvEN6WebKit23RemoteGraphicsContextGLES8_FvjimONS_17CompletionHandlerIFvNSt3__14spanIKfLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B52B0;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL12GetUniformfvEN6WebKit23RemoteGraphicsContextGLES8_FvjimONS_17CompletionHandlerIFvNSt3__14spanIKfLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  IPC::Encoder *v13;
  char *v14;
  unint64_t v15;
  IPC::Encoder *result;
  uint64_t v18;
  void *v19;
  WTF *v20;
  void *v21;
  IPC::Encoder *v22;
  unint64_t v23;
  unint64_t v24;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v22, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v22);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_8;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v3 + 112))
  {
    v10 = *(_QWORD *)(v3 + 48);
    v8 = *(unint64_t **)(v3 + 56);
    v9 = v8[1];
    v11 = v10 - 1;
    if (v10 == 1)
    {
      if (v9 >= 0x100)
      {
        v11 = 0;
        v8 = (unint64_t *)v8[2];
LABEL_10:
        v13 = (IPC::Encoder *)(v8 + 32);
        v22 = v13;
        v23 = v11;
        v24 = 0;
        v14 = (char *)(((unint64_t)v8 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v15 = v14 - (char *)v13;
        if (v14 >= (char *)v13)
        {
          if (v15 <= 0xFFFFFFFFFFFFFFFDLL && v15 + 2 <= v11)
          {
            *(_WORD *)v14 = 2823;
            v24 = v15 + 2;
            result = (IPC::Encoder *)IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v22, a2, a3);
            if (v23)
              return result;
            *(_WORD *)((char *)v13 + v15) = 2821;
            goto LABEL_17;
          }
          v23 = 0;
        }
        result = (IPC::Encoder *)IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v22, a2, a3);
        if (v23)
          return result;
        goto LABEL_17;
      }
    }
    else
    {
      v12 = v9 >= 0x100;
      v9 -= 256;
      if (v12)
      {
        v8 = (unint64_t *)v8[2];
        if (!v10)
        {
LABEL_9:
          v11 = v9;
          goto LABEL_10;
        }
        if (v9 >= v11)
          goto LABEL_10;
      }
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
LABEL_17:
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 2823;
  *(_QWORD *)(v18 + 8) = v4;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  v22 = (IPC::Encoder *)v18;
  IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>((IPC::Encoder *)v18, a2, a3);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v3 + 32), (uint64_t *)&v22, 0, 0);
  result = v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL12GetUniformivEN6WebKit23RemoteGraphicsContextGLES8_FvjimONS_17CompletionHandlerIFvNSt3__14spanIKiLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B52D8;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL12GetUniformivEN6WebKit23RemoteGraphicsContextGLES8_FvjimONS_17CompletionHandlerIFvNSt3__14spanIKiLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B52D8;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL12GetUniformivEN6WebKit23RemoteGraphicsContextGLES8_FvjimONS_17CompletionHandlerIFvNSt3__14spanIKiLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  IPC::Encoder *v13;
  char *v14;
  unint64_t v15;
  IPC::Encoder *result;
  uint64_t v18;
  void *v19;
  WTF *v20;
  void *v21;
  IPC::Encoder *v22;
  unint64_t v23;
  unint64_t v24;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v22, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v22);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_8;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v3 + 112))
  {
    v10 = *(_QWORD *)(v3 + 48);
    v8 = *(unint64_t **)(v3 + 56);
    v9 = v8[1];
    v11 = v10 - 1;
    if (v10 == 1)
    {
      if (v9 >= 0x100)
      {
        v11 = 0;
        v8 = (unint64_t *)v8[2];
LABEL_10:
        v13 = (IPC::Encoder *)(v8 + 32);
        v22 = v13;
        v23 = v11;
        v24 = 0;
        v14 = (char *)(((unint64_t)v8 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v15 = v14 - (char *)v13;
        if (v14 >= (char *)v13)
        {
          if (v15 <= 0xFFFFFFFFFFFFFFFDLL && v15 + 2 <= v11)
          {
            *(_WORD *)v14 = 2823;
            v24 = v15 + 2;
            result = (IPC::Encoder *)IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v22, a2, a3);
            if (v23)
              return result;
            *(_WORD *)((char *)v13 + v15) = 2821;
            goto LABEL_17;
          }
          v23 = 0;
        }
        result = (IPC::Encoder *)IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v22, a2, a3);
        if (v23)
          return result;
        goto LABEL_17;
      }
    }
    else
    {
      v12 = v9 >= 0x100;
      v9 -= 256;
      if (v12)
      {
        v8 = (unint64_t *)v8[2];
        if (!v10)
        {
LABEL_9:
          v11 = v9;
          goto LABEL_10;
        }
        if (v9 >= v11)
          goto LABEL_10;
      }
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
LABEL_17:
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 2823;
  *(_QWORD *)(v18 + 8) = v4;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  v22 = (IPC::Encoder *)v18;
  IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>((IPC::Encoder *)v18, a2, a3);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v3 + 32), (uint64_t *)&v22, 0, 0);
  result = v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL13GetUniformuivEN6WebKit23RemoteGraphicsContextGLES8_FvjimONS_17CompletionHandlerIFvNSt3__14spanIKjLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B5300;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL13GetUniformuivEN6WebKit23RemoteGraphicsContextGLES8_FvjimONS_17CompletionHandlerIFvNSt3__14spanIKjLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B5300;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL13GetUniformuivEN6WebKit23RemoteGraphicsContextGLES8_FvjimONS_17CompletionHandlerIFvNSt3__14spanIKjLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  IPC::Encoder *v13;
  char *v14;
  unint64_t v15;
  IPC::Encoder *result;
  uint64_t v18;
  void *v19;
  WTF *v20;
  void *v21;
  IPC::Encoder *v22;
  unint64_t v23;
  unint64_t v24;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v22, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v22);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_8;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v3 + 112))
  {
    v10 = *(_QWORD *)(v3 + 48);
    v8 = *(unint64_t **)(v3 + 56);
    v9 = v8[1];
    v11 = v10 - 1;
    if (v10 == 1)
    {
      if (v9 >= 0x100)
      {
        v11 = 0;
        v8 = (unint64_t *)v8[2];
LABEL_10:
        v13 = (IPC::Encoder *)(v8 + 32);
        v22 = v13;
        v23 = v11;
        v24 = 0;
        v14 = (char *)(((unint64_t)v8 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v15 = v14 - (char *)v13;
        if (v14 >= (char *)v13)
        {
          if (v15 <= 0xFFFFFFFFFFFFFFFDLL && v15 + 2 <= v11)
          {
            *(_WORD *)v14 = 2823;
            v24 = v15 + 2;
            result = (IPC::Encoder *)IPC::ArgumentCoder<std::span<unsigned int const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v22, a2, a3);
            if (v23)
              return result;
            *(_WORD *)((char *)v13 + v15) = 2821;
            goto LABEL_17;
          }
          v23 = 0;
        }
        result = (IPC::Encoder *)IPC::ArgumentCoder<std::span<unsigned int const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v22, a2, a3);
        if (v23)
          return result;
        goto LABEL_17;
      }
    }
    else
    {
      v12 = v9 >= 0x100;
      v9 -= 256;
      if (v12)
      {
        v8 = (unint64_t *)v8[2];
        if (!v10)
        {
LABEL_9:
          v11 = v9;
          goto LABEL_10;
        }
        if (v9 >= v11)
          goto LABEL_10;
      }
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
LABEL_17:
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 2823;
  *(_QWORD *)(v18 + 8) = v4;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  v22 = (IPC::Encoder *)v18;
  IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>((IPC::Encoder *)v18, a2, a3);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v3 + 32), (uint64_t *)&v22, 0, 0);
  result = v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL18GetUniformLocationEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_6StringEONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B5328;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL18GetUniformLocationEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_6StringEONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B5328;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL18GetUniformLocationEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_6StringEONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEE4callEi(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _WORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  _DWORD *v18;
  BOOL v20;
  unint64_t v21;
  uint64_t v23;
  void *v24;
  WTF *v25;
  void *v26;
  IPC::Encoder *v27;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v27, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v27);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 112))
  {
    v10 = *(_QWORD *)(v2 + 48);
    v9 = *(_QWORD *)(v2 + 56);
    v7 = *(_QWORD *)(v9 + 8);
    v11 = v10 - 1;
    if (v10 == 1)
    {
      if (v7 >= 0x100)
      {
        v11 = 0;
        v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
        v12 = v7 + 256;
        v13 = (_WORD *)((v7 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v14 = (unint64_t)v13 - v12;
        if ((unint64_t)v13 < v12)
        {
          v15 = 0;
        }
        else
        {
          v15 = v14 + 2;
          if (v14 > 0xFFFFFFFFFFFFFFFDLL || v15 > v11)
          {
            v17 = 0;
            v15 = 0;
LABEL_16:
            v18 = (_DWORD *)((v12 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL);
            if ((unint64_t)v18 >= v12 + v15)
            {
              if ((unint64_t)v18 - v12 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)v18 - v12 + 4 > v17)
              {
LABEL_23:
                v20 = (unint64_t)v13 >= v12;
                v21 = (unint64_t)v13 - v12;
                if (v20 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11)
                  *(_WORD *)(v12 + v21) = 2821;
                goto LABEL_30;
              }
              *v18 = a2;
            }
            if (v17)
              return result;
            goto LABEL_23;
          }
          *v13 = 2823;
        }
        v17 = v11;
        goto LABEL_16;
      }
    }
    else
    {
      v8 = v7 - 256;
      if (v7 >= 0x100)
      {
        v7 = *(_QWORD *)(v9 + 16);
        if (!v10)
        {
LABEL_8:
          v11 = v8;
          goto LABEL_9;
        }
        if (v8 >= v11)
          goto LABEL_9;
      }
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
LABEL_30:
  v23 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v23 = 2823;
  *(_QWORD *)(v23 + 8) = v3;
  *(_QWORD *)(v23 + 528) = v23 + 16;
  *(_QWORD *)(v23 + 536) = v23 + 16;
  *(_OWORD *)(v23 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v23 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v23);
  v27 = (IPC::Encoder *)v23;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v23, 4uLL, 4) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v27, 0, 0);
  result = v27;
  v27 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v24);
    return (IPC::Encoder *)WTF::fastFree(v25, v26);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL21GetVertexAttribOffsetEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvyEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B5350;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL21GetVertexAttribOffsetEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvyEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B5350;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL21GetVertexAttribOffsetEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvyEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEE4callEy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _WORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  _QWORD *v18;
  BOOL v20;
  unint64_t v21;
  uint64_t v23;
  void *v24;
  WTF *v25;
  void *v26;
  IPC::Encoder *v27;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v27, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v27);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 112))
  {
    v10 = *(_QWORD *)(v2 + 48);
    v9 = *(_QWORD *)(v2 + 56);
    v7 = *(_QWORD *)(v9 + 8);
    v11 = v10 - 1;
    if (v10 == 1)
    {
      if (v7 >= 0x100)
      {
        v11 = 0;
        v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
        v12 = v7 + 256;
        v13 = (_WORD *)((v7 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v14 = (unint64_t)v13 - v12;
        if ((unint64_t)v13 < v12)
        {
          v15 = 0;
        }
        else
        {
          v15 = v14 + 2;
          if (v14 > 0xFFFFFFFFFFFFFFFDLL || v15 > v11)
          {
            v17 = 0;
            v15 = 0;
LABEL_16:
            v18 = (_QWORD *)((v12 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
            if ((unint64_t)v18 >= v12 + v15)
            {
              if ((unint64_t)v18 - v12 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v18 - v12 + 8 > v17)
              {
LABEL_23:
                v20 = (unint64_t)v13 >= v12;
                v21 = (unint64_t)v13 - v12;
                if (v20 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11)
                  *(_WORD *)(v12 + v21) = 2821;
                goto LABEL_30;
              }
              *v18 = a2;
            }
            if (v17)
              return result;
            goto LABEL_23;
          }
          *v13 = 2823;
        }
        v17 = v11;
        goto LABEL_16;
      }
    }
    else
    {
      v8 = v7 - 256;
      if (v7 >= 0x100)
      {
        v7 = *(_QWORD *)(v9 + 16);
        if (!v10)
        {
LABEL_8:
          v11 = v8;
          goto LABEL_9;
        }
        if (v8 >= v11)
          goto LABEL_9;
      }
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
LABEL_30:
  v23 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v23 = 2823;
  *(_QWORD *)(v23 + 8) = v3;
  *(_QWORD *)(v23 + 528) = v23 + 16;
  *(_QWORD *)(v23 + 536) = v23 + 16;
  *(_OWORD *)(v23 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v23 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v23);
  v27 = (IPC::Encoder *)v23;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v23, 8uLL, 8) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v27, 0, 0);
  result = v27;
  v27 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v24);
    return (IPC::Encoder *)WTF::fastFree(v25, v26);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL8IsBufferEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B5378;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL8IsBufferEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B5378;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL8IsBufferEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  void *v19;
  WTF *v20;
  void *v21;
  IPC::Encoder *v22;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v22, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v22);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v2 + 112))
    goto LABEL_20;
  v10 = *(_QWORD *)(v2 + 48);
  v9 = *(_QWORD *)(v2 + 56);
  v7 = *(_QWORD *)(v9 + 8);
  v11 = v10 - 1;
  if (v10 != 1)
  {
    v8 = v7 - 256;
    if (v7 >= 0x100)
    {
      v7 = *(_QWORD *)(v9 + 16);
      if (!v10)
      {
LABEL_8:
        v11 = v8;
        goto LABEL_9;
      }
      if (v8 >= v11)
        goto LABEL_9;
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v7 < 0x100)
    goto LABEL_7;
  v11 = 0;
  v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
  v12 = v7 + 256;
  v13 = (v7 + 257) & 0xFFFFFFFFFFFFFFFELL;
  v14 = v13 >= v12;
  v15 = v13 - v12;
  if (v14)
  {
    v16 = v15 + 2;
    if (v15 <= 0xFFFFFFFFFFFFFFFDLL && v16 <= v11)
    {
      *(_WORD *)(v12 + v15) = 2823;
      if (v16 < v11)
      {
LABEL_16:
        *(_BYTE *)(v12 + v16) = a2;
        return result;
      }
      *(_WORD *)(v12 + v15) = 2821;
    }
  }
  else if (v11)
  {
    v16 = 0;
    goto LABEL_16;
  }
LABEL_20:
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 2823;
  *(_QWORD *)(v18 + 8) = v3;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  v22 = (IPC::Encoder *)v18;
  *IPC::Encoder::grow((IPC::Encoder *)v18, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v22, 0, 0);
  result = v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9IsEnabledEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B53A0;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9IsEnabledEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B53A0;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9IsEnabledEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  void *v19;
  WTF *v20;
  void *v21;
  IPC::Encoder *v22;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v22, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v22);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v2 + 112))
    goto LABEL_20;
  v10 = *(_QWORD *)(v2 + 48);
  v9 = *(_QWORD *)(v2 + 56);
  v7 = *(_QWORD *)(v9 + 8);
  v11 = v10 - 1;
  if (v10 != 1)
  {
    v8 = v7 - 256;
    if (v7 >= 0x100)
    {
      v7 = *(_QWORD *)(v9 + 16);
      if (!v10)
      {
LABEL_8:
        v11 = v8;
        goto LABEL_9;
      }
      if (v8 >= v11)
        goto LABEL_9;
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v7 < 0x100)
    goto LABEL_7;
  v11 = 0;
  v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
  v12 = v7 + 256;
  v13 = (v7 + 257) & 0xFFFFFFFFFFFFFFFELL;
  v14 = v13 >= v12;
  v15 = v13 - v12;
  if (v14)
  {
    v16 = v15 + 2;
    if (v15 <= 0xFFFFFFFFFFFFFFFDLL && v16 <= v11)
    {
      *(_WORD *)(v12 + v15) = 2823;
      if (v16 < v11)
      {
LABEL_16:
        *(_BYTE *)(v12 + v16) = a2;
        return result;
      }
      *(_WORD *)(v12 + v15) = 2821;
    }
  }
  else if (v11)
  {
    v16 = 0;
    goto LABEL_16;
  }
LABEL_20:
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 2823;
  *(_QWORD *)(v18 + 8) = v3;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  v22 = (IPC::Encoder *)v18;
  *IPC::Encoder::grow((IPC::Encoder *)v18, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v22, 0, 0);
  result = v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL13IsFramebufferEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B53C8;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL13IsFramebufferEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B53C8;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL13IsFramebufferEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  void *v19;
  WTF *v20;
  void *v21;
  IPC::Encoder *v22;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v22, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v22);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v2 + 112))
    goto LABEL_20;
  v10 = *(_QWORD *)(v2 + 48);
  v9 = *(_QWORD *)(v2 + 56);
  v7 = *(_QWORD *)(v9 + 8);
  v11 = v10 - 1;
  if (v10 != 1)
  {
    v8 = v7 - 256;
    if (v7 >= 0x100)
    {
      v7 = *(_QWORD *)(v9 + 16);
      if (!v10)
      {
LABEL_8:
        v11 = v8;
        goto LABEL_9;
      }
      if (v8 >= v11)
        goto LABEL_9;
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v7 < 0x100)
    goto LABEL_7;
  v11 = 0;
  v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
  v12 = v7 + 256;
  v13 = (v7 + 257) & 0xFFFFFFFFFFFFFFFELL;
  v14 = v13 >= v12;
  v15 = v13 - v12;
  if (v14)
  {
    v16 = v15 + 2;
    if (v15 <= 0xFFFFFFFFFFFFFFFDLL && v16 <= v11)
    {
      *(_WORD *)(v12 + v15) = 2823;
      if (v16 < v11)
      {
LABEL_16:
        *(_BYTE *)(v12 + v16) = a2;
        return result;
      }
      *(_WORD *)(v12 + v15) = 2821;
    }
  }
  else if (v11)
  {
    v16 = 0;
    goto LABEL_16;
  }
LABEL_20:
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 2823;
  *(_QWORD *)(v18 + 8) = v3;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  v22 = (IPC::Encoder *)v18;
  *IPC::Encoder::grow((IPC::Encoder *)v18, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v22, 0, 0);
  result = v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9IsProgramEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B53F0;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9IsProgramEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B53F0;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9IsProgramEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  void *v19;
  WTF *v20;
  void *v21;
  IPC::Encoder *v22;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v22, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v22);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v2 + 112))
    goto LABEL_20;
  v10 = *(_QWORD *)(v2 + 48);
  v9 = *(_QWORD *)(v2 + 56);
  v7 = *(_QWORD *)(v9 + 8);
  v11 = v10 - 1;
  if (v10 != 1)
  {
    v8 = v7 - 256;
    if (v7 >= 0x100)
    {
      v7 = *(_QWORD *)(v9 + 16);
      if (!v10)
      {
LABEL_8:
        v11 = v8;
        goto LABEL_9;
      }
      if (v8 >= v11)
        goto LABEL_9;
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v7 < 0x100)
    goto LABEL_7;
  v11 = 0;
  v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
  v12 = v7 + 256;
  v13 = (v7 + 257) & 0xFFFFFFFFFFFFFFFELL;
  v14 = v13 >= v12;
  v15 = v13 - v12;
  if (v14)
  {
    v16 = v15 + 2;
    if (v15 <= 0xFFFFFFFFFFFFFFFDLL && v16 <= v11)
    {
      *(_WORD *)(v12 + v15) = 2823;
      if (v16 < v11)
      {
LABEL_16:
        *(_BYTE *)(v12 + v16) = a2;
        return result;
      }
      *(_WORD *)(v12 + v15) = 2821;
    }
  }
  else if (v11)
  {
    v16 = 0;
    goto LABEL_16;
  }
LABEL_20:
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 2823;
  *(_QWORD *)(v18 + 8) = v3;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  v22 = (IPC::Encoder *)v18;
  *IPC::Encoder::grow((IPC::Encoder *)v18, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v22, 0, 0);
  result = v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL14IsRenderbufferEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B5418;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL14IsRenderbufferEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B5418;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL14IsRenderbufferEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  void *v19;
  WTF *v20;
  void *v21;
  IPC::Encoder *v22;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v22, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v22);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v2 + 112))
    goto LABEL_20;
  v10 = *(_QWORD *)(v2 + 48);
  v9 = *(_QWORD *)(v2 + 56);
  v7 = *(_QWORD *)(v9 + 8);
  v11 = v10 - 1;
  if (v10 != 1)
  {
    v8 = v7 - 256;
    if (v7 >= 0x100)
    {
      v7 = *(_QWORD *)(v9 + 16);
      if (!v10)
      {
LABEL_8:
        v11 = v8;
        goto LABEL_9;
      }
      if (v8 >= v11)
        goto LABEL_9;
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v7 < 0x100)
    goto LABEL_7;
  v11 = 0;
  v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
  v12 = v7 + 256;
  v13 = (v7 + 257) & 0xFFFFFFFFFFFFFFFELL;
  v14 = v13 >= v12;
  v15 = v13 - v12;
  if (v14)
  {
    v16 = v15 + 2;
    if (v15 <= 0xFFFFFFFFFFFFFFFDLL && v16 <= v11)
    {
      *(_WORD *)(v12 + v15) = 2823;
      if (v16 < v11)
      {
LABEL_16:
        *(_BYTE *)(v12 + v16) = a2;
        return result;
      }
      *(_WORD *)(v12 + v15) = 2821;
    }
  }
  else if (v11)
  {
    v16 = 0;
    goto LABEL_16;
  }
LABEL_20:
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 2823;
  *(_QWORD *)(v18 + 8) = v3;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  v22 = (IPC::Encoder *)v18;
  *IPC::Encoder::grow((IPC::Encoder *)v18, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v22, 0, 0);
  result = v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL8IsShaderEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B5440;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL8IsShaderEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B5440;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL8IsShaderEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  void *v19;
  WTF *v20;
  void *v21;
  IPC::Encoder *v22;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v22, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v22);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v2 + 112))
    goto LABEL_20;
  v10 = *(_QWORD *)(v2 + 48);
  v9 = *(_QWORD *)(v2 + 56);
  v7 = *(_QWORD *)(v9 + 8);
  v11 = v10 - 1;
  if (v10 != 1)
  {
    v8 = v7 - 256;
    if (v7 >= 0x100)
    {
      v7 = *(_QWORD *)(v9 + 16);
      if (!v10)
      {
LABEL_8:
        v11 = v8;
        goto LABEL_9;
      }
      if (v8 >= v11)
        goto LABEL_9;
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v7 < 0x100)
    goto LABEL_7;
  v11 = 0;
  v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
  v12 = v7 + 256;
  v13 = (v7 + 257) & 0xFFFFFFFFFFFFFFFELL;
  v14 = v13 >= v12;
  v15 = v13 - v12;
  if (v14)
  {
    v16 = v15 + 2;
    if (v15 <= 0xFFFFFFFFFFFFFFFDLL && v16 <= v11)
    {
      *(_WORD *)(v12 + v15) = 2823;
      if (v16 < v11)
      {
LABEL_16:
        *(_BYTE *)(v12 + v16) = a2;
        return result;
      }
      *(_WORD *)(v12 + v15) = 2821;
    }
  }
  else if (v11)
  {
    v16 = 0;
    goto LABEL_16;
  }
LABEL_20:
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 2823;
  *(_QWORD *)(v18 + 8) = v3;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  v22 = (IPC::Encoder *)v18;
  *IPC::Encoder::grow((IPC::Encoder *)v18, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v22, 0, 0);
  result = v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9IsTextureEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B5468;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9IsTextureEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B5468;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9IsTextureEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  void *v19;
  WTF *v20;
  void *v21;
  IPC::Encoder *v22;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v22, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v22);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v2 + 112))
    goto LABEL_20;
  v10 = *(_QWORD *)(v2 + 48);
  v9 = *(_QWORD *)(v2 + 56);
  v7 = *(_QWORD *)(v9 + 8);
  v11 = v10 - 1;
  if (v10 != 1)
  {
    v8 = v7 - 256;
    if (v7 >= 0x100)
    {
      v7 = *(_QWORD *)(v9 + 16);
      if (!v10)
      {
LABEL_8:
        v11 = v8;
        goto LABEL_9;
      }
      if (v8 >= v11)
        goto LABEL_9;
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v7 < 0x100)
    goto LABEL_7;
  v11 = 0;
  v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
  v12 = v7 + 256;
  v13 = (v7 + 257) & 0xFFFFFFFFFFFFFFFELL;
  v14 = v13 >= v12;
  v15 = v13 - v12;
  if (v14)
  {
    v16 = v15 + 2;
    if (v15 <= 0xFFFFFFFFFFFFFFFDLL && v16 <= v11)
    {
      *(_WORD *)(v12 + v15) = 2823;
      if (v16 < v11)
      {
LABEL_16:
        *(_BYTE *)(v12 + v16) = a2;
        return result;
      }
      *(_WORD *)(v12 + v15) = 2821;
    }
  }
  else if (v11)
  {
    v16 = 0;
    goto LABEL_16;
  }
LABEL_20:
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 2823;
  *(_QWORD *)(v18 + 8) = v3;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  v22 = (IPC::Encoder *)v18;
  *IPC::Encoder::grow((IPC::Encoder *)v18, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v22, 0, 0);
  result = v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL13IsVertexArrayEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B5490;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL13IsVertexArrayEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B5490;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL13IsVertexArrayEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  void *v19;
  WTF *v20;
  void *v21;
  IPC::Encoder *v22;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v22, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v22);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v2 + 112))
    goto LABEL_20;
  v10 = *(_QWORD *)(v2 + 48);
  v9 = *(_QWORD *)(v2 + 56);
  v7 = *(_QWORD *)(v9 + 8);
  v11 = v10 - 1;
  if (v10 != 1)
  {
    v8 = v7 - 256;
    if (v7 >= 0x100)
    {
      v7 = *(_QWORD *)(v9 + 16);
      if (!v10)
      {
LABEL_8:
        v11 = v8;
        goto LABEL_9;
      }
      if (v8 >= v11)
        goto LABEL_9;
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v7 < 0x100)
    goto LABEL_7;
  v11 = 0;
  v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
  v12 = v7 + 256;
  v13 = (v7 + 257) & 0xFFFFFFFFFFFFFFFELL;
  v14 = v13 >= v12;
  v15 = v13 - v12;
  if (v14)
  {
    v16 = v15 + 2;
    if (v15 <= 0xFFFFFFFFFFFFFFFDLL && v16 <= v11)
    {
      *(_WORD *)(v12 + v15) = 2823;
      if (v16 < v11)
      {
LABEL_16:
        *(_BYTE *)(v12 + v16) = a2;
        return result;
      }
      *(_WORD *)(v12 + v15) = 2821;
    }
  }
  else if (v11)
  {
    v16 = 0;
    goto LABEL_16;
  }
LABEL_20:
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 2823;
  *(_QWORD *)(v18 + 8) = v3;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  v22 = (IPC::Encoder *)v18;
  *IPC::Encoder::grow((IPC::Encoder *)v18, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v22, 0, 0);
  result = v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL19GetFragDataLocationEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_6StringEONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B54B8;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL19GetFragDataLocationEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_6StringEONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B54B8;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL19GetFragDataLocationEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_6StringEONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEE4callEi(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _WORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  _DWORD *v18;
  BOOL v20;
  unint64_t v21;
  uint64_t v23;
  void *v24;
  WTF *v25;
  void *v26;
  IPC::Encoder *v27;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v27, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v27);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 112))
  {
    v10 = *(_QWORD *)(v2 + 48);
    v9 = *(_QWORD *)(v2 + 56);
    v7 = *(_QWORD *)(v9 + 8);
    v11 = v10 - 1;
    if (v10 == 1)
    {
      if (v7 >= 0x100)
      {
        v11 = 0;
        v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
        v12 = v7 + 256;
        v13 = (_WORD *)((v7 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v14 = (unint64_t)v13 - v12;
        if ((unint64_t)v13 < v12)
        {
          v15 = 0;
        }
        else
        {
          v15 = v14 + 2;
          if (v14 > 0xFFFFFFFFFFFFFFFDLL || v15 > v11)
          {
            v17 = 0;
            v15 = 0;
LABEL_16:
            v18 = (_DWORD *)((v12 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL);
            if ((unint64_t)v18 >= v12 + v15)
            {
              if ((unint64_t)v18 - v12 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)v18 - v12 + 4 > v17)
              {
LABEL_23:
                v20 = (unint64_t)v13 >= v12;
                v21 = (unint64_t)v13 - v12;
                if (v20 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11)
                  *(_WORD *)(v12 + v21) = 2821;
                goto LABEL_30;
              }
              *v18 = a2;
            }
            if (v17)
              return result;
            goto LABEL_23;
          }
          *v13 = 2823;
        }
        v17 = v11;
        goto LABEL_16;
      }
    }
    else
    {
      v8 = v7 - 256;
      if (v7 >= 0x100)
      {
        v7 = *(_QWORD *)(v9 + 16);
        if (!v10)
        {
LABEL_8:
          v11 = v8;
          goto LABEL_9;
        }
        if (v8 >= v11)
          goto LABEL_9;
      }
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
LABEL_30:
  v23 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v23 = 2823;
  *(_QWORD *)(v23 + 8) = v3;
  *(_QWORD *)(v23 + 528) = v23 + 16;
  *(_QWORD *)(v23 + 536) = v23 + 16;
  *(_OWORD *)(v23 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v23 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v23);
  v27 = (IPC::Encoder *)v23;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v23, 4uLL, 4) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v27, 0, 0);
  result = v27;
  v27 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v24);
    return (IPC::Encoder *)WTF::fastFree(v25, v26);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL7IsQueryEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B54E0;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL7IsQueryEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B54E0;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL7IsQueryEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  void *v19;
  WTF *v20;
  void *v21;
  IPC::Encoder *v22;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v22, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v22);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v2 + 112))
    goto LABEL_20;
  v10 = *(_QWORD *)(v2 + 48);
  v9 = *(_QWORD *)(v2 + 56);
  v7 = *(_QWORD *)(v9 + 8);
  v11 = v10 - 1;
  if (v10 != 1)
  {
    v8 = v7 - 256;
    if (v7 >= 0x100)
    {
      v7 = *(_QWORD *)(v9 + 16);
      if (!v10)
      {
LABEL_8:
        v11 = v8;
        goto LABEL_9;
      }
      if (v8 >= v11)
        goto LABEL_9;
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v7 < 0x100)
    goto LABEL_7;
  v11 = 0;
  v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
  v12 = v7 + 256;
  v13 = (v7 + 257) & 0xFFFFFFFFFFFFFFFELL;
  v14 = v13 >= v12;
  v15 = v13 - v12;
  if (v14)
  {
    v16 = v15 + 2;
    if (v15 <= 0xFFFFFFFFFFFFFFFDLL && v16 <= v11)
    {
      *(_WORD *)(v12 + v15) = 2823;
      if (v16 < v11)
      {
LABEL_16:
        *(_BYTE *)(v12 + v16) = a2;
        return result;
      }
      *(_WORD *)(v12 + v15) = 2821;
    }
  }
  else if (v11)
  {
    v16 = 0;
    goto LABEL_16;
  }
LABEL_20:
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 2823;
  *(_QWORD *)(v18 + 8) = v3;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  v22 = (IPC::Encoder *)v18;
  *IPC::Encoder::grow((IPC::Encoder *)v18, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v22, 0, 0);
  result = v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL8GetQueryEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B5508;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL8GetQueryEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B5508;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL8GetQueryEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEE4callEi(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _WORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  _DWORD *v18;
  BOOL v20;
  unint64_t v21;
  uint64_t v23;
  void *v24;
  WTF *v25;
  void *v26;
  IPC::Encoder *v27;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v27, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v27);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 112))
  {
    v10 = *(_QWORD *)(v2 + 48);
    v9 = *(_QWORD *)(v2 + 56);
    v7 = *(_QWORD *)(v9 + 8);
    v11 = v10 - 1;
    if (v10 == 1)
    {
      if (v7 >= 0x100)
      {
        v11 = 0;
        v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
        v12 = v7 + 256;
        v13 = (_WORD *)((v7 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v14 = (unint64_t)v13 - v12;
        if ((unint64_t)v13 < v12)
        {
          v15 = 0;
        }
        else
        {
          v15 = v14 + 2;
          if (v14 > 0xFFFFFFFFFFFFFFFDLL || v15 > v11)
          {
            v17 = 0;
            v15 = 0;
LABEL_16:
            v18 = (_DWORD *)((v12 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL);
            if ((unint64_t)v18 >= v12 + v15)
            {
              if ((unint64_t)v18 - v12 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)v18 - v12 + 4 > v17)
              {
LABEL_23:
                v20 = (unint64_t)v13 >= v12;
                v21 = (unint64_t)v13 - v12;
                if (v20 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11)
                  *(_WORD *)(v12 + v21) = 2821;
                goto LABEL_30;
              }
              *v18 = a2;
            }
            if (v17)
              return result;
            goto LABEL_23;
          }
          *v13 = 2823;
        }
        v17 = v11;
        goto LABEL_16;
      }
    }
    else
    {
      v8 = v7 - 256;
      if (v7 >= 0x100)
      {
        v7 = *(_QWORD *)(v9 + 16);
        if (!v10)
        {
LABEL_8:
          v11 = v8;
          goto LABEL_9;
        }
        if (v8 >= v11)
          goto LABEL_9;
      }
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
LABEL_30:
  v23 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v23 = 2823;
  *(_QWORD *)(v23 + 8) = v3;
  *(_QWORD *)(v23 + 528) = v23 + 16;
  *(_QWORD *)(v23 + 536) = v23 + 16;
  *(_OWORD *)(v23 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v23 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v23);
  v27 = (IPC::Encoder *)v23;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v23, 4uLL, 4) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v27, 0, 0);
  result = v27;
  v27 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v24);
    return (IPC::Encoder *)WTF::fastFree(v25, v26);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL16GetQueryObjectuiEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvjEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJjEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B5530;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL16GetQueryObjectuiEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvjEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJjEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B5530;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL16GetQueryObjectuiEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvjEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJjEE4callEj(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _WORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  _DWORD *v18;
  BOOL v20;
  unint64_t v21;
  uint64_t v23;
  void *v24;
  WTF *v25;
  void *v26;
  IPC::Encoder *v27;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v27, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v27);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 112))
  {
    v10 = *(_QWORD *)(v2 + 48);
    v9 = *(_QWORD *)(v2 + 56);
    v7 = *(_QWORD *)(v9 + 8);
    v11 = v10 - 1;
    if (v10 == 1)
    {
      if (v7 >= 0x100)
      {
        v11 = 0;
        v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
        v12 = v7 + 256;
        v13 = (_WORD *)((v7 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v14 = (unint64_t)v13 - v12;
        if ((unint64_t)v13 < v12)
        {
          v15 = 0;
        }
        else
        {
          v15 = v14 + 2;
          if (v14 > 0xFFFFFFFFFFFFFFFDLL || v15 > v11)
          {
            v17 = 0;
            v15 = 0;
LABEL_16:
            v18 = (_DWORD *)((v12 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL);
            if ((unint64_t)v18 >= v12 + v15)
            {
              if ((unint64_t)v18 - v12 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)v18 - v12 + 4 > v17)
              {
LABEL_23:
                v20 = (unint64_t)v13 >= v12;
                v21 = (unint64_t)v13 - v12;
                if (v20 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11)
                  *(_WORD *)(v12 + v21) = 2821;
                goto LABEL_30;
              }
              *v18 = a2;
            }
            if (v17)
              return result;
            goto LABEL_23;
          }
          *v13 = 2823;
        }
        v17 = v11;
        goto LABEL_16;
      }
    }
    else
    {
      v8 = v7 - 256;
      if (v7 >= 0x100)
      {
        v7 = *(_QWORD *)(v9 + 16);
        if (!v10)
        {
LABEL_8:
          v11 = v8;
          goto LABEL_9;
        }
        if (v8 >= v11)
          goto LABEL_9;
      }
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
LABEL_30:
  v23 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v23 = 2823;
  *(_QWORD *)(v23 + 8) = v3;
  *(_QWORD *)(v23 + 528) = v23 + 16;
  *(_QWORD *)(v23 + 536) = v23 + 16;
  *(_OWORD *)(v23 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v23 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v23);
  v27 = (IPC::Encoder *)v23;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v23, 4uLL, 4) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v27, 0, 0);
  result = v27;
  v27 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v24);
    return (IPC::Encoder *)WTF::fastFree(v25, v26);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9IsSamplerEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B5558;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9IsSamplerEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B5558;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9IsSamplerEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  void *v19;
  WTF *v20;
  void *v21;
  IPC::Encoder *v22;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v22, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v22);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v2 + 112))
    goto LABEL_20;
  v10 = *(_QWORD *)(v2 + 48);
  v9 = *(_QWORD *)(v2 + 56);
  v7 = *(_QWORD *)(v9 + 8);
  v11 = v10 - 1;
  if (v10 != 1)
  {
    v8 = v7 - 256;
    if (v7 >= 0x100)
    {
      v7 = *(_QWORD *)(v9 + 16);
      if (!v10)
      {
LABEL_8:
        v11 = v8;
        goto LABEL_9;
      }
      if (v8 >= v11)
        goto LABEL_9;
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v7 < 0x100)
    goto LABEL_7;
  v11 = 0;
  v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
  v12 = v7 + 256;
  v13 = (v7 + 257) & 0xFFFFFFFFFFFFFFFELL;
  v14 = v13 >= v12;
  v15 = v13 - v12;
  if (v14)
  {
    v16 = v15 + 2;
    if (v15 <= 0xFFFFFFFFFFFFFFFDLL && v16 <= v11)
    {
      *(_WORD *)(v12 + v15) = 2823;
      if (v16 < v11)
      {
LABEL_16:
        *(_BYTE *)(v12 + v16) = a2;
        return result;
      }
      *(_WORD *)(v12 + v15) = 2821;
    }
  }
  else if (v11)
  {
    v16 = 0;
    goto LABEL_16;
  }
LABEL_20:
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 2823;
  *(_QWORD *)(v18 + 8) = v3;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  v22 = (IPC::Encoder *)v18;
  *IPC::Encoder::grow((IPC::Encoder *)v18, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v22, 0, 0);
  result = v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL20GetSamplerParameterfEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvfEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJfEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B5580;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL20GetSamplerParameterfEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvfEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJfEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B5580;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL20GetSamplerParameterfEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvfEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJfEE4callEf(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _WORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  float *v18;
  BOOL v20;
  unint64_t v21;
  uint64_t v23;
  void *v24;
  WTF *v25;
  void *v26;
  IPC::Encoder *v27;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v27, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v27);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 112))
  {
    v10 = *(_QWORD *)(v2 + 48);
    v9 = *(_QWORD *)(v2 + 56);
    v7 = *(_QWORD *)(v9 + 8);
    v11 = v10 - 1;
    if (v10 == 1)
    {
      if (v7 >= 0x100)
      {
        v11 = 0;
        v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
        v12 = v7 + 256;
        v13 = (_WORD *)((v7 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v14 = (unint64_t)v13 - v12;
        if ((unint64_t)v13 < v12)
        {
          v15 = 0;
        }
        else
        {
          v15 = v14 + 2;
          if (v14 > 0xFFFFFFFFFFFFFFFDLL || v15 > v11)
          {
            v17 = 0;
            v15 = 0;
LABEL_16:
            v18 = (float *)((v12 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL);
            if ((unint64_t)v18 >= v12 + v15)
            {
              if ((unint64_t)v18 - v12 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)v18 - v12 + 4 > v17)
              {
LABEL_23:
                v20 = (unint64_t)v13 >= v12;
                v21 = (unint64_t)v13 - v12;
                if (v20 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11)
                  *(_WORD *)(v12 + v21) = 2821;
                goto LABEL_30;
              }
              *v18 = a2;
            }
            if (v17)
              return result;
            goto LABEL_23;
          }
          *v13 = 2823;
        }
        v17 = v11;
        goto LABEL_16;
      }
    }
    else
    {
      v8 = v7 - 256;
      if (v7 >= 0x100)
      {
        v7 = *(_QWORD *)(v9 + 16);
        if (!v10)
        {
LABEL_8:
          v11 = v8;
          goto LABEL_9;
        }
        if (v8 >= v11)
          goto LABEL_9;
      }
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
LABEL_30:
  v23 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v23 = 2823;
  *(_QWORD *)(v23 + 8) = v3;
  *(_QWORD *)(v23 + 528) = v23 + 16;
  *(_QWORD *)(v23 + 536) = v23 + 16;
  *(_OWORD *)(v23 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v23 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v23);
  v27 = (IPC::Encoder *)v23;
  *(float *)IPC::Encoder::grow((IPC::Encoder *)v23, 4uLL, 4) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v27, 0, 0);
  result = v27;
  v27 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v24);
    return (IPC::Encoder *)WTF::fastFree(v25, v26);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL20GetSamplerParameteriEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B55A8;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL20GetSamplerParameteriEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B55A8;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL20GetSamplerParameteriEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEE4callEi(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _WORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  _DWORD *v18;
  BOOL v20;
  unint64_t v21;
  uint64_t v23;
  void *v24;
  WTF *v25;
  void *v26;
  IPC::Encoder *v27;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v27, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v27);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 112))
  {
    v10 = *(_QWORD *)(v2 + 48);
    v9 = *(_QWORD *)(v2 + 56);
    v7 = *(_QWORD *)(v9 + 8);
    v11 = v10 - 1;
    if (v10 == 1)
    {
      if (v7 >= 0x100)
      {
        v11 = 0;
        v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
        v12 = v7 + 256;
        v13 = (_WORD *)((v7 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v14 = (unint64_t)v13 - v12;
        if ((unint64_t)v13 < v12)
        {
          v15 = 0;
        }
        else
        {
          v15 = v14 + 2;
          if (v14 > 0xFFFFFFFFFFFFFFFDLL || v15 > v11)
          {
            v17 = 0;
            v15 = 0;
LABEL_16:
            v18 = (_DWORD *)((v12 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL);
            if ((unint64_t)v18 >= v12 + v15)
            {
              if ((unint64_t)v18 - v12 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)v18 - v12 + 4 > v17)
              {
LABEL_23:
                v20 = (unint64_t)v13 >= v12;
                v21 = (unint64_t)v13 - v12;
                if (v20 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11)
                  *(_WORD *)(v12 + v21) = 2821;
                goto LABEL_30;
              }
              *v18 = a2;
            }
            if (v17)
              return result;
            goto LABEL_23;
          }
          *v13 = 2823;
        }
        v17 = v11;
        goto LABEL_16;
      }
    }
    else
    {
      v8 = v7 - 256;
      if (v7 >= 0x100)
      {
        v7 = *(_QWORD *)(v9 + 16);
        if (!v10)
        {
LABEL_8:
          v11 = v8;
          goto LABEL_9;
        }
        if (v8 >= v11)
          goto LABEL_9;
      }
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
LABEL_30:
  v23 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v23 = 2823;
  *(_QWORD *)(v23 + 8) = v3;
  *(_QWORD *)(v23 + 528) = v23 + 16;
  *(_QWORD *)(v23 + 536) = v23 + 16;
  *(_OWORD *)(v23 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v23 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v23);
  v27 = (IPC::Encoder *)v23;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v23, 4uLL, 4) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v27, 0, 0);
  result = v27;
  v27 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v24);
    return (IPC::Encoder *)WTF::fastFree(v25, v26);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9FenceSyncEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvyEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B55D0;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9FenceSyncEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvyEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B55D0;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9FenceSyncEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvyEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEE4callEy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _WORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  _QWORD *v18;
  BOOL v20;
  unint64_t v21;
  uint64_t v23;
  void *v24;
  WTF *v25;
  void *v26;
  IPC::Encoder *v27;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v27, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v27);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 112))
  {
    v10 = *(_QWORD *)(v2 + 48);
    v9 = *(_QWORD *)(v2 + 56);
    v7 = *(_QWORD *)(v9 + 8);
    v11 = v10 - 1;
    if (v10 == 1)
    {
      if (v7 >= 0x100)
      {
        v11 = 0;
        v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
        v12 = v7 + 256;
        v13 = (_WORD *)((v7 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v14 = (unint64_t)v13 - v12;
        if ((unint64_t)v13 < v12)
        {
          v15 = 0;
        }
        else
        {
          v15 = v14 + 2;
          if (v14 > 0xFFFFFFFFFFFFFFFDLL || v15 > v11)
          {
            v17 = 0;
            v15 = 0;
LABEL_16:
            v18 = (_QWORD *)((v12 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
            if ((unint64_t)v18 >= v12 + v15)
            {
              if ((unint64_t)v18 - v12 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v18 - v12 + 8 > v17)
              {
LABEL_23:
                v20 = (unint64_t)v13 >= v12;
                v21 = (unint64_t)v13 - v12;
                if (v20 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11)
                  *(_WORD *)(v12 + v21) = 2821;
                goto LABEL_30;
              }
              *v18 = a2;
            }
            if (v17)
              return result;
            goto LABEL_23;
          }
          *v13 = 2823;
        }
        v17 = v11;
        goto LABEL_16;
      }
    }
    else
    {
      v8 = v7 - 256;
      if (v7 >= 0x100)
      {
        v7 = *(_QWORD *)(v9 + 16);
        if (!v10)
        {
LABEL_8:
          v11 = v8;
          goto LABEL_9;
        }
        if (v8 >= v11)
          goto LABEL_9;
      }
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
LABEL_30:
  v23 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v23 = 2823;
  *(_QWORD *)(v23 + 8) = v3;
  *(_QWORD *)(v23 + 528) = v23 + 16;
  *(_QWORD *)(v23 + 536) = v23 + 16;
  *(_OWORD *)(v23 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v23 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v23);
  v27 = (IPC::Encoder *)v23;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v23, 8uLL, 8) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v27, 0, 0);
  result = v27;
  v27 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v24);
    return (IPC::Encoder *)WTF::fastFree(v25, v26);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL6IsSyncEN6WebKit23RemoteGraphicsContextGLES8_FvyONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B55F8;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL6IsSyncEN6WebKit23RemoteGraphicsContextGLES8_FvyONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B55F8;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL6IsSyncEN6WebKit23RemoteGraphicsContextGLES8_FvyONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  void *v19;
  WTF *v20;
  void *v21;
  IPC::Encoder *v22;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v22, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v22);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v2 + 112))
    goto LABEL_20;
  v10 = *(_QWORD *)(v2 + 48);
  v9 = *(_QWORD *)(v2 + 56);
  v7 = *(_QWORD *)(v9 + 8);
  v11 = v10 - 1;
  if (v10 != 1)
  {
    v8 = v7 - 256;
    if (v7 >= 0x100)
    {
      v7 = *(_QWORD *)(v9 + 16);
      if (!v10)
      {
LABEL_8:
        v11 = v8;
        goto LABEL_9;
      }
      if (v8 >= v11)
        goto LABEL_9;
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v7 < 0x100)
    goto LABEL_7;
  v11 = 0;
  v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
  v12 = v7 + 256;
  v13 = (v7 + 257) & 0xFFFFFFFFFFFFFFFELL;
  v14 = v13 >= v12;
  v15 = v13 - v12;
  if (v14)
  {
    v16 = v15 + 2;
    if (v15 <= 0xFFFFFFFFFFFFFFFDLL && v16 <= v11)
    {
      *(_WORD *)(v12 + v15) = 2823;
      if (v16 < v11)
      {
LABEL_16:
        *(_BYTE *)(v12 + v16) = a2;
        return result;
      }
      *(_WORD *)(v12 + v15) = 2821;
    }
  }
  else if (v11)
  {
    v16 = 0;
    goto LABEL_16;
  }
LABEL_20:
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 2823;
  *(_QWORD *)(v18 + 8) = v3;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  v22 = (IPC::Encoder *)v18;
  *IPC::Encoder::grow((IPC::Encoder *)v18, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v22, 0, 0);
  result = v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL14ClientWaitSyncEN6WebKit23RemoteGraphicsContextGLES8_FvyjyONS_17CompletionHandlerIFvjEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJjEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B5620;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL14ClientWaitSyncEN6WebKit23RemoteGraphicsContextGLES8_FvyjyONS_17CompletionHandlerIFvjEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJjEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B5620;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL14ClientWaitSyncEN6WebKit23RemoteGraphicsContextGLES8_FvyjyONS_17CompletionHandlerIFvjEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJjEE4callEj(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _WORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  _DWORD *v18;
  BOOL v20;
  unint64_t v21;
  uint64_t v23;
  void *v24;
  WTF *v25;
  void *v26;
  IPC::Encoder *v27;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v27, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v27);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 112))
  {
    v10 = *(_QWORD *)(v2 + 48);
    v9 = *(_QWORD *)(v2 + 56);
    v7 = *(_QWORD *)(v9 + 8);
    v11 = v10 - 1;
    if (v10 == 1)
    {
      if (v7 >= 0x100)
      {
        v11 = 0;
        v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
        v12 = v7 + 256;
        v13 = (_WORD *)((v7 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v14 = (unint64_t)v13 - v12;
        if ((unint64_t)v13 < v12)
        {
          v15 = 0;
        }
        else
        {
          v15 = v14 + 2;
          if (v14 > 0xFFFFFFFFFFFFFFFDLL || v15 > v11)
          {
            v17 = 0;
            v15 = 0;
LABEL_16:
            v18 = (_DWORD *)((v12 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL);
            if ((unint64_t)v18 >= v12 + v15)
            {
              if ((unint64_t)v18 - v12 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)v18 - v12 + 4 > v17)
              {
LABEL_23:
                v20 = (unint64_t)v13 >= v12;
                v21 = (unint64_t)v13 - v12;
                if (v20 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11)
                  *(_WORD *)(v12 + v21) = 2821;
                goto LABEL_30;
              }
              *v18 = a2;
            }
            if (v17)
              return result;
            goto LABEL_23;
          }
          *v13 = 2823;
        }
        v17 = v11;
        goto LABEL_16;
      }
    }
    else
    {
      v8 = v7 - 256;
      if (v7 >= 0x100)
      {
        v7 = *(_QWORD *)(v9 + 16);
        if (!v10)
        {
LABEL_8:
          v11 = v8;
          goto LABEL_9;
        }
        if (v8 >= v11)
          goto LABEL_9;
      }
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
LABEL_30:
  v23 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v23 = 2823;
  *(_QWORD *)(v23 + 8) = v3;
  *(_QWORD *)(v23 + 528) = v23 + 16;
  *(_QWORD *)(v23 + 536) = v23 + 16;
  *(_OWORD *)(v23 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v23 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v23);
  v27 = (IPC::Encoder *)v23;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v23, 4uLL, 4) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v27, 0, 0);
  result = v27;
  v27 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v24);
    return (IPC::Encoder *)WTF::fastFree(v25, v26);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL8GetSynciEN6WebKit23RemoteGraphicsContextGLES8_FvyjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B5648;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL8GetSynciEN6WebKit23RemoteGraphicsContextGLES8_FvyjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B5648;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL8GetSynciEN6WebKit23RemoteGraphicsContextGLES8_FvyjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEE4callEi(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _WORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  _DWORD *v18;
  BOOL v20;
  unint64_t v21;
  uint64_t v23;
  void *v24;
  WTF *v25;
  void *v26;
  IPC::Encoder *v27;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v27, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v27);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 112))
  {
    v10 = *(_QWORD *)(v2 + 48);
    v9 = *(_QWORD *)(v2 + 56);
    v7 = *(_QWORD *)(v9 + 8);
    v11 = v10 - 1;
    if (v10 == 1)
    {
      if (v7 >= 0x100)
      {
        v11 = 0;
        v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
        v12 = v7 + 256;
        v13 = (_WORD *)((v7 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v14 = (unint64_t)v13 - v12;
        if ((unint64_t)v13 < v12)
        {
          v15 = 0;
        }
        else
        {
          v15 = v14 + 2;
          if (v14 > 0xFFFFFFFFFFFFFFFDLL || v15 > v11)
          {
            v17 = 0;
            v15 = 0;
LABEL_16:
            v18 = (_DWORD *)((v12 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL);
            if ((unint64_t)v18 >= v12 + v15)
            {
              if ((unint64_t)v18 - v12 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)v18 - v12 + 4 > v17)
              {
LABEL_23:
                v20 = (unint64_t)v13 >= v12;
                v21 = (unint64_t)v13 - v12;
                if (v20 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11)
                  *(_WORD *)(v12 + v21) = 2821;
                goto LABEL_30;
              }
              *v18 = a2;
            }
            if (v17)
              return result;
            goto LABEL_23;
          }
          *v13 = 2823;
        }
        v17 = v11;
        goto LABEL_16;
      }
    }
    else
    {
      v8 = v7 - 256;
      if (v7 >= 0x100)
      {
        v7 = *(_QWORD *)(v9 + 16);
        if (!v10)
        {
LABEL_8:
          v11 = v8;
          goto LABEL_9;
        }
        if (v8 >= v11)
          goto LABEL_9;
      }
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
LABEL_30:
  v23 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v23 = 2823;
  *(_QWORD *)(v23 + 8) = v3;
  *(_QWORD *)(v23 + 528) = v23 + 16;
  *(_QWORD *)(v23 + 536) = v23 + 16;
  *(_OWORD *)(v23 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v23 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v23);
  v27 = (IPC::Encoder *)v23;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v23, 4uLL, 4) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v27, 0, 0);
  result = v27;
  v27 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v24);
    return (IPC::Encoder *)WTF::fastFree(v25, v26);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL19IsTransformFeedbackEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B5670;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL19IsTransformFeedbackEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B5670;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL19IsTransformFeedbackEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  void *v19;
  WTF *v20;
  void *v21;
  IPC::Encoder *v22;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v22, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v22);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v2 + 112))
    goto LABEL_20;
  v10 = *(_QWORD *)(v2 + 48);
  v9 = *(_QWORD *)(v2 + 56);
  v7 = *(_QWORD *)(v9 + 8);
  v11 = v10 - 1;
  if (v10 != 1)
  {
    v8 = v7 - 256;
    if (v7 >= 0x100)
    {
      v7 = *(_QWORD *)(v9 + 16);
      if (!v10)
      {
LABEL_8:
        v11 = v8;
        goto LABEL_9;
      }
      if (v8 >= v11)
        goto LABEL_9;
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v7 < 0x100)
    goto LABEL_7;
  v11 = 0;
  v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
  v12 = v7 + 256;
  v13 = (v7 + 257) & 0xFFFFFFFFFFFFFFFELL;
  v14 = v13 >= v12;
  v15 = v13 - v12;
  if (v14)
  {
    v16 = v15 + 2;
    if (v15 <= 0xFFFFFFFFFFFFFFFDLL && v16 <= v11)
    {
      *(_WORD *)(v12 + v15) = 2823;
      if (v16 < v11)
      {
LABEL_16:
        *(_BYTE *)(v12 + v16) = a2;
        return result;
      }
      *(_WORD *)(v12 + v15) = 2821;
    }
  }
  else if (v11)
  {
    v16 = 0;
    goto LABEL_16;
  }
LABEL_20:
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 2823;
  *(_QWORD *)(v18 + 8) = v3;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  v22 = (IPC::Encoder *)v18;
  *IPC::Encoder::grow((IPC::Encoder *)v18, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v22, 0, 0);
  result = v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL27GetTransformFeedbackVaryingEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvON7WebCore27GraphicsContextGLActiveInfoEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B5698;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL27GetTransformFeedbackVaryingEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvON7WebCore27GraphicsContextGLActiveInfoEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B5698;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL27GetTransformFeedbackVaryingEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvON7WebCore27GraphicsContextGLActiveInfoEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EE4callESC_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  IPC::Encoder *v11;
  char *v12;
  unint64_t v13;
  IPC::Encoder *result;
  uint64_t v16;
  void *v17;
  WTF *v18;
  void *v19;
  IPC::Encoder *v20;
  unint64_t v21;
  unint64_t v22;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v20, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v20);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_8;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 112))
  {
    v8 = *(_QWORD *)(v2 + 48);
    v6 = *(unint64_t **)(v2 + 56);
    v7 = v6[1];
    v9 = v8 - 1;
    if (v8 == 1)
    {
      if (v7 >= 0x100)
      {
        v9 = 0;
        v6 = (unint64_t *)v6[2];
LABEL_10:
        v11 = (IPC::Encoder *)(v6 + 32);
        v20 = v11;
        v21 = v9;
        v22 = 0;
        v12 = (char *)(((unint64_t)v6 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v13 = v12 - (char *)v11;
        if (v12 >= (char *)v11)
        {
          if (v13 <= 0xFFFFFFFFFFFFFFFDLL && v13 + 2 <= v9)
          {
            *(_WORD *)v12 = 2823;
            v22 = v13 + 2;
            result = (IPC::Encoder *)IPC::ArgumentCoder<WebCore::GraphicsContextGLActiveInfo,void>::encode(&v20, (uint64_t)a2);
            if (v21)
              return result;
            *(_WORD *)((char *)v11 + v13) = 2821;
            goto LABEL_17;
          }
          v21 = 0;
        }
        result = (IPC::Encoder *)IPC::ArgumentCoder<WebCore::GraphicsContextGLActiveInfo,void>::encode(&v20, (uint64_t)a2);
        if (v21)
          return result;
        goto LABEL_17;
      }
    }
    else
    {
      v10 = v7 >= 0x100;
      v7 -= 256;
      if (v10)
      {
        v6 = (unint64_t *)v6[2];
        if (!v8)
        {
LABEL_9:
          v9 = v7;
          goto LABEL_10;
        }
        if (v7 >= v9)
          goto LABEL_10;
      }
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
LABEL_17:
  v16 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v16 = 2823;
  *(_QWORD *)(v16 + 8) = v3;
  *(_QWORD *)(v16 + 528) = v16 + 16;
  *(_QWORD *)(v16 + 536) = v16 + 16;
  *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v16 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
  v20 = (IPC::Encoder *)v16;
  IPC::ArgumentCoder<WebCore::GraphicsContextGLActiveInfo,void>::encode((IPC::Encoder *)v16, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v20, 0, 0);
  result = v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v17);
    return (IPC::Encoder *)WTF::fastFree(v18, v19);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL17GetUniformIndicesEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONS9_IjLm0ESB_Lm16ESC_EEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B56C0;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL17GetUniformIndicesEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONS9_IjLm0ESB_Lm16ESC_EEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B56C0;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL17GetUniformIndicesEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONS9_IjLm0ESB_Lm16ESC_EEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  char *v11;
  char *v12;
  unint64_t v13;
  IPC::Encoder *result;
  unint64_t v16;
  uint64_t v18;
  void *v19;
  WTF *v20;
  void *v21;
  IPC::Encoder *v22;
  unint64_t v23;
  unint64_t v24;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v22, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v22);
  v7 = (char *)*(unsigned __int8 *)(a1 + 16);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_8;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v2 + 112))
  {
LABEL_24:
    v18 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v18 = 2823;
    *(_QWORD *)(v18 + 8) = v3;
    *(_QWORD *)(v18 + 528) = v18 + 16;
    *(_QWORD *)(v18 + 536) = v18 + 16;
    *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v18 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
    v22 = (IPC::Encoder *)v18;
    IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>((IPC::Encoder *)v18, *(const void **)a2, *(unsigned int *)(a2 + 12));
    IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v22, 0, 0);
    result = v22;
    v22 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v19);
      return (IPC::Encoder *)WTF::fastFree(v20, v21);
    }
    return result;
  }
  v8 = *(_QWORD *)(v2 + 48);
  v7 = *(char **)(v2 + 56);
  v6 = *((_QWORD *)v7 + 1);
  v9 = v8 - 1;
  if (v8 != 1)
  {
    v10 = v6 >= 0x100;
    v6 -= 256;
    if (v10)
    {
      v7 = (char *)*((_QWORD *)v7 + 2);
      if (!v8)
      {
LABEL_9:
        v9 = v6;
        goto LABEL_10;
      }
      if (v6 >= v9)
        goto LABEL_10;
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v6 < 0x100)
    goto LABEL_8;
  v9 = 0;
  v7 = (char *)*((_QWORD *)v7 + 2);
LABEL_10:
  v11 = v7 + 256;
  v22 = (IPC::Encoder *)(v7 + 256);
  v23 = v9;
  v24 = 0;
  v12 = (char *)((unint64_t)(v7 + 257) & 0xFFFFFFFFFFFFFFFELL);
  v10 = v12 >= v7 + 256;
  v13 = v12 - (v7 + 256);
  if (v10)
  {
    if (v13 > 0xFFFFFFFFFFFFFFFDLL || v13 + 2 > v9)
    {
      v23 = 0;
    }
    else
    {
      *(_WORD *)&v11[v13] = 2823;
      v24 = v13 + 2;
    }
  }
  result = (IPC::Encoder *)IPC::ArgumentCoder<std::span<unsigned int const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v22, *(const void **)a2, *(unsigned int *)(a2 + 12));
  if (!v23)
  {
    v16 = v12 - v11;
    if (v12 >= v11 && v16 <= 0xFFFFFFFFFFFFFFFDLL && v16 + 2 <= v9)
      *(_WORD *)v12 = 2821;
    goto LABEL_24;
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL17GetActiveUniformsEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_6VectorIjLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEjONS_17CompletionHandlerIFvONS9_IiLm0ESA_Lm16ESB_EEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B56E8;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL17GetActiveUniformsEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_6VectorIjLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEjONS_17CompletionHandlerIFvONS9_IiLm0ESA_Lm16ESB_EEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B56E8;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL17GetActiveUniformsEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_6VectorIjLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEjONS_17CompletionHandlerIFvONS9_IiLm0ESA_Lm16ESB_EEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EE4callESG_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  char *v11;
  char *v12;
  unint64_t v13;
  IPC::Encoder *result;
  unint64_t v16;
  uint64_t v18;
  void *v19;
  WTF *v20;
  void *v21;
  IPC::Encoder *v22;
  unint64_t v23;
  unint64_t v24;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v22, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v22);
  v7 = (char *)*(unsigned __int8 *)(a1 + 16);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_8;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v2 + 112))
  {
LABEL_24:
    v18 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v18 = 2823;
    *(_QWORD *)(v18 + 8) = v3;
    *(_QWORD *)(v18 + 528) = v18 + 16;
    *(_QWORD *)(v18 + 536) = v18 + 16;
    *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v18 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
    v22 = (IPC::Encoder *)v18;
    IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>((IPC::Encoder *)v18, *(const void **)a2, *(unsigned int *)(a2 + 12));
    IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v22, 0, 0);
    result = v22;
    v22 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v19);
      return (IPC::Encoder *)WTF::fastFree(v20, v21);
    }
    return result;
  }
  v8 = *(_QWORD *)(v2 + 48);
  v7 = *(char **)(v2 + 56);
  v6 = *((_QWORD *)v7 + 1);
  v9 = v8 - 1;
  if (v8 != 1)
  {
    v10 = v6 >= 0x100;
    v6 -= 256;
    if (v10)
    {
      v7 = (char *)*((_QWORD *)v7 + 2);
      if (!v8)
      {
LABEL_9:
        v9 = v6;
        goto LABEL_10;
      }
      if (v6 >= v9)
        goto LABEL_10;
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v6 < 0x100)
    goto LABEL_8;
  v9 = 0;
  v7 = (char *)*((_QWORD *)v7 + 2);
LABEL_10:
  v11 = v7 + 256;
  v22 = (IPC::Encoder *)(v7 + 256);
  v23 = v9;
  v24 = 0;
  v12 = (char *)((unint64_t)(v7 + 257) & 0xFFFFFFFFFFFFFFFELL);
  v10 = v12 >= v7 + 256;
  v13 = v12 - (v7 + 256);
  if (v10)
  {
    if (v13 > 0xFFFFFFFFFFFFFFFDLL || v13 + 2 > v9)
    {
      v23 = 0;
    }
    else
    {
      *(_WORD *)&v11[v13] = 2823;
      v24 = v13 + 2;
    }
  }
  result = (IPC::Encoder *)IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v22, *(const void **)a2, *(unsigned int *)(a2 + 12));
  if (!v23)
  {
    v16 = v12 - v11;
    if (v12 >= v11 && v16 <= 0xFFFFFFFFFFFFFFFDLL && v16 + 2 <= v9)
      *(_WORD *)v12 = 2821;
    goto LABEL_24;
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL20GetUniformBlockIndexEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_6StringEONS_17CompletionHandlerIFvjEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJjEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B5710;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL20GetUniformBlockIndexEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_6StringEONS_17CompletionHandlerIFvjEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJjEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B5710;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL20GetUniformBlockIndexEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_6StringEONS_17CompletionHandlerIFvjEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJjEE4callEj(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _WORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  _DWORD *v18;
  BOOL v20;
  unint64_t v21;
  uint64_t v23;
  void *v24;
  WTF *v25;
  void *v26;
  IPC::Encoder *v27;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v27, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v27);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 112))
  {
    v10 = *(_QWORD *)(v2 + 48);
    v9 = *(_QWORD *)(v2 + 56);
    v7 = *(_QWORD *)(v9 + 8);
    v11 = v10 - 1;
    if (v10 == 1)
    {
      if (v7 >= 0x100)
      {
        v11 = 0;
        v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
        v12 = v7 + 256;
        v13 = (_WORD *)((v7 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v14 = (unint64_t)v13 - v12;
        if ((unint64_t)v13 < v12)
        {
          v15 = 0;
        }
        else
        {
          v15 = v14 + 2;
          if (v14 > 0xFFFFFFFFFFFFFFFDLL || v15 > v11)
          {
            v17 = 0;
            v15 = 0;
LABEL_16:
            v18 = (_DWORD *)((v12 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL);
            if ((unint64_t)v18 >= v12 + v15)
            {
              if ((unint64_t)v18 - v12 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)v18 - v12 + 4 > v17)
              {
LABEL_23:
                v20 = (unint64_t)v13 >= v12;
                v21 = (unint64_t)v13 - v12;
                if (v20 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11)
                  *(_WORD *)(v12 + v21) = 2821;
                goto LABEL_30;
              }
              *v18 = a2;
            }
            if (v17)
              return result;
            goto LABEL_23;
          }
          *v13 = 2823;
        }
        v17 = v11;
        goto LABEL_16;
      }
    }
    else
    {
      v8 = v7 - 256;
      if (v7 >= 0x100)
      {
        v7 = *(_QWORD *)(v9 + 16);
        if (!v10)
        {
LABEL_8:
          v11 = v8;
          goto LABEL_9;
        }
        if (v8 >= v11)
          goto LABEL_9;
      }
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
LABEL_30:
  v23 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v23 = 2823;
  *(_QWORD *)(v23 + 8) = v3;
  *(_QWORD *)(v23 + 528) = v23 + 16;
  *(_QWORD *)(v23 + 536) = v23 + 16;
  *(_OWORD *)(v23 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v23 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v23);
  v27 = (IPC::Encoder *)v23;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v23, 4uLL, 4) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v27, 0, 0);
  result = v27;
  v27 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v24);
    return (IPC::Encoder *)WTF::fastFree(v25, v26);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL25GetActiveUniformBlockNameEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B5738;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL25GetActiveUniformBlockNameEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B5738;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL25GetActiveUniformBlockNameEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EE4callESB_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  IPC::Encoder *v11;
  char *v12;
  unint64_t v13;
  IPC::Encoder *result;
  uint64_t v16;
  void *v17;
  WTF *v18;
  void *v19;
  IPC::Encoder *v20;
  unint64_t v21;
  unint64_t v22;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v20, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v20);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_8;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 112))
  {
    v8 = *(_QWORD *)(v2 + 48);
    v6 = *(unint64_t **)(v2 + 56);
    v7 = v6[1];
    v9 = v8 - 1;
    if (v8 == 1)
    {
      if (v7 >= 0x100)
      {
        v9 = 0;
        v6 = (unint64_t *)v6[2];
LABEL_10:
        v11 = (IPC::Encoder *)(v6 + 32);
        v20 = v11;
        v21 = v9;
        v22 = 0;
        v12 = (char *)(((unint64_t)v6 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v13 = v12 - (char *)v11;
        if (v12 >= (char *)v11)
        {
          if (v13 <= 0xFFFFFFFFFFFFFFFDLL && v13 + 2 <= v9)
          {
            *(_WORD *)v12 = 2823;
            v22 = v13 + 2;
            result = (IPC::Encoder *)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v20, a2);
            if (v21)
              return result;
            *(_WORD *)((char *)v11 + v13) = 2821;
            goto LABEL_17;
          }
          v21 = 0;
        }
        result = (IPC::Encoder *)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v20, a2);
        if (v21)
          return result;
        goto LABEL_17;
      }
    }
    else
    {
      v10 = v7 >= 0x100;
      v7 -= 256;
      if (v10)
      {
        v6 = (unint64_t *)v6[2];
        if (!v8)
        {
LABEL_9:
          v9 = v7;
          goto LABEL_10;
        }
        if (v7 >= v9)
          goto LABEL_10;
      }
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
LABEL_17:
  v16 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v16 = 2823;
  *(_QWORD *)(v16 + 8) = v3;
  *(_QWORD *)(v16 + 528) = v16 + 16;
  *(_QWORD *)(v16 + 536) = v16 + 16;
  *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v16 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
  v20 = (IPC::Encoder *)v16;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v16, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v20, 0, 0);
  result = v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v17);
    return (IPC::Encoder *)WTF::fastFree(v18, v19);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,unsigned int,unsigned long>>(uint64_t result, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int *v6;
  unint64_t v7;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;

  v2 = a2[1];
  v3 = *a2;
  v4 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v2 < v4 || v2 - v4 <= 3)
  {
    v24 = 0;
    v25 = 0;
    *a2 = 0;
    a2[1] = 0;
    v26 = a2[3];
    if (v26)
    {
      v31 = a2;
      v33 = result;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, v3);
        a2 = v31;
        result = v33;
        v25 = *v31;
        v24 = v31[1];
      }
      else
      {
        v24 = 0;
        v25 = 0;
      }
    }
LABEL_30:
    *a2 = 0;
    a2[1] = 0;
    v27 = a2[3];
    if (v27 && v24)
    {
      v30 = a2;
      v32 = result;
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v27 + 16))(v27, v25, v24);
      goto LABEL_36;
    }
    goto LABEL_31;
  }
  v6 = (int *)(v3 + v4);
  a2[2] = v6 + 1;
  if (!v3)
  {
    v24 = v2;
    v25 = 0;
    goto LABEL_30;
  }
  v7 = (((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v3;
  if (v2 >= v7 && v2 - v7 > 3)
  {
    v9 = *v6;
    a2[2] = v3 + v7 + 4;
    v11 = v3 + v7 + 7;
    v10 = *(_DWORD *)(v3 + v7);
    v12 = (v11 & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 >= v12 && v2 - v12 > 3)
    {
      a2[2] = v3 + v12 + 4;
      v15 = v3 + v12 + 11;
      v14 = *(_DWORD *)(v3 + v12);
      v16 = (v15 & 0xFFFFFFFFFFFFFFF8) - v3;
      if (v2 >= v16 && v2 - v16 > 7)
      {
        v18 = (uint64_t *)(v3 + v16);
        v19 = *v18;
        a2[2] = v18 + 1;
        *(_DWORD *)result = v9;
        *(_DWORD *)(result + 4) = v10;
        *(_DWORD *)(result + 8) = v14;
        *(_QWORD *)(result + 16) = v19;
        *(_BYTE *)(result + 24) = 1;
        return result;
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
  v20 = a2[3];
  if (v20)
  {
    if (v2)
    {
      v30 = a2;
      v32 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v3);
      a2 = v30;
      result = v32;
      v22 = *v30;
      v21 = v30[1];
      v23 = v30[3];
      *v30 = 0;
      v30[1] = 0;
      if (v23)
      {
        if (v21)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v22);
LABEL_36:
          a2 = v30;
          result = v32;
        }
      }
    }
  }
LABEL_31:
  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 24) = 0;
  v29 = *a2;
  v28 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v28)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v29);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL23GetActiveUniformBlockivEN6WebKit23RemoteGraphicsContextGLES8_FvjjjmONS_17CompletionHandlerIFvNSt3__14spanIKiLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B5760;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL23GetActiveUniformBlockivEN6WebKit23RemoteGraphicsContextGLES8_FvjjjmONS_17CompletionHandlerIFvNSt3__14spanIKiLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B5760;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL23GetActiveUniformBlockivEN6WebKit23RemoteGraphicsContextGLES8_FvjjjmONS_17CompletionHandlerIFvNSt3__14spanIKiLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  IPC::Encoder *v13;
  char *v14;
  unint64_t v15;
  IPC::Encoder *result;
  uint64_t v18;
  void *v19;
  WTF *v20;
  void *v21;
  IPC::Encoder *v22;
  unint64_t v23;
  unint64_t v24;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v22, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v22);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_8;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v3 + 112))
  {
    v10 = *(_QWORD *)(v3 + 48);
    v8 = *(unint64_t **)(v3 + 56);
    v9 = v8[1];
    v11 = v10 - 1;
    if (v10 == 1)
    {
      if (v9 >= 0x100)
      {
        v11 = 0;
        v8 = (unint64_t *)v8[2];
LABEL_10:
        v13 = (IPC::Encoder *)(v8 + 32);
        v22 = v13;
        v23 = v11;
        v24 = 0;
        v14 = (char *)(((unint64_t)v8 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v15 = v14 - (char *)v13;
        if (v14 >= (char *)v13)
        {
          if (v15 <= 0xFFFFFFFFFFFFFFFDLL && v15 + 2 <= v11)
          {
            *(_WORD *)v14 = 2823;
            v24 = v15 + 2;
            result = (IPC::Encoder *)IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v22, a2, a3);
            if (v23)
              return result;
            *(_WORD *)((char *)v13 + v15) = 2821;
            goto LABEL_17;
          }
          v23 = 0;
        }
        result = (IPC::Encoder *)IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v22, a2, a3);
        if (v23)
          return result;
        goto LABEL_17;
      }
    }
    else
    {
      v12 = v9 >= 0x100;
      v9 -= 256;
      if (v12)
      {
        v8 = (unint64_t *)v8[2];
        if (!v10)
        {
LABEL_9:
          v11 = v9;
          goto LABEL_10;
        }
        if (v9 >= v11)
          goto LABEL_10;
      }
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
LABEL_17:
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 2823;
  *(_QWORD *)(v18 + 8) = v4;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  v22 = (IPC::Encoder *)v18;
  IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>((IPC::Encoder *)v18, a2, a3);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v3 + 32), (uint64_t *)&v22, 0, 0);
  result = v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL30GetTranslatedShaderSourceANGLEEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B5788;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL30GetTranslatedShaderSourceANGLEEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B5788;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL30GetTranslatedShaderSourceANGLEEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EE4callESB_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  IPC::Encoder *v11;
  char *v12;
  unint64_t v13;
  IPC::Encoder *result;
  uint64_t v16;
  void *v17;
  WTF *v18;
  void *v19;
  IPC::Encoder *v20;
  unint64_t v21;
  unint64_t v22;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v20, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v20);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_8;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 112))
  {
    v8 = *(_QWORD *)(v2 + 48);
    v6 = *(unint64_t **)(v2 + 56);
    v7 = v6[1];
    v9 = v8 - 1;
    if (v8 == 1)
    {
      if (v7 >= 0x100)
      {
        v9 = 0;
        v6 = (unint64_t *)v6[2];
LABEL_10:
        v11 = (IPC::Encoder *)(v6 + 32);
        v20 = v11;
        v21 = v9;
        v22 = 0;
        v12 = (char *)(((unint64_t)v6 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v13 = v12 - (char *)v11;
        if (v12 >= (char *)v11)
        {
          if (v13 <= 0xFFFFFFFFFFFFFFFDLL && v13 + 2 <= v9)
          {
            *(_WORD *)v12 = 2823;
            v22 = v13 + 2;
            result = (IPC::Encoder *)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v20, a2);
            if (v21)
              return result;
            *(_WORD *)((char *)v11 + v13) = 2821;
            goto LABEL_17;
          }
          v21 = 0;
        }
        result = (IPC::Encoder *)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v20, a2);
        if (v21)
          return result;
        goto LABEL_17;
      }
    }
    else
    {
      v10 = v7 >= 0x100;
      v7 -= 256;
      if (v10)
      {
        v6 = (unint64_t *)v6[2];
        if (!v8)
        {
LABEL_9:
          v9 = v7;
          goto LABEL_10;
        }
        if (v7 >= v9)
          goto LABEL_10;
      }
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
LABEL_17:
  v16 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v16 = 2823;
  *(_QWORD *)(v16 + 8) = v3;
  *(_QWORD *)(v16 + 528) = v16 + 16;
  *(_QWORD *)(v16 + 536) = v16 + 16;
  *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v16 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
  v20 = (IPC::Encoder *)v16;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v16, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v20, 0, 0);
  result = v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v17);
    return (IPC::Encoder *)WTF::fastFree(v18, v19);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL10IsQueryEXTEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B57B0;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL10IsQueryEXTEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B57B0;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL10IsQueryEXTEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  void *v19;
  WTF *v20;
  void *v21;
  IPC::Encoder *v22;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v22, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v22);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v2 + 112))
    goto LABEL_20;
  v10 = *(_QWORD *)(v2 + 48);
  v9 = *(_QWORD *)(v2 + 56);
  v7 = *(_QWORD *)(v9 + 8);
  v11 = v10 - 1;
  if (v10 != 1)
  {
    v8 = v7 - 256;
    if (v7 >= 0x100)
    {
      v7 = *(_QWORD *)(v9 + 16);
      if (!v10)
      {
LABEL_8:
        v11 = v8;
        goto LABEL_9;
      }
      if (v8 >= v11)
        goto LABEL_9;
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v7 < 0x100)
    goto LABEL_7;
  v11 = 0;
  v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
  v12 = v7 + 256;
  v13 = (v7 + 257) & 0xFFFFFFFFFFFFFFFELL;
  v14 = v13 >= v12;
  v15 = v13 - v12;
  if (v14)
  {
    v16 = v15 + 2;
    if (v15 <= 0xFFFFFFFFFFFFFFFDLL && v16 <= v11)
    {
      *(_WORD *)(v12 + v15) = 2823;
      if (v16 < v11)
      {
LABEL_16:
        *(_BYTE *)(v12 + v16) = a2;
        return result;
      }
      *(_WORD *)(v12 + v15) = 2821;
    }
  }
  else if (v11)
  {
    v16 = 0;
    goto LABEL_16;
  }
LABEL_20:
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 2823;
  *(_QWORD *)(v18 + 8) = v3;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  v22 = (IPC::Encoder *)v18;
  *IPC::Encoder::grow((IPC::Encoder *)v18, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v22, 0, 0);
  result = v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL12GetQueryiEXTEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B57D8;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL12GetQueryiEXTEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B57D8;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL12GetQueryiEXTEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEE4callEi(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _WORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  _DWORD *v18;
  BOOL v20;
  unint64_t v21;
  uint64_t v23;
  void *v24;
  WTF *v25;
  void *v26;
  IPC::Encoder *v27;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v27, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v27);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 112))
  {
    v10 = *(_QWORD *)(v2 + 48);
    v9 = *(_QWORD *)(v2 + 56);
    v7 = *(_QWORD *)(v9 + 8);
    v11 = v10 - 1;
    if (v10 == 1)
    {
      if (v7 >= 0x100)
      {
        v11 = 0;
        v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
        v12 = v7 + 256;
        v13 = (_WORD *)((v7 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v14 = (unint64_t)v13 - v12;
        if ((unint64_t)v13 < v12)
        {
          v15 = 0;
        }
        else
        {
          v15 = v14 + 2;
          if (v14 > 0xFFFFFFFFFFFFFFFDLL || v15 > v11)
          {
            v17 = 0;
            v15 = 0;
LABEL_16:
            v18 = (_DWORD *)((v12 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL);
            if ((unint64_t)v18 >= v12 + v15)
            {
              if ((unint64_t)v18 - v12 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)v18 - v12 + 4 > v17)
              {
LABEL_23:
                v20 = (unint64_t)v13 >= v12;
                v21 = (unint64_t)v13 - v12;
                if (v20 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11)
                  *(_WORD *)(v12 + v21) = 2821;
                goto LABEL_30;
              }
              *v18 = a2;
            }
            if (v17)
              return result;
            goto LABEL_23;
          }
          *v13 = 2823;
        }
        v17 = v11;
        goto LABEL_16;
      }
    }
    else
    {
      v8 = v7 - 256;
      if (v7 >= 0x100)
      {
        v7 = *(_QWORD *)(v9 + 16);
        if (!v10)
        {
LABEL_8:
          v11 = v8;
          goto LABEL_9;
        }
        if (v8 >= v11)
          goto LABEL_9;
      }
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
LABEL_30:
  v23 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v23 = 2823;
  *(_QWORD *)(v23 + 8) = v3;
  *(_QWORD *)(v23 + 528) = v23 + 16;
  *(_QWORD *)(v23 + 536) = v23 + 16;
  *(_OWORD *)(v23 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v23 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v23);
  v27 = (IPC::Encoder *)v23;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v23, 4uLL, 4) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v27, 0, 0);
  result = v27;
  v27 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v24);
    return (IPC::Encoder *)WTF::fastFree(v25, v26);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL18GetQueryObjectiEXTEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B5800;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL18GetQueryObjectiEXTEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B5800;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL18GetQueryObjectiEXTEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEE4callEi(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _WORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  _DWORD *v18;
  BOOL v20;
  unint64_t v21;
  uint64_t v23;
  void *v24;
  WTF *v25;
  void *v26;
  IPC::Encoder *v27;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v27, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v27);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 112))
  {
    v10 = *(_QWORD *)(v2 + 48);
    v9 = *(_QWORD *)(v2 + 56);
    v7 = *(_QWORD *)(v9 + 8);
    v11 = v10 - 1;
    if (v10 == 1)
    {
      if (v7 >= 0x100)
      {
        v11 = 0;
        v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
        v12 = v7 + 256;
        v13 = (_WORD *)((v7 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v14 = (unint64_t)v13 - v12;
        if ((unint64_t)v13 < v12)
        {
          v15 = 0;
        }
        else
        {
          v15 = v14 + 2;
          if (v14 > 0xFFFFFFFFFFFFFFFDLL || v15 > v11)
          {
            v17 = 0;
            v15 = 0;
LABEL_16:
            v18 = (_DWORD *)((v12 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL);
            if ((unint64_t)v18 >= v12 + v15)
            {
              if ((unint64_t)v18 - v12 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)v18 - v12 + 4 > v17)
              {
LABEL_23:
                v20 = (unint64_t)v13 >= v12;
                v21 = (unint64_t)v13 - v12;
                if (v20 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11)
                  *(_WORD *)(v12 + v21) = 2821;
                goto LABEL_30;
              }
              *v18 = a2;
            }
            if (v17)
              return result;
            goto LABEL_23;
          }
          *v13 = 2823;
        }
        v17 = v11;
        goto LABEL_16;
      }
    }
    else
    {
      v8 = v7 - 256;
      if (v7 >= 0x100)
      {
        v7 = *(_QWORD *)(v9 + 16);
        if (!v10)
        {
LABEL_8:
          v11 = v8;
          goto LABEL_9;
        }
        if (v8 >= v11)
          goto LABEL_9;
      }
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
LABEL_30:
  v23 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v23 = 2823;
  *(_QWORD *)(v23 + 8) = v3;
  *(_QWORD *)(v23 + 528) = v23 + 16;
  *(_QWORD *)(v23 + 536) = v23 + 16;
  *(_OWORD *)(v23 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v23 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v23);
  v27 = (IPC::Encoder *)v23;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v23, 4uLL, 4) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v27, 0, 0);
  result = v27;
  v27 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v24);
    return (IPC::Encoder *)WTF::fastFree(v25, v26);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL21GetQueryObjectui64EXTEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvyEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B5828;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL21GetQueryObjectui64EXTEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvyEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B5828;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL21GetQueryObjectui64EXTEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvyEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEE4callEy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _WORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  _QWORD *v18;
  BOOL v20;
  unint64_t v21;
  uint64_t v23;
  void *v24;
  WTF *v25;
  void *v26;
  IPC::Encoder *v27;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v27, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v27);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 112))
  {
    v10 = *(_QWORD *)(v2 + 48);
    v9 = *(_QWORD *)(v2 + 56);
    v7 = *(_QWORD *)(v9 + 8);
    v11 = v10 - 1;
    if (v10 == 1)
    {
      if (v7 >= 0x100)
      {
        v11 = 0;
        v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
        v12 = v7 + 256;
        v13 = (_WORD *)((v7 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v14 = (unint64_t)v13 - v12;
        if ((unint64_t)v13 < v12)
        {
          v15 = 0;
        }
        else
        {
          v15 = v14 + 2;
          if (v14 > 0xFFFFFFFFFFFFFFFDLL || v15 > v11)
          {
            v17 = 0;
            v15 = 0;
LABEL_16:
            v18 = (_QWORD *)((v12 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
            if ((unint64_t)v18 >= v12 + v15)
            {
              if ((unint64_t)v18 - v12 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v18 - v12 + 8 > v17)
              {
LABEL_23:
                v20 = (unint64_t)v13 >= v12;
                v21 = (unint64_t)v13 - v12;
                if (v20 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11)
                  *(_WORD *)(v12 + v21) = 2821;
                goto LABEL_30;
              }
              *v18 = a2;
            }
            if (v17)
              return result;
            goto LABEL_23;
          }
          *v13 = 2823;
        }
        v17 = v11;
        goto LABEL_16;
      }
    }
    else
    {
      v8 = v7 - 256;
      if (v7 >= 0x100)
      {
        v7 = *(_QWORD *)(v9 + 16);
        if (!v10)
        {
LABEL_8:
          v11 = v8;
          goto LABEL_9;
        }
        if (v8 >= v11)
          goto LABEL_9;
      }
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
LABEL_30:
  v23 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v23 = 2823;
  *(_QWORD *)(v23 + 8) = v3;
  *(_QWORD *)(v23 + 528) = v23 + 16;
  *(_QWORD *)(v23 + 536) = v23 + 16;
  *(_OWORD *)(v23 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v23 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v23);
  v27 = (IPC::Encoder *)v23;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v23, 8uLL, 8) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v27, 0, 0);
  result = v27;
  v27 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v24);
    return (IPC::Encoder *)WTF::fastFree(v25, v26);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL15GetInteger64EXTEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvxEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJxEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B5850;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL15GetInteger64EXTEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvxEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJxEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B5850;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL15GetInteger64EXTEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvxEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJxEE4callEx(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _WORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  _QWORD *v18;
  BOOL v20;
  unint64_t v21;
  uint64_t v23;
  void *v24;
  WTF *v25;
  void *v26;
  IPC::Encoder *v27;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v27, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v27);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_7;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 112))
  {
    v10 = *(_QWORD *)(v2 + 48);
    v9 = *(_QWORD *)(v2 + 56);
    v7 = *(_QWORD *)(v9 + 8);
    v11 = v10 - 1;
    if (v10 == 1)
    {
      if (v7 >= 0x100)
      {
        v11 = 0;
        v7 = *(_QWORD *)(v9 + 16);
LABEL_9:
        v12 = v7 + 256;
        v13 = (_WORD *)((v7 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v14 = (unint64_t)v13 - v12;
        if ((unint64_t)v13 < v12)
        {
          v15 = 0;
        }
        else
        {
          v15 = v14 + 2;
          if (v14 > 0xFFFFFFFFFFFFFFFDLL || v15 > v11)
          {
            v17 = 0;
            v15 = 0;
LABEL_16:
            v18 = (_QWORD *)((v12 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
            if ((unint64_t)v18 >= v12 + v15)
            {
              if ((unint64_t)v18 - v12 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v18 - v12 + 8 > v17)
              {
LABEL_23:
                v20 = (unint64_t)v13 >= v12;
                v21 = (unint64_t)v13 - v12;
                if (v20 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11)
                  *(_WORD *)(v12 + v21) = 2821;
                goto LABEL_30;
              }
              *v18 = a2;
            }
            if (v17)
              return result;
            goto LABEL_23;
          }
          *v13 = 2823;
        }
        v17 = v11;
        goto LABEL_16;
      }
    }
    else
    {
      v8 = v7 - 256;
      if (v7 >= 0x100)
      {
        v7 = *(_QWORD *)(v9 + 16);
        if (!v10)
        {
LABEL_8:
          v11 = v8;
          goto LABEL_9;
        }
        if (v8 >= v11)
          goto LABEL_9;
      }
    }
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
LABEL_30:
  v23 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v23 = 2823;
  *(_QWORD *)(v23 + 8) = v3;
  *(_QWORD *)(v23 + 528) = v23 + 16;
  *(_QWORD *)(v23 + 536) = v23 + 16;
  *(_OWORD *)(v23 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v23 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v23);
  v27 = (IPC::Encoder *)v23;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v23, 8uLL, 8) = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v2 + 32), (uint64_t *)&v27, 0, 0);
  result = v27;
  v27 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v24);
    return (IPC::Encoder *)WTF::fastFree(v25, v26);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL19GetInternalformativEN6WebKit23RemoteGraphicsContextGLES8_FvjjjmONS_17CompletionHandlerIFvNSt3__14spanIKiLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B5878;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref((unsigned int **)(a1 + 24));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL19GetInternalformativEN6WebKit23RemoteGraphicsContextGLES8_FvjjjmONS_17CompletionHandlerIFvNSt3__14spanIKiLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34B5878;
  WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(a1 + 3);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL19GetInternalformativEN6WebKit23RemoteGraphicsContextGLES8_FvjjjmONS_17CompletionHandlerIFvNSt3__14spanIKiLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  IPC::Encoder *v13;
  char *v14;
  unint64_t v15;
  IPC::Encoder *result;
  uint64_t v18;
  void *v19;
  WTF *v20;
  void *v21;
  IPC::Encoder *v22;
  unint64_t v23;
  unint64_t v24;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v22, (uint64_t **)(*(_QWORD *)(a1 + 24) + 32));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v22);
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_8;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v3 + 112))
  {
    v10 = *(_QWORD *)(v3 + 48);
    v8 = *(unint64_t **)(v3 + 56);
    v9 = v8[1];
    v11 = v10 - 1;
    if (v10 == 1)
    {
      if (v9 >= 0x100)
      {
        v11 = 0;
        v8 = (unint64_t *)v8[2];
LABEL_10:
        v13 = (IPC::Encoder *)(v8 + 32);
        v22 = v13;
        v23 = v11;
        v24 = 0;
        v14 = (char *)(((unint64_t)v8 + 257) & 0xFFFFFFFFFFFFFFFELL);
        v15 = v14 - (char *)v13;
        if (v14 >= (char *)v13)
        {
          if (v15 <= 0xFFFFFFFFFFFFFFFDLL && v15 + 2 <= v11)
          {
            *(_WORD *)v14 = 2823;
            v24 = v15 + 2;
            result = (IPC::Encoder *)IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v22, a2, a3);
            if (v23)
              return result;
            *(_WORD *)((char *)v13 + v15) = 2821;
            goto LABEL_17;
          }
          v23 = 0;
        }
        result = (IPC::Encoder *)IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v22, a2, a3);
        if (v23)
          return result;
        goto LABEL_17;
      }
    }
    else
    {
      v12 = v9 >= 0x100;
      v9 -= 256;
      if (v12)
      {
        v8 = (unint64_t *)v8[2];
        if (!v10)
        {
LABEL_9:
          v11 = v9;
          goto LABEL_10;
        }
        if (v9 >= v11)
          goto LABEL_10;
      }
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
LABEL_17:
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 2823;
  *(_QWORD *)(v18 + 8) = v4;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  v22 = (IPC::Encoder *)v18;
  IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>((IPC::Encoder *)v18, a2, a3);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(v3 + 32), (uint64_t *)&v22, 0, 0);
  result = v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  return result;
}

void WebKit::PCM::addVersionAndEncodedMessageToDictionary(uint64_t a1, xpc_object_t xdict)
{
  void *v4;
  xpc_object_t v5;
  xpc_object_t value;

  xpc_dictionary_set_uint64(xdict, "version", 1uLL);
  WebKit::vectorToXPCData(a1, v4, &value);
  v5 = value;
  xpc_dictionary_set_value(xdict, "encoded message", value);
  if (v5)
    CFRelease(v5);
}

void sub_196FE69B8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

size_t WebKit::NetworkCache::Data::empty@<X0>(uint64_t a1@<X8>)
{
  NSObject *v3;
  id v4;
  size_t result;

  v3 = MEMORY[0x1E0C80D00];
  v4 = MEMORY[0x1E0C80D00];
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = 0;
  result = dispatch_data_get_size(v3);
  *(_QWORD *)(a1 + 16) = result;
  *(_BYTE *)(a1 + 24) = 0;
  return result;
}

NSObject *WebKit::NetworkCache::Data::span(WebKit::NetworkCache::Data *this)
{
  NSObject *result;
  dispatch_data_t v3;
  void *v4;
  size_t v5;
  void *buffer_ptr;

  result = *((_QWORD *)this + 1);
  if (!result)
  {
    result = *(NSObject **)this;
    if (*(_QWORD *)this)
    {
      v5 = 0;
      buffer_ptr = 0;
      v3 = dispatch_data_create_map(result, (const void **)&buffer_ptr, &v5);
      v4 = *(void **)this;
      *(_QWORD *)this = v3;
      if (v4)

      result = buffer_ptr;
      *((_QWORD *)this + 1) = buffer_ptr;
    }
  }
  return result;
}

uint64_t __copy_helper_block_e8_32c108_ZTSKZNK6WebKit12NetworkCache4Data5applyERKN3WTF8FunctionIFbNSt3__14spanIKhLm18446744073709551615EEEEEEE3__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

__n128 WebKit::NetworkCache::concatenate@<Q0>(WebKit::NetworkCache *this@<X0>, NSObject **a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v7;
  NSObject *v8;
  NSObject *concat;
  __n128 result;
  size_t size;
  __n128 *v12;
  NSObject *v13;
  NSObject **v14;
  NSObject *v15;

  v7 = *(NSObject **)this;
  v8 = *a2;
  if (v7)
  {
    if (v8)
    {
      concat = dispatch_data_create_concat(v7, v8);
      size = 0;
      *(_QWORD *)a3 = concat;
      *(_QWORD *)(a3 + 8) = 0;
      if (concat)
        size = dispatch_data_get_size(concat);
      *(_QWORD *)(a3 + 16) = size;
      *(_BYTE *)(a3 + 24) = 0;
    }
    else
    {
      v12 = (__n128 *)(a3 + 8);
      *(_QWORD *)a3 = v7;
      v13 = v7;
      result = *(__n128 *)((char *)this + 8);
      *v12 = result;
      *(_BYTE *)(a3 + 24) = *((_BYTE *)this + 24);
    }
  }
  else
  {
    v14 = a2;
    *(_QWORD *)a3 = v8;
    if (v8)
      v15 = v8;
    result = *(__n128 *)(v14 + 1);
    *(__n128 *)(a3 + 8) = result;
    *(_BYTE *)(a3 + 24) = *((_BYTE *)v14 + 24);
  }
  return result;
}

__n128 __copy_helper_block_e8_32c88_ZTSKZN6WebKit12NetworkCache4Data8adoptMapEON3WTF14FileSystemImpl14MappedFileDataEiE3__0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[2];
  a1[2] = result;
  return result;
}

uint64_t __copy_helper_block_e8_32c105_ZTSKZN6WebKit12NetworkCache9IOChannelC1EON3WTF6StringENS1_4TypeENSt3__18optionalINS2_6Thread3QOSEEEE3__0(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  return result;
}

unsigned int *WebKit::NetworkCache::IOChannel::write(uint64_t a1, off_t a2, NSObject **a3, uint64_t a4, uint64_t *a5)
{
  unsigned int v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  WTF::StringImpl *v14;

  if (a1)
  {
    do
      v7 = __ldaxr((unsigned int *)a1);
    while (__stlxr(v7 + 1, (unsigned int *)a1));
  }
  v8 = *a3;
  v9 = *(NSObject **)(a1 + 32);
  v10 = *(NSObject **)(a4 + 16);
  do
    v11 = __ldaxr((unsigned int *)a1);
  while (__stlxr(v11 + 1, (unsigned int *)a1));
  v12 = *a5;
  *a5 = 0;
  v13 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
  *v13 = MEMORY[0x1E0C809A0];
  v13[1] = 50331650;
  v13[2] = WTF::BlockPtr<void ()(BOOL,NSObject  {objcproto16OS_dispatch_data}*,int)>::fromCallable<WebKit::NetworkCache::IOChannel::write(unsigned long,WebKit::NetworkCache::Data const&,WTF::WorkQueueBase &,WTF::Function<void ()(int)> &&)::$_0>(WebKit::NetworkCache::IOChannel::write(unsigned long,WebKit::NetworkCache::Data const&,WTF::WorkQueueBase &,WTF::Function<void ()(int)> &&)::$_0)::{lambda(void *,BOOL,NSObject  {objcproto16OS_dispatch_data}*,int)#1}::__invoke;
  v13[3] = &WTF::BlockPtr<void ()(BOOL,NSObject  {objcproto16OS_dispatch_data}*,int)>::fromCallable<WebKit::NetworkCache::IOChannel::write(unsigned long,WebKit::NetworkCache::Data const&,WTF::WorkQueueBase &,WTF::Function<void ()(int)> &&)::$_0>(WebKit::NetworkCache::IOChannel::write(unsigned long,WebKit::NetworkCache::Data const&,WTF::WorkQueueBase &,WTF::Function<void ()(int)> &&)::$_0)::descriptor;
  v13[4] = a1;
  v13[5] = v12;
  dispatch_io_write(v9, a2, v8, v10, v13);
  _Block_release(v13);
  return WTF::ThreadSafeRefCounted<WebKit::NetworkCache::IOChannel,(WTF::DestructionThread)0>::deref((unsigned int *)a1, v14);
}

void sub_196FE6C18(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  unsigned int *v2;
  uint64_t v3;
  WTF::StringImpl *v5;

  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::ThreadSafeRefCounted<WebKit::NetworkCache::IOChannel,(WTF::DestructionThread)0>::deref(v2, a2);
  WTF::ThreadSafeRefCounted<WebKit::NetworkCache::IOChannel,(WTF::DestructionThread)0>::deref(v2, v5);
  _Unwind_Resume(a1);
}

uint64_t WebKit::shouldBlockTrackersForThirdPartyCloaking(WebKit *this, NSURLRequest *a2)
{
  void *v3;
  void *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  char v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13[5];
  WTF::StringImpl *v14[5];
  WTF::StringImpl *v15;

  v3 = (void *)-[WebKit URL](this, "URL");
  v4 = (void *)-[WebKit mainDocumentURL](this, "mainDocumentURL");
  result = 0;
  if (v3 && v4)
  {
    MEMORY[0x19AEABB18](v14, v3);
    MEMORY[0x19AEABB18](v13, v4);
    WebCore::RegistrableDomain::RegistrableDomain(&v15, (const WTF::URL *)v14);
    v6 = WTF::URL::host((WTF::URL *)v13);
    v9 = WebCore::RegistrableDomain::matches(&v15, v6, v7);
    v10 = v15;
    v15 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = v13[0];
    v13[0] = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v8);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = v14[0];
    v14[0] = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
      {
        WTF::StringImpl::destroy(v12, v8);
        if ((v9 & 1) != 0)
          return objc_msgSend((id)objc_msgSend(v3, "host"), "isEqualToString:", objc_msgSend(v4, "host")) ^ 1;
        return 0;
      }
      *(_DWORD *)v12 -= 2;
    }
    if ((v9 & 1) != 0)
      return objc_msgSend((id)objc_msgSend(v3, "host"), "isEqualToString:", objc_msgSend(v4, "host")) ^ 1;
    return 0;
  }
  return result;
}

void sub_196FE6D78(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, a2);
    else
      *(_DWORD *)a15 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::NetworkDataTaskCocoa::updateFirstPartyInfoForSession(WTF::URL const&)::$_0::operator()(WTF::StringImpl **a1, void *a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  result = (WTF::StringImpl *)objc_msgSend((id)objc_msgSend(a2, "_resolvedCNAMEChain"), "lastObject");
  if (result)
  {
    MEMORY[0x19AEABCC8](&v5, result);
    WebKit::NetworkTaskCocoa::lastCNAMEDomain(a1, &v5);
    result = v5;
    v5 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    *a1 = 0;
  }
  return result;
}

void sub_196FE6E78(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::NetworkSessionCocoa::sessionWrapperForTask(uint64_t a1, WebKit::AuxiliaryProcess *a2, WebCore::ResourceRequestBase *a3, unsigned int a4, __int16 a5)
{
  WTF::WallTime *v5;
  uint64_t v8;
  _BOOL4 v10;
  int isParentProcessAFullWebBrowser;
  uint64_t v12;
  const WTF::URL *PartyForCookies;
  const WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  _QWORD *v21;
  const WTF::StringImpl *v22;
  const WTF::StringImpl *v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  WTF::WallTime *v35;
  uint64_t v36;
  double v37;
  double v38;
  uint64_t v39;
  const WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  const WTF::StringImpl **v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  WTF **v47;
  const WTF::StringImpl *v48;
  const WTF::StringImpl *v49;
  int v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  const WTF::StringImpl *v57;
  const WTF::StringImpl *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  const WTF::StringImpl *v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v80;
  uint64_t v81;
  int v82;
  _BOOL4 v83;
  int shouldBlockThirdPartyCookiesButKeepFirstPartyCookiesFor;
  WTF::StringImpl *v85;
  _QWORD v86[2];
  WTF::StringImpl *v87;

  v8 = (uint64_t)a2;
  if ((_BYTE)a5)
    v10 = 1;
  else
    v10 = (a5 & 0xFF00) == 0;
  isParentProcessAFullWebBrowser = WebKit::isParentProcessAFullWebBrowser(*(WebKit **)(a1 + 32), a2);
  v12 = *(_QWORD *)(a1 + 32);
  v86[0] = *(_QWORD *)(a1 + 24);
  if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v12 + 216), v86))
  {
    v82 = isParentProcessAFullWebBrowser;
    v83 = v10;
    PartyForCookies = (const WTF::URL *)WebCore::ResourceRequestBase::firstPartyForCookies(a3);
    WebCore::RegistrableDomain::RegistrableDomain(&v85, PartyForCookies);
    shouldBlockThirdPartyCookiesButKeepFirstPartyCookiesFor = WebCore::NetworkStorageSession::shouldBlockThirdPartyCookiesButKeepFirstPartyCookiesFor();
    if (!shouldBlockThirdPartyCookiesButKeepFirstPartyCookiesFor)
      goto LABEL_80;
    if (v8
      && (v15 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(a1 + 872), v8)) != 0)
    {
      v16 = v15;
    }
    else
    {
      v16 = *(_QWORD *)(a1 + 864);
    }
    v17 = (uint64_t *)(v16 + 16);
    v18 = *(_QWORD *)(v16 + 16);
    if (v18
      || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand((uint64_t *)(v16 + 16), 0), (v18 = *v17) != 0))
    {
      v19 = *(_DWORD *)(v18 - 8);
    }
    else
    {
      v19 = 0;
    }
    v20 = WTF::ASCIICaseInsensitiveHash::hash(v85, v14) & v19;
    v21 = (_QWORD *)(v18 + 16 * v20);
    v80 = a4;
    v81 = v8;
    if ((WTF::equal((WTF *)*v21, 0, v22) & 1) == 0)
    {
      v24 = 0;
      v25 = 1;
      do
      {
        if (*v21 == -1)
        {
          v24 = v21;
        }
        else
        {
          v26 = WTF::equalIgnoringASCIICase((WTF *)*v21, v85, v23);
          if ((v26 & 1) != 0)
            goto LABEL_32;
        }
        v20 = (v20 + v25) & v19;
        v21 = (_QWORD *)(v18 + 16 * v20);
        ++v25;
      }
      while (!WTF::equal((WTF *)*v21, 0, v23));
      if (v24)
      {
        *v24 = 0;
        v24[1] = 0;
        --*(_DWORD *)(*v17 - 16);
        v21 = v24;
      }
    }
    WTF::String::operator=((WTF::StringImpl **)v21, (WTF::StringImpl *)&v85);
    v27 = WTF::fastMalloc((WTF *)0x38);
    *(_QWORD *)(v27 + 48) = 0;
    *(_OWORD *)(v27 + 16) = 0u;
    *(_OWORD *)(v27 + 32) = 0u;
    *(_OWORD *)v27 = 0u;
    WebKit::SessionWrapper::initialize(v27, (WebKit::AuxiliaryProcess *)objc_msgSend(*(id *)(v16 + 40), "configuration"), (WebKit **)a1, 1);
    v26 = (uint64_t)(v21 + 1);
    v28 = (_QWORD *)v21[1];
    v21[1] = v27;
    if (v28)
      std::default_delete<WebKit::IsolatedSession>::operator()[abi:sn180100](v26, v28);
    v29 = *v17;
    if (*v17)
      v30 = *(_DWORD *)(v29 - 12) + 1;
    else
      v30 = 1;
    *(_DWORD *)(v29 - 12) = v30;
    v31 = *v17;
    if (*v17)
      v32 = *(_DWORD *)(v31 - 12);
    else
      v32 = 0;
    v33 = (*(_DWORD *)(v31 - 16) + v32);
    v34 = *(unsigned int *)(v31 - 4);
    if (v34 > 0x400)
    {
      if (v34 > 2 * v33)
      {
LABEL_32:
        v35 = (WTF::WallTime *)WTF::WallTime::now((WTF::WallTime *)v26);
        a4 = v80;
        *(_QWORD *)(v21[1] + 48) = v36;
        if (v80 > 1)
        {
          v35 = (WTF::WallTime *)WebKit::SessionSet::initializeEphemeralStatelessSessionIfNeeded(v16, (WebKit **)a1);
          v5 = v35;
        }
        else
        {
          v5 = (WTF::WallTime *)v21[1];
        }
        if (!*v17 || *(_DWORD *)(*v17 - 12) < 0xBu)
          goto LABEL_80;
        v87 = 0;
        WTF::WallTime::now(v35);
        v38 = v37;
        v41 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(*v17, v39, v40);
        if (*v17)
          v42 = *v17 + 16 * *(unsigned int *)(*v17 - 4);
        else
          v42 = 0;
        v86[0] = v41;
        v86[1] = v14;
        while (1)
        {
          v43 = (const WTF::StringImpl **)v86[0];
          if (v86[0] == v42)
            break;
          v44 = *v17;
          v45 = *(_DWORD *)(*v17 - 8);
          v46 = WTF::ASCIICaseInsensitiveHash::hash(*(WTF::ASCIICaseInsensitiveHash **)v86[0], v14) & v45;
          v47 = (WTF **)(v44 + 16 * v46);
          WTF::equal(*v47, 0, v48);
          v50 = 1;
          while (*v47 == (WTF *)-1 || (WTF::equalIgnoringASCIICase(*v47, *v43, v49) & 1) == 0)
          {
            v46 = ((_DWORD)v46 + v50) & v45;
            v47 = (WTF **)(v44 + 16 * v46);
            ++v50;
            WTF::equal(*v47, 0, v49);
          }
          v52 = *(double *)(*(_QWORD *)(v44 + 16 * v46 + 8) + 48);
          if (v52 < v38)
          {
            WTF::String::operator=(&v87, (WTF::StringImpl *)v43);
            v38 = v52;
          }
          v86[0] = v43 + 2;
          WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v86, v51, v49);
        }
        v53 = *v17;
        if (*v17)
        {
          v54 = *(_DWORD *)(v53 - 8);
          v55 = WTF::ASCIICaseInsensitiveHash::hash(v87, v14) & v54;
          v56 = v53 + 16 * v55;
          if ((WTF::equal(*(WTF **)v56, 0, v57) & 1) != 0)
          {
LABEL_56:
            v60 = *v17;
            if (!*v17)
              goto LABEL_74;
            v61 = *(unsigned int *)(v60 - 4);
            v56 = v60 + 16 * v61;
          }
          else
          {
            v59 = 1;
            while (*(_QWORD *)v56 == -1 || (WTF::equalIgnoringASCIICase(*(WTF **)v56, v87, v58) & 1) == 0)
            {
              v55 = (v55 + v59) & v54;
              v56 = v53 + 16 * v55;
              ++v59;
              if (WTF::equal(*(WTF **)v56, 0, v58))
                goto LABEL_56;
            }
            v60 = *v17;
            if (!*v17)
              goto LABEL_59;
            v61 = *(unsigned int *)(v60 - 4);
          }
          v60 += 16 * v61;
          if (v60 != v56)
          {
LABEL_59:
            if (v60 != v56)
            {
              WTF::hashTraitsDeleteBucket<WTF::HashTraits<WebCore::RegistrableDomain>,WebCore::RegistrableDomain>((WTF::StringImpl **)v56, v14);
              v63 = *(const WTF::StringImpl **)(v56 + 8);
              v62 = (_QWORD *)(v56 + 8);
              v14 = v63;
              *v62 = 0;
              if (v63)
                std::default_delete<WebKit::IsolatedSession>::operator()[abi:sn180100]((uint64_t)v62, v14);
              ++*(_DWORD *)(*v17 - 16);
              v64 = *v17;
              if (*v17)
                v65 = *(_DWORD *)(v64 - 12) - 1;
              else
                v65 = -1;
              *(_DWORD *)(v64 - 12) = v65;
              v66 = *v17;
              if (*v17)
              {
                v67 = 6 * *(_DWORD *)(v66 - 12);
                v68 = *(_DWORD *)(v66 - 4);
                if (v67 < v68 && v68 >= 9)
                  WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(v17, v68 >> 1, 0);
              }
            }
          }
        }
LABEL_74:
        v70 = v87;
        v87 = 0;
        v8 = v81;
        a4 = v80;
        if (v70)
        {
          if (*(_DWORD *)v70 == 2)
            WTF::StringImpl::destroy(v70, v14);
          else
            *(_DWORD *)v70 -= 2;
        }
        if (*v17 && *(_DWORD *)(*v17 - 12) >= 0xBu)
        {
          __break(0xC471u);
          JUMPOUT(0x196FE7488);
        }
LABEL_80:
        v71 = v85;
        v85 = 0;
        isParentProcessAFullWebBrowser = v82;
        v10 = v83;
        if (v71)
        {
          if (*(_DWORD *)v71 == 2)
            WTF::StringImpl::destroy(v71, v14);
          else
            *(_DWORD *)v71 -= 2;
        }
        if ((shouldBlockThirdPartyCookiesButKeepFirstPartyCookiesFor & 1) != 0)
          return (uint64_t)v5;
        goto LABEL_85;
      }
    }
    else if (3 * v34 > 4 * v33)
    {
      goto LABEL_32;
    }
    v26 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand((uint64_t *)(v16 + 16), (WTF::ASCIICaseInsensitiveHash **)v21);
    v21 = (_QWORD *)v26;
    goto LABEL_32;
  }
LABEL_85:
  if ((v10 & ~isParentProcessAFullWebBrowser) != 0)
  {
    if (v8
      && (v72 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(a1 + 872), v8)) != 0)
    {
      v73 = v72;
    }
    else
    {
      v73 = *(_QWORD *)(a1 + 864);
    }
    v74 = (uint64_t *)(v73 + 24);
    if (!*(_QWORD *)(v73 + 24))
    {
      v75 = WTF::fastMalloc((WTF *)0x38);
      *(_OWORD *)v75 = 0u;
      *(_OWORD *)(v75 + 16) = 0u;
      *(_OWORD *)(v75 + 32) = 0u;
      *(_QWORD *)(v75 + 48) = 0;
      v76 = (_QWORD *)*v74;
      *v74 = v75;
      if (v76)
      {
        std::default_delete<WebKit::IsolatedSession>::operator()[abi:sn180100](v73 + 24, v76);
        v77 = *v74;
      }
      else
      {
        v77 = v75;
      }
      WebKit::SessionWrapper::initialize(v77, (WebKit::AuxiliaryProcess *)objc_msgSend(*(id *)(v73 + 40), "configuration"), (WebKit **)a1, 1);
    }
    if (a4 <= 1)
      return *v74;
    return WebKit::NetworkSessionCocoa::initializeEphemeralStatelessSessionIfNeeded(a1, v8);
  }
  if (a4 > 1)
    return WebKit::NetworkSessionCocoa::initializeEphemeralStatelessSessionIfNeeded(a1, v8);
  if (!v8
    || (v78 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(a1 + 872), v8)) == 0)
  {
    v78 = *(_QWORD *)(a1 + 864);
  }
  return v78 + 32;
}

void sub_196FE749C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16)
{
  if (a16)
  {
    if (*(_DWORD *)a16 == 2)
      WTF::StringImpl::destroy(a16, a2);
    else
      *(_DWORD *)a16 -= 2;
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::applyBasicAuthorizationHeader(WebKit *this, WebCore::ResourceRequest *a2, const WebCore::Credential *a3)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;

  WebCore::CredentialBase::serializationForBasicAuthorizationHeader(a2);
  WebCore::ResourceRequestBase::setHTTPHeaderField();
  result = v5;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  return result;
}

void sub_196FE758C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

__n128 WebKit::NetworkDataTaskCocoa::frameID@<Q0>(WebKit::NetworkDataTaskCocoa *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *(__n128 *)((char *)this + 744);
  *a2 = result;
  a2[1].n128_u8[0] = 1;
  return result;
}

uint64_t WebKit::NetworkDataTaskCocoa::pageID(WebKit::NetworkDataTaskCocoa *this)
{
  return *((_QWORD *)this + 95);
}

_BYTE *WebKit::NetworkTaskCocoa::blockCookies(_BYTE *this)
{
  _BYTE *v1;
  void *v2;

  if (!this[16])
  {
    v1 = this;
    v2 = (void *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)this + 32))(this);
    this = (_BYTE *)objc_msgSend(v2, "_setExplicitCookieStorage:", objc_msgSend((id)WebKit::NetworkTaskCocoa::statelessCookieStorage((WebKit::NetworkTaskCocoa *)v2), "_cookieStorage"));
    v1[16] = 1;
  }
  return this;
}

void `non-virtual thunk to'WebKit::NetworkDataTaskCocoa::~NetworkDataTaskCocoa(WebKit::NetworkDataTaskCocoa *this, void *a2)
{
  WebKit::NetworkDataTaskCocoa::~NetworkDataTaskCocoa((WebKit::NetworkDataTaskCocoa *)((char *)this - 552), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::NetworkDataTaskCocoa::~NetworkDataTaskCocoa((WebKit::NetworkDataTaskCocoa *)((char *)this - 552), a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebKit::NetworkDataTaskCocoa::willPerformHTTPRedirection(uint64_t a1, uint64_t a2, WebCore::ResourceRequestBase *a3, uint64_t *a4)
{
  int v8;
  WebCore::SecurityOrigin *v9;
  const WTF::URL *v10;
  WebCore::EmptyOriginAccessPatterns *v11;
  WTF::StringImpl *v12;
  char v13;
  uint64_t v14;
  WebCore::ResourceRequestBase *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::RefCountedBase *v22;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  WTF::URL *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  int v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF *v38;
  const URL *v39;
  const URL *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const WTF::URL *v46;
  const WTF::URL *v47;
  const WTF::URL *PartyForCookies;
  uint64_t v49;
  WTF::StringImpl *v50;
  const WTF::URL *v51;
  WTF::StringImpl *v52;
  int hasStorageAccess;
  WTF::StringImpl *v54;
  const WTF::URL *v55;
  int v56;
  WTF::StringImpl *v57;
  const WTF::URL *v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  WTF::ThreadSafeWeakPtrControlBlock *v61;
  const void *v62;
  uint64_t v63;
  CFTypeRef v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  CFTypeRef v78;
  WTF::StringImpl *v79;
  CFTypeRef v80;
  void *v81;
  unsigned __int8 *v82;
  uint64_t result;
  WTF::StringImpl *v84;
  const WebCore::Credential *v85;
  CFTypeRef v86;
  const void *v87;
  CFTypeRef v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  int v93;
  NSObject *v94;
  NSObject *v95;
  WTF::ThreadSafeWeakPtrControlBlock *v96;
  const void *v97;
  os_signpost_id_t v98;
  WTF::StringImpl *v99;
  uint8_t buf[16];
  WTF::ThreadSafeWeakPtrControlBlock *v101;
  CFTypeRef v102[6];
  uint64_t v103;
  _BYTE v104[24];
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  _BYTE v117[19];
  CFTypeRef cf;
  char v119;
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  if (kdebug_is_enabled())
  {
    v93 = *MEMORY[0x1E0CBE150];
    v94 = WTFSignpostLogHandle();
    v95 = v94;
    if (v93)
    {
      if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
      {
        v96 = *(WTF::ThreadSafeWeakPtrControlBlock **)(a1 + 608);
        *(_DWORD *)buf = 67109888;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = 0;
        *(_WORD *)&buf[14] = 2048;
        v101 = v96;
        LOWORD(v102[0]) = 2048;
        *(CFTypeRef *)((char *)v102 + 2) = (CFTypeRef)WTFCurrentContinuousTime();
        _os_log_impl(&dword_196BCC000, v95, OS_LOG_TYPE_DEFAULT, "type=%d name=%d p=%lu ts=%llu redirect", buf, 0x22u);
      }
    }
    else
    {
      v97 = *(const void **)(a1 + 608);
      if (v97)
      {
        v98 = os_signpost_id_make_with_pointer(v94, v97);
        if (v98 - 1 > 0xFFFFFFFFFFFFFFFDLL)
          goto LABEL_2;
      }
      else
      {
        v98 = 0xEEEEB0B5B2B2EEEELL;
      }
      if (os_signpost_enabled(v95))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_196BCC000, v95, OS_SIGNPOST_EVENT, v98, "DataTask", "redirect", buf, 2u);
      }
    }
  }
LABEL_2:
  v8 = *(char *)(a1 + 714);
  if (v8 < 0)
  {
    *(_BYTE *)(a1 + 714) = v8 | 0x80;
  }
  else
  {
    v9 = (WebCore::SecurityOrigin *)WebCore::ResourceRequestBase::url(a3);
    WebCore::SecurityOrigin::create(v9, v10);
    v11 = (WebCore::EmptyOriginAccessPatterns *)WebCore::ResourceResponseBase::url((WebCore::ResourceResponseBase *)a2);
    WebCore::EmptyOriginAccessPatterns::singleton(v11);
    if (WebCore::SecurityOrigin::canRequest())
      v13 = 0;
    else
      v13 = 0x80;
    *(_BYTE *)(a1 + 714) = v13 & 0x80 | *(_BYTE *)(a1 + 714) & 0x7F;
    v14 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v14)
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v14, v12);
  }
  v15 = (WebCore::ResourceRequestBase *)(a1 + 328);
  if (WebCore::ResourceRequestBase::isNull((WebCore::ResourceRequestBase *)(a1 + 328)))
    v15 = (WebCore::ResourceRequestBase *)(a1 + 128);
  if (WebCore::ResourceResponseBase::httpStatusCode((WebCore::ResourceResponseBase *)a2) == 307
    || WebCore::ResourceResponseBase::httpStatusCode((WebCore::ResourceResponseBase *)a2) == 308)
  {
    WebCore::ResourceRequestBase::httpBody(v15);
    if (*(_QWORD *)buf)
    {
      if (*(_DWORD *)(*(_QWORD *)buf + 20))
      {
        v16 = *(_QWORD *)(a1 + 112);
        if (!v16 || (WTF::equalLettersIgnoringASCIICaseCommon<WTF::StringImpl>(v16, "get", 3uLL) & 1) == 0)
          WebCore::ResourceRequestBase::setHTTPBody();
      }
    }
    WebCore::ResourceRequestBase::httpContentType(v15);
    v18 = v99;
    if (v99)
    {
      if (*((_DWORD *)v99 + 1))
      {
        WebCore::ResourceRequestBase::setHTTPHeaderField();
        v18 = v99;
      }
      v99 = 0;
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
    v22 = *(WTF::RefCountedBase **)buf;
    *(_QWORD *)buf = 0;
    if (v22)
      WTF::RefCounted<WebCore::FormData>::deref(v22);
  }
  else if (WebCore::ResourceResponseBase::httpStatusCode((WebCore::ResourceResponseBase *)a2) == 303)
  {
    v19 = *(_QWORD *)WebCore::ResourceRequestBase::httpMethod(v15);
    if (v19)
    {
      if (WTF::equalLettersIgnoringASCIICaseCommon<WTF::StringImpl>(v19, "head", 4uLL))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v99 = *(WTF::StringImpl **)buf;
        WebCore::ResourceRequestBase::setHTTPMethod(a3, (const WTF::String *)&v99);
        v21 = v99;
        v99 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, v20);
          else
            *(_DWORD *)v21 -= 2;
        }
      }
    }
    WebCore::ResourceRequestBase::httpContentType(v15);
    v92 = *(WTF::StringImpl **)buf;
    if (*(_QWORD *)buf)
    {
      if (*(_DWORD *)(*(_QWORD *)buf + 4))
      {
        WebCore::ResourceRequestBase::setHTTPHeaderField();
        v92 = *(WTF::StringImpl **)buf;
        *(_QWORD *)buf = 0;
        if (!v92)
          goto LABEL_32;
      }
      else
      {
        *(_QWORD *)buf = 0;
      }
      if (*(_DWORD *)v92 == 2)
        WTF::StringImpl::destroy(v92, v91);
      else
        *(_DWORD *)v92 -= 2;
    }
  }
LABEL_32:
  if (*(_BYTE *)(a1 + 528))
  {
    WebCore::ResourceRequestBase::url(a3);
    if ((WTF::URL::protocolIs() & 1) == 0)
    {
      WebCore::ResourceRequestBase::httpReferrer(a3);
      v24 = WTF::protocolIs();
      v25 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
        {
          WTF::StringImpl::destroy(v25, v23);
          if (!v24)
            goto LABEL_41;
          goto LABEL_40;
        }
        *(_DWORD *)v25 -= 2;
      }
      if (!v24)
        goto LABEL_41;
LABEL_40:
      WebCore::ResourceRequestBase::clearHTTPReferrer(a3);
    }
  }
LABEL_41:
  v26 = (WTF::URL *)WebCore::ResourceRequestBase::url(a3);
  WTF::URL::user(v26);
  v28 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  v29 = *(WTF::StringImpl **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v28;
  if (v29)
  {
    v30 = *(_DWORD *)v29 - 2;
    if (*(_DWORD *)v29 != 2)
    {
LABEL_45:
      *(_DWORD *)v29 = v30;
      goto LABEL_46;
    }
    WTF::StringImpl::destroy(v29, v27);
    v29 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v29)
    {
      v30 = *(_DWORD *)v29 - 2;
      if (*(_DWORD *)v29 == 2)
      {
        WTF::StringImpl::destroy(v29, v31);
        goto LABEL_46;
      }
      goto LABEL_45;
    }
  }
LABEL_46:
  WTF::URL::password(v26);
  v33 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  v34 = *(WTF::StringImpl **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v33;
  if (!v34)
    goto LABEL_51;
  v35 = *(_DWORD *)v34 - 2;
  if (*(_DWORD *)v34 != 2)
    goto LABEL_50;
  WTF::StringImpl::destroy(v34, v32);
  v34 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (!v34)
    goto LABEL_51;
  v35 = *(_DWORD *)v34 - 2;
  if (*(_DWORD *)v34 == 2)
    WTF::StringImpl::destroy(v34, v36);
  else
LABEL_50:
    *(_DWORD *)v34 = v35;
LABEL_51:
  v37 = (WTF::StringImpl *)WebCore::ResourceRequestBase::httpMethod(a3);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 112), v37);
  WebCore::ResourceRequestBase::removeCredentials(a3);
  v38 = (WTF *)WebCore::ResourceRequestBase::url(a3);
  v39 = (const URL *)WebCore::ResourceResponseBase::url((WebCore::ResourceResponseBase *)a2);
  if ((WTF::protocolHostAndPortAreEqual(v38, v39, v40) & 1) != 0)
  {
    v41 = *(_QWORD *)(a1 + 48);
    if (!v41 || !*(_DWORD *)(v41 + 4))
    {
      v42 = *(_QWORD *)(a1 + 56);
      if ((!v42 || !*(_DWORD *)(v42 + 4)) && (*(_BYTE *)(a2 + 138) & 1) == 0)
      {
        v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 32);
        v99 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 24);
        if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v43 + 216), &v99))
        {
          v44 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 32);
          v99 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 24);
          v45 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v44 + 216), &v99);
          v46 = (const WTF::URL *)WebCore::ResourceRequestBase::url(a3);
          WebCore::CredentialStorage::get((WebCore::CredentialStorage *)(v45 + 96), (const WTF::String *)(a1 + 64), v46);
        }
        else
        {
          WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)buf);
          v102[0] = 0;
        }
        if ((WebCore::Credential::isEmpty((WebCore::Credential *)buf) & 1) == 0)
        {
          WTF::String::operator=((WTF::StringImpl **)(a1 + 72), (WTF::StringImpl *)buf);
          WTF::String::operator=((WTF::StringImpl **)(a1 + 80), (WTF::StringImpl *)&buf[8]);
          *(_BYTE *)(a1 + 88) = (_BYTE)v101;
          v86 = v102[0];
          if (v102[0])
            CFRetain(v102[0]);
          v87 = *(const void **)(a1 + 96);
          *(_QWORD *)(a1 + 96) = v86;
          if (v87)
            CFRelease(v87);
          WebKit::applyBasicAuthorizationHeader(a3, (WebCore::ResourceRequest *)(a1 + 72), v85);
        }
        v88 = v102[0];
        v102[0] = 0;
        if (v88)
          CFRelease(v88);
        v89 = *(WTF::StringImpl **)&buf[8];
        *(_QWORD *)&buf[8] = 0;
        if (v89)
        {
          if (*(_DWORD *)v89 == 2)
            WTF::StringImpl::destroy(v89, v84);
          else
            *(_DWORD *)v89 -= 2;
        }
        v90 = *(WTF::StringImpl **)buf;
        *(_QWORD *)buf = 0;
        if (v90)
        {
          if (*(_DWORD *)v90 == 2)
            WTF::StringImpl::destroy(v90, v84);
          else
            *(_DWORD *)v90 -= 2;
        }
      }
    }
  }
  else
  {
    WebCore::ResourceRequestBase::clearHTTPAuthorization(a3);
    WebCore::ResourceRequestBase::clearHTTPOrigin(a3);
  }
  if (*(_BYTE *)(a1 + 544))
  {
    v47 = (const WTF::URL *)WebCore::ResourceRequestBase::url(a3);
    WebCore::ResourceRequestBase::setFirstPartyForCookies(a3, v47);
  }
  else
  {
    PartyForCookies = (const WTF::URL *)WebCore::ResourceRequestBase::firstPartyForCookies(a3);
    WebCore::RegistrableDomain::RegistrableDomain(&v99, PartyForCookies);
    v49 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 32);
    *(_QWORD *)buf = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 24);
    if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v49 + 216), buf))
    {
      v51 = (const WTF::URL *)WebCore::ResourceResponseBase::url((WebCore::ResourceResponseBase *)a2);
      WebCore::RegistrableDomain::RegistrableDomain((WTF::StringImpl **)buf, v51);
      hasStorageAccess = WebCore::NetworkStorageSession::hasStorageAccess();
      v54 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
          WTF::StringImpl::destroy(v54, v52);
        else
          *(_DWORD *)v54 -= 2;
      }
      v55 = (const WTF::URL *)WebCore::ResourceRequestBase::url(a3);
      WebCore::RegistrableDomain::RegistrableDomain((WTF::StringImpl **)buf, v55);
      v56 = WebCore::NetworkStorageSession::hasStorageAccess();
      v57 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v57)
      {
        if (*(_DWORD *)v57 == 2)
          WTF::StringImpl::destroy(v57, v50);
        else
          *(_DWORD *)v57 -= 2;
      }
      if ((hasStorageAccess & v56) == 1)
      {
        v58 = (const WTF::URL *)WebCore::ResourceRequestBase::url(a3);
        WebCore::ResourceRequestBase::setFirstPartyForCookies(a3, v58);
      }
    }
    v59 = v99;
    v99 = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2)
        WTF::StringImpl::destroy(v59, v50);
      else
        *(_DWORD *)v59 -= 2;
    }
  }
  v60 = *a4;
  *a4 = 0;
  *(_QWORD *)buf = v60;
  *(_QWORD *)&buf[8] = a1;
  v61 = *(WTF::ThreadSafeWeakPtrControlBlock **)(a1 + 8);
  if (v61)
    v61 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v61);
  v101 = v61;
  v102[0] = (CFTypeRef)a1;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)&v102[1], (const WebCore::ResourceResponseBase *)a2);
  v62 = *(const void **)(a2 + 240);
  cf = v62;
  if (v62)
    CFRetain(v62);
  v119 = *(_BYTE *)(a2 + 248);
  v63 = WTF::fastMalloc((WTF *)0x128);
  *(_QWORD *)v63 = off_1E34B5E78;
  *(_OWORD *)(v63 + 8) = *(_OWORD *)buf;
  *(_QWORD *)(v63 + 24) = v101;
  v64 = v102[0];
  *(_QWORD *)buf = 0;
  v101 = 0;
  v102[0] = 0;
  *(_QWORD *)(v63 + 32) = v64;
  WTF::URL::URL(v63 + 40, (uint64_t *)&v102[1]);
  v65 = v103;
  v103 = 0;
  *(_QWORD *)(v63 + 80) = v65;
  *(_OWORD *)(v63 + 88) = *(_OWORD *)v104;
  v66 = *(_QWORD *)&v104[16];
  *(_OWORD *)&v104[8] = 0u;
  *(_QWORD *)(v63 + 104) = v66;
  *(_QWORD *)(v63 + 112) = v105;
  v67 = *((_QWORD *)&v105 + 1);
  v105 = 0u;
  *(_QWORD *)(v63 + 120) = v67;
  v68 = v106;
  v106 = 0;
  *(_QWORD *)(v63 + 128) = v68;
  v69 = v107;
  v107 = 0;
  *(_QWORD *)(v63 + 136) = v69;
  v70 = v108;
  v108 = 0;
  *(_QWORD *)(v63 + 144) = v70;
  v71 = v109;
  v109 = 0;
  *(_QWORD *)(v63 + 152) = v71;
  *(_BYTE *)(v63 + 160) = 0;
  *(_BYTE *)(v63 + 168) = 0;
  if (v111)
  {
    v72 = v110;
    v110 = 0;
    *(_QWORD *)(v63 + 160) = v72;
    *(_BYTE *)(v63 + 168) = 1;
  }
  v73 = v112;
  v74 = v114;
  *(_OWORD *)(v63 + 192) = v113;
  *(_OWORD *)(v63 + 208) = v74;
  *(_OWORD *)(v63 + 176) = v73;
  v75 = v115;
  v76 = v116;
  v77 = *(_OWORD *)v117;
  *(_DWORD *)(v63 + 271) = *(_DWORD *)&v117[15];
  *(_OWORD *)(v63 + 240) = v76;
  *(_OWORD *)(v63 + 256) = v77;
  *(_OWORD *)(v63 + 224) = v75;
  v78 = cf;
  cf = 0;
  *(_QWORD *)(v63 + 280) = v78;
  *(_BYTE *)(v63 + 288) = v119;
  v99 = (WTF::StringImpl *)v63;
  WebKit::NetworkTaskCocoa::willPerformHTTPRedirection(a1 + 552, (WebCore::ResourceResponseBase *)a2, a3, (uint64_t *)&v99);
  if (v99)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v99 + 8))(v99);
  v80 = cf;
  cf = 0;
  if (v80)
    CFRelease(v80);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v102[1], v79);
  v82 = (unsigned __int8 *)v101;
  v101 = 0;
  if (v82)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v82, v81);
  result = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_196FE804C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, WTF::StringImpl *a17, WTF::StringImpl *a18, WTF::ThreadSafeWeakPtrControlBlock *a19, CFTypeRef cf,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,CFTypeRef a51)
{
  if (a17)
  {
    if (*(_DWORD *)a17 == 2)
      WTF::StringImpl::destroy(a17, a2);
    else
      *(_DWORD *)a17 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::NetworkTaskCocoa::willPerformHTTPRedirection(uint64_t a1, WebCore::ResourceResponseBase *a2, WebCore::ResourceRequestBase *a3, uint64_t *a4)
{
  int v8;
  int v9;
  const WTF::URL *PartyForCookies;
  const WTF::URL *v11;
  const WTF::URL *v12;
  const WTF::StringImpl *v13;
  const WTF::StringImpl *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  WTF **v18;
  const WTF::StringImpl *v19;
  const WTF::StringImpl *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::NetworkStorageSession *v32;
  void *v33;
  const void *v34;
  NSObject *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  int v41;
  char *v42;
  const char *v43;
  void *v44;
  WTF::StringImpl *v45;
  void *v46;
  const WebCore::ResourceRequest *v47;
  uint64_t v48;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65[2];
  char v66;
  uint64_t v67[3];
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  _BYTE cf[12];
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  WTF::StringImpl *v76;
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  const char *v80;
  __int16 v81;
  char *v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  objc_msgSend((id)WebCore::ResourceRequest::nsURLRequest(), "attribution");
  WebCore::ResourceRequestBase::setIsAppInitiated(a3);
  WebKit::NetworkTaskCocoa::applyCookiePolicyForThirdPartyCloaking((WebKit::NetworkTaskCocoa *)a1, a3);
  v8 = *(unsigned __int8 *)(a1 + 16);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (v8)
  {
    if (v9 == 2)
      goto LABEL_41;
    PartyForCookies = (const WTF::URL *)WebCore::ResourceRequestBase::firstPartyForCookies(a3);
    v11 = (const WTF::URL *)WebCore::ResourceRequestBase::url(a3);
    v12 = (const WTF::URL *)WebCore::ResourceResponseBase::url(a2);
    if ((byte_1EE341541 & 1) == 0)
    {
      v68 = 0;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v71 = *(WTF::StringImpl **)cf;
      WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(&v71, v65);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v69 = *(WTF::StringImpl **)cf;
      WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(&v69, &v70);
      WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::add<WebCore::RegistrableDomain>((uint64_t)cf, &v68, v65, (WTF::StringImpl *)&v70);
      v51 = v70;
      v70 = 0;
      if (v51)
      {
        if (*(_DWORD *)v51 == 2)
          WTF::StringImpl::destroy(v51, v50);
        else
          *(_DWORD *)v51 -= 2;
      }
      v52 = v69;
      v69 = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2)
          WTF::StringImpl::destroy(v52, v50);
        else
          *(_DWORD *)v52 -= 2;
      }
      v53 = v65[0];
      v65[0] = 0;
      if (v53)
      {
        if (*(_DWORD *)v53 == 2)
          WTF::StringImpl::destroy(v53, v50);
        else
          *(_DWORD *)v53 -= 2;
      }
      v54 = v71;
      v71 = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
          WTF::StringImpl::destroy(v54, v50);
        else
          *(_DWORD *)v54 -= 2;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v71 = *(WTF::StringImpl **)cf;
      WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(&v71, v65);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v69 = *(WTF::StringImpl **)cf;
      WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(&v69, &v70);
      WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::add<WebCore::RegistrableDomain>((uint64_t)cf, &v68, v65, (WTF::StringImpl *)&v70);
      v56 = v70;
      v70 = 0;
      if (v56)
      {
        if (*(_DWORD *)v56 == 2)
          WTF::StringImpl::destroy(v56, v55);
        else
          *(_DWORD *)v56 -= 2;
      }
      v57 = v69;
      v69 = 0;
      if (v57)
      {
        if (*(_DWORD *)v57 == 2)
          WTF::StringImpl::destroy(v57, v55);
        else
          *(_DWORD *)v57 -= 2;
      }
      v58 = v65[0];
      v65[0] = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2)
          WTF::StringImpl::destroy(v58, v55);
        else
          *(_DWORD *)v58 -= 2;
      }
      v59 = v71;
      v71 = 0;
      if (v59)
      {
        if (*(_DWORD *)v59 == 2)
          WTF::StringImpl::destroy(v59, v55);
        else
          *(_DWORD *)v59 -= 2;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v71 = *(WTF::StringImpl **)cf;
      WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(&v71, v65);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v69 = *(WTF::StringImpl **)cf;
      WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(&v69, &v70);
      WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::add<WebCore::RegistrableDomain>((uint64_t)cf, &v68, v65, (WTF::StringImpl *)&v70);
      v61 = v70;
      v70 = 0;
      if (v61)
      {
        if (*(_DWORD *)v61 == 2)
          WTF::StringImpl::destroy(v61, v60);
        else
          *(_DWORD *)v61 -= 2;
      }
      v62 = v69;
      v69 = 0;
      if (v62)
      {
        if (*(_DWORD *)v62 == 2)
          WTF::StringImpl::destroy(v62, v60);
        else
          *(_DWORD *)v62 -= 2;
      }
      v63 = v65[0];
      v65[0] = 0;
      if (v63)
      {
        if (*(_DWORD *)v63 == 2)
          WTF::StringImpl::destroy(v63, v60);
        else
          *(_DWORD *)v63 -= 2;
      }
      v64 = v71;
      v71 = 0;
      if (v64)
      {
        if (*(_DWORD *)v64 == 2)
          WTF::StringImpl::destroy(v64, v60);
        else
          *(_DWORD *)v64 -= 2;
      }
      qword_1EE341560 = v68;
      byte_1EE341541 = 1;
    }
    WebCore::RegistrableDomain::RegistrableDomain((WTF::StringImpl **)cf, PartyForCookies);
    WebCore::RegistrableDomain::RegistrableDomain(v65, v11);
    if ((WTF::equal(*(WTF **)cf, v65[0], v13) & 1) == 0)
    {
      v24 = 0;
      goto LABEL_26;
    }
    WebCore::RegistrableDomain::RegistrableDomain(&v71, v12);
    v15 = qword_1EE341560;
    if (!qword_1EE341560)
      goto LABEL_21;
    v16 = *(_DWORD *)(qword_1EE341560 - 8);
    v17 = WTF::ASCIICaseInsensitiveHash::hash(v71, v14) & v16;
    v18 = (WTF **)(v15 + 16 * v17);
    if ((WTF::equal(*v18, 0, v19) & 1) != 0)
    {
LABEL_11:
      v22 = qword_1EE341560;
      if (!qword_1EE341560)
        goto LABEL_21;
      v23 = *(unsigned int *)(qword_1EE341560 - 4);
      v18 = (WTF **)(qword_1EE341560 + 16 * v23);
    }
    else
    {
      v21 = 1;
      while (*v18 == (WTF *)-1 || (WTF::equalIgnoringASCIICase(*v18, v71, v20) & 1) == 0)
      {
        v17 = (v17 + v21) & v16;
        v18 = (WTF **)(v15 + 16 * v17);
        ++v21;
        if (WTF::equal(*v18, 0, v20))
          goto LABEL_11;
      }
      v22 = qword_1EE341560;
      if (!qword_1EE341560)
      {
LABEL_14:
        if ((WTF **)v22 != v18)
        {
          v24 = WTF::equal(v18[1], v65[0], v20);
          goto LABEL_22;
        }
LABEL_21:
        v24 = 0;
LABEL_22:
        v27 = v71;
        v71 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, v14);
          else
            *(_DWORD *)v27 -= 2;
        }
LABEL_26:
        v28 = v65[0];
        v65[0] = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, v14);
          else
            *(_DWORD *)v28 -= 2;
        }
        v29 = *(WTF::StringImpl **)cf;
        *(_QWORD *)cf = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
          {
            WTF::StringImpl::destroy(v29, v14);
            if (!v24)
              goto LABEL_41;
            goto LABEL_36;
          }
          *(_DWORD *)v29 -= 2;
        }
        if (!v24)
          goto LABEL_41;
LABEL_36:
        if (*(_BYTE *)(a1 + 16))
        {
          v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 32);
          *(_QWORD *)cf = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 24);
          v31 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v30 + 216), cf);
          if (v31)
          {
            v32 = (WebCore::NetworkStorageSession *)v31;
            v33 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
            WebCore::NetworkStorageSession::nsCookieStorage(v32);
            objc_msgSend(v33, "_setExplicitCookieStorage:", objc_msgSend(*(id *)cf, "_cookieStorage"));
            v34 = *(const void **)cf;
            *(_QWORD *)cf = 0;
            if (v34)
              CFRelease(v34);
            *(_BYTE *)(a1 + 16) = 0;
          }
        }
        goto LABEL_41;
      }
      v23 = *(unsigned int *)(qword_1EE341560 - 4);
    }
    v22 += 16 * v23;
    goto LABEL_14;
  }
  if (v9 == 2
    || (v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 32),
        *(_QWORD *)cf = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 24),
        WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v25 + 216), cf))&& (v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 32), *(_QWORD *)cf = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 24), WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v26 + 216), cf), (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(v67, a1), (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1), WebCore::NetworkStorageSession::shouldBlockCookies()))
  {
    WebKit::NetworkTaskCocoa::blockCookies((_BYTE *)a1);
  }
LABEL_41:
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 8) + 88))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8)))
  {
    if (*(_BYTE *)(a1 + 32))
    {
      v35 = off_1ECE713E8;
      if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
      {
        v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
        if (!v37
          || (v38 = v36,
              (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(v65, a1),
              !v66))
        {
          __break(1u);
        }
        v39 = v65[0];
        v40 = objc_msgSend((id)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1), "taskIdentifier");
        v41 = *(unsigned __int8 *)(a1 + 16);
        WebCore::ResourceRequestBase::url(a3);
        WTF::String::utf8();
        v42 = (char *)v71 + 16;
        v43 = "Blocking";
        *(_DWORD *)cf = 134219266;
        if (!v71)
          v42 = 0;
        *(_QWORD *)&cf[4] = a1;
        v73 = 2048;
        if (!v41)
          v43 = "Not blocking";
        v74 = v38;
        v75 = 2048;
        v76 = v39;
        v77 = 2048;
        v78 = v40;
        v79 = 2080;
        v80 = v43;
        v81 = 2080;
        v82 = v42;
        _os_log_impl(&dword_196BCC000, v35, OS_LOG_TYPE_DEFAULT, "%p - NetworkTaskCocoa::willPerformHTTPRedirection::logCookieInformation: pageID=%llu, frameID=%llu, taskID=%lu: %s cookies for redirect URL %s", cf, 0x3Eu);
        v45 = v71;
        v71 = 0;
        if (v45)
        {
          if (*(_DWORD *)v45 == 1)
            WTF::fastFree(v45, v44);
          else
            --*(_DWORD *)v45;
        }
      }
    }
  }
  v46 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  WebKit::NetworkTaskCocoa::updateTaskWithFirstPartyForSameSiteCookies(v46, (NSURLSessionTask *)a3, v47);
  v48 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, WebCore::ResourceRequestBase *))(*(_QWORD *)v48 + 16))(v48, a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
}

void sub_196FE8A28(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, WTF::StringImpl *a17, WTF::StringImpl *a18, CFTypeRef cf)
{
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;

  if (a17)
  {
    if (*(_DWORD *)a17 == 2)
      WTF::StringImpl::destroy(a17, a2);
    else
      *(_DWORD *)a17 -= 2;
  }
  if (a16)
  {
    if (*(_DWORD *)a16 == 2)
      WTF::StringImpl::destroy(a16, a2);
    else
      *(_DWORD *)a16 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a18)
  {
    if (*(_DWORD *)a18 == 2)
      WTF::StringImpl::destroy(a18, a2);
    else
      *(_DWORD *)a18 -= 2;
  }
  if (a15)
  {
    v20 = *(unsigned int *)(a15 - 4);
    if ((_DWORD)v20)
    {
      v21 = a15;
      do
      {
        v22 = *(WTF::StringImpl **)v21;
        if (*(_QWORD *)v21 != -1)
        {
          v23 = *(WTF::StringImpl **)(v21 + 8);
          *(_QWORD *)(v21 + 8) = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
            {
              WTF::StringImpl::destroy(v23, a2);
              v22 = *(WTF::StringImpl **)v21;
            }
            else
            {
              *(_DWORD *)v23 -= 2;
            }
          }
          *(_QWORD *)v21 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, a2);
            else
              *(_DWORD *)v22 -= 2;
          }
        }
        v21 += 16;
        --v20;
      }
      while (v20);
    }
    WTF::fastFree((WTF *)(a15 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::NetworkDataTaskCocoa::setPendingDownloadLocation(uint64_t a1, WTF::StringImpl *a2, uint64_t *a3, int a4)
{
  WTF::FileSystemImpl *v8;
  uint64_t v9;
  uint64_t v10;
  const char ***v11;
  uint64_t v12;
  const __CFString *v13;
  uint64_t result;
  const WTF::String *v15;
  const WTF::String *v16;
  const char **v17;

  v17 = 0;
  v8 = (WTF::FileSystemImpl *)(a1 + 120);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 120), a2);
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v17);
  if (*a3)
  {
    v9 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v9 = 1;
    v10 = *a3;
    *a3 = 0;
    *(_QWORD *)(v9 + 8) = v10;
    *(_QWORD *)(v9 + 16) = 0;
  }
  else
  {
    v9 = 0;
  }
  v11 = *(const char ****)(a1 + 600);
  *(_QWORD *)(a1 + 600) = v9;
  if (v11)
  {
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v11);
    v9 = *(_QWORD *)(a1 + 600);
  }
  if (v9)
  {
    v12 = *(_QWORD *)(v9 + 16);
    *(_QWORD *)(v9 + 16) = v12 + 1;
    if (!v12)
      WebKit::SandboxExtensionImpl::consume(*(WebKit::SandboxExtensionImpl **)(v9 + 8));
  }
  if (*(_QWORD *)v8)
    v13 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v13 = &stru_1E351F1B8;
  result = objc_msgSend(*(id *)(a1 + 608), "set_pathToDownloadTaskFile:", v13);
  if (a4)
  {
    result = WTF::FileSystemImpl::fileExists(v8, v15);
    if ((_DWORD)result)
      return WTF::FileSystemImpl::deleteFile(a2, v16);
  }
  return result;
}

void sub_196FE8D44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NetworkDataTaskCocoa::suggestedFilename@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;

  v3 = *(_DWORD **)(this + 536);
  if (!v3 || !v3[1])
  {
    objc_msgSend((id)objc_msgSend(*(id *)(this + 608), "response"), "suggestedFilename");
    JUMPOUT(0x19AEABCC8);
  }
  *v3 += 2;
  *a2 = v3;
  return this;
}

uint64_t WebKit::NetworkDataTaskCocoa::cancel(WebKit::NetworkDataTaskCocoa *this)
{
  int v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  const void *v7;
  os_signpost_id_t v8;
  _DWORD v9[2];
  __int16 v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (kdebug_is_enabled())
  {
    v3 = *MEMORY[0x1E0CBE150];
    v4 = WTFSignpostLogHandle();
    v5 = v4;
    if (v3)
    {
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        v6 = *((_QWORD *)this + 76);
        v9[0] = 67109888;
        v9[1] = 0;
        v10 = 1024;
        v11 = 0;
        v12 = 2048;
        v13 = v6;
        v14 = 2048;
        v15 = WTFCurrentContinuousTime();
        _os_log_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEFAULT, "type=%d name=%d p=%lu ts=%llu cancel", (uint8_t *)v9, 0x22u);
      }
    }
    else
    {
      v7 = (const void *)*((_QWORD *)this + 76);
      if (v7)
      {
        v8 = os_signpost_id_make_with_pointer(v4, v7);
        if (v8 - 1 > 0xFFFFFFFFFFFFFFFDLL)
          return objc_msgSend(*((id *)this + 76), "cancel");
      }
      else
      {
        v8 = 0xEEEEB0B5B2B2EEEELL;
      }
      if (os_signpost_enabled(v5))
      {
        LOWORD(v9[0]) = 0;
        _os_signpost_emit_with_name_impl(&dword_196BCC000, v5, OS_SIGNPOST_EVENT, v8, "DataTask", "cancel", (uint8_t *)v9, 2u);
      }
    }
  }
  return objc_msgSend(*((id *)this + 76), "cancel");
}

unint64_t WebKit::NetworkDataTaskCocoa::state(id *this)
{
  unint64_t result;

  result = objc_msgSend(this[76], "state");
  if (result >= 4)
    return 3;
  else
    return result;
}

uint64_t *WebKit::NetworkDataTaskCocoa::setH2PingCallback(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WTF::StringImpl *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  WTF::StringImpl *v14;
  __int128 v15;
  WTF::StringImpl *v16;
  char *v17;
  __int128 v18;
  WTF::StringImpl *v19;
  __int128 v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30[2];
  __int128 v31;
  _BYTE v32[24];
  __int128 v33;

  v6 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v6 += 2;
  v7 = *(_OWORD *)(a2 + 24);
  v31 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)v32 = v7;
  v8 = WTF::fastMalloc((WTF *)0x30);
  v9 = v8;
  *(_QWORD *)v8 = &off_1E34B5EC8;
  if (v6)
    *(_DWORD *)v6 += 2;
  *(_QWORD *)(v8 + 8) = v6;
  *(_OWORD *)(v8 + 16) = v31;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)v32;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = &off_1E34B5EF0;
  v12 = *a3;
  *a3 = 0;
  v11[1] = v12;
  if (!v12)
  {
    __break(0xC471u);
    JUMPOUT(0x196FE9188);
  }
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v10);
    else
      *(_DWORD *)v6 -= 2;
  }
  v13 = *(void **)(a1 + 608);
  v30[0] = 0;
  v30[1] = 0;
  v14 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v14 += 2;
  v26 = 0;
  v27 = v14;
  v15 = *(_OWORD *)(a2 + 24);
  v28 = *(_OWORD *)(a2 + 8);
  v29 = v15;
  v25 = 0;
  *(_QWORD *)&v31 = v11;
  *((_QWORD *)&v31 + 1) = v9;
  if (v14)
    *(_DWORD *)v14 += 2;
  *(_QWORD *)v32 = v14;
  *(_OWORD *)&v32[8] = v28;
  v33 = v29;
  v17 = (char *)malloc_type_malloc(0x58uLL, 0x10E0040186B289BuLL);
  *(_QWORD *)v17 = MEMORY[0x1E0C809A0];
  *((_QWORD *)v17 + 1) = 50331650;
  *((_QWORD *)v17 + 2) = WTF::BlockPtr<void ()(_NSHTTPConnectionInfo *)>::fromCallable<WebKit::NetworkDataTaskCocoa::setH2PingCallback(WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&)::$_0>(WebKit::NetworkDataTaskCocoa::setH2PingCallback(WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&)::$_0)::{lambda(void *,_NSHTTPConnectionInfo *)#1}::__invoke;
  *((_QWORD *)v17 + 3) = &WTF::BlockPtr<void ()(_NSHTTPConnectionInfo *)>::fromCallable<WebKit::NetworkDataTaskCocoa::setH2PingCallback(WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&)::$_0>(WebKit::NetworkDataTaskCocoa::setH2PingCallback(WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&)::$_0)::descriptor;
  v18 = v31;
  v31 = 0uLL;
  *((_OWORD *)v17 + 2) = v18;
  v19 = *(WTF::StringImpl **)v32;
  if (*(_QWORD *)v32)
  {
    **(_DWORD **)v32 += 2;
    *((_QWORD *)v17 + 6) = v19;
    v20 = *(_OWORD *)&v32[8];
    *(_OWORD *)(v17 + 72) = v33;
    *(_OWORD *)(v17 + 56) = v20;
    *(_QWORD *)v32 = 0;
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v16);
    else
      *(_DWORD *)v19 -= 2;
  }
  else
  {
    *((_QWORD *)v17 + 6) = 0;
    v24 = v33;
    *(_OWORD *)(v17 + 56) = *(_OWORD *)&v32[8];
    *(_OWORD *)(v17 + 72) = v24;
    *(_QWORD *)v32 = 0;
  }
  WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>::~CompletionHandlerWithFinalizer((uint64_t *)&v31);
  objc_msgSend(v13, "getUnderlyingHTTPConnectionInfoWithCompletionHandler:", v17, v25, v26);
  _Block_release(v17);
  v22 = v27;
  v27 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v21);
    else
      *(_DWORD *)v22 -= 2;
  }
  WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>::~CompletionHandlerWithFinalizer(&v25);
  return WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>::~CompletionHandlerWithFinalizer(v30);
}

void sub_196FE91A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,WTF::StringImpl *a21)
{
  const void *v21;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;

  _Block_release(v21);
  v24 = a11;
  a11 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v23);
    else
      *(_DWORD *)v24 -= 2;
  }
  WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>::~CompletionHandlerWithFinalizer(&a9);
  WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>::~CompletionHandlerWithFinalizer(&a17);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NetworkDataTaskCocoa::setTimingAllowFailedFlag(uint64_t this)
{
  *(_BYTE *)(this + 714) |= 0x40u;
  return this;
}

uint64_t WebKit::NetworkDataTaskCocoa::task(WebKit::NetworkDataTaskCocoa *this)
{
  return *((_QWORD *)this + 76);
}

uint64_t WebKit::NetworkProcess::sourceApplicationAuditToken@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;

  v3 = *(_QWORD *)(this + 32);
  if (!v3)
    goto LABEL_6;
  this = *(_QWORD *)(v3 + 352);
  if (!this)
  {
    LOBYTE(v3) = 0;
LABEL_6:
    *(_BYTE *)a2 = 0;
    goto LABEL_4;
  }
  this = xpc_connection_get_audit_token();
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  LOBYTE(v3) = 1;
LABEL_4:
  *(_BYTE *)(a2 + 32) = v3;
  return this;
}

uint64_t WebKit::NetworkProcess::hostNamesWithHSTSCache@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  _QWORD v12[3];
  WTF::StringImpl *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *a3 = 0;
  v12[0] = a2;
  result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), v12);
  if (result)
  {
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v5 = (void *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(*(_QWORD *)(result + 864) + 40), "configuration"), "_hstsStorage"), "nonPreloadedHosts");
    result = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    v6 = result;
    if (result)
    {
      v7 = *(_QWORD *)v15;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v15 != v7)
            objc_enumerationMutation(v5);
          MEMORY[0x19AEABCC8](&v13, *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * v8));
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(a3, &v13, v9, (uint64_t)v12);
          v11 = v13;
          v13 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v10);
            else
              *(_DWORD *)v11 -= 2;
          }
          ++v8;
        }
        while (v6 != v8);
        result = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
        v6 = result;
      }
      while (result);
    }
  }
  return result;
}

void sub_196FE9414(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  WTF::StringImpl ***v12;

  if (*v12)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*v12, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::NetworkProcess::deleteHSTSCacheForHostNames(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  const __CFString *v10;
  uint64_t v11;

  v11 = a2;
  result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v11);
  if (result)
  {
    v5 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v5)
    {
      v6 = result;
      v7 = *(_QWORD **)a3;
      v8 = 8 * v5;
      do
      {
        v9 = (void *)objc_msgSend((id)objc_msgSend(*(id *)(*(_QWORD *)(v6 + 864) + 40), "configuration"), "_hstsStorage");
        if (*v7)
          v10 = (const __CFString *)WTF::StringImpl::operator NSString *();
        else
          v10 = &stru_1E351F1B8;
        result = objc_msgSend(v9, "resetHSTSForHost:", v10);
        ++v7;
        v8 -= 8;
      }
      while (v8);
    }
  }
  return result;
}

uint64_t WebKit::NetworkProcess::clearHSTSCache(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:");
  v6 = a2;
  result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v6);
  if (result)
    return objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(*(_QWORD *)(result + 864) + 40), "configuration"), "_hstsStorage"), "resetHSTSHostsSinceDate:", v4);
  return result;
}

uint64_t WebKit::NetworkProcess::setBackupExclusionPeriodForTesting(uint64_t a1, uint64_t a2, uint64_t *a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  void *v14;
  unsigned int v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;

  v8 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v8 = 1;
  v9 = *a3;
  *a3 = 0;
  *(_QWORD *)(v8 + 8) = v9;
  v18 = a2;
  result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v18);
  if (result)
  {
    v11 = *(_QWORD *)(result + 800);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v11 + 16));
    do
      v12 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v12 + 1, (unsigned int *)v8));
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v13 = off_1E34B5F18;
    v13[1] = v8;
    v17 = v13;
    WebKit::NetworkStorageManager::setBackupExclusionPeriodForTesting(v11, (uint64_t *)&v17, a4);
    result = (uint64_t)v17;
    if (v17)
      result = (*(uint64_t (**)(_QWORD *))(*v17 + 8))(v17);
    if (v11)
      result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v11 + 16), v14);
  }
  do
  {
    v15 = __ldaxr((unsigned int *)v8);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, (unsigned int *)v8));
  if (!v16)
  {
    atomic_store(1u, (unsigned int *)v8);
    v18 = v8;
    return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v18);
  }
  return result;
}

void sub_196FE9698(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v10;
  unsigned __int8 **v11;
  uint64_t v12;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  do
  {
    v14 = __ldaxr(v10);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, v10));
  if (v15)
  {
    if (!v12)
      goto LABEL_5;
  }
  else
  {
    atomic_store(1u, v10);
    a10 = v10;
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&a10);
    if (!v12)
    {
      do
      {
LABEL_5:
        v16 = __ldaxr(v10);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v10));
      if (!v17)
      {
        atomic_store(1u, v10);
        a10 = v10;
        WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&a10);
      }
      _Unwind_Resume(exception_object);
    }
  }
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*v11, a2);
  goto LABEL_5;
}

void sub_196FE9828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, WTF::RefCountedBase *a11, uint64_t a12)
{
  if (a11)
    WTF::RefCounted<WebCore::FormData>::deref(a11);
  if (a12)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(a12 + 8));
  _Unwind_Resume(exception_object);
}

void sub_196FE9BD4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 72);
  *(_QWORD *)(v1 - 72) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 8));
  _Unwind_Resume(a1);
}

void downgradeRequest(NSURLRequest *a1, void *a2)
{
  void *v4;
  void *v5;

  v4 = (void *)objc_msgSend(a2, "mutableCopy");
  if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(v4, "URL"), "scheme"), "isEqualToString:", CFSTR("https")))
  {
    v5 = (void *)objc_msgSend(MEMORY[0x1E0CB3998], "componentsWithURL:resolvingAgainstBaseURL:", objc_msgSend(v4, "URL"), 0);
    objc_msgSend(v5, "setScheme:", CFSTR("http"));
    objc_msgSend(v4, "setURL:", objc_msgSend(v5, "URL"));
    a1->super.isa = (Class)v4;
  }
  else
  {
    a1->super.isa = (Class)a2;
    if (a2)
      CFRetain(a2);
    if (v4)
      CFRelease(v4);
  }
}

void sub_196FE9DBC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void updateIgnoreStrictTransportSecuritySetting(id *a1, uint64_t a2)
{
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v4 = (void *)objc_msgSend((id)objc_msgSend(*a1, "URL"), "scheme");
  if (objc_msgSend(v4, "isEqualToString:", CFSTR("https")))
  {
    if (!(_DWORD)a2)
      return;
    v5 = *a1;
    if ((objc_opt_respondsToSelector() & 1) == 0 || (objc_msgSend(v5, "_ignoreHSTS") & 1) == 0)
      return;
    a2 = 0;
  }
  else
  {
    if (!objc_msgSend(v4, "isEqualToString:", CFSTR("http")))
      return;
    v6 = *a1;
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      if (objc_msgSend(v6, "_ignoreHSTS") == (_DWORD)a2)
        return;
    }
    else
    {
      if ((a2 & 1) == 0)
        return;
      a2 = 1;
    }
  }
  v7 = (void *)objc_msgSend(*a1, "mutableCopy");
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v7, "_setIgnoreHSTS:", a2);
  if (v7)
    CFRetain(v7);
  v8 = *a1;
  *a1 = v7;
  if (!v8)
  {
    if (!v7)
      return;
    goto LABEL_18;
  }
  CFRelease(v8);
  if (v7)
LABEL_18:
    CFRelease(v7);
}

void sub_196FE9EFC(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_196FEA1B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 56);
  *(_QWORD *)(v1 - 56) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 8));
  _Unwind_Resume(a1);
}

id extractResolutionReport(NSError *a1)
{
  id v2;
  NSObject *v4;
  NSObject *v5;
  const void *v6;
  const void *v7;
  void *v8;
  uint64_t provider_name;
  const char *v10;
  unsigned int dns_failure_reason;
  const __CFString *v12;
  void *v13;
  uint64_t extended_dns_error_extra_text;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, nw_interface_t);
  void *v20;
  CFTypeRef cf;
  _QWORD v22[4];
  _QWORD v23[5];

  v23[4] = *MEMORY[0x1E0C80C00];
  v2 = -[NSDictionary objectForKeyedSubscript:](-[NSError userInfo](a1, "userInfo"), "objectForKeyedSubscript:", CFSTR("_NSURLErrorNWResolutionReportKey"));
  if (v2)
  {
    v4 = -[NSDictionary objectForKeyedSubscript:](-[NSError userInfo](a1, "userInfo"), "objectForKeyedSubscript:", CFSTR("_NSURLErrorNWPathKey"));
    if (v4)
    {
      v5 = v4;
      v6 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 1);
      v7 = v6;
      v17 = MEMORY[0x1E0C809B0];
      v18 = 3321888768;
      v19 = ___ZL23extractResolutionReportP7NSError_block_invoke;
      v20 = &__block_descriptor_40_e8_32c38_ZTSN3WTF9RetainPtrI14NSMutableArrayEE_e35_B16__0__NSObject_OS_nw_interface__8l;
      cf = v6;
      if (v6)
        CFRetain(v6);
      nw_path_enumerate_interfaces(v5, &v17);
      v22[0] = CFSTR("provider");
      v8 = (void *)MEMORY[0x1E0CB3940];
      provider_name = nw_resolution_report_get_provider_name();
      if (provider_name)
        v10 = (const char *)provider_name;
      else
        v10 = "";
      v23[0] = objc_msgSend(v8, "stringWithUTF8String:", v10, v17, v18, v19, v20);
      v22[1] = CFSTR("dnsFailureReason");
      dns_failure_reason = nw_resolution_report_get_dns_failure_reason();
      if (dns_failure_reason > 3)
        v12 = &stru_1E351F1B8;
      else
        v12 = off_1E34B6228[dns_failure_reason];
      v23[1] = v12;
      v22[2] = CFSTR("extendedDNSErrorExtraText");
      v13 = (void *)MEMORY[0x1E0CB3940];
      extended_dns_error_extra_text = nw_resolution_report_get_extended_dns_error_extra_text();
      if (extended_dns_error_extra_text)
        v15 = (const char *)extended_dns_error_extra_text;
      else
        v15 = "";
      v16 = objc_msgSend(v13, "stringWithUTF8String:", v15);
      v22[3] = CFSTR("interfaces");
      v23[2] = v16;
      v23[3] = v7;
      v2 = (id)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v23, v22, 4);
      if (cf)
        CFRelease(cf);
      if (v7)
        CFRelease(v7);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void sub_196FEA4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf)
{
  const void *v13;

  CFRelease(v13);
  _Unwind_Resume(a1);
}

uint64_t WTF::HashMap<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::take(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  v8 = *(_QWORD *)(v2 + 16 * v7);
  if (v8 != a2)
  {
    v9 = 1;
    while (v8)
    {
      v7 = ((_DWORD)v7 + v9) & v3;
      v8 = *(_QWORD *)(v2 + 16 * v7);
      ++v9;
      if (v8 == a2)
        goto LABEL_8;
    }
    v7 = *(unsigned int *)(v2 - 4);
  }
LABEL_8:
  if (v7 == *(_DWORD *)(v2 - 4))
    return 0;
  v12 = (_QWORD *)(v2 + 16 * v7);
  v10 = v12[1];
  *v12 = -1;
  ++*(_DWORD *)(*a1 - 16);
  v13 = *a1;
  if (*a1)
    v14 = *(_DWORD *)(v13 - 12) - 1;
  else
    v14 = -1;
  *(_DWORD *)(v13 - 12) = v14;
  v15 = *a1;
  if (*a1)
  {
    v16 = 6 * *(_DWORD *)(v15 - 12);
    v17 = *(_DWORD *)(v15 - 4);
    if (v16 < v17 && v17 >= 9)
      WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v17 >> 1, 0);
  }
  return v10;
}

uint64_t WebCore::AdditionalNetworkLoadMetricsForWebInspector::create(WebCore::AdditionalNetworkLoadMetricsForWebInspector *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = WTF::fastMalloc((WTF *)0x68);
  *(_DWORD *)v2 = 1;
  *(_BYTE *)(v2 + 4) = 3;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  result = WebCore::HTTPHeaderMap::HTTPHeaderMap((WebCore::HTTPHeaderMap *)(v2 + 40));
  *(_QWORD *)(v2 + 80) = -1;
  *(_QWORD *)(v2 + 88) = -1;
  *(_QWORD *)(v2 + 72) = -1;
  *(_BYTE *)(v2 + 96) = 0;
  *(_QWORD *)this = v2;
  return result;
}

void sub_196FEA664(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  WTF *v2;
  WTF::StringImpl **v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v5 = (WTF::StringImpl *)*((_QWORD *)v2 + 4);
  *((_QWORD *)v2 + 4) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)v2 + 3);
  *((_QWORD *)v2 + 3) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)v2 + 2);
  *((_QWORD *)v2 + 2) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *v3;
  *v3 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::makeString<WTF::String,char,unsigned int>(uint64_t result, uint64_t a2, unsigned int a3)
{
  unsigned int v3;
  _QWORD *v5;
  int v6;
  int v7;
  unsigned int v8;
  BOOL v9;
  BOOL v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  _QWORD v23[3];

  v3 = a3;
  v5 = (_QWORD *)result;
  v23[2] = *MEMORY[0x1E0C80C00];
  if (a2)
    v6 = *(_DWORD *)(a2 + 4);
  else
    v6 = 0;
  v7 = 0;
  v8 = a3;
  do
  {
    ++v7;
    v9 = v8 > 9;
    v8 /= 0xAu;
  }
  while (v9);
  if ((v7 & 0x80000000) == 0)
  {
    v10 = __OFADD__(v7, 1);
    v11 = v7 + 1;
    v12 = v10;
    if ((v6 & 0x80000000) == 0 && !v12)
    {
      v13 = (v6 + v11);
      if (!__OFADD__(v6, v11))
      {
        if (!a2 || (*(_BYTE *)(a2 + 16) & 4) != 0)
        {
          if ((v13 & 0x80000000) == 0)
          {
            result = WTF::tryFastCompactMalloc((WTF *)(v13 + 20));
            v14 = v23[0];
            if (v23[0])
            {
              *(_DWORD *)v23[0] = 2;
              *(_DWORD *)(v14 + 4) = v13;
              *(_QWORD *)(v14 + 8) = v14 + 20;
              *(_DWORD *)(v14 + 16) = 4;
              v22 = a2;
              result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v22, (char *)(v14 + 20));
              v19 = v22;
              if (v22)
                v19 = *(unsigned int *)(v22 + 4);
              v20 = 0;
              v21 = (_BYTE *)(v14 + 20 + v19);
              *v21 = 58;
              do
              {
                *((_BYTE *)&v23[1] + v20-- + 4) = (v3 % 0xA) | 0x30;
                v9 = v3 > 9;
                v3 /= 0xAu;
              }
              while (v9);
              if (v20 + 14 <= 13)
                result = (uint64_t)memcpy(v21 + 1, (char *)&v23[1] + v20 + 5, -v20);
              goto LABEL_33;
            }
          }
        }
        else if (v13 <= 0x7FFFFFEF)
        {
          result = WTF::tryFastCompactMalloc((WTF *)(2 * (v6 + v11) + 20));
          v14 = v23[0];
          if (v23[0])
          {
            *(_DWORD *)v23[0] = 2;
            *(_DWORD *)(v14 + 4) = v13;
            *(_QWORD *)(v14 + 8) = v14 + 20;
            *(_DWORD *)(v14 + 16) = 0;
            v22 = a2;
            result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v22, (char *)(v14 + 20));
            if (v22)
              v15 = *(unsigned int *)(v22 + 4);
            else
              v15 = 0;
            v16 = 0;
            *(_WORD *)(v14 + 20 + 2 * v15) = 58;
            do
            {
              *((_BYTE *)&v23[1] + v16-- + 4) = (v3 % 0xA) | 0x30;
              v9 = v3 > 9;
              v3 /= 0xAu;
            }
            while (v9);
            if (v16 + 14 <= 13)
            {
              v17 = (_WORD *)(v14 + 2 * v15 + 22);
              do
                *v17++ = *((unsigned __int8 *)&v23[1] + v16 + 5);
              while (!__CFADD__(v16++, 1));
            }
LABEL_33:
            *v5 = v14;
            return result;
          }
        }
      }
    }
  }
  *v5 = 0;
  __break(0xC471u);
  return result;
}

void sub_196FEA96C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

_QWORD *stringForTLSProtocolVersion(_QWORD *result, int a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = result;
  switch(a2)
  {
    case 769:
    case 770:
    case 771:
    case 772:
      goto LABEL_7;
    default:
      if (a2 == 65277 || a2 == 65279)
      {
LABEL_7:
        result = (_QWORD *)WTF::StringImpl::createWithoutCopyingNonEmpty();
        *v2 = v3;
      }
      else
      {
        *result = 0;
      }
      return result;
  }
}

_QWORD *stringForTLSCipherSuite(_QWORD *result, int a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = result;
  if (a2 > 49186)
  {
    switch(a2)
    {
      case 49187:
      case 49188:
      case 49191:
      case 49192:
      case 49195:
      case 49196:
      case 49199:
      case 49200:
        goto LABEL_26;
      case 49189:
      case 49190:
      case 49193:
      case 49194:
      case 49197:
      case 49198:
        goto LABEL_25;
      default:
        if (a2 == 52392 || a2 == 52393)
          goto LABEL_26;
        goto LABEL_25;
    }
  }
  if (a2 > 4865)
  {
    switch(a2)
    {
      case 49160:
      case 49161:
      case 49162:
      case 49170:
      case 49171:
      case 49172:
        goto LABEL_26;
      case 49163:
      case 49164:
      case 49165:
      case 49166:
      case 49167:
      case 49168:
      case 49169:
        goto LABEL_25;
      default:
        if (a2 == 4866 || a2 == 4867)
          goto LABEL_26;
        goto LABEL_25;
    }
  }
  if (a2 > 60)
  {
    if (a2 > 156)
    {
      if (a2 == 157 || a2 == 4865)
        goto LABEL_26;
    }
    else if (a2 == 61 || a2 == 156)
    {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (a2 > 52)
  {
    if (a2 == 53 || a2 == 60)
      goto LABEL_26;
LABEL_25:
    *result = 0;
    return result;
  }
  if (a2 != 10 && a2 != 47)
    goto LABEL_25;
LABEL_26:
  result = (_QWORD *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  *v2 = v3;
  return result;
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  LODWORD(v2) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(_DWORD *)(result + 56) = v2;
  LODWORD(v2) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(_DWORD *)(result + 60) = v2;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 72) = 0;
  v3 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(result + 64) = v3;
  LODWORD(v3) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  *(_DWORD *)(result + 72) = v3;
  LODWORD(v3) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = 0;
  *(_DWORD *)(result + 76) = v3;
  return result;
}

WTF::ASCIILiteral *__Block_byref_object_dispose__1(uint64_t a1)
{
  WTF::ASCIILiteral *v1;

  v1 = (WTF::ASCIILiteral *)(a1 + 48);
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(a1 + 64));
  return WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector(v1);
}

void sub_196FEAE30(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_196FEAF28(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 24);
  *(_QWORD *)(v1 - 24) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 8));
  _Unwind_Resume(exception_object);
}

unsigned int *WebCore::SharedBuffer::create<NSData *&>@<X0>(WebCore::FragmentedSharedBuffer **a1@<X0>, NSData *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  void *v5;
  unsigned int *result;
  unsigned int *v7;

  WebCore::FragmentedSharedBuffer::create(*a1, a2);
  v4 = WTF::fastMalloc((WTF *)0x38);
  MEMORY[0x19AEAD8A0](v4, &v7);
  *a3 = v4;
  result = v7;
  v7 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v5);
  return result;
}

void sub_196FEB010(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  WTF *v10;
  void *v12;

  WTF::fastFree(v10, a2);
  if (a10)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a10, v12);
  _Unwind_Resume(a1);
}

void sub_196FEB3A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  unsigned __int8 **v16;

  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*v16);
  if (a16)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(a16 + 8));
  _Unwind_Resume(a1);
}

void sub_196FEB41C()
{
  JUMPOUT(0x196FEB400);
}

void sub_196FEB520(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_196FEB60C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::NetworkSessionCocoa::setProxyConfigData(uint64_t a1, uint64_t *a2)
{
  void *v4;
  void (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  WTF *v15;
  void *v16;
  WTF *v17;
  uint64_t v18;
  WTF *v19;
  const void *v20;
  const void *v21;
  char v22;
  uint64_t *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  const void *v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  WTF **v41;
  char v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _QWORD *v47;
  _BYTE v48[128];
  __int128 v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v5 = (void (*)(uint64_t))nw_context_clear_proxiesPtr();
  if (byte_1EE341545 == 1)
  {
    v6 = off_1EE341580;
  }
  else
  {
    if (byte_1EE341544 == 1)
    {
      v35 = (void *)qword_1EE341578;
    }
    else
    {
      v35 = dlopen("/usr/lib/libnetwork.dylib", 2);
      qword_1EE341578 = (uint64_t)v35;
      byte_1EE341544 = 1;
    }
    v6 = dlsym(v35, "nw_context_add_proxy");
    off_1EE341580 = v6;
    byte_1EE341545 = 1;
  }
  if (byte_1EE341546 == 1)
  {
    v40 = off_1EE341588;
  }
  else
  {
    if (byte_1EE341544 == 1)
    {
      v36 = (void *)qword_1EE341578;
    }
    else
    {
      v36 = dlopen("/usr/lib/libnetwork.dylib", 2);
      qword_1EE341578 = (uint64_t)v36;
      byte_1EE341544 = 1;
    }
    v40 = dlsym(v36, "nw_proxy_config_create_with_agent_data");
    off_1EE341588 = v40;
    byte_1EE341546 = 1;
  }
  if (byte_1EE341547 == 1)
  {
    v39 = off_1EE341590;
    if (!v5)
      return;
  }
  else
  {
    if (byte_1EE341544 == 1)
    {
      v37 = (void *)qword_1EE341578;
    }
    else
    {
      v37 = dlopen("/usr/lib/libnetwork.dylib", 2);
      qword_1EE341578 = (uint64_t)v37;
      byte_1EE341544 = 1;
    }
    v39 = dlsym(v37, "nw_proxy_config_stack_requires_http_protocols");
    off_1EE341590 = v39;
    byte_1EE341547 = 1;
    if (!v5)
      return;
  }
  if (v6 && v40 && v39)
  {
    v41 = (WTF **)(a1 + 920);
    WTF::Vector<WTF::RetainPtr<NSObject  {objcproto18OS_nw_proxy_config}*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WTF *)(a1 + 920), v4);
    v7 = *((unsigned int *)a2 + 3);
    if (!(_DWORD)v7)
      goto LABEL_36;
    v8 = 0;
    v9 = *a2;
    v38 = *a2 + 32 * v7;
    do
    {
      v49 = *(_OWORD *)(v9 + 16);
      v10 = ((uint64_t (*)(_QWORD, _QWORD, __int128 *))v40)(*(_QWORD *)v9, *(unsigned int *)(v9 + 12), &v49);
      v42 = ((uint64_t (*)(void))v39)();
      v11 = *(unsigned int *)(a1 + 932);
      if ((_DWORD)v11 == *(_DWORD *)(a1 + 928))
      {
        v12 = v11 + (v11 >> 2);
        if (v12 >= 0x10)
          v13 = v12 + 1;
        else
          v13 = 16;
        if (v13 <= v11 + 1)
          v14 = v11 + 1;
        else
          v14 = v13;
        if (v14 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x196FEBAE0);
        }
        v15 = *v41;
        v17 = (WTF *)WTF::fastMalloc((WTF *)(8 * v14));
        *(_DWORD *)(a1 + 928) = v14;
        *(_QWORD *)(a1 + 920) = v17;
        if ((_DWORD)v11)
        {
          v18 = 8 * v11;
          v19 = v15;
          do
          {
            v20 = *(const void **)v19;
            *(_QWORD *)v19 = 0;
            *(_QWORD *)v17 = v20;
            v21 = *(const void **)v19;
            *(_QWORD *)v19 = 0;
            if (v21)
              CFRelease(v21);
            v17 = (WTF *)((char *)v17 + 8);
            v19 = (WTF *)((char *)v19 + 8);
            v18 -= 8;
          }
          while (v18);
          v17 = *v41;
        }
        if (v15)
        {
          if (v17 == v15)
          {
            *(_QWORD *)(a1 + 920) = 0;
            *(_DWORD *)(a1 + 928) = 0;
          }
          WTF::fastFree(v15, v16);
          v17 = *v41;
        }
        v22 = v42;
        v11 = *(unsigned int *)(a1 + 932);
        v23 = (uint64_t *)((char *)v17 + 8 * v11);
      }
      else
      {
        v23 = (uint64_t *)((char *)*v41 + 8 * v11);
        v22 = v42;
      }
      v8 |= v22;
      *v23 = v10;
      *(_DWORD *)(a1 + 932) = v11 + 1;
      v9 += 32;
    }
    while (v9 != v38);
    if ((v8 & 1) != 0)
    {
      v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v24 = off_1E34B6158;
      v24[1] = a1;
      *(_QWORD *)&v49 = v24;
      WebKit::NetworkSessionCocoa::forEachSessionWrapper((_QWORD *)a1, (uint64_t *)&v49);
      if ((_QWORD)v49)
        (*(void (**)(_QWORD))(*(_QWORD *)v49 + 8))(v49);
    }
    else
    {
LABEL_36:
      *(_QWORD *)&v49 = objc_alloc_init(MEMORY[0x1E0C99E20]);
      v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v25 = off_1E34B6180;
      v25[1] = &v49;
      v47 = v25;
      WebKit::NetworkSessionCocoa::forEachSessionWrapper((_QWORD *)a1, (uint64_t *)&v47);
      if (v47)
        (*(void (**)(_QWORD *))(*v47 + 8))(v47);
      v43 = 0u;
      v44 = 0u;
      v45 = 0u;
      v46 = 0u;
      v26 = (void *)v49;
      v27 = objc_msgSend((id)v49, "countByEnumeratingWithState:objects:count:", &v43, v48, 16);
      if (v27)
      {
        v28 = *(_QWORD *)v44;
        do
        {
          for (i = 0; i != v27; ++i)
          {
            if (*(_QWORD *)v44 != v28)
              objc_enumerationMutation(v26);
            v30 = *(_QWORD *)(*((_QWORD *)&v43 + 1) + 8 * i);
            v5(v30);
            v31 = *(unsigned int *)(a1 + 932);
            if ((_DWORD)v31)
            {
              v32 = *(_QWORD **)(a1 + 920);
              v33 = 8 * v31;
              do
              {
                ((void (*)(uint64_t, _QWORD))v6)(v30, *v32++);
                v33 -= 8;
              }
              while (v33);
            }
          }
          v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v43, v48, 16);
        }
        while (v27);
      }
      v34 = (const void *)v49;
      *(_QWORD *)&v49 = 0;
      if (v34)
        CFRelease(v34);
    }
  }
}

void sub_196FEBB5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v26;

  v26 = *(_QWORD *)(v24 - 112);
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  _Unwind_Resume(exception_object);
}

void WebKit::NetworkSessionCocoa::~NetworkSessionCocoa(WebKit::NetworkSessionCocoa *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  const void *v6;
  WTF::StringImpl *v7;
  const void *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  WebKit::SessionSet *v14;

  v3 = *((_QWORD *)this + 122);
  if (v3)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 121);
  if (v4)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v4, a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 119);
  *((_QWORD *)this + 119) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (const void *)*((_QWORD *)this + 117);
  *((_QWORD *)this + 117) = 0;
  if (v6)
    CFRelease(v6);
  WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 920, a2);
  v8 = (const void *)*((_QWORD *)this + 114);
  *((_QWORD *)this + 114) = 0;
  if (v8)
    CFRelease(v8);
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 113);
  *((_QWORD *)this + 113) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 112);
  *((_QWORD *)this + 112) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v7);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 111);
  *((_QWORD *)this + 111) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v7);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *((_QWORD *)this + 110);
  if (v12)
    WTF::HashTable<WebKit::WebPageNetworkParameters,WTF::KeyValuePair<WebKit::WebPageNetworkParameters,WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebPageNetworkParameters,WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebKit::WebPageNetworkParameters>,WTF::HashMap<WebKit::WebPageNetworkParameters,WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebKit::WebPageNetworkParameters>,WTF::HashTraits<WebKit::WebPageNetworkParameters>,WTF::HashTraits<WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebPageNetworkParameters>>::deallocateTable(v12, v7);
  v13 = *((_QWORD *)this + 109);
  if (v13)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v13, v7);
  v14 = (WebKit::SessionSet *)*((_QWORD *)this + 108);
  *((_QWORD *)this + 108) = 0;
  if (v14)
    WTF::RefCounted<WebKit::SessionSet>::deref(v14, v7);
  WebKit::NetworkSession::~NetworkSession(this);
}

{
  _DWORD *v2;
  void *v3;

  WebKit::NetworkSessionCocoa::~NetworkSessionCocoa(this, a2);
  if (v2[4])
    bzero(v2, 0x3D8uLL);
  else
    WTF::fastFree((WTF *)v2, v3);
}

uint64_t WebKit::NetworkSessionCocoa::initializeEphemeralStatelessSessionIfNeeded(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (!a2
    || (v3 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(a1 + 872), a2)) == 0)
  {
    v3 = *(_QWORD *)(a1 + 864);
  }
  return WebKit::SessionSet::initializeEphemeralStatelessSessionIfNeeded(v3, (WebKit **)a1);
}

uint64_t WebKit::SessionSet::initializeEphemeralStatelessSessionIfNeeded(uint64_t a1, WebKit **a2)
{
  uint64_t v2;
  void *v5;
  void *v6;

  v2 = a1 + 80;
  if (!*(_QWORD *)(a1 + 88))
  {
    v5 = (void *)objc_msgSend(MEMORY[0x1E0C92CA0], "ephemeralSessionConfiguration");
    v6 = (void *)objc_msgSend(*(id *)(a1 + 40), "configuration");
    objc_msgSend(v5, "setHTTPCookieAcceptPolicy:", 1);
    objc_msgSend(v5, "setURLCredentialStorage:", 0);
    objc_msgSend(v5, "setURLCache:", 0);
    objc_msgSend(v5, "setAllowsCellularAccess:", objc_msgSend(v6, "allowsCellularAccess"));
    objc_msgSend(v5, "setConnectionProxyDictionary:", objc_msgSend(v6, "connectionProxyDictionary"));
    objc_msgSend(v5, "set_shouldSkipPreferredClientCertificateLookup:", 1);
    objc_msgSend(v5, "set_sourceApplicationAuditTokenData:", objc_msgSend(v6, "_sourceApplicationAuditTokenData"));
    objc_msgSend(v5, "set_sourceApplicationSecondaryIdentifier:", objc_msgSend(v6, "_sourceApplicationSecondaryIdentifier"));
    objc_msgSend(v5, "set_CTDataConnectionServiceType:", objc_msgSend(v6, "_CTDataConnectionServiceType"));
    WebKit::SessionWrapper::initialize(v2, (WebKit::AuxiliaryProcess *)v5, a2, 2);
  }
  return v2;
}

BOOL WebKit::NetworkSessionCocoa::hasAppBoundSession(WebKit::NetworkSessionCocoa *this)
{
  _BOOL8 result;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  if (*(_QWORD *)(*((_QWORD *)this + 108) + 24))
    return 1;
  v2 = (_QWORD *)*((_QWORD *)this + 109);
  if (v2)
  {
    v3 = *((unsigned int *)v2 - 1);
    v4 = &v2[2 * v3];
    if (*((_DWORD *)v2 - 3))
    {
      v5 = (_QWORD *)*((_QWORD *)this + 109);
      if ((_DWORD)v3)
      {
        v6 = 16 * v3;
        v5 = (_QWORD *)*((_QWORD *)this + 109);
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          v5 += 2;
          v6 -= 16;
          if (!v6)
          {
            v5 = v4;
            goto LABEL_13;
          }
        }
      }
      goto LABEL_13;
    }
    v5 = &v2[2 * v3];
  }
  else
  {
    v5 = 0;
    v3 = 0;
  }
  v4 = &v2[2 * v3];
LABEL_13:
  if (v2)
    v2 += 2 * *((unsigned int *)v2 - 1);
  if (v2 == v5)
    return 0;
  do
  {
    v7 = *(_QWORD *)(v5[1] + 24);
    result = v7 != 0;
    if (v7)
      break;
    v8 = v5 + 2;
    v5 = v4;
    if (v8 != v4)
    {
      v5 = v8;
      while ((unint64_t)(*v5 + 1) <= 1)
      {
        v5 += 2;
        if (v5 == v4)
        {
          v5 = v4;
          break;
        }
      }
    }
  }
  while (v5 != v2);
  return result;
}

void WebKit::NetworkSessionCocoa::clearAppBoundSession(WebKit::NetworkSessionCocoa *this)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;

  v2 = *((_QWORD *)this + 108);
  v5 = *(_QWORD **)(v2 + 24);
  v3 = (_QWORD *)(v2 + 24);
  v4 = v5;
  *v3 = 0;
  if (v5)
    std::default_delete<WebKit::IsolatedSession>::operator()[abi:sn180100]((uint64_t)v3, v4);
  v6 = (_QWORD *)*((_QWORD *)this + 109);
  if (!v6)
  {
    v9 = 0;
    v7 = 0;
LABEL_12:
    v8 = &v6[2 * v7];
    goto LABEL_13;
  }
  v7 = *((unsigned int *)v6 - 1);
  v8 = &v6[2 * v7];
  if (!*((_DWORD *)v6 - 3))
  {
    v9 = &v6[2 * v7];
    goto LABEL_12;
  }
  v9 = v6;
  if ((_DWORD)v7)
  {
    v10 = 16 * v7;
    v9 = v6;
    while ((unint64_t)(*v9 + 1) <= 1)
    {
      v9 += 2;
      v10 -= 16;
      if (!v10)
      {
        v9 = v8;
        break;
      }
    }
  }
LABEL_13:
  if (v6)
    v11 = &v6[2 * *((unsigned int *)v6 - 1)];
  else
    v11 = 0;
  while (v9 != v11)
  {
    v12 = v9[1];
    v15 = *(_QWORD **)(v12 + 24);
    v13 = (_QWORD *)(v12 + 24);
    v14 = v15;
    *v13 = 0;
    if (v15)
      std::default_delete<WebKit::IsolatedSession>::operator()[abi:sn180100]((uint64_t)v13, v14);
    v16 = v9 + 2;
    v9 = v8;
    if (v16 != v8)
    {
      v9 = v16;
      while ((unint64_t)(*v9 + 1) <= 1)
      {
        v9 += 2;
        if (v9 == v8)
        {
          v9 = v8;
          break;
        }
      }
    }
  }
}

uint64_t WebKit::NetworkSessionCocoa::hasIsolatedSession(WebKit::NetworkSessionCocoa *this, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  if ((WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(*(_QWORD *)(*((_QWORD *)this + 108) + 16), a2) & 1) != 0)return 1;
  v5 = (_QWORD *)*((_QWORD *)this + 109);
  if (!v5)
  {
    v8 = 0;
    v6 = 0;
LABEL_12:
    v7 = &v5[2 * v6];
    goto LABEL_13;
  }
  v6 = *((unsigned int *)v5 - 1);
  v7 = &v5[2 * v6];
  if (!*((_DWORD *)v5 - 3))
  {
    v8 = &v5[2 * v6];
    goto LABEL_12;
  }
  v8 = v5;
  if ((_DWORD)v6)
  {
    v9 = 16 * v6;
    v8 = v5;
    while ((unint64_t)(*v8 + 1) <= 1)
    {
      v8 += 2;
      v9 -= 16;
      if (!v9)
      {
        v8 = v7;
        break;
      }
    }
  }
LABEL_13:
  if (v5)
    v10 = &v5[2 * *((unsigned int *)v5 - 1)];
  else
    v10 = 0;
  if (v10 != v8)
  {
    while (1)
    {
      result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(*(_QWORD *)(v8[1] + 16), a2);
      if ((result & 1) != 0)
        return 1;
      v11 = v8 + 2;
      v8 = v7;
      if (v11 != v7)
      {
        v8 = v11;
        while ((unint64_t)(*v8 + 1) <= 1)
        {
          v8 += 2;
          if (v8 == v7)
          {
            v8 = v7;
            break;
          }
        }
      }
      if (v8 == v10)
        return result;
    }
  }
  return 0;
}

uint64_t WebKit::NetworkSessionCocoa::clearIsolatedSessions(WebKit::NetworkSessionCocoa *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  v3 = *((_QWORD *)this + 108);
  result = *(_QWORD *)(v3 + 16);
  if (result)
  {
    *(_QWORD *)(v3 + 16) = 0;
    result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(result, a2);
  }
  v5 = (_QWORD *)*((_QWORD *)this + 109);
  if (!v5)
  {
    v8 = 0;
    v6 = 0;
LABEL_12:
    v7 = &v5[2 * v6];
    goto LABEL_13;
  }
  v6 = *((unsigned int *)v5 - 1);
  v7 = &v5[2 * v6];
  if (!*((_DWORD *)v5 - 3))
  {
    v8 = &v5[2 * v6];
    goto LABEL_12;
  }
  v8 = v5;
  if ((_DWORD)v6)
  {
    v9 = 16 * v6;
    v8 = v5;
    while ((unint64_t)(*v8 + 1) <= 1)
    {
      v8 += 2;
      v9 -= 16;
      if (!v9)
      {
        v8 = v7;
        break;
      }
    }
  }
LABEL_13:
  if (v5)
    v10 = &v5[2 * *((unsigned int *)v5 - 1)];
  else
    v10 = 0;
  while (v8 != v10)
  {
    v11 = v8[1];
    result = *(_QWORD *)(v11 + 16);
    if (result)
    {
      *(_QWORD *)(v11 + 16) = 0;
      result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(result, a2);
    }
    v12 = v8 + 2;
    v8 = v7;
    if (v12 != v7)
    {
      v8 = v12;
      while ((unint64_t)(*v8 + 1) <= 1)
      {
        v8 += 2;
        if (v8 == v7)
        {
          v8 = v7;
          break;
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::NetworkSessionCocoa::invalidateAndCancelSessionSet(WebKit::NetworkSessionCocoa *this, WebKit::SessionSet *a2)
{
  uint64_t v3;
  const WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  const WTF::StringImpl *v10;
  uint64_t v11;
  _QWORD v12[2];

  objc_msgSend(*((id *)this + 5), "invalidateAndCancel");
  objc_msgSend(*((id *)this + 11), "invalidateAndCancel");
  objc_msgSend(*((id *)this + 6), "sessionInvalidated");
  objc_msgSend(*((id *)this + 12), "sessionInvalidated");
  v6 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(*((_QWORD *)this + 2), v3, v4);
  result = *((_QWORD *)this + 2);
  if (result)
    v8 = result + 16 * *(unsigned int *)(result - 4);
  else
    v8 = 0;
  v12[1] = v5;
  if (v8 != v6)
  {
    do
    {
      objc_msgSend(*(id *)(*(_QWORD *)(v6 + 8) + 8), "invalidateAndCancel");
      objc_msgSend(*(id *)(*(_QWORD *)(v6 + 8) + 16), "sessionInvalidated");
      v12[0] = v6 + 16;
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v12, v9, v10);
      v6 = v12[0];
    }
    while (v12[0] != v8);
    result = *((_QWORD *)this + 2);
  }
  if (result)
  {
    *((_QWORD *)this + 2) = 0;
    result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(result, v5);
  }
  v11 = *((_QWORD *)this + 3);
  if (v11)
  {
    objc_msgSend(*(id *)(v11 + 8), "invalidateAndCancel");
    return objc_msgSend(*(id *)(*((_QWORD *)this + 3) + 16), "sessionInvalidated");
  }
  return result;
}

uint64_t WebKit::NetworkSessionCocoa::invalidateAndCancel(WebKit::NetworkSessionCocoa **this, void *a2)
{
  WebKit::SessionSet *v3;
  uint64_t result;
  WebKit::SessionSet *v5;
  WebKit::NetworkSessionCocoa *v6;
  uint64_t v7;
  WebKit::NetworkSessionCocoa *v8;
  WebKit::NetworkSessionCocoa *v9;
  uint64_t v10;
  WebKit::NetworkSessionCocoa *v11;
  WebKit::NetworkSessionCocoa *v12;

  WebKit::NetworkSession::invalidateAndCancel((WebKit::NetworkSession *)this, a2);
  result = WebKit::NetworkSessionCocoa::invalidateAndCancelSessionSet(this[108], v3);
  v6 = this[109];
  if (!v6)
  {
    v9 = 0;
    v7 = 0;
LABEL_10:
    v8 = (WebKit::NetworkSessionCocoa *)((char *)v6 + 16 * v7);
    goto LABEL_11;
  }
  v7 = *((unsigned int *)v6 - 1);
  v8 = (WebKit::NetworkSessionCocoa *)((char *)v6 + 16 * v7);
  if (!*((_DWORD *)v6 - 3))
  {
    v9 = (WebKit::NetworkSessionCocoa *)((char *)v6 + 16 * v7);
    goto LABEL_10;
  }
  v9 = v6;
  if ((_DWORD)v7)
  {
    v10 = 16 * v7;
    v9 = v6;
    while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
    {
      v9 = (WebKit::NetworkSessionCocoa *)((char *)v9 + 16);
      v10 -= 16;
      if (!v10)
      {
        v9 = v8;
        break;
      }
    }
  }
LABEL_11:
  if (v6)
    v11 = (WebKit::NetworkSessionCocoa *)((char *)v6 + 16 * *((unsigned int *)v6 - 1));
  else
    v11 = 0;
  while (v9 != v11)
  {
    result = WebKit::NetworkSessionCocoa::invalidateAndCancelSessionSet(*((WebKit::NetworkSessionCocoa **)v9 + 1), v5);
    v12 = (WebKit::NetworkSessionCocoa *)((char *)v9 + 16);
    v9 = v8;
    if (v12 != v8)
    {
      v9 = v12;
      while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
      {
        v9 = (WebKit::NetworkSessionCocoa *)((char *)v9 + 16);
        if (v9 == v8)
        {
          v9 = v8;
          break;
        }
      }
    }
  }
  return result;
}

void *WebKit::NetworkSessionCocoa::originsWithCredentials@<X0>(WebKit::NetworkSessionCocoa *this@<X0>, uint64_t *a2@<X8>)
{
  void *result;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t *v17;
  uint64_t v18;
  _BYTE v19[24];
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[24];
  int v31;
  _BYTE v32[128];
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  result = (void *)objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)this + 108) + 40), "configuration"), "URLCredentialStorage");
  if (result)
  {
    v4 = result;
    v5 = objc_msgSend(MEMORY[0x1E0C92C68], "sharedCredentialStorage");
    v17 = a2;
    *a2 = 0;
    v6 = (void *)objc_msgSend(v4, "allCredentials");
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    result = (void *)objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v26, v33, 16);
    v7 = (uint64_t)result;
    if (result)
    {
      v18 = *(_QWORD *)v27;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v27 != v18)
            objc_enumerationMutation(v6);
          v9 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * v8);
          v22 = 0u;
          v23 = 0u;
          v24 = 0u;
          v25 = 0u;
          v10 = (void *)objc_msgSend((id)objc_msgSend(v6, "objectForKeyedSubscript:", v9), "allValues");
          v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v22, v32, 16);
          if (v11)
          {
            v12 = *(_QWORD *)v23;
            while (2)
            {
              for (i = 0; i != v11; ++i)
              {
                if (*(_QWORD *)v23 != v12)
                  objc_enumerationMutation(v10);
                if (v4 != (void *)v5 || objc_msgSend(*(id *)(*((_QWORD *)&v22 + 1) + 8 * i), "persistence") == 1)
                {
                  MEMORY[0x19AEABCC8](&v21, objc_msgSend(v9, "protocol"));
                  MEMORY[0x19AEABCC8](&v20, objc_msgSend(v9, "host"));
                  WebCore::SecurityOriginData::SecurityOriginData((WebCore::SecurityOriginData *)v30, (_DWORD **)&v21, (_DWORD **)&v20, (unsigned __int16)objc_msgSend(v9, "port") | 0x10000);
                  WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add(v17, (uint64_t)v30, (uint64_t)v19);
                  if (v31 != -1)
                    ((void (*)(_BYTE *, _BYTE *))off_1E34B5D48[v31])(v19, v30);
                  v31 = -1;
                  v15 = v20;
                  v20 = 0;
                  if (v15)
                  {
                    if (*(_DWORD *)v15 == 2)
                      WTF::StringImpl::destroy(v15, v14);
                    else
                      *(_DWORD *)v15 -= 2;
                  }
                  v16 = v21;
                  v21 = 0;
                  if (v16)
                  {
                    if (*(_DWORD *)v16 == 2)
                      WTF::StringImpl::destroy(v16, v14);
                    else
                      *(_DWORD *)v16 -= 2;
                  }
                  goto LABEL_27;
                }
              }
              v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v22, v32, 16);
              if (v11)
                continue;
              break;
            }
          }
LABEL_27:
          ++v8;
        }
        while (v8 != v7);
        result = (void *)objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v26, v33, 16);
        v7 = (uint64_t)result;
      }
      while (result);
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

void sub_196FEC6D4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::SecurityOriginData **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,int a37)
{
  if (*a10)
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(*a10, a2);
  _Unwind_Resume(exception_object);
}

WebCore::SecurityOriginData *WebKit::NetworkSessionCocoa::removeCredentialsForOrigins(uint64_t a1, uint64_t a2)
{
  WebCore::SecurityOriginData *result;
  WebCore::SecurityOriginData *v4;
  uint64_t v5;
  WebCore::SecurityOriginData *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  WebCore::SecurityOriginData *v35;
  _BYTE v36[24];
  int v37;
  _BYTE v38[128];
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  result = (WebCore::SecurityOriginData *)objc_msgSend((id)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 864) + 40), "configuration"), "URLCredentialStorage");
  if (result)
  {
    v4 = result;
    v35 = 0;
    v5 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v5)
    {
      v6 = *(WebCore::SecurityOriginData **)a2;
      v7 = 32 * v5;
      do
      {
        if ((WebCore::SecurityOriginData::isNull(v6) & 1) == 0 && *((_DWORD *)v6 + 6) != 1)
          WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add((uint64_t *)&v35, (uint64_t)v6, (uint64_t)v36);
        v6 = (WebCore::SecurityOriginData *)((char *)v6 + 32);
        v7 -= 32;
      }
      while (v7);
    }
    v8 = objc_msgSend(MEMORY[0x1E0C92C68], "sharedCredentialStorage");
    v9 = (void *)-[WebCore::SecurityOriginData allCredentials](v4, "allCredentials");
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
    if (v11)
    {
      v22 = v9;
      v23 = *(_QWORD *)v32;
      do
      {
        v12 = 0;
        v24 = v11;
        do
        {
          if (*(_QWORD *)v32 != v23)
            objc_enumerationMutation(v9);
          v13 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * v12);
          v27 = 0u;
          v28 = 0u;
          v29 = 0u;
          v30 = 0u;
          v14 = (void *)objc_msgSend((id)objc_msgSend(v9, "objectForKeyedSubscript:", v13), "allValues");
          v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v27, v38, 16);
          if (v15)
          {
            v16 = *(_QWORD *)v28;
            do
            {
              for (i = 0; i != v15; ++i)
              {
                if (*(_QWORD *)v28 != v16)
                  objc_enumerationMutation(v14);
                v18 = *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * i);
                if (v4 != (WebCore::SecurityOriginData *)v8
                  || objc_msgSend(*(id *)(*((_QWORD *)&v27 + 1) + 8 * i), "persistence") == 1)
                {
                  MEMORY[0x19AEABCC8](&v26, objc_msgSend(v13, "protocol"));
                  MEMORY[0x19AEABCC8](&v25, objc_msgSend(v13, "host"));
                  WebCore::SecurityOriginData::SecurityOriginData((WebCore::SecurityOriginData *)v36, (_DWORD **)&v26, (_DWORD **)&v25, (unsigned __int16)objc_msgSend(v13, "port") | 0x10000);
                  v20 = v25;
                  v25 = 0;
                  if (v20)
                  {
                    if (*(_DWORD *)v20 == 2)
                      WTF::StringImpl::destroy(v20, v19);
                    else
                      *(_DWORD *)v20 -= 2;
                  }
                  v21 = v26;
                  v26 = 0;
                  if (v21)
                  {
                    if (*(_DWORD *)v21 == 2)
                      WTF::StringImpl::destroy(v21, v19);
                    else
                      *(_DWORD *)v21 -= 2;
                  }
                  if (WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::SecurityOriginData>,WTF::DefaultHash<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData>((uint64_t *)&v35, (uint64_t)v36))-[WebCore::SecurityOriginData removeCredential:forProtectionSpace:](v4, "removeCredential:forProtectionSpace:", v18, v13);
                  if (v37 != -1)
                    ((void (*)(WTF::StringImpl **, _BYTE *))off_1E34B5D48[v37])(&v26, v36);
                }
              }
              v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v27, v38, 16);
            }
            while (v15);
          }
          ++v12;
          v9 = v22;
        }
        while (v12 != v24);
        v11 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
      }
      while (v11);
    }
    result = v35;
    if (v35)
      return (WebCore::SecurityOriginData *)WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v35, v10);
  }
  return result;
}

void sub_196FECA94(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,WebCore::SecurityOriginData *a32,char a33,uint64_t a34,uint64_t a35,int a36)
{
  if (a32)
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(a32, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::NetworkSessionCocoa::clearCredentials(uint64_t a1, double a2)
{
  uint64_t result;
  void *v4;
  uint64_t v5;
  BOOL v6;
  _BOOL4 v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  result = objc_msgSend((id)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 864) + 40), "configuration"), "URLCredentialStorage");
  if (result)
  {
    v4 = (void *)result;
    v5 = objc_msgSend(MEMORY[0x1E0C92C68], "sharedCredentialStorage");
    v6 = a2 > 0.0 || v4 == (void *)v5;
    v7 = v6;
    v8 = (void *)objc_msgSend(v4, "allCredentials");
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    result = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
    v18 = result;
    if (result)
    {
      v17 = *(_QWORD *)v24;
      do
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v24 != v17)
            objc_enumerationMutation(v8);
          v10 = *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * v9);
          v19 = 0u;
          v20 = 0u;
          v21 = 0u;
          v22 = 0u;
          v11 = (void *)objc_msgSend((id)objc_msgSend(v8, "objectForKeyedSubscript:", v10, v17), "allValues");
          v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
          if (v12)
          {
            v13 = v12;
            v14 = *(_QWORD *)v20;
            do
            {
              v15 = 0;
              do
              {
                if (*(_QWORD *)v20 != v14)
                  objc_enumerationMutation(v11);
                v16 = *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * v15);
                if (!v7 || objc_msgSend(*(id *)(*((_QWORD *)&v19 + 1) + 8 * v15), "persistence") == 1)
                  objc_msgSend(v4, "removeCredential:forProtectionSpace:", v16, v10);
                ++v15;
              }
              while (v13 != v15);
              v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
            }
            while (v13);
          }
          ++v9;
        }
        while (v9 != v18);
        result = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
        v18 = result;
      }
      while (result);
    }
  }
  return result;
}

void WebKit::createChallengeCompletionHandler(_QWORD *a1, uint64_t *a2, uint64_t a3, WebCore::AuthenticationChallengeBase *a4, WTF::StringImpl **a5, uint64_t a6, uint64_t *a7)
{
  const void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  _QWORD *v19;
  WTF::StringImpl *v20;
  CFTypeRef v21;
  WTF::StringImpl *v22;
  int v23;
  CFTypeRef v24;
  CFTypeRef v25;
  WTF::StringImpl *v26;
  CFTypeRef v27;
  CFTypeRef v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[416];
  CFTypeRef v32;
  CFTypeRef v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  _BYTE v36[416];
  CFTypeRef cf;
  CFTypeRef v38;

  WebCore::AuthenticationChallengeBase::AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)v36, a4);
  v14 = (const void *)*((_QWORD *)a4 + 52);
  cf = v14;
  if (v14)
    CFRetain(v14);
  v15 = (const void *)*((_QWORD *)a4 + 53);
  v38 = v15;
  if (v15)
    CFRetain(v15);
  v16 = *a7;
  *a7 = 0;
  v17 = *a2;
  *a2 = 0;
  v29 = v16;
  v30 = v17;
  WebCore::AuthenticationChallengeBase::AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)v31, (const WebCore::AuthenticationChallengeBase *)v36);
  v32 = cf;
  if (cf)
    CFRetain(cf);
  v33 = v38;
  if (v38)
    CFRetain(v38);
  v34 = a6;
  v18 = *a5;
  if (*a5)
    *(_DWORD *)v18 += 2;
  v35 = v18;
  v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x1E0);
  *v19 = off_1E34B5D68;
  v19[1] = v29;
  v19[2] = v30;
  v19[3] = a3;
  WebCore::AuthenticationChallengeBase::AuthenticationChallengeBase((uint64_t)(v19 + 4), (uint64_t)v31);
  v19[56] = v32;
  v21 = v33;
  v32 = 0;
  v33 = 0;
  v19[57] = v21;
  v19[58] = v34;
  v22 = v35;
  if (!v35)
  {
    v19[59] = 0;
    *a1 = v19;
    v35 = 0;
    goto LABEL_14;
  }
  v23 = *(_DWORD *)v35;
  *(_DWORD *)v35 += 2;
  v19[59] = v22;
  *a1 = v19;
  v35 = 0;
  if (v23)
  {
    *(_DWORD *)v22 = v23;
LABEL_14:
    v33 = 0;
    goto LABEL_17;
  }
  WTF::StringImpl::destroy(v22, v20);
  v24 = v33;
  v33 = 0;
  if (v24)
    CFRelease(v24);
LABEL_17:
  v25 = v32;
  v32 = 0;
  if (v25)
    CFRelease(v25);
  WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)v31, v20);
  v27 = v38;
  v38 = 0;
  if (v27)
    CFRelease(v27);
  v28 = cf;
  cf = 0;
  if (v28)
    CFRelease(v28);
  WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)v36, v26);
}

void sub_196FECF6C(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  CFTypeRef cf;
  char a69;
  WebCore::AuthenticationChallengeBase *v69;
  WTF::StringImpl *v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  const void *v75;
  const void *v76;

  if (cf)
    CFRelease(cf);
  WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase(v69, a2);
  if (a10)
  {
    v72 = a10 + 30;
    do
    {
      v73 = __ldaxr(v72);
      v74 = v73 - 1;
    }
    while (__stlxr(v74, v72));
    if (!v74)
    {
      atomic_store(1u, a10 + 30);
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
    }
  }
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  v75 = (const void *)STACK[0x388];
  STACK[0x388] = 0;
  if (v75)
    CFRelease(v75);
  v76 = (const void *)STACK[0x380];
  STACK[0x380] = 0;
  if (v76)
    CFRelease(v76);
  WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)&a69, v71);
  _Unwind_Resume(a1);
}

void WebKit::NetworkSessionCocoa::createWebSocketTask(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, WebCore::ResourceRequestBase *a7@<X6>, uint64_t *a8@<X7>, uint64_t *a9@<X8>, WebCore::SecurityOriginData *a10, char a11, char a12, int a13, unsigned __int16 a14, int a15, char a16, char a17)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  CFTypeRef v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  WTF::URL *v38;
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unsigned __int8 *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  void *v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  CFTypeRef v64;
  CFTypeRef cf;
  __int128 v66;
  uint64_t v67;

  v23 = (void *)WebCore::ResourceRequest::nsURLRequest();
  v24 = v23;
  if (v23)
    CFRetain(v23);
  if (*a8)
  {
    v25 = (void *)objc_msgSend(v24, "mutableCopy");
    v26 = v25;
    if (v25)
      CFRetain(v25);
    if (v24)
      CFRelease(v24);
    *(_QWORD *)&v66 = 0;
    DWORD2(v66) = 0;
    LOBYTE(v27) = 1;
    BYTE12(v66) = 1;
    v28 = *a8;
    if (*a8)
    {
      v29 = *(unsigned __int8 *)(v28 + 16);
      v30 = *(_QWORD *)(v28 + 8);
      LODWORD(v28) = *(_DWORD *)(v28 + 4);
      *(_QWORD *)&v66 = v30;
      v27 = (v29 >> 2) & 1;
    }
    DWORD2(v66) = v28;
    BYTE12(v66) = v27;
    WTF::StringView::createNSString((WTF::StringView *)&v66);
    objc_msgSend(v26, "addValue:forHTTPHeaderField:", cf, CFSTR("Sec-WebSocket-Protocol"));
    v31 = cf;
    cf = 0;
    if (v31)
      CFRelease(v31);
    v24 = v26;
  }
  else
  {
    v26 = 0;
  }
  objc_msgSend(v24, "_setProperty:forKey:", MEMORY[0x1E0C9AAA0], *MEMORY[0x1E0C93088]);
  if ((*((_BYTE *)a7 + 148) & 4) == 0)
  {
    if (v26)
    {
      v32 = v26;
    }
    else
    {
      v33 = (void *)objc_msgSend(v24, "mutableCopy");
      v32 = v33;
      if (v33)
        CFRetain(v33);
      if (v24)
        CFRelease(v24);
      v24 = v32;
    }
    v26 = v32;
    objc_msgSend(v32, "setAttribution:", 1);
  }
  v34 = objc_msgSend(v24, "attribution");
  v35 = 816;
  if (v34)
    v35 = 817;
  *(_BYTE *)(a1 + v35) = 1;
  if ((a12 & 1) == 0)
  {
    if (v26)
    {
      v36 = v26;
    }
    else
    {
      v37 = (void *)objc_msgSend(v24, "mutableCopy");
      v36 = v37;
      if (v37)
        CFRetain(v37);
      if (v24)
        CFRelease(v24);
      v24 = v36;
    }
    v26 = v36;
    objc_msgSend(v36, "_setProhibitPrivacyProxy:", 1);
  }
  if ((a11 & 1) != 0)
    goto LABEL_75;
  v38 = (WTF::URL *)WebCore::ResourceRequestBase::url(a7);
  v39 = (unsigned __int8 *)WTF::URL::host(v38);
  v41 = v40;
  v42 = *(_QWORD *)WebCore::SecurityOriginData::host(a10);
  if (v42)
  {
    v43 = *(unsigned int *)(v42 + 16);
    v44 = *(unsigned __int8 **)(v42 + 8);
    LODWORD(v42) = *(_DWORD *)(v42 + 4);
    v45 = (v43 >> 2) & 1;
  }
  else
  {
    v44 = 0;
    v45 = 1;
  }
  if (WTF::operator==(v39, v41, v44, v42 | (unint64_t)(v45 << 32)))
  {
LABEL_75:
    if (objc_msgSend(MEMORY[0x1E0C92C28], "instancesRespondToSelector:", sel__setPrivacyProxyFailClosedForUnreachableNonMainHosts_))
    {
      if (v26)
      {
        v46 = v26;
      }
      else
      {
        v47 = (void *)objc_msgSend(v24, "mutableCopy");
        v46 = v47;
        if (v47)
          CFRetain(v47);
        if (v24)
          CFRelease(v24);
        v24 = v46;
      }
      v26 = v46;
      objc_msgSend(v46, "_setPrivacyProxyFailClosedForUnreachableNonMainHosts:", 1);
    }
  }
  if (!v26)
  {
    v48 = (void *)objc_msgSend(v24, "mutableCopy");
    v49 = v48;
    if (v48)
      CFRetain(v48);
    if (v24)
      CFRelease(v24);
    v26 = v49;
    v24 = v49;
  }
  WebKit::enableAdvancedPrivacyProtections((WebKit *)v26, (NSURLRequest *)a14);
  if (a2
    && (v50 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(a1 + 872), a2)) != 0)
  {
    v51 = v50;
  }
  else
  {
    v51 = *(_QWORD *)(a1 + 864);
  }
  ++*(_DWORD *)v51;
  v52 = (void *)objc_msgSend(*(id *)(v51 + 40), "webSocketTaskWithRequest:", v24);
  v53 = v52;
  v64 = v52;
  if (v52)
    CFRetain(v52);
  objc_msgSend(v53, "setMaximumMessageSize:", 0x7FFFFFFFFFFFFFFFLL);
  v54 = WTF::fastMalloc((WTF *)0xB0);
  v66 = *(_OWORD *)a3;
  v67 = *(_QWORD *)(a3 + 16);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v51 + 8), v51);
  v55 = *(unsigned int **)(v51 + 8);
  if (v55)
  {
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 + 1, v55));
  }
  cf = v55;
  WebKit::WebSocketTask::WebSocketTask(v54, a6, a2, &v66, a4, a5, (uint64_t *)&cf, (uint64_t)a7, (uint64_t)a10, (uint64_t *)&v64, a16, a17);
  *a9 = v54;
  v58 = (unsigned int *)cf;
  cf = 0;
  if (v58)
  {
    do
    {
      v59 = __ldaxr(v58);
      v60 = v59 - 1;
    }
    while (__stlxr(v60, v58));
    if (!v60)
    {
      atomic_store(1u, v58);
      WTF::fastFree((WTF *)v58, v57);
    }
  }
  if (v64)
    CFRelease(v64);
  WTF::RefCounted<WebKit::SessionSet>::deref((WebKit::SessionSet *)v51, v57);
  if (v26)
    CFRelease(v26);
  if (v24)
    CFRelease(v24);
}

void sub_196FED574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, CFTypeRef a15, CFTypeRef cf)
{
  const void *v16;

  if (cf)
    CFRelease(cf);
  if (v16)
  {
    CFRelease(v16);
    CFRelease(v16);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::NetworkSessionCocoa::addWebSocketTask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  NSObject *v32;
  uint64_t v33;
  _DWORD v34[2];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (a2
    && (v5 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(a1 + 872), a2)) != 0)
  {
    v6 = v5;
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 864);
  }
  v7 = objc_msgSend(*(id *)(a3 + 56), "taskIdentifier");
  v10 = *(_QWORD *)(v6 + 72);
  v9 = (uint64_t *)(v6 + 72);
  v8 = v10;
  if (v10
    || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v9),
        (v8 = *v9) != 0))
  {
    v11 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v11 = 0;
  }
  v12 = (v7 + ~(v7 << 32)) ^ ((unint64_t)(v7 + ~(v7 << 32)) >> 22);
  v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v11 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v7)
      {
        __break(0xC471u);
        JUMPOUT(0x196FED890);
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v11;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v9 - 16);
      v16 = v18;
    }
  }
  *v16 = v7;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 40), a3);
  v21 = *(unsigned int **)(a3 + 40);
  if (v21)
  {
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
  }
  v23 = (unsigned int *)v16[1];
  v16[1] = (uint64_t)v21;
  if (v23)
  {
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, v23);
      WTF::fastFree((WTF *)v23, v20);
    }
  }
  v26 = *v9;
  if (*v9)
    v27 = *(_DWORD *)(v26 - 12) + 1;
  else
    v27 = 1;
  *(_DWORD *)(v26 - 12) = v27;
  v28 = *v9;
  if (*v9)
    v29 = *(_DWORD *)(v28 - 12);
  else
    v29 = 0;
  v30 = (*(_DWORD *)(v28 - 16) + v29);
  v31 = *(unsigned int *)(v28 - 4);
  if (v31 <= 0x400)
  {
    if (3 * v31 > 4 * v30)
      goto LABEL_30;
    goto LABEL_29;
  }
  if (v31 <= 2 * v30)
LABEL_29:
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v9);
LABEL_30:
  v32 = qword_1ECE714B0;
  if (os_log_type_enabled((os_log_t)qword_1ECE714B0, OS_LOG_TYPE_DEFAULT))
  {
    v33 = *v9;
    if (*v9)
      LODWORD(v33) = *(_DWORD *)(v33 - 12);
    v34[0] = 67109120;
    v34[1] = v33;
    _os_log_impl(&dword_196BCC000, v32, OS_LOG_TYPE_DEFAULT, "NetworkSessionCocoa::addWebSocketTask, web socket count is %u", (uint8_t *)v34, 8u);
  }
}

void WebKit::NetworkSessionCocoa::removeWebSocketTask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  NSObject *v26;
  uint64_t v27;
  _DWORD v28[2];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = objc_msgSend(*(id *)(a3 + 56), "taskIdentifier");
  v8 = *(_QWORD *)(a2 + 72);
  v7 = (uint64_t *)(a2 + 72);
  v6 = v8;
  if (!v8)
    goto LABEL_28;
  v9 = *(_DWORD *)(v6 - 8);
  v10 = (v4 + ~(v4 << 32)) ^ ((unint64_t)(v4 + ~(v4 << 32)) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v9 & ((v12 >> 31) ^ v12);
  v14 = *(_QWORD *)(v6 + 16 * v13);
  if (v14 != v4)
  {
    v15 = 1;
    while (v14)
    {
      v13 = ((_DWORD)v13 + v15) & v9;
      v14 = *(_QWORD *)(v6 + 16 * v13);
      ++v15;
      if (v14 == v4)
        goto LABEL_8;
    }
    v13 = *(unsigned int *)(v6 - 4);
  }
LABEL_8:
  if (v13 == *(_DWORD *)(v6 - 4))
  {
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x196FEDA7CLL);
  }
  v16 = (_QWORD *)(v6 + 16 * v13);
  v17 = (unsigned int *)v16[1];
  *v16 = -1;
  v16[1] = 0;
  if (v17)
  {
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, v5);
    }
  }
  ++*(_DWORD *)(*v7 - 16);
  v20 = *v7;
  if (*v7)
    v21 = *(_DWORD *)(v20 - 12) - 1;
  else
    v21 = -1;
  *(_DWORD *)(v20 - 12) = v21;
  v22 = *v7;
  if (*v7)
  {
    v23 = 6 * *(_DWORD *)(v22 - 12);
    v24 = *(_DWORD *)(v22 - 4);
    if (v23 < v24 && v24 >= 9)
      WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(v7, v24 >> 1);
  }
  v26 = qword_1ECE714B0;
  if (os_log_type_enabled((os_log_t)qword_1ECE714B0, OS_LOG_TYPE_DEFAULT))
  {
    v27 = *v7;
    if (*v7)
      LODWORD(v27) = *(_DWORD *)(v27 - 12);
    v28[0] = 67109120;
    v28[1] = v27;
    _os_log_impl(&dword_196BCC000, v26, OS_LOG_TYPE_DEFAULT, "NetworkSessionCocoa::removeWebSocketTask, web socket count is %u", (uint8_t *)v28, 8u);
  }
}

void WebKit::NetworkSessionCocoa::addWebPageNetworkParameters(uint64_t *a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t *v6;
  uint64_t v7;
  int v8;
  const WTF::StringImpl *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  const WTF::StringImpl *v13;
  _QWORD *v14;
  int v15;
  void *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  _DWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  int v39;
  WebKit::SessionSet *v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  int v58;
  WebKit::SessionSet *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  const __CFString *v73;
  uint64_t v74;
  unsigned int **v75;
  void *v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t *v82;
  uint64_t v83;
  int v84;
  unsigned int v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t *v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  unint64_t v95;

  v6 = a1 + 110;
  v7 = a1[110];
  if (v7
    || (WTF::HashTable<WebKit::WebPageNetworkParameters,WTF::KeyValuePair<WebKit::WebPageNetworkParameters,WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebPageNetworkParameters,WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebKit::WebPageNetworkParameters>,WTF::HashMap<WebKit::WebPageNetworkParameters,WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebKit::WebPageNetworkParameters>,WTF::HashTraits<WebKit::WebPageNetworkParameters>,WTF::HashTraits<WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebPageNetworkParameters>>::expand(a1 + 110, 0), (v7 = *v6) != 0))
  {
    v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = *a3;
  if (*a3)
  {
    v10 = *((_DWORD *)v9 + 4);
    if (v10 >= 0x100)
      LODWORD(v9) = v10 >> 8;
    else
      LODWORD(v9) = WTF::StringImpl::hashSlowCase(v9);
  }
  v11 = v9 & v8;
  v12 = v7 + 16 * (v9 & v8);
  if ((WTF::equal(*(WTF **)v12, 0, (const WTF::StringImpl *)a3) & 1) == 0)
  {
    v14 = 0;
    v15 = 1;
    do
    {
      if (*(_QWORD *)v12 == -1)
      {
        v14 = (_QWORD *)v12;
      }
      else if ((WTF::equal(*(WTF **)v12, *a3, v13) & 1) != 0)
      {
        goto LABEL_30;
      }
      v11 = (v11 + v15) & v8;
      v12 = v7 + 16 * v11;
      ++v15;
    }
    while (!WTF::equal(*(WTF **)v12, 0, v13));
    if (v14)
    {
      *v14 = 0;
      v14[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v12 = (uint64_t)v14;
    }
  }
  WTF::String::operator=((WTF::StringImpl **)v12, (WTF::StringImpl *)a3);
  v17 = *(unsigned int **)(v12 + 8);
  *(_QWORD *)(v12 + 8) = 0;
  if (v17)
  {
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, v16);
    }
  }
  v20 = *v6;
  if (*v6)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v22 = *v6;
  if (*v6)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 <= 0x400)
  {
    if (3 * v25 > 4 * v24)
      goto LABEL_30;
    goto LABEL_29;
  }
  if (v25 <= 2 * v24)
LABEL_29:
    v12 = WTF::HashTable<WebKit::WebPageNetworkParameters,WTF::KeyValuePair<WebKit::WebPageNetworkParameters,WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebPageNetworkParameters,WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebKit::WebPageNetworkParameters>,WTF::HashMap<WebKit::WebPageNetworkParameters,WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebKit::WebPageNetworkParameters>,WTF::HashTraits<WebKit::WebPageNetworkParameters>,WTF::HashTraits<WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebPageNetworkParameters>>::expand(v6, (WTF **)v12);
LABEL_30:
  v26 = *(_QWORD *)(v12 + 8);
  if (v26)
  {
    do
      v27 = __ldaxr((unsigned int *)v26);
    while (__stlxr(v27 + 1, (unsigned int *)v26));
    v28 = *(_DWORD **)(v26 + 8);
    if (v28)
    {
      v29 = a1 + 109;
      v30 = a1[109];
      if (v30
        || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1 + 109, 0), (v30 = *v29) != 0))
      {
        v31 = *(_DWORD *)(v30 - 8);
      }
      else
      {
        v31 = 0;
      }
      v32 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
      v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
      v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
      v35 = v31 & ((v34 >> 31) ^ v34);
      v36 = (uint64_t *)(v30 + 16 * v35);
      v37 = *v36;
      if (*v36)
      {
        v38 = 0;
        v39 = 1;
        while (v37 != a2)
        {
          if (v37 == -1)
            v38 = v36;
          v35 = (v35 + v39) & v31;
          v36 = (uint64_t *)(v30 + 16 * v35);
          v37 = *v36;
          ++v39;
          if (!*v36)
          {
            if (v38)
            {
              *v38 = 0;
              v38[1] = 0;
              --*(_DWORD *)(*v29 - 16);
              v36 = v38;
            }
            goto LABEL_44;
          }
        }
        goto LABEL_73;
      }
LABEL_44:
      v40 = (WebKit::SessionSet *)v36[1];
      *v36 = a2;
      ++*v28;
      v36[1] = (uint64_t)v28;
      if (v40)
        WTF::RefCounted<WebKit::SessionSet>::deref(v40, v16);
      v41 = *v29;
      if (*v29)
        v42 = *(_DWORD *)(v41 - 12) + 1;
      else
        v42 = 1;
      *(_DWORD *)(v41 - 12) = v42;
      v62 = *v29;
      if (*v29)
        v63 = *(_DWORD *)(v62 - 12);
      else
        v63 = 0;
      v64 = (*(_DWORD *)(v62 - 16) + v63);
      v65 = *(unsigned int *)(v62 - 4);
      if (v65 > 0x400)
      {
        if (v65 > 2 * v64)
          goto LABEL_73;
      }
      else if (3 * v65 > 4 * v64)
      {
        do
        {
LABEL_73:
          v66 = __ldaxr((unsigned int *)v26);
          v67 = v66 - 1;
        }
        while (__stlxr(v67, (unsigned int *)v26));
        if (!v67)
        {
          atomic_store(1u, (unsigned int *)v26);
          WTF::fastFree((WTF *)v26, v16);
        }
        return;
      }
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v29, v36);
      goto LABEL_73;
    }
    do
    {
      v43 = __ldaxr((unsigned int *)v26);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, (unsigned int *)v26));
    if (!v44)
    {
      atomic_store(1u, (unsigned int *)v26);
      WTF::fastFree((WTF *)v26, v16);
    }
  }
  v45 = a1 + 109;
  v47 = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)v47 = 1;
  *(_OWORD *)(v47 + 8) = 0u;
  *(_OWORD *)(v47 + 24) = 0u;
  *(_OWORD *)(v47 + 40) = 0u;
  *(_OWORD *)(v47 + 56) = 0u;
  *(_OWORD *)(v47 + 72) = 0u;
  *(_OWORD *)(v47 + 88) = 0u;
  *(_OWORD *)(v47 + 104) = 0u;
  *(_QWORD *)(v47 + 120) = 0;
  v48 = a1[109];
  if (v48
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1 + 109, 0), (v48 = *v45) != 0))
  {
    v49 = *(_DWORD *)(v48 - 8);
  }
  else
  {
    v49 = 0;
  }
  v50 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v51 = 9 * ((v50 + ~(v50 << 13)) ^ ((v50 + ~(v50 << 13)) >> 8));
  v52 = (v51 ^ (v51 >> 15)) + ~((v51 ^ (v51 >> 15)) << 27);
  v53 = (v52 >> 31) ^ v52;
  v54 = v49 & v53;
  v55 = (uint64_t *)(v48 + 16 * (v49 & v53));
  v56 = *v55;
  if (*v55)
  {
    v57 = 0;
    v58 = 1;
    do
    {
      if (v56 == a2)
      {
        WTF::RefCounted<WebKit::SessionSet>::deref((WebKit::SessionSet *)v47, v46);
        goto LABEL_85;
      }
      if (v56 == -1)
        v57 = v55;
      v54 = (v54 + v58) & v49;
      v55 = (uint64_t *)(v48 + 16 * v54);
      v56 = *v55;
      ++v58;
    }
    while (*v55);
    if (v57)
    {
      *v57 = 0;
      v57[1] = 0;
      --*(_DWORD *)(*v45 - 16);
      v55 = v57;
    }
  }
  v59 = (WebKit::SessionSet *)v55[1];
  *v55 = a2;
  v55[1] = v47;
  if (v59)
    WTF::RefCounted<WebKit::SessionSet>::deref(v59, v46);
  v60 = *v45;
  if (*v45)
    v61 = *(_DWORD *)(v60 - 12) + 1;
  else
    v61 = 1;
  *(_DWORD *)(v60 - 12) = v61;
  v68 = *v45;
  if (*v45)
    v69 = *(_DWORD *)(v68 - 12);
  else
    v69 = 0;
  v70 = (*(_DWORD *)(v68 - 16) + v69);
  v71 = *(unsigned int *)(v68 - 4);
  if (v71 <= 0x400)
  {
    if (3 * v71 > 4 * v70)
      goto LABEL_85;
    goto LABEL_84;
  }
  if (v71 <= 2 * v70)
LABEL_84:
    v55 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1 + 109, v55);
LABEL_85:
  v72 = (void *)objc_msgSend((id)objc_msgSend(*(id *)(a1[108] + 40), "configuration"), "copy");
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    if (*a3)
      v73 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v73 = &stru_1E351F1B8;
    objc_msgSend(v72, "set_attributedBundleIdentifier:", v73);
  }
  WebKit::NetworkSessionCocoa::initializeNSURLSessionsInSet((uint64_t)a1, v55[1], (WebKit::AuxiliaryProcess *)v72);
  v74 = v55[1];
  v75 = (unsigned int **)(v74 + 8);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v74 + 8), v74);
  v77 = *v75;
  if (*v75)
  {
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 + 1, v77));
  }
  v79 = *(unsigned int **)(v12 + 8);
  *(_QWORD *)(v12 + 8) = v77;
  if (v79)
  {
    do
    {
      v80 = __ldaxr(v79);
      v81 = v80 - 1;
    }
    while (__stlxr(v81, v79));
    if (!v81)
    {
      atomic_store(1u, v79);
      WTF::fastFree((WTF *)v79, v76);
    }
  }
  v82 = a1 + 103;
  v83 = a1[103];
  if (v83
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1 + 103, 0), (v83 = *v82) != 0))
  {
    v84 = *(_DWORD *)(v83 - 8);
  }
  else
  {
    v84 = 0;
  }
  v85 = v84 & v53;
  v86 = (uint64_t *)(v83 + 16 * (v84 & v53));
  v87 = *v86;
  if (*v86)
  {
    v88 = 0;
    v89 = 1;
    while (v87 != a2)
    {
      if (v87 == -1)
        v88 = v86;
      v85 = (v85 + v89) & v84;
      v86 = (uint64_t *)(v83 + 16 * v85);
      v87 = *v86;
      ++v89;
      if (!*v86)
      {
        if (v88)
        {
          *v88 = 0;
          v88[1] = 0;
          --*(_DWORD *)(*v82 - 16);
          v86 = v88;
        }
        goto LABEL_106;
      }
    }
    goto LABEL_115;
  }
LABEL_106:
  *v86 = a2;
  WTF::String::operator=((WTF::StringImpl **)v86 + 1, (WTF::StringImpl *)a3);
  v90 = *v82;
  if (*v82)
    v91 = *(_DWORD *)(v90 - 12) + 1;
  else
    v91 = 1;
  *(_DWORD *)(v90 - 12) = v91;
  v92 = *v82;
  if (*v82)
    v93 = *(_DWORD *)(v92 - 12);
  else
    v93 = 0;
  v94 = (*(_DWORD *)(v92 - 16) + v93);
  v95 = *(unsigned int *)(v92 - 4);
  if (v95 <= 0x400)
  {
    if (3 * v95 > 4 * v94)
      goto LABEL_115;
    goto LABEL_114;
  }
  if (v95 <= 2 * v94)
LABEL_114:
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v82, v86);
LABEL_115:
  if (v72)
    CFRelease(v72);
}

void sub_196FEE168(_Unwind_Exception *a1, void *a2)
{
  WebKit::SessionSet *v2;

  WTF::RefCounted<WebKit::SessionSet>::deref(v2, a2);
  _Unwind_Resume(a1);
}

WTF *WebKit::NetworkSessionCocoa::loadImageForDecoding(WebKit::NetworkSession *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::RefCountedBase *v15;
  WTF::RefCountedBase *v16;
  const void *v17;
  CFTypeRef v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  _DWORD *v25;
  __int128 v26;
  WebKit::NetworkDataTaskCocoa *v27;
  WebKit::NetworkDataTaskCocoa *v28;
  uint64_t v29;
  void *v30;
  CFTypeRef v31;
  CFTypeRef v32;
  WTF::StringImpl *v33;
  WTF *v34;
  WTF *result;
  _BYTE v36[32];
  WTF *v37;
  WTF *v38;
  _BYTE v39[152];
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::RefCountedBase *v42;
  uint64_t v43;
  char v44;
  CFTypeRef v45;
  _BYTE v46[2584];
  uint64_t v47;
  CFTypeRef cf;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  WebKit::NetworkLoadParameters::NetworkLoadParameters((WebKit::NetworkLoadParameters *)v36);
  WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)v39, a2);
  v11 = *(WTF::StringImpl **)(a2 + 152);
  *(_QWORD *)(a2 + 152) = 0;
  v12 = v40;
  v40 = v11;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(WTF::StringImpl **)(a2 + 160);
  *(_QWORD *)(a2 + 160) = 0;
  v14 = v41;
  v41 = v13;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v10);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(WTF::RefCountedBase **)(a2 + 168);
  *(_QWORD *)(a2 + 168) = 0;
  v16 = v42;
  v42 = v15;
  if (v16)
    WTF::RefCounted<WebCore::FormData>::deref(v16);
  v43 = *(_QWORD *)(a2 + 176);
  v44 = *(_BYTE *)(a2 + 184);
  v17 = *(const void **)(a2 + 192);
  *(_QWORD *)(a2 + 192) = 0;
  v18 = v45;
  v45 = v17;
  if (v18)
    CFRelease(v18);
  v19 = (_QWORD *)operator new();
  v20 = v19;
  v21 = *((_QWORD *)a1 + 4);
  v22 = (unsigned int *)(v21 + 120);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 + 1, v22));
  v19[1] = 0;
  *v19 = off_1E34B5DA0;
  v19[2] = v21;
  v24 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v39);
  v25 = *(_DWORD **)v24;
  if (*(_QWORD *)v24)
    *v25 += 2;
  v20[3] = v25;
  v26 = *(_OWORD *)(v24 + 24);
  *((_OWORD *)v20 + 2) = *(_OWORD *)(v24 + 8);
  *((_OWORD *)v20 + 3) = v26;
  v20[8] = *((_QWORD *)a1 + 3);
  v20[9] = a3;
  v20[10] = a4;
  v27 = (WebKit::NetworkDataTaskCocoa *)WTF::fastMalloc((WTF *)0x318);
  v28 = WebKit::NetworkDataTaskCocoa::NetworkDataTaskCocoa(v27, a1, (WebKit::NetworkDataTaskClient *)v20, (const WebKit::NetworkLoadParameters *)v36);
  v29 = *a5;
  *a5 = 0;
  v20[11] = v28;
  v20[12] = v29;
  v20[13] = 0;
  (*(void (**)(WebKit::NetworkDataTaskCocoa *))(*(_QWORD *)v28 + 24))(v28);
  if (v49)
  {
    v31 = cf;
    cf = 0;
    if (v31)
      CFRelease(v31);
  }
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v30);
  if (v46[2560])
    WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v46);
  v32 = v45;
  v45 = 0;
  if (v32)
    CFRelease(v32);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v39);
  v34 = v38;
  v38 = 0;
  if (v34)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v34, v33);
  result = v37;
  v37 = 0;
  if (result)
    return (WTF *)WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)result, v33);
  return result;
}

void sub_196FEE41C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, WTF *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,CFTypeRef a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  WebCore::ResourceRequestBase *v47;
  _QWORD *v48;
  unsigned int **v49;
  unsigned int *v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  unsigned int *v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  void *v59;
  const void *v60;
  WTF::StringImpl *v61;

  v51 = (unsigned int *)v48[13];
  v48[13] = 0;
  if (v51)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v51, a2);
  v52 = v48[12];
  v48[12] = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  v53 = v48[11];
  v48[11] = 0;
  if (v53)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v53 + 8));
  v54 = (WTF::StringImpl *)v48[3];
  v48[3] = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
      WTF::StringImpl::destroy(v54, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v54 -= 2;
  }
  v55 = (unsigned int *)v48[2];
  v48[2] = 0;
  if (v55)
  {
    v56 = v55 + 30;
    do
    {
      v57 = __ldaxr(v56);
      v58 = v57 - 1;
    }
    while (__stlxr(v58, v56));
    if (!v58)
    {
      atomic_store(1u, v55 + 30);
      (*(void (**)(unsigned int *))(*(_QWORD *)v55 + 8))(v55);
    }
  }
  WTF::WeakPtrFactory<WebKit::NetworkDataTaskClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v49, a2);
  MEMORY[0x19AEB936C](v48, 0x10A1C4056C4F33ALL);
  if (LOBYTE(STACK[0xB78]))
  {
    v60 = (const void *)STACK[0xB70];
    STACK[0xB70] = 0;
    if (v60)
      CFRelease(v60);
  }
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0xB48], v59);
  if (LOBYTE(STACK[0xB30]))
    WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)&a47);
  if (a44)
    CFRelease(a44);
  WebCore::ResourceRequestBase::~ResourceRequestBase(v47);
  if (a14)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)a14, v61);
  if (a13)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)a13, v61);
  _Unwind_Resume(a1);
}

void WebKit::NetworkSessionCocoa::dataTaskWithRequest(_QWORD *a1, WebKit::AuxiliaryProcess *a2, WebCore::ResourceRequestBase *a3, unsigned __int8 *a4, uint64_t *a5)
{
  uint64_t IdentifierInternal;
  unsigned __int8 **v11;
  WebKit::NetworkSessionCocoa::BlobDataTaskClient *v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  WKURLSessionTaskDelegate *v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  unsigned __int8 *v35;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  void *v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  int v54;
  uint64_t v55;
  int v56;
  WTF *v57;
  void *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  uint64_t v65;
  CFTypeRef v66[2];

  IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  WebCore::ResourceRequestBase::url(a3);
  if (WTF::URL::protocolIs())
  {
    v11 = *(unsigned __int8 ***)(a1[4] + 32);
    v12 = (WebKit::NetworkSessionCocoa::BlobDataTaskClient *)WTF::fastMalloc((WTF *)0x30);
    *((_QWORD *)v12 + 1) = 0;
    *(_QWORD *)v12 = off_1E34B6058;
    WebCore::ResourceRequestBase::url(a3);
    WebCore::BlobRegistryImpl::filesInBlob();
    v13 = a4[32];
    if (a4[32])
    {
      WebCore::SecurityOriginData::securityOrigin((WebCore::SecurityOriginData *)a4);
      v14 = (uint64_t)v64;
      if (v64)
      {
        do
          v15 = __ldaxr(v64);
        while (__stlxr(v15 + 1, v64));
      }
    }
    else
    {
      v14 = 0;
    }
    v65 = v14;
    v33 = WTF::fastMalloc((WTF *)0x2C8);
    *((_QWORD *)v12 + 2) = WebKit::NetworkDataTaskBlob::NetworkDataTaskBlob(v33, (uint64_t)a1, (uint64_t)v12, a3, (uint64_t)v66, &v65);
    if (v14)
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v14, v34);
    if (v13 && v64)
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v64, v34);
    WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v66, v34);
    if (!v11)
      goto LABEL_48;
    v35 = *v11;
    if (__ldaxr(*v11))
    {
      __clrex();
    }
    else if (!__stxr(1u, v35))
    {
LABEL_43:
      ++*((_QWORD *)v35 + 1);
      v42 = __ldxr(v35);
      if (v42 == 1)
      {
        if (!__stlxr(0, v35))
          goto LABEL_48;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v35);
LABEL_48:
      *((_QWORD *)v12 + 3) = v11;
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 5) = IdentifierInternal;
      (*(void (**)(_QWORD))(**((_QWORD **)v12 + 2) + 24))(*((_QWORD *)v12 + 2));
      v44 = a1 + 121;
      v45 = a1[121];
      if (v45
        || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1 + 121),
            (v45 = *v44) != 0))
      {
        v46 = *(_DWORD *)(v45 - 8);
      }
      else
      {
        v46 = 0;
      }
      v47 = (IdentifierInternal + ~(IdentifierInternal << 32)) ^ ((unint64_t)(IdentifierInternal
                                                                                   + ~(IdentifierInternal << 32)) >> 22);
      v48 = 9 * ((v47 + ~(v47 << 13)) ^ ((v47 + ~(v47 << 13)) >> 8));
      v49 = (v48 ^ (v48 >> 15)) + ~((v48 ^ (v48 >> 15)) << 27);
      v50 = v46 & ((v49 >> 31) ^ v49);
      v51 = (uint64_t *)(v45 + 16 * v50);
      v52 = *v51;
      if (*v51)
      {
        v53 = 0;
        v54 = 1;
        do
        {
          if (v52 == IdentifierInternal)
          {
            WebKit::NetworkSessionCocoa::BlobDataTaskClient::~BlobDataTaskClient(v12, v43);
            WTF::fastFree(v57, v58);
            goto LABEL_69;
          }
          if (v52 == -1)
            v53 = v51;
          v50 = (v50 + v54) & v46;
          v51 = (uint64_t *)(v45 + 16 * v50);
          v52 = *v51;
          ++v54;
        }
        while (*v51);
        if (v53)
        {
          *v53 = 0;
          v53[1] = 0;
          --*(_DWORD *)(*v44 - 16);
          v51 = v53;
        }
      }
      *v51 = IdentifierInternal;
      std::unique_ptr<WebKit::NetworkSessionCocoa::BlobDataTaskClient>::reset[abi:sn180100]((WebKit::NetworkSessionCocoa::BlobDataTaskClient **)v51 + 1, v12);
      v55 = *v44;
      if (*v44)
        v56 = *(_DWORD *)(v55 - 12) + 1;
      else
        v56 = 1;
      *(_DWORD *)(v55 - 12) = v56;
      v59 = *v44;
      if (*v44)
        v60 = *(_DWORD *)(v59 - 12);
      else
        v60 = 0;
      v61 = (*(_DWORD *)(v59 - 16) + v60);
      v62 = *(unsigned int *)(v59 - 4);
      if (v62 > 0x400)
      {
        if (v62 > 2 * v61)
          goto LABEL_69;
      }
      else if (3 * v62 > 4 * v61)
      {
LABEL_69:
        v63 = *a5;
        *a5 = 0;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v63 + 16))(v63, IdentifierInternal);
        (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
        return;
      }
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v44);
      goto LABEL_69;
    }
    MEMORY[0x19AEABB3C](v35);
    goto LABEL_43;
  }
  v16 = WebCore::ResourceRequest::nsURLRequest();
  v17 = WebKit::NetworkSessionCocoa::sessionWrapperForTask((uint64_t)a1, a2, a3, 1u, 0);
  v18 = *(void **)(v17 + 8);
  if (v18)
    CFRetain(*(CFTypeRef *)(v17 + 8));
  v66[0] = (CFTypeRef)objc_msgSend(v18, "dataTaskWithRequest:", v16);
  v19 = -[WKURLSessionTaskDelegate initWithTask:identifier:session:]([WKURLSessionTaskDelegate alloc], "initWithTask:identifier:session:", v66[0], IdentifierInternal, a1);
  objc_msgSend((id)v66[0], "setDelegate:", v19);
  v20 = a1 + 122;
  v21 = a1[122];
  if (v21
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1 + 122, 0), (v21 = *v20) != 0))
  {
    v22 = *(_DWORD *)(v21 - 8);
  }
  else
  {
    v22 = 0;
  }
  v23 = (IdentifierInternal + ~(IdentifierInternal << 32)) ^ ((unint64_t)(IdentifierInternal
                                                                               + ~(IdentifierInternal << 32)) >> 22);
  v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
  v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
  v26 = v22 & ((v25 >> 31) ^ v25);
  v27 = (uint64_t *)(v21 + 16 * v26);
  v28 = *v27;
  if (*v27)
  {
    v29 = 0;
    v30 = 1;
    do
    {
      if (v28 == IdentifierInternal)
      {
        __break(0xC471u);
        return;
      }
      if (v28 == -1)
        v29 = v27;
      v26 = (v26 + v30) & v22;
      v27 = (uint64_t *)(v21 + 16 * v26);
      v28 = *v27;
      ++v30;
    }
    while (*v27);
    if (v29)
    {
      *v29 = 0;
      v29[1] = 0;
      --*(_DWORD *)(*v20 - 16);
      v27 = v29;
    }
  }
  *v27 = IdentifierInternal;
  WTF::GenericHashTraits<WTF::RetainPtr<NSURLSessionDataTask>>::assignToEmpty<WTF::RetainPtr<NSURLSessionDataTask>,NSURLSessionDataTask*&>((const void **)v27 + 1, v66);
  v31 = *v20;
  if (*v20)
    v32 = *(_DWORD *)(v31 - 12) + 1;
  else
    v32 = 1;
  *(_DWORD *)(v31 - 12) = v32;
  v37 = *v20;
  if (*v20)
    v38 = *(_DWORD *)(v37 - 12);
  else
    v38 = 0;
  v39 = (*(_DWORD *)(v37 - 16) + v38);
  v40 = *(unsigned int *)(v37 - 4);
  if (v40 > 0x400)
  {
    if (v40 > 2 * v39)
      goto LABEL_37;
    goto LABEL_36;
  }
  if (3 * v40 <= 4 * v39)
LABEL_36:
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v20, v27);
LABEL_37:
  objc_msgSend((id)v66[0], "resume");
  v41 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v41 + 16))(v41, IdentifierInternal);
  (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  if (v19)
    CFRelease(v19);
  if (v18)
    CFRelease(v18);
}

void sub_196FEEABC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, uint64_t a10, uint64_t a11)
{
  WebKit::NetworkSessionCocoa::BlobDataTaskClient *v11;
  WTF *v13;
  void *v14;

  WebKit::NetworkSessionCocoa::BlobDataTaskClient::~BlobDataTaskClient(v11, a2);
  WTF::fastFree(v13, v14);
  _Unwind_Resume(a1);
}

void WebKit::NetworkSessionCocoa::cancelDataTask(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  WebKit::NetworkSessionCocoa::BlobDataTaskClient *v13;
  uint64_t v14;
  void *v15;
  WTF *v16;
  void *v17;
  uint64_t v18;

  v18 = a2;
  v3 = (uint64_t *)(a1 + 976);
  v4 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 976), &v18);
  v5 = *(_QWORD **)(a1 + 976);
  if (v5)
    v5 += 2 * *((unsigned int *)v5 - 1);
  if (v5 == v4)
    goto LABEL_13;
  v6 = (void *)v4[1];
  v4[1] = 0;
  if (*v3)
  {
    v7 = *v3 + 16 * *(unsigned int *)(*v3 - 4);
    if ((_QWORD *)v7 == v4)
      goto LABEL_11;
  }
  else
  {
    if (!v4)
      goto LABEL_11;
    v7 = 0;
  }
  if ((_QWORD *)v7 != v4)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(v3, v4);
LABEL_11:
  if (v6)
  {
    objc_msgSend(v6, "cancel");
    CFRelease(v6);
    return;
  }
LABEL_13:
  v8 = *(_QWORD *)(a1 + 968);
  v9 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v8, v18);
  v10 = v9;
  if (v8)
    v11 = v8 + 16 * *(unsigned int *)(v8 - 4);
  else
    v11 = 0;
  if (v11 != v9)
  {
    v12 = (uint64_t *)(a1 + 968);
    v13 = *(WebKit::NetworkSessionCocoa::BlobDataTaskClient **)(v10 + 8);
    *(_QWORD *)(v10 + 8) = 0;
    if (*v12)
    {
      v14 = *v12 + 16 * *(unsigned int *)(*v12 - 4);
      if (v14 == v10)
      {
LABEL_24:
        if (v13)
        {
          (*(void (**)(_QWORD *))(**((_QWORD **)v13 + 2) + 16))(*((_QWORD **)v13 + 2));
          WebKit::NetworkSessionCocoa::BlobDataTaskClient::~BlobDataTaskClient(v13, v15);
          WTF::fastFree(v16, v17);
        }
        return;
      }
    }
    else
    {
      if (!v10)
        goto LABEL_24;
      v14 = 0;
    }
    if (v14 != v10)
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(v12, v10);
    goto LABEL_24;
  }
}

void sub_196FEEE00(_Unwind_Exception *exception_object, void *a2)
{
  WebKit::NetworkSessionCocoa::BlobDataTaskClient *v2;
  WTF *v4;
  void *v5;

  if (v2)
  {
    WebKit::NetworkSessionCocoa::BlobDataTaskClient::~BlobDataTaskClient(v2, a2);
    WTF::fastFree(v4, v5);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::NetworkSessionCocoa::removeDataTask(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v7 = a2;
  v3 = (uint64_t *)(a1 + 976);
  v4 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 976), &v7);
  v5 = *(_QWORD *)(a1 + 976);
  if (v5)
  {
    v6 = (_QWORD *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == v4)
      return;
  }
  else
  {
    if (!v4)
      return;
    v6 = 0;
  }
  if (v6 != v4)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(v3, v4);
}

_QWORD *WebKit::NetworkSessionCocoa::removeWebPageNetworkParameters(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  uint64_t *v11;
  _QWORD *v12;
  WebKit::SessionSet *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t *v20;
  _QWORD *result;
  WTF::StringImpl *v22;
  uint64_t v23;
  _QWORD *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  void *v32;

  v32 = a2;
  v3 = *(_QWORD *)(a1 + 872);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(void **)(v3 + 16 * v8);
    if (v9 != a2)
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(void **)(v3 + 16 * v8);
        ++v10;
        if (v9 == a2)
          goto LABEL_8;
      }
      v8 = *(unsigned int *)(v3 - 4);
    }
LABEL_8:
    if (v8 != *(_DWORD *)(v3 - 4))
    {
      v11 = (uint64_t *)(a1 + 872);
      v12 = (_QWORD *)(v3 + 16 * v8);
      v13 = (WebKit::SessionSet *)v12[1];
      *v12 = -1;
      v12[1] = 0;
      if (v13)
        WTF::RefCounted<WebKit::SessionSet>::deref(v13, a2);
      ++*(_DWORD *)(*v11 - 16);
      v14 = *v11;
      if (*v11)
        v15 = *(_DWORD *)(v14 - 12) - 1;
      else
        v15 = -1;
      *(_DWORD *)(v14 - 12) = v15;
      v16 = *v11;
      if (*v11)
      {
        v17 = 6 * *(_DWORD *)(v16 - 12);
        v18 = *(_DWORD *)(v16 - 4);
        if (v17 < v18 && v18 >= 9)
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash((uint64_t *)(a1 + 872), v18 >> 1, 0);
      }
    }
  }
  v20 = (uint64_t *)(a1 + 824);
  result = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 824), &v32);
  v23 = *(_QWORD *)(a1 + 824);
  if (v23)
  {
    v24 = (_QWORD *)(v23 + 16 * *(unsigned int *)(v23 - 4));
    if (v24 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v24 = 0;
  }
  if (v24 != result)
  {
    v25 = (WTF::StringImpl *)result[1];
    *result = -1;
    result[1] = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        result = (_QWORD *)WTF::StringImpl::destroy(v25, v22);
      else
        *(_DWORD *)v25 -= 2;
    }
    ++*(_DWORD *)(*v20 - 16);
    v26 = *v20;
    if (*v20)
      v27 = *(_DWORD *)(v26 - 12) - 1;
    else
      v27 = -1;
    *(_DWORD *)(v26 - 12) = v27;
    v28 = *v20;
    if (*v20)
    {
      v29 = 6 * *(_DWORD *)(v28 - 12);
      v30 = *(_DWORD *)(v28 - 4);
      if (v29 < v30 && v30 >= 9)
        return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash((uint64_t *)(a1 + 824), v30 >> 1, 0);
    }
  }
  return result;
}

uint64_t WebKit::NetworkSessionCocoa::countNonDefaultSessionSets(WebKit::NetworkSessionCocoa *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  WebKit::SessionSet **v7;
  int v8;
  WebKit::SessionSet **v9;
  WebKit::SessionSet *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  unsigned int v16;
  WebKit::SessionSet **v17;
  WebKit::SessionSet *v18;
  WebKit::SessionSet *v19;
  WebKit::SessionSet **v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  WebKit::SessionSet **v27;

  v27 = 0;
  v1 = *((_QWORD *)this + 109);
  if (v1)
  {
    v2 = *(unsigned int *)(v1 - 4);
    v3 = (_QWORD *)(v1 + 16 * v2);
    if (*(_DWORD *)(v1 - 12))
    {
      v4 = (_QWORD *)*((_QWORD *)this + 109);
      if ((_DWORD)v2)
      {
        v5 = 16 * v2;
        v4 = (_QWORD *)*((_QWORD *)this + 109);
        while ((unint64_t)(*v4 + 1) <= 1)
        {
          v4 += 2;
          v5 -= 16;
          if (!v5)
          {
            v4 = v3;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v4 = (_QWORD *)(v1 + 16 * v2);
  }
  else
  {
    v4 = 0;
    v2 = 0;
  }
  v3 = (_QWORD *)(v1 + 16 * v2);
  if (!v1)
  {
    v6 = 0;
    goto LABEL_13;
  }
LABEL_8:
  v6 = (_QWORD *)(v1 + 16 * *(unsigned int *)(v1 - 4));
LABEL_13:
  if (v6 == v4)
    return 0;
  do
  {
    v7 = v27;
    if (v27
      || (WTF::HashTable<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>>::expand((uint64_t *)&v27),
          (v7 = v27) != 0))
    {
      v8 = *((_DWORD *)v7 - 2);
    }
    else
    {
      v8 = 0;
    }
    v9 = 0;
    v10 = (WebKit::SessionSet *)v4[1];
    v11 = ((unint64_t)v10 + ~((_QWORD)v10 << 32)) ^ (((unint64_t)v10 + ~((_QWORD)v10 << 32)) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = (v13 >> 31) ^ v13;
    for (i = 1; ; ++i)
    {
      v16 = v14 & v8;
      v17 = &v7[v16];
      v18 = *v17;
      if (*v17 == (WebKit::SessionSet *)-1)
      {
        v9 = &v7[v16];
        goto LABEL_23;
      }
      if (!v18)
        break;
      if (v18 == v10)
        goto LABEL_33;
LABEL_23:
      v14 = i + v16;
    }
    if (v9)
    {
      *v9 = 0;
      --*((_DWORD *)v27 - 4);
      v19 = (WebKit::SessionSet *)v4[1];
      ++*(_DWORD *)v19;
      *v9 = v19;
      v17 = v9;
    }
    else
    {
      ++*(_DWORD *)v10;
      *v17 = v10;
    }
    v20 = v27;
    if (v27)
      v21 = *((_DWORD *)v27 - 3) + 1;
    else
      v21 = 1;
    *((_DWORD *)v27 - 3) = v21;
    v22 = (*((_DWORD *)v20 - 4) + v21);
    v23 = *((unsigned int *)v20 - 1);
    if (v23 > 0x400)
    {
      if (v23 <= 2 * v22)
LABEL_32:
        WTF::HashTable<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>>::expand((uint64_t *)&v27);
    }
    else if (3 * v23 <= 4 * v22)
    {
      goto LABEL_32;
    }
LABEL_33:
    v24 = v4 + 2;
    v4 = v3;
    if (v24 != v3)
    {
      v4 = v24;
      while ((unint64_t)(*v4 + 1) <= 1)
      {
        v4 += 2;
        if (v4 == v3)
        {
          v4 = v3;
          break;
        }
      }
    }
  }
  while (v4 != v6);
  if (!v27)
    return 0;
  v25 = *((unsigned int *)v27 - 3);
  WTF::HashTable<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>>::deallocateTable(v27, v17);
  return v25;
}

void sub_196FEF2E0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebKit::SessionSet **a10)
{
  if (a10)
    WTF::HashTable<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>>::deallocateTable(a10, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::NetworkSessionCocoa::hostNamesWithAlternativeServices@<X0>(WebKit::NetworkSessionCocoa *this@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  void *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  WTF::StringImpl *v19;
  _BYTE v20[24];
  int v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = (void *)objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)this + 108) + 40), "configuration"), "_alternativeServicesStorage");
  v4 = (void *)objc_msgSend(v3, "HTTPServiceEntriesWithFilter:", objc_msgSend(MEMORY[0x1E0C92D10], "emptyFilter"));
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  result = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v22, 16);
  v6 = result;
  if (result)
  {
    v7 = *(_QWORD *)v16;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v16 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * v8);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v14 = v19;
        MEMORY[0x19AEABCC8](&v19, objc_msgSend(v9, "host"));
        WebCore::SecurityOriginData::SecurityOriginData((WebCore::SecurityOriginData *)v20, (_DWORD **)&v14, (_DWORD **)&v19, (unsigned __int16)objc_msgSend(v9, "port") | 0x10000);
        v11 = v19;
        v19 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, v10);
          else
            *(_DWORD *)v11 -= 2;
        }
        v12 = v14;
        v14 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v10);
          else
            *(_DWORD *)v12 -= 2;
        }
        v13 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v13 == *(_DWORD *)(a2 + 8))
        {
          WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SecurityOriginData&>(a2, (unint64_t)v20);
        }
        else
        {
          std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__copy_constructor(*(_QWORD *)a2 + 32 * v13, (uint64_t)v20);
          ++*(_DWORD *)(a2 + 12);
        }
        if (v21 != -1)
          ((void (*)(WTF::StringImpl **, _BYTE *))off_1E34B5D48[v21])(&v19, v20);
        ++v8;
      }
      while (v6 != v8);
      result = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v22, 16);
      v6 = result;
    }
    while (result);
  }
  return result;
}

void sub_196FEF50C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, char a20,uint64_t a21,uint64_t a22,int a23)
{
  uint64_t v23;

  WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v23, a2);
  _Unwind_Resume(a1);
}

void WebKit::NetworkSessionCocoa::donateToSKAdNetwork(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  void *v6;
  __CFString *v7;
  const __CFString *i;
  WTF::StringImpl *v9;
  const __CFString *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  BOOL v16;
  int v17;
  int v18;
  int v19;
  WTF::StringImpl *v20;
  unsigned int v21;
  uint64_t v22;
  const char *v23;
  uint64_t j;
  __int16 v25;
  uint64_t v26;
  unint64_t v27;
  _WORD *v28;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t k;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  int v57;
  int v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  char v62[4];
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66[5];

  v66[4] = *MEMORY[0x1E0C80C00];
  v6 = (void *)objc_opt_new();
  if (!*(_BYTE *)(a2 + 48))
    goto LABEL_105;
  v2 = v6;
  objc_msgSend(v6, "setAppAdamId:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", *(_QWORD *)(a2 + 40)));
  v7 = *(_QWORD *)(a2 + 16) ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1E351F1B8;
  objc_msgSend(v2, "setAdNetworkRegistrableDomain:", v7);
  if (!*(_BYTE *)(a2 + 232))
    goto LABEL_105;
  v3 = *(_QWORD *)(a2 + 224);
  if (!v3)
    goto LABEL_106;
  *(_DWORD *)v3 += 2;
  for (i = (const __CFString *)WTF::StringImpl::operator NSString *(); ; i = &stru_1E351F1B8)
  {
    objc_msgSend(v2, "setImpressionId:", i);
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v3, v9);
      else
        *(_DWORD *)v3 -= 2;
    }
    if (*(_QWORD *)(a2 + 8))
      v10 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v10 = &stru_1E351F1B8;
    objc_msgSend(v2, "setSourceWebRegistrableDomain:", v10);
    objc_msgSend(v2, "setVersion:", CFSTR("4.0"));
    objc_msgSend(v2, "setAttributionContext:", 0);
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CF9D00], "sharedInstance"), "addInstallWebAttributionParamsWithConfig:completionHandler:", v2, &__block_literal_global_9);
    if (!*(_BYTE *)(a1 + 160))
      goto LABEL_100;
    if (*(_BYTE *)(a2 + 48))
    {
      v11 = *(_QWORD *)(a2 + 40);
      v3 = *(_QWORD *)(a2 + 16);
      if (v3)
        *(_DWORD *)v3 += 2;
      if (*(_BYTE *)(a2 + 232))
        break;
    }
LABEL_105:
    __break(1u);
LABEL_106:
    ;
  }
  v12 = *(_QWORD *)(a2 + 224);
  if (v12)
    *(_DWORD *)v12 += 4;
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
    *(_DWORD *)v13 += 2;
  v14 = 0;
  v15 = v11;
  do
  {
    ++v14;
    v16 = v15 > 9;
    v15 /= 0xAuLL;
  }
  while (v16);
  if (v3)
  {
    v17 = *(_DWORD *)(v3 + 4);
    if (v12)
      goto LABEL_26;
LABEL_108:
    v18 = 0;
    if (v13)
      goto LABEL_27;
    goto LABEL_109;
  }
  v17 = 0;
  if (!v12)
    goto LABEL_108;
LABEL_26:
  v18 = *(_DWORD *)(v12 + 4);
  if (v13)
  {
LABEL_27:
    v19 = *(_DWORD *)(v13 + 4);
    goto LABEL_28;
  }
LABEL_109:
  v19 = 0;
LABEL_28:
  WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(53, v14, 30, v17, 16, v18, 30, v19, (uint64_t)v62, 12);
  if (v62[0])
    goto LABEL_115;
  if (v3 && (*(_BYTE *)(v3 + 16) & 4) == 0
    || v12 && (*(_BYTE *)(v12 + 16) & 4) == 0
    || v13 && (*(_BYTE *)(v13 + 16) & 4) == 0)
  {
    v21 = v63;
    if (v63)
    {
      if (v63 <= 0x7FFFFFEF)
      {
        WTF::tryFastCompactMalloc((WTF *)(2 * v63 + 20));
        v22 = v66[0];
        if (v66[0])
        {
          *(_DWORD *)v66[0] = 2;
          *(_DWORD *)(v22 + 4) = v21;
          *(_QWORD *)(v22 + 8) = v22 + 20;
          *(_DWORD *)(v22 + 16) = 0;
          v23 = "Submitting potential install attribution for AdamId: ";
          for (j = 20; j != 126; j += 2)
          {
            v25 = *(unsigned __int8 *)v23++;
            *(_WORD *)(v22 + j) = v25;
          }
          v26 = 0;
          v27 = v11;
          do
          {
            *((_BYTE *)&v66[3] + v26--) = (v27 % 0xA) | 0x30;
            v16 = v27 > 9;
            v27 /= 0xAuLL;
          }
          while (v16);
          if (v26 + 26 <= 25)
          {
            v28 = (_WORD *)(v22 + 126);
            do
              *v28++ = *((unsigned __int8 *)&v66[3] + v26 + 1);
            while (!__CFADD__(v26++, 1));
          }
          v30 = 0;
          do
          {
            ++v30;
            v16 = v11 > 9;
            v11 /= 0xAuLL;
          }
          while (v16);
          v31 = 0;
          v32 = v22 + 126 + 2 * v30;
          do
          {
            *(_WORD *)(v22 + 2 * v30 + 126 + 2 * v31) = aAdnetworkregis[v31];
            ++v31;
          }
          while (v31 != 30);
          v33 = v32 + 60;
          v64 = v3;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v64, (char *)(v32 + 60));
          if (v64)
            v34 = *(unsigned int *)(v64 + 4);
          else
            v34 = 0;
          v35 = 0;
          v36 = v33 + 2 * v34;
          do
          {
            *(_WORD *)(v22 + 2 * v34 + 2 * v30 + 186 + 2 * v35) = aImpressionid[v35];
            ++v35;
          }
          while (v35 != 16);
          v37 = v36 + 32;
          v65 = v12;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v65, (char *)(v36 + 32));
          if (v65)
            v38 = *(unsigned int *)(v65 + 4);
          else
            v38 = 0;
          for (k = 0; k != 30; ++k)
            *(_WORD *)(2 * v34 + 2 * v38 + v22 + 2 * v30 + 218 + 2 * k) = aSourcewebregis[k];
          v66[0] = v13;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(v66, (char *)(v37 + 2 * v38 + 60));
          if (v66[0])
            v40 = *(unsigned int *)(v66[0] + 4);
          else
            v40 = 0;
          v41 = 0;
          v42 = 2 * v38 + 2 * v34 + 2 * v40 + v22 + 2 * v30 + 278;
          do
          {
            *(_WORD *)(v42 + 2 * v41) = aVersion3[v41];
            ++v41;
          }
          while (v41 != 12);
          goto LABEL_80;
        }
      }
LABEL_115:
      __break(0xC471u);
      return;
    }
LABEL_79:
    v22 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_80;
  }
  v43 = v63;
  if (!v63)
    goto LABEL_79;
  if ((v63 & 0x80000000) != 0)
    goto LABEL_115;
  WTF::tryFastCompactMalloc((WTF *)(v63 + 20));
  v22 = v66[0];
  if (!v66[0])
    goto LABEL_115;
  v44 = 0;
  *(_OWORD *)(v66[0] + 20) = *(_OWORD *)"Submitting potential install attribution for AdamId: ";
  *(_DWORD *)v22 = 2;
  *(_DWORD *)(v22 + 4) = v43;
  *(_QWORD *)(v22 + 8) = v22 + 20;
  *(_DWORD *)(v22 + 16) = 4;
  qmemcpy((void *)(v22 + 36), "tial install attribution for AdamId: ", 37);
  v45 = v11;
  do
  {
    *((_BYTE *)&v66[3] + v44--) = (v45 % 0xA) | 0x30;
    v16 = v45 > 9;
    v45 /= 0xAuLL;
  }
  while (v16);
  if (v44 + 26 <= 25)
    memcpy((void *)(v22 + 73), (char *)&v66[3] + v44 + 1, -v44);
  v46 = 0;
  do
  {
    ++v46;
    v16 = v11 > 9;
    v11 /= 0xAuLL;
  }
  while (v16);
  v47 = (char *)(v22 + 73 + v46);
  qmemcpy(v47, ", adNetworkRegistrableDomain: ", 30);
  v48 = v47 + 30;
  v64 = v3;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v64, v47 + 30);
  v49 = v64;
  if (v64)
    v49 = *(unsigned int *)(v64 + 4);
  v50 = &v48[v49];
  *(_OWORD *)v50 = *(_OWORD *)", impressionId: ";
  v51 = v50 + 16;
  v65 = v12;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v65, v50 + 16);
  v52 = v65;
  if (v65)
    v52 = *(unsigned int *)(v65 + 4);
  v53 = &v51[v52];
  qmemcpy(v53, ", sourceWebRegistrableDomain: ", 30);
  v54 = v53 + 30;
  v66[0] = v13;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(v66, v53 + 30);
  v55 = v66[0];
  if (v66[0])
    v55 = *(unsigned int *)(v66[0] + 4);
  v56 = &v54[v55];
  *(_QWORD *)v56 = *(_QWORD *)", version: 3";
  *((_DWORD *)v56 + 2) = 857750126;
LABEL_80:
  v61 = (WTF::StringImpl *)v22;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::destroy((WTF::StringImpl *)v13, v20);
      if (!v12)
        goto LABEL_91;
      goto LABEL_86;
    }
    *(_DWORD *)v13 -= 2;
  }
  if (!v12)
  {
LABEL_91:
    if (!v3)
      goto LABEL_97;
LABEL_94:
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v3, v20);
    else
      *(_DWORD *)v3 -= 2;
    goto LABEL_97;
  }
LABEL_86:
  v57 = *(_DWORD *)v12 - 2;
  if (*(_DWORD *)v12 == 2)
  {
    WTF::StringImpl::destroy((WTF::StringImpl *)v12, v20);
    v57 = *(_DWORD *)v12;
  }
  else
  {
    *(_DWORD *)v12 = v57;
  }
  v58 = v57 - 2;
  if (v58)
  {
    *(_DWORD *)v12 = v58;
    goto LABEL_91;
  }
  WTF::StringImpl::destroy((WTF::StringImpl *)v12, v20);
  if (v3)
    goto LABEL_94;
LABEL_97:
  WebKit::NetworkProcess::broadcastConsoleMessage(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 24), 14, 3, (uint64_t)&v61);
  v60 = v61;
  v61 = 0;
  if (!v60)
    goto LABEL_100;
  if (*(_DWORD *)v60 != 2)
  {
    *(_DWORD *)v60 -= 2;
LABEL_100:
    if (!v2)
      return;
    goto LABEL_101;
  }
  WTF::StringImpl::destroy(v60, v59);
  if (v2)
LABEL_101:
    CFRelease(v2);
}

void sub_196FEFD20(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  const void *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v8;
  int v9;

  if (*(_DWORD *)v6 == 2)
    WTF::StringImpl::destroy(v6, a2);
  else
    *(_DWORD *)v6 -= 2;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  if (v4)
  {
    v8 = *(_DWORD *)v4 - 2;
    if (*(_DWORD *)v4 == 2)
    {
      WTF::StringImpl::destroy(v4, a2);
      v8 = *(_DWORD *)v4;
    }
    else
    {
      *(_DWORD *)v4 = v8;
    }
    v9 = v8 - 2;
    if (v9)
      *(_DWORD *)v4 = v9;
    else
      WTF::StringImpl::destroy(v4, a2);
  }
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  if (v2)
    CFRelease(v2);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::NetworkSessionCocoa::deleteAlternativeServicesForHostNames(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  const __CFString *v8;

  result = objc_msgSend((id)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 864) + 40), "configuration"), "_alternativeServicesStorage");
  v4 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v4)
  {
    v5 = (void *)result;
    v6 = *(_QWORD **)a2;
    v7 = 8 * v4;
    do
    {
      if (*v6)
        v8 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v8 = &stru_1E351F1B8;
      result = objc_msgSend(v5, "removeHTTPAlternativeServiceEntriesWithRegistrableDomain:", v8);
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t WebKit::NetworkSessionCocoa::clearAlternativeServices(uint64_t a1, double a2)
{
  void *v3;

  v3 = (void *)objc_msgSend((id)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 864) + 40), "configuration"), "_alternativeServicesStorage");
  return objc_msgSend(v3, "removeHTTPAlternativeServiceEntriesCreatedAfterDate:", objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", a2));
}

uint64_t WebKit::NetworkSessionCocoa::forEachSessionWrapper(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  const WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  const WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  uint64_t v45;
  uint64_t v46;

  v3 = *a2;
  *a2 = 0;
  v4 = a1[108];
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, v4 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, v4 + 80);
  v6 = *(_QWORD *)(v4 + 24);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(*(_QWORD *)(v4 + 16), v6, v5);
  v10 = result;
  v11 = *(_QWORD *)(v4 + 16);
  if (v11)
    v12 = v11 + 16 * *(unsigned int *)(v11 - 4);
  else
    v12 = 0;
  v46 = v8;
  if (v12 != result)
  {
    do
    {
      v13 = *(_QWORD *)(v10 + 8);
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
      v45 = v10 + 16;
      result = WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)&v45, v13, v9);
      v10 = v45;
    }
    while (v45 != v12);
  }
  v14 = a1[109];
  if (v14)
  {
    v15 = *(unsigned int *)(v14 - 4);
    v16 = (_QWORD *)(v14 + 16 * v15);
    if (*(_DWORD *)(v14 - 12))
    {
      v17 = (_QWORD *)a1[109];
      if ((_DWORD)v15)
      {
        v18 = 16 * v15;
        v17 = (_QWORD *)a1[109];
        while ((unint64_t)(*v17 + 1) <= 1)
        {
          v17 += 2;
          v18 -= 16;
          if (!v18)
          {
            v17 = v16;
            goto LABEL_17;
          }
        }
      }
      goto LABEL_17;
    }
    v17 = (_QWORD *)(v14 + 16 * v15);
  }
  else
  {
    v17 = 0;
    v15 = 0;
  }
  v16 = (_QWORD *)(v14 + 16 * v15);
  if (v14)
  {
LABEL_17:
    v19 = (_QWORD *)(v14 + 16 * *(unsigned int *)(v14 - 4));
    goto LABEL_22;
  }
  v19 = 0;
LABEL_22:
  while (v17 != v19)
  {
    v20 = v17[1];
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, v20 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, v20 + 80);
    v22 = *(_QWORD *)(v20 + 24);
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(*(_QWORD *)(v20 + 16), v22, v21);
    v23 = result;
    v24 = *(_QWORD *)(v20 + 16);
    if (v24)
      v25 = v24 + 16 * *(unsigned int *)(v24 - 4);
    else
      v25 = 0;
    v46 = v8;
    if (v25 != result)
    {
      do
      {
        v26 = *(_QWORD *)(v23 + 8);
        if (v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
        v45 = v23 + 16;
        result = WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)&v45, v26, v9);
        v23 = v45;
      }
      while (v45 != v25);
    }
    v27 = v17 + 2;
    v17 = v16;
    if (v27 != v16)
    {
      v17 = v27;
      while ((unint64_t)(*v17 + 1) <= 1)
      {
        v17 += 2;
        if (v17 == v16)
        {
          v17 = v16;
          break;
        }
      }
    }
  }
  v28 = a1[110];
  if (!v28)
  {
    v30 = 0;
    v33 = 0;
    goto LABEL_44;
  }
  if (!*(_DWORD *)(v28 - 12))
  {
    v33 = *(unsigned int *)(v28 - 4);
    v30 = v28 + 16 * v33;
LABEL_44:
    v31 = v28 + 16 * v33;
    if (!v28)
      goto LABEL_41;
LABEL_45:
    v32 = v28 + 16 * *(unsigned int *)(v28 - 4);
    goto LABEL_46;
  }
  v29 = v28 + 16 * *(unsigned int *)(v28 - 4);
  v45 = a1[110];
  v46 = v29;
  result = WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)&v45, v8, v9);
  v30 = v45;
  v31 = v46;
  v28 = a1[110];
  if (v28)
    goto LABEL_45;
LABEL_41:
  v32 = 0;
LABEL_46:
  v44[0] = v30;
  v44[1] = v31;
  while (1)
  {
    v34 = v44[0];
    if (v44[0] == v32)
      break;
    v35 = *(_QWORD *)(v44[0] + 8);
    if (v35)
    {
      v36 = *(_QWORD *)(v35 + 8);
      if (v36)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, v36 + 32);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, v36 + 80);
        v38 = *(_QWORD *)(v36 + 24);
        if (v38)
          (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
        v39 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(*(_QWORD *)(v36 + 16), v38, v37);
        v40 = v39;
        v41 = *(_QWORD *)(v36 + 16);
        if (v41)
          v42 = v41 + 16 * *(unsigned int *)(v41 - 4);
        else
          v42 = 0;
        v46 = v8;
        if (v42 != v39)
        {
          do
          {
            v43 = *(_QWORD *)(v40 + 8);
            if (v43)
              (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
            v45 = v40 + 16;
            WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)&v45, v43, v9);
            v40 = v45;
          }
          while (v45 != v42);
        }
      }
    }
    v44[0] = v34 + 16;
    result = WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v44, v8, v9);
  }
  if (v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return result;
}

void sub_196FF0278(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::NetworkSessionCocoa::clearProxyConfigData(WebKit::NetworkSessionCocoa *this)
{
  void (*v2)(_QWORD);
  void *v3;
  void (*v4)(_QWORD);
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  CFTypeRef v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _QWORD *v15;
  CFTypeRef cf;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = (void (*)(_QWORD))nw_context_clear_proxiesPtr();
  if (v2)
  {
    v4 = v2;
    WTF::Vector<WTF::RetainPtr<NSObject  {objcproto18OS_nw_proxy_config}*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WebKit::NetworkSessionCocoa *)((char *)this + 920), v3);
    cf = objc_alloc_init(MEMORY[0x1E0C99E20]);
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v5 = off_1E34B6130;
    v5[1] = &cf;
    v15 = v5;
    WebKit::NetworkSessionCocoa::forEachSessionWrapper(this, (uint64_t *)&v15);
    if (v15)
      (*(void (**)(_QWORD *))(*v15 + 8))(v15);
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v6 = (void *)cf;
    v7 = objc_msgSend((id)cf, "countByEnumeratingWithState:objects:count:", &v11, v17, 16);
    if (v7)
    {
      v8 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v12 != v8)
            objc_enumerationMutation(v6);
          v4(*(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * i));
        }
        v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v11, v17, 16);
      }
      while (v7);
    }
    v10 = cf;
    cf = 0;
    if (v10)
      CFRelease(v10);
  }
}

void sub_196FF040C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void *nw_context_clear_proxiesPtr(void)
{
  void *result;
  void *v1;

  if (byte_1EE341543 == 1)
    return (void *)qword_1EE341570;
  if (byte_1EE341544 == 1)
  {
    v1 = (void *)qword_1EE341578;
  }
  else
  {
    v1 = dlopen("/usr/lib/libnetwork.dylib", 2);
    qword_1EE341578 = (uint64_t)v1;
    byte_1EE341544 = 1;
  }
  result = dlsym(v1, "nw_context_clear_proxies");
  qword_1EE341570 = (uint64_t)result;
  byte_1EE341543 = 1;
  return result;
}

uint64_t WebKit::NetworkSessionCocoa::removeNetworkWebsiteData(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  WebKit::AuxiliaryProcess *v11;
  const void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  const WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  void *v25;
  char *v26;
  void *v27;
  const WTF::StringImpl *v28;
  uint64_t v29;
  WTF *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  const __CFString *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  void *v43;
  uint64_t *v44;
  void *v45;
  uint64_t *v46;
  __int16 *v47;
  void *v48;
  _QWORD *v49;
  void *v50;
  uint64_t *v51;
  void *v52;
  _QWORD *v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  _QWORD v58[2];
  WTF *v59;
  const __CFString *v60;
  id v61;
  _QWORD v62[3];
  _QWORD v63[3];
  uint64_t v64;
  _QWORD v65[2];

  v65[1] = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a1 + 24);
  if (v10 < 0 && v10 != -1)
  {
    v40 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 16))(v40);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  }
  WebCore::applicationBundleIdentifier((WebCore *)a1);
  if ((WebKit::isParentProcessAFullWebBrowser(*(WebKit **)(a1 + 32), v11) & 1) == 0
    && (MEMORY[0x19AEABBCC](v55, "com.apple.webbookmarksd", 23) & 1) == 0)
  {
    goto LABEL_70;
  }
  if (byte_1EE341548 == 1)
  {
    if (!qword_1EE341598)
      goto LABEL_70;
  }
  else
  {
    qword_1EE341598 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/Symptoms.framework/Frameworks/SymptomAnalytics.framework/SymptomAnalytics", 2);
    byte_1EE341548 = 1;
    if (!qword_1EE341598)
      goto LABEL_70;
  }
  if (byte_1EE341549 == 1)
  {
    if (!qword_1EE3415A0)
      goto LABEL_70;
  }
  else
  {
    qword_1EE3415A0 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/Symptoms.framework/Frameworks/SymptomPresentationFeed.framework/SymptomPresentationFeed", 2);
    byte_1EE341549 = 1;
    if (!qword_1EE3415A0)
      goto LABEL_70;
  }
  if (byte_1EE34154A == 1)
  {
    if (!qword_1EE3415A8)
      goto LABEL_70;
  }
  else
  {
    qword_1EE3415A8 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/Symptoms.framework/Frameworks/SymptomPresentationLite.framework/SymptomPresentationLite", 2);
    byte_1EE34154A = 1;
    if (!qword_1EE3415A8)
      goto LABEL_70;
  }
  if (_MergedGlobals_29() && off_1ECE6C510())
  {
    if (HIBYTE(word_1EE34154B) == 1)
    {
      if ((word_1EE34154B & 1) != 0)
        goto LABEL_14;
    }
    else
    {
      if (byte_1EE34154A == 1)
      {
        v43 = (void *)qword_1EE3415A8;
      }
      else
      {
        v43 = dlopen("/System/Library/PrivateFrameworks/Symptoms.framework/Frameworks/SymptomPresentationLite.framework/SymptomPresentationLite", 2);
        qword_1EE3415A8 = (uint64_t)v43;
        byte_1EE34154A = 1;
      }
      v44 = (uint64_t *)dlsym(v43, "kSymptomAnalyticsServiceEndpoint");
      if (v44)
      {
        qword_1EE3415C0 = *v44;
        word_1EE34154B = 257;
LABEL_14:
        v12 = (const void *)objc_msgSend(objc_alloc((Class)_MergedGlobals_29()), "initWorkspaceWithService:", qword_1EE3415C0);
        v13 = (void *)objc_msgSend(objc_alloc((Class)off_1ECE6C510()), "initWithWorkspace:", v12);
        if ((objc_opt_respondsToSelector() & 1) == 0)
          goto LABEL_99;
        if (HIBYTE(word_1EE34154D) == 1)
        {
          if (!(_BYTE)word_1EE34154D)
            goto LABEL_99;
        }
        else
        {
          if (byte_1EE341549 == 1)
          {
            v45 = (void *)qword_1EE3415A0;
          }
          else
          {
            v45 = dlopen("/System/Library/PrivateFrameworks/Symptoms.framework/Frameworks/SymptomPresentationFeed.framework/SymptomPresentationFeed", 2);
            qword_1EE3415A0 = (uint64_t)v45;
            byte_1EE341549 = 1;
          }
          v46 = (uint64_t *)dlsym(v45, "kSymptomAnalyticsServiceDomainTrackingClearHistoryKey");
          v47 = &word_1EE34154D;
          if (!v46)
            goto LABEL_98;
          qword_1EE3415C8 = *v46;
          word_1EE34154D = 257;
        }
        if (HIBYTE(word_1EE34154F) == 1)
        {
          if (!(_BYTE)word_1EE34154F)
            goto LABEL_99;
        }
        else
        {
          if (byte_1EE341549 == 1)
          {
            v48 = (void *)qword_1EE3415A0;
          }
          else
          {
            v48 = dlopen("/System/Library/PrivateFrameworks/Symptoms.framework/Frameworks/SymptomPresentationFeed.framework/SymptomPresentationFeed", 2);
            qword_1EE3415A0 = (uint64_t)v48;
            byte_1EE341549 = 1;
          }
          v49 = dlsym(v48, "kSymptomAnalyticsServiceDomainTrackingClearHistoryBundleIDs");
          v47 = &word_1EE34154F;
          if (!v49)
            goto LABEL_98;
          unk_1EE3415D0 = *v49;
          word_1EE34154F = 257;
        }
        if (HIBYTE(word_1EE341551) == 1)
        {
          if (!(_BYTE)word_1EE341551)
            goto LABEL_99;
        }
        else
        {
          if (byte_1EE341549 == 1)
          {
            v50 = (void *)qword_1EE3415A0;
          }
          else
          {
            v50 = dlopen("/System/Library/PrivateFrameworks/Symptoms.framework/Frameworks/SymptomPresentationFeed.framework/SymptomPresentationFeed", 2);
            qword_1EE3415A0 = (uint64_t)v50;
            byte_1EE341549 = 1;
          }
          v51 = (uint64_t *)dlsym(v50, "kSymptomAnalyticsServiceDomainTrackingClearHistoryStartDate");
          v47 = &word_1EE341551;
          if (!v51)
            goto LABEL_98;
          qword_1EE3415D8 = *v51;
          word_1EE341551 = 257;
        }
        if (HIBYTE(word_1EE341553) == 1)
        {
          if ((_BYTE)word_1EE341553)
            goto LABEL_23;
LABEL_99:
          v54 = *a5;
          *a5 = 0;
          (*(void (**)(uint64_t))(*(_QWORD *)v54 + 16))(v54);
          (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
LABEL_100:
          if (v13)
            CFRelease(v13);
          if (v12)
            CFRelease(v12);
          goto LABEL_71;
        }
        if (byte_1EE341549 == 1)
        {
          v52 = (void *)qword_1EE3415A0;
        }
        else
        {
          v52 = dlopen("/System/Library/PrivateFrameworks/Symptoms.framework/Frameworks/SymptomPresentationFeed.framework/SymptomPresentationFeed", 2);
          qword_1EE3415A0 = (uint64_t)v52;
          byte_1EE341549 = 1;
        }
        v53 = dlsym(v52, "kSymptomAnalyticsServiceDomainTrackingClearHistoryEndDate");
        v47 = &word_1EE341553;
        if (v53)
        {
          unk_1EE3415E0 = *v53;
          word_1EE341553 = 257;
LABEL_23:
          v14 = objc_msgSend(MEMORY[0x1E0C99D68], "distantPast");
          if (a3)
            v14 = objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", *(double *)&a2);
          v15 = v14;
          v16 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
          if (*(_BYTE *)(a4 + 8))
          {
            v17 = objc_alloc(MEMORY[0x1E0C99DE8]);
            if (*(_QWORD *)a4)
              v18 = *(unsigned int *)(*(_QWORD *)a4 - 12);
            else
              v18 = 0;
            v19 = (void *)objc_msgSend(v17, "initWithCapacity:", v18);
            v58[0] = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin((uint64_t *)a4, v20, v21);
            v58[1] = v22;
            if (*(_QWORD *)a4)
              v23 = *(_QWORD *)a4 + 8 * *(unsigned int *)(*(_QWORD *)a4 - 4);
            else
              v23 = 0;
            while (v58[0] != v23)
            {
              v24 = *(WTF::StringImpl **)v58[0];
              if (*(_QWORD *)v58[0])
                *(_DWORD *)v24 += 2;
              v57 = v24;
              v25 = (void *)MEMORY[0x1E0CB3940];
              WTF::String::utf8();
              if (v59)
                v26 = (char *)v59 + 16;
              else
                v26 = 0;
              v29 = objc_msgSend(v25, "stringWithUTF8String:", v26);
              v30 = v59;
              v59 = 0;
              if (v30)
              {
                if (*(_DWORD *)v30 == 1)
                  WTF::fastFree(v30, v27);
                else
                  --*(_DWORD *)v30;
              }
              if (v29)
                objc_msgSend(v19, "addObject:", v29);
              v31 = v57;
              v56 = 0;
              if (v31)
              {
                if (*(_DWORD *)v31 == 2)
                  WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v27);
                else
                  *(_DWORD *)v31 -= 2;
              }
              v58[0] += 8;
              WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v58, (uint64_t)v27, v28);
            }
            if (v16)
              CFRelease(v16);
            v16 = v19;
          }
          if (MEMORY[0x19AEABBCC](v55, "com.apple.webbookmarksd", 23))
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v33 = (WTF::StringImpl *)v58[0];
            v34 = v55;
            v55 = (WTF::StringImpl *)v58[0];
            if (!v34)
              goto LABEL_58;
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, v32);
            else
              *(_DWORD *)v34 -= 2;
          }
          v33 = v55;
LABEL_58:
          v64 = qword_1EE3415C8;
          v62[0] = unk_1EE3415D0;
          if (v33)
            v35 = (const __CFString *)WTF::StringImpl::operator NSString *();
          else
            v35 = &stru_1E351F1B8;
          v60 = v35;
          v61 = v16;
          v63[0] = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v61, &v60, 1, v55, v56);
          v63[1] = v15;
          v62[1] = qword_1EE3415D8;
          v62[2] = unk_1EE3415E0;
          v63[2] = objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
          v65[0] = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v63, v62, 3);
          v36 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v65, &v64, 1);
          v37 = *a5;
          *a5 = 0;
          v38 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
          *v38 = MEMORY[0x1E0C809A0];
          v38[1] = 50331650;
          v38[2] = WTF::BlockPtr<void ()(NSDictionary *,NSError *)>::fromCallable<WebKit::NetworkSessionCocoa::removeNetworkWebsiteData(std::optional<WTF::WallTime>,std::optional<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkSessionCocoa::removeNetworkWebsiteData(std::optional<WTF::WallTime>,std::optional<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void *,NSDictionary *,NSError *)#1}::__invoke;
          v38[3] = &WTF::BlockPtr<void ()(NSDictionary *,NSError *)>::fromCallable<WebKit::NetworkSessionCocoa::removeNetworkWebsiteData(std::optional<WTF::WallTime>,std::optional<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkSessionCocoa::removeNetworkWebsiteData(std::optional<WTF::WallTime>,std::optional<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0)::descriptor;
          v38[4] = v37;
          objc_msgSend(v13, "performNetworkDomainsActionWithOptions:reply:", v36, v38);
          _Block_release(v38);
          if (v16)
            CFRelease(v16);
          goto LABEL_100;
        }
LABEL_98:
        *(_BYTE *)v47 = 0;
        *((_BYTE *)v47 + 1) = 1;
        goto LABEL_99;
      }
      word_1EE34154B = 256;
    }
  }
LABEL_70:
  v42 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v42 + 16))(v42);
  (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
LABEL_71:
  result = (uint64_t)v55;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
      return WTF::StringImpl::destroy(v55, v39);
    else
      *(_DWORD *)v55 -= 2;
  }
  return result;
}

void sub_196FF0D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, WTF *a13)
{
  uint64_t v13;

  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NetworkTaskCocoa::statelessCookieStorage(WebKit::NetworkTaskCocoa *this)
{
  uint64_t result;
  void *v2;
  const void *v3;

  if ((_MergedGlobals_176 & 1) != 0)
  {
    result = qword_1EE341558;
    if (qword_1EE341558)
      return result;
  }
  else
  {
    qword_1EE341558 = 0;
    _MergedGlobals_176 = 1;
  }
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C92C08]), "_initWithIdentifier:private:", 0, 1);
  v3 = (const void *)qword_1EE341558;
  qword_1EE341558 = (uint64_t)v2;
  if (v3)
  {
    CFRelease(v3);
    v2 = (void *)qword_1EE341558;
  }
  objc_msgSend(v2, "setCookieAcceptPolicy:", 1);
  return qword_1EE341558;
}

uint64_t WebKit::NetworkTaskCocoa::applyCookiePolicyForThirdPartyCloaking(WebCore::ResourceRequest const&)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v3 = *(WTF::StringImpl **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  objc_destroyWeak((id *)(a1 + 144));
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 120, v4);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 80, v5);
  v7 = *(WTF::StringImpl **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  return a1;
}

uint64_t WebKit::NetworkDataTaskCocoa::storedCredentialsPolicy(WebKit::NetworkDataTaskCocoa *this)
{
  return *((unsigned __int8 *)this + 104);
}

__n128 `non-virtual thunk to'WebKit::NetworkDataTaskCocoa::frameID@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = this[12];
  *a2 = result;
  a2[1].n128_u8[0] = 1;
  return result;
}

uint64_t `non-virtual thunk to'WebKit::NetworkDataTaskCocoa::pageID(WebKit::NetworkDataTaskCocoa *this)
{
  return *((_QWORD *)this + 26);
}

uint64_t `non-virtual thunk to'WebKit::NetworkDataTaskCocoa::storedCredentialsPolicy(WebKit::NetworkDataTaskCocoa *this)
{
  return *((unsigned __int8 *)this - 448);
}

unsigned int *WTF::BlockPtr<void ()(BOOL,NSObject  {objcproto16OS_dispatch_data}*,int)>::fromCallable<WebKit::NetworkCache::IOChannel::read(unsigned long,unsigned long,WTF::WorkQueueBase &,WTF::Function<void ()(WebKit::NetworkCache::Data &,int)> &&)::$_0>(WebKit::NetworkCache::IOChannel::read(unsigned long,unsigned long,WTF::WorkQueueBase &,WTF::Function<void ()(WebKit::NetworkCache::Data &,int)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  unsigned int *result;

  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  result = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebKit::NetworkCache::IOChannel,(WTF::DestructionThread)0>::deref(result, a2);
  return result;
}

void WTF::BlockPtr<void ()(BOOL,NSObject  {objcproto16OS_dispatch_data}*,int)>::fromCallable<WebKit::NetworkCache::IOChannel::read(unsigned long,unsigned long,WTF::WorkQueueBase &,WTF::Function<void ()(WebKit::NetworkCache::Data &,int)> &&)::$_0>(WebKit::NetworkCache::IOChannel::read(unsigned long,unsigned long,WTF::WorkQueueBase &,WTF::Function<void ()(WebKit::NetworkCache::Data &,int)> &&)::$_0)::{lambda(void *,BOOL,NSObject  {objcproto16OS_dispatch_data}*,int)#1}::__invoke(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4)
{
  NSObject *v7;
  void *size;
  uint64_t v9;
  id v10[3];
  char v11;

  if (!*(_BYTE *)(a1 + 48))
  {
    if (a3)
    {
      v7 = a3;
      size = (void *)dispatch_data_get_size(a3);
    }
    else
    {
      size = 0;
    }
    v10[0] = a3;
    v10[1] = 0;
    v10[2] = size;
    v11 = 0;
    v9 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, id *, uint64_t))(*(_QWORD *)v9 + 16))(v9, v10, a4);
    *(_BYTE *)(a1 + 48) = 1;
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (v10[0])

  }
}

void sub_196FF1120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v9;

  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (a9)

  _Unwind_Resume(a1);
}

unsigned int *WTF::BlockPtr<void ()(BOOL,NSObject  {objcproto16OS_dispatch_data}*,int)>::fromCallable<WebKit::NetworkCache::IOChannel::write(unsigned long,WebKit::NetworkCache::Data const&,WTF::WorkQueueBase &,WTF::Function<void ()(int)> &&)::$_0>(WebKit::NetworkCache::IOChannel::write(unsigned long,WebKit::NetworkCache::Data const&,WTF::WorkQueueBase &,WTF::Function<void ()(int)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  unsigned int *result;

  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  result = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebKit::NetworkCache::IOChannel,(WTF::DestructionThread)0>::deref(result, a2);
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL,NSObject  {objcproto16OS_dispatch_data}*,int)>::fromCallable<WebKit::NetworkCache::IOChannel::write(unsigned long,WebKit::NetworkCache::Data const&,WTF::WorkQueueBase &,WTF::Function<void ()(int)> &&)::$_0>(WebKit::NetworkCache::IOChannel::write(unsigned long,WebKit::NetworkCache::Data const&,WTF::WorkQueueBase &,WTF::Function<void ()(int)> &&)::$_0)::{lambda(void *,BOOL,NSObject  {objcproto16OS_dispatch_data}*,int)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void sub_196FF11D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::RegistrableDomain::matches(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v5;
  int i;
  unsigned int v7;
  int v8;

  if (!(_DWORD)a3 && (MEMORY[0x19AEABBCC](*a1, "nullOrigin", 10) & 1) != 0)
    return 1;
  result = WTF::StringView::endsWith();
  if (!(_DWORD)result)
    return result;
  if (!*a1)
    goto LABEL_16;
  v5 = *(_DWORD *)(*a1 + 4);
  if ((_DWORD)a3 == v5)
    return 1;
  for (i = ~v5; ; i = -1)
  {
    v7 = i + a3;
    if (!BYTE4(a3))
      break;
    if (a3 > v7)
    {
      v8 = *(unsigned __int8 *)(a2 + v7);
      return v8 == 46;
    }
LABEL_15:
    __break(1u);
LABEL_16:
    if (!(_DWORD)a3)
      return 1;
  }
  if (a3 <= v7)
    goto LABEL_15;
  v8 = *(unsigned __int16 *)(a2 + 2 * v7);
  return v8 == 46;
}

uint64_t WTF::equalLettersIgnoringASCIICaseCommon<WTF::StringImpl>(uint64_t a1, char *a2, unint64_t a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  uint64_t v9;
  int v10;

  if (a3 == *(_DWORD *)(a1 + 4))
  {
    v3 = *(unsigned __int8 **)(a1 + 8);
    if ((*(_BYTE *)(a1 + 16) & 4) != 0)
    {
      if (a3)
      {
        if ((*v3 | 0x20) == *a2)
        {
          v4 = 1;
          do
          {
            v5 = v4;
            if (a3 == v4)
              break;
            v6 = a2[v4];
            v7 = v3[v4++] | 0x20;
          }
          while (v7 == v6);
          return v5 >= a3;
        }
        return 0;
      }
    }
    else if (a3)
    {
      if ((*(unsigned __int16 *)v3 | 0x20) == (unsigned __int16)*a2)
      {
        v9 = 1;
        do
        {
          v5 = v9;
          if (a3 == v9)
            break;
          v10 = *(unsigned __int16 *)&v3[2 * v9++] | 0x20;
        }
        while (v10 == (unsigned __int16)a2[v5]);
        return v5 >= a3;
      }
      return 0;
    }
    return 1;
  }
  return 0;
}

unsigned __int8 *WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::NetworkDataTaskCocoa::resume(void)::$_0>(WebKit::NetworkDataTaskCocoa::resume(void)::$_0)::{lambda(void const*)#1}::__invoke(unsigned __int8 *result)
{
  uint64_t v1;

  v1 = *((_QWORD *)result + 5);
  *((_QWORD *)result + 5) = 0;
  if (v1)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v1 + 8));
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::NetworkDataTaskCocoa::resume(void)::$_0>(WebKit::NetworkDataTaskCocoa::resume(void)::$_0)::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  v5 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v5 = &off_1E34B5C00;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 16) = v3;
  *(_BYTE *)(v5 + 24) = a2;
  v7 = v5;
  WTF::callOnMainRunLoop();
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

void sub_196FF1418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkDataTaskCocoa::resume(void)::$_0::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34B5C00;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkDataTaskCocoa::resume(void)::$_0::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34B5C00;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkDataTaskCocoa::resume(void)::$_0::operator()(BOOL)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(a1 + 24))
    return WebKit::NetworkDataTask::scheduleFailure(v2, 2);
  else
    return objc_msgSend(*(id *)(v2 + 608), "resume");
}

void WTF::BlockPtr<void ()(NSDictionary<NSURL *,NSNumber *> *,NSError *)>::fromCallable<WebKit::NetworkDataTaskCocoa::resume(void)::$_1>(WebKit::NetworkDataTaskCocoa::resume(void)::$_1)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    CFRelease(v2);
  _Block_release(*(const void **)(a1 + 32));
}

uint64_t WTF::BlockPtr<void ()(NSDictionary<NSURL *,NSNumber *> *,NSError *)>::fromCallable<WebKit::NetworkDataTaskCocoa::resume(void)::$_1>(WebKit::NetworkDataTaskCocoa::resume(void)::$_1)::{lambda(void *,NSDictionary<NSURL *,NSNumber *> *,NSError *)#1}::__invoke(uint64_t a1, void *a2, uint64_t a3)
{
  if (!a3)
    objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)), "integerValue");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t *WTF::BlockPtr<void ()(_NSHTTPConnectionInfo *)>::fromCallable<WebKit::NetworkDataTaskCocoa::setH2PingCallback(WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&)::$_0>(WebKit::NetworkDataTaskCocoa::setH2PingCallback(WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = *(WTF::StringImpl **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>::~CompletionHandlerWithFinalizer((uint64_t *)(a1 + 32));
}

WTF::StringImpl *WTF::BlockPtr<void ()(_NSHTTPConnectionInfo *)>::fromCallable<WebKit::NetworkDataTaskCocoa::setH2PingCallback(WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&)::$_0>(WebKit::NetworkDataTaskCocoa::setH2PingCallback(WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&)::$_0)::{lambda(void *,_NSHTTPConnectionInfo *)#1}::__invoke(uint64_t a1, void *a2)
{
  __int128 v4;
  _QWORD *v5;
  __int128 v6;
  WTF::StringImpl *result;
  uint64_t v8;
  WTF::StringImpl *v9;
  CFTypeRef v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  CFTypeRef v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  CFTypeRef v20;
  WTF::StringImpl *v21[2];
  WTF::StringImpl *v22;
  CFTypeRef cf;
  char v24;
  uint64_t v25[10];
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if ((objc_msgSend(a2, "isValid") & 1) != 0)
  {
    *(_OWORD *)v21 = 0u;
    v4 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)v25 = v4;
    v5 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v5 = MEMORY[0x1E0C809A0];
    v5[1] = 50331650;
    v5[2] = WTF::BlockPtr<void ()(NSError *,double)>::fromCallable<WebKit::NetworkDataTaskCocoa::setH2PingCallback(WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&)::$_0::operator()(_NSHTTPConnectionInfo *)::{lambda(NSError *,double)#1}>(WebKit::NetworkDataTaskCocoa::setH2PingCallback(WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&)::$_0::operator()(_NSHTTPConnectionInfo *)::{lambda(NSError *,double)#1})::{lambda(void *,NSError *,double)#1}::__invoke;
    v5[3] = &WTF::BlockPtr<void ()(NSError *,double)>::fromCallable<WebKit::NetworkDataTaskCocoa::setH2PingCallback(WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&)::$_0::operator()(_NSHTTPConnectionInfo *)::{lambda(NSError *,double)#1}>(WebKit::NetworkDataTaskCocoa::setH2PingCallback(WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&)::$_0::operator()(_NSHTTPConnectionInfo *)::{lambda(NSError *,double)#1})::descriptor;
    v6 = *(_OWORD *)v25;
    *(_OWORD *)v25 = 0uLL;
    *((_OWORD *)v5 + 2) = v6;
    WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>::~CompletionHandlerWithFinalizer(v25);
    objc_msgSend(a2, "sendPingWithReceiveHandler:", v5);
    _Block_release(v5);
    return (WTF::StringImpl *)WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>::~CompletionHandlerWithFinalizer((uint64_t *)v21);
  }
  else
  {
    WebCore::createInternalError();
    std::experimental::fundamentals_v3::unexpected<WebCore::ResourceError>::unexpected<WebCore::ResourceError>((uint64_t)v21, (uint64_t *)&v17);
    std::__variant_detail::__alt<1ul,WebCore::ResourceError>::__alt[abi:sn180100]<WebCore::ResourceError>((uint64_t)v25, (uint64_t *)v21);
    v26 = 1;
    v8 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 16))(v8, v25);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v26 != -1)
      ((void (*)(char *, uint64_t *))off_1E34B5C58[v26])(&v24, v25);
    v26 = -1;
    v10 = cf;
    cf = 0;
    if (v10)
      CFRelease(v10);
    v11 = v22;
    v22 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = v21[1];
    v21[1] = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v9);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v21[0];
    v21[0] = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v9);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v20;
    v20 = 0;
    if (v14)
      CFRelease(v14);
    v15 = v19;
    v19 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v9);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v18;
    v18 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v9);
      else
        *(_DWORD *)v16 -= 2;
    }
    result = v17;
    v17 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196FF1850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, CFTypeRef a17, uint64_t a18, WTF::StringImpl *a19, WTF::StringImpl *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,CFTypeRef cf)
{
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v30;
  uint64_t v31;

  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v31 = *(unsigned int *)(v28 - 48);
  if ((_DWORD)v31 != -1)
    ((void (*)(uint64_t, uint64_t))off_1E34B5C58[v31])(v28 - 129, v28 - 128);
  *(_DWORD *)(v28 - 48) = -1;
  if (cf)
    CFRelease(cf);
  if (a25)
  {
    if (*(_DWORD *)a25 == 2)
      WTF::StringImpl::destroy(a25, v30);
    else
      *(_DWORD *)a25 -= 2;
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2)
      WTF::StringImpl::destroy(a20, v30);
    else
      *(_DWORD *)a20 -= 2;
  }
  if (a19)
  {
    if (*(_DWORD *)a19 == 2)
      WTF::StringImpl::destroy(a19, v30);
    else
      *(_DWORD *)a19 -= 2;
  }
  if (a17)
    CFRelease(a17);
  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, v30);
    else
      *(_DWORD *)a15 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v30);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v30);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t std::experimental::fundamentals_v3::unexpected<WebCore::ResourceError>::unexpected<WebCore::ResourceError>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  WTF::URL::URL(a1 + 8, a2 + 1);
  v5 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(a1 + 48) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 14);
  *(_WORD *)(a1 + 60) = *((_WORD *)a2 + 30);
  *(_DWORD *)(a1 + 56) = v5;
  v6 = a2[8];
  a2[8] = 0;
  *(_QWORD *)(a1 + 64) = v6;
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  return a1;
}

void sub_196FF1A40(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v4;

  v4 = *v2;
  *v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__alt<1ul,WebCore::ResourceError>::__alt[abi:sn180100]<WebCore::ResourceError>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  WTF::URL::URL(a1 + 8, a2 + 1);
  v5 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(a1 + 48) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 14);
  *(_WORD *)(a1 + 60) = *((_WORD *)a2 + 30);
  *(_DWORD *)(a1 + 56) = v5;
  v6 = a2[8];
  a2[8] = 0;
  *(_QWORD *)(a1 + 64) = v6;
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  return a1;
}

void sub_196FF1AD4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v4;

  v4 = *v2;
  *v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF7SecondsEN7WebCore13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;

  v3 = (const void *)*((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t *WTF::BlockPtr<void ()(NSError *,double)>::fromCallable<WebKit::NetworkDataTaskCocoa::setH2PingCallback(WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&)::$_0::operator()(_NSHTTPConnectionInfo *)::{lambda(NSError *,double)#1}>(WebKit::NetworkDataTaskCocoa::setH2PingCallback(WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&)::$_0::operator()(_NSHTTPConnectionInfo *)::{lambda(NSError *,double)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  return WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>::~CompletionHandlerWithFinalizer((uint64_t *)(a1 + 32));
}

uint64_t WTF::BlockPtr<void ()(NSError *,double)>::fromCallable<WebKit::NetworkDataTaskCocoa::setH2PingCallback(WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&)::$_0::operator()(_NSHTTPConnectionInfo *)::{lambda(NSError *,double)#1}>(WebKit::NetworkDataTaskCocoa::setH2PingCallback(WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&)::$_0::operator()(_NSHTTPConnectionInfo *)::{lambda(NSError *,double)#1})::{lambda(void *,NSError *,double)#1}::__invoke(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t result;
  char v4;
  _QWORD v5[10];
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  *(double *)v5 = a2;
  v6 = 0;
  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 16))(v2, v5);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (v6 != -1)
    return ((uint64_t (*)(char *, _QWORD *))off_1E34B5C58[v6])(&v4, v5);
  return result;
}

void sub_196FF1C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24)
{
  uint64_t v24;

  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  if (a24 != -1)
    ((void (*)(char *, char *))off_1E34B5C58[a24])(&a13, &a14);
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::saveCookies(NSHTTPCookieStorage *,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::saveCookies(NSHTTPCookieStorage *,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::saveCookies(NSHTTPCookieStorage *,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::saveCookies(NSHTTPCookieStorage *,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void *)#1}::__invoke(WTF::RunLoop *a1)
{
  uint64_t *v1;
  uint64_t result;
  uint64_t v3;

  v1 = (uint64_t *)((char *)a1 + 32);
  WTF::RunLoop::main(a1);
  WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v3, v1);
  WTF::RunLoop::dispatch();
  result = v3;
  v3 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_196FF1D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_196FF1F78(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,CFTypeRef a63)
{
  CFTypeRef cf;
  const void *v64;
  uint64_t v65;
  uint64_t v66;
  CFTypeRef v68;
  CFTypeRef v69;

  v68 = cf;
  cf = 0;
  if (v68)
    CFRelease(v68);
  v69 = a63;
  a63 = 0;
  if (v69)
    CFRelease(v69);
  WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)&a11, a2);
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  if (v66)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v66 + 8));
  CFRelease(v64);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<processServerTrustEvaluation(WebKit::NetworkSessionCocoa &,WebKit::SessionWrapper &,NSURLAuthenticationChallenge *,WebKit::NegotiatedLegacyTLS,unsigned long long,WebKit::NetworkDataTaskCocoa *,WTF::CompletionHandler<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)> &&)::{lambda(WebKit::AuthenticationChallengeDisposition,WebCore::Credential const&)#1},void,WTF::CompletionHandler<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)> &&,WebCore::Credential const>::~CallableWrapper(_QWORD *a1)
{
  const void *v2;
  uint64_t v3;

  *a1 = &off_1E34B5CD8;
  v2 = (const void *)a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<processServerTrustEvaluation(WebKit::NetworkSessionCocoa &,WebKit::SessionWrapper &,NSURLAuthenticationChallenge *,WebKit::NegotiatedLegacyTLS,unsigned long long,WebKit::NetworkDataTaskCocoa *,WTF::CompletionHandler<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)> &&)::{lambda(WebKit::AuthenticationChallengeDisposition,WebCore::Credential const&)#1},void,WTF::CompletionHandler<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)> &&,WebCore::Credential const>::~CallableWrapper(WTF *this, void *a2)
{
  const void *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34B5CD8;
  v3 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<processServerTrustEvaluation(WebKit::NetworkSessionCocoa &,WebKit::SessionWrapper &,NSURLAuthenticationChallenge *,WebKit::NegotiatedLegacyTLS,unsigned long long,WebKit::NetworkDataTaskCocoa *,WTF::CompletionHandler<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)> &&)::{lambda(WebKit::AuthenticationChallengeDisposition,WebCore::Credential const&)#1},void,WTF::CompletionHandler<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)> &&,WebCore::Credential const>::call(uint64_t a1, int a2, WebCore::Credential *this)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  switch(a2)
  {
    case 0:
      if (WebCore::Credential::nsCredential(this))
        goto LABEL_3;
      v9 = objc_msgSend(MEMORY[0x1E0C92C60], "credentialForTrust:", *(_QWORD *)(a1 + 16));
      v7 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v7 + 16))(v7, 0, v9);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    case 1:
      v5 = 1;
      goto LABEL_7;
    case 2:
      v5 = 2;
      goto LABEL_7;
    case 3:
      v5 = 3;
      goto LABEL_7;
    default:
LABEL_3:
      v5 = 0;
LABEL_7:
      v6 = WebCore::Credential::nsCredential(this);
      v7 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v5, v6);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
}

void sub_196FF21D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>,void,NSURLSessionAuthChallengeDisposition,NSURLCredential *>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34B5D00;
  _Block_release(*(const void **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>,void,NSURLSessionAuthChallengeDisposition,NSURLCredential *>::~CallableWrapper(const void **a1)
{
  void *v2;

  *a1 = off_1E34B5D00;
  _Block_release(a1[1]);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>,void,NSURLSessionAuthChallengeDisposition,NSURLCredential *>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t ___ZL23extractResolutionReportP7NSError_block_invoke(uint64_t a1, nw_interface_t interface)
{
  void *v3;
  nw_interface_type_t type;
  const __CFString *v5;
  void *v6;
  const char *name;
  const char *v8;
  _QWORD v10[2];
  _QWORD v11[3];

  v11[2] = *MEMORY[0x1E0C80C00];
  v3 = *(void **)(a1 + 32);
  v10[0] = CFSTR("type");
  type = nw_interface_get_type(interface);
  if (type > nw_interface_type_loopback)
    v5 = &stru_1E351F1B8;
  else
    v5 = off_1E34B6248[type];
  v11[0] = v5;
  v10[1] = CFSTR("name");
  v6 = (void *)MEMORY[0x1E0CB3940];
  name = nw_interface_get_name(interface);
  if (name)
    v8 = name;
  else
    v8 = "";
  v11[1] = objc_msgSend(v6, "stringWithUTF8String:", v8);
  objc_msgSend(v3, "addObject:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v11, v10, 2));
  return 1;
}

CFTypeRef __copy_helper_block_e8_32c38_ZTSN3WTF9RetainPtrI14NSMutableArrayEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_32c38_ZTSN3WTF9RetainPtrI14NSMutableArrayEE(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    CFRelease(v2);
}

void std::make_unique[abi:sn180100]<WebKit::NetworkSessionCocoa,WebKit::NetworkProcess &,WebKit::NetworkSessionCreationParameters const&>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  const void *v11;
  _DWORD *v12;
  unint64_t v13;
  NSURLSessionConfiguration *v14;
  uint64_t v15;
  const char *v16;
  const char *v17;
  NSObject *v18;
  const char *v19;
  NSString *v20;
  uint64_t v21;
  uint64_t TemporaryDirectory;
  uint64_t v23;
  WTF::StringImpl *v24;
  int v25;
  uint64_t v26;
  id v27;
  void *v28;
  __CFString *v29;
  const void *v30;
  uint64_t v31;
  id v32;
  const __CFString *v33;
  const void *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  NSObject *v38;
  const WebKit::SandboxExtensionHandle *v39;
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  void *v45;
  const __CFString *v46;
  const void *v47;
  const void *v48;
  const void *v49;
  uint64_t v50;
  WebKit::LegacyCustomProtocolManager *v51;
  WebCore::NetworkStorageSession *v52;
  WebCore::NetworkStorageSession *v53;
  const void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  _QWORD *v61;
  WTF::StringImpl *v62;
  int v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  const void *v68;
  _BYTE buf[22];
  __int16 v70;
  const char *v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v6 = WTF::fastMalloc((WTF *)0x3D8);
  WebKit::NetworkSession::NetworkSession((WebKit::NetworkSession *)v6, (WebKit::NetworkProcess *)a2, (const WebKit::NetworkSessionCreationParameters *)a3);
  *(_QWORD *)v6 = off_1E34B5A38;
  v7 = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)v7 = 1;
  *(_OWORD *)(v7 + 8) = 0u;
  *(_OWORD *)(v7 + 24) = 0u;
  *(_OWORD *)(v7 + 40) = 0u;
  *(_OWORD *)(v7 + 56) = 0u;
  *(_OWORD *)(v7 + 72) = 0u;
  *(_OWORD *)(v7 + 88) = 0u;
  *(_OWORD *)(v7 + 104) = 0u;
  *(_QWORD *)(v7 + 120) = 0;
  *(_QWORD *)(v6 + 864) = v7;
  *(_OWORD *)(v6 + 872) = 0u;
  v8 = *(_DWORD **)(a3 + 32);
  if (v8)
    *v8 += 2;
  *(_QWORD *)(v6 + 888) = v8;
  v9 = *(_DWORD **)(a3 + 56);
  if (v9)
    *v9 += 2;
  *(_QWORD *)(v6 + 896) = v9;
  v10 = *(_DWORD **)(a3 + 64);
  if (v10)
    *v10 += 2;
  *(_QWORD *)(v6 + 904) = v10;
  v11 = *(const void **)(a3 + 48);
  *(_QWORD *)(v6 + 912) = v11;
  v66 = v6 + 872;
  if (v11)
    CFRetain(v11);
  *(_WORD *)(v6 + 944) = 0;
  *(_QWORD *)(v6 + 936) = 0;
  v65 = v6 + 920;
  *(_OWORD *)(v6 + 920) = 0u;
  *(_BYTE *)(v6 + 946) = *(_BYTE *)(a3 + 72);
  *(_BYTE *)(v6 + 947) = *(_BYTE *)(a3 + 312);
  v12 = *(_DWORD **)(a3 + 304);
  if (v12)
    *v12 += 2;
  *(_QWORD *)(v6 + 952) = v12;
  *(_BYTE *)(v6 + 960) = *(_BYTE *)(a3 + 332);
  *(_OWORD *)(v6 + 968) = 0uLL;
  v13 = *(_QWORD *)(v6 + 24);
  if ((v13 & 0x8000000000000000) != 0)
    goto LABEL_107;
LABEL_12:
  v14 = (NSURLSessionConfiguration *)objc_msgSend(MEMORY[0x1E0C92CA0], "defaultSessionConfiguration", v65, v66);
  v15 = 3;
  v16 = "sensitive";
  while (1)
  {
    -[NSURLSessionConfiguration set_shouldSkipPreferredClientCertificateLookup:](v14, "set_shouldSkipPreferredClientCertificateLookup:", 1, v65);
    v17 = NSSelectorFromString(CFSTR("set_loggingPrivacyLevel:"));
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      objc_msgSend(v14, v17, v15);
      v18 = qword_1ECE714B0;
      if (os_log_type_enabled((os_log_t)qword_1ECE714B0, OS_LOG_TYPE_DEFAULT))
      {
        v19 = "Regular";
        if ((v13 & 0x8000000000000000) != 0 && v13 != -1)
          v19 = "Ephemeral";
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = v19;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v13;
        v70 = 2082;
        v71 = v16;
        _os_log_impl(&dword_196BCC000, v18, OS_LOG_TYPE_DEFAULT, "Setting logging level for %{public}s session %llu to %{public}s", buf, 0x20u);
      }
    }
    -[NSURLSessionConfiguration set_connectionCacheNumPriorityLevels:](v14, "set_connectionCacheNumPriorityLevels:", 5);
    -[NSURLSessionConfiguration set_connectionCacheMinimumFastLanePriority:](v14, "set_connectionCacheMinimumFastLanePriority:", 2);
    -[NSURLSessionConfiguration set_connectionCacheNumFastLanes:](v14, "set_connectionCacheNumFastLanes:", 1);
    if ((objc_opt_respondsToSelector() & 1) != 0)
      -[NSURLSessionConfiguration set_skipsStackTraceCapture:](v14, "set_skipsStackTraceCapture:", 1);
    v21 = *(_QWORD *)(v6 + 24);
    if ((v21 & 0x8000000000000000) == 0 || v21 == -1)
    {
      TemporaryDirectory = WTF::FileSystemImpl::createTemporaryDirectory((WTF::FileSystemImpl *)CFSTR("BlobRegistryFiles"), v20);
      MEMORY[0x19AEABCC8](buf, TemporaryDirectory);
      v23 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      v24 = *(WTF::StringImpl **)(v6 + 696);
      *(_QWORD *)(v6 + 696) = v23;
      if (v24)
      {
        v25 = *(_DWORD *)v24 - 2;
        if (*(_DWORD *)v24 != 2)
          goto LABEL_24;
        WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v20);
        v24 = *(WTF::StringImpl **)buf;
        *(_QWORD *)buf = 0;
        if (!v24)
          goto LABEL_25;
        v25 = *(_DWORD *)v24 - 2;
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v20);
        else
LABEL_24:
          *(_DWORD *)v24 = v25;
      }
    }
LABEL_25:
    v13 = 0x1E0C99000uLL;
    if (*(_QWORD *)(a3 + 176))
    {
      v26 = *(_QWORD *)(v6 + 24);
      if ((v26 & 0x8000000000000000) == 0 || v26 == -1)
      {
        WebKit::SandboxExtension::consumePermanently((const char ***)(a3 + 184), (const WebKit::SandboxExtensionHandle *)v20);
        v27 = objc_alloc(MEMORY[0x1E0C92D00]);
        v28 = (void *)MEMORY[0x1E0C99E98];
        v29 = *(_QWORD *)(a3 + 176) ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1E351F1B8;
        v30 = (const void *)objc_msgSend(v27, "initPersistentStoreWithURL:", objc_msgSend(v28, "fileURLWithPath:isDirectory:", v29, 1));
        -[NSURLSessionConfiguration set_hstsStorage:](v14, "set_hstsStorage:", v30);
        if (v30)
          CFRelease(v30);
      }
    }
    if (*(_OWORD *)(a3 + 16) != 0)
    {
      v31 = *(_QWORD *)(v6 + 24);
      if ((v31 & 0x8000000000000000) == 0 || v31 == -1)
      {
        v32 = objc_alloc(MEMORY[0x1E0C92C68]);
        WTF::UUID::toString((WTF::UUID *)(a3 + 16));
        if (*(_QWORD *)buf)
          v33 = (const __CFString *)WTF::StringImpl::operator NSString *();
        else
          v33 = &stru_1E351F1B8;
        v34 = (const void *)objc_msgSend(v32, "_initWithIdentifier:private:", v33, 0);
        -[NSURLSessionConfiguration setURLCredentialStorage:](v14, "setURLCredentialStorage:", v34);
        if (v34)
          CFRelease(v34);
        v36 = *(WTF::StringImpl **)buf;
        *(_QWORD *)buf = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
            WTF::StringImpl::destroy(v36, v35);
          else
            *(_DWORD *)v36 -= 2;
        }
      }
    }
    if (!*(_BYTE *)(a3 + 334))
      goto LABEL_48;
    v37 = *(unsigned __int8 *)(a3 + 333);
    if (!*(_BYTE *)(a3 + 333))
      goto LABEL_47;
    v38 = qword_1ECE714B0;
    if (!os_log_type_enabled((os_log_t)qword_1ECE714B0, OS_LOG_TYPE_DEFAULT))
      break;
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_196BCC000, v38, OS_LOG_TYPE_DEFAULT, "Using experimental network loader.", buf, 2u);
    if (*(_BYTE *)(a3 + 334))
    {
      v37 = *(unsigned __int8 *)(a3 + 333);
      goto LABEL_47;
    }
LABEL_106:
    __break(1u);
LABEL_107:
    if (v13 == -1)
      goto LABEL_12;
    v63 = *(unsigned __int8 *)(a2 + 404);
    v14 = (NSURLSessionConfiguration *)objc_msgSend(MEMORY[0x1E0C92CA0], "ephemeralSessionConfiguration");
    v64 = v63 == 0;
    if (v63)
      v16 = "silent";
    else
      v16 = "sensitive";
    if (v64)
      v15 = 3;
    else
      v15 = 4;
  }
  v37 = 1;
LABEL_47:
  -[NSURLSessionConfiguration set_usesNWLoader:](v14, "set_usesNWLoader:", v37 != 0);
LABEL_48:
  if (*(_BYTE *)(a3 + 335) && (objc_opt_respondsToSelector() & 1) != 0)
    -[NSURLSessionConfiguration set_allowsHSTSWithUntrustedRootCertificate:](v14, "set_allowsHSTSWithUntrustedRootCertificate:", 1);
  -[NSURLSessionConfiguration set_preventsAppSSO:](v14, "set_preventsAppSSO:", 1);
  -[NSURLSessionConfiguration set_suppressedAutoAddedHTTPHeaders:](v14, "set_suppressedAutoAddedHTTPHeaders:", objc_msgSend(MEMORY[0x1E0C99E60], "setWithObject:", CFSTR("Content-Type")));
  if (!*(_BYTE *)(a3 + 40))
    -[NSURLSessionConfiguration setAllowsCellularAccess:](v14, "setAllowsCellularAccess:", 0);
  -[NSURLSessionConfiguration setURLCache:](v14, "setURLCache:", 0);
  WebKit::NetworkProcess::sourceApplicationAuditData((WebKit::NetworkProcess *)buf, *(_QWORD *)(a2 + 32));
  v40 = *(const void **)buf;
  if (*(_QWORD *)buf)
  {
    -[NSURLSessionConfiguration set_sourceApplicationAuditTokenData:](v14, "set_sourceApplicationAuditTokenData:", *(_QWORD *)buf);
    CFRelease(v40);
  }
  v41 = *(_QWORD *)(v6 + 896);
  if (v41 && *(_DWORD *)(v41 + 4))
  {
    -[NSURLSessionConfiguration set_sourceApplicationBundleIdentifier:](v14, "set_sourceApplicationBundleIdentifier:", WTF::StringImpl::operator NSString *());
    -[NSURLSessionConfiguration set_sourceApplicationAuditTokenData:](v14, "set_sourceApplicationAuditTokenData:", 0);
  }
  v42 = *(_QWORD *)(v6 + 904);
  if (v42 && *(_DWORD *)(v42 + 4))
    -[NSURLSessionConfiguration set_sourceApplicationSecondaryIdentifier:](v14, "set_sourceApplicationSecondaryIdentifier:", WTF::StringImpl::operator NSString *());
  v43 = *(_QWORD *)(a3 + 160);
  if (v43 && *(_DWORD *)(v43 + 4))
  {
    WebKit::SandboxExtension::consumePermanently((const char ***)(a3 + 168), v39);
    v44 = objc_alloc(MEMORY[0x1E0C92D18]);
    v45 = (void *)MEMORY[0x1E0C99E98];
    if (*(_QWORD *)(a3 + 160))
      v46 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v46 = &stru_1E351F1B8;
    v47 = (const void *)objc_msgSend(v44, "initPersistentStoreWithURL:", objc_msgSend((id)objc_msgSend(v45, "fileURLWithPath:isDirectory:", v46, 1), "URLByAppendingPathComponent:isDirectory:", CFSTR("AlternativeService.sqlite"), 0));
    -[NSURLSessionConfiguration set_alternativeServicesStorage:](v14, "set_alternativeServicesStorage:", v47);
    if (v47)
      CFRelease(v47);
    -[NSURLSessionConfiguration _alternativeServicesStorage](v14, "_alternativeServicesStorage");
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend((id)-[NSURLSessionConfiguration _alternativeServicesStorage](v14, "_alternativeServicesStorage"), "setCanSuspendLocked:", 1);
  }
  -[NSURLSessionConfiguration set_preventsSystemHTTPProxyAuthentication:](v14, "set_preventsSystemHTTPProxyAuthentication:", *(unsigned __int8 *)(a3 + 332));
  -[NSURLSessionConfiguration set_requiresSecureHTTPSProxyConnection:](v14, "set_requiresSecureHTTPSProxyConnection:", *(unsigned __int8 *)(a3 + 322));
  v48 = *(const void **)(a3 + 48);
  v49 = v48;
  if (!v48)
  {
    WebKit::proxyDictionary((uint64_t)&v68, (const WTF::URL *)(a3 + 80), (const WTF::URL *)(a3 + 120));
    v49 = v68;
  }
  -[NSURLSessionConfiguration setConnectionProxyDictionary:](v14, "setConnectionProxyDictionary:", v49);
  if (!v48 && v49)
    CFRelease(v49);
  v50 = *(_QWORD *)(v6 + 952);
  if (v50 && *(_DWORD *)(v50 + 4))
    -[NSURLSessionConfiguration set_CTDataConnectionServiceType:](v14, "set_CTDataConnectionServiceType:", WTF::StringImpl::operator NSString *());
  *(_QWORD *)buf = "LegacyCustomProtocolManager";
  *(_QWORD *)&buf[8] = 28;
  v51 = (WebKit::LegacyCustomProtocolManager *)WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(a2 + 192), (WTF::ASCIILiteralHash *)buf);
  WebKit::LegacyCustomProtocolManager::registerProtocolClass(v51, v14);
  -[NSURLSessionConfiguration set_timingDataOptions:](v14, "set_timingDataOptions:", 1);
  if (*(_BYTE *)(a3 + 320))
    -[NSURLSessionConfiguration set_socketStreamProperties:](v14, "set_socketStreamProperties:", &unk_1E356F7D0);
  *(_QWORD *)buf = *(_QWORD *)a3;
  v52 = (WebCore::NetworkStorageSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a2 + 216), buf);
  if (!v52)
  {
    __break(0xC471u);
    goto LABEL_106;
  }
  v53 = v52;
  WebCore::NetworkStorageSession::cookieStorage(v52);
  v54 = *(const void **)buf;
  *(_QWORD *)buf = 0;
  if (v54)
  {
    CFRelease(v54);
    v55 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C92C08]), "_initWithCFHTTPCookieStorage:", v54);
    -[NSURLSessionConfiguration setHTTPCookieStorage:](v14, "setHTTPCookieStorage:", v55);
  }
  else
  {
    WebCore::NetworkStorageSession::nsCookieStorage(v53);
    v55 = *(void **)buf;
  }
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v55, "set_overrideSessionCookieAcceptPolicy:", 1);
  WebKit::NetworkSessionCocoa::initializeNSURLSessionsInSet(v6, *(_QWORD *)(v6 + 864), (WebKit::AuxiliaryProcess *)v14);
  *(_WORD *)(v6 + 944) = *(_WORD *)(a3 + 192);
  v56 = *(_QWORD *)(v6 + 72);
  if (v56)
  {
    v57 = *(_QWORD *)(a3 + 584);
    if (!v57 || !*(_DWORD *)(v57 - 12))
      goto LABEL_93;
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable((uint64_t *)buf, (uint64_t *)(a3 + 584));
    v58 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v58 = off_1E34B6008;
    v67 = v58;
    WebKit::WebResourceLoadStatisticsStore::setAppBoundDomains(v56, (uint64_t *)buf, (const WTF::StringImpl *)&v67);
    if (v67)
      (*(void (**)(_QWORD *))(*v67 + 8))(v67);
    if (*(_QWORD *)buf)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)buf, v59);
    v56 = *(_QWORD *)(v6 + 72);
    if (v56)
    {
LABEL_93:
      v60 = *(_QWORD *)(a3 + 592);
      if (v60 && *(_DWORD *)(v60 - 12))
      {
        WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable((uint64_t *)buf, (uint64_t *)(a3 + 592));
        v61 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v61 = off_1E34B6030;
        v67 = v61;
        WebKit::WebResourceLoadStatisticsStore::setManagedDomains(v56, (uint64_t *)buf, (const WTF::StringImpl *)&v67);
        if (v67)
          (*(void (**)(_QWORD *))(*v67 + 8))(v67);
        if (*(_QWORD *)buf)
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)buf, v62);
      }
    }
  }
  if (*(_BYTE *)(a3 + 544))
    WebKit::NetworkSessionCocoa::setProxyConfigData(v6, (uint64_t *)(a3 + 528));
  if (v55)
    CFRelease(v55);
  *a1 = v6;
}

void sub_196FF2CB8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, WTF::StringImpl **a13)
{
  WebKit::NetworkSession *v13;
  const void *v14;
  uint64_t *v15;
  uint64_t v17;
  WTF::StringImpl *v18;
  const void *v19;
  WTF::StringImpl *v20;
  const void *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WebKit::SessionSet *v26;
  void *v27;

  if (a13)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a13, a2);
  if (v14)
    CFRelease(v14);
  v17 = *((_QWORD *)v13 + 122);
  if (v17)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v17, a2);
  if (*v15)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(*v15, a2);
  v18 = (WTF::StringImpl *)*((_QWORD *)v13 + 119);
  *((_QWORD *)v13 + 119) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = (const void *)*((_QWORD *)v13 + 117);
  *((_QWORD *)v13 + 117) = 0;
  if (v19)
    CFRelease(v19);
  WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a9, a2);
  v21 = (const void *)*((_QWORD *)v13 + 114);
  *((_QWORD *)v13 + 114) = 0;
  if (v21)
    CFRelease(v21);
  v22 = (WTF::StringImpl *)*((_QWORD *)v13 + 113);
  *((_QWORD *)v13 + 113) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v20);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = (WTF::StringImpl *)*((_QWORD *)v13 + 112);
  *((_QWORD *)v13 + 112) = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v20);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = (WTF::StringImpl *)*((_QWORD *)v13 + 111);
  *((_QWORD *)v13 + 111) = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v20);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = *((_QWORD *)v13 + 110);
  if (v25)
    WTF::HashTable<WebKit::WebPageNetworkParameters,WTF::KeyValuePair<WebKit::WebPageNetworkParameters,WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebPageNetworkParameters,WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebKit::WebPageNetworkParameters>,WTF::HashMap<WebKit::WebPageNetworkParameters,WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebKit::WebPageNetworkParameters>,WTF::HashTraits<WebKit::WebPageNetworkParameters>,WTF::HashTraits<WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebPageNetworkParameters>>::deallocateTable(v25, v20);
  if (*a10)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(*a10, v20);
  v26 = (WebKit::SessionSet *)*((_QWORD *)v13 + 108);
  *((_QWORD *)v13 + 108) = 0;
  if (v26)
    WTF::RefCounted<WebKit::SessionSet>::deref(v26, v20);
  WebKit::NetworkSession::~NetworkSession(v13);
  WTF::fastFree(v13, v27);
  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      if (*(_QWORD *)(a1 + 16 * i) != -1)
      {
        v5 = a1 + 16 * i;
        v6 = *(unsigned int **)(v5 + 8);
        *(_QWORD *)(v5 + 8) = 0;
        if (v6)
        {
          do
          {
            v7 = __ldaxr(v6);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, v6));
          if (!v8)
          {
            atomic_store(1u, v6);
            WTF::fastFree((WTF *)v6, a2);
          }
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WTF::StringImpl **)(a1 + 8);
    do
    {
      v5 = *(v4 - 1);
      if (v5 != (WTF::StringImpl *)-1)
      {
        a2 = *v4;
        *v4 = 0;
        if (a2)
        {
          std::default_delete<WebKit::IsolatedSession>::operator()[abi:sn180100]((uint64_t)v4, a2);
          v5 = *(v4 - 1);
        }
        *(v4 - 1) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  const void **v4;
  const void *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (const void **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (const void *)-1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
          CFRelease(v5);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebKit::NetworkSessionCocoa::BlobDataTaskClient **v4;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WebKit::NetworkSessionCocoa::BlobDataTaskClient **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WebKit::NetworkSessionCocoa::BlobDataTaskClient *)-1)
        std::unique_ptr<WebKit::NetworkSessionCocoa::BlobDataTaskClient>::reset[abi:sn180100](v4, 0);
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WebKit::WebPageNetworkParameters,WTF::KeyValuePair<WebKit::WebPageNetworkParameters,WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebPageNetworkParameters,WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebKit::WebPageNetworkParameters>,WTF::HashMap<WebKit::WebPageNetworkParameters,WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebKit::WebPageNetworkParameters>,WTF::HashTraits<WebKit::WebPageNetworkParameters>,WTF::HashTraits<WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebPageNetworkParameters>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF::StringImpl *v9;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = a1 + 16 * i;
      if (*(_QWORD *)v5 != -1)
      {
        v6 = *(unsigned int **)(v5 + 8);
        *(_QWORD *)(v5 + 8) = 0;
        if (v6)
        {
          do
          {
            v7 = __ldaxr(v6);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, v6));
          if (!v8)
          {
            atomic_store(1u, v6);
            WTF::fastFree((WTF *)v6, a2);
          }
        }
        v9 = *(WTF::StringImpl **)v5;
        *(_QWORD *)v5 = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v9 -= 2;
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebKit::SessionSet **v4;
  WebKit::SessionSet *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WebKit::SessionSet **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WebKit::SessionSet *)-1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
          WTF::RefCounted<WebKit::SessionSet>::deref(v5, a2);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void std::default_delete<WebKit::IsolatedSession>::operator()[abi:sn180100](uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  unsigned int **v8;
  void *v9;

  if (a2)
  {
    v3 = a2[5];
    if (v3)
      WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v3, a2);
    v4 = a2[4];
    if (v4)
      WTF::fastFree((WTF *)(v4 - 16), a2);
    v5 = a2[3];
    if (v5)
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v5, a2);
    v6 = (const void *)a2[2];
    a2[2] = 0;
    if (v6)
      CFRelease(v6);
    v7 = (const void *)a2[1];
    a2[1] = 0;
    if (v7)
      CFRelease(v7);
    v8 = WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)a2, a2);
    WTF::fastFree((WTF *)v8, v9);
  }
}

uint64_t WebCore::SecurityOriginData::SecurityOriginData(WebCore::SecurityOriginData *this, _DWORD **a2, _DWORD **a3, int a4)
{
  _DWORD *v5;
  _DWORD *v6;
  int v7;
  uint64_t result;

  v5 = *a2;
  if (*a2)
    *v5 += 2;
  v6 = *a3;
  if (*a3)
    *v6 += 2;
  *(_QWORD *)this = v5;
  *((_QWORD *)this + 1) = v6;
  *((_DWORD *)this + 4) = a4 & 0xFFFFFF;
  *((_DWORD *)this + 6) = 0;
  WebCore::SecurityOriginData::isHashTableDeletedValue(this);
  if (!v7)
    return (uint64_t)this;
  result = 58;
  __break(0xC471u);
  return result;
}

void sub_196FF3290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 24);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_1E34B5D48[v15])(&a13, v13);
  *(_DWORD *)(v13 + 24) = -1;
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::createChallengeCompletionHandler(WTF::Ref<WebKit::NetworkProcess,WTF::RawPtrTraits<WebKit::NetworkProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcess>> &&,PAL::SessionID,WebCore::AuthenticationChallenge const&,WTF::String const&,unsigned long long,WTF::CompletionHandler<void ()(WebKit::AuthenticationChallengeDisposition,PAL::SessionID::Credential const&)> &&)::$_0,void,WTF::CompletionHandler,PAL::SessionID::Credential const>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  const void *v4;
  const void *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;

  *a1 = off_1E34B5D68;
  v3 = (WTF::StringImpl *)a1[59];
  a1[59] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (const void *)a1[57];
  a1[57] = 0;
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[56];
  a1[56] = 0;
  if (v5)
    CFRelease(v5);
  WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)(a1 + 4), a2);
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 30;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 30);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  v10 = a1[1];
  a1[1] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::createChallengeCompletionHandler(WTF::Ref<WebKit::NetworkProcess,WTF::RawPtrTraits<WebKit::NetworkProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcess>> &&,PAL::SessionID,WebCore::AuthenticationChallenge const&,WTF::String const&,unsigned long long,WTF::CompletionHandler<void ()(WebKit::AuthenticationChallengeDisposition,PAL::SessionID::Credential const&)> &&)::$_0,void,WTF::CompletionHandler,PAL::SessionID::Credential const>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  const void *v4;
  const void *v5;
  void *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  *a1 = off_1E34B5D68;
  v3 = (WTF::StringImpl *)a1[59];
  a1[59] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (const void *)a1[57];
  a1[57] = 0;
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[56];
  a1[56] = 0;
  if (v5)
    CFRelease(v5);
  WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)(a1 + 4), a2);
  v7 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v7)
  {
    v8 = v7 + 30;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 30);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  v11 = a1[1];
  a1[1] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return WTF::fastFree((WTF *)a1, v6);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::createChallengeCompletionHandler(WTF::Ref<WebKit::NetworkProcess,WTF::RawPtrTraits<WebKit::NetworkProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcess>> &&,PAL::SessionID,WebCore::AuthenticationChallenge const&,WTF::String const&,unsigned long long,WTF::CompletionHandler<void ()(WebKit::AuthenticationChallengeDisposition,PAL::SessionID::Credential const&)> &&)::$_0,void,WTF::CompletionHandler,PAL::SessionID::Credential const>::call(_QWORD *a1, uint64_t a2, WebCore::CredentialBase *this)
{
  WebCore::ProtectionSpaceBase *v6;
  WebCore::ResourceResponseBase *v7;
  WebCore::ResourceResponseBase *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const WebCore::ProtectionSpace *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *result;
  CFTypeRef v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  __int128 v23;
  __int128 v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  CFTypeRef cf;
  uint64_t v28;

  if (WebCore::CredentialBase::persistence(this) == 1
    && (v6 = (WebCore::ProtectionSpaceBase *)WebCore::AuthenticationChallengeBase::protectionSpace((WebCore::AuthenticationChallengeBase *)(a1 + 4)),
        WebCore::ProtectionSpaceBase::isPasswordBased(v6)))
  {
    WebCore::CredentialBase::user(this);
    WebCore::CredentialBase::password(this);
    WebCore::CredentialBase::CredentialBase();
    cf = 0;
    WTF::URL::URL((WTF::URL *)&v22);
    v7 = (WebCore::ResourceResponseBase *)WebCore::AuthenticationChallengeBase::failureResponse((WebCore::AuthenticationChallengeBase *)(a1 + 4));
    if (WebCore::ResourceResponseBase::httpStatusCode(v7) == 401)
    {
      v8 = (WebCore::ResourceResponseBase *)WebCore::AuthenticationChallengeBase::failureResponse((WebCore::AuthenticationChallengeBase *)(a1 + 4));
      v9 = WebCore::ResourceResponseBase::url(v8);
      WTF::String::operator=(&v22, (WTF::StringImpl *)v9);
      v10 = *(_OWORD *)(v9 + 8);
      v24 = *(_OWORD *)(v9 + 24);
      v23 = v10;
    }
    v11 = a1[2];
    v28 = a1[3];
    v12 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v11 + 216), &v28);
    if (v12)
    {
      v13 = v12;
      v14 = (const WebCore::ProtectionSpace *)WebCore::AuthenticationChallengeBase::protectionSpace((WebCore::AuthenticationChallengeBase *)(a1 + 4));
      WebCore::CredentialStorage::set((WebCore::CredentialStorage *)(v13 + 96), (const WTF::String *)(a1 + 59), (const WebCore::Credential *)&v25, v14, (const WTF::URL *)&v22);
    }
    v15 = a1[1];
    a1[1] = 0;
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v15 + 16))(v15, a2, &v25);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v17 = v22;
    v22 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    v20 = cf;
    cf = 0;
    if (v20)
      CFRelease(v20);
    v21 = v26;
    v26 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v16);
      else
        *(_DWORD *)v21 -= 2;
    }
    result = v25;
    v25 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    v18 = a1[1];
    a1[1] = 0;
    (*(void (**)(uint64_t, uint64_t, WebCore::CredentialBase *))(*(_QWORD *)v18 + 16))(v18, a2, this);
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  return result;
}

void sub_196FF3674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, WTF::StringImpl *a15, uint64_t a16, CFTypeRef cf)
{
  uint64_t v17;
  WTF::StringImpl *v19;

  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v19);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (cf)
    CFRelease(cf);
  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, v19);
    else
      *(_DWORD *)a15 -= 2;
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, v19);
    else
      *(_DWORD *)a14 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SecurityOriginData::host(void)::{lambda(WebCore::SecurityOriginData::Tuple const&)#1},WebCore::SecurityOriginData::host(void)::{lambda(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SecurityOriginData::host(void)::{lambda(WebCore::SecurityOriginData::Tuple const&)#1},WebCore::SecurityOriginData::host(void)::{lambda(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>()
{
  return MEMORY[0x1E0CBF738];
}

uint64_t WebKit::NetworkSessionCocoa::loadImageForDecoding(WebCore::ResourceRequest &&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WebCore::ResourceRequest &&::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long,WebCore::ResourceRequest &&::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WebCore::ResourceRequest &&::Ref<WebCore::FragmentedSharedBuffer,WebCore::ResourceRequest &&::RawPtrTraits<WebCore::ResourceRequest &&::Ref>,WebCore::ResourceRequest &&::DefaultRefDerefTraits<WebCore::ResourceRequest &&::Ref>>> &&)> &&)::Client::willPerformHTTPRedirection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void sub_196FF3790(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NetworkSessionCocoa::loadImageForDecoding(WebCore::ResourceRequest &&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WebCore::ResourceRequest &&::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long,WebCore::ResourceRequest &&::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WebCore::ResourceRequest &&::Ref<WebCore::FragmentedSharedBuffer,WebCore::ResourceRequest &&::RawPtrTraits<WebCore::ResourceRequest &&::Ref>,WebCore::ResourceRequest &&::DefaultRefDerefTraits<WebCore::ResourceRequest &&::Ref>>> &&)> &&)::Client::didReceiveChallenge(_QWORD *a1, WebCore::AuthenticationChallengeBase *a2, char a3, uint64_t *a4)
{
  uint64_t *v8;
  const char *v9;
  _QWORD v11[2];

  v8 = (uint64_t *)(a1[2] + 192);
  v11[0] = "AuthenticationManager";
  v11[1] = 22;
  v9 = WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>(v8, (WTF::ASCIILiteralHash *)v11);
  return WebKit::AuthenticationManager::didReceiveAuthenticationChallenge((uint64_t)v9, a1[8], a1[9], 0, a2, a3, a4);
}

uint64_t WebKit::NetworkSessionCocoa::loadImageForDecoding(WebCore::ResourceRequest &&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WebCore::ResourceRequest &&::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long,WebCore::ResourceRequest &&::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WebCore::ResourceRequest &&::Ref<WebCore::FragmentedSharedBuffer,WebCore::ResourceRequest &&::RawPtrTraits<WebCore::ResourceRequest &&::Ref>,WebCore::ResourceRequest &&::DefaultRefDerefTraits<WebCore::ResourceRequest &&::Ref>>> &&)> &&)::Client::didReceiveResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;

  v5 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

void sub_196FF385C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::NetworkSessionCocoa::loadImageForDecoding(WebCore::ResourceRequest &&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WebCore::ResourceRequest &&::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long,WebCore::ResourceRequest &&::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WebCore::ResourceRequest &&::Ref<WebCore::FragmentedSharedBuffer,WebCore::ResourceRequest &&::RawPtrTraits<WebCore::ResourceRequest &&::Ref>,WebCore::ResourceRequest &&::DefaultRefDerefTraits<WebCore::ResourceRequest &&::Ref>>> &&)> &&)::Client::didReceiveData(_QWORD *a1)
{
  WTF::StringImpl *result;
  uint64_t v3;
  WTF::StringImpl *v4;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v5;
  WTF::StringImpl *v6;
  const void *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  const void *v16;

  WebCore::SharedBufferBuilder::ensureBuffer((WebCore::SharedBufferBuilder *)(a1 + 13));
  result = (WTF::StringImpl *)WebCore::FragmentedSharedBuffer::append();
  v3 = a1[13];
  if (v3 && *(_QWORD *)(v3 + 48) > a1[10])
  {
    MEMORY[0x19AEADCC0](&v13, objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB32E8], -1103, 0));
    WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)&v10);
    WebKit::NetworkSessionCocoa::loadImageForDecoding(WebCore::ResourceRequest &&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WebCore::ResourceRequest &&::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long,WebCore::ResourceRequest &&::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WebCore::ResourceRequest &&::Ref<WebCore::FragmentedSharedBuffer,WebCore::ResourceRequest &&::RawPtrTraits<WebCore::ResourceRequest &&::Ref>,WebCore::ResourceRequest &&::DefaultRefDerefTraits<WebCore::ResourceRequest &&::Ref>>> &&)> &&)::Client::didCompleteWithError(a1, (uint64_t)&v13);
    v5 = v12;
    v12 = 0;
    if (v5)
      WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v5);
    v6 = v11;
    v11 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v4);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = v16;
    v16 = 0;
    if (v7)
      CFRelease(v7);
    v8 = v15;
    v15 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v4);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = v14;
    v14 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v4);
      else
        *(_DWORD *)v9 -= 2;
    }
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196FF39C0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20,uint64_t a21,uint64_t a22,uint64_t a23,WebCore::AdditionalNetworkLoadMetricsForWebInspector *a24)
{
  uint64_t v24;
  const void *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;

  if (a24)
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(a24);
  if (a20)
  {
    if (*(_DWORD *)a20 == 2)
      WTF::StringImpl::destroy(a20, a2);
    else
      *(_DWORD *)a20 -= 2;
  }
  v26 = *(const void **)(v24 - 32);
  *(_QWORD *)(v24 - 32) = 0;
  if (v26)
    CFRelease(v26);
  v27 = *(WTF::StringImpl **)(v24 - 48);
  *(_QWORD *)(v24 - 48) = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, a2);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = *(WTF::StringImpl **)(v24 - 88);
  *(_QWORD *)(v24 - 88) = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, a2);
    else
      *(_DWORD *)v28 -= 2;
  }
  v29 = *(WTF::StringImpl **)(v24 - 96);
  *(_QWORD *)(v24 - 96) = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, a2);
    else
      *(_DWORD *)v29 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::NetworkSessionCocoa::loadImageForDecoding(WebCore::ResourceRequest &&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WebCore::ResourceRequest &&::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long,WebCore::ResourceRequest &&::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WebCore::ResourceRequest &&::Ref<WebCore::FragmentedSharedBuffer,WebCore::ResourceRequest &&::RawPtrTraits<WebCore::ResourceRequest &&::Ref>,WebCore::ResourceRequest &&::DefaultRefDerefTraits<WebCore::ResourceRequest &&::Ref>>> &&)> &&)::Client::didCompleteWithError(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  void *v6;
  unsigned int *v7;
  unsigned int *v9;
  char v10;
  _QWORD v11[10];
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 60))
  {
    WebCore::ResourceError::ResourceError((uint64_t)v11, a2);
    v12 = 0;
    v3 = a1[12];
    a1[12] = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 16))(v3, v11);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    if (v12 != -1)
      ((void (*)(unsigned int **, _QWORD *))off_1E34B5E18[v12])(&v9, v11);
  }
  else
  {
    WebCore::SharedBufferBuilder::take((WebCore::SharedBufferBuilder *)(a1 + 13));
    v4 = v9;
    v9 = 0;
    v11[0] = v4;
    v12 = 1;
    v5 = a1[12];
    a1[12] = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 16))(v5, v11);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    if (v12 != -1)
      ((void (*)(char *, _QWORD *))off_1E34B5E18[v12])(&v10, v11);
    v12 = -1;
    v7 = v9;
    v9 = 0;
    if (v7)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v7, v6);
  }
  return (*(uint64_t (**)(_QWORD *))(*a1 + 112))(a1);
}

void sub_196FF3BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24)
{
  uint64_t v24;
  void *v26;

  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  if (a24 != -1)
    ((void (*)(char *, char *))off_1E34B5E18[a24])(&a13, &a14);
  a24 = -1;
  if (a9)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a9, v26);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NetworkDataTaskClient::shouldCaptureExtraNetworkLoadMetrics(WebKit::NetworkDataTaskClient *this)
{
  return 0;
}

uint64_t WebKit::NetworkSessionCocoa::loadImageForDecoding(WebCore::ResourceRequest &&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WebCore::ResourceRequest &&::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long,WebCore::ResourceRequest &&::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WebCore::ResourceRequest &&::Ref<WebCore::FragmentedSharedBuffer,WebCore::ResourceRequest &&::RawPtrTraits<WebCore::ResourceRequest &&::Ref>,WebCore::ResourceRequest &&::DefaultRefDerefTraits<WebCore::ResourceRequest &&::Ref>>> &&)> &&)::Client::~Client(uint64_t a1, void *a2)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)a1 = off_1E34B5DA0;
  v3 = *(unsigned int **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, a2);
  v4 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v5 + 8));
  v6 = *(WTF::StringImpl **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v7)
  {
    v8 = v7 + 30;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 30);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  WTF::WeakPtrFactory<WebKit::NetworkDataTaskClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(a1 + 8), a2);
  return a1;
}

void WebKit::NetworkSessionCocoa::loadImageForDecoding(WebCore::ResourceRequest &&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WebCore::ResourceRequest &&::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long,WebCore::ResourceRequest &&::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WebCore::ResourceRequest &&::Ref<WebCore::FragmentedSharedBuffer,WebCore::ResourceRequest &&::RawPtrTraits<WebCore::ResourceRequest &&::Ref>,WebCore::ResourceRequest &&::DefaultRefDerefTraits<WebCore::ResourceRequest &&::Ref>>> &&)> &&)::Client::~Client(uint64_t a1, void *a2)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)a1 = off_1E34B5DA0;
  v3 = *(unsigned int **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, a2);
  v4 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v5 + 8));
  v6 = *(WTF::StringImpl **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v7)
  {
    v8 = v7 + 30;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 30);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  WTF::WeakPtrFactory<WebKit::NetworkDataTaskClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(a1 + 8), a2);
  JUMPOUT(0x19AEB936CLL);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore13ResourceErrorEN3WTF3RefINS8_22FragmentedSharedBufferENSA_12RawPtrTraitsISC_EENSA_21DefaultRefDerefTraitsISC_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJS9_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;

  v3 = (const void *)*((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore13ResourceErrorEN3WTF3RefINS8_22FragmentedSharedBufferENSA_12RawPtrTraitsISC_EENSA_21DefaultRefDerefTraitsISC_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJS9_SH_EEEEEEDcSL_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, a2);
  return result;
}

void WebKit::NetworkSessionCocoa::loadImageForDecoding(WebCore::ResourceRequest &&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WebCore::ResourceRequest &&::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long,WebCore::ResourceRequest &&::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WebCore::ResourceRequest &&::Ref<WebCore::FragmentedSharedBuffer,WebCore::ResourceRequest &&::RawPtrTraits<WebCore::ResourceRequest &&::Ref>,WebCore::ResourceRequest &&::DefaultRefDerefTraits<WebCore::ResourceRequest &&::Ref>>> &&)> &&)::Client::completeWithBlockedError(_QWORD *a1)
{
  WTF::StringImpl *v2;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v3;
  WTF::StringImpl *v4;
  const void *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  CFTypeRef v9;
  _BYTE v10[88];
  WTF::StringImpl *v11;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v12;
  _BYTE v13[192];
  CFTypeRef cf;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  const void *v18;

  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v13, (const WTF::URL *)(a1 + 3), 0);
  cf = 0;
  WebKit::blockedError((WebKit *)v13, (uint64_t)&v15);
  WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)v10);
  WebKit::NetworkSessionCocoa::loadImageForDecoding(WebCore::ResourceRequest &&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WebCore::ResourceRequest &&::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned long,WebCore::ResourceRequest &&::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WebCore::ResourceRequest &&::Ref<WebCore::FragmentedSharedBuffer,WebCore::ResourceRequest &&::RawPtrTraits<WebCore::ResourceRequest &&::Ref>,WebCore::ResourceRequest &&::DefaultRefDerefTraits<WebCore::ResourceRequest &&::Ref>>> &&)> &&)::Client::didCompleteWithError(a1, (uint64_t)&v15);
  v3 = v12;
  v12 = 0;
  if (v3)
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v3);
  v4 = v11;
  v11 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = v18;
  v18 = 0;
  if (v5)
    CFRelease(v5);
  v6 = v17;
  v17 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = v16;
  v16 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v15;
  v15 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = cf;
  cf = 0;
  if (v9)
    CFRelease(v9);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v13);
}

void sub_196FF4038(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF::StringImpl *a21,uint64_t a22,uint64_t a23,uint64_t a24,WebCore::AdditionalNetworkLoadMetricsForWebInspector *a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,CFTypeRef cf)
{
  uint64_t v50;
  const void *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  CFTypeRef v56;

  if (a25)
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(a25);
  if (a21)
  {
    if (*(_DWORD *)a21 == 2)
      WTF::StringImpl::destroy(a21, a2);
    else
      *(_DWORD *)a21 -= 2;
  }
  v52 = *(const void **)(v50 - 32);
  *(_QWORD *)(v50 - 32) = 0;
  if (v52)
    CFRelease(v52);
  v53 = *(WTF::StringImpl **)(v50 - 48);
  *(_QWORD *)(v50 - 48) = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, a2);
    else
      *(_DWORD *)v53 -= 2;
  }
  v54 = *(WTF::StringImpl **)(v50 - 88);
  *(_QWORD *)(v50 - 88) = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
      WTF::StringImpl::destroy(v54, a2);
    else
      *(_DWORD *)v54 -= 2;
  }
  v55 = *(WTF::StringImpl **)(v50 - 96);
  *(_QWORD *)(v50 - 96) = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
      WTF::StringImpl::destroy(v55, a2);
    else
      *(_DWORD *)v55 -= 2;
  }
  v56 = cf;
  cf = 0;
  if (v56)
    CFRelease(v56);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a26);
  _Unwind_Resume(a1);
}

WebKit::NetworkSessionCocoa::BlobDataTaskClient *std::unique_ptr<WebKit::NetworkSessionCocoa::BlobDataTaskClient>::reset[abi:sn180100](WebKit::NetworkSessionCocoa::BlobDataTaskClient **a1, WebKit::NetworkSessionCocoa::BlobDataTaskClient *a2)
{
  WebKit::NetworkSessionCocoa::BlobDataTaskClient *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::NetworkSessionCocoa::BlobDataTaskClient::~BlobDataTaskClient(result, a2);
    return (WebKit::NetworkSessionCocoa::BlobDataTaskClient *)WTF::fastFree(v4, v5);
  }
  return result;
}

void WebKit::NetworkSessionCocoa::BlobDataTaskClient::~BlobDataTaskClient(WebKit::NetworkSessionCocoa::BlobDataTaskClient *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned __int8 **v6;
  unsigned __int8 *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (unsigned __int8 **)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
  {
    v7 = *v6;
    if (__ldaxr(*v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, v7))
    {
      goto LABEL_10;
    }
    MEMORY[0x19AEABB3C](v7);
LABEL_10:
    v9 = *((_QWORD *)v7 + 1);
    v10 = v9 - 1;
    *((_QWORD *)v7 + 1) = v9 - 1;
    if (v9 == 1)
    {
      v16 = *((_QWORD *)v7 + 2);
      v11 = *((_QWORD *)v7 + 3);
      *((_QWORD *)v7 + 3) = 0;
      v12 = v16 == 0;
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
    v13 = __ldxr(v7);
    if (v13 == 1)
    {
      if (!__stlxr(0, v7))
      {
        if (v10)
          goto LABEL_20;
LABEL_18:
        v14 = WTF::fastMalloc((WTF *)0x20);
        *(_QWORD *)v14 = off_1E34ACA48;
        *(_QWORD *)(v14 + 8) = v7;
        *(_QWORD *)(v14 + 16) = v11;
        *(_BYTE *)(v14 + 24) = v12;
        v17 = v14;
        WTF::ensureOnMainRunLoop();
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        goto LABEL_20;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
    if (v10)
      goto LABEL_20;
    goto LABEL_18;
  }
LABEL_20:
  v15 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v15)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v15 + 8));
  WTF::WeakPtrFactory<WebKit::NetworkDataTaskClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::NetworkSessionCocoa::BlobDataTaskClient::~BlobDataTaskClient(this, a2);
  WTF::fastFree(v2, v3);
}

void sub_196FF42A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>>::deallocateTable(WebKit::SessionSet **a1, void *a2)
{
  uint64_t v3;
  WebKit::SessionSet **v4;
  WebKit::SessionSet *v5;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (WebKit::SessionSet *)-1)
      {
        *v4 = 0;
        if (v5)
          WTF::RefCounted<WebKit::SessionSet>::deref(v5, a2);
      }
      ++v4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

Class initAnalyticsWorkspace(void)
{
  Class result;

  if ((byte_1EE341548 & 1) == 0)
  {
    qword_1EE341598 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/Symptoms.framework/Frameworks/SymptomAnalytics.framework/SymptomAnalytics", 2);
    byte_1EE341548 = 1;
  }
  result = objc_getClass("AnalyticsWorkspace");
  qword_1EE3415B0 = (uint64_t)result;
  _MergedGlobals_29 = AnalyticsWorkspaceFunction;
  return result;
}

uint64_t AnalyticsWorkspaceFunction(void)
{
  return qword_1EE3415B0;
}

Class initUsageFeed(void)
{
  Class result;

  if ((byte_1EE341549 & 1) == 0)
  {
    qword_1EE3415A0 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/Symptoms.framework/Frameworks/SymptomPresentationFeed.framework/SymptomPresentationFeed", 2);
    byte_1EE341549 = 1;
  }
  result = objc_getClass("UsageFeed");
  qword_1EE3415B8 = (uint64_t)result;
  off_1ECE6C510 = UsageFeedFunction;
  return result;
}

uint64_t UsageFeedFunction(void)
{
  return qword_1EE3415B8;
}

uint64_t WTF::BlockPtr<void ()(NSDictionary *,NSError *)>::fromCallable<WebKit::NetworkSessionCocoa::removeNetworkWebsiteData(std::optional<WTF::WallTime>,std::optional<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkSessionCocoa::removeNetworkWebsiteData(std::optional<WTF::WallTime>,std::optional<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(NSDictionary *,NSError *)>::fromCallable<WebKit::NetworkSessionCocoa::removeNetworkWebsiteData(std::optional<WTF::WallTime>,std::optional<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkSessionCocoa::removeNetworkWebsiteData(std::optional<WTF::WallTime>,std::optional<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void *,NSDictionary *,NSError *)#1}::__invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_196FF4470(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl **WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString@<X0>(WTF::StringImpl **this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v4 = *this;
  if (*this && (v5 = *((_DWORD *)v4 + 1), *(_DWORD *)v4 += 2, v5))
  {
    *a2 = v4;
  }
  else
  {
    this = (WTF::StringImpl **)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *a2 = v7;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        return (WTF::StringImpl **)WTF::StringImpl::destroy(v4, v6);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return this;
}

void sub_196FF450C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::add<WebCore::RegistrableDomain>(uint64_t a1, uint64_t *a2, WTF::ASCIICaseInsensitiveHash **a3, WTF::StringImpl *a4)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  WTF **v11;
  const WTF::StringImpl *v12;
  const WTF::StringImpl *v13;
  WTF **v14;
  int v15;
  uint64_t result;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebCore::RegistrableDomain>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = WTF::ASCIICaseInsensitiveHash::hash(*a3, (const WTF::StringImpl *)a2) & v9;
  v11 = (WTF **)(v8 + 16 * v10);
  if ((WTF::equal(*v11, 0, v12) & 1) == 0)
  {
    v14 = 0;
    v15 = 1;
    do
    {
      if (*v11 == (WTF *)-1)
      {
        v14 = v11;
      }
      else
      {
        result = WTF::equalIgnoringASCIICase(*v11, *a3, v13);
        if ((_DWORD)result)
        {
          v23 = *a2;
          if (*a2)
            v24 = *(unsigned int *)(v23 - 4);
          else
            v24 = 0;
          v26 = 0;
          v25 = v23 + 16 * v24;
          goto LABEL_27;
        }
      }
      v10 = (v10 + v15) & v9;
      v11 = (WTF **)(v8 + 16 * v10);
      ++v15;
    }
    while (!WTF::equal(*v11, 0, v13));
    if (v14)
    {
      *v14 = 0;
      v14[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v11 = v14;
    }
  }
  WTF::String::operator=(v11, (WTF::StringImpl *)a3);
  result = (uint64_t)WTF::String::operator=(v11 + 1, a4);
  v17 = *a2;
  if (*a2)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v19 = *a2;
  if (*a2)
    v20 = *(_DWORD *)(v19 - 12);
  else
    v20 = 0;
  v21 = (*(_DWORD *)(v19 - 16) + v20);
  v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 <= 2 * v21)
    {
LABEL_21:
      result = (uint64_t)WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebCore::RegistrableDomain>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(a2, v11);
      v11 = (WTF **)result;
      v19 = *a2;
      if (*a2)
        v22 = *(unsigned int *)(v19 - 4);
      else
        v22 = 0;
    }
  }
  else if (3 * v22 <= 4 * v21)
  {
    goto LABEL_21;
  }
  v25 = v19 + 16 * v22;
  v26 = 1;
LABEL_27:
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v25;
  *(_BYTE *)(a1 + 16) = v26;
  return result;
}

WTF::StringImpl **WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebCore::RegistrableDomain>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::ASCIICaseInsensitiveHash **v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::ASCIICaseInsensitiveHash *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl **result;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    v5 = *(_DWORD *)(v3 - 12);
    if (v4)
    {
      v6 = v4 << (6 * v5 >= (2 * v4));
      goto LABEL_6;
    }
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v6 = 8;
LABEL_6:
  v7 = WTF::fastZeroedMalloc((WTF *)(16 * v6 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = v6;
  *(_DWORD *)(*a1 - 8) = v6 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = (WTF::ASCIICaseInsensitiveHash **)(v3 + 16 * v10);
      if (*v12 != (WTF::ASCIICaseInsensitiveHash *)-1)
      {
        if (WTF::equal(*v12, 0, v9))
        {
          v13 = v3 + 16 * v10;
          v14 = *(WTF::StringImpl **)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v8);
            else
              *(_DWORD *)v14 -= 2;
          }
          v23 = *v12;
          *v12 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v8);
            else
              *(_DWORD *)v23 -= 2;
          }
        }
        else
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = WTF::ASCIICaseInsensitiveHash::hash(*v12, v8);
          v18 = 0;
          do
          {
            v19 = v17 & v16;
            v20 = WTF::equal(*(WTF **)(v15 + 16 * v19), 0, v9);
            v17 = ++v18 + v19;
          }
          while (!v20);
          v21 = (WTF::StringImpl **)(v15 + 16 * v19);
          v22 = v21[1];
          v21[1] = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v8);
            else
              *(_DWORD *)v22 -= 2;
          }
          v24 = *v21;
          *v21 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v8);
            else
              *(_DWORD *)v24 -= 2;
          }
          v25 = *v12;
          *v12 = 0;
          *v21 = v25;
          v26 = v3 + 16 * v10;
          v27 = *(WTF::StringImpl **)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          v21[1] = v27;
          v28 = *(WTF::StringImpl **)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
              WTF::StringImpl::destroy(v28, v8);
            else
              *(_DWORD *)v28 -= 2;
          }
          v29 = *v12;
          *v12 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, v8);
            else
              *(_DWORD *)v29 -= 2;
          }
          if (v12 == a2)
            v11 = v21;
        }
      }
      ++v10;
    }
    while (v10 != v4);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v3)
      return result;
  }
  WTF::fastFree((WTF *)(v3 - 16), v8);
  return v11;
}

